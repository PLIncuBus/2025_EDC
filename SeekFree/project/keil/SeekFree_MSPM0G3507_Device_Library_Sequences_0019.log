/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0019.log
 *  Created     : 22:52:25 (01/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[22:52:25.892]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:52:25.892]  
[22:52:25.892]  <debugvars>
[22:52:25.892]    // Pre-defined
[22:52:25.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:25.892]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:25.892]    __dp=0x00000000
[22:52:25.892]    __ap=0x00000000
[22:52:25.892]    __traceout=0x00000000      (Trace Disabled)
[22:52:25.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:25.892]    __FlashAddr=0x00000000
[22:52:25.892]    __FlashLen=0x00000000
[22:52:25.892]    __FlashArg=0x00000000
[22:52:25.892]    __FlashOp=0x00000000
[22:52:25.892]    __Result=0x00000000
[22:52:25.892]  </debugvars>
[22:52:25.892]  
[22:52:25.892]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:52:25.896]    <block atomic="false" info="">
[22:52:25.896]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:52:25.896]        // -> [isSWJ <= 0x00000001]
[22:52:25.896]      __var hasDormant = __protocol & 0x00020000;
[22:52:25.896]        // -> [hasDormant <= 0x00000000]
[22:52:25.896]      __var protType   = __protocol & 0x0000FFFF;
[22:52:25.896]        // -> [protType <= 0x00000002]
[22:52:25.896]    </block>
[22:52:25.896]    <control if="protType == 1" while="" timeout="0" info="">
[22:52:25.896]      // if-block "protType == 1"
[22:52:25.896]        // =>  FALSE
[22:52:25.896]      // skip if-block "protType == 1"
[22:52:25.896]    </control>
[22:52:25.896]    <control if="protType == 2" while="" timeout="0" info="">
[22:52:25.896]      // if-block "protType == 2"
[22:52:25.896]        // =>  TRUE
[22:52:25.896]      <control if="isSWJ" while="" timeout="0" info="">
[22:52:25.896]        // if-block "isSWJ"
[22:52:25.896]          // =>  TRUE
[22:52:25.896]        <control if="hasDormant" while="" timeout="0" info="">
[22:52:25.896]          // if-block "hasDormant"
[22:52:25.896]            // =>  FALSE
[22:52:25.896]          // skip if-block "hasDormant"
[22:52:25.896]        </control>
[22:52:25.896]        <control if="!hasDormant" while="" timeout="0" info="">
[22:52:25.896]          // if-block "!hasDormant"
[22:52:25.896]            // =>  TRUE
[22:52:25.896]          <block atomic="false" info="">
[22:52:25.899]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:52:25.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:25.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:52:25.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:52:25.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:52:25.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:25.905]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:52:25.906]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:52:25.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:52:25.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:25.912]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:52:25.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:52:25.913]          </block>
[22:52:25.913]          // end if-block "!hasDormant"
[22:52:25.913]        </control>
[22:52:25.913]        // end if-block "isSWJ"
[22:52:25.913]      </control>
[22:52:25.913]      <control if="!isSWJ" while="" timeout="0" info="">
[22:52:25.913]        // if-block "!isSWJ"
[22:52:25.913]          // =>  FALSE
[22:52:25.914]        // skip if-block "!isSWJ"
[22:52:25.914]      </control>
[22:52:25.914]      <block atomic="false" info="">
[22:52:25.914]        ReadDP(0x0);
[22:52:25.915]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:52:25.915]      </block>
[22:52:25.915]      // end if-block "protType == 2"
[22:52:25.915]    </control>
[22:52:25.915]  </sequence>
[22:52:25.915]  
[22:52:25.917]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:52:25.917]  
[22:52:25.917]  <debugvars>
[22:52:25.919]    // Pre-defined
[22:52:25.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:25.919]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:25.919]    __dp=0x00000000
[22:52:25.919]    __ap=0x00000000
[22:52:25.919]    __traceout=0x00000000      (Trace Disabled)
[22:52:25.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:25.919]    __FlashAddr=0x00000000
[22:52:25.919]    __FlashLen=0x00000000
[22:52:25.919]    __FlashArg=0x00000000
[22:52:25.919]    __FlashOp=0x00000000
[22:52:25.919]    __Result=0x00000000
[22:52:25.919]  </debugvars>
[22:52:25.919]  
[22:52:25.919]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:52:25.919]    <block atomic="false" info="">
[22:52:25.919]      __var SW_DP_ABORT       = 0x0;
[22:52:25.921]        // -> [SW_DP_ABORT <= 0x00000000]
[22:52:25.921]      __var DP_CTRL_STAT      = 0x4;
[22:52:25.921]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:52:25.921]      __var DP_SELECT         = 0x8;
[22:52:25.921]        // -> [DP_SELECT <= 0x00000008]
[22:52:25.921]      __var powered_down      = 0;
[22:52:25.921]        // -> [powered_down <= 0x00000000]
[22:52:25.921]      WriteDP(DP_SELECT, 0x00000000);
[22:52:25.921]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:52:25.921]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:52:25.925]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:52:25.925]        // -> [powered_down <= 0x00000001]
[22:52:25.925]    </block>
[22:52:25.925]    <control if="powered_down" while="" timeout="0" info="">
[22:52:25.925]      // if-block "powered_down"
[22:52:25.925]        // =>  TRUE
[22:52:25.925]      <block atomic="false" info="">
[22:52:25.925]        Message(0, "Debug/System power-up request sent");
[22:52:25.925]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:52:25.925]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:52:25.925]      </block>
[22:52:25.925]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:52:25.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.929]        // while-condition  =>  TRUE
[22:52:25.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.933]        // while-condition  =>  TRUE
[22:52:25.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.933]        // while-condition  =>  TRUE
[22:52:25.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.937]        // while-condition  =>  TRUE
[22:52:25.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.939]        // while-condition  =>  TRUE
[22:52:25.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.941]        // while-condition  =>  TRUE
[22:52:25.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.950]        // while-condition  =>  TRUE
[22:52:25.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.953]        // while-condition  =>  TRUE
[22:52:25.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.961]        // while-condition  =>  TRUE
[22:52:25.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.965]        // while-condition  =>  TRUE
[22:52:25.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.965]        // while-condition  =>  TRUE
[22:52:25.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.973]        // while-condition  =>  TRUE
[22:52:25.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.978]        // while-condition  =>  TRUE
[22:52:25.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.979]        // while-condition  =>  TRUE
[22:52:25.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.979]        // while-condition  =>  TRUE
[22:52:25.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.982]        // while-condition  =>  TRUE
[22:52:25.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.986]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.986]        // while-condition  =>  TRUE
[22:52:25.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.989]        // while-condition  =>  TRUE
[22:52:25.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.989]        // while-condition  =>  TRUE
[22:52:25.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.993]        // while-condition  =>  TRUE
[22:52:25.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.993]        // while-condition  =>  TRUE
[22:52:25.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.997]        // while-condition  =>  TRUE
[22:52:25.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.999]        // while-condition  =>  TRUE
[22:52:25.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:25.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:25.999]        // while-condition  =>  TRUE
[22:52:25.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.001]        // while-condition  =>  TRUE
[22:52:26.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.001]        // while-condition  =>  TRUE
[22:52:26.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.005]        // while-condition  =>  TRUE
[22:52:26.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.013]        // while-condition  =>  TRUE
[22:52:26.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.018]        // while-condition  =>  TRUE
[22:52:26.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.022]        // while-condition  =>  TRUE
[22:52:26.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.024]        // while-condition  =>  TRUE
[22:52:26.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.026]        // while-condition  =>  TRUE
[22:52:26.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.026]        // while-condition  =>  TRUE
[22:52:26.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.030]        // while-condition  =>  TRUE
[22:52:26.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.036]        // while-condition  =>  TRUE
[22:52:26.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.038]        // while-condition  =>  TRUE
[22:52:26.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.042]        // while-condition  =>  TRUE
[22:52:26.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.042]        // while-condition  =>  TRUE
[22:52:26.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.046]        // while-condition  =>  TRUE
[22:52:26.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.050]        // while-condition  =>  TRUE
[22:52:26.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.050]        // while-condition  =>  TRUE
[22:52:26.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.054]        // while-condition  =>  TRUE
[22:52:26.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.054]        // while-condition  =>  TRUE
[22:52:26.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.062]        // while-condition  =>  TRUE
[22:52:26.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.066]        // while-condition  =>  TRUE
[22:52:26.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.069]        // while-condition  =>  TRUE
[22:52:26.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.070]        // while-condition  =>  TRUE
[22:52:26.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.073]        // while-condition  =>  TRUE
[22:52:26.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.075]        // while-condition  =>  TRUE
[22:52:26.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.075]        // while-condition  =>  TRUE
[22:52:26.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.075]        // while-condition  =>  TRUE
[22:52:26.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.079]        // while-condition  =>  TRUE
[22:52:26.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.083]        // while-condition  =>  TRUE
[22:52:26.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.086]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.086]        // while-condition  =>  TRUE
[22:52:26.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.088]        // while-condition  =>  TRUE
[22:52:26.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.089]        // while-condition  =>  TRUE
[22:52:26.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.091]        // while-condition  =>  TRUE
[22:52:26.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.092]        // while-condition  =>  TRUE
[22:52:26.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.094]        // while-condition  =>  TRUE
[22:52:26.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.096]        // while-condition  =>  TRUE
[22:52:26.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.098]        // while-condition  =>  TRUE
[22:52:26.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.100]        // while-condition  =>  TRUE
[22:52:26.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.103]        // while-condition  =>  TRUE
[22:52:26.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.105]        // while-condition  =>  TRUE
[22:52:26.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.110]        // while-condition  =>  TRUE
[22:52:26.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.115]        // while-condition  =>  TRUE
[22:52:26.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.117]        // while-condition  =>  TRUE
[22:52:26.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.126]        // while-condition  =>  TRUE
[22:52:26.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.128]        // while-condition  =>  TRUE
[22:52:26.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.131]        // while-condition  =>  TRUE
[22:52:26.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.136]        // while-condition  =>  TRUE
[22:52:26.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.139]        // while-condition  =>  TRUE
[22:52:26.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.142]        // while-condition  =>  TRUE
[22:52:26.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.142]        // while-condition  =>  TRUE
[22:52:26.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.146]        // while-condition  =>  TRUE
[22:52:26.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.149]        // while-condition  =>  TRUE
[22:52:26.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.149]        // while-condition  =>  TRUE
[22:52:26.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.149]        // while-condition  =>  TRUE
[22:52:26.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.154]        // while-condition  =>  TRUE
[22:52:26.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.160]        // while-condition  =>  TRUE
[22:52:26.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.163]        // while-condition  =>  TRUE
[22:52:26.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.166]        // while-condition  =>  TRUE
[22:52:26.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.169]        // while-condition  =>  TRUE
[22:52:26.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.171]        // while-condition  =>  TRUE
[22:52:26.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.172]        // while-condition  =>  TRUE
[22:52:26.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.175]        // while-condition  =>  TRUE
[22:52:26.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.175]        // while-condition  =>  TRUE
[22:52:26.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.183]        // while-condition  =>  TRUE
[22:52:26.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.189]        // while-condition  =>  TRUE
[22:52:26.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.191]        // while-condition  =>  TRUE
[22:52:26.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.191]        // while-condition  =>  TRUE
[22:52:26.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.191]        // while-condition  =>  TRUE
[22:52:26.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.195]        // while-condition  =>  TRUE
[22:52:26.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.199]        // while-condition  =>  TRUE
[22:52:26.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.199]        // while-condition  =>  TRUE
[22:52:26.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.203]        // while-condition  =>  TRUE
[22:52:26.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.203]        // while-condition  =>  TRUE
[22:52:26.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.207]        // while-condition  =>  TRUE
[22:52:26.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.211]        // while-condition  =>  TRUE
[22:52:26.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.211]        // while-condition  =>  TRUE
[22:52:26.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.211]        // while-condition  =>  TRUE
[22:52:26.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.215]        // while-condition  =>  TRUE
[22:52:26.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.215]        // while-condition  =>  TRUE
[22:52:26.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.219]        // while-condition  =>  TRUE
[22:52:26.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.219]        // while-condition  =>  TRUE
[22:52:26.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.223]        // while-condition  =>  TRUE
[22:52:26.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.223]        // while-condition  =>  TRUE
[22:52:26.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.229]        // while-condition  =>  TRUE
[22:52:26.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.231]        // while-condition  =>  TRUE
[22:52:26.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.236]        // while-condition  =>  TRUE
[22:52:26.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.240]        // while-condition  =>  TRUE
[22:52:26.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.240]        // while-condition  =>  TRUE
[22:52:26.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.240]        // while-condition  =>  TRUE
[22:52:26.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.244]        // while-condition  =>  TRUE
[22:52:26.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.244]        // while-condition  =>  TRUE
[22:52:26.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.248]        // while-condition  =>  TRUE
[22:52:26.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.249]        // while-condition  =>  TRUE
[22:52:26.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.252]        // while-condition  =>  TRUE
[22:52:26.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.256]        // while-condition  =>  TRUE
[22:52:26.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.259]        // while-condition  =>  TRUE
[22:52:26.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.260]        // while-condition  =>  TRUE
[22:52:26.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.260]        // while-condition  =>  TRUE
[22:52:26.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.264]        // while-condition  =>  TRUE
[22:52:26.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.264]        // while-condition  =>  TRUE
[22:52:26.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.269]        // while-condition  =>  TRUE
[22:52:26.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.272]        // while-condition  =>  TRUE
[22:52:26.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.279]        // while-condition  =>  TRUE
[22:52:26.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.280]        // while-condition  =>  TRUE
[22:52:26.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.280]        // while-condition  =>  TRUE
[22:52:26.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.284]        // while-condition  =>  TRUE
[22:52:26.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.284]        // while-condition  =>  TRUE
[22:52:26.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.284]        // while-condition  =>  TRUE
[22:52:26.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.289]        // while-condition  =>  TRUE
[22:52:26.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.294]        // while-condition  =>  TRUE
[22:52:26.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.294]        // while-condition  =>  TRUE
[22:52:26.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.297]        // while-condition  =>  TRUE
[22:52:26.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.297]        // while-condition  =>  TRUE
[22:52:26.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.301]        // while-condition  =>  TRUE
[22:52:26.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.301]        // while-condition  =>  TRUE
[22:52:26.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.305]        // while-condition  =>  TRUE
[22:52:26.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.305]        // while-condition  =>  TRUE
[22:52:26.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.309]        // while-condition  =>  TRUE
[22:52:26.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.309]        // while-condition  =>  TRUE
[22:52:26.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.313]        // while-condition  =>  TRUE
[22:52:26.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.313]        // while-condition  =>  TRUE
[22:52:26.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.313]        // while-condition  =>  TRUE
[22:52:26.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.317]        // while-condition  =>  TRUE
[22:52:26.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.319]        // while-condition  =>  TRUE
[22:52:26.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.321]        // while-condition  =>  TRUE
[22:52:26.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.321]        // while-condition  =>  TRUE
[22:52:26.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.325]        // while-condition  =>  TRUE
[22:52:26.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.325]        // while-condition  =>  TRUE
[22:52:26.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.330]        // while-condition  =>  TRUE
[22:52:26.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.334]        // while-condition  =>  TRUE
[22:52:26.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.336]        // while-condition  =>  TRUE
[22:52:26.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.337]        // while-condition  =>  TRUE
[22:52:26.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.337]        // while-condition  =>  TRUE
[22:52:26.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.341]        // while-condition  =>  TRUE
[22:52:26.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.341]        // while-condition  =>  TRUE
[22:52:26.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.341]        // while-condition  =>  TRUE
[22:52:26.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.345]        // while-condition  =>  TRUE
[22:52:26.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.345]        // while-condition  =>  TRUE
[22:52:26.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.353]        // while-condition  =>  TRUE
[22:52:26.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.353]        // while-condition  =>  TRUE
[22:52:26.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.357]        // while-condition  =>  TRUE
[22:52:26.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.357]        // while-condition  =>  TRUE
[22:52:26.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.361]        // while-condition  =>  TRUE
[22:52:26.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.361]        // while-condition  =>  TRUE
[22:52:26.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.365]        // while-condition  =>  TRUE
[22:52:26.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.365]        // while-condition  =>  TRUE
[22:52:26.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.369]        // while-condition  =>  TRUE
[22:52:26.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.369]        // while-condition  =>  TRUE
[22:52:26.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.373]        // while-condition  =>  TRUE
[22:52:26.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.373]        // while-condition  =>  TRUE
[22:52:26.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.377]        // while-condition  =>  TRUE
[22:52:26.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.377]        // while-condition  =>  TRUE
[22:52:26.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.381]        // while-condition  =>  TRUE
[22:52:26.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.381]        // while-condition  =>  TRUE
[22:52:26.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.385]        // while-condition  =>  TRUE
[22:52:26.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.389]        // while-condition  =>  TRUE
[22:52:26.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.389]        // while-condition  =>  TRUE
[22:52:26.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.393]        // while-condition  =>  TRUE
[22:52:26.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.393]        // while-condition  =>  TRUE
[22:52:26.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.393]        // while-condition  =>  TRUE
[22:52:26.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.397]        // while-condition  =>  TRUE
[22:52:26.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.400]        // while-condition  =>  TRUE
[22:52:26.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.401]        // while-condition  =>  TRUE
[22:52:26.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.401]        // while-condition  =>  TRUE
[22:52:26.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.406]        // while-condition  =>  TRUE
[22:52:26.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.406]        // while-condition  =>  TRUE
[22:52:26.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.410]        // while-condition  =>  TRUE
[22:52:26.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.410]        // while-condition  =>  TRUE
[22:52:26.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.414]        // while-condition  =>  TRUE
[22:52:26.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.414]        // while-condition  =>  TRUE
[22:52:26.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.418]        // while-condition  =>  TRUE
[22:52:26.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.422]        // while-condition  =>  TRUE
[22:52:26.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.422]        // while-condition  =>  TRUE
[22:52:26.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.426]        // while-condition  =>  TRUE
[22:52:26.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.426]        // while-condition  =>  TRUE
[22:52:26.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.430]        // while-condition  =>  TRUE
[22:52:26.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.434]        // while-condition  =>  TRUE
[22:52:26.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.436]        // while-condition  =>  TRUE
[22:52:26.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.438]        // while-condition  =>  TRUE
[22:52:26.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.438]        // while-condition  =>  TRUE
[22:52:26.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.446]        // while-condition  =>  TRUE
[22:52:26.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.446]        // while-condition  =>  TRUE
[22:52:26.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.450]        // while-condition  =>  TRUE
[22:52:26.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.458]        // while-condition  =>  TRUE
[22:52:26.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.458]        // while-condition  =>  TRUE
[22:52:26.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.462]        // while-condition  =>  TRUE
[22:52:26.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.462]        // while-condition  =>  TRUE
[22:52:26.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.466]        // while-condition  =>  TRUE
[22:52:26.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.466]        // while-condition  =>  TRUE
[22:52:26.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.466]        // while-condition  =>  TRUE
[22:52:26.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.470]        // while-condition  =>  TRUE
[22:52:26.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.474]        // while-condition  =>  TRUE
[22:52:26.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.476]        // while-condition  =>  TRUE
[22:52:26.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.482]        // while-condition  =>  TRUE
[22:52:26.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.482]        // while-condition  =>  TRUE
[22:52:26.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.486]        // while-condition  =>  TRUE
[22:52:26.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.486]        // while-condition  =>  TRUE
[22:52:26.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.486]        // while-condition  =>  TRUE
[22:52:26.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.494]        // while-condition  =>  TRUE
[22:52:26.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.502]        // while-condition  =>  TRUE
[22:52:26.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.506]        // while-condition  =>  TRUE
[22:52:26.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.515]        // while-condition  =>  TRUE
[22:52:26.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.519]        // while-condition  =>  TRUE
[22:52:26.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.519]        // while-condition  =>  TRUE
[22:52:26.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.519]        // while-condition  =>  TRUE
[22:52:26.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.523]        // while-condition  =>  TRUE
[22:52:26.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.527]        // while-condition  =>  TRUE
[22:52:26.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.527]        // while-condition  =>  TRUE
[22:52:26.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.531]        // while-condition  =>  TRUE
[22:52:26.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.536]        // while-condition  =>  TRUE
[22:52:26.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.536]        // while-condition  =>  TRUE
[22:52:26.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.539]        // while-condition  =>  TRUE
[22:52:26.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.539]        // while-condition  =>  TRUE
[22:52:26.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.543]        // while-condition  =>  TRUE
[22:52:26.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.549]        // while-condition  =>  TRUE
[22:52:26.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.552]        // while-condition  =>  TRUE
[22:52:26.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.556]        // while-condition  =>  TRUE
[22:52:26.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.556]        // while-condition  =>  TRUE
[22:52:26.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.560]        // while-condition  =>  TRUE
[22:52:26.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.562]        // while-condition  =>  TRUE
[22:52:26.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.570]        // while-condition  =>  TRUE
[22:52:26.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.577]        // while-condition  =>  TRUE
[22:52:26.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.577]        // while-condition  =>  TRUE
[22:52:26.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.581]        // while-condition  =>  TRUE
[22:52:26.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.585]        // while-condition  =>  TRUE
[22:52:26.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.589]        // while-condition  =>  TRUE
[22:52:26.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.589]        // while-condition  =>  TRUE
[22:52:26.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.589]        // while-condition  =>  TRUE
[22:52:26.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.593]        // while-condition  =>  TRUE
[22:52:26.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.593]        // while-condition  =>  TRUE
[22:52:26.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.598]        // while-condition  =>  TRUE
[22:52:26.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.601]        // while-condition  =>  TRUE
[22:52:26.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.610]        // while-condition  =>  TRUE
[22:52:26.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.612]        // while-condition  =>  TRUE
[22:52:26.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.617]        // while-condition  =>  TRUE
[22:52:26.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.617]        // while-condition  =>  TRUE
[22:52:26.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.622]        // while-condition  =>  TRUE
[22:52:26.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.623]        // while-condition  =>  TRUE
[22:52:26.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.625]        // while-condition  =>  TRUE
[22:52:26.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.626]        // while-condition  =>  TRUE
[22:52:26.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.629]        // while-condition  =>  TRUE
[22:52:26.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.631]        // while-condition  =>  TRUE
[22:52:26.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.633]        // while-condition  =>  TRUE
[22:52:26.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.633]        // while-condition  =>  TRUE
[22:52:26.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.636]        // while-condition  =>  TRUE
[22:52:26.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.638]        // while-condition  =>  TRUE
[22:52:26.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.640]        // while-condition  =>  TRUE
[22:52:26.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.642]        // while-condition  =>  TRUE
[22:52:26.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.645]        // while-condition  =>  TRUE
[22:52:26.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.647]        // while-condition  =>  TRUE
[22:52:26.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.648]        // while-condition  =>  TRUE
[22:52:26.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.652]        // while-condition  =>  TRUE
[22:52:26.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.653]        // while-condition  =>  TRUE
[22:52:26.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.656]        // while-condition  =>  TRUE
[22:52:26.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.658]        // while-condition  =>  TRUE
[22:52:26.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.660]        // while-condition  =>  TRUE
[22:52:26.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.661]        // while-condition  =>  TRUE
[22:52:26.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.664]        // while-condition  =>  TRUE
[22:52:26.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.666]        // while-condition  =>  TRUE
[22:52:26.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.669]        // while-condition  =>  TRUE
[22:52:26.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.671]        // while-condition  =>  TRUE
[22:52:26.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.674]        // while-condition  =>  TRUE
[22:52:26.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.677]        // while-condition  =>  TRUE
[22:52:26.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.679]        // while-condition  =>  TRUE
[22:52:26.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.681]        // while-condition  =>  TRUE
[22:52:26.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.682]        // while-condition  =>  TRUE
[22:52:26.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.684]        // while-condition  =>  TRUE
[22:52:26.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.686]        // while-condition  =>  TRUE
[22:52:26.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.692]        // while-condition  =>  TRUE
[22:52:26.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.694]        // while-condition  =>  TRUE
[22:52:26.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.696]        // while-condition  =>  TRUE
[22:52:26.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.698]        // while-condition  =>  TRUE
[22:52:26.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.701]        // while-condition  =>  TRUE
[22:52:26.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.701]        // while-condition  =>  TRUE
[22:52:26.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.705]        // while-condition  =>  TRUE
[22:52:26.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.705]        // while-condition  =>  TRUE
[22:52:26.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.708]        // while-condition  =>  TRUE
[22:52:26.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.712]        // while-condition  =>  TRUE
[22:52:26.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.714]        // while-condition  =>  TRUE
[22:52:26.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.716]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.716]        // while-condition  =>  TRUE
[22:52:26.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.717]        // while-condition  =>  TRUE
[22:52:26.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.719]        // while-condition  =>  TRUE
[22:52:26.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.721]        // while-condition  =>  TRUE
[22:52:26.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.722]        // while-condition  =>  TRUE
[22:52:26.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.724]        // while-condition  =>  TRUE
[22:52:26.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.726]        // while-condition  =>  TRUE
[22:52:26.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.730]        // while-condition  =>  TRUE
[22:52:26.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.731]        // while-condition  =>  TRUE
[22:52:26.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.731]        // while-condition  =>  TRUE
[22:52:26.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.735]        // while-condition  =>  TRUE
[22:52:26.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.738]        // while-condition  =>  TRUE
[22:52:26.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.739]        // while-condition  =>  TRUE
[22:52:26.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.741]        // while-condition  =>  TRUE
[22:52:26.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.743]        // while-condition  =>  TRUE
[22:52:26.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.745]        // while-condition  =>  TRUE
[22:52:26.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.748]        // while-condition  =>  TRUE
[22:52:26.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.749]        // while-condition  =>  TRUE
[22:52:26.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.751]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.751]        // while-condition  =>  TRUE
[22:52:26.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.755]        // while-condition  =>  TRUE
[22:52:26.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.758]        // while-condition  =>  TRUE
[22:52:26.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.760]        // while-condition  =>  TRUE
[22:52:26.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.763]        // while-condition  =>  TRUE
[22:52:26.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.764]        // while-condition  =>  TRUE
[22:52:26.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.766]        // while-condition  =>  TRUE
[22:52:26.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.772]        // while-condition  =>  TRUE
[22:52:26.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.776]        // while-condition  =>  TRUE
[22:52:26.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.776]        // while-condition  =>  TRUE
[22:52:26.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.780]        // while-condition  =>  TRUE
[22:52:26.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.780]        // while-condition  =>  TRUE
[22:52:26.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.784]        // while-condition  =>  TRUE
[22:52:26.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.792]        // while-condition  =>  TRUE
[22:52:26.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.793]        // while-condition  =>  TRUE
[22:52:26.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.797]        // while-condition  =>  TRUE
[22:52:26.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.797]        // while-condition  =>  TRUE
[22:52:26.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.801]        // while-condition  =>  TRUE
[22:52:26.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.801]        // while-condition  =>  TRUE
[22:52:26.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.805]        // while-condition  =>  TRUE
[22:52:26.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.806]        // while-condition  =>  TRUE
[22:52:26.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.809]        // while-condition  =>  TRUE
[22:52:26.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.809]        // while-condition  =>  TRUE
[22:52:26.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.817]        // while-condition  =>  TRUE
[22:52:26.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.821]        // while-condition  =>  TRUE
[22:52:26.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.824]        // while-condition  =>  TRUE
[22:52:26.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.825]        // while-condition  =>  TRUE
[22:52:26.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.828]        // while-condition  =>  TRUE
[22:52:26.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.830]        // while-condition  =>  TRUE
[22:52:26.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.838]        // while-condition  =>  TRUE
[22:52:26.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.838]        // while-condition  =>  TRUE
[22:52:26.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.842]        // while-condition  =>  TRUE
[22:52:26.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.846]        // while-condition  =>  TRUE
[22:52:26.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.851]        // while-condition  =>  TRUE
[22:52:26.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.854]        // while-condition  =>  TRUE
[22:52:26.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.856]        // while-condition  =>  TRUE
[22:52:26.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.867]        // while-condition  =>  TRUE
[22:52:26.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.871]        // while-condition  =>  TRUE
[22:52:26.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.871]        // while-condition  =>  TRUE
[22:52:26.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.875]        // while-condition  =>  TRUE
[22:52:26.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.880]        // while-condition  =>  TRUE
[22:52:26.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.883]        // while-condition  =>  TRUE
[22:52:26.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.883]        // while-condition  =>  TRUE
[22:52:26.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.887]        // while-condition  =>  TRUE
[22:52:26.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.887]        // while-condition  =>  TRUE
[22:52:26.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.891]        // while-condition  =>  TRUE
[22:52:26.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.891]        // while-condition  =>  TRUE
[22:52:26.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.895]        // while-condition  =>  TRUE
[22:52:26.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.895]        // while-condition  =>  TRUE
[22:52:26.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.908]        // while-condition  =>  TRUE
[22:52:26.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.916]        // while-condition  =>  TRUE
[22:52:26.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.920]        // while-condition  =>  TRUE
[22:52:26.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.921]        // while-condition  =>  TRUE
[22:52:26.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.924]        // while-condition  =>  TRUE
[22:52:26.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:26.929]        // while-condition  =>  TRUE
[22:52:26.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:26.932]        // while  =>  TIMEOUT
[22:52:26.932]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:52:26.932]      </control>
[22:52:26.932]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:52:26.932]        // if-block "(__protocol & 0xFFFF) == 1"
[22:52:26.932]          // =>  FALSE
[22:52:26.932]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:52:26.932]      </control>
[22:52:26.932]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:52:26.932]        // if-block "(__protocol & 0xFFFF) == 2"
[22:52:26.932]          // =>  TRUE
[22:52:26.932]        <block atomic="false" info="">
[22:52:26.932]          Message(0, "executing SWD power up");
[22:52:26.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:52:26.937]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:52:26.937]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:52:26.941]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:52:26.941]        </block>
[22:52:26.941]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:52:26.941]      </control>
[22:52:26.941]      // end if-block "powered_down"
[22:52:26.941]    </control>
[22:52:26.941]    <block atomic="false" info="">
[22:52:26.941]      __var DEBUG_PORT_VAL    = 0;
[22:52:26.941]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:52:26.941]      __var ACCESS_POINT_VAL  = 0;
[22:52:26.941]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:52:26.941]      __ap = 1; 
[22:52:26.941]        // -> [__ap <= 0x00000001]
[22:52:26.941]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:52:26.945]  
[22:52:26.945]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[22:52:26.945]  
[22:52:26.948]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:52:26.948]    </block>
[22:52:26.948]  </sequence>
[22:52:26.948]  
[22:52:33.633]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:52:33.633]  
[22:52:33.643]  <debugvars>
[22:52:33.643]    // Pre-defined
[22:52:33.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:33.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:33.643]    __dp=0x00000000
[22:52:33.643]    __ap=0x00000000
[22:52:33.643]    __traceout=0x00000000      (Trace Disabled)
[22:52:33.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:33.643]    __FlashAddr=0x00000000
[22:52:33.643]    __FlashLen=0x00000000
[22:52:33.643]    __FlashArg=0x00000000
[22:52:33.643]    __FlashOp=0x00000000
[22:52:33.645]    __Result=0x00000000
[22:52:33.645]  </debugvars>
[22:52:33.645]  
[22:52:33.645]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:52:33.645]    <block atomic="false" info="">
[22:52:33.645]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:52:33.645]        // -> [isSWJ <= 0x00000001]
[22:52:33.645]      __var hasDormant = __protocol & 0x00020000;
[22:52:33.645]        // -> [hasDormant <= 0x00000000]
[22:52:33.645]      __var protType   = __protocol & 0x0000FFFF;
[22:52:33.645]        // -> [protType <= 0x00000002]
[22:52:33.645]    </block>
[22:52:33.645]    <control if="protType == 1" while="" timeout="0" info="">
[22:52:33.645]      // if-block "protType == 1"
[22:52:33.645]        // =>  FALSE
[22:52:33.645]      // skip if-block "protType == 1"
[22:52:33.645]    </control>
[22:52:33.645]    <control if="protType == 2" while="" timeout="0" info="">
[22:52:33.645]      // if-block "protType == 2"
[22:52:33.645]        // =>  TRUE
[22:52:33.645]      <control if="isSWJ" while="" timeout="0" info="">
[22:52:33.645]        // if-block "isSWJ"
[22:52:33.645]          // =>  TRUE
[22:52:33.645]        <control if="hasDormant" while="" timeout="0" info="">
[22:52:33.645]          // if-block "hasDormant"
[22:52:33.645]            // =>  FALSE
[22:52:33.645]          // skip if-block "hasDormant"
[22:52:33.645]        </control>
[22:52:33.645]        <control if="!hasDormant" while="" timeout="0" info="">
[22:52:33.645]          // if-block "!hasDormant"
[22:52:33.645]            // =>  TRUE
[22:52:33.649]          <block atomic="false" info="">
[22:52:33.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:52:33.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:33.649]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:52:33.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:52:33.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:52:33.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:33.653]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:52:33.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:52:33.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:52:33.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:33.653]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:52:33.657]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:52:33.657]          </block>
[22:52:33.657]          // end if-block "!hasDormant"
[22:52:33.657]        </control>
[22:52:33.657]        // end if-block "isSWJ"
[22:52:33.657]      </control>
[22:52:33.657]      <control if="!isSWJ" while="" timeout="0" info="">
[22:52:33.657]        // if-block "!isSWJ"
[22:52:33.657]          // =>  FALSE
[22:52:33.657]        // skip if-block "!isSWJ"
[22:52:33.657]      </control>
[22:52:33.661]      <block atomic="false" info="">
[22:52:33.661]        ReadDP(0x0);
[22:52:33.663]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:52:33.663]      </block>
[22:52:33.663]      // end if-block "protType == 2"
[22:52:33.663]    </control>
[22:52:33.663]  </sequence>
[22:52:33.663]  
[22:52:33.669]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:52:33.669]  
[22:52:33.669]  <debugvars>
[22:52:33.669]    // Pre-defined
[22:52:33.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:33.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:33.669]    __dp=0x00000000
[22:52:33.669]    __ap=0x00000000
[22:52:33.669]    __traceout=0x00000000      (Trace Disabled)
[22:52:33.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:33.669]    __FlashAddr=0x00000000
[22:52:33.669]    __FlashLen=0x00000000
[22:52:33.669]    __FlashArg=0x00000000
[22:52:33.669]    __FlashOp=0x00000000
[22:52:33.669]    __Result=0x00000000
[22:52:33.669]  </debugvars>
[22:52:33.669]  
[22:52:33.669]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:52:33.669]    <block atomic="false" info="">
[22:52:33.669]      __var SW_DP_ABORT       = 0x0;
[22:52:33.669]        // -> [SW_DP_ABORT <= 0x00000000]
[22:52:33.669]      __var DP_CTRL_STAT      = 0x4;
[22:52:33.669]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:52:33.669]      __var DP_SELECT         = 0x8;
[22:52:33.669]        // -> [DP_SELECT <= 0x00000008]
[22:52:33.669]      __var powered_down      = 0;
[22:52:33.669]        // -> [powered_down <= 0x00000000]
[22:52:33.669]      WriteDP(DP_SELECT, 0x00000000);
[22:52:33.673]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:52:33.673]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:52:33.673]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:52:33.673]        // -> [powered_down <= 0x00000001]
[22:52:33.673]    </block>
[22:52:33.673]    <control if="powered_down" while="" timeout="0" info="">
[22:52:33.677]      // if-block "powered_down"
[22:52:33.677]        // =>  TRUE
[22:52:33.677]      <block atomic="false" info="">
[22:52:33.677]        Message(0, "Debug/System power-up request sent");
[22:52:33.677]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:52:33.681]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:52:33.681]      </block>
[22:52:33.681]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:52:33.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.684]        // while-condition  =>  TRUE
[22:52:33.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.686]        // while-condition  =>  TRUE
[22:52:33.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.686]        // while-condition  =>  TRUE
[22:52:33.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.695]        // while-condition  =>  TRUE
[22:52:33.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.699]        // while-condition  =>  TRUE
[22:52:33.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.702]        // while-condition  =>  TRUE
[22:52:33.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.706]        // while-condition  =>  TRUE
[22:52:33.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.710]        // while-condition  =>  TRUE
[22:52:33.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.711]        // while-condition  =>  TRUE
[22:52:33.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.714]        // while-condition  =>  TRUE
[22:52:33.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.714]        // while-condition  =>  TRUE
[22:52:33.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.717]        // while-condition  =>  TRUE
[22:52:33.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.718]        // while-condition  =>  TRUE
[22:52:33.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.718]        // while-condition  =>  TRUE
[22:52:33.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.722]        // while-condition  =>  TRUE
[22:52:33.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.722]        // while-condition  =>  TRUE
[22:52:33.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.727]        // while-condition  =>  TRUE
[22:52:33.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.730]        // while-condition  =>  TRUE
[22:52:33.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.730]        // while-condition  =>  TRUE
[22:52:33.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.739]        // while-condition  =>  TRUE
[22:52:33.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.742]        // while-condition  =>  TRUE
[22:52:33.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.743]        // while-condition  =>  TRUE
[22:52:33.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.746]        // while-condition  =>  TRUE
[22:52:33.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.747]        // while-condition  =>  TRUE
[22:52:33.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.750]        // while-condition  =>  TRUE
[22:52:33.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.750]        // while-condition  =>  TRUE
[22:52:33.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.754]        // while-condition  =>  TRUE
[22:52:33.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.756]        // while-condition  =>  TRUE
[22:52:33.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.756]        // while-condition  =>  TRUE
[22:52:33.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.760]        // while-condition  =>  TRUE
[22:52:33.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.764]        // while-condition  =>  TRUE
[22:52:33.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.771]        // while-condition  =>  TRUE
[22:52:33.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.774]        // while-condition  =>  TRUE
[22:52:33.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.776]        // while-condition  =>  TRUE
[22:52:33.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.776]        // while-condition  =>  TRUE
[22:52:33.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.779]        // while-condition  =>  TRUE
[22:52:33.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.781]        // while-condition  =>  TRUE
[22:52:33.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.783]        // while-condition  =>  TRUE
[22:52:33.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.784]        // while-condition  =>  TRUE
[22:52:33.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.786]        // while-condition  =>  TRUE
[22:52:33.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.789]        // while-condition  =>  TRUE
[22:52:33.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.790]        // while-condition  =>  TRUE
[22:52:33.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.792]        // while-condition  =>  TRUE
[22:52:33.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.800]        // while-condition  =>  TRUE
[22:52:33.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.804]        // while-condition  =>  TRUE
[22:52:33.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.805]        // while-condition  =>  TRUE
[22:52:33.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.809]        // while-condition  =>  TRUE
[22:52:33.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.811]        // while-condition  =>  TRUE
[22:52:33.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.813]        // while-condition  =>  TRUE
[22:52:33.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.815]        // while-condition  =>  TRUE
[22:52:33.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.817]        // while-condition  =>  TRUE
[22:52:33.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.818]        // while-condition  =>  TRUE
[22:52:33.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.821]        // while-condition  =>  TRUE
[22:52:33.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.822]        // while-condition  =>  TRUE
[22:52:33.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.831]        // while-condition  =>  TRUE
[22:52:33.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.837]        // while-condition  =>  TRUE
[22:52:33.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.837]        // while-condition  =>  TRUE
[22:52:33.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.841]        // while-condition  =>  TRUE
[22:52:33.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.841]        // while-condition  =>  TRUE
[22:52:33.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.841]        // while-condition  =>  TRUE
[22:52:33.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.845]        // while-condition  =>  TRUE
[22:52:33.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.849]        // while-condition  =>  TRUE
[22:52:33.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.849]        // while-condition  =>  TRUE
[22:52:33.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.854]        // while-condition  =>  TRUE
[22:52:33.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.857]        // while-condition  =>  TRUE
[22:52:33.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.858]        // while-condition  =>  TRUE
[22:52:33.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.865]        // while-condition  =>  TRUE
[22:52:33.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.865]        // while-condition  =>  TRUE
[22:52:33.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.869]        // while-condition  =>  TRUE
[22:52:33.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.873]        // while-condition  =>  TRUE
[22:52:33.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.874]        // while-condition  =>  TRUE
[22:52:33.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.877]        // while-condition  =>  TRUE
[22:52:33.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.877]        // while-condition  =>  TRUE
[22:52:33.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.881]        // while-condition  =>  TRUE
[22:52:33.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.882]        // while-condition  =>  TRUE
[22:52:33.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.885]        // while-condition  =>  TRUE
[22:52:33.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.885]        // while-condition  =>  TRUE
[22:52:33.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.889]        // while-condition  =>  TRUE
[22:52:33.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.893]        // while-condition  =>  TRUE
[22:52:33.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.893]        // while-condition  =>  TRUE
[22:52:33.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.897]        // while-condition  =>  TRUE
[22:52:33.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.897]        // while-condition  =>  TRUE
[22:52:33.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.901]        // while-condition  =>  TRUE
[22:52:33.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.902]        // while-condition  =>  TRUE
[22:52:33.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.904]        // while-condition  =>  TRUE
[22:52:33.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.906]        // while-condition  =>  TRUE
[22:52:33.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.909]        // while-condition  =>  TRUE
[22:52:33.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.914]        // while-condition  =>  TRUE
[22:52:33.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.914]        // while-condition  =>  TRUE
[22:52:33.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.917]        // while-condition  =>  TRUE
[22:52:33.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.917]        // while-condition  =>  TRUE
[22:52:33.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.921]        // while-condition  =>  TRUE
[22:52:33.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.925]        // while-condition  =>  TRUE
[22:52:33.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.925]        // while-condition  =>  TRUE
[22:52:33.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.930]        // while-condition  =>  TRUE
[22:52:33.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.934]        // while-condition  =>  TRUE
[22:52:33.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.934]        // while-condition  =>  TRUE
[22:52:33.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.938]        // while-condition  =>  TRUE
[22:52:33.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.940]        // while-condition  =>  TRUE
[22:52:33.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.947]        // while-condition  =>  TRUE
[22:52:33.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.950]        // while-condition  =>  TRUE
[22:52:33.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.954]        // while-condition  =>  TRUE
[22:52:33.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.958]        // while-condition  =>  TRUE
[22:52:33.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.962]        // while-condition  =>  TRUE
[22:52:33.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.962]        // while-condition  =>  TRUE
[22:52:33.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.966]        // while-condition  =>  TRUE
[22:52:33.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.970]        // while-condition  =>  TRUE
[22:52:33.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.970]        // while-condition  =>  TRUE
[22:52:33.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.975]        // while-condition  =>  TRUE
[22:52:33.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.976]        // while-condition  =>  TRUE
[22:52:33.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.978]        // while-condition  =>  TRUE
[22:52:33.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.982]        // while-condition  =>  TRUE
[22:52:33.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.982]        // while-condition  =>  TRUE
[22:52:33.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.982]        // while-condition  =>  TRUE
[22:52:33.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.992]        // while-condition  =>  TRUE
[22:52:33.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.995]        // while-condition  =>  TRUE
[22:52:33.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.995]        // while-condition  =>  TRUE
[22:52:33.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.999]        // while-condition  =>  TRUE
[22:52:33.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:33.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:33.999]        // while-condition  =>  TRUE
[22:52:33.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.003]        // while-condition  =>  TRUE
[22:52:34.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.003]        // while-condition  =>  TRUE
[22:52:34.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.007]        // while-condition  =>  TRUE
[22:52:34.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.009]        // while-condition  =>  TRUE
[22:52:34.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.011]        // while-condition  =>  TRUE
[22:52:34.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.011]        // while-condition  =>  TRUE
[22:52:34.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.014]        // while-condition  =>  TRUE
[22:52:34.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.017]        // while-condition  =>  TRUE
[22:52:34.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.023]        // while-condition  =>  TRUE
[22:52:34.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.025]        // while-condition  =>  TRUE
[22:52:34.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.027]        // while-condition  =>  TRUE
[22:52:34.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.029]        // while-condition  =>  TRUE
[22:52:34.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.031]        // while-condition  =>  TRUE
[22:52:34.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.039]        // while-condition  =>  TRUE
[22:52:34.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.047]        // while-condition  =>  TRUE
[22:52:34.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.055]        // while-condition  =>  TRUE
[22:52:34.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.055]        // while-condition  =>  TRUE
[22:52:34.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.058]        // while-condition  =>  TRUE
[22:52:34.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.059]        // while-condition  =>  TRUE
[22:52:34.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.059]        // while-condition  =>  TRUE
[22:52:34.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.067]        // while-condition  =>  TRUE
[22:52:34.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.072]        // while-condition  =>  TRUE
[22:52:34.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.072]        // while-condition  =>  TRUE
[22:52:34.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.076]        // while-condition  =>  TRUE
[22:52:34.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.080]        // while-condition  =>  TRUE
[22:52:34.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.084]        // while-condition  =>  TRUE
[22:52:34.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.088]        // while-condition  =>  TRUE
[22:52:34.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.091]        // while-condition  =>  TRUE
[22:52:34.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.093]        // while-condition  =>  TRUE
[22:52:34.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.094]        // while-condition  =>  TRUE
[22:52:34.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.096]        // while-condition  =>  TRUE
[22:52:34.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.098]        // while-condition  =>  TRUE
[22:52:34.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.099]        // while-condition  =>  TRUE
[22:52:34.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.104]        // while-condition  =>  TRUE
[22:52:34.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.106]        // while-condition  =>  TRUE
[22:52:34.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.110]        // while-condition  =>  TRUE
[22:52:34.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.112]        // while-condition  =>  TRUE
[22:52:34.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.114]        // while-condition  =>  TRUE
[22:52:34.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.117]        // while-condition  =>  TRUE
[22:52:34.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.119]        // while-condition  =>  TRUE
[22:52:34.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.120]        // while-condition  =>  TRUE
[22:52:34.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.122]        // while-condition  =>  TRUE
[22:52:34.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.126]        // while-condition  =>  TRUE
[22:52:34.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.130]        // while-condition  =>  TRUE
[22:52:34.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.133]        // while-condition  =>  TRUE
[22:52:34.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.134]        // while-condition  =>  TRUE
[22:52:34.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.137]        // while-condition  =>  TRUE
[22:52:34.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.139]        // while-condition  =>  TRUE
[22:52:34.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.141]        // while-condition  =>  TRUE
[22:52:34.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.142]        // while-condition  =>  TRUE
[22:52:34.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.144]        // while-condition  =>  TRUE
[22:52:34.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.154]        // while-condition  =>  TRUE
[22:52:34.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.156]        // while-condition  =>  TRUE
[22:52:34.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.158]        // while-condition  =>  TRUE
[22:52:34.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.159]        // while-condition  =>  TRUE
[22:52:34.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.161]        // while-condition  =>  TRUE
[22:52:34.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.161]        // while-condition  =>  TRUE
[22:52:34.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.161]        // while-condition  =>  TRUE
[22:52:34.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.166]        // while-condition  =>  TRUE
[22:52:34.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.174]        // while-condition  =>  TRUE
[22:52:34.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.182]        // while-condition  =>  TRUE
[22:52:34.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.186]        // while-condition  =>  TRUE
[22:52:34.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.187]        // while-condition  =>  TRUE
[22:52:34.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.187]        // while-condition  =>  TRUE
[22:52:34.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.191]        // while-condition  =>  TRUE
[22:52:34.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.191]        // while-condition  =>  TRUE
[22:52:34.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.197]        // while-condition  =>  TRUE
[22:52:34.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.198]        // while-condition  =>  TRUE
[22:52:34.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.200]        // while-condition  =>  TRUE
[22:52:34.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.202]        // while-condition  =>  TRUE
[22:52:34.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.202]        // while-condition  =>  TRUE
[22:52:34.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.210]        // while-condition  =>  TRUE
[22:52:34.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.214]        // while-condition  =>  TRUE
[22:52:34.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.224]        // while-condition  =>  TRUE
[22:52:34.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.224]        // while-condition  =>  TRUE
[22:52:34.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.227]        // while-condition  =>  TRUE
[22:52:34.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.231]        // while-condition  =>  TRUE
[22:52:34.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.231]        // while-condition  =>  TRUE
[22:52:34.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.235]        // while-condition  =>  TRUE
[22:52:34.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.240]        // while-condition  =>  TRUE
[22:52:34.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.243]        // while-condition  =>  TRUE
[22:52:34.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.248]        // while-condition  =>  TRUE
[22:52:34.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.251]        // while-condition  =>  TRUE
[22:52:34.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.254]        // while-condition  =>  TRUE
[22:52:34.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.255]        // while-condition  =>  TRUE
[22:52:34.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.261]        // while-condition  =>  TRUE
[22:52:34.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.261]        // while-condition  =>  TRUE
[22:52:34.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.263]        // while-condition  =>  TRUE
[22:52:34.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.263]        // while-condition  =>  TRUE
[22:52:34.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.267]        // while-condition  =>  TRUE
[22:52:34.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.271]        // while-condition  =>  TRUE
[22:52:34.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.271]        // while-condition  =>  TRUE
[22:52:34.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.275]        // while-condition  =>  TRUE
[22:52:34.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.279]        // while-condition  =>  TRUE
[22:52:34.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.279]        // while-condition  =>  TRUE
[22:52:34.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.283]        // while-condition  =>  TRUE
[22:52:34.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.287]        // while-condition  =>  TRUE
[22:52:34.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.292]        // while-condition  =>  TRUE
[22:52:34.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.292]        // while-condition  =>  TRUE
[22:52:34.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.300]        // while-condition  =>  TRUE
[22:52:34.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.300]        // while-condition  =>  TRUE
[22:52:34.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.304]        // while-condition  =>  TRUE
[22:52:34.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.308]        // while-condition  =>  TRUE
[22:52:34.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.308]        // while-condition  =>  TRUE
[22:52:34.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.312]        // while-condition  =>  TRUE
[22:52:34.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.317]        // while-condition  =>  TRUE
[22:52:34.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.321]        // while-condition  =>  TRUE
[22:52:34.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.326]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.326]        // while-condition  =>  TRUE
[22:52:34.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.328]        // while-condition  =>  TRUE
[22:52:34.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.335]        // while-condition  =>  TRUE
[22:52:34.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.340]        // while-condition  =>  TRUE
[22:52:34.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.343]        // while-condition  =>  TRUE
[22:52:34.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.346]        // while-condition  =>  TRUE
[22:52:34.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.349]        // while-condition  =>  TRUE
[22:52:34.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.352]        // while-condition  =>  TRUE
[22:52:34.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.352]        // while-condition  =>  TRUE
[22:52:34.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.352]        // while-condition  =>  TRUE
[22:52:34.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.360]        // while-condition  =>  TRUE
[22:52:34.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.360]        // while-condition  =>  TRUE
[22:52:34.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.364]        // while-condition  =>  TRUE
[22:52:34.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.371]        // while-condition  =>  TRUE
[22:52:34.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.372]        // while-condition  =>  TRUE
[22:52:34.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.374]        // while-condition  =>  TRUE
[22:52:34.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.377]        // while-condition  =>  TRUE
[22:52:34.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.379]        // while-condition  =>  TRUE
[22:52:34.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.381]        // while-condition  =>  TRUE
[22:52:34.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.392]        // while-condition  =>  TRUE
[22:52:34.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.393]        // while-condition  =>  TRUE
[22:52:34.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.397]        // while-condition  =>  TRUE
[22:52:34.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.402]        // while-condition  =>  TRUE
[22:52:34.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.406]        // while-condition  =>  TRUE
[22:52:34.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.408]        // while-condition  =>  TRUE
[22:52:34.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.411]        // while-condition  =>  TRUE
[22:52:34.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.414]        // while-condition  =>  TRUE
[22:52:34.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.418]        // while-condition  =>  TRUE
[22:52:34.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.420]        // while-condition  =>  TRUE
[22:52:34.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.424]        // while-condition  =>  TRUE
[22:52:34.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.427]        // while-condition  =>  TRUE
[22:52:34.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.432]        // while-condition  =>  TRUE
[22:52:34.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.434]        // while-condition  =>  TRUE
[22:52:34.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.435]        // while-condition  =>  TRUE
[22:52:34.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.439]        // while-condition  =>  TRUE
[22:52:34.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.439]        // while-condition  =>  TRUE
[22:52:34.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.443]        // while-condition  =>  TRUE
[22:52:34.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.445]        // while-condition  =>  TRUE
[22:52:34.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.445]        // while-condition  =>  TRUE
[22:52:34.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.447]        // while-condition  =>  TRUE
[22:52:34.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.451]        // while-condition  =>  TRUE
[22:52:34.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.451]        // while-condition  =>  TRUE
[22:52:34.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.455]        // while-condition  =>  TRUE
[22:52:34.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.455]        // while-condition  =>  TRUE
[22:52:34.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.459]        // while-condition  =>  TRUE
[22:52:34.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.463]        // while-condition  =>  TRUE
[22:52:34.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.463]        // while-condition  =>  TRUE
[22:52:34.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.467]        // while-condition  =>  TRUE
[22:52:34.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.471]        // while-condition  =>  TRUE
[22:52:34.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.471]        // while-condition  =>  TRUE
[22:52:34.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.475]        // while-condition  =>  TRUE
[22:52:34.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.476]        // while-condition  =>  TRUE
[22:52:34.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.476]        // while-condition  =>  TRUE
[22:52:34.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.483]        // while-condition  =>  TRUE
[22:52:34.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.490]        // while-condition  =>  TRUE
[22:52:34.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.496]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.496]        // while-condition  =>  TRUE
[22:52:34.496]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.496]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.496]        // while-condition  =>  TRUE
[22:52:34.496]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.500]        // while-condition  =>  TRUE
[22:52:34.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.504]        // while-condition  =>  TRUE
[22:52:34.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.504]        // while-condition  =>  TRUE
[22:52:34.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.509]        // while-condition  =>  TRUE
[22:52:34.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.510]        // while-condition  =>  TRUE
[22:52:34.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.512]        // while-condition  =>  TRUE
[22:52:34.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.512]        // while-condition  =>  TRUE
[22:52:34.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.517]        // while-condition  =>  TRUE
[22:52:34.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.520]        // while-condition  =>  TRUE
[22:52:34.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.521]        // while-condition  =>  TRUE
[22:52:34.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.524]        // while-condition  =>  TRUE
[22:52:34.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.524]        // while-condition  =>  TRUE
[22:52:34.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.532]        // while-condition  =>  TRUE
[22:52:34.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.532]        // while-condition  =>  TRUE
[22:52:34.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.532]        // while-condition  =>  TRUE
[22:52:34.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.539]        // while-condition  =>  TRUE
[22:52:34.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.541]        // while-condition  =>  TRUE
[22:52:34.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.549]        // while-condition  =>  TRUE
[22:52:34.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.549]        // while-condition  =>  TRUE
[22:52:34.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.549]        // while-condition  =>  TRUE
[22:52:34.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.553]        // while-condition  =>  TRUE
[22:52:34.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.553]        // while-condition  =>  TRUE
[22:52:34.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.558]        // while-condition  =>  TRUE
[22:52:34.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.569]        // while-condition  =>  TRUE
[22:52:34.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.573]        // while-condition  =>  TRUE
[22:52:34.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.577]        // while-condition  =>  TRUE
[22:52:34.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.581]        // while-condition  =>  TRUE
[22:52:34.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.586]        // while-condition  =>  TRUE
[22:52:34.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.589]        // while-condition  =>  TRUE
[22:52:34.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.589]        // while-condition  =>  TRUE
[22:52:34.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.595]        // while-condition  =>  TRUE
[22:52:34.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.597]        // while-condition  =>  TRUE
[22:52:34.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.597]        // while-condition  =>  TRUE
[22:52:34.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.601]        // while-condition  =>  TRUE
[22:52:34.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.613]        // while-condition  =>  TRUE
[22:52:34.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.613]        // while-condition  =>  TRUE
[22:52:34.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.613]        // while-condition  =>  TRUE
[22:52:34.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.617]        // while-condition  =>  TRUE
[22:52:34.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.620]        // while-condition  =>  TRUE
[22:52:34.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.622]        // while-condition  =>  TRUE
[22:52:34.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.624]        // while-condition  =>  TRUE
[22:52:34.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.626]        // while-condition  =>  TRUE
[22:52:34.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.632]        // while-condition  =>  TRUE
[22:52:34.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.638]        // while-condition  =>  TRUE
[22:52:34.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.640]        // while-condition  =>  TRUE
[22:52:34.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.643]        // while-condition  =>  TRUE
[22:52:34.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.644]        // while-condition  =>  TRUE
[22:52:34.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.650]        // while-condition  =>  TRUE
[22:52:34.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.651]        // while-condition  =>  TRUE
[22:52:34.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.651]        // while-condition  =>  TRUE
[22:52:34.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.654]        // while-condition  =>  TRUE
[22:52:34.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.654]        // while-condition  =>  TRUE
[22:52:34.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.658]        // while-condition  =>  TRUE
[22:52:34.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.662]        // while-condition  =>  TRUE
[22:52:34.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.662]        // while-condition  =>  TRUE
[22:52:34.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.666]        // while-condition  =>  TRUE
[22:52:34.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.666]        // while-condition  =>  TRUE
[22:52:34.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.670]        // while-condition  =>  TRUE
[22:52:34.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.670]        // while-condition  =>  TRUE
[22:52:34.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.674]        // while-condition  =>  TRUE
[22:52:34.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.674]        // while-condition  =>  TRUE
[22:52:34.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:52:34.678]        // while-condition  =>  TRUE
[22:52:34.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:34.678]        // while  =>  TIMEOUT
[22:52:34.678]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:52:34.678]      </control>
[22:52:34.678]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:52:34.678]        // if-block "(__protocol & 0xFFFF) == 1"
[22:52:34.678]          // =>  FALSE
[22:52:34.678]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:52:34.678]      </control>
[22:52:34.678]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:52:34.678]        // if-block "(__protocol & 0xFFFF) == 2"
[22:52:34.678]          // =>  TRUE
[22:52:34.678]        <block atomic="false" info="">
[22:52:34.678]          Message(0, "executing SWD power up");
[22:52:34.682]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:52:34.682]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:52:34.682]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:52:34.687]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:52:34.688]        </block>
[22:52:34.688]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:52:34.688]      </control>
[22:52:34.688]      // end if-block "powered_down"
[22:52:34.688]    </control>
[22:52:34.688]    <block atomic="false" info="">
[22:52:34.688]      __var DEBUG_PORT_VAL    = 0;
[22:52:34.688]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:52:34.688]      __var ACCESS_POINT_VAL  = 0;
[22:52:34.688]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:52:34.688]      __ap = 1; 
[22:52:34.688]        // -> [__ap <= 0x00000001]
[22:52:34.688]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:52:34.711]  
[22:52:34.711]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[22:52:34.711]  
[22:52:34.713]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:52:34.713]    </block>
[22:52:34.713]  </sequence>
[22:52:34.713]  
[22:52:45.869]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:52:45.869]  
[22:52:45.871]  <debugvars>
[22:52:45.871]    // Pre-defined
[22:52:45.871]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:45.871]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:52:45.871]    __dp=0x00000000
[22:52:45.871]    __ap=0x00000000
[22:52:45.871]    __traceout=0x00000000      (Trace Disabled)
[22:52:45.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:45.871]    __FlashAddr=0x00000000
[22:52:45.871]    __FlashLen=0x00000000
[22:52:45.871]    __FlashArg=0x00000000
[22:52:45.872]    __FlashOp=0x00000000
[22:52:45.872]    __Result=0x00000000
[22:52:45.872]  </debugvars>
[22:52:45.872]  
[22:52:45.872]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:52:45.872]    <block atomic="false" info="">
[22:52:45.872]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:52:45.872]        // -> [isSWJ <= 0x00000001]
[22:52:45.872]      __var hasDormant = __protocol & 0x00020000;
[22:52:45.872]        // -> [hasDormant <= 0x00000000]
[22:52:45.872]      __var protType   = __protocol & 0x0000FFFF;
[22:52:45.873]        // -> [protType <= 0x00000002]
[22:52:45.873]    </block>
[22:52:45.873]    <control if="protType == 1" while="" timeout="0" info="">
[22:52:45.873]      // if-block "protType == 1"
[22:52:45.873]        // =>  FALSE
[22:52:45.873]      // skip if-block "protType == 1"
[22:52:45.874]    </control>
[22:52:45.874]    <control if="protType == 2" while="" timeout="0" info="">
[22:52:45.874]      // if-block "protType == 2"
[22:52:45.874]        // =>  TRUE
[22:52:45.874]      <control if="isSWJ" while="" timeout="0" info="">
[22:52:45.874]        // if-block "isSWJ"
[22:52:45.874]          // =>  TRUE
[22:52:45.874]        <control if="hasDormant" while="" timeout="0" info="">
[22:52:45.874]          // if-block "hasDormant"
[22:52:45.874]            // =>  FALSE
[22:52:45.874]          // skip if-block "hasDormant"
[22:52:45.874]        </control>
[22:52:45.874]        <control if="!hasDormant" while="" timeout="0" info="">
[22:52:45.874]          // if-block "!hasDormant"
[22:52:45.874]            // =>  TRUE
[22:52:45.874]          <block atomic="false" info="">
[22:52:45.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:52:45.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:45.878]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:52:45.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:52:45.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:52:45.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:45.879]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:52:45.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:52:45.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:52:45.884]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:45.884]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:52:45.886]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:52:45.886]          </block>
[22:52:45.886]          // end if-block "!hasDormant"
[22:52:45.886]        </control>
[22:52:45.886]        // end if-block "isSWJ"
[22:52:45.886]      </control>
[22:52:45.886]      <control if="!isSWJ" while="" timeout="0" info="">
[22:52:45.886]        // if-block "!isSWJ"
[22:52:45.886]          // =>  FALSE
[22:52:45.886]        // skip if-block "!isSWJ"
[22:52:45.886]      </control>
[22:52:45.886]      <block atomic="false" info="">
[22:52:45.886]        ReadDP(0x0);
[22:52:45.888]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:52:45.888]      </block>
[22:52:45.888]      // end if-block "protType == 2"
[22:52:45.888]    </control>
[22:52:45.888]  </sequence>
[22:52:45.888]  
[22:52:49.164]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:52:49.164]  
[22:52:49.165]  <debugvars>
[22:52:49.165]    // Pre-defined
[22:52:49.165]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:49.165]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:49.165]    __dp=0x00000000
[22:52:49.165]    __ap=0x00000000
[22:52:49.165]    __traceout=0x00000000      (Trace Disabled)
[22:52:49.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:49.165]    __FlashAddr=0x00000000
[22:52:49.165]    __FlashLen=0x00000000
[22:52:49.165]    __FlashArg=0x00000000
[22:52:49.165]    __FlashOp=0x00000000
[22:52:49.165]    __Result=0x00000000
[22:52:49.165]  </debugvars>
[22:52:49.165]  
[22:52:49.167]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:52:49.167]    <block atomic="false" info="">
[22:52:49.167]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:52:49.167]        // -> [isSWJ <= 0x00000001]
[22:52:49.167]      __var hasDormant = __protocol & 0x00020000;
[22:52:49.167]        // -> [hasDormant <= 0x00000000]
[22:52:49.167]      __var protType   = __protocol & 0x0000FFFF;
[22:52:49.167]        // -> [protType <= 0x00000002]
[22:52:49.167]    </block>
[22:52:49.167]    <control if="protType == 1" while="" timeout="0" info="">
[22:52:49.167]      // if-block "protType == 1"
[22:52:49.167]        // =>  FALSE
[22:52:49.167]      // skip if-block "protType == 1"
[22:52:49.167]    </control>
[22:52:49.168]    <control if="protType == 2" while="" timeout="0" info="">
[22:52:49.168]      // if-block "protType == 2"
[22:52:49.168]        // =>  TRUE
[22:52:49.168]      <control if="isSWJ" while="" timeout="0" info="">
[22:52:49.168]        // if-block "isSWJ"
[22:52:49.168]          // =>  TRUE
[22:52:49.168]        <control if="hasDormant" while="" timeout="0" info="">
[22:52:49.168]          // if-block "hasDormant"
[22:52:49.168]            // =>  FALSE
[22:52:49.169]          // skip if-block "hasDormant"
[22:52:49.169]        </control>
[22:52:49.169]        <control if="!hasDormant" while="" timeout="0" info="">
[22:52:49.169]          // if-block "!hasDormant"
[22:52:49.169]            // =>  TRUE
[22:52:49.169]          <block atomic="false" info="">
[22:52:49.169]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:52:49.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:49.171]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:52:49.172]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:52:49.173]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:52:49.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:49.174]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:52:49.176]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:52:49.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:52:49.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:52:49.177]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:52:49.190]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:52:49.190]          </block>
[22:52:49.190]          // end if-block "!hasDormant"
[22:52:49.190]        </control>
[22:52:49.190]        // end if-block "isSWJ"
[22:52:49.190]      </control>
[22:52:49.190]      <control if="!isSWJ" while="" timeout="0" info="">
[22:52:49.190]        // if-block "!isSWJ"
[22:52:49.190]          // =>  FALSE
[22:52:49.190]        // skip if-block "!isSWJ"
[22:52:49.190]      </control>
[22:52:49.190]      <block atomic="false" info="">
[22:52:49.190]        ReadDP(0x0);
[22:52:49.193]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:52:49.193]      </block>
[22:52:49.193]      // end if-block "protType == 2"
[22:52:49.193]    </control>
[22:52:49.193]  </sequence>
[22:52:49.193]  
[22:52:49.203]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:52:49.203]  
[22:52:49.203]  <debugvars>
[22:52:49.203]    // Pre-defined
[22:52:49.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:49.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:49.203]    __dp=0x00000000
[22:52:49.203]    __ap=0x00000000
[22:52:49.203]    __traceout=0x00000000      (Trace Disabled)
[22:52:49.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:49.203]    __FlashAddr=0x00000000
[22:52:49.205]    __FlashLen=0x00000000
[22:52:49.205]    __FlashArg=0x00000000
[22:52:49.205]    __FlashOp=0x00000000
[22:52:49.205]    __Result=0x00000000
[22:52:49.205]  </debugvars>
[22:52:49.205]  
[22:52:49.205]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:52:49.205]    <block atomic="false" info="">
[22:52:49.205]      __var SW_DP_ABORT       = 0x0;
[22:52:49.205]        // -> [SW_DP_ABORT <= 0x00000000]
[22:52:49.205]      __var DP_CTRL_STAT      = 0x4;
[22:52:49.205]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:52:49.205]      __var DP_SELECT         = 0x8;
[22:52:49.205]        // -> [DP_SELECT <= 0x00000008]
[22:52:49.205]      __var powered_down      = 0;
[22:52:49.206]        // -> [powered_down <= 0x00000000]
[22:52:49.206]      WriteDP(DP_SELECT, 0x00000000);
[22:52:49.208]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:52:49.208]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:52:49.210]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:52:49.210]        // -> [powered_down <= 0x00000001]
[22:52:49.210]    </block>
[22:52:49.210]    <control if="powered_down" while="" timeout="0" info="">
[22:52:49.210]      // if-block "powered_down"
[22:52:49.210]        // =>  TRUE
[22:52:49.210]      <block atomic="false" info="">
[22:52:49.210]        Message(0, "Debug/System power-up request sent");
[22:52:49.212]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:52:49.215]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:52:49.215]      </block>
[22:52:49.215]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:52:49.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:52:49.217]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:52:49.217]        // while-condition  =>  FALSE
[22:52:49.218]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:52:49.218]      </control>
[22:52:49.218]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:52:49.218]        // if-block "(__protocol & 0xFFFF) == 1"
[22:52:49.218]          // =>  FALSE
[22:52:49.218]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:52:49.218]      </control>
[22:52:49.218]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:52:49.218]        // if-block "(__protocol & 0xFFFF) == 2"
[22:52:49.219]          // =>  TRUE
[22:52:49.219]        <block atomic="false" info="">
[22:52:49.219]          Message(0, "executing SWD power up");
[22:52:49.221]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:52:49.223]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:52:49.223]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:52:49.228]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:52:49.228]        </block>
[22:52:49.228]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:52:49.228]      </control>
[22:52:49.228]      // end if-block "powered_down"
[22:52:49.228]    </control>
[22:52:49.228]    <block atomic="false" info="">
[22:52:49.228]      __var DEBUG_PORT_VAL    = 0;
[22:52:49.228]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:52:49.230]      __var ACCESS_POINT_VAL  = 0;
[22:52:49.230]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:52:49.230]      __ap = 1; 
[22:52:49.230]        // -> [__ap <= 0x00000001]
[22:52:49.230]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:52:49.246]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:52:49.246]      __ap = 4;
[22:52:49.246]        // -> [__ap <= 0x00000004]
[22:52:49.246]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:52:49.252]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:52:49.252]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:52:49.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:52:49.256]    </block>
[22:52:49.256]    <block atomic="false" info="">
[22:52:49.256]      __var nReset = 0x80;
[22:52:49.256]        // -> [nReset <= 0x00000080]
[22:52:49.256]      __var canReadPins = 0;
[22:52:49.256]        // -> [canReadPins <= 0x00000000]
[22:52:49.256]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:52:49.259]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:52:49.259]        // -> [canReadPins <= 0x00000001]
[22:52:49.259]    </block>
[22:52:49.259]    <control if="" while="1" timeout="200" info="">
[22:52:49.260]      // while "1"  (timeout="200")
[22:52:49.260]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.261]      // while "1"  (timeout="200")
[22:52:49.261]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.263]      // while "1"  (timeout="200")
[22:52:49.263]      // while-condition  =>  TRUE
[22:52:49.265]      // while "1"  (timeout="200")
[22:52:49.265]      // while-condition  =>  TRUE
[22:52:49.265]      // while "1"  (timeout="200")
[22:52:49.265]      // while-condition  =>  TRUE
[22:52:49.265]      // while "1"  (timeout="200")
[22:52:49.265]      // while-condition  =>  TRUE
[22:52:49.265]      // while "1"  (timeout="200")
[22:52:49.265]      // while-condition  =>  TRUE
[22:52:49.265]      // while "1"  (timeout="200")
[22:52:49.265]      // while-condition  =>  TRUE
[22:52:49.265]      // while "1"  (timeout="200")
[22:52:49.267]      // while-condition  =>  TRUE
[22:52:49.267]      // while "1"  (timeout="200")
[22:52:49.267]      // while-condition  =>  TRUE
[22:52:49.267]      // while "1"  (timeout="200")
[22:52:49.267]      // while-condition  =>  TRUE
[22:52:49.267]      // while "1"  (timeout="200")
[22:52:49.267]      // while-condition  =>  TRUE
[22:52:49.267]      // while "1"  (timeout="200")
[22:52:49.267]      // while-condition  =>  TRUE
[22:52:49.268]      // while "1"  (timeout="200")
[22:52:49.268]      // while-condition  =>  TRUE
[22:52:49.268]      // while "1"  (timeout="200")
[22:52:49.268]      // while-condition  =>  TRUE
[22:52:49.268]      // while "1"  (timeout="200")
[22:52:49.268]      // while-condition  =>  TRUE
[22:52:49.268]      // while "1"  (timeout="200")
[22:52:49.268]      // while-condition  =>  TRUE
[22:52:49.269]      // while "1"  (timeout="200")
[22:52:49.269]      // while-condition  =>  TRUE
[22:52:49.269]      // while "1"  (timeout="200")
[22:52:49.269]      // while-condition  =>  TRUE
[22:52:49.269]      // while "1"  (timeout="200")
[22:52:49.269]      // while-condition  =>  TRUE
[22:52:49.269]      // while "1"  (timeout="200")
[22:52:49.269]      // while-condition  =>  TRUE
[22:52:49.269]      // while "1"  (timeout="200")
[22:52:49.269]      // while-condition  =>  TRUE
[22:52:49.269]      // while "1"  (timeout="200")
[22:52:49.269]      // while-condition  =>  TRUE
[22:52:49.270]      // while "1"  (timeout="200")
[22:52:49.270]      // while  =>  TIMEOUT
[22:52:49.270]      // end while "1"
[22:52:49.270]    </control>
[22:52:49.270]    <control if="canReadPins" while="" timeout="0" info="">
[22:52:49.270]      // if-block "canReadPins"
[22:52:49.270]        // =>  TRUE
[22:52:49.270]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:52:49.270]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:52:49.281]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:52:49.281]        // while-condition  =>  FALSE
[22:52:49.281]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:52:49.281]      </control>
[22:52:49.281]      // end if-block "canReadPins"
[22:52:49.281]    </control>
[22:52:49.281]    <control if="!canReadPins" while="" timeout="0" info="">
[22:52:49.281]      // if-block "!canReadPins"
[22:52:49.281]        // =>  FALSE
[22:52:49.281]      // skip if-block "!canReadPins"
[22:52:49.281]    </control>
[22:52:49.281]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:52:49.281]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:52:49.281]        // =>  TRUE
[22:52:49.281]      <block atomic="false" info="">
[22:52:49.281]        WriteAP(0x00, 0x190008);
[22:52:49.285]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:52:49.285]        WriteAP(0xF0, 0x01);
[22:52:49.295]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:52:49.297]      </block>
[22:52:49.297]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:52:49.297]    </control>
[22:52:49.297]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:52:49.297]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:52:49.297]        // =>  FALSE
[22:52:49.297]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:52:49.297]    </control>
[22:52:49.297]    <block atomic="false" info="">
[22:52:49.297]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:52:49.309]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:52:49.309]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:52:49.309]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:52:49.312]      __ap = 0; //lets make sure we reset the access point selection
[22:52:49.313]        // -> [__ap <= 0x00000000]
[22:52:49.313]    </block>
[22:52:49.313]  </sequence>
[22:52:49.313]  
[22:52:49.343]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:52:49.343]  
[22:52:49.343]  <debugvars>
[22:52:49.343]    // Pre-defined
[22:52:49.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:52:49.343]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:52:49.343]    __dp=0x00000000
[22:52:49.343]    __ap=0x00000000
[22:52:49.345]    __traceout=0x00000000      (Trace Disabled)
[22:52:49.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:52:49.345]    __FlashAddr=0x00000000
[22:52:49.345]    __FlashLen=0x00000000
[22:52:49.345]    __FlashArg=0x00000000
[22:52:49.345]    __FlashOp=0x00000000
[22:52:49.345]    __Result=0x00000000
[22:52:49.345]  </debugvars>
[22:52:49.345]  
[22:52:49.345]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:52:49.345]    <block atomic="false" info="">
[22:52:49.345]      __var deviceID = 0;
[22:52:49.345]        // -> [deviceID <= 0x00000000]
[22:52:49.345]      __var version = 0;
[22:52:49.345]        // -> [version <= 0x00000000]
[22:52:49.345]      __var partNum = 0;
[22:52:49.345]        // -> [partNum <= 0x00000000]
[22:52:49.345]      __var manuf = 0;
[22:52:49.347]        // -> [manuf <= 0x00000000]
[22:52:49.347]      __var isMSPM0G1X0X_G3X0X = 0;
[22:52:49.347]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:52:49.347]      __var isProduction = 0;
[22:52:49.347]        // -> [isProduction <= 0x00000000]
[22:52:49.347]      __var continueId = 0;
[22:52:49.347]        // -> [continueId <= 0x00000000]
[22:52:49.347]      deviceID =   Read32(0x41C40004);
[22:52:49.351]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:52:49.351]        // -> [deviceID <= 0x2BB8802F]
[22:52:49.352]      version = deviceID >> 28;
[22:52:49.352]        // -> [version <= 0x00000002]
[22:52:49.352]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:52:49.352]        // -> [partNum <= 0x0000BB88]
[22:52:49.352]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:52:49.352]        // -> [manuf <= 0x00000017]
[22:52:49.352]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:52:49.352]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:52:49.352]      isProduction = (version > 0);
[22:52:49.352]        // -> [isProduction <= 0x00000001]
[22:52:49.352]    </block>
[22:52:49.352]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:52:49.352]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:52:49.352]        // =>  FALSE
[22:52:49.352]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:52:49.352]    </control>
[22:52:49.352]    <control if="continueId == 4" while="" timeout="0" info="">
[22:52:49.352]      // if-block "continueId == 4"
[22:52:49.352]        // =>  FALSE
[22:52:49.354]      // skip if-block "continueId == 4"
[22:52:49.354]    </control>
[22:52:49.354]    <control if="!isProduction" while="" timeout="0" info="">
[22:52:49.354]      // if-block "!isProduction"
[22:52:49.354]        // =>  FALSE
[22:52:49.354]      // skip if-block "!isProduction"
[22:52:49.354]    </control>
[22:52:49.354]  </sequence>
[22:52:49.354]  
[00:13:42.666]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:13:42.666]  
[00:13:42.666]  <debugvars>
[00:13:42.666]    // Pre-defined
[00:13:42.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:13:42.666]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:13:42.666]    __dp=0x00000000
[00:13:42.666]    __ap=0x00000000
[00:13:42.666]    __traceout=0x00000000      (Trace Disabled)
[00:13:42.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:13:42.666]    __FlashAddr=0x00000000
[00:13:42.666]    __FlashLen=0x00000000
[00:13:42.666]    __FlashArg=0x00000000
[00:13:42.666]    __FlashOp=0x00000000
[00:13:42.666]    __Result=0x00000000
[00:13:42.666]  </debugvars>
[00:13:42.666]  
[00:13:42.666]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:13:42.666]    <block atomic="false" info="">
[00:13:42.666]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:13:42.666]        // -> [isSWJ <= 0x00000001]
[00:13:42.666]      __var hasDormant = __protocol & 0x00020000;
[00:13:42.666]        // -> [hasDormant <= 0x00000000]
[00:13:42.666]      __var protType   = __protocol & 0x0000FFFF;
[00:13:42.666]        // -> [protType <= 0x00000002]
[00:13:42.666]    </block>
[00:13:42.666]    <control if="protType == 1" while="" timeout="0" info="">
[00:13:42.666]      // if-block "protType == 1"
[00:13:42.666]        // =>  FALSE
[00:13:42.666]      // skip if-block "protType == 1"
[00:13:42.666]    </control>
[00:13:42.666]    <control if="protType == 2" while="" timeout="0" info="">
[00:13:42.666]      // if-block "protType == 2"
[00:13:42.666]        // =>  TRUE
[00:13:42.666]      <control if="isSWJ" while="" timeout="0" info="">
[00:13:42.666]        // if-block "isSWJ"
[00:13:42.666]          // =>  TRUE
[00:13:42.666]        <control if="hasDormant" while="" timeout="0" info="">
[00:13:42.666]          // if-block "hasDormant"
[00:13:42.666]            // =>  FALSE
[00:13:42.666]          // skip if-block "hasDormant"
[00:13:42.666]        </control>
[00:13:42.666]        <control if="!hasDormant" while="" timeout="0" info="">
[00:13:42.666]          // if-block "!hasDormant"
[00:13:42.666]            // =>  TRUE
[00:13:42.666]          <block atomic="false" info="">
[00:13:42.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:13:42.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:13:42.676]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:13:42.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:13:42.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:13:42.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:13:42.676]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:13:42.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:13:42.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:13:42.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:13:42.676]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:13:42.676]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:13:42.676]          </block>
[00:13:42.676]          // end if-block "!hasDormant"
[00:13:42.676]        </control>
[00:13:42.676]        // end if-block "isSWJ"
[00:13:42.676]      </control>
[00:13:42.686]      <control if="!isSWJ" while="" timeout="0" info="">
[00:13:42.686]        // if-block "!isSWJ"
[00:13:42.686]          // =>  FALSE
[00:13:42.686]        // skip if-block "!isSWJ"
[00:13:42.686]      </control>
[00:13:42.686]      <block atomic="false" info="">
[00:13:42.686]        ReadDP(0x0);
[00:13:42.686]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:13:42.686]      </block>
[00:13:42.686]      // end if-block "protType == 2"
[00:13:42.686]    </control>
[00:13:42.686]  </sequence>
[00:13:42.686]  
[00:13:42.686]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:13:42.686]  
[00:13:42.686]  <debugvars>
[00:13:42.686]    // Pre-defined
[00:13:42.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:13:42.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:13:42.686]    __dp=0x00000000
[00:13:42.686]    __ap=0x00000000
[00:13:42.686]    __traceout=0x00000000      (Trace Disabled)
[00:13:42.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:13:42.686]    __FlashAddr=0x00000000
[00:13:42.686]    __FlashLen=0x00000000
[00:13:42.686]    __FlashArg=0x00000000
[00:13:42.686]    __FlashOp=0x00000000
[00:13:42.686]    __Result=0x00000000
[00:13:42.686]  </debugvars>
[00:13:42.686]  
[00:13:42.686]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:13:42.686]    <block atomic="false" info="">
[00:13:42.686]      __var SW_DP_ABORT       = 0x0;
[00:13:42.686]        // -> [SW_DP_ABORT <= 0x00000000]
[00:13:42.686]      __var DP_CTRL_STAT      = 0x4;
[00:13:42.696]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:13:42.696]      __var DP_SELECT         = 0x8;
[00:13:42.696]        // -> [DP_SELECT <= 0x00000008]
[00:13:42.696]      __var powered_down      = 0;
[00:13:42.696]        // -> [powered_down <= 0x00000000]
[00:13:42.696]      WriteDP(DP_SELECT, 0x00000000);
[00:13:42.696]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:13:42.696]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:13:42.696]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:13:42.696]        // -> [powered_down <= 0x00000001]
[00:13:42.696]    </block>
[00:13:42.696]    <control if="powered_down" while="" timeout="0" info="">
[00:13:42.696]      // if-block "powered_down"
[00:13:42.696]        // =>  TRUE
[00:13:42.696]      <block atomic="false" info="">
[00:13:42.696]        Message(0, "Debug/System power-up request sent");
[00:13:42.706]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:13:42.709]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:13:42.709]      </block>
[00:13:42.710]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:13:42.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:13:42.710]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:13:42.710]        // while-condition  =>  FALSE
[00:13:42.710]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:13:42.710]      </control>
[00:13:42.710]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:13:42.710]        // if-block "(__protocol & 0xFFFF) == 1"
[00:13:42.710]          // =>  FALSE
[00:13:42.710]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:13:42.710]      </control>
[00:13:42.710]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:13:42.710]        // if-block "(__protocol & 0xFFFF) == 2"
[00:13:42.710]          // =>  TRUE
[00:13:42.710]        <block atomic="false" info="">
[00:13:42.710]          Message(0, "executing SWD power up");
[00:13:42.710]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:13:42.716]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:13:42.716]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:13:42.716]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:13:42.716]        </block>
[00:13:42.716]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:13:42.716]      </control>
[00:13:42.716]      // end if-block "powered_down"
[00:13:42.716]    </control>
[00:13:42.716]    <block atomic="false" info="">
[00:13:42.716]      __var DEBUG_PORT_VAL    = 0;
[00:13:42.716]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:13:42.716]      __var ACCESS_POINT_VAL  = 0;
[00:13:42.716]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:13:42.716]      __ap = 1; 
[00:13:42.716]        // -> [__ap <= 0x00000001]
[00:13:42.716]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:13:42.716]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:13:42.716]      __ap = 4;
[00:13:42.726]        // -> [__ap <= 0x00000004]
[00:13:42.726]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:13:42.726]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:13:42.726]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:13:42.726]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:13:42.726]    </block>
[00:13:42.726]    <block atomic="false" info="">
[00:13:42.726]      __var nReset = 0x80;
[00:13:42.726]        // -> [nReset <= 0x00000080]
[00:13:42.726]      __var canReadPins = 0;
[00:13:42.726]        // -> [canReadPins <= 0x00000000]
[00:13:42.726]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:13:42.726]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:13:42.726]        // -> [canReadPins <= 0x00000001]
[00:13:42.726]    </block>
[00:13:42.726]    <control if="" while="1" timeout="200" info="">
[00:13:42.726]      // while "1"  (timeout="200")
[00:13:42.726]      // while-condition  =>  TRUE
[00:13:42.726]      // while "1"  (timeout="200")
[00:13:42.726]      // while-condition  =>  TRUE
[00:13:42.726]      // while "1"  (timeout="200")
[00:13:42.726]      // while-condition  =>  TRUE
[00:13:42.726]      // while "1"  (timeout="200")
[00:13:42.726]      // while-condition  =>  TRUE
[00:13:42.726]      // while "1"  (timeout="200")
[00:13:42.726]      // while-condition  =>  TRUE
[00:13:42.726]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.736]      // while-condition  =>  TRUE
[00:13:42.736]      // while "1"  (timeout="200")
[00:13:42.746]      // while-condition  =>  TRUE
[00:13:42.746]      // while "1"  (timeout="200")
[00:13:42.746]      // while  =>  TIMEOUT
[00:13:42.746]      // end while "1"
[00:13:42.746]    </control>
[00:13:42.746]    <control if="canReadPins" while="" timeout="0" info="">
[00:13:42.746]      // if-block "canReadPins"
[00:13:42.746]        // =>  TRUE
[00:13:42.746]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:13:42.746]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:13:42.749]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:13:42.749]        // while-condition  =>  FALSE
[00:13:42.749]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:13:42.749]      </control>
[00:13:42.749]      // end if-block "canReadPins"
[00:13:42.749]    </control>
[00:13:42.749]    <control if="!canReadPins" while="" timeout="0" info="">
[00:13:42.749]      // if-block "!canReadPins"
[00:13:42.749]        // =>  FALSE
[00:13:42.749]      // skip if-block "!canReadPins"
[00:13:42.749]    </control>
[00:13:42.749]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:13:42.749]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:13:42.749]        // =>  TRUE
[00:13:42.749]      <block atomic="false" info="">
[00:13:42.749]        WriteAP(0x00, 0x190008);
[00:13:42.749]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:13:42.749]        WriteAP(0xF0, 0x01);
[00:13:42.749]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:13:42.749]      </block>
[00:13:42.749]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:13:42.749]    </control>
[00:13:42.749]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:13:42.749]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:13:42.749]        // =>  FALSE
[00:13:42.749]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:13:42.749]    </control>
[00:13:42.757]    <block atomic="false" info="">
[00:13:42.757]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:13:42.759]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:13:42.759]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:13:42.759]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:13:42.759]      __ap = 0; //lets make sure we reset the access point selection
[00:13:42.759]        // -> [__ap <= 0x00000000]
[00:13:42.759]    </block>
[00:13:42.759]  </sequence>
[00:13:42.759]  
[00:13:42.793]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:13:42.793]  
[00:13:42.793]  <debugvars>
[00:13:42.793]    // Pre-defined
[00:13:42.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:13:42.793]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:13:42.793]    __dp=0x00000000
[00:13:42.793]    __ap=0x00000000
[00:13:42.793]    __traceout=0x00000000      (Trace Disabled)
[00:13:42.793]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:13:42.793]    __FlashAddr=0x00000000
[00:13:42.793]    __FlashLen=0x00000000
[00:13:42.793]    __FlashArg=0x00000000
[00:13:42.793]    __FlashOp=0x00000000
[00:13:42.793]    __Result=0x00000000
[00:13:42.793]  </debugvars>
[00:13:42.793]  
[00:13:42.793]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:13:42.793]    <block atomic="false" info="">
[00:13:42.793]      __var deviceID = 0;
[00:13:42.793]        // -> [deviceID <= 0x00000000]
[00:13:42.793]      __var version = 0;
[00:13:42.793]        // -> [version <= 0x00000000]
[00:13:42.793]      __var partNum = 0;
[00:13:42.793]        // -> [partNum <= 0x00000000]
[00:13:42.793]      __var manuf = 0;
[00:13:42.793]        // -> [manuf <= 0x00000000]
[00:13:42.793]      __var isMSPM0G1X0X_G3X0X = 0;
[00:13:42.793]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:13:42.793]      __var isProduction = 0;
[00:13:42.793]        // -> [isProduction <= 0x00000000]
[00:13:42.793]      __var continueId = 0;
[00:13:42.793]        // -> [continueId <= 0x00000000]
[00:13:42.793]      deviceID =   Read32(0x41C40004);
[00:13:42.798]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:13:42.798]        // -> [deviceID <= 0x2BB8802F]
[00:13:42.798]      version = deviceID >> 28;
[00:13:42.798]        // -> [version <= 0x00000002]
[00:13:42.798]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:13:42.798]        // -> [partNum <= 0x0000BB88]
[00:13:42.798]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:13:42.798]        // -> [manuf <= 0x00000017]
[00:13:42.798]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:13:42.798]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:13:42.798]      isProduction = (version > 0);
[00:13:42.798]        // -> [isProduction <= 0x00000001]
[00:13:42.798]    </block>
[00:13:42.798]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:13:42.798]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:13:42.798]        // =>  FALSE
[00:13:42.798]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:13:42.798]    </control>
[00:13:42.798]    <control if="continueId == 4" while="" timeout="0" info="">
[00:13:42.798]      // if-block "continueId == 4"
[00:13:42.798]        // =>  FALSE
[00:13:42.798]      // skip if-block "continueId == 4"
[00:13:42.798]    </control>
[00:13:42.798]    <control if="!isProduction" while="" timeout="0" info="">
[00:13:42.798]      // if-block "!isProduction"
[00:13:42.798]        // =>  FALSE
[00:13:42.798]      // skip if-block "!isProduction"
[00:13:42.798]    </control>
[00:13:42.798]  </sequence>
[00:13:42.798]  
[00:13:48.713]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:13:48.713]  
[00:13:48.713]  <debugvars>
[00:13:48.713]    // Pre-defined
[00:13:48.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:13:48.713]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:13:48.713]    __dp=0x00000000
[00:13:48.713]    __ap=0x00000000
[00:13:48.713]    __traceout=0x00000000      (Trace Disabled)
[00:13:48.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:13:48.713]    __FlashAddr=0x00000000
[00:13:48.713]    __FlashLen=0x00000000
[00:13:48.713]    __FlashArg=0x00000000
[00:13:48.713]    __FlashOp=0x00000000
[00:13:48.713]    __Result=0x00000000
[00:13:48.713]  </debugvars>
[00:13:48.716]  
[00:13:48.716]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:13:48.716]    <block atomic="false" info="">
[00:13:48.716]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:13:48.716]        // -> [isSWJ <= 0x00000001]
[00:13:48.716]      __var hasDormant = __protocol & 0x00020000;
[00:13:48.716]        // -> [hasDormant <= 0x00000000]
[00:13:48.716]      __var protType   = __protocol & 0x0000FFFF;
[00:13:48.716]        // -> [protType <= 0x00000002]
[00:13:48.716]    </block>
[00:13:48.716]    <control if="protType == 1" while="" timeout="0" info="">
[00:13:48.716]      // if-block "protType == 1"
[00:13:48.716]        // =>  FALSE
[00:13:48.716]      // skip if-block "protType == 1"
[00:13:48.716]    </control>
[00:13:48.716]    <control if="protType == 2" while="" timeout="0" info="">
[00:13:48.716]      // if-block "protType == 2"
[00:13:48.716]        // =>  TRUE
[00:13:48.716]      <control if="isSWJ" while="" timeout="0" info="">
[00:13:48.716]        // if-block "isSWJ"
[00:13:48.716]          // =>  TRUE
[00:13:48.718]        <control if="hasDormant" while="" timeout="0" info="">
[00:13:48.718]          // if-block "hasDormant"
[00:13:48.718]            // =>  FALSE
[00:13:48.718]          // skip if-block "hasDormant"
[00:13:48.718]        </control>
[00:13:48.718]        <control if="!hasDormant" while="" timeout="0" info="">
[00:13:48.718]          // if-block "!hasDormant"
[00:13:48.718]            // =>  TRUE
[00:13:48.718]          <block atomic="false" info="">
[00:13:48.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:13:48.720]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:13:48.720]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:13:48.722]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:13:48.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:13:48.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:13:48.723]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:13:48.729]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:13:48.729]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:13:48.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:13:48.729]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:13:48.729]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:13:48.729]          </block>
[00:13:48.729]          // end if-block "!hasDormant"
[00:13:48.729]        </control>
[00:13:48.729]        // end if-block "isSWJ"
[00:13:48.729]      </control>
[00:13:48.729]      <control if="!isSWJ" while="" timeout="0" info="">
[00:13:48.729]        // if-block "!isSWJ"
[00:13:48.729]          // =>  FALSE
[00:13:48.729]        // skip if-block "!isSWJ"
[00:13:48.729]      </control>
[00:13:48.729]      <block atomic="false" info="">
[00:13:48.729]        ReadDP(0x0);
[00:13:48.729]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:13:48.729]      </block>
[00:13:48.729]      // end if-block "protType == 2"
[00:13:48.729]    </control>
[00:13:48.729]  </sequence>
[00:13:48.729]  
[00:13:48.738]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:13:48.738]  
[00:13:48.738]  <debugvars>
[00:13:48.738]    // Pre-defined
[00:13:48.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:13:48.738]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:13:48.738]    __dp=0x00000000
[00:13:48.738]    __ap=0x00000000
[00:13:48.738]    __traceout=0x00000000      (Trace Disabled)
[00:13:48.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:13:48.738]    __FlashAddr=0x00000000
[00:13:48.738]    __FlashLen=0x00000000
[00:13:48.738]    __FlashArg=0x00000000
[00:13:48.738]    __FlashOp=0x00000000
[00:13:48.738]    __Result=0x00000000
[00:13:48.738]  </debugvars>
[00:13:48.738]  
[00:13:48.738]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:13:48.738]    <block atomic="false" info="">
[00:13:48.738]      __var SW_DP_ABORT       = 0x0;
[00:13:48.738]        // -> [SW_DP_ABORT <= 0x00000000]
[00:13:48.738]      __var DP_CTRL_STAT      = 0x4;
[00:13:48.738]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:13:48.738]      __var DP_SELECT         = 0x8;
[00:13:48.738]        // -> [DP_SELECT <= 0x00000008]
[00:13:48.738]      __var powered_down      = 0;
[00:13:48.738]        // -> [powered_down <= 0x00000000]
[00:13:48.738]      WriteDP(DP_SELECT, 0x00000000);
[00:13:48.738]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:13:48.738]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:13:48.743]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:13:48.743]        // -> [powered_down <= 0x00000001]
[00:13:48.743]    </block>
[00:13:48.743]    <control if="powered_down" while="" timeout="0" info="">
[00:13:48.743]      // if-block "powered_down"
[00:13:48.743]        // =>  TRUE
[00:13:48.745]      <block atomic="false" info="">
[00:13:48.745]        Message(0, "Debug/System power-up request sent");
[00:13:48.745]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:13:48.749]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:13:48.749]      </block>
[00:13:48.749]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:13:48.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:13:48.750]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:13:48.750]        // while-condition  =>  FALSE
[00:13:48.750]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:13:48.750]      </control>
[00:13:48.750]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:13:48.752]        // if-block "(__protocol & 0xFFFF) == 1"
[00:13:48.752]          // =>  FALSE
[00:13:48.752]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:13:48.752]      </control>
[00:13:48.752]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:13:48.752]        // if-block "(__protocol & 0xFFFF) == 2"
[00:13:48.752]          // =>  TRUE
[00:13:48.752]        <block atomic="false" info="">
[00:13:48.752]          Message(0, "executing SWD power up");
[00:13:48.753]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:13:48.756]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:13:48.756]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:13:48.758]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:13:48.758]        </block>
[00:13:48.758]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:13:48.758]      </control>
[00:13:48.758]      // end if-block "powered_down"
[00:13:48.758]    </control>
[00:13:48.758]    <block atomic="false" info="">
[00:13:48.758]      __var DEBUG_PORT_VAL    = 0;
[00:13:48.758]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:13:48.758]      __var ACCESS_POINT_VAL  = 0;
[00:13:48.758]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:13:48.758]      __ap = 1; 
[00:13:48.758]        // -> [__ap <= 0x00000001]
[00:13:48.758]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:13:48.762]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:13:48.762]      __ap = 4;
[00:13:48.762]        // -> [__ap <= 0x00000004]
[00:13:48.762]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:13:48.762]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:13:48.762]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:13:48.762]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:13:48.768]    </block>
[00:13:48.768]    <block atomic="false" info="">
[00:13:48.768]      __var nReset = 0x80;
[00:13:48.768]        // -> [nReset <= 0x00000080]
[00:13:48.768]      __var canReadPins = 0;
[00:13:48.768]        // -> [canReadPins <= 0x00000000]
[00:13:48.768]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:13:48.770]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:13:48.770]        // -> [canReadPins <= 0x00000001]
[00:13:48.770]    </block>
[00:13:48.770]    <control if="" while="1" timeout="200" info="">
[00:13:48.770]      // while "1"  (timeout="200")
[00:13:48.770]      // while-condition  =>  TRUE
[00:13:48.770]      // while "1"  (timeout="200")
[00:13:48.772]      // while-condition  =>  TRUE
[00:13:48.772]      // while "1"  (timeout="200")
[00:13:48.772]      // while-condition  =>  TRUE
[00:13:48.772]      // while "1"  (timeout="200")
[00:13:48.772]      // while-condition  =>  TRUE
[00:13:48.772]      // while "1"  (timeout="200")
[00:13:48.772]      // while-condition  =>  TRUE
[00:13:48.772]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.773]      // while "1"  (timeout="200")
[00:13:48.773]      // while-condition  =>  TRUE
[00:13:48.774]      // while "1"  (timeout="200")
[00:13:48.774]      // while-condition  =>  TRUE
[00:13:48.774]      // while "1"  (timeout="200")
[00:13:48.774]      // while-condition  =>  TRUE
[00:13:48.774]      // while "1"  (timeout="200")
[00:13:48.774]      // while-condition  =>  TRUE
[00:13:48.774]      // while "1"  (timeout="200")
[00:13:48.774]      // while-condition  =>  TRUE
[00:13:48.774]      // while "1"  (timeout="200")
[00:13:48.774]      // while-condition  =>  TRUE
[00:13:48.774]      // while "1"  (timeout="200")
[00:13:48.775]      // while-condition  =>  TRUE
[00:13:48.775]      // while "1"  (timeout="200")
[00:13:48.775]      // while-condition  =>  TRUE
[00:13:48.775]      // while "1"  (timeout="200")
[00:13:48.775]      // while-condition  =>  TRUE
[00:13:48.775]      // while "1"  (timeout="200")
[00:13:48.775]      // while-condition  =>  TRUE
[00:13:48.775]      // while "1"  (timeout="200")
[00:13:48.775]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.776]      // while "1"  (timeout="200")
[00:13:48.776]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.778]      // while "1"  (timeout="200")
[00:13:48.778]      // while-condition  =>  TRUE
[00:13:48.780]      // while "1"  (timeout="200")
[00:13:48.780]      // while-condition  =>  TRUE
[00:13:48.780]      // while "1"  (timeout="200")
[00:13:48.780]      // while-condition  =>  TRUE
[00:13:48.780]      // while "1"  (timeout="200")
[00:13:48.780]      // while-condition  =>  TRUE
[00:13:48.780]      // while "1"  (timeout="200")
[00:13:48.780]      // while-condition  =>  TRUE
[00:13:48.780]      // while "1"  (timeout="200")
[00:13:48.780]      // while-condition  =>  TRUE
[00:13:48.780]      // while "1"  (timeout="200")
[00:13:48.780]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.781]      // while-condition  =>  TRUE
[00:13:48.781]      // while "1"  (timeout="200")
[00:13:48.788]      // while-condition  =>  TRUE
[00:13:48.788]      // while "1"  (timeout="200")
[00:13:48.788]      // while  =>  TIMEOUT
[00:13:48.788]      // end while "1"
[00:13:48.788]    </control>
[00:13:48.788]    <control if="canReadPins" while="" timeout="0" info="">
[00:13:48.788]      // if-block "canReadPins"
[00:13:48.788]        // =>  TRUE
[00:13:48.788]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:13:48.788]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:13:48.788]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:13:48.788]        // while-condition  =>  FALSE
[00:13:48.788]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:13:48.788]      </control>
[00:13:48.788]      // end if-block "canReadPins"
[00:13:48.788]    </control>
[00:13:48.788]    <control if="!canReadPins" while="" timeout="0" info="">
[00:13:48.788]      // if-block "!canReadPins"
[00:13:48.788]        // =>  FALSE
[00:13:48.788]      // skip if-block "!canReadPins"
[00:13:48.788]    </control>
[00:13:48.788]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:13:48.788]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:13:48.788]        // =>  TRUE
[00:13:48.788]      <block atomic="false" info="">
[00:13:48.788]        WriteAP(0x00, 0x190008);
[00:13:48.788]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:13:48.788]        WriteAP(0xF0, 0x01);
[00:13:48.797]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:13:48.797]      </block>
[00:13:48.797]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:13:48.797]    </control>
[00:13:48.797]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:13:48.797]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:13:48.797]        // =>  FALSE
[00:13:48.799]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:13:48.799]    </control>
[00:13:48.799]    <block atomic="false" info="">
[00:13:48.799]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:13:48.802]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:13:48.802]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:13:48.802]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:13:48.806]      __ap = 0; //lets make sure we reset the access point selection
[00:13:48.806]        // -> [__ap <= 0x00000000]
[00:13:48.806]    </block>
[00:13:48.806]  </sequence>
[00:13:48.806]  
[00:13:48.831]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:13:48.831]  
[00:13:48.831]  <debugvars>
[00:13:48.831]    // Pre-defined
[00:13:48.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:13:48.831]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:13:48.831]    __dp=0x00000000
[00:13:48.831]    __ap=0x00000000
[00:13:48.831]    __traceout=0x00000000      (Trace Disabled)
[00:13:48.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:13:48.831]    __FlashAddr=0x00000000
[00:13:48.831]    __FlashLen=0x00000000
[00:13:48.831]    __FlashArg=0x00000000
[00:13:48.831]    __FlashOp=0x00000000
[00:13:48.831]    __Result=0x00000000
[00:13:48.831]  </debugvars>
[00:13:48.831]  
[00:13:48.831]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:13:48.831]    <block atomic="false" info="">
[00:13:48.831]      __var deviceID = 0;
[00:13:48.831]        // -> [deviceID <= 0x00000000]
[00:13:48.831]      __var version = 0;
[00:13:48.831]        // -> [version <= 0x00000000]
[00:13:48.831]      __var partNum = 0;
[00:13:48.831]        // -> [partNum <= 0x00000000]
[00:13:48.831]      __var manuf = 0;
[00:13:48.831]        // -> [manuf <= 0x00000000]
[00:13:48.831]      __var isMSPM0G1X0X_G3X0X = 0;
[00:13:48.831]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:13:48.831]      __var isProduction = 0;
[00:13:48.831]        // -> [isProduction <= 0x00000000]
[00:13:48.831]      __var continueId = 0;
[00:13:48.831]        // -> [continueId <= 0x00000000]
[00:13:48.831]      deviceID =   Read32(0x41C40004);
[00:13:48.840]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:13:48.840]        // -> [deviceID <= 0x2BB8802F]
[00:13:48.840]      version = deviceID >> 28;
[00:13:48.840]        // -> [version <= 0x00000002]
[00:13:48.840]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:13:48.840]        // -> [partNum <= 0x0000BB88]
[00:13:48.840]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:13:48.840]        // -> [manuf <= 0x00000017]
[00:13:48.840]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:13:48.841]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:13:48.841]      isProduction = (version > 0);
[00:13:48.841]        // -> [isProduction <= 0x00000001]
[00:13:48.841]    </block>
[00:13:48.841]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:13:48.841]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:13:48.842]        // =>  FALSE
[00:13:48.842]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:13:48.842]    </control>
[00:13:48.842]    <control if="continueId == 4" while="" timeout="0" info="">
[00:13:48.842]      // if-block "continueId == 4"
[00:13:48.842]        // =>  FALSE
[00:13:48.842]      // skip if-block "continueId == 4"
[00:13:48.842]    </control>
[00:13:48.842]    <control if="!isProduction" while="" timeout="0" info="">
[00:13:48.842]      // if-block "!isProduction"
[00:13:48.842]        // =>  FALSE
[00:13:48.843]      // skip if-block "!isProduction"
[00:13:48.843]    </control>
[00:13:48.843]  </sequence>
[00:13:48.843]  
[00:18:36.357]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:18:36.357]  
[00:18:36.357]  <debugvars>
[00:18:36.357]    // Pre-defined
[00:18:36.357]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:18:36.357]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:18:36.357]    __dp=0x00000000
[00:18:36.357]    __ap=0x00000000
[00:18:36.357]    __traceout=0x00000000      (Trace Disabled)
[00:18:36.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:18:36.357]    __FlashAddr=0x00000000
[00:18:36.357]    __FlashLen=0x00000000
[00:18:36.357]    __FlashArg=0x00000000
[00:18:36.357]    __FlashOp=0x00000000
[00:18:36.357]    __Result=0x00000000
[00:18:36.357]  </debugvars>
[00:18:36.357]  
[00:18:36.357]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:18:36.357]    <block atomic="false" info="">
[00:18:36.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:18:36.357]        // -> [isSWJ <= 0x00000001]
[00:18:36.357]      __var hasDormant = __protocol & 0x00020000;
[00:18:36.357]        // -> [hasDormant <= 0x00000000]
[00:18:36.357]      __var protType   = __protocol & 0x0000FFFF;
[00:18:36.357]        // -> [protType <= 0x00000002]
[00:18:36.357]    </block>
[00:18:36.357]    <control if="protType == 1" while="" timeout="0" info="">
[00:18:36.357]      // if-block "protType == 1"
[00:18:36.357]        // =>  FALSE
[00:18:36.357]      // skip if-block "protType == 1"
[00:18:36.357]    </control>
[00:18:36.357]    <control if="protType == 2" while="" timeout="0" info="">
[00:18:36.357]      // if-block "protType == 2"
[00:18:36.357]        // =>  TRUE
[00:18:36.357]      <control if="isSWJ" while="" timeout="0" info="">
[00:18:36.357]        // if-block "isSWJ"
[00:18:36.357]          // =>  TRUE
[00:18:36.357]        <control if="hasDormant" while="" timeout="0" info="">
[00:18:36.357]          // if-block "hasDormant"
[00:18:36.357]            // =>  FALSE
[00:18:36.357]          // skip if-block "hasDormant"
[00:18:36.357]        </control>
[00:18:36.357]        <control if="!hasDormant" while="" timeout="0" info="">
[00:18:36.357]          // if-block "!hasDormant"
[00:18:36.357]            // =>  TRUE
[00:18:36.357]          <block atomic="false" info="">
[00:18:36.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:18:36.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:18:36.367]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:18:36.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:18:36.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:18:36.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:18:36.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:18:36.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:18:36.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:18:36.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:18:36.369]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:18:36.379]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:18:36.379]          </block>
[00:18:36.379]          // end if-block "!hasDormant"
[00:18:36.379]        </control>
[00:18:36.379]        // end if-block "isSWJ"
[00:18:36.379]      </control>
[00:18:36.379]      <control if="!isSWJ" while="" timeout="0" info="">
[00:18:36.379]        // if-block "!isSWJ"
[00:18:36.379]          // =>  FALSE
[00:18:36.379]        // skip if-block "!isSWJ"
[00:18:36.379]      </control>
[00:18:36.379]      <block atomic="false" info="">
[00:18:36.379]        ReadDP(0x0);
[00:18:36.379]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:18:36.379]      </block>
[00:18:36.379]      // end if-block "protType == 2"
[00:18:36.379]    </control>
[00:18:36.379]  </sequence>
[00:18:36.379]  
[00:18:36.387]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:18:36.387]  
[00:18:36.387]  <debugvars>
[00:18:36.387]    // Pre-defined
[00:18:36.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:18:36.387]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:18:36.387]    __dp=0x00000000
[00:18:36.387]    __ap=0x00000000
[00:18:36.387]    __traceout=0x00000000      (Trace Disabled)
[00:18:36.387]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:18:36.387]    __FlashAddr=0x00000000
[00:18:36.387]    __FlashLen=0x00000000
[00:18:36.387]    __FlashArg=0x00000000
[00:18:36.387]    __FlashOp=0x00000000
[00:18:36.387]    __Result=0x00000000
[00:18:36.387]  </debugvars>
[00:18:36.387]  
[00:18:36.387]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:18:36.387]    <block atomic="false" info="">
[00:18:36.387]      __var SW_DP_ABORT       = 0x0;
[00:18:36.387]        // -> [SW_DP_ABORT <= 0x00000000]
[00:18:36.387]      __var DP_CTRL_STAT      = 0x4;
[00:18:36.387]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:18:36.387]      __var DP_SELECT         = 0x8;
[00:18:36.387]        // -> [DP_SELECT <= 0x00000008]
[00:18:36.387]      __var powered_down      = 0;
[00:18:36.387]        // -> [powered_down <= 0x00000000]
[00:18:36.387]      WriteDP(DP_SELECT, 0x00000000);
[00:18:36.387]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:18:36.387]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:18:36.387]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:18:36.387]        // -> [powered_down <= 0x00000001]
[00:18:36.387]    </block>
[00:18:36.387]    <control if="powered_down" while="" timeout="0" info="">
[00:18:36.387]      // if-block "powered_down"
[00:18:36.387]        // =>  TRUE
[00:18:36.387]      <block atomic="false" info="">
[00:18:36.387]        Message(0, "Debug/System power-up request sent");
[00:18:36.387]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:18:36.397]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:18:36.397]      </block>
[00:18:36.397]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:18:36.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:18:36.397]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:18:36.397]        // while-condition  =>  FALSE
[00:18:36.397]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:18:36.397]      </control>
[00:18:36.397]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:18:36.397]        // if-block "(__protocol & 0xFFFF) == 1"
[00:18:36.397]          // =>  FALSE
[00:18:36.397]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:18:36.397]      </control>
[00:18:36.397]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:18:36.397]        // if-block "(__protocol & 0xFFFF) == 2"
[00:18:36.397]          // =>  TRUE
[00:18:36.397]        <block atomic="false" info="">
[00:18:36.397]          Message(0, "executing SWD power up");
[00:18:36.397]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:18:36.397]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:18:36.397]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:18:36.397]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:18:36.397]        </block>
[00:18:36.397]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:18:36.397]      </control>
[00:18:36.397]      // end if-block "powered_down"
[00:18:36.397]    </control>
[00:18:36.397]    <block atomic="false" info="">
[00:18:36.397]      __var DEBUG_PORT_VAL    = 0;
[00:18:36.397]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:18:36.397]      __var ACCESS_POINT_VAL  = 0;
[00:18:36.397]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:18:36.397]      __ap = 1; 
[00:18:36.397]        // -> [__ap <= 0x00000001]
[00:18:36.397]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:18:36.407]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:18:36.407]      __ap = 4;
[00:18:36.407]        // -> [__ap <= 0x00000004]
[00:18:36.407]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:18:36.407]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:18:36.407]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:18:36.407]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:18:36.407]    </block>
[00:18:36.407]    <block atomic="false" info="">
[00:18:36.407]      __var nReset = 0x80;
[00:18:36.407]        // -> [nReset <= 0x00000080]
[00:18:36.407]      __var canReadPins = 0;
[00:18:36.407]        // -> [canReadPins <= 0x00000000]
[00:18:36.407]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:18:36.407]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:18:36.407]        // -> [canReadPins <= 0x00000001]
[00:18:36.417]    </block>
[00:18:36.417]    <control if="" while="1" timeout="200" info="">
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.417]      // while-condition  =>  TRUE
[00:18:36.417]      // while "1"  (timeout="200")
[00:18:36.427]      // while-condition  =>  TRUE
[00:18:36.427]      // while "1"  (timeout="200")
[00:18:36.427]      // while  =>  TIMEOUT
[00:18:36.427]      // end while "1"
[00:18:36.427]    </control>
[00:18:36.427]    <control if="canReadPins" while="" timeout="0" info="">
[00:18:36.427]      // if-block "canReadPins"
[00:18:36.427]        // =>  TRUE
[00:18:36.427]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:18:36.427]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:18:36.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:18:36.428]        // while-condition  =>  FALSE
[00:18:36.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:18:36.428]      </control>
[00:18:36.428]      // end if-block "canReadPins"
[00:18:36.428]    </control>
[00:18:36.428]    <control if="!canReadPins" while="" timeout="0" info="">
[00:18:36.428]      // if-block "!canReadPins"
[00:18:36.428]        // =>  FALSE
[00:18:36.428]      // skip if-block "!canReadPins"
[00:18:36.428]    </control>
[00:18:36.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:18:36.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:18:36.428]        // =>  TRUE
[00:18:36.428]      <block atomic="false" info="">
[00:18:36.428]        WriteAP(0x00, 0x190008);
[00:18:36.428]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:18:36.428]        WriteAP(0xF0, 0x01);
[00:18:36.437]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:18:36.437]      </block>
[00:18:36.437]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:18:36.437]    </control>
[00:18:36.437]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:18:36.437]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:18:36.437]        // =>  FALSE
[00:18:36.437]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:18:36.437]    </control>
[00:18:36.437]    <block atomic="false" info="">
[00:18:36.437]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:18:36.437]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:18:36.437]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:18:36.437]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:18:36.437]      __ap = 0; //lets make sure we reset the access point selection
[00:18:36.437]        // -> [__ap <= 0x00000000]
[00:18:36.437]    </block>
[00:18:36.437]  </sequence>
[00:18:36.437]  
[00:18:36.459]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:18:36.459]  
[00:18:36.459]  <debugvars>
[00:18:36.459]    // Pre-defined
[00:18:36.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:18:36.459]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:18:36.459]    __dp=0x00000000
[00:18:36.459]    __ap=0x00000000
[00:18:36.459]    __traceout=0x00000000      (Trace Disabled)
[00:18:36.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:18:36.459]    __FlashAddr=0x00000000
[00:18:36.459]    __FlashLen=0x00000000
[00:18:36.467]    __FlashArg=0x00000000
[00:18:36.467]    __FlashOp=0x00000000
[00:18:36.467]    __Result=0x00000000
[00:18:36.467]  </debugvars>
[00:18:36.467]  
[00:18:36.467]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:18:36.467]    <block atomic="false" info="">
[00:18:36.467]      __var deviceID = 0;
[00:18:36.467]        // -> [deviceID <= 0x00000000]
[00:18:36.467]      __var version = 0;
[00:18:36.467]        // -> [version <= 0x00000000]
[00:18:36.467]      __var partNum = 0;
[00:18:36.467]        // -> [partNum <= 0x00000000]
[00:18:36.467]      __var manuf = 0;
[00:18:36.467]        // -> [manuf <= 0x00000000]
[00:18:36.467]      __var isMSPM0G1X0X_G3X0X = 0;
[00:18:36.467]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:18:36.467]      __var isProduction = 0;
[00:18:36.467]        // -> [isProduction <= 0x00000000]
[00:18:36.467]      __var continueId = 0;
[00:18:36.467]        // -> [continueId <= 0x00000000]
[00:18:36.467]      deviceID =   Read32(0x41C40004);
[00:18:36.479]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:18:36.479]        // -> [deviceID <= 0x2BB8802F]
[00:18:36.479]      version = deviceID >> 28;
[00:18:36.479]        // -> [version <= 0x00000002]
[00:18:36.479]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:18:36.479]        // -> [partNum <= 0x0000BB88]
[00:18:36.479]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:18:36.479]        // -> [manuf <= 0x00000017]
[00:18:36.479]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:18:36.479]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:18:36.479]      isProduction = (version > 0);
[00:18:36.479]        // -> [isProduction <= 0x00000001]
[00:18:36.479]    </block>
[00:18:36.479]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:18:36.479]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:18:36.479]        // =>  FALSE
[00:18:36.479]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:18:36.479]    </control>
[00:18:36.479]    <control if="continueId == 4" while="" timeout="0" info="">
[00:18:36.479]      // if-block "continueId == 4"
[00:18:36.479]        // =>  FALSE
[00:18:36.479]      // skip if-block "continueId == 4"
[00:18:36.479]    </control>
[00:18:36.479]    <control if="!isProduction" while="" timeout="0" info="">
[00:18:36.479]      // if-block "!isProduction"
[00:18:36.479]        // =>  FALSE
[00:18:36.479]      // skip if-block "!isProduction"
[00:18:36.479]    </control>
[00:18:36.479]  </sequence>
[00:18:36.479]  
[00:21:36.347]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:21:36.347]  
[00:21:36.362]  <debugvars>
[00:21:36.362]    // Pre-defined
[00:21:36.362]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:36.362]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:21:36.362]    __dp=0x00000000
[00:21:36.362]    __ap=0x00000000
[00:21:36.362]    __traceout=0x00000000      (Trace Disabled)
[00:21:36.362]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:36.362]    __FlashAddr=0x00000000
[00:21:36.362]    __FlashLen=0x00000000
[00:21:36.362]    __FlashArg=0x00000000
[00:21:36.362]    __FlashOp=0x00000000
[00:21:36.362]    __Result=0x00000000
[00:21:36.362]  </debugvars>
[00:21:36.362]  
[00:21:36.362]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:21:36.362]    <block atomic="false" info="">
[00:21:36.362]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:21:36.362]        // -> [isSWJ <= 0x00000001]
[00:21:36.362]      __var hasDormant = __protocol & 0x00020000;
[00:21:36.362]        // -> [hasDormant <= 0x00000000]
[00:21:36.362]      __var protType   = __protocol & 0x0000FFFF;
[00:21:36.362]        // -> [protType <= 0x00000002]
[00:21:36.362]    </block>
[00:21:36.362]    <control if="protType == 1" while="" timeout="0" info="">
[00:21:36.362]      // if-block "protType == 1"
[00:21:36.362]        // =>  FALSE
[00:21:36.362]      // skip if-block "protType == 1"
[00:21:36.362]    </control>
[00:21:36.362]    <control if="protType == 2" while="" timeout="0" info="">
[00:21:36.362]      // if-block "protType == 2"
[00:21:36.362]        // =>  TRUE
[00:21:36.362]      <control if="isSWJ" while="" timeout="0" info="">
[00:21:36.362]        // if-block "isSWJ"
[00:21:36.362]          // =>  TRUE
[00:21:36.362]        <control if="hasDormant" while="" timeout="0" info="">
[00:21:36.362]          // if-block "hasDormant"
[00:21:36.362]            // =>  FALSE
[00:21:36.362]          // skip if-block "hasDormant"
[00:21:36.362]        </control>
[00:21:36.362]        <control if="!hasDormant" while="" timeout="0" info="">
[00:21:36.362]          // if-block "!hasDormant"
[00:21:36.362]            // =>  TRUE
[00:21:36.366]          <block atomic="false" info="">
[00:21:36.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:21:36.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:36.369]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:21:36.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:21:36.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:21:36.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:36.373]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:21:36.373]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:21:36.373]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:21:36.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:36.384]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:21:36.388]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:21:36.388]          </block>
[00:21:36.388]          // end if-block "!hasDormant"
[00:21:36.388]        </control>
[00:21:36.388]        // end if-block "isSWJ"
[00:21:36.388]      </control>
[00:21:36.388]      <control if="!isSWJ" while="" timeout="0" info="">
[00:21:36.388]        // if-block "!isSWJ"
[00:21:36.388]          // =>  FALSE
[00:21:36.388]        // skip if-block "!isSWJ"
[00:21:36.388]      </control>
[00:21:36.388]      <block atomic="false" info="">
[00:21:36.388]        ReadDP(0x0);
[00:21:36.394]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:21:36.394]      </block>
[00:21:36.394]      // end if-block "protType == 2"
[00:21:36.394]    </control>
[00:21:36.394]  </sequence>
[00:21:36.394]  
[00:21:36.394]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:21:36.394]  
[00:21:36.398]  <debugvars>
[00:21:36.398]    // Pre-defined
[00:21:36.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:36.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:21:36.398]    __dp=0x00000000
[00:21:36.398]    __ap=0x00000000
[00:21:36.398]    __traceout=0x00000000      (Trace Disabled)
[00:21:36.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:36.398]    __FlashAddr=0x00000000
[00:21:36.398]    __FlashLen=0x00000000
[00:21:36.398]    __FlashArg=0x00000000
[00:21:36.398]    __FlashOp=0x00000000
[00:21:36.398]    __Result=0x00000000
[00:21:36.398]  </debugvars>
[00:21:36.398]  
[00:21:36.398]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:21:36.398]    <block atomic="false" info="">
[00:21:36.398]      __var SW_DP_ABORT       = 0x0;
[00:21:36.398]        // -> [SW_DP_ABORT <= 0x00000000]
[00:21:36.398]      __var DP_CTRL_STAT      = 0x4;
[00:21:36.398]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:21:36.398]      __var DP_SELECT         = 0x8;
[00:21:36.398]        // -> [DP_SELECT <= 0x00000008]
[00:21:36.398]      __var powered_down      = 0;
[00:21:36.398]        // -> [powered_down <= 0x00000000]
[00:21:36.398]      WriteDP(DP_SELECT, 0x00000000);
[00:21:36.398]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:21:36.398]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:21:36.398]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:21:36.398]        // -> [powered_down <= 0x00000001]
[00:21:36.398]    </block>
[00:21:36.398]    <control if="powered_down" while="" timeout="0" info="">
[00:21:36.398]      // if-block "powered_down"
[00:21:36.398]        // =>  TRUE
[00:21:36.398]      <block atomic="false" info="">
[00:21:36.398]        Message(0, "Debug/System power-up request sent");
[00:21:36.408]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:21:36.412]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:21:36.412]      </block>
[00:21:36.412]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:21:36.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:21:36.419]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:21:36.419]        // while-condition  =>  FALSE
[00:21:36.419]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:21:36.419]      </control>
[00:21:36.419]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:21:36.419]        // if-block "(__protocol & 0xFFFF) == 1"
[00:21:36.419]          // =>  FALSE
[00:21:36.419]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:21:36.419]      </control>
[00:21:36.419]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:21:36.419]        // if-block "(__protocol & 0xFFFF) == 2"
[00:21:36.419]          // =>  TRUE
[00:21:36.419]        <block atomic="false" info="">
[00:21:36.419]          Message(0, "executing SWD power up");
[00:21:36.424]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:21:36.427]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:21:36.427]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:21:36.429]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:21:36.429]        </block>
[00:21:36.429]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:21:36.429]      </control>
[00:21:36.429]      // end if-block "powered_down"
[00:21:36.429]    </control>
[00:21:36.429]    <block atomic="false" info="">
[00:21:36.429]      __var DEBUG_PORT_VAL    = 0;
[00:21:36.429]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:21:36.429]      __var ACCESS_POINT_VAL  = 0;
[00:21:36.429]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:21:36.429]      __ap = 1; 
[00:21:36.429]        // -> [__ap <= 0x00000001]
[00:21:36.429]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:21:36.436]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:21:36.436]      __ap = 4;
[00:21:36.436]        // -> [__ap <= 0x00000004]
[00:21:36.436]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:21:36.452]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:21:36.452]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:21:36.452]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:21:36.452]    </block>
[00:21:36.452]    <block atomic="false" info="">
[00:21:36.452]      __var nReset = 0x80;
[00:21:36.452]        // -> [nReset <= 0x00000080]
[00:21:36.452]      __var canReadPins = 0;
[00:21:36.452]        // -> [canReadPins <= 0x00000000]
[00:21:36.452]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:21:36.452]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:21:36.452]        // -> [canReadPins <= 0x00000001]
[00:21:36.452]    </block>
[00:21:36.452]    <control if="" while="1" timeout="200" info="">
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.452]      // while "1"  (timeout="200")
[00:21:36.452]      // while-condition  =>  TRUE
[00:21:36.460]      // while "1"  (timeout="200")
[00:21:36.460]      // while  =>  TIMEOUT
[00:21:36.460]      // end while "1"
[00:21:36.460]    </control>
[00:21:36.460]    <control if="canReadPins" while="" timeout="0" info="">
[00:21:36.460]      // if-block "canReadPins"
[00:21:36.460]        // =>  TRUE
[00:21:36.460]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:21:36.460]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:21:36.460]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:21:36.460]        // while-condition  =>  FALSE
[00:21:36.460]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:21:36.460]      </control>
[00:21:36.460]      // end if-block "canReadPins"
[00:21:36.460]    </control>
[00:21:36.460]    <control if="!canReadPins" while="" timeout="0" info="">
[00:21:36.460]      // if-block "!canReadPins"
[00:21:36.460]        // =>  FALSE
[00:21:36.460]      // skip if-block "!canReadPins"
[00:21:36.460]    </control>
[00:21:36.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:21:36.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:21:36.460]        // =>  TRUE
[00:21:36.460]      <block atomic="false" info="">
[00:21:36.460]        WriteAP(0x00, 0x190008);
[00:21:36.470]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:21:36.470]        WriteAP(0xF0, 0x01);
[00:21:36.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:21:36.480]      </block>
[00:21:36.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:21:36.480]    </control>
[00:21:36.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:21:36.480]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:21:36.480]        // =>  FALSE
[00:21:36.480]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:21:36.480]    </control>
[00:21:36.480]    <block atomic="false" info="">
[00:21:36.480]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:21:36.480]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:21:36.480]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:21:36.480]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:21:36.480]      __ap = 0; //lets make sure we reset the access point selection
[00:21:36.480]        // -> [__ap <= 0x00000000]
[00:21:36.480]    </block>
[00:21:36.480]  </sequence>
[00:21:36.480]  
[00:21:36.511]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:21:36.511]  
[00:21:36.511]  <debugvars>
[00:21:36.511]    // Pre-defined
[00:21:36.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:36.511]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:21:36.511]    __dp=0x00000000
[00:21:36.511]    __ap=0x00000000
[00:21:36.511]    __traceout=0x00000000      (Trace Disabled)
[00:21:36.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:36.511]    __FlashAddr=0x00000000
[00:21:36.511]    __FlashLen=0x00000000
[00:21:36.511]    __FlashArg=0x00000000
[00:21:36.511]    __FlashOp=0x00000000
[00:21:36.511]    __Result=0x00000000
[00:21:36.511]  </debugvars>
[00:21:36.511]  
[00:21:36.511]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:21:36.511]    <block atomic="false" info="">
[00:21:36.511]      __var deviceID = 0;
[00:21:36.511]        // -> [deviceID <= 0x00000000]
[00:21:36.511]      __var version = 0;
[00:21:36.511]        // -> [version <= 0x00000000]
[00:21:36.511]      __var partNum = 0;
[00:21:36.511]        // -> [partNum <= 0x00000000]
[00:21:36.511]      __var manuf = 0;
[00:21:36.511]        // -> [manuf <= 0x00000000]
[00:21:36.511]      __var isMSPM0G1X0X_G3X0X = 0;
[00:21:36.511]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:21:36.511]      __var isProduction = 0;
[00:21:36.511]        // -> [isProduction <= 0x00000000]
[00:21:36.511]      __var continueId = 0;
[00:21:36.511]        // -> [continueId <= 0x00000000]
[00:21:36.511]      deviceID =   Read32(0x41C40004);
[00:21:36.520]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:21:36.520]        // -> [deviceID <= 0x2BB8802F]
[00:21:36.520]      version = deviceID >> 28;
[00:21:36.520]        // -> [version <= 0x00000002]
[00:21:36.520]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:21:36.520]        // -> [partNum <= 0x0000BB88]
[00:21:36.520]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:21:36.520]        // -> [manuf <= 0x00000017]
[00:21:36.520]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:21:36.520]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:21:36.520]      isProduction = (version > 0);
[00:21:36.520]        // -> [isProduction <= 0x00000001]
[00:21:36.520]    </block>
[00:21:36.520]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:21:36.520]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:21:36.520]        // =>  FALSE
[00:21:36.520]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:21:36.520]    </control>
[00:21:36.527]    <control if="continueId == 4" while="" timeout="0" info="">
[00:21:36.527]      // if-block "continueId == 4"
[00:21:36.527]        // =>  FALSE
[00:21:36.527]      // skip if-block "continueId == 4"
[00:21:36.527]    </control>
[00:21:36.527]    <control if="!isProduction" while="" timeout="0" info="">
[00:21:36.527]      // if-block "!isProduction"
[00:21:36.527]        // =>  FALSE
[00:21:36.527]      // skip if-block "!isProduction"
[00:21:36.527]    </control>
[00:21:36.527]  </sequence>
[00:21:36.527]  
[00:31:26.927]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:31:26.927]  
[00:31:26.938]  <debugvars>
[00:31:26.938]    // Pre-defined
[00:31:26.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:26.938]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:26.938]    __dp=0x00000000
[00:31:26.938]    __ap=0x00000000
[00:31:26.938]    __traceout=0x00000000      (Trace Disabled)
[00:31:26.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:26.938]    __FlashAddr=0x00000000
[00:31:26.938]    __FlashLen=0x00000000
[00:31:26.938]    __FlashArg=0x00000000
[00:31:26.938]    __FlashOp=0x00000000
[00:31:26.938]    __Result=0x00000000
[00:31:26.938]  </debugvars>
[00:31:26.938]  
[00:31:26.938]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:26.938]    <block atomic="false" info="">
[00:31:26.938]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:26.938]        // -> [isSWJ <= 0x00000001]
[00:31:26.938]      __var hasDormant = __protocol & 0x00020000;
[00:31:26.938]        // -> [hasDormant <= 0x00000000]
[00:31:26.938]      __var protType   = __protocol & 0x0000FFFF;
[00:31:26.938]        // -> [protType <= 0x00000002]
[00:31:26.938]    </block>
[00:31:26.938]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:26.938]      // if-block "protType == 1"
[00:31:26.938]        // =>  FALSE
[00:31:26.938]      // skip if-block "protType == 1"
[00:31:26.938]    </control>
[00:31:26.938]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:26.938]      // if-block "protType == 2"
[00:31:26.938]        // =>  TRUE
[00:31:26.938]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:26.938]        // if-block "isSWJ"
[00:31:26.938]          // =>  TRUE
[00:31:26.938]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:26.938]          // if-block "hasDormant"
[00:31:26.938]            // =>  FALSE
[00:31:26.938]          // skip if-block "hasDormant"
[00:31:26.938]        </control>
[00:31:26.938]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:26.938]          // if-block "!hasDormant"
[00:31:26.938]            // =>  TRUE
[00:31:26.938]          <block atomic="false" info="">
[00:31:26.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:26.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:26.938]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:31:26.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:31:26.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:31:26.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:26.945]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:31:26.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:31:26.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:31:26.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:26.945]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:31:26.955]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:31:26.955]          </block>
[00:31:26.955]          // end if-block "!hasDormant"
[00:31:26.955]        </control>
[00:31:26.955]        // end if-block "isSWJ"
[00:31:26.955]      </control>
[00:31:26.955]      <control if="!isSWJ" while="" timeout="0" info="">
[00:31:26.955]        // if-block "!isSWJ"
[00:31:26.955]          // =>  FALSE
[00:31:26.955]        // skip if-block "!isSWJ"
[00:31:26.955]      </control>
[00:31:26.955]      <block atomic="false" info="">
[00:31:26.955]        ReadDP(0x0);
[00:31:26.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:31:26.960]      </block>
[00:31:26.960]      // end if-block "protType == 2"
[00:31:26.960]    </control>
[00:31:26.960]  </sequence>
[00:31:26.960]  
[00:31:26.965]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:31:26.965]  
[00:31:26.965]  <debugvars>
[00:31:26.965]    // Pre-defined
[00:31:26.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:26.965]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:26.965]    __dp=0x00000000
[00:31:26.965]    __ap=0x00000000
[00:31:26.965]    __traceout=0x00000000      (Trace Disabled)
[00:31:26.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:26.965]    __FlashAddr=0x00000000
[00:31:26.965]    __FlashLen=0x00000000
[00:31:26.965]    __FlashArg=0x00000000
[00:31:26.965]    __FlashOp=0x00000000
[00:31:26.965]    __Result=0x00000000
[00:31:26.965]  </debugvars>
[00:31:26.965]  
[00:31:26.965]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:31:26.965]    <block atomic="false" info="">
[00:31:26.965]      __var SW_DP_ABORT       = 0x0;
[00:31:26.965]        // -> [SW_DP_ABORT <= 0x00000000]
[00:31:26.965]      __var DP_CTRL_STAT      = 0x4;
[00:31:26.965]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:31:26.965]      __var DP_SELECT         = 0x8;
[00:31:26.965]        // -> [DP_SELECT <= 0x00000008]
[00:31:26.965]      __var powered_down      = 0;
[00:31:26.965]        // -> [powered_down <= 0x00000000]
[00:31:26.965]      WriteDP(DP_SELECT, 0x00000000);
[00:31:26.965]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:31:26.965]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:31:26.976]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:31:26.976]        // -> [powered_down <= 0x00000001]
[00:31:26.976]    </block>
[00:31:26.976]    <control if="powered_down" while="" timeout="0" info="">
[00:31:26.976]      // if-block "powered_down"
[00:31:26.976]        // =>  TRUE
[00:31:26.976]      <block atomic="false" info="">
[00:31:26.976]        Message(0, "Debug/System power-up request sent");
[00:31:26.978]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:31:26.978]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:31:26.978]      </block>
[00:31:26.978]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:31:26.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:31:26.986]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:31:26.986]        // while-condition  =>  FALSE
[00:31:26.986]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:31:26.986]      </control>
[00:31:26.986]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:31:26.986]        // if-block "(__protocol & 0xFFFF) == 1"
[00:31:26.986]          // =>  FALSE
[00:31:26.986]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:31:26.986]      </control>
[00:31:26.986]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:31:26.986]        // if-block "(__protocol & 0xFFFF) == 2"
[00:31:26.986]          // =>  TRUE
[00:31:26.986]        <block atomic="false" info="">
[00:31:26.986]          Message(0, "executing SWD power up");
[00:31:26.986]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:31:26.986]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:31:26.986]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:31:26.996]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:31:26.996]        </block>
[00:31:26.996]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:31:26.996]      </control>
[00:31:26.996]      // end if-block "powered_down"
[00:31:26.996]    </control>
[00:31:26.996]    <block atomic="false" info="">
[00:31:26.996]      __var DEBUG_PORT_VAL    = 0;
[00:31:26.996]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:31:26.996]      __var ACCESS_POINT_VAL  = 0;
[00:31:26.996]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:31:26.996]      __ap = 1; 
[00:31:26.996]        // -> [__ap <= 0x00000001]
[00:31:26.996]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:31:26.999]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:31:26.999]      __ap = 4;
[00:31:26.999]        // -> [__ap <= 0x00000004]
[00:31:26.999]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:27.008]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:31:27.008]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:31:27.008]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:27.010]    </block>
[00:31:27.010]    <block atomic="false" info="">
[00:31:27.010]      __var nReset = 0x80;
[00:31:27.010]        // -> [nReset <= 0x00000080]
[00:31:27.010]      __var canReadPins = 0;
[00:31:27.010]        // -> [canReadPins <= 0x00000000]
[00:31:27.010]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:31:27.017]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:31:27.017]        // -> [canReadPins <= 0x00000001]
[00:31:27.017]    </block>
[00:31:27.017]    <control if="" while="1" timeout="200" info="">
[00:31:27.017]      // while "1"  (timeout="200")
[00:31:27.017]      // while-condition  =>  TRUE
[00:31:27.017]      // while "1"  (timeout="200")
[00:31:27.017]      // while-condition  =>  TRUE
[00:31:27.017]      // while "1"  (timeout="200")
[00:31:27.017]      // while-condition  =>  TRUE
[00:31:27.017]      // while "1"  (timeout="200")
[00:31:27.017]      // while-condition  =>  TRUE
[00:31:27.017]      // while "1"  (timeout="200")
[00:31:27.017]      // while-condition  =>  TRUE
[00:31:27.017]      // while "1"  (timeout="200")
[00:31:27.026]      // while-condition  =>  TRUE
[00:31:27.026]      // while "1"  (timeout="200")
[00:31:27.026]      // while  =>  TIMEOUT
[00:31:27.026]      // end while "1"
[00:31:27.026]    </control>
[00:31:27.026]    <control if="canReadPins" while="" timeout="0" info="">
[00:31:27.026]      // if-block "canReadPins"
[00:31:27.026]        // =>  TRUE
[00:31:27.026]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:31:27.026]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:31:27.026]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:31:27.026]        // while-condition  =>  FALSE
[00:31:27.026]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:31:27.026]      </control>
[00:31:27.026]      // end if-block "canReadPins"
[00:31:27.026]    </control>
[00:31:27.029]    <control if="!canReadPins" while="" timeout="0" info="">
[00:31:27.029]      // if-block "!canReadPins"
[00:31:27.029]        // =>  FALSE
[00:31:27.029]      // skip if-block "!canReadPins"
[00:31:27.029]    </control>
[00:31:27.029]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:31:27.029]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:27.029]        // =>  TRUE
[00:31:27.029]      <block atomic="false" info="">
[00:31:27.029]        WriteAP(0x00, 0x190008);
[00:31:27.033]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:27.033]        WriteAP(0xF0, 0x01);
[00:31:27.039]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:27.039]      </block>
[00:31:27.039]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:27.039]    </control>
[00:31:27.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:31:27.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:27.039]        // =>  FALSE
[00:31:27.039]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:27.039]    </control>
[00:31:27.039]    <block atomic="false" info="">
[00:31:27.039]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:27.048]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:31:27.048]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:31:27.048]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:27.048]      __ap = 0; //lets make sure we reset the access point selection
[00:31:27.048]        // -> [__ap <= 0x00000000]
[00:31:27.048]    </block>
[00:31:27.048]  </sequence>
[00:31:27.048]  
[00:31:27.077]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:31:27.077]  
[00:31:27.077]  <debugvars>
[00:31:27.077]    // Pre-defined
[00:31:27.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:27.077]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:27.077]    __dp=0x00000000
[00:31:27.077]    __ap=0x00000000
[00:31:27.077]    __traceout=0x00000000      (Trace Disabled)
[00:31:27.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:27.077]    __FlashAddr=0x00000000
[00:31:27.077]    __FlashLen=0x00000000
[00:31:27.077]    __FlashArg=0x00000000
[00:31:27.077]    __FlashOp=0x00000000
[00:31:27.077]    __Result=0x00000000
[00:31:27.077]  </debugvars>
[00:31:27.077]  
[00:31:27.077]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:31:27.077]    <block atomic="false" info="">
[00:31:27.077]      __var deviceID = 0;
[00:31:27.077]        // -> [deviceID <= 0x00000000]
[00:31:27.077]      __var version = 0;
[00:31:27.077]        // -> [version <= 0x00000000]
[00:31:27.077]      __var partNum = 0;
[00:31:27.077]        // -> [partNum <= 0x00000000]
[00:31:27.077]      __var manuf = 0;
[00:31:27.077]        // -> [manuf <= 0x00000000]
[00:31:27.087]      __var isMSPM0G1X0X_G3X0X = 0;
[00:31:27.087]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:31:27.087]      __var isProduction = 0;
[00:31:27.087]        // -> [isProduction <= 0x00000000]
[00:31:27.087]      __var continueId = 0;
[00:31:27.087]        // -> [continueId <= 0x00000000]
[00:31:27.087]      deviceID =   Read32(0x41C40004);
[00:31:27.100]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:31:27.100]        // -> [deviceID <= 0x2BB8802F]
[00:31:27.100]      version = deviceID >> 28;
[00:31:27.100]        // -> [version <= 0x00000002]
[00:31:27.100]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:31:27.100]        // -> [partNum <= 0x0000BB88]
[00:31:27.100]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:31:27.100]        // -> [manuf <= 0x00000017]
[00:31:27.100]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:31:27.100]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:31:27.100]      isProduction = (version > 0);
[00:31:27.100]        // -> [isProduction <= 0x00000001]
[00:31:27.100]    </block>
[00:31:27.100]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:31:27.100]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:31:27.100]        // =>  FALSE
[00:31:27.100]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:31:27.100]    </control>
[00:31:27.100]    <control if="continueId == 4" while="" timeout="0" info="">
[00:31:27.100]      // if-block "continueId == 4"
[00:31:27.100]        // =>  FALSE
[00:31:27.100]      // skip if-block "continueId == 4"
[00:31:27.100]    </control>
[00:31:27.100]    <control if="!isProduction" while="" timeout="0" info="">
[00:31:27.100]      // if-block "!isProduction"
[00:31:27.100]        // =>  FALSE
[00:31:27.100]      // skip if-block "!isProduction"
[00:31:27.100]    </control>
[00:31:27.100]  </sequence>
[00:31:27.100]  
[00:31:56.023]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:31:56.023]  
[00:31:56.033]  <debugvars>
[00:31:56.033]    // Pre-defined
[00:31:56.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:56.033]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:56.033]    __dp=0x00000000
[00:31:56.033]    __ap=0x00000000
[00:31:56.033]    __traceout=0x00000000      (Trace Disabled)
[00:31:56.033]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:56.033]    __FlashAddr=0x00000000
[00:31:56.033]    __FlashLen=0x00000000
[00:31:56.033]    __FlashArg=0x00000000
[00:31:56.033]    __FlashOp=0x00000000
[00:31:56.033]    __Result=0x00000000
[00:31:56.033]  </debugvars>
[00:31:56.033]  
[00:31:56.033]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:56.033]    <block atomic="false" info="">
[00:31:56.033]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:56.033]        // -> [isSWJ <= 0x00000001]
[00:31:56.033]      __var hasDormant = __protocol & 0x00020000;
[00:31:56.033]        // -> [hasDormant <= 0x00000000]
[00:31:56.033]      __var protType   = __protocol & 0x0000FFFF;
[00:31:56.033]        // -> [protType <= 0x00000002]
[00:31:56.033]    </block>
[00:31:56.033]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:56.033]      // if-block "protType == 1"
[00:31:56.033]        // =>  FALSE
[00:31:56.033]      // skip if-block "protType == 1"
[00:31:56.033]    </control>
[00:31:56.033]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:56.033]      // if-block "protType == 2"
[00:31:56.033]        // =>  TRUE
[00:31:56.033]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:56.033]        // if-block "isSWJ"
[00:31:56.033]          // =>  TRUE
[00:31:56.033]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:56.033]          // if-block "hasDormant"
[00:31:56.033]            // =>  FALSE
[00:31:56.033]          // skip if-block "hasDormant"
[00:31:56.033]        </control>
[00:31:56.033]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:56.033]          // if-block "!hasDormant"
[00:31:56.033]            // =>  TRUE
[00:31:56.033]          <block atomic="false" info="">
[00:31:56.033]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:56.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:56.033]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:31:56.041]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:31:56.041]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:31:56.042]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:56.042]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:31:56.045]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:31:56.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:31:56.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:56.045]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:31:56.051]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:31:56.051]          </block>
[00:31:56.051]          // end if-block "!hasDormant"
[00:31:56.051]        </control>
[00:31:56.051]        // end if-block "isSWJ"
[00:31:56.051]      </control>
[00:31:56.051]      <control if="!isSWJ" while="" timeout="0" info="">
[00:31:56.051]        // if-block "!isSWJ"
[00:31:56.051]          // =>  FALSE
[00:31:56.051]        // skip if-block "!isSWJ"
[00:31:56.051]      </control>
[00:31:56.051]      <block atomic="false" info="">
[00:31:56.051]        ReadDP(0x0);
[00:31:56.051]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:31:56.051]      </block>
[00:31:56.051]      // end if-block "protType == 2"
[00:31:56.051]    </control>
[00:31:56.051]  </sequence>
[00:31:56.051]  
[00:31:56.061]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:31:56.061]  
[00:31:56.061]  <debugvars>
[00:31:56.061]    // Pre-defined
[00:31:56.061]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:56.061]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:56.061]    __dp=0x00000000
[00:31:56.064]    __ap=0x00000000
[00:31:56.064]    __traceout=0x00000000      (Trace Disabled)
[00:31:56.064]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:56.064]    __FlashAddr=0x00000000
[00:31:56.064]    __FlashLen=0x00000000
[00:31:56.064]    __FlashArg=0x00000000
[00:31:56.064]    __FlashOp=0x00000000
[00:31:56.064]    __Result=0x00000000
[00:31:56.064]  </debugvars>
[00:31:56.064]  
[00:31:56.064]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:31:56.064]    <block atomic="false" info="">
[00:31:56.065]      __var SW_DP_ABORT       = 0x0;
[00:31:56.065]        // -> [SW_DP_ABORT <= 0x00000000]
[00:31:56.065]      __var DP_CTRL_STAT      = 0x4;
[00:31:56.065]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:31:56.065]      __var DP_SELECT         = 0x8;
[00:31:56.065]        // -> [DP_SELECT <= 0x00000008]
[00:31:56.065]      __var powered_down      = 0;
[00:31:56.065]        // -> [powered_down <= 0x00000000]
[00:31:56.065]      WriteDP(DP_SELECT, 0x00000000);
[00:31:56.065]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:31:56.065]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:31:56.071]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:31:56.071]        // -> [powered_down <= 0x00000001]
[00:31:56.071]    </block>
[00:31:56.071]    <control if="powered_down" while="" timeout="0" info="">
[00:31:56.071]      // if-block "powered_down"
[00:31:56.071]        // =>  TRUE
[00:31:56.071]      <block atomic="false" info="">
[00:31:56.071]        Message(0, "Debug/System power-up request sent");
[00:31:56.071]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:31:56.074]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:31:56.074]      </block>
[00:31:56.074]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:31:56.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:31:56.077]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:31:56.077]        // while-condition  =>  FALSE
[00:31:56.078]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:31:56.078]      </control>
[00:31:56.078]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:31:56.078]        // if-block "(__protocol & 0xFFFF) == 1"
[00:31:56.078]          // =>  FALSE
[00:31:56.079]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:31:56.079]      </control>
[00:31:56.079]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:31:56.079]        // if-block "(__protocol & 0xFFFF) == 2"
[00:31:56.079]          // =>  TRUE
[00:31:56.079]        <block atomic="false" info="">
[00:31:56.079]          Message(0, "executing SWD power up");
[00:31:56.079]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:31:56.082]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:31:56.082]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:31:56.083]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:31:56.083]        </block>
[00:31:56.083]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:31:56.083]      </control>
[00:31:56.083]      // end if-block "powered_down"
[00:31:56.083]    </control>
[00:31:56.083]    <block atomic="false" info="">
[00:31:56.083]      __var DEBUG_PORT_VAL    = 0;
[00:31:56.083]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:31:56.083]      __var ACCESS_POINT_VAL  = 0;
[00:31:56.083]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:31:56.083]      __ap = 1; 
[00:31:56.083]        // -> [__ap <= 0x00000001]
[00:31:56.083]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:31:56.083]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:31:56.083]      __ap = 4;
[00:31:56.083]        // -> [__ap <= 0x00000004]
[00:31:56.083]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:56.092]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:31:56.092]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:31:56.092]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:56.092]    </block>
[00:31:56.092]    <block atomic="false" info="">
[00:31:56.092]      __var nReset = 0x80;
[00:31:56.092]        // -> [nReset <= 0x00000080]
[00:31:56.092]      __var canReadPins = 0;
[00:31:56.092]        // -> [canReadPins <= 0x00000000]
[00:31:56.092]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:31:56.097]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:31:56.097]        // -> [canReadPins <= 0x00000001]
[00:31:56.097]    </block>
[00:31:56.097]    <control if="" while="1" timeout="200" info="">
[00:31:56.097]      // while "1"  (timeout="200")
[00:31:56.097]      // while-condition  =>  TRUE
[00:31:56.097]      // while "1"  (timeout="200")
[00:31:56.097]      // while-condition  =>  TRUE
[00:31:56.098]      // while "1"  (timeout="200")
[00:31:56.098]      // while-condition  =>  TRUE
[00:31:56.098]      // while "1"  (timeout="200")
[00:31:56.098]      // while-condition  =>  TRUE
[00:31:56.098]      // while "1"  (timeout="200")
[00:31:56.098]      // while-condition  =>  TRUE
[00:31:56.099]      // while "1"  (timeout="200")
[00:31:56.099]      // while-condition  =>  TRUE
[00:31:56.099]      // while "1"  (timeout="200")
[00:31:56.099]      // while-condition  =>  TRUE
[00:31:56.099]      // while "1"  (timeout="200")
[00:31:56.100]      // while-condition  =>  TRUE
[00:31:56.100]      // while "1"  (timeout="200")
[00:31:56.100]      // while-condition  =>  TRUE
[00:31:56.100]      // while "1"  (timeout="200")
[00:31:56.100]      // while-condition  =>  TRUE
[00:31:56.100]      // while "1"  (timeout="200")
[00:31:56.101]      // while-condition  =>  TRUE
[00:31:56.101]      // while "1"  (timeout="200")
[00:31:56.101]      // while-condition  =>  TRUE
[00:31:56.101]      // while "1"  (timeout="200")
[00:31:56.101]      // while-condition  =>  TRUE
[00:31:56.101]      // while "1"  (timeout="200")
[00:31:56.101]      // while-condition  =>  TRUE
[00:31:56.102]      // while "1"  (timeout="200")
[00:31:56.102]      // while-condition  =>  TRUE
[00:31:56.102]      // while "1"  (timeout="200")
[00:31:56.102]      // while-condition  =>  TRUE
[00:31:56.102]      // while "1"  (timeout="200")
[00:31:56.102]      // while-condition  =>  TRUE
[00:31:56.102]      // while "1"  (timeout="200")
[00:31:56.102]      // while-condition  =>  TRUE
[00:31:56.102]      // while "1"  (timeout="200")
[00:31:56.102]      // while-condition  =>  TRUE
[00:31:56.102]      // while "1"  (timeout="200")
[00:31:56.103]      // while-condition  =>  TRUE
[00:31:56.103]      // while "1"  (timeout="200")
[00:31:56.103]      // while-condition  =>  TRUE
[00:31:56.103]      // while "1"  (timeout="200")
[00:31:56.103]      // while-condition  =>  TRUE
[00:31:56.103]      // while "1"  (timeout="200")
[00:31:56.103]      // while-condition  =>  TRUE
[00:31:56.103]      // while "1"  (timeout="200")
[00:31:56.103]      // while-condition  =>  TRUE
[00:31:56.104]      // while "1"  (timeout="200")
[00:31:56.104]      // while-condition  =>  TRUE
[00:31:56.104]      // while "1"  (timeout="200")
[00:31:56.104]      // while-condition  =>  TRUE
[00:31:56.104]      // while "1"  (timeout="200")
[00:31:56.104]      // while-condition  =>  TRUE
[00:31:56.104]      // while "1"  (timeout="200")
[00:31:56.104]      // while-condition  =>  TRUE
[00:31:56.104]      // while "1"  (timeout="200")
[00:31:56.104]      // while-condition  =>  TRUE
[00:31:56.105]      // while "1"  (timeout="200")
[00:31:56.105]      // while-condition  =>  TRUE
[00:31:56.105]      // while "1"  (timeout="200")
[00:31:56.105]      // while-condition  =>  TRUE
[00:31:56.105]      // while "1"  (timeout="200")
[00:31:56.105]      // while-condition  =>  TRUE
[00:31:56.105]      // while "1"  (timeout="200")
[00:31:56.105]      // while-condition  =>  TRUE
[00:31:56.105]      // while "1"  (timeout="200")
[00:31:56.106]      // while-condition  =>  TRUE
[00:31:56.106]      // while "1"  (timeout="200")
[00:31:56.106]      // while-condition  =>  TRUE
[00:31:56.106]      // while "1"  (timeout="200")
[00:31:56.106]      // while-condition  =>  TRUE
[00:31:56.106]      // while "1"  (timeout="200")
[00:31:56.106]      // while-condition  =>  TRUE
[00:31:56.106]      // while "1"  (timeout="200")
[00:31:56.106]      // while-condition  =>  TRUE
[00:31:56.107]      // while "1"  (timeout="200")
[00:31:56.107]      // while-condition  =>  TRUE
[00:31:56.107]      // while "1"  (timeout="200")
[00:31:56.107]      // while-condition  =>  TRUE
[00:31:56.108]      // while "1"  (timeout="200")
[00:31:56.108]      // while-condition  =>  TRUE
[00:31:56.108]      // while "1"  (timeout="200")
[00:31:56.108]      // while-condition  =>  TRUE
[00:31:56.108]      // while "1"  (timeout="200")
[00:31:56.109]      // while-condition  =>  TRUE
[00:31:56.109]      // while "1"  (timeout="200")
[00:31:56.109]      // while-condition  =>  TRUE
[00:31:56.109]      // while "1"  (timeout="200")
[00:31:56.109]      // while-condition  =>  TRUE
[00:31:56.109]      // while "1"  (timeout="200")
[00:31:56.109]      // while-condition  =>  TRUE
[00:31:56.109]      // while "1"  (timeout="200")
[00:31:56.110]      // while-condition  =>  TRUE
[00:31:56.110]      // while "1"  (timeout="200")
[00:31:56.110]      // while-condition  =>  TRUE
[00:31:56.110]      // while "1"  (timeout="200")
[00:31:56.110]      // while-condition  =>  TRUE
[00:31:56.110]      // while "1"  (timeout="200")
[00:31:56.110]      // while-condition  =>  TRUE
[00:31:56.111]      // while "1"  (timeout="200")
[00:31:56.111]      // while-condition  =>  TRUE
[00:31:56.111]      // while "1"  (timeout="200")
[00:31:56.111]      // while-condition  =>  TRUE
[00:31:56.111]      // while "1"  (timeout="200")
[00:31:56.111]      // while-condition  =>  TRUE
[00:31:56.112]      // while "1"  (timeout="200")
[00:31:56.112]      // while-condition  =>  TRUE
[00:31:56.112]      // while "1"  (timeout="200")
[00:31:56.112]      // while-condition  =>  TRUE
[00:31:56.112]      // while "1"  (timeout="200")
[00:31:56.113]      // while-condition  =>  TRUE
[00:31:56.113]      // while "1"  (timeout="200")
[00:31:56.113]      // while  =>  TIMEOUT
[00:31:56.113]      // end while "1"
[00:31:56.113]    </control>
[00:31:56.113]    <control if="canReadPins" while="" timeout="0" info="">
[00:31:56.113]      // if-block "canReadPins"
[00:31:56.113]        // =>  TRUE
[00:31:56.114]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:31:56.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:31:56.115]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:31:56.115]        // while-condition  =>  FALSE
[00:31:56.115]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:31:56.116]      </control>
[00:31:56.116]      // end if-block "canReadPins"
[00:31:56.116]    </control>
[00:31:56.116]    <control if="!canReadPins" while="" timeout="0" info="">
[00:31:56.117]      // if-block "!canReadPins"
[00:31:56.117]        // =>  FALSE
[00:31:56.117]      // skip if-block "!canReadPins"
[00:31:56.117]    </control>
[00:31:56.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:31:56.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:56.117]        // =>  TRUE
[00:31:56.117]      <block atomic="false" info="">
[00:31:56.118]        WriteAP(0x00, 0x190008);
[00:31:56.119]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:56.120]        WriteAP(0xF0, 0x01);
[00:31:56.125]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:56.125]      </block>
[00:31:56.125]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:56.125]    </control>
[00:31:56.126]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:31:56.126]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:56.126]        // =>  FALSE
[00:31:56.126]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:56.126]    </control>
[00:31:56.126]    <block atomic="false" info="">
[00:31:56.126]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:56.134]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:31:56.134]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:31:56.134]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:56.135]      __ap = 0; //lets make sure we reset the access point selection
[00:31:56.135]        // -> [__ap <= 0x00000000]
[00:31:56.135]    </block>
[00:31:56.135]  </sequence>
[00:31:56.135]  
[00:31:56.160]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:31:56.160]  
[00:31:56.160]  <debugvars>
[00:31:56.160]    // Pre-defined
[00:31:56.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:56.160]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:56.160]    __dp=0x00000000
[00:31:56.160]    __ap=0x00000000
[00:31:56.160]    __traceout=0x00000000      (Trace Disabled)
[00:31:56.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:56.160]    __FlashAddr=0x00000000
[00:31:56.160]    __FlashLen=0x00000000
[00:31:56.160]    __FlashArg=0x00000000
[00:31:56.160]    __FlashOp=0x00000000
[00:31:56.160]    __Result=0x00000000
[00:31:56.160]  </debugvars>
[00:31:56.160]  
[00:31:56.160]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:31:56.160]    <block atomic="false" info="">
[00:31:56.160]      __var deviceID = 0;
[00:31:56.160]        // -> [deviceID <= 0x00000000]
[00:31:56.160]      __var version = 0;
[00:31:56.160]        // -> [version <= 0x00000000]
[00:31:56.160]      __var partNum = 0;
[00:31:56.160]        // -> [partNum <= 0x00000000]
[00:31:56.160]      __var manuf = 0;
[00:31:56.160]        // -> [manuf <= 0x00000000]
[00:31:56.160]      __var isMSPM0G1X0X_G3X0X = 0;
[00:31:56.160]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:31:56.160]      __var isProduction = 0;
[00:31:56.160]        // -> [isProduction <= 0x00000000]
[00:31:56.160]      __var continueId = 0;
[00:31:56.160]        // -> [continueId <= 0x00000000]
[00:31:56.170]      deviceID =   Read32(0x41C40004);
[00:31:56.171]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:31:56.171]        // -> [deviceID <= 0x2BB8802F]
[00:31:56.171]      version = deviceID >> 28;
[00:31:56.171]        // -> [version <= 0x00000002]
[00:31:56.171]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:31:56.171]        // -> [partNum <= 0x0000BB88]
[00:31:56.171]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:31:56.171]        // -> [manuf <= 0x00000017]
[00:31:56.171]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:31:56.171]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:31:56.171]      isProduction = (version > 0);
[00:31:56.171]        // -> [isProduction <= 0x00000001]
[00:31:56.171]    </block>
[00:31:56.171]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:31:56.171]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:31:56.171]        // =>  FALSE
[00:31:56.171]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:31:56.171]    </control>
[00:31:56.171]    <control if="continueId == 4" while="" timeout="0" info="">
[00:31:56.171]      // if-block "continueId == 4"
[00:31:56.171]        // =>  FALSE
[00:31:56.171]      // skip if-block "continueId == 4"
[00:31:56.171]    </control>
[00:31:56.171]    <control if="!isProduction" while="" timeout="0" info="">
[00:31:56.171]      // if-block "!isProduction"
[00:31:56.171]        // =>  FALSE
[00:31:56.171]      // skip if-block "!isProduction"
[00:31:56.171]    </control>
[00:31:56.171]  </sequence>
[00:31:56.180]  
[00:32:54.449]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:32:54.449]  
[00:32:54.464]  <debugvars>
[00:32:54.464]    // Pre-defined
[00:32:54.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:54.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:54.464]    __dp=0x00000000
[00:32:54.464]    __ap=0x00000000
[00:32:54.464]    __traceout=0x00000000      (Trace Disabled)
[00:32:54.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:54.464]    __FlashAddr=0x00000000
[00:32:54.464]    __FlashLen=0x00000000
[00:32:54.464]    __FlashArg=0x00000000
[00:32:54.464]    __FlashOp=0x00000000
[00:32:54.464]    __Result=0x00000000
[00:32:54.464]  </debugvars>
[00:32:54.464]  
[00:32:54.464]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:32:54.464]    <block atomic="false" info="">
[00:32:54.464]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:32:54.464]        // -> [isSWJ <= 0x00000001]
[00:32:54.464]      __var hasDormant = __protocol & 0x00020000;
[00:32:54.464]        // -> [hasDormant <= 0x00000000]
[00:32:54.464]      __var protType   = __protocol & 0x0000FFFF;
[00:32:54.464]        // -> [protType <= 0x00000002]
[00:32:54.464]    </block>
[00:32:54.464]    <control if="protType == 1" while="" timeout="0" info="">
[00:32:54.464]      // if-block "protType == 1"
[00:32:54.464]        // =>  FALSE
[00:32:54.464]      // skip if-block "protType == 1"
[00:32:54.464]    </control>
[00:32:54.464]    <control if="protType == 2" while="" timeout="0" info="">
[00:32:54.464]      // if-block "protType == 2"
[00:32:54.464]        // =>  TRUE
[00:32:54.464]      <control if="isSWJ" while="" timeout="0" info="">
[00:32:54.464]        // if-block "isSWJ"
[00:32:54.464]          // =>  TRUE
[00:32:54.464]        <control if="hasDormant" while="" timeout="0" info="">
[00:32:54.464]          // if-block "hasDormant"
[00:32:54.464]            // =>  FALSE
[00:32:54.464]          // skip if-block "hasDormant"
[00:32:54.464]        </control>
[00:32:54.464]        <control if="!hasDormant" while="" timeout="0" info="">
[00:32:54.464]          // if-block "!hasDormant"
[00:32:54.464]            // =>  TRUE
[00:32:54.464]          <block atomic="false" info="">
[00:32:54.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:32:54.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:54.469]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:32:54.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:32:54.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:32:54.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:54.469]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:32:54.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:32:54.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:32:54.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:54.479]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:32:54.480]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:32:54.480]          </block>
[00:32:54.480]          // end if-block "!hasDormant"
[00:32:54.480]        </control>
[00:32:54.480]        // end if-block "isSWJ"
[00:32:54.480]      </control>
[00:32:54.480]      <control if="!isSWJ" while="" timeout="0" info="">
[00:32:54.480]        // if-block "!isSWJ"
[00:32:54.480]          // =>  FALSE
[00:32:54.480]        // skip if-block "!isSWJ"
[00:32:54.480]      </control>
[00:32:54.480]      <block atomic="false" info="">
[00:32:54.480]        ReadDP(0x0);
[00:32:54.480]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:32:54.480]      </block>
[00:32:54.480]      // end if-block "protType == 2"
[00:32:54.480]    </control>
[00:32:54.480]  </sequence>
[00:32:54.480]  
[00:32:54.480]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:32:54.480]  
[00:32:54.480]  <debugvars>
[00:32:54.480]    // Pre-defined
[00:32:54.480]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:54.480]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:54.480]    __dp=0x00000000
[00:32:54.480]    __ap=0x00000000
[00:32:54.480]    __traceout=0x00000000      (Trace Disabled)
[00:32:54.480]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:54.480]    __FlashAddr=0x00000000
[00:32:54.489]    __FlashLen=0x00000000
[00:32:54.489]    __FlashArg=0x00000000
[00:32:54.489]    __FlashOp=0x00000000
[00:32:54.489]    __Result=0x00000000
[00:32:54.489]  </debugvars>
[00:32:54.489]  
[00:32:54.489]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:32:54.489]    <block atomic="false" info="">
[00:32:54.489]      __var SW_DP_ABORT       = 0x0;
[00:32:54.489]        // -> [SW_DP_ABORT <= 0x00000000]
[00:32:54.489]      __var DP_CTRL_STAT      = 0x4;
[00:32:54.489]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:32:54.489]      __var DP_SELECT         = 0x8;
[00:32:54.489]        // -> [DP_SELECT <= 0x00000008]
[00:32:54.489]      __var powered_down      = 0;
[00:32:54.489]        // -> [powered_down <= 0x00000000]
[00:32:54.489]      WriteDP(DP_SELECT, 0x00000000);
[00:32:54.492]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:32:54.492]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:32:54.492]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:32:54.492]        // -> [powered_down <= 0x00000001]
[00:32:54.492]    </block>
[00:32:54.492]    <control if="powered_down" while="" timeout="0" info="">
[00:32:54.492]      // if-block "powered_down"
[00:32:54.492]        // =>  TRUE
[00:32:54.492]      <block atomic="false" info="">
[00:32:54.492]        Message(0, "Debug/System power-up request sent");
[00:32:54.499]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:32:54.500]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:32:54.500]      </block>
[00:32:54.500]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:32:54.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:32:54.500]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:32:54.500]        // while-condition  =>  FALSE
[00:32:54.500]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:32:54.500]      </control>
[00:32:54.500]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:32:54.500]        // if-block "(__protocol & 0xFFFF) == 1"
[00:32:54.500]          // =>  FALSE
[00:32:54.500]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:32:54.500]      </control>
[00:32:54.500]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:32:54.500]        // if-block "(__protocol & 0xFFFF) == 2"
[00:32:54.500]          // =>  TRUE
[00:32:54.500]        <block atomic="false" info="">
[00:32:54.500]          Message(0, "executing SWD power up");
[00:32:54.500]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:32:54.509]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:32:54.509]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:32:54.509]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:32:54.509]        </block>
[00:32:54.509]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:32:54.509]      </control>
[00:32:54.509]      // end if-block "powered_down"
[00:32:54.509]    </control>
[00:32:54.509]    <block atomic="false" info="">
[00:32:54.509]      __var DEBUG_PORT_VAL    = 0;
[00:32:54.509]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:32:54.509]      __var ACCESS_POINT_VAL  = 0;
[00:32:54.509]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:32:54.509]      __ap = 1; 
[00:32:54.509]        // -> [__ap <= 0x00000001]
[00:32:54.509]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:32:54.520]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:32:54.520]      __ap = 4;
[00:32:54.520]        // -> [__ap <= 0x00000004]
[00:32:54.520]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:54.522]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:32:54.522]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:32:54.522]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:54.522]    </block>
[00:32:54.522]    <block atomic="false" info="">
[00:32:54.522]      __var nReset = 0x80;
[00:32:54.522]        // -> [nReset <= 0x00000080]
[00:32:54.522]      __var canReadPins = 0;
[00:32:54.522]        // -> [canReadPins <= 0x00000000]
[00:32:54.522]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:32:54.529]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:32:54.529]        // -> [canReadPins <= 0x00000001]
[00:32:54.529]    </block>
[00:32:54.529]    <control if="" while="1" timeout="200" info="">
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.529]      // while-condition  =>  TRUE
[00:32:54.529]      // while "1"  (timeout="200")
[00:32:54.539]      // while-condition  =>  TRUE
[00:32:54.539]      // while "1"  (timeout="200")
[00:32:54.539]      // while  =>  TIMEOUT
[00:32:54.539]      // end while "1"
[00:32:54.539]    </control>
[00:32:54.539]    <control if="canReadPins" while="" timeout="0" info="">
[00:32:54.539]      // if-block "canReadPins"
[00:32:54.539]        // =>  TRUE
[00:32:54.539]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:32:54.539]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:32:54.542]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:32:54.542]        // while-condition  =>  FALSE
[00:32:54.542]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:32:54.542]      </control>
[00:32:54.542]      // end if-block "canReadPins"
[00:32:54.542]    </control>
[00:32:54.543]    <control if="!canReadPins" while="" timeout="0" info="">
[00:32:54.543]      // if-block "!canReadPins"
[00:32:54.543]        // =>  FALSE
[00:32:54.543]      // skip if-block "!canReadPins"
[00:32:54.544]    </control>
[00:32:54.544]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:32:54.544]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:54.544]        // =>  TRUE
[00:32:54.544]      <block atomic="false" info="">
[00:32:54.544]        WriteAP(0x00, 0x190008);
[00:32:54.544]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:54.544]        WriteAP(0xF0, 0x01);
[00:32:54.549]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:54.549]      </block>
[00:32:54.549]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:54.549]    </control>
[00:32:54.549]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:32:54.549]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:54.549]        // =>  FALSE
[00:32:54.549]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:54.549]    </control>
[00:32:54.549]    <block atomic="false" info="">
[00:32:54.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:54.549]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:32:54.549]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:32:54.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:54.549]      __ap = 0; //lets make sure we reset the access point selection
[00:32:54.549]        // -> [__ap <= 0x00000000]
[00:32:54.549]    </block>
[00:32:54.549]  </sequence>
[00:32:54.549]  
[00:32:54.590]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:32:54.590]  
[00:32:54.590]  <debugvars>
[00:32:54.590]    // Pre-defined
[00:32:54.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:54.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:54.590]    __dp=0x00000000
[00:32:54.590]    __ap=0x00000000
[00:32:54.591]    __traceout=0x00000000      (Trace Disabled)
[00:32:54.591]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:54.591]    __FlashAddr=0x00000000
[00:32:54.591]    __FlashLen=0x00000000
[00:32:54.591]    __FlashArg=0x00000000
[00:32:54.591]    __FlashOp=0x00000000
[00:32:54.591]    __Result=0x00000000
[00:32:54.591]  </debugvars>
[00:32:54.591]  
[00:32:54.591]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:32:54.591]    <block atomic="false" info="">
[00:32:54.592]      __var deviceID = 0;
[00:32:54.592]        // -> [deviceID <= 0x00000000]
[00:32:54.592]      __var version = 0;
[00:32:54.592]        // -> [version <= 0x00000000]
[00:32:54.592]      __var partNum = 0;
[00:32:54.592]        // -> [partNum <= 0x00000000]
[00:32:54.592]      __var manuf = 0;
[00:32:54.592]        // -> [manuf <= 0x00000000]
[00:32:54.592]      __var isMSPM0G1X0X_G3X0X = 0;
[00:32:54.592]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:32:54.592]      __var isProduction = 0;
[00:32:54.592]        // -> [isProduction <= 0x00000000]
[00:32:54.592]      __var continueId = 0;
[00:32:54.592]        // -> [continueId <= 0x00000000]
[00:32:54.592]      deviceID =   Read32(0x41C40004);
[00:32:54.603]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:32:54.603]        // -> [deviceID <= 0x2BB8802F]
[00:32:54.603]      version = deviceID >> 28;
[00:32:54.603]        // -> [version <= 0x00000002]
[00:32:54.604]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:32:54.604]        // -> [partNum <= 0x0000BB88]
[00:32:54.604]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:32:54.604]        // -> [manuf <= 0x00000017]
[00:32:54.604]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:32:54.604]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:32:54.604]      isProduction = (version > 0);
[00:32:54.604]        // -> [isProduction <= 0x00000001]
[00:32:54.604]    </block>
[00:32:54.605]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:32:54.605]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:32:54.605]        // =>  FALSE
[00:32:54.605]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:32:54.605]    </control>
[00:32:54.605]    <control if="continueId == 4" while="" timeout="0" info="">
[00:32:54.605]      // if-block "continueId == 4"
[00:32:54.605]        // =>  FALSE
[00:32:54.605]      // skip if-block "continueId == 4"
[00:32:54.606]    </control>
[00:32:54.606]    <control if="!isProduction" while="" timeout="0" info="">
[00:32:54.606]      // if-block "!isProduction"
[00:32:54.606]        // =>  FALSE
[00:32:54.606]      // skip if-block "!isProduction"
[00:32:54.606]    </control>
[00:32:54.606]  </sequence>
[00:32:54.607]  
[00:33:25.824]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:33:25.824]  
[00:33:25.836]  <debugvars>
[00:33:25.836]    // Pre-defined
[00:33:25.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:33:25.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:33:25.836]    __dp=0x00000000
[00:33:25.836]    __ap=0x00000000
[00:33:25.836]    __traceout=0x00000000      (Trace Disabled)
[00:33:25.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:33:25.836]    __FlashAddr=0x00000000
[00:33:25.836]    __FlashLen=0x00000000
[00:33:25.836]    __FlashArg=0x00000000
[00:33:25.836]    __FlashOp=0x00000000
[00:33:25.836]    __Result=0x00000000
[00:33:25.836]  </debugvars>
[00:33:25.836]  
[00:33:25.836]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:33:25.836]    <block atomic="false" info="">
[00:33:25.836]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:33:25.836]        // -> [isSWJ <= 0x00000001]
[00:33:25.836]      __var hasDormant = __protocol & 0x00020000;
[00:33:25.836]        // -> [hasDormant <= 0x00000000]
[00:33:25.836]      __var protType   = __protocol & 0x0000FFFF;
[00:33:25.836]        // -> [protType <= 0x00000002]
[00:33:25.836]    </block>
[00:33:25.836]    <control if="protType == 1" while="" timeout="0" info="">
[00:33:25.836]      // if-block "protType == 1"
[00:33:25.836]        // =>  FALSE
[00:33:25.836]      // skip if-block "protType == 1"
[00:33:25.836]    </control>
[00:33:25.836]    <control if="protType == 2" while="" timeout="0" info="">
[00:33:25.836]      // if-block "protType == 2"
[00:33:25.836]        // =>  TRUE
[00:33:25.836]      <control if="isSWJ" while="" timeout="0" info="">
[00:33:25.836]        // if-block "isSWJ"
[00:33:25.836]          // =>  TRUE
[00:33:25.836]        <control if="hasDormant" while="" timeout="0" info="">
[00:33:25.836]          // if-block "hasDormant"
[00:33:25.836]            // =>  FALSE
[00:33:25.836]          // skip if-block "hasDormant"
[00:33:25.836]        </control>
[00:33:25.836]        <control if="!hasDormant" while="" timeout="0" info="">
[00:33:25.836]          // if-block "!hasDormant"
[00:33:25.836]            // =>  TRUE
[00:33:25.836]          <block atomic="false" info="">
[00:33:25.836]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:33:25.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:33:25.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:33:25.844]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:33:25.844]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:33:25.844]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:33:25.844]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:33:25.851]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:33:25.851]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:33:25.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:33:25.851]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:33:25.854]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:33:25.854]          </block>
[00:33:25.854]          // end if-block "!hasDormant"
[00:33:25.854]        </control>
[00:33:25.854]        // end if-block "isSWJ"
[00:33:25.854]      </control>
[00:33:25.861]      <control if="!isSWJ" while="" timeout="0" info="">
[00:33:25.861]        // if-block "!isSWJ"
[00:33:25.861]          // =>  FALSE
[00:33:25.861]        // skip if-block "!isSWJ"
[00:33:25.861]      </control>
[00:33:25.861]      <block atomic="false" info="">
[00:33:25.861]        ReadDP(0x0);
[00:33:25.863]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:33:25.863]      </block>
[00:33:25.864]      // end if-block "protType == 2"
[00:33:25.864]    </control>
[00:33:25.864]  </sequence>
[00:33:25.864]  
[00:33:25.867]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:33:25.867]  
[00:33:25.867]  <debugvars>
[00:33:25.867]    // Pre-defined
[00:33:25.867]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:33:25.867]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:33:25.867]    __dp=0x00000000
[00:33:25.867]    __ap=0x00000000
[00:33:25.867]    __traceout=0x00000000      (Trace Disabled)
[00:33:25.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:33:25.867]    __FlashAddr=0x00000000
[00:33:25.867]    __FlashLen=0x00000000
[00:33:25.867]    __FlashArg=0x00000000
[00:33:25.867]    __FlashOp=0x00000000
[00:33:25.867]    __Result=0x00000000
[00:33:25.867]  </debugvars>
[00:33:25.867]  
[00:33:25.871]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:33:25.871]    <block atomic="false" info="">
[00:33:25.871]      __var SW_DP_ABORT       = 0x0;
[00:33:25.872]        // -> [SW_DP_ABORT <= 0x00000000]
[00:33:25.872]      __var DP_CTRL_STAT      = 0x4;
[00:33:25.872]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:33:25.872]      __var DP_SELECT         = 0x8;
[00:33:25.872]        // -> [DP_SELECT <= 0x00000008]
[00:33:25.872]      __var powered_down      = 0;
[00:33:25.872]        // -> [powered_down <= 0x00000000]
[00:33:25.872]      WriteDP(DP_SELECT, 0x00000000);
[00:33:25.874]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:33:25.874]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:33:25.874]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:33:25.874]        // -> [powered_down <= 0x00000001]
[00:33:25.874]    </block>
[00:33:25.874]    <control if="powered_down" while="" timeout="0" info="">
[00:33:25.874]      // if-block "powered_down"
[00:33:25.874]        // =>  TRUE
[00:33:25.874]      <block atomic="false" info="">
[00:33:25.874]        Message(0, "Debug/System power-up request sent");
[00:33:25.874]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:33:25.884]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:33:25.884]      </block>
[00:33:25.884]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:33:25.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:33:25.884]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:33:25.884]        // while-condition  =>  FALSE
[00:33:25.884]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:33:25.884]      </control>
[00:33:25.884]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:33:25.884]        // if-block "(__protocol & 0xFFFF) == 1"
[00:33:25.884]          // =>  FALSE
[00:33:25.884]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:33:25.884]      </control>
[00:33:25.884]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:33:25.884]        // if-block "(__protocol & 0xFFFF) == 2"
[00:33:25.884]          // =>  TRUE
[00:33:25.884]        <block atomic="false" info="">
[00:33:25.884]          Message(0, "executing SWD power up");
[00:33:25.884]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:33:25.892]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:33:25.892]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:33:25.894]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:33:25.894]        </block>
[00:33:25.894]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:33:25.894]      </control>
[00:33:25.894]      // end if-block "powered_down"
[00:33:25.894]    </control>
[00:33:25.894]    <block atomic="false" info="">
[00:33:25.894]      __var DEBUG_PORT_VAL    = 0;
[00:33:25.894]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:33:25.894]      __var ACCESS_POINT_VAL  = 0;
[00:33:25.894]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:33:25.894]      __ap = 1; 
[00:33:25.894]        // -> [__ap <= 0x00000001]
[00:33:25.894]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:33:25.904]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:33:25.904]      __ap = 4;
[00:33:25.904]        // -> [__ap <= 0x00000004]
[00:33:25.904]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:33:25.904]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:33:25.904]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:33:25.904]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:33:25.904]    </block>
[00:33:25.904]    <block atomic="false" info="">
[00:33:25.904]      __var nReset = 0x80;
[00:33:25.904]        // -> [nReset <= 0x00000080]
[00:33:25.904]      __var canReadPins = 0;
[00:33:25.904]        // -> [canReadPins <= 0x00000000]
[00:33:25.904]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:33:25.913]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:33:25.913]        // -> [canReadPins <= 0x00000001]
[00:33:25.913]    </block>
[00:33:25.913]    <control if="" while="1" timeout="200" info="">
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.913]      // while "1"  (timeout="200")
[00:33:25.913]      // while-condition  =>  TRUE
[00:33:25.920]      // while "1"  (timeout="200")
[00:33:25.920]      // while-condition  =>  TRUE
[00:33:25.920]      // while "1"  (timeout="200")
[00:33:25.920]      // while-condition  =>  TRUE
[00:33:25.920]      // while "1"  (timeout="200")
[00:33:25.920]      // while-condition  =>  TRUE
[00:33:25.920]      // while "1"  (timeout="200")
[00:33:25.920]      // while-condition  =>  TRUE
[00:33:25.920]      // while "1"  (timeout="200")
[00:33:25.920]      // while-condition  =>  TRUE
[00:33:25.922]      // while "1"  (timeout="200")
[00:33:25.922]      // while-condition  =>  TRUE
[00:33:25.922]      // while "1"  (timeout="200")
[00:33:25.922]      // while-condition  =>  TRUE
[00:33:25.922]      // while "1"  (timeout="200")
[00:33:25.922]      // while-condition  =>  TRUE
[00:33:25.922]      // while "1"  (timeout="200")
[00:33:25.922]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.923]      // while "1"  (timeout="200")
[00:33:25.923]      // while-condition  =>  TRUE
[00:33:25.932]      // while "1"  (timeout="200")
[00:33:25.932]      // while  =>  TIMEOUT
[00:33:25.932]      // end while "1"
[00:33:25.932]    </control>
[00:33:25.932]    <control if="canReadPins" while="" timeout="0" info="">
[00:33:25.932]      // if-block "canReadPins"
[00:33:25.932]        // =>  TRUE
[00:33:25.932]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:33:25.932]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:33:25.934]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:33:25.934]        // while-condition  =>  FALSE
[00:33:25.934]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:33:25.934]      </control>
[00:33:25.934]      // end if-block "canReadPins"
[00:33:25.934]    </control>
[00:33:25.934]    <control if="!canReadPins" while="" timeout="0" info="">
[00:33:25.934]      // if-block "!canReadPins"
[00:33:25.934]        // =>  FALSE
[00:33:25.934]      // skip if-block "!canReadPins"
[00:33:25.934]    </control>
[00:33:25.934]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:33:25.934]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:33:25.934]        // =>  TRUE
[00:33:25.934]      <block atomic="false" info="">
[00:33:25.934]        WriteAP(0x00, 0x190008);
[00:33:25.934]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:33:25.934]        WriteAP(0xF0, 0x01);
[00:33:25.945]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:33:25.945]      </block>
[00:33:25.945]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:33:25.945]    </control>
[00:33:25.945]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:33:25.945]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:33:25.945]        // =>  FALSE
[00:33:25.945]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:33:25.945]    </control>
[00:33:25.945]    <block atomic="false" info="">
[00:33:25.945]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:33:25.945]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:33:25.945]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:33:25.945]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:33:25.945]      __ap = 0; //lets make sure we reset the access point selection
[00:33:25.945]        // -> [__ap <= 0x00000000]
[00:33:25.945]    </block>
[00:33:25.945]  </sequence>
[00:33:25.945]  
[00:33:25.974]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:33:25.974]  
[00:33:25.974]  <debugvars>
[00:33:25.974]    // Pre-defined
[00:33:25.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:33:25.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:33:25.974]    __dp=0x00000000
[00:33:25.974]    __ap=0x00000000
[00:33:25.974]    __traceout=0x00000000      (Trace Disabled)
[00:33:25.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:33:25.974]    __FlashAddr=0x00000000
[00:33:25.974]    __FlashLen=0x00000000
[00:33:25.974]    __FlashArg=0x00000000
[00:33:25.974]    __FlashOp=0x00000000
[00:33:25.974]    __Result=0x00000000
[00:33:25.976]  </debugvars>
[00:33:25.976]  
[00:33:25.976]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:33:25.976]    <block atomic="false" info="">
[00:33:25.976]      __var deviceID = 0;
[00:33:25.976]        // -> [deviceID <= 0x00000000]
[00:33:25.976]      __var version = 0;
[00:33:25.976]        // -> [version <= 0x00000000]
[00:33:25.976]      __var partNum = 0;
[00:33:25.976]        // -> [partNum <= 0x00000000]
[00:33:25.976]      __var manuf = 0;
[00:33:25.976]        // -> [manuf <= 0x00000000]
[00:33:25.976]      __var isMSPM0G1X0X_G3X0X = 0;
[00:33:25.976]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:33:25.976]      __var isProduction = 0;
[00:33:25.976]        // -> [isProduction <= 0x00000000]
[00:33:25.976]      __var continueId = 0;
[00:33:25.976]        // -> [continueId <= 0x00000000]
[00:33:25.976]      deviceID =   Read32(0x41C40004);
[00:33:25.983]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:33:25.983]        // -> [deviceID <= 0x2BB8802F]
[00:33:25.983]      version = deviceID >> 28;
[00:33:25.983]        // -> [version <= 0x00000002]
[00:33:25.983]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:33:25.983]        // -> [partNum <= 0x0000BB88]
[00:33:25.983]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:33:25.983]        // -> [manuf <= 0x00000017]
[00:33:25.983]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:33:25.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:33:25.983]      isProduction = (version > 0);
[00:33:25.983]        // -> [isProduction <= 0x00000001]
[00:33:25.983]    </block>
[00:33:25.983]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:33:25.983]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:33:25.983]        // =>  FALSE
[00:33:25.983]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:33:25.983]    </control>
[00:33:25.983]    <control if="continueId == 4" while="" timeout="0" info="">
[00:33:25.983]      // if-block "continueId == 4"
[00:33:25.983]        // =>  FALSE
[00:33:25.983]      // skip if-block "continueId == 4"
[00:33:25.983]    </control>
[00:33:25.983]    <control if="!isProduction" while="" timeout="0" info="">
[00:33:25.983]      // if-block "!isProduction"
[00:33:25.983]        // =>  FALSE
[00:33:25.983]      // skip if-block "!isProduction"
[00:33:25.983]    </control>
[00:33:25.983]  </sequence>
[00:33:25.983]  
[00:34:05.191]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:34:05.191]  
[00:34:05.199]  <debugvars>
[00:34:05.199]    // Pre-defined
[00:34:05.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:05.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:05.199]    __dp=0x00000000
[00:34:05.199]    __ap=0x00000000
[00:34:05.199]    __traceout=0x00000000      (Trace Disabled)
[00:34:05.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:05.199]    __FlashAddr=0x00000000
[00:34:05.199]    __FlashLen=0x00000000
[00:34:05.199]    __FlashArg=0x00000000
[00:34:05.199]    __FlashOp=0x00000000
[00:34:05.199]    __Result=0x00000000
[00:34:05.199]  </debugvars>
[00:34:05.199]  
[00:34:05.199]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:34:05.199]    <block atomic="false" info="">
[00:34:05.199]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:34:05.199]        // -> [isSWJ <= 0x00000001]
[00:34:05.199]      __var hasDormant = __protocol & 0x00020000;
[00:34:05.201]        // -> [hasDormant <= 0x00000000]
[00:34:05.201]      __var protType   = __protocol & 0x0000FFFF;
[00:34:05.201]        // -> [protType <= 0x00000002]
[00:34:05.201]    </block>
[00:34:05.201]    <control if="protType == 1" while="" timeout="0" info="">
[00:34:05.201]      // if-block "protType == 1"
[00:34:05.201]        // =>  FALSE
[00:34:05.201]      // skip if-block "protType == 1"
[00:34:05.201]    </control>
[00:34:05.201]    <control if="protType == 2" while="" timeout="0" info="">
[00:34:05.201]      // if-block "protType == 2"
[00:34:05.201]        // =>  TRUE
[00:34:05.201]      <control if="isSWJ" while="" timeout="0" info="">
[00:34:05.201]        // if-block "isSWJ"
[00:34:05.201]          // =>  TRUE
[00:34:05.201]        <control if="hasDormant" while="" timeout="0" info="">
[00:34:05.201]          // if-block "hasDormant"
[00:34:05.201]            // =>  FALSE
[00:34:05.201]          // skip if-block "hasDormant"
[00:34:05.201]        </control>
[00:34:05.201]        <control if="!hasDormant" while="" timeout="0" info="">
[00:34:05.201]          // if-block "!hasDormant"
[00:34:05.204]            // =>  TRUE
[00:34:05.204]          <block atomic="false" info="">
[00:34:05.204]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:34:05.204]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:05.204]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:34:05.204]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:34:05.204]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:34:05.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:05.212]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:34:05.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:34:05.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:34:05.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:05.214]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:34:05.224]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:34:05.224]          </block>
[00:34:05.224]          // end if-block "!hasDormant"
[00:34:05.224]        </control>
[00:34:05.224]        // end if-block "isSWJ"
[00:34:05.224]      </control>
[00:34:05.224]      <control if="!isSWJ" while="" timeout="0" info="">
[00:34:05.224]        // if-block "!isSWJ"
[00:34:05.224]          // =>  FALSE
[00:34:05.224]        // skip if-block "!isSWJ"
[00:34:05.224]      </control>
[00:34:05.224]      <block atomic="false" info="">
[00:34:05.224]        ReadDP(0x0);
[00:34:05.224]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:34:05.224]      </block>
[00:34:05.224]      // end if-block "protType == 2"
[00:34:05.224]    </control>
[00:34:05.224]  </sequence>
[00:34:05.224]  
[00:34:05.234]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:34:05.234]  
[00:34:05.234]  <debugvars>
[00:34:05.234]    // Pre-defined
[00:34:05.234]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:05.234]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:05.234]    __dp=0x00000000
[00:34:05.234]    __ap=0x00000000
[00:34:05.234]    __traceout=0x00000000      (Trace Disabled)
[00:34:05.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:05.234]    __FlashAddr=0x00000000
[00:34:05.234]    __FlashLen=0x00000000
[00:34:05.234]    __FlashArg=0x00000000
[00:34:05.234]    __FlashOp=0x00000000
[00:34:05.234]    __Result=0x00000000
[00:34:05.234]  </debugvars>
[00:34:05.234]  
[00:34:05.234]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:34:05.234]    <block atomic="false" info="">
[00:34:05.234]      __var SW_DP_ABORT       = 0x0;
[00:34:05.234]        // -> [SW_DP_ABORT <= 0x00000000]
[00:34:05.234]      __var DP_CTRL_STAT      = 0x4;
[00:34:05.234]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:34:05.234]      __var DP_SELECT         = 0x8;
[00:34:05.234]        // -> [DP_SELECT <= 0x00000008]
[00:34:05.234]      __var powered_down      = 0;
[00:34:05.234]        // -> [powered_down <= 0x00000000]
[00:34:05.234]      WriteDP(DP_SELECT, 0x00000000);
[00:34:05.234]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:34:05.234]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:34:05.242]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:34:05.242]        // -> [powered_down <= 0x00000001]
[00:34:05.242]    </block>
[00:34:05.242]    <control if="powered_down" while="" timeout="0" info="">
[00:34:05.242]      // if-block "powered_down"
[00:34:05.242]        // =>  TRUE
[00:34:05.242]      <block atomic="false" info="">
[00:34:05.242]        Message(0, "Debug/System power-up request sent");
[00:34:05.244]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:34:05.244]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:34:05.244]      </block>
[00:34:05.244]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:34:05.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:34:05.244]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:34:05.244]        // while-condition  =>  FALSE
[00:34:05.244]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:34:05.244]      </control>
[00:34:05.244]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:34:05.244]        // if-block "(__protocol & 0xFFFF) == 1"
[00:34:05.244]          // =>  FALSE
[00:34:05.244]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:34:05.244]      </control>
[00:34:05.244]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:34:05.244]        // if-block "(__protocol & 0xFFFF) == 2"
[00:34:05.253]          // =>  TRUE
[00:34:05.253]        <block atomic="false" info="">
[00:34:05.253]          Message(0, "executing SWD power up");
[00:34:05.253]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:34:05.254]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:34:05.254]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:34:05.259]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:34:05.259]        </block>
[00:34:05.259]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:34:05.259]      </control>
[00:34:05.259]      // end if-block "powered_down"
[00:34:05.259]    </control>
[00:34:05.259]    <block atomic="false" info="">
[00:34:05.259]      __var DEBUG_PORT_VAL    = 0;
[00:34:05.259]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:34:05.259]      __var ACCESS_POINT_VAL  = 0;
[00:34:05.259]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:34:05.259]      __ap = 1; 
[00:34:05.259]        // -> [__ap <= 0x00000001]
[00:34:05.259]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:34:05.264]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:34:05.264]      __ap = 4;
[00:34:05.264]        // -> [__ap <= 0x00000004]
[00:34:05.264]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:05.264]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:34:05.269]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:34:05.269]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:05.269]    </block>
[00:34:05.269]    <block atomic="false" info="">
[00:34:05.269]      __var nReset = 0x80;
[00:34:05.269]        // -> [nReset <= 0x00000080]
[00:34:05.269]      __var canReadPins = 0;
[00:34:05.269]        // -> [canReadPins <= 0x00000000]
[00:34:05.269]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:34:05.274]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:34:05.274]        // -> [canReadPins <= 0x00000001]
[00:34:05.274]    </block>
[00:34:05.274]    <control if="" while="1" timeout="200" info="">
[00:34:05.274]      // while "1"  (timeout="200")
[00:34:05.274]      // while-condition  =>  TRUE
[00:34:05.274]      // while "1"  (timeout="200")
[00:34:05.274]      // while-condition  =>  TRUE
[00:34:05.274]      // while "1"  (timeout="200")
[00:34:05.274]      // while-condition  =>  TRUE
[00:34:05.274]      // while "1"  (timeout="200")
[00:34:05.274]      // while-condition  =>  TRUE
[00:34:05.274]      // while "1"  (timeout="200")
[00:34:05.274]      // while-condition  =>  TRUE
[00:34:05.274]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.279]      // while "1"  (timeout="200")
[00:34:05.279]      // while-condition  =>  TRUE
[00:34:05.283]      // while "1"  (timeout="200")
[00:34:05.283]      // while-condition  =>  TRUE
[00:34:05.283]      // while "1"  (timeout="200")
[00:34:05.283]      // while-condition  =>  TRUE
[00:34:05.283]      // while "1"  (timeout="200")
[00:34:05.283]      // while-condition  =>  TRUE
[00:34:05.283]      // while "1"  (timeout="200")
[00:34:05.283]      // while-condition  =>  TRUE
[00:34:05.283]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.284]      // while-condition  =>  TRUE
[00:34:05.284]      // while "1"  (timeout="200")
[00:34:05.293]      // while-condition  =>  TRUE
[00:34:05.293]      // while "1"  (timeout="200")
[00:34:05.293]      // while  =>  TIMEOUT
[00:34:05.293]      // end while "1"
[00:34:05.293]    </control>
[00:34:05.294]    <control if="canReadPins" while="" timeout="0" info="">
[00:34:05.294]      // if-block "canReadPins"
[00:34:05.294]        // =>  TRUE
[00:34:05.294]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:34:05.294]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:34:05.295]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:34:05.295]        // while-condition  =>  FALSE
[00:34:05.295]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:34:05.295]      </control>
[00:34:05.295]      // end if-block "canReadPins"
[00:34:05.295]    </control>
[00:34:05.295]    <control if="!canReadPins" while="" timeout="0" info="">
[00:34:05.295]      // if-block "!canReadPins"
[00:34:05.295]        // =>  FALSE
[00:34:05.295]      // skip if-block "!canReadPins"
[00:34:05.295]    </control>
[00:34:05.295]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:34:05.295]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:05.295]        // =>  TRUE
[00:34:05.295]      <block atomic="false" info="">
[00:34:05.295]        WriteAP(0x00, 0x190008);
[00:34:05.306]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:05.306]        WriteAP(0xF0, 0x01);
[00:34:05.306]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:05.306]      </block>
[00:34:05.306]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:05.306]    </control>
[00:34:05.306]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:34:05.306]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:05.306]        // =>  FALSE
[00:34:05.306]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:05.306]    </control>
[00:34:05.306]    <block atomic="false" info="">
[00:34:05.306]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:05.319]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:34:05.319]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:34:05.319]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:05.319]      __ap = 0; //lets make sure we reset the access point selection
[00:34:05.319]        // -> [__ap <= 0x00000000]
[00:34:05.319]    </block>
[00:34:05.319]  </sequence>
[00:34:05.319]  
[00:34:05.344]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:34:05.344]  
[00:34:05.344]  <debugvars>
[00:34:05.344]    // Pre-defined
[00:34:05.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:05.344]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:05.344]    __dp=0x00000000
[00:34:05.344]    __ap=0x00000000
[00:34:05.344]    __traceout=0x00000000      (Trace Disabled)
[00:34:05.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:05.344]    __FlashAddr=0x00000000
[00:34:05.344]    __FlashLen=0x00000000
[00:34:05.344]    __FlashArg=0x00000000
[00:34:05.344]    __FlashOp=0x00000000
[00:34:05.344]    __Result=0x00000000
[00:34:05.344]  </debugvars>
[00:34:05.344]  
[00:34:05.344]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:34:05.344]    <block atomic="false" info="">
[00:34:05.344]      __var deviceID = 0;
[00:34:05.344]        // -> [deviceID <= 0x00000000]
[00:34:05.344]      __var version = 0;
[00:34:05.344]        // -> [version <= 0x00000000]
[00:34:05.353]      __var partNum = 0;
[00:34:05.353]        // -> [partNum <= 0x00000000]
[00:34:05.353]      __var manuf = 0;
[00:34:05.353]        // -> [manuf <= 0x00000000]
[00:34:05.353]      __var isMSPM0G1X0X_G3X0X = 0;
[00:34:05.354]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:34:05.354]      __var isProduction = 0;
[00:34:05.354]        // -> [isProduction <= 0x00000000]
[00:34:05.354]      __var continueId = 0;
[00:34:05.354]        // -> [continueId <= 0x00000000]
[00:34:05.354]      deviceID =   Read32(0x41C40004);
[00:34:05.364]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:34:05.364]        // -> [deviceID <= 0x2BB8802F]
[00:34:05.364]      version = deviceID >> 28;
[00:34:05.364]        // -> [version <= 0x00000002]
[00:34:05.364]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:34:05.364]        // -> [partNum <= 0x0000BB88]
[00:34:05.364]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:34:05.364]        // -> [manuf <= 0x00000017]
[00:34:05.364]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:34:05.364]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:34:05.364]      isProduction = (version > 0);
[00:34:05.364]        // -> [isProduction <= 0x00000001]
[00:34:05.364]    </block>
[00:34:05.364]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:34:05.364]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:34:05.364]        // =>  FALSE
[00:34:05.364]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:34:05.364]    </control>
[00:34:05.364]    <control if="continueId == 4" while="" timeout="0" info="">
[00:34:05.364]      // if-block "continueId == 4"
[00:34:05.364]        // =>  FALSE
[00:34:05.364]      // skip if-block "continueId == 4"
[00:34:05.364]    </control>
[00:34:05.364]    <control if="!isProduction" while="" timeout="0" info="">
[00:34:05.364]      // if-block "!isProduction"
[00:34:05.364]        // =>  FALSE
[00:34:05.364]      // skip if-block "!isProduction"
[00:34:05.364]    </control>
[00:34:05.364]  </sequence>
[00:34:05.364]  
[00:36:00.631]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:36:00.631]  
[00:36:00.635]  <debugvars>
[00:36:00.635]    // Pre-defined
[00:36:00.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:00.635]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:36:00.635]    __dp=0x00000000
[00:36:00.635]    __ap=0x00000000
[00:36:00.635]    __traceout=0x00000000      (Trace Disabled)
[00:36:00.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:00.635]    __FlashAddr=0x00000000
[00:36:00.635]    __FlashLen=0x00000000
[00:36:00.635]    __FlashArg=0x00000000
[00:36:00.635]    __FlashOp=0x00000000
[00:36:00.635]    __Result=0x00000000
[00:36:00.635]  </debugvars>
[00:36:00.635]  
[00:36:00.635]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:36:00.635]    <block atomic="false" info="">
[00:36:00.635]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:36:00.635]        // -> [isSWJ <= 0x00000001]
[00:36:00.635]      __var hasDormant = __protocol & 0x00020000;
[00:36:00.635]        // -> [hasDormant <= 0x00000000]
[00:36:00.635]      __var protType   = __protocol & 0x0000FFFF;
[00:36:00.635]        // -> [protType <= 0x00000002]
[00:36:00.635]    </block>
[00:36:00.635]    <control if="protType == 1" while="" timeout="0" info="">
[00:36:00.635]      // if-block "protType == 1"
[00:36:00.635]        // =>  FALSE
[00:36:00.635]      // skip if-block "protType == 1"
[00:36:00.635]    </control>
[00:36:00.635]    <control if="protType == 2" while="" timeout="0" info="">
[00:36:00.635]      // if-block "protType == 2"
[00:36:00.635]        // =>  TRUE
[00:36:00.635]      <control if="isSWJ" while="" timeout="0" info="">
[00:36:00.635]        // if-block "isSWJ"
[00:36:00.635]          // =>  TRUE
[00:36:00.635]        <control if="hasDormant" while="" timeout="0" info="">
[00:36:00.635]          // if-block "hasDormant"
[00:36:00.640]            // =>  FALSE
[00:36:00.640]          // skip if-block "hasDormant"
[00:36:00.640]        </control>
[00:36:00.640]        <control if="!hasDormant" while="" timeout="0" info="">
[00:36:00.640]          // if-block "!hasDormant"
[00:36:00.640]            // =>  TRUE
[00:36:00.640]          <block atomic="false" info="">
[00:36:00.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:36:00.640]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:00.640]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:36:00.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:36:00.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:36:00.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:00.645]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:36:00.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:36:00.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:36:00.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:00.645]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:36:00.658]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:36:00.658]          </block>
[00:36:00.658]          // end if-block "!hasDormant"
[00:36:00.658]        </control>
[00:36:00.658]        // end if-block "isSWJ"
[00:36:00.658]      </control>
[00:36:00.659]      <control if="!isSWJ" while="" timeout="0" info="">
[00:36:00.659]        // if-block "!isSWJ"
[00:36:00.659]          // =>  FALSE
[00:36:00.659]        // skip if-block "!isSWJ"
[00:36:00.659]      </control>
[00:36:00.659]      <block atomic="false" info="">
[00:36:00.659]        ReadDP(0x0);
[00:36:00.659]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:36:00.659]      </block>
[00:36:00.659]      // end if-block "protType == 2"
[00:36:00.659]    </control>
[00:36:00.659]  </sequence>
[00:36:00.659]  
[00:36:00.665]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:36:00.665]  
[00:36:00.665]  <debugvars>
[00:36:00.665]    // Pre-defined
[00:36:00.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:00.665]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:36:00.665]    __dp=0x00000000
[00:36:00.665]    __ap=0x00000000
[00:36:00.666]    __traceout=0x00000000      (Trace Disabled)
[00:36:00.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:00.666]    __FlashAddr=0x00000000
[00:36:00.666]    __FlashLen=0x00000000
[00:36:00.666]    __FlashArg=0x00000000
[00:36:00.666]    __FlashOp=0x00000000
[00:36:00.666]    __Result=0x00000000
[00:36:00.666]  </debugvars>
[00:36:00.666]  
[00:36:00.666]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:36:00.666]    <block atomic="false" info="">
[00:36:00.666]      __var SW_DP_ABORT       = 0x0;
[00:36:00.666]        // -> [SW_DP_ABORT <= 0x00000000]
[00:36:00.666]      __var DP_CTRL_STAT      = 0x4;
[00:36:00.666]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:36:00.666]      __var DP_SELECT         = 0x8;
[00:36:00.666]        // -> [DP_SELECT <= 0x00000008]
[00:36:00.666]      __var powered_down      = 0;
[00:36:00.666]        // -> [powered_down <= 0x00000000]
[00:36:00.666]      WriteDP(DP_SELECT, 0x00000000);
[00:36:00.670]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:36:00.670]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:36:00.675]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:36:00.675]        // -> [powered_down <= 0x00000001]
[00:36:00.675]    </block>
[00:36:00.675]    <control if="powered_down" while="" timeout="0" info="">
[00:36:00.675]      // if-block "powered_down"
[00:36:00.675]        // =>  TRUE
[00:36:00.675]      <block atomic="false" info="">
[00:36:00.675]        Message(0, "Debug/System power-up request sent");
[00:36:00.675]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:36:00.678]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:36:00.678]      </block>
[00:36:00.678]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:36:00.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:36:00.679]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:36:00.679]        // while-condition  =>  FALSE
[00:36:00.679]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:36:00.679]      </control>
[00:36:00.679]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:36:00.679]        // if-block "(__protocol & 0xFFFF) == 1"
[00:36:00.679]          // =>  FALSE
[00:36:00.679]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:36:00.679]      </control>
[00:36:00.679]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:36:00.679]        // if-block "(__protocol & 0xFFFF) == 2"
[00:36:00.679]          // =>  TRUE
[00:36:00.679]        <block atomic="false" info="">
[00:36:00.679]          Message(0, "executing SWD power up");
[00:36:00.679]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:36:00.679]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:36:00.679]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:36:00.685]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:36:00.685]        </block>
[00:36:00.685]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:36:00.685]      </control>
[00:36:00.685]      // end if-block "powered_down"
[00:36:00.685]    </control>
[00:36:00.685]    <block atomic="false" info="">
[00:36:00.685]      __var DEBUG_PORT_VAL    = 0;
[00:36:00.685]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:36:00.685]      __var ACCESS_POINT_VAL  = 0;
[00:36:00.685]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:36:00.685]      __ap = 1; 
[00:36:00.685]        // -> [__ap <= 0x00000001]
[00:36:00.685]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:36:00.691]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:36:00.691]      __ap = 4;
[00:36:00.691]        // -> [__ap <= 0x00000004]
[00:36:00.691]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:00.696]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:36:00.696]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:36:00.696]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:00.696]    </block>
[00:36:00.696]    <block atomic="false" info="">
[00:36:00.696]      __var nReset = 0x80;
[00:36:00.696]        // -> [nReset <= 0x00000080]
[00:36:00.696]      __var canReadPins = 0;
[00:36:00.696]        // -> [canReadPins <= 0x00000000]
[00:36:00.696]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:36:00.700]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:36:00.700]        // -> [canReadPins <= 0x00000001]
[00:36:00.700]    </block>
[00:36:00.700]    <control if="" while="1" timeout="200" info="">
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.700]      // while-condition  =>  TRUE
[00:36:00.700]      // while "1"  (timeout="200")
[00:36:00.705]      // while-condition  =>  TRUE
[00:36:00.705]      // while "1"  (timeout="200")
[00:36:00.705]      // while-condition  =>  TRUE
[00:36:00.705]      // while "1"  (timeout="200")
[00:36:00.705]      // while-condition  =>  TRUE
[00:36:00.705]      // while "1"  (timeout="200")
[00:36:00.705]      // while-condition  =>  TRUE
[00:36:00.706]      // while "1"  (timeout="200")
[00:36:00.706]      // while-condition  =>  TRUE
[00:36:00.706]      // while "1"  (timeout="200")
[00:36:00.706]      // while-condition  =>  TRUE
[00:36:00.706]      // while "1"  (timeout="200")
[00:36:00.706]      // while-condition  =>  TRUE
[00:36:00.706]      // while "1"  (timeout="200")
[00:36:00.706]      // while-condition  =>  TRUE
[00:36:00.707]      // while "1"  (timeout="200")
[00:36:00.707]      // while  =>  TIMEOUT
[00:36:00.707]      // end while "1"
[00:36:00.707]    </control>
[00:36:00.707]    <control if="canReadPins" while="" timeout="0" info="">
[00:36:00.707]      // if-block "canReadPins"
[00:36:00.707]        // =>  TRUE
[00:36:00.707]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:36:00.707]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:36:00.707]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:36:00.707]        // while-condition  =>  FALSE
[00:36:00.707]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:36:00.707]      </control>
[00:36:00.707]      // end if-block "canReadPins"
[00:36:00.707]    </control>
[00:36:00.707]    <control if="!canReadPins" while="" timeout="0" info="">
[00:36:00.707]      // if-block "!canReadPins"
[00:36:00.707]        // =>  FALSE
[00:36:00.707]      // skip if-block "!canReadPins"
[00:36:00.707]    </control>
[00:36:00.707]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:36:00.707]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:00.707]        // =>  TRUE
[00:36:00.707]      <block atomic="false" info="">
[00:36:00.707]        WriteAP(0x00, 0x190008);
[00:36:00.716]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:00.716]        WriteAP(0xF0, 0x01);
[00:36:00.725]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:00.725]      </block>
[00:36:00.725]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:00.725]    </control>
[00:36:00.725]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:36:00.725]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:00.725]        // =>  FALSE
[00:36:00.725]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:00.725]    </control>
[00:36:00.725]    <block atomic="false" info="">
[00:36:00.725]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:00.728]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:36:00.728]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:36:00.728]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:00.728]      __ap = 0; //lets make sure we reset the access point selection
[00:36:00.728]        // -> [__ap <= 0x00000000]
[00:36:00.728]    </block>
[00:36:00.728]  </sequence>
[00:36:00.728]  
[00:36:00.765]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:36:00.765]  
[00:36:00.765]  <debugvars>
[00:36:00.765]    // Pre-defined
[00:36:00.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:00.765]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:36:00.765]    __dp=0x00000000
[00:36:00.765]    __ap=0x00000000
[00:36:00.765]    __traceout=0x00000000      (Trace Disabled)
[00:36:00.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:00.765]    __FlashAddr=0x00000000
[00:36:00.765]    __FlashLen=0x00000000
[00:36:00.765]    __FlashArg=0x00000000
[00:36:00.765]    __FlashOp=0x00000000
[00:36:00.765]    __Result=0x00000000
[00:36:00.765]  </debugvars>
[00:36:00.765]  
[00:36:00.768]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:36:00.768]    <block atomic="false" info="">
[00:36:00.768]      __var deviceID = 0;
[00:36:00.768]        // -> [deviceID <= 0x00000000]
[00:36:00.768]      __var version = 0;
[00:36:00.768]        // -> [version <= 0x00000000]
[00:36:00.768]      __var partNum = 0;
[00:36:00.768]        // -> [partNum <= 0x00000000]
[00:36:00.768]      __var manuf = 0;
[00:36:00.768]        // -> [manuf <= 0x00000000]
[00:36:00.768]      __var isMSPM0G1X0X_G3X0X = 0;
[00:36:00.768]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:36:00.768]      __var isProduction = 0;
[00:36:00.769]        // -> [isProduction <= 0x00000000]
[00:36:00.769]      __var continueId = 0;
[00:36:00.769]        // -> [continueId <= 0x00000000]
[00:36:00.769]      deviceID =   Read32(0x41C40004);
[00:36:00.775]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:36:00.775]        // -> [deviceID <= 0x2BB8802F]
[00:36:00.775]      version = deviceID >> 28;
[00:36:00.775]        // -> [version <= 0x00000002]
[00:36:00.775]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:36:00.775]        // -> [partNum <= 0x0000BB88]
[00:36:00.775]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:36:00.775]        // -> [manuf <= 0x00000017]
[00:36:00.775]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:36:00.775]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:36:00.775]      isProduction = (version > 0);
[00:36:00.775]        // -> [isProduction <= 0x00000001]
[00:36:00.775]    </block>
[00:36:00.775]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:36:00.775]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:36:00.775]        // =>  FALSE
[00:36:00.775]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:36:00.775]    </control>
[00:36:00.775]    <control if="continueId == 4" while="" timeout="0" info="">
[00:36:00.775]      // if-block "continueId == 4"
[00:36:00.775]        // =>  FALSE
[00:36:00.775]      // skip if-block "continueId == 4"
[00:36:00.775]    </control>
[00:36:00.775]    <control if="!isProduction" while="" timeout="0" info="">
[00:36:00.775]      // if-block "!isProduction"
[00:36:00.775]        // =>  FALSE
[00:36:00.775]      // skip if-block "!isProduction"
[00:36:00.775]    </control>
[00:36:00.779]  </sequence>
[00:36:00.779]  
[00:38:03.167]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:38:03.167]  
[00:38:03.179]  <debugvars>
[00:38:03.179]    // Pre-defined
[00:38:03.179]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:03.179]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:03.179]    __dp=0x00000000
[00:38:03.179]    __ap=0x00000000
[00:38:03.179]    __traceout=0x00000000      (Trace Disabled)
[00:38:03.179]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:03.179]    __FlashAddr=0x00000000
[00:38:03.179]    __FlashLen=0x00000000
[00:38:03.179]    __FlashArg=0x00000000
[00:38:03.179]    __FlashOp=0x00000000
[00:38:03.179]    __Result=0x00000000
[00:38:03.179]  </debugvars>
[00:38:03.179]  
[00:38:03.179]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:38:03.181]    <block atomic="false" info="">
[00:38:03.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:38:03.181]        // -> [isSWJ <= 0x00000001]
[00:38:03.181]      __var hasDormant = __protocol & 0x00020000;
[00:38:03.181]        // -> [hasDormant <= 0x00000000]
[00:38:03.181]      __var protType   = __protocol & 0x0000FFFF;
[00:38:03.181]        // -> [protType <= 0x00000002]
[00:38:03.181]    </block>
[00:38:03.181]    <control if="protType == 1" while="" timeout="0" info="">
[00:38:03.181]      // if-block "protType == 1"
[00:38:03.181]        // =>  FALSE
[00:38:03.181]      // skip if-block "protType == 1"
[00:38:03.181]    </control>
[00:38:03.181]    <control if="protType == 2" while="" timeout="0" info="">
[00:38:03.181]      // if-block "protType == 2"
[00:38:03.181]        // =>  TRUE
[00:38:03.181]      <control if="isSWJ" while="" timeout="0" info="">
[00:38:03.181]        // if-block "isSWJ"
[00:38:03.181]          // =>  TRUE
[00:38:03.181]        <control if="hasDormant" while="" timeout="0" info="">
[00:38:03.181]          // if-block "hasDormant"
[00:38:03.181]            // =>  FALSE
[00:38:03.181]          // skip if-block "hasDormant"
[00:38:03.181]        </control>
[00:38:03.181]        <control if="!hasDormant" while="" timeout="0" info="">
[00:38:03.181]          // if-block "!hasDormant"
[00:38:03.181]            // =>  TRUE
[00:38:03.181]          <block atomic="false" info="">
[00:38:03.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:38:03.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:03.186]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:38:03.187]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:38:03.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:38:03.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:03.189]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:38:03.190]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:38:03.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:38:03.192]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:03.192]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:38:03.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:38:03.194]          </block>
[00:38:03.194]          // end if-block "!hasDormant"
[00:38:03.194]        </control>
[00:38:03.194]        // end if-block "isSWJ"
[00:38:03.194]      </control>
[00:38:03.195]      <control if="!isSWJ" while="" timeout="0" info="">
[00:38:03.195]        // if-block "!isSWJ"
[00:38:03.195]          // =>  FALSE
[00:38:03.195]        // skip if-block "!isSWJ"
[00:38:03.195]      </control>
[00:38:03.195]      <block atomic="false" info="">
[00:38:03.195]        ReadDP(0x0);
[00:38:03.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:38:03.197]      </block>
[00:38:03.197]      // end if-block "protType == 2"
[00:38:03.197]    </control>
[00:38:03.197]  </sequence>
[00:38:03.197]  
[00:38:03.200]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:38:03.200]  
[00:38:03.200]  <debugvars>
[00:38:03.200]    // Pre-defined
[00:38:03.201]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:03.201]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:03.201]    __dp=0x00000000
[00:38:03.201]    __ap=0x00000000
[00:38:03.202]    __traceout=0x00000000      (Trace Disabled)
[00:38:03.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:03.202]    __FlashAddr=0x00000000
[00:38:03.202]    __FlashLen=0x00000000
[00:38:03.202]    __FlashArg=0x00000000
[00:38:03.202]    __FlashOp=0x00000000
[00:38:03.203]    __Result=0x00000000
[00:38:03.203]  </debugvars>
[00:38:03.203]  
[00:38:03.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:38:03.203]    <block atomic="false" info="">
[00:38:03.203]      __var SW_DP_ABORT       = 0x0;
[00:38:03.203]        // -> [SW_DP_ABORT <= 0x00000000]
[00:38:03.203]      __var DP_CTRL_STAT      = 0x4;
[00:38:03.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:38:03.203]      __var DP_SELECT         = 0x8;
[00:38:03.204]        // -> [DP_SELECT <= 0x00000008]
[00:38:03.204]      __var powered_down      = 0;
[00:38:03.204]        // -> [powered_down <= 0x00000000]
[00:38:03.204]      WriteDP(DP_SELECT, 0x00000000);
[00:38:03.206]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:38:03.206]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:38:03.208]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:38:03.208]        // -> [powered_down <= 0x00000001]
[00:38:03.208]    </block>
[00:38:03.208]    <control if="powered_down" while="" timeout="0" info="">
[00:38:03.208]      // if-block "powered_down"
[00:38:03.208]        // =>  TRUE
[00:38:03.208]      <block atomic="false" info="">
[00:38:03.209]        Message(0, "Debug/System power-up request sent");
[00:38:03.210]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:38:03.212]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:38:03.212]      </block>
[00:38:03.212]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:38:03.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:38:03.213]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:38:03.214]        // while-condition  =>  FALSE
[00:38:03.214]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:38:03.214]      </control>
[00:38:03.214]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:38:03.214]        // if-block "(__protocol & 0xFFFF) == 1"
[00:38:03.214]          // =>  FALSE
[00:38:03.214]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:38:03.214]      </control>
[00:38:03.215]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:38:03.215]        // if-block "(__protocol & 0xFFFF) == 2"
[00:38:03.215]          // =>  TRUE
[00:38:03.215]        <block atomic="false" info="">
[00:38:03.215]          Message(0, "executing SWD power up");
[00:38:03.215]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:38:03.217]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:38:03.217]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:38:03.220]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:38:03.220]        </block>
[00:38:03.220]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:38:03.220]      </control>
[00:38:03.220]      // end if-block "powered_down"
[00:38:03.220]    </control>
[00:38:03.220]    <block atomic="false" info="">
[00:38:03.220]      __var DEBUG_PORT_VAL    = 0;
[00:38:03.220]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:38:03.221]      __var ACCESS_POINT_VAL  = 0;
[00:38:03.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:38:03.221]      __ap = 1; 
[00:38:03.221]        // -> [__ap <= 0x00000001]
[00:38:03.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:38:03.224]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:38:03.225]      __ap = 4;
[00:38:03.225]        // -> [__ap <= 0x00000004]
[00:38:03.225]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:03.226]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:38:03.226]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:38:03.226]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:03.229]    </block>
[00:38:03.231]    <block atomic="false" info="">
[00:38:03.231]      __var nReset = 0x80;
[00:38:03.231]        // -> [nReset <= 0x00000080]
[00:38:03.231]      __var canReadPins = 0;
[00:38:03.231]        // -> [canReadPins <= 0x00000000]
[00:38:03.231]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:38:03.232]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:38:03.232]        // -> [canReadPins <= 0x00000001]
[00:38:03.232]    </block>
[00:38:03.232]    <control if="" while="1" timeout="200" info="">
[00:38:03.232]      // while "1"  (timeout="200")
[00:38:03.232]      // while-condition  =>  TRUE
[00:38:03.232]      // while "1"  (timeout="200")
[00:38:03.232]      // while-condition  =>  TRUE
[00:38:03.232]      // while "1"  (timeout="200")
[00:38:03.232]      // while-condition  =>  TRUE
[00:38:03.232]      // while "1"  (timeout="200")
[00:38:03.232]      // while-condition  =>  TRUE
[00:38:03.232]      // while "1"  (timeout="200")
[00:38:03.232]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.234]      // while "1"  (timeout="200")
[00:38:03.234]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.236]      // while-condition  =>  TRUE
[00:38:03.236]      // while "1"  (timeout="200")
[00:38:03.238]      // while-condition  =>  TRUE
[00:38:03.238]      // while "1"  (timeout="200")
[00:38:03.238]      // while  =>  TIMEOUT
[00:38:03.238]      // end while "1"
[00:38:03.238]    </control>
[00:38:03.238]    <control if="canReadPins" while="" timeout="0" info="">
[00:38:03.238]      // if-block "canReadPins"
[00:38:03.238]        // =>  TRUE
[00:38:03.238]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:38:03.238]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:38:03.242]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:38:03.242]        // while-condition  =>  FALSE
[00:38:03.242]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:38:03.242]      </control>
[00:38:03.242]      // end if-block "canReadPins"
[00:38:03.242]    </control>
[00:38:03.242]    <control if="!canReadPins" while="" timeout="0" info="">
[00:38:03.242]      // if-block "!canReadPins"
[00:38:03.242]        // =>  FALSE
[00:38:03.242]      // skip if-block "!canReadPins"
[00:38:03.242]    </control>
[00:38:03.242]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:38:03.242]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:03.245]        // =>  TRUE
[00:38:03.245]      <block atomic="false" info="">
[00:38:03.245]        WriteAP(0x00, 0x190008);
[00:38:03.245]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:03.245]        WriteAP(0xF0, 0x01);
[00:38:03.250]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:03.250]      </block>
[00:38:03.250]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:03.250]    </control>
[00:38:03.250]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:38:03.250]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:03.250]        // =>  FALSE
[00:38:03.250]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:03.250]    </control>
[00:38:03.250]    <block atomic="false" info="">
[00:38:03.250]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:03.255]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:38:03.255]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:38:03.255]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:03.255]      __ap = 0; //lets make sure we reset the access point selection
[00:38:03.255]        // -> [__ap <= 0x00000000]
[00:38:03.255]    </block>
[00:38:03.255]  </sequence>
[00:38:03.255]  
[00:38:03.282]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:38:03.282]  
[00:38:03.282]  <debugvars>
[00:38:03.282]    // Pre-defined
[00:38:03.282]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:03.282]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:03.282]    __dp=0x00000000
[00:38:03.282]    __ap=0x00000000
[00:38:03.282]    __traceout=0x00000000      (Trace Disabled)
[00:38:03.282]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:03.282]    __FlashAddr=0x00000000
[00:38:03.282]    __FlashLen=0x00000000
[00:38:03.282]    __FlashArg=0x00000000
[00:38:03.282]    __FlashOp=0x00000000
[00:38:03.282]    __Result=0x00000000
[00:38:03.282]  </debugvars>
[00:38:03.282]  
[00:38:03.282]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:38:03.282]    <block atomic="false" info="">
[00:38:03.282]      __var deviceID = 0;
[00:38:03.282]        // -> [deviceID <= 0x00000000]
[00:38:03.282]      __var version = 0;
[00:38:03.282]        // -> [version <= 0x00000000]
[00:38:03.282]      __var partNum = 0;
[00:38:03.282]        // -> [partNum <= 0x00000000]
[00:38:03.282]      __var manuf = 0;
[00:38:03.282]        // -> [manuf <= 0x00000000]
[00:38:03.282]      __var isMSPM0G1X0X_G3X0X = 0;
[00:38:03.282]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:38:03.282]      __var isProduction = 0;
[00:38:03.282]        // -> [isProduction <= 0x00000000]
[00:38:03.282]      __var continueId = 0;
[00:38:03.282]        // -> [continueId <= 0x00000000]
[00:38:03.282]      deviceID =   Read32(0x41C40004);
[00:38:03.292]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:38:03.292]        // -> [deviceID <= 0x2BB8802F]
[00:38:03.293]      version = deviceID >> 28;
[00:38:03.293]        // -> [version <= 0x00000002]
[00:38:03.293]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:38:03.293]        // -> [partNum <= 0x0000BB88]
[00:38:03.293]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:38:03.293]        // -> [manuf <= 0x00000017]
[00:38:03.293]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:38:03.293]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:38:03.293]      isProduction = (version > 0);
[00:38:03.293]        // -> [isProduction <= 0x00000001]
[00:38:03.293]    </block>
[00:38:03.293]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:38:03.293]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:38:03.293]        // =>  FALSE
[00:38:03.293]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:38:03.293]    </control>
[00:38:03.293]    <control if="continueId == 4" while="" timeout="0" info="">
[00:38:03.293]      // if-block "continueId == 4"
[00:38:03.293]        // =>  FALSE
[00:38:03.293]      // skip if-block "continueId == 4"
[00:38:03.295]    </control>
[00:38:03.295]    <control if="!isProduction" while="" timeout="0" info="">
[00:38:03.295]      // if-block "!isProduction"
[00:38:03.295]        // =>  FALSE
[00:38:03.295]      // skip if-block "!isProduction"
[00:38:03.295]    </control>
[00:38:03.295]  </sequence>
[00:38:03.295]  
[00:39:35.143]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:39:35.143]  
[00:39:35.153]  <debugvars>
[00:39:35.153]    // Pre-defined
[00:39:35.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:35.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:35.153]    __dp=0x00000000
[00:39:35.153]    __ap=0x00000000
[00:39:35.153]    __traceout=0x00000000      (Trace Disabled)
[00:39:35.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:35.153]    __FlashAddr=0x00000000
[00:39:35.153]    __FlashLen=0x00000000
[00:39:35.153]    __FlashArg=0x00000000
[00:39:35.153]    __FlashOp=0x00000000
[00:39:35.153]    __Result=0x00000000
[00:39:35.153]  </debugvars>
[00:39:35.155]  
[00:39:35.155]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:39:35.155]    <block atomic="false" info="">
[00:39:35.155]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:39:35.155]        // -> [isSWJ <= 0x00000001]
[00:39:35.155]      __var hasDormant = __protocol & 0x00020000;
[00:39:35.155]        // -> [hasDormant <= 0x00000000]
[00:39:35.155]      __var protType   = __protocol & 0x0000FFFF;
[00:39:35.155]        // -> [protType <= 0x00000002]
[00:39:35.156]    </block>
[00:39:35.156]    <control if="protType == 1" while="" timeout="0" info="">
[00:39:35.156]      // if-block "protType == 1"
[00:39:35.156]        // =>  FALSE
[00:39:35.156]      // skip if-block "protType == 1"
[00:39:35.156]    </control>
[00:39:35.156]    <control if="protType == 2" while="" timeout="0" info="">
[00:39:35.156]      // if-block "protType == 2"
[00:39:35.156]        // =>  TRUE
[00:39:35.156]      <control if="isSWJ" while="" timeout="0" info="">
[00:39:35.156]        // if-block "isSWJ"
[00:39:35.156]          // =>  TRUE
[00:39:35.156]        <control if="hasDormant" while="" timeout="0" info="">
[00:39:35.158]          // if-block "hasDormant"
[00:39:35.158]            // =>  FALSE
[00:39:35.158]          // skip if-block "hasDormant"
[00:39:35.158]        </control>
[00:39:35.158]        <control if="!hasDormant" while="" timeout="0" info="">
[00:39:35.158]          // if-block "!hasDormant"
[00:39:35.158]            // =>  TRUE
[00:39:35.158]          <block atomic="false" info="">
[00:39:35.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:39:35.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:35.158]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:39:35.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:39:35.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:39:35.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:35.164]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:39:35.164]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:39:35.164]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:39:35.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:35.165]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:39:35.169]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:39:35.169]          </block>
[00:39:35.169]          // end if-block "!hasDormant"
[00:39:35.169]        </control>
[00:39:35.169]        // end if-block "isSWJ"
[00:39:35.169]      </control>
[00:39:35.169]      <control if="!isSWJ" while="" timeout="0" info="">
[00:39:35.169]        // if-block "!isSWJ"
[00:39:35.169]          // =>  FALSE
[00:39:35.169]        // skip if-block "!isSWJ"
[00:39:35.169]      </control>
[00:39:35.169]      <block atomic="false" info="">
[00:39:35.169]        ReadDP(0x0);
[00:39:35.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:39:35.169]      </block>
[00:39:35.169]      // end if-block "protType == 2"
[00:39:35.169]    </control>
[00:39:35.169]  </sequence>
[00:39:35.169]  
[00:39:35.173]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:39:35.173]  
[00:39:35.173]  <debugvars>
[00:39:35.173]    // Pre-defined
[00:39:35.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:35.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:35.173]    __dp=0x00000000
[00:39:35.173]    __ap=0x00000000
[00:39:35.173]    __traceout=0x00000000      (Trace Disabled)
[00:39:35.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:35.173]    __FlashAddr=0x00000000
[00:39:35.173]    __FlashLen=0x00000000
[00:39:35.173]    __FlashArg=0x00000000
[00:39:35.173]    __FlashOp=0x00000000
[00:39:35.173]    __Result=0x00000000
[00:39:35.173]  </debugvars>
[00:39:35.173]  
[00:39:35.173]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:39:35.173]    <block atomic="false" info="">
[00:39:35.173]      __var SW_DP_ABORT       = 0x0;
[00:39:35.173]        // -> [SW_DP_ABORT <= 0x00000000]
[00:39:35.173]      __var DP_CTRL_STAT      = 0x4;
[00:39:35.173]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:39:35.173]      __var DP_SELECT         = 0x8;
[00:39:35.173]        // -> [DP_SELECT <= 0x00000008]
[00:39:35.173]      __var powered_down      = 0;
[00:39:35.173]        // -> [powered_down <= 0x00000000]
[00:39:35.173]      WriteDP(DP_SELECT, 0x00000000);
[00:39:35.173]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:39:35.173]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:39:35.184]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:39:35.184]        // -> [powered_down <= 0x00000001]
[00:39:35.184]    </block>
[00:39:35.184]    <control if="powered_down" while="" timeout="0" info="">
[00:39:35.184]      // if-block "powered_down"
[00:39:35.184]        // =>  TRUE
[00:39:35.184]      <block atomic="false" info="">
[00:39:35.184]        Message(0, "Debug/System power-up request sent");
[00:39:35.184]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:39:35.187]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:39:35.187]      </block>
[00:39:35.187]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:39:35.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:39:35.190]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:39:35.190]        // while-condition  =>  FALSE
[00:39:35.190]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:39:35.190]      </control>
[00:39:35.190]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:39:35.190]        // if-block "(__protocol & 0xFFFF) == 1"
[00:39:35.190]          // =>  FALSE
[00:39:35.190]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:39:35.190]      </control>
[00:39:35.190]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:39:35.190]        // if-block "(__protocol & 0xFFFF) == 2"
[00:39:35.190]          // =>  TRUE
[00:39:35.190]        <block atomic="false" info="">
[00:39:35.190]          Message(0, "executing SWD power up");
[00:39:35.190]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:39:35.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:39:35.197]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:39:35.197]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:39:35.197]        </block>
[00:39:35.197]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:39:35.197]      </control>
[00:39:35.197]      // end if-block "powered_down"
[00:39:35.197]    </control>
[00:39:35.197]    <block atomic="false" info="">
[00:39:35.197]      __var DEBUG_PORT_VAL    = 0;
[00:39:35.197]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:39:35.203]      __var ACCESS_POINT_VAL  = 0;
[00:39:35.203]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:39:35.203]      __ap = 1; 
[00:39:35.204]        // -> [__ap <= 0x00000001]
[00:39:35.204]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:39:35.204]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:39:35.204]      __ap = 4;
[00:39:35.204]        // -> [__ap <= 0x00000004]
[00:39:35.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:35.204]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:39:35.204]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:39:35.204]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:35.204]    </block>
[00:39:35.204]    <block atomic="false" info="">
[00:39:35.204]      __var nReset = 0x80;
[00:39:35.204]        // -> [nReset <= 0x00000080]
[00:39:35.204]      __var canReadPins = 0;
[00:39:35.204]        // -> [canReadPins <= 0x00000000]
[00:39:35.204]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:39:35.213]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:39:35.213]        // -> [canReadPins <= 0x00000001]
[00:39:35.213]    </block>
[00:39:35.213]    <control if="" while="1" timeout="200" info="">
[00:39:35.213]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.215]      // while-condition  =>  TRUE
[00:39:35.215]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.221]      // while-condition  =>  TRUE
[00:39:35.221]      // while "1"  (timeout="200")
[00:39:35.224]      // while-condition  =>  TRUE
[00:39:35.224]      // while "1"  (timeout="200")
[00:39:35.224]      // while  =>  TIMEOUT
[00:39:35.224]      // end while "1"
[00:39:35.224]    </control>
[00:39:35.224]    <control if="canReadPins" while="" timeout="0" info="">
[00:39:35.224]      // if-block "canReadPins"
[00:39:35.224]        // =>  TRUE
[00:39:35.224]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:39:35.224]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:39:35.233]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:39:35.233]        // while-condition  =>  FALSE
[00:39:35.233]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:39:35.233]      </control>
[00:39:35.233]      // end if-block "canReadPins"
[00:39:35.233]    </control>
[00:39:35.233]    <control if="!canReadPins" while="" timeout="0" info="">
[00:39:35.233]      // if-block "!canReadPins"
[00:39:35.233]        // =>  FALSE
[00:39:35.233]      // skip if-block "!canReadPins"
[00:39:35.235]    </control>
[00:39:35.235]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:39:35.235]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:35.235]        // =>  TRUE
[00:39:35.235]      <block atomic="false" info="">
[00:39:35.235]        WriteAP(0x00, 0x190008);
[00:39:35.235]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:35.235]        WriteAP(0xF0, 0x01);
[00:39:35.235]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:35.235]      </block>
[00:39:35.235]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:35.235]    </control>
[00:39:35.235]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:39:35.235]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:35.235]        // =>  FALSE
[00:39:35.235]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:35.235]    </control>
[00:39:35.235]    <block atomic="false" info="">
[00:39:35.235]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:35.244]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:39:35.244]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:39:35.244]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:35.244]      __ap = 0; //lets make sure we reset the access point selection
[00:39:35.244]        // -> [__ap <= 0x00000000]
[00:39:35.244]    </block>
[00:39:35.244]  </sequence>
[00:39:35.244]  
[00:39:35.263]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:39:35.263]  
[00:39:35.263]  <debugvars>
[00:39:35.263]    // Pre-defined
[00:39:35.263]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:35.263]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:35.263]    __dp=0x00000000
[00:39:35.263]    __ap=0x00000000
[00:39:35.263]    __traceout=0x00000000      (Trace Disabled)
[00:39:35.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:35.263]    __FlashAddr=0x00000000
[00:39:35.263]    __FlashLen=0x00000000
[00:39:35.263]    __FlashArg=0x00000000
[00:39:35.263]    __FlashOp=0x00000000
[00:39:35.263]    __Result=0x00000000
[00:39:35.263]  </debugvars>
[00:39:35.263]  
[00:39:35.263]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:39:35.263]    <block atomic="false" info="">
[00:39:35.263]      __var deviceID = 0;
[00:39:35.263]        // -> [deviceID <= 0x00000000]
[00:39:35.263]      __var version = 0;
[00:39:35.263]        // -> [version <= 0x00000000]
[00:39:35.263]      __var partNum = 0;
[00:39:35.263]        // -> [partNum <= 0x00000000]
[00:39:35.263]      __var manuf = 0;
[00:39:35.263]        // -> [manuf <= 0x00000000]
[00:39:35.263]      __var isMSPM0G1X0X_G3X0X = 0;
[00:39:35.263]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:39:35.263]      __var isProduction = 0;
[00:39:35.263]        // -> [isProduction <= 0x00000000]
[00:39:35.263]      __var continueId = 0;
[00:39:35.263]        // -> [continueId <= 0x00000000]
[00:39:35.263]      deviceID =   Read32(0x41C40004);
[00:39:35.273]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:39:35.273]        // -> [deviceID <= 0x2BB8802F]
[00:39:35.273]      version = deviceID >> 28;
[00:39:35.273]        // -> [version <= 0x00000002]
[00:39:35.273]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:39:35.273]        // -> [partNum <= 0x0000BB88]
[00:39:35.273]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:39:35.273]        // -> [manuf <= 0x00000017]
[00:39:35.273]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:39:35.273]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:39:35.273]      isProduction = (version > 0);
[00:39:35.273]        // -> [isProduction <= 0x00000001]
[00:39:35.273]    </block>
[00:39:35.273]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:39:35.273]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:39:35.273]        // =>  FALSE
[00:39:35.273]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:39:35.273]    </control>
[00:39:35.273]    <control if="continueId == 4" while="" timeout="0" info="">
[00:39:35.273]      // if-block "continueId == 4"
[00:39:35.273]        // =>  FALSE
[00:39:35.273]      // skip if-block "continueId == 4"
[00:39:35.273]    </control>
[00:39:35.273]    <control if="!isProduction" while="" timeout="0" info="">
[00:39:35.273]      // if-block "!isProduction"
[00:39:35.273]        // =>  FALSE
[00:39:35.273]      // skip if-block "!isProduction"
[00:39:35.273]    </control>
[00:39:35.273]  </sequence>
[00:39:35.273]  
[00:39:59.804]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:39:59.804]  
[00:39:59.815]  <debugvars>
[00:39:59.815]    // Pre-defined
[00:39:59.815]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:59.815]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:59.815]    __dp=0x00000000
[00:39:59.815]    __ap=0x00000000
[00:39:59.815]    __traceout=0x00000000      (Trace Disabled)
[00:39:59.815]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:59.815]    __FlashAddr=0x00000000
[00:39:59.815]    __FlashLen=0x00000000
[00:39:59.815]    __FlashArg=0x00000000
[00:39:59.815]    __FlashOp=0x00000000
[00:39:59.815]    __Result=0x00000000
[00:39:59.815]  </debugvars>
[00:39:59.815]  
[00:39:59.815]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:39:59.815]    <block atomic="false" info="">
[00:39:59.815]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:39:59.815]        // -> [isSWJ <= 0x00000001]
[00:39:59.815]      __var hasDormant = __protocol & 0x00020000;
[00:39:59.815]        // -> [hasDormant <= 0x00000000]
[00:39:59.815]      __var protType   = __protocol & 0x0000FFFF;
[00:39:59.815]        // -> [protType <= 0x00000002]
[00:39:59.815]    </block>
[00:39:59.815]    <control if="protType == 1" while="" timeout="0" info="">
[00:39:59.815]      // if-block "protType == 1"
[00:39:59.815]        // =>  FALSE
[00:39:59.815]      // skip if-block "protType == 1"
[00:39:59.815]    </control>
[00:39:59.815]    <control if="protType == 2" while="" timeout="0" info="">
[00:39:59.815]      // if-block "protType == 2"
[00:39:59.815]        // =>  TRUE
[00:39:59.815]      <control if="isSWJ" while="" timeout="0" info="">
[00:39:59.815]        // if-block "isSWJ"
[00:39:59.815]          // =>  TRUE
[00:39:59.815]        <control if="hasDormant" while="" timeout="0" info="">
[00:39:59.815]          // if-block "hasDormant"
[00:39:59.815]            // =>  FALSE
[00:39:59.815]          // skip if-block "hasDormant"
[00:39:59.815]        </control>
[00:39:59.815]        <control if="!hasDormant" while="" timeout="0" info="">
[00:39:59.815]          // if-block "!hasDormant"
[00:39:59.815]            // =>  TRUE
[00:39:59.815]          <block atomic="false" info="">
[00:39:59.815]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:39:59.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:59.821]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:39:59.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:39:59.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:39:59.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:59.823]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:39:59.823]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:39:59.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:39:59.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:59.823]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:39:59.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:39:59.831]          </block>
[00:39:59.831]          // end if-block "!hasDormant"
[00:39:59.831]        </control>
[00:39:59.831]        // end if-block "isSWJ"
[00:39:59.831]      </control>
[00:39:59.831]      <control if="!isSWJ" while="" timeout="0" info="">
[00:39:59.831]        // if-block "!isSWJ"
[00:39:59.833]          // =>  FALSE
[00:39:59.833]        // skip if-block "!isSWJ"
[00:39:59.833]      </control>
[00:39:59.833]      <block atomic="false" info="">
[00:39:59.833]        ReadDP(0x0);
[00:39:59.833]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:39:59.833]      </block>
[00:39:59.833]      // end if-block "protType == 2"
[00:39:59.833]    </control>
[00:39:59.833]  </sequence>
[00:39:59.833]  
[00:39:59.841]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:39:59.841]  
[00:39:59.843]  <debugvars>
[00:39:59.843]    // Pre-defined
[00:39:59.843]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:59.843]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:59.843]    __dp=0x00000000
[00:39:59.843]    __ap=0x00000000
[00:39:59.843]    __traceout=0x00000000      (Trace Disabled)
[00:39:59.843]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:59.843]    __FlashAddr=0x00000000
[00:39:59.843]    __FlashLen=0x00000000
[00:39:59.843]    __FlashArg=0x00000000
[00:39:59.843]    __FlashOp=0x00000000
[00:39:59.843]    __Result=0x00000000
[00:39:59.843]  </debugvars>
[00:39:59.843]  
[00:39:59.843]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:39:59.843]    <block atomic="false" info="">
[00:39:59.843]      __var SW_DP_ABORT       = 0x0;
[00:39:59.843]        // -> [SW_DP_ABORT <= 0x00000000]
[00:39:59.843]      __var DP_CTRL_STAT      = 0x4;
[00:39:59.843]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:39:59.843]      __var DP_SELECT         = 0x8;
[00:39:59.843]        // -> [DP_SELECT <= 0x00000008]
[00:39:59.843]      __var powered_down      = 0;
[00:39:59.843]        // -> [powered_down <= 0x00000000]
[00:39:59.843]      WriteDP(DP_SELECT, 0x00000000);
[00:39:59.843]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:39:59.843]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:39:59.843]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:39:59.851]        // -> [powered_down <= 0x00000001]
[00:39:59.851]    </block>
[00:39:59.851]    <control if="powered_down" while="" timeout="0" info="">
[00:39:59.851]      // if-block "powered_down"
[00:39:59.851]        // =>  TRUE
[00:39:59.851]      <block atomic="false" info="">
[00:39:59.851]        Message(0, "Debug/System power-up request sent");
[00:39:59.851]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:39:59.854]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:39:59.854]      </block>
[00:39:59.854]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:39:59.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:39:59.858]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:39:59.858]        // while-condition  =>  FALSE
[00:39:59.858]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:39:59.858]      </control>
[00:39:59.858]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:39:59.858]        // if-block "(__protocol & 0xFFFF) == 1"
[00:39:59.858]          // =>  FALSE
[00:39:59.858]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:39:59.858]      </control>
[00:39:59.858]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:39:59.858]        // if-block "(__protocol & 0xFFFF) == 2"
[00:39:59.858]          // =>  TRUE
[00:39:59.858]        <block atomic="false" info="">
[00:39:59.858]          Message(0, "executing SWD power up");
[00:39:59.858]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:39:59.861]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:39:59.861]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:39:59.864]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:39:59.864]        </block>
[00:39:59.864]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:39:59.864]      </control>
[00:39:59.864]      // end if-block "powered_down"
[00:39:59.864]    </control>
[00:39:59.864]    <block atomic="false" info="">
[00:39:59.864]      __var DEBUG_PORT_VAL    = 0;
[00:39:59.864]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:39:59.864]      __var ACCESS_POINT_VAL  = 0;
[00:39:59.864]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:39:59.864]      __ap = 1; 
[00:39:59.864]        // -> [__ap <= 0x00000001]
[00:39:59.864]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:39:59.864]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:39:59.864]      __ap = 4;
[00:39:59.864]        // -> [__ap <= 0x00000004]
[00:39:59.864]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:59.871]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:39:59.871]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:39:59.871]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:59.871]    </block>
[00:39:59.871]    <block atomic="false" info="">
[00:39:59.871]      __var nReset = 0x80;
[00:39:59.874]        // -> [nReset <= 0x00000080]
[00:39:59.874]      __var canReadPins = 0;
[00:39:59.874]        // -> [canReadPins <= 0x00000000]
[00:39:59.874]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:39:59.874]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:39:59.874]        // -> [canReadPins <= 0x00000001]
[00:39:59.874]    </block>
[00:39:59.874]    <control if="" while="1" timeout="200" info="">
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.874]      // while "1"  (timeout="200")
[00:39:59.874]      // while-condition  =>  TRUE
[00:39:59.881]      // while "1"  (timeout="200")
[00:39:59.881]      // while  =>  TIMEOUT
[00:39:59.881]      // end while "1"
[00:39:59.881]    </control>
[00:39:59.881]    <control if="canReadPins" while="" timeout="0" info="">
[00:39:59.881]      // if-block "canReadPins"
[00:39:59.881]        // =>  TRUE
[00:39:59.881]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:39:59.881]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:39:59.881]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:39:59.881]        // while-condition  =>  FALSE
[00:39:59.881]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:39:59.881]      </control>
[00:39:59.881]      // end if-block "canReadPins"
[00:39:59.881]    </control>
[00:39:59.881]    <control if="!canReadPins" while="" timeout="0" info="">
[00:39:59.881]      // if-block "!canReadPins"
[00:39:59.881]        // =>  FALSE
[00:39:59.884]      // skip if-block "!canReadPins"
[00:39:59.884]    </control>
[00:39:59.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:39:59.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:59.884]        // =>  TRUE
[00:39:59.884]      <block atomic="false" info="">
[00:39:59.884]        WriteAP(0x00, 0x190008);
[00:39:59.884]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:59.884]        WriteAP(0xF0, 0x01);
[00:39:59.891]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:59.891]      </block>
[00:39:59.891]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:59.891]    </control>
[00:39:59.891]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:39:59.891]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:59.891]        // =>  FALSE
[00:39:59.891]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:59.891]    </control>
[00:39:59.891]    <block atomic="false" info="">
[00:39:59.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:59.901]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:39:59.901]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:39:59.901]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:59.901]      __ap = 0; //lets make sure we reset the access point selection
[00:39:59.901]        // -> [__ap <= 0x00000000]
[00:39:59.901]    </block>
[00:39:59.901]  </sequence>
[00:39:59.901]  
[00:39:59.925]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:39:59.925]  
[00:39:59.925]  <debugvars>
[00:39:59.925]    // Pre-defined
[00:39:59.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:59.925]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:59.925]    __dp=0x00000000
[00:39:59.925]    __ap=0x00000000
[00:39:59.925]    __traceout=0x00000000      (Trace Disabled)
[00:39:59.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:59.925]    __FlashAddr=0x00000000
[00:39:59.925]    __FlashLen=0x00000000
[00:39:59.925]    __FlashArg=0x00000000
[00:39:59.925]    __FlashOp=0x00000000
[00:39:59.925]    __Result=0x00000000
[00:39:59.925]  </debugvars>
[00:39:59.925]  
[00:39:59.925]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:39:59.925]    <block atomic="false" info="">
[00:39:59.925]      __var deviceID = 0;
[00:39:59.925]        // -> [deviceID <= 0x00000000]
[00:39:59.925]      __var version = 0;
[00:39:59.925]        // -> [version <= 0x00000000]
[00:39:59.925]      __var partNum = 0;
[00:39:59.925]        // -> [partNum <= 0x00000000]
[00:39:59.925]      __var manuf = 0;
[00:39:59.925]        // -> [manuf <= 0x00000000]
[00:39:59.925]      __var isMSPM0G1X0X_G3X0X = 0;
[00:39:59.925]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:39:59.925]      __var isProduction = 0;
[00:39:59.925]        // -> [isProduction <= 0x00000000]
[00:39:59.925]      __var continueId = 0;
[00:39:59.925]        // -> [continueId <= 0x00000000]
[00:39:59.925]      deviceID =   Read32(0x41C40004);
[00:39:59.935]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:39:59.935]        // -> [deviceID <= 0x2BB8802F]
[00:39:59.935]      version = deviceID >> 28;
[00:39:59.935]        // -> [version <= 0x00000002]
[00:39:59.935]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:39:59.935]        // -> [partNum <= 0x0000BB88]
[00:39:59.935]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:39:59.935]        // -> [manuf <= 0x00000017]
[00:39:59.935]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:39:59.935]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:39:59.935]      isProduction = (version > 0);
[00:39:59.935]        // -> [isProduction <= 0x00000001]
[00:39:59.935]    </block>
[00:39:59.941]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:39:59.941]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:39:59.941]        // =>  FALSE
[00:39:59.941]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:39:59.941]    </control>
[00:39:59.941]    <control if="continueId == 4" while="" timeout="0" info="">
[00:39:59.941]      // if-block "continueId == 4"
[00:39:59.941]        // =>  FALSE
[00:39:59.941]      // skip if-block "continueId == 4"
[00:39:59.941]    </control>
[00:39:59.941]    <control if="!isProduction" while="" timeout="0" info="">
[00:39:59.941]      // if-block "!isProduction"
[00:39:59.941]        // =>  FALSE
[00:39:59.941]      // skip if-block "!isProduction"
[00:39:59.941]    </control>
[00:39:59.941]  </sequence>
[00:39:59.941]  
[00:40:22.679]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:40:22.679]  
[00:40:22.690]  <debugvars>
[00:40:22.690]    // Pre-defined
[00:40:22.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:22.690]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:22.690]    __dp=0x00000000
[00:40:22.690]    __ap=0x00000000
[00:40:22.690]    __traceout=0x00000000      (Trace Disabled)
[00:40:22.690]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:22.690]    __FlashAddr=0x00000000
[00:40:22.690]    __FlashLen=0x00000000
[00:40:22.690]    __FlashArg=0x00000000
[00:40:22.690]    __FlashOp=0x00000000
[00:40:22.690]    __Result=0x00000000
[00:40:22.690]  </debugvars>
[00:40:22.690]  
[00:40:22.690]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:40:22.690]    <block atomic="false" info="">
[00:40:22.690]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:40:22.690]        // -> [isSWJ <= 0x00000001]
[00:40:22.690]      __var hasDormant = __protocol & 0x00020000;
[00:40:22.690]        // -> [hasDormant <= 0x00000000]
[00:40:22.690]      __var protType   = __protocol & 0x0000FFFF;
[00:40:22.690]        // -> [protType <= 0x00000002]
[00:40:22.690]    </block>
[00:40:22.690]    <control if="protType == 1" while="" timeout="0" info="">
[00:40:22.690]      // if-block "protType == 1"
[00:40:22.693]        // =>  FALSE
[00:40:22.693]      // skip if-block "protType == 1"
[00:40:22.693]    </control>
[00:40:22.693]    <control if="protType == 2" while="" timeout="0" info="">
[00:40:22.693]      // if-block "protType == 2"
[00:40:22.693]        // =>  TRUE
[00:40:22.693]      <control if="isSWJ" while="" timeout="0" info="">
[00:40:22.693]        // if-block "isSWJ"
[00:40:22.693]          // =>  TRUE
[00:40:22.693]        <control if="hasDormant" while="" timeout="0" info="">
[00:40:22.693]          // if-block "hasDormant"
[00:40:22.693]            // =>  FALSE
[00:40:22.693]          // skip if-block "hasDormant"
[00:40:22.693]        </control>
[00:40:22.693]        <control if="!hasDormant" while="" timeout="0" info="">
[00:40:22.693]          // if-block "!hasDormant"
[00:40:22.693]            // =>  TRUE
[00:40:22.693]          <block atomic="false" info="">
[00:40:22.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:40:22.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:22.698]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:40:22.698]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:40:22.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:40:22.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:22.703]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:40:22.703]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:40:22.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:40:22.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:22.703]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:40:22.703]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:40:22.703]          </block>
[00:40:22.703]          // end if-block "!hasDormant"
[00:40:22.703]        </control>
[00:40:22.703]        // end if-block "isSWJ"
[00:40:22.703]      </control>
[00:40:22.703]      <control if="!isSWJ" while="" timeout="0" info="">
[00:40:22.703]        // if-block "!isSWJ"
[00:40:22.703]          // =>  FALSE
[00:40:22.703]        // skip if-block "!isSWJ"
[00:40:22.703]      </control>
[00:40:22.703]      <block atomic="false" info="">
[00:40:22.703]        ReadDP(0x0);
[00:40:22.714]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:40:22.714]      </block>
[00:40:22.714]      // end if-block "protType == 2"
[00:40:22.714]    </control>
[00:40:22.714]  </sequence>
[00:40:22.714]  
[00:40:22.714]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:40:22.714]  
[00:40:22.714]  <debugvars>
[00:40:22.714]    // Pre-defined
[00:40:22.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:22.714]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:22.714]    __dp=0x00000000
[00:40:22.714]    __ap=0x00000000
[00:40:22.714]    __traceout=0x00000000      (Trace Disabled)
[00:40:22.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:22.714]    __FlashAddr=0x00000000
[00:40:22.714]    __FlashLen=0x00000000
[00:40:22.714]    __FlashArg=0x00000000
[00:40:22.723]    __FlashOp=0x00000000
[00:40:22.723]    __Result=0x00000000
[00:40:22.723]  </debugvars>
[00:40:22.723]  
[00:40:22.723]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:40:22.723]    <block atomic="false" info="">
[00:40:22.723]      __var SW_DP_ABORT       = 0x0;
[00:40:22.723]        // -> [SW_DP_ABORT <= 0x00000000]
[00:40:22.723]      __var DP_CTRL_STAT      = 0x4;
[00:40:22.723]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:40:22.723]      __var DP_SELECT         = 0x8;
[00:40:22.723]        // -> [DP_SELECT <= 0x00000008]
[00:40:22.723]      __var powered_down      = 0;
[00:40:22.723]        // -> [powered_down <= 0x00000000]
[00:40:22.723]      WriteDP(DP_SELECT, 0x00000000);
[00:40:22.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:40:22.723]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:40:22.723]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:40:22.723]        // -> [powered_down <= 0x00000001]
[00:40:22.723]    </block>
[00:40:22.723]    <control if="powered_down" while="" timeout="0" info="">
[00:40:22.723]      // if-block "powered_down"
[00:40:22.728]        // =>  TRUE
[00:40:22.728]      <block atomic="false" info="">
[00:40:22.728]        Message(0, "Debug/System power-up request sent");
[00:40:22.728]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:40:22.728]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:40:22.728]      </block>
[00:40:22.728]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:40:22.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:40:22.728]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:40:22.728]        // while-condition  =>  FALSE
[00:40:22.728]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:40:22.733]      </control>
[00:40:22.734]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:40:22.734]        // if-block "(__protocol & 0xFFFF) == 1"
[00:40:22.734]          // =>  FALSE
[00:40:22.734]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:40:22.734]      </control>
[00:40:22.734]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:40:22.734]        // if-block "(__protocol & 0xFFFF) == 2"
[00:40:22.734]          // =>  TRUE
[00:40:22.734]        <block atomic="false" info="">
[00:40:22.734]          Message(0, "executing SWD power up");
[00:40:22.735]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:40:22.735]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:40:22.735]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:40:22.735]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:40:22.735]        </block>
[00:40:22.735]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:40:22.735]      </control>
[00:40:22.735]      // end if-block "powered_down"
[00:40:22.735]    </control>
[00:40:22.735]    <block atomic="false" info="">
[00:40:22.735]      __var DEBUG_PORT_VAL    = 0;
[00:40:22.735]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:40:22.735]      __var ACCESS_POINT_VAL  = 0;
[00:40:22.735]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:40:22.735]      __ap = 1; 
[00:40:22.735]        // -> [__ap <= 0x00000001]
[00:40:22.735]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:40:22.743]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:40:22.743]      __ap = 4;
[00:40:22.743]        // -> [__ap <= 0x00000004]
[00:40:22.743]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:40:22.743]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:40:22.743]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:40:22.743]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:40:22.743]    </block>
[00:40:22.743]    <block atomic="false" info="">
[00:40:22.743]      __var nReset = 0x80;
[00:40:22.743]        // -> [nReset <= 0x00000080]
[00:40:22.743]      __var canReadPins = 0;
[00:40:22.743]        // -> [canReadPins <= 0x00000000]
[00:40:22.743]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:40:22.749]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:40:22.749]        // -> [canReadPins <= 0x00000001]
[00:40:22.749]    </block>
[00:40:22.749]    <control if="" while="1" timeout="200" info="">
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.749]      // while "1"  (timeout="200")
[00:40:22.749]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.752]      // while "1"  (timeout="200")
[00:40:22.752]      // while-condition  =>  TRUE
[00:40:22.754]      // while "1"  (timeout="200")
[00:40:22.754]      // while  =>  TIMEOUT
[00:40:22.754]      // end while "1"
[00:40:22.754]    </control>
[00:40:22.754]    <control if="canReadPins" while="" timeout="0" info="">
[00:40:22.754]      // if-block "canReadPins"
[00:40:22.754]        // =>  TRUE
[00:40:22.754]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:40:22.754]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:40:22.755]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:40:22.755]        // while-condition  =>  FALSE
[00:40:22.755]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:40:22.755]      </control>
[00:40:22.755]      // end if-block "canReadPins"
[00:40:22.755]    </control>
[00:40:22.755]    <control if="!canReadPins" while="" timeout="0" info="">
[00:40:22.755]      // if-block "!canReadPins"
[00:40:22.755]        // =>  FALSE
[00:40:22.755]      // skip if-block "!canReadPins"
[00:40:22.755]    </control>
[00:40:22.755]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:40:22.755]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:40:22.755]        // =>  TRUE
[00:40:22.755]      <block atomic="false" info="">
[00:40:22.755]        WriteAP(0x00, 0x190008);
[00:40:22.763]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:40:22.763]        WriteAP(0xF0, 0x01);
[00:40:22.763]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:40:22.763]      </block>
[00:40:22.763]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:40:22.763]    </control>
[00:40:22.763]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:40:22.763]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:40:22.763]        // =>  FALSE
[00:40:22.763]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:40:22.763]    </control>
[00:40:22.763]    <block atomic="false" info="">
[00:40:22.763]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:40:22.773]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:40:22.773]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:40:22.773]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:40:22.773]      __ap = 0; //lets make sure we reset the access point selection
[00:40:22.773]        // -> [__ap <= 0x00000000]
[00:40:22.773]    </block>
[00:40:22.773]  </sequence>
[00:40:22.773]  
[00:40:22.813]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:40:22.813]  
[00:40:22.813]  <debugvars>
[00:40:22.813]    // Pre-defined
[00:40:22.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:22.813]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:22.813]    __dp=0x00000000
[00:40:22.813]    __ap=0x00000000
[00:40:22.813]    __traceout=0x00000000      (Trace Disabled)
[00:40:22.813]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:22.813]    __FlashAddr=0x00000000
[00:40:22.813]    __FlashLen=0x00000000
[00:40:22.813]    __FlashArg=0x00000000
[00:40:22.813]    __FlashOp=0x00000000
[00:40:22.813]    __Result=0x00000000
[00:40:22.813]  </debugvars>
[00:40:22.813]  
[00:40:22.813]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:40:22.813]    <block atomic="false" info="">
[00:40:22.818]      __var deviceID = 0;
[00:40:22.818]        // -> [deviceID <= 0x00000000]
[00:40:22.818]      __var version = 0;
[00:40:22.818]        // -> [version <= 0x00000000]
[00:40:22.818]      __var partNum = 0;
[00:40:22.818]        // -> [partNum <= 0x00000000]
[00:40:22.818]      __var manuf = 0;
[00:40:22.818]        // -> [manuf <= 0x00000000]
[00:40:22.818]      __var isMSPM0G1X0X_G3X0X = 0;
[00:40:22.818]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:40:22.818]      __var isProduction = 0;
[00:40:22.818]        // -> [isProduction <= 0x00000000]
[00:40:22.818]      __var continueId = 0;
[00:40:22.818]        // -> [continueId <= 0x00000000]
[00:40:22.818]      deviceID =   Read32(0x41C40004);
[00:40:22.835]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:40:22.835]        // -> [deviceID <= 0x2BB8802F]
[00:40:22.835]      version = deviceID >> 28;
[00:40:22.835]        // -> [version <= 0x00000002]
[00:40:22.835]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:40:22.835]        // -> [partNum <= 0x0000BB88]
[00:40:22.835]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:40:22.835]        // -> [manuf <= 0x00000017]
[00:40:22.835]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:40:22.835]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:40:22.835]      isProduction = (version > 0);
[00:40:22.835]        // -> [isProduction <= 0x00000001]
[00:40:22.835]    </block>
[00:40:22.835]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:40:22.835]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:40:22.835]        // =>  FALSE
[00:40:22.835]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:40:22.835]    </control>
[00:40:22.835]    <control if="continueId == 4" while="" timeout="0" info="">
[00:40:22.835]      // if-block "continueId == 4"
[00:40:22.835]        // =>  FALSE
[00:40:22.835]      // skip if-block "continueId == 4"
[00:40:22.835]    </control>
[00:40:22.835]    <control if="!isProduction" while="" timeout="0" info="">
[00:40:22.835]      // if-block "!isProduction"
[00:40:22.835]        // =>  FALSE
[00:40:22.835]      // skip if-block "!isProduction"
[00:40:22.835]    </control>
[00:40:22.835]  </sequence>
[00:40:22.835]  
[00:40:49.989]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:40:49.989]  
[00:40:49.999]  <debugvars>
[00:40:49.999]    // Pre-defined
[00:40:49.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:49.999]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:49.999]    __dp=0x00000000
[00:40:49.999]    __ap=0x00000000
[00:40:49.999]    __traceout=0x00000000      (Trace Disabled)
[00:40:49.999]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:49.999]    __FlashAddr=0x00000000
[00:40:49.999]    __FlashLen=0x00000000
[00:40:49.999]    __FlashArg=0x00000000
[00:40:49.999]    __FlashOp=0x00000000
[00:40:49.999]    __Result=0x00000000
[00:40:49.999]  </debugvars>
[00:40:49.999]  
[00:40:49.999]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:40:49.999]    <block atomic="false" info="">
[00:40:49.999]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:40:49.999]        // -> [isSWJ <= 0x00000001]
[00:40:49.999]      __var hasDormant = __protocol & 0x00020000;
[00:40:49.999]        // -> [hasDormant <= 0x00000000]
[00:40:49.999]      __var protType   = __protocol & 0x0000FFFF;
[00:40:49.999]        // -> [protType <= 0x00000002]
[00:40:49.999]    </block>
[00:40:49.999]    <control if="protType == 1" while="" timeout="0" info="">
[00:40:50.002]      // if-block "protType == 1"
[00:40:50.002]        // =>  FALSE
[00:40:50.002]      // skip if-block "protType == 1"
[00:40:50.002]    </control>
[00:40:50.002]    <control if="protType == 2" while="" timeout="0" info="">
[00:40:50.002]      // if-block "protType == 2"
[00:40:50.002]        // =>  TRUE
[00:40:50.002]      <control if="isSWJ" while="" timeout="0" info="">
[00:40:50.002]        // if-block "isSWJ"
[00:40:50.002]          // =>  TRUE
[00:40:50.002]        <control if="hasDormant" while="" timeout="0" info="">
[00:40:50.002]          // if-block "hasDormant"
[00:40:50.002]            // =>  FALSE
[00:40:50.002]          // skip if-block "hasDormant"
[00:40:50.002]        </control>
[00:40:50.002]        <control if="!hasDormant" while="" timeout="0" info="">
[00:40:50.002]          // if-block "!hasDormant"
[00:40:50.002]            // =>  TRUE
[00:40:50.002]          <block atomic="false" info="">
[00:40:50.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:40:50.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:50.002]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:40:50.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:40:50.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:40:50.009]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:50.009]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:40:50.012]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:40:50.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:40:50.012]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:40:50.012]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:40:50.012]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:40:50.012]          </block>
[00:40:50.012]          // end if-block "!hasDormant"
[00:40:50.012]        </control>
[00:40:50.012]        // end if-block "isSWJ"
[00:40:50.012]      </control>
[00:40:50.012]      <control if="!isSWJ" while="" timeout="0" info="">
[00:40:50.012]        // if-block "!isSWJ"
[00:40:50.012]          // =>  FALSE
[00:40:50.012]        // skip if-block "!isSWJ"
[00:40:50.012]      </control>
[00:40:50.012]      <block atomic="false" info="">
[00:40:50.012]        ReadDP(0x0);
[00:40:50.019]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:40:50.019]      </block>
[00:40:50.019]      // end if-block "protType == 2"
[00:40:50.019]    </control>
[00:40:50.019]  </sequence>
[00:40:50.019]  
[00:40:50.019]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:40:50.019]  
[00:40:50.022]  <debugvars>
[00:40:50.022]    // Pre-defined
[00:40:50.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:50.022]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:50.022]    __dp=0x00000000
[00:40:50.022]    __ap=0x00000000
[00:40:50.022]    __traceout=0x00000000      (Trace Disabled)
[00:40:50.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:50.022]    __FlashAddr=0x00000000
[00:40:50.022]    __FlashLen=0x00000000
[00:40:50.022]    __FlashArg=0x00000000
[00:40:50.022]    __FlashOp=0x00000000
[00:40:50.022]    __Result=0x00000000
[00:40:50.022]  </debugvars>
[00:40:50.022]  
[00:40:50.022]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:40:50.022]    <block atomic="false" info="">
[00:40:50.022]      __var SW_DP_ABORT       = 0x0;
[00:40:50.022]        // -> [SW_DP_ABORT <= 0x00000000]
[00:40:50.022]      __var DP_CTRL_STAT      = 0x4;
[00:40:50.022]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:40:50.022]      __var DP_SELECT         = 0x8;
[00:40:50.022]        // -> [DP_SELECT <= 0x00000008]
[00:40:50.022]      __var powered_down      = 0;
[00:40:50.022]        // -> [powered_down <= 0x00000000]
[00:40:50.022]      WriteDP(DP_SELECT, 0x00000000);
[00:40:50.022]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:40:50.022]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:40:50.029]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:40:50.029]        // -> [powered_down <= 0x00000001]
[00:40:50.029]    </block>
[00:40:50.029]    <control if="powered_down" while="" timeout="0" info="">
[00:40:50.029]      // if-block "powered_down"
[00:40:50.029]        // =>  TRUE
[00:40:50.029]      <block atomic="false" info="">
[00:40:50.029]        Message(0, "Debug/System power-up request sent");
[00:40:50.029]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:40:50.039]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:40:50.039]      </block>
[00:40:50.039]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:40:50.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:40:50.039]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:40:50.039]        // while-condition  =>  FALSE
[00:40:50.039]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:40:50.039]      </control>
[00:40:50.039]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:40:50.039]        // if-block "(__protocol & 0xFFFF) == 1"
[00:40:50.039]          // =>  FALSE
[00:40:50.039]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:40:50.039]      </control>
[00:40:50.039]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:40:50.043]        // if-block "(__protocol & 0xFFFF) == 2"
[00:40:50.043]          // =>  TRUE
[00:40:50.043]        <block atomic="false" info="">
[00:40:50.043]          Message(0, "executing SWD power up");
[00:40:50.044]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:40:50.044]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:40:50.044]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:40:50.044]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:40:50.044]        </block>
[00:40:50.044]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:40:50.044]      </control>
[00:40:50.044]      // end if-block "powered_down"
[00:40:50.044]    </control>
[00:40:50.044]    <block atomic="false" info="">
[00:40:50.049]      __var DEBUG_PORT_VAL    = 0;
[00:40:50.049]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:40:50.049]      __var ACCESS_POINT_VAL  = 0;
[00:40:50.049]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:40:50.049]      __ap = 1; 
[00:40:50.049]        // -> [__ap <= 0x00000001]
[00:40:50.049]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:40:50.054]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:40:50.054]      __ap = 4;
[00:40:50.054]        // -> [__ap <= 0x00000004]
[00:40:50.054]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:40:50.059]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:40:50.059]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:40:50.059]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:40:50.059]    </block>
[00:40:50.059]    <block atomic="false" info="">
[00:40:50.059]      __var nReset = 0x80;
[00:40:50.059]        // -> [nReset <= 0x00000080]
[00:40:50.059]      __var canReadPins = 0;
[00:40:50.059]        // -> [canReadPins <= 0x00000000]
[00:40:50.059]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:40:50.064]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:40:50.064]        // -> [canReadPins <= 0x00000001]
[00:40:50.064]    </block>
[00:40:50.064]    <control if="" while="1" timeout="200" info="">
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.064]      // while "1"  (timeout="200")
[00:40:50.064]      // while-condition  =>  TRUE
[00:40:50.069]      // while "1"  (timeout="200")
[00:40:50.069]      // while  =>  TIMEOUT
[00:40:50.069]      // end while "1"
[00:40:50.069]    </control>
[00:40:50.069]    <control if="canReadPins" while="" timeout="0" info="">
[00:40:50.069]      // if-block "canReadPins"
[00:40:50.069]        // =>  TRUE
[00:40:50.069]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:40:50.069]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:40:50.069]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:40:50.069]        // while-condition  =>  FALSE
[00:40:50.069]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:40:50.069]      </control>
[00:40:50.069]      // end if-block "canReadPins"
[00:40:50.074]    </control>
[00:40:50.074]    <control if="!canReadPins" while="" timeout="0" info="">
[00:40:50.074]      // if-block "!canReadPins"
[00:40:50.074]        // =>  FALSE
[00:40:50.074]      // skip if-block "!canReadPins"
[00:40:50.074]    </control>
[00:40:50.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:40:50.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:40:50.074]        // =>  TRUE
[00:40:50.074]      <block atomic="false" info="">
[00:40:50.074]        WriteAP(0x00, 0x190008);
[00:40:50.079]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:40:50.079]        WriteAP(0xF0, 0x01);
[00:40:50.084]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:40:50.084]      </block>
[00:40:50.084]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:40:50.084]    </control>
[00:40:50.084]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:40:50.084]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:40:50.084]        // =>  FALSE
[00:40:50.084]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:40:50.084]    </control>
[00:40:50.084]    <block atomic="false" info="">
[00:40:50.084]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:40:50.090]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:40:50.090]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:40:50.090]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:40:50.090]      __ap = 0; //lets make sure we reset the access point selection
[00:40:50.090]        // -> [__ap <= 0x00000000]
[00:40:50.090]    </block>
[00:40:50.090]  </sequence>
[00:40:50.090]  
[00:40:50.115]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:40:50.115]  
[00:40:50.115]  <debugvars>
[00:40:50.115]    // Pre-defined
[00:40:50.115]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:40:50.115]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:40:50.115]    __dp=0x00000000
[00:40:50.115]    __ap=0x00000000
[00:40:50.115]    __traceout=0x00000000      (Trace Disabled)
[00:40:50.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:40:50.115]    __FlashAddr=0x00000000
[00:40:50.115]    __FlashLen=0x00000000
[00:40:50.119]    __FlashArg=0x00000000
[00:40:50.119]    __FlashOp=0x00000000
[00:40:50.119]    __Result=0x00000000
[00:40:50.119]  </debugvars>
[00:40:50.119]  
[00:40:50.119]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:40:50.119]    <block atomic="false" info="">
[00:40:50.119]      __var deviceID = 0;
[00:40:50.119]        // -> [deviceID <= 0x00000000]
[00:40:50.119]      __var version = 0;
[00:40:50.119]        // -> [version <= 0x00000000]
[00:40:50.119]      __var partNum = 0;
[00:40:50.119]        // -> [partNum <= 0x00000000]
[00:40:50.119]      __var manuf = 0;
[00:40:50.119]        // -> [manuf <= 0x00000000]
[00:40:50.119]      __var isMSPM0G1X0X_G3X0X = 0;
[00:40:50.119]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:40:50.119]      __var isProduction = 0;
[00:40:50.119]        // -> [isProduction <= 0x00000000]
[00:40:50.119]      __var continueId = 0;
[00:40:50.119]        // -> [continueId <= 0x00000000]
[00:40:50.119]      deviceID =   Read32(0x41C40004);
[00:40:50.139]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:40:50.139]        // -> [deviceID <= 0x2BB8802F]
[00:40:50.139]      version = deviceID >> 28;
[00:40:50.139]        // -> [version <= 0x00000002]
[00:40:50.139]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:40:50.139]        // -> [partNum <= 0x0000BB88]
[00:40:50.139]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:40:50.139]        // -> [manuf <= 0x00000017]
[00:40:50.139]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:40:50.139]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:40:50.139]      isProduction = (version > 0);
[00:40:50.139]        // -> [isProduction <= 0x00000001]
[00:40:50.139]    </block>
[00:40:50.139]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:40:50.139]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:40:50.139]        // =>  FALSE
[00:40:50.139]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:40:50.139]    </control>
[00:40:50.139]    <control if="continueId == 4" while="" timeout="0" info="">
[00:40:50.139]      // if-block "continueId == 4"
[00:40:50.139]        // =>  FALSE
[00:40:50.139]      // skip if-block "continueId == 4"
[00:40:50.139]    </control>
[00:40:50.139]    <control if="!isProduction" while="" timeout="0" info="">
[00:40:50.139]      // if-block "!isProduction"
[00:40:50.139]        // =>  FALSE
[00:40:50.139]      // skip if-block "!isProduction"
[00:40:50.139]    </control>
[00:40:50.139]  </sequence>
[00:40:50.139]  
[00:41:15.847]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:41:15.847]  
[00:41:15.858]  <debugvars>
[00:41:15.858]    // Pre-defined
[00:41:15.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:41:15.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:41:15.858]    __dp=0x00000000
[00:41:15.858]    __ap=0x00000000
[00:41:15.858]    __traceout=0x00000000      (Trace Disabled)
[00:41:15.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:41:15.858]    __FlashAddr=0x00000000
[00:41:15.858]    __FlashLen=0x00000000
[00:41:15.858]    __FlashArg=0x00000000
[00:41:15.858]    __FlashOp=0x00000000
[00:41:15.858]    __Result=0x00000000
[00:41:15.858]  </debugvars>
[00:41:15.858]  
[00:41:15.858]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:41:15.858]    <block atomic="false" info="">
[00:41:15.858]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:41:15.858]        // -> [isSWJ <= 0x00000001]
[00:41:15.858]      __var hasDormant = __protocol & 0x00020000;
[00:41:15.858]        // -> [hasDormant <= 0x00000000]
[00:41:15.858]      __var protType   = __protocol & 0x0000FFFF;
[00:41:15.858]        // -> [protType <= 0x00000002]
[00:41:15.858]    </block>
[00:41:15.858]    <control if="protType == 1" while="" timeout="0" info="">
[00:41:15.858]      // if-block "protType == 1"
[00:41:15.858]        // =>  FALSE
[00:41:15.858]      // skip if-block "protType == 1"
[00:41:15.858]    </control>
[00:41:15.858]    <control if="protType == 2" while="" timeout="0" info="">
[00:41:15.858]      // if-block "protType == 2"
[00:41:15.858]        // =>  TRUE
[00:41:15.858]      <control if="isSWJ" while="" timeout="0" info="">
[00:41:15.858]        // if-block "isSWJ"
[00:41:15.858]          // =>  TRUE
[00:41:15.858]        <control if="hasDormant" while="" timeout="0" info="">
[00:41:15.858]          // if-block "hasDormant"
[00:41:15.858]            // =>  FALSE
[00:41:15.858]          // skip if-block "hasDormant"
[00:41:15.858]        </control>
[00:41:15.858]        <control if="!hasDormant" while="" timeout="0" info="">
[00:41:15.858]          // if-block "!hasDormant"
[00:41:15.858]            // =>  TRUE
[00:41:15.862]          <block atomic="false" info="">
[00:41:15.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:41:15.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:41:15.862]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:41:15.862]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:41:15.862]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:41:15.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:41:15.862]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:41:15.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:41:15.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:41:15.872]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:41:15.872]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:41:15.873]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:41:15.873]          </block>
[00:41:15.873]          // end if-block "!hasDormant"
[00:41:15.874]        </control>
[00:41:15.874]        // end if-block "isSWJ"
[00:41:15.874]      </control>
[00:41:15.874]      <control if="!isSWJ" while="" timeout="0" info="">
[00:41:15.875]        // if-block "!isSWJ"
[00:41:15.875]          // =>  FALSE
[00:41:15.875]        // skip if-block "!isSWJ"
[00:41:15.875]      </control>
[00:41:15.875]      <block atomic="false" info="">
[00:41:15.875]        ReadDP(0x0);
[00:41:15.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:41:15.883]      </block>
[00:41:15.883]      // end if-block "protType == 2"
[00:41:15.883]    </control>
[00:41:15.883]  </sequence>
[00:41:15.883]  
[00:41:15.887]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:41:15.887]  
[00:41:15.887]  <debugvars>
[00:41:15.887]    // Pre-defined
[00:41:15.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:41:15.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:41:15.887]    __dp=0x00000000
[00:41:15.887]    __ap=0x00000000
[00:41:15.887]    __traceout=0x00000000      (Trace Disabled)
[00:41:15.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:41:15.893]    __FlashAddr=0x00000000
[00:41:15.893]    __FlashLen=0x00000000
[00:41:15.893]    __FlashArg=0x00000000
[00:41:15.893]    __FlashOp=0x00000000
[00:41:15.893]    __Result=0x00000000
[00:41:15.893]  </debugvars>
[00:41:15.893]  
[00:41:15.893]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:41:15.893]    <block atomic="false" info="">
[00:41:15.893]      __var SW_DP_ABORT       = 0x0;
[00:41:15.893]        // -> [SW_DP_ABORT <= 0x00000000]
[00:41:15.893]      __var DP_CTRL_STAT      = 0x4;
[00:41:15.893]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:41:15.893]      __var DP_SELECT         = 0x8;
[00:41:15.893]        // -> [DP_SELECT <= 0x00000008]
[00:41:15.893]      __var powered_down      = 0;
[00:41:15.893]        // -> [powered_down <= 0x00000000]
[00:41:15.893]      WriteDP(DP_SELECT, 0x00000000);
[00:41:15.897]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:41:15.897]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:41:15.897]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:41:15.897]        // -> [powered_down <= 0x00000001]
[00:41:15.897]    </block>
[00:41:15.897]    <control if="powered_down" while="" timeout="0" info="">
[00:41:15.897]      // if-block "powered_down"
[00:41:15.897]        // =>  TRUE
[00:41:15.897]      <block atomic="false" info="">
[00:41:15.897]        Message(0, "Debug/System power-up request sent");
[00:41:15.897]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:41:15.903]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:41:15.903]      </block>
[00:41:15.903]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:41:15.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:41:15.905]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:41:15.905]        // while-condition  =>  FALSE
[00:41:15.905]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:41:15.905]      </control>
[00:41:15.905]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:41:15.905]        // if-block "(__protocol & 0xFFFF) == 1"
[00:41:15.905]          // =>  FALSE
[00:41:15.905]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:41:15.905]      </control>
[00:41:15.905]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:41:15.905]        // if-block "(__protocol & 0xFFFF) == 2"
[00:41:15.905]          // =>  TRUE
[00:41:15.905]        <block atomic="false" info="">
[00:41:15.905]          Message(0, "executing SWD power up");
[00:41:15.905]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:41:15.907]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:41:15.907]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:41:15.907]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:41:15.907]        </block>
[00:41:15.907]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:41:15.907]      </control>
[00:41:15.907]      // end if-block "powered_down"
[00:41:15.907]    </control>
[00:41:15.907]    <block atomic="false" info="">
[00:41:15.907]      __var DEBUG_PORT_VAL    = 0;
[00:41:15.907]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:41:15.907]      __var ACCESS_POINT_VAL  = 0;
[00:41:15.907]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:41:15.907]      __ap = 1; 
[00:41:15.907]        // -> [__ap <= 0x00000001]
[00:41:15.907]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:41:15.915]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:41:15.915]      __ap = 4;
[00:41:15.915]        // -> [__ap <= 0x00000004]
[00:41:15.915]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:41:15.917]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:41:15.917]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:41:15.917]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:41:15.917]    </block>
[00:41:15.917]    <block atomic="false" info="">
[00:41:15.917]      __var nReset = 0x80;
[00:41:15.917]        // -> [nReset <= 0x00000080]
[00:41:15.917]      __var canReadPins = 0;
[00:41:15.917]        // -> [canReadPins <= 0x00000000]
[00:41:15.917]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:41:15.917]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:41:15.917]        // -> [canReadPins <= 0x00000001]
[00:41:15.917]    </block>
[00:41:15.917]    <control if="" while="1" timeout="200" info="">
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.917]      // while "1"  (timeout="200")
[00:41:15.917]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.924]      // while-condition  =>  TRUE
[00:41:15.924]      // while "1"  (timeout="200")
[00:41:15.927]      // while-condition  =>  TRUE
[00:41:15.927]      // while "1"  (timeout="200")
[00:41:15.927]      // while  =>  TIMEOUT
[00:41:15.927]      // end while "1"
[00:41:15.927]    </control>
[00:41:15.927]    <control if="canReadPins" while="" timeout="0" info="">
[00:41:15.927]      // if-block "canReadPins"
[00:41:15.927]        // =>  TRUE
[00:41:15.927]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:41:15.927]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:41:15.927]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:41:15.927]        // while-condition  =>  FALSE
[00:41:15.927]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:41:15.927]      </control>
[00:41:15.927]      // end if-block "canReadPins"
[00:41:15.927]    </control>
[00:41:15.927]    <control if="!canReadPins" while="" timeout="0" info="">
[00:41:15.927]      // if-block "!canReadPins"
[00:41:15.927]        // =>  FALSE
[00:41:15.927]      // skip if-block "!canReadPins"
[00:41:15.927]    </control>
[00:41:15.927]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:41:15.927]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:41:15.927]        // =>  TRUE
[00:41:15.927]      <block atomic="false" info="">
[00:41:15.927]        WriteAP(0x00, 0x190008);
[00:41:15.927]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:41:15.927]        WriteAP(0xF0, 0x01);
[00:41:15.935]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:41:15.935]      </block>
[00:41:15.935]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:41:15.935]    </control>
[00:41:15.935]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:41:15.935]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:41:15.935]        // =>  FALSE
[00:41:15.935]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:41:15.935]    </control>
[00:41:15.935]    <block atomic="false" info="">
[00:41:15.935]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:41:15.944]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:41:15.944]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:41:15.944]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:41:15.944]      __ap = 0; //lets make sure we reset the access point selection
[00:41:15.944]        // -> [__ap <= 0x00000000]
[00:41:15.944]    </block>
[00:41:15.944]  </sequence>
[00:41:15.944]  
[00:41:15.967]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:41:15.967]  
[00:41:15.967]  <debugvars>
[00:41:15.967]    // Pre-defined
[00:41:15.967]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:41:15.967]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:41:15.967]    __dp=0x00000000
[00:41:15.967]    __ap=0x00000000
[00:41:15.975]    __traceout=0x00000000      (Trace Disabled)
[00:41:15.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:41:15.975]    __FlashAddr=0x00000000
[00:41:15.975]    __FlashLen=0x00000000
[00:41:15.975]    __FlashArg=0x00000000
[00:41:15.975]    __FlashOp=0x00000000
[00:41:15.975]    __Result=0x00000000
[00:41:15.975]  </debugvars>
[00:41:15.975]  
[00:41:15.975]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:41:15.977]    <block atomic="false" info="">
[00:41:15.977]      __var deviceID = 0;
[00:41:15.977]        // -> [deviceID <= 0x00000000]
[00:41:15.977]      __var version = 0;
[00:41:15.977]        // -> [version <= 0x00000000]
[00:41:15.977]      __var partNum = 0;
[00:41:15.977]        // -> [partNum <= 0x00000000]
[00:41:15.977]      __var manuf = 0;
[00:41:15.977]        // -> [manuf <= 0x00000000]
[00:41:15.977]      __var isMSPM0G1X0X_G3X0X = 0;
[00:41:15.977]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:41:15.977]      __var isProduction = 0;
[00:41:15.977]        // -> [isProduction <= 0x00000000]
[00:41:15.977]      __var continueId = 0;
[00:41:15.977]        // -> [continueId <= 0x00000000]
[00:41:15.977]      deviceID =   Read32(0x41C40004);
[00:41:15.979]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:41:15.979]        // -> [deviceID <= 0x2BB8802F]
[00:41:15.979]      version = deviceID >> 28;
[00:41:15.979]        // -> [version <= 0x00000002]
[00:41:15.979]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:41:15.979]        // -> [partNum <= 0x0000BB88]
[00:41:15.979]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:41:15.979]        // -> [manuf <= 0x00000017]
[00:41:15.979]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:41:15.979]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:41:15.979]      isProduction = (version > 0);
[00:41:15.979]        // -> [isProduction <= 0x00000001]
[00:41:15.979]    </block>
[00:41:15.979]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:41:15.979]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:41:15.979]        // =>  FALSE
[00:41:15.979]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:41:15.979]    </control>
[00:41:15.979]    <control if="continueId == 4" while="" timeout="0" info="">
[00:41:15.979]      // if-block "continueId == 4"
[00:41:15.979]        // =>  FALSE
[00:41:15.979]      // skip if-block "continueId == 4"
[00:41:15.979]    </control>
[00:41:15.979]    <control if="!isProduction" while="" timeout="0" info="">
[00:41:15.979]      // if-block "!isProduction"
[00:41:15.979]        // =>  FALSE
[00:41:15.979]      // skip if-block "!isProduction"
[00:41:15.979]    </control>
[00:41:15.979]  </sequence>
[00:41:15.979]  
[00:42:00.112]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:42:00.112]  
[00:42:00.125]  <debugvars>
[00:42:00.125]    // Pre-defined
[00:42:00.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:00.125]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:00.125]    __dp=0x00000000
[00:42:00.125]    __ap=0x00000000
[00:42:00.125]    __traceout=0x00000000      (Trace Disabled)
[00:42:00.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:00.125]    __FlashAddr=0x00000000
[00:42:00.125]    __FlashLen=0x00000000
[00:42:00.125]    __FlashArg=0x00000000
[00:42:00.125]    __FlashOp=0x00000000
[00:42:00.125]    __Result=0x00000000
[00:42:00.125]  </debugvars>
[00:42:00.125]  
[00:42:00.125]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:42:00.125]    <block atomic="false" info="">
[00:42:00.125]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:42:00.125]        // -> [isSWJ <= 0x00000001]
[00:42:00.125]      __var hasDormant = __protocol & 0x00020000;
[00:42:00.125]        // -> [hasDormant <= 0x00000000]
[00:42:00.125]      __var protType   = __protocol & 0x0000FFFF;
[00:42:00.125]        // -> [protType <= 0x00000002]
[00:42:00.125]    </block>
[00:42:00.125]    <control if="protType == 1" while="" timeout="0" info="">
[00:42:00.125]      // if-block "protType == 1"
[00:42:00.125]        // =>  FALSE
[00:42:00.125]      // skip if-block "protType == 1"
[00:42:00.125]    </control>
[00:42:00.125]    <control if="protType == 2" while="" timeout="0" info="">
[00:42:00.125]      // if-block "protType == 2"
[00:42:00.125]        // =>  TRUE
[00:42:00.125]      <control if="isSWJ" while="" timeout="0" info="">
[00:42:00.125]        // if-block "isSWJ"
[00:42:00.125]          // =>  TRUE
[00:42:00.125]        <control if="hasDormant" while="" timeout="0" info="">
[00:42:00.125]          // if-block "hasDormant"
[00:42:00.125]            // =>  FALSE
[00:42:00.125]          // skip if-block "hasDormant"
[00:42:00.125]        </control>
[00:42:00.125]        <control if="!hasDormant" while="" timeout="0" info="">
[00:42:00.125]          // if-block "!hasDormant"
[00:42:00.125]            // =>  TRUE
[00:42:00.125]          <block atomic="false" info="">
[00:42:00.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:42:00.125]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:00.132]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:42:00.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:42:00.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:42:00.133]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:00.133]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:42:00.133]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:42:00.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:42:00.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:00.142]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:42:00.142]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:42:00.142]          </block>
[00:42:00.142]          // end if-block "!hasDormant"
[00:42:00.142]        </control>
[00:42:00.142]        // end if-block "isSWJ"
[00:42:00.142]      </control>
[00:42:00.142]      <control if="!isSWJ" while="" timeout="0" info="">
[00:42:00.142]        // if-block "!isSWJ"
[00:42:00.142]          // =>  FALSE
[00:42:00.142]        // skip if-block "!isSWJ"
[00:42:00.142]      </control>
[00:42:00.142]      <block atomic="false" info="">
[00:42:00.142]        ReadDP(0x0);
[00:42:00.142]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:42:00.142]      </block>
[00:42:00.142]      // end if-block "protType == 2"
[00:42:00.142]    </control>
[00:42:00.142]  </sequence>
[00:42:00.142]  
[00:42:00.152]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:42:00.152]  
[00:42:00.152]  <debugvars>
[00:42:00.152]    // Pre-defined
[00:42:00.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:00.152]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:00.152]    __dp=0x00000000
[00:42:00.152]    __ap=0x00000000
[00:42:00.152]    __traceout=0x00000000      (Trace Disabled)
[00:42:00.152]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:00.152]    __FlashAddr=0x00000000
[00:42:00.152]    __FlashLen=0x00000000
[00:42:00.152]    __FlashArg=0x00000000
[00:42:00.152]    __FlashOp=0x00000000
[00:42:00.152]    __Result=0x00000000
[00:42:00.152]  </debugvars>
[00:42:00.152]  
[00:42:00.154]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:42:00.154]    <block atomic="false" info="">
[00:42:00.154]      __var SW_DP_ABORT       = 0x0;
[00:42:00.154]        // -> [SW_DP_ABORT <= 0x00000000]
[00:42:00.154]      __var DP_CTRL_STAT      = 0x4;
[00:42:00.154]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:42:00.154]      __var DP_SELECT         = 0x8;
[00:42:00.154]        // -> [DP_SELECT <= 0x00000008]
[00:42:00.154]      __var powered_down      = 0;
[00:42:00.154]        // -> [powered_down <= 0x00000000]
[00:42:00.154]      WriteDP(DP_SELECT, 0x00000000);
[00:42:00.154]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:42:00.154]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:42:00.154]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:42:00.154]        // -> [powered_down <= 0x00000001]
[00:42:00.154]    </block>
[00:42:00.154]    <control if="powered_down" while="" timeout="0" info="">
[00:42:00.154]      // if-block "powered_down"
[00:42:00.154]        // =>  TRUE
[00:42:00.154]      <block atomic="false" info="">
[00:42:00.154]        Message(0, "Debug/System power-up request sent");
[00:42:00.154]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:42:00.154]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:42:00.154]      </block>
[00:42:00.154]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:42:00.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:42:00.163]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:42:00.163]        // while-condition  =>  FALSE
[00:42:00.163]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:42:00.163]      </control>
[00:42:00.163]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:42:00.163]        // if-block "(__protocol & 0xFFFF) == 1"
[00:42:00.163]          // =>  FALSE
[00:42:00.163]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:42:00.163]      </control>
[00:42:00.163]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:42:00.163]        // if-block "(__protocol & 0xFFFF) == 2"
[00:42:00.163]          // =>  TRUE
[00:42:00.163]        <block atomic="false" info="">
[00:42:00.163]          Message(0, "executing SWD power up");
[00:42:00.163]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:42:00.166]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:42:00.166]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:42:00.166]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:42:00.166]        </block>
[00:42:00.166]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:42:00.166]      </control>
[00:42:00.166]      // end if-block "powered_down"
[00:42:00.166]    </control>
[00:42:00.166]    <block atomic="false" info="">
[00:42:00.166]      __var DEBUG_PORT_VAL    = 0;
[00:42:00.166]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:42:00.166]      __var ACCESS_POINT_VAL  = 0;
[00:42:00.166]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:42:00.166]      __ap = 1; 
[00:42:00.166]        // -> [__ap <= 0x00000001]
[00:42:00.166]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:42:00.173]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:42:00.173]      __ap = 4;
[00:42:00.173]        // -> [__ap <= 0x00000004]
[00:42:00.173]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:00.187]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:42:00.187]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:42:00.187]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:00.187]    </block>
[00:42:00.187]    <block atomic="false" info="">
[00:42:00.187]      __var nReset = 0x80;
[00:42:00.187]        // -> [nReset <= 0x00000080]
[00:42:00.187]      __var canReadPins = 0;
[00:42:00.187]        // -> [canReadPins <= 0x00000000]
[00:42:00.187]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:42:00.193]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:42:00.193]        // -> [canReadPins <= 0x00000001]
[00:42:00.193]    </block>
[00:42:00.193]    <control if="" while="1" timeout="200" info="">
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.193]      // while-condition  =>  TRUE
[00:42:00.193]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.199]      // while "1"  (timeout="200")
[00:42:00.199]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.203]      // while "1"  (timeout="200")
[00:42:00.203]      // while-condition  =>  TRUE
[00:42:00.213]      // while "1"  (timeout="200")
[00:42:00.213]      // while  =>  TIMEOUT
[00:42:00.213]      // end while "1"
[00:42:00.213]    </control>
[00:42:00.213]    <control if="canReadPins" while="" timeout="0" info="">
[00:42:00.213]      // if-block "canReadPins"
[00:42:00.213]        // =>  TRUE
[00:42:00.213]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:42:00.213]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:42:00.215]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:42:00.215]        // while-condition  =>  FALSE
[00:42:00.215]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:42:00.215]      </control>
[00:42:00.215]      // end if-block "canReadPins"
[00:42:00.215]    </control>
[00:42:00.215]    <control if="!canReadPins" while="" timeout="0" info="">
[00:42:00.215]      // if-block "!canReadPins"
[00:42:00.215]        // =>  FALSE
[00:42:00.215]      // skip if-block "!canReadPins"
[00:42:00.215]    </control>
[00:42:00.215]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:42:00.215]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:00.215]        // =>  TRUE
[00:42:00.215]      <block atomic="false" info="">
[00:42:00.215]        WriteAP(0x00, 0x190008);
[00:42:00.215]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:00.215]        WriteAP(0xF0, 0x01);
[00:42:00.224]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:00.224]      </block>
[00:42:00.224]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:00.224]    </control>
[00:42:00.224]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:42:00.224]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:00.224]        // =>  FALSE
[00:42:00.224]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:00.224]    </control>
[00:42:00.224]    <block atomic="false" info="">
[00:42:00.224]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:00.226]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:42:00.226]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:42:00.226]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:00.226]      __ap = 0; //lets make sure we reset the access point selection
[00:42:00.226]        // -> [__ap <= 0x00000000]
[00:42:00.226]    </block>
[00:42:00.226]  </sequence>
[00:42:00.226]  
[00:42:00.246]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:42:00.246]  
[00:42:00.246]  <debugvars>
[00:42:00.246]    // Pre-defined
[00:42:00.246]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:00.246]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:00.246]    __dp=0x00000000
[00:42:00.246]    __ap=0x00000000
[00:42:00.246]    __traceout=0x00000000      (Trace Disabled)
[00:42:00.246]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:00.246]    __FlashAddr=0x00000000
[00:42:00.246]    __FlashLen=0x00000000
[00:42:00.246]    __FlashArg=0x00000000
[00:42:00.254]    __FlashOp=0x00000000
[00:42:00.254]    __Result=0x00000000
[00:42:00.254]  </debugvars>
[00:42:00.254]  
[00:42:00.254]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:42:00.254]    <block atomic="false" info="">
[00:42:00.254]      __var deviceID = 0;
[00:42:00.256]        // -> [deviceID <= 0x00000000]
[00:42:00.256]      __var version = 0;
[00:42:00.256]        // -> [version <= 0x00000000]
[00:42:00.256]      __var partNum = 0;
[00:42:00.256]        // -> [partNum <= 0x00000000]
[00:42:00.256]      __var manuf = 0;
[00:42:00.256]        // -> [manuf <= 0x00000000]
[00:42:00.256]      __var isMSPM0G1X0X_G3X0X = 0;
[00:42:00.256]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:42:00.256]      __var isProduction = 0;
[00:42:00.256]        // -> [isProduction <= 0x00000000]
[00:42:00.257]      __var continueId = 0;
[00:42:00.257]        // -> [continueId <= 0x00000000]
[00:42:00.257]      deviceID =   Read32(0x41C40004);
[00:42:00.265]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:42:00.265]        // -> [deviceID <= 0x2BB8802F]
[00:42:00.265]      version = deviceID >> 28;
[00:42:00.265]        // -> [version <= 0x00000002]
[00:42:00.265]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:42:00.265]        // -> [partNum <= 0x0000BB88]
[00:42:00.266]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:42:00.266]        // -> [manuf <= 0x00000017]
[00:42:00.266]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:42:00.266]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:42:00.266]      isProduction = (version > 0);
[00:42:00.266]        // -> [isProduction <= 0x00000001]
[00:42:00.266]    </block>
[00:42:00.266]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:42:00.266]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:42:00.266]        // =>  FALSE
[00:42:00.266]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:42:00.266]    </control>
[00:42:00.266]    <control if="continueId == 4" while="" timeout="0" info="">
[00:42:00.266]      // if-block "continueId == 4"
[00:42:00.266]        // =>  FALSE
[00:42:00.266]      // skip if-block "continueId == 4"
[00:42:00.266]    </control>
[00:42:00.266]    <control if="!isProduction" while="" timeout="0" info="">
[00:42:00.266]      // if-block "!isProduction"
[00:42:00.266]        // =>  FALSE
[00:42:00.266]      // skip if-block "!isProduction"
[00:42:00.266]    </control>
[00:42:00.266]  </sequence>
[00:42:00.266]  
[00:42:23.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:42:23.138]  
[00:42:23.147]  <debugvars>
[00:42:23.147]    // Pre-defined
[00:42:23.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:23.147]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:23.147]    __dp=0x00000000
[00:42:23.148]    __ap=0x00000000
[00:42:23.148]    __traceout=0x00000000      (Trace Disabled)
[00:42:23.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:23.148]    __FlashAddr=0x00000000
[00:42:23.148]    __FlashLen=0x00000000
[00:42:23.148]    __FlashArg=0x00000000
[00:42:23.148]    __FlashOp=0x00000000
[00:42:23.148]    __Result=0x00000000
[00:42:23.148]  </debugvars>
[00:42:23.148]  
[00:42:23.148]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:42:23.148]    <block atomic="false" info="">
[00:42:23.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:42:23.148]        // -> [isSWJ <= 0x00000001]
[00:42:23.148]      __var hasDormant = __protocol & 0x00020000;
[00:42:23.148]        // -> [hasDormant <= 0x00000000]
[00:42:23.148]      __var protType   = __protocol & 0x0000FFFF;
[00:42:23.148]        // -> [protType <= 0x00000002]
[00:42:23.148]    </block>
[00:42:23.148]    <control if="protType == 1" while="" timeout="0" info="">
[00:42:23.148]      // if-block "protType == 1"
[00:42:23.150]        // =>  FALSE
[00:42:23.150]      // skip if-block "protType == 1"
[00:42:23.150]    </control>
[00:42:23.150]    <control if="protType == 2" while="" timeout="0" info="">
[00:42:23.150]      // if-block "protType == 2"
[00:42:23.151]        // =>  TRUE
[00:42:23.151]      <control if="isSWJ" while="" timeout="0" info="">
[00:42:23.151]        // if-block "isSWJ"
[00:42:23.151]          // =>  TRUE
[00:42:23.151]        <control if="hasDormant" while="" timeout="0" info="">
[00:42:23.151]          // if-block "hasDormant"
[00:42:23.151]            // =>  FALSE
[00:42:23.151]          // skip if-block "hasDormant"
[00:42:23.151]        </control>
[00:42:23.151]        <control if="!hasDormant" while="" timeout="0" info="">
[00:42:23.151]          // if-block "!hasDormant"
[00:42:23.151]            // =>  TRUE
[00:42:23.151]          <block atomic="false" info="">
[00:42:23.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:42:23.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:23.151]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:42:23.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:42:23.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:42:23.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:23.158]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:42:23.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:42:23.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:42:23.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:23.158]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:42:23.158]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:42:23.158]          </block>
[00:42:23.158]          // end if-block "!hasDormant"
[00:42:23.158]        </control>
[00:42:23.158]        // end if-block "isSWJ"
[00:42:23.158]      </control>
[00:42:23.158]      <control if="!isSWJ" while="" timeout="0" info="">
[00:42:23.158]        // if-block "!isSWJ"
[00:42:23.158]          // =>  FALSE
[00:42:23.158]        // skip if-block "!isSWJ"
[00:42:23.158]      </control>
[00:42:23.158]      <block atomic="false" info="">
[00:42:23.158]        ReadDP(0x0);
[00:42:23.158]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:42:23.158]      </block>
[00:42:23.158]      // end if-block "protType == 2"
[00:42:23.158]    </control>
[00:42:23.158]  </sequence>
[00:42:23.158]  
[00:42:23.168]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:42:23.168]  
[00:42:23.168]  <debugvars>
[00:42:23.168]    // Pre-defined
[00:42:23.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:23.169]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:23.169]    __dp=0x00000000
[00:42:23.169]    __ap=0x00000000
[00:42:23.169]    __traceout=0x00000000      (Trace Disabled)
[00:42:23.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:23.169]    __FlashAddr=0x00000000
[00:42:23.169]    __FlashLen=0x00000000
[00:42:23.169]    __FlashArg=0x00000000
[00:42:23.169]    __FlashOp=0x00000000
[00:42:23.169]    __Result=0x00000000
[00:42:23.169]  </debugvars>
[00:42:23.169]  
[00:42:23.169]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:42:23.169]    <block atomic="false" info="">
[00:42:23.169]      __var SW_DP_ABORT       = 0x0;
[00:42:23.169]        // -> [SW_DP_ABORT <= 0x00000000]
[00:42:23.169]      __var DP_CTRL_STAT      = 0x4;
[00:42:23.169]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:42:23.169]      __var DP_SELECT         = 0x8;
[00:42:23.169]        // -> [DP_SELECT <= 0x00000008]
[00:42:23.169]      __var powered_down      = 0;
[00:42:23.169]        // -> [powered_down <= 0x00000000]
[00:42:23.169]      WriteDP(DP_SELECT, 0x00000000);
[00:42:23.169]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:42:23.169]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:42:23.169]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:42:23.169]        // -> [powered_down <= 0x00000001]
[00:42:23.169]    </block>
[00:42:23.169]    <control if="powered_down" while="" timeout="0" info="">
[00:42:23.169]      // if-block "powered_down"
[00:42:23.169]        // =>  TRUE
[00:42:23.169]      <block atomic="false" info="">
[00:42:23.169]        Message(0, "Debug/System power-up request sent");
[00:42:23.169]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:42:23.169]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:42:23.178]      </block>
[00:42:23.178]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:42:23.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:42:23.178]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:42:23.178]        // while-condition  =>  FALSE
[00:42:23.178]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:42:23.178]      </control>
[00:42:23.178]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:42:23.178]        // if-block "(__protocol & 0xFFFF) == 1"
[00:42:23.178]          // =>  FALSE
[00:42:23.178]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:42:23.178]      </control>
[00:42:23.178]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:42:23.178]        // if-block "(__protocol & 0xFFFF) == 2"
[00:42:23.178]          // =>  TRUE
[00:42:23.178]        <block atomic="false" info="">
[00:42:23.178]          Message(0, "executing SWD power up");
[00:42:23.178]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:42:23.183]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:42:23.183]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:42:23.183]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:42:23.183]        </block>
[00:42:23.183]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:42:23.183]      </control>
[00:42:23.183]      // end if-block "powered_down"
[00:42:23.183]    </control>
[00:42:23.183]    <block atomic="false" info="">
[00:42:23.183]      __var DEBUG_PORT_VAL    = 0;
[00:42:23.183]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:42:23.183]      __var ACCESS_POINT_VAL  = 0;
[00:42:23.183]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:42:23.183]      __ap = 1; 
[00:42:23.183]        // -> [__ap <= 0x00000001]
[00:42:23.183]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:42:23.188]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:42:23.188]      __ap = 4;
[00:42:23.188]        // -> [__ap <= 0x00000004]
[00:42:23.188]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:23.188]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:42:23.188]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:42:23.188]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:23.188]    </block>
[00:42:23.188]    <block atomic="false" info="">
[00:42:23.188]      __var nReset = 0x80;
[00:42:23.188]        // -> [nReset <= 0x00000080]
[00:42:23.188]      __var canReadPins = 0;
[00:42:23.188]        // -> [canReadPins <= 0x00000000]
[00:42:23.188]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:42:23.188]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:42:23.188]        // -> [canReadPins <= 0x00000001]
[00:42:23.188]    </block>
[00:42:23.188]    <control if="" while="1" timeout="200" info="">
[00:42:23.188]      // while "1"  (timeout="200")
[00:42:23.188]      // while-condition  =>  TRUE
[00:42:23.188]      // while "1"  (timeout="200")
[00:42:23.188]      // while-condition  =>  TRUE
[00:42:23.188]      // while "1"  (timeout="200")
[00:42:23.198]      // while-condition  =>  TRUE
[00:42:23.198]      // while "1"  (timeout="200")
[00:42:23.198]      // while  =>  TIMEOUT
[00:42:23.198]      // end while "1"
[00:42:23.198]    </control>
[00:42:23.198]    <control if="canReadPins" while="" timeout="0" info="">
[00:42:23.198]      // if-block "canReadPins"
[00:42:23.198]        // =>  TRUE
[00:42:23.198]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:42:23.198]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:42:23.198]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:42:23.198]        // while-condition  =>  FALSE
[00:42:23.198]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:42:23.198]      </control>
[00:42:23.198]      // end if-block "canReadPins"
[00:42:23.198]    </control>
[00:42:23.198]    <control if="!canReadPins" while="" timeout="0" info="">
[00:42:23.198]      // if-block "!canReadPins"
[00:42:23.198]        // =>  FALSE
[00:42:23.198]      // skip if-block "!canReadPins"
[00:42:23.198]    </control>
[00:42:23.198]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:42:23.198]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:23.198]        // =>  TRUE
[00:42:23.198]      <block atomic="false" info="">
[00:42:23.198]        WriteAP(0x00, 0x190008);
[00:42:23.198]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:23.198]        WriteAP(0xF0, 0x01);
[00:42:23.208]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:23.208]      </block>
[00:42:23.208]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:23.208]    </control>
[00:42:23.208]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:42:23.208]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:23.208]        // =>  FALSE
[00:42:23.218]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:23.218]    </control>
[00:42:23.218]    <block atomic="false" info="">
[00:42:23.218]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:23.220]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:42:23.220]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:42:23.220]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:23.220]      __ap = 0; //lets make sure we reset the access point selection
[00:42:23.220]        // -> [__ap <= 0x00000000]
[00:42:23.220]    </block>
[00:42:23.220]  </sequence>
[00:42:23.220]  
[00:42:23.238]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:42:23.238]  
[00:42:23.238]  <debugvars>
[00:42:23.238]    // Pre-defined
[00:42:23.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:23.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:23.238]    __dp=0x00000000
[00:42:23.238]    __ap=0x00000000
[00:42:23.238]    __traceout=0x00000000      (Trace Disabled)
[00:42:23.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:23.238]    __FlashAddr=0x00000000
[00:42:23.238]    __FlashLen=0x00000000
[00:42:23.248]    __FlashArg=0x00000000
[00:42:23.248]    __FlashOp=0x00000000
[00:42:23.248]    __Result=0x00000000
[00:42:23.248]  </debugvars>
[00:42:23.248]  
[00:42:23.248]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:42:23.248]    <block atomic="false" info="">
[00:42:23.249]      __var deviceID = 0;
[00:42:23.249]        // -> [deviceID <= 0x00000000]
[00:42:23.249]      __var version = 0;
[00:42:23.249]        // -> [version <= 0x00000000]
[00:42:23.249]      __var partNum = 0;
[00:42:23.249]        // -> [partNum <= 0x00000000]
[00:42:23.249]      __var manuf = 0;
[00:42:23.249]        // -> [manuf <= 0x00000000]
[00:42:23.249]      __var isMSPM0G1X0X_G3X0X = 0;
[00:42:23.249]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:42:23.249]      __var isProduction = 0;
[00:42:23.249]        // -> [isProduction <= 0x00000000]
[00:42:23.249]      __var continueId = 0;
[00:42:23.249]        // -> [continueId <= 0x00000000]
[00:42:23.249]      deviceID =   Read32(0x41C40004);
[00:42:23.249]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:42:23.249]        // -> [deviceID <= 0x2BB8802F]
[00:42:23.249]      version = deviceID >> 28;
[00:42:23.249]        // -> [version <= 0x00000002]
[00:42:23.249]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:42:23.249]        // -> [partNum <= 0x0000BB88]
[00:42:23.249]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:42:23.249]        // -> [manuf <= 0x00000017]
[00:42:23.249]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:42:23.249]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:42:23.249]      isProduction = (version > 0);
[00:42:23.249]        // -> [isProduction <= 0x00000001]
[00:42:23.249]    </block>
[00:42:23.249]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:42:23.258]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:42:23.258]        // =>  FALSE
[00:42:23.258]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:42:23.258]    </control>
[00:42:23.258]    <control if="continueId == 4" while="" timeout="0" info="">
[00:42:23.258]      // if-block "continueId == 4"
[00:42:23.258]        // =>  FALSE
[00:42:23.258]      // skip if-block "continueId == 4"
[00:42:23.258]    </control>
[00:42:23.258]    <control if="!isProduction" while="" timeout="0" info="">
[00:42:23.258]      // if-block "!isProduction"
[00:42:23.258]        // =>  FALSE
[00:42:23.258]      // skip if-block "!isProduction"
[00:42:23.258]    </control>
[00:42:23.258]  </sequence>
[00:42:23.258]  
[00:43:03.045]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:43:03.045]  
[00:43:03.054]  <debugvars>
[00:43:03.054]    // Pre-defined
[00:43:03.054]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:43:03.054]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:43:03.054]    __dp=0x00000000
[00:43:03.054]    __ap=0x00000000
[00:43:03.054]    __traceout=0x00000000      (Trace Disabled)
[00:43:03.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:43:03.054]    __FlashAddr=0x00000000
[00:43:03.054]    __FlashLen=0x00000000
[00:43:03.054]    __FlashArg=0x00000000
[00:43:03.054]    __FlashOp=0x00000000
[00:43:03.054]    __Result=0x00000000
[00:43:03.054]  </debugvars>
[00:43:03.054]  
[00:43:03.054]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:43:03.055]    <block atomic="false" info="">
[00:43:03.055]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:43:03.055]        // -> [isSWJ <= 0x00000001]
[00:43:03.055]      __var hasDormant = __protocol & 0x00020000;
[00:43:03.055]        // -> [hasDormant <= 0x00000000]
[00:43:03.055]      __var protType   = __protocol & 0x0000FFFF;
[00:43:03.055]        // -> [protType <= 0x00000002]
[00:43:03.055]    </block>
[00:43:03.055]    <control if="protType == 1" while="" timeout="0" info="">
[00:43:03.055]      // if-block "protType == 1"
[00:43:03.056]        // =>  FALSE
[00:43:03.056]      // skip if-block "protType == 1"
[00:43:03.056]    </control>
[00:43:03.056]    <control if="protType == 2" while="" timeout="0" info="">
[00:43:03.056]      // if-block "protType == 2"
[00:43:03.056]        // =>  TRUE
[00:43:03.056]      <control if="isSWJ" while="" timeout="0" info="">
[00:43:03.056]        // if-block "isSWJ"
[00:43:03.056]          // =>  TRUE
[00:43:03.056]        <control if="hasDormant" while="" timeout="0" info="">
[00:43:03.056]          // if-block "hasDormant"
[00:43:03.056]            // =>  FALSE
[00:43:03.056]          // skip if-block "hasDormant"
[00:43:03.056]        </control>
[00:43:03.056]        <control if="!hasDormant" while="" timeout="0" info="">
[00:43:03.056]          // if-block "!hasDormant"
[00:43:03.056]            // =>  TRUE
[00:43:03.056]          <block atomic="false" info="">
[00:43:03.056]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:43:03.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:43:03.061]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:43:03.061]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:43:03.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:43:03.064]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:43:03.064]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:43:03.067]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:43:03.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:43:03.067]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:43:03.067]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:43:03.070]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:43:03.070]          </block>
[00:43:03.071]          // end if-block "!hasDormant"
[00:43:03.071]        </control>
[00:43:03.071]        // end if-block "isSWJ"
[00:43:03.071]      </control>
[00:43:03.071]      <control if="!isSWJ" while="" timeout="0" info="">
[00:43:03.071]        // if-block "!isSWJ"
[00:43:03.071]          // =>  FALSE
[00:43:03.071]        // skip if-block "!isSWJ"
[00:43:03.071]      </control>
[00:43:03.071]      <block atomic="false" info="">
[00:43:03.071]        ReadDP(0x0);
[00:43:03.074]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:43:03.074]      </block>
[00:43:03.074]      // end if-block "protType == 2"
[00:43:03.074]    </control>
[00:43:03.074]  </sequence>
[00:43:03.074]  
[00:43:03.074]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:43:03.074]  
[00:43:03.074]  <debugvars>
[00:43:03.074]    // Pre-defined
[00:43:03.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:43:03.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:43:03.074]    __dp=0x00000000
[00:43:03.074]    __ap=0x00000000
[00:43:03.074]    __traceout=0x00000000      (Trace Disabled)
[00:43:03.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:43:03.074]    __FlashAddr=0x00000000
[00:43:03.074]    __FlashLen=0x00000000
[00:43:03.074]    __FlashArg=0x00000000
[00:43:03.074]    __FlashOp=0x00000000
[00:43:03.074]    __Result=0x00000000
[00:43:03.074]  </debugvars>
[00:43:03.074]  
[00:43:03.074]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:43:03.074]    <block atomic="false" info="">
[00:43:03.074]      __var SW_DP_ABORT       = 0x0;
[00:43:03.074]        // -> [SW_DP_ABORT <= 0x00000000]
[00:43:03.074]      __var DP_CTRL_STAT      = 0x4;
[00:43:03.074]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:43:03.074]      __var DP_SELECT         = 0x8;
[00:43:03.074]        // -> [DP_SELECT <= 0x00000008]
[00:43:03.074]      __var powered_down      = 0;
[00:43:03.074]        // -> [powered_down <= 0x00000000]
[00:43:03.074]      WriteDP(DP_SELECT, 0x00000000);
[00:43:03.084]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:43:03.084]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:43:03.085]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:43:03.085]        // -> [powered_down <= 0x00000001]
[00:43:03.085]    </block>
[00:43:03.085]    <control if="powered_down" while="" timeout="0" info="">
[00:43:03.085]      // if-block "powered_down"
[00:43:03.085]        // =>  TRUE
[00:43:03.085]      <block atomic="false" info="">
[00:43:03.087]        Message(0, "Debug/System power-up request sent");
[00:43:03.087]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:43:03.089]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:43:03.089]      </block>
[00:43:03.089]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:43:03.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:43:03.095]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:43:03.095]        // while-condition  =>  FALSE
[00:43:03.095]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:43:03.095]      </control>
[00:43:03.095]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:43:03.095]        // if-block "(__protocol & 0xFFFF) == 1"
[00:43:03.095]          // =>  FALSE
[00:43:03.095]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:43:03.095]      </control>
[00:43:03.095]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:43:03.095]        // if-block "(__protocol & 0xFFFF) == 2"
[00:43:03.095]          // =>  TRUE
[00:43:03.095]        <block atomic="false" info="">
[00:43:03.095]          Message(0, "executing SWD power up");
[00:43:03.095]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:43:03.097]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:43:03.097]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:43:03.097]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:43:03.097]        </block>
[00:43:03.097]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:43:03.097]      </control>
[00:43:03.097]      // end if-block "powered_down"
[00:43:03.097]    </control>
[00:43:03.097]    <block atomic="false" info="">
[00:43:03.097]      __var DEBUG_PORT_VAL    = 0;
[00:43:03.097]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:43:03.097]      __var ACCESS_POINT_VAL  = 0;
[00:43:03.097]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:43:03.097]      __ap = 1; 
[00:43:03.097]        // -> [__ap <= 0x00000001]
[00:43:03.097]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:43:03.105]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:43:03.105]      __ap = 4;
[00:43:03.105]        // -> [__ap <= 0x00000004]
[00:43:03.105]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:43:03.105]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:43:03.105]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:43:03.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:43:03.105]    </block>
[00:43:03.105]    <block atomic="false" info="">
[00:43:03.105]      __var nReset = 0x80;
[00:43:03.105]        // -> [nReset <= 0x00000080]
[00:43:03.105]      __var canReadPins = 0;
[00:43:03.105]        // -> [canReadPins <= 0x00000000]
[00:43:03.105]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:43:03.115]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:43:03.115]        // -> [canReadPins <= 0x00000001]
[00:43:03.115]    </block>
[00:43:03.115]    <control if="" while="1" timeout="200" info="">
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.115]      // while-condition  =>  TRUE
[00:43:03.115]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.125]      // while "1"  (timeout="200")
[00:43:03.125]      // while-condition  =>  TRUE
[00:43:03.135]      // while "1"  (timeout="200")
[00:43:03.135]      // while  =>  TIMEOUT
[00:43:03.135]      // end while "1"
[00:43:03.135]    </control>
[00:43:03.135]    <control if="canReadPins" while="" timeout="0" info="">
[00:43:03.135]      // if-block "canReadPins"
[00:43:03.135]        // =>  TRUE
[00:43:03.135]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:43:03.135]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:43:03.138]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:43:03.138]        // while-condition  =>  FALSE
[00:43:03.138]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:43:03.138]      </control>
[00:43:03.138]      // end if-block "canReadPins"
[00:43:03.138]    </control>
[00:43:03.138]    <control if="!canReadPins" while="" timeout="0" info="">
[00:43:03.140]      // if-block "!canReadPins"
[00:43:03.140]        // =>  FALSE
[00:43:03.140]      // skip if-block "!canReadPins"
[00:43:03.140]    </control>
[00:43:03.140]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:43:03.140]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:43:03.140]        // =>  TRUE
[00:43:03.140]      <block atomic="false" info="">
[00:43:03.140]        WriteAP(0x00, 0x190008);
[00:43:03.140]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:43:03.140]        WriteAP(0xF0, 0x01);
[00:43:03.146]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:43:03.146]      </block>
[00:43:03.146]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:43:03.146]    </control>
[00:43:03.146]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:43:03.146]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:43:03.146]        // =>  FALSE
[00:43:03.146]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:43:03.146]    </control>
[00:43:03.146]    <block atomic="false" info="">
[00:43:03.146]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:43:03.149]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:43:03.149]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:43:03.149]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:43:03.149]      __ap = 0; //lets make sure we reset the access point selection
[00:43:03.149]        // -> [__ap <= 0x00000000]
[00:43:03.149]    </block>
[00:43:03.149]  </sequence>
[00:43:03.149]  
[00:43:03.174]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:43:03.174]  
[00:43:03.174]  <debugvars>
[00:43:03.174]    // Pre-defined
[00:43:03.174]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:43:03.174]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:43:03.174]    __dp=0x00000000
[00:43:03.174]    __ap=0x00000000
[00:43:03.174]    __traceout=0x00000000      (Trace Disabled)
[00:43:03.174]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:43:03.174]    __FlashAddr=0x00000000
[00:43:03.174]    __FlashLen=0x00000000
[00:43:03.174]    __FlashArg=0x00000000
[00:43:03.174]    __FlashOp=0x00000000
[00:43:03.174]    __Result=0x00000000
[00:43:03.174]  </debugvars>
[00:43:03.174]  
[00:43:03.174]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:43:03.174]    <block atomic="false" info="">
[00:43:03.174]      __var deviceID = 0;
[00:43:03.174]        // -> [deviceID <= 0x00000000]
[00:43:03.174]      __var version = 0;
[00:43:03.174]        // -> [version <= 0x00000000]
[00:43:03.174]      __var partNum = 0;
[00:43:03.174]        // -> [partNum <= 0x00000000]
[00:43:03.179]      __var manuf = 0;
[00:43:03.179]        // -> [manuf <= 0x00000000]
[00:43:03.179]      __var isMSPM0G1X0X_G3X0X = 0;
[00:43:03.179]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:43:03.179]      __var isProduction = 0;
[00:43:03.179]        // -> [isProduction <= 0x00000000]
[00:43:03.179]      __var continueId = 0;
[00:43:03.179]        // -> [continueId <= 0x00000000]
[00:43:03.179]      deviceID =   Read32(0x41C40004);
[00:43:03.179]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:43:03.179]        // -> [deviceID <= 0x2BB8802F]
[00:43:03.179]      version = deviceID >> 28;
[00:43:03.179]        // -> [version <= 0x00000002]
[00:43:03.184]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:43:03.184]        // -> [partNum <= 0x0000BB88]
[00:43:03.184]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:43:03.184]        // -> [manuf <= 0x00000017]
[00:43:03.184]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:43:03.184]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:43:03.184]      isProduction = (version > 0);
[00:43:03.184]        // -> [isProduction <= 0x00000001]
[00:43:03.184]    </block>
[00:43:03.184]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:43:03.184]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:43:03.184]        // =>  FALSE
[00:43:03.184]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:43:03.184]    </control>
[00:43:03.184]    <control if="continueId == 4" while="" timeout="0" info="">
[00:43:03.184]      // if-block "continueId == 4"
[00:43:03.184]        // =>  FALSE
[00:43:03.184]      // skip if-block "continueId == 4"
[00:43:03.184]    </control>
[00:43:03.184]    <control if="!isProduction" while="" timeout="0" info="">
[00:43:03.184]      // if-block "!isProduction"
[00:43:03.184]        // =>  FALSE
[00:43:03.184]      // skip if-block "!isProduction"
[00:43:03.184]    </control>
[00:43:03.184]  </sequence>
[00:43:03.184]  
[00:43:34.372]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:43:34.372]  
[00:43:34.380]  <debugvars>
[00:43:34.380]    // Pre-defined
[00:43:34.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:43:34.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:43:34.380]    __dp=0x00000000
[00:43:34.380]    __ap=0x00000000
[00:43:34.380]    __traceout=0x00000000      (Trace Disabled)
[00:43:34.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:43:34.381]    __FlashAddr=0x00000000
[00:43:34.381]    __FlashLen=0x00000000
[00:43:34.381]    __FlashArg=0x00000000
[00:43:34.381]    __FlashOp=0x00000000
[00:43:34.382]    __Result=0x00000000
[00:43:34.382]  </debugvars>
[00:43:34.382]  
[00:43:34.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:43:34.382]    <block atomic="false" info="">
[00:43:34.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:43:34.382]        // -> [isSWJ <= 0x00000001]
[00:43:34.382]      __var hasDormant = __protocol & 0x00020000;
[00:43:34.382]        // -> [hasDormant <= 0x00000000]
[00:43:34.382]      __var protType   = __protocol & 0x0000FFFF;
[00:43:34.382]        // -> [protType <= 0x00000002]
[00:43:34.383]    </block>
[00:43:34.383]    <control if="protType == 1" while="" timeout="0" info="">
[00:43:34.383]      // if-block "protType == 1"
[00:43:34.383]        // =>  FALSE
[00:43:34.383]      // skip if-block "protType == 1"
[00:43:34.383]    </control>
[00:43:34.383]    <control if="protType == 2" while="" timeout="0" info="">
[00:43:34.383]      // if-block "protType == 2"
[00:43:34.383]        // =>  TRUE
[00:43:34.383]      <control if="isSWJ" while="" timeout="0" info="">
[00:43:34.383]        // if-block "isSWJ"
[00:43:34.383]          // =>  TRUE
[00:43:34.383]        <control if="hasDormant" while="" timeout="0" info="">
[00:43:34.383]          // if-block "hasDormant"
[00:43:34.383]            // =>  FALSE
[00:43:34.383]          // skip if-block "hasDormant"
[00:43:34.383]        </control>
[00:43:34.383]        <control if="!hasDormant" while="" timeout="0" info="">
[00:43:34.383]          // if-block "!hasDormant"
[00:43:34.383]            // =>  TRUE
[00:43:34.383]          <block atomic="false" info="">
[00:43:34.383]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:43:34.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:43:34.383]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:43:34.383]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:43:34.383]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:43:34.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:43:34.383]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:43:34.383]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:43:34.383]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:43:34.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:43:34.392]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:43:34.394]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:43:34.394]          </block>
[00:43:34.394]          // end if-block "!hasDormant"
[00:43:34.394]        </control>
[00:43:34.394]        // end if-block "isSWJ"
[00:43:34.394]      </control>
[00:43:34.394]      <control if="!isSWJ" while="" timeout="0" info="">
[00:43:34.394]        // if-block "!isSWJ"
[00:43:34.394]          // =>  FALSE
[00:43:34.394]        // skip if-block "!isSWJ"
[00:43:34.394]      </control>
[00:43:34.394]      <block atomic="false" info="">
[00:43:34.394]        ReadDP(0x0);
[00:43:34.394]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:43:34.394]      </block>
[00:43:34.394]      // end if-block "protType == 2"
[00:43:34.394]    </control>
[00:43:34.394]  </sequence>
[00:43:34.394]  
[00:43:34.403]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:43:34.403]  
[00:43:34.403]  <debugvars>
[00:43:34.403]    // Pre-defined
[00:43:34.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:43:34.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:43:34.403]    __dp=0x00000000
[00:43:34.403]    __ap=0x00000000
[00:43:34.403]    __traceout=0x00000000      (Trace Disabled)
[00:43:34.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:43:34.403]    __FlashAddr=0x00000000
[00:43:34.403]    __FlashLen=0x00000000
[00:43:34.403]    __FlashArg=0x00000000
[00:43:34.403]    __FlashOp=0x00000000
[00:43:34.403]    __Result=0x00000000
[00:43:34.403]  </debugvars>
[00:43:34.403]  
[00:43:34.403]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:43:34.403]    <block atomic="false" info="">
[00:43:34.403]      __var SW_DP_ABORT       = 0x0;
[00:43:34.403]        // -> [SW_DP_ABORT <= 0x00000000]
[00:43:34.403]      __var DP_CTRL_STAT      = 0x4;
[00:43:34.409]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:43:34.409]      __var DP_SELECT         = 0x8;
[00:43:34.409]        // -> [DP_SELECT <= 0x00000008]
[00:43:34.409]      __var powered_down      = 0;
[00:43:34.409]        // -> [powered_down <= 0x00000000]
[00:43:34.409]      WriteDP(DP_SELECT, 0x00000000);
[00:43:34.409]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:43:34.409]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:43:34.412]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:43:34.412]        // -> [powered_down <= 0x00000001]
[00:43:34.412]    </block>
[00:43:34.412]    <control if="powered_down" while="" timeout="0" info="">
[00:43:34.412]      // if-block "powered_down"
[00:43:34.412]        // =>  TRUE
[00:43:34.412]      <block atomic="false" info="">
[00:43:34.412]        Message(0, "Debug/System power-up request sent");
[00:43:34.412]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:43:34.412]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:43:34.412]      </block>
[00:43:34.412]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:43:34.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:43:34.412]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:43:34.412]        // while-condition  =>  FALSE
[00:43:34.412]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:43:34.412]      </control>
[00:43:34.412]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:43:34.412]        // if-block "(__protocol & 0xFFFF) == 1"
[00:43:34.412]          // =>  FALSE
[00:43:34.412]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:43:34.412]      </control>
[00:43:34.412]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:43:34.412]        // if-block "(__protocol & 0xFFFF) == 2"
[00:43:34.412]          // =>  TRUE
[00:43:34.412]        <block atomic="false" info="">
[00:43:34.412]          Message(0, "executing SWD power up");
[00:43:34.412]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:43:34.423]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:43:34.423]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:43:34.423]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:43:34.432]        </block>
[00:43:34.432]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:43:34.432]      </control>
[00:43:34.432]      // end if-block "powered_down"
[00:43:34.432]    </control>
[00:43:34.432]    <block atomic="false" info="">
[00:43:34.432]      __var DEBUG_PORT_VAL    = 0;
[00:43:34.432]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:43:34.432]      __var ACCESS_POINT_VAL  = 0;
[00:43:34.432]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:43:34.432]      __ap = 1; 
[00:43:34.432]        // -> [__ap <= 0x00000001]
[00:43:34.432]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:43:34.435]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:43:34.435]      __ap = 4;
[00:43:34.435]        // -> [__ap <= 0x00000004]
[00:43:34.435]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:43:34.443]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:43:34.443]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:43:34.443]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:43:34.443]    </block>
[00:43:34.443]    <block atomic="false" info="">
[00:43:34.443]      __var nReset = 0x80;
[00:43:34.443]        // -> [nReset <= 0x00000080]
[00:43:34.445]      __var canReadPins = 0;
[00:43:34.445]        // -> [canReadPins <= 0x00000000]
[00:43:34.445]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:43:34.445]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:43:34.445]        // -> [canReadPins <= 0x00000001]
[00:43:34.445]    </block>
[00:43:34.445]    <control if="" while="1" timeout="200" info="">
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.445]      // while "1"  (timeout="200")
[00:43:34.445]      // while-condition  =>  TRUE
[00:43:34.450]      // while "1"  (timeout="200")
[00:43:34.450]      // while-condition  =>  TRUE
[00:43:34.450]      // while "1"  (timeout="200")
[00:43:34.450]      // while-condition  =>  TRUE
[00:43:34.450]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.451]      // while "1"  (timeout="200")
[00:43:34.451]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.453]      // while "1"  (timeout="200")
[00:43:34.453]      // while-condition  =>  TRUE
[00:43:34.463]      // while "1"  (timeout="200")
[00:43:34.463]      // while  =>  TIMEOUT
[00:43:34.463]      // end while "1"
[00:43:34.463]    </control>
[00:43:34.463]    <control if="canReadPins" while="" timeout="0" info="">
[00:43:34.463]      // if-block "canReadPins"
[00:43:34.463]        // =>  TRUE
[00:43:34.463]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:43:34.463]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:43:34.463]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:43:34.463]        // while-condition  =>  FALSE
[00:43:34.463]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:43:34.463]      </control>
[00:43:34.463]      // end if-block "canReadPins"
[00:43:34.463]    </control>
[00:43:34.463]    <control if="!canReadPins" while="" timeout="0" info="">
[00:43:34.463]      // if-block "!canReadPins"
[00:43:34.463]        // =>  FALSE
[00:43:34.463]      // skip if-block "!canReadPins"
[00:43:34.463]    </control>
[00:43:34.463]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:43:34.463]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:43:34.463]        // =>  TRUE
[00:43:34.463]      <block atomic="false" info="">
[00:43:34.463]        WriteAP(0x00, 0x190008);
[00:43:34.463]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:43:34.463]        WriteAP(0xF0, 0x01);
[00:43:34.473]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:43:34.473]      </block>
[00:43:34.473]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:43:34.473]    </control>
[00:43:34.473]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:43:34.473]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:43:34.473]        // =>  FALSE
[00:43:34.473]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:43:34.473]    </control>
[00:43:34.473]    <block atomic="false" info="">
[00:43:34.473]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:43:34.473]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:43:34.473]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:43:34.473]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:43:34.473]      __ap = 0; //lets make sure we reset the access point selection
[00:43:34.473]        // -> [__ap <= 0x00000000]
[00:43:34.473]    </block>
[00:43:34.473]  </sequence>
[00:43:34.473]  
[00:43:34.506]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:43:34.506]  
[00:43:34.506]  <debugvars>
[00:43:34.506]    // Pre-defined
[00:43:34.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:43:34.513]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:43:34.513]    __dp=0x00000000
[00:43:34.513]    __ap=0x00000000
[00:43:34.513]    __traceout=0x00000000      (Trace Disabled)
[00:43:34.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:43:34.513]    __FlashAddr=0x00000000
[00:43:34.513]    __FlashLen=0x00000000
[00:43:34.513]    __FlashArg=0x00000000
[00:43:34.513]    __FlashOp=0x00000000
[00:43:34.513]    __Result=0x00000000
[00:43:34.513]  </debugvars>
[00:43:34.513]  
[00:43:34.513]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:43:34.513]    <block atomic="false" info="">
[00:43:34.514]      __var deviceID = 0;
[00:43:34.514]        // -> [deviceID <= 0x00000000]
[00:43:34.514]      __var version = 0;
[00:43:34.514]        // -> [version <= 0x00000000]
[00:43:34.514]      __var partNum = 0;
[00:43:34.514]        // -> [partNum <= 0x00000000]
[00:43:34.515]      __var manuf = 0;
[00:43:34.515]        // -> [manuf <= 0x00000000]
[00:43:34.515]      __var isMSPM0G1X0X_G3X0X = 0;
[00:43:34.515]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:43:34.515]      __var isProduction = 0;
[00:43:34.515]        // -> [isProduction <= 0x00000000]
[00:43:34.515]      __var continueId = 0;
[00:43:34.515]        // -> [continueId <= 0x00000000]
[00:43:34.515]      deviceID =   Read32(0x41C40004);
[00:43:34.523]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:43:34.523]        // -> [deviceID <= 0x2BB8802F]
[00:43:34.523]      version = deviceID >> 28;
[00:43:34.523]        // -> [version <= 0x00000002]
[00:43:34.523]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:43:34.523]        // -> [partNum <= 0x0000BB88]
[00:43:34.523]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:43:34.523]        // -> [manuf <= 0x00000017]
[00:43:34.523]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:43:34.523]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:43:34.523]      isProduction = (version > 0);
[00:43:34.523]        // -> [isProduction <= 0x00000001]
[00:43:34.523]    </block>
[00:43:34.523]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:43:34.523]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:43:34.523]        // =>  FALSE
[00:43:34.523]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:43:34.523]    </control>
[00:43:34.523]    <control if="continueId == 4" while="" timeout="0" info="">
[00:43:34.523]      // if-block "continueId == 4"
[00:43:34.523]        // =>  FALSE
[00:43:34.523]      // skip if-block "continueId == 4"
[00:43:34.523]    </control>
[00:43:34.523]    <control if="!isProduction" while="" timeout="0" info="">
[00:43:34.523]      // if-block "!isProduction"
[00:43:34.523]        // =>  FALSE
[00:43:34.523]      // skip if-block "!isProduction"
[00:43:34.523]    </control>
[00:43:34.523]  </sequence>
[00:43:34.523]  
[01:08:16.370]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:08:16.370]  
[01:08:16.370]  <debugvars>
[01:08:16.370]    // Pre-defined
[01:08:16.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:16.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:08:16.370]    __dp=0x00000000
[01:08:16.370]    __ap=0x00000000
[01:08:16.370]    __traceout=0x00000000      (Trace Disabled)
[01:08:16.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:16.370]    __FlashAddr=0x00000000
[01:08:16.370]    __FlashLen=0x00000000
[01:08:16.370]    __FlashArg=0x00000000
[01:08:16.370]    __FlashOp=0x00000000
[01:08:16.370]    __Result=0x00000000
[01:08:16.370]  </debugvars>
[01:08:16.370]  
[01:08:16.370]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:08:16.370]    <block atomic="false" info="">
[01:08:16.370]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:08:16.370]        // -> [isSWJ <= 0x00000001]
[01:08:16.370]      __var hasDormant = __protocol & 0x00020000;
[01:08:16.370]        // -> [hasDormant <= 0x00000000]
[01:08:16.370]      __var protType   = __protocol & 0x0000FFFF;
[01:08:16.370]        // -> [protType <= 0x00000002]
[01:08:16.370]    </block>
[01:08:16.370]    <control if="protType == 1" while="" timeout="0" info="">
[01:08:16.370]      // if-block "protType == 1"
[01:08:16.370]        // =>  FALSE
[01:08:16.370]      // skip if-block "protType == 1"
[01:08:16.370]    </control>
[01:08:16.370]    <control if="protType == 2" while="" timeout="0" info="">
[01:08:16.370]      // if-block "protType == 2"
[01:08:16.374]        // =>  TRUE
[01:08:16.374]      <control if="isSWJ" while="" timeout="0" info="">
[01:08:16.374]        // if-block "isSWJ"
[01:08:16.374]          // =>  TRUE
[01:08:16.374]        <control if="hasDormant" while="" timeout="0" info="">
[01:08:16.374]          // if-block "hasDormant"
[01:08:16.374]            // =>  FALSE
[01:08:16.374]          // skip if-block "hasDormant"
[01:08:16.374]        </control>
[01:08:16.374]        <control if="!hasDormant" while="" timeout="0" info="">
[01:08:16.374]          // if-block "!hasDormant"
[01:08:16.374]            // =>  TRUE
[01:08:16.374]          <block atomic="false" info="">
[01:08:16.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:08:16.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:16.378]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:08:16.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:08:16.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:08:16.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:16.384]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:08:16.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:08:16.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:08:16.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:16.386]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:08:16.386]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:08:16.386]          </block>
[01:08:16.386]          // end if-block "!hasDormant"
[01:08:16.386]        </control>
[01:08:16.386]        // end if-block "isSWJ"
[01:08:16.386]      </control>
[01:08:16.386]      <control if="!isSWJ" while="" timeout="0" info="">
[01:08:16.386]        // if-block "!isSWJ"
[01:08:16.386]          // =>  FALSE
[01:08:16.386]        // skip if-block "!isSWJ"
[01:08:16.386]      </control>
[01:08:16.386]      <block atomic="false" info="">
[01:08:16.386]        ReadDP(0x0);
[01:08:16.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:08:16.392]      </block>
[01:08:16.392]      // end if-block "protType == 2"
[01:08:16.392]    </control>
[01:08:16.392]  </sequence>
[01:08:16.392]  
[01:08:16.395]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:08:16.395]  
[01:08:16.395]  <debugvars>
[01:08:16.395]    // Pre-defined
[01:08:16.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:16.395]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:08:16.395]    __dp=0x00000000
[01:08:16.395]    __ap=0x00000000
[01:08:16.395]    __traceout=0x00000000      (Trace Disabled)
[01:08:16.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:16.395]    __FlashAddr=0x00000000
[01:08:16.397]    __FlashLen=0x00000000
[01:08:16.397]    __FlashArg=0x00000000
[01:08:16.397]    __FlashOp=0x00000000
[01:08:16.397]    __Result=0x00000000
[01:08:16.397]  </debugvars>
[01:08:16.397]  
[01:08:16.397]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:08:16.397]    <block atomic="false" info="">
[01:08:16.397]      __var SW_DP_ABORT       = 0x0;
[01:08:16.399]        // -> [SW_DP_ABORT <= 0x00000000]
[01:08:16.399]      __var DP_CTRL_STAT      = 0x4;
[01:08:16.399]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:08:16.399]      __var DP_SELECT         = 0x8;
[01:08:16.399]        // -> [DP_SELECT <= 0x00000008]
[01:08:16.399]      __var powered_down      = 0;
[01:08:16.399]        // -> [powered_down <= 0x00000000]
[01:08:16.399]      WriteDP(DP_SELECT, 0x00000000);
[01:08:16.403]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:08:16.403]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:08:16.407]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:08:16.407]        // -> [powered_down <= 0x00000001]
[01:08:16.407]    </block>
[01:08:16.407]    <control if="powered_down" while="" timeout="0" info="">
[01:08:16.411]      // if-block "powered_down"
[01:08:16.411]        // =>  TRUE
[01:08:16.411]      <block atomic="false" info="">
[01:08:16.411]        Message(0, "Debug/System power-up request sent");
[01:08:16.411]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:08:16.413]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:08:16.413]      </block>
[01:08:16.413]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:08:16.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:08:16.416]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:08:16.416]        // while-condition  =>  FALSE
[01:08:16.417]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:08:16.417]      </control>
[01:08:16.417]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:08:16.417]        // if-block "(__protocol & 0xFFFF) == 1"
[01:08:16.417]          // =>  FALSE
[01:08:16.417]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:08:16.417]      </control>
[01:08:16.417]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:08:16.417]        // if-block "(__protocol & 0xFFFF) == 2"
[01:08:16.417]          // =>  TRUE
[01:08:16.417]        <block atomic="false" info="">
[01:08:16.417]          Message(0, "executing SWD power up");
[01:08:16.417]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:08:16.419]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:08:16.420]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:08:16.421]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:08:16.421]        </block>
[01:08:16.421]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:08:16.421]      </control>
[01:08:16.421]      // end if-block "powered_down"
[01:08:16.421]    </control>
[01:08:16.421]    <block atomic="false" info="">
[01:08:16.421]      __var DEBUG_PORT_VAL    = 0;
[01:08:16.421]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:08:16.421]      __var ACCESS_POINT_VAL  = 0;
[01:08:16.421]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:08:16.421]      __ap = 1; 
[01:08:16.421]        // -> [__ap <= 0x00000001]
[01:08:16.421]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:08:16.424]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:08:16.424]      __ap = 4;
[01:08:16.424]        // -> [__ap <= 0x00000004]
[01:08:16.424]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:16.428]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:08:16.431]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:08:16.431]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:16.431]    </block>
[01:08:16.431]    <block atomic="false" info="">
[01:08:16.431]      __var nReset = 0x80;
[01:08:16.431]        // -> [nReset <= 0x00000080]
[01:08:16.431]      __var canReadPins = 0;
[01:08:16.431]        // -> [canReadPins <= 0x00000000]
[01:08:16.431]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:08:16.434]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:08:16.434]        // -> [canReadPins <= 0x00000001]
[01:08:16.434]    </block>
[01:08:16.434]    <control if="" while="1" timeout="200" info="">
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.434]      // while-condition  =>  TRUE
[01:08:16.434]      // while "1"  (timeout="200")
[01:08:16.437]      // while-condition  =>  TRUE
[01:08:16.437]      // while "1"  (timeout="200")
[01:08:16.437]      // while-condition  =>  TRUE
[01:08:16.437]      // while "1"  (timeout="200")
[01:08:16.437]      // while-condition  =>  TRUE
[01:08:16.437]      // while "1"  (timeout="200")
[01:08:16.437]      // while-condition  =>  TRUE
[01:08:16.437]      // while "1"  (timeout="200")
[01:08:16.437]      // while-condition  =>  TRUE
[01:08:16.437]      // while "1"  (timeout="200")
[01:08:16.437]      // while-condition  =>  TRUE
[01:08:16.437]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.438]      // while-condition  =>  TRUE
[01:08:16.438]      // while "1"  (timeout="200")
[01:08:16.440]      // while-condition  =>  TRUE
[01:08:16.440]      // while "1"  (timeout="200")
[01:08:16.440]      // while-condition  =>  TRUE
[01:08:16.440]      // while "1"  (timeout="200")
[01:08:16.440]      // while-condition  =>  TRUE
[01:08:16.440]      // while "1"  (timeout="200")
[01:08:16.440]      // while-condition  =>  TRUE
[01:08:16.440]      // while "1"  (timeout="200")
[01:08:16.440]      // while-condition  =>  TRUE
[01:08:16.440]      // while "1"  (timeout="200")
[01:08:16.441]      // while-condition  =>  TRUE
[01:08:16.441]      // while "1"  (timeout="200")
[01:08:16.441]      // while  =>  TIMEOUT
[01:08:16.441]      // end while "1"
[01:08:16.441]    </control>
[01:08:16.441]    <control if="canReadPins" while="" timeout="0" info="">
[01:08:16.441]      // if-block "canReadPins"
[01:08:16.441]        // =>  TRUE
[01:08:16.441]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:08:16.441]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:08:16.441]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:08:16.441]        // while-condition  =>  FALSE
[01:08:16.441]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:08:16.441]      </control>
[01:08:16.441]      // end if-block "canReadPins"
[01:08:16.441]    </control>
[01:08:16.441]    <control if="!canReadPins" while="" timeout="0" info="">
[01:08:16.444]      // if-block "!canReadPins"
[01:08:16.444]        // =>  FALSE
[01:08:16.444]      // skip if-block "!canReadPins"
[01:08:16.444]    </control>
[01:08:16.444]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:08:16.444]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:16.444]        // =>  TRUE
[01:08:16.444]      <block atomic="false" info="">
[01:08:16.444]        WriteAP(0x00, 0x190008);
[01:08:16.446]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:16.446]        WriteAP(0xF0, 0x01);
[01:08:16.453]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:16.453]      </block>
[01:08:16.453]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:16.453]    </control>
[01:08:16.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:08:16.453]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:16.453]        // =>  FALSE
[01:08:16.453]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:16.453]    </control>
[01:08:16.453]    <block atomic="false" info="">
[01:08:16.453]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:16.457]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:08:16.457]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:08:16.461]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:16.461]      __ap = 0; //lets make sure we reset the access point selection
[01:08:16.462]        // -> [__ap <= 0x00000000]
[01:08:16.462]    </block>
[01:08:16.462]  </sequence>
[01:08:16.462]  
[01:08:16.486]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:08:16.486]  
[01:08:16.486]  <debugvars>
[01:08:16.486]    // Pre-defined
[01:08:16.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:16.486]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:08:16.486]    __dp=0x00000000
[01:08:16.486]    __ap=0x00000000
[01:08:16.486]    __traceout=0x00000000      (Trace Disabled)
[01:08:16.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:16.486]    __FlashAddr=0x00000000
[01:08:16.490]    __FlashLen=0x00000000
[01:08:16.490]    __FlashArg=0x00000000
[01:08:16.490]    __FlashOp=0x00000000
[01:08:16.490]    __Result=0x00000000
[01:08:16.490]  </debugvars>
[01:08:16.490]  
[01:08:16.490]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:08:16.490]    <block atomic="false" info="">
[01:08:16.490]      __var deviceID = 0;
[01:08:16.490]        // -> [deviceID <= 0x00000000]
[01:08:16.490]      __var version = 0;
[01:08:16.490]        // -> [version <= 0x00000000]
[01:08:16.490]      __var partNum = 0;
[01:08:16.490]        // -> [partNum <= 0x00000000]
[01:08:16.490]      __var manuf = 0;
[01:08:16.490]        // -> [manuf <= 0x00000000]
[01:08:16.490]      __var isMSPM0G1X0X_G3X0X = 0;
[01:08:16.490]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:08:16.490]      __var isProduction = 0;
[01:08:16.490]        // -> [isProduction <= 0x00000000]
[01:08:16.492]      __var continueId = 0;
[01:08:16.492]        // -> [continueId <= 0x00000000]
[01:08:16.492]      deviceID =   Read32(0x41C40004);
[01:08:16.495]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:08:16.495]        // -> [deviceID <= 0x2BB8802F]
[01:08:16.495]      version = deviceID >> 28;
[01:08:16.495]        // -> [version <= 0x00000002]
[01:08:16.495]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:08:16.499]        // -> [partNum <= 0x0000BB88]
[01:08:16.499]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:08:16.499]        // -> [manuf <= 0x00000017]
[01:08:16.499]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:08:16.499]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:08:16.499]      isProduction = (version > 0);
[01:08:16.499]        // -> [isProduction <= 0x00000001]
[01:08:16.499]    </block>
[01:08:16.499]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:08:16.499]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:08:16.499]        // =>  FALSE
[01:08:16.499]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:08:16.499]    </control>
[01:08:16.499]    <control if="continueId == 4" while="" timeout="0" info="">
[01:08:16.499]      // if-block "continueId == 4"
[01:08:16.499]        // =>  FALSE
[01:08:16.499]      // skip if-block "continueId == 4"
[01:08:16.499]    </control>
[01:08:16.499]    <control if="!isProduction" while="" timeout="0" info="">
[01:08:16.499]      // if-block "!isProduction"
[01:08:16.499]        // =>  FALSE
[01:08:16.499]      // skip if-block "!isProduction"
[01:08:16.499]    </control>
[01:08:16.499]  </sequence>
[01:08:16.499]  
[01:08:22.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:08:22.204]  
[01:08:22.215]  <debugvars>
[01:08:22.215]    // Pre-defined
[01:08:22.215]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:22.215]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:08:22.215]    __dp=0x00000000
[01:08:22.215]    __ap=0x00000000
[01:08:22.215]    __traceout=0x00000000      (Trace Disabled)
[01:08:22.215]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:22.215]    __FlashAddr=0x00000000
[01:08:22.215]    __FlashLen=0x00000000
[01:08:22.216]    __FlashArg=0x00000000
[01:08:22.216]    __FlashOp=0x00000000
[01:08:22.216]    __Result=0x00000000
[01:08:22.216]  </debugvars>
[01:08:22.216]  
[01:08:22.216]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:08:22.216]    <block atomic="false" info="">
[01:08:22.216]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:08:22.216]        // -> [isSWJ <= 0x00000001]
[01:08:22.216]      __var hasDormant = __protocol & 0x00020000;
[01:08:22.216]        // -> [hasDormant <= 0x00000000]
[01:08:22.216]      __var protType   = __protocol & 0x0000FFFF;
[01:08:22.216]        // -> [protType <= 0x00000002]
[01:08:22.216]    </block>
[01:08:22.216]    <control if="protType == 1" while="" timeout="0" info="">
[01:08:22.216]      // if-block "protType == 1"
[01:08:22.216]        // =>  FALSE
[01:08:22.216]      // skip if-block "protType == 1"
[01:08:22.216]    </control>
[01:08:22.216]    <control if="protType == 2" while="" timeout="0" info="">
[01:08:22.216]      // if-block "protType == 2"
[01:08:22.216]        // =>  TRUE
[01:08:22.216]      <control if="isSWJ" while="" timeout="0" info="">
[01:08:22.216]        // if-block "isSWJ"
[01:08:22.216]          // =>  TRUE
[01:08:22.216]        <control if="hasDormant" while="" timeout="0" info="">
[01:08:22.216]          // if-block "hasDormant"
[01:08:22.216]            // =>  FALSE
[01:08:22.216]          // skip if-block "hasDormant"
[01:08:22.216]        </control>
[01:08:22.216]        <control if="!hasDormant" while="" timeout="0" info="">
[01:08:22.216]          // if-block "!hasDormant"
[01:08:22.216]            // =>  TRUE
[01:08:22.216]          <block atomic="false" info="">
[01:08:22.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:08:22.220]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:22.220]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:08:22.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:08:22.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:08:22.228]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:22.228]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:08:22.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:08:22.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:08:22.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:22.236]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:08:22.238]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:08:22.238]          </block>
[01:08:22.238]          // end if-block "!hasDormant"
[01:08:22.238]        </control>
[01:08:22.238]        // end if-block "isSWJ"
[01:08:22.238]      </control>
[01:08:22.238]      <control if="!isSWJ" while="" timeout="0" info="">
[01:08:22.238]        // if-block "!isSWJ"
[01:08:22.238]          // =>  FALSE
[01:08:22.238]        // skip if-block "!isSWJ"
[01:08:22.238]      </control>
[01:08:22.238]      <block atomic="false" info="">
[01:08:22.238]        ReadDP(0x0);
[01:08:22.240]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:08:22.240]      </block>
[01:08:22.240]      // end if-block "protType == 2"
[01:08:22.240]    </control>
[01:08:22.240]  </sequence>
[01:08:22.240]  
[01:08:22.240]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:08:22.240]  
[01:08:22.240]  <debugvars>
[01:08:22.240]    // Pre-defined
[01:08:22.240]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:22.240]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:08:22.244]    __dp=0x00000000
[01:08:22.244]    __ap=0x00000000
[01:08:22.244]    __traceout=0x00000000      (Trace Disabled)
[01:08:22.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:22.244]    __FlashAddr=0x00000000
[01:08:22.244]    __FlashLen=0x00000000
[01:08:22.244]    __FlashArg=0x00000000
[01:08:22.244]    __FlashOp=0x00000000
[01:08:22.244]    __Result=0x00000000
[01:08:22.244]  </debugvars>
[01:08:22.244]  
[01:08:22.244]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:08:22.244]    <block atomic="false" info="">
[01:08:22.244]      __var SW_DP_ABORT       = 0x0;
[01:08:22.244]        // -> [SW_DP_ABORT <= 0x00000000]
[01:08:22.244]      __var DP_CTRL_STAT      = 0x4;
[01:08:22.244]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:08:22.244]      __var DP_SELECT         = 0x8;
[01:08:22.244]        // -> [DP_SELECT <= 0x00000008]
[01:08:22.244]      __var powered_down      = 0;
[01:08:22.244]        // -> [powered_down <= 0x00000000]
[01:08:22.244]      WriteDP(DP_SELECT, 0x00000000);
[01:08:22.248]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:08:22.248]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:08:22.252]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:08:22.252]        // -> [powered_down <= 0x00000001]
[01:08:22.252]    </block>
[01:08:22.252]    <control if="powered_down" while="" timeout="0" info="">
[01:08:22.252]      // if-block "powered_down"
[01:08:22.252]        // =>  TRUE
[01:08:22.252]      <block atomic="false" info="">
[01:08:22.252]        Message(0, "Debug/System power-up request sent");
[01:08:22.252]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:08:22.256]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:08:22.256]      </block>
[01:08:22.256]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:08:22.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:08:22.260]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:08:22.260]        // while-condition  =>  FALSE
[01:08:22.260]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:08:22.260]      </control>
[01:08:22.260]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:08:22.260]        // if-block "(__protocol & 0xFFFF) == 1"
[01:08:22.260]          // =>  FALSE
[01:08:22.264]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:08:22.264]      </control>
[01:08:22.264]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:08:22.264]        // if-block "(__protocol & 0xFFFF) == 2"
[01:08:22.264]          // =>  TRUE
[01:08:22.264]        <block atomic="false" info="">
[01:08:22.264]          Message(0, "executing SWD power up");
[01:08:22.264]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:08:22.268]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:08:22.268]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:08:22.268]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:08:22.268]        </block>
[01:08:22.268]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:08:22.268]      </control>
[01:08:22.268]      // end if-block "powered_down"
[01:08:22.268]    </control>
[01:08:22.268]    <block atomic="false" info="">
[01:08:22.272]      __var DEBUG_PORT_VAL    = 0;
[01:08:22.272]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:08:22.272]      __var ACCESS_POINT_VAL  = 0;
[01:08:22.272]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:08:22.272]      __ap = 1; 
[01:08:22.272]        // -> [__ap <= 0x00000001]
[01:08:22.272]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:08:22.277]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:08:22.277]      __ap = 4;
[01:08:22.277]        // -> [__ap <= 0x00000004]
[01:08:22.277]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:22.277]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:08:22.281]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:08:22.281]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:22.281]    </block>
[01:08:22.281]    <block atomic="false" info="">
[01:08:22.281]      __var nReset = 0x80;
[01:08:22.281]        // -> [nReset <= 0x00000080]
[01:08:22.281]      __var canReadPins = 0;
[01:08:22.281]        // -> [canReadPins <= 0x00000000]
[01:08:22.281]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:08:22.285]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:08:22.285]        // -> [canReadPins <= 0x00000001]
[01:08:22.285]    </block>
[01:08:22.285]    <control if="" while="1" timeout="200" info="">
[01:08:22.285]      // while "1"  (timeout="200")
[01:08:22.285]      // while-condition  =>  TRUE
[01:08:22.285]      // while "1"  (timeout="200")
[01:08:22.285]      // while-condition  =>  TRUE
[01:08:22.285]      // while "1"  (timeout="200")
[01:08:22.285]      // while-condition  =>  TRUE
[01:08:22.285]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.287]      // while "1"  (timeout="200")
[01:08:22.287]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.289]      // while-condition  =>  TRUE
[01:08:22.289]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.293]      // while "1"  (timeout="200")
[01:08:22.293]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.297]      // while "1"  (timeout="200")
[01:08:22.297]      // while-condition  =>  TRUE
[01:08:22.300]      // while "1"  (timeout="200")
[01:08:22.300]      // while  =>  TIMEOUT
[01:08:22.300]      // end while "1"
[01:08:22.300]    </control>
[01:08:22.300]    <control if="canReadPins" while="" timeout="0" info="">
[01:08:22.300]      // if-block "canReadPins"
[01:08:22.300]        // =>  TRUE
[01:08:22.300]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:08:22.300]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:08:22.301]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:08:22.301]        // while-condition  =>  FALSE
[01:08:22.301]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:08:22.301]      </control>
[01:08:22.301]      // end if-block "canReadPins"
[01:08:22.301]    </control>
[01:08:22.301]    <control if="!canReadPins" while="" timeout="0" info="">
[01:08:22.301]      // if-block "!canReadPins"
[01:08:22.301]        // =>  FALSE
[01:08:22.301]      // skip if-block "!canReadPins"
[01:08:22.301]    </control>
[01:08:22.301]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:08:22.301]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:22.301]        // =>  TRUE
[01:08:22.301]      <block atomic="false" info="">
[01:08:22.301]        WriteAP(0x00, 0x190008);
[01:08:22.305]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:22.305]        WriteAP(0xF0, 0x01);
[01:08:22.309]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:22.309]      </block>
[01:08:22.309]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:22.309]    </control>
[01:08:22.309]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:08:22.309]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:22.309]        // =>  FALSE
[01:08:22.309]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:22.309]    </control>
[01:08:22.309]    <block atomic="false" info="">
[01:08:22.309]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:22.313]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:08:22.313]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:08:22.313]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:22.313]      __ap = 0; //lets make sure we reset the access point selection
[01:08:22.313]        // -> [__ap <= 0x00000000]
[01:08:22.313]    </block>
[01:08:22.313]  </sequence>
[01:08:22.313]  
[01:08:22.343]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:08:22.343]  
[01:08:22.343]  <debugvars>
[01:08:22.343]    // Pre-defined
[01:08:22.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:22.343]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:08:22.343]    __dp=0x00000000
[01:08:22.343]    __ap=0x00000000
[01:08:22.343]    __traceout=0x00000000      (Trace Disabled)
[01:08:22.343]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:22.343]    __FlashAddr=0x00000000
[01:08:22.344]    __FlashLen=0x00000000
[01:08:22.344]    __FlashArg=0x00000000
[01:08:22.344]    __FlashOp=0x00000000
[01:08:22.344]    __Result=0x00000000
[01:08:22.344]  </debugvars>
[01:08:22.344]  
[01:08:22.344]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:08:22.344]    <block atomic="false" info="">
[01:08:22.344]      __var deviceID = 0;
[01:08:22.344]        // -> [deviceID <= 0x00000000]
[01:08:22.344]      __var version = 0;
[01:08:22.345]        // -> [version <= 0x00000000]
[01:08:22.345]      __var partNum = 0;
[01:08:22.345]        // -> [partNum <= 0x00000000]
[01:08:22.345]      __var manuf = 0;
[01:08:22.345]        // -> [manuf <= 0x00000000]
[01:08:22.345]      __var isMSPM0G1X0X_G3X0X = 0;
[01:08:22.345]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:08:22.345]      __var isProduction = 0;
[01:08:22.345]        // -> [isProduction <= 0x00000000]
[01:08:22.345]      __var continueId = 0;
[01:08:22.346]        // -> [continueId <= 0x00000000]
[01:08:22.346]      deviceID =   Read32(0x41C40004);
[01:08:22.351]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:08:22.351]        // -> [deviceID <= 0x2BB8802F]
[01:08:22.351]      version = deviceID >> 28;
[01:08:22.351]        // -> [version <= 0x00000002]
[01:08:22.351]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:08:22.351]        // -> [partNum <= 0x0000BB88]
[01:08:22.351]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:08:22.352]        // -> [manuf <= 0x00000017]
[01:08:22.352]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:08:22.352]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:08:22.352]      isProduction = (version > 0);
[01:08:22.352]        // -> [isProduction <= 0x00000001]
[01:08:22.352]    </block>
[01:08:22.352]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:08:22.352]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:08:22.352]        // =>  FALSE
[01:08:22.352]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:08:22.353]    </control>
[01:08:22.353]    <control if="continueId == 4" while="" timeout="0" info="">
[01:08:22.353]      // if-block "continueId == 4"
[01:08:22.353]        // =>  FALSE
[01:08:22.353]      // skip if-block "continueId == 4"
[01:08:22.353]    </control>
[01:08:22.353]    <control if="!isProduction" while="" timeout="0" info="">
[01:08:22.353]      // if-block "!isProduction"
[01:08:22.353]        // =>  FALSE
[01:08:22.353]      // skip if-block "!isProduction"
[01:08:22.353]    </control>
[01:08:22.354]  </sequence>
[01:08:22.354]  
[01:09:49.104]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:09:49.104]  
[01:09:49.114]  <debugvars>
[01:09:49.114]    // Pre-defined
[01:09:49.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:49.114]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:49.114]    __dp=0x00000000
[01:09:49.114]    __ap=0x00000000
[01:09:49.114]    __traceout=0x00000000      (Trace Disabled)
[01:09:49.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:49.114]    __FlashAddr=0x00000000
[01:09:49.114]    __FlashLen=0x00000000
[01:09:49.114]    __FlashArg=0x00000000
[01:09:49.114]    __FlashOp=0x00000000
[01:09:49.114]    __Result=0x00000000
[01:09:49.114]  </debugvars>
[01:09:49.114]  
[01:09:49.114]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:09:49.114]    <block atomic="false" info="">
[01:09:49.114]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:09:49.114]        // -> [isSWJ <= 0x00000001]
[01:09:49.114]      __var hasDormant = __protocol & 0x00020000;
[01:09:49.114]        // -> [hasDormant <= 0x00000000]
[01:09:49.114]      __var protType   = __protocol & 0x0000FFFF;
[01:09:49.114]        // -> [protType <= 0x00000002]
[01:09:49.114]    </block>
[01:09:49.114]    <control if="protType == 1" while="" timeout="0" info="">
[01:09:49.117]      // if-block "protType == 1"
[01:09:49.117]        // =>  FALSE
[01:09:49.117]      // skip if-block "protType == 1"
[01:09:49.117]    </control>
[01:09:49.117]    <control if="protType == 2" while="" timeout="0" info="">
[01:09:49.117]      // if-block "protType == 2"
[01:09:49.117]        // =>  TRUE
[01:09:49.117]      <control if="isSWJ" while="" timeout="0" info="">
[01:09:49.117]        // if-block "isSWJ"
[01:09:49.117]          // =>  TRUE
[01:09:49.117]        <control if="hasDormant" while="" timeout="0" info="">
[01:09:49.117]          // if-block "hasDormant"
[01:09:49.117]            // =>  FALSE
[01:09:49.117]          // skip if-block "hasDormant"
[01:09:49.117]        </control>
[01:09:49.117]        <control if="!hasDormant" while="" timeout="0" info="">
[01:09:49.117]          // if-block "!hasDormant"
[01:09:49.117]            // =>  TRUE
[01:09:49.117]          <block atomic="false" info="">
[01:09:49.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:09:49.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:49.122]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:09:49.123]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:09:49.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:09:49.125]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:49.125]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:09:49.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:09:49.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:09:49.125]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:49.125]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:09:49.130]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:09:49.130]          </block>
[01:09:49.130]          // end if-block "!hasDormant"
[01:09:49.130]        </control>
[01:09:49.130]        // end if-block "isSWJ"
[01:09:49.130]      </control>
[01:09:49.130]      <control if="!isSWJ" while="" timeout="0" info="">
[01:09:49.130]        // if-block "!isSWJ"
[01:09:49.130]          // =>  FALSE
[01:09:49.130]        // skip if-block "!isSWJ"
[01:09:49.130]      </control>
[01:09:49.130]      <block atomic="false" info="">
[01:09:49.130]        ReadDP(0x0);
[01:09:49.130]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:09:49.130]      </block>
[01:09:49.134]      // end if-block "protType == 2"
[01:09:49.134]    </control>
[01:09:49.134]  </sequence>
[01:09:49.134]  
[01:09:49.134]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:09:49.134]  
[01:09:49.134]  <debugvars>
[01:09:49.134]    // Pre-defined
[01:09:49.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:49.134]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:49.134]    __dp=0x00000000
[01:09:49.134]    __ap=0x00000000
[01:09:49.134]    __traceout=0x00000000      (Trace Disabled)
[01:09:49.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:49.138]    __FlashAddr=0x00000000
[01:09:49.138]    __FlashLen=0x00000000
[01:09:49.138]    __FlashArg=0x00000000
[01:09:49.138]    __FlashOp=0x00000000
[01:09:49.138]    __Result=0x00000000
[01:09:49.138]  </debugvars>
[01:09:49.138]  
[01:09:49.138]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:09:49.138]    <block atomic="false" info="">
[01:09:49.140]      __var SW_DP_ABORT       = 0x0;
[01:09:49.140]        // -> [SW_DP_ABORT <= 0x00000000]
[01:09:49.140]      __var DP_CTRL_STAT      = 0x4;
[01:09:49.140]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:09:49.140]      __var DP_SELECT         = 0x8;
[01:09:49.140]        // -> [DP_SELECT <= 0x00000008]
[01:09:49.140]      __var powered_down      = 0;
[01:09:49.140]        // -> [powered_down <= 0x00000000]
[01:09:49.140]      WriteDP(DP_SELECT, 0x00000000);
[01:09:49.142]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:09:49.142]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:09:49.146]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:09:49.146]        // -> [powered_down <= 0x00000001]
[01:09:49.146]    </block>
[01:09:49.146]    <control if="powered_down" while="" timeout="0" info="">
[01:09:49.146]      // if-block "powered_down"
[01:09:49.146]        // =>  TRUE
[01:09:49.146]      <block atomic="false" info="">
[01:09:49.146]        Message(0, "Debug/System power-up request sent");
[01:09:49.146]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:09:49.150]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:09:49.150]      </block>
[01:09:49.150]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:09:49.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:09:49.150]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:09:49.150]        // while-condition  =>  FALSE
[01:09:49.150]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:09:49.150]      </control>
[01:09:49.150]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:09:49.150]        // if-block "(__protocol & 0xFFFF) == 1"
[01:09:49.150]          // =>  FALSE
[01:09:49.150]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:09:49.150]      </control>
[01:09:49.150]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:09:49.150]        // if-block "(__protocol & 0xFFFF) == 2"
[01:09:49.150]          // =>  TRUE
[01:09:49.150]        <block atomic="false" info="">
[01:09:49.150]          Message(0, "executing SWD power up");
[01:09:49.150]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:09:49.154]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:09:49.154]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:09:49.154]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:09:49.154]        </block>
[01:09:49.154]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:09:49.154]      </control>
[01:09:49.154]      // end if-block "powered_down"
[01:09:49.154]    </control>
[01:09:49.154]    <block atomic="false" info="">
[01:09:49.154]      __var DEBUG_PORT_VAL    = 0;
[01:09:49.154]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:09:49.158]      __var ACCESS_POINT_VAL  = 0;
[01:09:49.158]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:09:49.158]      __ap = 1; 
[01:09:49.158]        // -> [__ap <= 0x00000001]
[01:09:49.158]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:09:49.162]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:09:49.162]      __ap = 4;
[01:09:49.162]        // -> [__ap <= 0x00000004]
[01:09:49.162]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:49.170]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:09:49.170]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:09:49.170]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:49.170]    </block>
[01:09:49.170]    <block atomic="false" info="">
[01:09:49.170]      __var nReset = 0x80;
[01:09:49.170]        // -> [nReset <= 0x00000080]
[01:09:49.170]      __var canReadPins = 0;
[01:09:49.170]        // -> [canReadPins <= 0x00000000]
[01:09:49.170]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:09:49.174]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:09:49.174]        // -> [canReadPins <= 0x00000001]
[01:09:49.174]    </block>
[01:09:49.174]    <control if="" while="1" timeout="200" info="">
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.174]      // while "1"  (timeout="200")
[01:09:49.174]      // while-condition  =>  TRUE
[01:09:49.179]      // while "1"  (timeout="200")
[01:09:49.179]      // while  =>  TIMEOUT
[01:09:49.179]      // end while "1"
[01:09:49.179]    </control>
[01:09:49.179]    <control if="canReadPins" while="" timeout="0" info="">
[01:09:49.179]      // if-block "canReadPins"
[01:09:49.179]        // =>  TRUE
[01:09:49.179]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:09:49.179]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:09:49.184]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:09:49.184]        // while-condition  =>  FALSE
[01:09:49.184]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:09:49.184]      </control>
[01:09:49.184]      // end if-block "canReadPins"
[01:09:49.184]    </control>
[01:09:49.184]    <control if="!canReadPins" while="" timeout="0" info="">
[01:09:49.184]      // if-block "!canReadPins"
[01:09:49.184]        // =>  FALSE
[01:09:49.184]      // skip if-block "!canReadPins"
[01:09:49.184]    </control>
[01:09:49.184]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:09:49.184]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:49.184]        // =>  TRUE
[01:09:49.184]      <block atomic="false" info="">
[01:09:49.184]        WriteAP(0x00, 0x190008);
[01:09:49.191]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:49.191]        WriteAP(0xF0, 0x01);
[01:09:49.195]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:49.195]      </block>
[01:09:49.195]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:49.195]    </control>
[01:09:49.195]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:09:49.195]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:49.195]        // =>  FALSE
[01:09:49.195]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:49.195]    </control>
[01:09:49.195]    <block atomic="false" info="">
[01:09:49.195]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:49.201]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:09:49.201]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:09:49.201]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:49.201]      __ap = 0; //lets make sure we reset the access point selection
[01:09:49.201]        // -> [__ap <= 0x00000000]
[01:09:49.201]    </block>
[01:09:49.201]  </sequence>
[01:09:49.201]  
[01:09:49.231]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:09:49.231]  
[01:09:49.231]  <debugvars>
[01:09:49.231]    // Pre-defined
[01:09:49.235]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:49.235]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:49.235]    __dp=0x00000000
[01:09:49.235]    __ap=0x00000000
[01:09:49.235]    __traceout=0x00000000      (Trace Disabled)
[01:09:49.235]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:49.235]    __FlashAddr=0x00000000
[01:09:49.235]    __FlashLen=0x00000000
[01:09:49.235]    __FlashArg=0x00000000
[01:09:49.235]    __FlashOp=0x00000000
[01:09:49.235]    __Result=0x00000000
[01:09:49.235]  </debugvars>
[01:09:49.235]  
[01:09:49.235]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:09:49.235]    <block atomic="false" info="">
[01:09:49.235]      __var deviceID = 0;
[01:09:49.235]        // -> [deviceID <= 0x00000000]
[01:09:49.235]      __var version = 0;
[01:09:49.235]        // -> [version <= 0x00000000]
[01:09:49.235]      __var partNum = 0;
[01:09:49.235]        // -> [partNum <= 0x00000000]
[01:09:49.235]      __var manuf = 0;
[01:09:49.235]        // -> [manuf <= 0x00000000]
[01:09:49.235]      __var isMSPM0G1X0X_G3X0X = 0;
[01:09:49.235]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:09:49.235]      __var isProduction = 0;
[01:09:49.235]        // -> [isProduction <= 0x00000000]
[01:09:49.235]      __var continueId = 0;
[01:09:49.235]        // -> [continueId <= 0x00000000]
[01:09:49.235]      deviceID =   Read32(0x41C40004);
[01:09:49.247]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:09:49.247]        // -> [deviceID <= 0x2BB8802F]
[01:09:49.247]      version = deviceID >> 28;
[01:09:49.247]        // -> [version <= 0x00000002]
[01:09:49.247]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:09:49.247]        // -> [partNum <= 0x0000BB88]
[01:09:49.247]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:09:49.247]        // -> [manuf <= 0x00000017]
[01:09:49.247]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:09:49.247]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:09:49.247]      isProduction = (version > 0);
[01:09:49.249]        // -> [isProduction <= 0x00000001]
[01:09:49.249]    </block>
[01:09:49.249]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:09:49.249]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:09:49.249]        // =>  FALSE
[01:09:49.249]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:09:49.249]    </control>
[01:09:49.249]    <control if="continueId == 4" while="" timeout="0" info="">
[01:09:49.249]      // if-block "continueId == 4"
[01:09:49.249]        // =>  FALSE
[01:09:49.251]      // skip if-block "continueId == 4"
[01:09:49.251]    </control>
[01:09:49.251]    <control if="!isProduction" while="" timeout="0" info="">
[01:09:49.251]      // if-block "!isProduction"
[01:09:49.251]        // =>  FALSE
[01:09:49.251]      // skip if-block "!isProduction"
[01:09:49.251]    </control>
[01:09:49.251]  </sequence>
[01:09:49.251]  
[01:09:55.221]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:09:55.221]  
[01:09:55.231]  <debugvars>
[01:09:55.231]    // Pre-defined
[01:09:55.231]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:55.231]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:09:55.231]    __dp=0x00000000
[01:09:55.231]    __ap=0x00000000
[01:09:55.231]    __traceout=0x00000000      (Trace Disabled)
[01:09:55.232]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:55.232]    __FlashAddr=0x00000000
[01:09:55.232]    __FlashLen=0x00000000
[01:09:55.232]    __FlashArg=0x00000000
[01:09:55.232]    __FlashOp=0x00000000
[01:09:55.232]    __Result=0x00000000
[01:09:55.232]  </debugvars>
[01:09:55.232]  
[01:09:55.232]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:09:55.232]    <block atomic="false" info="">
[01:09:55.232]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:09:55.234]        // -> [isSWJ <= 0x00000001]
[01:09:55.234]      __var hasDormant = __protocol & 0x00020000;
[01:09:55.234]        // -> [hasDormant <= 0x00000000]
[01:09:55.234]      __var protType   = __protocol & 0x0000FFFF;
[01:09:55.234]        // -> [protType <= 0x00000002]
[01:09:55.234]    </block>
[01:09:55.234]    <control if="protType == 1" while="" timeout="0" info="">
[01:09:55.234]      // if-block "protType == 1"
[01:09:55.234]        // =>  FALSE
[01:09:55.234]      // skip if-block "protType == 1"
[01:09:55.234]    </control>
[01:09:55.234]    <control if="protType == 2" while="" timeout="0" info="">
[01:09:55.235]      // if-block "protType == 2"
[01:09:55.235]        // =>  TRUE
[01:09:55.235]      <control if="isSWJ" while="" timeout="0" info="">
[01:09:55.235]        // if-block "isSWJ"
[01:09:55.235]          // =>  TRUE
[01:09:55.235]        <control if="hasDormant" while="" timeout="0" info="">
[01:09:55.235]          // if-block "hasDormant"
[01:09:55.235]            // =>  FALSE
[01:09:55.236]          // skip if-block "hasDormant"
[01:09:55.236]        </control>
[01:09:55.236]        <control if="!hasDormant" while="" timeout="0" info="">
[01:09:55.236]          // if-block "!hasDormant"
[01:09:55.236]            // =>  TRUE
[01:09:55.236]          <block atomic="false" info="">
[01:09:55.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:09:55.237]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:55.239]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:09:55.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:09:55.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:09:55.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:55.245]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:09:55.249]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:09:55.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:09:55.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:55.249]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:09:55.256]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:09:55.256]          </block>
[01:09:55.256]          // end if-block "!hasDormant"
[01:09:55.256]        </control>
[01:09:55.256]        // end if-block "isSWJ"
[01:09:55.256]      </control>
[01:09:55.257]      <control if="!isSWJ" while="" timeout="0" info="">
[01:09:55.257]        // if-block "!isSWJ"
[01:09:55.257]          // =>  FALSE
[01:09:55.257]        // skip if-block "!isSWJ"
[01:09:55.257]      </control>
[01:09:55.257]      <block atomic="false" info="">
[01:09:55.257]        ReadDP(0x0);
[01:09:55.263]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:09:55.263]      </block>
[01:09:55.263]      // end if-block "protType == 2"
[01:09:55.263]    </control>
[01:09:55.263]  </sequence>
[01:09:55.263]  
[01:09:55.267]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:09:55.267]  
[01:09:55.267]  <debugvars>
[01:09:55.267]    // Pre-defined
[01:09:55.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:55.267]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:09:55.267]    __dp=0x00000000
[01:09:55.267]    __ap=0x00000000
[01:09:55.267]    __traceout=0x00000000      (Trace Disabled)
[01:09:55.267]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:55.267]    __FlashAddr=0x00000000
[01:09:55.267]    __FlashLen=0x00000000
[01:09:55.267]    __FlashArg=0x00000000
[01:09:55.267]    __FlashOp=0x00000000
[01:09:55.267]    __Result=0x00000000
[01:09:55.267]  </debugvars>
[01:09:55.267]  
[01:09:55.267]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:09:55.267]    <block atomic="false" info="">
[01:09:55.270]      __var SW_DP_ABORT       = 0x0;
[01:09:55.270]        // -> [SW_DP_ABORT <= 0x00000000]
[01:09:55.270]      __var DP_CTRL_STAT      = 0x4;
[01:09:55.270]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:09:55.270]      __var DP_SELECT         = 0x8;
[01:09:55.270]        // -> [DP_SELECT <= 0x00000008]
[01:09:55.270]      __var powered_down      = 0;
[01:09:55.270]        // -> [powered_down <= 0x00000000]
[01:09:55.270]      WriteDP(DP_SELECT, 0x00000000);
[01:09:55.270]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:09:55.270]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:09:55.274]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:09:55.274]        // -> [powered_down <= 0x00000001]
[01:09:55.274]    </block>
[01:09:55.274]    <control if="powered_down" while="" timeout="0" info="">
[01:09:55.274]      // if-block "powered_down"
[01:09:55.274]        // =>  TRUE
[01:09:55.274]      <block atomic="false" info="">
[01:09:55.274]        Message(0, "Debug/System power-up request sent");
[01:09:55.277]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:09:55.278]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:09:55.278]      </block>
[01:09:55.278]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:09:55.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:09:55.282]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:09:55.282]        // while-condition  =>  FALSE
[01:09:55.282]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:09:55.282]      </control>
[01:09:55.282]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:09:55.282]        // if-block "(__protocol & 0xFFFF) == 1"
[01:09:55.282]          // =>  FALSE
[01:09:55.282]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:09:55.282]      </control>
[01:09:55.282]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:09:55.282]        // if-block "(__protocol & 0xFFFF) == 2"
[01:09:55.282]          // =>  TRUE
[01:09:55.282]        <block atomic="false" info="">
[01:09:55.282]          Message(0, "executing SWD power up");
[01:09:55.282]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:09:55.288]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:09:55.288]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:09:55.290]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:09:55.291]        </block>
[01:09:55.291]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:09:55.291]      </control>
[01:09:55.291]      // end if-block "powered_down"
[01:09:55.291]    </control>
[01:09:55.291]    <block atomic="false" info="">
[01:09:55.291]      __var DEBUG_PORT_VAL    = 0;
[01:09:55.291]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:09:55.291]      __var ACCESS_POINT_VAL  = 0;
[01:09:55.291]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:09:55.291]      __ap = 1; 
[01:09:55.291]        // -> [__ap <= 0x00000001]
[01:09:55.291]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:09:55.296]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:09:55.296]      __ap = 4;
[01:09:55.296]        // -> [__ap <= 0x00000004]
[01:09:55.296]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:55.299]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:09:55.299]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:09:55.299]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:55.299]    </block>
[01:09:55.299]    <block atomic="false" info="">
[01:09:55.299]      __var nReset = 0x80;
[01:09:55.299]        // -> [nReset <= 0x00000080]
[01:09:55.303]      __var canReadPins = 0;
[01:09:55.303]        // -> [canReadPins <= 0x00000000]
[01:09:55.303]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:09:55.304]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:09:55.304]        // -> [canReadPins <= 0x00000001]
[01:09:55.304]    </block>
[01:09:55.304]    <control if="" while="1" timeout="200" info="">
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.304]      // while "1"  (timeout="200")
[01:09:55.304]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.307]      // while "1"  (timeout="200")
[01:09:55.307]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.310]      // while "1"  (timeout="200")
[01:09:55.310]      // while-condition  =>  TRUE
[01:09:55.311]      // while "1"  (timeout="200")
[01:09:55.311]      // while-condition  =>  TRUE
[01:09:55.311]      // while "1"  (timeout="200")
[01:09:55.311]      // while-condition  =>  TRUE
[01:09:55.311]      // while "1"  (timeout="200")
[01:09:55.311]      // while-condition  =>  TRUE
[01:09:55.311]      // while "1"  (timeout="200")
[01:09:55.311]      // while-condition  =>  TRUE
[01:09:55.311]      // while "1"  (timeout="200")
[01:09:55.311]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.312]      // while "1"  (timeout="200")
[01:09:55.312]      // while-condition  =>  TRUE
[01:09:55.315]      // while "1"  (timeout="200")
[01:09:55.315]      // while-condition  =>  TRUE
[01:09:55.315]      // while "1"  (timeout="200")
[01:09:55.315]      // while-condition  =>  TRUE
[01:09:55.315]      // while "1"  (timeout="200")
[01:09:55.315]      // while-condition  =>  TRUE
[01:09:55.316]      // while "1"  (timeout="200")
[01:09:55.316]      // while-condition  =>  TRUE
[01:09:55.316]      // while "1"  (timeout="200")
[01:09:55.316]      // while-condition  =>  TRUE
[01:09:55.316]      // while "1"  (timeout="200")
[01:09:55.316]      // while-condition  =>  TRUE
[01:09:55.316]      // while "1"  (timeout="200")
[01:09:55.316]      // while-condition  =>  TRUE
[01:09:55.316]      // while "1"  (timeout="200")
[01:09:55.316]      // while-condition  =>  TRUE
[01:09:55.316]      // while "1"  (timeout="200")
[01:09:55.316]      // while-condition  =>  TRUE
[01:09:55.317]      // while "1"  (timeout="200")
[01:09:55.317]      // while  =>  TIMEOUT
[01:09:55.317]      // end while "1"
[01:09:55.317]    </control>
[01:09:55.317]    <control if="canReadPins" while="" timeout="0" info="">
[01:09:55.317]      // if-block "canReadPins"
[01:09:55.317]        // =>  TRUE
[01:09:55.317]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:09:55.317]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:09:55.317]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:09:55.317]        // while-condition  =>  FALSE
[01:09:55.317]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:09:55.317]      </control>
[01:09:55.317]      // end if-block "canReadPins"
[01:09:55.317]    </control>
[01:09:55.317]    <control if="!canReadPins" while="" timeout="0" info="">
[01:09:55.317]      // if-block "!canReadPins"
[01:09:55.317]        // =>  FALSE
[01:09:55.320]      // skip if-block "!canReadPins"
[01:09:55.320]    </control>
[01:09:55.320]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:09:55.320]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:55.320]        // =>  TRUE
[01:09:55.320]      <block atomic="false" info="">
[01:09:55.320]        WriteAP(0x00, 0x190008);
[01:09:55.324]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:55.324]        WriteAP(0xF0, 0x01);
[01:09:55.328]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:55.328]      </block>
[01:09:55.328]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:55.328]    </control>
[01:09:55.328]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:09:55.328]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:55.328]        // =>  FALSE
[01:09:55.328]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:55.329]    </control>
[01:09:55.329]    <block atomic="false" info="">
[01:09:55.329]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:55.332]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:09:55.332]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:09:55.332]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:55.334]      __ap = 0; //lets make sure we reset the access point selection
[01:09:55.334]        // -> [__ap <= 0x00000000]
[01:09:55.334]    </block>
[01:09:55.334]  </sequence>
[01:09:55.334]  
[01:09:55.361]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:09:55.361]  
[01:09:55.361]  <debugvars>
[01:09:55.361]    // Pre-defined
[01:09:55.361]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:55.361]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:09:55.361]    __dp=0x00000000
[01:09:55.361]    __ap=0x00000000
[01:09:55.361]    __traceout=0x00000000      (Trace Disabled)
[01:09:55.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:55.361]    __FlashAddr=0x00000000
[01:09:55.361]    __FlashLen=0x00000000
[01:09:55.361]    __FlashArg=0x00000000
[01:09:55.361]    __FlashOp=0x00000000
[01:09:55.365]    __Result=0x00000000
[01:09:55.365]  </debugvars>
[01:09:55.365]  
[01:09:55.365]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:09:55.365]    <block atomic="false" info="">
[01:09:55.365]      __var deviceID = 0;
[01:09:55.365]        // -> [deviceID <= 0x00000000]
[01:09:55.365]      __var version = 0;
[01:09:55.365]        // -> [version <= 0x00000000]
[01:09:55.365]      __var partNum = 0;
[01:09:55.365]        // -> [partNum <= 0x00000000]
[01:09:55.365]      __var manuf = 0;
[01:09:55.365]        // -> [manuf <= 0x00000000]
[01:09:55.365]      __var isMSPM0G1X0X_G3X0X = 0;
[01:09:55.365]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:09:55.365]      __var isProduction = 0;
[01:09:55.365]        // -> [isProduction <= 0x00000000]
[01:09:55.365]      __var continueId = 0;
[01:09:55.365]        // -> [continueId <= 0x00000000]
[01:09:55.365]      deviceID =   Read32(0x41C40004);
[01:09:55.370]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:09:55.370]        // -> [deviceID <= 0x2BB8802F]
[01:09:55.370]      version = deviceID >> 28;
[01:09:55.370]        // -> [version <= 0x00000002]
[01:09:55.370]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:09:55.370]        // -> [partNum <= 0x0000BB88]
[01:09:55.370]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:09:55.370]        // -> [manuf <= 0x00000017]
[01:09:55.374]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:09:55.374]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:09:55.374]      isProduction = (version > 0);
[01:09:55.374]        // -> [isProduction <= 0x00000001]
[01:09:55.374]    </block>
[01:09:55.374]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:09:55.374]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:09:55.374]        // =>  FALSE
[01:09:55.374]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:09:55.374]    </control>
[01:09:55.374]    <control if="continueId == 4" while="" timeout="0" info="">
[01:09:55.374]      // if-block "continueId == 4"
[01:09:55.374]        // =>  FALSE
[01:09:55.374]      // skip if-block "continueId == 4"
[01:09:55.374]    </control>
[01:09:55.374]    <control if="!isProduction" while="" timeout="0" info="">
[01:09:55.374]      // if-block "!isProduction"
[01:09:55.374]        // =>  FALSE
[01:09:55.374]      // skip if-block "!isProduction"
[01:09:55.374]    </control>
[01:09:55.374]  </sequence>
[01:09:55.374]  
[01:10:52.507]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:10:52.507]  
[01:10:52.517]  <debugvars>
[01:10:52.517]    // Pre-defined
[01:10:52.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:52.517]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:10:52.517]    __dp=0x00000000
[01:10:52.517]    __ap=0x00000000
[01:10:52.517]    __traceout=0x00000000      (Trace Disabled)
[01:10:52.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:52.517]    __FlashAddr=0x00000000
[01:10:52.517]    __FlashLen=0x00000000
[01:10:52.517]    __FlashArg=0x00000000
[01:10:52.517]    __FlashOp=0x00000000
[01:10:52.517]    __Result=0x00000000
[01:10:52.517]  </debugvars>
[01:10:52.517]  
[01:10:52.517]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:10:52.517]    <block atomic="false" info="">
[01:10:52.517]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:10:52.517]        // -> [isSWJ <= 0x00000001]
[01:10:52.517]      __var hasDormant = __protocol & 0x00020000;
[01:10:52.520]        // -> [hasDormant <= 0x00000000]
[01:10:52.520]      __var protType   = __protocol & 0x0000FFFF;
[01:10:52.520]        // -> [protType <= 0x00000002]
[01:10:52.520]    </block>
[01:10:52.520]    <control if="protType == 1" while="" timeout="0" info="">
[01:10:52.520]      // if-block "protType == 1"
[01:10:52.520]        // =>  FALSE
[01:10:52.520]      // skip if-block "protType == 1"
[01:10:52.520]    </control>
[01:10:52.520]    <control if="protType == 2" while="" timeout="0" info="">
[01:10:52.520]      // if-block "protType == 2"
[01:10:52.520]        // =>  TRUE
[01:10:52.520]      <control if="isSWJ" while="" timeout="0" info="">
[01:10:52.520]        // if-block "isSWJ"
[01:10:52.520]          // =>  TRUE
[01:10:52.521]        <control if="hasDormant" while="" timeout="0" info="">
[01:10:52.521]          // if-block "hasDormant"
[01:10:52.521]            // =>  FALSE
[01:10:52.521]          // skip if-block "hasDormant"
[01:10:52.521]        </control>
[01:10:52.521]        <control if="!hasDormant" while="" timeout="0" info="">
[01:10:52.521]          // if-block "!hasDormant"
[01:10:52.521]            // =>  TRUE
[01:10:52.521]          <block atomic="false" info="">
[01:10:52.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:10:52.521]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:52.521]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:10:52.524]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:10:52.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:10:52.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:52.526]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:10:52.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:10:52.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:10:52.535]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:52.535]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:10:52.538]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:10:52.538]          </block>
[01:10:52.538]          // end if-block "!hasDormant"
[01:10:52.538]        </control>
[01:10:52.538]        // end if-block "isSWJ"
[01:10:52.538]      </control>
[01:10:52.538]      <control if="!isSWJ" while="" timeout="0" info="">
[01:10:52.538]        // if-block "!isSWJ"
[01:10:52.538]          // =>  FALSE
[01:10:52.538]        // skip if-block "!isSWJ"
[01:10:52.538]      </control>
[01:10:52.538]      <block atomic="false" info="">
[01:10:52.540]        ReadDP(0x0);
[01:10:52.540]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:10:52.540]      </block>
[01:10:52.540]      // end if-block "protType == 2"
[01:10:52.540]    </control>
[01:10:52.540]  </sequence>
[01:10:52.540]  
[01:10:52.540]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:10:52.540]  
[01:10:52.540]  <debugvars>
[01:10:52.540]    // Pre-defined
[01:10:52.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:52.545]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:10:52.545]    __dp=0x00000000
[01:10:52.545]    __ap=0x00000000
[01:10:52.545]    __traceout=0x00000000      (Trace Disabled)
[01:10:52.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:52.545]    __FlashAddr=0x00000000
[01:10:52.545]    __FlashLen=0x00000000
[01:10:52.545]    __FlashArg=0x00000000
[01:10:52.545]    __FlashOp=0x00000000
[01:10:52.545]    __Result=0x00000000
[01:10:52.545]  </debugvars>
[01:10:52.545]  
[01:10:52.545]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:10:52.547]    <block atomic="false" info="">
[01:10:52.547]      __var SW_DP_ABORT       = 0x0;
[01:10:52.547]        // -> [SW_DP_ABORT <= 0x00000000]
[01:10:52.547]      __var DP_CTRL_STAT      = 0x4;
[01:10:52.547]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:10:52.547]      __var DP_SELECT         = 0x8;
[01:10:52.547]        // -> [DP_SELECT <= 0x00000008]
[01:10:52.547]      __var powered_down      = 0;
[01:10:52.547]        // -> [powered_down <= 0x00000000]
[01:10:52.547]      WriteDP(DP_SELECT, 0x00000000);
[01:10:52.549]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:10:52.549]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:10:52.549]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:10:52.549]        // -> [powered_down <= 0x00000001]
[01:10:52.549]    </block>
[01:10:52.549]    <control if="powered_down" while="" timeout="0" info="">
[01:10:52.549]      // if-block "powered_down"
[01:10:52.549]        // =>  TRUE
[01:10:52.549]      <block atomic="false" info="">
[01:10:52.549]        Message(0, "Debug/System power-up request sent");
[01:10:52.549]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:10:52.554]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:10:52.554]      </block>
[01:10:52.556]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:10:52.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:10:52.556]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:10:52.556]        // while-condition  =>  FALSE
[01:10:52.556]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:10:52.556]      </control>
[01:10:52.556]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:10:52.556]        // if-block "(__protocol & 0xFFFF) == 1"
[01:10:52.556]          // =>  FALSE
[01:10:52.556]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:10:52.556]      </control>
[01:10:52.556]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:10:52.556]        // if-block "(__protocol & 0xFFFF) == 2"
[01:10:52.556]          // =>  TRUE
[01:10:52.556]        <block atomic="false" info="">
[01:10:52.556]          Message(0, "executing SWD power up");
[01:10:52.564]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:10:52.566]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:10:52.566]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:10:52.568]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:10:52.568]        </block>
[01:10:52.568]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:10:52.568]      </control>
[01:10:52.568]      // end if-block "powered_down"
[01:10:52.568]    </control>
[01:10:52.568]    <block atomic="false" info="">
[01:10:52.568]      __var DEBUG_PORT_VAL    = 0;
[01:10:52.568]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:10:52.568]      __var ACCESS_POINT_VAL  = 0;
[01:10:52.568]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:10:52.570]      __ap = 1; 
[01:10:52.570]        // -> [__ap <= 0x00000001]
[01:10:52.570]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:10:52.578]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:10:52.578]      __ap = 4;
[01:10:52.578]        // -> [__ap <= 0x00000004]
[01:10:52.578]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:10:52.578]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:10:52.578]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:10:52.578]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:10:52.587]    </block>
[01:10:52.587]    <block atomic="false" info="">
[01:10:52.587]      __var nReset = 0x80;
[01:10:52.587]        // -> [nReset <= 0x00000080]
[01:10:52.587]      __var canReadPins = 0;
[01:10:52.587]        // -> [canReadPins <= 0x00000000]
[01:10:52.587]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:10:52.587]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:10:52.587]        // -> [canReadPins <= 0x00000001]
[01:10:52.587]    </block>
[01:10:52.587]    <control if="" while="1" timeout="200" info="">
[01:10:52.587]      // while "1"  (timeout="200")
[01:10:52.587]      // while-condition  =>  TRUE
[01:10:52.587]      // while "1"  (timeout="200")
[01:10:52.587]      // while-condition  =>  TRUE
[01:10:52.587]      // while "1"  (timeout="200")
[01:10:52.587]      // while-condition  =>  TRUE
[01:10:52.587]      // while "1"  (timeout="200")
[01:10:52.587]      // while-condition  =>  TRUE
[01:10:52.587]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.594]      // while "1"  (timeout="200")
[01:10:52.594]      // while-condition  =>  TRUE
[01:10:52.596]      // while "1"  (timeout="200")
[01:10:52.596]      // while-condition  =>  TRUE
[01:10:52.596]      // while "1"  (timeout="200")
[01:10:52.596]      // while-condition  =>  TRUE
[01:10:52.596]      // while "1"  (timeout="200")
[01:10:52.596]      // while-condition  =>  TRUE
[01:10:52.596]      // while "1"  (timeout="200")
[01:10:52.596]      // while-condition  =>  TRUE
[01:10:52.596]      // while "1"  (timeout="200")
[01:10:52.596]      // while-condition  =>  TRUE
[01:10:52.596]      // while "1"  (timeout="200")
[01:10:52.598]      // while-condition  =>  TRUE
[01:10:52.598]      // while "1"  (timeout="200")
[01:10:52.598]      // while  =>  TIMEOUT
[01:10:52.598]      // end while "1"
[01:10:52.598]    </control>
[01:10:52.598]    <control if="canReadPins" while="" timeout="0" info="">
[01:10:52.598]      // if-block "canReadPins"
[01:10:52.598]        // =>  TRUE
[01:10:52.598]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:10:52.598]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:10:52.599]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:10:52.599]        // while-condition  =>  FALSE
[01:10:52.599]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:10:52.599]      </control>
[01:10:52.599]      // end if-block "canReadPins"
[01:10:52.599]    </control>
[01:10:52.599]    <control if="!canReadPins" while="" timeout="0" info="">
[01:10:52.599]      // if-block "!canReadPins"
[01:10:52.599]        // =>  FALSE
[01:10:52.599]      // skip if-block "!canReadPins"
[01:10:52.599]    </control>
[01:10:52.599]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:10:52.599]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:10:52.599]        // =>  TRUE
[01:10:52.599]      <block atomic="false" info="">
[01:10:52.599]        WriteAP(0x00, 0x190008);
[01:10:52.603]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:10:52.603]        WriteAP(0xF0, 0x01);
[01:10:52.606]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:10:52.606]      </block>
[01:10:52.606]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:10:52.606]    </control>
[01:10:52.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:10:52.609]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:10:52.609]        // =>  FALSE
[01:10:52.609]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:10:52.609]    </control>
[01:10:52.609]    <block atomic="false" info="">
[01:10:52.609]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:10:52.619]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:10:52.619]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:10:52.619]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:10:52.619]      __ap = 0; //lets make sure we reset the access point selection
[01:10:52.619]        // -> [__ap <= 0x00000000]
[01:10:52.619]    </block>
[01:10:52.619]  </sequence>
[01:10:52.619]  
[01:10:52.637]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:10:52.637]  
[01:10:52.637]  <debugvars>
[01:10:52.647]    // Pre-defined
[01:10:52.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:52.647]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:10:52.647]    __dp=0x00000000
[01:10:52.647]    __ap=0x00000000
[01:10:52.647]    __traceout=0x00000000      (Trace Disabled)
[01:10:52.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:52.647]    __FlashAddr=0x00000000
[01:10:52.647]    __FlashLen=0x00000000
[01:10:52.647]    __FlashArg=0x00000000
[01:10:52.647]    __FlashOp=0x00000000
[01:10:52.648]    __Result=0x00000000
[01:10:52.648]  </debugvars>
[01:10:52.648]  
[01:10:52.648]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:10:52.648]    <block atomic="false" info="">
[01:10:52.648]      __var deviceID = 0;
[01:10:52.648]        // -> [deviceID <= 0x00000000]
[01:10:52.648]      __var version = 0;
[01:10:52.648]        // -> [version <= 0x00000000]
[01:10:52.648]      __var partNum = 0;
[01:10:52.648]        // -> [partNum <= 0x00000000]
[01:10:52.648]      __var manuf = 0;
[01:10:52.648]        // -> [manuf <= 0x00000000]
[01:10:52.648]      __var isMSPM0G1X0X_G3X0X = 0;
[01:10:52.648]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:10:52.648]      __var isProduction = 0;
[01:10:52.648]        // -> [isProduction <= 0x00000000]
[01:10:52.648]      __var continueId = 0;
[01:10:52.648]        // -> [continueId <= 0x00000000]
[01:10:52.648]      deviceID =   Read32(0x41C40004);
[01:10:52.651]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:10:52.651]        // -> [deviceID <= 0x2BB8802F]
[01:10:52.651]      version = deviceID >> 28;
[01:10:52.651]        // -> [version <= 0x00000002]
[01:10:52.657]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:10:52.657]        // -> [partNum <= 0x0000BB88]
[01:10:52.657]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:10:52.657]        // -> [manuf <= 0x00000017]
[01:10:52.657]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:10:52.657]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:10:52.657]      isProduction = (version > 0);
[01:10:52.657]        // -> [isProduction <= 0x00000001]
[01:10:52.657]    </block>
[01:10:52.657]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:10:52.657]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:10:52.657]        // =>  FALSE
[01:10:52.657]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:10:52.657]    </control>
[01:10:52.657]    <control if="continueId == 4" while="" timeout="0" info="">
[01:10:52.657]      // if-block "continueId == 4"
[01:10:52.657]        // =>  FALSE
[01:10:52.657]      // skip if-block "continueId == 4"
[01:10:52.657]    </control>
[01:10:52.657]    <control if="!isProduction" while="" timeout="0" info="">
[01:10:52.657]      // if-block "!isProduction"
[01:10:52.657]        // =>  FALSE
[01:10:52.657]      // skip if-block "!isProduction"
[01:10:52.657]    </control>
[01:10:52.657]  </sequence>
[01:10:52.657]  
[01:12:02.938]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:12:02.938]  
[01:12:02.951]  <debugvars>
[01:12:02.951]    // Pre-defined
[01:12:02.951]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:02.952]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:12:02.952]    __dp=0x00000000
[01:12:02.952]    __ap=0x00000000
[01:12:02.952]    __traceout=0x00000000      (Trace Disabled)
[01:12:02.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:02.952]    __FlashAddr=0x00000000
[01:12:02.952]    __FlashLen=0x00000000
[01:12:02.952]    __FlashArg=0x00000000
[01:12:02.952]    __FlashOp=0x00000000
[01:12:02.952]    __Result=0x00000000
[01:12:02.952]  </debugvars>
[01:12:02.952]  
[01:12:02.952]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:12:02.952]    <block atomic="false" info="">
[01:12:02.952]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:12:02.952]        // -> [isSWJ <= 0x00000001]
[01:12:02.952]      __var hasDormant = __protocol & 0x00020000;
[01:12:02.952]        // -> [hasDormant <= 0x00000000]
[01:12:02.952]      __var protType   = __protocol & 0x0000FFFF;
[01:12:02.952]        // -> [protType <= 0x00000002]
[01:12:02.952]    </block>
[01:12:02.954]    <control if="protType == 1" while="" timeout="0" info="">
[01:12:02.954]      // if-block "protType == 1"
[01:12:02.954]        // =>  FALSE
[01:12:02.954]      // skip if-block "protType == 1"
[01:12:02.954]    </control>
[01:12:02.954]    <control if="protType == 2" while="" timeout="0" info="">
[01:12:02.954]      // if-block "protType == 2"
[01:12:02.954]        // =>  TRUE
[01:12:02.954]      <control if="isSWJ" while="" timeout="0" info="">
[01:12:02.954]        // if-block "isSWJ"
[01:12:02.954]          // =>  TRUE
[01:12:02.954]        <control if="hasDormant" while="" timeout="0" info="">
[01:12:02.954]          // if-block "hasDormant"
[01:12:02.954]            // =>  FALSE
[01:12:02.954]          // skip if-block "hasDormant"
[01:12:02.954]        </control>
[01:12:02.956]        <control if="!hasDormant" while="" timeout="0" info="">
[01:12:02.956]          // if-block "!hasDormant"
[01:12:02.956]            // =>  TRUE
[01:12:02.956]          <block atomic="false" info="">
[01:12:02.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:12:02.958]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:02.958]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:12:02.960]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:12:02.960]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:12:02.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:02.965]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:12:02.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:12:02.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:12:02.968]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:02.968]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:12:02.974]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:12:02.974]          </block>
[01:12:02.974]          // end if-block "!hasDormant"
[01:12:02.974]        </control>
[01:12:02.974]        // end if-block "isSWJ"
[01:12:02.975]      </control>
[01:12:02.975]      <control if="!isSWJ" while="" timeout="0" info="">
[01:12:02.975]        // if-block "!isSWJ"
[01:12:02.975]          // =>  FALSE
[01:12:02.975]        // skip if-block "!isSWJ"
[01:12:02.975]      </control>
[01:12:02.975]      <block atomic="false" info="">
[01:12:02.975]        ReadDP(0x0);
[01:12:02.976]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:12:02.976]      </block>
[01:12:02.976]      // end if-block "protType == 2"
[01:12:02.976]    </control>
[01:12:02.976]  </sequence>
[01:12:02.976]  
[01:12:02.976]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:12:02.976]  
[01:12:02.976]  <debugvars>
[01:12:02.976]    // Pre-defined
[01:12:02.976]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:02.976]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:12:02.976]    __dp=0x00000000
[01:12:02.976]    __ap=0x00000000
[01:12:02.976]    __traceout=0x00000000      (Trace Disabled)
[01:12:02.976]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:02.976]    __FlashAddr=0x00000000
[01:12:02.976]    __FlashLen=0x00000000
[01:12:02.976]    __FlashArg=0x00000000
[01:12:02.976]    __FlashOp=0x00000000
[01:12:02.976]    __Result=0x00000000
[01:12:02.976]  </debugvars>
[01:12:02.976]  
[01:12:02.976]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:12:02.976]    <block atomic="false" info="">
[01:12:02.976]      __var SW_DP_ABORT       = 0x0;
[01:12:02.976]        // -> [SW_DP_ABORT <= 0x00000000]
[01:12:02.976]      __var DP_CTRL_STAT      = 0x4;
[01:12:02.976]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:12:02.976]      __var DP_SELECT         = 0x8;
[01:12:02.976]        // -> [DP_SELECT <= 0x00000008]
[01:12:02.976]      __var powered_down      = 0;
[01:12:02.976]        // -> [powered_down <= 0x00000000]
[01:12:02.976]      WriteDP(DP_SELECT, 0x00000000);
[01:12:02.976]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:12:02.984]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:12:02.986]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:12:02.986]        // -> [powered_down <= 0x00000001]
[01:12:02.986]    </block>
[01:12:02.986]    <control if="powered_down" while="" timeout="0" info="">
[01:12:02.986]      // if-block "powered_down"
[01:12:02.986]        // =>  TRUE
[01:12:02.986]      <block atomic="false" info="">
[01:12:02.986]        Message(0, "Debug/System power-up request sent");
[01:12:02.986]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:12:02.989]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:12:02.989]      </block>
[01:12:02.989]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:12:02.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:12:02.994]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:12:02.994]        // while-condition  =>  FALSE
[01:12:02.994]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:12:02.994]      </control>
[01:12:02.994]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:12:02.994]        // if-block "(__protocol & 0xFFFF) == 1"
[01:12:02.994]          // =>  FALSE
[01:12:02.994]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:12:02.996]      </control>
[01:12:02.996]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:12:02.996]        // if-block "(__protocol & 0xFFFF) == 2"
[01:12:02.996]          // =>  TRUE
[01:12:02.996]        <block atomic="false" info="">
[01:12:02.996]          Message(0, "executing SWD power up");
[01:12:02.996]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:12:02.997]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:12:02.997]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:12:02.997]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:12:02.997]        </block>
[01:12:02.997]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:12:02.997]      </control>
[01:12:02.997]      // end if-block "powered_down"
[01:12:02.997]    </control>
[01:12:02.997]    <block atomic="false" info="">
[01:12:02.997]      __var DEBUG_PORT_VAL    = 0;
[01:12:02.997]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:12:02.997]      __var ACCESS_POINT_VAL  = 0;
[01:12:02.997]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:12:02.997]      __ap = 1; 
[01:12:02.997]        // -> [__ap <= 0x00000001]
[01:12:02.997]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:12:03.006]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:12:03.006]      __ap = 4;
[01:12:03.006]        // -> [__ap <= 0x00000004]
[01:12:03.006]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:03.006]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:12:03.006]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:12:03.006]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:03.006]    </block>
[01:12:03.006]    <block atomic="false" info="">
[01:12:03.006]      __var nReset = 0x80;
[01:12:03.006]        // -> [nReset <= 0x00000080]
[01:12:03.006]      __var canReadPins = 0;
[01:12:03.006]        // -> [canReadPins <= 0x00000000]
[01:12:03.006]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:12:03.015]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:12:03.016]        // -> [canReadPins <= 0x00000001]
[01:12:03.016]    </block>
[01:12:03.016]    <control if="" while="1" timeout="200" info="">
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.016]      // while-condition  =>  TRUE
[01:12:03.016]      // while "1"  (timeout="200")
[01:12:03.024]      // while-condition  =>  TRUE
[01:12:03.024]      // while "1"  (timeout="200")
[01:12:03.024]      // while  =>  TIMEOUT
[01:12:03.024]      // end while "1"
[01:12:03.024]    </control>
[01:12:03.024]    <control if="canReadPins" while="" timeout="0" info="">
[01:12:03.024]      // if-block "canReadPins"
[01:12:03.024]        // =>  TRUE
[01:12:03.024]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:12:03.024]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:12:03.026]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:12:03.026]        // while-condition  =>  FALSE
[01:12:03.026]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:12:03.027]      </control>
[01:12:03.027]      // end if-block "canReadPins"
[01:12:03.027]    </control>
[01:12:03.027]    <control if="!canReadPins" while="" timeout="0" info="">
[01:12:03.027]      // if-block "!canReadPins"
[01:12:03.027]        // =>  FALSE
[01:12:03.027]      // skip if-block "!canReadPins"
[01:12:03.027]    </control>
[01:12:03.027]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:12:03.027]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:03.027]        // =>  TRUE
[01:12:03.027]      <block atomic="false" info="">
[01:12:03.027]        WriteAP(0x00, 0x190008);
[01:12:03.027]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:03.027]        WriteAP(0xF0, 0x01);
[01:12:03.027]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:03.027]      </block>
[01:12:03.027]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:03.027]    </control>
[01:12:03.027]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:12:03.027]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:03.027]        // =>  FALSE
[01:12:03.027]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:03.027]    </control>
[01:12:03.027]    <block atomic="false" info="">
[01:12:03.027]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:03.036]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:12:03.036]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:12:03.036]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:03.036]      __ap = 0; //lets make sure we reset the access point selection
[01:12:03.036]        // -> [__ap <= 0x00000000]
[01:12:03.036]    </block>
[01:12:03.036]  </sequence>
[01:12:03.036]  
[01:12:03.059]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:12:03.059]  
[01:12:03.059]  <debugvars>
[01:12:03.059]    // Pre-defined
[01:12:03.059]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:03.059]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:12:03.059]    __dp=0x00000000
[01:12:03.059]    __ap=0x00000000
[01:12:03.059]    __traceout=0x00000000      (Trace Disabled)
[01:12:03.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:03.059]    __FlashAddr=0x00000000
[01:12:03.059]    __FlashLen=0x00000000
[01:12:03.059]    __FlashArg=0x00000000
[01:12:03.059]    __FlashOp=0x00000000
[01:12:03.059]    __Result=0x00000000
[01:12:03.059]  </debugvars>
[01:12:03.059]  
[01:12:03.059]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:12:03.059]    <block atomic="false" info="">
[01:12:03.059]      __var deviceID = 0;
[01:12:03.059]        // -> [deviceID <= 0x00000000]
[01:12:03.059]      __var version = 0;
[01:12:03.062]        // -> [version <= 0x00000000]
[01:12:03.062]      __var partNum = 0;
[01:12:03.062]        // -> [partNum <= 0x00000000]
[01:12:03.062]      __var manuf = 0;
[01:12:03.062]        // -> [manuf <= 0x00000000]
[01:12:03.062]      __var isMSPM0G1X0X_G3X0X = 0;
[01:12:03.062]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:12:03.062]      __var isProduction = 0;
[01:12:03.062]        // -> [isProduction <= 0x00000000]
[01:12:03.062]      __var continueId = 0;
[01:12:03.062]        // -> [continueId <= 0x00000000]
[01:12:03.062]      deviceID =   Read32(0x41C40004);
[01:12:03.066]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:12:03.066]        // -> [deviceID <= 0x2BB8802F]
[01:12:03.066]      version = deviceID >> 28;
[01:12:03.066]        // -> [version <= 0x00000002]
[01:12:03.066]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:12:03.066]        // -> [partNum <= 0x0000BB88]
[01:12:03.066]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:12:03.066]        // -> [manuf <= 0x00000017]
[01:12:03.066]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:12:03.066]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:12:03.066]      isProduction = (version > 0);
[01:12:03.066]        // -> [isProduction <= 0x00000001]
[01:12:03.066]    </block>
[01:12:03.066]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:12:03.066]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:12:03.066]        // =>  FALSE
[01:12:03.066]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:12:03.066]    </control>
[01:12:03.066]    <control if="continueId == 4" while="" timeout="0" info="">
[01:12:03.066]      // if-block "continueId == 4"
[01:12:03.066]        // =>  FALSE
[01:12:03.066]      // skip if-block "continueId == 4"
[01:12:03.066]    </control>
[01:12:03.066]    <control if="!isProduction" while="" timeout="0" info="">
[01:12:03.066]      // if-block "!isProduction"
[01:12:03.066]        // =>  FALSE
[01:12:03.066]      // skip if-block "!isProduction"
[01:12:03.066]    </control>
[01:12:03.066]  </sequence>
[01:12:03.066]  
[01:12:08.879]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:12:08.879]  
[01:12:08.879]  <debugvars>
[01:12:08.879]    // Pre-defined
[01:12:08.879]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:08.879]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:12:08.879]    __dp=0x00000000
[01:12:08.879]    __ap=0x00000000
[01:12:08.879]    __traceout=0x00000000      (Trace Disabled)
[01:12:08.879]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:08.879]    __FlashAddr=0x00000000
[01:12:08.879]    __FlashLen=0x00000000
[01:12:08.879]    __FlashArg=0x00000000
[01:12:08.879]    __FlashOp=0x00000000
[01:12:08.879]    __Result=0x00000000
[01:12:08.879]  </debugvars>
[01:12:08.879]  
[01:12:08.879]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:12:08.879]    <block atomic="false" info="">
[01:12:08.879]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:12:08.879]        // -> [isSWJ <= 0x00000001]
[01:12:08.879]      __var hasDormant = __protocol & 0x00020000;
[01:12:08.879]        // -> [hasDormant <= 0x00000000]
[01:12:08.879]      __var protType   = __protocol & 0x0000FFFF;
[01:12:08.879]        // -> [protType <= 0x00000002]
[01:12:08.879]    </block>
[01:12:08.879]    <control if="protType == 1" while="" timeout="0" info="">
[01:12:08.879]      // if-block "protType == 1"
[01:12:08.879]        // =>  FALSE
[01:12:08.879]      // skip if-block "protType == 1"
[01:12:08.879]    </control>
[01:12:08.879]    <control if="protType == 2" while="" timeout="0" info="">
[01:12:08.879]      // if-block "protType == 2"
[01:12:08.879]        // =>  TRUE
[01:12:08.879]      <control if="isSWJ" while="" timeout="0" info="">
[01:12:08.879]        // if-block "isSWJ"
[01:12:08.879]          // =>  TRUE
[01:12:08.879]        <control if="hasDormant" while="" timeout="0" info="">
[01:12:08.879]          // if-block "hasDormant"
[01:12:08.879]            // =>  FALSE
[01:12:08.879]          // skip if-block "hasDormant"
[01:12:08.879]        </control>
[01:12:08.879]        <control if="!hasDormant" while="" timeout="0" info="">
[01:12:08.879]          // if-block "!hasDormant"
[01:12:08.879]            // =>  TRUE
[01:12:08.879]          <block atomic="false" info="">
[01:12:08.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:12:08.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:08.889]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:12:08.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:12:08.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:12:08.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:08.889]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:12:08.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:12:08.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:12:08.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:08.899]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:12:08.902]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:12:08.902]          </block>
[01:12:08.902]          // end if-block "!hasDormant"
[01:12:08.902]        </control>
[01:12:08.902]        // end if-block "isSWJ"
[01:12:08.902]      </control>
[01:12:08.902]      <control if="!isSWJ" while="" timeout="0" info="">
[01:12:08.902]        // if-block "!isSWJ"
[01:12:08.902]          // =>  FALSE
[01:12:08.902]        // skip if-block "!isSWJ"
[01:12:08.902]      </control>
[01:12:08.902]      <block atomic="false" info="">
[01:12:08.902]        ReadDP(0x0);
[01:12:08.902]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:12:08.902]      </block>
[01:12:08.902]      // end if-block "protType == 2"
[01:12:08.902]    </control>
[01:12:08.902]  </sequence>
[01:12:08.902]  
[01:12:08.908]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:12:08.908]  
[01:12:08.908]  <debugvars>
[01:12:08.908]    // Pre-defined
[01:12:08.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:08.908]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:12:08.908]    __dp=0x00000000
[01:12:08.909]    __ap=0x00000000
[01:12:08.909]    __traceout=0x00000000      (Trace Disabled)
[01:12:08.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:08.909]    __FlashAddr=0x00000000
[01:12:08.910]    __FlashLen=0x00000000
[01:12:08.910]    __FlashArg=0x00000000
[01:12:08.910]    __FlashOp=0x00000000
[01:12:08.910]    __Result=0x00000000
[01:12:08.910]  </debugvars>
[01:12:08.910]  
[01:12:08.910]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:12:08.910]    <block atomic="false" info="">
[01:12:08.910]      __var SW_DP_ABORT       = 0x0;
[01:12:08.910]        // -> [SW_DP_ABORT <= 0x00000000]
[01:12:08.910]      __var DP_CTRL_STAT      = 0x4;
[01:12:08.910]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:12:08.910]      __var DP_SELECT         = 0x8;
[01:12:08.910]        // -> [DP_SELECT <= 0x00000008]
[01:12:08.910]      __var powered_down      = 0;
[01:12:08.910]        // -> [powered_down <= 0x00000000]
[01:12:08.910]      WriteDP(DP_SELECT, 0x00000000);
[01:12:08.910]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:12:08.910]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:12:08.910]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:12:08.910]        // -> [powered_down <= 0x00000001]
[01:12:08.910]    </block>
[01:12:08.910]    <control if="powered_down" while="" timeout="0" info="">
[01:12:08.910]      // if-block "powered_down"
[01:12:08.910]        // =>  TRUE
[01:12:08.910]      <block atomic="false" info="">
[01:12:08.910]        Message(0, "Debug/System power-up request sent");
[01:12:08.920]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:12:08.920]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:12:08.920]      </block>
[01:12:08.920]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:12:08.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:12:08.920]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:12:08.920]        // while-condition  =>  FALSE
[01:12:08.920]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:12:08.920]      </control>
[01:12:08.920]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:12:08.920]        // if-block "(__protocol & 0xFFFF) == 1"
[01:12:08.920]          // =>  FALSE
[01:12:08.920]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:12:08.920]      </control>
[01:12:08.920]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:12:08.920]        // if-block "(__protocol & 0xFFFF) == 2"
[01:12:08.920]          // =>  TRUE
[01:12:08.920]        <block atomic="false" info="">
[01:12:08.920]          Message(0, "executing SWD power up");
[01:12:08.920]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:12:08.929]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:12:08.929]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:12:08.931]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:12:08.931]        </block>
[01:12:08.932]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:12:08.932]      </control>
[01:12:08.932]      // end if-block "powered_down"
[01:12:08.932]    </control>
[01:12:08.932]    <block atomic="false" info="">
[01:12:08.932]      __var DEBUG_PORT_VAL    = 0;
[01:12:08.932]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:12:08.932]      __var ACCESS_POINT_VAL  = 0;
[01:12:08.932]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:12:08.933]      __ap = 1; 
[01:12:08.933]        // -> [__ap <= 0x00000001]
[01:12:08.933]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:12:08.935]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:12:08.935]      __ap = 4;
[01:12:08.935]        // -> [__ap <= 0x00000004]
[01:12:08.935]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:08.942]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:12:08.942]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:12:08.942]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:08.944]    </block>
[01:12:08.944]    <block atomic="false" info="">
[01:12:08.944]      __var nReset = 0x80;
[01:12:08.944]        // -> [nReset <= 0x00000080]
[01:12:08.944]      __var canReadPins = 0;
[01:12:08.944]        // -> [canReadPins <= 0x00000000]
[01:12:08.944]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:12:08.944]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:12:08.944]        // -> [canReadPins <= 0x00000001]
[01:12:08.947]    </block>
[01:12:08.947]    <control if="" while="1" timeout="200" info="">
[01:12:08.947]      // while "1"  (timeout="200")
[01:12:08.947]      // while-condition  =>  TRUE
[01:12:08.947]      // while "1"  (timeout="200")
[01:12:08.947]      // while-condition  =>  TRUE
[01:12:08.947]      // while "1"  (timeout="200")
[01:12:08.947]      // while-condition  =>  TRUE
[01:12:08.947]      // while "1"  (timeout="200")
[01:12:08.947]      // while-condition  =>  TRUE
[01:12:08.947]      // while "1"  (timeout="200")
[01:12:08.949]      // while-condition  =>  TRUE
[01:12:08.949]      // while "1"  (timeout="200")
[01:12:08.949]      // while-condition  =>  TRUE
[01:12:08.949]      // while "1"  (timeout="200")
[01:12:08.949]      // while-condition  =>  TRUE
[01:12:08.949]      // while "1"  (timeout="200")
[01:12:08.949]      // while-condition  =>  TRUE
[01:12:08.949]      // while "1"  (timeout="200")
[01:12:08.949]      // while-condition  =>  TRUE
[01:12:08.949]      // while "1"  (timeout="200")
[01:12:08.949]      // while-condition  =>  TRUE
[01:12:08.950]      // while "1"  (timeout="200")
[01:12:08.950]      // while-condition  =>  TRUE
[01:12:08.951]      // while "1"  (timeout="200")
[01:12:08.951]      // while-condition  =>  TRUE
[01:12:08.951]      // while "1"  (timeout="200")
[01:12:08.951]      // while-condition  =>  TRUE
[01:12:08.951]      // while "1"  (timeout="200")
[01:12:08.951]      // while-condition  =>  TRUE
[01:12:08.951]      // while "1"  (timeout="200")
[01:12:08.951]      // while-condition  =>  TRUE
[01:12:08.951]      // while "1"  (timeout="200")
[01:12:08.951]      // while-condition  =>  TRUE
[01:12:08.952]      // while "1"  (timeout="200")
[01:12:08.952]      // while-condition  =>  TRUE
[01:12:08.952]      // while "1"  (timeout="200")
[01:12:08.952]      // while-condition  =>  TRUE
[01:12:08.952]      // while "1"  (timeout="200")
[01:12:08.952]      // while-condition  =>  TRUE
[01:12:08.952]      // while "1"  (timeout="200")
[01:12:08.952]      // while-condition  =>  TRUE
[01:12:08.952]      // while "1"  (timeout="200")
[01:12:08.952]      // while-condition  =>  TRUE
[01:12:08.953]      // while "1"  (timeout="200")
[01:12:08.953]      // while-condition  =>  TRUE
[01:12:08.953]      // while "1"  (timeout="200")
[01:12:08.953]      // while-condition  =>  TRUE
[01:12:08.953]      // while "1"  (timeout="200")
[01:12:08.953]      // while-condition  =>  TRUE
[01:12:08.953]      // while "1"  (timeout="200")
[01:12:08.953]      // while-condition  =>  TRUE
[01:12:08.953]      // while "1"  (timeout="200")
[01:12:08.953]      // while-condition  =>  TRUE
[01:12:08.955]      // while "1"  (timeout="200")
[01:12:08.955]      // while-condition  =>  TRUE
[01:12:08.955]      // while "1"  (timeout="200")
[01:12:08.955]      // while-condition  =>  TRUE
[01:12:08.955]      // while "1"  (timeout="200")
[01:12:08.955]      // while-condition  =>  TRUE
[01:12:08.955]      // while "1"  (timeout="200")
[01:12:08.955]      // while-condition  =>  TRUE
[01:12:08.955]      // while "1"  (timeout="200")
[01:12:08.955]      // while-condition  =>  TRUE
[01:12:08.955]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.956]      // while "1"  (timeout="200")
[01:12:08.956]      // while-condition  =>  TRUE
[01:12:08.957]      // while "1"  (timeout="200")
[01:12:08.957]      // while  =>  TIMEOUT
[01:12:08.957]      // end while "1"
[01:12:08.957]    </control>
[01:12:08.957]    <control if="canReadPins" while="" timeout="0" info="">
[01:12:08.957]      // if-block "canReadPins"
[01:12:08.957]        // =>  TRUE
[01:12:08.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:12:08.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:12:08.960]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:12:08.965]        // while-condition  =>  FALSE
[01:12:08.965]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:12:08.965]      </control>
[01:12:08.965]      // end if-block "canReadPins"
[01:12:08.965]    </control>
[01:12:08.965]    <control if="!canReadPins" while="" timeout="0" info="">
[01:12:08.965]      // if-block "!canReadPins"
[01:12:08.965]        // =>  FALSE
[01:12:08.965]      // skip if-block "!canReadPins"
[01:12:08.965]    </control>
[01:12:08.965]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:12:08.966]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:08.966]        // =>  TRUE
[01:12:08.966]      <block atomic="false" info="">
[01:12:08.966]        WriteAP(0x00, 0x190008);
[01:12:08.967]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:08.967]        WriteAP(0xF0, 0x01);
[01:12:08.971]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:08.971]      </block>
[01:12:08.971]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:08.971]    </control>
[01:12:08.971]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:12:08.971]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:08.971]        // =>  FALSE
[01:12:08.971]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:08.971]    </control>
[01:12:08.971]    <block atomic="false" info="">
[01:12:08.971]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:08.971]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:12:08.971]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:12:08.971]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:08.971]      __ap = 0; //lets make sure we reset the access point selection
[01:12:08.971]        // -> [__ap <= 0x00000000]
[01:12:08.971]    </block>
[01:12:08.971]  </sequence>
[01:12:08.971]  
[01:12:09.001]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:12:09.001]  
[01:12:09.001]  <debugvars>
[01:12:09.001]    // Pre-defined
[01:12:09.001]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:09.001]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:12:09.001]    __dp=0x00000000
[01:12:09.001]    __ap=0x00000000
[01:12:09.001]    __traceout=0x00000000      (Trace Disabled)
[01:12:09.001]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:09.001]    __FlashAddr=0x00000000
[01:12:09.001]    __FlashLen=0x00000000
[01:12:09.001]    __FlashArg=0x00000000
[01:12:09.001]    __FlashOp=0x00000000
[01:12:09.001]    __Result=0x00000000
[01:12:09.001]  </debugvars>
[01:12:09.001]  
[01:12:09.001]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:12:09.001]    <block atomic="false" info="">
[01:12:09.001]      __var deviceID = 0;
[01:12:09.001]        // -> [deviceID <= 0x00000000]
[01:12:09.001]      __var version = 0;
[01:12:09.001]        // -> [version <= 0x00000000]
[01:12:09.001]      __var partNum = 0;
[01:12:09.001]        // -> [partNum <= 0x00000000]
[01:12:09.001]      __var manuf = 0;
[01:12:09.001]        // -> [manuf <= 0x00000000]
[01:12:09.001]      __var isMSPM0G1X0X_G3X0X = 0;
[01:12:09.001]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:12:09.001]      __var isProduction = 0;
[01:12:09.001]        // -> [isProduction <= 0x00000000]
[01:12:09.001]      __var continueId = 0;
[01:12:09.001]        // -> [continueId <= 0x00000000]
[01:12:09.001]      deviceID =   Read32(0x41C40004);
[01:12:09.012]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:12:09.012]        // -> [deviceID <= 0x2BB8802F]
[01:12:09.012]      version = deviceID >> 28;
[01:12:09.012]        // -> [version <= 0x00000002]
[01:12:09.012]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:12:09.012]        // -> [partNum <= 0x0000BB88]
[01:12:09.012]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:12:09.012]        // -> [manuf <= 0x00000017]
[01:12:09.012]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:12:09.012]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:12:09.012]      isProduction = (version > 0);
[01:12:09.012]        // -> [isProduction <= 0x00000001]
[01:12:09.012]    </block>
[01:12:09.012]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:12:09.015]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:12:09.015]        // =>  FALSE
[01:12:09.015]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:12:09.015]    </control>
[01:12:09.015]    <control if="continueId == 4" while="" timeout="0" info="">
[01:12:09.015]      // if-block "continueId == 4"
[01:12:09.015]        // =>  FALSE
[01:12:09.015]      // skip if-block "continueId == 4"
[01:12:09.015]    </control>
[01:12:09.015]    <control if="!isProduction" while="" timeout="0" info="">
[01:12:09.015]      // if-block "!isProduction"
[01:12:09.015]        // =>  FALSE
[01:12:09.015]      // skip if-block "!isProduction"
[01:12:09.015]    </control>
[01:12:09.015]  </sequence>
[01:12:09.015]  
[01:12:52.579]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:12:52.579]  
[01:12:52.579]  <debugvars>
[01:12:52.580]    // Pre-defined
[01:12:52.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:52.580]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:12:52.580]    __dp=0x00000000
[01:12:52.580]    __ap=0x00000000
[01:12:52.580]    __traceout=0x00000000      (Trace Disabled)
[01:12:52.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:52.580]    __FlashAddr=0x00000000
[01:12:52.580]    __FlashLen=0x00000000
[01:12:52.580]    __FlashArg=0x00000000
[01:12:52.580]    __FlashOp=0x00000000
[01:12:52.580]    __Result=0x00000000
[01:12:52.580]  </debugvars>
[01:12:52.580]  
[01:12:52.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:12:52.580]    <block atomic="false" info="">
[01:12:52.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:12:52.580]        // -> [isSWJ <= 0x00000001]
[01:12:52.580]      __var hasDormant = __protocol & 0x00020000;
[01:12:52.580]        // -> [hasDormant <= 0x00000000]
[01:12:52.580]      __var protType   = __protocol & 0x0000FFFF;
[01:12:52.580]        // -> [protType <= 0x00000002]
[01:12:52.580]    </block>
[01:12:52.580]    <control if="protType == 1" while="" timeout="0" info="">
[01:12:52.580]      // if-block "protType == 1"
[01:12:52.580]        // =>  FALSE
[01:12:52.580]      // skip if-block "protType == 1"
[01:12:52.580]    </control>
[01:12:52.580]    <control if="protType == 2" while="" timeout="0" info="">
[01:12:52.580]      // if-block "protType == 2"
[01:12:52.580]        // =>  TRUE
[01:12:52.580]      <control if="isSWJ" while="" timeout="0" info="">
[01:12:52.580]        // if-block "isSWJ"
[01:12:52.580]          // =>  TRUE
[01:12:52.580]        <control if="hasDormant" while="" timeout="0" info="">
[01:12:52.580]          // if-block "hasDormant"
[01:12:52.583]            // =>  FALSE
[01:12:52.583]          // skip if-block "hasDormant"
[01:12:52.583]        </control>
[01:12:52.583]        <control if="!hasDormant" while="" timeout="0" info="">
[01:12:52.583]          // if-block "!hasDormant"
[01:12:52.583]            // =>  TRUE
[01:12:52.583]          <block atomic="false" info="">
[01:12:52.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:12:52.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:52.584]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:12:52.594]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:12:52.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:12:52.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:52.597]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:12:52.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:12:52.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:12:52.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:52.602]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:12:52.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:12:52.604]          </block>
[01:12:52.605]          // end if-block "!hasDormant"
[01:12:52.605]        </control>
[01:12:52.605]        // end if-block "isSWJ"
[01:12:52.605]      </control>
[01:12:52.605]      <control if="!isSWJ" while="" timeout="0" info="">
[01:12:52.605]        // if-block "!isSWJ"
[01:12:52.605]          // =>  FALSE
[01:12:52.605]        // skip if-block "!isSWJ"
[01:12:52.606]      </control>
[01:12:52.606]      <block atomic="false" info="">
[01:12:52.606]        ReadDP(0x0);
[01:12:52.607]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:12:52.607]      </block>
[01:12:52.607]      // end if-block "protType == 2"
[01:12:52.607]    </control>
[01:12:52.607]  </sequence>
[01:12:52.608]  
[01:12:52.613]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:12:52.613]  
[01:12:52.613]  <debugvars>
[01:12:52.613]    // Pre-defined
[01:12:52.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:52.613]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:12:52.614]    __dp=0x00000000
[01:12:52.614]    __ap=0x00000000
[01:12:52.614]    __traceout=0x00000000      (Trace Disabled)
[01:12:52.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:52.614]    __FlashAddr=0x00000000
[01:12:52.614]    __FlashLen=0x00000000
[01:12:52.614]    __FlashArg=0x00000000
[01:12:52.615]    __FlashOp=0x00000000
[01:12:52.615]    __Result=0x00000000
[01:12:52.615]  </debugvars>
[01:12:52.615]  
[01:12:52.615]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:12:52.615]    <block atomic="false" info="">
[01:12:52.615]      __var SW_DP_ABORT       = 0x0;
[01:12:52.615]        // -> [SW_DP_ABORT <= 0x00000000]
[01:12:52.616]      __var DP_CTRL_STAT      = 0x4;
[01:12:52.616]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:12:52.616]      __var DP_SELECT         = 0x8;
[01:12:52.616]        // -> [DP_SELECT <= 0x00000008]
[01:12:52.616]      __var powered_down      = 0;
[01:12:52.617]        // -> [powered_down <= 0x00000000]
[01:12:52.617]      WriteDP(DP_SELECT, 0x00000000);
[01:12:52.618]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:12:52.618]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:12:52.620]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:12:52.620]        // -> [powered_down <= 0x00000001]
[01:12:52.620]    </block>
[01:12:52.620]    <control if="powered_down" while="" timeout="0" info="">
[01:12:52.620]      // if-block "powered_down"
[01:12:52.620]        // =>  TRUE
[01:12:52.620]      <block atomic="false" info="">
[01:12:52.620]        Message(0, "Debug/System power-up request sent");
[01:12:52.621]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:12:52.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:12:52.623]      </block>
[01:12:52.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:12:52.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:12:52.624]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:12:52.624]        // while-condition  =>  FALSE
[01:12:52.624]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:12:52.624]      </control>
[01:12:52.624]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:12:52.624]        // if-block "(__protocol & 0xFFFF) == 1"
[01:12:52.624]          // =>  FALSE
[01:12:52.624]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:12:52.624]      </control>
[01:12:52.624]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:12:52.624]        // if-block "(__protocol & 0xFFFF) == 2"
[01:12:52.624]          // =>  TRUE
[01:12:52.624]        <block atomic="false" info="">
[01:12:52.624]          Message(0, "executing SWD power up");
[01:12:52.624]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:12:52.624]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:12:52.624]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:12:52.624]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:12:52.624]        </block>
[01:12:52.630]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:12:52.630]      </control>
[01:12:52.630]      // end if-block "powered_down"
[01:12:52.630]    </control>
[01:12:52.630]    <block atomic="false" info="">
[01:12:52.630]      __var DEBUG_PORT_VAL    = 0;
[01:12:52.630]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:12:52.630]      __var ACCESS_POINT_VAL  = 0;
[01:12:52.630]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:12:52.630]      __ap = 1; 
[01:12:52.630]        // -> [__ap <= 0x00000001]
[01:12:52.630]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:12:52.635]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:12:52.635]      __ap = 4;
[01:12:52.635]        // -> [__ap <= 0x00000004]
[01:12:52.635]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:52.639]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:12:52.639]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:12:52.639]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:52.639]    </block>
[01:12:52.639]    <block atomic="false" info="">
[01:12:52.639]      __var nReset = 0x80;
[01:12:52.639]        // -> [nReset <= 0x00000080]
[01:12:52.639]      __var canReadPins = 0;
[01:12:52.639]        // -> [canReadPins <= 0x00000000]
[01:12:52.639]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:12:52.645]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:12:52.645]        // -> [canReadPins <= 0x00000001]
[01:12:52.645]    </block>
[01:12:52.645]    <control if="" while="1" timeout="200" info="">
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.645]      // while "1"  (timeout="200")
[01:12:52.645]      // while-condition  =>  TRUE
[01:12:52.648]      // while "1"  (timeout="200")
[01:12:52.648]      // while-condition  =>  TRUE
[01:12:52.648]      // while "1"  (timeout="200")
[01:12:52.648]      // while-condition  =>  TRUE
[01:12:52.648]      // while "1"  (timeout="200")
[01:12:52.648]      // while-condition  =>  TRUE
[01:12:52.648]      // while "1"  (timeout="200")
[01:12:52.649]      // while-condition  =>  TRUE
[01:12:52.649]      // while "1"  (timeout="200")
[01:12:52.649]      // while-condition  =>  TRUE
[01:12:52.649]      // while "1"  (timeout="200")
[01:12:52.649]      // while-condition  =>  TRUE
[01:12:52.649]      // while "1"  (timeout="200")
[01:12:52.649]      // while-condition  =>  TRUE
[01:12:52.649]      // while "1"  (timeout="200")
[01:12:52.649]      // while-condition  =>  TRUE
[01:12:52.649]      // while "1"  (timeout="200")
[01:12:52.649]      // while-condition  =>  TRUE
[01:12:52.649]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.650]      // while "1"  (timeout="200")
[01:12:52.650]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.655]      // while "1"  (timeout="200")
[01:12:52.655]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.659]      // while "1"  (timeout="200")
[01:12:52.659]      // while-condition  =>  TRUE
[01:12:52.665]      // while "1"  (timeout="200")
[01:12:52.665]      // while  =>  TIMEOUT
[01:12:52.665]      // end while "1"
[01:12:52.665]    </control>
[01:12:52.665]    <control if="canReadPins" while="" timeout="0" info="">
[01:12:52.665]      // if-block "canReadPins"
[01:12:52.665]        // =>  TRUE
[01:12:52.665]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:12:52.665]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:12:52.668]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:12:52.668]        // while-condition  =>  FALSE
[01:12:52.668]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:12:52.668]      </control>
[01:12:52.668]      // end if-block "canReadPins"
[01:12:52.668]    </control>
[01:12:52.668]    <control if="!canReadPins" while="" timeout="0" info="">
[01:12:52.669]      // if-block "!canReadPins"
[01:12:52.669]        // =>  FALSE
[01:12:52.669]      // skip if-block "!canReadPins"
[01:12:52.669]    </control>
[01:12:52.669]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:12:52.669]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:52.669]        // =>  TRUE
[01:12:52.669]      <block atomic="false" info="">
[01:12:52.669]        WriteAP(0x00, 0x190008);
[01:12:52.669]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:52.669]        WriteAP(0xF0, 0x01);
[01:12:52.676]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:52.676]      </block>
[01:12:52.676]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:52.676]    </control>
[01:12:52.676]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:12:52.676]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:52.676]        // =>  FALSE
[01:12:52.679]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:52.679]    </control>
[01:12:52.679]    <block atomic="false" info="">
[01:12:52.679]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:52.686]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:12:52.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:12:52.687]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:52.687]      __ap = 0; //lets make sure we reset the access point selection
[01:12:52.687]        // -> [__ap <= 0x00000000]
[01:12:52.687]    </block>
[01:12:52.687]  </sequence>
[01:12:52.687]  
[01:12:52.717]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:12:52.717]  
[01:12:52.717]  <debugvars>
[01:12:52.717]    // Pre-defined
[01:12:52.717]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:52.717]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:12:52.717]    __dp=0x00000000
[01:12:52.717]    __ap=0x00000000
[01:12:52.717]    __traceout=0x00000000      (Trace Disabled)
[01:12:52.717]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:52.717]    __FlashAddr=0x00000000
[01:12:52.717]    __FlashLen=0x00000000
[01:12:52.717]    __FlashArg=0x00000000
[01:12:52.717]    __FlashOp=0x00000000
[01:12:52.717]    __Result=0x00000000
[01:12:52.717]  </debugvars>
[01:12:52.717]  
[01:12:52.717]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:12:52.720]    <block atomic="false" info="">
[01:12:52.720]      __var deviceID = 0;
[01:12:52.720]        // -> [deviceID <= 0x00000000]
[01:12:52.720]      __var version = 0;
[01:12:52.720]        // -> [version <= 0x00000000]
[01:12:52.720]      __var partNum = 0;
[01:12:52.720]        // -> [partNum <= 0x00000000]
[01:12:52.720]      __var manuf = 0;
[01:12:52.720]        // -> [manuf <= 0x00000000]
[01:12:52.720]      __var isMSPM0G1X0X_G3X0X = 0;
[01:12:52.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:12:52.720]      __var isProduction = 0;
[01:12:52.720]        // -> [isProduction <= 0x00000000]
[01:12:52.720]      __var continueId = 0;
[01:12:52.720]        // -> [continueId <= 0x00000000]
[01:12:52.720]      deviceID =   Read32(0x41C40004);
[01:12:52.720]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:12:52.720]        // -> [deviceID <= 0x2BB8802F]
[01:12:52.720]      version = deviceID >> 28;
[01:12:52.720]        // -> [version <= 0x00000002]
[01:12:52.720]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:12:52.720]        // -> [partNum <= 0x0000BB88]
[01:12:52.720]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:12:52.727]        // -> [manuf <= 0x00000017]
[01:12:52.727]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:12:52.727]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:12:52.728]      isProduction = (version > 0);
[01:12:52.728]        // -> [isProduction <= 0x00000001]
[01:12:52.728]    </block>
[01:12:52.728]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:12:52.728]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:12:52.728]        // =>  FALSE
[01:12:52.728]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:12:52.728]    </control>
[01:12:52.728]    <control if="continueId == 4" while="" timeout="0" info="">
[01:12:52.728]      // if-block "continueId == 4"
[01:12:52.728]        // =>  FALSE
[01:12:52.728]      // skip if-block "continueId == 4"
[01:12:52.728]    </control>
[01:12:52.728]    <control if="!isProduction" while="" timeout="0" info="">
[01:12:52.728]      // if-block "!isProduction"
[01:12:52.728]        // =>  FALSE
[01:12:52.730]      // skip if-block "!isProduction"
[01:12:52.730]    </control>
[01:12:52.730]  </sequence>
[01:12:52.730]  
[01:12:58.746]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:12:58.746]  
[01:12:58.760]  <debugvars>
[01:12:58.760]    // Pre-defined
[01:12:58.760]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:58.760]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:12:58.760]    __dp=0x00000000
[01:12:58.760]    __ap=0x00000000
[01:12:58.760]    __traceout=0x00000000      (Trace Disabled)
[01:12:58.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:58.760]    __FlashAddr=0x00000000
[01:12:58.760]    __FlashLen=0x00000000
[01:12:58.760]    __FlashArg=0x00000000
[01:12:58.760]    __FlashOp=0x00000000
[01:12:58.760]    __Result=0x00000000
[01:12:58.760]  </debugvars>
[01:12:58.760]  
[01:12:58.760]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:12:58.760]    <block atomic="false" info="">
[01:12:58.760]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:12:58.760]        // -> [isSWJ <= 0x00000001]
[01:12:58.760]      __var hasDormant = __protocol & 0x00020000;
[01:12:58.760]        // -> [hasDormant <= 0x00000000]
[01:12:58.760]      __var protType   = __protocol & 0x0000FFFF;
[01:12:58.760]        // -> [protType <= 0x00000002]
[01:12:58.760]    </block>
[01:12:58.760]    <control if="protType == 1" while="" timeout="0" info="">
[01:12:58.760]      // if-block "protType == 1"
[01:12:58.760]        // =>  FALSE
[01:12:58.760]      // skip if-block "protType == 1"
[01:12:58.760]    </control>
[01:12:58.760]    <control if="protType == 2" while="" timeout="0" info="">
[01:12:58.760]      // if-block "protType == 2"
[01:12:58.760]        // =>  TRUE
[01:12:58.760]      <control if="isSWJ" while="" timeout="0" info="">
[01:12:58.760]        // if-block "isSWJ"
[01:12:58.760]          // =>  TRUE
[01:12:58.760]        <control if="hasDormant" while="" timeout="0" info="">
[01:12:58.760]          // if-block "hasDormant"
[01:12:58.760]            // =>  FALSE
[01:12:58.760]          // skip if-block "hasDormant"
[01:12:58.760]        </control>
[01:12:58.760]        <control if="!hasDormant" while="" timeout="0" info="">
[01:12:58.760]          // if-block "!hasDormant"
[01:12:58.760]            // =>  TRUE
[01:12:58.760]          <block atomic="false" info="">
[01:12:58.760]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:12:58.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:58.766]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:12:58.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:12:58.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:12:58.768]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:58.768]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:12:58.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:12:58.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:12:58.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:12:58.776]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:12:58.776]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:12:58.786]          </block>
[01:12:58.786]          // end if-block "!hasDormant"
[01:12:58.786]        </control>
[01:12:58.786]        // end if-block "isSWJ"
[01:12:58.786]      </control>
[01:12:58.786]      <control if="!isSWJ" while="" timeout="0" info="">
[01:12:58.786]        // if-block "!isSWJ"
[01:12:58.786]          // =>  FALSE
[01:12:58.786]        // skip if-block "!isSWJ"
[01:12:58.786]      </control>
[01:12:58.786]      <block atomic="false" info="">
[01:12:58.786]        ReadDP(0x0);
[01:12:58.786]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:12:58.786]      </block>
[01:12:58.786]      // end if-block "protType == 2"
[01:12:58.786]    </control>
[01:12:58.786]  </sequence>
[01:12:58.786]  
[01:12:58.796]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:12:58.796]  
[01:12:58.796]  <debugvars>
[01:12:58.796]    // Pre-defined
[01:12:58.796]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:58.796]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:12:58.796]    __dp=0x00000000
[01:12:58.796]    __ap=0x00000000
[01:12:58.796]    __traceout=0x00000000      (Trace Disabled)
[01:12:58.796]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:58.796]    __FlashAddr=0x00000000
[01:12:58.796]    __FlashLen=0x00000000
[01:12:58.796]    __FlashArg=0x00000000
[01:12:58.796]    __FlashOp=0x00000000
[01:12:58.796]    __Result=0x00000000
[01:12:58.796]  </debugvars>
[01:12:58.796]  
[01:12:58.796]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:12:58.796]    <block atomic="false" info="">
[01:12:58.796]      __var SW_DP_ABORT       = 0x0;
[01:12:58.796]        // -> [SW_DP_ABORT <= 0x00000000]
[01:12:58.796]      __var DP_CTRL_STAT      = 0x4;
[01:12:58.796]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:12:58.796]      __var DP_SELECT         = 0x8;
[01:12:58.796]        // -> [DP_SELECT <= 0x00000008]
[01:12:58.796]      __var powered_down      = 0;
[01:12:58.796]        // -> [powered_down <= 0x00000000]
[01:12:58.796]      WriteDP(DP_SELECT, 0x00000000);
[01:12:58.806]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:12:58.806]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:12:58.806]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:12:58.806]        // -> [powered_down <= 0x00000001]
[01:12:58.806]    </block>
[01:12:58.806]    <control if="powered_down" while="" timeout="0" info="">
[01:12:58.806]      // if-block "powered_down"
[01:12:58.806]        // =>  TRUE
[01:12:58.806]      <block atomic="false" info="">
[01:12:58.806]        Message(0, "Debug/System power-up request sent");
[01:12:58.806]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:12:58.806]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:12:58.806]      </block>
[01:12:58.806]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:12:58.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:12:58.816]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:12:58.816]        // while-condition  =>  FALSE
[01:12:58.816]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:12:58.816]      </control>
[01:12:58.816]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:12:58.816]        // if-block "(__protocol & 0xFFFF) == 1"
[01:12:58.816]          // =>  FALSE
[01:12:58.816]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:12:58.816]      </control>
[01:12:58.816]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:12:58.816]        // if-block "(__protocol & 0xFFFF) == 2"
[01:12:58.816]          // =>  TRUE
[01:12:58.816]        <block atomic="false" info="">
[01:12:58.816]          Message(0, "executing SWD power up");
[01:12:58.816]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:12:58.816]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:12:58.816]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:12:58.816]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:12:58.816]        </block>
[01:12:58.816]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:12:58.816]      </control>
[01:12:58.816]      // end if-block "powered_down"
[01:12:58.816]    </control>
[01:12:58.816]    <block atomic="false" info="">
[01:12:58.816]      __var DEBUG_PORT_VAL    = 0;
[01:12:58.816]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:12:58.816]      __var ACCESS_POINT_VAL  = 0;
[01:12:58.816]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:12:58.816]      __ap = 1; 
[01:12:58.827]        // -> [__ap <= 0x00000001]
[01:12:58.827]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:12:58.827]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:12:58.827]      __ap = 4;
[01:12:58.827]        // -> [__ap <= 0x00000004]
[01:12:58.827]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:58.837]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:12:58.837]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:12:58.837]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:58.837]    </block>
[01:12:58.837]    <block atomic="false" info="">
[01:12:58.837]      __var nReset = 0x80;
[01:12:58.837]        // -> [nReset <= 0x00000080]
[01:12:58.837]      __var canReadPins = 0;
[01:12:58.837]        // -> [canReadPins <= 0x00000000]
[01:12:58.837]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:12:58.837]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:12:58.837]        // -> [canReadPins <= 0x00000001]
[01:12:58.837]    </block>
[01:12:58.837]    <control if="" while="1" timeout="200" info="">
[01:12:58.837]      // while "1"  (timeout="200")
[01:12:58.837]      // while-condition  =>  TRUE
[01:12:58.837]      // while "1"  (timeout="200")
[01:12:58.837]      // while-condition  =>  TRUE
[01:12:58.837]      // while "1"  (timeout="200")
[01:12:58.837]      // while-condition  =>  TRUE
[01:12:58.837]      // while "1"  (timeout="200")
[01:12:58.837]      // while-condition  =>  TRUE
[01:12:58.837]      // while "1"  (timeout="200")
[01:12:58.837]      // while-condition  =>  TRUE
[01:12:58.837]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.847]      // while-condition  =>  TRUE
[01:12:58.847]      // while "1"  (timeout="200")
[01:12:58.857]      // while-condition  =>  TRUE
[01:12:58.857]      // while "1"  (timeout="200")
[01:12:58.857]      // while  =>  TIMEOUT
[01:12:58.857]      // end while "1"
[01:12:58.857]    </control>
[01:12:58.857]    <control if="canReadPins" while="" timeout="0" info="">
[01:12:58.857]      // if-block "canReadPins"
[01:12:58.857]        // =>  TRUE
[01:12:58.857]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:12:58.857]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:12:58.857]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:12:58.859]        // while-condition  =>  FALSE
[01:12:58.859]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:12:58.859]      </control>
[01:12:58.859]      // end if-block "canReadPins"
[01:12:58.859]    </control>
[01:12:58.859]    <control if="!canReadPins" while="" timeout="0" info="">
[01:12:58.859]      // if-block "!canReadPins"
[01:12:58.859]        // =>  FALSE
[01:12:58.859]      // skip if-block "!canReadPins"
[01:12:58.859]    </control>
[01:12:58.859]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:12:58.859]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:58.859]        // =>  TRUE
[01:12:58.859]      <block atomic="false" info="">
[01:12:58.859]        WriteAP(0x00, 0x190008);
[01:12:58.859]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:58.859]        WriteAP(0xF0, 0x01);
[01:12:58.859]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:12:58.859]      </block>
[01:12:58.859]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:12:58.867]    </control>
[01:12:58.867]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:12:58.867]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:58.867]        // =>  FALSE
[01:12:58.867]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:12:58.867]    </control>
[01:12:58.867]    <block atomic="false" info="">
[01:12:58.867]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:12:58.867]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:12:58.867]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:12:58.867]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:12:58.867]      __ap = 0; //lets make sure we reset the access point selection
[01:12:58.867]        // -> [__ap <= 0x00000000]
[01:12:58.867]    </block>
[01:12:58.867]  </sequence>
[01:12:58.867]  
[01:12:58.887]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:12:58.887]  
[01:12:58.887]  <debugvars>
[01:12:58.887]    // Pre-defined
[01:12:58.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:12:58.887]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:12:58.887]    __dp=0x00000000
[01:12:58.887]    __ap=0x00000000
[01:12:58.887]    __traceout=0x00000000      (Trace Disabled)
[01:12:58.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:12:58.887]    __FlashAddr=0x00000000
[01:12:58.887]    __FlashLen=0x00000000
[01:12:58.887]    __FlashArg=0x00000000
[01:12:58.887]    __FlashOp=0x00000000
[01:12:58.887]    __Result=0x00000000
[01:12:58.887]  </debugvars>
[01:12:58.887]  
[01:12:58.887]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:12:58.887]    <block atomic="false" info="">
[01:12:58.887]      __var deviceID = 0;
[01:12:58.887]        // -> [deviceID <= 0x00000000]
[01:12:58.887]      __var version = 0;
[01:12:58.887]        // -> [version <= 0x00000000]
[01:12:58.887]      __var partNum = 0;
[01:12:58.887]        // -> [partNum <= 0x00000000]
[01:12:58.887]      __var manuf = 0;
[01:12:58.897]        // -> [manuf <= 0x00000000]
[01:12:58.897]      __var isMSPM0G1X0X_G3X0X = 0;
[01:12:58.897]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:12:58.897]      __var isProduction = 0;
[01:12:58.897]        // -> [isProduction <= 0x00000000]
[01:12:58.897]      __var continueId = 0;
[01:12:58.897]        // -> [continueId <= 0x00000000]
[01:12:58.897]      deviceID =   Read32(0x41C40004);
[01:12:58.907]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:12:58.907]        // -> [deviceID <= 0x2BB8802F]
[01:12:58.907]      version = deviceID >> 28;
[01:12:58.907]        // -> [version <= 0x00000002]
[01:12:58.907]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:12:58.907]        // -> [partNum <= 0x0000BB88]
[01:12:58.907]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:12:58.907]        // -> [manuf <= 0x00000017]
[01:12:58.907]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:12:58.907]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:12:58.907]      isProduction = (version > 0);
[01:12:58.907]        // -> [isProduction <= 0x00000001]
[01:12:58.907]    </block>
[01:12:58.907]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:12:58.907]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:12:58.907]        // =>  FALSE
[01:12:58.907]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:12:58.907]    </control>
[01:12:58.907]    <control if="continueId == 4" while="" timeout="0" info="">
[01:12:58.907]      // if-block "continueId == 4"
[01:12:58.907]        // =>  FALSE
[01:12:58.907]      // skip if-block "continueId == 4"
[01:12:58.907]    </control>
[01:12:58.907]    <control if="!isProduction" while="" timeout="0" info="">
[01:12:58.907]      // if-block "!isProduction"
[01:12:58.907]        // =>  FALSE
[01:12:58.907]      // skip if-block "!isProduction"
[01:12:58.907]    </control>
[01:12:58.907]  </sequence>
[01:12:58.907]  
[01:15:23.522]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:15:23.522]  
[01:15:23.533]  <debugvars>
[01:15:23.533]    // Pre-defined
[01:15:23.533]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:23.533]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:23.533]    __dp=0x00000000
[01:15:23.533]    __ap=0x00000000
[01:15:23.533]    __traceout=0x00000000      (Trace Disabled)
[01:15:23.533]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:23.533]    __FlashAddr=0x00000000
[01:15:23.533]    __FlashLen=0x00000000
[01:15:23.533]    __FlashArg=0x00000000
[01:15:23.533]    __FlashOp=0x00000000
[01:15:23.533]    __Result=0x00000000
[01:15:23.533]  </debugvars>
[01:15:23.533]  
[01:15:23.533]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:15:23.533]    <block atomic="false" info="">
[01:15:23.533]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:15:23.533]        // -> [isSWJ <= 0x00000001]
[01:15:23.535]      __var hasDormant = __protocol & 0x00020000;
[01:15:23.535]        // -> [hasDormant <= 0x00000000]
[01:15:23.535]      __var protType   = __protocol & 0x0000FFFF;
[01:15:23.535]        // -> [protType <= 0x00000002]
[01:15:23.535]    </block>
[01:15:23.535]    <control if="protType == 1" while="" timeout="0" info="">
[01:15:23.535]      // if-block "protType == 1"
[01:15:23.535]        // =>  FALSE
[01:15:23.535]      // skip if-block "protType == 1"
[01:15:23.535]    </control>
[01:15:23.535]    <control if="protType == 2" while="" timeout="0" info="">
[01:15:23.535]      // if-block "protType == 2"
[01:15:23.535]        // =>  TRUE
[01:15:23.535]      <control if="isSWJ" while="" timeout="0" info="">
[01:15:23.535]        // if-block "isSWJ"
[01:15:23.535]          // =>  TRUE
[01:15:23.535]        <control if="hasDormant" while="" timeout="0" info="">
[01:15:23.535]          // if-block "hasDormant"
[01:15:23.535]            // =>  FALSE
[01:15:23.535]          // skip if-block "hasDormant"
[01:15:23.535]        </control>
[01:15:23.535]        <control if="!hasDormant" while="" timeout="0" info="">
[01:15:23.535]          // if-block "!hasDormant"
[01:15:23.535]            // =>  TRUE
[01:15:23.535]          <block atomic="false" info="">
[01:15:23.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:15:23.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:23.543]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:15:23.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:15:23.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:15:23.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:23.543]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:15:23.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:15:23.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:15:23.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:23.543]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:15:23.551]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:15:23.551]          </block>
[01:15:23.551]          // end if-block "!hasDormant"
[01:15:23.551]        </control>
[01:15:23.551]        // end if-block "isSWJ"
[01:15:23.551]      </control>
[01:15:23.551]      <control if="!isSWJ" while="" timeout="0" info="">
[01:15:23.551]        // if-block "!isSWJ"
[01:15:23.551]          // =>  FALSE
[01:15:23.551]        // skip if-block "!isSWJ"
[01:15:23.551]      </control>
[01:15:23.551]      <block atomic="false" info="">
[01:15:23.551]        ReadDP(0x0);
[01:15:23.551]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:15:23.551]      </block>
[01:15:23.551]      // end if-block "protType == 2"
[01:15:23.551]    </control>
[01:15:23.551]  </sequence>
[01:15:23.551]  
[01:15:23.551]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:15:23.551]  
[01:15:23.551]  <debugvars>
[01:15:23.551]    // Pre-defined
[01:15:23.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:23.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:23.551]    __dp=0x00000000
[01:15:23.551]    __ap=0x00000000
[01:15:23.551]    __traceout=0x00000000      (Trace Disabled)
[01:15:23.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:23.551]    __FlashAddr=0x00000000
[01:15:23.551]    __FlashLen=0x00000000
[01:15:23.551]    __FlashArg=0x00000000
[01:15:23.551]    __FlashOp=0x00000000
[01:15:23.551]    __Result=0x00000000
[01:15:23.551]  </debugvars>
[01:15:23.551]  
[01:15:23.551]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:15:23.551]    <block atomic="false" info="">
[01:15:23.551]      __var SW_DP_ABORT       = 0x0;
[01:15:23.551]        // -> [SW_DP_ABORT <= 0x00000000]
[01:15:23.561]      __var DP_CTRL_STAT      = 0x4;
[01:15:23.561]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:15:23.561]      __var DP_SELECT         = 0x8;
[01:15:23.561]        // -> [DP_SELECT <= 0x00000008]
[01:15:23.561]      __var powered_down      = 0;
[01:15:23.561]        // -> [powered_down <= 0x00000000]
[01:15:23.561]      WriteDP(DP_SELECT, 0x00000000);
[01:15:23.561]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:15:23.561]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:15:23.561]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:15:23.561]        // -> [powered_down <= 0x00000001]
[01:15:23.561]    </block>
[01:15:23.561]    <control if="powered_down" while="" timeout="0" info="">
[01:15:23.561]      // if-block "powered_down"
[01:15:23.561]        // =>  TRUE
[01:15:23.561]      <block atomic="false" info="">
[01:15:23.561]        Message(0, "Debug/System power-up request sent");
[01:15:23.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:15:23.571]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:15:23.571]      </block>
[01:15:23.571]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:15:23.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:15:23.571]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:15:23.571]        // while-condition  =>  FALSE
[01:15:23.571]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:15:23.571]      </control>
[01:15:23.571]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:15:23.571]        // if-block "(__protocol & 0xFFFF) == 1"
[01:15:23.571]          // =>  FALSE
[01:15:23.571]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:15:23.571]      </control>
[01:15:23.571]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:15:23.571]        // if-block "(__protocol & 0xFFFF) == 2"
[01:15:23.571]          // =>  TRUE
[01:15:23.571]        <block atomic="false" info="">
[01:15:23.571]          Message(0, "executing SWD power up");
[01:15:23.571]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:15:23.581]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:15:23.581]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:15:23.581]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:15:23.581]        </block>
[01:15:23.581]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:15:23.581]      </control>
[01:15:23.581]      // end if-block "powered_down"
[01:15:23.581]    </control>
[01:15:23.581]    <block atomic="false" info="">
[01:15:23.581]      __var DEBUG_PORT_VAL    = 0;
[01:15:23.581]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:15:23.581]      __var ACCESS_POINT_VAL  = 0;
[01:15:23.581]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:15:23.581]      __ap = 1; 
[01:15:23.581]        // -> [__ap <= 0x00000001]
[01:15:23.581]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:15:23.591]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:15:23.591]      __ap = 4;
[01:15:23.591]        // -> [__ap <= 0x00000004]
[01:15:23.591]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:23.591]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:15:23.591]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:15:23.591]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:23.591]    </block>
[01:15:23.591]    <block atomic="false" info="">
[01:15:23.591]      __var nReset = 0x80;
[01:15:23.591]        // -> [nReset <= 0x00000080]
[01:15:23.591]      __var canReadPins = 0;
[01:15:23.591]        // -> [canReadPins <= 0x00000000]
[01:15:23.591]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:15:23.601]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:15:23.601]        // -> [canReadPins <= 0x00000001]
[01:15:23.601]    </block>
[01:15:23.601]    <control if="" while="1" timeout="200" info="">
[01:15:23.601]      // while "1"  (timeout="200")
[01:15:23.601]      // while-condition  =>  TRUE
[01:15:23.601]      // while "1"  (timeout="200")
[01:15:23.601]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.603]      // while-condition  =>  TRUE
[01:15:23.603]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.611]      // while-condition  =>  TRUE
[01:15:23.611]      // while "1"  (timeout="200")
[01:15:23.621]      // while-condition  =>  TRUE
[01:15:23.621]      // while "1"  (timeout="200")
[01:15:23.621]      // while  =>  TIMEOUT
[01:15:23.621]      // end while "1"
[01:15:23.621]    </control>
[01:15:23.621]    <control if="canReadPins" while="" timeout="0" info="">
[01:15:23.621]      // if-block "canReadPins"
[01:15:23.621]        // =>  TRUE
[01:15:23.621]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:15:23.621]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:15:23.621]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:15:23.621]        // while-condition  =>  FALSE
[01:15:23.621]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:15:23.621]      </control>
[01:15:23.621]      // end if-block "canReadPins"
[01:15:23.621]    </control>
[01:15:23.621]    <control if="!canReadPins" while="" timeout="0" info="">
[01:15:23.621]      // if-block "!canReadPins"
[01:15:23.621]        // =>  FALSE
[01:15:23.621]      // skip if-block "!canReadPins"
[01:15:23.621]    </control>
[01:15:23.621]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:15:23.621]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:23.621]        // =>  TRUE
[01:15:23.621]      <block atomic="false" info="">
[01:15:23.621]        WriteAP(0x00, 0x190008);
[01:15:23.621]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:23.621]        WriteAP(0xF0, 0x01);
[01:15:23.632]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:23.632]      </block>
[01:15:23.632]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:23.632]    </control>
[01:15:23.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:15:23.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:23.632]        // =>  FALSE
[01:15:23.632]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:23.632]    </control>
[01:15:23.632]    <block atomic="false" info="">
[01:15:23.635]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:23.635]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:15:23.635]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:15:23.635]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:23.635]      __ap = 0; //lets make sure we reset the access point selection
[01:15:23.635]        // -> [__ap <= 0x00000000]
[01:15:23.635]    </block>
[01:15:23.635]  </sequence>
[01:15:23.635]  
[01:15:23.663]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:15:23.663]  
[01:15:23.663]  <debugvars>
[01:15:23.663]    // Pre-defined
[01:15:23.663]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:23.663]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:23.663]    __dp=0x00000000
[01:15:23.663]    __ap=0x00000000
[01:15:23.663]    __traceout=0x00000000      (Trace Disabled)
[01:15:23.663]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:23.663]    __FlashAddr=0x00000000
[01:15:23.663]    __FlashLen=0x00000000
[01:15:23.663]    __FlashArg=0x00000000
[01:15:23.663]    __FlashOp=0x00000000
[01:15:23.663]    __Result=0x00000000
[01:15:23.663]  </debugvars>
[01:15:23.663]  
[01:15:23.663]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:15:23.663]    <block atomic="false" info="">
[01:15:23.663]      __var deviceID = 0;
[01:15:23.665]        // -> [deviceID <= 0x00000000]
[01:15:23.665]      __var version = 0;
[01:15:23.665]        // -> [version <= 0x00000000]
[01:15:23.665]      __var partNum = 0;
[01:15:23.665]        // -> [partNum <= 0x00000000]
[01:15:23.665]      __var manuf = 0;
[01:15:23.665]        // -> [manuf <= 0x00000000]
[01:15:23.665]      __var isMSPM0G1X0X_G3X0X = 0;
[01:15:23.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:15:23.665]      __var isProduction = 0;
[01:15:23.665]        // -> [isProduction <= 0x00000000]
[01:15:23.665]      __var continueId = 0;
[01:15:23.665]        // -> [continueId <= 0x00000000]
[01:15:23.665]      deviceID =   Read32(0x41C40004);
[01:15:23.665]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:15:23.665]        // -> [deviceID <= 0x2BB8802F]
[01:15:23.665]      version = deviceID >> 28;
[01:15:23.665]        // -> [version <= 0x00000002]
[01:15:23.665]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:15:23.665]        // -> [partNum <= 0x0000BB88]
[01:15:23.665]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:15:23.665]        // -> [manuf <= 0x00000017]
[01:15:23.665]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:15:23.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:15:23.665]      isProduction = (version > 0);
[01:15:23.665]        // -> [isProduction <= 0x00000001]
[01:15:23.665]    </block>
[01:15:23.665]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:15:23.673]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:15:23.673]        // =>  FALSE
[01:15:23.673]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:15:23.673]    </control>
[01:15:23.673]    <control if="continueId == 4" while="" timeout="0" info="">
[01:15:23.673]      // if-block "continueId == 4"
[01:15:23.673]        // =>  FALSE
[01:15:23.673]      // skip if-block "continueId == 4"
[01:15:23.673]    </control>
[01:15:23.673]    <control if="!isProduction" while="" timeout="0" info="">
[01:15:23.673]      // if-block "!isProduction"
[01:15:23.673]        // =>  FALSE
[01:15:23.673]      // skip if-block "!isProduction"
[01:15:23.673]    </control>
[01:15:23.673]  </sequence>
[01:15:23.673]  
[01:15:29.572]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:15:29.581]  
[01:15:29.588]  <debugvars>
[01:15:29.588]    // Pre-defined
[01:15:29.588]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:29.588]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:15:29.588]    __dp=0x00000000
[01:15:29.588]    __ap=0x00000000
[01:15:29.588]    __traceout=0x00000000      (Trace Disabled)
[01:15:29.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:29.588]    __FlashAddr=0x00000000
[01:15:29.588]    __FlashLen=0x00000000
[01:15:29.588]    __FlashArg=0x00000000
[01:15:29.588]    __FlashOp=0x00000000
[01:15:29.588]    __Result=0x00000000
[01:15:29.588]  </debugvars>
[01:15:29.588]  
[01:15:29.588]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:15:29.588]    <block atomic="false" info="">
[01:15:29.588]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:15:29.588]        // -> [isSWJ <= 0x00000001]
[01:15:29.588]      __var hasDormant = __protocol & 0x00020000;
[01:15:29.588]        // -> [hasDormant <= 0x00000000]
[01:15:29.588]      __var protType   = __protocol & 0x0000FFFF;
[01:15:29.588]        // -> [protType <= 0x00000002]
[01:15:29.588]    </block>
[01:15:29.591]    <control if="protType == 1" while="" timeout="0" info="">
[01:15:29.591]      // if-block "protType == 1"
[01:15:29.591]        // =>  FALSE
[01:15:29.591]      // skip if-block "protType == 1"
[01:15:29.591]    </control>
[01:15:29.591]    <control if="protType == 2" while="" timeout="0" info="">
[01:15:29.591]      // if-block "protType == 2"
[01:15:29.591]        // =>  TRUE
[01:15:29.591]      <control if="isSWJ" while="" timeout="0" info="">
[01:15:29.591]        // if-block "isSWJ"
[01:15:29.591]          // =>  TRUE
[01:15:29.591]        <control if="hasDormant" while="" timeout="0" info="">
[01:15:29.591]          // if-block "hasDormant"
[01:15:29.591]            // =>  FALSE
[01:15:29.591]          // skip if-block "hasDormant"
[01:15:29.591]        </control>
[01:15:29.591]        <control if="!hasDormant" while="" timeout="0" info="">
[01:15:29.591]          // if-block "!hasDormant"
[01:15:29.591]            // =>  TRUE
[01:15:29.591]          <block atomic="false" info="">
[01:15:29.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:15:29.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:29.591]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:15:29.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:15:29.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:15:29.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:29.591]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:15:29.591]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:15:29.591]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:15:29.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:29.601]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:15:29.601]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:15:29.601]          </block>
[01:15:29.601]          // end if-block "!hasDormant"
[01:15:29.601]        </control>
[01:15:29.601]        // end if-block "isSWJ"
[01:15:29.601]      </control>
[01:15:29.601]      <control if="!isSWJ" while="" timeout="0" info="">
[01:15:29.601]        // if-block "!isSWJ"
[01:15:29.601]          // =>  FALSE
[01:15:29.601]        // skip if-block "!isSWJ"
[01:15:29.601]      </control>
[01:15:29.601]      <block atomic="false" info="">
[01:15:29.601]        ReadDP(0x0);
[01:15:29.611]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:15:29.611]      </block>
[01:15:29.611]      // end if-block "protType == 2"
[01:15:29.611]    </control>
[01:15:29.611]  </sequence>
[01:15:29.611]  
[01:15:29.621]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:15:29.621]  
[01:15:29.623]  <debugvars>
[01:15:29.623]    // Pre-defined
[01:15:29.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:29.623]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:15:29.623]    __dp=0x00000000
[01:15:29.623]    __ap=0x00000000
[01:15:29.623]    __traceout=0x00000000      (Trace Disabled)
[01:15:29.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:29.623]    __FlashAddr=0x00000000
[01:15:29.623]    __FlashLen=0x00000000
[01:15:29.623]    __FlashArg=0x00000000
[01:15:29.623]    __FlashOp=0x00000000
[01:15:29.623]    __Result=0x00000000
[01:15:29.623]  </debugvars>
[01:15:29.623]  
[01:15:29.623]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:15:29.623]    <block atomic="false" info="">
[01:15:29.623]      __var SW_DP_ABORT       = 0x0;
[01:15:29.623]        // -> [SW_DP_ABORT <= 0x00000000]
[01:15:29.623]      __var DP_CTRL_STAT      = 0x4;
[01:15:29.623]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:15:29.623]      __var DP_SELECT         = 0x8;
[01:15:29.623]        // -> [DP_SELECT <= 0x00000008]
[01:15:29.623]      __var powered_down      = 0;
[01:15:29.623]        // -> [powered_down <= 0x00000000]
[01:15:29.623]      WriteDP(DP_SELECT, 0x00000000);
[01:15:29.623]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:15:29.623]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:15:29.632]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:15:29.633]        // -> [powered_down <= 0x00000001]
[01:15:29.633]    </block>
[01:15:29.633]    <control if="powered_down" while="" timeout="0" info="">
[01:15:29.633]      // if-block "powered_down"
[01:15:29.633]        // =>  TRUE
[01:15:29.633]      <block atomic="false" info="">
[01:15:29.633]        Message(0, "Debug/System power-up request sent");
[01:15:29.637]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:15:29.637]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:15:29.637]      </block>
[01:15:29.637]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:15:29.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:15:29.642]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:15:29.642]        // while-condition  =>  FALSE
[01:15:29.642]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:15:29.642]      </control>
[01:15:29.642]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:15:29.642]        // if-block "(__protocol & 0xFFFF) == 1"
[01:15:29.642]          // =>  FALSE
[01:15:29.642]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:15:29.642]      </control>
[01:15:29.642]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:15:29.642]        // if-block "(__protocol & 0xFFFF) == 2"
[01:15:29.642]          // =>  TRUE
[01:15:29.642]        <block atomic="false" info="">
[01:15:29.642]          Message(0, "executing SWD power up");
[01:15:29.642]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:15:29.652]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:15:29.652]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:15:29.652]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:15:29.652]        </block>
[01:15:29.652]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:15:29.652]      </control>
[01:15:29.652]      // end if-block "powered_down"
[01:15:29.652]    </control>
[01:15:29.652]    <block atomic="false" info="">
[01:15:29.652]      __var DEBUG_PORT_VAL    = 0;
[01:15:29.652]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:15:29.652]      __var ACCESS_POINT_VAL  = 0;
[01:15:29.652]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:15:29.652]      __ap = 1; 
[01:15:29.652]        // -> [__ap <= 0x00000001]
[01:15:29.652]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:15:29.652]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:15:29.652]      __ap = 4;
[01:15:29.652]        // -> [__ap <= 0x00000004]
[01:15:29.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:29.662]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:15:29.662]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:15:29.662]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:29.662]    </block>
[01:15:29.662]    <block atomic="false" info="">
[01:15:29.662]      __var nReset = 0x80;
[01:15:29.662]        // -> [nReset <= 0x00000080]
[01:15:29.662]      __var canReadPins = 0;
[01:15:29.662]        // -> [canReadPins <= 0x00000000]
[01:15:29.662]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:15:29.662]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:15:29.672]        // -> [canReadPins <= 0x00000001]
[01:15:29.672]    </block>
[01:15:29.672]    <control if="" while="1" timeout="200" info="">
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.672]      // while "1"  (timeout="200")
[01:15:29.672]      // while-condition  =>  TRUE
[01:15:29.682]      // while "1"  (timeout="200")
[01:15:29.682]      // while  =>  TIMEOUT
[01:15:29.682]      // end while "1"
[01:15:29.682]    </control>
[01:15:29.682]    <control if="canReadPins" while="" timeout="0" info="">
[01:15:29.682]      // if-block "canReadPins"
[01:15:29.682]        // =>  TRUE
[01:15:29.682]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:15:29.682]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:15:29.682]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:15:29.682]        // while-condition  =>  FALSE
[01:15:29.682]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:15:29.682]      </control>
[01:15:29.682]      // end if-block "canReadPins"
[01:15:29.682]    </control>
[01:15:29.682]    <control if="!canReadPins" while="" timeout="0" info="">
[01:15:29.682]      // if-block "!canReadPins"
[01:15:29.682]        // =>  FALSE
[01:15:29.682]      // skip if-block "!canReadPins"
[01:15:29.682]    </control>
[01:15:29.682]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:15:29.682]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:29.682]        // =>  TRUE
[01:15:29.682]      <block atomic="false" info="">
[01:15:29.682]        WriteAP(0x00, 0x190008);
[01:15:29.682]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:29.682]        WriteAP(0xF0, 0x01);
[01:15:29.692]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:29.692]      </block>
[01:15:29.692]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:29.692]    </control>
[01:15:29.692]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:15:29.692]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:29.692]        // =>  FALSE
[01:15:29.692]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:29.692]    </control>
[01:15:29.692]    <block atomic="false" info="">
[01:15:29.692]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:29.692]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:15:29.692]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:15:29.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:29.702]      __ap = 0; //lets make sure we reset the access point selection
[01:15:29.702]        // -> [__ap <= 0x00000000]
[01:15:29.702]    </block>
[01:15:29.702]  </sequence>
[01:15:29.702]  
[01:15:29.712]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:15:29.712]  
[01:15:29.712]  <debugvars>
[01:15:29.722]    // Pre-defined
[01:15:29.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:29.722]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:15:29.722]    __dp=0x00000000
[01:15:29.722]    __ap=0x00000000
[01:15:29.722]    __traceout=0x00000000      (Trace Disabled)
[01:15:29.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:29.722]    __FlashAddr=0x00000000
[01:15:29.722]    __FlashLen=0x00000000
[01:15:29.722]    __FlashArg=0x00000000
[01:15:29.722]    __FlashOp=0x00000000
[01:15:29.722]    __Result=0x00000000
[01:15:29.722]  </debugvars>
[01:15:29.722]  
[01:15:29.722]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:15:29.722]    <block atomic="false" info="">
[01:15:29.722]      __var deviceID = 0;
[01:15:29.722]        // -> [deviceID <= 0x00000000]
[01:15:29.722]      __var version = 0;
[01:15:29.722]        // -> [version <= 0x00000000]
[01:15:29.722]      __var partNum = 0;
[01:15:29.722]        // -> [partNum <= 0x00000000]
[01:15:29.722]      __var manuf = 0;
[01:15:29.722]        // -> [manuf <= 0x00000000]
[01:15:29.722]      __var isMSPM0G1X0X_G3X0X = 0;
[01:15:29.722]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:15:29.722]      __var isProduction = 0;
[01:15:29.722]        // -> [isProduction <= 0x00000000]
[01:15:29.722]      __var continueId = 0;
[01:15:29.722]        // -> [continueId <= 0x00000000]
[01:15:29.722]      deviceID =   Read32(0x41C40004);
[01:15:29.732]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:15:29.732]        // -> [deviceID <= 0x2BB8802F]
[01:15:29.732]      version = deviceID >> 28;
[01:15:29.732]        // -> [version <= 0x00000002]
[01:15:29.732]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:15:29.732]        // -> [partNum <= 0x0000BB88]
[01:15:29.732]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:15:29.732]        // -> [manuf <= 0x00000017]
[01:15:29.732]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:15:29.732]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:15:29.732]      isProduction = (version > 0);
[01:15:29.732]        // -> [isProduction <= 0x00000001]
[01:15:29.732]    </block>
[01:15:29.732]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:15:29.732]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:15:29.732]        // =>  FALSE
[01:15:29.732]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:15:29.732]    </control>
[01:15:29.732]    <control if="continueId == 4" while="" timeout="0" info="">
[01:15:29.732]      // if-block "continueId == 4"
[01:15:29.732]        // =>  FALSE
[01:15:29.732]      // skip if-block "continueId == 4"
[01:15:29.732]    </control>
[01:15:29.732]    <control if="!isProduction" while="" timeout="0" info="">
[01:15:29.732]      // if-block "!isProduction"
[01:15:29.732]        // =>  FALSE
[01:15:29.732]      // skip if-block "!isProduction"
[01:15:29.732]    </control>
[01:15:29.737]  </sequence>
[01:15:29.737]  
[01:16:30.355]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:16:30.355]  
[01:16:30.364]  <debugvars>
[01:16:30.364]    // Pre-defined
[01:16:30.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:30.364]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:30.364]    __dp=0x00000000
[01:16:30.364]    __ap=0x00000000
[01:16:30.364]    __traceout=0x00000000      (Trace Disabled)
[01:16:30.365]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:30.365]    __FlashAddr=0x00000000
[01:16:30.365]    __FlashLen=0x00000000
[01:16:30.365]    __FlashArg=0x00000000
[01:16:30.365]    __FlashOp=0x00000000
[01:16:30.365]    __Result=0x00000000
[01:16:30.365]  </debugvars>
[01:16:30.365]  
[01:16:30.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:16:30.365]    <block atomic="false" info="">
[01:16:30.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:16:30.365]        // -> [isSWJ <= 0x00000001]
[01:16:30.365]      __var hasDormant = __protocol & 0x00020000;
[01:16:30.365]        // -> [hasDormant <= 0x00000000]
[01:16:30.367]      __var protType   = __protocol & 0x0000FFFF;
[01:16:30.367]        // -> [protType <= 0x00000002]
[01:16:30.367]    </block>
[01:16:30.367]    <control if="protType == 1" while="" timeout="0" info="">
[01:16:30.367]      // if-block "protType == 1"
[01:16:30.367]        // =>  FALSE
[01:16:30.367]      // skip if-block "protType == 1"
[01:16:30.367]    </control>
[01:16:30.368]    <control if="protType == 2" while="" timeout="0" info="">
[01:16:30.368]      // if-block "protType == 2"
[01:16:30.368]        // =>  TRUE
[01:16:30.368]      <control if="isSWJ" while="" timeout="0" info="">
[01:16:30.368]        // if-block "isSWJ"
[01:16:30.368]          // =>  TRUE
[01:16:30.368]        <control if="hasDormant" while="" timeout="0" info="">
[01:16:30.368]          // if-block "hasDormant"
[01:16:30.368]            // =>  FALSE
[01:16:30.368]          // skip if-block "hasDormant"
[01:16:30.368]        </control>
[01:16:30.369]        <control if="!hasDormant" while="" timeout="0" info="">
[01:16:30.369]          // if-block "!hasDormant"
[01:16:30.369]            // =>  TRUE
[01:16:30.369]          <block atomic="false" info="">
[01:16:30.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:16:30.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:30.371]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:16:30.374]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:16:30.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:16:30.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:30.374]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:16:30.382]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:16:30.382]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:16:30.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:30.384]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:16:30.385]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:16:30.385]          </block>
[01:16:30.385]          // end if-block "!hasDormant"
[01:16:30.385]        </control>
[01:16:30.385]        // end if-block "isSWJ"
[01:16:30.385]      </control>
[01:16:30.385]      <control if="!isSWJ" while="" timeout="0" info="">
[01:16:30.385]        // if-block "!isSWJ"
[01:16:30.385]          // =>  FALSE
[01:16:30.385]        // skip if-block "!isSWJ"
[01:16:30.385]      </control>
[01:16:30.385]      <block atomic="false" info="">
[01:16:30.385]        ReadDP(0x0);
[01:16:30.385]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:16:30.385]      </block>
[01:16:30.385]      // end if-block "protType == 2"
[01:16:30.385]    </control>
[01:16:30.385]  </sequence>
[01:16:30.385]  
[01:16:30.392]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:16:30.392]  
[01:16:30.392]  <debugvars>
[01:16:30.392]    // Pre-defined
[01:16:30.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:30.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:30.392]    __dp=0x00000000
[01:16:30.392]    __ap=0x00000000
[01:16:30.392]    __traceout=0x00000000      (Trace Disabled)
[01:16:30.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:30.392]    __FlashAddr=0x00000000
[01:16:30.392]    __FlashLen=0x00000000
[01:16:30.392]    __FlashArg=0x00000000
[01:16:30.392]    __FlashOp=0x00000000
[01:16:30.392]    __Result=0x00000000
[01:16:30.392]  </debugvars>
[01:16:30.392]  
[01:16:30.392]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:16:30.392]    <block atomic="false" info="">
[01:16:30.392]      __var SW_DP_ABORT       = 0x0;
[01:16:30.392]        // -> [SW_DP_ABORT <= 0x00000000]
[01:16:30.392]      __var DP_CTRL_STAT      = 0x4;
[01:16:30.392]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:16:30.392]      __var DP_SELECT         = 0x8;
[01:16:30.392]        // -> [DP_SELECT <= 0x00000008]
[01:16:30.392]      __var powered_down      = 0;
[01:16:30.392]        // -> [powered_down <= 0x00000000]
[01:16:30.392]      WriteDP(DP_SELECT, 0x00000000);
[01:16:30.392]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:16:30.392]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:16:30.392]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:16:30.392]        // -> [powered_down <= 0x00000001]
[01:16:30.392]    </block>
[01:16:30.392]    <control if="powered_down" while="" timeout="0" info="">
[01:16:30.392]      // if-block "powered_down"
[01:16:30.392]        // =>  TRUE
[01:16:30.402]      <block atomic="false" info="">
[01:16:30.402]        Message(0, "Debug/System power-up request sent");
[01:16:30.402]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:16:30.402]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:16:30.402]      </block>
[01:16:30.402]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:16:30.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:16:30.402]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:16:30.402]        // while-condition  =>  FALSE
[01:16:30.402]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:16:30.402]      </control>
[01:16:30.402]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:16:30.402]        // if-block "(__protocol & 0xFFFF) == 1"
[01:16:30.402]          // =>  FALSE
[01:16:30.402]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:16:30.402]      </control>
[01:16:30.402]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:16:30.402]        // if-block "(__protocol & 0xFFFF) == 2"
[01:16:30.402]          // =>  TRUE
[01:16:30.402]        <block atomic="false" info="">
[01:16:30.402]          Message(0, "executing SWD power up");
[01:16:30.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:16:30.402]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:16:30.402]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:16:30.412]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:16:30.413]        </block>
[01:16:30.413]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:16:30.413]      </control>
[01:16:30.413]      // end if-block "powered_down"
[01:16:30.413]    </control>
[01:16:30.413]    <block atomic="false" info="">
[01:16:30.413]      __var DEBUG_PORT_VAL    = 0;
[01:16:30.413]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:16:30.413]      __var ACCESS_POINT_VAL  = 0;
[01:16:30.413]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:16:30.413]      __ap = 1; 
[01:16:30.413]        // -> [__ap <= 0x00000001]
[01:16:30.413]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:16:30.415]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:16:30.415]      __ap = 4;
[01:16:30.415]        // -> [__ap <= 0x00000004]
[01:16:30.415]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:30.415]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:16:30.415]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:16:30.415]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:30.423]    </block>
[01:16:30.423]    <block atomic="false" info="">
[01:16:30.423]      __var nReset = 0x80;
[01:16:30.423]        // -> [nReset <= 0x00000080]
[01:16:30.423]      __var canReadPins = 0;
[01:16:30.423]        // -> [canReadPins <= 0x00000000]
[01:16:30.423]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:16:30.423]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:16:30.423]        // -> [canReadPins <= 0x00000001]
[01:16:30.423]    </block>
[01:16:30.423]    <control if="" while="1" timeout="200" info="">
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.423]      // while "1"  (timeout="200")
[01:16:30.423]      // while-condition  =>  TRUE
[01:16:30.433]      // while "1"  (timeout="200")
[01:16:30.433]      // while  =>  TIMEOUT
[01:16:30.433]      // end while "1"
[01:16:30.433]    </control>
[01:16:30.433]    <control if="canReadPins" while="" timeout="0" info="">
[01:16:30.433]      // if-block "canReadPins"
[01:16:30.433]        // =>  TRUE
[01:16:30.433]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:16:30.433]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:16:30.433]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:16:30.433]        // while-condition  =>  FALSE
[01:16:30.433]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:16:30.433]      </control>
[01:16:30.433]      // end if-block "canReadPins"
[01:16:30.433]    </control>
[01:16:30.433]    <control if="!canReadPins" while="" timeout="0" info="">
[01:16:30.433]      // if-block "!canReadPins"
[01:16:30.433]        // =>  FALSE
[01:16:30.433]      // skip if-block "!canReadPins"
[01:16:30.433]    </control>
[01:16:30.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:16:30.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:30.433]        // =>  TRUE
[01:16:30.433]      <block atomic="false" info="">
[01:16:30.433]        WriteAP(0x00, 0x190008);
[01:16:30.433]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:30.433]        WriteAP(0xF0, 0x01);
[01:16:30.443]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:30.443]      </block>
[01:16:30.443]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:30.443]    </control>
[01:16:30.443]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:16:30.443]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:30.443]        // =>  FALSE
[01:16:30.443]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:30.443]    </control>
[01:16:30.443]    <block atomic="false" info="">
[01:16:30.443]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:30.453]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:16:30.453]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:16:30.453]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:30.453]      __ap = 0; //lets make sure we reset the access point selection
[01:16:30.453]        // -> [__ap <= 0x00000000]
[01:16:30.453]    </block>
[01:16:30.453]  </sequence>
[01:16:30.453]  
[01:16:30.473]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:16:30.473]  
[01:16:30.473]  <debugvars>
[01:16:30.473]    // Pre-defined
[01:16:30.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:30.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:16:30.473]    __dp=0x00000000
[01:16:30.473]    __ap=0x00000000
[01:16:30.473]    __traceout=0x00000000      (Trace Disabled)
[01:16:30.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:30.473]    __FlashAddr=0x00000000
[01:16:30.473]    __FlashLen=0x00000000
[01:16:30.473]    __FlashArg=0x00000000
[01:16:30.473]    __FlashOp=0x00000000
[01:16:30.473]    __Result=0x00000000
[01:16:30.473]  </debugvars>
[01:16:30.473]  
[01:16:30.473]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:16:30.473]    <block atomic="false" info="">
[01:16:30.473]      __var deviceID = 0;
[01:16:30.473]        // -> [deviceID <= 0x00000000]
[01:16:30.473]      __var version = 0;
[01:16:30.473]        // -> [version <= 0x00000000]
[01:16:30.473]      __var partNum = 0;
[01:16:30.473]        // -> [partNum <= 0x00000000]
[01:16:30.473]      __var manuf = 0;
[01:16:30.473]        // -> [manuf <= 0x00000000]
[01:16:30.473]      __var isMSPM0G1X0X_G3X0X = 0;
[01:16:30.473]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:16:30.473]      __var isProduction = 0;
[01:16:30.473]        // -> [isProduction <= 0x00000000]
[01:16:30.473]      __var continueId = 0;
[01:16:30.473]        // -> [continueId <= 0x00000000]
[01:16:30.473]      deviceID =   Read32(0x41C40004);
[01:16:30.493]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:16:30.493]        // -> [deviceID <= 0x2BB8802F]
[01:16:30.493]      version = deviceID >> 28;
[01:16:30.493]        // -> [version <= 0x00000002]
[01:16:30.493]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:16:30.493]        // -> [partNum <= 0x0000BB88]
[01:16:30.493]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:16:30.493]        // -> [manuf <= 0x00000017]
[01:16:30.493]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:16:30.493]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:16:30.493]      isProduction = (version > 0);
[01:16:30.493]        // -> [isProduction <= 0x00000001]
[01:16:30.493]    </block>
[01:16:30.493]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:16:30.493]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:16:30.493]        // =>  FALSE
[01:16:30.493]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:16:30.493]    </control>
[01:16:30.493]    <control if="continueId == 4" while="" timeout="0" info="">
[01:16:30.493]      // if-block "continueId == 4"
[01:16:30.493]        // =>  FALSE
[01:16:30.493]      // skip if-block "continueId == 4"
[01:16:30.493]    </control>
[01:16:30.493]    <control if="!isProduction" while="" timeout="0" info="">
[01:16:30.493]      // if-block "!isProduction"
[01:16:30.493]        // =>  FALSE
[01:16:30.493]      // skip if-block "!isProduction"
[01:16:30.493]    </control>
[01:16:30.493]  </sequence>
[01:16:30.493]  
[01:16:36.382]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:16:36.382]  
[01:16:36.391]  <debugvars>
[01:16:36.391]    // Pre-defined
[01:16:36.391]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:36.391]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:16:36.391]    __dp=0x00000000
[01:16:36.391]    __ap=0x00000000
[01:16:36.391]    __traceout=0x00000000      (Trace Disabled)
[01:16:36.391]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:36.391]    __FlashAddr=0x00000000
[01:16:36.391]    __FlashLen=0x00000000
[01:16:36.392]    __FlashArg=0x00000000
[01:16:36.392]    __FlashOp=0x00000000
[01:16:36.392]    __Result=0x00000000
[01:16:36.392]  </debugvars>
[01:16:36.392]  
[01:16:36.392]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:16:36.392]    <block atomic="false" info="">
[01:16:36.392]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:16:36.392]        // -> [isSWJ <= 0x00000001]
[01:16:36.392]      __var hasDormant = __protocol & 0x00020000;
[01:16:36.392]        // -> [hasDormant <= 0x00000000]
[01:16:36.392]      __var protType   = __protocol & 0x0000FFFF;
[01:16:36.392]        // -> [protType <= 0x00000002]
[01:16:36.392]    </block>
[01:16:36.393]    <control if="protType == 1" while="" timeout="0" info="">
[01:16:36.393]      // if-block "protType == 1"
[01:16:36.393]        // =>  FALSE
[01:16:36.393]      // skip if-block "protType == 1"
[01:16:36.393]    </control>
[01:16:36.394]    <control if="protType == 2" while="" timeout="0" info="">
[01:16:36.394]      // if-block "protType == 2"
[01:16:36.394]        // =>  TRUE
[01:16:36.394]      <control if="isSWJ" while="" timeout="0" info="">
[01:16:36.394]        // if-block "isSWJ"
[01:16:36.394]          // =>  TRUE
[01:16:36.394]        <control if="hasDormant" while="" timeout="0" info="">
[01:16:36.394]          // if-block "hasDormant"
[01:16:36.394]            // =>  FALSE
[01:16:36.394]          // skip if-block "hasDormant"
[01:16:36.394]        </control>
[01:16:36.394]        <control if="!hasDormant" while="" timeout="0" info="">
[01:16:36.394]          // if-block "!hasDormant"
[01:16:36.394]            // =>  TRUE
[01:16:36.394]          <block atomic="false" info="">
[01:16:36.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:16:36.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:36.394]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:16:36.394]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:16:36.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:16:36.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:36.394]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:16:36.394]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:16:36.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:16:36.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:36.402]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:16:36.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:16:36.402]          </block>
[01:16:36.404]          // end if-block "!hasDormant"
[01:16:36.404]        </control>
[01:16:36.404]        // end if-block "isSWJ"
[01:16:36.404]      </control>
[01:16:36.404]      <control if="!isSWJ" while="" timeout="0" info="">
[01:16:36.404]        // if-block "!isSWJ"
[01:16:36.404]          // =>  FALSE
[01:16:36.404]        // skip if-block "!isSWJ"
[01:16:36.404]      </control>
[01:16:36.404]      <block atomic="false" info="">
[01:16:36.404]        ReadDP(0x0);
[01:16:36.404]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:16:36.404]      </block>
[01:16:36.404]      // end if-block "protType == 2"
[01:16:36.404]    </control>
[01:16:36.404]  </sequence>
[01:16:36.404]  
[01:16:36.404]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:16:36.404]  
[01:16:36.404]  <debugvars>
[01:16:36.404]    // Pre-defined
[01:16:36.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:36.404]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:16:36.404]    __dp=0x00000000
[01:16:36.404]    __ap=0x00000000
[01:16:36.404]    __traceout=0x00000000      (Trace Disabled)
[01:16:36.412]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:36.412]    __FlashAddr=0x00000000
[01:16:36.412]    __FlashLen=0x00000000
[01:16:36.412]    __FlashArg=0x00000000
[01:16:36.412]    __FlashOp=0x00000000
[01:16:36.412]    __Result=0x00000000
[01:16:36.412]  </debugvars>
[01:16:36.412]  
[01:16:36.412]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:16:36.412]    <block atomic="false" info="">
[01:16:36.412]      __var SW_DP_ABORT       = 0x0;
[01:16:36.412]        // -> [SW_DP_ABORT <= 0x00000000]
[01:16:36.412]      __var DP_CTRL_STAT      = 0x4;
[01:16:36.412]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:16:36.412]      __var DP_SELECT         = 0x8;
[01:16:36.412]        // -> [DP_SELECT <= 0x00000008]
[01:16:36.412]      __var powered_down      = 0;
[01:16:36.412]        // -> [powered_down <= 0x00000000]
[01:16:36.412]      WriteDP(DP_SELECT, 0x00000000);
[01:16:36.412]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:16:36.412]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:16:36.418]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:16:36.418]        // -> [powered_down <= 0x00000001]
[01:16:36.418]    </block>
[01:16:36.418]    <control if="powered_down" while="" timeout="0" info="">
[01:16:36.418]      // if-block "powered_down"
[01:16:36.418]        // =>  TRUE
[01:16:36.418]      <block atomic="false" info="">
[01:16:36.418]        Message(0, "Debug/System power-up request sent");
[01:16:36.418]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:16:36.423]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:16:36.423]      </block>
[01:16:36.423]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:16:36.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:16:36.423]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:16:36.423]        // while-condition  =>  FALSE
[01:16:36.423]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:16:36.423]      </control>
[01:16:36.423]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:16:36.423]        // if-block "(__protocol & 0xFFFF) == 1"
[01:16:36.423]          // =>  FALSE
[01:16:36.423]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:16:36.423]      </control>
[01:16:36.423]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:16:36.423]        // if-block "(__protocol & 0xFFFF) == 2"
[01:16:36.423]          // =>  TRUE
[01:16:36.423]        <block atomic="false" info="">
[01:16:36.423]          Message(0, "executing SWD power up");
[01:16:36.423]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:16:36.423]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:16:36.423]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:16:36.433]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:16:36.433]        </block>
[01:16:36.433]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:16:36.433]      </control>
[01:16:36.433]      // end if-block "powered_down"
[01:16:36.433]    </control>
[01:16:36.433]    <block atomic="false" info="">
[01:16:36.433]      __var DEBUG_PORT_VAL    = 0;
[01:16:36.433]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:16:36.433]      __var ACCESS_POINT_VAL  = 0;
[01:16:36.433]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:16:36.433]      __ap = 1; 
[01:16:36.433]        // -> [__ap <= 0x00000001]
[01:16:36.433]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:16:36.436]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:16:36.436]      __ap = 4;
[01:16:36.436]        // -> [__ap <= 0x00000004]
[01:16:36.436]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:36.436]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:16:36.436]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:16:36.436]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:36.443]    </block>
[01:16:36.443]    <block atomic="false" info="">
[01:16:36.443]      __var nReset = 0x80;
[01:16:36.443]        // -> [nReset <= 0x00000080]
[01:16:36.443]      __var canReadPins = 0;
[01:16:36.445]        // -> [canReadPins <= 0x00000000]
[01:16:36.445]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:16:36.445]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:16:36.445]        // -> [canReadPins <= 0x00000001]
[01:16:36.445]    </block>
[01:16:36.445]    <control if="" while="1" timeout="200" info="">
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.445]      // while "1"  (timeout="200")
[01:16:36.445]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.453]      // while "1"  (timeout="200")
[01:16:36.453]      // while-condition  =>  TRUE
[01:16:36.463]      // while "1"  (timeout="200")
[01:16:36.463]      // while  =>  TIMEOUT
[01:16:36.463]      // end while "1"
[01:16:36.463]    </control>
[01:16:36.463]    <control if="canReadPins" while="" timeout="0" info="">
[01:16:36.463]      // if-block "canReadPins"
[01:16:36.463]        // =>  TRUE
[01:16:36.463]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:16:36.463]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:16:36.465]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:16:36.465]        // while-condition  =>  FALSE
[01:16:36.465]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:16:36.465]      </control>
[01:16:36.465]      // end if-block "canReadPins"
[01:16:36.465]    </control>
[01:16:36.465]    <control if="!canReadPins" while="" timeout="0" info="">
[01:16:36.465]      // if-block "!canReadPins"
[01:16:36.465]        // =>  FALSE
[01:16:36.465]      // skip if-block "!canReadPins"
[01:16:36.465]    </control>
[01:16:36.465]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:16:36.465]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:36.465]        // =>  TRUE
[01:16:36.465]      <block atomic="false" info="">
[01:16:36.465]        WriteAP(0x00, 0x190008);
[01:16:36.465]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:36.465]        WriteAP(0xF0, 0x01);
[01:16:36.474]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:36.474]      </block>
[01:16:36.474]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:36.474]    </control>
[01:16:36.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:16:36.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:36.474]        // =>  FALSE
[01:16:36.474]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:36.474]    </control>
[01:16:36.474]    <block atomic="false" info="">
[01:16:36.474]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:36.474]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:16:36.474]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:16:36.474]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:36.474]      __ap = 0; //lets make sure we reset the access point selection
[01:16:36.474]        // -> [__ap <= 0x00000000]
[01:16:36.474]    </block>
[01:16:36.474]  </sequence>
[01:16:36.474]  
[01:16:36.504]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:16:36.504]  
[01:16:36.504]  <debugvars>
[01:16:36.504]    // Pre-defined
[01:16:36.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:36.504]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:16:36.504]    __dp=0x00000000
[01:16:36.504]    __ap=0x00000000
[01:16:36.506]    __traceout=0x00000000      (Trace Disabled)
[01:16:36.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:36.506]    __FlashAddr=0x00000000
[01:16:36.506]    __FlashLen=0x00000000
[01:16:36.506]    __FlashArg=0x00000000
[01:16:36.506]    __FlashOp=0x00000000
[01:16:36.506]    __Result=0x00000000
[01:16:36.506]  </debugvars>
[01:16:36.506]  
[01:16:36.506]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:16:36.506]    <block atomic="false" info="">
[01:16:36.506]      __var deviceID = 0;
[01:16:36.506]        // -> [deviceID <= 0x00000000]
[01:16:36.506]      __var version = 0;
[01:16:36.506]        // -> [version <= 0x00000000]
[01:16:36.506]      __var partNum = 0;
[01:16:36.506]        // -> [partNum <= 0x00000000]
[01:16:36.506]      __var manuf = 0;
[01:16:36.506]        // -> [manuf <= 0x00000000]
[01:16:36.506]      __var isMSPM0G1X0X_G3X0X = 0;
[01:16:36.506]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:16:36.506]      __var isProduction = 0;
[01:16:36.506]        // -> [isProduction <= 0x00000000]
[01:16:36.506]      __var continueId = 0;
[01:16:36.506]        // -> [continueId <= 0x00000000]
[01:16:36.506]      deviceID =   Read32(0x41C40004);
[01:16:36.506]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:16:36.506]        // -> [deviceID <= 0x2BB8802F]
[01:16:36.506]      version = deviceID >> 28;
[01:16:36.506]        // -> [version <= 0x00000002]
[01:16:36.506]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:16:36.506]        // -> [partNum <= 0x0000BB88]
[01:16:36.506]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:16:36.506]        // -> [manuf <= 0x00000017]
[01:16:36.506]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:16:36.506]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:16:36.514]      isProduction = (version > 0);
[01:16:36.514]        // -> [isProduction <= 0x00000001]
[01:16:36.514]    </block>
[01:16:36.514]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:16:36.514]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:16:36.514]        // =>  FALSE
[01:16:36.514]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:16:36.514]    </control>
[01:16:36.514]    <control if="continueId == 4" while="" timeout="0" info="">
[01:16:36.514]      // if-block "continueId == 4"
[01:16:36.514]        // =>  FALSE
[01:16:36.514]      // skip if-block "continueId == 4"
[01:16:36.514]    </control>
[01:16:36.514]    <control if="!isProduction" while="" timeout="0" info="">
[01:16:36.514]      // if-block "!isProduction"
[01:16:36.514]        // =>  FALSE
[01:16:36.514]      // skip if-block "!isProduction"
[01:16:36.514]    </control>
[01:16:36.514]  </sequence>
[01:16:36.514]  
[01:17:39.118]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:17:39.118]  
[01:17:39.133]  <debugvars>
[01:17:39.133]    // Pre-defined
[01:17:39.133]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:39.133]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:39.133]    __dp=0x00000000
[01:17:39.133]    __ap=0x00000000
[01:17:39.133]    __traceout=0x00000000      (Trace Disabled)
[01:17:39.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:39.133]    __FlashAddr=0x00000000
[01:17:39.133]    __FlashLen=0x00000000
[01:17:39.133]    __FlashArg=0x00000000
[01:17:39.133]    __FlashOp=0x00000000
[01:17:39.133]    __Result=0x00000000
[01:17:39.133]  </debugvars>
[01:17:39.133]  
[01:17:39.133]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:17:39.133]    <block atomic="false" info="">
[01:17:39.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:17:39.133]        // -> [isSWJ <= 0x00000001]
[01:17:39.133]      __var hasDormant = __protocol & 0x00020000;
[01:17:39.133]        // -> [hasDormant <= 0x00000000]
[01:17:39.133]      __var protType   = __protocol & 0x0000FFFF;
[01:17:39.133]        // -> [protType <= 0x00000002]
[01:17:39.133]    </block>
[01:17:39.133]    <control if="protType == 1" while="" timeout="0" info="">
[01:17:39.133]      // if-block "protType == 1"
[01:17:39.136]        // =>  FALSE
[01:17:39.136]      // skip if-block "protType == 1"
[01:17:39.136]    </control>
[01:17:39.136]    <control if="protType == 2" while="" timeout="0" info="">
[01:17:39.136]      // if-block "protType == 2"
[01:17:39.136]        // =>  TRUE
[01:17:39.136]      <control if="isSWJ" while="" timeout="0" info="">
[01:17:39.136]        // if-block "isSWJ"
[01:17:39.136]          // =>  TRUE
[01:17:39.136]        <control if="hasDormant" while="" timeout="0" info="">
[01:17:39.136]          // if-block "hasDormant"
[01:17:39.136]            // =>  FALSE
[01:17:39.136]          // skip if-block "hasDormant"
[01:17:39.136]        </control>
[01:17:39.136]        <control if="!hasDormant" while="" timeout="0" info="">
[01:17:39.136]          // if-block "!hasDormant"
[01:17:39.136]            // =>  TRUE
[01:17:39.136]          <block atomic="false" info="">
[01:17:39.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:17:39.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:39.136]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:17:39.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:17:39.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:17:39.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:39.136]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:17:39.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:17:39.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:17:39.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:39.148]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:17:39.156]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:17:39.156]          </block>
[01:17:39.156]          // end if-block "!hasDormant"
[01:17:39.156]        </control>
[01:17:39.156]        // end if-block "isSWJ"
[01:17:39.156]      </control>
[01:17:39.156]      <control if="!isSWJ" while="" timeout="0" info="">
[01:17:39.156]        // if-block "!isSWJ"
[01:17:39.156]          // =>  FALSE
[01:17:39.156]        // skip if-block "!isSWJ"
[01:17:39.156]      </control>
[01:17:39.156]      <block atomic="false" info="">
[01:17:39.156]        ReadDP(0x0);
[01:17:39.156]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:17:39.156]      </block>
[01:17:39.156]      // end if-block "protType == 2"
[01:17:39.156]    </control>
[01:17:39.156]  </sequence>
[01:17:39.156]  
[01:17:39.156]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:17:39.156]  
[01:17:39.156]  <debugvars>
[01:17:39.156]    // Pre-defined
[01:17:39.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:39.156]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:39.156]    __dp=0x00000000
[01:17:39.156]    __ap=0x00000000
[01:17:39.156]    __traceout=0x00000000      (Trace Disabled)
[01:17:39.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:39.156]    __FlashAddr=0x00000000
[01:17:39.156]    __FlashLen=0x00000000
[01:17:39.156]    __FlashArg=0x00000000
[01:17:39.156]    __FlashOp=0x00000000
[01:17:39.156]    __Result=0x00000000
[01:17:39.156]  </debugvars>
[01:17:39.156]  
[01:17:39.166]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:17:39.166]    <block atomic="false" info="">
[01:17:39.166]      __var SW_DP_ABORT       = 0x0;
[01:17:39.166]        // -> [SW_DP_ABORT <= 0x00000000]
[01:17:39.166]      __var DP_CTRL_STAT      = 0x4;
[01:17:39.166]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:17:39.166]      __var DP_SELECT         = 0x8;
[01:17:39.166]        // -> [DP_SELECT <= 0x00000008]
[01:17:39.166]      __var powered_down      = 0;
[01:17:39.166]        // -> [powered_down <= 0x00000000]
[01:17:39.166]      WriteDP(DP_SELECT, 0x00000000);
[01:17:39.166]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:17:39.166]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:17:39.166]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:17:39.166]        // -> [powered_down <= 0x00000001]
[01:17:39.166]    </block>
[01:17:39.166]    <control if="powered_down" while="" timeout="0" info="">
[01:17:39.166]      // if-block "powered_down"
[01:17:39.166]        // =>  TRUE
[01:17:39.166]      <block atomic="false" info="">
[01:17:39.166]        Message(0, "Debug/System power-up request sent");
[01:17:39.166]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:17:39.174]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:17:39.174]      </block>
[01:17:39.174]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:17:39.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:17:39.176]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:17:39.176]        // while-condition  =>  FALSE
[01:17:39.176]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:17:39.176]      </control>
[01:17:39.176]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:17:39.176]        // if-block "(__protocol & 0xFFFF) == 1"
[01:17:39.176]          // =>  FALSE
[01:17:39.176]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:17:39.176]      </control>
[01:17:39.176]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:17:39.176]        // if-block "(__protocol & 0xFFFF) == 2"
[01:17:39.176]          // =>  TRUE
[01:17:39.176]        <block atomic="false" info="">
[01:17:39.176]          Message(0, "executing SWD power up");
[01:17:39.176]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:17:39.179]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:17:39.179]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:17:39.182]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:17:39.182]        </block>
[01:17:39.182]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:17:39.182]      </control>
[01:17:39.182]      // end if-block "powered_down"
[01:17:39.182]    </control>
[01:17:39.182]    <block atomic="false" info="">
[01:17:39.182]      __var DEBUG_PORT_VAL    = 0;
[01:17:39.182]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:17:39.182]      __var ACCESS_POINT_VAL  = 0;
[01:17:39.182]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:17:39.182]      __ap = 1; 
[01:17:39.182]        // -> [__ap <= 0x00000001]
[01:17:39.182]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:17:39.187]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:17:39.187]      __ap = 4;
[01:17:39.187]        // -> [__ap <= 0x00000004]
[01:17:39.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:39.187]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:17:39.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:17:39.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:39.197]    </block>
[01:17:39.197]    <block atomic="false" info="">
[01:17:39.197]      __var nReset = 0x80;
[01:17:39.197]        // -> [nReset <= 0x00000080]
[01:17:39.197]      __var canReadPins = 0;
[01:17:39.197]        // -> [canReadPins <= 0x00000000]
[01:17:39.199]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:17:39.199]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:17:39.199]        // -> [canReadPins <= 0x00000001]
[01:17:39.199]    </block>
[01:17:39.199]    <control if="" while="1" timeout="200" info="">
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.199]      // while "1"  (timeout="200")
[01:17:39.199]      // while-condition  =>  TRUE
[01:17:39.207]      // while "1"  (timeout="200")
[01:17:39.207]      // while  =>  TIMEOUT
[01:17:39.207]      // end while "1"
[01:17:39.207]    </control>
[01:17:39.207]    <control if="canReadPins" while="" timeout="0" info="">
[01:17:39.208]      // if-block "canReadPins"
[01:17:39.208]        // =>  TRUE
[01:17:39.208]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:17:39.208]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:17:39.209]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:17:39.209]        // while-condition  =>  FALSE
[01:17:39.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:17:39.209]      </control>
[01:17:39.209]      // end if-block "canReadPins"
[01:17:39.209]    </control>
[01:17:39.209]    <control if="!canReadPins" while="" timeout="0" info="">
[01:17:39.209]      // if-block "!canReadPins"
[01:17:39.209]        // =>  FALSE
[01:17:39.209]      // skip if-block "!canReadPins"
[01:17:39.209]    </control>
[01:17:39.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:17:39.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:39.209]        // =>  TRUE
[01:17:39.209]      <block atomic="false" info="">
[01:17:39.209]        WriteAP(0x00, 0x190008);
[01:17:39.209]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:39.209]        WriteAP(0xF0, 0x01);
[01:17:39.209]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:39.209]      </block>
[01:17:39.209]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:39.209]    </control>
[01:17:39.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:17:39.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:39.209]        // =>  FALSE
[01:17:39.209]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:39.209]    </control>
[01:17:39.209]    <block atomic="false" info="">
[01:17:39.209]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:39.217]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:17:39.217]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:17:39.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:39.217]      __ap = 0; //lets make sure we reset the access point selection
[01:17:39.217]        // -> [__ap <= 0x00000000]
[01:17:39.217]    </block>
[01:17:39.217]  </sequence>
[01:17:39.217]  
[01:17:39.251]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:17:39.251]  
[01:17:39.251]  <debugvars>
[01:17:39.251]    // Pre-defined
[01:17:39.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:39.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:39.251]    __dp=0x00000000
[01:17:39.251]    __ap=0x00000000
[01:17:39.251]    __traceout=0x00000000      (Trace Disabled)
[01:17:39.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:39.251]    __FlashAddr=0x00000000
[01:17:39.251]    __FlashLen=0x00000000
[01:17:39.251]    __FlashArg=0x00000000
[01:17:39.251]    __FlashOp=0x00000000
[01:17:39.251]    __Result=0x00000000
[01:17:39.251]  </debugvars>
[01:17:39.251]  
[01:17:39.251]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:17:39.251]    <block atomic="false" info="">
[01:17:39.251]      __var deviceID = 0;
[01:17:39.251]        // -> [deviceID <= 0x00000000]
[01:17:39.251]      __var version = 0;
[01:17:39.251]        // -> [version <= 0x00000000]
[01:17:39.251]      __var partNum = 0;
[01:17:39.251]        // -> [partNum <= 0x00000000]
[01:17:39.251]      __var manuf = 0;
[01:17:39.251]        // -> [manuf <= 0x00000000]
[01:17:39.251]      __var isMSPM0G1X0X_G3X0X = 0;
[01:17:39.251]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:17:39.251]      __var isProduction = 0;
[01:17:39.251]        // -> [isProduction <= 0x00000000]
[01:17:39.251]      __var continueId = 0;
[01:17:39.251]        // -> [continueId <= 0x00000000]
[01:17:39.251]      deviceID =   Read32(0x41C40004);
[01:17:39.260]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:17:39.260]        // -> [deviceID <= 0x2BB8802F]
[01:17:39.260]      version = deviceID >> 28;
[01:17:39.260]        // -> [version <= 0x00000002]
[01:17:39.260]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:17:39.260]        // -> [partNum <= 0x0000BB88]
[01:17:39.260]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:17:39.260]        // -> [manuf <= 0x00000017]
[01:17:39.260]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:17:39.260]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:17:39.260]      isProduction = (version > 0);
[01:17:39.260]        // -> [isProduction <= 0x00000001]
[01:17:39.260]    </block>
[01:17:39.260]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:17:39.260]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:17:39.260]        // =>  FALSE
[01:17:39.260]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:17:39.260]    </control>
[01:17:39.260]    <control if="continueId == 4" while="" timeout="0" info="">
[01:17:39.260]      // if-block "continueId == 4"
[01:17:39.260]        // =>  FALSE
[01:17:39.260]      // skip if-block "continueId == 4"
[01:17:39.260]    </control>
[01:17:39.260]    <control if="!isProduction" while="" timeout="0" info="">
[01:17:39.260]      // if-block "!isProduction"
[01:17:39.260]        // =>  FALSE
[01:17:39.260]      // skip if-block "!isProduction"
[01:17:39.260]    </control>
[01:17:39.260]  </sequence>
[01:17:39.260]  
[01:17:45.423]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:17:45.423]  
[01:17:45.439]  <debugvars>
[01:17:45.439]    // Pre-defined
[01:17:45.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:45.439]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:17:45.439]    __dp=0x00000000
[01:17:45.439]    __ap=0x00000000
[01:17:45.439]    __traceout=0x00000000      (Trace Disabled)
[01:17:45.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:45.439]    __FlashAddr=0x00000000
[01:17:45.439]    __FlashLen=0x00000000
[01:17:45.439]    __FlashArg=0x00000000
[01:17:45.439]    __FlashOp=0x00000000
[01:17:45.439]    __Result=0x00000000
[01:17:45.439]  </debugvars>
[01:17:45.439]  
[01:17:45.439]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:17:45.439]    <block atomic="false" info="">
[01:17:45.439]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:17:45.439]        // -> [isSWJ <= 0x00000001]
[01:17:45.439]      __var hasDormant = __protocol & 0x00020000;
[01:17:45.439]        // -> [hasDormant <= 0x00000000]
[01:17:45.439]      __var protType   = __protocol & 0x0000FFFF;
[01:17:45.439]        // -> [protType <= 0x00000002]
[01:17:45.439]    </block>
[01:17:45.442]    <control if="protType == 1" while="" timeout="0" info="">
[01:17:45.442]      // if-block "protType == 1"
[01:17:45.442]        // =>  FALSE
[01:17:45.442]      // skip if-block "protType == 1"
[01:17:45.442]    </control>
[01:17:45.442]    <control if="protType == 2" while="" timeout="0" info="">
[01:17:45.442]      // if-block "protType == 2"
[01:17:45.442]        // =>  TRUE
[01:17:45.443]      <control if="isSWJ" while="" timeout="0" info="">
[01:17:45.443]        // if-block "isSWJ"
[01:17:45.443]          // =>  TRUE
[01:17:45.443]        <control if="hasDormant" while="" timeout="0" info="">
[01:17:45.443]          // if-block "hasDormant"
[01:17:45.443]            // =>  FALSE
[01:17:45.443]          // skip if-block "hasDormant"
[01:17:45.443]        </control>
[01:17:45.443]        <control if="!hasDormant" while="" timeout="0" info="">
[01:17:45.443]          // if-block "!hasDormant"
[01:17:45.443]            // =>  TRUE
[01:17:45.443]          <block atomic="false" info="">
[01:17:45.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:17:45.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:45.446]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:17:45.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:17:45.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:17:45.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:45.446]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:17:45.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:17:45.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:17:45.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:45.453]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:17:45.456]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:17:45.456]          </block>
[01:17:45.456]          // end if-block "!hasDormant"
[01:17:45.456]        </control>
[01:17:45.456]        // end if-block "isSWJ"
[01:17:45.456]      </control>
[01:17:45.456]      <control if="!isSWJ" while="" timeout="0" info="">
[01:17:45.456]        // if-block "!isSWJ"
[01:17:45.456]          // =>  FALSE
[01:17:45.456]        // skip if-block "!isSWJ"
[01:17:45.456]      </control>
[01:17:45.456]      <block atomic="false" info="">
[01:17:45.456]        ReadDP(0x0);
[01:17:45.456]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:17:45.456]      </block>
[01:17:45.456]      // end if-block "protType == 2"
[01:17:45.456]    </control>
[01:17:45.464]  </sequence>
[01:17:45.464]  
[01:17:45.465]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:17:45.465]  
[01:17:45.465]  <debugvars>
[01:17:45.465]    // Pre-defined
[01:17:45.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:45.465]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:17:45.465]    __dp=0x00000000
[01:17:45.465]    __ap=0x00000000
[01:17:45.465]    __traceout=0x00000000      (Trace Disabled)
[01:17:45.465]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:45.465]    __FlashAddr=0x00000000
[01:17:45.465]    __FlashLen=0x00000000
[01:17:45.465]    __FlashArg=0x00000000
[01:17:45.465]    __FlashOp=0x00000000
[01:17:45.465]    __Result=0x00000000
[01:17:45.465]  </debugvars>
[01:17:45.465]  
[01:17:45.465]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:17:45.465]    <block atomic="false" info="">
[01:17:45.465]      __var SW_DP_ABORT       = 0x0;
[01:17:45.465]        // -> [SW_DP_ABORT <= 0x00000000]
[01:17:45.465]      __var DP_CTRL_STAT      = 0x4;
[01:17:45.465]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:17:45.465]      __var DP_SELECT         = 0x8;
[01:17:45.465]        // -> [DP_SELECT <= 0x00000008]
[01:17:45.465]      __var powered_down      = 0;
[01:17:45.465]        // -> [powered_down <= 0x00000000]
[01:17:45.465]      WriteDP(DP_SELECT, 0x00000000);
[01:17:45.478]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:17:45.478]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:17:45.478]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:17:45.478]        // -> [powered_down <= 0x00000001]
[01:17:45.478]    </block>
[01:17:45.478]    <control if="powered_down" while="" timeout="0" info="">
[01:17:45.481]      // if-block "powered_down"
[01:17:45.481]        // =>  TRUE
[01:17:45.481]      <block atomic="false" info="">
[01:17:45.481]        Message(0, "Debug/System power-up request sent");
[01:17:45.481]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:17:45.484]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:17:45.484]      </block>
[01:17:45.484]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:17:45.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:17:45.484]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:17:45.484]        // while-condition  =>  FALSE
[01:17:45.484]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:17:45.484]      </control>
[01:17:45.484]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:17:45.484]        // if-block "(__protocol & 0xFFFF) == 1"
[01:17:45.484]          // =>  FALSE
[01:17:45.484]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:17:45.484]      </control>
[01:17:45.484]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:17:45.484]        // if-block "(__protocol & 0xFFFF) == 2"
[01:17:45.484]          // =>  TRUE
[01:17:45.484]        <block atomic="false" info="">
[01:17:45.484]          Message(0, "executing SWD power up");
[01:17:45.484]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:17:45.484]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:17:45.484]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:17:45.494]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:17:45.494]        </block>
[01:17:45.494]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:17:45.494]      </control>
[01:17:45.494]      // end if-block "powered_down"
[01:17:45.496]    </control>
[01:17:45.496]    <block atomic="false" info="">
[01:17:45.496]      __var DEBUG_PORT_VAL    = 0;
[01:17:45.496]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:17:45.496]      __var ACCESS_POINT_VAL  = 0;
[01:17:45.496]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:17:45.496]      __ap = 1; 
[01:17:45.496]        // -> [__ap <= 0x00000001]
[01:17:45.497]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:17:45.506]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:17:45.506]      __ap = 4;
[01:17:45.506]        // -> [__ap <= 0x00000004]
[01:17:45.506]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:45.506]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:17:45.506]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:17:45.506]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:45.514]    </block>
[01:17:45.514]    <block atomic="false" info="">
[01:17:45.514]      __var nReset = 0x80;
[01:17:45.514]        // -> [nReset <= 0x00000080]
[01:17:45.514]      __var canReadPins = 0;
[01:17:45.514]        // -> [canReadPins <= 0x00000000]
[01:17:45.514]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:17:45.527]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:17:45.527]        // -> [canReadPins <= 0x00000001]
[01:17:45.527]    </block>
[01:17:45.527]    <control if="" while="1" timeout="200" info="">
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.527]      // while-condition  =>  TRUE
[01:17:45.527]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.530]      // while "1"  (timeout="200")
[01:17:45.530]      // while-condition  =>  TRUE
[01:17:45.532]      // while "1"  (timeout="200")
[01:17:45.532]      // while-condition  =>  TRUE
[01:17:45.532]      // while "1"  (timeout="200")
[01:17:45.532]      // while-condition  =>  TRUE
[01:17:45.532]      // while "1"  (timeout="200")
[01:17:45.532]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.533]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.533]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.533]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.533]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.533]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.533]      // while-condition  =>  TRUE
[01:17:45.533]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.534]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.534]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.534]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.534]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.534]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.534]      // while "1"  (timeout="200")
[01:17:45.534]      // while-condition  =>  TRUE
[01:17:45.536]      // while "1"  (timeout="200")
[01:17:45.536]      // while  =>  TIMEOUT
[01:17:45.536]      // end while "1"
[01:17:45.536]    </control>
[01:17:45.536]    <control if="canReadPins" while="" timeout="0" info="">
[01:17:45.536]      // if-block "canReadPins"
[01:17:45.536]        // =>  TRUE
[01:17:45.536]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:17:45.536]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:17:45.538]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:17:45.538]        // while-condition  =>  FALSE
[01:17:45.538]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:17:45.538]      </control>
[01:17:45.538]      // end if-block "canReadPins"
[01:17:45.538]    </control>
[01:17:45.538]    <control if="!canReadPins" while="" timeout="0" info="">
[01:17:45.538]      // if-block "!canReadPins"
[01:17:45.538]        // =>  FALSE
[01:17:45.538]      // skip if-block "!canReadPins"
[01:17:45.538]    </control>
[01:17:45.538]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:17:45.538]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:45.538]        // =>  TRUE
[01:17:45.538]      <block atomic="false" info="">
[01:17:45.538]        WriteAP(0x00, 0x190008);
[01:17:45.546]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:45.546]        WriteAP(0xF0, 0x01);
[01:17:45.546]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:45.546]      </block>
[01:17:45.546]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:45.546]    </control>
[01:17:45.546]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:17:45.546]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:45.546]        // =>  FALSE
[01:17:45.546]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:45.546]    </control>
[01:17:45.546]    <block atomic="false" info="">
[01:17:45.546]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:45.565]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:17:45.565]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:17:45.565]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:45.565]      __ap = 0; //lets make sure we reset the access point selection
[01:17:45.565]        // -> [__ap <= 0x00000000]
[01:17:45.565]    </block>
[01:17:45.565]  </sequence>
[01:17:45.565]  
[01:17:45.596]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:17:45.596]  
[01:17:45.596]  <debugvars>
[01:17:45.596]    // Pre-defined
[01:17:45.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:45.596]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:17:45.596]    __dp=0x00000000
[01:17:45.596]    __ap=0x00000000
[01:17:45.596]    __traceout=0x00000000      (Trace Disabled)
[01:17:45.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:45.596]    __FlashAddr=0x00000000
[01:17:45.596]    __FlashLen=0x00000000
[01:17:45.596]    __FlashArg=0x00000000
[01:17:45.596]    __FlashOp=0x00000000
[01:17:45.596]    __Result=0x00000000
[01:17:45.596]  </debugvars>
[01:17:45.596]  
[01:17:45.596]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:17:45.605]    <block atomic="false" info="">
[01:17:45.605]      __var deviceID = 0;
[01:17:45.605]        // -> [deviceID <= 0x00000000]
[01:17:45.605]      __var version = 0;
[01:17:45.605]        // -> [version <= 0x00000000]
[01:17:45.605]      __var partNum = 0;
[01:17:45.605]        // -> [partNum <= 0x00000000]
[01:17:45.605]      __var manuf = 0;
[01:17:45.605]        // -> [manuf <= 0x00000000]
[01:17:45.605]      __var isMSPM0G1X0X_G3X0X = 0;
[01:17:45.606]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:17:45.606]      __var isProduction = 0;
[01:17:45.606]        // -> [isProduction <= 0x00000000]
[01:17:45.606]      __var continueId = 0;
[01:17:45.606]        // -> [continueId <= 0x00000000]
[01:17:45.606]      deviceID =   Read32(0x41C40004);
[01:17:45.616]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:17:45.616]        // -> [deviceID <= 0x2BB8802F]
[01:17:45.616]      version = deviceID >> 28;
[01:17:45.616]        // -> [version <= 0x00000002]
[01:17:45.616]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:17:45.616]        // -> [partNum <= 0x0000BB88]
[01:17:45.616]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:17:45.616]        // -> [manuf <= 0x00000017]
[01:17:45.618]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:17:45.618]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:17:45.618]      isProduction = (version > 0);
[01:17:45.618]        // -> [isProduction <= 0x00000001]
[01:17:45.618]    </block>
[01:17:45.618]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:17:45.618]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:17:45.618]        // =>  FALSE
[01:17:45.618]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:17:45.618]    </control>
[01:17:45.618]    <control if="continueId == 4" while="" timeout="0" info="">
[01:17:45.618]      // if-block "continueId == 4"
[01:17:45.618]        // =>  FALSE
[01:17:45.618]      // skip if-block "continueId == 4"
[01:17:45.618]    </control>
[01:17:45.618]    <control if="!isProduction" while="" timeout="0" info="">
[01:17:45.618]      // if-block "!isProduction"
[01:17:45.618]        // =>  FALSE
[01:17:45.618]      // skip if-block "!isProduction"
[01:17:45.618]    </control>
[01:17:45.618]  </sequence>
[01:17:45.618]  
[01:21:41.596]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:21:41.596]  
[01:21:41.604]  <debugvars>
[01:21:41.604]    // Pre-defined
[01:21:41.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:21:41.604]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:21:41.604]    __dp=0x00000000
[01:21:41.604]    __ap=0x00000000
[01:21:41.604]    __traceout=0x00000000      (Trace Disabled)
[01:21:41.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:21:41.604]    __FlashAddr=0x00000000
[01:21:41.604]    __FlashLen=0x00000000
[01:21:41.604]    __FlashArg=0x00000000
[01:21:41.604]    __FlashOp=0x00000000
[01:21:41.604]    __Result=0x00000000
[01:21:41.604]  </debugvars>
[01:21:41.604]  
[01:21:41.604]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:21:41.605]    <block atomic="false" info="">
[01:21:41.605]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:21:41.605]        // -> [isSWJ <= 0x00000001]
[01:21:41.605]      __var hasDormant = __protocol & 0x00020000;
[01:21:41.605]        // -> [hasDormant <= 0x00000000]
[01:21:41.605]      __var protType   = __protocol & 0x0000FFFF;
[01:21:41.605]        // -> [protType <= 0x00000002]
[01:21:41.605]    </block>
[01:21:41.605]    <control if="protType == 1" while="" timeout="0" info="">
[01:21:41.605]      // if-block "protType == 1"
[01:21:41.606]        // =>  FALSE
[01:21:41.606]      // skip if-block "protType == 1"
[01:21:41.606]    </control>
[01:21:41.606]    <control if="protType == 2" while="" timeout="0" info="">
[01:21:41.606]      // if-block "protType == 2"
[01:21:41.606]        // =>  TRUE
[01:21:41.606]      <control if="isSWJ" while="" timeout="0" info="">
[01:21:41.606]        // if-block "isSWJ"
[01:21:41.606]          // =>  TRUE
[01:21:41.606]        <control if="hasDormant" while="" timeout="0" info="">
[01:21:41.606]          // if-block "hasDormant"
[01:21:41.606]            // =>  FALSE
[01:21:41.606]          // skip if-block "hasDormant"
[01:21:41.606]        </control>
[01:21:41.606]        <control if="!hasDormant" while="" timeout="0" info="">
[01:21:41.606]          // if-block "!hasDormant"
[01:21:41.606]            // =>  TRUE
[01:21:41.606]          <block atomic="false" info="">
[01:21:41.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:21:41.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:21:41.608]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:21:41.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:21:41.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:21:41.615]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:21:41.615]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:21:41.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:21:41.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:21:41.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:21:41.617]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:21:41.617]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:21:41.617]          </block>
[01:21:41.617]          // end if-block "!hasDormant"
[01:21:41.617]        </control>
[01:21:41.617]        // end if-block "isSWJ"
[01:21:41.617]      </control>
[01:21:41.617]      <control if="!isSWJ" while="" timeout="0" info="">
[01:21:41.617]        // if-block "!isSWJ"
[01:21:41.617]          // =>  FALSE
[01:21:41.623]        // skip if-block "!isSWJ"
[01:21:41.623]      </control>
[01:21:41.623]      <block atomic="false" info="">
[01:21:41.623]        ReadDP(0x0);
[01:21:41.623]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:21:41.623]      </block>
[01:21:41.623]      // end if-block "protType == 2"
[01:21:41.626]    </control>
[01:21:41.626]  </sequence>
[01:21:41.626]  
[01:21:41.626]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:21:41.626]  
[01:21:41.626]  <debugvars>
[01:21:41.626]    // Pre-defined
[01:21:41.626]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:21:41.626]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:21:41.626]    __dp=0x00000000
[01:21:41.626]    __ap=0x00000000
[01:21:41.626]    __traceout=0x00000000      (Trace Disabled)
[01:21:41.626]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:21:41.626]    __FlashAddr=0x00000000
[01:21:41.626]    __FlashLen=0x00000000
[01:21:41.626]    __FlashArg=0x00000000
[01:21:41.626]    __FlashOp=0x00000000
[01:21:41.626]    __Result=0x00000000
[01:21:41.626]  </debugvars>
[01:21:41.626]  
[01:21:41.626]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:21:41.626]    <block atomic="false" info="">
[01:21:41.626]      __var SW_DP_ABORT       = 0x0;
[01:21:41.626]        // -> [SW_DP_ABORT <= 0x00000000]
[01:21:41.631]      __var DP_CTRL_STAT      = 0x4;
[01:21:41.631]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:21:41.631]      __var DP_SELECT         = 0x8;
[01:21:41.631]        // -> [DP_SELECT <= 0x00000008]
[01:21:41.631]      __var powered_down      = 0;
[01:21:41.631]        // -> [powered_down <= 0x00000000]
[01:21:41.631]      WriteDP(DP_SELECT, 0x00000000);
[01:21:41.631]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:21:41.631]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:21:41.631]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:21:41.631]        // -> [powered_down <= 0x00000001]
[01:21:41.631]    </block>
[01:21:41.631]    <control if="powered_down" while="" timeout="0" info="">
[01:21:41.631]      // if-block "powered_down"
[01:21:41.631]        // =>  TRUE
[01:21:41.636]      <block atomic="false" info="">
[01:21:41.636]        Message(0, "Debug/System power-up request sent");
[01:21:41.637]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:21:41.637]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:21:41.637]      </block>
[01:21:41.637]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:21:41.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:21:41.648]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:21:41.648]        // while-condition  =>  FALSE
[01:21:41.648]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:21:41.648]      </control>
[01:21:41.648]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:21:41.648]        // if-block "(__protocol & 0xFFFF) == 1"
[01:21:41.648]          // =>  FALSE
[01:21:41.648]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:21:41.648]      </control>
[01:21:41.648]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:21:41.648]        // if-block "(__protocol & 0xFFFF) == 2"
[01:21:41.648]          // =>  TRUE
[01:21:41.648]        <block atomic="false" info="">
[01:21:41.648]          Message(0, "executing SWD power up");
[01:21:41.648]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:21:41.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:21:41.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:21:41.656]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:21:41.656]        </block>
[01:21:41.656]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:21:41.656]      </control>
[01:21:41.656]      // end if-block "powered_down"
[01:21:41.656]    </control>
[01:21:41.656]    <block atomic="false" info="">
[01:21:41.656]      __var DEBUG_PORT_VAL    = 0;
[01:21:41.656]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:21:41.656]      __var ACCESS_POINT_VAL  = 0;
[01:21:41.656]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:21:41.656]      __ap = 1; 
[01:21:41.656]        // -> [__ap <= 0x00000001]
[01:21:41.656]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:21:41.666]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:21:41.666]      __ap = 4;
[01:21:41.666]        // -> [__ap <= 0x00000004]
[01:21:41.666]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:21:41.668]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:21:41.668]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:21:41.668]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:21:41.668]    </block>
[01:21:41.668]    <block atomic="false" info="">
[01:21:41.668]      __var nReset = 0x80;
[01:21:41.668]        // -> [nReset <= 0x00000080]
[01:21:41.668]      __var canReadPins = 0;
[01:21:41.668]        // -> [canReadPins <= 0x00000000]
[01:21:41.668]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:21:41.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:21:41.668]        // -> [canReadPins <= 0x00000001]
[01:21:41.668]    </block>
[01:21:41.668]    <control if="" while="1" timeout="200" info="">
[01:21:41.668]      // while "1"  (timeout="200")
[01:21:41.668]      // while-condition  =>  TRUE
[01:21:41.668]      // while "1"  (timeout="200")
[01:21:41.676]      // while-condition  =>  TRUE
[01:21:41.676]      // while "1"  (timeout="200")
[01:21:41.676]      // while  =>  TIMEOUT
[01:21:41.676]      // end while "1"
[01:21:41.676]    </control>
[01:21:41.676]    <control if="canReadPins" while="" timeout="0" info="">
[01:21:41.676]      // if-block "canReadPins"
[01:21:41.676]        // =>  TRUE
[01:21:41.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:21:41.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:21:41.676]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:21:41.676]        // while-condition  =>  FALSE
[01:21:41.676]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:21:41.676]      </control>
[01:21:41.676]      // end if-block "canReadPins"
[01:21:41.676]    </control>
[01:21:41.676]    <control if="!canReadPins" while="" timeout="0" info="">
[01:21:41.676]      // if-block "!canReadPins"
[01:21:41.676]        // =>  FALSE
[01:21:41.676]      // skip if-block "!canReadPins"
[01:21:41.676]    </control>
[01:21:41.676]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:21:41.676]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:21:41.676]        // =>  TRUE
[01:21:41.676]      <block atomic="false" info="">
[01:21:41.676]        WriteAP(0x00, 0x190008);
[01:21:41.676]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:21:41.676]        WriteAP(0xF0, 0x01);
[01:21:41.676]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:21:41.676]      </block>
[01:21:41.676]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:21:41.676]    </control>
[01:21:41.676]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:21:41.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:21:41.686]        // =>  FALSE
[01:21:41.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:21:41.686]    </control>
[01:21:41.686]    <block atomic="false" info="">
[01:21:41.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:21:41.686]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:21:41.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:21:41.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:21:41.686]      __ap = 0; //lets make sure we reset the access point selection
[01:21:41.686]        // -> [__ap <= 0x00000000]
[01:21:41.686]    </block>
[01:21:41.686]  </sequence>
[01:21:41.686]  
[01:21:41.739]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:21:41.739]  
[01:21:41.739]  <debugvars>
[01:21:41.739]    // Pre-defined
[01:21:41.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:21:41.739]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:21:41.739]    __dp=0x00000000
[01:21:41.739]    __ap=0x00000000
[01:21:41.739]    __traceout=0x00000000      (Trace Disabled)
[01:21:41.739]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:21:41.739]    __FlashAddr=0x00000000
[01:21:41.739]    __FlashLen=0x00000000
[01:21:41.739]    __FlashArg=0x00000000
[01:21:41.739]    __FlashOp=0x00000000
[01:21:41.739]    __Result=0x00000000
[01:21:41.739]  </debugvars>
[01:21:41.739]  
[01:21:41.739]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:21:41.739]    <block atomic="false" info="">
[01:21:41.739]      __var deviceID = 0;
[01:21:41.739]        // -> [deviceID <= 0x00000000]
[01:21:41.739]      __var version = 0;
[01:21:41.739]        // -> [version <= 0x00000000]
[01:21:41.739]      __var partNum = 0;
[01:21:41.739]        // -> [partNum <= 0x00000000]
[01:21:41.739]      __var manuf = 0;
[01:21:41.739]        // -> [manuf <= 0x00000000]
[01:21:41.739]      __var isMSPM0G1X0X_G3X0X = 0;
[01:21:41.739]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:21:41.739]      __var isProduction = 0;
[01:21:41.739]        // -> [isProduction <= 0x00000000]
[01:21:41.739]      __var continueId = 0;
[01:21:41.739]        // -> [continueId <= 0x00000000]
[01:21:41.739]      deviceID =   Read32(0x41C40004);
[01:21:41.749]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:21:41.749]        // -> [deviceID <= 0x2BB8802F]
[01:21:41.749]      version = deviceID >> 28;
[01:21:41.749]        // -> [version <= 0x00000002]
[01:21:41.749]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:21:41.749]        // -> [partNum <= 0x0000BB88]
[01:21:41.749]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:21:41.749]        // -> [manuf <= 0x00000017]
[01:21:41.749]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:21:41.749]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:21:41.749]      isProduction = (version > 0);
[01:21:41.749]        // -> [isProduction <= 0x00000001]
[01:21:41.749]    </block>
[01:21:41.749]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:21:41.749]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:21:41.749]        // =>  FALSE
[01:21:41.749]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:21:41.749]    </control>
[01:21:41.749]    <control if="continueId == 4" while="" timeout="0" info="">
[01:21:41.749]      // if-block "continueId == 4"
[01:21:41.749]        // =>  FALSE
[01:21:41.749]      // skip if-block "continueId == 4"
[01:21:41.749]    </control>
[01:21:41.749]    <control if="!isProduction" while="" timeout="0" info="">
[01:21:41.749]      // if-block "!isProduction"
[01:21:41.749]        // =>  FALSE
[01:21:41.749]      // skip if-block "!isProduction"
[01:21:41.749]    </control>
[01:21:41.749]  </sequence>
[01:21:41.749]  
[01:22:13.028]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:22:13.028]  
[01:22:13.036]  <debugvars>
[01:22:13.036]    // Pre-defined
[01:22:13.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:22:13.036]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:22:13.036]    __dp=0x00000000
[01:22:13.036]    __ap=0x00000000
[01:22:13.036]    __traceout=0x00000000      (Trace Disabled)
[01:22:13.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:22:13.036]    __FlashAddr=0x00000000
[01:22:13.036]    __FlashLen=0x00000000
[01:22:13.036]    __FlashArg=0x00000000
[01:22:13.036]    __FlashOp=0x00000000
[01:22:13.036]    __Result=0x00000000
[01:22:13.036]  </debugvars>
[01:22:13.036]  
[01:22:13.036]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:22:13.036]    <block atomic="false" info="">
[01:22:13.036]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:22:13.036]        // -> [isSWJ <= 0x00000001]
[01:22:13.036]      __var hasDormant = __protocol & 0x00020000;
[01:22:13.036]        // -> [hasDormant <= 0x00000000]
[01:22:13.036]      __var protType   = __protocol & 0x0000FFFF;
[01:22:13.036]        // -> [protType <= 0x00000002]
[01:22:13.036]    </block>
[01:22:13.036]    <control if="protType == 1" while="" timeout="0" info="">
[01:22:13.036]      // if-block "protType == 1"
[01:22:13.036]        // =>  FALSE
[01:22:13.036]      // skip if-block "protType == 1"
[01:22:13.036]    </control>
[01:22:13.036]    <control if="protType == 2" while="" timeout="0" info="">
[01:22:13.036]      // if-block "protType == 2"
[01:22:13.036]        // =>  TRUE
[01:22:13.036]      <control if="isSWJ" while="" timeout="0" info="">
[01:22:13.036]        // if-block "isSWJ"
[01:22:13.036]          // =>  TRUE
[01:22:13.036]        <control if="hasDormant" while="" timeout="0" info="">
[01:22:13.036]          // if-block "hasDormant"
[01:22:13.036]            // =>  FALSE
[01:22:13.036]          // skip if-block "hasDormant"
[01:22:13.036]        </control>
[01:22:13.036]        <control if="!hasDormant" while="" timeout="0" info="">
[01:22:13.036]          // if-block "!hasDormant"
[01:22:13.036]            // =>  TRUE
[01:22:13.036]          <block atomic="false" info="">
[01:22:13.036]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:22:13.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:22:13.043]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:22:13.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:22:13.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:22:13.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:22:13.044]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:22:13.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:22:13.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:22:13.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:22:13.051]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:22:13.052]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:22:13.052]          </block>
[01:22:13.052]          // end if-block "!hasDormant"
[01:22:13.052]        </control>
[01:22:13.053]        // end if-block "isSWJ"
[01:22:13.053]      </control>
[01:22:13.053]      <control if="!isSWJ" while="" timeout="0" info="">
[01:22:13.053]        // if-block "!isSWJ"
[01:22:13.053]          // =>  FALSE
[01:22:13.053]        // skip if-block "!isSWJ"
[01:22:13.053]      </control>
[01:22:13.053]      <block atomic="false" info="">
[01:22:13.053]        ReadDP(0x0);
[01:22:13.056]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:22:13.056]      </block>
[01:22:13.056]      // end if-block "protType == 2"
[01:22:13.056]    </control>
[01:22:13.056]  </sequence>
[01:22:13.056]  
[01:22:13.056]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:22:13.056]  
[01:22:13.056]  <debugvars>
[01:22:13.056]    // Pre-defined
[01:22:13.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:22:13.056]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:22:13.056]    __dp=0x00000000
[01:22:13.056]    __ap=0x00000000
[01:22:13.056]    __traceout=0x00000000      (Trace Disabled)
[01:22:13.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:22:13.056]    __FlashAddr=0x00000000
[01:22:13.056]    __FlashLen=0x00000000
[01:22:13.056]    __FlashArg=0x00000000
[01:22:13.056]    __FlashOp=0x00000000
[01:22:13.056]    __Result=0x00000000
[01:22:13.056]  </debugvars>
[01:22:13.056]  
[01:22:13.056]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:22:13.056]    <block atomic="false" info="">
[01:22:13.056]      __var SW_DP_ABORT       = 0x0;
[01:22:13.056]        // -> [SW_DP_ABORT <= 0x00000000]
[01:22:13.056]      __var DP_CTRL_STAT      = 0x4;
[01:22:13.056]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:22:13.056]      __var DP_SELECT         = 0x8;
[01:22:13.056]        // -> [DP_SELECT <= 0x00000008]
[01:22:13.056]      __var powered_down      = 0;
[01:22:13.056]        // -> [powered_down <= 0x00000000]
[01:22:13.063]      WriteDP(DP_SELECT, 0x00000000);
[01:22:13.063]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:22:13.063]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:22:13.063]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:22:13.063]        // -> [powered_down <= 0x00000001]
[01:22:13.063]    </block>
[01:22:13.063]    <control if="powered_down" while="" timeout="0" info="">
[01:22:13.063]      // if-block "powered_down"
[01:22:13.063]        // =>  TRUE
[01:22:13.063]      <block atomic="false" info="">
[01:22:13.063]        Message(0, "Debug/System power-up request sent");
[01:22:13.063]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:22:13.076]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:22:13.076]      </block>
[01:22:13.076]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:22:13.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:22:13.076]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:22:13.076]        // while-condition  =>  FALSE
[01:22:13.076]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:22:13.076]      </control>
[01:22:13.076]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:22:13.076]        // if-block "(__protocol & 0xFFFF) == 1"
[01:22:13.076]          // =>  FALSE
[01:22:13.076]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:22:13.076]      </control>
[01:22:13.076]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:22:13.076]        // if-block "(__protocol & 0xFFFF) == 2"
[01:22:13.076]          // =>  TRUE
[01:22:13.076]        <block atomic="false" info="">
[01:22:13.076]          Message(0, "executing SWD power up");
[01:22:13.085]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:22:13.085]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:22:13.085]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:22:13.094]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:22:13.094]        </block>
[01:22:13.094]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:22:13.094]      </control>
[01:22:13.094]      // end if-block "powered_down"
[01:22:13.094]    </control>
[01:22:13.094]    <block atomic="false" info="">
[01:22:13.096]      __var DEBUG_PORT_VAL    = 0;
[01:22:13.096]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:22:13.096]      __var ACCESS_POINT_VAL  = 0;
[01:22:13.096]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:22:13.096]      __ap = 1; 
[01:22:13.096]        // -> [__ap <= 0x00000001]
[01:22:13.096]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:22:13.096]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:22:13.096]      __ap = 4;
[01:22:13.096]        // -> [__ap <= 0x00000004]
[01:22:13.096]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:22:13.096]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:22:13.096]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:22:13.096]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:22:13.107]    </block>
[01:22:13.107]    <block atomic="false" info="">
[01:22:13.107]      __var nReset = 0x80;
[01:22:13.107]        // -> [nReset <= 0x00000080]
[01:22:13.107]      __var canReadPins = 0;
[01:22:13.107]        // -> [canReadPins <= 0x00000000]
[01:22:13.107]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:22:13.107]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:22:13.107]        // -> [canReadPins <= 0x00000001]
[01:22:13.107]    </block>
[01:22:13.107]    <control if="" while="1" timeout="200" info="">
[01:22:13.107]      // while "1"  (timeout="200")
[01:22:13.107]      // while-condition  =>  TRUE
[01:22:13.107]      // while "1"  (timeout="200")
[01:22:13.107]      // while-condition  =>  TRUE
[01:22:13.107]      // while "1"  (timeout="200")
[01:22:13.107]      // while-condition  =>  TRUE
[01:22:13.107]      // while "1"  (timeout="200")
[01:22:13.107]      // while-condition  =>  TRUE
[01:22:13.107]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.112]      // while-condition  =>  TRUE
[01:22:13.112]      // while "1"  (timeout="200")
[01:22:13.115]      // while-condition  =>  TRUE
[01:22:13.115]      // while "1"  (timeout="200")
[01:22:13.115]      // while  =>  TIMEOUT
[01:22:13.115]      // end while "1"
[01:22:13.115]    </control>
[01:22:13.115]    <control if="canReadPins" while="" timeout="0" info="">
[01:22:13.115]      // if-block "canReadPins"
[01:22:13.115]        // =>  TRUE
[01:22:13.115]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:22:13.115]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:22:13.117]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:22:13.117]        // while-condition  =>  FALSE
[01:22:13.117]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:22:13.117]      </control>
[01:22:13.117]      // end if-block "canReadPins"
[01:22:13.117]    </control>
[01:22:13.117]    <control if="!canReadPins" while="" timeout="0" info="">
[01:22:13.117]      // if-block "!canReadPins"
[01:22:13.117]        // =>  FALSE
[01:22:13.117]      // skip if-block "!canReadPins"
[01:22:13.117]    </control>
[01:22:13.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:22:13.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:22:13.117]        // =>  TRUE
[01:22:13.117]      <block atomic="false" info="">
[01:22:13.117]        WriteAP(0x00, 0x190008);
[01:22:13.117]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:22:13.117]        WriteAP(0xF0, 0x01);
[01:22:13.125]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:22:13.125]      </block>
[01:22:13.125]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:22:13.125]    </control>
[01:22:13.125]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:22:13.125]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:22:13.125]        // =>  FALSE
[01:22:13.125]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:22:13.125]    </control>
[01:22:13.125]    <block atomic="false" info="">
[01:22:13.125]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:22:13.125]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:22:13.125]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:22:13.125]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:22:13.125]      __ap = 0; //lets make sure we reset the access point selection
[01:22:13.125]        // -> [__ap <= 0x00000000]
[01:22:13.125]    </block>
[01:22:13.125]  </sequence>
[01:22:13.125]  
[01:22:13.155]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:22:13.155]  
[01:22:13.155]  <debugvars>
[01:22:13.155]    // Pre-defined
[01:22:13.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:22:13.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:22:13.155]    __dp=0x00000000
[01:22:13.155]    __ap=0x00000000
[01:22:13.155]    __traceout=0x00000000      (Trace Disabled)
[01:22:13.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:22:13.155]    __FlashAddr=0x00000000
[01:22:13.155]    __FlashLen=0x00000000
[01:22:13.155]    __FlashArg=0x00000000
[01:22:13.155]    __FlashOp=0x00000000
[01:22:13.155]    __Result=0x00000000
[01:22:13.155]  </debugvars>
[01:22:13.155]  
[01:22:13.155]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:22:13.155]    <block atomic="false" info="">
[01:22:13.155]      __var deviceID = 0;
[01:22:13.155]        // -> [deviceID <= 0x00000000]
[01:22:13.155]      __var version = 0;
[01:22:13.155]        // -> [version <= 0x00000000]
[01:22:13.155]      __var partNum = 0;
[01:22:13.155]        // -> [partNum <= 0x00000000]
[01:22:13.155]      __var manuf = 0;
[01:22:13.155]        // -> [manuf <= 0x00000000]
[01:22:13.155]      __var isMSPM0G1X0X_G3X0X = 0;
[01:22:13.155]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:22:13.155]      __var isProduction = 0;
[01:22:13.155]        // -> [isProduction <= 0x00000000]
[01:22:13.155]      __var continueId = 0;
[01:22:13.166]        // -> [continueId <= 0x00000000]
[01:22:13.166]      deviceID =   Read32(0x41C40004);
[01:22:13.169]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:22:13.169]        // -> [deviceID <= 0x2BB8802F]
[01:22:13.169]      version = deviceID >> 28;
[01:22:13.169]        // -> [version <= 0x00000002]
[01:22:13.169]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:22:13.169]        // -> [partNum <= 0x0000BB88]
[01:22:13.169]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:22:13.169]        // -> [manuf <= 0x00000017]
[01:22:13.169]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:22:13.169]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:22:13.169]      isProduction = (version > 0);
[01:22:13.169]        // -> [isProduction <= 0x00000001]
[01:22:13.169]    </block>
[01:22:13.169]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:22:13.169]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:22:13.169]        // =>  FALSE
[01:22:13.169]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:22:13.169]    </control>
[01:22:13.169]    <control if="continueId == 4" while="" timeout="0" info="">
[01:22:13.169]      // if-block "continueId == 4"
[01:22:13.169]        // =>  FALSE
[01:22:13.169]      // skip if-block "continueId == 4"
[01:22:13.169]    </control>
[01:22:13.169]    <control if="!isProduction" while="" timeout="0" info="">
[01:22:13.169]      // if-block "!isProduction"
[01:22:13.169]        // =>  FALSE
[01:22:13.169]      // skip if-block "!isProduction"
[01:22:13.169]    </control>
[01:22:13.169]  </sequence>
[01:22:13.169]  
[01:22:42.359]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:22:42.359]  
[01:22:42.371]  <debugvars>
[01:22:42.371]    // Pre-defined
[01:22:42.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:22:42.371]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:22:42.371]    __dp=0x00000000
[01:22:42.371]    __ap=0x00000000
[01:22:42.371]    __traceout=0x00000000      (Trace Disabled)
[01:22:42.371]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:22:42.371]    __FlashAddr=0x00000000
[01:22:42.371]    __FlashLen=0x00000000
[01:22:42.371]    __FlashArg=0x00000000
[01:22:42.371]    __FlashOp=0x00000000
[01:22:42.371]    __Result=0x00000000
[01:22:42.371]  </debugvars>
[01:22:42.371]  
[01:22:42.371]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:22:42.371]    <block atomic="false" info="">
[01:22:42.371]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:22:42.371]        // -> [isSWJ <= 0x00000001]
[01:22:42.371]      __var hasDormant = __protocol & 0x00020000;
[01:22:42.371]        // -> [hasDormant <= 0x00000000]
[01:22:42.371]      __var protType   = __protocol & 0x0000FFFF;
[01:22:42.371]        // -> [protType <= 0x00000002]
[01:22:42.371]    </block>
[01:22:42.371]    <control if="protType == 1" while="" timeout="0" info="">
[01:22:42.371]      // if-block "protType == 1"
[01:22:42.371]        // =>  FALSE
[01:22:42.371]      // skip if-block "protType == 1"
[01:22:42.371]    </control>
[01:22:42.371]    <control if="protType == 2" while="" timeout="0" info="">
[01:22:42.371]      // if-block "protType == 2"
[01:22:42.371]        // =>  TRUE
[01:22:42.371]      <control if="isSWJ" while="" timeout="0" info="">
[01:22:42.371]        // if-block "isSWJ"
[01:22:42.371]          // =>  TRUE
[01:22:42.371]        <control if="hasDormant" while="" timeout="0" info="">
[01:22:42.371]          // if-block "hasDormant"
[01:22:42.371]            // =>  FALSE
[01:22:42.371]          // skip if-block "hasDormant"
[01:22:42.371]        </control>
[01:22:42.371]        <control if="!hasDormant" while="" timeout="0" info="">
[01:22:42.371]          // if-block "!hasDormant"
[01:22:42.371]            // =>  TRUE
[01:22:42.371]          <block atomic="false" info="">
[01:22:42.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:22:42.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:22:42.380]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:22:42.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:22:42.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:22:42.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:22:42.380]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:22:42.390]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:22:42.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:22:42.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:22:42.392]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:22:42.392]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:22:42.392]          </block>
[01:22:42.392]          // end if-block "!hasDormant"
[01:22:42.392]        </control>
[01:22:42.392]        // end if-block "isSWJ"
[01:22:42.392]      </control>
[01:22:42.392]      <control if="!isSWJ" while="" timeout="0" info="">
[01:22:42.392]        // if-block "!isSWJ"
[01:22:42.392]          // =>  FALSE
[01:22:42.392]        // skip if-block "!isSWJ"
[01:22:42.392]      </control>
[01:22:42.392]      <block atomic="false" info="">
[01:22:42.392]        ReadDP(0x0);
[01:22:42.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:22:42.392]      </block>
[01:22:42.398]      // end if-block "protType == 2"
[01:22:42.398]    </control>
[01:22:42.398]  </sequence>
[01:22:42.398]  
[01:22:42.401]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:22:42.401]  
[01:22:42.401]  <debugvars>
[01:22:42.401]    // Pre-defined
[01:22:42.401]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:22:42.401]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:22:42.401]    __dp=0x00000000
[01:22:42.401]    __ap=0x00000000
[01:22:42.401]    __traceout=0x00000000      (Trace Disabled)
[01:22:42.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:22:42.401]    __FlashAddr=0x00000000
[01:22:42.401]    __FlashLen=0x00000000
[01:22:42.401]    __FlashArg=0x00000000
[01:22:42.401]    __FlashOp=0x00000000
[01:22:42.401]    __Result=0x00000000
[01:22:42.401]  </debugvars>
[01:22:42.401]  
[01:22:42.401]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:22:42.401]    <block atomic="false" info="">
[01:22:42.401]      __var SW_DP_ABORT       = 0x0;
[01:22:42.401]        // -> [SW_DP_ABORT <= 0x00000000]
[01:22:42.401]      __var DP_CTRL_STAT      = 0x4;
[01:22:42.401]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:22:42.401]      __var DP_SELECT         = 0x8;
[01:22:42.401]        // -> [DP_SELECT <= 0x00000008]
[01:22:42.401]      __var powered_down      = 0;
[01:22:42.401]        // -> [powered_down <= 0x00000000]
[01:22:42.401]      WriteDP(DP_SELECT, 0x00000000);
[01:22:42.401]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:22:42.401]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:22:42.401]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:22:42.401]        // -> [powered_down <= 0x00000001]
[01:22:42.401]    </block>
[01:22:42.401]    <control if="powered_down" while="" timeout="0" info="">
[01:22:42.401]      // if-block "powered_down"
[01:22:42.401]        // =>  TRUE
[01:22:42.401]      <block atomic="false" info="">
[01:22:42.401]        Message(0, "Debug/System power-up request sent");
[01:22:42.409]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:22:42.409]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:22:42.409]      </block>
[01:22:42.409]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:22:42.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:22:42.409]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:22:42.409]        // while-condition  =>  FALSE
[01:22:42.409]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:22:42.409]      </control>
[01:22:42.409]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:22:42.409]        // if-block "(__protocol & 0xFFFF) == 1"
[01:22:42.409]          // =>  FALSE
[01:22:42.409]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:22:42.409]      </control>
[01:22:42.419]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:22:42.419]        // if-block "(__protocol & 0xFFFF) == 2"
[01:22:42.419]          // =>  TRUE
[01:22:42.419]        <block atomic="false" info="">
[01:22:42.419]          Message(0, "executing SWD power up");
[01:22:42.419]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:22:42.419]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:22:42.419]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:22:42.419]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:22:42.419]        </block>
[01:22:42.419]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:22:42.419]      </control>
[01:22:42.419]      // end if-block "powered_down"
[01:22:42.419]    </control>
[01:22:42.419]    <block atomic="false" info="">
[01:22:42.419]      __var DEBUG_PORT_VAL    = 0;
[01:22:42.419]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:22:42.419]      __var ACCESS_POINT_VAL  = 0;
[01:22:42.419]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:22:42.419]      __ap = 1; 
[01:22:42.419]        // -> [__ap <= 0x00000001]
[01:22:42.419]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:22:42.429]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:22:42.429]      __ap = 4;
[01:22:42.429]        // -> [__ap <= 0x00000004]
[01:22:42.429]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:22:42.429]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:22:42.429]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:22:42.429]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:22:42.439]    </block>
[01:22:42.439]    <block atomic="false" info="">
[01:22:42.439]      __var nReset = 0x80;
[01:22:42.439]        // -> [nReset <= 0x00000080]
[01:22:42.439]      __var canReadPins = 0;
[01:22:42.439]        // -> [canReadPins <= 0x00000000]
[01:22:42.439]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:22:42.441]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:22:42.441]        // -> [canReadPins <= 0x00000001]
[01:22:42.441]    </block>
[01:22:42.441]    <control if="" while="1" timeout="200" info="">
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.441]      // while-condition  =>  TRUE
[01:22:42.441]      // while "1"  (timeout="200")
[01:22:42.449]      // while-condition  =>  TRUE
[01:22:42.449]      // while "1"  (timeout="200")
[01:22:42.449]      // while  =>  TIMEOUT
[01:22:42.449]      // end while "1"
[01:22:42.449]    </control>
[01:22:42.449]    <control if="canReadPins" while="" timeout="0" info="">
[01:22:42.449]      // if-block "canReadPins"
[01:22:42.449]        // =>  TRUE
[01:22:42.449]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:22:42.449]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:22:42.449]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:22:42.449]        // while-condition  =>  FALSE
[01:22:42.449]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:22:42.449]      </control>
[01:22:42.449]      // end if-block "canReadPins"
[01:22:42.449]    </control>
[01:22:42.449]    <control if="!canReadPins" while="" timeout="0" info="">
[01:22:42.449]      // if-block "!canReadPins"
[01:22:42.449]        // =>  FALSE
[01:22:42.449]      // skip if-block "!canReadPins"
[01:22:42.449]    </control>
[01:22:42.449]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:22:42.449]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:22:42.449]        // =>  TRUE
[01:22:42.449]      <block atomic="false" info="">
[01:22:42.449]        WriteAP(0x00, 0x190008);
[01:22:42.449]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:22:42.449]        WriteAP(0xF0, 0x01);
[01:22:42.459]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:22:42.459]      </block>
[01:22:42.459]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:22:42.459]    </control>
[01:22:42.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:22:42.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:22:42.459]        // =>  FALSE
[01:22:42.459]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:22:42.459]    </control>
[01:22:42.459]    <block atomic="false" info="">
[01:22:42.459]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:22:42.459]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:22:42.459]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:22:42.459]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:22:42.459]      __ap = 0; //lets make sure we reset the access point selection
[01:22:42.459]        // -> [__ap <= 0x00000000]
[01:22:42.459]    </block>
[01:22:42.459]  </sequence>
[01:22:42.459]  
[01:22:42.482]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:22:42.482]  
[01:22:42.482]  <debugvars>
[01:22:42.482]    // Pre-defined
[01:22:42.482]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:22:42.482]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:22:42.482]    __dp=0x00000000
[01:22:42.489]    __ap=0x00000000
[01:22:42.489]    __traceout=0x00000000      (Trace Disabled)
[01:22:42.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:22:42.489]    __FlashAddr=0x00000000
[01:22:42.489]    __FlashLen=0x00000000
[01:22:42.489]    __FlashArg=0x00000000
[01:22:42.489]    __FlashOp=0x00000000
[01:22:42.489]    __Result=0x00000000
[01:22:42.489]  </debugvars>
[01:22:42.489]  
[01:22:42.489]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:22:42.489]    <block atomic="false" info="">
[01:22:42.489]      __var deviceID = 0;
[01:22:42.489]        // -> [deviceID <= 0x00000000]
[01:22:42.489]      __var version = 0;
[01:22:42.489]        // -> [version <= 0x00000000]
[01:22:42.489]      __var partNum = 0;
[01:22:42.489]        // -> [partNum <= 0x00000000]
[01:22:42.489]      __var manuf = 0;
[01:22:42.489]        // -> [manuf <= 0x00000000]
[01:22:42.489]      __var isMSPM0G1X0X_G3X0X = 0;
[01:22:42.489]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:22:42.489]      __var isProduction = 0;
[01:22:42.489]        // -> [isProduction <= 0x00000000]
[01:22:42.489]      __var continueId = 0;
[01:22:42.489]        // -> [continueId <= 0x00000000]
[01:22:42.489]      deviceID =   Read32(0x41C40004);
[01:22:42.489]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:22:42.489]        // -> [deviceID <= 0x2BB8802F]
[01:22:42.489]      version = deviceID >> 28;
[01:22:42.489]        // -> [version <= 0x00000002]
[01:22:42.489]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:22:42.489]        // -> [partNum <= 0x0000BB88]
[01:22:42.489]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:22:42.489]        // -> [manuf <= 0x00000017]
[01:22:42.489]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:22:42.489]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:22:42.489]      isProduction = (version > 0);
[01:22:42.489]        // -> [isProduction <= 0x00000001]
[01:22:42.489]    </block>
[01:22:42.489]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:22:42.489]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:22:42.489]        // =>  FALSE
[01:22:42.489]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:22:42.489]    </control>
[01:22:42.489]    <control if="continueId == 4" while="" timeout="0" info="">
[01:22:42.489]      // if-block "continueId == 4"
[01:22:42.489]        // =>  FALSE
[01:22:42.499]      // skip if-block "continueId == 4"
[01:22:42.499]    </control>
[01:22:42.499]    <control if="!isProduction" while="" timeout="0" info="">
[01:22:42.499]      // if-block "!isProduction"
[01:22:42.499]        // =>  FALSE
[01:22:42.499]      // skip if-block "!isProduction"
[01:22:42.499]    </control>
[01:22:42.499]  </sequence>
[01:22:42.499]  
[01:23:10.965]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:23:10.965]  
[01:23:10.979]  <debugvars>
[01:23:10.979]    // Pre-defined
[01:23:10.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:10.979]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:10.979]    __dp=0x00000000
[01:23:10.979]    __ap=0x00000000
[01:23:10.979]    __traceout=0x00000000      (Trace Disabled)
[01:23:10.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:10.979]    __FlashAddr=0x00000000
[01:23:10.979]    __FlashLen=0x00000000
[01:23:10.979]    __FlashArg=0x00000000
[01:23:10.979]    __FlashOp=0x00000000
[01:23:10.979]    __Result=0x00000000
[01:23:10.979]  </debugvars>
[01:23:10.979]  
[01:23:10.979]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:23:10.979]    <block atomic="false" info="">
[01:23:10.979]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:23:10.979]        // -> [isSWJ <= 0x00000001]
[01:23:10.979]      __var hasDormant = __protocol & 0x00020000;
[01:23:10.979]        // -> [hasDormant <= 0x00000000]
[01:23:10.979]      __var protType   = __protocol & 0x0000FFFF;
[01:23:10.979]        // -> [protType <= 0x00000002]
[01:23:10.979]    </block>
[01:23:10.979]    <control if="protType == 1" while="" timeout="0" info="">
[01:23:10.979]      // if-block "protType == 1"
[01:23:10.979]        // =>  FALSE
[01:23:10.979]      // skip if-block "protType == 1"
[01:23:10.979]    </control>
[01:23:10.979]    <control if="protType == 2" while="" timeout="0" info="">
[01:23:10.979]      // if-block "protType == 2"
[01:23:10.979]        // =>  TRUE
[01:23:10.979]      <control if="isSWJ" while="" timeout="0" info="">
[01:23:10.979]        // if-block "isSWJ"
[01:23:10.979]          // =>  TRUE
[01:23:10.979]        <control if="hasDormant" while="" timeout="0" info="">
[01:23:10.979]          // if-block "hasDormant"
[01:23:10.979]            // =>  FALSE
[01:23:10.979]          // skip if-block "hasDormant"
[01:23:10.979]        </control>
[01:23:10.979]        <control if="!hasDormant" while="" timeout="0" info="">
[01:23:10.979]          // if-block "!hasDormant"
[01:23:10.979]            // =>  TRUE
[01:23:10.984]          <block atomic="false" info="">
[01:23:10.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:23:10.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:10.985]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:23:10.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:23:10.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:23:10.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:10.985]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:23:10.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:23:10.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:23:10.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:10.985]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:23:10.994]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:23:10.994]          </block>
[01:23:10.994]          // end if-block "!hasDormant"
[01:23:10.994]        </control>
[01:23:10.994]        // end if-block "isSWJ"
[01:23:10.994]      </control>
[01:23:10.994]      <control if="!isSWJ" while="" timeout="0" info="">
[01:23:10.994]        // if-block "!isSWJ"
[01:23:10.994]          // =>  FALSE
[01:23:10.994]        // skip if-block "!isSWJ"
[01:23:10.994]      </control>
[01:23:10.994]      <block atomic="false" info="">
[01:23:10.994]        ReadDP(0x0);
[01:23:10.994]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:23:10.994]      </block>
[01:23:10.994]      // end if-block "protType == 2"
[01:23:10.994]    </control>
[01:23:10.994]  </sequence>
[01:23:10.994]  
[01:23:10.994]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:23:10.994]  
[01:23:10.994]  <debugvars>
[01:23:10.994]    // Pre-defined
[01:23:10.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:10.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:10.994]    __dp=0x00000000
[01:23:11.004]    __ap=0x00000000
[01:23:11.004]    __traceout=0x00000000      (Trace Disabled)
[01:23:11.004]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:11.004]    __FlashAddr=0x00000000
[01:23:11.004]    __FlashLen=0x00000000
[01:23:11.004]    __FlashArg=0x00000000
[01:23:11.004]    __FlashOp=0x00000000
[01:23:11.004]    __Result=0x00000000
[01:23:11.004]  </debugvars>
[01:23:11.004]  
[01:23:11.004]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:23:11.004]    <block atomic="false" info="">
[01:23:11.004]      __var SW_DP_ABORT       = 0x0;
[01:23:11.004]        // -> [SW_DP_ABORT <= 0x00000000]
[01:23:11.004]      __var DP_CTRL_STAT      = 0x4;
[01:23:11.004]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:23:11.004]      __var DP_SELECT         = 0x8;
[01:23:11.004]        // -> [DP_SELECT <= 0x00000008]
[01:23:11.004]      __var powered_down      = 0;
[01:23:11.004]        // -> [powered_down <= 0x00000000]
[01:23:11.007]      WriteDP(DP_SELECT, 0x00000000);
[01:23:11.007]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:23:11.007]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:23:11.007]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:23:11.007]        // -> [powered_down <= 0x00000001]
[01:23:11.007]    </block>
[01:23:11.007]    <control if="powered_down" while="" timeout="0" info="">
[01:23:11.007]      // if-block "powered_down"
[01:23:11.007]        // =>  TRUE
[01:23:11.007]      <block atomic="false" info="">
[01:23:11.007]        Message(0, "Debug/System power-up request sent");
[01:23:11.007]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:23:11.007]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:23:11.007]      </block>
[01:23:11.007]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:23:11.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:23:11.015]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:23:11.015]        // while-condition  =>  FALSE
[01:23:11.015]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:23:11.015]      </control>
[01:23:11.015]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:23:11.015]        // if-block "(__protocol & 0xFFFF) == 1"
[01:23:11.015]          // =>  FALSE
[01:23:11.015]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:23:11.015]      </control>
[01:23:11.015]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:23:11.015]        // if-block "(__protocol & 0xFFFF) == 2"
[01:23:11.015]          // =>  TRUE
[01:23:11.015]        <block atomic="false" info="">
[01:23:11.015]          Message(0, "executing SWD power up");
[01:23:11.015]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:23:11.015]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:23:11.015]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:23:11.015]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:23:11.015]        </block>
[01:23:11.015]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:23:11.015]      </control>
[01:23:11.015]      // end if-block "powered_down"
[01:23:11.015]    </control>
[01:23:11.015]    <block atomic="false" info="">
[01:23:11.015]      __var DEBUG_PORT_VAL    = 0;
[01:23:11.015]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:23:11.015]      __var ACCESS_POINT_VAL  = 0;
[01:23:11.015]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:23:11.015]      __ap = 1; 
[01:23:11.015]        // -> [__ap <= 0x00000001]
[01:23:11.015]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:23:11.026]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:23:11.026]      __ap = 4;
[01:23:11.026]        // -> [__ap <= 0x00000004]
[01:23:11.026]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:11.026]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:23:11.026]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:23:11.026]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:11.026]    </block>
[01:23:11.026]    <block atomic="false" info="">
[01:23:11.026]      __var nReset = 0x80;
[01:23:11.026]        // -> [nReset <= 0x00000080]
[01:23:11.026]      __var canReadPins = 0;
[01:23:11.026]        // -> [canReadPins <= 0x00000000]
[01:23:11.026]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:23:11.034]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:23:11.034]        // -> [canReadPins <= 0x00000001]
[01:23:11.034]    </block>
[01:23:11.034]    <control if="" while="1" timeout="200" info="">
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.034]      // while-condition  =>  TRUE
[01:23:11.034]      // while "1"  (timeout="200")
[01:23:11.045]      // while-condition  =>  TRUE
[01:23:11.045]      // while "1"  (timeout="200")
[01:23:11.045]      // while  =>  TIMEOUT
[01:23:11.045]      // end while "1"
[01:23:11.045]    </control>
[01:23:11.045]    <control if="canReadPins" while="" timeout="0" info="">
[01:23:11.045]      // if-block "canReadPins"
[01:23:11.045]        // =>  TRUE
[01:23:11.045]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:23:11.045]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:23:11.047]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:23:11.047]        // while-condition  =>  FALSE
[01:23:11.047]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:23:11.047]      </control>
[01:23:11.047]      // end if-block "canReadPins"
[01:23:11.047]    </control>
[01:23:11.047]    <control if="!canReadPins" while="" timeout="0" info="">
[01:23:11.047]      // if-block "!canReadPins"
[01:23:11.047]        // =>  FALSE
[01:23:11.047]      // skip if-block "!canReadPins"
[01:23:11.047]    </control>
[01:23:11.047]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:23:11.047]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:11.047]        // =>  TRUE
[01:23:11.047]      <block atomic="false" info="">
[01:23:11.047]        WriteAP(0x00, 0x190008);
[01:23:11.047]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:11.047]        WriteAP(0xF0, 0x01);
[01:23:11.054]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:11.054]      </block>
[01:23:11.055]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:11.055]    </control>
[01:23:11.055]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:23:11.055]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:11.055]        // =>  FALSE
[01:23:11.055]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:11.055]    </control>
[01:23:11.056]    <block atomic="false" info="">
[01:23:11.056]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:11.059]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:23:11.059]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:23:11.059]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:11.060]      __ap = 0; //lets make sure we reset the access point selection
[01:23:11.061]        // -> [__ap <= 0x00000000]
[01:23:11.061]    </block>
[01:23:11.061]  </sequence>
[01:23:11.061]  
[01:23:11.082]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:23:11.082]  
[01:23:11.082]  <debugvars>
[01:23:11.082]    // Pre-defined
[01:23:11.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:11.082]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:11.083]    __dp=0x00000000
[01:23:11.083]    __ap=0x00000000
[01:23:11.083]    __traceout=0x00000000      (Trace Disabled)
[01:23:11.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:11.083]    __FlashAddr=0x00000000
[01:23:11.083]    __FlashLen=0x00000000
[01:23:11.084]    __FlashArg=0x00000000
[01:23:11.084]    __FlashOp=0x00000000
[01:23:11.084]    __Result=0x00000000
[01:23:11.084]  </debugvars>
[01:23:11.084]  
[01:23:11.084]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:23:11.084]    <block atomic="false" info="">
[01:23:11.084]      __var deviceID = 0;
[01:23:11.084]        // -> [deviceID <= 0x00000000]
[01:23:11.085]      __var version = 0;
[01:23:11.085]        // -> [version <= 0x00000000]
[01:23:11.085]      __var partNum = 0;
[01:23:11.085]        // -> [partNum <= 0x00000000]
[01:23:11.085]      __var manuf = 0;
[01:23:11.085]        // -> [manuf <= 0x00000000]
[01:23:11.085]      __var isMSPM0G1X0X_G3X0X = 0;
[01:23:11.086]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:23:11.086]      __var isProduction = 0;
[01:23:11.086]        // -> [isProduction <= 0x00000000]
[01:23:11.086]      __var continueId = 0;
[01:23:11.087]        // -> [continueId <= 0x00000000]
[01:23:11.087]      deviceID =   Read32(0x41C40004);
[01:23:11.091]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:23:11.091]        // -> [deviceID <= 0x2BB8802F]
[01:23:11.091]      version = deviceID >> 28;
[01:23:11.091]        // -> [version <= 0x00000002]
[01:23:11.091]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:23:11.091]        // -> [partNum <= 0x0000BB88]
[01:23:11.091]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:23:11.091]        // -> [manuf <= 0x00000017]
[01:23:11.091]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:23:11.091]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:23:11.093]      isProduction = (version > 0);
[01:23:11.093]        // -> [isProduction <= 0x00000001]
[01:23:11.093]    </block>
[01:23:11.094]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:23:11.094]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:23:11.094]        // =>  FALSE
[01:23:11.094]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:23:11.094]    </control>
[01:23:11.094]    <control if="continueId == 4" while="" timeout="0" info="">
[01:23:11.094]      // if-block "continueId == 4"
[01:23:11.094]        // =>  FALSE
[01:23:11.094]      // skip if-block "continueId == 4"
[01:23:11.094]    </control>
[01:23:11.094]    <control if="!isProduction" while="" timeout="0" info="">
[01:23:11.094]      // if-block "!isProduction"
[01:23:11.094]        // =>  FALSE
[01:23:11.094]      // skip if-block "!isProduction"
[01:23:11.094]    </control>
[01:23:11.094]  </sequence>
[01:23:11.094]  
[01:23:32.586]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:23:32.586]  
[01:23:32.601]  <debugvars>
[01:23:32.601]    // Pre-defined
[01:23:32.601]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:32.601]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:32.601]    __dp=0x00000000
[01:23:32.601]    __ap=0x00000000
[01:23:32.601]    __traceout=0x00000000      (Trace Disabled)
[01:23:32.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:32.601]    __FlashAddr=0x00000000
[01:23:32.601]    __FlashLen=0x00000000
[01:23:32.601]    __FlashArg=0x00000000
[01:23:32.601]    __FlashOp=0x00000000
[01:23:32.601]    __Result=0x00000000
[01:23:32.601]  </debugvars>
[01:23:32.601]  
[01:23:32.601]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:23:32.601]    <block atomic="false" info="">
[01:23:32.601]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:23:32.601]        // -> [isSWJ <= 0x00000001]
[01:23:32.601]      __var hasDormant = __protocol & 0x00020000;
[01:23:32.601]        // -> [hasDormant <= 0x00000000]
[01:23:32.601]      __var protType   = __protocol & 0x0000FFFF;
[01:23:32.601]        // -> [protType <= 0x00000002]
[01:23:32.601]    </block>
[01:23:32.601]    <control if="protType == 1" while="" timeout="0" info="">
[01:23:32.601]      // if-block "protType == 1"
[01:23:32.601]        // =>  FALSE
[01:23:32.601]      // skip if-block "protType == 1"
[01:23:32.605]    </control>
[01:23:32.605]    <control if="protType == 2" while="" timeout="0" info="">
[01:23:32.605]      // if-block "protType == 2"
[01:23:32.605]        // =>  TRUE
[01:23:32.605]      <control if="isSWJ" while="" timeout="0" info="">
[01:23:32.605]        // if-block "isSWJ"
[01:23:32.605]          // =>  TRUE
[01:23:32.605]        <control if="hasDormant" while="" timeout="0" info="">
[01:23:32.605]          // if-block "hasDormant"
[01:23:32.605]            // =>  FALSE
[01:23:32.605]          // skip if-block "hasDormant"
[01:23:32.605]        </control>
[01:23:32.605]        <control if="!hasDormant" while="" timeout="0" info="">
[01:23:32.606]          // if-block "!hasDormant"
[01:23:32.606]            // =>  TRUE
[01:23:32.606]          <block atomic="false" info="">
[01:23:32.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:23:32.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:32.606]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:23:32.606]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:23:32.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:23:32.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:32.613]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:23:32.619]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:23:32.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:23:32.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:32.619]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:23:32.626]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:23:32.626]          </block>
[01:23:32.626]          // end if-block "!hasDormant"
[01:23:32.626]        </control>
[01:23:32.626]        // end if-block "isSWJ"
[01:23:32.626]      </control>
[01:23:32.626]      <control if="!isSWJ" while="" timeout="0" info="">
[01:23:32.626]        // if-block "!isSWJ"
[01:23:32.626]          // =>  FALSE
[01:23:32.626]        // skip if-block "!isSWJ"
[01:23:32.626]      </control>
[01:23:32.626]      <block atomic="false" info="">
[01:23:32.626]        ReadDP(0x0);
[01:23:32.630]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:23:32.630]      </block>
[01:23:32.630]      // end if-block "protType == 2"
[01:23:32.630]    </control>
[01:23:32.630]  </sequence>
[01:23:32.630]  
[01:23:32.630]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:23:32.630]  
[01:23:32.630]  <debugvars>
[01:23:32.630]    // Pre-defined
[01:23:32.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:32.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:32.630]    __dp=0x00000000
[01:23:32.630]    __ap=0x00000000
[01:23:32.630]    __traceout=0x00000000      (Trace Disabled)
[01:23:32.630]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:32.630]    __FlashAddr=0x00000000
[01:23:32.630]    __FlashLen=0x00000000
[01:23:32.630]    __FlashArg=0x00000000
[01:23:32.630]    __FlashOp=0x00000000
[01:23:32.630]    __Result=0x00000000
[01:23:32.630]  </debugvars>
[01:23:32.630]  
[01:23:32.630]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:23:32.630]    <block atomic="false" info="">
[01:23:32.630]      __var SW_DP_ABORT       = 0x0;
[01:23:32.630]        // -> [SW_DP_ABORT <= 0x00000000]
[01:23:32.630]      __var DP_CTRL_STAT      = 0x4;
[01:23:32.636]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:23:32.636]      __var DP_SELECT         = 0x8;
[01:23:32.636]        // -> [DP_SELECT <= 0x00000008]
[01:23:32.636]      __var powered_down      = 0;
[01:23:32.636]        // -> [powered_down <= 0x00000000]
[01:23:32.636]      WriteDP(DP_SELECT, 0x00000000);
[01:23:32.638]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:23:32.638]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:23:32.638]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:23:32.638]        // -> [powered_down <= 0x00000001]
[01:23:32.638]    </block>
[01:23:32.638]    <control if="powered_down" while="" timeout="0" info="">
[01:23:32.638]      // if-block "powered_down"
[01:23:32.638]        // =>  TRUE
[01:23:32.638]      <block atomic="false" info="">
[01:23:32.638]        Message(0, "Debug/System power-up request sent");
[01:23:32.638]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:23:32.638]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:23:32.638]      </block>
[01:23:32.638]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:23:32.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:23:32.638]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:23:32.638]        // while-condition  =>  FALSE
[01:23:32.638]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:23:32.638]      </control>
[01:23:32.638]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:23:32.638]        // if-block "(__protocol & 0xFFFF) == 1"
[01:23:32.638]          // =>  FALSE
[01:23:32.638]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:23:32.638]      </control>
[01:23:32.638]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:23:32.638]        // if-block "(__protocol & 0xFFFF) == 2"
[01:23:32.638]          // =>  TRUE
[01:23:32.638]        <block atomic="false" info="">
[01:23:32.638]          Message(0, "executing SWD power up");
[01:23:32.638]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:23:32.647]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:23:32.649]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:23:32.649]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:23:32.649]        </block>
[01:23:32.649]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:23:32.649]      </control>
[01:23:32.649]      // end if-block "powered_down"
[01:23:32.649]    </control>
[01:23:32.649]    <block atomic="false" info="">
[01:23:32.649]      __var DEBUG_PORT_VAL    = 0;
[01:23:32.649]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:23:32.649]      __var ACCESS_POINT_VAL  = 0;
[01:23:32.649]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:23:32.649]      __ap = 1; 
[01:23:32.649]        // -> [__ap <= 0x00000001]
[01:23:32.649]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:23:32.657]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:23:32.657]      __ap = 4;
[01:23:32.657]        // -> [__ap <= 0x00000004]
[01:23:32.657]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:32.657]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:23:32.657]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:23:32.657]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:32.657]    </block>
[01:23:32.657]    <block atomic="false" info="">
[01:23:32.657]      __var nReset = 0x80;
[01:23:32.657]        // -> [nReset <= 0x00000080]
[01:23:32.657]      __var canReadPins = 0;
[01:23:32.657]        // -> [canReadPins <= 0x00000000]
[01:23:32.657]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:23:32.657]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:23:32.657]        // -> [canReadPins <= 0x00000001]
[01:23:32.657]    </block>
[01:23:32.657]    <control if="" while="1" timeout="200" info="">
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.657]      // while "1"  (timeout="200")
[01:23:32.657]      // while-condition  =>  TRUE
[01:23:32.668]      // while "1"  (timeout="200")
[01:23:32.668]      // while  =>  TIMEOUT
[01:23:32.668]      // end while "1"
[01:23:32.668]    </control>
[01:23:32.668]    <control if="canReadPins" while="" timeout="0" info="">
[01:23:32.668]      // if-block "canReadPins"
[01:23:32.668]        // =>  TRUE
[01:23:32.668]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:23:32.668]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:23:32.672]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:23:32.672]        // while-condition  =>  FALSE
[01:23:32.672]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:23:32.672]      </control>
[01:23:32.672]      // end if-block "canReadPins"
[01:23:32.672]    </control>
[01:23:32.672]    <control if="!canReadPins" while="" timeout="0" info="">
[01:23:32.672]      // if-block "!canReadPins"
[01:23:32.672]        // =>  FALSE
[01:23:32.672]      // skip if-block "!canReadPins"
[01:23:32.672]    </control>
[01:23:32.672]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:23:32.672]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:32.672]        // =>  TRUE
[01:23:32.672]      <block atomic="false" info="">
[01:23:32.672]        WriteAP(0x00, 0x190008);
[01:23:32.678]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:32.678]        WriteAP(0xF0, 0x01);
[01:23:32.678]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:32.678]      </block>
[01:23:32.678]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:32.678]    </control>
[01:23:32.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:23:32.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:32.678]        // =>  FALSE
[01:23:32.678]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:32.678]    </control>
[01:23:32.678]    <block atomic="false" info="">
[01:23:32.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:32.678]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:23:32.678]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:23:32.678]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:32.678]      __ap = 0; //lets make sure we reset the access point selection
[01:23:32.678]        // -> [__ap <= 0x00000000]
[01:23:32.678]    </block>
[01:23:32.678]  </sequence>
[01:23:32.678]  
[01:23:32.708]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:23:32.708]  
[01:23:32.708]  <debugvars>
[01:23:32.708]    // Pre-defined
[01:23:32.708]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:32.708]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:32.708]    __dp=0x00000000
[01:23:32.708]    __ap=0x00000000
[01:23:32.708]    __traceout=0x00000000      (Trace Disabled)
[01:23:32.708]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:32.708]    __FlashAddr=0x00000000
[01:23:32.708]    __FlashLen=0x00000000
[01:23:32.708]    __FlashArg=0x00000000
[01:23:32.708]    __FlashOp=0x00000000
[01:23:32.708]    __Result=0x00000000
[01:23:32.708]  </debugvars>
[01:23:32.708]  
[01:23:32.708]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:23:32.708]    <block atomic="false" info="">
[01:23:32.708]      __var deviceID = 0;
[01:23:32.708]        // -> [deviceID <= 0x00000000]
[01:23:32.708]      __var version = 0;
[01:23:32.708]        // -> [version <= 0x00000000]
[01:23:32.708]      __var partNum = 0;
[01:23:32.708]        // -> [partNum <= 0x00000000]
[01:23:32.708]      __var manuf = 0;
[01:23:32.708]        // -> [manuf <= 0x00000000]
[01:23:32.708]      __var isMSPM0G1X0X_G3X0X = 0;
[01:23:32.708]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:23:32.708]      __var isProduction = 0;
[01:23:32.708]        // -> [isProduction <= 0x00000000]
[01:23:32.708]      __var continueId = 0;
[01:23:32.708]        // -> [continueId <= 0x00000000]
[01:23:32.708]      deviceID =   Read32(0x41C40004);
[01:23:32.713]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:23:32.713]        // -> [deviceID <= 0x2BB8802F]
[01:23:32.713]      version = deviceID >> 28;
[01:23:32.713]        // -> [version <= 0x00000002]
[01:23:32.713]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:23:32.713]        // -> [partNum <= 0x0000BB88]
[01:23:32.713]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:23:32.713]        // -> [manuf <= 0x00000017]
[01:23:32.713]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:23:32.713]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:23:32.713]      isProduction = (version > 0);
[01:23:32.713]        // -> [isProduction <= 0x00000001]
[01:23:32.718]    </block>
[01:23:32.718]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:23:32.718]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:23:32.718]        // =>  FALSE
[01:23:32.718]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:23:32.718]    </control>
[01:23:32.718]    <control if="continueId == 4" while="" timeout="0" info="">
[01:23:32.718]      // if-block "continueId == 4"
[01:23:32.718]        // =>  FALSE
[01:23:32.718]      // skip if-block "continueId == 4"
[01:23:32.718]    </control>
[01:23:32.718]    <control if="!isProduction" while="" timeout="0" info="">
[01:23:32.718]      // if-block "!isProduction"
[01:23:32.718]        // =>  FALSE
[01:23:32.718]      // skip if-block "!isProduction"
[01:23:32.718]    </control>
[01:23:32.718]  </sequence>
[01:23:32.718]  
[01:24:07.360]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:07.360]  
[01:24:07.371]  <debugvars>
[01:24:07.371]    // Pre-defined
[01:24:07.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:07.371]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:07.371]    __dp=0x00000000
[01:24:07.371]    __ap=0x00000000
[01:24:07.371]    __traceout=0x00000000      (Trace Disabled)
[01:24:07.371]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:07.371]    __FlashAddr=0x00000000
[01:24:07.371]    __FlashLen=0x00000000
[01:24:07.371]    __FlashArg=0x00000000
[01:24:07.371]    __FlashOp=0x00000000
[01:24:07.371]    __Result=0x00000000
[01:24:07.371]  </debugvars>
[01:24:07.371]  
[01:24:07.371]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:07.371]    <block atomic="false" info="">
[01:24:07.373]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:07.373]        // -> [isSWJ <= 0x00000001]
[01:24:07.373]      __var hasDormant = __protocol & 0x00020000;
[01:24:07.373]        // -> [hasDormant <= 0x00000000]
[01:24:07.373]      __var protType   = __protocol & 0x0000FFFF;
[01:24:07.373]        // -> [protType <= 0x00000002]
[01:24:07.373]    </block>
[01:24:07.373]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:07.373]      // if-block "protType == 1"
[01:24:07.373]        // =>  FALSE
[01:24:07.373]      // skip if-block "protType == 1"
[01:24:07.373]    </control>
[01:24:07.373]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:07.373]      // if-block "protType == 2"
[01:24:07.373]        // =>  TRUE
[01:24:07.373]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:07.373]        // if-block "isSWJ"
[01:24:07.373]          // =>  TRUE
[01:24:07.373]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:07.373]          // if-block "hasDormant"
[01:24:07.373]            // =>  FALSE
[01:24:07.376]          // skip if-block "hasDormant"
[01:24:07.376]        </control>
[01:24:07.376]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:07.376]          // if-block "!hasDormant"
[01:24:07.376]            // =>  TRUE
[01:24:07.376]          <block atomic="false" info="">
[01:24:07.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:07.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:07.376]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:07.386]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:07.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:07.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:07.386]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:07.386]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:07.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:07.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:07.386]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:07.386]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:07.386]          </block>
[01:24:07.386]          // end if-block "!hasDormant"
[01:24:07.386]        </control>
[01:24:07.386]        // end if-block "isSWJ"
[01:24:07.386]      </control>
[01:24:07.386]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:07.386]        // if-block "!isSWJ"
[01:24:07.386]          // =>  FALSE
[01:24:07.386]        // skip if-block "!isSWJ"
[01:24:07.386]      </control>
[01:24:07.386]      <block atomic="false" info="">
[01:24:07.396]        ReadDP(0x0);
[01:24:07.398]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:07.398]      </block>
[01:24:07.398]      // end if-block "protType == 2"
[01:24:07.398]    </control>
[01:24:07.398]  </sequence>
[01:24:07.398]  
[01:24:07.398]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:07.398]  
[01:24:07.398]  <debugvars>
[01:24:07.398]    // Pre-defined
[01:24:07.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:07.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:07.398]    __dp=0x00000000
[01:24:07.398]    __ap=0x00000000
[01:24:07.398]    __traceout=0x00000000      (Trace Disabled)
[01:24:07.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:07.398]    __FlashAddr=0x00000000
[01:24:07.398]    __FlashLen=0x00000000
[01:24:07.398]    __FlashArg=0x00000000
[01:24:07.398]    __FlashOp=0x00000000
[01:24:07.398]    __Result=0x00000000
[01:24:07.398]  </debugvars>
[01:24:07.398]  
[01:24:07.398]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:07.398]    <block atomic="false" info="">
[01:24:07.398]      __var SW_DP_ABORT       = 0x0;
[01:24:07.398]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:07.398]      __var DP_CTRL_STAT      = 0x4;
[01:24:07.398]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:07.398]      __var DP_SELECT         = 0x8;
[01:24:07.398]        // -> [DP_SELECT <= 0x00000008]
[01:24:07.398]      __var powered_down      = 0;
[01:24:07.398]        // -> [powered_down <= 0x00000000]
[01:24:07.398]      WriteDP(DP_SELECT, 0x00000000);
[01:24:07.406]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:07.406]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:07.406]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:07.406]        // -> [powered_down <= 0x00000001]
[01:24:07.406]    </block>
[01:24:07.406]    <control if="powered_down" while="" timeout="0" info="">
[01:24:07.406]      // if-block "powered_down"
[01:24:07.406]        // =>  TRUE
[01:24:07.406]      <block atomic="false" info="">
[01:24:07.406]        Message(0, "Debug/System power-up request sent");
[01:24:07.406]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:07.406]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:07.406]      </block>
[01:24:07.406]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:07.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:07.416]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:07.416]        // while-condition  =>  FALSE
[01:24:07.416]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:07.416]      </control>
[01:24:07.419]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:07.419]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:07.419]          // =>  FALSE
[01:24:07.419]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:07.419]      </control>
[01:24:07.419]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:07.419]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:07.419]          // =>  TRUE
[01:24:07.419]        <block atomic="false" info="">
[01:24:07.419]          Message(0, "executing SWD power up");
[01:24:07.419]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:07.419]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:07.419]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:07.419]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:07.419]        </block>
[01:24:07.419]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:07.419]      </control>
[01:24:07.419]      // end if-block "powered_down"
[01:24:07.419]    </control>
[01:24:07.419]    <block atomic="false" info="">
[01:24:07.419]      __var DEBUG_PORT_VAL    = 0;
[01:24:07.419]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:07.419]      __var ACCESS_POINT_VAL  = 0;
[01:24:07.419]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:07.419]      __ap = 1; 
[01:24:07.419]        // -> [__ap <= 0x00000001]
[01:24:07.419]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:07.430]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:07.430]      __ap = 4;
[01:24:07.430]        // -> [__ap <= 0x00000004]
[01:24:07.430]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:07.430]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:24:07.430]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:24:07.430]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:07.430]    </block>
[01:24:07.430]    <block atomic="false" info="">
[01:24:07.430]      __var nReset = 0x80;
[01:24:07.430]        // -> [nReset <= 0x00000080]
[01:24:07.430]      __var canReadPins = 0;
[01:24:07.430]        // -> [canReadPins <= 0x00000000]
[01:24:07.430]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:07.438]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:07.438]        // -> [canReadPins <= 0x00000001]
[01:24:07.438]    </block>
[01:24:07.438]    <control if="" while="1" timeout="200" info="">
[01:24:07.438]      // while "1"  (timeout="200")
[01:24:07.438]      // while-condition  =>  TRUE
[01:24:07.438]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.439]      // while "1"  (timeout="200")
[01:24:07.439]      // while-condition  =>  TRUE
[01:24:07.445]      // while "1"  (timeout="200")
[01:24:07.445]      // while  =>  TIMEOUT
[01:24:07.445]      // end while "1"
[01:24:07.445]    </control>
[01:24:07.445]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:07.445]      // if-block "canReadPins"
[01:24:07.445]        // =>  TRUE
[01:24:07.445]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:07.445]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:07.447]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:07.447]        // while-condition  =>  FALSE
[01:24:07.447]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:07.447]      </control>
[01:24:07.447]      // end if-block "canReadPins"
[01:24:07.447]    </control>
[01:24:07.447]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:07.447]      // if-block "!canReadPins"
[01:24:07.447]        // =>  FALSE
[01:24:07.447]      // skip if-block "!canReadPins"
[01:24:07.447]    </control>
[01:24:07.447]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:07.447]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:07.447]        // =>  TRUE
[01:24:07.447]      <block atomic="false" info="">
[01:24:07.447]        WriteAP(0x00, 0x190008);
[01:24:07.450]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:07.450]        WriteAP(0xF0, 0x01);
[01:24:07.450]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:07.450]      </block>
[01:24:07.450]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:07.450]    </control>
[01:24:07.450]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:07.450]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:07.450]        // =>  FALSE
[01:24:07.450]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:07.450]    </control>
[01:24:07.450]    <block atomic="false" info="">
[01:24:07.450]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:07.458]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:07.458]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:24:07.458]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:07.458]      __ap = 0; //lets make sure we reset the access point selection
[01:24:07.458]        // -> [__ap <= 0x00000000]
[01:24:07.458]    </block>
[01:24:07.458]  </sequence>
[01:24:07.458]  
[01:24:07.478]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:07.478]  
[01:24:07.478]  <debugvars>
[01:24:07.478]    // Pre-defined
[01:24:07.478]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:07.478]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:07.478]    __dp=0x00000000
[01:24:07.478]    __ap=0x00000000
[01:24:07.478]    __traceout=0x00000000      (Trace Disabled)
[01:24:07.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:07.478]    __FlashAddr=0x00000000
[01:24:07.478]    __FlashLen=0x00000000
[01:24:07.478]    __FlashArg=0x00000000
[01:24:07.478]    __FlashOp=0x00000000
[01:24:07.478]    __Result=0x00000000
[01:24:07.478]  </debugvars>
[01:24:07.478]  
[01:24:07.478]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:07.478]    <block atomic="false" info="">
[01:24:07.478]      __var deviceID = 0;
[01:24:07.478]        // -> [deviceID <= 0x00000000]
[01:24:07.478]      __var version = 0;
[01:24:07.478]        // -> [version <= 0x00000000]
[01:24:07.478]      __var partNum = 0;
[01:24:07.478]        // -> [partNum <= 0x00000000]
[01:24:07.478]      __var manuf = 0;
[01:24:07.478]        // -> [manuf <= 0x00000000]
[01:24:07.478]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:07.478]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:07.478]      __var isProduction = 0;
[01:24:07.478]        // -> [isProduction <= 0x00000000]
[01:24:07.478]      __var continueId = 0;
[01:24:07.478]        // -> [continueId <= 0x00000000]
[01:24:07.478]      deviceID =   Read32(0x41C40004);
[01:24:07.489]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:07.489]        // -> [deviceID <= 0x2BB8802F]
[01:24:07.489]      version = deviceID >> 28;
[01:24:07.489]        // -> [version <= 0x00000002]
[01:24:07.489]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:07.489]        // -> [partNum <= 0x0000BB88]
[01:24:07.489]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:07.489]        // -> [manuf <= 0x00000017]
[01:24:07.489]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:07.489]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:07.489]      isProduction = (version > 0);
[01:24:07.489]        // -> [isProduction <= 0x00000001]
[01:24:07.489]    </block>
[01:24:07.489]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:07.489]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:07.489]        // =>  FALSE
[01:24:07.489]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:07.489]    </control>
[01:24:07.489]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:07.489]      // if-block "continueId == 4"
[01:24:07.489]        // =>  FALSE
[01:24:07.489]      // skip if-block "continueId == 4"
[01:24:07.489]    </control>
[01:24:07.489]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:07.489]      // if-block "!isProduction"
[01:24:07.489]        // =>  FALSE
[01:24:07.489]      // skip if-block "!isProduction"
[01:24:07.489]    </control>
[01:24:07.489]  </sequence>
[01:24:07.489]  
[01:24:26.847]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:26.847]  
[01:24:26.860]  <debugvars>
[01:24:26.861]    // Pre-defined
[01:24:26.861]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:26.861]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:26.861]    __dp=0x00000000
[01:24:26.861]    __ap=0x00000000
[01:24:26.861]    __traceout=0x00000000      (Trace Disabled)
[01:24:26.861]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:26.861]    __FlashAddr=0x00000000
[01:24:26.861]    __FlashLen=0x00000000
[01:24:26.861]    __FlashArg=0x00000000
[01:24:26.861]    __FlashOp=0x00000000
[01:24:26.861]    __Result=0x00000000
[01:24:26.861]  </debugvars>
[01:24:26.861]  
[01:24:26.861]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:26.862]    <block atomic="false" info="">
[01:24:26.862]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:26.862]        // -> [isSWJ <= 0x00000001]
[01:24:26.862]      __var hasDormant = __protocol & 0x00020000;
[01:24:26.862]        // -> [hasDormant <= 0x00000000]
[01:24:26.862]      __var protType   = __protocol & 0x0000FFFF;
[01:24:26.862]        // -> [protType <= 0x00000002]
[01:24:26.862]    </block>
[01:24:26.862]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:26.862]      // if-block "protType == 1"
[01:24:26.862]        // =>  FALSE
[01:24:26.863]      // skip if-block "protType == 1"
[01:24:26.863]    </control>
[01:24:26.863]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:26.863]      // if-block "protType == 2"
[01:24:26.863]        // =>  TRUE
[01:24:26.863]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:26.863]        // if-block "isSWJ"
[01:24:26.863]          // =>  TRUE
[01:24:26.863]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:26.863]          // if-block "hasDormant"
[01:24:26.863]            // =>  FALSE
[01:24:26.863]          // skip if-block "hasDormant"
[01:24:26.864]        </control>
[01:24:26.864]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:26.864]          // if-block "!hasDormant"
[01:24:26.864]            // =>  TRUE
[01:24:26.864]          <block atomic="false" info="">
[01:24:26.864]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:26.866]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:26.866]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:26.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:26.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:26.878]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:26.878]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:26.878]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:26.878]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:26.881]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:26.881]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:26.882]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:26.882]          </block>
[01:24:26.882]          // end if-block "!hasDormant"
[01:24:26.882]        </control>
[01:24:26.882]        // end if-block "isSWJ"
[01:24:26.882]      </control>
[01:24:26.882]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:26.883]        // if-block "!isSWJ"
[01:24:26.883]          // =>  FALSE
[01:24:26.883]        // skip if-block "!isSWJ"
[01:24:26.883]      </control>
[01:24:26.883]      <block atomic="false" info="">
[01:24:26.883]        ReadDP(0x0);
[01:24:26.885]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:26.885]      </block>
[01:24:26.885]      // end if-block "protType == 2"
[01:24:26.885]    </control>
[01:24:26.885]  </sequence>
[01:24:26.885]  
[01:24:26.888]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:26.888]  
[01:24:26.888]  <debugvars>
[01:24:26.888]    // Pre-defined
[01:24:26.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:26.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:26.888]    __dp=0x00000000
[01:24:26.888]    __ap=0x00000000
[01:24:26.888]    __traceout=0x00000000      (Trace Disabled)
[01:24:26.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:26.889]    __FlashAddr=0x00000000
[01:24:26.889]    __FlashLen=0x00000000
[01:24:26.889]    __FlashArg=0x00000000
[01:24:26.889]    __FlashOp=0x00000000
[01:24:26.889]    __Result=0x00000000
[01:24:26.889]  </debugvars>
[01:24:26.889]  
[01:24:26.889]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:26.889]    <block atomic="false" info="">
[01:24:26.889]      __var SW_DP_ABORT       = 0x0;
[01:24:26.889]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:26.889]      __var DP_CTRL_STAT      = 0x4;
[01:24:26.889]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:26.889]      __var DP_SELECT         = 0x8;
[01:24:26.889]        // -> [DP_SELECT <= 0x00000008]
[01:24:26.889]      __var powered_down      = 0;
[01:24:26.889]        // -> [powered_down <= 0x00000000]
[01:24:26.889]      WriteDP(DP_SELECT, 0x00000000);
[01:24:26.889]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:26.889]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:26.897]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:26.897]        // -> [powered_down <= 0x00000001]
[01:24:26.897]    </block>
[01:24:26.898]    <control if="powered_down" while="" timeout="0" info="">
[01:24:26.898]      // if-block "powered_down"
[01:24:26.898]        // =>  TRUE
[01:24:26.898]      <block atomic="false" info="">
[01:24:26.898]        Message(0, "Debug/System power-up request sent");
[01:24:26.900]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:26.904]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:26.904]      </block>
[01:24:26.904]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:26.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:26.907]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:26.907]        // while-condition  =>  FALSE
[01:24:26.907]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:26.907]      </control>
[01:24:26.907]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:26.907]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:26.907]          // =>  FALSE
[01:24:26.907]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:26.907]      </control>
[01:24:26.907]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:26.907]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:26.907]          // =>  TRUE
[01:24:26.907]        <block atomic="false" info="">
[01:24:26.907]          Message(0, "executing SWD power up");
[01:24:26.909]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:26.916]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:26.916]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:26.919]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:26.919]        </block>
[01:24:26.919]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:26.919]      </control>
[01:24:26.919]      // end if-block "powered_down"
[01:24:26.919]    </control>
[01:24:26.919]    <block atomic="false" info="">
[01:24:26.919]      __var DEBUG_PORT_VAL    = 0;
[01:24:26.919]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:26.919]      __var ACCESS_POINT_VAL  = 0;
[01:24:26.919]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:26.919]      __ap = 1; 
[01:24:26.919]        // -> [__ap <= 0x00000001]
[01:24:26.919]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:26.919]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:26.919]      __ap = 4;
[01:24:26.919]        // -> [__ap <= 0x00000004]
[01:24:26.919]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:26.932]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[01:24:26.932]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[01:24:26.932]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:26.932]    </block>
[01:24:26.932]    <block atomic="false" info="">
[01:24:26.932]      __var nReset = 0x80;
[01:24:26.932]        // -> [nReset <= 0x00000080]
[01:24:26.932]      __var canReadPins = 0;
[01:24:26.932]        // -> [canReadPins <= 0x00000000]
[01:24:26.932]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:26.939]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:26.939]        // -> [canReadPins <= 0x00000001]
[01:24:26.939]    </block>
[01:24:26.939]    <control if="" while="1" timeout="200" info="">
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.939]      // while "1"  (timeout="200")
[01:24:26.939]      // while-condition  =>  TRUE
[01:24:26.949]      // while "1"  (timeout="200")
[01:24:26.949]      // while  =>  TIMEOUT
[01:24:26.949]      // end while "1"
[01:24:26.949]    </control>
[01:24:26.949]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:26.949]      // if-block "canReadPins"
[01:24:26.949]        // =>  TRUE
[01:24:26.949]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:26.949]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:26.949]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:26.949]        // while-condition  =>  FALSE
[01:24:26.949]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:26.949]      </control>
[01:24:26.949]      // end if-block "canReadPins"
[01:24:26.949]    </control>
[01:24:26.949]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:26.949]      // if-block "!canReadPins"
[01:24:26.949]        // =>  FALSE
[01:24:26.949]      // skip if-block "!canReadPins"
[01:24:26.949]    </control>
[01:24:26.949]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:26.949]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:26.949]        // =>  TRUE
[01:24:26.949]      <block atomic="false" info="">
[01:24:26.949]        WriteAP(0x00, 0x190008);
[01:24:26.959]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:26.959]        WriteAP(0xF0, 0x01);
[01:24:26.959]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:26.969]      </block>
[01:24:26.969]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:26.969]    </control>
[01:24:26.969]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:26.969]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:26.969]        // =>  FALSE
[01:24:26.969]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:26.969]    </control>
[01:24:26.969]    <block atomic="false" info="">
[01:24:26.969]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:26.969]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:26.969]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[01:24:26.969]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:26.969]      __ap = 0; //lets make sure we reset the access point selection
[01:24:26.969]        // -> [__ap <= 0x00000000]
[01:24:26.969]    </block>
[01:24:26.969]  </sequence>
[01:24:26.969]  
[01:24:27.000]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:27.000]  
[01:24:27.000]  <debugvars>
[01:24:27.000]    // Pre-defined
[01:24:27.000]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:27.000]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:27.000]    __dp=0x00000000
[01:24:27.000]    __ap=0x00000000
[01:24:27.000]    __traceout=0x00000000      (Trace Disabled)
[01:24:27.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:27.000]    __FlashAddr=0x00000000
[01:24:27.000]    __FlashLen=0x00000000
[01:24:27.000]    __FlashArg=0x00000000
[01:24:27.000]    __FlashOp=0x00000000
[01:24:27.000]    __Result=0x00000000
[01:24:27.000]  </debugvars>
[01:24:27.000]  
[01:24:27.000]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:27.000]    <block atomic="false" info="">
[01:24:27.000]      __var deviceID = 0;
[01:24:27.000]        // -> [deviceID <= 0x00000000]
[01:24:27.000]      __var version = 0;
[01:24:27.000]        // -> [version <= 0x00000000]
[01:24:27.000]      __var partNum = 0;
[01:24:27.000]        // -> [partNum <= 0x00000000]
[01:24:27.000]      __var manuf = 0;
[01:24:27.000]        // -> [manuf <= 0x00000000]
[01:24:27.000]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:27.000]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:27.000]      __var isProduction = 0;
[01:24:27.000]        // -> [isProduction <= 0x00000000]
[01:24:27.000]      __var continueId = 0;
[01:24:27.000]        // -> [continueId <= 0x00000000]
[01:24:27.000]      deviceID =   Read32(0x41C40004);
[01:24:27.010]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:27.010]        // -> [deviceID <= 0x2BB8802F]
[01:24:27.010]      version = deviceID >> 28;
[01:24:27.010]        // -> [version <= 0x00000002]
[01:24:27.010]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:27.010]        // -> [partNum <= 0x0000BB88]
[01:24:27.010]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:27.010]        // -> [manuf <= 0x00000017]
[01:24:27.010]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:27.010]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:27.010]      isProduction = (version > 0);
[01:24:27.010]        // -> [isProduction <= 0x00000001]
[01:24:27.010]    </block>
[01:24:27.010]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:27.010]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:27.010]        // =>  FALSE
[01:24:27.010]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:27.010]    </control>
[01:24:27.010]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:27.010]      // if-block "continueId == 4"
[01:24:27.010]        // =>  FALSE
[01:24:27.010]      // skip if-block "continueId == 4"
[01:24:27.010]    </control>
[01:24:27.010]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:27.010]      // if-block "!isProduction"
[01:24:27.010]        // =>  FALSE
[01:24:27.010]      // skip if-block "!isProduction"
[01:24:27.010]    </control>
[01:24:27.010]  </sequence>
[01:24:27.010]  
[01:24:37.421]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:37.421]  
[01:24:37.437]  <debugvars>
[01:24:37.437]    // Pre-defined
[01:24:37.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:37.437]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:37.437]    __dp=0x00000000
[01:24:37.437]    __ap=0x00000000
[01:24:37.437]    __traceout=0x00000000      (Trace Disabled)
[01:24:37.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:37.437]    __FlashAddr=0x00000000
[01:24:37.437]    __FlashLen=0x00000000
[01:24:37.437]    __FlashArg=0x00000000
[01:24:37.437]    __FlashOp=0x00000000
[01:24:37.437]    __Result=0x00000000
[01:24:37.437]  </debugvars>
[01:24:37.437]  
[01:24:37.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:37.437]    <block atomic="false" info="">
[01:24:37.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:37.437]        // -> [isSWJ <= 0x00000001]
[01:24:37.437]      __var hasDormant = __protocol & 0x00020000;
[01:24:37.437]        // -> [hasDormant <= 0x00000000]
[01:24:37.437]      __var protType   = __protocol & 0x0000FFFF;
[01:24:37.437]        // -> [protType <= 0x00000002]
[01:24:37.437]    </block>
[01:24:37.437]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:37.437]      // if-block "protType == 1"
[01:24:37.437]        // =>  FALSE
[01:24:37.437]      // skip if-block "protType == 1"
[01:24:37.437]    </control>
[01:24:37.437]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:37.437]      // if-block "protType == 2"
[01:24:37.437]        // =>  TRUE
[01:24:37.437]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:37.440]        // if-block "isSWJ"
[01:24:37.440]          // =>  TRUE
[01:24:37.440]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:37.440]          // if-block "hasDormant"
[01:24:37.440]            // =>  FALSE
[01:24:37.440]          // skip if-block "hasDormant"
[01:24:37.440]        </control>
[01:24:37.441]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:37.441]          // if-block "!hasDormant"
[01:24:37.441]            // =>  TRUE
[01:24:37.441]          <block atomic="false" info="">
[01:24:37.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:37.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:37.441]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:37.441]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:37.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:37.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:37.450]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:37.450]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:37.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:37.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:37.450]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:37.450]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:37.450]          </block>
[01:24:37.450]          // end if-block "!hasDormant"
[01:24:37.450]        </control>
[01:24:37.450]        // end if-block "isSWJ"
[01:24:37.450]      </control>
[01:24:37.450]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:37.450]        // if-block "!isSWJ"
[01:24:37.450]          // =>  FALSE
[01:24:37.450]        // skip if-block "!isSWJ"
[01:24:37.450]      </control>
[01:24:37.450]      <block atomic="false" info="">
[01:24:37.450]        ReadDP(0x0);
[01:24:37.460]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:37.460]      </block>
[01:24:37.460]      // end if-block "protType == 2"
[01:24:37.460]    </control>
[01:24:37.460]  </sequence>
[01:24:37.460]  
[01:24:37.460]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:37.460]  
[01:24:37.460]  <debugvars>
[01:24:37.460]    // Pre-defined
[01:24:37.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:37.460]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:37.460]    __dp=0x00000000
[01:24:37.460]    __ap=0x00000000
[01:24:37.460]    __traceout=0x00000000      (Trace Disabled)
[01:24:37.460]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:37.460]    __FlashAddr=0x00000000
[01:24:37.460]    __FlashLen=0x00000000
[01:24:37.460]    __FlashArg=0x00000000
[01:24:37.460]    __FlashOp=0x00000000
[01:24:37.460]    __Result=0x00000000
[01:24:37.460]  </debugvars>
[01:24:37.460]  
[01:24:37.460]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:37.460]    <block atomic="false" info="">
[01:24:37.460]      __var SW_DP_ABORT       = 0x0;
[01:24:37.460]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:37.460]      __var DP_CTRL_STAT      = 0x4;
[01:24:37.460]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:37.460]      __var DP_SELECT         = 0x8;
[01:24:37.460]        // -> [DP_SELECT <= 0x00000008]
[01:24:37.460]      __var powered_down      = 0;
[01:24:37.460]        // -> [powered_down <= 0x00000000]
[01:24:37.460]      WriteDP(DP_SELECT, 0x00000000);
[01:24:37.470]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:37.470]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:37.470]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:37.470]        // -> [powered_down <= 0x00000001]
[01:24:37.470]    </block>
[01:24:37.470]    <control if="powered_down" while="" timeout="0" info="">
[01:24:37.470]      // if-block "powered_down"
[01:24:37.470]        // =>  TRUE
[01:24:37.470]      <block atomic="false" info="">
[01:24:37.470]        Message(0, "Debug/System power-up request sent");
[01:24:37.470]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:37.470]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:37.470]      </block>
[01:24:37.470]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:37.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:37.481]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:37.481]        // while-condition  =>  FALSE
[01:24:37.482]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:37.482]      </control>
[01:24:37.482]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:37.482]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:37.482]          // =>  FALSE
[01:24:37.482]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:37.482]      </control>
[01:24:37.482]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:37.482]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:37.482]          // =>  TRUE
[01:24:37.482]        <block atomic="false" info="">
[01:24:37.482]          Message(0, "executing SWD power up");
[01:24:37.482]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:37.482]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:37.482]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:37.490]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:37.490]        </block>
[01:24:37.490]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:37.490]      </control>
[01:24:37.490]      // end if-block "powered_down"
[01:24:37.490]    </control>
[01:24:37.490]    <block atomic="false" info="">
[01:24:37.490]      __var DEBUG_PORT_VAL    = 0;
[01:24:37.490]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:37.490]      __var ACCESS_POINT_VAL  = 0;
[01:24:37.490]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:37.490]      __ap = 1; 
[01:24:37.490]        // -> [__ap <= 0x00000001]
[01:24:37.490]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:37.490]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:37.490]      __ap = 4;
[01:24:37.490]        // -> [__ap <= 0x00000004]
[01:24:37.490]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:37.502]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[01:24:37.502]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[01:24:37.502]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:37.502]    </block>
[01:24:37.502]    <block atomic="false" info="">
[01:24:37.502]      __var nReset = 0x80;
[01:24:37.502]        // -> [nReset <= 0x00000080]
[01:24:37.502]      __var canReadPins = 0;
[01:24:37.502]        // -> [canReadPins <= 0x00000000]
[01:24:37.502]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:37.502]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:37.502]        // -> [canReadPins <= 0x00000001]
[01:24:37.502]    </block>
[01:24:37.502]    <control if="" while="1" timeout="200" info="">
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.502]      // while-condition  =>  TRUE
[01:24:37.502]      // while "1"  (timeout="200")
[01:24:37.510]      // while-condition  =>  TRUE
[01:24:37.510]      // while "1"  (timeout="200")
[01:24:37.510]      // while  =>  TIMEOUT
[01:24:37.510]      // end while "1"
[01:24:37.510]    </control>
[01:24:37.510]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:37.510]      // if-block "canReadPins"
[01:24:37.510]        // =>  TRUE
[01:24:37.510]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:37.510]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:37.510]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:37.510]        // while-condition  =>  FALSE
[01:24:37.510]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:37.510]      </control>
[01:24:37.510]      // end if-block "canReadPins"
[01:24:37.510]    </control>
[01:24:37.510]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:37.510]      // if-block "!canReadPins"
[01:24:37.510]        // =>  FALSE
[01:24:37.510]      // skip if-block "!canReadPins"
[01:24:37.510]    </control>
[01:24:37.510]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:37.510]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:37.510]        // =>  TRUE
[01:24:37.510]      <block atomic="false" info="">
[01:24:37.510]        WriteAP(0x00, 0x190008);
[01:24:37.510]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:37.510]        WriteAP(0xF0, 0x01);
[01:24:37.522]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:37.522]      </block>
[01:24:37.522]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:37.522]    </control>
[01:24:37.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:37.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:37.522]        // =>  FALSE
[01:24:37.522]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:37.522]    </control>
[01:24:37.522]    <block atomic="false" info="">
[01:24:37.522]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:37.522]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:37.522]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[01:24:37.522]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:37.531]      __ap = 0; //lets make sure we reset the access point selection
[01:24:37.531]        // -> [__ap <= 0x00000000]
[01:24:37.531]    </block>
[01:24:37.531]  </sequence>
[01:24:37.531]  
[01:24:37.551]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:37.551]  
[01:24:37.551]  <debugvars>
[01:24:37.551]    // Pre-defined
[01:24:37.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:37.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:37.551]    __dp=0x00000000
[01:24:37.551]    __ap=0x00000000
[01:24:37.551]    __traceout=0x00000000      (Trace Disabled)
[01:24:37.561]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:37.561]    __FlashAddr=0x00000000
[01:24:37.561]    __FlashLen=0x00000000
[01:24:37.561]    __FlashArg=0x00000000
[01:24:37.561]    __FlashOp=0x00000000
[01:24:37.561]    __Result=0x00000000
[01:24:37.561]  </debugvars>
[01:24:37.561]  
[01:24:37.561]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:37.561]    <block atomic="false" info="">
[01:24:37.561]      __var deviceID = 0;
[01:24:37.561]        // -> [deviceID <= 0x00000000]
[01:24:37.561]      __var version = 0;
[01:24:37.561]        // -> [version <= 0x00000000]
[01:24:37.561]      __var partNum = 0;
[01:24:37.561]        // -> [partNum <= 0x00000000]
[01:24:37.561]      __var manuf = 0;
[01:24:37.561]        // -> [manuf <= 0x00000000]
[01:24:37.561]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:37.561]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:37.561]      __var isProduction = 0;
[01:24:37.561]        // -> [isProduction <= 0x00000000]
[01:24:37.561]      __var continueId = 0;
[01:24:37.561]        // -> [continueId <= 0x00000000]
[01:24:37.561]      deviceID =   Read32(0x41C40004);
[01:24:37.571]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:37.571]        // -> [deviceID <= 0x2BB8802F]
[01:24:37.571]      version = deviceID >> 28;
[01:24:37.571]        // -> [version <= 0x00000002]
[01:24:37.571]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:37.571]        // -> [partNum <= 0x0000BB88]
[01:24:37.571]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:37.571]        // -> [manuf <= 0x00000017]
[01:24:37.571]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:37.571]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:37.571]      isProduction = (version > 0);
[01:24:37.571]        // -> [isProduction <= 0x00000001]
[01:24:37.571]    </block>
[01:24:37.571]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:37.571]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:37.571]        // =>  FALSE
[01:24:37.571]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:37.571]    </control>
[01:24:37.571]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:37.571]      // if-block "continueId == 4"
[01:24:37.571]        // =>  FALSE
[01:24:37.571]      // skip if-block "continueId == 4"
[01:24:37.571]    </control>
[01:24:37.571]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:37.571]      // if-block "!isProduction"
[01:24:37.571]        // =>  FALSE
[01:24:37.571]      // skip if-block "!isProduction"
[01:24:37.571]    </control>
[01:24:37.571]  </sequence>
[01:24:37.571]  
[01:24:46.893]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:46.893]  
[01:24:46.909]  <debugvars>
[01:24:46.909]    // Pre-defined
[01:24:46.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:46.909]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:46.909]    __dp=0x00000000
[01:24:46.909]    __ap=0x00000000
[01:24:46.909]    __traceout=0x00000000      (Trace Disabled)
[01:24:46.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:46.909]    __FlashAddr=0x00000000
[01:24:46.909]    __FlashLen=0x00000000
[01:24:46.909]    __FlashArg=0x00000000
[01:24:46.909]    __FlashOp=0x00000000
[01:24:46.909]    __Result=0x00000000
[01:24:46.909]  </debugvars>
[01:24:46.909]  
[01:24:46.909]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:46.909]    <block atomic="false" info="">
[01:24:46.909]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:46.909]        // -> [isSWJ <= 0x00000001]
[01:24:46.909]      __var hasDormant = __protocol & 0x00020000;
[01:24:46.909]        // -> [hasDormant <= 0x00000000]
[01:24:46.909]      __var protType   = __protocol & 0x0000FFFF;
[01:24:46.909]        // -> [protType <= 0x00000002]
[01:24:46.909]    </block>
[01:24:46.909]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:46.911]      // if-block "protType == 1"
[01:24:46.911]        // =>  FALSE
[01:24:46.911]      // skip if-block "protType == 1"
[01:24:46.911]    </control>
[01:24:46.911]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:46.911]      // if-block "protType == 2"
[01:24:46.911]        // =>  TRUE
[01:24:46.911]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:46.911]        // if-block "isSWJ"
[01:24:46.911]          // =>  TRUE
[01:24:46.911]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:46.911]          // if-block "hasDormant"
[01:24:46.911]            // =>  FALSE
[01:24:46.911]          // skip if-block "hasDormant"
[01:24:46.911]        </control>
[01:24:46.911]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:46.911]          // if-block "!hasDormant"
[01:24:46.911]            // =>  TRUE
[01:24:46.911]          <block atomic="false" info="">
[01:24:46.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:46.914]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:46.914]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:46.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:46.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:46.914]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:46.914]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:46.914]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:46.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:46.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:46.924]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:46.924]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:46.924]          </block>
[01:24:46.924]          // end if-block "!hasDormant"
[01:24:46.924]        </control>
[01:24:46.924]        // end if-block "isSWJ"
[01:24:46.924]      </control>
[01:24:46.924]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:46.924]        // if-block "!isSWJ"
[01:24:46.924]          // =>  FALSE
[01:24:46.924]        // skip if-block "!isSWJ"
[01:24:46.924]      </control>
[01:24:46.924]      <block atomic="false" info="">
[01:24:46.924]        ReadDP(0x0);
[01:24:46.924]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:46.924]      </block>
[01:24:46.924]      // end if-block "protType == 2"
[01:24:46.924]    </control>
[01:24:46.924]  </sequence>
[01:24:46.924]  
[01:24:46.936]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:46.936]  
[01:24:46.936]  <debugvars>
[01:24:46.936]    // Pre-defined
[01:24:46.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:46.936]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:46.936]    __dp=0x00000000
[01:24:46.936]    __ap=0x00000000
[01:24:46.936]    __traceout=0x00000000      (Trace Disabled)
[01:24:46.936]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:46.936]    __FlashAddr=0x00000000
[01:24:46.936]    __FlashLen=0x00000000
[01:24:46.936]    __FlashArg=0x00000000
[01:24:46.936]    __FlashOp=0x00000000
[01:24:46.936]    __Result=0x00000000
[01:24:46.936]  </debugvars>
[01:24:46.936]  
[01:24:46.936]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:46.936]    <block atomic="false" info="">
[01:24:46.936]      __var SW_DP_ABORT       = 0x0;
[01:24:46.936]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:46.936]      __var DP_CTRL_STAT      = 0x4;
[01:24:46.936]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:46.936]      __var DP_SELECT         = 0x8;
[01:24:46.936]        // -> [DP_SELECT <= 0x00000008]
[01:24:46.936]      __var powered_down      = 0;
[01:24:46.936]        // -> [powered_down <= 0x00000000]
[01:24:46.936]      WriteDP(DP_SELECT, 0x00000000);
[01:24:46.936]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:46.936]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:46.936]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:46.936]        // -> [powered_down <= 0x00000001]
[01:24:46.936]    </block>
[01:24:46.936]    <control if="powered_down" while="" timeout="0" info="">
[01:24:46.936]      // if-block "powered_down"
[01:24:46.944]        // =>  TRUE
[01:24:46.944]      <block atomic="false" info="">
[01:24:46.944]        Message(0, "Debug/System power-up request sent");
[01:24:46.950]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:46.950]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:46.950]      </block>
[01:24:46.950]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:46.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:46.950]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:46.950]        // while-condition  =>  FALSE
[01:24:46.950]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:46.954]      </control>
[01:24:46.954]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:46.954]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:46.954]          // =>  FALSE
[01:24:46.954]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:46.954]      </control>
[01:24:46.954]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:46.954]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:46.954]          // =>  TRUE
[01:24:46.954]        <block atomic="false" info="">
[01:24:46.954]          Message(0, "executing SWD power up");
[01:24:46.954]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:46.954]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:46.954]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:46.954]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:46.954]        </block>
[01:24:46.954]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:46.954]      </control>
[01:24:46.954]      // end if-block "powered_down"
[01:24:46.954]    </control>
[01:24:46.954]    <block atomic="false" info="">
[01:24:46.954]      __var DEBUG_PORT_VAL    = 0;
[01:24:46.962]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:46.962]      __var ACCESS_POINT_VAL  = 0;
[01:24:46.962]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:46.962]      __ap = 1; 
[01:24:46.962]        // -> [__ap <= 0x00000001]
[01:24:46.962]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:46.964]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:46.964]      __ap = 4;
[01:24:46.964]        // -> [__ap <= 0x00000004]
[01:24:46.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:46.964]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:24:46.964]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:24:46.964]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:46.975]    </block>
[01:24:46.975]    <block atomic="false" info="">
[01:24:46.975]      __var nReset = 0x80;
[01:24:46.975]        // -> [nReset <= 0x00000080]
[01:24:46.975]      __var canReadPins = 0;
[01:24:46.975]        // -> [canReadPins <= 0x00000000]
[01:24:46.975]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:46.975]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:46.977]        // -> [canReadPins <= 0x00000001]
[01:24:46.977]    </block>
[01:24:46.977]    <control if="" while="1" timeout="200" info="">
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.977]      // while-condition  =>  TRUE
[01:24:46.977]      // while "1"  (timeout="200")
[01:24:46.984]      // while-condition  =>  TRUE
[01:24:46.984]      // while "1"  (timeout="200")
[01:24:46.984]      // while-condition  =>  TRUE
[01:24:46.984]      // while "1"  (timeout="200")
[01:24:46.984]      // while-condition  =>  TRUE
[01:24:46.984]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.985]      // while "1"  (timeout="200")
[01:24:46.985]      // while-condition  =>  TRUE
[01:24:46.995]      // while "1"  (timeout="200")
[01:24:46.995]      // while  =>  TIMEOUT
[01:24:46.995]      // end while "1"
[01:24:46.995]    </control>
[01:24:46.995]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:46.995]      // if-block "canReadPins"
[01:24:46.995]        // =>  TRUE
[01:24:46.995]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:46.995]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:46.996]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:46.996]        // while-condition  =>  FALSE
[01:24:46.996]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:46.996]      </control>
[01:24:46.996]      // end if-block "canReadPins"
[01:24:46.996]    </control>
[01:24:46.996]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:46.996]      // if-block "!canReadPins"
[01:24:46.996]        // =>  FALSE
[01:24:46.996]      // skip if-block "!canReadPins"
[01:24:46.996]    </control>
[01:24:46.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:46.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:46.996]        // =>  TRUE
[01:24:46.996]      <block atomic="false" info="">
[01:24:46.996]        WriteAP(0x00, 0x190008);
[01:24:46.996]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:46.996]        WriteAP(0xF0, 0x01);
[01:24:47.006]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:47.006]      </block>
[01:24:47.006]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:47.006]    </control>
[01:24:47.006]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:47.006]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:47.006]        // =>  FALSE
[01:24:47.006]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:47.006]    </control>
[01:24:47.006]    <block atomic="false" info="">
[01:24:47.006]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:47.011]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:47.011]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:24:47.011]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:47.011]      __ap = 0; //lets make sure we reset the access point selection
[01:24:47.011]        // -> [__ap <= 0x00000000]
[01:24:47.011]    </block>
[01:24:47.011]  </sequence>
[01:24:47.011]  
[01:24:47.035]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:47.035]  
[01:24:47.035]  <debugvars>
[01:24:47.035]    // Pre-defined
[01:24:47.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:47.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:47.035]    __dp=0x00000000
[01:24:47.035]    __ap=0x00000000
[01:24:47.035]    __traceout=0x00000000      (Trace Disabled)
[01:24:47.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:47.035]    __FlashAddr=0x00000000
[01:24:47.035]    __FlashLen=0x00000000
[01:24:47.035]    __FlashArg=0x00000000
[01:24:47.035]    __FlashOp=0x00000000
[01:24:47.035]    __Result=0x00000000
[01:24:47.035]  </debugvars>
[01:24:47.035]  
[01:24:47.035]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:47.035]    <block atomic="false" info="">
[01:24:47.035]      __var deviceID = 0;
[01:24:47.035]        // -> [deviceID <= 0x00000000]
[01:24:47.035]      __var version = 0;
[01:24:47.035]        // -> [version <= 0x00000000]
[01:24:47.035]      __var partNum = 0;
[01:24:47.035]        // -> [partNum <= 0x00000000]
[01:24:47.035]      __var manuf = 0;
[01:24:47.035]        // -> [manuf <= 0x00000000]
[01:24:47.035]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:47.045]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:47.045]      __var isProduction = 0;
[01:24:47.045]        // -> [isProduction <= 0x00000000]
[01:24:47.045]      __var continueId = 0;
[01:24:47.045]        // -> [continueId <= 0x00000000]
[01:24:47.045]      deviceID =   Read32(0x41C40004);
[01:24:47.045]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:47.045]        // -> [deviceID <= 0x2BB8802F]
[01:24:47.045]      version = deviceID >> 28;
[01:24:47.045]        // -> [version <= 0x00000002]
[01:24:47.045]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:47.045]        // -> [partNum <= 0x0000BB88]
[01:24:47.045]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:47.045]        // -> [manuf <= 0x00000017]
[01:24:47.045]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:47.045]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:47.045]      isProduction = (version > 0);
[01:24:47.045]        // -> [isProduction <= 0x00000001]
[01:24:47.045]    </block>
[01:24:47.045]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:47.045]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:47.045]        // =>  FALSE
[01:24:47.045]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:47.045]    </control>
[01:24:47.045]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:47.045]      // if-block "continueId == 4"
[01:24:47.045]        // =>  FALSE
[01:24:47.045]      // skip if-block "continueId == 4"
[01:24:47.055]    </control>
[01:24:47.055]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:47.055]      // if-block "!isProduction"
[01:24:47.055]        // =>  FALSE
[01:24:47.055]      // skip if-block "!isProduction"
[01:24:47.055]    </control>
[01:24:47.055]  </sequence>
[01:24:47.055]  
[01:25:19.221]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:25:19.221]  
[01:25:19.221]  <debugvars>
[01:25:19.221]    // Pre-defined
[01:25:19.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:25:19.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:25:19.221]    __dp=0x00000000
[01:25:19.221]    __ap=0x00000000
[01:25:19.221]    __traceout=0x00000000      (Trace Disabled)
[01:25:19.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:25:19.221]    __FlashAddr=0x00000000
[01:25:19.221]    __FlashLen=0x00000000
[01:25:19.221]    __FlashArg=0x00000000
[01:25:19.221]    __FlashOp=0x00000000
[01:25:19.221]    __Result=0x00000000
[01:25:19.221]  </debugvars>
[01:25:19.221]  
[01:25:19.221]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:25:19.221]    <block atomic="false" info="">
[01:25:19.221]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:25:19.221]        // -> [isSWJ <= 0x00000001]
[01:25:19.221]      __var hasDormant = __protocol & 0x00020000;
[01:25:19.221]        // -> [hasDormant <= 0x00000000]
[01:25:19.221]      __var protType   = __protocol & 0x0000FFFF;
[01:25:19.221]        // -> [protType <= 0x00000002]
[01:25:19.221]    </block>
[01:25:19.221]    <control if="protType == 1" while="" timeout="0" info="">
[01:25:19.221]      // if-block "protType == 1"
[01:25:19.221]        // =>  FALSE
[01:25:19.221]      // skip if-block "protType == 1"
[01:25:19.221]    </control>
[01:25:19.221]    <control if="protType == 2" while="" timeout="0" info="">
[01:25:19.221]      // if-block "protType == 2"
[01:25:19.221]        // =>  TRUE
[01:25:19.221]      <control if="isSWJ" while="" timeout="0" info="">
[01:25:19.221]        // if-block "isSWJ"
[01:25:19.221]          // =>  TRUE
[01:25:19.221]        <control if="hasDormant" while="" timeout="0" info="">
[01:25:19.221]          // if-block "hasDormant"
[01:25:19.221]            // =>  FALSE
[01:25:19.221]          // skip if-block "hasDormant"
[01:25:19.221]        </control>
[01:25:19.221]        <control if="!hasDormant" while="" timeout="0" info="">
[01:25:19.221]          // if-block "!hasDormant"
[01:25:19.221]            // =>  TRUE
[01:25:19.221]          <block atomic="false" info="">
[01:25:19.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:25:19.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:25:19.232]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:25:19.235]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:25:19.235]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:25:19.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:25:19.236]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:25:19.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:25:19.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:25:19.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:25:19.236]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:25:19.241]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:25:19.241]          </block>
[01:25:19.241]          // end if-block "!hasDormant"
[01:25:19.241]        </control>
[01:25:19.241]        // end if-block "isSWJ"
[01:25:19.241]      </control>
[01:25:19.241]      <control if="!isSWJ" while="" timeout="0" info="">
[01:25:19.241]        // if-block "!isSWJ"
[01:25:19.241]          // =>  FALSE
[01:25:19.241]        // skip if-block "!isSWJ"
[01:25:19.241]      </control>
[01:25:19.241]      <block atomic="false" info="">
[01:25:19.241]        ReadDP(0x0);
[01:25:19.244]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:25:19.244]      </block>
[01:25:19.244]      // end if-block "protType == 2"
[01:25:19.244]    </control>
[01:25:19.244]  </sequence>
[01:25:19.244]  
[01:25:19.244]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:25:19.244]  
[01:25:19.244]  <debugvars>
[01:25:19.244]    // Pre-defined
[01:25:19.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:25:19.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:25:19.244]    __dp=0x00000000
[01:25:19.244]    __ap=0x00000000
[01:25:19.244]    __traceout=0x00000000      (Trace Disabled)
[01:25:19.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:25:19.244]    __FlashAddr=0x00000000
[01:25:19.244]    __FlashLen=0x00000000
[01:25:19.244]    __FlashArg=0x00000000
[01:25:19.244]    __FlashOp=0x00000000
[01:25:19.244]    __Result=0x00000000
[01:25:19.244]  </debugvars>
[01:25:19.244]  
[01:25:19.244]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:25:19.244]    <block atomic="false" info="">
[01:25:19.244]      __var SW_DP_ABORT       = 0x0;
[01:25:19.244]        // -> [SW_DP_ABORT <= 0x00000000]
[01:25:19.244]      __var DP_CTRL_STAT      = 0x4;
[01:25:19.251]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:25:19.251]      __var DP_SELECT         = 0x8;
[01:25:19.251]        // -> [DP_SELECT <= 0x00000008]
[01:25:19.251]      __var powered_down      = 0;
[01:25:19.251]        // -> [powered_down <= 0x00000000]
[01:25:19.251]      WriteDP(DP_SELECT, 0x00000000);
[01:25:19.252]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:25:19.252]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:25:19.252]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:25:19.252]        // -> [powered_down <= 0x00000001]
[01:25:19.252]    </block>
[01:25:19.252]    <control if="powered_down" while="" timeout="0" info="">
[01:25:19.252]      // if-block "powered_down"
[01:25:19.252]        // =>  TRUE
[01:25:19.252]      <block atomic="false" info="">
[01:25:19.252]        Message(0, "Debug/System power-up request sent");
[01:25:19.252]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:25:19.252]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:25:19.252]      </block>
[01:25:19.252]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:25:19.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:25:19.261]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:25:19.261]        // while-condition  =>  FALSE
[01:25:19.261]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:25:19.261]      </control>
[01:25:19.261]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:25:19.261]        // if-block "(__protocol & 0xFFFF) == 1"
[01:25:19.261]          // =>  FALSE
[01:25:19.261]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:25:19.261]      </control>
[01:25:19.261]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:25:19.261]        // if-block "(__protocol & 0xFFFF) == 2"
[01:25:19.261]          // =>  TRUE
[01:25:19.261]        <block atomic="false" info="">
[01:25:19.261]          Message(0, "executing SWD power up");
[01:25:19.264]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:25:19.264]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:25:19.264]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:25:19.264]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:25:19.264]        </block>
[01:25:19.264]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:25:19.264]      </control>
[01:25:19.264]      // end if-block "powered_down"
[01:25:19.264]    </control>
[01:25:19.264]    <block atomic="false" info="">
[01:25:19.264]      __var DEBUG_PORT_VAL    = 0;
[01:25:19.264]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:25:19.264]      __var ACCESS_POINT_VAL  = 0;
[01:25:19.264]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:25:19.264]      __ap = 1; 
[01:25:19.264]        // -> [__ap <= 0x00000001]
[01:25:19.264]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:25:19.273]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:25:19.273]      __ap = 4;
[01:25:19.274]        // -> [__ap <= 0x00000004]
[01:25:19.274]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:25:19.274]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:25:19.274]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:25:19.274]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:25:19.274]    </block>
[01:25:19.274]    <block atomic="false" info="">
[01:25:19.274]      __var nReset = 0x80;
[01:25:19.274]        // -> [nReset <= 0x00000080]
[01:25:19.274]      __var canReadPins = 0;
[01:25:19.274]        // -> [canReadPins <= 0x00000000]
[01:25:19.274]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:25:19.274]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:25:19.274]        // -> [canReadPins <= 0x00000001]
[01:25:19.274]    </block>
[01:25:19.274]    <control if="" while="1" timeout="200" info="">
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.274]      // while-condition  =>  TRUE
[01:25:19.274]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.282]      // while "1"  (timeout="200")
[01:25:19.282]      // while-condition  =>  TRUE
[01:25:19.292]      // while "1"  (timeout="200")
[01:25:19.292]      // while  =>  TIMEOUT
[01:25:19.292]      // end while "1"
[01:25:19.292]    </control>
[01:25:19.292]    <control if="canReadPins" while="" timeout="0" info="">
[01:25:19.292]      // if-block "canReadPins"
[01:25:19.292]        // =>  TRUE
[01:25:19.292]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:25:19.292]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:25:19.292]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:25:19.292]        // while-condition  =>  FALSE
[01:25:19.292]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:25:19.292]      </control>
[01:25:19.292]      // end if-block "canReadPins"
[01:25:19.292]    </control>
[01:25:19.292]    <control if="!canReadPins" while="" timeout="0" info="">
[01:25:19.292]      // if-block "!canReadPins"
[01:25:19.292]        // =>  FALSE
[01:25:19.292]      // skip if-block "!canReadPins"
[01:25:19.292]    </control>
[01:25:19.292]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:25:19.292]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:25:19.292]        // =>  TRUE
[01:25:19.292]      <block atomic="false" info="">
[01:25:19.292]        WriteAP(0x00, 0x190008);
[01:25:19.292]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:25:19.292]        WriteAP(0xF0, 0x01);
[01:25:19.302]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:25:19.302]      </block>
[01:25:19.302]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:25:19.302]    </control>
[01:25:19.302]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:25:19.302]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:25:19.302]        // =>  FALSE
[01:25:19.303]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:25:19.303]    </control>
[01:25:19.303]    <block atomic="false" info="">
[01:25:19.303]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:25:19.303]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:25:19.303]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:25:19.303]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:25:19.303]      __ap = 0; //lets make sure we reset the access point selection
[01:25:19.303]        // -> [__ap <= 0x00000000]
[01:25:19.303]    </block>
[01:25:19.303]  </sequence>
[01:25:19.303]  
[01:25:19.334]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:25:19.334]  
[01:25:19.334]  <debugvars>
[01:25:19.334]    // Pre-defined
[01:25:19.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:25:19.334]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:25:19.334]    __dp=0x00000000
[01:25:19.334]    __ap=0x00000000
[01:25:19.334]    __traceout=0x00000000      (Trace Disabled)
[01:25:19.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:25:19.334]    __FlashAddr=0x00000000
[01:25:19.334]    __FlashLen=0x00000000
[01:25:19.334]    __FlashArg=0x00000000
[01:25:19.334]    __FlashOp=0x00000000
[01:25:19.334]    __Result=0x00000000
[01:25:19.334]  </debugvars>
[01:25:19.334]  
[01:25:19.334]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:25:19.334]    <block atomic="false" info="">
[01:25:19.334]      __var deviceID = 0;
[01:25:19.334]        // -> [deviceID <= 0x00000000]
[01:25:19.334]      __var version = 0;
[01:25:19.334]        // -> [version <= 0x00000000]
[01:25:19.334]      __var partNum = 0;
[01:25:19.334]        // -> [partNum <= 0x00000000]
[01:25:19.334]      __var manuf = 0;
[01:25:19.334]        // -> [manuf <= 0x00000000]
[01:25:19.334]      __var isMSPM0G1X0X_G3X0X = 0;
[01:25:19.334]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:25:19.334]      __var isProduction = 0;
[01:25:19.334]        // -> [isProduction <= 0x00000000]
[01:25:19.334]      __var continueId = 0;
[01:25:19.334]        // -> [continueId <= 0x00000000]
[01:25:19.334]      deviceID =   Read32(0x41C40004);
[01:25:19.343]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:25:19.343]        // -> [deviceID <= 0x2BB8802F]
[01:25:19.343]      version = deviceID >> 28;
[01:25:19.343]        // -> [version <= 0x00000002]
[01:25:19.343]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:25:19.343]        // -> [partNum <= 0x0000BB88]
[01:25:19.343]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:25:19.343]        // -> [manuf <= 0x00000017]
[01:25:19.343]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:25:19.343]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:25:19.343]      isProduction = (version > 0);
[01:25:19.343]        // -> [isProduction <= 0x00000001]
[01:25:19.343]    </block>
[01:25:19.343]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:25:19.343]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:25:19.343]        // =>  FALSE
[01:25:19.343]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:25:19.343]    </control>
[01:25:19.343]    <control if="continueId == 4" while="" timeout="0" info="">
[01:25:19.343]      // if-block "continueId == 4"
[01:25:19.343]        // =>  FALSE
[01:25:19.343]      // skip if-block "continueId == 4"
[01:25:19.343]    </control>
[01:25:19.343]    <control if="!isProduction" while="" timeout="0" info="">
[01:25:19.343]      // if-block "!isProduction"
[01:25:19.343]        // =>  FALSE
[01:25:19.343]      // skip if-block "!isProduction"
[01:25:19.343]    </control>
[01:25:19.343]  </sequence>
[01:25:19.343]  
[01:26:16.010]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:26:16.010]  
[01:26:16.024]  <debugvars>
[01:26:16.024]    // Pre-defined
[01:26:16.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:16.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:16.024]    __dp=0x00000000
[01:26:16.024]    __ap=0x00000000
[01:26:16.024]    __traceout=0x00000000      (Trace Disabled)
[01:26:16.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:16.024]    __FlashAddr=0x00000000
[01:26:16.024]    __FlashLen=0x00000000
[01:26:16.024]    __FlashArg=0x00000000
[01:26:16.024]    __FlashOp=0x00000000
[01:26:16.024]    __Result=0x00000000
[01:26:16.024]  </debugvars>
[01:26:16.024]  
[01:26:16.024]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:26:16.024]    <block atomic="false" info="">
[01:26:16.024]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:26:16.024]        // -> [isSWJ <= 0x00000001]
[01:26:16.024]      __var hasDormant = __protocol & 0x00020000;
[01:26:16.024]        // -> [hasDormant <= 0x00000000]
[01:26:16.024]      __var protType   = __protocol & 0x0000FFFF;
[01:26:16.024]        // -> [protType <= 0x00000002]
[01:26:16.024]    </block>
[01:26:16.024]    <control if="protType == 1" while="" timeout="0" info="">
[01:26:16.024]      // if-block "protType == 1"
[01:26:16.024]        // =>  FALSE
[01:26:16.024]      // skip if-block "protType == 1"
[01:26:16.024]    </control>
[01:26:16.024]    <control if="protType == 2" while="" timeout="0" info="">
[01:26:16.024]      // if-block "protType == 2"
[01:26:16.024]        // =>  TRUE
[01:26:16.024]      <control if="isSWJ" while="" timeout="0" info="">
[01:26:16.024]        // if-block "isSWJ"
[01:26:16.024]          // =>  TRUE
[01:26:16.024]        <control if="hasDormant" while="" timeout="0" info="">
[01:26:16.024]          // if-block "hasDormant"
[01:26:16.024]            // =>  FALSE
[01:26:16.024]          // skip if-block "hasDormant"
[01:26:16.024]        </control>
[01:26:16.024]        <control if="!hasDormant" while="" timeout="0" info="">
[01:26:16.024]          // if-block "!hasDormant"
[01:26:16.024]            // =>  TRUE
[01:26:16.024]          <block atomic="false" info="">
[01:26:16.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:26:16.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:16.024]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:26:16.030]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:26:16.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:26:16.030]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:16.030]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:26:16.030]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:26:16.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:26:16.030]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:16.030]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:26:16.030]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:26:16.030]          </block>
[01:26:16.030]          // end if-block "!hasDormant"
[01:26:16.030]        </control>
[01:26:16.030]        // end if-block "isSWJ"
[01:26:16.030]      </control>
[01:26:16.030]      <control if="!isSWJ" while="" timeout="0" info="">
[01:26:16.030]        // if-block "!isSWJ"
[01:26:16.040]          // =>  FALSE
[01:26:16.040]        // skip if-block "!isSWJ"
[01:26:16.040]      </control>
[01:26:16.040]      <block atomic="false" info="">
[01:26:16.040]        ReadDP(0x0);
[01:26:16.040]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:26:16.040]      </block>
[01:26:16.040]      // end if-block "protType == 2"
[01:26:16.040]    </control>
[01:26:16.040]  </sequence>
[01:26:16.040]  
[01:26:16.040]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:26:16.040]  
[01:26:16.040]  <debugvars>
[01:26:16.040]    // Pre-defined
[01:26:16.040]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:16.040]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:16.040]    __dp=0x00000000
[01:26:16.040]    __ap=0x00000000
[01:26:16.040]    __traceout=0x00000000      (Trace Disabled)
[01:26:16.040]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:16.040]    __FlashAddr=0x00000000
[01:26:16.040]    __FlashLen=0x00000000
[01:26:16.040]    __FlashArg=0x00000000
[01:26:16.040]    __FlashOp=0x00000000
[01:26:16.040]    __Result=0x00000000
[01:26:16.040]  </debugvars>
[01:26:16.040]  
[01:26:16.040]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:26:16.040]    <block atomic="false" info="">
[01:26:16.040]      __var SW_DP_ABORT       = 0x0;
[01:26:16.040]        // -> [SW_DP_ABORT <= 0x00000000]
[01:26:16.040]      __var DP_CTRL_STAT      = 0x4;
[01:26:16.040]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:26:16.040]      __var DP_SELECT         = 0x8;
[01:26:16.040]        // -> [DP_SELECT <= 0x00000008]
[01:26:16.040]      __var powered_down      = 0;
[01:26:16.040]        // -> [powered_down <= 0x00000000]
[01:26:16.040]      WriteDP(DP_SELECT, 0x00000000);
[01:26:16.050]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:26:16.050]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:26:16.050]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:26:16.050]        // -> [powered_down <= 0x00000001]
[01:26:16.050]    </block>
[01:26:16.050]    <control if="powered_down" while="" timeout="0" info="">
[01:26:16.050]      // if-block "powered_down"
[01:26:16.050]        // =>  TRUE
[01:26:16.050]      <block atomic="false" info="">
[01:26:16.050]        Message(0, "Debug/System power-up request sent");
[01:26:16.050]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:26:16.050]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:26:16.050]      </block>
[01:26:16.050]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:26:16.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:26:16.060]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:26:16.060]        // while-condition  =>  FALSE
[01:26:16.060]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:26:16.060]      </control>
[01:26:16.060]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:26:16.060]        // if-block "(__protocol & 0xFFFF) == 1"
[01:26:16.060]          // =>  FALSE
[01:26:16.060]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:26:16.060]      </control>
[01:26:16.060]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:26:16.060]        // if-block "(__protocol & 0xFFFF) == 2"
[01:26:16.060]          // =>  TRUE
[01:26:16.060]        <block atomic="false" info="">
[01:26:16.060]          Message(0, "executing SWD power up");
[01:26:16.060]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:26:16.060]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:26:16.060]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:26:16.060]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:26:16.060]        </block>
[01:26:16.060]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:26:16.060]      </control>
[01:26:16.060]      // end if-block "powered_down"
[01:26:16.060]    </control>
[01:26:16.060]    <block atomic="false" info="">
[01:26:16.060]      __var DEBUG_PORT_VAL    = 0;
[01:26:16.060]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:26:16.060]      __var ACCESS_POINT_VAL  = 0;
[01:26:16.060]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:26:16.060]      __ap = 1; 
[01:26:16.060]        // -> [__ap <= 0x00000001]
[01:26:16.060]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:26:16.070]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:26:16.070]      __ap = 4;
[01:26:16.070]        // -> [__ap <= 0x00000004]
[01:26:16.070]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:16.070]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:26:16.070]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:26:16.070]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:16.080]    </block>
[01:26:16.083]    <block atomic="false" info="">
[01:26:16.083]      __var nReset = 0x80;
[01:26:16.083]        // -> [nReset <= 0x00000080]
[01:26:16.083]      __var canReadPins = 0;
[01:26:16.083]        // -> [canReadPins <= 0x00000000]
[01:26:16.083]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:26:16.085]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:26:16.085]        // -> [canReadPins <= 0x00000001]
[01:26:16.085]    </block>
[01:26:16.085]    <control if="" while="1" timeout="200" info="">
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.085]      // while-condition  =>  TRUE
[01:26:16.085]      // while "1"  (timeout="200")
[01:26:16.090]      // while-condition  =>  TRUE
[01:26:16.090]      // while "1"  (timeout="200")
[01:26:16.090]      // while-condition  =>  TRUE
[01:26:16.090]      // while "1"  (timeout="200")
[01:26:16.090]      // while-condition  =>  TRUE
[01:26:16.091]      // while "1"  (timeout="200")
[01:26:16.091]      // while-condition  =>  TRUE
[01:26:16.091]      // while "1"  (timeout="200")
[01:26:16.091]      // while-condition  =>  TRUE
[01:26:16.091]      // while "1"  (timeout="200")
[01:26:16.091]      // while-condition  =>  TRUE
[01:26:16.091]      // while "1"  (timeout="200")
[01:26:16.091]      // while-condition  =>  TRUE
[01:26:16.091]      // while "1"  (timeout="200")
[01:26:16.091]      // while-condition  =>  TRUE
[01:26:16.091]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.092]      // while-condition  =>  TRUE
[01:26:16.092]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.095]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.095]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.095]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.095]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.095]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.095]      // while "1"  (timeout="200")
[01:26:16.095]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.096]      // while "1"  (timeout="200")
[01:26:16.096]      // while-condition  =>  TRUE
[01:26:16.100]      // while "1"  (timeout="200")
[01:26:16.100]      // while  =>  TIMEOUT
[01:26:16.100]      // end while "1"
[01:26:16.100]    </control>
[01:26:16.100]    <control if="canReadPins" while="" timeout="0" info="">
[01:26:16.100]      // if-block "canReadPins"
[01:26:16.100]        // =>  TRUE
[01:26:16.100]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:26:16.100]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:26:16.102]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:26:16.102]        // while-condition  =>  FALSE
[01:26:16.102]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:26:16.102]      </control>
[01:26:16.102]      // end if-block "canReadPins"
[01:26:16.102]    </control>
[01:26:16.102]    <control if="!canReadPins" while="" timeout="0" info="">
[01:26:16.102]      // if-block "!canReadPins"
[01:26:16.102]        // =>  FALSE
[01:26:16.102]      // skip if-block "!canReadPins"
[01:26:16.102]    </control>
[01:26:16.102]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:26:16.102]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:16.102]        // =>  TRUE
[01:26:16.102]      <block atomic="false" info="">
[01:26:16.102]        WriteAP(0x00, 0x190008);
[01:26:16.109]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:16.109]        WriteAP(0xF0, 0x01);
[01:26:16.110]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:16.110]      </block>
[01:26:16.110]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:16.110]    </control>
[01:26:16.110]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:26:16.110]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:16.110]        // =>  FALSE
[01:26:16.110]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:16.110]    </control>
[01:26:16.110]    <block atomic="false" info="">
[01:26:16.110]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:16.110]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:26:16.110]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:26:16.110]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:16.120]      __ap = 0; //lets make sure we reset the access point selection
[01:26:16.120]        // -> [__ap <= 0x00000000]
[01:26:16.120]    </block>
[01:26:16.120]  </sequence>
[01:26:16.120]  
[01:26:16.140]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:26:16.140]  
[01:26:16.140]  <debugvars>
[01:26:16.140]    // Pre-defined
[01:26:16.140]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:16.140]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:16.140]    __dp=0x00000000
[01:26:16.140]    __ap=0x00000000
[01:26:16.140]    __traceout=0x00000000      (Trace Disabled)
[01:26:16.140]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:16.140]    __FlashAddr=0x00000000
[01:26:16.140]    __FlashLen=0x00000000
[01:26:16.140]    __FlashArg=0x00000000
[01:26:16.140]    __FlashOp=0x00000000
[01:26:16.140]    __Result=0x00000000
[01:26:16.140]  </debugvars>
[01:26:16.140]  
[01:26:16.140]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:26:16.140]    <block atomic="false" info="">
[01:26:16.140]      __var deviceID = 0;
[01:26:16.140]        // -> [deviceID <= 0x00000000]
[01:26:16.140]      __var version = 0;
[01:26:16.140]        // -> [version <= 0x00000000]
[01:26:16.140]      __var partNum = 0;
[01:26:16.140]        // -> [partNum <= 0x00000000]
[01:26:16.140]      __var manuf = 0;
[01:26:16.140]        // -> [manuf <= 0x00000000]
[01:26:16.140]      __var isMSPM0G1X0X_G3X0X = 0;
[01:26:16.140]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:26:16.140]      __var isProduction = 0;
[01:26:16.140]        // -> [isProduction <= 0x00000000]
[01:26:16.140]      __var continueId = 0;
[01:26:16.140]        // -> [continueId <= 0x00000000]
[01:26:16.140]      deviceID =   Read32(0x41C40004);
[01:26:16.154]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:26:16.154]        // -> [deviceID <= 0x2BB8802F]
[01:26:16.154]      version = deviceID >> 28;
[01:26:16.154]        // -> [version <= 0x00000002]
[01:26:16.154]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:26:16.154]        // -> [partNum <= 0x0000BB88]
[01:26:16.154]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:26:16.154]        // -> [manuf <= 0x00000017]
[01:26:16.154]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:26:16.154]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:26:16.154]      isProduction = (version > 0);
[01:26:16.154]        // -> [isProduction <= 0x00000001]
[01:26:16.154]    </block>
[01:26:16.154]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:26:16.154]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:26:16.154]        // =>  FALSE
[01:26:16.154]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:26:16.154]    </control>
[01:26:16.154]    <control if="continueId == 4" while="" timeout="0" info="">
[01:26:16.154]      // if-block "continueId == 4"
[01:26:16.154]        // =>  FALSE
[01:26:16.154]      // skip if-block "continueId == 4"
[01:26:16.154]    </control>
[01:26:16.154]    <control if="!isProduction" while="" timeout="0" info="">
[01:26:16.154]      // if-block "!isProduction"
[01:26:16.154]        // =>  FALSE
[01:26:16.154]      // skip if-block "!isProduction"
[01:26:16.154]    </control>
[01:26:16.154]  </sequence>
[01:26:16.154]  
[01:26:21.589]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:26:21.589]  
[01:26:21.598]  <debugvars>
[01:26:21.598]    // Pre-defined
[01:26:21.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:21.598]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:26:21.598]    __dp=0x00000000
[01:26:21.598]    __ap=0x00000000
[01:26:21.598]    __traceout=0x00000000      (Trace Disabled)
[01:26:21.598]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:21.598]    __FlashAddr=0x00000000
[01:26:21.599]    __FlashLen=0x00000000
[01:26:21.599]    __FlashArg=0x00000000
[01:26:21.599]    __FlashOp=0x00000000
[01:26:21.599]    __Result=0x00000000
[01:26:21.599]  </debugvars>
[01:26:21.599]  
[01:26:21.599]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:26:21.599]    <block atomic="false" info="">
[01:26:21.599]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:26:21.599]        // -> [isSWJ <= 0x00000001]
[01:26:21.599]      __var hasDormant = __protocol & 0x00020000;
[01:26:21.600]        // -> [hasDormant <= 0x00000000]
[01:26:21.600]      __var protType   = __protocol & 0x0000FFFF;
[01:26:21.600]        // -> [protType <= 0x00000002]
[01:26:21.600]    </block>
[01:26:21.600]    <control if="protType == 1" while="" timeout="0" info="">
[01:26:21.600]      // if-block "protType == 1"
[01:26:21.600]        // =>  FALSE
[01:26:21.600]      // skip if-block "protType == 1"
[01:26:21.600]    </control>
[01:26:21.600]    <control if="protType == 2" while="" timeout="0" info="">
[01:26:21.600]      // if-block "protType == 2"
[01:26:21.600]        // =>  TRUE
[01:26:21.600]      <control if="isSWJ" while="" timeout="0" info="">
[01:26:21.600]        // if-block "isSWJ"
[01:26:21.600]          // =>  TRUE
[01:26:21.600]        <control if="hasDormant" while="" timeout="0" info="">
[01:26:21.600]          // if-block "hasDormant"
[01:26:21.600]            // =>  FALSE
[01:26:21.600]          // skip if-block "hasDormant"
[01:26:21.600]        </control>
[01:26:21.600]        <control if="!hasDormant" while="" timeout="0" info="">
[01:26:21.600]          // if-block "!hasDormant"
[01:26:21.600]            // =>  TRUE
[01:26:21.600]          <block atomic="false" info="">
[01:26:21.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:26:21.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:21.609]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:26:21.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:26:21.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:26:21.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:21.609]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:26:21.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:26:21.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:26:21.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:21.619]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:26:21.622]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:26:21.622]          </block>
[01:26:21.622]          // end if-block "!hasDormant"
[01:26:21.622]        </control>
[01:26:21.622]        // end if-block "isSWJ"
[01:26:21.622]      </control>
[01:26:21.622]      <control if="!isSWJ" while="" timeout="0" info="">
[01:26:21.622]        // if-block "!isSWJ"
[01:26:21.622]          // =>  FALSE
[01:26:21.622]        // skip if-block "!isSWJ"
[01:26:21.622]      </control>
[01:26:21.622]      <block atomic="false" info="">
[01:26:21.622]        ReadDP(0x0);
[01:26:21.622]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:26:21.622]      </block>
[01:26:21.622]      // end if-block "protType == 2"
[01:26:21.622]    </control>
[01:26:21.622]  </sequence>
[01:26:21.622]  
[01:26:21.631]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:26:21.631]  
[01:26:21.631]  <debugvars>
[01:26:21.631]    // Pre-defined
[01:26:21.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:21.631]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:26:21.631]    __dp=0x00000000
[01:26:21.631]    __ap=0x00000000
[01:26:21.631]    __traceout=0x00000000      (Trace Disabled)
[01:26:21.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:21.631]    __FlashAddr=0x00000000
[01:26:21.631]    __FlashLen=0x00000000
[01:26:21.631]    __FlashArg=0x00000000
[01:26:21.631]    __FlashOp=0x00000000
[01:26:21.631]    __Result=0x00000000
[01:26:21.631]  </debugvars>
[01:26:21.631]  
[01:26:21.631]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:26:21.631]    <block atomic="false" info="">
[01:26:21.631]      __var SW_DP_ABORT       = 0x0;
[01:26:21.634]        // -> [SW_DP_ABORT <= 0x00000000]
[01:26:21.634]      __var DP_CTRL_STAT      = 0x4;
[01:26:21.634]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:26:21.634]      __var DP_SELECT         = 0x8;
[01:26:21.634]        // -> [DP_SELECT <= 0x00000008]
[01:26:21.634]      __var powered_down      = 0;
[01:26:21.634]        // -> [powered_down <= 0x00000000]
[01:26:21.634]      WriteDP(DP_SELECT, 0x00000000);
[01:26:21.634]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:26:21.634]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:26:21.640]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:26:21.640]        // -> [powered_down <= 0x00000001]
[01:26:21.640]    </block>
[01:26:21.640]    <control if="powered_down" while="" timeout="0" info="">
[01:26:21.640]      // if-block "powered_down"
[01:26:21.640]        // =>  TRUE
[01:26:21.640]      <block atomic="false" info="">
[01:26:21.640]        Message(0, "Debug/System power-up request sent");
[01:26:21.640]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:26:21.646]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:26:21.646]      </block>
[01:26:21.646]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:26:21.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:26:21.652]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:26:21.652]        // while-condition  =>  FALSE
[01:26:21.652]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:26:21.652]      </control>
[01:26:21.652]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:26:21.652]        // if-block "(__protocol & 0xFFFF) == 1"
[01:26:21.652]          // =>  FALSE
[01:26:21.652]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:26:21.652]      </control>
[01:26:21.652]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:26:21.652]        // if-block "(__protocol & 0xFFFF) == 2"
[01:26:21.652]          // =>  TRUE
[01:26:21.652]        <block atomic="false" info="">
[01:26:21.652]          Message(0, "executing SWD power up");
[01:26:21.658]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:26:21.661]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:26:21.661]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:26:21.662]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:26:21.664]        </block>
[01:26:21.664]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:26:21.664]      </control>
[01:26:21.664]      // end if-block "powered_down"
[01:26:21.664]    </control>
[01:26:21.664]    <block atomic="false" info="">
[01:26:21.664]      __var DEBUG_PORT_VAL    = 0;
[01:26:21.664]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:26:21.665]      __var ACCESS_POINT_VAL  = 0;
[01:26:21.665]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:26:21.665]      __ap = 1; 
[01:26:21.665]        // -> [__ap <= 0x00000001]
[01:26:21.665]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:26:21.666]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:26:21.666]      __ap = 4;
[01:26:21.666]        // -> [__ap <= 0x00000004]
[01:26:21.666]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:21.670]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:26:21.670]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:26:21.670]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:21.670]    </block>
[01:26:21.670]    <block atomic="false" info="">
[01:26:21.670]      __var nReset = 0x80;
[01:26:21.670]        // -> [nReset <= 0x00000080]
[01:26:21.670]      __var canReadPins = 0;
[01:26:21.670]        // -> [canReadPins <= 0x00000000]
[01:26:21.677]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:26:21.681]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:26:21.681]        // -> [canReadPins <= 0x00000001]
[01:26:21.681]    </block>
[01:26:21.681]    <control if="" while="1" timeout="200" info="">
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.681]      // while-condition  =>  TRUE
[01:26:21.681]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.686]      // while-condition  =>  TRUE
[01:26:21.686]      // while "1"  (timeout="200")
[01:26:21.691]      // while-condition  =>  TRUE
[01:26:21.691]      // while "1"  (timeout="200")
[01:26:21.691]      // while  =>  TIMEOUT
[01:26:21.691]      // end while "1"
[01:26:21.691]    </control>
[01:26:21.691]    <control if="canReadPins" while="" timeout="0" info="">
[01:26:21.691]      // if-block "canReadPins"
[01:26:21.691]        // =>  TRUE
[01:26:21.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:26:21.691]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:26:21.694]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:26:21.694]        // while-condition  =>  FALSE
[01:26:21.694]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:26:21.694]      </control>
[01:26:21.694]      // end if-block "canReadPins"
[01:26:21.694]    </control>
[01:26:21.694]    <control if="!canReadPins" while="" timeout="0" info="">
[01:26:21.694]      // if-block "!canReadPins"
[01:26:21.694]        // =>  FALSE
[01:26:21.694]      // skip if-block "!canReadPins"
[01:26:21.694]    </control>
[01:26:21.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:26:21.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:21.694]        // =>  TRUE
[01:26:21.694]      <block atomic="false" info="">
[01:26:21.694]        WriteAP(0x00, 0x190008);
[01:26:21.694]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:21.694]        WriteAP(0xF0, 0x01);
[01:26:21.703]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:21.703]      </block>
[01:26:21.703]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:21.703]    </control>
[01:26:21.703]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:26:21.703]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:21.703]        // =>  FALSE
[01:26:21.703]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:21.703]    </control>
[01:26:21.703]    <block atomic="false" info="">
[01:26:21.703]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:21.703]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:26:21.703]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:26:21.703]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:21.712]      __ap = 0; //lets make sure we reset the access point selection
[01:26:21.712]        // -> [__ap <= 0x00000000]
[01:26:21.712]    </block>
[01:26:21.712]  </sequence>
[01:26:21.712]  
[01:26:21.743]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:26:21.743]  
[01:26:21.743]  <debugvars>
[01:26:21.743]    // Pre-defined
[01:26:21.743]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:21.743]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:26:21.743]    __dp=0x00000000
[01:26:21.743]    __ap=0x00000000
[01:26:21.743]    __traceout=0x00000000      (Trace Disabled)
[01:26:21.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:21.743]    __FlashAddr=0x00000000
[01:26:21.743]    __FlashLen=0x00000000
[01:26:21.743]    __FlashArg=0x00000000
[01:26:21.743]    __FlashOp=0x00000000
[01:26:21.743]    __Result=0x00000000
[01:26:21.743]  </debugvars>
[01:26:21.743]  
[01:26:21.743]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:26:21.743]    <block atomic="false" info="">
[01:26:21.743]      __var deviceID = 0;
[01:26:21.743]        // -> [deviceID <= 0x00000000]
[01:26:21.743]      __var version = 0;
[01:26:21.743]        // -> [version <= 0x00000000]
[01:26:21.743]      __var partNum = 0;
[01:26:21.743]        // -> [partNum <= 0x00000000]
[01:26:21.743]      __var manuf = 0;
[01:26:21.743]        // -> [manuf <= 0x00000000]
[01:26:21.743]      __var isMSPM0G1X0X_G3X0X = 0;
[01:26:21.743]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:26:21.743]      __var isProduction = 0;
[01:26:21.743]        // -> [isProduction <= 0x00000000]
[01:26:21.743]      __var continueId = 0;
[01:26:21.743]        // -> [continueId <= 0x00000000]
[01:26:21.743]      deviceID =   Read32(0x41C40004);
[01:26:21.753]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:26:21.753]        // -> [deviceID <= 0x2BB8802F]
[01:26:21.753]      version = deviceID >> 28;
[01:26:21.753]        // -> [version <= 0x00000002]
[01:26:21.753]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:26:21.753]        // -> [partNum <= 0x0000BB88]
[01:26:21.753]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:26:21.753]        // -> [manuf <= 0x00000017]
[01:26:21.753]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:26:21.753]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:26:21.753]      isProduction = (version > 0);
[01:26:21.753]        // -> [isProduction <= 0x00000001]
[01:26:21.753]    </block>
[01:26:21.753]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:26:21.753]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:26:21.753]        // =>  FALSE
[01:26:21.753]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:26:21.753]    </control>
[01:26:21.753]    <control if="continueId == 4" while="" timeout="0" info="">
[01:26:21.753]      // if-block "continueId == 4"
[01:26:21.753]        // =>  FALSE
[01:26:21.753]      // skip if-block "continueId == 4"
[01:26:21.753]    </control>
[01:26:21.753]    <control if="!isProduction" while="" timeout="0" info="">
[01:26:21.753]      // if-block "!isProduction"
[01:26:21.753]        // =>  FALSE
[01:26:21.753]      // skip if-block "!isProduction"
[01:26:21.753]    </control>
[01:26:21.753]  </sequence>
[01:26:21.753]  
[01:26:59.444]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:26:59.444]  
[01:26:59.455]  <debugvars>
[01:26:59.455]    // Pre-defined
[01:26:59.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:59.455]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:59.455]    __dp=0x00000000
[01:26:59.455]    __ap=0x00000000
[01:26:59.455]    __traceout=0x00000000      (Trace Disabled)
[01:26:59.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:59.455]    __FlashAddr=0x00000000
[01:26:59.455]    __FlashLen=0x00000000
[01:26:59.455]    __FlashArg=0x00000000
[01:26:59.455]    __FlashOp=0x00000000
[01:26:59.455]    __Result=0x00000000
[01:26:59.455]  </debugvars>
[01:26:59.455]  
[01:26:59.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:26:59.455]    <block atomic="false" info="">
[01:26:59.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:26:59.455]        // -> [isSWJ <= 0x00000001]
[01:26:59.455]      __var hasDormant = __protocol & 0x00020000;
[01:26:59.455]        // -> [hasDormant <= 0x00000000]
[01:26:59.455]      __var protType   = __protocol & 0x0000FFFF;
[01:26:59.455]        // -> [protType <= 0x00000002]
[01:26:59.455]    </block>
[01:26:59.455]    <control if="protType == 1" while="" timeout="0" info="">
[01:26:59.455]      // if-block "protType == 1"
[01:26:59.455]        // =>  FALSE
[01:26:59.455]      // skip if-block "protType == 1"
[01:26:59.455]    </control>
[01:26:59.455]    <control if="protType == 2" while="" timeout="0" info="">
[01:26:59.455]      // if-block "protType == 2"
[01:26:59.455]        // =>  TRUE
[01:26:59.455]      <control if="isSWJ" while="" timeout="0" info="">
[01:26:59.455]        // if-block "isSWJ"
[01:26:59.455]          // =>  TRUE
[01:26:59.455]        <control if="hasDormant" while="" timeout="0" info="">
[01:26:59.455]          // if-block "hasDormant"
[01:26:59.455]            // =>  FALSE
[01:26:59.455]          // skip if-block "hasDormant"
[01:26:59.455]        </control>
[01:26:59.455]        <control if="!hasDormant" while="" timeout="0" info="">
[01:26:59.455]          // if-block "!hasDormant"
[01:26:59.455]            // =>  TRUE
[01:26:59.455]          <block atomic="false" info="">
[01:26:59.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:26:59.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:59.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:26:59.462]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:26:59.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:26:59.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:59.464]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:26:59.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:26:59.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:26:59.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:26:59.464]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:26:59.464]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:26:59.464]          </block>
[01:26:59.464]          // end if-block "!hasDormant"
[01:26:59.464]        </control>
[01:26:59.464]        // end if-block "isSWJ"
[01:26:59.464]      </control>
[01:26:59.464]      <control if="!isSWJ" while="" timeout="0" info="">
[01:26:59.464]        // if-block "!isSWJ"
[01:26:59.464]          // =>  FALSE
[01:26:59.464]        // skip if-block "!isSWJ"
[01:26:59.464]      </control>
[01:26:59.464]      <block atomic="false" info="">
[01:26:59.464]        ReadDP(0x0);
[01:26:59.482]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:26:59.482]      </block>
[01:26:59.482]      // end if-block "protType == 2"
[01:26:59.482]    </control>
[01:26:59.482]  </sequence>
[01:26:59.482]  
[01:26:59.482]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:26:59.482]  
[01:26:59.482]  <debugvars>
[01:26:59.482]    // Pre-defined
[01:26:59.482]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:59.482]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:59.482]    __dp=0x00000000
[01:26:59.482]    __ap=0x00000000
[01:26:59.482]    __traceout=0x00000000      (Trace Disabled)
[01:26:59.482]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:59.482]    __FlashAddr=0x00000000
[01:26:59.482]    __FlashLen=0x00000000
[01:26:59.482]    __FlashArg=0x00000000
[01:26:59.482]    __FlashOp=0x00000000
[01:26:59.482]    __Result=0x00000000
[01:26:59.482]  </debugvars>
[01:26:59.482]  
[01:26:59.482]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:26:59.482]    <block atomic="false" info="">
[01:26:59.482]      __var SW_DP_ABORT       = 0x0;
[01:26:59.482]        // -> [SW_DP_ABORT <= 0x00000000]
[01:26:59.482]      __var DP_CTRL_STAT      = 0x4;
[01:26:59.482]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:26:59.482]      __var DP_SELECT         = 0x8;
[01:26:59.482]        // -> [DP_SELECT <= 0x00000008]
[01:26:59.482]      __var powered_down      = 0;
[01:26:59.482]        // -> [powered_down <= 0x00000000]
[01:26:59.482]      WriteDP(DP_SELECT, 0x00000000);
[01:26:59.492]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:26:59.492]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:26:59.492]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:26:59.492]        // -> [powered_down <= 0x00000001]
[01:26:59.492]    </block>
[01:26:59.492]    <control if="powered_down" while="" timeout="0" info="">
[01:26:59.492]      // if-block "powered_down"
[01:26:59.492]        // =>  TRUE
[01:26:59.492]      <block atomic="false" info="">
[01:26:59.492]        Message(0, "Debug/System power-up request sent");
[01:26:59.492]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:26:59.492]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:26:59.492]      </block>
[01:26:59.492]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:26:59.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:26:59.502]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:26:59.504]        // while-condition  =>  FALSE
[01:26:59.504]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:26:59.504]      </control>
[01:26:59.504]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:26:59.504]        // if-block "(__protocol & 0xFFFF) == 1"
[01:26:59.504]          // =>  FALSE
[01:26:59.504]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:26:59.504]      </control>
[01:26:59.504]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:26:59.504]        // if-block "(__protocol & 0xFFFF) == 2"
[01:26:59.504]          // =>  TRUE
[01:26:59.504]        <block atomic="false" info="">
[01:26:59.504]          Message(0, "executing SWD power up");
[01:26:59.504]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:26:59.504]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:26:59.504]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:26:59.504]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:26:59.504]        </block>
[01:26:59.504]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:26:59.504]      </control>
[01:26:59.504]      // end if-block "powered_down"
[01:26:59.504]    </control>
[01:26:59.504]    <block atomic="false" info="">
[01:26:59.504]      __var DEBUG_PORT_VAL    = 0;
[01:26:59.504]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:26:59.504]      __var ACCESS_POINT_VAL  = 0;
[01:26:59.504]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:26:59.504]      __ap = 1; 
[01:26:59.504]        // -> [__ap <= 0x00000001]
[01:26:59.504]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:26:59.515]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:26:59.515]      __ap = 4;
[01:26:59.515]        // -> [__ap <= 0x00000004]
[01:26:59.515]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:59.515]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:26:59.515]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:26:59.515]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:59.515]    </block>
[01:26:59.515]    <block atomic="false" info="">
[01:26:59.515]      __var nReset = 0x80;
[01:26:59.515]        // -> [nReset <= 0x00000080]
[01:26:59.515]      __var canReadPins = 0;
[01:26:59.515]        // -> [canReadPins <= 0x00000000]
[01:26:59.515]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:26:59.523]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:26:59.523]        // -> [canReadPins <= 0x00000001]
[01:26:59.523]    </block>
[01:26:59.523]    <control if="" while="1" timeout="200" info="">
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.523]      // while "1"  (timeout="200")
[01:26:59.523]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.533]      // while "1"  (timeout="200")
[01:26:59.533]      // while-condition  =>  TRUE
[01:26:59.543]      // while "1"  (timeout="200")
[01:26:59.543]      // while  =>  TIMEOUT
[01:26:59.543]      // end while "1"
[01:26:59.543]    </control>
[01:26:59.543]    <control if="canReadPins" while="" timeout="0" info="">
[01:26:59.543]      // if-block "canReadPins"
[01:26:59.543]        // =>  TRUE
[01:26:59.543]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:26:59.543]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:26:59.544]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:26:59.544]        // while-condition  =>  FALSE
[01:26:59.544]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:26:59.544]      </control>
[01:26:59.544]      // end if-block "canReadPins"
[01:26:59.544]    </control>
[01:26:59.544]    <control if="!canReadPins" while="" timeout="0" info="">
[01:26:59.544]      // if-block "!canReadPins"
[01:26:59.544]        // =>  FALSE
[01:26:59.544]      // skip if-block "!canReadPins"
[01:26:59.544]    </control>
[01:26:59.544]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:26:59.544]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:59.544]        // =>  TRUE
[01:26:59.544]      <block atomic="false" info="">
[01:26:59.544]        WriteAP(0x00, 0x190008);
[01:26:59.553]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:59.553]        WriteAP(0xF0, 0x01);
[01:26:59.555]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:26:59.555]      </block>
[01:26:59.555]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:26:59.555]    </control>
[01:26:59.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:26:59.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:59.555]        // =>  FALSE
[01:26:59.555]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:26:59.555]    </control>
[01:26:59.555]    <block atomic="false" info="">
[01:26:59.555]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:26:59.555]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:26:59.555]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:26:59.555]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:26:59.555]      __ap = 0; //lets make sure we reset the access point selection
[01:26:59.555]        // -> [__ap <= 0x00000000]
[01:26:59.555]    </block>
[01:26:59.555]  </sequence>
[01:26:59.555]  
[01:26:59.585]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:26:59.585]  
[01:26:59.585]  <debugvars>
[01:26:59.585]    // Pre-defined
[01:26:59.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:26:59.585]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:26:59.585]    __dp=0x00000000
[01:26:59.585]    __ap=0x00000000
[01:26:59.585]    __traceout=0x00000000      (Trace Disabled)
[01:26:59.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:26:59.585]    __FlashAddr=0x00000000
[01:26:59.585]    __FlashLen=0x00000000
[01:26:59.585]    __FlashArg=0x00000000
[01:26:59.585]    __FlashOp=0x00000000
[01:26:59.585]    __Result=0x00000000
[01:26:59.585]  </debugvars>
[01:26:59.585]  
[01:26:59.585]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:26:59.585]    <block atomic="false" info="">
[01:26:59.585]      __var deviceID = 0;
[01:26:59.585]        // -> [deviceID <= 0x00000000]
[01:26:59.585]      __var version = 0;
[01:26:59.585]        // -> [version <= 0x00000000]
[01:26:59.585]      __var partNum = 0;
[01:26:59.585]        // -> [partNum <= 0x00000000]
[01:26:59.585]      __var manuf = 0;
[01:26:59.585]        // -> [manuf <= 0x00000000]
[01:26:59.585]      __var isMSPM0G1X0X_G3X0X = 0;
[01:26:59.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:26:59.585]      __var isProduction = 0;
[01:26:59.585]        // -> [isProduction <= 0x00000000]
[01:26:59.585]      __var continueId = 0;
[01:26:59.585]        // -> [continueId <= 0x00000000]
[01:26:59.585]      deviceID =   Read32(0x41C40004);
[01:26:59.595]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:26:59.595]        // -> [deviceID <= 0x2BB8802F]
[01:26:59.595]      version = deviceID >> 28;
[01:26:59.595]        // -> [version <= 0x00000002]
[01:26:59.595]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:26:59.595]        // -> [partNum <= 0x0000BB88]
[01:26:59.595]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:26:59.595]        // -> [manuf <= 0x00000017]
[01:26:59.595]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:26:59.595]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:26:59.595]      isProduction = (version > 0);
[01:26:59.595]        // -> [isProduction <= 0x00000001]
[01:26:59.595]    </block>
[01:26:59.595]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:26:59.595]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:26:59.595]        // =>  FALSE
[01:26:59.595]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:26:59.595]    </control>
[01:26:59.595]    <control if="continueId == 4" while="" timeout="0" info="">
[01:26:59.595]      // if-block "continueId == 4"
[01:26:59.595]        // =>  FALSE
[01:26:59.595]      // skip if-block "continueId == 4"
[01:26:59.595]    </control>
[01:26:59.595]    <control if="!isProduction" while="" timeout="0" info="">
[01:26:59.595]      // if-block "!isProduction"
[01:26:59.595]        // =>  FALSE
[01:26:59.595]      // skip if-block "!isProduction"
[01:26:59.595]    </control>
[01:26:59.595]  </sequence>
[01:26:59.595]  
[01:27:05.190]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:27:05.190]  
[01:27:05.207]  <debugvars>
[01:27:05.207]    // Pre-defined
[01:27:05.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:05.207]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:27:05.207]    __dp=0x00000000
[01:27:05.207]    __ap=0x00000000
[01:27:05.207]    __traceout=0x00000000      (Trace Disabled)
[01:27:05.207]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:05.207]    __FlashAddr=0x00000000
[01:27:05.207]    __FlashLen=0x00000000
[01:27:05.207]    __FlashArg=0x00000000
[01:27:05.207]    __FlashOp=0x00000000
[01:27:05.207]    __Result=0x00000000
[01:27:05.207]  </debugvars>
[01:27:05.207]  
[01:27:05.207]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:27:05.207]    <block atomic="false" info="">
[01:27:05.207]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:27:05.207]        // -> [isSWJ <= 0x00000001]
[01:27:05.207]      __var hasDormant = __protocol & 0x00020000;
[01:27:05.207]        // -> [hasDormant <= 0x00000000]
[01:27:05.207]      __var protType   = __protocol & 0x0000FFFF;
[01:27:05.207]        // -> [protType <= 0x00000002]
[01:27:05.207]    </block>
[01:27:05.207]    <control if="protType == 1" while="" timeout="0" info="">
[01:27:05.207]      // if-block "protType == 1"
[01:27:05.207]        // =>  FALSE
[01:27:05.207]      // skip if-block "protType == 1"
[01:27:05.207]    </control>
[01:27:05.207]    <control if="protType == 2" while="" timeout="0" info="">
[01:27:05.207]      // if-block "protType == 2"
[01:27:05.207]        // =>  TRUE
[01:27:05.207]      <control if="isSWJ" while="" timeout="0" info="">
[01:27:05.207]        // if-block "isSWJ"
[01:27:05.207]          // =>  TRUE
[01:27:05.207]        <control if="hasDormant" while="" timeout="0" info="">
[01:27:05.207]          // if-block "hasDormant"
[01:27:05.207]            // =>  FALSE
[01:27:05.207]          // skip if-block "hasDormant"
[01:27:05.211]        </control>
[01:27:05.211]        <control if="!hasDormant" while="" timeout="0" info="">
[01:27:05.211]          // if-block "!hasDormant"
[01:27:05.211]            // =>  TRUE
[01:27:05.211]          <block atomic="false" info="">
[01:27:05.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:27:05.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:05.212]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:27:05.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:27:05.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:27:05.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:05.212]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:27:05.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:27:05.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:27:05.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:05.221]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:27:05.221]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:27:05.221]          </block>
[01:27:05.221]          // end if-block "!hasDormant"
[01:27:05.221]        </control>
[01:27:05.221]        // end if-block "isSWJ"
[01:27:05.221]      </control>
[01:27:05.221]      <control if="!isSWJ" while="" timeout="0" info="">
[01:27:05.221]        // if-block "!isSWJ"
[01:27:05.221]          // =>  FALSE
[01:27:05.221]        // skip if-block "!isSWJ"
[01:27:05.221]      </control>
[01:27:05.221]      <block atomic="false" info="">
[01:27:05.221]        ReadDP(0x0);
[01:27:05.227]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:27:05.227]      </block>
[01:27:05.227]      // end if-block "protType == 2"
[01:27:05.227]    </control>
[01:27:05.227]  </sequence>
[01:27:05.227]  
[01:27:05.232]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:27:05.232]  
[01:27:05.232]  <debugvars>
[01:27:05.232]    // Pre-defined
[01:27:05.232]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:05.232]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:27:05.232]    __dp=0x00000000
[01:27:05.232]    __ap=0x00000000
[01:27:05.232]    __traceout=0x00000000      (Trace Disabled)
[01:27:05.232]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:05.232]    __FlashAddr=0x00000000
[01:27:05.232]    __FlashLen=0x00000000
[01:27:05.232]    __FlashArg=0x00000000
[01:27:05.232]    __FlashOp=0x00000000
[01:27:05.232]    __Result=0x00000000
[01:27:05.232]  </debugvars>
[01:27:05.232]  
[01:27:05.232]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:27:05.232]    <block atomic="false" info="">
[01:27:05.232]      __var SW_DP_ABORT       = 0x0;
[01:27:05.232]        // -> [SW_DP_ABORT <= 0x00000000]
[01:27:05.232]      __var DP_CTRL_STAT      = 0x4;
[01:27:05.232]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:27:05.232]      __var DP_SELECT         = 0x8;
[01:27:05.232]        // -> [DP_SELECT <= 0x00000008]
[01:27:05.232]      __var powered_down      = 0;
[01:27:05.232]        // -> [powered_down <= 0x00000000]
[01:27:05.232]      WriteDP(DP_SELECT, 0x00000000);
[01:27:05.235]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:27:05.235]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:27:05.235]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:27:05.235]        // -> [powered_down <= 0x00000001]
[01:27:05.235]    </block>
[01:27:05.235]    <control if="powered_down" while="" timeout="0" info="">
[01:27:05.235]      // if-block "powered_down"
[01:27:05.235]        // =>  TRUE
[01:27:05.235]      <block atomic="false" info="">
[01:27:05.235]        Message(0, "Debug/System power-up request sent");
[01:27:05.244]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:27:05.244]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:27:05.244]      </block>
[01:27:05.244]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:27:05.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:27:05.248]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:27:05.248]        // while-condition  =>  FALSE
[01:27:05.248]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:27:05.248]      </control>
[01:27:05.248]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:27:05.248]        // if-block "(__protocol & 0xFFFF) == 1"
[01:27:05.248]          // =>  FALSE
[01:27:05.248]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:27:05.248]      </control>
[01:27:05.248]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:27:05.248]        // if-block "(__protocol & 0xFFFF) == 2"
[01:27:05.248]          // =>  TRUE
[01:27:05.251]        <block atomic="false" info="">
[01:27:05.251]          Message(0, "executing SWD power up");
[01:27:05.252]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:27:05.257]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:27:05.257]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:27:05.257]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:27:05.257]        </block>
[01:27:05.257]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:27:05.257]      </control>
[01:27:05.257]      // end if-block "powered_down"
[01:27:05.257]    </control>
[01:27:05.257]    <block atomic="false" info="">
[01:27:05.257]      __var DEBUG_PORT_VAL    = 0;
[01:27:05.257]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:27:05.257]      __var ACCESS_POINT_VAL  = 0;
[01:27:05.257]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:27:05.257]      __ap = 1; 
[01:27:05.261]        // -> [__ap <= 0x00000001]
[01:27:05.261]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:27:05.263]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:27:05.263]      __ap = 4;
[01:27:05.263]        // -> [__ap <= 0x00000004]
[01:27:05.263]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:27:05.272]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:27:05.272]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:27:05.272]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:27:05.275]    </block>
[01:27:05.275]    <block atomic="false" info="">
[01:27:05.275]      __var nReset = 0x80;
[01:27:05.275]        // -> [nReset <= 0x00000080]
[01:27:05.275]      __var canReadPins = 0;
[01:27:05.277]        // -> [canReadPins <= 0x00000000]
[01:27:05.277]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:27:05.278]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:27:05.278]        // -> [canReadPins <= 0x00000001]
[01:27:05.278]    </block>
[01:27:05.278]    <control if="" while="1" timeout="200" info="">
[01:27:05.278]      // while "1"  (timeout="200")
[01:27:05.278]      // while-condition  =>  TRUE
[01:27:05.278]      // while "1"  (timeout="200")
[01:27:05.279]      // while-condition  =>  TRUE
[01:27:05.279]      // while "1"  (timeout="200")
[01:27:05.279]      // while-condition  =>  TRUE
[01:27:05.279]      // while "1"  (timeout="200")
[01:27:05.279]      // while-condition  =>  TRUE
[01:27:05.279]      // while "1"  (timeout="200")
[01:27:05.279]      // while-condition  =>  TRUE
[01:27:05.279]      // while "1"  (timeout="200")
[01:27:05.279]      // while-condition  =>  TRUE
[01:27:05.279]      // while "1"  (timeout="200")
[01:27:05.279]      // while-condition  =>  TRUE
[01:27:05.279]      // while "1"  (timeout="200")
[01:27:05.281]      // while-condition  =>  TRUE
[01:27:05.281]      // while "1"  (timeout="200")
[01:27:05.281]      // while-condition  =>  TRUE
[01:27:05.281]      // while "1"  (timeout="200")
[01:27:05.281]      // while-condition  =>  TRUE
[01:27:05.281]      // while "1"  (timeout="200")
[01:27:05.281]      // while-condition  =>  TRUE
[01:27:05.281]      // while "1"  (timeout="200")
[01:27:05.281]      // while-condition  =>  TRUE
[01:27:05.281]      // while "1"  (timeout="200")
[01:27:05.281]      // while-condition  =>  TRUE
[01:27:05.281]      // while "1"  (timeout="200")
[01:27:05.282]      // while-condition  =>  TRUE
[01:27:05.282]      // while "1"  (timeout="200")
[01:27:05.282]      // while-condition  =>  TRUE
[01:27:05.282]      // while "1"  (timeout="200")
[01:27:05.282]      // while-condition  =>  TRUE
[01:27:05.282]      // while "1"  (timeout="200")
[01:27:05.282]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.283]      // while-condition  =>  TRUE
[01:27:05.283]      // while "1"  (timeout="200")
[01:27:05.284]      // while-condition  =>  TRUE
[01:27:05.284]      // while "1"  (timeout="200")
[01:27:05.284]      // while-condition  =>  TRUE
[01:27:05.284]      // while "1"  (timeout="200")
[01:27:05.284]      // while-condition  =>  TRUE
[01:27:05.284]      // while "1"  (timeout="200")
[01:27:05.284]      // while-condition  =>  TRUE
[01:27:05.284]      // while "1"  (timeout="200")
[01:27:05.284]      // while-condition  =>  TRUE
[01:27:05.284]      // while "1"  (timeout="200")
[01:27:05.284]      // while-condition  =>  TRUE
[01:27:05.284]      // while "1"  (timeout="200")
[01:27:05.285]      // while-condition  =>  TRUE
[01:27:05.285]      // while "1"  (timeout="200")
[01:27:05.285]      // while  =>  TIMEOUT
[01:27:05.285]      // end while "1"
[01:27:05.285]    </control>
[01:27:05.285]    <control if="canReadPins" while="" timeout="0" info="">
[01:27:05.285]      // if-block "canReadPins"
[01:27:05.285]        // =>  TRUE
[01:27:05.285]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:27:05.285]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:27:05.289]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:27:05.289]        // while-condition  =>  FALSE
[01:27:05.289]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:27:05.289]      </control>
[01:27:05.289]      // end if-block "canReadPins"
[01:27:05.289]    </control>
[01:27:05.289]    <control if="!canReadPins" while="" timeout="0" info="">
[01:27:05.289]      // if-block "!canReadPins"
[01:27:05.289]        // =>  FALSE
[01:27:05.289]      // skip if-block "!canReadPins"
[01:27:05.289]    </control>
[01:27:05.289]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:27:05.289]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:27:05.291]        // =>  TRUE
[01:27:05.291]      <block atomic="false" info="">
[01:27:05.291]        WriteAP(0x00, 0x190008);
[01:27:05.293]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:27:05.293]        WriteAP(0xF0, 0x01);
[01:27:05.298]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:27:05.298]      </block>
[01:27:05.298]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:27:05.298]    </control>
[01:27:05.298]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:27:05.298]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:27:05.298]        // =>  FALSE
[01:27:05.298]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:27:05.298]    </control>
[01:27:05.298]    <block atomic="false" info="">
[01:27:05.298]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:27:05.302]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:27:05.302]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:27:05.302]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:27:05.305]      __ap = 0; //lets make sure we reset the access point selection
[01:27:05.307]        // -> [__ap <= 0x00000000]
[01:27:05.307]    </block>
[01:27:05.307]  </sequence>
[01:27:05.307]  
[01:27:05.343]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:27:05.343]  
[01:27:05.343]  <debugvars>
[01:27:05.343]    // Pre-defined
[01:27:05.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:05.343]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:27:05.343]    __dp=0x00000000
[01:27:05.343]    __ap=0x00000000
[01:27:05.343]    __traceout=0x00000000      (Trace Disabled)
[01:27:05.343]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:05.343]    __FlashAddr=0x00000000
[01:27:05.343]    __FlashLen=0x00000000
[01:27:05.343]    __FlashArg=0x00000000
[01:27:05.343]    __FlashOp=0x00000000
[01:27:05.343]    __Result=0x00000000
[01:27:05.343]  </debugvars>
[01:27:05.343]  
[01:27:05.343]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:27:05.343]    <block atomic="false" info="">
[01:27:05.343]      __var deviceID = 0;
[01:27:05.343]        // -> [deviceID <= 0x00000000]
[01:27:05.343]      __var version = 0;
[01:27:05.343]        // -> [version <= 0x00000000]
[01:27:05.343]      __var partNum = 0;
[01:27:05.343]        // -> [partNum <= 0x00000000]
[01:27:05.343]      __var manuf = 0;
[01:27:05.343]        // -> [manuf <= 0x00000000]
[01:27:05.343]      __var isMSPM0G1X0X_G3X0X = 0;
[01:27:05.343]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:27:05.343]      __var isProduction = 0;
[01:27:05.343]        // -> [isProduction <= 0x00000000]
[01:27:05.343]      __var continueId = 0;
[01:27:05.343]        // -> [continueId <= 0x00000000]
[01:27:05.343]      deviceID =   Read32(0x41C40004);
[01:27:05.354]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:27:05.354]        // -> [deviceID <= 0x2BB8802F]
[01:27:05.354]      version = deviceID >> 28;
[01:27:05.354]        // -> [version <= 0x00000002]
[01:27:05.354]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:27:05.354]        // -> [partNum <= 0x0000BB88]
[01:27:05.354]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:27:05.354]        // -> [manuf <= 0x00000017]
[01:27:05.354]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:27:05.354]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:27:05.354]      isProduction = (version > 0);
[01:27:05.354]        // -> [isProduction <= 0x00000001]
[01:27:05.354]    </block>
[01:27:05.354]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:27:05.354]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:27:05.354]        // =>  FALSE
[01:27:05.354]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:27:05.354]    </control>
[01:27:05.354]    <control if="continueId == 4" while="" timeout="0" info="">
[01:27:05.354]      // if-block "continueId == 4"
[01:27:05.354]        // =>  FALSE
[01:27:05.354]      // skip if-block "continueId == 4"
[01:27:05.354]    </control>
[01:27:05.354]    <control if="!isProduction" while="" timeout="0" info="">
[01:27:05.354]      // if-block "!isProduction"
[01:27:05.354]        // =>  FALSE
[01:27:05.354]      // skip if-block "!isProduction"
[01:27:05.354]    </control>
[01:27:05.354]  </sequence>
[01:27:05.354]  
[01:29:14.693]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:14.693]  
[01:29:14.693]  <debugvars>
[01:29:14.693]    // Pre-defined
[01:29:14.693]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:14.693]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:14.693]    __dp=0x00000000
[01:29:14.693]    __ap=0x00000000
[01:29:14.693]    __traceout=0x00000000      (Trace Disabled)
[01:29:14.693]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:14.693]    __FlashAddr=0x00000000
[01:29:14.693]    __FlashLen=0x00000000
[01:29:14.693]    __FlashArg=0x00000000
[01:29:14.693]    __FlashOp=0x00000000
[01:29:14.693]    __Result=0x00000000
[01:29:14.693]  </debugvars>
[01:29:14.693]  
[01:29:14.693]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:14.693]    <block atomic="false" info="">
[01:29:14.693]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:14.693]        // -> [isSWJ <= 0x00000001]
[01:29:14.693]      __var hasDormant = __protocol & 0x00020000;
[01:29:14.693]        // -> [hasDormant <= 0x00000000]
[01:29:14.693]      __var protType   = __protocol & 0x0000FFFF;
[01:29:14.693]        // -> [protType <= 0x00000002]
[01:29:14.693]    </block>
[01:29:14.693]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:14.693]      // if-block "protType == 1"
[01:29:14.693]        // =>  FALSE
[01:29:14.693]      // skip if-block "protType == 1"
[01:29:14.693]    </control>
[01:29:14.693]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:14.693]      // if-block "protType == 2"
[01:29:14.693]        // =>  TRUE
[01:29:14.693]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:14.693]        // if-block "isSWJ"
[01:29:14.693]          // =>  TRUE
[01:29:14.693]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:14.693]          // if-block "hasDormant"
[01:29:14.693]            // =>  FALSE
[01:29:14.693]          // skip if-block "hasDormant"
[01:29:14.693]        </control>
[01:29:14.693]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:14.693]          // if-block "!hasDormant"
[01:29:14.693]            // =>  TRUE
[01:29:14.693]          <block atomic="false" info="">
[01:29:14.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:14.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:14.699]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:14.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:14.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:14.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:14.703]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:14.703]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:14.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:14.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:14.703]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:14.703]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:14.703]          </block>
[01:29:14.703]          // end if-block "!hasDormant"
[01:29:14.703]        </control>
[01:29:14.703]        // end if-block "isSWJ"
[01:29:14.703]      </control>
[01:29:14.703]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:14.703]        // if-block "!isSWJ"
[01:29:14.703]          // =>  FALSE
[01:29:14.703]        // skip if-block "!isSWJ"
[01:29:14.703]      </control>
[01:29:14.703]      <block atomic="false" info="">
[01:29:14.703]        ReadDP(0x0);
[01:29:14.711]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:14.711]      </block>
[01:29:14.711]      // end if-block "protType == 2"
[01:29:14.711]    </control>
[01:29:14.711]  </sequence>
[01:29:14.711]  
[01:29:14.713]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:14.713]  
[01:29:14.713]  <debugvars>
[01:29:14.713]    // Pre-defined
[01:29:14.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:14.713]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:14.713]    __dp=0x00000000
[01:29:14.713]    __ap=0x00000000
[01:29:14.713]    __traceout=0x00000000      (Trace Disabled)
[01:29:14.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:14.713]    __FlashAddr=0x00000000
[01:29:14.713]    __FlashLen=0x00000000
[01:29:14.713]    __FlashArg=0x00000000
[01:29:14.713]    __FlashOp=0x00000000
[01:29:14.713]    __Result=0x00000000
[01:29:14.713]  </debugvars>
[01:29:14.713]  
[01:29:14.713]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:14.713]    <block atomic="false" info="">
[01:29:14.713]      __var SW_DP_ABORT       = 0x0;
[01:29:14.713]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:14.713]      __var DP_CTRL_STAT      = 0x4;
[01:29:14.713]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:14.713]      __var DP_SELECT         = 0x8;
[01:29:14.713]        // -> [DP_SELECT <= 0x00000008]
[01:29:14.713]      __var powered_down      = 0;
[01:29:14.717]        // -> [powered_down <= 0x00000000]
[01:29:14.717]      WriteDP(DP_SELECT, 0x00000000);
[01:29:14.717]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:14.717]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:14.717]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:14.717]        // -> [powered_down <= 0x00000001]
[01:29:14.717]    </block>
[01:29:14.717]    <control if="powered_down" while="" timeout="0" info="">
[01:29:14.717]      // if-block "powered_down"
[01:29:14.717]        // =>  TRUE
[01:29:14.724]      <block atomic="false" info="">
[01:29:14.724]        Message(0, "Debug/System power-up request sent");
[01:29:14.724]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:14.727]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:14.727]      </block>
[01:29:14.727]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:14.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:14.727]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:14.727]        // while-condition  =>  FALSE
[01:29:14.727]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:14.727]      </control>
[01:29:14.727]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:14.727]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:14.727]          // =>  FALSE
[01:29:14.727]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:14.727]      </control>
[01:29:14.727]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:14.727]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:14.727]          // =>  TRUE
[01:29:14.727]        <block atomic="false" info="">
[01:29:14.727]          Message(0, "executing SWD power up");
[01:29:14.727]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:14.734]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:14.734]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:14.734]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:14.734]        </block>
[01:29:14.734]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:14.734]      </control>
[01:29:14.734]      // end if-block "powered_down"
[01:29:14.734]    </control>
[01:29:14.734]    <block atomic="false" info="">
[01:29:14.734]      __var DEBUG_PORT_VAL    = 0;
[01:29:14.734]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:14.734]      __var ACCESS_POINT_VAL  = 0;
[01:29:14.734]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:14.734]      __ap = 1; 
[01:29:14.734]        // -> [__ap <= 0x00000001]
[01:29:14.734]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:14.746]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:14.746]      __ap = 4;
[01:29:14.746]        // -> [__ap <= 0x00000004]
[01:29:14.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:14.749]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:14.749]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:14.749]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:14.755]    </block>
[01:29:14.755]    <block atomic="false" info="">
[01:29:14.755]      __var nReset = 0x80;
[01:29:14.755]        // -> [nReset <= 0x00000080]
[01:29:14.755]      __var canReadPins = 0;
[01:29:14.755]        // -> [canReadPins <= 0x00000000]
[01:29:14.755]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:14.757]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:14.757]        // -> [canReadPins <= 0x00000001]
[01:29:14.758]    </block>
[01:29:14.758]    <control if="" while="1" timeout="200" info="">
[01:29:14.758]      // while "1"  (timeout="200")
[01:29:14.758]      // while-condition  =>  TRUE
[01:29:14.758]      // while "1"  (timeout="200")
[01:29:14.758]      // while-condition  =>  TRUE
[01:29:14.758]      // while "1"  (timeout="200")
[01:29:14.758]      // while-condition  =>  TRUE
[01:29:14.758]      // while "1"  (timeout="200")
[01:29:14.758]      // while-condition  =>  TRUE
[01:29:14.758]      // while "1"  (timeout="200")
[01:29:14.758]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.759]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.759]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.759]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.759]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.759]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.759]      // while-condition  =>  TRUE
[01:29:14.759]      // while "1"  (timeout="200")
[01:29:14.760]      // while-condition  =>  TRUE
[01:29:14.760]      // while "1"  (timeout="200")
[01:29:14.760]      // while-condition  =>  TRUE
[01:29:14.760]      // while "1"  (timeout="200")
[01:29:14.760]      // while-condition  =>  TRUE
[01:29:14.760]      // while "1"  (timeout="200")
[01:29:14.760]      // while-condition  =>  TRUE
[01:29:14.760]      // while "1"  (timeout="200")
[01:29:14.760]      // while-condition  =>  TRUE
[01:29:14.760]      // while "1"  (timeout="200")
[01:29:14.760]      // while-condition  =>  TRUE
[01:29:14.762]      // while "1"  (timeout="200")
[01:29:14.762]      // while-condition  =>  TRUE
[01:29:14.762]      // while "1"  (timeout="200")
[01:29:14.762]      // while-condition  =>  TRUE
[01:29:14.762]      // while "1"  (timeout="200")
[01:29:14.762]      // while-condition  =>  TRUE
[01:29:14.762]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.763]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.763]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.763]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.763]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.763]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.763]      // while "1"  (timeout="200")
[01:29:14.763]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.764]      // while-condition  =>  TRUE
[01:29:14.764]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.766]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.766]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.766]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.766]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.766]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.766]      // while "1"  (timeout="200")
[01:29:14.766]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.768]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.768]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.768]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.768]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.768]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.768]      // while-condition  =>  TRUE
[01:29:14.768]      // while "1"  (timeout="200")
[01:29:14.769]      // while-condition  =>  TRUE
[01:29:14.769]      // while "1"  (timeout="200")
[01:29:14.769]      // while  =>  TIMEOUT
[01:29:14.769]      // end while "1"
[01:29:14.769]    </control>
[01:29:14.769]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:14.769]      // if-block "canReadPins"
[01:29:14.769]        // =>  TRUE
[01:29:14.769]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:14.769]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:14.771]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:14.771]        // while-condition  =>  FALSE
[01:29:14.771]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:14.771]      </control>
[01:29:14.771]      // end if-block "canReadPins"
[01:29:14.771]    </control>
[01:29:14.771]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:14.771]      // if-block "!canReadPins"
[01:29:14.771]        // =>  FALSE
[01:29:14.771]      // skip if-block "!canReadPins"
[01:29:14.771]    </control>
[01:29:14.771]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:14.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:14.773]        // =>  TRUE
[01:29:14.773]      <block atomic="false" info="">
[01:29:14.773]        WriteAP(0x00, 0x190008);
[01:29:14.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:14.775]        WriteAP(0xF0, 0x01);
[01:29:14.784]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:14.784]      </block>
[01:29:14.784]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:14.784]    </control>
[01:29:14.784]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:14.784]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:14.784]        // =>  FALSE
[01:29:14.784]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:14.784]    </control>
[01:29:14.784]    <block atomic="false" info="">
[01:29:14.784]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:14.794]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:14.794]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:14.794]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:14.794]      __ap = 0; //lets make sure we reset the access point selection
[01:29:14.794]        // -> [__ap <= 0x00000000]
[01:29:14.794]    </block>
[01:29:14.794]  </sequence>
[01:29:14.794]  
[01:29:14.825]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:14.825]  
[01:29:14.825]  <debugvars>
[01:29:14.825]    // Pre-defined
[01:29:14.825]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:14.825]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:14.825]    __dp=0x00000000
[01:29:14.825]    __ap=0x00000000
[01:29:14.825]    __traceout=0x00000000      (Trace Disabled)
[01:29:14.825]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:14.825]    __FlashAddr=0x00000000
[01:29:14.825]    __FlashLen=0x00000000
[01:29:14.825]    __FlashArg=0x00000000
[01:29:14.825]    __FlashOp=0x00000000
[01:29:14.825]    __Result=0x00000000
[01:29:14.825]  </debugvars>
[01:29:14.825]  
[01:29:14.825]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:14.825]    <block atomic="false" info="">
[01:29:14.825]      __var deviceID = 0;
[01:29:14.825]        // -> [deviceID <= 0x00000000]
[01:29:14.825]      __var version = 0;
[01:29:14.825]        // -> [version <= 0x00000000]
[01:29:14.825]      __var partNum = 0;
[01:29:14.825]        // -> [partNum <= 0x00000000]
[01:29:14.825]      __var manuf = 0;
[01:29:14.825]        // -> [manuf <= 0x00000000]
[01:29:14.825]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:14.825]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:14.835]      __var isProduction = 0;
[01:29:14.835]        // -> [isProduction <= 0x00000000]
[01:29:14.835]      __var continueId = 0;
[01:29:14.835]        // -> [continueId <= 0x00000000]
[01:29:14.835]      deviceID =   Read32(0x41C40004);
[01:29:14.835]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:14.835]        // -> [deviceID <= 0x2BB8802F]
[01:29:14.835]      version = deviceID >> 28;
[01:29:14.835]        // -> [version <= 0x00000002]
[01:29:14.835]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:14.835]        // -> [partNum <= 0x0000BB88]
[01:29:14.835]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:14.835]        // -> [manuf <= 0x00000017]
[01:29:14.835]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:14.835]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:14.835]      isProduction = (version > 0);
[01:29:14.835]        // -> [isProduction <= 0x00000001]
[01:29:14.835]    </block>
[01:29:14.835]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:14.835]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:14.835]        // =>  FALSE
[01:29:14.835]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:14.835]    </control>
[01:29:14.835]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:14.845]      // if-block "continueId == 4"
[01:29:14.845]        // =>  FALSE
[01:29:14.845]      // skip if-block "continueId == 4"
[01:29:14.846]    </control>
[01:29:14.846]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:14.846]      // if-block "!isProduction"
[01:29:14.846]        // =>  FALSE
[01:29:14.846]      // skip if-block "!isProduction"
[01:29:14.846]    </control>
[01:29:14.846]  </sequence>
[01:29:14.846]  
[01:29:20.494]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:20.494]  
[01:29:20.503]  <debugvars>
[01:29:20.503]    // Pre-defined
[01:29:20.503]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:20.503]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:20.503]    __dp=0x00000000
[01:29:20.503]    __ap=0x00000000
[01:29:20.503]    __traceout=0x00000000      (Trace Disabled)
[01:29:20.503]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:20.503]    __FlashAddr=0x00000000
[01:29:20.503]    __FlashLen=0x00000000
[01:29:20.503]    __FlashArg=0x00000000
[01:29:20.503]    __FlashOp=0x00000000
[01:29:20.503]    __Result=0x00000000
[01:29:20.503]  </debugvars>
[01:29:20.503]  
[01:29:20.503]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:20.503]    <block atomic="false" info="">
[01:29:20.503]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:20.503]        // -> [isSWJ <= 0x00000001]
[01:29:20.503]      __var hasDormant = __protocol & 0x00020000;
[01:29:20.503]        // -> [hasDormant <= 0x00000000]
[01:29:20.506]      __var protType   = __protocol & 0x0000FFFF;
[01:29:20.506]        // -> [protType <= 0x00000002]
[01:29:20.506]    </block>
[01:29:20.506]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:20.506]      // if-block "protType == 1"
[01:29:20.506]        // =>  FALSE
[01:29:20.506]      // skip if-block "protType == 1"
[01:29:20.506]    </control>
[01:29:20.506]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:20.506]      // if-block "protType == 2"
[01:29:20.507]        // =>  TRUE
[01:29:20.507]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:20.507]        // if-block "isSWJ"
[01:29:20.507]          // =>  TRUE
[01:29:20.507]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:20.507]          // if-block "hasDormant"
[01:29:20.507]            // =>  FALSE
[01:29:20.507]          // skip if-block "hasDormant"
[01:29:20.507]        </control>
[01:29:20.508]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:20.508]          // if-block "!hasDormant"
[01:29:20.508]            // =>  TRUE
[01:29:20.508]          <block atomic="false" info="">
[01:29:20.508]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:20.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:20.509]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:20.511]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:20.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:20.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:20.513]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:20.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:20.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:20.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:20.517]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:20.518]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:20.518]          </block>
[01:29:20.518]          // end if-block "!hasDormant"
[01:29:20.518]        </control>
[01:29:20.518]        // end if-block "isSWJ"
[01:29:20.518]      </control>
[01:29:20.518]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:20.518]        // if-block "!isSWJ"
[01:29:20.518]          // =>  FALSE
[01:29:20.525]        // skip if-block "!isSWJ"
[01:29:20.525]      </control>
[01:29:20.525]      <block atomic="false" info="">
[01:29:20.525]        ReadDP(0x0);
[01:29:20.527]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:20.527]      </block>
[01:29:20.528]      // end if-block "protType == 2"
[01:29:20.528]    </control>
[01:29:20.528]  </sequence>
[01:29:20.528]  
[01:29:20.531]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:20.531]  
[01:29:20.531]  <debugvars>
[01:29:20.531]    // Pre-defined
[01:29:20.531]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:20.531]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:20.531]    __dp=0x00000000
[01:29:20.531]    __ap=0x00000000
[01:29:20.531]    __traceout=0x00000000      (Trace Disabled)
[01:29:20.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:20.531]    __FlashAddr=0x00000000
[01:29:20.531]    __FlashLen=0x00000000
[01:29:20.531]    __FlashArg=0x00000000
[01:29:20.531]    __FlashOp=0x00000000
[01:29:20.531]    __Result=0x00000000
[01:29:20.531]  </debugvars>
[01:29:20.531]  
[01:29:20.531]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:20.531]    <block atomic="false" info="">
[01:29:20.531]      __var SW_DP_ABORT       = 0x0;
[01:29:20.533]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:20.533]      __var DP_CTRL_STAT      = 0x4;
[01:29:20.533]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:20.533]      __var DP_SELECT         = 0x8;
[01:29:20.533]        // -> [DP_SELECT <= 0x00000008]
[01:29:20.533]      __var powered_down      = 0;
[01:29:20.533]        // -> [powered_down <= 0x00000000]
[01:29:20.533]      WriteDP(DP_SELECT, 0x00000000);
[01:29:20.535]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:20.535]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:20.537]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:20.537]        // -> [powered_down <= 0x00000001]
[01:29:20.537]    </block>
[01:29:20.537]    <control if="powered_down" while="" timeout="0" info="">
[01:29:20.537]      // if-block "powered_down"
[01:29:20.537]        // =>  TRUE
[01:29:20.538]      <block atomic="false" info="">
[01:29:20.538]        Message(0, "Debug/System power-up request sent");
[01:29:20.539]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:20.539]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:20.543]      </block>
[01:29:20.543]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:20.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:20.543]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:20.543]        // while-condition  =>  FALSE
[01:29:20.543]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:20.543]      </control>
[01:29:20.543]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:20.543]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:20.543]          // =>  FALSE
[01:29:20.546]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:20.546]      </control>
[01:29:20.546]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:20.546]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:20.546]          // =>  TRUE
[01:29:20.546]        <block atomic="false" info="">
[01:29:20.546]          Message(0, "executing SWD power up");
[01:29:20.547]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:20.550]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:20.550]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:20.553]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:20.553]        </block>
[01:29:20.553]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:20.553]      </control>
[01:29:20.553]      // end if-block "powered_down"
[01:29:20.553]    </control>
[01:29:20.553]    <block atomic="false" info="">
[01:29:20.553]      __var DEBUG_PORT_VAL    = 0;
[01:29:20.553]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:20.553]      __var ACCESS_POINT_VAL  = 0;
[01:29:20.553]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:20.553]      __ap = 1; 
[01:29:20.553]        // -> [__ap <= 0x00000001]
[01:29:20.553]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:20.557]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:20.557]      __ap = 4;
[01:29:20.557]        // -> [__ap <= 0x00000004]
[01:29:20.557]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:20.563]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:20.563]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:20.564]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:20.565]    </block>
[01:29:20.565]    <block atomic="false" info="">
[01:29:20.565]      __var nReset = 0x80;
[01:29:20.565]        // -> [nReset <= 0x00000080]
[01:29:20.565]      __var canReadPins = 0;
[01:29:20.565]        // -> [canReadPins <= 0x00000000]
[01:29:20.565]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:20.568]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:20.568]        // -> [canReadPins <= 0x00000001]
[01:29:20.568]    </block>
[01:29:20.568]    <control if="" while="1" timeout="200" info="">
[01:29:20.568]      // while "1"  (timeout="200")
[01:29:20.568]      // while-condition  =>  TRUE
[01:29:20.568]      // while "1"  (timeout="200")
[01:29:20.568]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.571]      // while-condition  =>  TRUE
[01:29:20.571]      // while "1"  (timeout="200")
[01:29:20.576]      // while-condition  =>  TRUE
[01:29:20.576]      // while "1"  (timeout="200")
[01:29:20.576]      // while-condition  =>  TRUE
[01:29:20.576]      // while "1"  (timeout="200")
[01:29:20.576]      // while-condition  =>  TRUE
[01:29:20.576]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.577]      // while-condition  =>  TRUE
[01:29:20.577]      // while "1"  (timeout="200")
[01:29:20.578]      // while-condition  =>  TRUE
[01:29:20.578]      // while "1"  (timeout="200")
[01:29:20.578]      // while-condition  =>  TRUE
[01:29:20.578]      // while "1"  (timeout="200")
[01:29:20.578]      // while-condition  =>  TRUE
[01:29:20.578]      // while "1"  (timeout="200")
[01:29:20.578]      // while-condition  =>  TRUE
[01:29:20.578]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.579]      // while-condition  =>  TRUE
[01:29:20.579]      // while "1"  (timeout="200")
[01:29:20.583]      // while-condition  =>  TRUE
[01:29:20.583]      // while "1"  (timeout="200")
[01:29:20.583]      // while  =>  TIMEOUT
[01:29:20.583]      // end while "1"
[01:29:20.583]    </control>
[01:29:20.583]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:20.583]      // if-block "canReadPins"
[01:29:20.583]        // =>  TRUE
[01:29:20.583]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:20.584]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:20.585]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:20.585]        // while-condition  =>  FALSE
[01:29:20.585]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:20.585]      </control>
[01:29:20.585]      // end if-block "canReadPins"
[01:29:20.585]    </control>
[01:29:20.585]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:20.585]      // if-block "!canReadPins"
[01:29:20.585]        // =>  FALSE
[01:29:20.585]      // skip if-block "!canReadPins"
[01:29:20.585]    </control>
[01:29:20.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:20.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:20.585]        // =>  TRUE
[01:29:20.585]      <block atomic="false" info="">
[01:29:20.585]        WriteAP(0x00, 0x190008);
[01:29:20.588]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:20.588]        WriteAP(0xF0, 0x01);
[01:29:20.589]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:20.589]      </block>
[01:29:20.589]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:20.589]    </control>
[01:29:20.589]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:20.589]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:20.589]        // =>  FALSE
[01:29:20.589]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:20.589]    </control>
[01:29:20.589]    <block atomic="false" info="">
[01:29:20.589]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:20.589]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:20.589]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:20.589]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:20.598]      __ap = 0; //lets make sure we reset the access point selection
[01:29:20.598]        // -> [__ap <= 0x00000000]
[01:29:20.598]    </block>
[01:29:20.598]  </sequence>
[01:29:20.598]  
[01:29:20.633]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:20.633]  
[01:29:20.633]  <debugvars>
[01:29:20.633]    // Pre-defined
[01:29:20.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:20.633]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:20.633]    __dp=0x00000000
[01:29:20.633]    __ap=0x00000000
[01:29:20.634]    __traceout=0x00000000      (Trace Disabled)
[01:29:20.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:20.634]    __FlashAddr=0x00000000
[01:29:20.634]    __FlashLen=0x00000000
[01:29:20.634]    __FlashArg=0x00000000
[01:29:20.634]    __FlashOp=0x00000000
[01:29:20.634]    __Result=0x00000000
[01:29:20.634]  </debugvars>
[01:29:20.634]  
[01:29:20.635]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:20.635]    <block atomic="false" info="">
[01:29:20.635]      __var deviceID = 0;
[01:29:20.635]        // -> [deviceID <= 0x00000000]
[01:29:20.636]      __var version = 0;
[01:29:20.636]        // -> [version <= 0x00000000]
[01:29:20.636]      __var partNum = 0;
[01:29:20.636]        // -> [partNum <= 0x00000000]
[01:29:20.636]      __var manuf = 0;
[01:29:20.636]        // -> [manuf <= 0x00000000]
[01:29:20.636]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:20.636]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:20.636]      __var isProduction = 0;
[01:29:20.636]        // -> [isProduction <= 0x00000000]
[01:29:20.637]      __var continueId = 0;
[01:29:20.637]        // -> [continueId <= 0x00000000]
[01:29:20.637]      deviceID =   Read32(0x41C40004);
[01:29:20.647]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:20.647]        // -> [deviceID <= 0x2BB8802F]
[01:29:20.647]      version = deviceID >> 28;
[01:29:20.647]        // -> [version <= 0x00000002]
[01:29:20.647]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:20.647]        // -> [partNum <= 0x0000BB88]
[01:29:20.647]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:20.647]        // -> [manuf <= 0x00000017]
[01:29:20.647]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:20.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:20.647]      isProduction = (version > 0);
[01:29:20.647]        // -> [isProduction <= 0x00000001]
[01:29:20.647]    </block>
[01:29:20.647]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:20.647]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:20.647]        // =>  FALSE
[01:29:20.647]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:20.647]    </control>
[01:29:20.647]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:20.647]      // if-block "continueId == 4"
[01:29:20.647]        // =>  FALSE
[01:29:20.647]      // skip if-block "continueId == 4"
[01:29:20.647]    </control>
[01:29:20.647]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:20.647]      // if-block "!isProduction"
[01:29:20.653]        // =>  FALSE
[01:29:20.653]      // skip if-block "!isProduction"
[01:29:20.653]    </control>
[01:29:20.653]  </sequence>
[01:29:20.653]  
[01:30:41.391]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:30:41.391]  
[01:30:41.400]  <debugvars>
[01:30:41.400]    // Pre-defined
[01:30:41.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:41.400]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:30:41.400]    __dp=0x00000000
[01:30:41.400]    __ap=0x00000000
[01:30:41.400]    __traceout=0x00000000      (Trace Disabled)
[01:30:41.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:41.400]    __FlashAddr=0x00000000
[01:30:41.400]    __FlashLen=0x00000000
[01:30:41.400]    __FlashArg=0x00000000
[01:30:41.400]    __FlashOp=0x00000000
[01:30:41.400]    __Result=0x00000000
[01:30:41.400]  </debugvars>
[01:30:41.400]  
[01:30:41.401]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:30:41.401]    <block atomic="false" info="">
[01:30:41.401]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:30:41.401]        // -> [isSWJ <= 0x00000001]
[01:30:41.401]      __var hasDormant = __protocol & 0x00020000;
[01:30:41.401]        // -> [hasDormant <= 0x00000000]
[01:30:41.401]      __var protType   = __protocol & 0x0000FFFF;
[01:30:41.401]        // -> [protType <= 0x00000002]
[01:30:41.401]    </block>
[01:30:41.403]    <control if="protType == 1" while="" timeout="0" info="">
[01:30:41.403]      // if-block "protType == 1"
[01:30:41.403]        // =>  FALSE
[01:30:41.403]      // skip if-block "protType == 1"
[01:30:41.403]    </control>
[01:30:41.403]    <control if="protType == 2" while="" timeout="0" info="">
[01:30:41.403]      // if-block "protType == 2"
[01:30:41.403]        // =>  TRUE
[01:30:41.403]      <control if="isSWJ" while="" timeout="0" info="">
[01:30:41.403]        // if-block "isSWJ"
[01:30:41.403]          // =>  TRUE
[01:30:41.403]        <control if="hasDormant" while="" timeout="0" info="">
[01:30:41.403]          // if-block "hasDormant"
[01:30:41.403]            // =>  FALSE
[01:30:41.403]          // skip if-block "hasDormant"
[01:30:41.403]        </control>
[01:30:41.403]        <control if="!hasDormant" while="" timeout="0" info="">
[01:30:41.403]          // if-block "!hasDormant"
[01:30:41.403]            // =>  TRUE
[01:30:41.403]          <block atomic="false" info="">
[01:30:41.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:30:41.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:41.403]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:30:41.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:30:41.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:30:41.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:41.403]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:30:41.412]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:30:41.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:30:41.412]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:41.412]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:30:41.412]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:30:41.412]          </block>
[01:30:41.412]          // end if-block "!hasDormant"
[01:30:41.412]        </control>
[01:30:41.412]        // end if-block "isSWJ"
[01:30:41.412]      </control>
[01:30:41.422]      <control if="!isSWJ" while="" timeout="0" info="">
[01:30:41.422]        // if-block "!isSWJ"
[01:30:41.422]          // =>  FALSE
[01:30:41.422]        // skip if-block "!isSWJ"
[01:30:41.422]      </control>
[01:30:41.422]      <block atomic="false" info="">
[01:30:41.422]        ReadDP(0x0);
[01:30:41.422]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:30:41.422]      </block>
[01:30:41.422]      // end if-block "protType == 2"
[01:30:41.422]    </control>
[01:30:41.422]  </sequence>
[01:30:41.422]  
[01:30:41.422]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:30:41.422]  
[01:30:41.422]  <debugvars>
[01:30:41.422]    // Pre-defined
[01:30:41.422]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:41.422]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:30:41.422]    __dp=0x00000000
[01:30:41.422]    __ap=0x00000000
[01:30:41.422]    __traceout=0x00000000      (Trace Disabled)
[01:30:41.422]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:41.422]    __FlashAddr=0x00000000
[01:30:41.422]    __FlashLen=0x00000000
[01:30:41.422]    __FlashArg=0x00000000
[01:30:41.422]    __FlashOp=0x00000000
[01:30:41.422]    __Result=0x00000000
[01:30:41.422]  </debugvars>
[01:30:41.422]  
[01:30:41.422]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:30:41.422]    <block atomic="false" info="">
[01:30:41.422]      __var SW_DP_ABORT       = 0x0;
[01:30:41.422]        // -> [SW_DP_ABORT <= 0x00000000]
[01:30:41.429]      __var DP_CTRL_STAT      = 0x4;
[01:30:41.429]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:30:41.429]      __var DP_SELECT         = 0x8;
[01:30:41.429]        // -> [DP_SELECT <= 0x00000008]
[01:30:41.429]      __var powered_down      = 0;
[01:30:41.429]        // -> [powered_down <= 0x00000000]
[01:30:41.429]      WriteDP(DP_SELECT, 0x00000000);
[01:30:41.429]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:30:41.429]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:30:41.434]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:30:41.434]        // -> [powered_down <= 0x00000001]
[01:30:41.434]    </block>
[01:30:41.434]    <control if="powered_down" while="" timeout="0" info="">
[01:30:41.434]      // if-block "powered_down"
[01:30:41.434]        // =>  TRUE
[01:30:41.434]      <block atomic="false" info="">
[01:30:41.434]        Message(0, "Debug/System power-up request sent");
[01:30:41.434]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:30:41.442]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:30:41.442]      </block>
[01:30:41.442]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:30:41.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:30:41.442]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:30:41.442]        // while-condition  =>  FALSE
[01:30:41.442]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:30:41.442]      </control>
[01:30:41.442]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:30:41.442]        // if-block "(__protocol & 0xFFFF) == 1"
[01:30:41.442]          // =>  FALSE
[01:30:41.442]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:30:41.442]      </control>
[01:30:41.442]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:30:41.442]        // if-block "(__protocol & 0xFFFF) == 2"
[01:30:41.442]          // =>  TRUE
[01:30:41.442]        <block atomic="false" info="">
[01:30:41.442]          Message(0, "executing SWD power up");
[01:30:41.442]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:30:41.442]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:30:41.442]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:30:41.442]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:30:41.442]        </block>
[01:30:41.442]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:30:41.442]      </control>
[01:30:41.442]      // end if-block "powered_down"
[01:30:41.442]    </control>
[01:30:41.442]    <block atomic="false" info="">
[01:30:41.442]      __var DEBUG_PORT_VAL    = 0;
[01:30:41.442]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:30:41.442]      __var ACCESS_POINT_VAL  = 0;
[01:30:41.442]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:30:41.442]      __ap = 1; 
[01:30:41.442]        // -> [__ap <= 0x00000001]
[01:30:41.442]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:30:41.452]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:30:41.452]      __ap = 4;
[01:30:41.452]        // -> [__ap <= 0x00000004]
[01:30:41.452]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:30:41.452]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:30:41.452]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:30:41.452]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:30:41.452]    </block>
[01:30:41.452]    <block atomic="false" info="">
[01:30:41.452]      __var nReset = 0x80;
[01:30:41.452]        // -> [nReset <= 0x00000080]
[01:30:41.462]      __var canReadPins = 0;
[01:30:41.462]        // -> [canReadPins <= 0x00000000]
[01:30:41.462]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:30:41.462]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:30:41.462]        // -> [canReadPins <= 0x00000001]
[01:30:41.462]    </block>
[01:30:41.462]    <control if="" while="1" timeout="200" info="">
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.464]      // while-condition  =>  TRUE
[01:30:41.464]      // while "1"  (timeout="200")
[01:30:41.472]      // while-condition  =>  TRUE
[01:30:41.472]      // while "1"  (timeout="200")
[01:30:41.472]      // while  =>  TIMEOUT
[01:30:41.472]      // end while "1"
[01:30:41.472]    </control>
[01:30:41.472]    <control if="canReadPins" while="" timeout="0" info="">
[01:30:41.472]      // if-block "canReadPins"
[01:30:41.472]        // =>  TRUE
[01:30:41.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:30:41.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:30:41.472]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:30:41.472]        // while-condition  =>  FALSE
[01:30:41.472]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:30:41.472]      </control>
[01:30:41.472]      // end if-block "canReadPins"
[01:30:41.472]    </control>
[01:30:41.472]    <control if="!canReadPins" while="" timeout="0" info="">
[01:30:41.472]      // if-block "!canReadPins"
[01:30:41.472]        // =>  FALSE
[01:30:41.472]      // skip if-block "!canReadPins"
[01:30:41.472]    </control>
[01:30:41.472]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:30:41.472]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:30:41.472]        // =>  TRUE
[01:30:41.472]      <block atomic="false" info="">
[01:30:41.472]        WriteAP(0x00, 0x190008);
[01:30:41.472]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:30:41.472]        WriteAP(0xF0, 0x01);
[01:30:41.482]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:30:41.482]      </block>
[01:30:41.482]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:30:41.482]    </control>
[01:30:41.482]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:30:41.482]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:30:41.482]        // =>  FALSE
[01:30:41.482]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:30:41.482]    </control>
[01:30:41.482]    <block atomic="false" info="">
[01:30:41.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:30:41.482]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:30:41.482]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:30:41.482]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:30:41.482]      __ap = 0; //lets make sure we reset the access point selection
[01:30:41.482]        // -> [__ap <= 0x00000000]
[01:30:41.482]    </block>
[01:30:41.482]  </sequence>
[01:30:41.482]  
[01:30:41.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:30:41.522]  
[01:30:41.522]  <debugvars>
[01:30:41.522]    // Pre-defined
[01:30:41.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:41.522]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:30:41.522]    __dp=0x00000000
[01:30:41.522]    __ap=0x00000000
[01:30:41.522]    __traceout=0x00000000      (Trace Disabled)
[01:30:41.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:41.529]    __FlashAddr=0x00000000
[01:30:41.529]    __FlashLen=0x00000000
[01:30:41.529]    __FlashArg=0x00000000
[01:30:41.529]    __FlashOp=0x00000000
[01:30:41.529]    __Result=0x00000000
[01:30:41.529]  </debugvars>
[01:30:41.529]  
[01:30:41.529]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:30:41.529]    <block atomic="false" info="">
[01:30:41.529]      __var deviceID = 0;
[01:30:41.529]        // -> [deviceID <= 0x00000000]
[01:30:41.529]      __var version = 0;
[01:30:41.529]        // -> [version <= 0x00000000]
[01:30:41.529]      __var partNum = 0;
[01:30:41.529]        // -> [partNum <= 0x00000000]
[01:30:41.529]      __var manuf = 0;
[01:30:41.529]        // -> [manuf <= 0x00000000]
[01:30:41.529]      __var isMSPM0G1X0X_G3X0X = 0;
[01:30:41.529]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:30:41.529]      __var isProduction = 0;
[01:30:41.529]        // -> [isProduction <= 0x00000000]
[01:30:41.529]      __var continueId = 0;
[01:30:41.529]        // -> [continueId <= 0x00000000]
[01:30:41.529]      deviceID =   Read32(0x41C40004);
[01:30:41.532]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:30:41.532]        // -> [deviceID <= 0x2BB8802F]
[01:30:41.532]      version = deviceID >> 28;
[01:30:41.532]        // -> [version <= 0x00000002]
[01:30:41.532]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:30:41.532]        // -> [partNum <= 0x0000BB88]
[01:30:41.532]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:30:41.532]        // -> [manuf <= 0x00000017]
[01:30:41.532]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:30:41.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:30:41.532]      isProduction = (version > 0);
[01:30:41.532]        // -> [isProduction <= 0x00000001]
[01:30:41.532]    </block>
[01:30:41.532]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:30:41.532]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:30:41.532]        // =>  FALSE
[01:30:41.532]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:30:41.532]    </control>
[01:30:41.532]    <control if="continueId == 4" while="" timeout="0" info="">
[01:30:41.532]      // if-block "continueId == 4"
[01:30:41.542]        // =>  FALSE
[01:30:41.542]      // skip if-block "continueId == 4"
[01:30:41.542]    </control>
[01:30:41.542]    <control if="!isProduction" while="" timeout="0" info="">
[01:30:41.542]      // if-block "!isProduction"
[01:30:41.542]        // =>  FALSE
[01:30:41.542]      // skip if-block "!isProduction"
[01:30:41.542]    </control>
[01:30:41.542]  </sequence>
[01:30:41.542]  
[01:30:47.419]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:30:47.419]  
[01:30:47.419]  <debugvars>
[01:30:47.419]    // Pre-defined
[01:30:47.419]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:47.419]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:30:47.419]    __dp=0x00000000
[01:30:47.419]    __ap=0x00000000
[01:30:47.419]    __traceout=0x00000000      (Trace Disabled)
[01:30:47.419]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:47.419]    __FlashAddr=0x00000000
[01:30:47.419]    __FlashLen=0x00000000
[01:30:47.419]    __FlashArg=0x00000000
[01:30:47.419]    __FlashOp=0x00000000
[01:30:47.419]    __Result=0x00000000
[01:30:47.419]  </debugvars>
[01:30:47.419]  
[01:30:47.419]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:30:47.419]    <block atomic="false" info="">
[01:30:47.419]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:30:47.419]        // -> [isSWJ <= 0x00000001]
[01:30:47.419]      __var hasDormant = __protocol & 0x00020000;
[01:30:47.419]        // -> [hasDormant <= 0x00000000]
[01:30:47.419]      __var protType   = __protocol & 0x0000FFFF;
[01:30:47.419]        // -> [protType <= 0x00000002]
[01:30:47.419]    </block>
[01:30:47.419]    <control if="protType == 1" while="" timeout="0" info="">
[01:30:47.419]      // if-block "protType == 1"
[01:30:47.419]        // =>  FALSE
[01:30:47.419]      // skip if-block "protType == 1"
[01:30:47.419]    </control>
[01:30:47.419]    <control if="protType == 2" while="" timeout="0" info="">
[01:30:47.419]      // if-block "protType == 2"
[01:30:47.419]        // =>  TRUE
[01:30:47.419]      <control if="isSWJ" while="" timeout="0" info="">
[01:30:47.419]        // if-block "isSWJ"
[01:30:47.419]          // =>  TRUE
[01:30:47.419]        <control if="hasDormant" while="" timeout="0" info="">
[01:30:47.419]          // if-block "hasDormant"
[01:30:47.419]            // =>  FALSE
[01:30:47.419]          // skip if-block "hasDormant"
[01:30:47.419]        </control>
[01:30:47.419]        <control if="!hasDormant" while="" timeout="0" info="">
[01:30:47.419]          // if-block "!hasDormant"
[01:30:47.419]            // =>  TRUE
[01:30:47.419]          <block atomic="false" info="">
[01:30:47.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:30:47.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:47.419]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:30:47.428]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:30:47.428]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:30:47.428]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:47.428]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:30:47.428]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:30:47.428]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:30:47.436]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:30:47.436]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:30:47.436]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:30:47.436]          </block>
[01:30:47.438]          // end if-block "!hasDormant"
[01:30:47.438]        </control>
[01:30:47.438]        // end if-block "isSWJ"
[01:30:47.438]      </control>
[01:30:47.438]      <control if="!isSWJ" while="" timeout="0" info="">
[01:30:47.438]        // if-block "!isSWJ"
[01:30:47.438]          // =>  FALSE
[01:30:47.438]        // skip if-block "!isSWJ"
[01:30:47.438]      </control>
[01:30:47.438]      <block atomic="false" info="">
[01:30:47.438]        ReadDP(0x0);
[01:30:47.438]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:30:47.438]      </block>
[01:30:47.438]      // end if-block "protType == 2"
[01:30:47.438]    </control>
[01:30:47.438]  </sequence>
[01:30:47.438]  
[01:30:47.438]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:30:47.438]  
[01:30:47.438]  <debugvars>
[01:30:47.438]    // Pre-defined
[01:30:47.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:47.438]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:30:47.438]    __dp=0x00000000
[01:30:47.438]    __ap=0x00000000
[01:30:47.438]    __traceout=0x00000000      (Trace Disabled)
[01:30:47.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:47.438]    __FlashAddr=0x00000000
[01:30:47.438]    __FlashLen=0x00000000
[01:30:47.438]    __FlashArg=0x00000000
[01:30:47.438]    __FlashOp=0x00000000
[01:30:47.438]    __Result=0x00000000
[01:30:47.438]  </debugvars>
[01:30:47.438]  
[01:30:47.438]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:30:47.438]    <block atomic="false" info="">
[01:30:47.438]      __var SW_DP_ABORT       = 0x0;
[01:30:47.438]        // -> [SW_DP_ABORT <= 0x00000000]
[01:30:47.448]      __var DP_CTRL_STAT      = 0x4;
[01:30:47.448]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:30:47.448]      __var DP_SELECT         = 0x8;
[01:30:47.448]        // -> [DP_SELECT <= 0x00000008]
[01:30:47.448]      __var powered_down      = 0;
[01:30:47.448]        // -> [powered_down <= 0x00000000]
[01:30:47.448]      WriteDP(DP_SELECT, 0x00000000);
[01:30:47.450]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:30:47.450]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:30:47.450]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:30:47.450]        // -> [powered_down <= 0x00000001]
[01:30:47.450]    </block>
[01:30:47.450]    <control if="powered_down" while="" timeout="0" info="">
[01:30:47.450]      // if-block "powered_down"
[01:30:47.450]        // =>  TRUE
[01:30:47.450]      <block atomic="false" info="">
[01:30:47.450]        Message(0, "Debug/System power-up request sent");
[01:30:47.450]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:30:47.450]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:30:47.450]      </block>
[01:30:47.458]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:30:47.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:30:47.458]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:30:47.458]        // while-condition  =>  FALSE
[01:30:47.460]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:30:47.460]      </control>
[01:30:47.460]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:30:47.460]        // if-block "(__protocol & 0xFFFF) == 1"
[01:30:47.460]          // =>  FALSE
[01:30:47.460]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:30:47.460]      </control>
[01:30:47.460]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:30:47.460]        // if-block "(__protocol & 0xFFFF) == 2"
[01:30:47.460]          // =>  TRUE
[01:30:47.460]        <block atomic="false" info="">
[01:30:47.460]          Message(0, "executing SWD power up");
[01:30:47.460]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:30:47.460]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:30:47.460]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:30:47.460]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:30:47.460]        </block>
[01:30:47.468]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:30:47.468]      </control>
[01:30:47.468]      // end if-block "powered_down"
[01:30:47.468]    </control>
[01:30:47.468]    <block atomic="false" info="">
[01:30:47.468]      __var DEBUG_PORT_VAL    = 0;
[01:30:47.468]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:30:47.468]      __var ACCESS_POINT_VAL  = 0;
[01:30:47.468]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:30:47.468]      __ap = 1; 
[01:30:47.468]        // -> [__ap <= 0x00000001]
[01:30:47.468]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:30:47.468]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:30:47.468]      __ap = 4;
[01:30:47.468]        // -> [__ap <= 0x00000004]
[01:30:47.468]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:30:47.468]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:30:47.468]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:30:47.468]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:30:47.478]    </block>
[01:30:47.478]    <block atomic="false" info="">
[01:30:47.478]      __var nReset = 0x80;
[01:30:47.478]        // -> [nReset <= 0x00000080]
[01:30:47.478]      __var canReadPins = 0;
[01:30:47.478]        // -> [canReadPins <= 0x00000000]
[01:30:47.478]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:30:47.478]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:30:47.478]        // -> [canReadPins <= 0x00000001]
[01:30:47.478]    </block>
[01:30:47.478]    <control if="" while="1" timeout="200" info="">
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.478]      // while "1"  (timeout="200")
[01:30:47.478]      // while-condition  =>  TRUE
[01:30:47.488]      // while "1"  (timeout="200")
[01:30:47.488]      // while  =>  TIMEOUT
[01:30:47.488]      // end while "1"
[01:30:47.488]    </control>
[01:30:47.488]    <control if="canReadPins" while="" timeout="0" info="">
[01:30:47.488]      // if-block "canReadPins"
[01:30:47.488]        // =>  TRUE
[01:30:47.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:30:47.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:30:47.488]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:30:47.488]        // while-condition  =>  FALSE
[01:30:47.488]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:30:47.488]      </control>
[01:30:47.488]      // end if-block "canReadPins"
[01:30:47.488]    </control>
[01:30:47.488]    <control if="!canReadPins" while="" timeout="0" info="">
[01:30:47.488]      // if-block "!canReadPins"
[01:30:47.488]        // =>  FALSE
[01:30:47.488]      // skip if-block "!canReadPins"
[01:30:47.488]    </control>
[01:30:47.488]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:30:47.488]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:30:47.488]        // =>  TRUE
[01:30:47.488]      <block atomic="false" info="">
[01:30:47.488]        WriteAP(0x00, 0x190008);
[01:30:47.488]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:30:47.488]        WriteAP(0xF0, 0x01);
[01:30:47.498]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:30:47.498]      </block>
[01:30:47.498]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:30:47.498]    </control>
[01:30:47.498]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:30:47.498]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:30:47.498]        // =>  FALSE
[01:30:47.498]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:30:47.498]    </control>
[01:30:47.498]    <block atomic="false" info="">
[01:30:47.498]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:30:47.498]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:30:47.498]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:30:47.498]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:30:47.498]      __ap = 0; //lets make sure we reset the access point selection
[01:30:47.498]        // -> [__ap <= 0x00000000]
[01:30:47.498]    </block>
[01:30:47.498]  </sequence>
[01:30:47.498]  
[01:30:47.529]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:30:47.529]  
[01:30:47.529]  <debugvars>
[01:30:47.529]    // Pre-defined
[01:30:47.529]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:30:47.529]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:30:47.529]    __dp=0x00000000
[01:30:47.529]    __ap=0x00000000
[01:30:47.529]    __traceout=0x00000000      (Trace Disabled)
[01:30:47.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:30:47.529]    __FlashAddr=0x00000000
[01:30:47.529]    __FlashLen=0x00000000
[01:30:47.529]    __FlashArg=0x00000000
[01:30:47.529]    __FlashOp=0x00000000
[01:30:47.529]    __Result=0x00000000
[01:30:47.529]  </debugvars>
[01:30:47.529]  
[01:30:47.529]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:30:47.529]    <block atomic="false" info="">
[01:30:47.529]      __var deviceID = 0;
[01:30:47.529]        // -> [deviceID <= 0x00000000]
[01:30:47.529]      __var version = 0;
[01:30:47.529]        // -> [version <= 0x00000000]
[01:30:47.529]      __var partNum = 0;
[01:30:47.529]        // -> [partNum <= 0x00000000]
[01:30:47.529]      __var manuf = 0;
[01:30:47.529]        // -> [manuf <= 0x00000000]
[01:30:47.529]      __var isMSPM0G1X0X_G3X0X = 0;
[01:30:47.529]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:30:47.529]      __var isProduction = 0;
[01:30:47.529]        // -> [isProduction <= 0x00000000]
[01:30:47.529]      __var continueId = 0;
[01:30:47.529]        // -> [continueId <= 0x00000000]
[01:30:47.529]      deviceID =   Read32(0x41C40004);
[01:30:47.539]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:30:47.539]        // -> [deviceID <= 0x2BB8802F]
[01:30:47.539]      version = deviceID >> 28;
[01:30:47.539]        // -> [version <= 0x00000002]
[01:30:47.539]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:30:47.539]        // -> [partNum <= 0x0000BB88]
[01:30:47.539]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:30:47.539]        // -> [manuf <= 0x00000017]
[01:30:47.539]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:30:47.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:30:47.539]      isProduction = (version > 0);
[01:30:47.539]        // -> [isProduction <= 0x00000001]
[01:30:47.539]    </block>
[01:30:47.539]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:30:47.539]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:30:47.539]        // =>  FALSE
[01:30:47.539]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:30:47.539]    </control>
[01:30:47.539]    <control if="continueId == 4" while="" timeout="0" info="">
[01:30:47.539]      // if-block "continueId == 4"
[01:30:47.539]        // =>  FALSE
[01:30:47.539]      // skip if-block "continueId == 4"
[01:30:47.539]    </control>
[01:30:47.539]    <control if="!isProduction" while="" timeout="0" info="">
[01:30:47.539]      // if-block "!isProduction"
[01:30:47.539]        // =>  FALSE
[01:30:47.539]      // skip if-block "!isProduction"
[01:30:47.539]    </control>
[01:30:47.539]  </sequence>
[01:30:47.539]  
[01:31:27.853]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:31:27.853]  
[01:31:27.869]  <debugvars>
[01:31:27.869]    // Pre-defined
[01:31:27.869]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:27.869]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:27.869]    __dp=0x00000000
[01:31:27.869]    __ap=0x00000000
[01:31:27.869]    __traceout=0x00000000      (Trace Disabled)
[01:31:27.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:27.869]    __FlashAddr=0x00000000
[01:31:27.869]    __FlashLen=0x00000000
[01:31:27.869]    __FlashArg=0x00000000
[01:31:27.869]    __FlashOp=0x00000000
[01:31:27.869]    __Result=0x00000000
[01:31:27.869]  </debugvars>
[01:31:27.869]  
[01:31:27.869]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:31:27.869]    <block atomic="false" info="">
[01:31:27.869]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:31:27.869]        // -> [isSWJ <= 0x00000001]
[01:31:27.869]      __var hasDormant = __protocol & 0x00020000;
[01:31:27.869]        // -> [hasDormant <= 0x00000000]
[01:31:27.869]      __var protType   = __protocol & 0x0000FFFF;
[01:31:27.869]        // -> [protType <= 0x00000002]
[01:31:27.869]    </block>
[01:31:27.869]    <control if="protType == 1" while="" timeout="0" info="">
[01:31:27.869]      // if-block "protType == 1"
[01:31:27.869]        // =>  FALSE
[01:31:27.869]      // skip if-block "protType == 1"
[01:31:27.869]    </control>
[01:31:27.869]    <control if="protType == 2" while="" timeout="0" info="">
[01:31:27.869]      // if-block "protType == 2"
[01:31:27.869]        // =>  TRUE
[01:31:27.869]      <control if="isSWJ" while="" timeout="0" info="">
[01:31:27.869]        // if-block "isSWJ"
[01:31:27.869]          // =>  TRUE
[01:31:27.869]        <control if="hasDormant" while="" timeout="0" info="">
[01:31:27.869]          // if-block "hasDormant"
[01:31:27.869]            // =>  FALSE
[01:31:27.873]          // skip if-block "hasDormant"
[01:31:27.873]        </control>
[01:31:27.873]        <control if="!hasDormant" while="" timeout="0" info="">
[01:31:27.873]          // if-block "!hasDormant"
[01:31:27.874]            // =>  TRUE
[01:31:27.874]          <block atomic="false" info="">
[01:31:27.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:31:27.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:27.875]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:31:27.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:31:27.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:31:27.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:27.875]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:31:27.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:31:27.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:31:27.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:27.885]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:31:27.885]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:31:27.885]          </block>
[01:31:27.885]          // end if-block "!hasDormant"
[01:31:27.885]        </control>
[01:31:27.885]        // end if-block "isSWJ"
[01:31:27.885]      </control>
[01:31:27.885]      <control if="!isSWJ" while="" timeout="0" info="">
[01:31:27.885]        // if-block "!isSWJ"
[01:31:27.885]          // =>  FALSE
[01:31:27.885]        // skip if-block "!isSWJ"
[01:31:27.885]      </control>
[01:31:27.885]      <block atomic="false" info="">
[01:31:27.885]        ReadDP(0x0);
[01:31:27.885]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:31:27.885]      </block>
[01:31:27.885]      // end if-block "protType == 2"
[01:31:27.885]    </control>
[01:31:27.885]  </sequence>
[01:31:27.885]  
[01:31:27.885]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:31:27.885]  
[01:31:27.894]  <debugvars>
[01:31:27.894]    // Pre-defined
[01:31:27.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:27.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:27.894]    __dp=0x00000000
[01:31:27.894]    __ap=0x00000000
[01:31:27.894]    __traceout=0x00000000      (Trace Disabled)
[01:31:27.894]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:27.894]    __FlashAddr=0x00000000
[01:31:27.894]    __FlashLen=0x00000000
[01:31:27.894]    __FlashArg=0x00000000
[01:31:27.894]    __FlashOp=0x00000000
[01:31:27.894]    __Result=0x00000000
[01:31:27.894]  </debugvars>
[01:31:27.894]  
[01:31:27.894]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:31:27.894]    <block atomic="false" info="">
[01:31:27.894]      __var SW_DP_ABORT       = 0x0;
[01:31:27.894]        // -> [SW_DP_ABORT <= 0x00000000]
[01:31:27.894]      __var DP_CTRL_STAT      = 0x4;
[01:31:27.894]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:31:27.894]      __var DP_SELECT         = 0x8;
[01:31:27.894]        // -> [DP_SELECT <= 0x00000008]
[01:31:27.894]      __var powered_down      = 0;
[01:31:27.894]        // -> [powered_down <= 0x00000000]
[01:31:27.894]      WriteDP(DP_SELECT, 0x00000000);
[01:31:27.894]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:31:27.894]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:31:27.894]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:31:27.894]        // -> [powered_down <= 0x00000001]
[01:31:27.894]    </block>
[01:31:27.894]    <control if="powered_down" while="" timeout="0" info="">
[01:31:27.894]      // if-block "powered_down"
[01:31:27.894]        // =>  TRUE
[01:31:27.894]      <block atomic="false" info="">
[01:31:27.894]        Message(0, "Debug/System power-up request sent");
[01:31:27.894]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:31:27.904]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:31:27.904]      </block>
[01:31:27.904]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:31:27.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:31:27.914]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:31:27.914]        // while-condition  =>  FALSE
[01:31:27.914]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:31:27.914]      </control>
[01:31:27.914]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:31:27.914]        // if-block "(__protocol & 0xFFFF) == 1"
[01:31:27.914]          // =>  FALSE
[01:31:27.916]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:31:27.916]      </control>
[01:31:27.916]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:31:27.916]        // if-block "(__protocol & 0xFFFF) == 2"
[01:31:27.916]          // =>  TRUE
[01:31:27.916]        <block atomic="false" info="">
[01:31:27.916]          Message(0, "executing SWD power up");
[01:31:27.916]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:31:27.916]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:31:27.916]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:31:27.916]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:31:27.916]        </block>
[01:31:27.916]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:31:27.916]      </control>
[01:31:27.916]      // end if-block "powered_down"
[01:31:27.916]    </control>
[01:31:27.916]    <block atomic="false" info="">
[01:31:27.916]      __var DEBUG_PORT_VAL    = 0;
[01:31:27.916]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:31:27.916]      __var ACCESS_POINT_VAL  = 0;
[01:31:27.916]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:31:27.916]      __ap = 1; 
[01:31:27.916]        // -> [__ap <= 0x00000001]
[01:31:27.916]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:31:27.924]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:31:27.924]      __ap = 4;
[01:31:27.924]        // -> [__ap <= 0x00000004]
[01:31:27.924]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:27.924]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.930]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:31:27.930]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:27.930]    </block>
[01:31:27.930]    <block atomic="false" info="">
[01:31:27.930]      __var nReset = 0x80;
[01:31:27.930]        // -> [nReset <= 0x00000080]
[01:31:27.930]      __var canReadPins = 0;
[01:31:27.930]        // -> [canReadPins <= 0x00000000]
[01:31:27.930]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:31:27.934]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:31:27.934]        // -> [canReadPins <= 0x00000001]
[01:31:27.934]    </block>
[01:31:27.934]    <control if="" while="1" timeout="200" info="">
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.934]      // while "1"  (timeout="200")
[01:31:27.934]      // while-condition  =>  TRUE
[01:31:27.944]      // while "1"  (timeout="200")
[01:31:27.944]      // while  =>  TIMEOUT
[01:31:27.944]      // end while "1"
[01:31:27.944]    </control>
[01:31:27.944]    <control if="canReadPins" while="" timeout="0" info="">
[01:31:27.944]      // if-block "canReadPins"
[01:31:27.944]        // =>  TRUE
[01:31:27.944]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:31:27.944]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:31:27.945]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:31:27.945]        // while-condition  =>  FALSE
[01:31:27.945]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:31:27.945]      </control>
[01:31:27.945]      // end if-block "canReadPins"
[01:31:27.945]    </control>
[01:31:27.945]    <control if="!canReadPins" while="" timeout="0" info="">
[01:31:27.945]      // if-block "!canReadPins"
[01:31:27.945]        // =>  FALSE
[01:31:27.945]      // skip if-block "!canReadPins"
[01:31:27.945]    </control>
[01:31:27.945]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:31:27.945]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:27.945]        // =>  TRUE
[01:31:27.945]      <block atomic="false" info="">
[01:31:27.945]        WriteAP(0x00, 0x190008);
[01:31:27.945]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.945]        WriteAP(0xF0, 0x01);
[01:31:27.954]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.954]      </block>
[01:31:27.954]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:27.954]    </control>
[01:31:27.954]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:31:27.954]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:27.954]        // =>  FALSE
[01:31:27.954]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:27.954]    </control>
[01:31:27.954]    <block atomic="false" info="">
[01:31:27.954]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:27.954]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.954]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:31:27.954]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:27.954]      __ap = 0; //lets make sure we reset the access point selection
[01:31:27.954]        // -> [__ap <= 0x00000000]
[01:31:27.954]    </block>
[01:31:27.964]  </sequence>
[01:31:27.964]  
[01:31:27.985]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:31:27.985]  
[01:31:27.985]  <debugvars>
[01:31:27.985]    // Pre-defined
[01:31:27.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:27.985]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:27.985]    __dp=0x00000000
[01:31:27.985]    __ap=0x00000000
[01:31:27.985]    __traceout=0x00000000      (Trace Disabled)
[01:31:27.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:27.985]    __FlashAddr=0x00000000
[01:31:27.985]    __FlashLen=0x00000000
[01:31:27.985]    __FlashArg=0x00000000
[01:31:27.985]    __FlashOp=0x00000000
[01:31:27.985]    __Result=0x00000000
[01:31:27.985]  </debugvars>
[01:31:27.985]  
[01:31:27.985]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:31:27.985]    <block atomic="false" info="">
[01:31:27.985]      __var deviceID = 0;
[01:31:27.985]        // -> [deviceID <= 0x00000000]
[01:31:27.985]      __var version = 0;
[01:31:27.985]        // -> [version <= 0x00000000]
[01:31:27.985]      __var partNum = 0;
[01:31:27.985]        // -> [partNum <= 0x00000000]
[01:31:27.995]      __var manuf = 0;
[01:31:27.995]        // -> [manuf <= 0x00000000]
[01:31:27.995]      __var isMSPM0G1X0X_G3X0X = 0;
[01:31:27.995]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:31:27.995]      __var isProduction = 0;
[01:31:27.995]        // -> [isProduction <= 0x00000000]
[01:31:27.995]      __var continueId = 0;
[01:31:27.995]        // -> [continueId <= 0x00000000]
[01:31:27.995]      deviceID =   Read32(0x41C40004);
[01:31:28.005]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:31:28.005]        // -> [deviceID <= 0x2BB8802F]
[01:31:28.005]      version = deviceID >> 28;
[01:31:28.005]        // -> [version <= 0x00000002]
[01:31:28.005]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:31:28.005]        // -> [partNum <= 0x0000BB88]
[01:31:28.005]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:31:28.005]        // -> [manuf <= 0x00000017]
[01:31:28.005]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:31:28.005]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:31:28.005]      isProduction = (version > 0);
[01:31:28.005]        // -> [isProduction <= 0x00000001]
[01:31:28.005]    </block>
[01:31:28.005]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:31:28.005]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:31:28.005]        // =>  FALSE
[01:31:28.005]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:31:28.005]    </control>
[01:31:28.005]    <control if="continueId == 4" while="" timeout="0" info="">
[01:31:28.005]      // if-block "continueId == 4"
[01:31:28.005]        // =>  FALSE
[01:31:28.005]      // skip if-block "continueId == 4"
[01:31:28.005]    </control>
[01:31:28.005]    <control if="!isProduction" while="" timeout="0" info="">
[01:31:28.005]      // if-block "!isProduction"
[01:31:28.005]        // =>  FALSE
[01:31:28.005]      // skip if-block "!isProduction"
[01:31:28.005]    </control>
[01:31:28.005]  </sequence>
[01:31:28.005]  
[01:32:12.837]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:32:12.837]  
[01:32:12.845]  <debugvars>
[01:32:12.845]    // Pre-defined
[01:32:12.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:12.845]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:12.845]    __dp=0x00000000
[01:32:12.845]    __ap=0x00000000
[01:32:12.846]    __traceout=0x00000000      (Trace Disabled)
[01:32:12.846]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:12.846]    __FlashAddr=0x00000000
[01:32:12.846]    __FlashLen=0x00000000
[01:32:12.846]    __FlashArg=0x00000000
[01:32:12.846]    __FlashOp=0x00000000
[01:32:12.846]    __Result=0x00000000
[01:32:12.846]  </debugvars>
[01:32:12.846]  
[01:32:12.846]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:32:12.846]    <block atomic="false" info="">
[01:32:12.847]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:32:12.847]        // -> [isSWJ <= 0x00000001]
[01:32:12.847]      __var hasDormant = __protocol & 0x00020000;
[01:32:12.847]        // -> [hasDormant <= 0x00000000]
[01:32:12.847]      __var protType   = __protocol & 0x0000FFFF;
[01:32:12.847]        // -> [protType <= 0x00000002]
[01:32:12.847]    </block>
[01:32:12.847]    <control if="protType == 1" while="" timeout="0" info="">
[01:32:12.848]      // if-block "protType == 1"
[01:32:12.848]        // =>  FALSE
[01:32:12.848]      // skip if-block "protType == 1"
[01:32:12.848]    </control>
[01:32:12.848]    <control if="protType == 2" while="" timeout="0" info="">
[01:32:12.848]      // if-block "protType == 2"
[01:32:12.848]        // =>  TRUE
[01:32:12.848]      <control if="isSWJ" while="" timeout="0" info="">
[01:32:12.848]        // if-block "isSWJ"
[01:32:12.848]          // =>  TRUE
[01:32:12.848]        <control if="hasDormant" while="" timeout="0" info="">
[01:32:12.848]          // if-block "hasDormant"
[01:32:12.848]            // =>  FALSE
[01:32:12.848]          // skip if-block "hasDormant"
[01:32:12.850]        </control>
[01:32:12.850]        <control if="!hasDormant" while="" timeout="0" info="">
[01:32:12.850]          // if-block "!hasDormant"
[01:32:12.850]            // =>  TRUE
[01:32:12.850]          <block atomic="false" info="">
[01:32:12.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:32:12.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:12.852]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:32:12.852]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:32:12.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:32:12.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:12.860]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:32:12.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:32:12.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:32:12.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:12.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:32:12.860]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:32:12.860]          </block>
[01:32:12.860]          // end if-block "!hasDormant"
[01:32:12.860]        </control>
[01:32:12.860]        // end if-block "isSWJ"
[01:32:12.860]      </control>
[01:32:12.860]      <control if="!isSWJ" while="" timeout="0" info="">
[01:32:12.860]        // if-block "!isSWJ"
[01:32:12.860]          // =>  FALSE
[01:32:12.860]        // skip if-block "!isSWJ"
[01:32:12.860]      </control>
[01:32:12.860]      <block atomic="false" info="">
[01:32:12.860]        ReadDP(0x0);
[01:32:12.872]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:32:12.872]      </block>
[01:32:12.872]      // end if-block "protType == 2"
[01:32:12.872]    </control>
[01:32:12.872]  </sequence>
[01:32:12.872]  
[01:32:12.880]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:32:12.880]  
[01:32:12.880]  <debugvars>
[01:32:12.880]    // Pre-defined
[01:32:12.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:12.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:12.880]    __dp=0x00000000
[01:32:12.880]    __ap=0x00000000
[01:32:12.880]    __traceout=0x00000000      (Trace Disabled)
[01:32:12.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:12.880]    __FlashAddr=0x00000000
[01:32:12.880]    __FlashLen=0x00000000
[01:32:12.880]    __FlashArg=0x00000000
[01:32:12.880]    __FlashOp=0x00000000
[01:32:12.880]    __Result=0x00000000
[01:32:12.880]  </debugvars>
[01:32:12.880]  
[01:32:12.880]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:32:12.890]    <block atomic="false" info="">
[01:32:12.890]      __var SW_DP_ABORT       = 0x0;
[01:32:12.890]        // -> [SW_DP_ABORT <= 0x00000000]
[01:32:12.890]      __var DP_CTRL_STAT      = 0x4;
[01:32:12.890]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:32:12.890]      __var DP_SELECT         = 0x8;
[01:32:12.890]        // -> [DP_SELECT <= 0x00000008]
[01:32:12.890]      __var powered_down      = 0;
[01:32:12.890]        // -> [powered_down <= 0x00000000]
[01:32:12.890]      WriteDP(DP_SELECT, 0x00000000);
[01:32:12.900]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:32:12.900]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:32:12.900]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:32:12.900]        // -> [powered_down <= 0x00000001]
[01:32:12.900]    </block>
[01:32:12.900]    <control if="powered_down" while="" timeout="0" info="">
[01:32:12.910]      // if-block "powered_down"
[01:32:12.910]        // =>  TRUE
[01:32:12.910]      <block atomic="false" info="">
[01:32:12.910]        Message(0, "Debug/System power-up request sent");
[01:32:12.910]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:32:12.910]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:32:12.910]      </block>
[01:32:12.910]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:32:12.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:32:12.910]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:32:12.910]        // while-condition  =>  FALSE
[01:32:12.910]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:32:12.910]      </control>
[01:32:12.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:32:12.910]        // if-block "(__protocol & 0xFFFF) == 1"
[01:32:12.910]          // =>  FALSE
[01:32:12.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:32:12.910]      </control>
[01:32:12.910]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:32:12.910]        // if-block "(__protocol & 0xFFFF) == 2"
[01:32:12.910]          // =>  TRUE
[01:32:12.910]        <block atomic="false" info="">
[01:32:12.910]          Message(0, "executing SWD power up");
[01:32:12.910]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:32:12.910]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:32:12.910]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:32:12.920]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:32:12.920]        </block>
[01:32:12.920]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:32:12.920]      </control>
[01:32:12.920]      // end if-block "powered_down"
[01:32:12.920]    </control>
[01:32:12.920]    <block atomic="false" info="">
[01:32:12.920]      __var DEBUG_PORT_VAL    = 0;
[01:32:12.920]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:32:12.920]      __var ACCESS_POINT_VAL  = 0;
[01:32:12.920]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:32:12.920]      __ap = 1; 
[01:32:12.920]        // -> [__ap <= 0x00000001]
[01:32:12.920]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:32:12.930]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:32:12.930]      __ap = 4;
[01:32:12.930]        // -> [__ap <= 0x00000004]
[01:32:12.930]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:12.930]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:32:12.930]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:32:12.930]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:12.930]    </block>
[01:32:12.930]    <block atomic="false" info="">
[01:32:12.930]      __var nReset = 0x80;
[01:32:12.930]        // -> [nReset <= 0x00000080]
[01:32:12.930]      __var canReadPins = 0;
[01:32:12.930]        // -> [canReadPins <= 0x00000000]
[01:32:12.930]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:32:12.930]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:32:12.930]        // -> [canReadPins <= 0x00000001]
[01:32:12.930]    </block>
[01:32:12.940]    <control if="" while="1" timeout="200" info="">
[01:32:12.941]      // while "1"  (timeout="200")
[01:32:12.941]      // while-condition  =>  TRUE
[01:32:12.941]      // while "1"  (timeout="200")
[01:32:12.941]      // while  =>  TIMEOUT
[01:32:12.941]      // end while "1"
[01:32:12.942]    </control>
[01:32:12.942]    <control if="canReadPins" while="" timeout="0" info="">
[01:32:12.942]      // if-block "canReadPins"
[01:32:12.942]        // =>  TRUE
[01:32:12.942]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:32:12.942]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:32:12.942]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:32:12.942]        // while-condition  =>  FALSE
[01:32:12.942]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:32:12.942]      </control>
[01:32:12.942]      // end if-block "canReadPins"
[01:32:12.942]    </control>
[01:32:12.942]    <control if="!canReadPins" while="" timeout="0" info="">
[01:32:12.942]      // if-block "!canReadPins"
[01:32:12.942]        // =>  FALSE
[01:32:12.942]      // skip if-block "!canReadPins"
[01:32:12.942]    </control>
[01:32:12.942]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:32:12.942]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:12.942]        // =>  TRUE
[01:32:12.942]      <block atomic="false" info="">
[01:32:12.942]        WriteAP(0x00, 0x190008);
[01:32:12.942]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:12.942]        WriteAP(0xF0, 0x01);
[01:32:12.942]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:12.951]      </block>
[01:32:12.951]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:12.951]    </control>
[01:32:12.951]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:32:12.951]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:12.951]        // =>  FALSE
[01:32:12.951]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:12.951]    </control>
[01:32:12.951]    <block atomic="false" info="">
[01:32:12.951]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:12.961]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:32:12.961]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:32:12.961]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:12.961]      __ap = 0; //lets make sure we reset the access point selection
[01:32:12.961]        // -> [__ap <= 0x00000000]
[01:32:12.961]    </block>
[01:32:12.961]  </sequence>
[01:32:12.961]  
[01:32:13.002]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:32:13.002]  
[01:32:13.002]  <debugvars>
[01:32:13.002]    // Pre-defined
[01:32:13.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:13.002]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:13.002]    __dp=0x00000000
[01:32:13.002]    __ap=0x00000000
[01:32:13.002]    __traceout=0x00000000      (Trace Disabled)
[01:32:13.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:13.002]    __FlashAddr=0x00000000
[01:32:13.002]    __FlashLen=0x00000000
[01:32:13.002]    __FlashArg=0x00000000
[01:32:13.002]    __FlashOp=0x00000000
[01:32:13.002]    __Result=0x00000000
[01:32:13.002]  </debugvars>
[01:32:13.002]  
[01:32:13.002]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:32:13.002]    <block atomic="false" info="">
[01:32:13.002]      __var deviceID = 0;
[01:32:13.002]        // -> [deviceID <= 0x00000000]
[01:32:13.002]      __var version = 0;
[01:32:13.002]        // -> [version <= 0x00000000]
[01:32:13.012]      __var partNum = 0;
[01:32:13.012]        // -> [partNum <= 0x00000000]
[01:32:13.012]      __var manuf = 0;
[01:32:13.012]        // -> [manuf <= 0x00000000]
[01:32:13.012]      __var isMSPM0G1X0X_G3X0X = 0;
[01:32:13.012]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:32:13.012]      __var isProduction = 0;
[01:32:13.012]        // -> [isProduction <= 0x00000000]
[01:32:13.012]      __var continueId = 0;
[01:32:13.012]        // -> [continueId <= 0x00000000]
[01:32:13.012]      deviceID =   Read32(0x41C40004);
[01:32:13.025]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:32:13.025]        // -> [deviceID <= 0x2BB8802F]
[01:32:13.025]      version = deviceID >> 28;
[01:32:13.025]        // -> [version <= 0x00000002]
[01:32:13.025]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:32:13.025]        // -> [partNum <= 0x0000BB88]
[01:32:13.025]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:32:13.025]        // -> [manuf <= 0x00000017]
[01:32:13.025]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:32:13.025]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:32:13.025]      isProduction = (version > 0);
[01:32:13.025]        // -> [isProduction <= 0x00000001]
[01:32:13.025]    </block>
[01:32:13.025]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:32:13.025]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:32:13.025]        // =>  FALSE
[01:32:13.025]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:32:13.025]    </control>
[01:32:13.025]    <control if="continueId == 4" while="" timeout="0" info="">
[01:32:13.025]      // if-block "continueId == 4"
[01:32:13.025]        // =>  FALSE
[01:32:13.025]      // skip if-block "continueId == 4"
[01:32:13.025]    </control>
[01:32:13.025]    <control if="!isProduction" while="" timeout="0" info="">
[01:32:13.025]      // if-block "!isProduction"
[01:32:13.025]        // =>  FALSE
[01:32:13.025]      // skip if-block "!isProduction"
[01:32:13.025]    </control>
[01:32:13.025]  </sequence>
[01:32:13.025]  
[01:33:35.961]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:33:35.961]  
[01:33:35.972]  <debugvars>
[01:33:35.972]    // Pre-defined
[01:33:35.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:35.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:35.972]    __dp=0x00000000
[01:33:35.972]    __ap=0x00000000
[01:33:35.972]    __traceout=0x00000000      (Trace Disabled)
[01:33:35.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:35.972]    __FlashAddr=0x00000000
[01:33:35.972]    __FlashLen=0x00000000
[01:33:35.972]    __FlashArg=0x00000000
[01:33:35.972]    __FlashOp=0x00000000
[01:33:35.972]    __Result=0x00000000
[01:33:35.972]  </debugvars>
[01:33:35.972]  
[01:33:35.972]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:33:35.972]    <block atomic="false" info="">
[01:33:35.972]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:33:35.972]        // -> [isSWJ <= 0x00000001]
[01:33:35.972]      __var hasDormant = __protocol & 0x00020000;
[01:33:35.972]        // -> [hasDormant <= 0x00000000]
[01:33:35.974]      __var protType   = __protocol & 0x0000FFFF;
[01:33:35.974]        // -> [protType <= 0x00000002]
[01:33:35.974]    </block>
[01:33:35.974]    <control if="protType == 1" while="" timeout="0" info="">
[01:33:35.974]      // if-block "protType == 1"
[01:33:35.974]        // =>  FALSE
[01:33:35.974]      // skip if-block "protType == 1"
[01:33:35.974]    </control>
[01:33:35.974]    <control if="protType == 2" while="" timeout="0" info="">
[01:33:35.974]      // if-block "protType == 2"
[01:33:35.974]        // =>  TRUE
[01:33:35.974]      <control if="isSWJ" while="" timeout="0" info="">
[01:33:35.976]        // if-block "isSWJ"
[01:33:35.976]          // =>  TRUE
[01:33:35.976]        <control if="hasDormant" while="" timeout="0" info="">
[01:33:35.976]          // if-block "hasDormant"
[01:33:35.976]            // =>  FALSE
[01:33:35.976]          // skip if-block "hasDormant"
[01:33:35.976]        </control>
[01:33:35.976]        <control if="!hasDormant" while="" timeout="0" info="">
[01:33:35.976]          // if-block "!hasDormant"
[01:33:35.976]            // =>  TRUE
[01:33:35.976]          <block atomic="false" info="">
[01:33:35.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:33:35.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:35.977]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:33:35.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:33:35.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:33:35.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:35.980]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:33:35.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:33:35.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:33:35.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:35.983]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:33:35.983]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:33:35.983]          </block>
[01:33:35.983]          // end if-block "!hasDormant"
[01:33:35.983]        </control>
[01:33:35.983]        // end if-block "isSWJ"
[01:33:35.983]      </control>
[01:33:35.983]      <control if="!isSWJ" while="" timeout="0" info="">
[01:33:35.983]        // if-block "!isSWJ"
[01:33:35.983]          // =>  FALSE
[01:33:35.983]        // skip if-block "!isSWJ"
[01:33:35.983]      </control>
[01:33:35.983]      <block atomic="false" info="">
[01:33:35.983]        ReadDP(0x0);
[01:33:35.989]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:33:35.989]      </block>
[01:33:35.989]      // end if-block "protType == 2"
[01:33:35.989]    </control>
[01:33:35.989]  </sequence>
[01:33:35.989]  
[01:33:35.999]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:33:35.999]  
[01:33:35.999]  <debugvars>
[01:33:35.999]    // Pre-defined
[01:33:35.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:35.999]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:35.999]    __dp=0x00000000
[01:33:35.999]    __ap=0x00000000
[01:33:35.999]    __traceout=0x00000000      (Trace Disabled)
[01:33:35.999]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:35.999]    __FlashAddr=0x00000000
[01:33:35.999]    __FlashLen=0x00000000
[01:33:35.999]    __FlashArg=0x00000000
[01:33:35.999]    __FlashOp=0x00000000
[01:33:35.999]    __Result=0x00000000
[01:33:35.999]  </debugvars>
[01:33:35.999]  
[01:33:35.999]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:33:35.999]    <block atomic="false" info="">
[01:33:35.999]      __var SW_DP_ABORT       = 0x0;
[01:33:35.999]        // -> [SW_DP_ABORT <= 0x00000000]
[01:33:35.999]      __var DP_CTRL_STAT      = 0x4;
[01:33:35.999]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:33:35.999]      __var DP_SELECT         = 0x8;
[01:33:35.999]        // -> [DP_SELECT <= 0x00000008]
[01:33:35.999]      __var powered_down      = 0;
[01:33:35.999]        // -> [powered_down <= 0x00000000]
[01:33:35.999]      WriteDP(DP_SELECT, 0x00000000);
[01:33:36.009]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:33:36.009]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:33:36.009]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:33:36.009]        // -> [powered_down <= 0x00000001]
[01:33:36.009]    </block>
[01:33:36.009]    <control if="powered_down" while="" timeout="0" info="">
[01:33:36.009]      // if-block "powered_down"
[01:33:36.009]        // =>  TRUE
[01:33:36.009]      <block atomic="false" info="">
[01:33:36.009]        Message(0, "Debug/System power-up request sent");
[01:33:36.009]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:33:36.009]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:33:36.009]      </block>
[01:33:36.009]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:33:36.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:33:36.009]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:33:36.009]        // while-condition  =>  FALSE
[01:33:36.009]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:33:36.009]      </control>
[01:33:36.009]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:33:36.009]        // if-block "(__protocol & 0xFFFF) == 1"
[01:33:36.009]          // =>  FALSE
[01:33:36.009]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:33:36.009]      </control>
[01:33:36.009]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:33:36.009]        // if-block "(__protocol & 0xFFFF) == 2"
[01:33:36.009]          // =>  TRUE
[01:33:36.009]        <block atomic="false" info="">
[01:33:36.009]          Message(0, "executing SWD power up");
[01:33:36.009]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:33:36.019]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:33:36.021]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:33:36.022]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:33:36.022]        </block>
[01:33:36.022]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:33:36.022]      </control>
[01:33:36.022]      // end if-block "powered_down"
[01:33:36.022]    </control>
[01:33:36.022]    <block atomic="false" info="">
[01:33:36.022]      __var DEBUG_PORT_VAL    = 0;
[01:33:36.022]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:33:36.022]      __var ACCESS_POINT_VAL  = 0;
[01:33:36.022]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:33:36.022]      __ap = 1; 
[01:33:36.022]        // -> [__ap <= 0x00000001]
[01:33:36.022]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:33:36.030]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:33:36.030]      __ap = 4;
[01:33:36.030]        // -> [__ap <= 0x00000004]
[01:33:36.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:36.039]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:33:36.039]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:33:36.039]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:36.039]    </block>
[01:33:36.040]    <block atomic="false" info="">
[01:33:36.040]      __var nReset = 0x80;
[01:33:36.040]        // -> [nReset <= 0x00000080]
[01:33:36.040]      __var canReadPins = 0;
[01:33:36.040]        // -> [canReadPins <= 0x00000000]
[01:33:36.040]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:33:36.042]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:33:36.042]        // -> [canReadPins <= 0x00000001]
[01:33:36.042]    </block>
[01:33:36.042]    <control if="" while="1" timeout="200" info="">
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.042]      // while "1"  (timeout="200")
[01:33:36.042]      // while-condition  =>  TRUE
[01:33:36.049]      // while "1"  (timeout="200")
[01:33:36.049]      // while-condition  =>  TRUE
[01:33:36.049]      // while "1"  (timeout="200")
[01:33:36.049]      // while-condition  =>  TRUE
[01:33:36.049]      // while "1"  (timeout="200")
[01:33:36.049]      // while-condition  =>  TRUE
[01:33:36.050]      // while "1"  (timeout="200")
[01:33:36.050]      // while  =>  TIMEOUT
[01:33:36.050]      // end while "1"
[01:33:36.050]    </control>
[01:33:36.050]    <control if="canReadPins" while="" timeout="0" info="">
[01:33:36.050]      // if-block "canReadPins"
[01:33:36.050]        // =>  TRUE
[01:33:36.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:33:36.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:33:36.050]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:33:36.050]        // while-condition  =>  FALSE
[01:33:36.050]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:33:36.050]      </control>
[01:33:36.050]      // end if-block "canReadPins"
[01:33:36.050]    </control>
[01:33:36.050]    <control if="!canReadPins" while="" timeout="0" info="">
[01:33:36.050]      // if-block "!canReadPins"
[01:33:36.054]        // =>  FALSE
[01:33:36.054]      // skip if-block "!canReadPins"
[01:33:36.054]    </control>
[01:33:36.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:33:36.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:36.054]        // =>  TRUE
[01:33:36.054]      <block atomic="false" info="">
[01:33:36.054]        WriteAP(0x00, 0x190008);
[01:33:36.054]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:36.054]        WriteAP(0xF0, 0x01);
[01:33:36.071]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:36.071]      </block>
[01:33:36.071]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:36.071]    </control>
[01:33:36.071]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:33:36.071]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:36.071]        // =>  FALSE
[01:33:36.071]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:36.071]    </control>
[01:33:36.071]    <block atomic="false" info="">
[01:33:36.071]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:36.081]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:33:36.081]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:33:36.081]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:36.081]      __ap = 0; //lets make sure we reset the access point selection
[01:33:36.081]        // -> [__ap <= 0x00000000]
[01:33:36.081]    </block>
[01:33:36.081]  </sequence>
[01:33:36.081]  
[01:33:36.101]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:33:36.101]  
[01:33:36.101]  <debugvars>
[01:33:36.101]    // Pre-defined
[01:33:36.101]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:36.101]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:36.101]    __dp=0x00000000
[01:33:36.101]    __ap=0x00000000
[01:33:36.101]    __traceout=0x00000000      (Trace Disabled)
[01:33:36.101]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:36.101]    __FlashAddr=0x00000000
[01:33:36.101]    __FlashLen=0x00000000
[01:33:36.101]    __FlashArg=0x00000000
[01:33:36.101]    __FlashOp=0x00000000
[01:33:36.101]    __Result=0x00000000
[01:33:36.101]  </debugvars>
[01:33:36.101]  
[01:33:36.101]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:33:36.101]    <block atomic="false" info="">
[01:33:36.101]      __var deviceID = 0;
[01:33:36.101]        // -> [deviceID <= 0x00000000]
[01:33:36.101]      __var version = 0;
[01:33:36.101]        // -> [version <= 0x00000000]
[01:33:36.101]      __var partNum = 0;
[01:33:36.101]        // -> [partNum <= 0x00000000]
[01:33:36.101]      __var manuf = 0;
[01:33:36.101]        // -> [manuf <= 0x00000000]
[01:33:36.101]      __var isMSPM0G1X0X_G3X0X = 0;
[01:33:36.101]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:33:36.101]      __var isProduction = 0;
[01:33:36.101]        // -> [isProduction <= 0x00000000]
[01:33:36.101]      __var continueId = 0;
[01:33:36.101]        // -> [continueId <= 0x00000000]
[01:33:36.101]      deviceID =   Read32(0x41C40004);
[01:33:36.111]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:33:36.111]        // -> [deviceID <= 0x2BB8802F]
[01:33:36.111]      version = deviceID >> 28;
[01:33:36.111]        // -> [version <= 0x00000002]
[01:33:36.111]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:33:36.111]        // -> [partNum <= 0x0000BB88]
[01:33:36.111]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:33:36.111]        // -> [manuf <= 0x00000017]
[01:33:36.111]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:33:36.111]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:33:36.111]      isProduction = (version > 0);
[01:33:36.111]        // -> [isProduction <= 0x00000001]
[01:33:36.111]    </block>
[01:33:36.111]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:33:36.111]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:33:36.111]        // =>  FALSE
[01:33:36.111]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:33:36.111]    </control>
[01:33:36.111]    <control if="continueId == 4" while="" timeout="0" info="">
[01:33:36.111]      // if-block "continueId == 4"
[01:33:36.111]        // =>  FALSE
[01:33:36.111]      // skip if-block "continueId == 4"
[01:33:36.111]    </control>
[01:33:36.111]    <control if="!isProduction" while="" timeout="0" info="">
[01:33:36.111]      // if-block "!isProduction"
[01:33:36.111]        // =>  FALSE
[01:33:36.111]      // skip if-block "!isProduction"
[01:33:36.111]    </control>
[01:33:36.111]  </sequence>
[01:33:36.111]  
[01:34:28.139]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:34:28.139]  
[01:34:28.149]  <debugvars>
[01:34:28.149]    // Pre-defined
[01:34:28.149]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:28.149]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:28.150]    __dp=0x00000000
[01:34:28.150]    __ap=0x00000000
[01:34:28.150]    __traceout=0x00000000      (Trace Disabled)
[01:34:28.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:28.150]    __FlashAddr=0x00000000
[01:34:28.150]    __FlashLen=0x00000000
[01:34:28.150]    __FlashArg=0x00000000
[01:34:28.150]    __FlashOp=0x00000000
[01:34:28.150]    __Result=0x00000000
[01:34:28.150]  </debugvars>
[01:34:28.151]  
[01:34:28.151]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:34:28.151]    <block atomic="false" info="">
[01:34:28.151]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:34:28.151]        // -> [isSWJ <= 0x00000001]
[01:34:28.151]      __var hasDormant = __protocol & 0x00020000;
[01:34:28.151]        // -> [hasDormant <= 0x00000000]
[01:34:28.151]      __var protType   = __protocol & 0x0000FFFF;
[01:34:28.151]        // -> [protType <= 0x00000002]
[01:34:28.151]    </block>
[01:34:28.151]    <control if="protType == 1" while="" timeout="0" info="">
[01:34:28.151]      // if-block "protType == 1"
[01:34:28.151]        // =>  FALSE
[01:34:28.151]      // skip if-block "protType == 1"
[01:34:28.151]    </control>
[01:34:28.151]    <control if="protType == 2" while="" timeout="0" info="">
[01:34:28.151]      // if-block "protType == 2"
[01:34:28.151]        // =>  TRUE
[01:34:28.151]      <control if="isSWJ" while="" timeout="0" info="">
[01:34:28.151]        // if-block "isSWJ"
[01:34:28.151]          // =>  TRUE
[01:34:28.151]        <control if="hasDormant" while="" timeout="0" info="">
[01:34:28.151]          // if-block "hasDormant"
[01:34:28.151]            // =>  FALSE
[01:34:28.151]          // skip if-block "hasDormant"
[01:34:28.151]        </control>
[01:34:28.151]        <control if="!hasDormant" while="" timeout="0" info="">
[01:34:28.151]          // if-block "!hasDormant"
[01:34:28.151]            // =>  TRUE
[01:34:28.151]          <block atomic="false" info="">
[01:34:28.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:34:28.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:28.157]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:34:28.159]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:34:28.159]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:34:28.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:28.162]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:34:28.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:34:28.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:34:28.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:28.162]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:34:28.162]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:34:28.162]          </block>
[01:34:28.162]          // end if-block "!hasDormant"
[01:34:28.169]        </control>
[01:34:28.169]        // end if-block "isSWJ"
[01:34:28.169]      </control>
[01:34:28.169]      <control if="!isSWJ" while="" timeout="0" info="">
[01:34:28.169]        // if-block "!isSWJ"
[01:34:28.169]          // =>  FALSE
[01:34:28.169]        // skip if-block "!isSWJ"
[01:34:28.169]      </control>
[01:34:28.169]      <block atomic="false" info="">
[01:34:28.169]        ReadDP(0x0);
[01:34:28.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:34:28.169]      </block>
[01:34:28.169]      // end if-block "protType == 2"
[01:34:28.169]    </control>
[01:34:28.169]  </sequence>
[01:34:28.169]  
[01:34:28.169]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:34:28.169]  
[01:34:28.169]  <debugvars>
[01:34:28.169]    // Pre-defined
[01:34:28.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:28.169]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:28.169]    __dp=0x00000000
[01:34:28.169]    __ap=0x00000000
[01:34:28.169]    __traceout=0x00000000      (Trace Disabled)
[01:34:28.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:28.169]    __FlashAddr=0x00000000
[01:34:28.169]    __FlashLen=0x00000000
[01:34:28.169]    __FlashArg=0x00000000
[01:34:28.169]    __FlashOp=0x00000000
[01:34:28.169]    __Result=0x00000000
[01:34:28.169]  </debugvars>
[01:34:28.169]  
[01:34:28.169]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:34:28.179]    <block atomic="false" info="">
[01:34:28.179]      __var SW_DP_ABORT       = 0x0;
[01:34:28.179]        // -> [SW_DP_ABORT <= 0x00000000]
[01:34:28.179]      __var DP_CTRL_STAT      = 0x4;
[01:34:28.179]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:34:28.179]      __var DP_SELECT         = 0x8;
[01:34:28.179]        // -> [DP_SELECT <= 0x00000008]
[01:34:28.179]      __var powered_down      = 0;
[01:34:28.179]        // -> [powered_down <= 0x00000000]
[01:34:28.179]      WriteDP(DP_SELECT, 0x00000000);
[01:34:28.179]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:34:28.179]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:34:28.179]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:34:28.179]        // -> [powered_down <= 0x00000001]
[01:34:28.179]    </block>
[01:34:28.179]    <control if="powered_down" while="" timeout="0" info="">
[01:34:28.179]      // if-block "powered_down"
[01:34:28.179]        // =>  TRUE
[01:34:28.179]      <block atomic="false" info="">
[01:34:28.179]        Message(0, "Debug/System power-up request sent");
[01:34:28.179]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:34:28.179]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:34:28.179]      </block>
[01:34:28.179]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:34:28.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:34:28.189]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:34:28.189]        // while-condition  =>  FALSE
[01:34:28.189]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:34:28.189]      </control>
[01:34:28.189]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:34:28.189]        // if-block "(__protocol & 0xFFFF) == 1"
[01:34:28.189]          // =>  FALSE
[01:34:28.189]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:34:28.189]      </control>
[01:34:28.189]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:34:28.189]        // if-block "(__protocol & 0xFFFF) == 2"
[01:34:28.189]          // =>  TRUE
[01:34:28.189]        <block atomic="false" info="">
[01:34:28.189]          Message(0, "executing SWD power up");
[01:34:28.189]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:34:28.189]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:34:28.189]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:34:28.189]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:34:28.189]        </block>
[01:34:28.189]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:34:28.189]      </control>
[01:34:28.189]      // end if-block "powered_down"
[01:34:28.189]    </control>
[01:34:28.189]    <block atomic="false" info="">
[01:34:28.189]      __var DEBUG_PORT_VAL    = 0;
[01:34:28.189]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:34:28.189]      __var ACCESS_POINT_VAL  = 0;
[01:34:28.189]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:34:28.189]      __ap = 1; 
[01:34:28.189]        // -> [__ap <= 0x00000001]
[01:34:28.189]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:34:28.199]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:34:28.199]      __ap = 4;
[01:34:28.199]        // -> [__ap <= 0x00000004]
[01:34:28.199]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:28.199]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:34:28.199]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:34:28.199]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:28.210]    </block>
[01:34:28.210]    <block atomic="false" info="">
[01:34:28.210]      __var nReset = 0x80;
[01:34:28.210]        // -> [nReset <= 0x00000080]
[01:34:28.210]      __var canReadPins = 0;
[01:34:28.210]        // -> [canReadPins <= 0x00000000]
[01:34:28.210]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:34:28.210]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:34:28.210]        // -> [canReadPins <= 0x00000001]
[01:34:28.210]    </block>
[01:34:28.210]    <control if="" while="1" timeout="200" info="">
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.210]      // while-condition  =>  TRUE
[01:34:28.210]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.219]      // while "1"  (timeout="200")
[01:34:28.219]      // while-condition  =>  TRUE
[01:34:28.229]      // while "1"  (timeout="200")
[01:34:28.229]      // while  =>  TIMEOUT
[01:34:28.229]      // end while "1"
[01:34:28.229]    </control>
[01:34:28.229]    <control if="canReadPins" while="" timeout="0" info="">
[01:34:28.229]      // if-block "canReadPins"
[01:34:28.229]        // =>  TRUE
[01:34:28.229]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:34:28.229]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:34:28.229]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:34:28.229]        // while-condition  =>  FALSE
[01:34:28.229]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:34:28.229]      </control>
[01:34:28.229]      // end if-block "canReadPins"
[01:34:28.229]    </control>
[01:34:28.229]    <control if="!canReadPins" while="" timeout="0" info="">
[01:34:28.229]      // if-block "!canReadPins"
[01:34:28.229]        // =>  FALSE
[01:34:28.229]      // skip if-block "!canReadPins"
[01:34:28.229]    </control>
[01:34:28.229]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:34:28.229]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:28.229]        // =>  TRUE
[01:34:28.229]      <block atomic="false" info="">
[01:34:28.229]        WriteAP(0x00, 0x190008);
[01:34:28.229]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:28.229]        WriteAP(0xF0, 0x01);
[01:34:28.239]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:28.239]      </block>
[01:34:28.239]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:28.239]    </control>
[01:34:28.239]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:34:28.239]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:28.239]        // =>  FALSE
[01:34:28.239]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:28.239]    </control>
[01:34:28.239]    <block atomic="false" info="">
[01:34:28.239]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:28.239]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:34:28.239]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:34:28.239]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:28.239]      __ap = 0; //lets make sure we reset the access point selection
[01:34:28.239]        // -> [__ap <= 0x00000000]
[01:34:28.239]    </block>
[01:34:28.239]  </sequence>
[01:34:28.239]  
[01:34:28.272]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:34:28.272]  
[01:34:28.272]  <debugvars>
[01:34:28.272]    // Pre-defined
[01:34:28.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:28.272]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:28.272]    __dp=0x00000000
[01:34:28.272]    __ap=0x00000000
[01:34:28.272]    __traceout=0x00000000      (Trace Disabled)
[01:34:28.272]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:28.272]    __FlashAddr=0x00000000
[01:34:28.272]    __FlashLen=0x00000000
[01:34:28.272]    __FlashArg=0x00000000
[01:34:28.272]    __FlashOp=0x00000000
[01:34:28.272]    __Result=0x00000000
[01:34:28.272]  </debugvars>
[01:34:28.272]  
[01:34:28.272]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:34:28.272]    <block atomic="false" info="">
[01:34:28.272]      __var deviceID = 0;
[01:34:28.272]        // -> [deviceID <= 0x00000000]
[01:34:28.272]      __var version = 0;
[01:34:28.272]        // -> [version <= 0x00000000]
[01:34:28.272]      __var partNum = 0;
[01:34:28.272]        // -> [partNum <= 0x00000000]
[01:34:28.272]      __var manuf = 0;
[01:34:28.278]        // -> [manuf <= 0x00000000]
[01:34:28.278]      __var isMSPM0G1X0X_G3X0X = 0;
[01:34:28.278]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:34:28.278]      __var isProduction = 0;
[01:34:28.278]        // -> [isProduction <= 0x00000000]
[01:34:28.279]      __var continueId = 0;
[01:34:28.279]        // -> [continueId <= 0x00000000]
[01:34:28.279]      deviceID =   Read32(0x41C40004);
[01:34:28.280]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:34:28.280]        // -> [deviceID <= 0x2BB8802F]
[01:34:28.280]      version = deviceID >> 28;
[01:34:28.280]        // -> [version <= 0x00000002]
[01:34:28.280]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:34:28.280]        // -> [partNum <= 0x0000BB88]
[01:34:28.280]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:34:28.280]        // -> [manuf <= 0x00000017]
[01:34:28.280]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:34:28.280]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:34:28.280]      isProduction = (version > 0);
[01:34:28.280]        // -> [isProduction <= 0x00000001]
[01:34:28.280]    </block>
[01:34:28.280]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:34:28.280]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:34:28.280]        // =>  FALSE
[01:34:28.280]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:34:28.280]    </control>
[01:34:28.280]    <control if="continueId == 4" while="" timeout="0" info="">
[01:34:28.280]      // if-block "continueId == 4"
[01:34:28.280]        // =>  FALSE
[01:34:28.280]      // skip if-block "continueId == 4"
[01:34:28.280]    </control>
[01:34:28.280]    <control if="!isProduction" while="" timeout="0" info="">
[01:34:28.280]      // if-block "!isProduction"
[01:34:28.280]        // =>  FALSE
[01:34:28.286]      // skip if-block "!isProduction"
[01:34:28.286]    </control>
[01:34:28.286]  </sequence>
[01:34:28.286]  
[01:36:20.535]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:36:20.535]  
[01:36:20.535]  <debugvars>
[01:36:20.535]    // Pre-defined
[01:36:20.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:20.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:20.535]    __dp=0x00000000
[01:36:20.535]    __ap=0x00000000
[01:36:20.535]    __traceout=0x00000000      (Trace Disabled)
[01:36:20.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:20.535]    __FlashAddr=0x00000000
[01:36:20.535]    __FlashLen=0x00000000
[01:36:20.535]    __FlashArg=0x00000000
[01:36:20.535]    __FlashOp=0x00000000
[01:36:20.535]    __Result=0x00000000
[01:36:20.535]  </debugvars>
[01:36:20.535]  
[01:36:20.535]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:36:20.537]    <block atomic="false" info="">
[01:36:20.537]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:36:20.537]        // -> [isSWJ <= 0x00000001]
[01:36:20.537]      __var hasDormant = __protocol & 0x00020000;
[01:36:20.537]        // -> [hasDormant <= 0x00000000]
[01:36:20.537]      __var protType   = __protocol & 0x0000FFFF;
[01:36:20.537]        // -> [protType <= 0x00000002]
[01:36:20.537]    </block>
[01:36:20.537]    <control if="protType == 1" while="" timeout="0" info="">
[01:36:20.537]      // if-block "protType == 1"
[01:36:20.538]        // =>  FALSE
[01:36:20.538]      // skip if-block "protType == 1"
[01:36:20.538]    </control>
[01:36:20.538]    <control if="protType == 2" while="" timeout="0" info="">
[01:36:20.538]      // if-block "protType == 2"
[01:36:20.538]        // =>  TRUE
[01:36:20.538]      <control if="isSWJ" while="" timeout="0" info="">
[01:36:20.538]        // if-block "isSWJ"
[01:36:20.538]          // =>  TRUE
[01:36:20.538]        <control if="hasDormant" while="" timeout="0" info="">
[01:36:20.538]          // if-block "hasDormant"
[01:36:20.538]            // =>  FALSE
[01:36:20.538]          // skip if-block "hasDormant"
[01:36:20.538]        </control>
[01:36:20.538]        <control if="!hasDormant" while="" timeout="0" info="">
[01:36:20.538]          // if-block "!hasDormant"
[01:36:20.538]            // =>  TRUE
[01:36:20.538]          <block atomic="false" info="">
[01:36:20.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:36:20.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:20.542]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:36:20.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:36:20.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:36:20.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:20.548]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:36:20.550]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:36:20.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:36:20.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:20.552]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:36:20.553]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:36:20.553]          </block>
[01:36:20.553]          // end if-block "!hasDormant"
[01:36:20.553]        </control>
[01:36:20.553]        // end if-block "isSWJ"
[01:36:20.553]      </control>
[01:36:20.553]      <control if="!isSWJ" while="" timeout="0" info="">
[01:36:20.553]        // if-block "!isSWJ"
[01:36:20.554]          // =>  FALSE
[01:36:20.554]        // skip if-block "!isSWJ"
[01:36:20.554]      </control>
[01:36:20.554]      <block atomic="false" info="">
[01:36:20.554]        ReadDP(0x0);
[01:36:20.556]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:36:20.556]      </block>
[01:36:20.556]      // end if-block "protType == 2"
[01:36:20.556]    </control>
[01:36:20.556]  </sequence>
[01:36:20.556]  
[01:36:20.563]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:36:20.563]  
[01:36:20.563]  <debugvars>
[01:36:20.563]    // Pre-defined
[01:36:20.563]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:20.563]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:20.563]    __dp=0x00000000
[01:36:20.563]    __ap=0x00000000
[01:36:20.563]    __traceout=0x00000000      (Trace Disabled)
[01:36:20.563]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:20.563]    __FlashAddr=0x00000000
[01:36:20.563]    __FlashLen=0x00000000
[01:36:20.563]    __FlashArg=0x00000000
[01:36:20.563]    __FlashOp=0x00000000
[01:36:20.563]    __Result=0x00000000
[01:36:20.563]  </debugvars>
[01:36:20.565]  
[01:36:20.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:36:20.565]    <block atomic="false" info="">
[01:36:20.565]      __var SW_DP_ABORT       = 0x0;
[01:36:20.565]        // -> [SW_DP_ABORT <= 0x00000000]
[01:36:20.565]      __var DP_CTRL_STAT      = 0x4;
[01:36:20.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:36:20.565]      __var DP_SELECT         = 0x8;
[01:36:20.565]        // -> [DP_SELECT <= 0x00000008]
[01:36:20.565]      __var powered_down      = 0;
[01:36:20.565]        // -> [powered_down <= 0x00000000]
[01:36:20.567]      WriteDP(DP_SELECT, 0x00000000);
[01:36:20.568]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:36:20.568]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:36:20.570]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:36:20.570]        // -> [powered_down <= 0x00000001]
[01:36:20.570]    </block>
[01:36:20.570]    <control if="powered_down" while="" timeout="0" info="">
[01:36:20.570]      // if-block "powered_down"
[01:36:20.571]        // =>  TRUE
[01:36:20.571]      <block atomic="false" info="">
[01:36:20.571]        Message(0, "Debug/System power-up request sent");
[01:36:20.571]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:36:20.573]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:36:20.573]      </block>
[01:36:20.573]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:36:20.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:36:20.577]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:36:20.577]        // while-condition  =>  FALSE
[01:36:20.577]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:36:20.577]      </control>
[01:36:20.577]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:36:20.577]        // if-block "(__protocol & 0xFFFF) == 1"
[01:36:20.577]          // =>  FALSE
[01:36:20.577]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:36:20.577]      </control>
[01:36:20.577]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:36:20.582]        // if-block "(__protocol & 0xFFFF) == 2"
[01:36:20.582]          // =>  TRUE
[01:36:20.582]        <block atomic="false" info="">
[01:36:20.582]          Message(0, "executing SWD power up");
[01:36:20.582]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:36:20.584]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:36:20.584]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:36:20.591]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:36:20.591]        </block>
[01:36:20.591]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:36:20.591]      </control>
[01:36:20.592]      // end if-block "powered_down"
[01:36:20.592]    </control>
[01:36:20.592]    <block atomic="false" info="">
[01:36:20.592]      __var DEBUG_PORT_VAL    = 0;
[01:36:20.592]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:36:20.592]      __var ACCESS_POINT_VAL  = 0;
[01:36:20.592]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:36:20.592]      __ap = 1; 
[01:36:20.592]        // -> [__ap <= 0x00000001]
[01:36:20.592]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:36:20.604]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:36:20.604]      __ap = 4;
[01:36:20.604]        // -> [__ap <= 0x00000004]
[01:36:20.604]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:20.610]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:36:20.610]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:36:20.610]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:20.610]    </block>
[01:36:20.610]    <block atomic="false" info="">
[01:36:20.610]      __var nReset = 0x80;
[01:36:20.612]        // -> [nReset <= 0x00000080]
[01:36:20.612]      __var canReadPins = 0;
[01:36:20.612]        // -> [canReadPins <= 0x00000000]
[01:36:20.612]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:36:20.620]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:36:20.620]        // -> [canReadPins <= 0x00000001]
[01:36:20.620]    </block>
[01:36:20.620]    <control if="" while="1" timeout="200" info="">
[01:36:20.620]      // while "1"  (timeout="200")
[01:36:20.620]      // while-condition  =>  TRUE
[01:36:20.620]      // while "1"  (timeout="200")
[01:36:20.620]      // while-condition  =>  TRUE
[01:36:20.620]      // while "1"  (timeout="200")
[01:36:20.620]      // while-condition  =>  TRUE
[01:36:20.621]      // while "1"  (timeout="200")
[01:36:20.621]      // while-condition  =>  TRUE
[01:36:20.621]      // while "1"  (timeout="200")
[01:36:20.621]      // while-condition  =>  TRUE
[01:36:20.621]      // while "1"  (timeout="200")
[01:36:20.621]      // while-condition  =>  TRUE
[01:36:20.621]      // while "1"  (timeout="200")
[01:36:20.621]      // while-condition  =>  TRUE
[01:36:20.621]      // while "1"  (timeout="200")
[01:36:20.621]      // while-condition  =>  TRUE
[01:36:20.621]      // while "1"  (timeout="200")
[01:36:20.621]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.623]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.623]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.623]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.623]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.623]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.623]      // while-condition  =>  TRUE
[01:36:20.623]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.624]      // while "1"  (timeout="200")
[01:36:20.624]      // while-condition  =>  TRUE
[01:36:20.625]      // while "1"  (timeout="200")
[01:36:20.625]      // while-condition  =>  TRUE
[01:36:20.625]      // while "1"  (timeout="200")
[01:36:20.625]      // while-condition  =>  TRUE
[01:36:20.625]      // while "1"  (timeout="200")
[01:36:20.625]      // while-condition  =>  TRUE
[01:36:20.625]      // while "1"  (timeout="200")
[01:36:20.625]      // while-condition  =>  TRUE
[01:36:20.625]      // while "1"  (timeout="200")
[01:36:20.625]      // while-condition  =>  TRUE
[01:36:20.625]      // while "1"  (timeout="200")
[01:36:20.627]      // while-condition  =>  TRUE
[01:36:20.627]      // while "1"  (timeout="200")
[01:36:20.627]      // while-condition  =>  TRUE
[01:36:20.627]      // while "1"  (timeout="200")
[01:36:20.627]      // while-condition  =>  TRUE
[01:36:20.627]      // while "1"  (timeout="200")
[01:36:20.627]      // while-condition  =>  TRUE
[01:36:20.627]      // while "1"  (timeout="200")
[01:36:20.627]      // while-condition  =>  TRUE
[01:36:20.627]      // while "1"  (timeout="200")
[01:36:20.628]      // while-condition  =>  TRUE
[01:36:20.628]      // while "1"  (timeout="200")
[01:36:20.628]      // while-condition  =>  TRUE
[01:36:20.628]      // while "1"  (timeout="200")
[01:36:20.628]      // while-condition  =>  TRUE
[01:36:20.628]      // while "1"  (timeout="200")
[01:36:20.628]      // while-condition  =>  TRUE
[01:36:20.628]      // while "1"  (timeout="200")
[01:36:20.628]      // while-condition  =>  TRUE
[01:36:20.628]      // while "1"  (timeout="200")
[01:36:20.629]      // while-condition  =>  TRUE
[01:36:20.629]      // while "1"  (timeout="200")
[01:36:20.629]      // while  =>  TIMEOUT
[01:36:20.629]      // end while "1"
[01:36:20.629]    </control>
[01:36:20.629]    <control if="canReadPins" while="" timeout="0" info="">
[01:36:20.629]      // if-block "canReadPins"
[01:36:20.629]        // =>  TRUE
[01:36:20.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:36:20.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:36:20.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:36:20.631]        // while-condition  =>  FALSE
[01:36:20.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:36:20.631]      </control>
[01:36:20.631]      // end if-block "canReadPins"
[01:36:20.631]    </control>
[01:36:20.631]    <control if="!canReadPins" while="" timeout="0" info="">
[01:36:20.631]      // if-block "!canReadPins"
[01:36:20.631]        // =>  FALSE
[01:36:20.631]      // skip if-block "!canReadPins"
[01:36:20.631]    </control>
[01:36:20.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:36:20.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:20.633]        // =>  TRUE
[01:36:20.633]      <block atomic="false" info="">
[01:36:20.633]        WriteAP(0x00, 0x190008);
[01:36:20.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:20.634]        WriteAP(0xF0, 0x01);
[01:36:20.643]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:20.643]      </block>
[01:36:20.643]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:20.643]    </control>
[01:36:20.643]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:36:20.643]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:20.643]        // =>  FALSE
[01:36:20.643]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:20.643]    </control>
[01:36:20.643]    <block atomic="false" info="">
[01:36:20.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:20.648]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:36:20.648]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:36:20.648]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:20.648]      __ap = 0; //lets make sure we reset the access point selection
[01:36:20.648]        // -> [__ap <= 0x00000000]
[01:36:20.648]    </block>
[01:36:20.648]  </sequence>
[01:36:20.648]  
[01:36:20.674]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:36:20.674]  
[01:36:20.676]  <debugvars>
[01:36:20.676]    // Pre-defined
[01:36:20.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:20.676]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:20.676]    __dp=0x00000000
[01:36:20.676]    __ap=0x00000000
[01:36:20.677]    __traceout=0x00000000      (Trace Disabled)
[01:36:20.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:20.677]    __FlashAddr=0x00000000
[01:36:20.677]    __FlashLen=0x00000000
[01:36:20.677]    __FlashArg=0x00000000
[01:36:20.677]    __FlashOp=0x00000000
[01:36:20.677]    __Result=0x00000000
[01:36:20.677]  </debugvars>
[01:36:20.677]  
[01:36:20.677]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:36:20.677]    <block atomic="false" info="">
[01:36:20.677]      __var deviceID = 0;
[01:36:20.677]        // -> [deviceID <= 0x00000000]
[01:36:20.677]      __var version = 0;
[01:36:20.677]        // -> [version <= 0x00000000]
[01:36:20.677]      __var partNum = 0;
[01:36:20.677]        // -> [partNum <= 0x00000000]
[01:36:20.677]      __var manuf = 0;
[01:36:20.677]        // -> [manuf <= 0x00000000]
[01:36:20.677]      __var isMSPM0G1X0X_G3X0X = 0;
[01:36:20.680]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:36:20.680]      __var isProduction = 0;
[01:36:20.680]        // -> [isProduction <= 0x00000000]
[01:36:20.680]      __var continueId = 0;
[01:36:20.680]        // -> [continueId <= 0x00000000]
[01:36:20.680]      deviceID =   Read32(0x41C40004);
[01:36:20.685]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:36:20.685]        // -> [deviceID <= 0x2BB8802F]
[01:36:20.685]      version = deviceID >> 28;
[01:36:20.685]        // -> [version <= 0x00000002]
[01:36:20.685]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:36:20.685]        // -> [partNum <= 0x0000BB88]
[01:36:20.685]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:36:20.685]        // -> [manuf <= 0x00000017]
[01:36:20.685]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:36:20.685]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:36:20.685]      isProduction = (version > 0);
[01:36:20.685]        // -> [isProduction <= 0x00000001]
[01:36:20.686]    </block>
[01:36:20.687]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:36:20.687]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:36:20.687]        // =>  FALSE
[01:36:20.687]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:36:20.687]    </control>
[01:36:20.687]    <control if="continueId == 4" while="" timeout="0" info="">
[01:36:20.687]      // if-block "continueId == 4"
[01:36:20.687]        // =>  FALSE
[01:36:20.687]      // skip if-block "continueId == 4"
[01:36:20.687]    </control>
[01:36:20.687]    <control if="!isProduction" while="" timeout="0" info="">
[01:36:20.687]      // if-block "!isProduction"
[01:36:20.687]        // =>  FALSE
[01:36:20.687]      // skip if-block "!isProduction"
[01:36:20.687]    </control>
[01:36:20.687]  </sequence>
[01:36:20.687]  
[01:36:46.336]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:36:46.336]  
[01:36:46.336]  <debugvars>
[01:36:46.336]    // Pre-defined
[01:36:46.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:46.336]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:46.336]    __dp=0x00000000
[01:36:46.336]    __ap=0x00000000
[01:36:46.336]    __traceout=0x00000000      (Trace Disabled)
[01:36:46.336]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:46.336]    __FlashAddr=0x00000000
[01:36:46.336]    __FlashLen=0x00000000
[01:36:46.336]    __FlashArg=0x00000000
[01:36:46.336]    __FlashOp=0x00000000
[01:36:46.336]    __Result=0x00000000
[01:36:46.336]  </debugvars>
[01:36:46.336]  
[01:36:46.336]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:36:46.336]    <block atomic="false" info="">
[01:36:46.336]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:36:46.336]        // -> [isSWJ <= 0x00000001]
[01:36:46.336]      __var hasDormant = __protocol & 0x00020000;
[01:36:46.336]        // -> [hasDormant <= 0x00000000]
[01:36:46.336]      __var protType   = __protocol & 0x0000FFFF;
[01:36:46.336]        // -> [protType <= 0x00000002]
[01:36:46.336]    </block>
[01:36:46.336]    <control if="protType == 1" while="" timeout="0" info="">
[01:36:46.336]      // if-block "protType == 1"
[01:36:46.336]        // =>  FALSE
[01:36:46.336]      // skip if-block "protType == 1"
[01:36:46.336]    </control>
[01:36:46.336]    <control if="protType == 2" while="" timeout="0" info="">
[01:36:46.336]      // if-block "protType == 2"
[01:36:46.336]        // =>  TRUE
[01:36:46.336]      <control if="isSWJ" while="" timeout="0" info="">
[01:36:46.336]        // if-block "isSWJ"
[01:36:46.336]          // =>  TRUE
[01:36:46.336]        <control if="hasDormant" while="" timeout="0" info="">
[01:36:46.336]          // if-block "hasDormant"
[01:36:46.336]            // =>  FALSE
[01:36:46.336]          // skip if-block "hasDormant"
[01:36:46.336]        </control>
[01:36:46.336]        <control if="!hasDormant" while="" timeout="0" info="">
[01:36:46.336]          // if-block "!hasDormant"
[01:36:46.336]            // =>  TRUE
[01:36:46.336]          <block atomic="false" info="">
[01:36:46.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:36:46.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:46.348]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:36:46.348]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:36:46.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:36:46.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:46.348]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:36:46.356]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:36:46.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:36:46.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:46.358]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:36:46.358]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:36:46.358]          </block>
[01:36:46.358]          // end if-block "!hasDormant"
[01:36:46.358]        </control>
[01:36:46.358]        // end if-block "isSWJ"
[01:36:46.358]      </control>
[01:36:46.358]      <control if="!isSWJ" while="" timeout="0" info="">
[01:36:46.358]        // if-block "!isSWJ"
[01:36:46.358]          // =>  FALSE
[01:36:46.358]        // skip if-block "!isSWJ"
[01:36:46.358]      </control>
[01:36:46.358]      <block atomic="false" info="">
[01:36:46.358]        ReadDP(0x0);
[01:36:46.358]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:36:46.358]      </block>
[01:36:46.358]      // end if-block "protType == 2"
[01:36:46.367]    </control>
[01:36:46.367]  </sequence>
[01:36:46.367]  
[01:36:46.368]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:36:46.368]  
[01:36:46.368]  <debugvars>
[01:36:46.368]    // Pre-defined
[01:36:46.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:46.368]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:46.368]    __dp=0x00000000
[01:36:46.368]    __ap=0x00000000
[01:36:46.368]    __traceout=0x00000000      (Trace Disabled)
[01:36:46.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:46.368]    __FlashAddr=0x00000000
[01:36:46.368]    __FlashLen=0x00000000
[01:36:46.368]    __FlashArg=0x00000000
[01:36:46.368]    __FlashOp=0x00000000
[01:36:46.368]    __Result=0x00000000
[01:36:46.368]  </debugvars>
[01:36:46.368]  
[01:36:46.368]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:36:46.368]    <block atomic="false" info="">
[01:36:46.368]      __var SW_DP_ABORT       = 0x0;
[01:36:46.368]        // -> [SW_DP_ABORT <= 0x00000000]
[01:36:46.368]      __var DP_CTRL_STAT      = 0x4;
[01:36:46.368]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:36:46.368]      __var DP_SELECT         = 0x8;
[01:36:46.368]        // -> [DP_SELECT <= 0x00000008]
[01:36:46.368]      __var powered_down      = 0;
[01:36:46.368]        // -> [powered_down <= 0x00000000]
[01:36:46.368]      WriteDP(DP_SELECT, 0x00000000);
[01:36:46.368]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:36:46.368]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:36:46.377]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:36:46.377]        // -> [powered_down <= 0x00000001]
[01:36:46.377]    </block>
[01:36:46.377]    <control if="powered_down" while="" timeout="0" info="">
[01:36:46.377]      // if-block "powered_down"
[01:36:46.377]        // =>  TRUE
[01:36:46.377]      <block atomic="false" info="">
[01:36:46.377]        Message(0, "Debug/System power-up request sent");
[01:36:46.379]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:36:46.379]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:36:46.379]      </block>
[01:36:46.379]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:36:46.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:36:46.379]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:36:46.379]        // while-condition  =>  FALSE
[01:36:46.379]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:36:46.379]      </control>
[01:36:46.379]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:36:46.379]        // if-block "(__protocol & 0xFFFF) == 1"
[01:36:46.379]          // =>  FALSE
[01:36:46.379]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:36:46.379]      </control>
[01:36:46.379]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:36:46.379]        // if-block "(__protocol & 0xFFFF) == 2"
[01:36:46.379]          // =>  TRUE
[01:36:46.379]        <block atomic="false" info="">
[01:36:46.379]          Message(0, "executing SWD power up");
[01:36:46.379]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:36:46.379]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:36:46.379]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:36:46.388]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:36:46.388]        </block>
[01:36:46.388]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:36:46.388]      </control>
[01:36:46.388]      // end if-block "powered_down"
[01:36:46.388]    </control>
[01:36:46.388]    <block atomic="false" info="">
[01:36:46.388]      __var DEBUG_PORT_VAL    = 0;
[01:36:46.388]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:36:46.388]      __var ACCESS_POINT_VAL  = 0;
[01:36:46.388]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:36:46.388]      __ap = 1; 
[01:36:46.388]        // -> [__ap <= 0x00000001]
[01:36:46.388]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:36:46.398]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:36:46.398]      __ap = 4;
[01:36:46.398]        // -> [__ap <= 0x00000004]
[01:36:46.398]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:46.398]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:36:46.398]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:36:46.398]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:46.398]    </block>
[01:36:46.398]    <block atomic="false" info="">
[01:36:46.398]      __var nReset = 0x80;
[01:36:46.398]        // -> [nReset <= 0x00000080]
[01:36:46.398]      __var canReadPins = 0;
[01:36:46.398]        // -> [canReadPins <= 0x00000000]
[01:36:46.398]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:36:46.409]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:36:46.410]        // -> [canReadPins <= 0x00000001]
[01:36:46.410]    </block>
[01:36:46.410]    <control if="" while="1" timeout="200" info="">
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.410]      // while "1"  (timeout="200")
[01:36:46.410]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.418]      // while-condition  =>  TRUE
[01:36:46.418]      // while "1"  (timeout="200")
[01:36:46.428]      // while-condition  =>  TRUE
[01:36:46.428]      // while "1"  (timeout="200")
[01:36:46.428]      // while  =>  TIMEOUT
[01:36:46.428]      // end while "1"
[01:36:46.428]    </control>
[01:36:46.428]    <control if="canReadPins" while="" timeout="0" info="">
[01:36:46.428]      // if-block "canReadPins"
[01:36:46.428]        // =>  TRUE
[01:36:46.428]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:36:46.428]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:36:46.431]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:36:46.431]        // while-condition  =>  FALSE
[01:36:46.431]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:36:46.431]      </control>
[01:36:46.431]      // end if-block "canReadPins"
[01:36:46.431]    </control>
[01:36:46.431]    <control if="!canReadPins" while="" timeout="0" info="">
[01:36:46.431]      // if-block "!canReadPins"
[01:36:46.431]        // =>  FALSE
[01:36:46.431]      // skip if-block "!canReadPins"
[01:36:46.431]    </control>
[01:36:46.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:36:46.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:46.431]        // =>  TRUE
[01:36:46.431]      <block atomic="false" info="">
[01:36:46.431]        WriteAP(0x00, 0x190008);
[01:36:46.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:46.431]        WriteAP(0xF0, 0x01);
[01:36:46.438]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:46.438]      </block>
[01:36:46.438]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:46.438]    </control>
[01:36:46.438]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:36:46.438]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:46.438]        // =>  FALSE
[01:36:46.438]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:46.438]    </control>
[01:36:46.438]    <block atomic="false" info="">
[01:36:46.438]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:46.448]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:36:46.448]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:36:46.448]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:46.448]      __ap = 0; //lets make sure we reset the access point selection
[01:36:46.448]        // -> [__ap <= 0x00000000]
[01:36:46.448]    </block>
[01:36:46.448]  </sequence>
[01:36:46.448]  
[01:36:46.468]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:36:46.468]  
[01:36:46.468]  <debugvars>
[01:36:46.468]    // Pre-defined
[01:36:46.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:46.468]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:46.468]    __dp=0x00000000
[01:36:46.468]    __ap=0x00000000
[01:36:46.468]    __traceout=0x00000000      (Trace Disabled)
[01:36:46.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:46.468]    __FlashAddr=0x00000000
[01:36:46.468]    __FlashLen=0x00000000
[01:36:46.468]    __FlashArg=0x00000000
[01:36:46.468]    __FlashOp=0x00000000
[01:36:46.468]    __Result=0x00000000
[01:36:46.468]  </debugvars>
[01:36:46.468]  
[01:36:46.468]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:36:46.468]    <block atomic="false" info="">
[01:36:46.468]      __var deviceID = 0;
[01:36:46.468]        // -> [deviceID <= 0x00000000]
[01:36:46.468]      __var version = 0;
[01:36:46.468]        // -> [version <= 0x00000000]
[01:36:46.477]      __var partNum = 0;
[01:36:46.477]        // -> [partNum <= 0x00000000]
[01:36:46.477]      __var manuf = 0;
[01:36:46.477]        // -> [manuf <= 0x00000000]
[01:36:46.477]      __var isMSPM0G1X0X_G3X0X = 0;
[01:36:46.477]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:36:46.477]      __var isProduction = 0;
[01:36:46.477]        // -> [isProduction <= 0x00000000]
[01:36:46.477]      __var continueId = 0;
[01:36:46.477]        // -> [continueId <= 0x00000000]
[01:36:46.478]      deviceID =   Read32(0x41C40004);
[01:36:46.480]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:36:46.480]        // -> [deviceID <= 0x2BB8802F]
[01:36:46.480]      version = deviceID >> 28;
[01:36:46.480]        // -> [version <= 0x00000002]
[01:36:46.480]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:36:46.480]        // -> [partNum <= 0x0000BB88]
[01:36:46.480]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:36:46.480]        // -> [manuf <= 0x00000017]
[01:36:46.480]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:36:46.480]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:36:46.480]      isProduction = (version > 0);
[01:36:46.480]        // -> [isProduction <= 0x00000001]
[01:36:46.480]    </block>
[01:36:46.480]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:36:46.480]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:36:46.480]        // =>  FALSE
[01:36:46.480]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:36:46.480]    </control>
[01:36:46.480]    <control if="continueId == 4" while="" timeout="0" info="">
[01:36:46.480]      // if-block "continueId == 4"
[01:36:46.480]        // =>  FALSE
[01:36:46.480]      // skip if-block "continueId == 4"
[01:36:46.480]    </control>
[01:36:46.480]    <control if="!isProduction" while="" timeout="0" info="">
[01:36:46.480]      // if-block "!isProduction"
[01:36:46.480]        // =>  FALSE
[01:36:46.480]      // skip if-block "!isProduction"
[01:36:46.489]    </control>
[01:36:46.489]  </sequence>
[01:36:46.489]  
[01:37:09.597]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:37:09.597]  
[01:37:09.597]  <debugvars>
[01:37:09.597]    // Pre-defined
[01:37:09.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:09.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:37:09.597]    __dp=0x00000000
[01:37:09.597]    __ap=0x00000000
[01:37:09.597]    __traceout=0x00000000      (Trace Disabled)
[01:37:09.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:09.597]    __FlashAddr=0x00000000
[01:37:09.597]    __FlashLen=0x00000000
[01:37:09.597]    __FlashArg=0x00000000
[01:37:09.597]    __FlashOp=0x00000000
[01:37:09.597]    __Result=0x00000000
[01:37:09.597]  </debugvars>
[01:37:09.597]  
[01:37:09.600]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:37:09.600]    <block atomic="false" info="">
[01:37:09.600]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:37:09.600]        // -> [isSWJ <= 0x00000001]
[01:37:09.600]      __var hasDormant = __protocol & 0x00020000;
[01:37:09.600]        // -> [hasDormant <= 0x00000000]
[01:37:09.600]      __var protType   = __protocol & 0x0000FFFF;
[01:37:09.600]        // -> [protType <= 0x00000002]
[01:37:09.600]    </block>
[01:37:09.600]    <control if="protType == 1" while="" timeout="0" info="">
[01:37:09.601]      // if-block "protType == 1"
[01:37:09.601]        // =>  FALSE
[01:37:09.601]      // skip if-block "protType == 1"
[01:37:09.601]    </control>
[01:37:09.601]    <control if="protType == 2" while="" timeout="0" info="">
[01:37:09.601]      // if-block "protType == 2"
[01:37:09.601]        // =>  TRUE
[01:37:09.601]      <control if="isSWJ" while="" timeout="0" info="">
[01:37:09.601]        // if-block "isSWJ"
[01:37:09.601]          // =>  TRUE
[01:37:09.601]        <control if="hasDormant" while="" timeout="0" info="">
[01:37:09.601]          // if-block "hasDormant"
[01:37:09.601]            // =>  FALSE
[01:37:09.601]          // skip if-block "hasDormant"
[01:37:09.601]        </control>
[01:37:09.601]        <control if="!hasDormant" while="" timeout="0" info="">
[01:37:09.601]          // if-block "!hasDormant"
[01:37:09.601]            // =>  TRUE
[01:37:09.601]          <block atomic="false" info="">
[01:37:09.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:37:09.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:09.601]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:37:09.606]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:37:09.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:37:09.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:09.610]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:37:09.610]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:37:09.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:37:09.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:09.610]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:37:09.610]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:37:09.610]          </block>
[01:37:09.610]          // end if-block "!hasDormant"
[01:37:09.610]        </control>
[01:37:09.610]        // end if-block "isSWJ"
[01:37:09.610]      </control>
[01:37:09.610]      <control if="!isSWJ" while="" timeout="0" info="">
[01:37:09.610]        // if-block "!isSWJ"
[01:37:09.616]          // =>  FALSE
[01:37:09.616]        // skip if-block "!isSWJ"
[01:37:09.616]      </control>
[01:37:09.616]      <block atomic="false" info="">
[01:37:09.616]        ReadDP(0x0);
[01:37:09.616]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:37:09.616]      </block>
[01:37:09.616]      // end if-block "protType == 2"
[01:37:09.616]    </control>
[01:37:09.616]  </sequence>
[01:37:09.616]  
[01:37:09.620]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:37:09.620]  
[01:37:09.620]  <debugvars>
[01:37:09.620]    // Pre-defined
[01:37:09.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:09.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:37:09.620]    __dp=0x00000000
[01:37:09.620]    __ap=0x00000000
[01:37:09.620]    __traceout=0x00000000      (Trace Disabled)
[01:37:09.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:09.620]    __FlashAddr=0x00000000
[01:37:09.620]    __FlashLen=0x00000000
[01:37:09.620]    __FlashArg=0x00000000
[01:37:09.620]    __FlashOp=0x00000000
[01:37:09.620]    __Result=0x00000000
[01:37:09.620]  </debugvars>
[01:37:09.620]  
[01:37:09.620]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:37:09.620]    <block atomic="false" info="">
[01:37:09.620]      __var SW_DP_ABORT       = 0x0;
[01:37:09.620]        // -> [SW_DP_ABORT <= 0x00000000]
[01:37:09.620]      __var DP_CTRL_STAT      = 0x4;
[01:37:09.620]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:37:09.620]      __var DP_SELECT         = 0x8;
[01:37:09.620]        // -> [DP_SELECT <= 0x00000008]
[01:37:09.620]      __var powered_down      = 0;
[01:37:09.620]        // -> [powered_down <= 0x00000000]
[01:37:09.620]      WriteDP(DP_SELECT, 0x00000000);
[01:37:09.626]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:37:09.626]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:37:09.630]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:37:09.630]        // -> [powered_down <= 0x00000001]
[01:37:09.630]    </block>
[01:37:09.630]    <control if="powered_down" while="" timeout="0" info="">
[01:37:09.630]      // if-block "powered_down"
[01:37:09.630]        // =>  TRUE
[01:37:09.630]      <block atomic="false" info="">
[01:37:09.630]        Message(0, "Debug/System power-up request sent");
[01:37:09.630]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:37:09.636]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:37:09.636]      </block>
[01:37:09.636]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:37:09.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:37:09.640]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:37:09.640]        // while-condition  =>  FALSE
[01:37:09.640]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:37:09.640]      </control>
[01:37:09.640]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:37:09.640]        // if-block "(__protocol & 0xFFFF) == 1"
[01:37:09.640]          // =>  FALSE
[01:37:09.640]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:37:09.640]      </control>
[01:37:09.640]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:37:09.640]        // if-block "(__protocol & 0xFFFF) == 2"
[01:37:09.640]          // =>  TRUE
[01:37:09.640]        <block atomic="false" info="">
[01:37:09.640]          Message(0, "executing SWD power up");
[01:37:09.640]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:37:09.640]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:37:09.640]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:37:09.646]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:37:09.646]        </block>
[01:37:09.646]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:37:09.646]      </control>
[01:37:09.646]      // end if-block "powered_down"
[01:37:09.646]    </control>
[01:37:09.646]    <block atomic="false" info="">
[01:37:09.646]      __var DEBUG_PORT_VAL    = 0;
[01:37:09.648]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:37:09.648]      __var ACCESS_POINT_VAL  = 0;
[01:37:09.648]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:37:09.648]      __ap = 1; 
[01:37:09.648]        // -> [__ap <= 0x00000001]
[01:37:09.648]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:37:09.650]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:37:09.650]      __ap = 4;
[01:37:09.650]        // -> [__ap <= 0x00000004]
[01:37:09.650]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:37:09.656]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:37:09.656]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:37:09.656]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:37:09.656]    </block>
[01:37:09.656]    <block atomic="false" info="">
[01:37:09.656]      __var nReset = 0x80;
[01:37:09.656]        // -> [nReset <= 0x00000080]
[01:37:09.656]      __var canReadPins = 0;
[01:37:09.656]        // -> [canReadPins <= 0x00000000]
[01:37:09.656]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:37:09.660]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:37:09.660]        // -> [canReadPins <= 0x00000001]
[01:37:09.660]    </block>
[01:37:09.660]    <control if="" while="1" timeout="200" info="">
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.660]      // while-condition  =>  TRUE
[01:37:09.660]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.666]      // while-condition  =>  TRUE
[01:37:09.666]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.670]      // while "1"  (timeout="200")
[01:37:09.670]      // while-condition  =>  TRUE
[01:37:09.676]      // while "1"  (timeout="200")
[01:37:09.676]      // while  =>  TIMEOUT
[01:37:09.676]      // end while "1"
[01:37:09.676]    </control>
[01:37:09.676]    <control if="canReadPins" while="" timeout="0" info="">
[01:37:09.676]      // if-block "canReadPins"
[01:37:09.676]        // =>  TRUE
[01:37:09.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:37:09.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:37:09.676]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:37:09.676]        // while-condition  =>  FALSE
[01:37:09.676]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:37:09.676]      </control>
[01:37:09.676]      // end if-block "canReadPins"
[01:37:09.676]    </control>
[01:37:09.676]    <control if="!canReadPins" while="" timeout="0" info="">
[01:37:09.676]      // if-block "!canReadPins"
[01:37:09.676]        // =>  FALSE
[01:37:09.676]      // skip if-block "!canReadPins"
[01:37:09.676]    </control>
[01:37:09.676]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:37:09.676]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:37:09.676]        // =>  TRUE
[01:37:09.676]      <block atomic="false" info="">
[01:37:09.680]        WriteAP(0x00, 0x190008);
[01:37:09.690]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:37:09.690]        WriteAP(0xF0, 0x01);
[01:37:09.696]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:37:09.696]      </block>
[01:37:09.696]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:37:09.696]    </control>
[01:37:09.696]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:37:09.696]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:37:09.696]        // =>  FALSE
[01:37:09.696]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:37:09.696]    </control>
[01:37:09.696]    <block atomic="false" info="">
[01:37:09.696]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:37:09.700]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:37:09.700]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:37:09.700]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:37:09.700]      __ap = 0; //lets make sure we reset the access point selection
[01:37:09.700]        // -> [__ap <= 0x00000000]
[01:37:09.700]    </block>
[01:37:09.700]  </sequence>
[01:37:09.700]  
[01:37:09.727]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:37:09.727]  
[01:37:09.727]  <debugvars>
[01:37:09.727]    // Pre-defined
[01:37:09.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:09.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:37:09.727]    __dp=0x00000000
[01:37:09.727]    __ap=0x00000000
[01:37:09.727]    __traceout=0x00000000      (Trace Disabled)
[01:37:09.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:09.727]    __FlashAddr=0x00000000
[01:37:09.727]    __FlashLen=0x00000000
[01:37:09.727]    __FlashArg=0x00000000
[01:37:09.727]    __FlashOp=0x00000000
[01:37:09.727]    __Result=0x00000000
[01:37:09.727]  </debugvars>
[01:37:09.727]  
[01:37:09.727]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:37:09.727]    <block atomic="false" info="">
[01:37:09.727]      __var deviceID = 0;
[01:37:09.727]        // -> [deviceID <= 0x00000000]
[01:37:09.727]      __var version = 0;
[01:37:09.727]        // -> [version <= 0x00000000]
[01:37:09.727]      __var partNum = 0;
[01:37:09.727]        // -> [partNum <= 0x00000000]
[01:37:09.727]      __var manuf = 0;
[01:37:09.727]        // -> [manuf <= 0x00000000]
[01:37:09.727]      __var isMSPM0G1X0X_G3X0X = 0;
[01:37:09.727]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:37:09.727]      __var isProduction = 0;
[01:37:09.731]        // -> [isProduction <= 0x00000000]
[01:37:09.731]      __var continueId = 0;
[01:37:09.731]        // -> [continueId <= 0x00000000]
[01:37:09.731]      deviceID =   Read32(0x41C40004);
[01:37:09.735]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:37:09.735]        // -> [deviceID <= 0x2BB8802F]
[01:37:09.735]      version = deviceID >> 28;
[01:37:09.735]        // -> [version <= 0x00000002]
[01:37:09.735]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:37:09.735]        // -> [partNum <= 0x0000BB88]
[01:37:09.735]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:37:09.735]        // -> [manuf <= 0x00000017]
[01:37:09.735]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:37:09.735]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:37:09.737]      isProduction = (version > 0);
[01:37:09.737]        // -> [isProduction <= 0x00000001]
[01:37:09.737]    </block>
[01:37:09.737]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:37:09.737]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:37:09.737]        // =>  FALSE
[01:37:09.737]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:37:09.737]    </control>
[01:37:09.737]    <control if="continueId == 4" while="" timeout="0" info="">
[01:37:09.737]      // if-block "continueId == 4"
[01:37:09.737]        // =>  FALSE
[01:37:09.737]      // skip if-block "continueId == 4"
[01:37:09.737]    </control>
[01:37:09.737]    <control if="!isProduction" while="" timeout="0" info="">
[01:37:09.737]      // if-block "!isProduction"
[01:37:09.737]        // =>  FALSE
[01:37:09.737]      // skip if-block "!isProduction"
[01:37:09.737]    </control>
[01:37:09.737]  </sequence>
[01:37:09.739]  
[01:38:06.315]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:38:06.315]  
[01:38:06.315]  <debugvars>
[01:38:06.315]    // Pre-defined
[01:38:06.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:06.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:06.315]    __dp=0x00000000
[01:38:06.315]    __ap=0x00000000
[01:38:06.315]    __traceout=0x00000000      (Trace Disabled)
[01:38:06.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:06.315]    __FlashAddr=0x00000000
[01:38:06.315]    __FlashLen=0x00000000
[01:38:06.315]    __FlashArg=0x00000000
[01:38:06.315]    __FlashOp=0x00000000
[01:38:06.315]    __Result=0x00000000
[01:38:06.315]  </debugvars>
[01:38:06.315]  
[01:38:06.315]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:38:06.315]    <block atomic="false" info="">
[01:38:06.315]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:38:06.315]        // -> [isSWJ <= 0x00000001]
[01:38:06.315]      __var hasDormant = __protocol & 0x00020000;
[01:38:06.315]        // -> [hasDormant <= 0x00000000]
[01:38:06.320]      __var protType   = __protocol & 0x0000FFFF;
[01:38:06.320]        // -> [protType <= 0x00000002]
[01:38:06.320]    </block>
[01:38:06.320]    <control if="protType == 1" while="" timeout="0" info="">
[01:38:06.320]      // if-block "protType == 1"
[01:38:06.320]        // =>  FALSE
[01:38:06.320]      // skip if-block "protType == 1"
[01:38:06.320]    </control>
[01:38:06.320]    <control if="protType == 2" while="" timeout="0" info="">
[01:38:06.320]      // if-block "protType == 2"
[01:38:06.320]        // =>  TRUE
[01:38:06.320]      <control if="isSWJ" while="" timeout="0" info="">
[01:38:06.320]        // if-block "isSWJ"
[01:38:06.320]          // =>  TRUE
[01:38:06.320]        <control if="hasDormant" while="" timeout="0" info="">
[01:38:06.320]          // if-block "hasDormant"
[01:38:06.320]            // =>  FALSE
[01:38:06.320]          // skip if-block "hasDormant"
[01:38:06.320]        </control>
[01:38:06.320]        <control if="!hasDormant" while="" timeout="0" info="">
[01:38:06.320]          // if-block "!hasDormant"
[01:38:06.320]            // =>  TRUE
[01:38:06.320]          <block atomic="false" info="">
[01:38:06.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:38:06.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:06.320]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:38:06.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:38:06.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:38:06.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:06.335]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:38:06.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:38:06.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:38:06.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:06.341]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:38:06.341]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:38:06.341]          </block>
[01:38:06.341]          // end if-block "!hasDormant"
[01:38:06.341]        </control>
[01:38:06.346]        // end if-block "isSWJ"
[01:38:06.346]      </control>
[01:38:06.346]      <control if="!isSWJ" while="" timeout="0" info="">
[01:38:06.346]        // if-block "!isSWJ"
[01:38:06.346]          // =>  FALSE
[01:38:06.346]        // skip if-block "!isSWJ"
[01:38:06.346]      </control>
[01:38:06.346]      <block atomic="false" info="">
[01:38:06.346]        ReadDP(0x0);
[01:38:06.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:38:06.351]      </block>
[01:38:06.351]      // end if-block "protType == 2"
[01:38:06.351]    </control>
[01:38:06.351]  </sequence>
[01:38:06.351]  
[01:38:06.351]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:38:06.351]  
[01:38:06.351]  <debugvars>
[01:38:06.351]    // Pre-defined
[01:38:06.351]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:06.351]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:06.351]    __dp=0x00000000
[01:38:06.351]    __ap=0x00000000
[01:38:06.351]    __traceout=0x00000000      (Trace Disabled)
[01:38:06.351]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:06.351]    __FlashAddr=0x00000000
[01:38:06.356]    __FlashLen=0x00000000
[01:38:06.356]    __FlashArg=0x00000000
[01:38:06.356]    __FlashOp=0x00000000
[01:38:06.356]    __Result=0x00000000
[01:38:06.356]  </debugvars>
[01:38:06.356]  
[01:38:06.356]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:38:06.356]    <block atomic="false" info="">
[01:38:06.356]      __var SW_DP_ABORT       = 0x0;
[01:38:06.356]        // -> [SW_DP_ABORT <= 0x00000000]
[01:38:06.356]      __var DP_CTRL_STAT      = 0x4;
[01:38:06.356]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:38:06.356]      __var DP_SELECT         = 0x8;
[01:38:06.356]        // -> [DP_SELECT <= 0x00000008]
[01:38:06.356]      __var powered_down      = 0;
[01:38:06.356]        // -> [powered_down <= 0x00000000]
[01:38:06.356]      WriteDP(DP_SELECT, 0x00000000);
[01:38:06.356]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:38:06.356]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:38:06.366]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:38:06.366]        // -> [powered_down <= 0x00000001]
[01:38:06.366]    </block>
[01:38:06.366]    <control if="powered_down" while="" timeout="0" info="">
[01:38:06.366]      // if-block "powered_down"
[01:38:06.366]        // =>  TRUE
[01:38:06.366]      <block atomic="false" info="">
[01:38:06.366]        Message(0, "Debug/System power-up request sent");
[01:38:06.366]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:38:06.371]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:38:06.371]      </block>
[01:38:06.371]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:38:06.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:38:06.371]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:38:06.371]        // while-condition  =>  FALSE
[01:38:06.371]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:38:06.371]      </control>
[01:38:06.371]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:38:06.371]        // if-block "(__protocol & 0xFFFF) == 1"
[01:38:06.371]          // =>  FALSE
[01:38:06.371]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:38:06.371]      </control>
[01:38:06.371]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:38:06.371]        // if-block "(__protocol & 0xFFFF) == 2"
[01:38:06.371]          // =>  TRUE
[01:38:06.371]        <block atomic="false" info="">
[01:38:06.371]          Message(0, "executing SWD power up");
[01:38:06.371]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:38:06.376]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:38:06.376]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:38:06.376]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:38:06.376]        </block>
[01:38:06.376]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:38:06.376]      </control>
[01:38:06.381]      // end if-block "powered_down"
[01:38:06.381]    </control>
[01:38:06.381]    <block atomic="false" info="">
[01:38:06.381]      __var DEBUG_PORT_VAL    = 0;
[01:38:06.381]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:38:06.381]      __var ACCESS_POINT_VAL  = 0;
[01:38:06.381]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:38:06.381]      __ap = 1; 
[01:38:06.381]        // -> [__ap <= 0x00000001]
[01:38:06.381]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:38:06.391]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:38:06.391]      __ap = 4;
[01:38:06.391]        // -> [__ap <= 0x00000004]
[01:38:06.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:06.397]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:38:06.397]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:38:06.397]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:06.397]    </block>
[01:38:06.397]    <block atomic="false" info="">
[01:38:06.397]      __var nReset = 0x80;
[01:38:06.397]        // -> [nReset <= 0x00000080]
[01:38:06.397]      __var canReadPins = 0;
[01:38:06.397]        // -> [canReadPins <= 0x00000000]
[01:38:06.397]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:38:06.401]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:38:06.401]        // -> [canReadPins <= 0x00000001]
[01:38:06.401]    </block>
[01:38:06.401]    <control if="" while="1" timeout="200" info="">
[01:38:06.401]      // while "1"  (timeout="200")
[01:38:06.401]      // while-condition  =>  TRUE
[01:38:06.401]      // while "1"  (timeout="200")
[01:38:06.401]      // while-condition  =>  TRUE
[01:38:06.401]      // while "1"  (timeout="200")
[01:38:06.401]      // while-condition  =>  TRUE
[01:38:06.401]      // while "1"  (timeout="200")
[01:38:06.401]      // while-condition  =>  TRUE
[01:38:06.401]      // while "1"  (timeout="200")
[01:38:06.401]      // while-condition  =>  TRUE
[01:38:06.401]      // while "1"  (timeout="200")
[01:38:06.401]      // while-condition  =>  TRUE
[01:38:06.402]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.403]      // while-condition  =>  TRUE
[01:38:06.403]      // while "1"  (timeout="200")
[01:38:06.405]      // while-condition  =>  TRUE
[01:38:06.405]      // while "1"  (timeout="200")
[01:38:06.405]      // while-condition  =>  TRUE
[01:38:06.405]      // while "1"  (timeout="200")
[01:38:06.405]      // while-condition  =>  TRUE
[01:38:06.405]      // while "1"  (timeout="200")
[01:38:06.405]      // while-condition  =>  TRUE
[01:38:06.405]      // while "1"  (timeout="200")
[01:38:06.405]      // while-condition  =>  TRUE
[01:38:06.405]      // while "1"  (timeout="200")
[01:38:06.405]      // while-condition  =>  TRUE
[01:38:06.407]      // while "1"  (timeout="200")
[01:38:06.407]      // while-condition  =>  TRUE
[01:38:06.407]      // while "1"  (timeout="200")
[01:38:06.407]      // while-condition  =>  TRUE
[01:38:06.407]      // while "1"  (timeout="200")
[01:38:06.407]      // while-condition  =>  TRUE
[01:38:06.407]      // while "1"  (timeout="200")
[01:38:06.407]      // while-condition  =>  TRUE
[01:38:06.407]      // while "1"  (timeout="200")
[01:38:06.407]      // while-condition  =>  TRUE
[01:38:06.407]      // while "1"  (timeout="200")
[01:38:06.408]      // while-condition  =>  TRUE
[01:38:06.408]      // while "1"  (timeout="200")
[01:38:06.408]      // while-condition  =>  TRUE
[01:38:06.408]      // while "1"  (timeout="200")
[01:38:06.408]      // while-condition  =>  TRUE
[01:38:06.408]      // while "1"  (timeout="200")
[01:38:06.408]      // while-condition  =>  TRUE
[01:38:06.408]      // while "1"  (timeout="200")
[01:38:06.408]      // while-condition  =>  TRUE
[01:38:06.408]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.409]      // while-condition  =>  TRUE
[01:38:06.409]      // while "1"  (timeout="200")
[01:38:06.410]      // while-condition  =>  TRUE
[01:38:06.410]      // while "1"  (timeout="200")
[01:38:06.410]      // while  =>  TIMEOUT
[01:38:06.410]      // end while "1"
[01:38:06.410]    </control>
[01:38:06.410]    <control if="canReadPins" while="" timeout="0" info="">
[01:38:06.411]      // if-block "canReadPins"
[01:38:06.411]        // =>  TRUE
[01:38:06.411]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:38:06.411]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:38:06.412]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:38:06.412]        // while-condition  =>  FALSE
[01:38:06.412]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:38:06.412]      </control>
[01:38:06.412]      // end if-block "canReadPins"
[01:38:06.412]    </control>
[01:38:06.412]    <control if="!canReadPins" while="" timeout="0" info="">
[01:38:06.412]      // if-block "!canReadPins"
[01:38:06.412]        // =>  FALSE
[01:38:06.412]      // skip if-block "!canReadPins"
[01:38:06.412]    </control>
[01:38:06.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:38:06.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:06.412]        // =>  TRUE
[01:38:06.412]      <block atomic="false" info="">
[01:38:06.412]        WriteAP(0x00, 0x190008);
[01:38:06.412]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:06.412]        WriteAP(0xF0, 0x01);
[01:38:06.421]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:06.422]      </block>
[01:38:06.422]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:06.422]    </control>
[01:38:06.422]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:38:06.422]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:06.422]        // =>  FALSE
[01:38:06.422]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:06.422]    </control>
[01:38:06.422]    <block atomic="false" info="">
[01:38:06.422]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:06.428]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:38:06.428]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:38:06.428]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:06.428]      __ap = 0; //lets make sure we reset the access point selection
[01:38:06.428]        // -> [__ap <= 0x00000000]
[01:38:06.428]    </block>
[01:38:06.428]  </sequence>
[01:38:06.428]  
[01:38:06.453]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:38:06.453]  
[01:38:06.453]  <debugvars>
[01:38:06.453]    // Pre-defined
[01:38:06.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:06.453]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:06.453]    __dp=0x00000000
[01:38:06.453]    __ap=0x00000000
[01:38:06.453]    __traceout=0x00000000      (Trace Disabled)
[01:38:06.453]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:06.453]    __FlashAddr=0x00000000
[01:38:06.453]    __FlashLen=0x00000000
[01:38:06.453]    __FlashArg=0x00000000
[01:38:06.458]    __FlashOp=0x00000000
[01:38:06.458]    __Result=0x00000000
[01:38:06.458]  </debugvars>
[01:38:06.458]  
[01:38:06.458]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:38:06.458]    <block atomic="false" info="">
[01:38:06.458]      __var deviceID = 0;
[01:38:06.458]        // -> [deviceID <= 0x00000000]
[01:38:06.458]      __var version = 0;
[01:38:06.458]        // -> [version <= 0x00000000]
[01:38:06.458]      __var partNum = 0;
[01:38:06.458]        // -> [partNum <= 0x00000000]
[01:38:06.459]      __var manuf = 0;
[01:38:06.459]        // -> [manuf <= 0x00000000]
[01:38:06.459]      __var isMSPM0G1X0X_G3X0X = 0;
[01:38:06.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:38:06.459]      __var isProduction = 0;
[01:38:06.459]        // -> [isProduction <= 0x00000000]
[01:38:06.459]      __var continueId = 0;
[01:38:06.459]        // -> [continueId <= 0x00000000]
[01:38:06.459]      deviceID =   Read32(0x41C40004);
[01:38:06.469]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:38:06.469]        // -> [deviceID <= 0x2BB8802F]
[01:38:06.471]      version = deviceID >> 28;
[01:38:06.471]        // -> [version <= 0x00000002]
[01:38:06.471]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:38:06.471]        // -> [partNum <= 0x0000BB88]
[01:38:06.471]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:38:06.471]        // -> [manuf <= 0x00000017]
[01:38:06.471]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:38:06.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:38:06.472]      isProduction = (version > 0);
[01:38:06.472]        // -> [isProduction <= 0x00000001]
[01:38:06.472]    </block>
[01:38:06.472]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:38:06.472]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:38:06.472]        // =>  FALSE
[01:38:06.473]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:38:06.473]    </control>
[01:38:06.473]    <control if="continueId == 4" while="" timeout="0" info="">
[01:38:06.473]      // if-block "continueId == 4"
[01:38:06.473]        // =>  FALSE
[01:38:06.473]      // skip if-block "continueId == 4"
[01:38:06.473]    </control>
[01:38:06.473]    <control if="!isProduction" while="" timeout="0" info="">
[01:38:06.473]      // if-block "!isProduction"
[01:38:06.473]        // =>  FALSE
[01:38:06.473]      // skip if-block "!isProduction"
[01:38:06.473]    </control>
[01:38:06.473]  </sequence>
[01:38:06.474]  
[01:38:36.867]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:38:36.867]  
[01:38:36.867]  <debugvars>
[01:38:36.867]    // Pre-defined
[01:38:36.867]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:36.867]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:36.867]    __dp=0x00000000
[01:38:36.867]    __ap=0x00000000
[01:38:36.867]    __traceout=0x00000000      (Trace Disabled)
[01:38:36.867]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:36.867]    __FlashAddr=0x00000000
[01:38:36.867]    __FlashLen=0x00000000
[01:38:36.867]    __FlashArg=0x00000000
[01:38:36.867]    __FlashOp=0x00000000
[01:38:36.867]    __Result=0x00000000
[01:38:36.867]  </debugvars>
[01:38:36.867]  
[01:38:36.867]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:38:36.867]    <block atomic="false" info="">
[01:38:36.867]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:38:36.867]        // -> [isSWJ <= 0x00000001]
[01:38:36.867]      __var hasDormant = __protocol & 0x00020000;
[01:38:36.867]        // -> [hasDormant <= 0x00000000]
[01:38:36.873]      __var protType   = __protocol & 0x0000FFFF;
[01:38:36.873]        // -> [protType <= 0x00000002]
[01:38:36.873]    </block>
[01:38:36.873]    <control if="protType == 1" while="" timeout="0" info="">
[01:38:36.873]      // if-block "protType == 1"
[01:38:36.873]        // =>  FALSE
[01:38:36.873]      // skip if-block "protType == 1"
[01:38:36.873]    </control>
[01:38:36.873]    <control if="protType == 2" while="" timeout="0" info="">
[01:38:36.873]      // if-block "protType == 2"
[01:38:36.873]        // =>  TRUE
[01:38:36.873]      <control if="isSWJ" while="" timeout="0" info="">
[01:38:36.873]        // if-block "isSWJ"
[01:38:36.875]          // =>  TRUE
[01:38:36.875]        <control if="hasDormant" while="" timeout="0" info="">
[01:38:36.875]          // if-block "hasDormant"
[01:38:36.875]            // =>  FALSE
[01:38:36.875]          // skip if-block "hasDormant"
[01:38:36.876]        </control>
[01:38:36.876]        <control if="!hasDormant" while="" timeout="0" info="">
[01:38:36.876]          // if-block "!hasDormant"
[01:38:36.876]            // =>  TRUE
[01:38:36.876]          <block atomic="false" info="">
[01:38:36.876]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:38:36.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:36.876]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:38:36.876]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:38:36.876]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:38:36.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:36.885]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:38:36.885]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:38:36.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:38:36.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:36.885]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:38:36.885]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:38:36.885]          </block>
[01:38:36.885]          // end if-block "!hasDormant"
[01:38:36.885]        </control>
[01:38:36.885]        // end if-block "isSWJ"
[01:38:36.885]      </control>
[01:38:36.885]      <control if="!isSWJ" while="" timeout="0" info="">
[01:38:36.885]        // if-block "!isSWJ"
[01:38:36.885]          // =>  FALSE
[01:38:36.885]        // skip if-block "!isSWJ"
[01:38:36.885]      </control>
[01:38:36.885]      <block atomic="false" info="">
[01:38:36.885]        ReadDP(0x0);
[01:38:36.895]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:38:36.895]      </block>
[01:38:36.895]      // end if-block "protType == 2"
[01:38:36.895]    </control>
[01:38:36.895]  </sequence>
[01:38:36.897]  
[01:38:36.897]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:38:36.897]  
[01:38:36.897]  <debugvars>
[01:38:36.897]    // Pre-defined
[01:38:36.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:36.897]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:36.897]    __dp=0x00000000
[01:38:36.897]    __ap=0x00000000
[01:38:36.897]    __traceout=0x00000000      (Trace Disabled)
[01:38:36.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:36.897]    __FlashAddr=0x00000000
[01:38:36.897]    __FlashLen=0x00000000
[01:38:36.897]    __FlashArg=0x00000000
[01:38:36.897]    __FlashOp=0x00000000
[01:38:36.897]    __Result=0x00000000
[01:38:36.897]  </debugvars>
[01:38:36.897]  
[01:38:36.897]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:38:36.897]    <block atomic="false" info="">
[01:38:36.897]      __var SW_DP_ABORT       = 0x0;
[01:38:36.897]        // -> [SW_DP_ABORT <= 0x00000000]
[01:38:36.897]      __var DP_CTRL_STAT      = 0x4;
[01:38:36.897]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:38:36.897]      __var DP_SELECT         = 0x8;
[01:38:36.897]        // -> [DP_SELECT <= 0x00000008]
[01:38:36.897]      __var powered_down      = 0;
[01:38:36.897]        // -> [powered_down <= 0x00000000]
[01:38:36.897]      WriteDP(DP_SELECT, 0x00000000);
[01:38:36.906]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:38:36.906]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:38:36.908]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:38:36.908]        // -> [powered_down <= 0x00000001]
[01:38:36.908]    </block>
[01:38:36.908]    <control if="powered_down" while="" timeout="0" info="">
[01:38:36.908]      // if-block "powered_down"
[01:38:36.908]        // =>  TRUE
[01:38:36.908]      <block atomic="false" info="">
[01:38:36.908]        Message(0, "Debug/System power-up request sent");
[01:38:36.908]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:38:36.908]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:38:36.908]      </block>
[01:38:36.908]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:38:36.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:38:36.916]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:38:36.916]        // while-condition  =>  FALSE
[01:38:36.916]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:38:36.916]      </control>
[01:38:36.916]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:38:36.916]        // if-block "(__protocol & 0xFFFF) == 1"
[01:38:36.916]          // =>  FALSE
[01:38:36.916]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:38:36.916]      </control>
[01:38:36.916]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:38:36.916]        // if-block "(__protocol & 0xFFFF) == 2"
[01:38:36.916]          // =>  TRUE
[01:38:36.916]        <block atomic="false" info="">
[01:38:36.916]          Message(0, "executing SWD power up");
[01:38:36.916]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:38:36.916]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:38:36.916]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:38:36.916]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:38:36.916]        </block>
[01:38:36.916]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:38:36.916]      </control>
[01:38:36.916]      // end if-block "powered_down"
[01:38:36.916]    </control>
[01:38:36.916]    <block atomic="false" info="">
[01:38:36.916]      __var DEBUG_PORT_VAL    = 0;
[01:38:36.916]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:38:36.916]      __var ACCESS_POINT_VAL  = 0;
[01:38:36.916]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:38:36.916]      __ap = 1; 
[01:38:36.916]        // -> [__ap <= 0x00000001]
[01:38:36.916]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:38:36.926]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:38:36.926]      __ap = 4;
[01:38:36.928]        // -> [__ap <= 0x00000004]
[01:38:36.928]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:36.928]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:38:36.928]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:38:36.928]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:36.928]    </block>
[01:38:36.928]    <block atomic="false" info="">
[01:38:36.928]      __var nReset = 0x80;
[01:38:36.928]        // -> [nReset <= 0x00000080]
[01:38:36.928]      __var canReadPins = 0;
[01:38:36.928]        // -> [canReadPins <= 0x00000000]
[01:38:36.928]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:38:36.936]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:38:36.936]        // -> [canReadPins <= 0x00000001]
[01:38:36.936]    </block>
[01:38:36.936]    <control if="" while="1" timeout="200" info="">
[01:38:36.936]      // while "1"  (timeout="200")
[01:38:36.936]      // while-condition  =>  TRUE
[01:38:36.936]      // while "1"  (timeout="200")
[01:38:36.936]      // while-condition  =>  TRUE
[01:38:36.936]      // while "1"  (timeout="200")
[01:38:36.936]      // while-condition  =>  TRUE
[01:38:36.936]      // while "1"  (timeout="200")
[01:38:36.936]      // while-condition  =>  TRUE
[01:38:36.936]      // while "1"  (timeout="200")
[01:38:36.936]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.939]      // while "1"  (timeout="200")
[01:38:36.939]      // while-condition  =>  TRUE
[01:38:36.944]      // while "1"  (timeout="200")
[01:38:36.944]      // while  =>  TIMEOUT
[01:38:36.944]      // end while "1"
[01:38:36.944]    </control>
[01:38:36.944]    <control if="canReadPins" while="" timeout="0" info="">
[01:38:36.944]      // if-block "canReadPins"
[01:38:36.944]        // =>  TRUE
[01:38:36.944]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:38:36.944]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:38:36.947]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:38:36.947]        // while-condition  =>  FALSE
[01:38:36.947]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:38:36.947]      </control>
[01:38:36.947]      // end if-block "canReadPins"
[01:38:36.947]    </control>
[01:38:36.947]    <control if="!canReadPins" while="" timeout="0" info="">
[01:38:36.947]      // if-block "!canReadPins"
[01:38:36.947]        // =>  FALSE
[01:38:36.947]      // skip if-block "!canReadPins"
[01:38:36.947]    </control>
[01:38:36.947]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:38:36.947]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:36.947]        // =>  TRUE
[01:38:36.947]      <block atomic="false" info="">
[01:38:36.947]        WriteAP(0x00, 0x190008);
[01:38:36.947]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:36.947]        WriteAP(0xF0, 0x01);
[01:38:36.958]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:36.958]      </block>
[01:38:36.958]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:36.958]    </control>
[01:38:36.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:38:36.958]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:36.958]        // =>  FALSE
[01:38:36.958]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:36.958]    </control>
[01:38:36.958]    <block atomic="false" info="">
[01:38:36.958]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:36.958]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:38:36.958]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:38:36.958]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:36.958]      __ap = 0; //lets make sure we reset the access point selection
[01:38:36.958]        // -> [__ap <= 0x00000000]
[01:38:36.958]    </block>
[01:38:36.958]  </sequence>
[01:38:36.958]  
[01:38:36.998]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:38:36.998]  
[01:38:36.998]  <debugvars>
[01:38:36.998]    // Pre-defined
[01:38:36.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:36.998]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:36.998]    __dp=0x00000000
[01:38:36.998]    __ap=0x00000000
[01:38:36.998]    __traceout=0x00000000      (Trace Disabled)
[01:38:36.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:36.998]    __FlashAddr=0x00000000
[01:38:36.998]    __FlashLen=0x00000000
[01:38:36.998]    __FlashArg=0x00000000
[01:38:36.998]    __FlashOp=0x00000000
[01:38:36.998]    __Result=0x00000000
[01:38:36.998]  </debugvars>
[01:38:36.998]  
[01:38:36.998]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:38:36.998]    <block atomic="false" info="">
[01:38:36.998]      __var deviceID = 0;
[01:38:36.998]        // -> [deviceID <= 0x00000000]
[01:38:36.998]      __var version = 0;
[01:38:36.998]        // -> [version <= 0x00000000]
[01:38:36.998]      __var partNum = 0;
[01:38:36.998]        // -> [partNum <= 0x00000000]
[01:38:36.998]      __var manuf = 0;
[01:38:36.998]        // -> [manuf <= 0x00000000]
[01:38:36.998]      __var isMSPM0G1X0X_G3X0X = 0;
[01:38:36.998]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:38:36.998]      __var isProduction = 0;
[01:38:36.998]        // -> [isProduction <= 0x00000000]
[01:38:36.998]      __var continueId = 0;
[01:38:36.998]        // -> [continueId <= 0x00000000]
[01:38:36.998]      deviceID =   Read32(0x41C40004);
[01:38:37.008]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:38:37.008]        // -> [deviceID <= 0x2BB8802F]
[01:38:37.008]      version = deviceID >> 28;
[01:38:37.008]        // -> [version <= 0x00000002]
[01:38:37.008]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:38:37.008]        // -> [partNum <= 0x0000BB88]
[01:38:37.008]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:38:37.008]        // -> [manuf <= 0x00000017]
[01:38:37.008]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:38:37.008]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:38:37.008]      isProduction = (version > 0);
[01:38:37.008]        // -> [isProduction <= 0x00000001]
[01:38:37.008]    </block>
[01:38:37.008]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:38:37.008]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:38:37.008]        // =>  FALSE
[01:38:37.008]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:38:37.008]    </control>
[01:38:37.008]    <control if="continueId == 4" while="" timeout="0" info="">
[01:38:37.008]      // if-block "continueId == 4"
[01:38:37.008]        // =>  FALSE
[01:38:37.008]      // skip if-block "continueId == 4"
[01:38:37.008]    </control>
[01:38:37.008]    <control if="!isProduction" while="" timeout="0" info="">
[01:38:37.008]      // if-block "!isProduction"
[01:38:37.008]        // =>  FALSE
[01:38:37.008]      // skip if-block "!isProduction"
[01:38:37.008]    </control>
[01:38:37.008]  </sequence>
[01:38:37.008]  
[01:42:35.647]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:42:35.647]  
[01:42:35.656]  <debugvars>
[01:42:35.656]    // Pre-defined
[01:42:35.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:35.656]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:35.656]    __dp=0x00000000
[01:42:35.656]    __ap=0x00000000
[01:42:35.656]    __traceout=0x00000000      (Trace Disabled)
[01:42:35.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:35.656]    __FlashAddr=0x00000000
[01:42:35.656]    __FlashLen=0x00000000
[01:42:35.656]    __FlashArg=0x00000000
[01:42:35.656]    __FlashOp=0x00000000
[01:42:35.656]    __Result=0x00000000
[01:42:35.656]  </debugvars>
[01:42:35.656]  
[01:42:35.656]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:42:35.656]    <block atomic="false" info="">
[01:42:35.656]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:42:35.656]        // -> [isSWJ <= 0x00000001]
[01:42:35.656]      __var hasDormant = __protocol & 0x00020000;
[01:42:35.656]        // -> [hasDormant <= 0x00000000]
[01:42:35.656]      __var protType   = __protocol & 0x0000FFFF;
[01:42:35.656]        // -> [protType <= 0x00000002]
[01:42:35.656]    </block>
[01:42:35.656]    <control if="protType == 1" while="" timeout="0" info="">
[01:42:35.656]      // if-block "protType == 1"
[01:42:35.656]        // =>  FALSE
[01:42:35.656]      // skip if-block "protType == 1"
[01:42:35.656]    </control>
[01:42:35.656]    <control if="protType == 2" while="" timeout="0" info="">
[01:42:35.656]      // if-block "protType == 2"
[01:42:35.656]        // =>  TRUE
[01:42:35.656]      <control if="isSWJ" while="" timeout="0" info="">
[01:42:35.656]        // if-block "isSWJ"
[01:42:35.656]          // =>  TRUE
[01:42:35.656]        <control if="hasDormant" while="" timeout="0" info="">
[01:42:35.656]          // if-block "hasDormant"
[01:42:35.656]            // =>  FALSE
[01:42:35.656]          // skip if-block "hasDormant"
[01:42:35.656]        </control>
[01:42:35.656]        <control if="!hasDormant" while="" timeout="0" info="">
[01:42:35.656]          // if-block "!hasDormant"
[01:42:35.656]            // =>  TRUE
[01:42:35.656]          <block atomic="false" info="">
[01:42:35.656]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:42:35.656]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:35.656]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:42:35.656]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:42:35.656]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:42:35.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:35.666]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:42:35.666]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:42:35.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:42:35.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:35.666]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:42:35.666]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:42:35.666]          </block>
[01:42:35.666]          // end if-block "!hasDormant"
[01:42:35.666]        </control>
[01:42:35.666]        // end if-block "isSWJ"
[01:42:35.666]      </control>
[01:42:35.666]      <control if="!isSWJ" while="" timeout="0" info="">
[01:42:35.666]        // if-block "!isSWJ"
[01:42:35.666]          // =>  FALSE
[01:42:35.666]        // skip if-block "!isSWJ"
[01:42:35.666]      </control>
[01:42:35.666]      <block atomic="false" info="">
[01:42:35.666]        ReadDP(0x0);
[01:42:35.666]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:42:35.666]      </block>
[01:42:35.666]      // end if-block "protType == 2"
[01:42:35.666]    </control>
[01:42:35.666]  </sequence>
[01:42:35.666]  
[01:42:35.675]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:42:35.675]  
[01:42:35.675]  <debugvars>
[01:42:35.675]    // Pre-defined
[01:42:35.675]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:35.675]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:35.675]    __dp=0x00000000
[01:42:35.675]    __ap=0x00000000
[01:42:35.675]    __traceout=0x00000000      (Trace Disabled)
[01:42:35.675]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:35.675]    __FlashAddr=0x00000000
[01:42:35.675]    __FlashLen=0x00000000
[01:42:35.675]    __FlashArg=0x00000000
[01:42:35.675]    __FlashOp=0x00000000
[01:42:35.675]    __Result=0x00000000
[01:42:35.675]  </debugvars>
[01:42:35.675]  
[01:42:35.675]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:42:35.675]    <block atomic="false" info="">
[01:42:35.675]      __var SW_DP_ABORT       = 0x0;
[01:42:35.675]        // -> [SW_DP_ABORT <= 0x00000000]
[01:42:35.675]      __var DP_CTRL_STAT      = 0x4;
[01:42:35.675]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:42:35.675]      __var DP_SELECT         = 0x8;
[01:42:35.675]        // -> [DP_SELECT <= 0x00000008]
[01:42:35.675]      __var powered_down      = 0;
[01:42:35.675]        // -> [powered_down <= 0x00000000]
[01:42:35.675]      WriteDP(DP_SELECT, 0x00000000);
[01:42:35.675]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:42:35.675]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:42:35.675]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:42:35.675]        // -> [powered_down <= 0x00000001]
[01:42:35.675]    </block>
[01:42:35.675]    <control if="powered_down" while="" timeout="0" info="">
[01:42:35.675]      // if-block "powered_down"
[01:42:35.675]        // =>  TRUE
[01:42:35.675]      <block atomic="false" info="">
[01:42:35.685]        Message(0, "Debug/System power-up request sent");
[01:42:35.685]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:42:35.688]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:42:35.688]      </block>
[01:42:35.688]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:42:35.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.695]        // while-condition  =>  TRUE
[01:42:35.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.696]        // while-condition  =>  TRUE
[01:42:35.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.696]        // while-condition  =>  TRUE
[01:42:35.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.696]        // while-condition  =>  TRUE
[01:42:35.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.696]        // while-condition  =>  TRUE
[01:42:35.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.705]        // while-condition  =>  TRUE
[01:42:35.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.707]        // while-condition  =>  TRUE
[01:42:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.707]        // while-condition  =>  TRUE
[01:42:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.707]        // while-condition  =>  TRUE
[01:42:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.707]        // while-condition  =>  TRUE
[01:42:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.707]        // while-condition  =>  TRUE
[01:42:35.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.718]        // while-condition  =>  TRUE
[01:42:35.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.718]        // while-condition  =>  TRUE
[01:42:35.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.718]        // while-condition  =>  TRUE
[01:42:35.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.718]        // while-condition  =>  TRUE
[01:42:35.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.726]        // while-condition  =>  TRUE
[01:42:35.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.726]        // while-condition  =>  TRUE
[01:42:35.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.726]        // while-condition  =>  TRUE
[01:42:35.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.726]        // while-condition  =>  TRUE
[01:42:35.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.726]        // while-condition  =>  TRUE
[01:42:35.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.726]        // while-condition  =>  TRUE
[01:42:35.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.736]        // while-condition  =>  TRUE
[01:42:35.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.736]        // while-condition  =>  TRUE
[01:42:35.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.736]        // while-condition  =>  TRUE
[01:42:35.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.736]        // while-condition  =>  TRUE
[01:42:35.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.746]        // while-condition  =>  TRUE
[01:42:35.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.752]        // while-condition  =>  TRUE
[01:42:35.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.752]        // while-condition  =>  TRUE
[01:42:35.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.756]        // while-condition  =>  TRUE
[01:42:35.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.758]        // while-condition  =>  TRUE
[01:42:35.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.759]        // while-condition  =>  TRUE
[01:42:35.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.766]        // while-condition  =>  TRUE
[01:42:35.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.766]        // while-condition  =>  TRUE
[01:42:35.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.766]        // while-condition  =>  TRUE
[01:42:35.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.766]        // while-condition  =>  TRUE
[01:42:35.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.776]        // while-condition  =>  TRUE
[01:42:35.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.779]        // while-condition  =>  TRUE
[01:42:35.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.779]        // while-condition  =>  TRUE
[01:42:35.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.779]        // while-condition  =>  TRUE
[01:42:35.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.779]        // while-condition  =>  TRUE
[01:42:35.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.786]        // while-condition  =>  TRUE
[01:42:35.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.786]        // while-condition  =>  TRUE
[01:42:35.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.792]        // while-condition  =>  TRUE
[01:42:35.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.792]        // while-condition  =>  TRUE
[01:42:35.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.798]        // while-condition  =>  TRUE
[01:42:35.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.798]        // while-condition  =>  TRUE
[01:42:35.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.798]        // while-condition  =>  TRUE
[01:42:35.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.798]        // while-condition  =>  TRUE
[01:42:35.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.798]        // while-condition  =>  TRUE
[01:42:35.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.807]        // while-condition  =>  TRUE
[01:42:35.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.807]        // while-condition  =>  TRUE
[01:42:35.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.807]        // while-condition  =>  TRUE
[01:42:35.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.817]        // while-condition  =>  TRUE
[01:42:35.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.820]        // while-condition  =>  TRUE
[01:42:35.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.827]        // while-condition  =>  TRUE
[01:42:35.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.837]        // while-condition  =>  TRUE
[01:42:35.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.840]        // while-condition  =>  TRUE
[01:42:35.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.840]        // while-condition  =>  TRUE
[01:42:35.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.840]        // while-condition  =>  TRUE
[01:42:35.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.840]        // while-condition  =>  TRUE
[01:42:35.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.849]        // while-condition  =>  TRUE
[01:42:35.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.852]        // while-condition  =>  TRUE
[01:42:35.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.858]        // while-condition  =>  TRUE
[01:42:35.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.860]        // while-condition  =>  TRUE
[01:42:35.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.861]        // while-condition  =>  TRUE
[01:42:35.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.864]        // while-condition  =>  TRUE
[01:42:35.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.866]        // while-condition  =>  TRUE
[01:42:35.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.868]        // while-condition  =>  TRUE
[01:42:35.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.871]        // while-condition  =>  TRUE
[01:42:35.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.875]        // while-condition  =>  TRUE
[01:42:35.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.876]        // while-condition  =>  TRUE
[01:42:35.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.879]        // while-condition  =>  TRUE
[01:42:35.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.879]        // while-condition  =>  TRUE
[01:42:35.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.882]        // while-condition  =>  TRUE
[01:42:35.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.884]        // while-condition  =>  TRUE
[01:42:35.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.886]        // while-condition  =>  TRUE
[01:42:35.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.889]        // while-condition  =>  TRUE
[01:42:35.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.889]        // while-condition  =>  TRUE
[01:42:35.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.893]        // while-condition  =>  TRUE
[01:42:35.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.898]        // while-condition  =>  TRUE
[01:42:35.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.901]        // while-condition  =>  TRUE
[01:42:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.901]        // while-condition  =>  TRUE
[01:42:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.901]        // while-condition  =>  TRUE
[01:42:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.901]        // while-condition  =>  TRUE
[01:42:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.901]        // while-condition  =>  TRUE
[01:42:35.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.909]        // while-condition  =>  TRUE
[01:42:35.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.909]        // while-condition  =>  TRUE
[01:42:35.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.909]        // while-condition  =>  TRUE
[01:42:35.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.909]        // while-condition  =>  TRUE
[01:42:35.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.909]        // while-condition  =>  TRUE
[01:42:35.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.919]        // while-condition  =>  TRUE
[01:42:35.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.919]        // while-condition  =>  TRUE
[01:42:35.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.919]        // while-condition  =>  TRUE
[01:42:35.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.919]        // while-condition  =>  TRUE
[01:42:35.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.929]        // while-condition  =>  TRUE
[01:42:35.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.932]        // while-condition  =>  TRUE
[01:42:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.932]        // while-condition  =>  TRUE
[01:42:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.932]        // while-condition  =>  TRUE
[01:42:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.939]        // while-condition  =>  TRUE
[01:42:35.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.945]        // while-condition  =>  TRUE
[01:42:35.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.950]        // while-condition  =>  TRUE
[01:42:35.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.952]        // while-condition  =>  TRUE
[01:42:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.952]        // while-condition  =>  TRUE
[01:42:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.952]        // while-condition  =>  TRUE
[01:42:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.952]        // while-condition  =>  TRUE
[01:42:35.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.961]        // while-condition  =>  TRUE
[01:42:35.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.962]        // while-condition  =>  TRUE
[01:42:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.962]        // while-condition  =>  TRUE
[01:42:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.962]        // while-condition  =>  TRUE
[01:42:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.970]        // while-condition  =>  TRUE
[01:42:35.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.970]        // while-condition  =>  TRUE
[01:42:35.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.970]        // while-condition  =>  TRUE
[01:42:35.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.970]        // while-condition  =>  TRUE
[01:42:35.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.981]        // while-condition  =>  TRUE
[01:42:35.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.982]        // while-condition  =>  TRUE
[01:42:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.982]        // while-condition  =>  TRUE
[01:42:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.982]        // while-condition  =>  TRUE
[01:42:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.982]        // while-condition  =>  TRUE
[01:42:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.990]        // while-condition  =>  TRUE
[01:42:35.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.993]        // while-condition  =>  TRUE
[01:42:35.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.993]        // while-condition  =>  TRUE
[01:42:35.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.993]        // while-condition  =>  TRUE
[01:42:35.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:35.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:35.993]        // while-condition  =>  TRUE
[01:42:36.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.001]        // while-condition  =>  TRUE
[01:42:36.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.001]        // while-condition  =>  TRUE
[01:42:36.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.001]        // while-condition  =>  TRUE
[01:42:36.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.011]        // while-condition  =>  TRUE
[01:42:36.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.011]        // while-condition  =>  TRUE
[01:42:36.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.011]        // while-condition  =>  TRUE
[01:42:36.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.011]        // while-condition  =>  TRUE
[01:42:36.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.021]        // while-condition  =>  TRUE
[01:42:36.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.021]        // while-condition  =>  TRUE
[01:42:36.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.021]        // while-condition  =>  TRUE
[01:42:36.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.031]        // while-condition  =>  TRUE
[01:42:36.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.031]        // while-condition  =>  TRUE
[01:42:36.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.031]        // while-condition  =>  TRUE
[01:42:36.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.041]        // while-condition  =>  TRUE
[01:42:36.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.041]        // while-condition  =>  TRUE
[01:42:36.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.052]        // while-condition  =>  TRUE
[01:42:36.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.052]        // while-condition  =>  TRUE
[01:42:36.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.061]        // while-condition  =>  TRUE
[01:42:36.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.061]        // while-condition  =>  TRUE
[01:42:36.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.061]        // while-condition  =>  TRUE
[01:42:36.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.061]        // while-condition  =>  TRUE
[01:42:36.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.061]        // while-condition  =>  TRUE
[01:42:36.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.074]        // while-condition  =>  TRUE
[01:42:36.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.074]        // while-condition  =>  TRUE
[01:42:36.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.074]        // while-condition  =>  TRUE
[01:42:36.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.081]        // while-condition  =>  TRUE
[01:42:36.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.082]        // while-condition  =>  TRUE
[01:42:36.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.084]        // while-condition  =>  TRUE
[01:42:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.084]        // while-condition  =>  TRUE
[01:42:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.084]        // while-condition  =>  TRUE
[01:42:36.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.091]        // while-condition  =>  TRUE
[01:42:36.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.091]        // while-condition  =>  TRUE
[01:42:36.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.091]        // while-condition  =>  TRUE
[01:42:36.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.091]        // while-condition  =>  TRUE
[01:42:36.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.101]        // while-condition  =>  TRUE
[01:42:36.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.103]        // while-condition  =>  TRUE
[01:42:36.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.103]        // while-condition  =>  TRUE
[01:42:36.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.103]        // while-condition  =>  TRUE
[01:42:36.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.103]        // while-condition  =>  TRUE
[01:42:36.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.103]        // while-condition  =>  TRUE
[01:42:36.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.111]        // while-condition  =>  TRUE
[01:42:36.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.111]        // while-condition  =>  TRUE
[01:42:36.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.111]        // while-condition  =>  TRUE
[01:42:36.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.121]        // while-condition  =>  TRUE
[01:42:36.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.124]        // while-condition  =>  TRUE
[01:42:36.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.125]        // while-condition  =>  TRUE
[01:42:36.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.125]        // while-condition  =>  TRUE
[01:42:36.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.134]        // while-condition  =>  TRUE
[01:42:36.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.134]        // while-condition  =>  TRUE
[01:42:36.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.142]        // while-condition  =>  TRUE
[01:42:36.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.144]        // while-condition  =>  TRUE
[01:42:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.144]        // while-condition  =>  TRUE
[01:42:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.144]        // while-condition  =>  TRUE
[01:42:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.144]        // while-condition  =>  TRUE
[01:42:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.144]        // while-condition  =>  TRUE
[01:42:36.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.152]        // while-condition  =>  TRUE
[01:42:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.152]        // while-condition  =>  TRUE
[01:42:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.152]        // while-condition  =>  TRUE
[01:42:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.152]        // while-condition  =>  TRUE
[01:42:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.165]        // while-condition  =>  TRUE
[01:42:36.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.173]        // while-condition  =>  TRUE
[01:42:36.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.174]        // while-condition  =>  TRUE
[01:42:36.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.174]        // while-condition  =>  TRUE
[01:42:36.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.174]        // while-condition  =>  TRUE
[01:42:36.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.183]        // while-condition  =>  TRUE
[01:42:36.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.185]        // while-condition  =>  TRUE
[01:42:36.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.185]        // while-condition  =>  TRUE
[01:42:36.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.185]        // while-condition  =>  TRUE
[01:42:36.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.185]        // while-condition  =>  TRUE
[01:42:36.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.193]        // while-condition  =>  TRUE
[01:42:36.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.195]        // while-condition  =>  TRUE
[01:42:36.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.195]        // while-condition  =>  TRUE
[01:42:36.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.195]        // while-condition  =>  TRUE
[01:42:36.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.195]        // while-condition  =>  TRUE
[01:42:36.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.195]        // while-condition  =>  TRUE
[01:42:36.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.203]        // while-condition  =>  TRUE
[01:42:36.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.203]        // while-condition  =>  TRUE
[01:42:36.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.203]        // while-condition  =>  TRUE
[01:42:36.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.215]        // while-condition  =>  TRUE
[01:42:36.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.215]        // while-condition  =>  TRUE
[01:42:36.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.215]        // while-condition  =>  TRUE
[01:42:36.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.215]        // while-condition  =>  TRUE
[01:42:36.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.225]        // while-condition  =>  TRUE
[01:42:36.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.226]        // while-condition  =>  TRUE
[01:42:36.226]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.226]        // while-condition  =>  TRUE
[01:42:36.226]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.226]        // while-condition  =>  TRUE
[01:42:36.226]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.226]        // while-condition  =>  TRUE
[01:42:36.226]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.235]        // while-condition  =>  TRUE
[01:42:36.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.235]        // while-condition  =>  TRUE
[01:42:36.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.235]        // while-condition  =>  TRUE
[01:42:36.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.235]        // while-condition  =>  TRUE
[01:42:36.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.235]        // while-condition  =>  TRUE
[01:42:36.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.246]        // while-condition  =>  TRUE
[01:42:36.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.246]        // while-condition  =>  TRUE
[01:42:36.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.246]        // while-condition  =>  TRUE
[01:42:36.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.246]        // while-condition  =>  TRUE
[01:42:36.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.252]        // while-condition  =>  TRUE
[01:42:36.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.254]        // while-condition  =>  TRUE
[01:42:36.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.254]        // while-condition  =>  TRUE
[01:42:36.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.264]        // while-condition  =>  TRUE
[01:42:36.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.264]        // while-condition  =>  TRUE
[01:42:36.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.264]        // while-condition  =>  TRUE
[01:42:36.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.264]        // while-condition  =>  TRUE
[01:42:36.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.274]        // while-condition  =>  TRUE
[01:42:36.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.274]        // while-condition  =>  TRUE
[01:42:36.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.274]        // while-condition  =>  TRUE
[01:42:36.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.284]        // while-condition  =>  TRUE
[01:42:36.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.284]        // while-condition  =>  TRUE
[01:42:36.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.284]        // while-condition  =>  TRUE
[01:42:36.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.284]        // while-condition  =>  TRUE
[01:42:36.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.284]        // while-condition  =>  TRUE
[01:42:36.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.296]        // while-condition  =>  TRUE
[01:42:36.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.303]        // while-condition  =>  TRUE
[01:42:36.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.305]        // while-condition  =>  TRUE
[01:42:36.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.309]        // while-condition  =>  TRUE
[01:42:36.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.311]        // while-condition  =>  TRUE
[01:42:36.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.315]        // while-condition  =>  TRUE
[01:42:36.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.327]        // while-condition  =>  TRUE
[01:42:36.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.327]        // while-condition  =>  TRUE
[01:42:36.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.327]        // while-condition  =>  TRUE
[01:42:36.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.337]        // while-condition  =>  TRUE
[01:42:36.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.337]        // while-condition  =>  TRUE
[01:42:36.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.337]        // while-condition  =>  TRUE
[01:42:36.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.345]        // while-condition  =>  TRUE
[01:42:36.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.346]        // while-condition  =>  TRUE
[01:42:36.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.352]        // while-condition  =>  TRUE
[01:42:36.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.355]        // while-condition  =>  TRUE
[01:42:36.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.355]        // while-condition  =>  TRUE
[01:42:36.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.357]        // while-condition  =>  TRUE
[01:42:36.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.357]        // while-condition  =>  TRUE
[01:42:36.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.357]        // while-condition  =>  TRUE
[01:42:36.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.357]        // while-condition  =>  TRUE
[01:42:36.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.365]        // while-condition  =>  TRUE
[01:42:36.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.368]        // while-condition  =>  TRUE
[01:42:36.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.368]        // while-condition  =>  TRUE
[01:42:36.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.368]        // while-condition  =>  TRUE
[01:42:36.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.375]        // while-condition  =>  TRUE
[01:42:36.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.375]        // while-condition  =>  TRUE
[01:42:36.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.375]        // while-condition  =>  TRUE
[01:42:36.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.375]        // while-condition  =>  TRUE
[01:42:36.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.375]        // while-condition  =>  TRUE
[01:42:36.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.385]        // while-condition  =>  TRUE
[01:42:36.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.388]        // while-condition  =>  TRUE
[01:42:36.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.390]        // while-condition  =>  TRUE
[01:42:36.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.397]        // while-condition  =>  TRUE
[01:42:36.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.397]        // while-condition  =>  TRUE
[01:42:36.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.397]        // while-condition  =>  TRUE
[01:42:36.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.397]        // while-condition  =>  TRUE
[01:42:36.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.406]        // while-condition  =>  TRUE
[01:42:36.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.406]        // while-condition  =>  TRUE
[01:42:36.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.406]        // while-condition  =>  TRUE
[01:42:36.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.418]        // while-condition  =>  TRUE
[01:42:36.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.418]        // while-condition  =>  TRUE
[01:42:36.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.426]        // while-condition  =>  TRUE
[01:42:36.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.429]        // while-condition  =>  TRUE
[01:42:36.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.429]        // while-condition  =>  TRUE
[01:42:36.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.429]        // while-condition  =>  TRUE
[01:42:36.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.429]        // while-condition  =>  TRUE
[01:42:36.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.436]        // while-condition  =>  TRUE
[01:42:36.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.436]        // while-condition  =>  TRUE
[01:42:36.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.436]        // while-condition  =>  TRUE
[01:42:36.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.436]        // while-condition  =>  TRUE
[01:42:36.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.436]        // while-condition  =>  TRUE
[01:42:36.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.446]        // while-condition  =>  TRUE
[01:42:36.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.452]        // while-condition  =>  TRUE
[01:42:36.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.456]        // while-condition  =>  TRUE
[01:42:36.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.456]        // while-condition  =>  TRUE
[01:42:36.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.456]        // while-condition  =>  TRUE
[01:42:36.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.466]        // while-condition  =>  TRUE
[01:42:36.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.466]        // while-condition  =>  TRUE
[01:42:36.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.466]        // while-condition  =>  TRUE
[01:42:36.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.466]        // while-condition  =>  TRUE
[01:42:36.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.466]        // while-condition  =>  TRUE
[01:42:36.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.466]        // while-condition  =>  TRUE
[01:42:36.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.476]        // while-condition  =>  TRUE
[01:42:36.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.478]        // while-condition  =>  TRUE
[01:42:36.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.478]        // while-condition  =>  TRUE
[01:42:36.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.478]        // while-condition  =>  TRUE
[01:42:36.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.478]        // while-condition  =>  TRUE
[01:42:36.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.478]        // while-condition  =>  TRUE
[01:42:36.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.487]        // while-condition  =>  TRUE
[01:42:36.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.489]        // while-condition  =>  TRUE
[01:42:36.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.489]        // while-condition  =>  TRUE
[01:42:36.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.489]        // while-condition  =>  TRUE
[01:42:36.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.489]        // while-condition  =>  TRUE
[01:42:36.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.497]        // while-condition  =>  TRUE
[01:42:36.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.499]        // while-condition  =>  TRUE
[01:42:36.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.500]        // while-condition  =>  TRUE
[01:42:36.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.500]        // while-condition  =>  TRUE
[01:42:36.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.510]        // while-condition  =>  TRUE
[01:42:36.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.510]        // while-condition  =>  TRUE
[01:42:36.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.510]        // while-condition  =>  TRUE
[01:42:36.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.518]        // while-condition  =>  TRUE
[01:42:36.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.518]        // while-condition  =>  TRUE
[01:42:36.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.518]        // while-condition  =>  TRUE
[01:42:36.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.528]        // while-condition  =>  TRUE
[01:42:36.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.528]        // while-condition  =>  TRUE
[01:42:36.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.528]        // while-condition  =>  TRUE
[01:42:36.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.540]        // while-condition  =>  TRUE
[01:42:36.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.540]        // while-condition  =>  TRUE
[01:42:36.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.540]        // while-condition  =>  TRUE
[01:42:36.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.540]        // while-condition  =>  TRUE
[01:42:36.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.548]        // while-condition  =>  TRUE
[01:42:36.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.549]        // while-condition  =>  TRUE
[01:42:36.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.549]        // while-condition  =>  TRUE
[01:42:36.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.553]        // while-condition  =>  TRUE
[01:42:36.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.553]        // while-condition  =>  TRUE
[01:42:36.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.558]        // while-condition  =>  TRUE
[01:42:36.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.561]        // while-condition  =>  TRUE
[01:42:36.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.564]        // while-condition  =>  TRUE
[01:42:36.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.564]        // while-condition  =>  TRUE
[01:42:36.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.568]        // while-condition  =>  TRUE
[01:42:36.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.568]        // while-condition  =>  TRUE
[01:42:36.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.571]        // while-condition  =>  TRUE
[01:42:36.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.571]        // while-condition  =>  TRUE
[01:42:36.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.579]        // while-condition  =>  TRUE
[01:42:36.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.581]        // while-condition  =>  TRUE
[01:42:36.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.582]        // while-condition  =>  TRUE
[01:42:36.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.582]        // while-condition  =>  TRUE
[01:42:36.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.589]        // while-condition  =>  TRUE
[01:42:36.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.591]        // while-condition  =>  TRUE
[01:42:36.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.591]        // while-condition  =>  TRUE
[01:42:36.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.591]        // while-condition  =>  TRUE
[01:42:36.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.600]        // while-condition  =>  TRUE
[01:42:36.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.601]        // while-condition  =>  TRUE
[01:42:36.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.601]        // while-condition  =>  TRUE
[01:42:36.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.608]        // while-condition  =>  TRUE
[01:42:36.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.611]        // while-condition  =>  TRUE
[01:42:36.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.612]        // while-condition  =>  TRUE
[01:42:36.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.615]        // while-condition  =>  TRUE
[01:42:36.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.616]        // while-condition  =>  TRUE
[01:42:36.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.616]        // while-condition  =>  TRUE
[01:42:36.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.620]        // while-condition  =>  TRUE
[01:42:36.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.622]        // while-condition  =>  TRUE
[01:42:36.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.622]        // while-condition  =>  TRUE
[01:42:36.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.624]        // while-condition  =>  TRUE
[01:42:36.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.633]        // while-condition  =>  TRUE
[01:42:36.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.637]        // while-condition  =>  TRUE
[01:42:36.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.639]        // while-condition  =>  TRUE
[01:42:36.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.646]        // while-condition  =>  TRUE
[01:42:36.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.648]        // while-condition  =>  TRUE
[01:42:36.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.650]        // while-condition  =>  TRUE
[01:42:36.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.651]        // while-condition  =>  TRUE
[01:42:36.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.655]        // while-condition  =>  TRUE
[01:42:36.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.657]        // while-condition  =>  TRUE
[01:42:36.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.660]        // while-condition  =>  TRUE
[01:42:36.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.662]        // while-condition  =>  TRUE
[01:42:36.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.664]        // while-condition  =>  TRUE
[01:42:36.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.665]        // while-condition  =>  TRUE
[01:42:36.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.667]        // while-condition  =>  TRUE
[01:42:36.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.673]        // while-condition  =>  TRUE
[01:42:36.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.675]        // while-condition  =>  TRUE
[01:42:36.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[01:42:36.680]        // while-condition  =>  TRUE
[01:42:36.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:36.680]        // while  =>  TIMEOUT
[01:42:36.680]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:42:36.680]      </control>
[01:42:36.680]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:42:36.680]        // if-block "(__protocol & 0xFFFF) == 1"
[01:42:36.680]          // =>  FALSE
[01:42:36.680]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:42:36.680]      </control>
[01:42:36.680]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:42:36.680]        // if-block "(__protocol & 0xFFFF) == 2"
[01:42:36.680]          // =>  TRUE
[01:42:36.680]        <block atomic="false" info="">
[01:42:36.680]          Message(0, "executing SWD power up");
[01:42:36.680]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:42:36.680]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:42:36.680]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:42:36.680]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:42:36.680]        </block>
[01:42:36.680]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:42:36.680]      </control>
[01:42:36.680]      // end if-block "powered_down"
[01:42:36.680]    </control>
[01:42:36.680]    <block atomic="false" info="">
[01:42:36.680]      __var DEBUG_PORT_VAL    = 0;
[01:42:36.680]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:42:36.680]      __var ACCESS_POINT_VAL  = 0;
[01:42:36.680]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:42:36.680]      __ap = 1; 
[01:42:36.680]        // -> [__ap <= 0x00000001]
[01:42:36.680]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:42:36.698]  
[01:42:36.698]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[01:42:36.698]  
[01:42:36.698]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:42:36.698]    </block>
[01:42:36.698]  </sequence>
[01:42:36.698]  
[01:42:41.643]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:42:41.643]  
[01:42:41.660]  <debugvars>
[01:42:41.660]    // Pre-defined
[01:42:41.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:41.660]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:41.660]    __dp=0x00000000
[01:42:41.660]    __ap=0x00000000
[01:42:41.660]    __traceout=0x00000000      (Trace Disabled)
[01:42:41.660]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:41.660]    __FlashAddr=0x00000000
[01:42:41.660]    __FlashLen=0x00000000
[01:42:41.660]    __FlashArg=0x00000000
[01:42:41.660]    __FlashOp=0x00000000
[01:42:41.660]    __Result=0x00000000
[01:42:41.660]  </debugvars>
[01:42:41.660]  
[01:42:41.660]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:42:41.660]    <block atomic="false" info="">
[01:42:41.660]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:42:41.660]        // -> [isSWJ <= 0x00000001]
[01:42:41.660]      __var hasDormant = __protocol & 0x00020000;
[01:42:41.660]        // -> [hasDormant <= 0x00000000]
[01:42:41.660]      __var protType   = __protocol & 0x0000FFFF;
[01:42:41.663]        // -> [protType <= 0x00000002]
[01:42:41.663]    </block>
[01:42:41.663]    <control if="protType == 1" while="" timeout="0" info="">
[01:42:41.663]      // if-block "protType == 1"
[01:42:41.663]        // =>  FALSE
[01:42:41.663]      // skip if-block "protType == 1"
[01:42:41.663]    </control>
[01:42:41.663]    <control if="protType == 2" while="" timeout="0" info="">
[01:42:41.663]      // if-block "protType == 2"
[01:42:41.663]        // =>  TRUE
[01:42:41.663]      <control if="isSWJ" while="" timeout="0" info="">
[01:42:41.663]        // if-block "isSWJ"
[01:42:41.663]          // =>  TRUE
[01:42:41.663]        <control if="hasDormant" while="" timeout="0" info="">
[01:42:41.663]          // if-block "hasDormant"
[01:42:41.663]            // =>  FALSE
[01:42:41.663]          // skip if-block "hasDormant"
[01:42:41.663]        </control>
[01:42:41.663]        <control if="!hasDormant" while="" timeout="0" info="">
[01:42:41.665]          // if-block "!hasDormant"
[01:42:41.665]            // =>  TRUE
[01:42:41.665]          <block atomic="false" info="">
[01:42:41.666]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:42:41.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:41.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:42:41.673]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:42:41.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:42:41.683]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:41.683]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:42:41.683]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:42:41.683]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:42:41.683]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:42:41.683]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:42:41.693]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:42:41.693]          </block>
[01:42:41.693]          // end if-block "!hasDormant"
[01:42:41.693]        </control>
[01:42:41.693]        // end if-block "isSWJ"
[01:42:41.693]      </control>
[01:42:41.693]      <control if="!isSWJ" while="" timeout="0" info="">
[01:42:41.693]        // if-block "!isSWJ"
[01:42:41.693]          // =>  FALSE
[01:42:41.693]        // skip if-block "!isSWJ"
[01:42:41.693]      </control>
[01:42:41.693]      <block atomic="false" info="">
[01:42:41.693]        ReadDP(0x0);
[01:42:41.703]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:42:41.703]      </block>
[01:42:41.703]      // end if-block "protType == 2"
[01:42:41.703]    </control>
[01:42:41.703]  </sequence>
[01:42:41.703]  
[01:42:41.713]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:42:41.713]  
[01:42:41.713]  <debugvars>
[01:42:41.713]    // Pre-defined
[01:42:41.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:41.713]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:41.713]    __dp=0x00000000
[01:42:41.713]    __ap=0x00000000
[01:42:41.713]    __traceout=0x00000000      (Trace Disabled)
[01:42:41.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:41.713]    __FlashAddr=0x00000000
[01:42:41.713]    __FlashLen=0x00000000
[01:42:41.713]    __FlashArg=0x00000000
[01:42:41.713]    __FlashOp=0x00000000
[01:42:41.713]    __Result=0x00000000
[01:42:41.713]  </debugvars>
[01:42:41.713]  
[01:42:41.713]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:42:41.713]    <block atomic="false" info="">
[01:42:41.713]      __var SW_DP_ABORT       = 0x0;
[01:42:41.713]        // -> [SW_DP_ABORT <= 0x00000000]
[01:42:41.713]      __var DP_CTRL_STAT      = 0x4;
[01:42:41.713]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:42:41.713]      __var DP_SELECT         = 0x8;
[01:42:41.713]        // -> [DP_SELECT <= 0x00000008]
[01:42:41.713]      __var powered_down      = 0;
[01:42:41.713]        // -> [powered_down <= 0x00000000]
[01:42:41.713]      WriteDP(DP_SELECT, 0x00000000);
[01:42:41.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:42:41.723]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:42:41.723]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:42:41.723]        // -> [powered_down <= 0x00000001]
[01:42:41.723]    </block>
[01:42:41.723]    <control if="powered_down" while="" timeout="0" info="">
[01:42:41.723]      // if-block "powered_down"
[01:42:41.723]        // =>  TRUE
[01:42:41.723]      <block atomic="false" info="">
[01:42:41.723]        Message(0, "Debug/System power-up request sent");
[01:42:41.723]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:42:41.723]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:42:41.723]      </block>
[01:42:41.723]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:42:41.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:42:41.733]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:42:41.733]        // while-condition  =>  FALSE
[01:42:41.733]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:42:41.733]      </control>
[01:42:41.733]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:42:41.733]        // if-block "(__protocol & 0xFFFF) == 1"
[01:42:41.733]          // =>  FALSE
[01:42:41.733]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:42:41.733]      </control>
[01:42:41.733]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:42:41.733]        // if-block "(__protocol & 0xFFFF) == 2"
[01:42:41.733]          // =>  TRUE
[01:42:41.733]        <block atomic="false" info="">
[01:42:41.733]          Message(0, "executing SWD power up");
[01:42:41.733]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:42:41.733]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:42:41.733]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:42:41.743]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:42:41.743]        </block>
[01:42:41.743]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:42:41.743]      </control>
[01:42:41.743]      // end if-block "powered_down"
[01:42:41.743]    </control>
[01:42:41.743]    <block atomic="false" info="">
[01:42:41.743]      __var DEBUG_PORT_VAL    = 0;
[01:42:41.743]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:42:41.743]      __var ACCESS_POINT_VAL  = 0;
[01:42:41.743]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:42:41.743]      __ap = 1; 
[01:42:41.743]        // -> [__ap <= 0x00000001]
[01:42:41.743]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:42:41.753]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:42:41.753]      __ap = 4;
[01:42:41.753]        // -> [__ap <= 0x00000004]
[01:42:41.753]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:42:41.756]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:42:41.756]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:42:41.756]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:42:41.756]    </block>
[01:42:41.756]    <block atomic="false" info="">
[01:42:41.756]      __var nReset = 0x80;
[01:42:41.756]        // -> [nReset <= 0x00000080]
[01:42:41.756]      __var canReadPins = 0;
[01:42:41.756]        // -> [canReadPins <= 0x00000000]
[01:42:41.756]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:42:41.774]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:42:41.774]        // -> [canReadPins <= 0x00000001]
[01:42:41.774]    </block>
[01:42:41.774]    <control if="" while="1" timeout="200" info="">
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.774]      // while-condition  =>  TRUE
[01:42:41.774]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.784]      // while-condition  =>  TRUE
[01:42:41.784]      // while "1"  (timeout="200")
[01:42:41.794]      // while-condition  =>  TRUE
[01:42:41.794]      // while "1"  (timeout="200")
[01:42:41.794]      // while  =>  TIMEOUT
[01:42:41.794]      // end while "1"
[01:42:41.794]    </control>
[01:42:41.794]    <control if="canReadPins" while="" timeout="0" info="">
[01:42:41.794]      // if-block "canReadPins"
[01:42:41.794]        // =>  TRUE
[01:42:41.794]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:42:41.794]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:42:41.794]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:42:41.794]        // while-condition  =>  FALSE
[01:42:41.794]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:42:41.794]      </control>
[01:42:41.794]      // end if-block "canReadPins"
[01:42:41.794]    </control>
[01:42:41.794]    <control if="!canReadPins" while="" timeout="0" info="">
[01:42:41.794]      // if-block "!canReadPins"
[01:42:41.794]        // =>  FALSE
[01:42:41.794]      // skip if-block "!canReadPins"
[01:42:41.794]    </control>
[01:42:41.794]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:42:41.794]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:42:41.794]        // =>  TRUE
[01:42:41.794]      <block atomic="false" info="">
[01:42:41.794]        WriteAP(0x00, 0x190008);
[01:42:41.794]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:42:41.794]        WriteAP(0xF0, 0x01);
[01:42:41.804]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:42:41.804]      </block>
[01:42:41.804]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:42:41.804]    </control>
[01:42:41.804]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:42:41.804]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:42:41.804]        // =>  FALSE
[01:42:41.804]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:42:41.804]    </control>
[01:42:41.804]    <block atomic="false" info="">
[01:42:41.804]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:42:41.804]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:42:41.804]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:42:41.804]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:42:41.804]      __ap = 0; //lets make sure we reset the access point selection
[01:42:41.804]        // -> [__ap <= 0x00000000]
[01:42:41.804]    </block>
[01:42:41.804]  </sequence>
[01:42:41.804]  
[01:42:41.834]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:42:41.834]  
[01:42:41.834]  <debugvars>
[01:42:41.834]    // Pre-defined
[01:42:41.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:42:41.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:42:41.834]    __dp=0x00000000
[01:42:41.834]    __ap=0x00000000
[01:42:41.834]    __traceout=0x00000000      (Trace Disabled)
[01:42:41.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:42:41.834]    __FlashAddr=0x00000000
[01:42:41.834]    __FlashLen=0x00000000
[01:42:41.834]    __FlashArg=0x00000000
[01:42:41.834]    __FlashOp=0x00000000
[01:42:41.834]    __Result=0x00000000
[01:42:41.834]  </debugvars>
[01:42:41.834]  
[01:42:41.834]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:42:41.834]    <block atomic="false" info="">
[01:42:41.834]      __var deviceID = 0;
[01:42:41.834]        // -> [deviceID <= 0x00000000]
[01:42:41.834]      __var version = 0;
[01:42:41.834]        // -> [version <= 0x00000000]
[01:42:41.834]      __var partNum = 0;
[01:42:41.834]        // -> [partNum <= 0x00000000]
[01:42:41.834]      __var manuf = 0;
[01:42:41.834]        // -> [manuf <= 0x00000000]
[01:42:41.834]      __var isMSPM0G1X0X_G3X0X = 0;
[01:42:41.834]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:42:41.834]      __var isProduction = 0;
[01:42:41.834]        // -> [isProduction <= 0x00000000]
[01:42:41.834]      __var continueId = 0;
[01:42:41.834]        // -> [continueId <= 0x00000000]
[01:42:41.834]      deviceID =   Read32(0x41C40004);
[01:42:41.834]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:42:41.834]        // -> [deviceID <= 0x2BB8802F]
[01:42:41.834]      version = deviceID >> 28;
[01:42:41.834]        // -> [version <= 0x00000002]
[01:42:41.834]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:42:41.834]        // -> [partNum <= 0x0000BB88]
[01:42:41.834]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:42:41.834]        // -> [manuf <= 0x00000017]
[01:42:41.834]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:42:41.834]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:42:41.834]      isProduction = (version > 0);
[01:42:41.834]        // -> [isProduction <= 0x00000001]
[01:42:41.834]    </block>
[01:42:41.844]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:42:41.844]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:42:41.844]        // =>  FALSE
[01:42:41.844]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:42:41.844]    </control>
[01:42:41.844]    <control if="continueId == 4" while="" timeout="0" info="">
[01:42:41.844]      // if-block "continueId == 4"
[01:42:41.844]        // =>  FALSE
[01:42:41.844]      // skip if-block "continueId == 4"
[01:42:41.844]    </control>
[01:42:41.844]    <control if="!isProduction" while="" timeout="0" info="">
[01:42:41.844]      // if-block "!isProduction"
[01:42:41.844]        // =>  FALSE
[01:42:41.844]      // skip if-block "!isProduction"
[01:42:41.844]    </control>
[01:42:41.844]  </sequence>
[01:42:41.844]  
[01:43:36.908]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:43:36.908]  
[01:43:36.908]  <debugvars>
[01:43:36.908]    // Pre-defined
[01:43:36.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:43:36.908]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:43:36.908]    __dp=0x00000000
[01:43:36.908]    __ap=0x00000000
[01:43:36.908]    __traceout=0x00000000      (Trace Disabled)
[01:43:36.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:43:36.908]    __FlashAddr=0x00000000
[01:43:36.908]    __FlashLen=0x00000000
[01:43:36.908]    __FlashArg=0x00000000
[01:43:36.908]    __FlashOp=0x00000000
[01:43:36.908]    __Result=0x00000000
[01:43:36.908]  </debugvars>
[01:43:36.908]  
[01:43:36.908]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:43:36.908]    <block atomic="false" info="">
[01:43:36.908]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:43:36.908]        // -> [isSWJ <= 0x00000001]
[01:43:36.908]      __var hasDormant = __protocol & 0x00020000;
[01:43:36.908]        // -> [hasDormant <= 0x00000000]
[01:43:36.908]      __var protType   = __protocol & 0x0000FFFF;
[01:43:36.908]        // -> [protType <= 0x00000002]
[01:43:36.908]    </block>
[01:43:36.908]    <control if="protType == 1" while="" timeout="0" info="">
[01:43:36.908]      // if-block "protType == 1"
[01:43:36.908]        // =>  FALSE
[01:43:36.908]      // skip if-block "protType == 1"
[01:43:36.908]    </control>
[01:43:36.908]    <control if="protType == 2" while="" timeout="0" info="">
[01:43:36.908]      // if-block "protType == 2"
[01:43:36.908]        // =>  TRUE
[01:43:36.908]      <control if="isSWJ" while="" timeout="0" info="">
[01:43:36.908]        // if-block "isSWJ"
[01:43:36.908]          // =>  TRUE
[01:43:36.908]        <control if="hasDormant" while="" timeout="0" info="">
[01:43:36.908]          // if-block "hasDormant"
[01:43:36.908]            // =>  FALSE
[01:43:36.908]          // skip if-block "hasDormant"
[01:43:36.908]        </control>
[01:43:36.908]        <control if="!hasDormant" while="" timeout="0" info="">
[01:43:36.908]          // if-block "!hasDormant"
[01:43:36.908]            // =>  TRUE
[01:43:36.908]          <block atomic="false" info="">
[01:43:36.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:43:36.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:43:36.922]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:43:36.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:43:36.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:43:36.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:43:36.925]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:43:36.927]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:43:36.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:43:36.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:43:36.930]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:43:36.931]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:43:36.931]          </block>
[01:43:36.931]          // end if-block "!hasDormant"
[01:43:36.931]        </control>
[01:43:36.931]        // end if-block "isSWJ"
[01:43:36.931]      </control>
[01:43:36.931]      <control if="!isSWJ" while="" timeout="0" info="">
[01:43:36.931]        // if-block "!isSWJ"
[01:43:36.931]          // =>  FALSE
[01:43:36.931]        // skip if-block "!isSWJ"
[01:43:36.931]      </control>
[01:43:36.931]      <block atomic="false" info="">
[01:43:36.934]        ReadDP(0x0);
[01:43:36.939]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:43:36.939]      </block>
[01:43:36.939]      // end if-block "protType == 2"
[01:43:36.939]    </control>
[01:43:36.939]  </sequence>
[01:43:36.940]  
[01:43:36.943]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:43:36.943]  
[01:43:36.943]  <debugvars>
[01:43:36.943]    // Pre-defined
[01:43:36.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:43:36.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:43:36.943]    __dp=0x00000000
[01:43:36.943]    __ap=0x00000000
[01:43:36.943]    __traceout=0x00000000      (Trace Disabled)
[01:43:36.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:43:36.946]    __FlashAddr=0x00000000
[01:43:36.946]    __FlashLen=0x00000000
[01:43:36.946]    __FlashArg=0x00000000
[01:43:36.946]    __FlashOp=0x00000000
[01:43:36.946]    __Result=0x00000000
[01:43:36.946]  </debugvars>
[01:43:36.946]  
[01:43:36.946]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:43:36.946]    <block atomic="false" info="">
[01:43:36.947]      __var SW_DP_ABORT       = 0x0;
[01:43:36.947]        // -> [SW_DP_ABORT <= 0x00000000]
[01:43:36.947]      __var DP_CTRL_STAT      = 0x4;
[01:43:36.947]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:43:36.947]      __var DP_SELECT         = 0x8;
[01:43:36.947]        // -> [DP_SELECT <= 0x00000008]
[01:43:36.947]      __var powered_down      = 0;
[01:43:36.947]        // -> [powered_down <= 0x00000000]
[01:43:36.947]      WriteDP(DP_SELECT, 0x00000000);
[01:43:36.949]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:43:36.949]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:43:36.952]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:43:36.952]        // -> [powered_down <= 0x00000001]
[01:43:36.952]    </block>
[01:43:36.952]    <control if="powered_down" while="" timeout="0" info="">
[01:43:36.952]      // if-block "powered_down"
[01:43:36.952]        // =>  TRUE
[01:43:36.952]      <block atomic="false" info="">
[01:43:36.952]        Message(0, "Debug/System power-up request sent");
[01:43:36.959]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:43:36.959]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:43:36.959]      </block>
[01:43:36.959]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:43:36.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:43:36.965]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:43:36.965]        // while-condition  =>  FALSE
[01:43:36.965]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:43:36.965]      </control>
[01:43:36.965]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:43:36.965]        // if-block "(__protocol & 0xFFFF) == 1"
[01:43:36.965]          // =>  FALSE
[01:43:36.965]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:43:36.965]      </control>
[01:43:36.965]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:43:36.965]        // if-block "(__protocol & 0xFFFF) == 2"
[01:43:36.965]          // =>  TRUE
[01:43:36.965]        <block atomic="false" info="">
[01:43:36.965]          Message(0, "executing SWD power up");
[01:43:36.967]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:43:36.970]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:43:36.970]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:43:36.973]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:43:36.973]        </block>
[01:43:36.973]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:43:36.973]      </control>
[01:43:36.973]      // end if-block "powered_down"
[01:43:36.973]    </control>
[01:43:36.973]    <block atomic="false" info="">
[01:43:36.973]      __var DEBUG_PORT_VAL    = 0;
[01:43:36.973]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:43:36.973]      __var ACCESS_POINT_VAL  = 0;
[01:43:36.973]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:43:36.973]      __ap = 1; 
[01:43:36.974]        // -> [__ap <= 0x00000001]
[01:43:36.974]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:43:36.974]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:43:36.974]      __ap = 4;
[01:43:36.974]        // -> [__ap <= 0x00000004]
[01:43:36.974]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:43:36.982]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:43:36.982]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:43:36.982]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:43:36.983]    </block>
[01:43:36.983]    <block atomic="false" info="">
[01:43:36.983]      __var nReset = 0x80;
[01:43:36.983]        // -> [nReset <= 0x00000080]
[01:43:36.983]      __var canReadPins = 0;
[01:43:36.983]        // -> [canReadPins <= 0x00000000]
[01:43:36.983]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:43:36.987]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:43:36.987]        // -> [canReadPins <= 0x00000001]
[01:43:36.987]    </block>
[01:43:36.987]    <control if="" while="1" timeout="200" info="">
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.987]      // while-condition  =>  TRUE
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.987]      // while-condition  =>  TRUE
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.987]      // while-condition  =>  TRUE
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.987]      // while-condition  =>  TRUE
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.987]      // while-condition  =>  TRUE
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.987]      // while-condition  =>  TRUE
[01:43:36.987]      // while "1"  (timeout="200")
[01:43:36.990]      // while-condition  =>  TRUE
[01:43:36.990]      // while "1"  (timeout="200")
[01:43:36.990]      // while  =>  TIMEOUT
[01:43:36.990]      // end while "1"
[01:43:36.990]    </control>
[01:43:36.990]    <control if="canReadPins" while="" timeout="0" info="">
[01:43:36.990]      // if-block "canReadPins"
[01:43:36.990]        // =>  TRUE
[01:43:36.990]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:43:36.990]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:43:36.992]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:43:36.992]        // while-condition  =>  FALSE
[01:43:36.992]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:43:36.992]      </control>
[01:43:36.992]      // end if-block "canReadPins"
[01:43:36.992]    </control>
[01:43:36.992]    <control if="!canReadPins" while="" timeout="0" info="">
[01:43:36.992]      // if-block "!canReadPins"
[01:43:36.994]        // =>  FALSE
[01:43:36.994]      // skip if-block "!canReadPins"
[01:43:36.994]    </control>
[01:43:36.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:43:36.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:43:36.994]        // =>  TRUE
[01:43:36.994]      <block atomic="false" info="">
[01:43:36.994]        WriteAP(0x00, 0x190008);
[01:43:36.995]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:43:36.995]        WriteAP(0xF0, 0x01);
[01:43:36.999]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:43:36.999]      </block>
[01:43:36.999]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:43:36.999]    </control>
[01:43:36.999]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:43:36.999]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:43:36.999]        // =>  FALSE
[01:43:37.000]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:43:37.000]    </control>
[01:43:37.000]    <block atomic="false" info="">
[01:43:37.000]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:43:37.004]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:43:37.004]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:43:37.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:43:37.006]      __ap = 0; //lets make sure we reset the access point selection
[01:43:37.006]        // -> [__ap <= 0x00000000]
[01:43:37.006]    </block>
[01:43:37.006]  </sequence>
[01:43:37.006]  
[01:43:37.037]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:43:37.037]  
[01:43:37.037]  <debugvars>
[01:43:37.037]    // Pre-defined
[01:43:37.037]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:43:37.037]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:43:37.037]    __dp=0x00000000
[01:43:37.037]    __ap=0x00000000
[01:43:37.037]    __traceout=0x00000000      (Trace Disabled)
[01:43:37.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:43:37.037]    __FlashAddr=0x00000000
[01:43:37.037]    __FlashLen=0x00000000
[01:43:37.037]    __FlashArg=0x00000000
[01:43:37.037]    __FlashOp=0x00000000
[01:43:37.037]    __Result=0x00000000
[01:43:37.037]  </debugvars>
[01:43:37.037]  
[01:43:37.037]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:43:37.037]    <block atomic="false" info="">
[01:43:37.037]      __var deviceID = 0;
[01:43:37.039]        // -> [deviceID <= 0x00000000]
[01:43:37.039]      __var version = 0;
[01:43:37.039]        // -> [version <= 0x00000000]
[01:43:37.039]      __var partNum = 0;
[01:43:37.039]        // -> [partNum <= 0x00000000]
[01:43:37.039]      __var manuf = 0;
[01:43:37.039]        // -> [manuf <= 0x00000000]
[01:43:37.039]      __var isMSPM0G1X0X_G3X0X = 0;
[01:43:37.039]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:43:37.040]      __var isProduction = 0;
[01:43:37.040]        // -> [isProduction <= 0x00000000]
[01:43:37.040]      __var continueId = 0;
[01:43:37.040]        // -> [continueId <= 0x00000000]
[01:43:37.040]      deviceID =   Read32(0x41C40004);
[01:43:37.044]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:43:37.044]        // -> [deviceID <= 0x2BB8802F]
[01:43:37.044]      version = deviceID >> 28;
[01:43:37.044]        // -> [version <= 0x00000002]
[01:43:37.044]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:43:37.044]        // -> [partNum <= 0x0000BB88]
[01:43:37.044]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:43:37.044]        // -> [manuf <= 0x00000017]
[01:43:37.044]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:43:37.044]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:43:37.044]      isProduction = (version > 0);
[01:43:37.044]        // -> [isProduction <= 0x00000001]
[01:43:37.044]    </block>
[01:43:37.044]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:43:37.044]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:43:37.044]        // =>  FALSE
[01:43:37.044]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:43:37.044]    </control>
[01:43:37.044]    <control if="continueId == 4" while="" timeout="0" info="">
[01:43:37.044]      // if-block "continueId == 4"
[01:43:37.044]        // =>  FALSE
[01:43:37.044]      // skip if-block "continueId == 4"
[01:43:37.044]    </control>
[01:43:37.044]    <control if="!isProduction" while="" timeout="0" info="">
[01:43:37.044]      // if-block "!isProduction"
[01:43:37.044]        // =>  FALSE
[01:43:37.044]      // skip if-block "!isProduction"
[01:43:37.044]    </control>
[01:43:37.044]  </sequence>
[01:43:37.044]  
[01:45:08.423]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:45:08.423]  
[01:45:08.437]  <debugvars>
[01:45:08.437]    // Pre-defined
[01:45:08.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:45:08.437]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:45:08.437]    __dp=0x00000000
[01:45:08.437]    __ap=0x00000000
[01:45:08.437]    __traceout=0x00000000      (Trace Disabled)
[01:45:08.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:45:08.437]    __FlashAddr=0x00000000
[01:45:08.437]    __FlashLen=0x00000000
[01:45:08.437]    __FlashArg=0x00000000
[01:45:08.437]    __FlashOp=0x00000000
[01:45:08.437]    __Result=0x00000000
[01:45:08.437]  </debugvars>
[01:45:08.437]  
[01:45:08.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:45:08.437]    <block atomic="false" info="">
[01:45:08.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:45:08.437]        // -> [isSWJ <= 0x00000001]
[01:45:08.437]      __var hasDormant = __protocol & 0x00020000;
[01:45:08.437]        // -> [hasDormant <= 0x00000000]
[01:45:08.437]      __var protType   = __protocol & 0x0000FFFF;
[01:45:08.439]        // -> [protType <= 0x00000002]
[01:45:08.439]    </block>
[01:45:08.439]    <control if="protType == 1" while="" timeout="0" info="">
[01:45:08.439]      // if-block "protType == 1"
[01:45:08.439]        // =>  FALSE
[01:45:08.439]      // skip if-block "protType == 1"
[01:45:08.439]    </control>
[01:45:08.439]    <control if="protType == 2" while="" timeout="0" info="">
[01:45:08.439]      // if-block "protType == 2"
[01:45:08.439]        // =>  TRUE
[01:45:08.439]      <control if="isSWJ" while="" timeout="0" info="">
[01:45:08.439]        // if-block "isSWJ"
[01:45:08.439]          // =>  TRUE
[01:45:08.441]        <control if="hasDormant" while="" timeout="0" info="">
[01:45:08.441]          // if-block "hasDormant"
[01:45:08.441]            // =>  FALSE
[01:45:08.441]          // skip if-block "hasDormant"
[01:45:08.441]        </control>
[01:45:08.441]        <control if="!hasDormant" while="" timeout="0" info="">
[01:45:08.441]          // if-block "!hasDormant"
[01:45:08.441]            // =>  TRUE
[01:45:08.441]          <block atomic="false" info="">
[01:45:08.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:45:08.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:45:08.444]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:45:08.444]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:45:08.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:45:08.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:45:08.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:45:08.453]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:45:08.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:45:08.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:45:08.462]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:45:08.464]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:45:08.464]          </block>
[01:45:08.464]          // end if-block "!hasDormant"
[01:45:08.464]        </control>
[01:45:08.464]        // end if-block "isSWJ"
[01:45:08.464]      </control>
[01:45:08.464]      <control if="!isSWJ" while="" timeout="0" info="">
[01:45:08.464]        // if-block "!isSWJ"
[01:45:08.464]          // =>  FALSE
[01:45:08.464]        // skip if-block "!isSWJ"
[01:45:08.464]      </control>
[01:45:08.473]      <block atomic="false" info="">
[01:45:08.473]        ReadDP(0x0);
[01:45:08.473]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:45:08.473]      </block>
[01:45:08.473]      // end if-block "protType == 2"
[01:45:08.473]    </control>
[01:45:08.473]  </sequence>
[01:45:08.473]  
[01:45:08.476]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:45:08.476]  
[01:45:08.476]  <debugvars>
[01:45:08.476]    // Pre-defined
[01:45:08.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:45:08.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:45:08.476]    __dp=0x00000000
[01:45:08.476]    __ap=0x00000000
[01:45:08.476]    __traceout=0x00000000      (Trace Disabled)
[01:45:08.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:45:08.476]    __FlashAddr=0x00000000
[01:45:08.476]    __FlashLen=0x00000000
[01:45:08.476]    __FlashArg=0x00000000
[01:45:08.476]    __FlashOp=0x00000000
[01:45:08.476]    __Result=0x00000000
[01:45:08.476]  </debugvars>
[01:45:08.476]  
[01:45:08.476]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:45:08.476]    <block atomic="false" info="">
[01:45:08.476]      __var SW_DP_ABORT       = 0x0;
[01:45:08.476]        // -> [SW_DP_ABORT <= 0x00000000]
[01:45:08.476]      __var DP_CTRL_STAT      = 0x4;
[01:45:08.476]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:45:08.476]      __var DP_SELECT         = 0x8;
[01:45:08.476]        // -> [DP_SELECT <= 0x00000008]
[01:45:08.476]      __var powered_down      = 0;
[01:45:08.476]        // -> [powered_down <= 0x00000000]
[01:45:08.481]      WriteDP(DP_SELECT, 0x00000000);
[01:45:08.481]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:45:08.481]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:45:08.484]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:45:08.484]        // -> [powered_down <= 0x00000001]
[01:45:08.484]    </block>
[01:45:08.484]    <control if="powered_down" while="" timeout="0" info="">
[01:45:08.484]      // if-block "powered_down"
[01:45:08.484]        // =>  TRUE
[01:45:08.484]      <block atomic="false" info="">
[01:45:08.484]        Message(0, "Debug/System power-up request sent");
[01:45:08.484]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:45:08.484]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:45:08.484]      </block>
[01:45:08.484]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:45:08.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:45:08.484]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:45:08.484]        // while-condition  =>  FALSE
[01:45:08.484]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:45:08.484]      </control>
[01:45:08.484]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:45:08.484]        // if-block "(__protocol & 0xFFFF) == 1"
[01:45:08.484]          // =>  FALSE
[01:45:08.484]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:45:08.484]      </control>
[01:45:08.484]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:45:08.484]        // if-block "(__protocol & 0xFFFF) == 2"
[01:45:08.484]          // =>  TRUE
[01:45:08.484]        <block atomic="false" info="">
[01:45:08.484]          Message(0, "executing SWD power up");
[01:45:08.484]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:45:08.493]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:45:08.493]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:45:08.495]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:45:08.495]        </block>
[01:45:08.495]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:45:08.495]      </control>
[01:45:08.495]      // end if-block "powered_down"
[01:45:08.497]    </control>
[01:45:08.497]    <block atomic="false" info="">
[01:45:08.497]      __var DEBUG_PORT_VAL    = 0;
[01:45:08.497]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:45:08.497]      __var ACCESS_POINT_VAL  = 0;
[01:45:08.497]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:45:08.497]      __ap = 1; 
[01:45:08.497]        // -> [__ap <= 0x00000001]
[01:45:08.497]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:45:08.497]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:45:08.497]      __ap = 4;
[01:45:08.497]        // -> [__ap <= 0x00000004]
[01:45:08.497]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:45:08.515]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:45:08.515]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:45:08.515]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:45:08.515]    </block>
[01:45:08.515]    <block atomic="false" info="">
[01:45:08.515]      __var nReset = 0x80;
[01:45:08.515]        // -> [nReset <= 0x00000080]
[01:45:08.515]      __var canReadPins = 0;
[01:45:08.515]        // -> [canReadPins <= 0x00000000]
[01:45:08.515]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:45:08.515]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:45:08.515]        // -> [canReadPins <= 0x00000001]
[01:45:08.515]    </block>
[01:45:08.515]    <control if="" while="1" timeout="200" info="">
[01:45:08.515]      // while "1"  (timeout="200")
[01:45:08.515]      // while-condition  =>  TRUE
[01:45:08.515]      // while "1"  (timeout="200")
[01:45:08.515]      // while-condition  =>  TRUE
[01:45:08.515]      // while "1"  (timeout="200")
[01:45:08.515]      // while-condition  =>  TRUE
[01:45:08.515]      // while "1"  (timeout="200")
[01:45:08.515]      // while-condition  =>  TRUE
[01:45:08.515]      // while "1"  (timeout="200")
[01:45:08.515]      // while-condition  =>  TRUE
[01:45:08.524]      // while "1"  (timeout="200")
[01:45:08.524]      // while  =>  TIMEOUT
[01:45:08.524]      // end while "1"
[01:45:08.524]    </control>
[01:45:08.524]    <control if="canReadPins" while="" timeout="0" info="">
[01:45:08.524]      // if-block "canReadPins"
[01:45:08.524]        // =>  TRUE
[01:45:08.524]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:45:08.524]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:45:08.525]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:45:08.525]        // while-condition  =>  FALSE
[01:45:08.525]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:45:08.525]      </control>
[01:45:08.525]      // end if-block "canReadPins"
[01:45:08.525]    </control>
[01:45:08.525]    <control if="!canReadPins" while="" timeout="0" info="">
[01:45:08.525]      // if-block "!canReadPins"
[01:45:08.525]        // =>  FALSE
[01:45:08.525]      // skip if-block "!canReadPins"
[01:45:08.525]    </control>
[01:45:08.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:45:08.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:45:08.525]        // =>  TRUE
[01:45:08.525]      <block atomic="false" info="">
[01:45:08.525]        WriteAP(0x00, 0x190008);
[01:45:08.534]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:45:08.534]        WriteAP(0xF0, 0x01);
[01:45:08.534]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:45:08.534]      </block>
[01:45:08.534]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:45:08.534]    </control>
[01:45:08.534]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:45:08.534]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:45:08.534]        // =>  FALSE
[01:45:08.534]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:45:08.534]    </control>
[01:45:08.534]    <block atomic="false" info="">
[01:45:08.534]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:45:08.534]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:45:08.534]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:45:08.544]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:45:08.544]      __ap = 0; //lets make sure we reset the access point selection
[01:45:08.544]        // -> [__ap <= 0x00000000]
[01:45:08.544]    </block>
[01:45:08.544]  </sequence>
[01:45:08.544]  
[01:45:08.577]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:45:08.577]  
[01:45:08.577]  <debugvars>
[01:45:08.578]    // Pre-defined
[01:45:08.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:45:08.578]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:45:08.578]    __dp=0x00000000
[01:45:08.578]    __ap=0x00000000
[01:45:08.578]    __traceout=0x00000000      (Trace Disabled)
[01:45:08.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:45:08.578]    __FlashAddr=0x00000000
[01:45:08.578]    __FlashLen=0x00000000
[01:45:08.578]    __FlashArg=0x00000000
[01:45:08.578]    __FlashOp=0x00000000
[01:45:08.578]    __Result=0x00000000
[01:45:08.578]  </debugvars>
[01:45:08.578]  
[01:45:08.578]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:45:08.578]    <block atomic="false" info="">
[01:45:08.578]      __var deviceID = 0;
[01:45:08.578]        // -> [deviceID <= 0x00000000]
[01:45:08.578]      __var version = 0;
[01:45:08.578]        // -> [version <= 0x00000000]
[01:45:08.578]      __var partNum = 0;
[01:45:08.578]        // -> [partNum <= 0x00000000]
[01:45:08.578]      __var manuf = 0;
[01:45:08.578]        // -> [manuf <= 0x00000000]
[01:45:08.578]      __var isMSPM0G1X0X_G3X0X = 0;
[01:45:08.578]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:45:08.578]      __var isProduction = 0;
[01:45:08.578]        // -> [isProduction <= 0x00000000]
[01:45:08.578]      __var continueId = 0;
[01:45:08.578]        // -> [continueId <= 0x00000000]
[01:45:08.578]      deviceID =   Read32(0x41C40004);
[01:45:08.585]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:45:08.585]        // -> [deviceID <= 0x2BB8802F]
[01:45:08.585]      version = deviceID >> 28;
[01:45:08.585]        // -> [version <= 0x00000002]
[01:45:08.585]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:45:08.585]        // -> [partNum <= 0x0000BB88]
[01:45:08.585]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:45:08.585]        // -> [manuf <= 0x00000017]
[01:45:08.585]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:45:08.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:45:08.585]      isProduction = (version > 0);
[01:45:08.585]        // -> [isProduction <= 0x00000001]
[01:45:08.585]    </block>
[01:45:08.585]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:45:08.585]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:45:08.585]        // =>  FALSE
[01:45:08.585]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:45:08.585]    </control>
[01:45:08.585]    <control if="continueId == 4" while="" timeout="0" info="">
[01:45:08.585]      // if-block "continueId == 4"
[01:45:08.585]        // =>  FALSE
[01:45:08.585]      // skip if-block "continueId == 4"
[01:45:08.585]    </control>
[01:45:08.585]    <control if="!isProduction" while="" timeout="0" info="">
[01:45:08.585]      // if-block "!isProduction"
[01:45:08.585]        // =>  FALSE
[01:45:08.585]      // skip if-block "!isProduction"
[01:45:08.585]    </control>
[01:45:08.585]  </sequence>
[01:45:08.585]  
[01:45:37.318]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:45:37.318]  
[01:45:37.318]  <debugvars>
[01:45:37.318]    // Pre-defined
[01:45:37.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:45:37.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:45:37.318]    __dp=0x00000000
[01:45:37.318]    __ap=0x00000000
[01:45:37.318]    __traceout=0x00000000      (Trace Disabled)
[01:45:37.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:45:37.318]    __FlashAddr=0x00000000
[01:45:37.318]    __FlashLen=0x00000000
[01:45:37.318]    __FlashArg=0x00000000
[01:45:37.318]    __FlashOp=0x00000000
[01:45:37.318]    __Result=0x00000000
[01:45:37.318]  </debugvars>
[01:45:37.318]  
[01:45:37.318]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:45:37.321]    <block atomic="false" info="">
[01:45:37.321]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:45:37.321]        // -> [isSWJ <= 0x00000001]
[01:45:37.321]      __var hasDormant = __protocol & 0x00020000;
[01:45:37.321]        // -> [hasDormant <= 0x00000000]
[01:45:37.321]      __var protType   = __protocol & 0x0000FFFF;
[01:45:37.321]        // -> [protType <= 0x00000002]
[01:45:37.321]    </block>
[01:45:37.321]    <control if="protType == 1" while="" timeout="0" info="">
[01:45:37.321]      // if-block "protType == 1"
[01:45:37.321]        // =>  FALSE
[01:45:37.322]      // skip if-block "protType == 1"
[01:45:37.322]    </control>
[01:45:37.322]    <control if="protType == 2" while="" timeout="0" info="">
[01:45:37.322]      // if-block "protType == 2"
[01:45:37.322]        // =>  TRUE
[01:45:37.322]      <control if="isSWJ" while="" timeout="0" info="">
[01:45:37.323]        // if-block "isSWJ"
[01:45:37.323]          // =>  TRUE
[01:45:37.323]        <control if="hasDormant" while="" timeout="0" info="">
[01:45:37.323]          // if-block "hasDormant"
[01:45:37.323]            // =>  FALSE
[01:45:37.323]          // skip if-block "hasDormant"
[01:45:37.323]        </control>
[01:45:37.323]        <control if="!hasDormant" while="" timeout="0" info="">
[01:45:37.323]          // if-block "!hasDormant"
[01:45:37.323]            // =>  TRUE
[01:45:37.323]          <block atomic="false" info="">
[01:45:37.323]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:45:37.325]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:45:37.325]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:45:37.326]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:45:37.326]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:45:37.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:45:37.331]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:45:37.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:45:37.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:45:37.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:45:37.340]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:45:37.342]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:45:37.342]          </block>
[01:45:37.342]          // end if-block "!hasDormant"
[01:45:37.342]        </control>
[01:45:37.342]        // end if-block "isSWJ"
[01:45:37.342]      </control>
[01:45:37.342]      <control if="!isSWJ" while="" timeout="0" info="">
[01:45:37.342]        // if-block "!isSWJ"
[01:45:37.342]          // =>  FALSE
[01:45:37.342]        // skip if-block "!isSWJ"
[01:45:37.342]      </control>
[01:45:37.342]      <block atomic="false" info="">
[01:45:37.342]        ReadDP(0x0);
[01:45:37.342]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:45:37.342]      </block>
[01:45:37.342]      // end if-block "protType == 2"
[01:45:37.342]    </control>
[01:45:37.342]  </sequence>
[01:45:37.342]  
[01:45:37.342]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:45:37.342]  
[01:45:37.342]  <debugvars>
[01:45:37.342]    // Pre-defined
[01:45:37.342]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:45:37.342]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:45:37.342]    __dp=0x00000000
[01:45:37.342]    __ap=0x00000000
[01:45:37.342]    __traceout=0x00000000      (Trace Disabled)
[01:45:37.342]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:45:37.342]    __FlashAddr=0x00000000
[01:45:37.342]    __FlashLen=0x00000000
[01:45:37.342]    __FlashArg=0x00000000
[01:45:37.342]    __FlashOp=0x00000000
[01:45:37.342]    __Result=0x00000000
[01:45:37.342]  </debugvars>
[01:45:37.342]  
[01:45:37.342]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:45:37.342]    <block atomic="false" info="">
[01:45:37.351]      __var SW_DP_ABORT       = 0x0;
[01:45:37.351]        // -> [SW_DP_ABORT <= 0x00000000]
[01:45:37.351]      __var DP_CTRL_STAT      = 0x4;
[01:45:37.351]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:45:37.351]      __var DP_SELECT         = 0x8;
[01:45:37.351]        // -> [DP_SELECT <= 0x00000008]
[01:45:37.351]      __var powered_down      = 0;
[01:45:37.351]        // -> [powered_down <= 0x00000000]
[01:45:37.351]      WriteDP(DP_SELECT, 0x00000000);
[01:45:37.354]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:45:37.354]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:45:37.355]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:45:37.355]        // -> [powered_down <= 0x00000001]
[01:45:37.355]    </block>
[01:45:37.355]    <control if="powered_down" while="" timeout="0" info="">
[01:45:37.355]      // if-block "powered_down"
[01:45:37.355]        // =>  TRUE
[01:45:37.355]      <block atomic="false" info="">
[01:45:37.355]        Message(0, "Debug/System power-up request sent");
[01:45:37.355]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:45:37.357]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:45:37.357]      </block>
[01:45:37.357]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:45:37.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:45:37.362]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:45:37.362]        // while-condition  =>  FALSE
[01:45:37.362]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:45:37.362]      </control>
[01:45:37.362]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:45:37.362]        // if-block "(__protocol & 0xFFFF) == 1"
[01:45:37.362]          // =>  FALSE
[01:45:37.362]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:45:37.362]      </control>
[01:45:37.362]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:45:37.362]        // if-block "(__protocol & 0xFFFF) == 2"
[01:45:37.362]          // =>  TRUE
[01:45:37.362]        <block atomic="false" info="">
[01:45:37.362]          Message(0, "executing SWD power up");
[01:45:37.362]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:45:37.366]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:45:37.366]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:45:37.368]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:45:37.368]        </block>
[01:45:37.368]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:45:37.368]      </control>
[01:45:37.368]      // end if-block "powered_down"
[01:45:37.368]    </control>
[01:45:37.368]    <block atomic="false" info="">
[01:45:37.369]      __var DEBUG_PORT_VAL    = 0;
[01:45:37.369]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:45:37.369]      __var ACCESS_POINT_VAL  = 0;
[01:45:37.369]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:45:37.369]      __ap = 1; 
[01:45:37.369]        // -> [__ap <= 0x00000001]
[01:45:37.369]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:45:37.374]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:45:37.374]      __ap = 4;
[01:45:37.374]        // -> [__ap <= 0x00000004]
[01:45:37.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:45:37.378]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:45:37.378]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:45:37.378]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:45:37.378]    </block>
[01:45:37.378]    <block atomic="false" info="">
[01:45:37.378]      __var nReset = 0x80;
[01:45:37.378]        // -> [nReset <= 0x00000080]
[01:45:37.378]      __var canReadPins = 0;
[01:45:37.378]        // -> [canReadPins <= 0x00000000]
[01:45:37.378]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:45:37.380]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:45:37.380]        // -> [canReadPins <= 0x00000001]
[01:45:37.380]    </block>
[01:45:37.380]    <control if="" while="1" timeout="200" info="">
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.380]      // while-condition  =>  TRUE
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.380]      // while-condition  =>  TRUE
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.380]      // while-condition  =>  TRUE
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.380]      // while-condition  =>  TRUE
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.380]      // while-condition  =>  TRUE
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.380]      // while-condition  =>  TRUE
[01:45:37.380]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.382]      // while "1"  (timeout="200")
[01:45:37.382]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.385]      // while-condition  =>  TRUE
[01:45:37.385]      // while "1"  (timeout="200")
[01:45:37.389]      // while-condition  =>  TRUE
[01:45:37.389]      // while "1"  (timeout="200")
[01:45:37.389]      // while-condition  =>  TRUE
[01:45:37.389]      // while "1"  (timeout="200")
[01:45:37.389]      // while-condition  =>  TRUE
[01:45:37.389]      // while "1"  (timeout="200")
[01:45:37.389]      // while-condition  =>  TRUE
[01:45:37.389]      // while "1"  (timeout="200")
[01:45:37.389]      // while-condition  =>  TRUE
[01:45:37.389]      // while "1"  (timeout="200")
[01:45:37.389]      // while-condition  =>  TRUE
[01:45:37.389]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.390]      // while "1"  (timeout="200")
[01:45:37.390]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.393]      // while-condition  =>  TRUE
[01:45:37.393]      // while "1"  (timeout="200")
[01:45:37.398]      // while-condition  =>  TRUE
[01:45:37.398]      // while "1"  (timeout="200")
[01:45:37.398]      // while  =>  TIMEOUT
[01:45:37.398]      // end while "1"
[01:45:37.398]    </control>
[01:45:37.398]    <control if="canReadPins" while="" timeout="0" info="">
[01:45:37.398]      // if-block "canReadPins"
[01:45:37.398]        // =>  TRUE
[01:45:37.398]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:45:37.398]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:45:37.399]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:45:37.399]        // while-condition  =>  FALSE
[01:45:37.399]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:45:37.399]      </control>
[01:45:37.399]      // end if-block "canReadPins"
[01:45:37.399]    </control>
[01:45:37.399]    <control if="!canReadPins" while="" timeout="0" info="">
[01:45:37.402]      // if-block "!canReadPins"
[01:45:37.402]        // =>  FALSE
[01:45:37.402]      // skip if-block "!canReadPins"
[01:45:37.402]    </control>
[01:45:37.402]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:45:37.402]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:45:37.402]        // =>  TRUE
[01:45:37.402]      <block atomic="false" info="">
[01:45:37.402]        WriteAP(0x00, 0x190008);
[01:45:37.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:45:37.414]        WriteAP(0xF0, 0x01);
[01:45:37.417]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:45:37.417]      </block>
[01:45:37.417]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:45:37.417]    </control>
[01:45:37.417]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:45:37.417]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:45:37.417]        // =>  FALSE
[01:45:37.417]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:45:37.417]    </control>
[01:45:37.417]    <block atomic="false" info="">
[01:45:37.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:45:37.421]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:45:37.421]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:45:37.421]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:45:37.421]      __ap = 0; //lets make sure we reset the access point selection
[01:45:37.421]        // -> [__ap <= 0x00000000]
[01:45:37.421]    </block>
[01:45:37.421]  </sequence>
[01:45:37.421]  
[01:45:37.450]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:45:37.450]  
[01:45:37.450]  <debugvars>
[01:45:37.450]    // Pre-defined
[01:45:37.450]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:45:37.450]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:45:37.450]    __dp=0x00000000
[01:45:37.450]    __ap=0x00000000
[01:45:37.450]    __traceout=0x00000000      (Trace Disabled)
[01:45:37.450]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:45:37.450]    __FlashAddr=0x00000000
[01:45:37.454]    __FlashLen=0x00000000
[01:45:37.454]    __FlashArg=0x00000000
[01:45:37.454]    __FlashOp=0x00000000
[01:45:37.454]    __Result=0x00000000
[01:45:37.454]  </debugvars>
[01:45:37.454]  
[01:45:37.454]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:45:37.454]    <block atomic="false" info="">
[01:45:37.454]      __var deviceID = 0;
[01:45:37.454]        // -> [deviceID <= 0x00000000]
[01:45:37.454]      __var version = 0;
[01:45:37.454]        // -> [version <= 0x00000000]
[01:45:37.454]      __var partNum = 0;
[01:45:37.454]        // -> [partNum <= 0x00000000]
[01:45:37.454]      __var manuf = 0;
[01:45:37.454]        // -> [manuf <= 0x00000000]
[01:45:37.454]      __var isMSPM0G1X0X_G3X0X = 0;
[01:45:37.454]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:45:37.454]      __var isProduction = 0;
[01:45:37.455]        // -> [isProduction <= 0x00000000]
[01:45:37.455]      __var continueId = 0;
[01:45:37.455]        // -> [continueId <= 0x00000000]
[01:45:37.455]      deviceID =   Read32(0x41C40004);
[01:45:37.461]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:45:37.461]        // -> [deviceID <= 0x2BB8802F]
[01:45:37.461]      version = deviceID >> 28;
[01:45:37.461]        // -> [version <= 0x00000002]
[01:45:37.461]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:45:37.461]        // -> [partNum <= 0x0000BB88]
[01:45:37.461]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:45:37.461]        // -> [manuf <= 0x00000017]
[01:45:37.461]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:45:37.461]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:45:37.461]      isProduction = (version > 0);
[01:45:37.461]        // -> [isProduction <= 0x00000001]
[01:45:37.461]    </block>
[01:45:37.461]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:45:37.461]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:45:37.461]        // =>  FALSE
[01:45:37.461]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:45:37.461]    </control>
[01:45:37.461]    <control if="continueId == 4" while="" timeout="0" info="">
[01:45:37.461]      // if-block "continueId == 4"
[01:45:37.461]        // =>  FALSE
[01:45:37.461]      // skip if-block "continueId == 4"
[01:45:37.461]    </control>
[01:45:37.463]    <control if="!isProduction" while="" timeout="0" info="">
[01:45:37.463]      // if-block "!isProduction"
[01:45:37.463]        // =>  FALSE
[01:45:37.463]      // skip if-block "!isProduction"
[01:45:37.463]    </control>
[01:45:37.463]  </sequence>
[01:45:37.463]  
[01:48:34.341]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:48:34.341]  
[01:48:34.351]  <debugvars>
[01:48:34.351]    // Pre-defined
[01:48:34.351]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:34.351]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:48:34.351]    __dp=0x00000000
[01:48:34.351]    __ap=0x00000000
[01:48:34.351]    __traceout=0x00000000      (Trace Disabled)
[01:48:34.351]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:34.351]    __FlashAddr=0x00000000
[01:48:34.351]    __FlashLen=0x00000000
[01:48:34.351]    __FlashArg=0x00000000
[01:48:34.351]    __FlashOp=0x00000000
[01:48:34.351]    __Result=0x00000000
[01:48:34.351]  </debugvars>
[01:48:34.351]  
[01:48:34.351]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:48:34.351]    <block atomic="false" info="">
[01:48:34.351]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:48:34.351]        // -> [isSWJ <= 0x00000001]
[01:48:34.351]      __var hasDormant = __protocol & 0x00020000;
[01:48:34.351]        // -> [hasDormant <= 0x00000000]
[01:48:34.351]      __var protType   = __protocol & 0x0000FFFF;
[01:48:34.351]        // -> [protType <= 0x00000002]
[01:48:34.351]    </block>
[01:48:34.351]    <control if="protType == 1" while="" timeout="0" info="">
[01:48:34.351]      // if-block "protType == 1"
[01:48:34.351]        // =>  FALSE
[01:48:34.351]      // skip if-block "protType == 1"
[01:48:34.351]    </control>
[01:48:34.351]    <control if="protType == 2" while="" timeout="0" info="">
[01:48:34.351]      // if-block "protType == 2"
[01:48:34.351]        // =>  TRUE
[01:48:34.351]      <control if="isSWJ" while="" timeout="0" info="">
[01:48:34.351]        // if-block "isSWJ"
[01:48:34.351]          // =>  TRUE
[01:48:34.351]        <control if="hasDormant" while="" timeout="0" info="">
[01:48:34.351]          // if-block "hasDormant"
[01:48:34.351]            // =>  FALSE
[01:48:34.351]          // skip if-block "hasDormant"
[01:48:34.351]        </control>
[01:48:34.351]        <control if="!hasDormant" while="" timeout="0" info="">
[01:48:34.351]          // if-block "!hasDormant"
[01:48:34.351]            // =>  TRUE
[01:48:34.351]          <block atomic="false" info="">
[01:48:34.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:48:34.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:48:34.351]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:48:34.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:48:34.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:48:34.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:48:34.361]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:48:34.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:48:34.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:48:34.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:48:34.361]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:48:34.371]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:48:34.371]          </block>
[01:48:34.371]          // end if-block "!hasDormant"
[01:48:34.371]        </control>
[01:48:34.371]        // end if-block "isSWJ"
[01:48:34.371]      </control>
[01:48:34.371]      <control if="!isSWJ" while="" timeout="0" info="">
[01:48:34.371]        // if-block "!isSWJ"
[01:48:34.371]          // =>  FALSE
[01:48:34.371]        // skip if-block "!isSWJ"
[01:48:34.371]      </control>
[01:48:34.371]      <block atomic="false" info="">
[01:48:34.371]        ReadDP(0x0);
[01:48:34.371]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:48:34.371]      </block>
[01:48:34.371]      // end if-block "protType == 2"
[01:48:34.371]    </control>
[01:48:34.371]  </sequence>
[01:48:34.371]  
[01:48:34.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:48:34.381]  
[01:48:34.381]  <debugvars>
[01:48:34.381]    // Pre-defined
[01:48:34.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:34.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:48:34.381]    __dp=0x00000000
[01:48:34.381]    __ap=0x00000000
[01:48:34.381]    __traceout=0x00000000      (Trace Disabled)
[01:48:34.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:34.381]    __FlashAddr=0x00000000
[01:48:34.381]    __FlashLen=0x00000000
[01:48:34.381]    __FlashArg=0x00000000
[01:48:34.381]    __FlashOp=0x00000000
[01:48:34.381]    __Result=0x00000000
[01:48:34.381]  </debugvars>
[01:48:34.381]  
[01:48:34.381]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:48:34.381]    <block atomic="false" info="">
[01:48:34.381]      __var SW_DP_ABORT       = 0x0;
[01:48:34.381]        // -> [SW_DP_ABORT <= 0x00000000]
[01:48:34.381]      __var DP_CTRL_STAT      = 0x4;
[01:48:34.381]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:48:34.381]      __var DP_SELECT         = 0x8;
[01:48:34.381]        // -> [DP_SELECT <= 0x00000008]
[01:48:34.381]      __var powered_down      = 0;
[01:48:34.381]        // -> [powered_down <= 0x00000000]
[01:48:34.381]      WriteDP(DP_SELECT, 0x00000000);
[01:48:34.381]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:48:34.391]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:48:34.391]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:48:34.391]        // -> [powered_down <= 0x00000001]
[01:48:34.391]    </block>
[01:48:34.391]    <control if="powered_down" while="" timeout="0" info="">
[01:48:34.391]      // if-block "powered_down"
[01:48:34.391]        // =>  TRUE
[01:48:34.391]      <block atomic="false" info="">
[01:48:34.391]        Message(0, "Debug/System power-up request sent");
[01:48:34.391]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:48:34.391]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:48:34.401]      </block>
[01:48:34.401]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:48:34.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:48:34.401]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:48:34.401]        // while-condition  =>  FALSE
[01:48:34.401]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:48:34.401]      </control>
[01:48:34.401]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:48:34.401]        // if-block "(__protocol & 0xFFFF) == 1"
[01:48:34.401]          // =>  FALSE
[01:48:34.401]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:48:34.401]      </control>
[01:48:34.401]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:48:34.401]        // if-block "(__protocol & 0xFFFF) == 2"
[01:48:34.401]          // =>  TRUE
[01:48:34.401]        <block atomic="false" info="">
[01:48:34.401]          Message(0, "executing SWD power up");
[01:48:34.401]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:48:34.409]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:48:34.409]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:48:34.411]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:48:34.411]        </block>
[01:48:34.411]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:48:34.411]      </control>
[01:48:34.411]      // end if-block "powered_down"
[01:48:34.411]    </control>
[01:48:34.411]    <block atomic="false" info="">
[01:48:34.411]      __var DEBUG_PORT_VAL    = 0;
[01:48:34.411]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:48:34.411]      __var ACCESS_POINT_VAL  = 0;
[01:48:34.411]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:48:34.411]      __ap = 1; 
[01:48:34.411]        // -> [__ap <= 0x00000001]
[01:48:34.411]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:48:34.421]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:48:34.421]      __ap = 4;
[01:48:34.421]        // -> [__ap <= 0x00000004]
[01:48:34.421]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:48:34.421]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:48:34.421]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:48:34.421]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:48:34.421]    </block>
[01:48:34.421]    <block atomic="false" info="">
[01:48:34.421]      __var nReset = 0x80;
[01:48:34.421]        // -> [nReset <= 0x00000080]
[01:48:34.421]      __var canReadPins = 0;
[01:48:34.421]        // -> [canReadPins <= 0x00000000]
[01:48:34.421]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:48:34.431]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:48:34.431]        // -> [canReadPins <= 0x00000001]
[01:48:34.431]    </block>
[01:48:34.431]    <control if="" while="1" timeout="200" info="">
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.431]      // while-condition  =>  TRUE
[01:48:34.431]      // while "1"  (timeout="200")
[01:48:34.441]      // while-condition  =>  TRUE
[01:48:34.441]      // while "1"  (timeout="200")
[01:48:34.441]      // while  =>  TIMEOUT
[01:48:34.441]      // end while "1"
[01:48:34.441]    </control>
[01:48:34.441]    <control if="canReadPins" while="" timeout="0" info="">
[01:48:34.441]      // if-block "canReadPins"
[01:48:34.441]        // =>  TRUE
[01:48:34.441]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:48:34.441]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:48:34.441]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:48:34.441]        // while-condition  =>  FALSE
[01:48:34.441]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:48:34.441]      </control>
[01:48:34.441]      // end if-block "canReadPins"
[01:48:34.441]    </control>
[01:48:34.441]    <control if="!canReadPins" while="" timeout="0" info="">
[01:48:34.441]      // if-block "!canReadPins"
[01:48:34.441]        // =>  FALSE
[01:48:34.441]      // skip if-block "!canReadPins"
[01:48:34.441]    </control>
[01:48:34.441]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:48:34.441]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:48:34.441]        // =>  TRUE
[01:48:34.441]      <block atomic="false" info="">
[01:48:34.441]        WriteAP(0x00, 0x190008);
[01:48:34.451]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:48:34.451]        WriteAP(0xF0, 0x01);
[01:48:34.451]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:48:34.451]      </block>
[01:48:34.451]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:48:34.451]    </control>
[01:48:34.451]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:48:34.451]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:48:34.451]        // =>  FALSE
[01:48:34.451]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:48:34.451]    </control>
[01:48:34.451]    <block atomic="false" info="">
[01:48:34.451]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:48:34.461]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:48:34.461]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:48:34.461]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:48:34.471]      __ap = 0; //lets make sure we reset the access point selection
[01:48:34.471]        // -> [__ap <= 0x00000000]
[01:48:34.471]    </block>
[01:48:34.471]  </sequence>
[01:48:34.471]  
[01:48:34.491]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:48:34.491]  
[01:48:34.491]  <debugvars>
[01:48:34.491]    // Pre-defined
[01:48:34.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:48:34.491]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:48:34.491]    __dp=0x00000000
[01:48:34.491]    __ap=0x00000000
[01:48:34.491]    __traceout=0x00000000      (Trace Disabled)
[01:48:34.491]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:48:34.491]    __FlashAddr=0x00000000
[01:48:34.491]    __FlashLen=0x00000000
[01:48:34.491]    __FlashArg=0x00000000
[01:48:34.491]    __FlashOp=0x00000000
[01:48:34.491]    __Result=0x00000000
[01:48:34.491]  </debugvars>
[01:48:34.491]  
[01:48:34.491]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:48:34.491]    <block atomic="false" info="">
[01:48:34.491]      __var deviceID = 0;
[01:48:34.491]        // -> [deviceID <= 0x00000000]
[01:48:34.491]      __var version = 0;
[01:48:34.491]        // -> [version <= 0x00000000]
[01:48:34.491]      __var partNum = 0;
[01:48:34.491]        // -> [partNum <= 0x00000000]
[01:48:34.491]      __var manuf = 0;
[01:48:34.491]        // -> [manuf <= 0x00000000]
[01:48:34.491]      __var isMSPM0G1X0X_G3X0X = 0;
[01:48:34.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:48:34.491]      __var isProduction = 0;
[01:48:34.491]        // -> [isProduction <= 0x00000000]
[01:48:34.491]      __var continueId = 0;
[01:48:34.491]        // -> [continueId <= 0x00000000]
[01:48:34.491]      deviceID =   Read32(0x41C40004);
[01:48:34.501]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:48:34.501]        // -> [deviceID <= 0x2BB8802F]
[01:48:34.501]      version = deviceID >> 28;
[01:48:34.501]        // -> [version <= 0x00000002]
[01:48:34.501]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:48:34.501]        // -> [partNum <= 0x0000BB88]
[01:48:34.501]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:48:34.501]        // -> [manuf <= 0x00000017]
[01:48:34.501]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:48:34.501]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:48:34.501]      isProduction = (version > 0);
[01:48:34.501]        // -> [isProduction <= 0x00000001]
[01:48:34.501]    </block>
[01:48:34.501]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:48:34.501]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:48:34.501]        // =>  FALSE
[01:48:34.501]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:48:34.501]    </control>
[01:48:34.501]    <control if="continueId == 4" while="" timeout="0" info="">
[01:48:34.501]      // if-block "continueId == 4"
[01:48:34.501]        // =>  FALSE
[01:48:34.501]      // skip if-block "continueId == 4"
[01:48:34.501]    </control>
[01:48:34.501]    <control if="!isProduction" while="" timeout="0" info="">
[01:48:34.509]      // if-block "!isProduction"
[01:48:34.509]        // =>  FALSE
[01:48:34.509]      // skip if-block "!isProduction"
[01:48:34.509]    </control>
[01:48:34.509]  </sequence>
[01:48:34.509]  
[01:49:57.177]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:49:57.177]  
[01:49:57.189]  <debugvars>
[01:49:57.189]    // Pre-defined
[01:49:57.189]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:49:57.189]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:49:57.189]    __dp=0x00000000
[01:49:57.189]    __ap=0x00000000
[01:49:57.189]    __traceout=0x00000000      (Trace Disabled)
[01:49:57.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:49:57.189]    __FlashAddr=0x00000000
[01:49:57.189]    __FlashLen=0x00000000
[01:49:57.189]    __FlashArg=0x00000000
[01:49:57.189]    __FlashOp=0x00000000
[01:49:57.189]    __Result=0x00000000
[01:49:57.189]  </debugvars>
[01:49:57.189]  
[01:49:57.189]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:49:57.189]    <block atomic="false" info="">
[01:49:57.189]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:49:57.189]        // -> [isSWJ <= 0x00000001]
[01:49:57.189]      __var hasDormant = __protocol & 0x00020000;
[01:49:57.189]        // -> [hasDormant <= 0x00000000]
[01:49:57.189]      __var protType   = __protocol & 0x0000FFFF;
[01:49:57.189]        // -> [protType <= 0x00000002]
[01:49:57.189]    </block>
[01:49:57.189]    <control if="protType == 1" while="" timeout="0" info="">
[01:49:57.189]      // if-block "protType == 1"
[01:49:57.189]        // =>  FALSE
[01:49:57.189]      // skip if-block "protType == 1"
[01:49:57.189]    </control>
[01:49:57.189]    <control if="protType == 2" while="" timeout="0" info="">
[01:49:57.189]      // if-block "protType == 2"
[01:49:57.189]        // =>  TRUE
[01:49:57.189]      <control if="isSWJ" while="" timeout="0" info="">
[01:49:57.189]        // if-block "isSWJ"
[01:49:57.189]          // =>  TRUE
[01:49:57.189]        <control if="hasDormant" while="" timeout="0" info="">
[01:49:57.189]          // if-block "hasDormant"
[01:49:57.189]            // =>  FALSE
[01:49:57.189]          // skip if-block "hasDormant"
[01:49:57.189]        </control>
[01:49:57.189]        <control if="!hasDormant" while="" timeout="0" info="">
[01:49:57.189]          // if-block "!hasDormant"
[01:49:57.189]            // =>  TRUE
[01:49:57.189]          <block atomic="false" info="">
[01:49:57.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:49:57.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:49:57.189]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:49:57.189]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:49:57.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:49:57.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:49:57.198]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:49:57.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:49:57.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:49:57.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:49:57.198]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:49:57.208]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:49:57.208]          </block>
[01:49:57.208]          // end if-block "!hasDormant"
[01:49:57.208]        </control>
[01:49:57.208]        // end if-block "isSWJ"
[01:49:57.208]      </control>
[01:49:57.208]      <control if="!isSWJ" while="" timeout="0" info="">
[01:49:57.208]        // if-block "!isSWJ"
[01:49:57.208]          // =>  FALSE
[01:49:57.208]        // skip if-block "!isSWJ"
[01:49:57.208]      </control>
[01:49:57.208]      <block atomic="false" info="">
[01:49:57.208]        ReadDP(0x0);
[01:49:57.208]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:49:57.208]      </block>
[01:49:57.208]      // end if-block "protType == 2"
[01:49:57.208]    </control>
[01:49:57.208]  </sequence>
[01:49:57.208]  
[01:49:57.208]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:49:57.208]  
[01:49:57.208]  <debugvars>
[01:49:57.208]    // Pre-defined
[01:49:57.208]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:49:57.208]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:49:57.208]    __dp=0x00000000
[01:49:57.208]    __ap=0x00000000
[01:49:57.208]    __traceout=0x00000000      (Trace Disabled)
[01:49:57.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:49:57.208]    __FlashAddr=0x00000000
[01:49:57.208]    __FlashLen=0x00000000
[01:49:57.208]    __FlashArg=0x00000000
[01:49:57.208]    __FlashOp=0x00000000
[01:49:57.208]    __Result=0x00000000
[01:49:57.208]  </debugvars>
[01:49:57.208]  
[01:49:57.208]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:49:57.208]    <block atomic="false" info="">
[01:49:57.208]      __var SW_DP_ABORT       = 0x0;
[01:49:57.208]        // -> [SW_DP_ABORT <= 0x00000000]
[01:49:57.208]      __var DP_CTRL_STAT      = 0x4;
[01:49:57.208]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:49:57.208]      __var DP_SELECT         = 0x8;
[01:49:57.208]        // -> [DP_SELECT <= 0x00000008]
[01:49:57.208]      __var powered_down      = 0;
[01:49:57.208]        // -> [powered_down <= 0x00000000]
[01:49:57.208]      WriteDP(DP_SELECT, 0x00000000);
[01:49:57.218]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:49:57.218]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:49:57.218]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:49:57.218]        // -> [powered_down <= 0x00000001]
[01:49:57.218]    </block>
[01:49:57.218]    <control if="powered_down" while="" timeout="0" info="">
[01:49:57.218]      // if-block "powered_down"
[01:49:57.218]        // =>  TRUE
[01:49:57.218]      <block atomic="false" info="">
[01:49:57.218]        Message(0, "Debug/System power-up request sent");
[01:49:57.218]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:49:57.228]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:49:57.228]      </block>
[01:49:57.228]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:49:57.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:49:57.228]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:49:57.228]        // while-condition  =>  FALSE
[01:49:57.228]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:49:57.228]      </control>
[01:49:57.228]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:49:57.228]        // if-block "(__protocol & 0xFFFF) == 1"
[01:49:57.228]          // =>  FALSE
[01:49:57.234]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:49:57.234]      </control>
[01:49:57.234]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:49:57.234]        // if-block "(__protocol & 0xFFFF) == 2"
[01:49:57.234]          // =>  TRUE
[01:49:57.234]        <block atomic="false" info="">
[01:49:57.234]          Message(0, "executing SWD power up");
[01:49:57.234]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:49:57.234]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:49:57.238]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:49:57.238]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:49:57.238]        </block>
[01:49:57.238]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:49:57.238]      </control>
[01:49:57.238]      // end if-block "powered_down"
[01:49:57.238]    </control>
[01:49:57.238]    <block atomic="false" info="">
[01:49:57.238]      __var DEBUG_PORT_VAL    = 0;
[01:49:57.238]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:49:57.238]      __var ACCESS_POINT_VAL  = 0;
[01:49:57.238]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:49:57.238]      __ap = 1; 
[01:49:57.238]        // -> [__ap <= 0x00000001]
[01:49:57.238]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:49:57.238]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:49:57.238]      __ap = 4;
[01:49:57.238]        // -> [__ap <= 0x00000004]
[01:49:57.238]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:49:57.248]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:49:57.248]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:49:57.248]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:49:57.248]    </block>
[01:49:57.248]    <block atomic="false" info="">
[01:49:57.248]      __var nReset = 0x80;
[01:49:57.248]        // -> [nReset <= 0x00000080]
[01:49:57.248]      __var canReadPins = 0;
[01:49:57.248]        // -> [canReadPins <= 0x00000000]
[01:49:57.248]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:49:57.258]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:49:57.258]        // -> [canReadPins <= 0x00000001]
[01:49:57.258]    </block>
[01:49:57.258]    <control if="" while="1" timeout="200" info="">
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.258]      // while-condition  =>  TRUE
[01:49:57.258]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.268]      // while-condition  =>  TRUE
[01:49:57.268]      // while "1"  (timeout="200")
[01:49:57.278]      // while-condition  =>  TRUE
[01:49:57.278]      // while "1"  (timeout="200")
[01:49:57.278]      // while  =>  TIMEOUT
[01:49:57.278]      // end while "1"
[01:49:57.278]    </control>
[01:49:57.278]    <control if="canReadPins" while="" timeout="0" info="">
[01:49:57.278]      // if-block "canReadPins"
[01:49:57.278]        // =>  TRUE
[01:49:57.278]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:49:57.278]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:49:57.278]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:49:57.278]        // while-condition  =>  FALSE
[01:49:57.278]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:49:57.278]      </control>
[01:49:57.278]      // end if-block "canReadPins"
[01:49:57.278]    </control>
[01:49:57.278]    <control if="!canReadPins" while="" timeout="0" info="">
[01:49:57.278]      // if-block "!canReadPins"
[01:49:57.278]        // =>  FALSE
[01:49:57.278]      // skip if-block "!canReadPins"
[01:49:57.278]    </control>
[01:49:57.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:49:57.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:49:57.278]        // =>  TRUE
[01:49:57.278]      <block atomic="false" info="">
[01:49:57.278]        WriteAP(0x00, 0x190008);
[01:49:57.278]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:49:57.278]        WriteAP(0xF0, 0x01);
[01:49:57.288]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:49:57.288]      </block>
[01:49:57.288]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:49:57.288]    </control>
[01:49:57.288]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:49:57.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:49:57.288]        // =>  FALSE
[01:49:57.288]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:49:57.288]    </control>
[01:49:57.288]    <block atomic="false" info="">
[01:49:57.288]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:49:57.288]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:49:57.288]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:49:57.288]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:49:57.288]      __ap = 0; //lets make sure we reset the access point selection
[01:49:57.288]        // -> [__ap <= 0x00000000]
[01:49:57.288]    </block>
[01:49:57.288]  </sequence>
[01:49:57.288]  
[01:49:57.318]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:49:57.318]  
[01:49:57.318]  <debugvars>
[01:49:57.318]    // Pre-defined
[01:49:57.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:49:57.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:49:57.318]    __dp=0x00000000
[01:49:57.318]    __ap=0x00000000
[01:49:57.318]    __traceout=0x00000000      (Trace Disabled)
[01:49:57.318]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:49:57.318]    __FlashAddr=0x00000000
[01:49:57.318]    __FlashLen=0x00000000
[01:49:57.318]    __FlashArg=0x00000000
[01:49:57.318]    __FlashOp=0x00000000
[01:49:57.318]    __Result=0x00000000
[01:49:57.318]  </debugvars>
[01:49:57.318]  
[01:49:57.318]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:49:57.318]    <block atomic="false" info="">
[01:49:57.318]      __var deviceID = 0;
[01:49:57.318]        // -> [deviceID <= 0x00000000]
[01:49:57.318]      __var version = 0;
[01:49:57.318]        // -> [version <= 0x00000000]
[01:49:57.318]      __var partNum = 0;
[01:49:57.318]        // -> [partNum <= 0x00000000]
[01:49:57.318]      __var manuf = 0;
[01:49:57.318]        // -> [manuf <= 0x00000000]
[01:49:57.318]      __var isMSPM0G1X0X_G3X0X = 0;
[01:49:57.318]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:49:57.318]      __var isProduction = 0;
[01:49:57.318]        // -> [isProduction <= 0x00000000]
[01:49:57.318]      __var continueId = 0;
[01:49:57.318]        // -> [continueId <= 0x00000000]
[01:49:57.318]      deviceID =   Read32(0x41C40004);
[01:49:57.328]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:49:57.328]        // -> [deviceID <= 0x2BB8802F]
[01:49:57.328]      version = deviceID >> 28;
[01:49:57.328]        // -> [version <= 0x00000002]
[01:49:57.328]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:49:57.328]        // -> [partNum <= 0x0000BB88]
[01:49:57.328]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:49:57.328]        // -> [manuf <= 0x00000017]
[01:49:57.328]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:49:57.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:49:57.328]      isProduction = (version > 0);
[01:49:57.328]        // -> [isProduction <= 0x00000001]
[01:49:57.328]    </block>
[01:49:57.328]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:49:57.328]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:49:57.328]        // =>  FALSE
[01:49:57.328]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:49:57.328]    </control>
[01:49:57.334]    <control if="continueId == 4" while="" timeout="0" info="">
[01:49:57.334]      // if-block "continueId == 4"
[01:49:57.334]        // =>  FALSE
[01:49:57.334]      // skip if-block "continueId == 4"
[01:49:57.334]    </control>
[01:49:57.334]    <control if="!isProduction" while="" timeout="0" info="">
[01:49:57.334]      // if-block "!isProduction"
[01:49:57.334]        // =>  FALSE
[01:49:57.334]      // skip if-block "!isProduction"
[01:49:57.334]    </control>
[01:49:57.334]  </sequence>
[01:49:57.334]  
[01:50:37.863]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:50:37.863]  
[01:50:37.865]  <debugvars>
[01:50:37.865]    // Pre-defined
[01:50:37.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:50:37.865]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:50:37.865]    __dp=0x00000000
[01:50:37.865]    __ap=0x00000000
[01:50:37.865]    __traceout=0x00000000      (Trace Disabled)
[01:50:37.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:50:37.865]    __FlashAddr=0x00000000
[01:50:37.865]    __FlashLen=0x00000000
[01:50:37.865]    __FlashArg=0x00000000
[01:50:37.865]    __FlashOp=0x00000000
[01:50:37.865]    __Result=0x00000000
[01:50:37.865]  </debugvars>
[01:50:37.865]  
[01:50:37.865]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:50:37.865]    <block atomic="false" info="">
[01:50:37.865]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:50:37.865]        // -> [isSWJ <= 0x00000001]
[01:50:37.865]      __var hasDormant = __protocol & 0x00020000;
[01:50:37.865]        // -> [hasDormant <= 0x00000000]
[01:50:37.865]      __var protType   = __protocol & 0x0000FFFF;
[01:50:37.865]        // -> [protType <= 0x00000002]
[01:50:37.865]    </block>
[01:50:37.865]    <control if="protType == 1" while="" timeout="0" info="">
[01:50:37.865]      // if-block "protType == 1"
[01:50:37.865]        // =>  FALSE
[01:50:37.865]      // skip if-block "protType == 1"
[01:50:37.865]    </control>
[01:50:37.865]    <control if="protType == 2" while="" timeout="0" info="">
[01:50:37.865]      // if-block "protType == 2"
[01:50:37.865]        // =>  TRUE
[01:50:37.865]      <control if="isSWJ" while="" timeout="0" info="">
[01:50:37.865]        // if-block "isSWJ"
[01:50:37.865]          // =>  TRUE
[01:50:37.865]        <control if="hasDormant" while="" timeout="0" info="">
[01:50:37.865]          // if-block "hasDormant"
[01:50:37.865]            // =>  FALSE
[01:50:37.865]          // skip if-block "hasDormant"
[01:50:37.865]        </control>
[01:50:37.870]        <control if="!hasDormant" while="" timeout="0" info="">
[01:50:37.870]          // if-block "!hasDormant"
[01:50:37.871]            // =>  TRUE
[01:50:37.871]          <block atomic="false" info="">
[01:50:37.871]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:50:37.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:50:37.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:50:37.873]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:50:37.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:50:37.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:50:37.873]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:50:37.873]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:50:37.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:50:37.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:50:37.873]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:50:37.880]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:50:37.880]          </block>
[01:50:37.880]          // end if-block "!hasDormant"
[01:50:37.880]        </control>
[01:50:37.880]        // end if-block "isSWJ"
[01:50:37.880]      </control>
[01:50:37.880]      <control if="!isSWJ" while="" timeout="0" info="">
[01:50:37.880]        // if-block "!isSWJ"
[01:50:37.880]          // =>  FALSE
[01:50:37.880]        // skip if-block "!isSWJ"
[01:50:37.880]      </control>
[01:50:37.880]      <block atomic="false" info="">
[01:50:37.880]        ReadDP(0x0);
[01:50:37.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:50:37.883]      </block>
[01:50:37.883]      // end if-block "protType == 2"
[01:50:37.883]    </control>
[01:50:37.883]  </sequence>
[01:50:37.883]  
[01:50:37.883]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:50:37.883]  
[01:50:37.883]  <debugvars>
[01:50:37.883]    // Pre-defined
[01:50:37.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:50:37.883]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:50:37.883]    __dp=0x00000000
[01:50:37.883]    __ap=0x00000000
[01:50:37.883]    __traceout=0x00000000      (Trace Disabled)
[01:50:37.883]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:50:37.883]    __FlashAddr=0x00000000
[01:50:37.883]    __FlashLen=0x00000000
[01:50:37.883]    __FlashArg=0x00000000
[01:50:37.883]    __FlashOp=0x00000000
[01:50:37.883]    __Result=0x00000000
[01:50:37.883]  </debugvars>
[01:50:37.883]  
[01:50:37.883]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:50:37.883]    <block atomic="false" info="">
[01:50:37.883]      __var SW_DP_ABORT       = 0x0;
[01:50:37.883]        // -> [SW_DP_ABORT <= 0x00000000]
[01:50:37.883]      __var DP_CTRL_STAT      = 0x4;
[01:50:37.883]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:50:37.883]      __var DP_SELECT         = 0x8;
[01:50:37.883]        // -> [DP_SELECT <= 0x00000008]
[01:50:37.883]      __var powered_down      = 0;
[01:50:37.883]        // -> [powered_down <= 0x00000000]
[01:50:37.883]      WriteDP(DP_SELECT, 0x00000000);
[01:50:37.891]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:50:37.891]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:50:37.893]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:50:37.893]        // -> [powered_down <= 0x00000001]
[01:50:37.893]    </block>
[01:50:37.893]    <control if="powered_down" while="" timeout="0" info="">
[01:50:37.893]      // if-block "powered_down"
[01:50:37.893]        // =>  TRUE
[01:50:37.893]      <block atomic="false" info="">
[01:50:37.893]        Message(0, "Debug/System power-up request sent");
[01:50:37.893]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:50:37.898]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:50:37.898]      </block>
[01:50:37.898]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:50:37.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:50:37.903]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:50:37.903]        // while-condition  =>  FALSE
[01:50:37.903]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:50:37.903]      </control>
[01:50:37.903]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:50:37.903]        // if-block "(__protocol & 0xFFFF) == 1"
[01:50:37.903]          // =>  FALSE
[01:50:37.903]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:50:37.903]      </control>
[01:50:37.903]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:50:37.903]        // if-block "(__protocol & 0xFFFF) == 2"
[01:50:37.903]          // =>  TRUE
[01:50:37.903]        <block atomic="false" info="">
[01:50:37.903]          Message(0, "executing SWD power up");
[01:50:37.903]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:50:37.903]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:50:37.903]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:50:37.903]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:50:37.903]        </block>
[01:50:37.903]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:50:37.903]      </control>
[01:50:37.903]      // end if-block "powered_down"
[01:50:37.903]    </control>
[01:50:37.911]    <block atomic="false" info="">
[01:50:37.911]      __var DEBUG_PORT_VAL    = 0;
[01:50:37.911]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:50:37.911]      __var ACCESS_POINT_VAL  = 0;
[01:50:37.911]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:50:37.911]      __ap = 1; 
[01:50:37.911]        // -> [__ap <= 0x00000001]
[01:50:37.911]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:50:37.913]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:50:37.913]      __ap = 4;
[01:50:37.913]        // -> [__ap <= 0x00000004]
[01:50:37.913]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:50:37.923]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:50:37.923]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:50:37.923]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:50:37.923]    </block>
[01:50:37.923]    <block atomic="false" info="">
[01:50:37.923]      __var nReset = 0x80;
[01:50:37.923]        // -> [nReset <= 0x00000080]
[01:50:37.923]      __var canReadPins = 0;
[01:50:37.923]        // -> [canReadPins <= 0x00000000]
[01:50:37.923]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:50:37.923]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:50:37.923]        // -> [canReadPins <= 0x00000001]
[01:50:37.923]    </block>
[01:50:37.923]    <control if="" while="1" timeout="200" info="">
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.923]      // while "1"  (timeout="200")
[01:50:37.923]      // while-condition  =>  TRUE
[01:50:37.931]      // while "1"  (timeout="200")
[01:50:37.931]      // while  =>  TIMEOUT
[01:50:37.931]      // end while "1"
[01:50:37.931]    </control>
[01:50:37.931]    <control if="canReadPins" while="" timeout="0" info="">
[01:50:37.931]      // if-block "canReadPins"
[01:50:37.931]        // =>  TRUE
[01:50:37.931]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:50:37.931]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:50:37.933]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:50:37.933]        // while-condition  =>  FALSE
[01:50:37.933]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:50:37.933]      </control>
[01:50:37.933]      // end if-block "canReadPins"
[01:50:37.933]    </control>
[01:50:37.933]    <control if="!canReadPins" while="" timeout="0" info="">
[01:50:37.933]      // if-block "!canReadPins"
[01:50:37.933]        // =>  FALSE
[01:50:37.933]      // skip if-block "!canReadPins"
[01:50:37.933]    </control>
[01:50:37.933]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:50:37.933]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:50:37.933]        // =>  TRUE
[01:50:37.933]      <block atomic="false" info="">
[01:50:37.933]        WriteAP(0x00, 0x190008);
[01:50:37.933]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:50:37.933]        WriteAP(0xF0, 0x01);
[01:50:37.941]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:50:37.941]      </block>
[01:50:37.941]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:50:37.941]    </control>
[01:50:37.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:50:37.943]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:50:37.943]        // =>  FALSE
[01:50:37.943]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:50:37.943]    </control>
[01:50:37.943]    <block atomic="false" info="">
[01:50:37.943]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:50:37.943]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:50:37.943]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:50:37.943]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:50:37.943]      __ap = 0; //lets make sure we reset the access point selection
[01:50:37.943]        // -> [__ap <= 0x00000000]
[01:50:37.943]    </block>
[01:50:37.943]  </sequence>
[01:50:37.943]  
[01:50:37.983]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:50:37.983]  
[01:50:37.983]  <debugvars>
[01:50:37.983]    // Pre-defined
[01:50:37.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:50:37.983]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:50:37.983]    __dp=0x00000000
[01:50:37.983]    __ap=0x00000000
[01:50:37.983]    __traceout=0x00000000      (Trace Disabled)
[01:50:37.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:50:37.983]    __FlashAddr=0x00000000
[01:50:37.983]    __FlashLen=0x00000000
[01:50:37.983]    __FlashArg=0x00000000
[01:50:37.983]    __FlashOp=0x00000000
[01:50:37.983]    __Result=0x00000000
[01:50:37.983]  </debugvars>
[01:50:37.983]  
[01:50:37.983]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:50:37.983]    <block atomic="false" info="">
[01:50:37.983]      __var deviceID = 0;
[01:50:37.983]        // -> [deviceID <= 0x00000000]
[01:50:37.983]      __var version = 0;
[01:50:37.983]        // -> [version <= 0x00000000]
[01:50:37.983]      __var partNum = 0;
[01:50:37.983]        // -> [partNum <= 0x00000000]
[01:50:37.983]      __var manuf = 0;
[01:50:37.983]        // -> [manuf <= 0x00000000]
[01:50:37.983]      __var isMSPM0G1X0X_G3X0X = 0;
[01:50:37.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:50:37.983]      __var isProduction = 0;
[01:50:37.983]        // -> [isProduction <= 0x00000000]
[01:50:37.983]      __var continueId = 0;
[01:50:37.983]        // -> [continueId <= 0x00000000]
[01:50:37.983]      deviceID =   Read32(0x41C40004);
[01:50:37.992]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:50:37.992]        // -> [deviceID <= 0x2BB8802F]
[01:50:37.992]      version = deviceID >> 28;
[01:50:37.993]        // -> [version <= 0x00000002]
[01:50:37.993]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:50:37.993]        // -> [partNum <= 0x0000BB88]
[01:50:37.993]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:50:37.993]        // -> [manuf <= 0x00000017]
[01:50:37.993]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:50:37.993]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:50:37.993]      isProduction = (version > 0);
[01:50:37.993]        // -> [isProduction <= 0x00000001]
[01:50:37.993]    </block>
[01:50:37.993]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:50:37.993]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:50:37.993]        // =>  FALSE
[01:50:37.993]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:50:37.993]    </control>
[01:50:37.993]    <control if="continueId == 4" while="" timeout="0" info="">
[01:50:37.993]      // if-block "continueId == 4"
[01:50:37.993]        // =>  FALSE
[01:50:37.993]      // skip if-block "continueId == 4"
[01:50:37.993]    </control>
[01:50:37.993]    <control if="!isProduction" while="" timeout="0" info="">
[01:50:37.993]      // if-block "!isProduction"
[01:50:37.993]        // =>  FALSE
[01:50:37.993]      // skip if-block "!isProduction"
[01:50:37.993]    </control>
[01:50:37.993]  </sequence>
[01:50:37.993]  
[01:53:07.137]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:53:07.137]  
[01:53:07.151]  <debugvars>
[01:53:07.151]    // Pre-defined
[01:53:07.151]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:07.151]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:07.151]    __dp=0x00000000
[01:53:07.151]    __ap=0x00000000
[01:53:07.151]    __traceout=0x00000000      (Trace Disabled)
[01:53:07.151]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:07.151]    __FlashAddr=0x00000000
[01:53:07.151]    __FlashLen=0x00000000
[01:53:07.151]    __FlashArg=0x00000000
[01:53:07.151]    __FlashOp=0x00000000
[01:53:07.151]    __Result=0x00000000
[01:53:07.151]  </debugvars>
[01:53:07.151]  
[01:53:07.151]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:53:07.151]    <block atomic="false" info="">
[01:53:07.151]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:53:07.151]        // -> [isSWJ <= 0x00000001]
[01:53:07.151]      __var hasDormant = __protocol & 0x00020000;
[01:53:07.151]        // -> [hasDormant <= 0x00000000]
[01:53:07.151]      __var protType   = __protocol & 0x0000FFFF;
[01:53:07.151]        // -> [protType <= 0x00000002]
[01:53:07.151]    </block>
[01:53:07.151]    <control if="protType == 1" while="" timeout="0" info="">
[01:53:07.151]      // if-block "protType == 1"
[01:53:07.151]        // =>  FALSE
[01:53:07.151]      // skip if-block "protType == 1"
[01:53:07.151]    </control>
[01:53:07.151]    <control if="protType == 2" while="" timeout="0" info="">
[01:53:07.151]      // if-block "protType == 2"
[01:53:07.151]        // =>  TRUE
[01:53:07.151]      <control if="isSWJ" while="" timeout="0" info="">
[01:53:07.151]        // if-block "isSWJ"
[01:53:07.151]          // =>  TRUE
[01:53:07.151]        <control if="hasDormant" while="" timeout="0" info="">
[01:53:07.151]          // if-block "hasDormant"
[01:53:07.151]            // =>  FALSE
[01:53:07.151]          // skip if-block "hasDormant"
[01:53:07.151]        </control>
[01:53:07.151]        <control if="!hasDormant" while="" timeout="0" info="">
[01:53:07.151]          // if-block "!hasDormant"
[01:53:07.151]            // =>  TRUE
[01:53:07.151]          <block atomic="false" info="">
[01:53:07.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:53:07.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:07.157]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:53:07.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:53:07.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:53:07.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:07.163]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:53:07.165]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:53:07.165]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:53:07.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:07.167]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:53:07.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:53:07.167]          </block>
[01:53:07.167]          // end if-block "!hasDormant"
[01:53:07.167]        </control>
[01:53:07.167]        // end if-block "isSWJ"
[01:53:07.167]      </control>
[01:53:07.167]      <control if="!isSWJ" while="" timeout="0" info="">
[01:53:07.167]        // if-block "!isSWJ"
[01:53:07.167]          // =>  FALSE
[01:53:07.167]        // skip if-block "!isSWJ"
[01:53:07.167]      </control>
[01:53:07.167]      <block atomic="false" info="">
[01:53:07.167]        ReadDP(0x0);
[01:53:07.167]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:53:07.167]      </block>
[01:53:07.167]      // end if-block "protType == 2"
[01:53:07.167]    </control>
[01:53:07.167]  </sequence>
[01:53:07.167]  
[01:53:07.177]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:53:07.177]  
[01:53:07.177]  <debugvars>
[01:53:07.177]    // Pre-defined
[01:53:07.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:07.177]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:07.177]    __dp=0x00000000
[01:53:07.177]    __ap=0x00000000
[01:53:07.177]    __traceout=0x00000000      (Trace Disabled)
[01:53:07.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:07.177]    __FlashAddr=0x00000000
[01:53:07.177]    __FlashLen=0x00000000
[01:53:07.177]    __FlashArg=0x00000000
[01:53:07.177]    __FlashOp=0x00000000
[01:53:07.177]    __Result=0x00000000
[01:53:07.177]  </debugvars>
[01:53:07.177]  
[01:53:07.177]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:53:07.177]    <block atomic="false" info="">
[01:53:07.177]      __var SW_DP_ABORT       = 0x0;
[01:53:07.177]        // -> [SW_DP_ABORT <= 0x00000000]
[01:53:07.177]      __var DP_CTRL_STAT      = 0x4;
[01:53:07.177]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:53:07.177]      __var DP_SELECT         = 0x8;
[01:53:07.177]        // -> [DP_SELECT <= 0x00000008]
[01:53:07.177]      __var powered_down      = 0;
[01:53:07.177]        // -> [powered_down <= 0x00000000]
[01:53:07.177]      WriteDP(DP_SELECT, 0x00000000);
[01:53:07.177]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:53:07.177]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:53:07.187]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:53:07.187]        // -> [powered_down <= 0x00000001]
[01:53:07.187]    </block>
[01:53:07.187]    <control if="powered_down" while="" timeout="0" info="">
[01:53:07.187]      // if-block "powered_down"
[01:53:07.187]        // =>  TRUE
[01:53:07.187]      <block atomic="false" info="">
[01:53:07.187]        Message(0, "Debug/System power-up request sent");
[01:53:07.187]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:53:07.187]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:53:07.187]      </block>
[01:53:07.187]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:53:07.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:53:07.197]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:53:07.197]        // while-condition  =>  FALSE
[01:53:07.197]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:53:07.197]      </control>
[01:53:07.197]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:53:07.197]        // if-block "(__protocol & 0xFFFF) == 1"
[01:53:07.197]          // =>  FALSE
[01:53:07.197]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:53:07.197]      </control>
[01:53:07.197]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:53:07.197]        // if-block "(__protocol & 0xFFFF) == 2"
[01:53:07.197]          // =>  TRUE
[01:53:07.197]        <block atomic="false" info="">
[01:53:07.197]          Message(0, "executing SWD power up");
[01:53:07.197]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:53:07.197]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:53:07.197]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:53:07.207]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:53:07.207]        </block>
[01:53:07.207]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:53:07.207]      </control>
[01:53:07.207]      // end if-block "powered_down"
[01:53:07.207]    </control>
[01:53:07.207]    <block atomic="false" info="">
[01:53:07.207]      __var DEBUG_PORT_VAL    = 0;
[01:53:07.207]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:53:07.207]      __var ACCESS_POINT_VAL  = 0;
[01:53:07.207]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:53:07.207]      __ap = 1; 
[01:53:07.207]        // -> [__ap <= 0x00000001]
[01:53:07.207]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:53:07.207]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:53:07.207]      __ap = 4;
[01:53:07.207]        // -> [__ap <= 0x00000004]
[01:53:07.207]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:53:07.217]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:53:07.217]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:53:07.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:53:07.217]    </block>
[01:53:07.217]    <block atomic="false" info="">
[01:53:07.217]      __var nReset = 0x80;
[01:53:07.217]        // -> [nReset <= 0x00000080]
[01:53:07.217]      __var canReadPins = 0;
[01:53:07.217]        // -> [canReadPins <= 0x00000000]
[01:53:07.217]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:53:07.227]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:53:07.227]        // -> [canReadPins <= 0x00000001]
[01:53:07.227]    </block>
[01:53:07.227]    <control if="" while="1" timeout="200" info="">
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.227]      // while "1"  (timeout="200")
[01:53:07.227]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.237]      // while-condition  =>  TRUE
[01:53:07.237]      // while "1"  (timeout="200")
[01:53:07.247]      // while-condition  =>  TRUE
[01:53:07.247]      // while "1"  (timeout="200")
[01:53:07.247]      // while  =>  TIMEOUT
[01:53:07.247]      // end while "1"
[01:53:07.247]    </control>
[01:53:07.247]    <control if="canReadPins" while="" timeout="0" info="">
[01:53:07.247]      // if-block "canReadPins"
[01:53:07.247]        // =>  TRUE
[01:53:07.247]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:53:07.247]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:53:07.247]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:53:07.247]        // while-condition  =>  FALSE
[01:53:07.247]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:53:07.247]      </control>
[01:53:07.247]      // end if-block "canReadPins"
[01:53:07.247]    </control>
[01:53:07.247]    <control if="!canReadPins" while="" timeout="0" info="">
[01:53:07.247]      // if-block "!canReadPins"
[01:53:07.247]        // =>  FALSE
[01:53:07.247]      // skip if-block "!canReadPins"
[01:53:07.247]    </control>
[01:53:07.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:53:07.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:53:07.247]        // =>  TRUE
[01:53:07.247]      <block atomic="false" info="">
[01:53:07.247]        WriteAP(0x00, 0x190008);
[01:53:07.257]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:53:07.257]        WriteAP(0xF0, 0x01);
[01:53:07.257]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:53:07.257]      </block>
[01:53:07.257]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:53:07.257]    </control>
[01:53:07.257]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:53:07.257]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:53:07.257]        // =>  FALSE
[01:53:07.257]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:53:07.257]    </control>
[01:53:07.257]    <block atomic="false" info="">
[01:53:07.257]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:53:07.267]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:53:07.267]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:53:07.267]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:53:07.267]      __ap = 0; //lets make sure we reset the access point selection
[01:53:07.267]        // -> [__ap <= 0x00000000]
[01:53:07.267]    </block>
[01:53:07.267]  </sequence>
[01:53:07.267]  
[01:53:07.297]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:53:07.297]  
[01:53:07.297]  <debugvars>
[01:53:07.297]    // Pre-defined
[01:53:07.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:07.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:07.297]    __dp=0x00000000
[01:53:07.297]    __ap=0x00000000
[01:53:07.297]    __traceout=0x00000000      (Trace Disabled)
[01:53:07.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:07.297]    __FlashAddr=0x00000000
[01:53:07.297]    __FlashLen=0x00000000
[01:53:07.297]    __FlashArg=0x00000000
[01:53:07.297]    __FlashOp=0x00000000
[01:53:07.297]    __Result=0x00000000
[01:53:07.297]  </debugvars>
[01:53:07.297]  
[01:53:07.297]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:53:07.297]    <block atomic="false" info="">
[01:53:07.297]      __var deviceID = 0;
[01:53:07.297]        // -> [deviceID <= 0x00000000]
[01:53:07.297]      __var version = 0;
[01:53:07.297]        // -> [version <= 0x00000000]
[01:53:07.297]      __var partNum = 0;
[01:53:07.297]        // -> [partNum <= 0x00000000]
[01:53:07.297]      __var manuf = 0;
[01:53:07.297]        // -> [manuf <= 0x00000000]
[01:53:07.297]      __var isMSPM0G1X0X_G3X0X = 0;
[01:53:07.297]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:53:07.297]      __var isProduction = 0;
[01:53:07.297]        // -> [isProduction <= 0x00000000]
[01:53:07.297]      __var continueId = 0;
[01:53:07.297]        // -> [continueId <= 0x00000000]
[01:53:07.297]      deviceID =   Read32(0x41C40004);
[01:53:07.307]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:53:07.307]        // -> [deviceID <= 0x2BB8802F]
[01:53:07.307]      version = deviceID >> 28;
[01:53:07.307]        // -> [version <= 0x00000002]
[01:53:07.307]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:53:07.307]        // -> [partNum <= 0x0000BB88]
[01:53:07.307]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:53:07.307]        // -> [manuf <= 0x00000017]
[01:53:07.307]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:53:07.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:53:07.307]      isProduction = (version > 0);
[01:53:07.307]        // -> [isProduction <= 0x00000001]
[01:53:07.307]    </block>
[01:53:07.307]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:53:07.307]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:53:07.307]        // =>  FALSE
[01:53:07.307]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:53:07.307]    </control>
[01:53:07.317]    <control if="continueId == 4" while="" timeout="0" info="">
[01:53:07.317]      // if-block "continueId == 4"
[01:53:07.317]        // =>  FALSE
[01:53:07.317]      // skip if-block "continueId == 4"
[01:53:07.317]    </control>
[01:53:07.317]    <control if="!isProduction" while="" timeout="0" info="">
[01:53:07.317]      // if-block "!isProduction"
[01:53:07.317]        // =>  FALSE
[01:53:07.317]      // skip if-block "!isProduction"
[01:53:07.317]    </control>
[01:53:07.317]  </sequence>
[01:53:07.317]  
[01:53:23.769]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:53:23.769]  
[01:53:23.777]  <debugvars>
[01:53:23.777]    // Pre-defined
[01:53:23.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:23.777]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:23.777]    __dp=0x00000000
[01:53:23.777]    __ap=0x00000000
[01:53:23.777]    __traceout=0x00000000      (Trace Disabled)
[01:53:23.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:23.777]    __FlashAddr=0x00000000
[01:53:23.777]    __FlashLen=0x00000000
[01:53:23.777]    __FlashArg=0x00000000
[01:53:23.777]    __FlashOp=0x00000000
[01:53:23.777]    __Result=0x00000000
[01:53:23.777]  </debugvars>
[01:53:23.777]  
[01:53:23.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:53:23.777]    <block atomic="false" info="">
[01:53:23.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:53:23.777]        // -> [isSWJ <= 0x00000001]
[01:53:23.777]      __var hasDormant = __protocol & 0x00020000;
[01:53:23.777]        // -> [hasDormant <= 0x00000000]
[01:53:23.779]      __var protType   = __protocol & 0x0000FFFF;
[01:53:23.779]        // -> [protType <= 0x00000002]
[01:53:23.779]    </block>
[01:53:23.779]    <control if="protType == 1" while="" timeout="0" info="">
[01:53:23.779]      // if-block "protType == 1"
[01:53:23.779]        // =>  FALSE
[01:53:23.779]      // skip if-block "protType == 1"
[01:53:23.779]    </control>
[01:53:23.779]    <control if="protType == 2" while="" timeout="0" info="">
[01:53:23.779]      // if-block "protType == 2"
[01:53:23.779]        // =>  TRUE
[01:53:23.779]      <control if="isSWJ" while="" timeout="0" info="">
[01:53:23.779]        // if-block "isSWJ"
[01:53:23.779]          // =>  TRUE
[01:53:23.779]        <control if="hasDormant" while="" timeout="0" info="">
[01:53:23.779]          // if-block "hasDormant"
[01:53:23.779]            // =>  FALSE
[01:53:23.779]          // skip if-block "hasDormant"
[01:53:23.779]        </control>
[01:53:23.779]        <control if="!hasDormant" while="" timeout="0" info="">
[01:53:23.779]          // if-block "!hasDormant"
[01:53:23.779]            // =>  TRUE
[01:53:23.779]          <block atomic="false" info="">
[01:53:23.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:53:23.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:23.779]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:53:23.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:53:23.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:53:23.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:23.789]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:53:23.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:53:23.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:53:23.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:23.789]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:53:23.789]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:53:23.789]          </block>
[01:53:23.789]          // end if-block "!hasDormant"
[01:53:23.789]        </control>
[01:53:23.789]        // end if-block "isSWJ"
[01:53:23.789]      </control>
[01:53:23.789]      <control if="!isSWJ" while="" timeout="0" info="">
[01:53:23.789]        // if-block "!isSWJ"
[01:53:23.789]          // =>  FALSE
[01:53:23.789]        // skip if-block "!isSWJ"
[01:53:23.789]      </control>
[01:53:23.789]      <block atomic="false" info="">
[01:53:23.789]        ReadDP(0x0);
[01:53:23.789]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:53:23.789]      </block>
[01:53:23.789]      // end if-block "protType == 2"
[01:53:23.789]    </control>
[01:53:23.789]  </sequence>
[01:53:23.789]  
[01:53:23.799]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:53:23.799]  
[01:53:23.799]  <debugvars>
[01:53:23.799]    // Pre-defined
[01:53:23.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:23.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:23.799]    __dp=0x00000000
[01:53:23.799]    __ap=0x00000000
[01:53:23.799]    __traceout=0x00000000      (Trace Disabled)
[01:53:23.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:23.799]    __FlashAddr=0x00000000
[01:53:23.799]    __FlashLen=0x00000000
[01:53:23.799]    __FlashArg=0x00000000
[01:53:23.799]    __FlashOp=0x00000000
[01:53:23.799]    __Result=0x00000000
[01:53:23.799]  </debugvars>
[01:53:23.799]  
[01:53:23.799]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:53:23.799]    <block atomic="false" info="">
[01:53:23.799]      __var SW_DP_ABORT       = 0x0;
[01:53:23.799]        // -> [SW_DP_ABORT <= 0x00000000]
[01:53:23.799]      __var DP_CTRL_STAT      = 0x4;
[01:53:23.799]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:53:23.799]      __var DP_SELECT         = 0x8;
[01:53:23.799]        // -> [DP_SELECT <= 0x00000008]
[01:53:23.799]      __var powered_down      = 0;
[01:53:23.799]        // -> [powered_down <= 0x00000000]
[01:53:23.799]      WriteDP(DP_SELECT, 0x00000000);
[01:53:23.799]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:53:23.799]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:53:23.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:53:23.809]        // -> [powered_down <= 0x00000001]
[01:53:23.809]    </block>
[01:53:23.809]    <control if="powered_down" while="" timeout="0" info="">
[01:53:23.809]      // if-block "powered_down"
[01:53:23.809]        // =>  TRUE
[01:53:23.809]      <block atomic="false" info="">
[01:53:23.809]        Message(0, "Debug/System power-up request sent");
[01:53:23.809]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:53:23.809]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:53:23.809]      </block>
[01:53:23.809]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:53:23.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:53:23.819]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:53:23.819]        // while-condition  =>  FALSE
[01:53:23.819]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:53:23.819]      </control>
[01:53:23.819]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:53:23.819]        // if-block "(__protocol & 0xFFFF) == 1"
[01:53:23.819]          // =>  FALSE
[01:53:23.819]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:53:23.819]      </control>
[01:53:23.819]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:53:23.819]        // if-block "(__protocol & 0xFFFF) == 2"
[01:53:23.819]          // =>  TRUE
[01:53:23.819]        <block atomic="false" info="">
[01:53:23.819]          Message(0, "executing SWD power up");
[01:53:23.819]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:53:23.825]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:53:23.825]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:53:23.828]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:53:23.828]        </block>
[01:53:23.828]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:53:23.828]      </control>
[01:53:23.828]      // end if-block "powered_down"
[01:53:23.828]    </control>
[01:53:23.828]    <block atomic="false" info="">
[01:53:23.828]      __var DEBUG_PORT_VAL    = 0;
[01:53:23.828]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:53:23.828]      __var ACCESS_POINT_VAL  = 0;
[01:53:23.828]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:53:23.828]      __ap = 1; 
[01:53:23.828]        // -> [__ap <= 0x00000001]
[01:53:23.828]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:53:23.831]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:53:23.831]      __ap = 4;
[01:53:23.831]        // -> [__ap <= 0x00000004]
[01:53:23.831]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:53:23.836]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:53:23.836]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:53:23.836]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:53:23.836]    </block>
[01:53:23.836]    <block atomic="false" info="">
[01:53:23.836]      __var nReset = 0x80;
[01:53:23.836]        // -> [nReset <= 0x00000080]
[01:53:23.836]      __var canReadPins = 0;
[01:53:23.836]        // -> [canReadPins <= 0x00000000]
[01:53:23.836]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:53:23.836]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:53:23.836]        // -> [canReadPins <= 0x00000001]
[01:53:23.836]    </block>
[01:53:23.836]    <control if="" while="1" timeout="200" info="">
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.836]      // while "1"  (timeout="200")
[01:53:23.836]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.846]      // while-condition  =>  TRUE
[01:53:23.846]      // while "1"  (timeout="200")
[01:53:23.856]      // while-condition  =>  TRUE
[01:53:23.856]      // while "1"  (timeout="200")
[01:53:23.856]      // while  =>  TIMEOUT
[01:53:23.856]      // end while "1"
[01:53:23.856]    </control>
[01:53:23.856]    <control if="canReadPins" while="" timeout="0" info="">
[01:53:23.856]      // if-block "canReadPins"
[01:53:23.856]        // =>  TRUE
[01:53:23.856]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:53:23.856]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:53:23.856]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:53:23.856]        // while-condition  =>  FALSE
[01:53:23.856]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:53:23.856]      </control>
[01:53:23.856]      // end if-block "canReadPins"
[01:53:23.856]    </control>
[01:53:23.856]    <control if="!canReadPins" while="" timeout="0" info="">
[01:53:23.856]      // if-block "!canReadPins"
[01:53:23.856]        // =>  FALSE
[01:53:23.856]      // skip if-block "!canReadPins"
[01:53:23.856]    </control>
[01:53:23.856]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:53:23.856]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:53:23.856]        // =>  TRUE
[01:53:23.856]      <block atomic="false" info="">
[01:53:23.856]        WriteAP(0x00, 0x190008);
[01:53:23.856]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:53:23.856]        WriteAP(0xF0, 0x01);
[01:53:23.866]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:53:23.866]      </block>
[01:53:23.866]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:53:23.866]    </control>
[01:53:23.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:53:23.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:53:23.866]        // =>  FALSE
[01:53:23.866]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:53:23.866]    </control>
[01:53:23.866]    <block atomic="false" info="">
[01:53:23.866]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:53:23.876]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:53:23.876]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:53:23.876]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:53:23.876]      __ap = 0; //lets make sure we reset the access point selection
[01:53:23.876]        // -> [__ap <= 0x00000000]
[01:53:23.876]    </block>
[01:53:23.876]  </sequence>
[01:53:23.876]  
[01:53:23.896]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:53:23.896]  
[01:53:23.896]  <debugvars>
[01:53:23.896]    // Pre-defined
[01:53:23.896]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:23.896]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:23.896]    __dp=0x00000000
[01:53:23.896]    __ap=0x00000000
[01:53:23.896]    __traceout=0x00000000      (Trace Disabled)
[01:53:23.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:23.896]    __FlashAddr=0x00000000
[01:53:23.896]    __FlashLen=0x00000000
[01:53:23.896]    __FlashArg=0x00000000
[01:53:23.896]    __FlashOp=0x00000000
[01:53:23.896]    __Result=0x00000000
[01:53:23.896]  </debugvars>
[01:53:23.896]  
[01:53:23.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:53:23.896]    <block atomic="false" info="">
[01:53:23.896]      __var deviceID = 0;
[01:53:23.896]        // -> [deviceID <= 0x00000000]
[01:53:23.896]      __var version = 0;
[01:53:23.896]        // -> [version <= 0x00000000]
[01:53:23.896]      __var partNum = 0;
[01:53:23.896]        // -> [partNum <= 0x00000000]
[01:53:23.896]      __var manuf = 0;
[01:53:23.896]        // -> [manuf <= 0x00000000]
[01:53:23.906]      __var isMSPM0G1X0X_G3X0X = 0;
[01:53:23.906]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:53:23.906]      __var isProduction = 0;
[01:53:23.906]        // -> [isProduction <= 0x00000000]
[01:53:23.906]      __var continueId = 0;
[01:53:23.906]        // -> [continueId <= 0x00000000]
[01:53:23.906]      deviceID =   Read32(0x41C40004);
[01:53:23.906]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:53:23.906]        // -> [deviceID <= 0x2BB8802F]
[01:53:23.906]      version = deviceID >> 28;
[01:53:23.906]        // -> [version <= 0x00000002]
[01:53:23.906]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:53:23.906]        // -> [partNum <= 0x0000BB88]
[01:53:23.906]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:53:23.906]        // -> [manuf <= 0x00000017]
[01:53:23.906]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:53:23.906]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:53:23.906]      isProduction = (version > 0);
[01:53:23.906]        // -> [isProduction <= 0x00000001]
[01:53:23.906]    </block>
[01:53:23.906]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:53:23.906]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:53:23.906]        // =>  FALSE
[01:53:23.906]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:53:23.906]    </control>
[01:53:23.906]    <control if="continueId == 4" while="" timeout="0" info="">
[01:53:23.906]      // if-block "continueId == 4"
[01:53:23.906]        // =>  FALSE
[01:53:23.906]      // skip if-block "continueId == 4"
[01:53:23.906]    </control>
[01:53:23.906]    <control if="!isProduction" while="" timeout="0" info="">
[01:53:23.906]      // if-block "!isProduction"
[01:53:23.906]        // =>  FALSE
[01:53:23.906]      // skip if-block "!isProduction"
[01:53:23.906]    </control>
[01:53:23.906]  </sequence>
[01:53:23.906]  
[01:53:47.919]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:53:47.919]  
[01:53:47.931]  <debugvars>
[01:53:47.931]    // Pre-defined
[01:53:47.931]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:47.931]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:47.931]    __dp=0x00000000
[01:53:47.931]    __ap=0x00000000
[01:53:47.931]    __traceout=0x00000000      (Trace Disabled)
[01:53:47.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:47.931]    __FlashAddr=0x00000000
[01:53:47.931]    __FlashLen=0x00000000
[01:53:47.931]    __FlashArg=0x00000000
[01:53:47.931]    __FlashOp=0x00000000
[01:53:47.931]    __Result=0x00000000
[01:53:47.931]  </debugvars>
[01:53:47.931]  
[01:53:47.931]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:53:47.931]    <block atomic="false" info="">
[01:53:47.931]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:53:47.931]        // -> [isSWJ <= 0x00000001]
[01:53:47.931]      __var hasDormant = __protocol & 0x00020000;
[01:53:47.931]        // -> [hasDormant <= 0x00000000]
[01:53:47.931]      __var protType   = __protocol & 0x0000FFFF;
[01:53:47.931]        // -> [protType <= 0x00000002]
[01:53:47.931]    </block>
[01:53:47.931]    <control if="protType == 1" while="" timeout="0" info="">
[01:53:47.931]      // if-block "protType == 1"
[01:53:47.931]        // =>  FALSE
[01:53:47.931]      // skip if-block "protType == 1"
[01:53:47.931]    </control>
[01:53:47.931]    <control if="protType == 2" while="" timeout="0" info="">
[01:53:47.931]      // if-block "protType == 2"
[01:53:47.931]        // =>  TRUE
[01:53:47.935]      <control if="isSWJ" while="" timeout="0" info="">
[01:53:47.935]        // if-block "isSWJ"
[01:53:47.935]          // =>  TRUE
[01:53:47.935]        <control if="hasDormant" while="" timeout="0" info="">
[01:53:47.935]          // if-block "hasDormant"
[01:53:47.935]            // =>  FALSE
[01:53:47.935]          // skip if-block "hasDormant"
[01:53:47.935]        </control>
[01:53:47.935]        <control if="!hasDormant" while="" timeout="0" info="">
[01:53:47.935]          // if-block "!hasDormant"
[01:53:47.935]            // =>  TRUE
[01:53:47.935]          <block atomic="false" info="">
[01:53:47.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:53:47.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:47.945]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:53:47.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:53:47.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:53:47.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:47.945]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:53:47.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:53:47.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:53:47.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:53:47.955]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:53:47.955]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:53:47.955]          </block>
[01:53:47.955]          // end if-block "!hasDormant"
[01:53:47.955]        </control>
[01:53:47.955]        // end if-block "isSWJ"
[01:53:47.955]      </control>
[01:53:47.955]      <control if="!isSWJ" while="" timeout="0" info="">
[01:53:47.955]        // if-block "!isSWJ"
[01:53:47.955]          // =>  FALSE
[01:53:47.955]        // skip if-block "!isSWJ"
[01:53:47.955]      </control>
[01:53:47.955]      <block atomic="false" info="">
[01:53:47.955]        ReadDP(0x0);
[01:53:47.955]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:53:47.955]      </block>
[01:53:47.955]      // end if-block "protType == 2"
[01:53:47.955]    </control>
[01:53:47.955]  </sequence>
[01:53:47.955]  
[01:53:47.965]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:53:47.965]  
[01:53:47.965]  <debugvars>
[01:53:47.965]    // Pre-defined
[01:53:47.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:47.965]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:47.965]    __dp=0x00000000
[01:53:47.965]    __ap=0x00000000
[01:53:47.965]    __traceout=0x00000000      (Trace Disabled)
[01:53:47.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:47.965]    __FlashAddr=0x00000000
[01:53:47.965]    __FlashLen=0x00000000
[01:53:47.965]    __FlashArg=0x00000000
[01:53:47.965]    __FlashOp=0x00000000
[01:53:47.965]    __Result=0x00000000
[01:53:47.965]  </debugvars>
[01:53:47.965]  
[01:53:47.965]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:53:47.965]    <block atomic="false" info="">
[01:53:47.965]      __var SW_DP_ABORT       = 0x0;
[01:53:47.965]        // -> [SW_DP_ABORT <= 0x00000000]
[01:53:47.965]      __var DP_CTRL_STAT      = 0x4;
[01:53:47.965]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:53:47.965]      __var DP_SELECT         = 0x8;
[01:53:47.965]        // -> [DP_SELECT <= 0x00000008]
[01:53:47.965]      __var powered_down      = 0;
[01:53:47.965]        // -> [powered_down <= 0x00000000]
[01:53:47.965]      WriteDP(DP_SELECT, 0x00000000);
[01:53:47.976]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:53:47.976]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:53:47.976]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:53:47.976]        // -> [powered_down <= 0x00000001]
[01:53:47.976]    </block>
[01:53:47.976]    <control if="powered_down" while="" timeout="0" info="">
[01:53:47.976]      // if-block "powered_down"
[01:53:47.976]        // =>  TRUE
[01:53:47.976]      <block atomic="false" info="">
[01:53:47.976]        Message(0, "Debug/System power-up request sent");
[01:53:47.976]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:53:47.985]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:53:47.985]      </block>
[01:53:47.985]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:53:47.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:53:47.985]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:53:47.985]        // while-condition  =>  FALSE
[01:53:47.985]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:53:47.985]      </control>
[01:53:47.985]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:53:47.985]        // if-block "(__protocol & 0xFFFF) == 1"
[01:53:47.985]          // =>  FALSE
[01:53:47.985]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:53:47.985]      </control>
[01:53:47.985]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:53:47.985]        // if-block "(__protocol & 0xFFFF) == 2"
[01:53:47.985]          // =>  TRUE
[01:53:47.985]        <block atomic="false" info="">
[01:53:47.985]          Message(0, "executing SWD power up");
[01:53:47.985]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:53:47.985]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:53:47.985]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:53:47.995]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:53:47.995]        </block>
[01:53:47.995]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:53:47.995]      </control>
[01:53:47.995]      // end if-block "powered_down"
[01:53:47.995]    </control>
[01:53:47.995]    <block atomic="false" info="">
[01:53:47.995]      __var DEBUG_PORT_VAL    = 0;
[01:53:47.995]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:53:47.995]      __var ACCESS_POINT_VAL  = 0;
[01:53:47.995]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:53:47.995]      __ap = 1; 
[01:53:47.995]        // -> [__ap <= 0x00000001]
[01:53:47.995]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:53:48.005]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:53:48.005]      __ap = 4;
[01:53:48.005]        // -> [__ap <= 0x00000004]
[01:53:48.005]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:53:48.005]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:53:48.005]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:53:48.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:53:48.005]    </block>
[01:53:48.005]    <block atomic="false" info="">
[01:53:48.005]      __var nReset = 0x80;
[01:53:48.005]        // -> [nReset <= 0x00000080]
[01:53:48.005]      __var canReadPins = 0;
[01:53:48.005]        // -> [canReadPins <= 0x00000000]
[01:53:48.005]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:53:48.019]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:53:48.019]        // -> [canReadPins <= 0x00000001]
[01:53:48.019]    </block>
[01:53:48.019]    <control if="" while="1" timeout="200" info="">
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.019]      // while "1"  (timeout="200")
[01:53:48.019]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.025]      // while-condition  =>  TRUE
[01:53:48.025]      // while "1"  (timeout="200")
[01:53:48.035]      // while-condition  =>  TRUE
[01:53:48.035]      // while "1"  (timeout="200")
[01:53:48.035]      // while  =>  TIMEOUT
[01:53:48.035]      // end while "1"
[01:53:48.035]    </control>
[01:53:48.035]    <control if="canReadPins" while="" timeout="0" info="">
[01:53:48.035]      // if-block "canReadPins"
[01:53:48.035]        // =>  TRUE
[01:53:48.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:53:48.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:53:48.045]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:53:48.045]        // while-condition  =>  FALSE
[01:53:48.045]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:53:48.045]      </control>
[01:53:48.045]      // end if-block "canReadPins"
[01:53:48.045]    </control>
[01:53:48.045]    <control if="!canReadPins" while="" timeout="0" info="">
[01:53:48.045]      // if-block "!canReadPins"
[01:53:48.045]        // =>  FALSE
[01:53:48.045]      // skip if-block "!canReadPins"
[01:53:48.045]    </control>
[01:53:48.045]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:53:48.045]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:53:48.045]        // =>  TRUE
[01:53:48.045]      <block atomic="false" info="">
[01:53:48.045]        WriteAP(0x00, 0x190008);
[01:53:48.045]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:53:48.045]        WriteAP(0xF0, 0x01);
[01:53:48.058]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:53:48.058]      </block>
[01:53:48.058]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:53:48.058]    </control>
[01:53:48.058]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:53:48.058]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:53:48.058]        // =>  FALSE
[01:53:48.058]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:53:48.058]    </control>
[01:53:48.058]    <block atomic="false" info="">
[01:53:48.058]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:53:48.065]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:53:48.065]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:53:48.065]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:53:48.065]      __ap = 0; //lets make sure we reset the access point selection
[01:53:48.065]        // -> [__ap <= 0x00000000]
[01:53:48.065]    </block>
[01:53:48.065]  </sequence>
[01:53:48.065]  
[01:53:48.095]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:53:48.095]  
[01:53:48.095]  <debugvars>
[01:53:48.095]    // Pre-defined
[01:53:48.095]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:53:48.095]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:53:48.095]    __dp=0x00000000
[01:53:48.095]    __ap=0x00000000
[01:53:48.095]    __traceout=0x00000000      (Trace Disabled)
[01:53:48.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:53:48.095]    __FlashAddr=0x00000000
[01:53:48.095]    __FlashLen=0x00000000
[01:53:48.095]    __FlashArg=0x00000000
[01:53:48.095]    __FlashOp=0x00000000
[01:53:48.095]    __Result=0x00000000
[01:53:48.095]  </debugvars>
[01:53:48.095]  
[01:53:48.095]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:53:48.095]    <block atomic="false" info="">
[01:53:48.095]      __var deviceID = 0;
[01:53:48.095]        // -> [deviceID <= 0x00000000]
[01:53:48.095]      __var version = 0;
[01:53:48.095]        // -> [version <= 0x00000000]
[01:53:48.095]      __var partNum = 0;
[01:53:48.095]        // -> [partNum <= 0x00000000]
[01:53:48.095]      __var manuf = 0;
[01:53:48.095]        // -> [manuf <= 0x00000000]
[01:53:48.095]      __var isMSPM0G1X0X_G3X0X = 0;
[01:53:48.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:53:48.095]      __var isProduction = 0;
[01:53:48.095]        // -> [isProduction <= 0x00000000]
[01:53:48.095]      __var continueId = 0;
[01:53:48.095]        // -> [continueId <= 0x00000000]
[01:53:48.095]      deviceID =   Read32(0x41C40004);
[01:53:48.105]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:53:48.105]        // -> [deviceID <= 0x2BB8802F]
[01:53:48.105]      version = deviceID >> 28;
[01:53:48.105]        // -> [version <= 0x00000002]
[01:53:48.105]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:53:48.105]        // -> [partNum <= 0x0000BB88]
[01:53:48.105]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:53:48.105]        // -> [manuf <= 0x00000017]
[01:53:48.105]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:53:48.105]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:53:48.105]      isProduction = (version > 0);
[01:53:48.105]        // -> [isProduction <= 0x00000001]
[01:53:48.105]    </block>
[01:53:48.105]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:53:48.105]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:53:48.105]        // =>  FALSE
[01:53:48.105]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:53:48.105]    </control>
[01:53:48.105]    <control if="continueId == 4" while="" timeout="0" info="">
[01:53:48.105]      // if-block "continueId == 4"
[01:53:48.105]        // =>  FALSE
[01:53:48.105]      // skip if-block "continueId == 4"
[01:53:48.105]    </control>
[01:53:48.105]    <control if="!isProduction" while="" timeout="0" info="">
[01:53:48.105]      // if-block "!isProduction"
[01:53:48.105]        // =>  FALSE
[01:53:48.105]      // skip if-block "!isProduction"
[01:53:48.105]    </control>
[01:53:48.105]  </sequence>
[01:53:48.105]  
[01:54:17.971]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:54:17.971]  
[01:54:17.984]  <debugvars>
[01:54:17.984]    // Pre-defined
[01:54:17.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:17.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:17.984]    __dp=0x00000000
[01:54:17.984]    __ap=0x00000000
[01:54:17.984]    __traceout=0x00000000      (Trace Disabled)
[01:54:17.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:17.984]    __FlashAddr=0x00000000
[01:54:17.984]    __FlashLen=0x00000000
[01:54:17.984]    __FlashArg=0x00000000
[01:54:17.984]    __FlashOp=0x00000000
[01:54:17.984]    __Result=0x00000000
[01:54:17.984]  </debugvars>
[01:54:17.984]  
[01:54:17.984]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:54:17.984]    <block atomic="false" info="">
[01:54:17.984]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:54:17.984]        // -> [isSWJ <= 0x00000001]
[01:54:17.984]      __var hasDormant = __protocol & 0x00020000;
[01:54:17.984]        // -> [hasDormant <= 0x00000000]
[01:54:17.984]      __var protType   = __protocol & 0x0000FFFF;
[01:54:17.984]        // -> [protType <= 0x00000002]
[01:54:17.984]    </block>
[01:54:17.984]    <control if="protType == 1" while="" timeout="0" info="">
[01:54:17.984]      // if-block "protType == 1"
[01:54:17.984]        // =>  FALSE
[01:54:17.984]      // skip if-block "protType == 1"
[01:54:17.984]    </control>
[01:54:17.984]    <control if="protType == 2" while="" timeout="0" info="">
[01:54:17.988]      // if-block "protType == 2"
[01:54:17.988]        // =>  TRUE
[01:54:17.988]      <control if="isSWJ" while="" timeout="0" info="">
[01:54:17.988]        // if-block "isSWJ"
[01:54:17.988]          // =>  TRUE
[01:54:17.988]        <control if="hasDormant" while="" timeout="0" info="">
[01:54:17.988]          // if-block "hasDormant"
[01:54:17.988]            // =>  FALSE
[01:54:17.988]          // skip if-block "hasDormant"
[01:54:17.988]        </control>
[01:54:17.988]        <control if="!hasDormant" while="" timeout="0" info="">
[01:54:17.988]          // if-block "!hasDormant"
[01:54:17.988]            // =>  TRUE
[01:54:17.988]          <block atomic="false" info="">
[01:54:17.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:54:17.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:17.991]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:54:17.991]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:54:17.991]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:54:17.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:17.997]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:54:17.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:54:17.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:54:18.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:18.000]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:54:18.000]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:54:18.000]          </block>
[01:54:18.000]          // end if-block "!hasDormant"
[01:54:18.000]        </control>
[01:54:18.000]        // end if-block "isSWJ"
[01:54:18.000]      </control>
[01:54:18.000]      <control if="!isSWJ" while="" timeout="0" info="">
[01:54:18.000]        // if-block "!isSWJ"
[01:54:18.000]          // =>  FALSE
[01:54:18.000]        // skip if-block "!isSWJ"
[01:54:18.000]      </control>
[01:54:18.000]      <block atomic="false" info="">
[01:54:18.000]        ReadDP(0x0);
[01:54:18.000]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:54:18.000]      </block>
[01:54:18.000]      // end if-block "protType == 2"
[01:54:18.000]    </control>
[01:54:18.000]  </sequence>
[01:54:18.000]  
[01:54:18.008]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:54:18.008]  
[01:54:18.008]  <debugvars>
[01:54:18.008]    // Pre-defined
[01:54:18.008]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:18.008]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:18.008]    __dp=0x00000000
[01:54:18.008]    __ap=0x00000000
[01:54:18.008]    __traceout=0x00000000      (Trace Disabled)
[01:54:18.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:18.008]    __FlashAddr=0x00000000
[01:54:18.008]    __FlashLen=0x00000000
[01:54:18.008]    __FlashArg=0x00000000
[01:54:18.008]    __FlashOp=0x00000000
[01:54:18.008]    __Result=0x00000000
[01:54:18.008]  </debugvars>
[01:54:18.008]  
[01:54:18.008]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:54:18.008]    <block atomic="false" info="">
[01:54:18.008]      __var SW_DP_ABORT       = 0x0;
[01:54:18.008]        // -> [SW_DP_ABORT <= 0x00000000]
[01:54:18.008]      __var DP_CTRL_STAT      = 0x4;
[01:54:18.008]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:54:18.008]      __var DP_SELECT         = 0x8;
[01:54:18.008]        // -> [DP_SELECT <= 0x00000008]
[01:54:18.008]      __var powered_down      = 0;
[01:54:18.008]        // -> [powered_down <= 0x00000000]
[01:54:18.008]      WriteDP(DP_SELECT, 0x00000000);
[01:54:18.019]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:54:18.019]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:54:18.019]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:54:18.019]        // -> [powered_down <= 0x00000001]
[01:54:18.019]    </block>
[01:54:18.019]    <control if="powered_down" while="" timeout="0" info="">
[01:54:18.019]      // if-block "powered_down"
[01:54:18.019]        // =>  TRUE
[01:54:18.019]      <block atomic="false" info="">
[01:54:18.019]        Message(0, "Debug/System power-up request sent");
[01:54:18.019]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:54:18.028]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:54:18.028]      </block>
[01:54:18.028]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:54:18.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:54:18.028]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:54:18.028]        // while-condition  =>  FALSE
[01:54:18.028]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:54:18.028]      </control>
[01:54:18.028]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:54:18.028]        // if-block "(__protocol & 0xFFFF) == 1"
[01:54:18.028]          // =>  FALSE
[01:54:18.028]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:54:18.028]      </control>
[01:54:18.028]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:54:18.033]        // if-block "(__protocol & 0xFFFF) == 2"
[01:54:18.033]          // =>  TRUE
[01:54:18.033]        <block atomic="false" info="">
[01:54:18.033]          Message(0, "executing SWD power up");
[01:54:18.033]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:54:18.033]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:54:18.033]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:54:18.033]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:54:18.033]        </block>
[01:54:18.038]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:54:18.038]      </control>
[01:54:18.038]      // end if-block "powered_down"
[01:54:18.038]    </control>
[01:54:18.038]    <block atomic="false" info="">
[01:54:18.038]      __var DEBUG_PORT_VAL    = 0;
[01:54:18.038]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:54:18.038]      __var ACCESS_POINT_VAL  = 0;
[01:54:18.038]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:54:18.038]      __ap = 1; 
[01:54:18.038]        // -> [__ap <= 0x00000001]
[01:54:18.038]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:54:18.038]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:54:18.038]      __ap = 4;
[01:54:18.038]        // -> [__ap <= 0x00000004]
[01:54:18.038]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:18.048]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:54:18.048]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:54:18.048]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:18.048]    </block>
[01:54:18.048]    <block atomic="false" info="">
[01:54:18.048]      __var nReset = 0x80;
[01:54:18.048]        // -> [nReset <= 0x00000080]
[01:54:18.048]      __var canReadPins = 0;
[01:54:18.048]        // -> [canReadPins <= 0x00000000]
[01:54:18.048]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:54:18.048]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:54:18.048]        // -> [canReadPins <= 0x00000001]
[01:54:18.048]    </block>
[01:54:18.048]    <control if="" while="1" timeout="200" info="">
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.048]      // while-condition  =>  TRUE
[01:54:18.048]      // while "1"  (timeout="200")
[01:54:18.058]      // while-condition  =>  TRUE
[01:54:18.058]      // while "1"  (timeout="200")
[01:54:18.058]      // while  =>  TIMEOUT
[01:54:18.058]      // end while "1"
[01:54:18.058]    </control>
[01:54:18.058]    <control if="canReadPins" while="" timeout="0" info="">
[01:54:18.058]      // if-block "canReadPins"
[01:54:18.058]        // =>  TRUE
[01:54:18.058]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:54:18.058]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:54:18.058]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:54:18.058]        // while-condition  =>  FALSE
[01:54:18.058]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:54:18.058]      </control>
[01:54:18.058]      // end if-block "canReadPins"
[01:54:18.058]    </control>
[01:54:18.058]    <control if="!canReadPins" while="" timeout="0" info="">
[01:54:18.058]      // if-block "!canReadPins"
[01:54:18.058]        // =>  FALSE
[01:54:18.063]      // skip if-block "!canReadPins"
[01:54:18.063]    </control>
[01:54:18.063]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:54:18.063]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:18.063]        // =>  TRUE
[01:54:18.063]      <block atomic="false" info="">
[01:54:18.063]        WriteAP(0x00, 0x190008);
[01:54:18.063]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:18.063]        WriteAP(0xF0, 0x01);
[01:54:18.068]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:18.068]      </block>
[01:54:18.068]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:18.068]    </control>
[01:54:18.068]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:54:18.068]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:18.068]        // =>  FALSE
[01:54:18.068]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:18.068]    </control>
[01:54:18.068]    <block atomic="false" info="">
[01:54:18.068]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:18.078]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:54:18.078]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:54:18.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:18.078]      __ap = 0; //lets make sure we reset the access point selection
[01:54:18.078]        // -> [__ap <= 0x00000000]
[01:54:18.078]    </block>
[01:54:18.078]  </sequence>
[01:54:18.078]  
[01:54:18.108]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:54:18.108]  
[01:54:18.108]  <debugvars>
[01:54:18.108]    // Pre-defined
[01:54:18.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:18.108]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:18.108]    __dp=0x00000000
[01:54:18.108]    __ap=0x00000000
[01:54:18.108]    __traceout=0x00000000      (Trace Disabled)
[01:54:18.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:18.108]    __FlashAddr=0x00000000
[01:54:18.108]    __FlashLen=0x00000000
[01:54:18.108]    __FlashArg=0x00000000
[01:54:18.108]    __FlashOp=0x00000000
[01:54:18.108]    __Result=0x00000000
[01:54:18.108]  </debugvars>
[01:54:18.108]  
[01:54:18.108]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:54:18.108]    <block atomic="false" info="">
[01:54:18.108]      __var deviceID = 0;
[01:54:18.108]        // -> [deviceID <= 0x00000000]
[01:54:18.108]      __var version = 0;
[01:54:18.108]        // -> [version <= 0x00000000]
[01:54:18.108]      __var partNum = 0;
[01:54:18.108]        // -> [partNum <= 0x00000000]
[01:54:18.108]      __var manuf = 0;
[01:54:18.108]        // -> [manuf <= 0x00000000]
[01:54:18.108]      __var isMSPM0G1X0X_G3X0X = 0;
[01:54:18.108]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:54:18.108]      __var isProduction = 0;
[01:54:18.108]        // -> [isProduction <= 0x00000000]
[01:54:18.108]      __var continueId = 0;
[01:54:18.108]        // -> [continueId <= 0x00000000]
[01:54:18.108]      deviceID =   Read32(0x41C40004);
[01:54:18.118]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:54:18.118]        // -> [deviceID <= 0x2BB8802F]
[01:54:18.118]      version = deviceID >> 28;
[01:54:18.118]        // -> [version <= 0x00000002]
[01:54:18.118]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:54:18.118]        // -> [partNum <= 0x0000BB88]
[01:54:18.118]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:54:18.118]        // -> [manuf <= 0x00000017]
[01:54:18.118]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:54:18.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:54:18.118]      isProduction = (version > 0);
[01:54:18.118]        // -> [isProduction <= 0x00000001]
[01:54:18.118]    </block>
[01:54:18.118]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:54:18.118]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:54:18.118]        // =>  FALSE
[01:54:18.118]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:54:18.118]    </control>
[01:54:18.118]    <control if="continueId == 4" while="" timeout="0" info="">
[01:54:18.118]      // if-block "continueId == 4"
[01:54:18.118]        // =>  FALSE
[01:54:18.118]      // skip if-block "continueId == 4"
[01:54:18.118]    </control>
[01:54:18.118]    <control if="!isProduction" while="" timeout="0" info="">
[01:54:18.118]      // if-block "!isProduction"
[01:54:18.118]        // =>  FALSE
[01:54:18.118]      // skip if-block "!isProduction"
[01:54:18.118]    </control>
[01:54:18.118]  </sequence>
[01:54:18.118]  
[01:54:56.011]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:54:56.011]  
[01:54:56.021]  <debugvars>
[01:54:56.021]    // Pre-defined
[01:54:56.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:56.021]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:56.021]    __dp=0x00000000
[01:54:56.021]    __ap=0x00000000
[01:54:56.021]    __traceout=0x00000000      (Trace Disabled)
[01:54:56.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:56.021]    __FlashAddr=0x00000000
[01:54:56.021]    __FlashLen=0x00000000
[01:54:56.021]    __FlashArg=0x00000000
[01:54:56.021]    __FlashOp=0x00000000
[01:54:56.021]    __Result=0x00000000
[01:54:56.021]  </debugvars>
[01:54:56.021]  
[01:54:56.021]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:54:56.021]    <block atomic="false" info="">
[01:54:56.021]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:54:56.021]        // -> [isSWJ <= 0x00000001]
[01:54:56.021]      __var hasDormant = __protocol & 0x00020000;
[01:54:56.021]        // -> [hasDormant <= 0x00000000]
[01:54:56.021]      __var protType   = __protocol & 0x0000FFFF;
[01:54:56.021]        // -> [protType <= 0x00000002]
[01:54:56.021]    </block>
[01:54:56.021]    <control if="protType == 1" while="" timeout="0" info="">
[01:54:56.021]      // if-block "protType == 1"
[01:54:56.021]        // =>  FALSE
[01:54:56.021]      // skip if-block "protType == 1"
[01:54:56.021]    </control>
[01:54:56.024]    <control if="protType == 2" while="" timeout="0" info="">
[01:54:56.024]      // if-block "protType == 2"
[01:54:56.024]        // =>  TRUE
[01:54:56.024]      <control if="isSWJ" while="" timeout="0" info="">
[01:54:56.024]        // if-block "isSWJ"
[01:54:56.024]          // =>  TRUE
[01:54:56.024]        <control if="hasDormant" while="" timeout="0" info="">
[01:54:56.024]          // if-block "hasDormant"
[01:54:56.024]            // =>  FALSE
[01:54:56.024]          // skip if-block "hasDormant"
[01:54:56.024]        </control>
[01:54:56.024]        <control if="!hasDormant" while="" timeout="0" info="">
[01:54:56.024]          // if-block "!hasDormant"
[01:54:56.024]            // =>  TRUE
[01:54:56.024]          <block atomic="false" info="">
[01:54:56.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:54:56.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:56.024]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:54:56.024]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:54:56.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:54:56.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:56.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:54:56.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:54:56.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:54:56.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:56.034]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:54:56.034]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:54:56.034]          </block>
[01:54:56.034]          // end if-block "!hasDormant"
[01:54:56.034]        </control>
[01:54:56.034]        // end if-block "isSWJ"
[01:54:56.034]      </control>
[01:54:56.034]      <control if="!isSWJ" while="" timeout="0" info="">
[01:54:56.034]        // if-block "!isSWJ"
[01:54:56.034]          // =>  FALSE
[01:54:56.041]        // skip if-block "!isSWJ"
[01:54:56.041]      </control>
[01:54:56.041]      <block atomic="false" info="">
[01:54:56.041]        ReadDP(0x0);
[01:54:56.041]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:54:56.041]      </block>
[01:54:56.041]      // end if-block "protType == 2"
[01:54:56.041]    </control>
[01:54:56.041]  </sequence>
[01:54:56.041]  
[01:54:56.044]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:54:56.044]  
[01:54:56.044]  <debugvars>
[01:54:56.044]    // Pre-defined
[01:54:56.044]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:56.044]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:56.044]    __dp=0x00000000
[01:54:56.044]    __ap=0x00000000
[01:54:56.044]    __traceout=0x00000000      (Trace Disabled)
[01:54:56.044]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:56.044]    __FlashAddr=0x00000000
[01:54:56.044]    __FlashLen=0x00000000
[01:54:56.044]    __FlashArg=0x00000000
[01:54:56.044]    __FlashOp=0x00000000
[01:54:56.044]    __Result=0x00000000
[01:54:56.044]  </debugvars>
[01:54:56.044]  
[01:54:56.044]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:54:56.044]    <block atomic="false" info="">
[01:54:56.044]      __var SW_DP_ABORT       = 0x0;
[01:54:56.044]        // -> [SW_DP_ABORT <= 0x00000000]
[01:54:56.044]      __var DP_CTRL_STAT      = 0x4;
[01:54:56.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:54:56.044]      __var DP_SELECT         = 0x8;
[01:54:56.044]        // -> [DP_SELECT <= 0x00000008]
[01:54:56.044]      __var powered_down      = 0;
[01:54:56.044]        // -> [powered_down <= 0x00000000]
[01:54:56.044]      WriteDP(DP_SELECT, 0x00000000);
[01:54:56.044]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:54:56.044]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:54:56.051]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:54:56.051]        // -> [powered_down <= 0x00000001]
[01:54:56.051]    </block>
[01:54:56.051]    <control if="powered_down" while="" timeout="0" info="">
[01:54:56.051]      // if-block "powered_down"
[01:54:56.051]        // =>  TRUE
[01:54:56.051]      <block atomic="false" info="">
[01:54:56.051]        Message(0, "Debug/System power-up request sent");
[01:54:56.051]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:54:56.054]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:54:56.054]      </block>
[01:54:56.054]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:54:56.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:54:56.054]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:54:56.054]        // while-condition  =>  FALSE
[01:54:56.054]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:54:56.054]      </control>
[01:54:56.061]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:54:56.061]        // if-block "(__protocol & 0xFFFF) == 1"
[01:54:56.061]          // =>  FALSE
[01:54:56.061]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:54:56.061]      </control>
[01:54:56.061]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:54:56.061]        // if-block "(__protocol & 0xFFFF) == 2"
[01:54:56.061]          // =>  TRUE
[01:54:56.061]        <block atomic="false" info="">
[01:54:56.061]          Message(0, "executing SWD power up");
[01:54:56.061]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:54:56.061]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:54:56.064]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:54:56.064]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:54:56.064]        </block>
[01:54:56.064]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:54:56.064]      </control>
[01:54:56.064]      // end if-block "powered_down"
[01:54:56.064]    </control>
[01:54:56.064]    <block atomic="false" info="">
[01:54:56.064]      __var DEBUG_PORT_VAL    = 0;
[01:54:56.064]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:54:56.064]      __var ACCESS_POINT_VAL  = 0;
[01:54:56.064]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:54:56.064]      __ap = 1; 
[01:54:56.064]        // -> [__ap <= 0x00000001]
[01:54:56.064]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:54:56.071]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:54:56.071]      __ap = 4;
[01:54:56.071]        // -> [__ap <= 0x00000004]
[01:54:56.071]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:56.074]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:54:56.074]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:54:56.074]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:56.074]    </block>
[01:54:56.074]    <block atomic="false" info="">
[01:54:56.074]      __var nReset = 0x80;
[01:54:56.074]        // -> [nReset <= 0x00000080]
[01:54:56.074]      __var canReadPins = 0;
[01:54:56.074]        // -> [canReadPins <= 0x00000000]
[01:54:56.074]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:54:56.074]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:54:56.074]        // -> [canReadPins <= 0x00000001]
[01:54:56.074]    </block>
[01:54:56.074]    <control if="" while="1" timeout="200" info="">
[01:54:56.074]      // while "1"  (timeout="200")
[01:54:56.074]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.081]      // while "1"  (timeout="200")
[01:54:56.081]      // while-condition  =>  TRUE
[01:54:56.083]      // while "1"  (timeout="200")
[01:54:56.083]      // while  =>  TIMEOUT
[01:54:56.083]      // end while "1"
[01:54:56.083]    </control>
[01:54:56.083]    <control if="canReadPins" while="" timeout="0" info="">
[01:54:56.083]      // if-block "canReadPins"
[01:54:56.083]        // =>  TRUE
[01:54:56.083]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:54:56.083]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:54:56.083]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:54:56.083]        // while-condition  =>  FALSE
[01:54:56.083]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:54:56.083]      </control>
[01:54:56.083]      // end if-block "canReadPins"
[01:54:56.083]    </control>
[01:54:56.083]    <control if="!canReadPins" while="" timeout="0" info="">
[01:54:56.083]      // if-block "!canReadPins"
[01:54:56.083]        // =>  FALSE
[01:54:56.083]      // skip if-block "!canReadPins"
[01:54:56.083]    </control>
[01:54:56.083]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:54:56.083]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:56.083]        // =>  TRUE
[01:54:56.083]      <block atomic="false" info="">
[01:54:56.083]        WriteAP(0x00, 0x190008);
[01:54:56.083]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:56.083]        WriteAP(0xF0, 0x01);
[01:54:56.094]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:56.094]      </block>
[01:54:56.094]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:56.094]    </control>
[01:54:56.094]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:54:56.094]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:56.094]        // =>  FALSE
[01:54:56.094]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:56.094]    </control>
[01:54:56.094]    <block atomic="false" info="">
[01:54:56.094]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:56.101]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:54:56.101]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:54:56.101]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:56.101]      __ap = 0; //lets make sure we reset the access point selection
[01:54:56.104]        // -> [__ap <= 0x00000000]
[01:54:56.104]    </block>
[01:54:56.104]  </sequence>
[01:54:56.104]  
[01:54:56.141]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:54:56.141]  
[01:54:56.141]  <debugvars>
[01:54:56.141]    // Pre-defined
[01:54:56.144]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:56.144]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:56.144]    __dp=0x00000000
[01:54:56.144]    __ap=0x00000000
[01:54:56.144]    __traceout=0x00000000      (Trace Disabled)
[01:54:56.144]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:56.144]    __FlashAddr=0x00000000
[01:54:56.144]    __FlashLen=0x00000000
[01:54:56.144]    __FlashArg=0x00000000
[01:54:56.144]    __FlashOp=0x00000000
[01:54:56.144]    __Result=0x00000000
[01:54:56.144]  </debugvars>
[01:54:56.144]  
[01:54:56.144]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:54:56.144]    <block atomic="false" info="">
[01:54:56.144]      __var deviceID = 0;
[01:54:56.144]        // -> [deviceID <= 0x00000000]
[01:54:56.144]      __var version = 0;
[01:54:56.144]        // -> [version <= 0x00000000]
[01:54:56.144]      __var partNum = 0;
[01:54:56.144]        // -> [partNum <= 0x00000000]
[01:54:56.144]      __var manuf = 0;
[01:54:56.144]        // -> [manuf <= 0x00000000]
[01:54:56.144]      __var isMSPM0G1X0X_G3X0X = 0;
[01:54:56.144]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:54:56.144]      __var isProduction = 0;
[01:54:56.144]        // -> [isProduction <= 0x00000000]
[01:54:56.144]      __var continueId = 0;
[01:54:56.144]        // -> [continueId <= 0x00000000]
[01:54:56.144]      deviceID =   Read32(0x41C40004);
[01:54:56.151]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:54:56.151]        // -> [deviceID <= 0x2BB8802F]
[01:54:56.151]      version = deviceID >> 28;
[01:54:56.151]        // -> [version <= 0x00000002]
[01:54:56.151]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:54:56.151]        // -> [partNum <= 0x0000BB88]
[01:54:56.154]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:54:56.154]        // -> [manuf <= 0x00000017]
[01:54:56.154]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:54:56.154]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:54:56.154]      isProduction = (version > 0);
[01:54:56.154]        // -> [isProduction <= 0x00000001]
[01:54:56.154]    </block>
[01:54:56.154]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:54:56.154]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:54:56.154]        // =>  FALSE
[01:54:56.154]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:54:56.154]    </control>
[01:54:56.154]    <control if="continueId == 4" while="" timeout="0" info="">
[01:54:56.154]      // if-block "continueId == 4"
[01:54:56.154]        // =>  FALSE
[01:54:56.154]      // skip if-block "continueId == 4"
[01:54:56.154]    </control>
[01:54:56.154]    <control if="!isProduction" while="" timeout="0" info="">
[01:54:56.154]      // if-block "!isProduction"
[01:54:56.154]        // =>  FALSE
[01:54:56.154]      // skip if-block "!isProduction"
[01:54:56.154]    </control>
[01:54:56.154]  </sequence>
[01:54:56.154]  
[01:55:37.892]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:55:37.892]  
[01:55:37.892]  <debugvars>
[01:55:37.892]    // Pre-defined
[01:55:37.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:55:37.892]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:55:37.892]    __dp=0x00000000
[01:55:37.892]    __ap=0x00000000
[01:55:37.892]    __traceout=0x00000000      (Trace Disabled)
[01:55:37.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:55:37.895]    __FlashAddr=0x00000000
[01:55:37.895]    __FlashLen=0x00000000
[01:55:37.895]    __FlashArg=0x00000000
[01:55:37.895]    __FlashOp=0x00000000
[01:55:37.895]    __Result=0x00000000
[01:55:37.895]  </debugvars>
[01:55:37.895]  
[01:55:37.895]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:55:37.895]    <block atomic="false" info="">
[01:55:37.895]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:55:37.895]        // -> [isSWJ <= 0x00000001]
[01:55:37.895]      __var hasDormant = __protocol & 0x00020000;
[01:55:37.895]        // -> [hasDormant <= 0x00000000]
[01:55:37.895]      __var protType   = __protocol & 0x0000FFFF;
[01:55:37.895]        // -> [protType <= 0x00000002]
[01:55:37.895]    </block>
[01:55:37.895]    <control if="protType == 1" while="" timeout="0" info="">
[01:55:37.895]      // if-block "protType == 1"
[01:55:37.895]        // =>  FALSE
[01:55:37.895]      // skip if-block "protType == 1"
[01:55:37.895]    </control>
[01:55:37.895]    <control if="protType == 2" while="" timeout="0" info="">
[01:55:37.895]      // if-block "protType == 2"
[01:55:37.895]        // =>  TRUE
[01:55:37.895]      <control if="isSWJ" while="" timeout="0" info="">
[01:55:37.895]        // if-block "isSWJ"
[01:55:37.895]          // =>  TRUE
[01:55:37.895]        <control if="hasDormant" while="" timeout="0" info="">
[01:55:37.895]          // if-block "hasDormant"
[01:55:37.895]            // =>  FALSE
[01:55:37.895]          // skip if-block "hasDormant"
[01:55:37.895]        </control>
[01:55:37.895]        <control if="!hasDormant" while="" timeout="0" info="">
[01:55:37.895]          // if-block "!hasDormant"
[01:55:37.895]            // =>  TRUE
[01:55:37.895]          <block atomic="false" info="">
[01:55:37.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:55:37.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:55:37.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:55:37.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:55:37.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:55:37.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:55:37.905]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:55:37.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:55:37.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:55:37.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:55:37.912]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:55:37.913]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:55:37.913]          </block>
[01:55:37.913]          // end if-block "!hasDormant"
[01:55:37.913]        </control>
[01:55:37.913]        // end if-block "isSWJ"
[01:55:37.913]      </control>
[01:55:37.913]      <control if="!isSWJ" while="" timeout="0" info="">
[01:55:37.913]        // if-block "!isSWJ"
[01:55:37.913]          // =>  FALSE
[01:55:37.913]        // skip if-block "!isSWJ"
[01:55:37.913]      </control>
[01:55:37.913]      <block atomic="false" info="">
[01:55:37.913]        ReadDP(0x0);
[01:55:37.920]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:55:37.920]      </block>
[01:55:37.920]      // end if-block "protType == 2"
[01:55:37.922]    </control>
[01:55:37.922]  </sequence>
[01:55:37.922]  
[01:55:37.925]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:55:37.925]  
[01:55:37.925]  <debugvars>
[01:55:37.925]    // Pre-defined
[01:55:37.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:55:37.925]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:55:37.925]    __dp=0x00000000
[01:55:37.925]    __ap=0x00000000
[01:55:37.925]    __traceout=0x00000000      (Trace Disabled)
[01:55:37.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:55:37.925]    __FlashAddr=0x00000000
[01:55:37.925]    __FlashLen=0x00000000
[01:55:37.925]    __FlashArg=0x00000000
[01:55:37.925]    __FlashOp=0x00000000
[01:55:37.925]    __Result=0x00000000
[01:55:37.925]  </debugvars>
[01:55:37.925]  
[01:55:37.925]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:55:37.925]    <block atomic="false" info="">
[01:55:37.925]      __var SW_DP_ABORT       = 0x0;
[01:55:37.925]        // -> [SW_DP_ABORT <= 0x00000000]
[01:55:37.925]      __var DP_CTRL_STAT      = 0x4;
[01:55:37.925]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:55:37.932]      __var DP_SELECT         = 0x8;
[01:55:37.932]        // -> [DP_SELECT <= 0x00000008]
[01:55:37.932]      __var powered_down      = 0;
[01:55:37.932]        // -> [powered_down <= 0x00000000]
[01:55:37.932]      WriteDP(DP_SELECT, 0x00000000);
[01:55:37.934]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:55:37.935]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:55:37.938]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:55:37.938]        // -> [powered_down <= 0x00000001]
[01:55:37.939]    </block>
[01:55:37.939]    <control if="powered_down" while="" timeout="0" info="">
[01:55:37.939]      // if-block "powered_down"
[01:55:37.939]        // =>  TRUE
[01:55:37.939]      <block atomic="false" info="">
[01:55:37.939]        Message(0, "Debug/System power-up request sent");
[01:55:37.939]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:55:37.939]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:55:37.939]      </block>
[01:55:37.939]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:55:37.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:55:37.944]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:55:37.944]        // while-condition  =>  FALSE
[01:55:37.944]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:55:37.944]      </control>
[01:55:37.944]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:55:37.944]        // if-block "(__protocol & 0xFFFF) == 1"
[01:55:37.944]          // =>  FALSE
[01:55:37.944]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:55:37.944]      </control>
[01:55:37.944]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:55:37.944]        // if-block "(__protocol & 0xFFFF) == 2"
[01:55:37.945]          // =>  TRUE
[01:55:37.945]        <block atomic="false" info="">
[01:55:37.945]          Message(0, "executing SWD power up");
[01:55:37.945]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:55:37.945]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:55:37.945]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:55:37.945]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:55:37.945]        </block>
[01:55:37.945]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:55:37.945]      </control>
[01:55:37.945]      // end if-block "powered_down"
[01:55:37.945]    </control>
[01:55:37.945]    <block atomic="false" info="">
[01:55:37.945]      __var DEBUG_PORT_VAL    = 0;
[01:55:37.945]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:55:37.945]      __var ACCESS_POINT_VAL  = 0;
[01:55:37.945]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:55:37.953]      __ap = 1; 
[01:55:37.953]        // -> [__ap <= 0x00000001]
[01:55:37.953]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:55:37.955]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:55:37.955]      __ap = 4;
[01:55:37.955]        // -> [__ap <= 0x00000004]
[01:55:37.955]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:55:37.966]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:55:37.966]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:55:37.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:55:37.966]    </block>
[01:55:37.966]    <block atomic="false" info="">
[01:55:37.966]      __var nReset = 0x80;
[01:55:37.966]        // -> [nReset <= 0x00000080]
[01:55:37.966]      __var canReadPins = 0;
[01:55:37.966]        // -> [canReadPins <= 0x00000000]
[01:55:37.966]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:55:37.966]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:55:37.966]        // -> [canReadPins <= 0x00000001]
[01:55:37.966]    </block>
[01:55:37.966]    <control if="" while="1" timeout="200" info="">
[01:55:37.973]      // while "1"  (timeout="200")
[01:55:37.973]      // while-condition  =>  TRUE
[01:55:37.973]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.974]      // while-condition  =>  TRUE
[01:55:37.974]      // while "1"  (timeout="200")
[01:55:37.975]      // while-condition  =>  TRUE
[01:55:37.975]      // while "1"  (timeout="200")
[01:55:37.975]      // while-condition  =>  TRUE
[01:55:37.975]      // while "1"  (timeout="200")
[01:55:37.975]      // while-condition  =>  TRUE
[01:55:37.975]      // while "1"  (timeout="200")
[01:55:37.975]      // while-condition  =>  TRUE
[01:55:37.975]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.976]      // while-condition  =>  TRUE
[01:55:37.976]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.983]      // while "1"  (timeout="200")
[01:55:37.983]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.985]      // while-condition  =>  TRUE
[01:55:37.985]      // while "1"  (timeout="200")
[01:55:37.993]      // while-condition  =>  TRUE
[01:55:37.993]      // while "1"  (timeout="200")
[01:55:37.993]      // while  =>  TIMEOUT
[01:55:37.993]      // end while "1"
[01:55:37.993]    </control>
[01:55:37.993]    <control if="canReadPins" while="" timeout="0" info="">
[01:55:37.993]      // if-block "canReadPins"
[01:55:37.993]        // =>  TRUE
[01:55:37.993]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:55:37.993]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:55:37.996]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:55:37.996]        // while-condition  =>  FALSE
[01:55:37.996]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:55:37.996]      </control>
[01:55:37.996]      // end if-block "canReadPins"
[01:55:37.996]    </control>
[01:55:37.996]    <control if="!canReadPins" while="" timeout="0" info="">
[01:55:37.996]      // if-block "!canReadPins"
[01:55:37.996]        // =>  FALSE
[01:55:37.996]      // skip if-block "!canReadPins"
[01:55:37.996]    </control>
[01:55:37.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:55:37.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:55:37.996]        // =>  TRUE
[01:55:37.996]      <block atomic="false" info="">
[01:55:37.996]        WriteAP(0x00, 0x190008);
[01:55:38.004]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:55:38.004]        WriteAP(0xF0, 0x01);
[01:55:38.010]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:55:38.010]      </block>
[01:55:38.010]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:55:38.010]    </control>
[01:55:38.010]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:55:38.010]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:55:38.010]        // =>  FALSE
[01:55:38.010]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:55:38.010]    </control>
[01:55:38.010]    <block atomic="false" info="">
[01:55:38.014]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:55:38.020]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:55:38.020]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:55:38.020]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:55:38.020]      __ap = 0; //lets make sure we reset the access point selection
[01:55:38.020]        // -> [__ap <= 0x00000000]
[01:55:38.020]    </block>
[01:55:38.020]  </sequence>
[01:55:38.020]  
[01:55:38.045]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:55:38.045]  
[01:55:38.045]  <debugvars>
[01:55:38.045]    // Pre-defined
[01:55:38.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:55:38.045]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:55:38.045]    __dp=0x00000000
[01:55:38.045]    __ap=0x00000000
[01:55:38.045]    __traceout=0x00000000      (Trace Disabled)
[01:55:38.045]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:55:38.045]    __FlashAddr=0x00000000
[01:55:38.045]    __FlashLen=0x00000000
[01:55:38.045]    __FlashArg=0x00000000
[01:55:38.045]    __FlashOp=0x00000000
[01:55:38.045]    __Result=0x00000000
[01:55:38.045]  </debugvars>
[01:55:38.045]  
[01:55:38.045]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:55:38.045]    <block atomic="false" info="">
[01:55:38.045]      __var deviceID = 0;
[01:55:38.045]        // -> [deviceID <= 0x00000000]
[01:55:38.045]      __var version = 0;
[01:55:38.045]        // -> [version <= 0x00000000]
[01:55:38.045]      __var partNum = 0;
[01:55:38.045]        // -> [partNum <= 0x00000000]
[01:55:38.055]      __var manuf = 0;
[01:55:38.055]        // -> [manuf <= 0x00000000]
[01:55:38.055]      __var isMSPM0G1X0X_G3X0X = 0;
[01:55:38.055]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:55:38.055]      __var isProduction = 0;
[01:55:38.055]        // -> [isProduction <= 0x00000000]
[01:55:38.055]      __var continueId = 0;
[01:55:38.055]        // -> [continueId <= 0x00000000]
[01:55:38.055]      deviceID =   Read32(0x41C40004);
[01:55:38.065]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:55:38.065]        // -> [deviceID <= 0x2BB8802F]
[01:55:38.065]      version = deviceID >> 28;
[01:55:38.065]        // -> [version <= 0x00000002]
[01:55:38.065]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:55:38.065]        // -> [partNum <= 0x0000BB88]
[01:55:38.065]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:55:38.065]        // -> [manuf <= 0x00000017]
[01:55:38.065]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:55:38.065]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:55:38.065]      isProduction = (version > 0);
[01:55:38.065]        // -> [isProduction <= 0x00000001]
[01:55:38.065]    </block>
[01:55:38.065]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:55:38.065]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:55:38.065]        // =>  FALSE
[01:55:38.065]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:55:38.065]    </control>
[01:55:38.065]    <control if="continueId == 4" while="" timeout="0" info="">
[01:55:38.065]      // if-block "continueId == 4"
[01:55:38.065]        // =>  FALSE
[01:55:38.065]      // skip if-block "continueId == 4"
[01:55:38.065]    </control>
[01:55:38.065]    <control if="!isProduction" while="" timeout="0" info="">
[01:55:38.065]      // if-block "!isProduction"
[01:55:38.065]        // =>  FALSE
[01:55:38.065]      // skip if-block "!isProduction"
[01:55:38.065]    </control>
[01:55:38.065]  </sequence>
[01:55:38.065]  
[02:10:28.686]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:10:28.686]  
[02:10:28.697]  <debugvars>
[02:10:28.697]    // Pre-defined
[02:10:28.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:28.697]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:10:28.697]    __dp=0x00000000
[02:10:28.697]    __ap=0x00000000
[02:10:28.697]    __traceout=0x00000000      (Trace Disabled)
[02:10:28.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:28.697]    __FlashAddr=0x00000000
[02:10:28.697]    __FlashLen=0x00000000
[02:10:28.697]    __FlashArg=0x00000000
[02:10:28.697]    __FlashOp=0x00000000
[02:10:28.697]    __Result=0x00000000
[02:10:28.697]  </debugvars>
[02:10:28.697]  
[02:10:28.697]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:10:28.697]    <block atomic="false" info="">
[02:10:28.697]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:10:28.697]        // -> [isSWJ <= 0x00000001]
[02:10:28.697]      __var hasDormant = __protocol & 0x00020000;
[02:10:28.697]        // -> [hasDormant <= 0x00000000]
[02:10:28.697]      __var protType   = __protocol & 0x0000FFFF;
[02:10:28.697]        // -> [protType <= 0x00000002]
[02:10:28.697]    </block>
[02:10:28.697]    <control if="protType == 1" while="" timeout="0" info="">
[02:10:28.697]      // if-block "protType == 1"
[02:10:28.697]        // =>  FALSE
[02:10:28.697]      // skip if-block "protType == 1"
[02:10:28.697]    </control>
[02:10:28.697]    <control if="protType == 2" while="" timeout="0" info="">
[02:10:28.697]      // if-block "protType == 2"
[02:10:28.697]        // =>  TRUE
[02:10:28.697]      <control if="isSWJ" while="" timeout="0" info="">
[02:10:28.697]        // if-block "isSWJ"
[02:10:28.697]          // =>  TRUE
[02:10:28.697]        <control if="hasDormant" while="" timeout="0" info="">
[02:10:28.697]          // if-block "hasDormant"
[02:10:28.697]            // =>  FALSE
[02:10:28.697]          // skip if-block "hasDormant"
[02:10:28.697]        </control>
[02:10:28.697]        <control if="!hasDormant" while="" timeout="0" info="">
[02:10:28.697]          // if-block "!hasDormant"
[02:10:28.697]            // =>  TRUE
[02:10:28.697]          <block atomic="false" info="">
[02:10:28.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:10:28.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:10:28.697]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:10:28.706]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:10:28.706]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:10:28.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:10:28.706]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:10:28.706]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:10:28.706]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:10:28.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:10:28.706]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:10:28.716]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:10:28.716]          </block>
[02:10:28.716]          // end if-block "!hasDormant"
[02:10:28.716]        </control>
[02:10:28.716]        // end if-block "isSWJ"
[02:10:28.716]      </control>
[02:10:28.716]      <control if="!isSWJ" while="" timeout="0" info="">
[02:10:28.716]        // if-block "!isSWJ"
[02:10:28.716]          // =>  FALSE
[02:10:28.716]        // skip if-block "!isSWJ"
[02:10:28.716]      </control>
[02:10:28.716]      <block atomic="false" info="">
[02:10:28.716]        ReadDP(0x0);
[02:10:28.719]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:10:28.719]      </block>
[02:10:28.719]      // end if-block "protType == 2"
[02:10:28.719]    </control>
[02:10:28.719]  </sequence>
[02:10:28.719]  
[02:10:28.719]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:10:28.719]  
[02:10:28.719]  <debugvars>
[02:10:28.719]    // Pre-defined
[02:10:28.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:28.719]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:10:28.719]    __dp=0x00000000
[02:10:28.719]    __ap=0x00000000
[02:10:28.719]    __traceout=0x00000000      (Trace Disabled)
[02:10:28.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:28.719]    __FlashAddr=0x00000000
[02:10:28.719]    __FlashLen=0x00000000
[02:10:28.719]    __FlashArg=0x00000000
[02:10:28.719]    __FlashOp=0x00000000
[02:10:28.719]    __Result=0x00000000
[02:10:28.719]  </debugvars>
[02:10:28.719]  
[02:10:28.719]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:10:28.719]    <block atomic="false" info="">
[02:10:28.719]      __var SW_DP_ABORT       = 0x0;
[02:10:28.719]        // -> [SW_DP_ABORT <= 0x00000000]
[02:10:28.719]      __var DP_CTRL_STAT      = 0x4;
[02:10:28.719]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:10:28.719]      __var DP_SELECT         = 0x8;
[02:10:28.719]        // -> [DP_SELECT <= 0x00000008]
[02:10:28.719]      __var powered_down      = 0;
[02:10:28.719]        // -> [powered_down <= 0x00000000]
[02:10:28.726]      WriteDP(DP_SELECT, 0x00000000);
[02:10:28.726]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:10:28.726]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:10:28.726]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:10:28.726]        // -> [powered_down <= 0x00000001]
[02:10:28.726]    </block>
[02:10:28.726]    <control if="powered_down" while="" timeout="0" info="">
[02:10:28.726]      // if-block "powered_down"
[02:10:28.726]        // =>  TRUE
[02:10:28.726]      <block atomic="false" info="">
[02:10:28.726]        Message(0, "Debug/System power-up request sent");
[02:10:28.726]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:10:28.726]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:10:28.726]      </block>
[02:10:28.726]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:10:28.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:10:28.726]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:10:28.726]        // while-condition  =>  FALSE
[02:10:28.726]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:10:28.726]      </control>
[02:10:28.726]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:10:28.726]        // if-block "(__protocol & 0xFFFF) == 1"
[02:10:28.726]          // =>  FALSE
[02:10:28.726]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:10:28.726]      </control>
[02:10:28.726]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:10:28.726]        // if-block "(__protocol & 0xFFFF) == 2"
[02:10:28.726]          // =>  TRUE
[02:10:28.726]        <block atomic="false" info="">
[02:10:28.726]          Message(0, "executing SWD power up");
[02:10:28.726]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:10:28.736]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:10:28.736]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:10:28.736]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:10:28.736]        </block>
[02:10:28.736]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:10:28.736]      </control>
[02:10:28.736]      // end if-block "powered_down"
[02:10:28.736]    </control>
[02:10:28.736]    <block atomic="false" info="">
[02:10:28.736]      __var DEBUG_PORT_VAL    = 0;
[02:10:28.736]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:10:28.736]      __var ACCESS_POINT_VAL  = 0;
[02:10:28.736]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:10:28.736]      __ap = 1; 
[02:10:28.736]        // -> [__ap <= 0x00000001]
[02:10:28.736]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:10:28.746]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:10:28.746]      __ap = 4;
[02:10:28.746]        // -> [__ap <= 0x00000004]
[02:10:28.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:10:28.756]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:10:28.756]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:10:28.756]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:10:28.756]    </block>
[02:10:28.756]    <block atomic="false" info="">
[02:10:28.756]      __var nReset = 0x80;
[02:10:28.756]        // -> [nReset <= 0x00000080]
[02:10:28.756]      __var canReadPins = 0;
[02:10:28.756]        // -> [canReadPins <= 0x00000000]
[02:10:28.756]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:10:28.756]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:10:28.756]        // -> [canReadPins <= 0x00000001]
[02:10:28.756]    </block>
[02:10:28.756]    <control if="" while="1" timeout="200" info="">
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.756]      // while "1"  (timeout="200")
[02:10:28.756]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.766]      // while-condition  =>  TRUE
[02:10:28.766]      // while "1"  (timeout="200")
[02:10:28.776]      // while-condition  =>  TRUE
[02:10:28.776]      // while "1"  (timeout="200")
[02:10:28.776]      // while  =>  TIMEOUT
[02:10:28.776]      // end while "1"
[02:10:28.776]    </control>
[02:10:28.776]    <control if="canReadPins" while="" timeout="0" info="">
[02:10:28.776]      // if-block "canReadPins"
[02:10:28.776]        // =>  TRUE
[02:10:28.776]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:10:28.776]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:10:28.776]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:10:28.776]        // while-condition  =>  FALSE
[02:10:28.776]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:10:28.776]      </control>
[02:10:28.776]      // end if-block "canReadPins"
[02:10:28.776]    </control>
[02:10:28.776]    <control if="!canReadPins" while="" timeout="0" info="">
[02:10:28.776]      // if-block "!canReadPins"
[02:10:28.776]        // =>  FALSE
[02:10:28.776]      // skip if-block "!canReadPins"
[02:10:28.776]    </control>
[02:10:28.776]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:10:28.776]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:10:28.776]        // =>  TRUE
[02:10:28.776]      <block atomic="false" info="">
[02:10:28.776]        WriteAP(0x00, 0x190008);
[02:10:28.776]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:10:28.776]        WriteAP(0xF0, 0x01);
[02:10:28.786]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:10:28.786]      </block>
[02:10:28.786]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:10:28.786]    </control>
[02:10:28.786]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:10:28.786]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:10:28.786]        // =>  FALSE
[02:10:28.786]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:10:28.786]    </control>
[02:10:28.786]    <block atomic="false" info="">
[02:10:28.786]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:10:28.786]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:10:28.786]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:10:28.786]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:10:28.786]      __ap = 0; //lets make sure we reset the access point selection
[02:10:28.786]        // -> [__ap <= 0x00000000]
[02:10:28.796]    </block>
[02:10:28.796]  </sequence>
[02:10:28.796]  
[02:10:28.819]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:10:28.819]  
[02:10:28.819]  <debugvars>
[02:10:28.819]    // Pre-defined
[02:10:28.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:10:28.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:10:28.827]    __dp=0x00000000
[02:10:28.827]    __ap=0x00000000
[02:10:28.827]    __traceout=0x00000000      (Trace Disabled)
[02:10:28.827]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:10:28.827]    __FlashAddr=0x00000000
[02:10:28.827]    __FlashLen=0x00000000
[02:10:28.827]    __FlashArg=0x00000000
[02:10:28.827]    __FlashOp=0x00000000
[02:10:28.827]    __Result=0x00000000
[02:10:28.827]  </debugvars>
[02:10:28.827]  
[02:10:28.827]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:10:28.827]    <block atomic="false" info="">
[02:10:28.827]      __var deviceID = 0;
[02:10:28.827]        // -> [deviceID <= 0x00000000]
[02:10:28.827]      __var version = 0;
[02:10:28.827]        // -> [version <= 0x00000000]
[02:10:28.827]      __var partNum = 0;
[02:10:28.827]        // -> [partNum <= 0x00000000]
[02:10:28.827]      __var manuf = 0;
[02:10:28.827]        // -> [manuf <= 0x00000000]
[02:10:28.827]      __var isMSPM0G1X0X_G3X0X = 0;
[02:10:28.827]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:10:28.827]      __var isProduction = 0;
[02:10:28.827]        // -> [isProduction <= 0x00000000]
[02:10:28.827]      __var continueId = 0;
[02:10:28.827]        // -> [continueId <= 0x00000000]
[02:10:28.827]      deviceID =   Read32(0x41C40004);
[02:10:28.833]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:10:28.833]        // -> [deviceID <= 0x2BB8802F]
[02:10:28.833]      version = deviceID >> 28;
[02:10:28.833]        // -> [version <= 0x00000002]
[02:10:28.833]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:10:28.833]        // -> [partNum <= 0x0000BB88]
[02:10:28.837]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:10:28.837]        // -> [manuf <= 0x00000017]
[02:10:28.837]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:10:28.837]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:10:28.837]      isProduction = (version > 0);
[02:10:28.837]        // -> [isProduction <= 0x00000001]
[02:10:28.837]    </block>
[02:10:28.837]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:10:28.837]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:10:28.837]        // =>  FALSE
[02:10:28.837]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:10:28.837]    </control>
[02:10:28.837]    <control if="continueId == 4" while="" timeout="0" info="">
[02:10:28.837]      // if-block "continueId == 4"
[02:10:28.837]        // =>  FALSE
[02:10:28.837]      // skip if-block "continueId == 4"
[02:10:28.837]    </control>
[02:10:28.837]    <control if="!isProduction" while="" timeout="0" info="">
[02:10:28.837]      // if-block "!isProduction"
[02:10:28.837]        // =>  FALSE
[02:10:28.837]      // skip if-block "!isProduction"
[02:10:28.837]    </control>
[02:10:28.837]  </sequence>
[02:10:28.837]  
[02:12:04.159]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:12:04.159]  
[02:12:04.173]  <debugvars>
[02:12:04.173]    // Pre-defined
[02:12:04.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:12:04.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:12:04.173]    __dp=0x00000000
[02:12:04.173]    __ap=0x00000000
[02:12:04.173]    __traceout=0x00000000      (Trace Disabled)
[02:12:04.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:12:04.173]    __FlashAddr=0x00000000
[02:12:04.173]    __FlashLen=0x00000000
[02:12:04.173]    __FlashArg=0x00000000
[02:12:04.173]    __FlashOp=0x00000000
[02:12:04.173]    __Result=0x00000000
[02:12:04.173]  </debugvars>
[02:12:04.173]  
[02:12:04.173]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:12:04.173]    <block atomic="false" info="">
[02:12:04.173]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:12:04.173]        // -> [isSWJ <= 0x00000001]
[02:12:04.173]      __var hasDormant = __protocol & 0x00020000;
[02:12:04.173]        // -> [hasDormant <= 0x00000000]
[02:12:04.173]      __var protType   = __protocol & 0x0000FFFF;
[02:12:04.173]        // -> [protType <= 0x00000002]
[02:12:04.173]    </block>
[02:12:04.173]    <control if="protType == 1" while="" timeout="0" info="">
[02:12:04.173]      // if-block "protType == 1"
[02:12:04.173]        // =>  FALSE
[02:12:04.173]      // skip if-block "protType == 1"
[02:12:04.173]    </control>
[02:12:04.173]    <control if="protType == 2" while="" timeout="0" info="">
[02:12:04.173]      // if-block "protType == 2"
[02:12:04.173]        // =>  TRUE
[02:12:04.173]      <control if="isSWJ" while="" timeout="0" info="">
[02:12:04.173]        // if-block "isSWJ"
[02:12:04.173]          // =>  TRUE
[02:12:04.173]        <control if="hasDormant" while="" timeout="0" info="">
[02:12:04.173]          // if-block "hasDormant"
[02:12:04.173]            // =>  FALSE
[02:12:04.173]          // skip if-block "hasDormant"
[02:12:04.173]        </control>
[02:12:04.173]        <control if="!hasDormant" while="" timeout="0" info="">
[02:12:04.173]          // if-block "!hasDormant"
[02:12:04.173]            // =>  TRUE
[02:12:04.173]          <block atomic="false" info="">
[02:12:04.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:12:04.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:12:04.179]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:12:04.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:12:04.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:12:04.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:12:04.179]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:12:04.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:12:04.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:12:04.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:12:04.179]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:12:04.179]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:12:04.179]          </block>
[02:12:04.179]          // end if-block "!hasDormant"
[02:12:04.179]        </control>
[02:12:04.189]        // end if-block "isSWJ"
[02:12:04.189]      </control>
[02:12:04.189]      <control if="!isSWJ" while="" timeout="0" info="">
[02:12:04.189]        // if-block "!isSWJ"
[02:12:04.189]          // =>  FALSE
[02:12:04.189]        // skip if-block "!isSWJ"
[02:12:04.189]      </control>
[02:12:04.189]      <block atomic="false" info="">
[02:12:04.189]        ReadDP(0x0);
[02:12:04.189]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:12:04.189]      </block>
[02:12:04.189]      // end if-block "protType == 2"
[02:12:04.189]    </control>
[02:12:04.189]  </sequence>
[02:12:04.189]  
[02:12:04.199]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:12:04.199]  
[02:12:04.199]  <debugvars>
[02:12:04.199]    // Pre-defined
[02:12:04.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:12:04.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:12:04.199]    __dp=0x00000000
[02:12:04.199]    __ap=0x00000000
[02:12:04.199]    __traceout=0x00000000      (Trace Disabled)
[02:12:04.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:12:04.199]    __FlashAddr=0x00000000
[02:12:04.199]    __FlashLen=0x00000000
[02:12:04.203]    __FlashArg=0x00000000
[02:12:04.203]    __FlashOp=0x00000000
[02:12:04.203]    __Result=0x00000000
[02:12:04.203]  </debugvars>
[02:12:04.203]  
[02:12:04.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:12:04.203]    <block atomic="false" info="">
[02:12:04.203]      __var SW_DP_ABORT       = 0x0;
[02:12:04.203]        // -> [SW_DP_ABORT <= 0x00000000]
[02:12:04.203]      __var DP_CTRL_STAT      = 0x4;
[02:12:04.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:12:04.203]      __var DP_SELECT         = 0x8;
[02:12:04.203]        // -> [DP_SELECT <= 0x00000008]
[02:12:04.203]      __var powered_down      = 0;
[02:12:04.203]        // -> [powered_down <= 0x00000000]
[02:12:04.203]      WriteDP(DP_SELECT, 0x00000000);
[02:12:04.203]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:12:04.203]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:12:04.209]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:12:04.209]        // -> [powered_down <= 0x00000001]
[02:12:04.209]    </block>
[02:12:04.209]    <control if="powered_down" while="" timeout="0" info="">
[02:12:04.209]      // if-block "powered_down"
[02:12:04.209]        // =>  TRUE
[02:12:04.209]      <block atomic="false" info="">
[02:12:04.209]        Message(0, "Debug/System power-up request sent");
[02:12:04.209]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:12:04.209]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:12:04.209]      </block>
[02:12:04.209]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:12:04.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:12:04.209]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:12:04.209]        // while-condition  =>  FALSE
[02:12:04.209]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:12:04.209]      </control>
[02:12:04.209]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:12:04.219]        // if-block "(__protocol & 0xFFFF) == 1"
[02:12:04.219]          // =>  FALSE
[02:12:04.219]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:12:04.219]      </control>
[02:12:04.219]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:12:04.219]        // if-block "(__protocol & 0xFFFF) == 2"
[02:12:04.219]          // =>  TRUE
[02:12:04.219]        <block atomic="false" info="">
[02:12:04.219]          Message(0, "executing SWD power up");
[02:12:04.219]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:12:04.219]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:12:04.219]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:12:04.219]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:12:04.219]        </block>
[02:12:04.219]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:12:04.219]      </control>
[02:12:04.219]      // end if-block "powered_down"
[02:12:04.219]    </control>
[02:12:04.219]    <block atomic="false" info="">
[02:12:04.219]      __var DEBUG_PORT_VAL    = 0;
[02:12:04.219]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:12:04.219]      __var ACCESS_POINT_VAL  = 0;
[02:12:04.219]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:12:04.219]      __ap = 1; 
[02:12:04.219]        // -> [__ap <= 0x00000001]
[02:12:04.219]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:12:04.219]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:12:04.219]      __ap = 4;
[02:12:04.219]        // -> [__ap <= 0x00000004]
[02:12:04.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:12:04.229]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:12:04.229]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:12:04.229]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:12:04.229]    </block>
[02:12:04.229]    <block atomic="false" info="">
[02:12:04.229]      __var nReset = 0x80;
[02:12:04.229]        // -> [nReset <= 0x00000080]
[02:12:04.229]      __var canReadPins = 0;
[02:12:04.229]        // -> [canReadPins <= 0x00000000]
[02:12:04.229]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:12:04.229]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:12:04.229]        // -> [canReadPins <= 0x00000001]
[02:12:04.229]    </block>
[02:12:04.229]    <control if="" while="1" timeout="200" info="">
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.229]      // while "1"  (timeout="200")
[02:12:04.229]      // while-condition  =>  TRUE
[02:12:04.239]      // while "1"  (timeout="200")
[02:12:04.239]      // while  =>  TIMEOUT
[02:12:04.239]      // end while "1"
[02:12:04.239]    </control>
[02:12:04.239]    <control if="canReadPins" while="" timeout="0" info="">
[02:12:04.239]      // if-block "canReadPins"
[02:12:04.239]        // =>  TRUE
[02:12:04.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:12:04.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:12:04.239]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:12:04.239]        // while-condition  =>  FALSE
[02:12:04.239]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:12:04.239]      </control>
[02:12:04.239]      // end if-block "canReadPins"
[02:12:04.239]    </control>
[02:12:04.239]    <control if="!canReadPins" while="" timeout="0" info="">
[02:12:04.239]      // if-block "!canReadPins"
[02:12:04.239]        // =>  FALSE
[02:12:04.239]      // skip if-block "!canReadPins"
[02:12:04.239]    </control>
[02:12:04.239]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:12:04.239]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:12:04.239]        // =>  TRUE
[02:12:04.239]      <block atomic="false" info="">
[02:12:04.239]        WriteAP(0x00, 0x190008);
[02:12:04.249]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:12:04.249]        WriteAP(0xF0, 0x01);
[02:12:04.249]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:12:04.249]      </block>
[02:12:04.249]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:12:04.249]    </control>
[02:12:04.249]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:12:04.249]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:12:04.249]        // =>  FALSE
[02:12:04.249]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:12:04.249]    </control>
[02:12:04.249]    <block atomic="false" info="">
[02:12:04.249]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:12:04.259]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:12:04.259]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:12:04.259]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:12:04.259]      __ap = 0; //lets make sure we reset the access point selection
[02:12:04.259]        // -> [__ap <= 0x00000000]
[02:12:04.259]    </block>
[02:12:04.259]  </sequence>
[02:12:04.259]  
[02:12:04.289]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:12:04.289]  
[02:12:04.289]  <debugvars>
[02:12:04.289]    // Pre-defined
[02:12:04.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:12:04.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:12:04.289]    __dp=0x00000000
[02:12:04.289]    __ap=0x00000000
[02:12:04.289]    __traceout=0x00000000      (Trace Disabled)
[02:12:04.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:12:04.289]    __FlashAddr=0x00000000
[02:12:04.289]    __FlashLen=0x00000000
[02:12:04.289]    __FlashArg=0x00000000
[02:12:04.289]    __FlashOp=0x00000000
[02:12:04.289]    __Result=0x00000000
[02:12:04.289]  </debugvars>
[02:12:04.289]  
[02:12:04.289]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:12:04.289]    <block atomic="false" info="">
[02:12:04.289]      __var deviceID = 0;
[02:12:04.289]        // -> [deviceID <= 0x00000000]
[02:12:04.289]      __var version = 0;
[02:12:04.289]        // -> [version <= 0x00000000]
[02:12:04.289]      __var partNum = 0;
[02:12:04.289]        // -> [partNum <= 0x00000000]
[02:12:04.289]      __var manuf = 0;
[02:12:04.289]        // -> [manuf <= 0x00000000]
[02:12:04.289]      __var isMSPM0G1X0X_G3X0X = 0;
[02:12:04.289]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:12:04.289]      __var isProduction = 0;
[02:12:04.289]        // -> [isProduction <= 0x00000000]
[02:12:04.289]      __var continueId = 0;
[02:12:04.289]        // -> [continueId <= 0x00000000]
[02:12:04.289]      deviceID =   Read32(0x41C40004);
[02:12:04.303]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:12:04.303]        // -> [deviceID <= 0x2BB8802F]
[02:12:04.303]      version = deviceID >> 28;
[02:12:04.303]        // -> [version <= 0x00000002]
[02:12:04.303]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:12:04.303]        // -> [partNum <= 0x0000BB88]
[02:12:04.303]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:12:04.303]        // -> [manuf <= 0x00000017]
[02:12:04.303]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:12:04.303]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:12:04.303]      isProduction = (version > 0);
[02:12:04.303]        // -> [isProduction <= 0x00000001]
[02:12:04.303]    </block>
[02:12:04.303]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:12:04.303]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:12:04.303]        // =>  FALSE
[02:12:04.303]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:12:04.303]    </control>
[02:12:04.303]    <control if="continueId == 4" while="" timeout="0" info="">
[02:12:04.303]      // if-block "continueId == 4"
[02:12:04.303]        // =>  FALSE
[02:12:04.303]      // skip if-block "continueId == 4"
[02:12:04.303]    </control>
[02:12:04.303]    <control if="!isProduction" while="" timeout="0" info="">
[02:12:04.303]      // if-block "!isProduction"
[02:12:04.303]        // =>  FALSE
[02:12:04.303]      // skip if-block "!isProduction"
[02:12:04.303]    </control>
[02:12:04.303]  </sequence>
[02:12:04.303]  
[02:13:13.590]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:13:13.590]  
[02:13:13.590]  <debugvars>
[02:13:13.590]    // Pre-defined
[02:13:13.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:13.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:13:13.590]    __dp=0x00000000
[02:13:13.590]    __ap=0x00000000
[02:13:13.590]    __traceout=0x00000000      (Trace Disabled)
[02:13:13.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:13.590]    __FlashAddr=0x00000000
[02:13:13.590]    __FlashLen=0x00000000
[02:13:13.590]    __FlashArg=0x00000000
[02:13:13.590]    __FlashOp=0x00000000
[02:13:13.590]    __Result=0x00000000
[02:13:13.590]  </debugvars>
[02:13:13.590]  
[02:13:13.590]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:13:13.590]    <block atomic="false" info="">
[02:13:13.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:13:13.590]        // -> [isSWJ <= 0x00000001]
[02:13:13.590]      __var hasDormant = __protocol & 0x00020000;
[02:13:13.590]        // -> [hasDormant <= 0x00000000]
[02:13:13.590]      __var protType   = __protocol & 0x0000FFFF;
[02:13:13.590]        // -> [protType <= 0x00000002]
[02:13:13.590]    </block>
[02:13:13.590]    <control if="protType == 1" while="" timeout="0" info="">
[02:13:13.590]      // if-block "protType == 1"
[02:13:13.590]        // =>  FALSE
[02:13:13.590]      // skip if-block "protType == 1"
[02:13:13.590]    </control>
[02:13:13.590]    <control if="protType == 2" while="" timeout="0" info="">
[02:13:13.590]      // if-block "protType == 2"
[02:13:13.590]        // =>  TRUE
[02:13:13.590]      <control if="isSWJ" while="" timeout="0" info="">
[02:13:13.590]        // if-block "isSWJ"
[02:13:13.590]          // =>  TRUE
[02:13:13.590]        <control if="hasDormant" while="" timeout="0" info="">
[02:13:13.590]          // if-block "hasDormant"
[02:13:13.590]            // =>  FALSE
[02:13:13.590]          // skip if-block "hasDormant"
[02:13:13.596]        </control>
[02:13:13.596]        <control if="!hasDormant" while="" timeout="0" info="">
[02:13:13.596]          // if-block "!hasDormant"
[02:13:13.596]            // =>  TRUE
[02:13:13.596]          <block atomic="false" info="">
[02:13:13.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:13:13.596]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:13.596]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:13:13.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:13:13.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:13:13.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:13.600]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:13:13.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:13:13.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:13:13.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:13.610]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:13:13.610]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:13:13.610]          </block>
[02:13:13.610]          // end if-block "!hasDormant"
[02:13:13.610]        </control>
[02:13:13.610]        // end if-block "isSWJ"
[02:13:13.610]      </control>
[02:13:13.610]      <control if="!isSWJ" while="" timeout="0" info="">
[02:13:13.610]        // if-block "!isSWJ"
[02:13:13.610]          // =>  FALSE
[02:13:13.610]        // skip if-block "!isSWJ"
[02:13:13.613]      </control>
[02:13:13.613]      <block atomic="false" info="">
[02:13:13.613]        ReadDP(0x0);
[02:13:13.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:13:13.613]      </block>
[02:13:13.613]      // end if-block "protType == 2"
[02:13:13.613]    </control>
[02:13:13.613]  </sequence>
[02:13:13.613]  
[02:13:13.620]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:13:13.620]  
[02:13:13.620]  <debugvars>
[02:13:13.620]    // Pre-defined
[02:13:13.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:13.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:13:13.620]    __dp=0x00000000
[02:13:13.620]    __ap=0x00000000
[02:13:13.620]    __traceout=0x00000000      (Trace Disabled)
[02:13:13.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:13.620]    __FlashAddr=0x00000000
[02:13:13.620]    __FlashLen=0x00000000
[02:13:13.620]    __FlashArg=0x00000000
[02:13:13.620]    __FlashOp=0x00000000
[02:13:13.620]    __Result=0x00000000
[02:13:13.620]  </debugvars>
[02:13:13.620]  
[02:13:13.620]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:13:13.620]    <block atomic="false" info="">
[02:13:13.620]      __var SW_DP_ABORT       = 0x0;
[02:13:13.620]        // -> [SW_DP_ABORT <= 0x00000000]
[02:13:13.620]      __var DP_CTRL_STAT      = 0x4;
[02:13:13.620]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:13:13.620]      __var DP_SELECT         = 0x8;
[02:13:13.620]        // -> [DP_SELECT <= 0x00000008]
[02:13:13.620]      __var powered_down      = 0;
[02:13:13.620]        // -> [powered_down <= 0x00000000]
[02:13:13.620]      WriteDP(DP_SELECT, 0x00000000);
[02:13:13.620]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:13:13.620]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:13:13.630]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:13:13.630]        // -> [powered_down <= 0x00000001]
[02:13:13.630]    </block>
[02:13:13.630]    <control if="powered_down" while="" timeout="0" info="">
[02:13:13.630]      // if-block "powered_down"
[02:13:13.630]        // =>  TRUE
[02:13:13.630]      <block atomic="false" info="">
[02:13:13.630]        Message(0, "Debug/System power-up request sent");
[02:13:13.630]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:13:13.630]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:13:13.630]      </block>
[02:13:13.630]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:13:13.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:13:13.630]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:13:13.630]        // while-condition  =>  FALSE
[02:13:13.630]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:13:13.630]      </control>
[02:13:13.630]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:13:13.630]        // if-block "(__protocol & 0xFFFF) == 1"
[02:13:13.630]          // =>  FALSE
[02:13:13.630]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:13:13.630]      </control>
[02:13:13.630]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:13:13.630]        // if-block "(__protocol & 0xFFFF) == 2"
[02:13:13.630]          // =>  TRUE
[02:13:13.630]        <block atomic="false" info="">
[02:13:13.630]          Message(0, "executing SWD power up");
[02:13:13.630]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:13:13.640]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:13:13.640]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:13:13.640]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:13:13.640]        </block>
[02:13:13.640]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:13:13.640]      </control>
[02:13:13.640]      // end if-block "powered_down"
[02:13:13.640]    </control>
[02:13:13.640]    <block atomic="false" info="">
[02:13:13.640]      __var DEBUG_PORT_VAL    = 0;
[02:13:13.640]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:13:13.640]      __var ACCESS_POINT_VAL  = 0;
[02:13:13.640]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:13:13.640]      __ap = 1; 
[02:13:13.640]        // -> [__ap <= 0x00000001]
[02:13:13.640]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:13:13.646]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:13:13.646]      __ap = 4;
[02:13:13.646]        // -> [__ap <= 0x00000004]
[02:13:13.646]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:13:13.650]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:13:13.650]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:13:13.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:13:13.650]    </block>
[02:13:13.650]    <block atomic="false" info="">
[02:13:13.650]      __var nReset = 0x80;
[02:13:13.650]        // -> [nReset <= 0x00000080]
[02:13:13.650]      __var canReadPins = 0;
[02:13:13.650]        // -> [canReadPins <= 0x00000000]
[02:13:13.650]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:13:13.650]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:13:13.650]        // -> [canReadPins <= 0x00000001]
[02:13:13.650]    </block>
[02:13:13.650]    <control if="" while="1" timeout="200" info="">
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.650]      // while "1"  (timeout="200")
[02:13:13.650]      // while-condition  =>  TRUE
[02:13:13.660]      // while "1"  (timeout="200")
[02:13:13.660]      // while  =>  TIMEOUT
[02:13:13.660]      // end while "1"
[02:13:13.660]    </control>
[02:13:13.660]    <control if="canReadPins" while="" timeout="0" info="">
[02:13:13.660]      // if-block "canReadPins"
[02:13:13.660]        // =>  TRUE
[02:13:13.660]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:13:13.660]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:13:13.660]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:13:13.660]        // while-condition  =>  FALSE
[02:13:13.660]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:13:13.660]      </control>
[02:13:13.660]      // end if-block "canReadPins"
[02:13:13.660]    </control>
[02:13:13.660]    <control if="!canReadPins" while="" timeout="0" info="">
[02:13:13.660]      // if-block "!canReadPins"
[02:13:13.660]        // =>  FALSE
[02:13:13.660]      // skip if-block "!canReadPins"
[02:13:13.660]    </control>
[02:13:13.660]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:13:13.660]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:13:13.660]        // =>  TRUE
[02:13:13.660]      <block atomic="false" info="">
[02:13:13.660]        WriteAP(0x00, 0x190008);
[02:13:13.660]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:13:13.660]        WriteAP(0xF0, 0x01);
[02:13:13.670]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:13:13.670]      </block>
[02:13:13.670]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:13:13.670]    </control>
[02:13:13.670]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:13:13.670]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:13:13.670]        // =>  FALSE
[02:13:13.670]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:13:13.670]    </control>
[02:13:13.670]    <block atomic="false" info="">
[02:13:13.670]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:13:13.670]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:13:13.670]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:13:13.670]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:13:13.670]      __ap = 0; //lets make sure we reset the access point selection
[02:13:13.670]        // -> [__ap <= 0x00000000]
[02:13:13.670]    </block>
[02:13:13.670]  </sequence>
[02:13:13.670]  
[02:13:13.710]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:13:13.710]  
[02:13:13.710]  <debugvars>
[02:13:13.710]    // Pre-defined
[02:13:13.710]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:13.710]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:13:13.710]    __dp=0x00000000
[02:13:13.710]    __ap=0x00000000
[02:13:13.710]    __traceout=0x00000000      (Trace Disabled)
[02:13:13.710]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:13.710]    __FlashAddr=0x00000000
[02:13:13.710]    __FlashLen=0x00000000
[02:13:13.710]    __FlashArg=0x00000000
[02:13:13.710]    __FlashOp=0x00000000
[02:13:13.710]    __Result=0x00000000
[02:13:13.710]  </debugvars>
[02:13:13.710]  
[02:13:13.710]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:13:13.710]    <block atomic="false" info="">
[02:13:13.710]      __var deviceID = 0;
[02:13:13.710]        // -> [deviceID <= 0x00000000]
[02:13:13.710]      __var version = 0;
[02:13:13.710]        // -> [version <= 0x00000000]
[02:13:13.710]      __var partNum = 0;
[02:13:13.710]        // -> [partNum <= 0x00000000]
[02:13:13.710]      __var manuf = 0;
[02:13:13.710]        // -> [manuf <= 0x00000000]
[02:13:13.710]      __var isMSPM0G1X0X_G3X0X = 0;
[02:13:13.710]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:13:13.710]      __var isProduction = 0;
[02:13:13.710]        // -> [isProduction <= 0x00000000]
[02:13:13.710]      __var continueId = 0;
[02:13:13.710]        // -> [continueId <= 0x00000000]
[02:13:13.710]      deviceID =   Read32(0x41C40004);
[02:13:13.710]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:13:13.710]        // -> [deviceID <= 0x2BB8802F]
[02:13:13.710]      version = deviceID >> 28;
[02:13:13.710]        // -> [version <= 0x00000002]
[02:13:13.710]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:13:13.710]        // -> [partNum <= 0x0000BB88]
[02:13:13.710]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:13:13.720]        // -> [manuf <= 0x00000017]
[02:13:13.720]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:13:13.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:13:13.720]      isProduction = (version > 0);
[02:13:13.720]        // -> [isProduction <= 0x00000001]
[02:13:13.720]    </block>
[02:13:13.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:13:13.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:13:13.720]        // =>  FALSE
[02:13:13.720]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:13:13.720]    </control>
[02:13:13.720]    <control if="continueId == 4" while="" timeout="0" info="">
[02:13:13.720]      // if-block "continueId == 4"
[02:13:13.720]        // =>  FALSE
[02:13:13.720]      // skip if-block "continueId == 4"
[02:13:13.720]    </control>
[02:13:13.720]    <control if="!isProduction" while="" timeout="0" info="">
[02:13:13.720]      // if-block "!isProduction"
[02:13:13.720]        // =>  FALSE
[02:13:13.720]      // skip if-block "!isProduction"
[02:13:13.720]    </control>
[02:13:13.720]  </sequence>
[02:13:13.720]  
[02:16:36.166]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:16:36.166]  
[02:16:36.173]  <debugvars>
[02:16:36.173]    // Pre-defined
[02:16:36.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:16:36.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:16:36.173]    __dp=0x00000000
[02:16:36.173]    __ap=0x00000000
[02:16:36.173]    __traceout=0x00000000      (Trace Disabled)
[02:16:36.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:16:36.173]    __FlashAddr=0x00000000
[02:16:36.173]    __FlashLen=0x00000000
[02:16:36.173]    __FlashArg=0x00000000
[02:16:36.173]    __FlashOp=0x00000000
[02:16:36.173]    __Result=0x00000000
[02:16:36.173]  </debugvars>
[02:16:36.173]  
[02:16:36.173]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:16:36.173]    <block atomic="false" info="">
[02:16:36.173]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:16:36.173]        // -> [isSWJ <= 0x00000001]
[02:16:36.173]      __var hasDormant = __protocol & 0x00020000;
[02:16:36.173]        // -> [hasDormant <= 0x00000000]
[02:16:36.173]      __var protType   = __protocol & 0x0000FFFF;
[02:16:36.173]        // -> [protType <= 0x00000002]
[02:16:36.176]    </block>
[02:16:36.176]    <control if="protType == 1" while="" timeout="0" info="">
[02:16:36.176]      // if-block "protType == 1"
[02:16:36.176]        // =>  FALSE
[02:16:36.176]      // skip if-block "protType == 1"
[02:16:36.176]    </control>
[02:16:36.176]    <control if="protType == 2" while="" timeout="0" info="">
[02:16:36.176]      // if-block "protType == 2"
[02:16:36.176]        // =>  TRUE
[02:16:36.176]      <control if="isSWJ" while="" timeout="0" info="">
[02:16:36.176]        // if-block "isSWJ"
[02:16:36.176]          // =>  TRUE
[02:16:36.176]        <control if="hasDormant" while="" timeout="0" info="">
[02:16:36.176]          // if-block "hasDormant"
[02:16:36.176]            // =>  FALSE
[02:16:36.176]          // skip if-block "hasDormant"
[02:16:36.176]        </control>
[02:16:36.176]        <control if="!hasDormant" while="" timeout="0" info="">
[02:16:36.176]          // if-block "!hasDormant"
[02:16:36.176]            // =>  TRUE
[02:16:36.176]          <block atomic="false" info="">
[02:16:36.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:16:36.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:16:36.176]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:16:36.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:16:36.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:16:36.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:16:36.186]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:16:36.186]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:16:36.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:16:36.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:16:36.194]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:16:36.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:16:36.194]          </block>
[02:16:36.194]          // end if-block "!hasDormant"
[02:16:36.196]        </control>
[02:16:36.196]        // end if-block "isSWJ"
[02:16:36.196]      </control>
[02:16:36.196]      <control if="!isSWJ" while="" timeout="0" info="">
[02:16:36.196]        // if-block "!isSWJ"
[02:16:36.196]          // =>  FALSE
[02:16:36.196]        // skip if-block "!isSWJ"
[02:16:36.196]      </control>
[02:16:36.196]      <block atomic="false" info="">
[02:16:36.196]        ReadDP(0x0);
[02:16:36.196]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:16:36.196]      </block>
[02:16:36.196]      // end if-block "protType == 2"
[02:16:36.196]    </control>
[02:16:36.196]  </sequence>
[02:16:36.196]  
[02:16:36.196]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:16:36.196]  
[02:16:36.196]  <debugvars>
[02:16:36.196]    // Pre-defined
[02:16:36.196]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:16:36.196]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:16:36.196]    __dp=0x00000000
[02:16:36.196]    __ap=0x00000000
[02:16:36.196]    __traceout=0x00000000      (Trace Disabled)
[02:16:36.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:16:36.196]    __FlashAddr=0x00000000
[02:16:36.196]    __FlashLen=0x00000000
[02:16:36.196]    __FlashArg=0x00000000
[02:16:36.196]    __FlashOp=0x00000000
[02:16:36.196]    __Result=0x00000000
[02:16:36.196]  </debugvars>
[02:16:36.204]  
[02:16:36.204]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:16:36.204]    <block atomic="false" info="">
[02:16:36.204]      __var SW_DP_ABORT       = 0x0;
[02:16:36.204]        // -> [SW_DP_ABORT <= 0x00000000]
[02:16:36.204]      __var DP_CTRL_STAT      = 0x4;
[02:16:36.204]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:16:36.204]      __var DP_SELECT         = 0x8;
[02:16:36.204]        // -> [DP_SELECT <= 0x00000008]
[02:16:36.204]      __var powered_down      = 0;
[02:16:36.204]        // -> [powered_down <= 0x00000000]
[02:16:36.206]      WriteDP(DP_SELECT, 0x00000000);
[02:16:36.206]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:16:36.206]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:16:36.206]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:16:36.206]        // -> [powered_down <= 0x00000001]
[02:16:36.206]    </block>
[02:16:36.206]    <control if="powered_down" while="" timeout="0" info="">
[02:16:36.206]      // if-block "powered_down"
[02:16:36.206]        // =>  TRUE
[02:16:36.206]      <block atomic="false" info="">
[02:16:36.206]        Message(0, "Debug/System power-up request sent");
[02:16:36.206]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:16:36.214]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:16:36.214]      </block>
[02:16:36.214]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:16:36.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:16:36.216]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:16:36.216]        // while-condition  =>  FALSE
[02:16:36.216]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:16:36.216]      </control>
[02:16:36.216]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:16:36.216]        // if-block "(__protocol & 0xFFFF) == 1"
[02:16:36.216]          // =>  FALSE
[02:16:36.216]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:16:36.216]      </control>
[02:16:36.216]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:16:36.216]        // if-block "(__protocol & 0xFFFF) == 2"
[02:16:36.216]          // =>  TRUE
[02:16:36.216]        <block atomic="false" info="">
[02:16:36.216]          Message(0, "executing SWD power up");
[02:16:36.216]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:16:36.221]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:16:36.221]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:16:36.221]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:16:36.221]        </block>
[02:16:36.221]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:16:36.221]      </control>
[02:16:36.221]      // end if-block "powered_down"
[02:16:36.224]    </control>
[02:16:36.224]    <block atomic="false" info="">
[02:16:36.224]      __var DEBUG_PORT_VAL    = 0;
[02:16:36.224]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:16:36.224]      __var ACCESS_POINT_VAL  = 0;
[02:16:36.224]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:16:36.224]      __ap = 1; 
[02:16:36.224]        // -> [__ap <= 0x00000001]
[02:16:36.224]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:16:36.226]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:16:36.226]      __ap = 4;
[02:16:36.226]        // -> [__ap <= 0x00000004]
[02:16:36.226]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:16:36.234]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:16:36.234]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:16:36.234]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:16:36.236]    </block>
[02:16:36.236]    <block atomic="false" info="">
[02:16:36.236]      __var nReset = 0x80;
[02:16:36.236]        // -> [nReset <= 0x00000080]
[02:16:36.236]      __var canReadPins = 0;
[02:16:36.236]        // -> [canReadPins <= 0x00000000]
[02:16:36.236]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:16:36.236]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:16:36.236]        // -> [canReadPins <= 0x00000001]
[02:16:36.236]    </block>
[02:16:36.236]    <control if="" while="1" timeout="200" info="">
[02:16:36.236]      // while "1"  (timeout="200")
[02:16:36.236]      // while-condition  =>  TRUE
[02:16:36.236]      // while "1"  (timeout="200")
[02:16:36.236]      // while-condition  =>  TRUE
[02:16:36.236]      // while "1"  (timeout="200")
[02:16:36.236]      // while-condition  =>  TRUE
[02:16:36.236]      // while "1"  (timeout="200")
[02:16:36.236]      // while-condition  =>  TRUE
[02:16:36.241]      // while "1"  (timeout="200")
[02:16:36.241]      // while  =>  TIMEOUT
[02:16:36.241]      // end while "1"
[02:16:36.241]    </control>
[02:16:36.241]    <control if="canReadPins" while="" timeout="0" info="">
[02:16:36.241]      // if-block "canReadPins"
[02:16:36.241]        // =>  TRUE
[02:16:36.241]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:16:36.241]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:16:36.241]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:16:36.241]        // while-condition  =>  FALSE
[02:16:36.241]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:16:36.241]      </control>
[02:16:36.241]      // end if-block "canReadPins"
[02:16:36.241]    </control>
[02:16:36.241]    <control if="!canReadPins" while="" timeout="0" info="">
[02:16:36.241]      // if-block "!canReadPins"
[02:16:36.241]        // =>  FALSE
[02:16:36.241]      // skip if-block "!canReadPins"
[02:16:36.241]    </control>
[02:16:36.241]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:16:36.244]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:16:36.244]        // =>  TRUE
[02:16:36.244]      <block atomic="false" info="">
[02:16:36.244]        WriteAP(0x00, 0x190008);
[02:16:36.246]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:16:36.246]        WriteAP(0xF0, 0x01);
[02:16:36.246]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:16:36.246]      </block>
[02:16:36.251]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:16:36.251]    </control>
[02:16:36.251]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:16:36.251]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:16:36.251]        // =>  FALSE
[02:16:36.251]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:16:36.251]    </control>
[02:16:36.251]    <block atomic="false" info="">
[02:16:36.251]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:16:36.255]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:16:36.255]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:16:36.255]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:16:36.256]      __ap = 0; //lets make sure we reset the access point selection
[02:16:36.256]        // -> [__ap <= 0x00000000]
[02:16:36.256]    </block>
[02:16:36.256]  </sequence>
[02:16:36.256]  
[02:16:36.286]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:16:36.286]  
[02:16:36.286]  <debugvars>
[02:16:36.286]    // Pre-defined
[02:16:36.286]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:16:36.286]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:16:36.286]    __dp=0x00000000
[02:16:36.286]    __ap=0x00000000
[02:16:36.286]    __traceout=0x00000000      (Trace Disabled)
[02:16:36.286]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:16:36.286]    __FlashAddr=0x00000000
[02:16:36.286]    __FlashLen=0x00000000
[02:16:36.286]    __FlashArg=0x00000000
[02:16:36.286]    __FlashOp=0x00000000
[02:16:36.286]    __Result=0x00000000
[02:16:36.286]  </debugvars>
[02:16:36.286]  
[02:16:36.286]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:16:36.286]    <block atomic="false" info="">
[02:16:36.286]      __var deviceID = 0;
[02:16:36.286]        // -> [deviceID <= 0x00000000]
[02:16:36.286]      __var version = 0;
[02:16:36.286]        // -> [version <= 0x00000000]
[02:16:36.286]      __var partNum = 0;
[02:16:36.286]        // -> [partNum <= 0x00000000]
[02:16:36.286]      __var manuf = 0;
[02:16:36.286]        // -> [manuf <= 0x00000000]
[02:16:36.286]      __var isMSPM0G1X0X_G3X0X = 0;
[02:16:36.286]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:16:36.286]      __var isProduction = 0;
[02:16:36.286]        // -> [isProduction <= 0x00000000]
[02:16:36.286]      __var continueId = 0;
[02:16:36.286]        // -> [continueId <= 0x00000000]
[02:16:36.286]      deviceID =   Read32(0x41C40004);
[02:16:36.296]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:16:36.296]        // -> [deviceID <= 0x2BB8802F]
[02:16:36.296]      version = deviceID >> 28;
[02:16:36.296]        // -> [version <= 0x00000002]
[02:16:36.296]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:16:36.296]        // -> [partNum <= 0x0000BB88]
[02:16:36.296]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:16:36.296]        // -> [manuf <= 0x00000017]
[02:16:36.296]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:16:36.296]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:16:36.296]      isProduction = (version > 0);
[02:16:36.296]        // -> [isProduction <= 0x00000001]
[02:16:36.296]    </block>
[02:16:36.296]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:16:36.296]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:16:36.296]        // =>  FALSE
[02:16:36.296]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:16:36.296]    </control>
[02:16:36.296]    <control if="continueId == 4" while="" timeout="0" info="">
[02:16:36.296]      // if-block "continueId == 4"
[02:16:36.296]        // =>  FALSE
[02:16:36.296]      // skip if-block "continueId == 4"
[02:16:36.296]    </control>
[02:16:36.296]    <control if="!isProduction" while="" timeout="0" info="">
[02:16:36.296]      // if-block "!isProduction"
[02:16:36.296]        // =>  FALSE
[02:16:36.296]      // skip if-block "!isProduction"
[02:16:36.296]    </control>
[02:16:36.296]  </sequence>
[02:16:36.296]  
[02:19:53.854]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:19:53.854]  
[02:19:53.865]  <debugvars>
[02:19:53.865]    // Pre-defined
[02:19:53.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:53.865]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:53.865]    __dp=0x00000000
[02:19:53.865]    __ap=0x00000000
[02:19:53.865]    __traceout=0x00000000      (Trace Disabled)
[02:19:53.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:53.865]    __FlashAddr=0x00000000
[02:19:53.865]    __FlashLen=0x00000000
[02:19:53.865]    __FlashArg=0x00000000
[02:19:53.865]    __FlashOp=0x00000000
[02:19:53.865]    __Result=0x00000000
[02:19:53.865]  </debugvars>
[02:19:53.865]  
[02:19:53.865]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:19:53.865]    <block atomic="false" info="">
[02:19:53.865]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:19:53.865]        // -> [isSWJ <= 0x00000001]
[02:19:53.865]      __var hasDormant = __protocol & 0x00020000;
[02:19:53.865]        // -> [hasDormant <= 0x00000000]
[02:19:53.865]      __var protType   = __protocol & 0x0000FFFF;
[02:19:53.865]        // -> [protType <= 0x00000002]
[02:19:53.865]    </block>
[02:19:53.865]    <control if="protType == 1" while="" timeout="0" info="">
[02:19:53.865]      // if-block "protType == 1"
[02:19:53.865]        // =>  FALSE
[02:19:53.865]      // skip if-block "protType == 1"
[02:19:53.865]    </control>
[02:19:53.865]    <control if="protType == 2" while="" timeout="0" info="">
[02:19:53.865]      // if-block "protType == 2"
[02:19:53.865]        // =>  TRUE
[02:19:53.865]      <control if="isSWJ" while="" timeout="0" info="">
[02:19:53.865]        // if-block "isSWJ"
[02:19:53.865]          // =>  TRUE
[02:19:53.865]        <control if="hasDormant" while="" timeout="0" info="">
[02:19:53.865]          // if-block "hasDormant"
[02:19:53.865]            // =>  FALSE
[02:19:53.865]          // skip if-block "hasDormant"
[02:19:53.865]        </control>
[02:19:53.865]        <control if="!hasDormant" while="" timeout="0" info="">
[02:19:53.865]          // if-block "!hasDormant"
[02:19:53.865]            // =>  TRUE
[02:19:53.865]          <block atomic="false" info="">
[02:19:53.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:19:53.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:53.865]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:19:53.874]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:19:53.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:19:53.874]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:53.874]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:19:53.874]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:19:53.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:19:53.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:53.880]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:19:53.883]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:19:53.883]          </block>
[02:19:53.883]          // end if-block "!hasDormant"
[02:19:53.883]        </control>
[02:19:53.883]        // end if-block "isSWJ"
[02:19:53.883]      </control>
[02:19:53.883]      <control if="!isSWJ" while="" timeout="0" info="">
[02:19:53.883]        // if-block "!isSWJ"
[02:19:53.883]          // =>  FALSE
[02:19:53.883]        // skip if-block "!isSWJ"
[02:19:53.883]      </control>
[02:19:53.883]      <block atomic="false" info="">
[02:19:53.883]        ReadDP(0x0);
[02:19:53.883]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:19:53.883]      </block>
[02:19:53.883]      // end if-block "protType == 2"
[02:19:53.883]    </control>
[02:19:53.883]  </sequence>
[02:19:53.883]  
[02:19:53.883]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:19:53.883]  
[02:19:53.883]  <debugvars>
[02:19:53.883]    // Pre-defined
[02:19:53.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:53.883]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:53.883]    __dp=0x00000000
[02:19:53.883]    __ap=0x00000000
[02:19:53.883]    __traceout=0x00000000      (Trace Disabled)
[02:19:53.883]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:53.883]    __FlashAddr=0x00000000
[02:19:53.883]    __FlashLen=0x00000000
[02:19:53.883]    __FlashArg=0x00000000
[02:19:53.883]    __FlashOp=0x00000000
[02:19:53.883]    __Result=0x00000000
[02:19:53.883]  </debugvars>
[02:19:53.883]  
[02:19:53.883]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:19:53.883]    <block atomic="false" info="">
[02:19:53.883]      __var SW_DP_ABORT       = 0x0;
[02:19:53.883]        // -> [SW_DP_ABORT <= 0x00000000]
[02:19:53.883]      __var DP_CTRL_STAT      = 0x4;
[02:19:53.893]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:19:53.893]      __var DP_SELECT         = 0x8;
[02:19:53.893]        // -> [DP_SELECT <= 0x00000008]
[02:19:53.893]      __var powered_down      = 0;
[02:19:53.893]        // -> [powered_down <= 0x00000000]
[02:19:53.893]      WriteDP(DP_SELECT, 0x00000000);
[02:19:53.893]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:19:53.893]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:19:53.893]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:19:53.893]        // -> [powered_down <= 0x00000001]
[02:19:53.893]    </block>
[02:19:53.893]    <control if="powered_down" while="" timeout="0" info="">
[02:19:53.893]      // if-block "powered_down"
[02:19:53.893]        // =>  TRUE
[02:19:53.893]      <block atomic="false" info="">
[02:19:53.893]        Message(0, "Debug/System power-up request sent");
[02:19:53.893]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:19:53.902]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:19:53.902]      </block>
[02:19:53.902]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:19:53.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:19:53.904]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:19:53.904]        // while-condition  =>  FALSE
[02:19:53.904]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:19:53.904]      </control>
[02:19:53.904]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:19:53.904]        // if-block "(__protocol & 0xFFFF) == 1"
[02:19:53.904]          // =>  FALSE
[02:19:53.904]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:19:53.904]      </control>
[02:19:53.904]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:19:53.904]        // if-block "(__protocol & 0xFFFF) == 2"
[02:19:53.904]          // =>  TRUE
[02:19:53.904]        <block atomic="false" info="">
[02:19:53.904]          Message(0, "executing SWD power up");
[02:19:53.904]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:19:53.904]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:19:53.904]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:19:53.904]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:19:53.904]        </block>
[02:19:53.904]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:19:53.904]      </control>
[02:19:53.904]      // end if-block "powered_down"
[02:19:53.904]    </control>
[02:19:53.904]    <block atomic="false" info="">
[02:19:53.904]      __var DEBUG_PORT_VAL    = 0;
[02:19:53.904]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:19:53.904]      __var ACCESS_POINT_VAL  = 0;
[02:19:53.904]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:19:53.904]      __ap = 1; 
[02:19:53.904]        // -> [__ap <= 0x00000001]
[02:19:53.904]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:19:53.915]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:19:53.915]      __ap = 4;
[02:19:53.915]        // -> [__ap <= 0x00000004]
[02:19:53.915]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:53.918]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:19:53.918]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:19:53.918]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:53.918]    </block>
[02:19:53.918]    <block atomic="false" info="">
[02:19:53.918]      __var nReset = 0x80;
[02:19:53.918]        // -> [nReset <= 0x00000080]
[02:19:53.918]      __var canReadPins = 0;
[02:19:53.918]        // -> [canReadPins <= 0x00000000]
[02:19:53.918]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:19:53.926]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:19:53.926]        // -> [canReadPins <= 0x00000001]
[02:19:53.926]    </block>
[02:19:53.926]    <control if="" while="1" timeout="200" info="">
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.926]      // while "1"  (timeout="200")
[02:19:53.926]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.934]      // while "1"  (timeout="200")
[02:19:53.934]      // while-condition  =>  TRUE
[02:19:53.942]      // while "1"  (timeout="200")
[02:19:53.942]      // while  =>  TIMEOUT
[02:19:53.942]      // end while "1"
[02:19:53.942]    </control>
[02:19:53.942]    <control if="canReadPins" while="" timeout="0" info="">
[02:19:53.942]      // if-block "canReadPins"
[02:19:53.942]        // =>  TRUE
[02:19:53.942]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:19:53.942]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:19:53.942]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:19:53.944]        // while-condition  =>  FALSE
[02:19:53.944]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:19:53.944]      </control>
[02:19:53.944]      // end if-block "canReadPins"
[02:19:53.944]    </control>
[02:19:53.944]    <control if="!canReadPins" while="" timeout="0" info="">
[02:19:53.944]      // if-block "!canReadPins"
[02:19:53.944]        // =>  FALSE
[02:19:53.944]      // skip if-block "!canReadPins"
[02:19:53.944]    </control>
[02:19:53.944]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:19:53.944]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:53.944]        // =>  TRUE
[02:19:53.944]      <block atomic="false" info="">
[02:19:53.944]        WriteAP(0x00, 0x190008);
[02:19:53.944]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:53.944]        WriteAP(0xF0, 0x01);
[02:19:53.944]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:53.944]      </block>
[02:19:53.944]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:53.944]    </control>
[02:19:53.944]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:19:53.944]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:53.944]        // =>  FALSE
[02:19:53.944]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:53.944]    </control>
[02:19:53.944]    <block atomic="false" info="">
[02:19:53.944]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:53.954]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:19:53.954]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:19:53.954]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:53.954]      __ap = 0; //lets make sure we reset the access point selection
[02:19:53.954]        // -> [__ap <= 0x00000000]
[02:19:53.954]    </block>
[02:19:53.954]  </sequence>
[02:19:53.954]  
[02:19:53.981]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:19:53.981]  
[02:19:53.981]  <debugvars>
[02:19:53.981]    // Pre-defined
[02:19:53.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:53.981]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:53.981]    __dp=0x00000000
[02:19:53.981]    __ap=0x00000000
[02:19:53.981]    __traceout=0x00000000      (Trace Disabled)
[02:19:53.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:53.986]    __FlashAddr=0x00000000
[02:19:53.986]    __FlashLen=0x00000000
[02:19:53.986]    __FlashArg=0x00000000
[02:19:53.986]    __FlashOp=0x00000000
[02:19:53.986]    __Result=0x00000000
[02:19:53.986]  </debugvars>
[02:19:53.986]  
[02:19:53.986]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:19:53.986]    <block atomic="false" info="">
[02:19:53.986]      __var deviceID = 0;
[02:19:53.986]        // -> [deviceID <= 0x00000000]
[02:19:53.986]      __var version = 0;
[02:19:53.986]        // -> [version <= 0x00000000]
[02:19:53.986]      __var partNum = 0;
[02:19:53.986]        // -> [partNum <= 0x00000000]
[02:19:53.986]      __var manuf = 0;
[02:19:53.986]        // -> [manuf <= 0x00000000]
[02:19:53.986]      __var isMSPM0G1X0X_G3X0X = 0;
[02:19:53.986]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:19:53.986]      __var isProduction = 0;
[02:19:53.986]        // -> [isProduction <= 0x00000000]
[02:19:53.986]      __var continueId = 0;
[02:19:53.986]        // -> [continueId <= 0x00000000]
[02:19:53.986]      deviceID =   Read32(0x41C40004);
[02:19:53.986]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:19:53.986]        // -> [deviceID <= 0x2BB8802F]
[02:19:53.986]      version = deviceID >> 28;
[02:19:53.986]        // -> [version <= 0x00000002]
[02:19:53.986]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:19:53.986]        // -> [partNum <= 0x0000BB88]
[02:19:53.986]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:19:53.986]        // -> [manuf <= 0x00000017]
[02:19:53.996]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:19:53.996]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:19:53.996]      isProduction = (version > 0);
[02:19:53.996]        // -> [isProduction <= 0x00000001]
[02:19:53.996]    </block>
[02:19:53.996]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:19:53.996]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:19:53.996]        // =>  FALSE
[02:19:53.996]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:19:53.996]    </control>
[02:19:53.996]    <control if="continueId == 4" while="" timeout="0" info="">
[02:19:53.996]      // if-block "continueId == 4"
[02:19:53.996]        // =>  FALSE
[02:19:53.996]      // skip if-block "continueId == 4"
[02:19:53.996]    </control>
[02:19:53.996]    <control if="!isProduction" while="" timeout="0" info="">
[02:19:53.996]      // if-block "!isProduction"
[02:19:53.996]        // =>  FALSE
[02:19:53.996]      // skip if-block "!isProduction"
[02:19:53.996]    </control>
[02:19:53.996]  </sequence>
[02:19:53.996]  
[02:24:22.759]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:24:22.759]  
[02:24:22.776]  <debugvars>
[02:24:22.776]    // Pre-defined
[02:24:22.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:22.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:24:22.776]    __dp=0x00000000
[02:24:22.776]    __ap=0x00000000
[02:24:22.776]    __traceout=0x00000000      (Trace Disabled)
[02:24:22.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:22.776]    __FlashAddr=0x00000000
[02:24:22.776]    __FlashLen=0x00000000
[02:24:22.776]    __FlashArg=0x00000000
[02:24:22.776]    __FlashOp=0x00000000
[02:24:22.776]    __Result=0x00000000
[02:24:22.776]  </debugvars>
[02:24:22.776]  
[02:24:22.776]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:24:22.776]    <block atomic="false" info="">
[02:24:22.776]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:24:22.776]        // -> [isSWJ <= 0x00000001]
[02:24:22.776]      __var hasDormant = __protocol & 0x00020000;
[02:24:22.779]        // -> [hasDormant <= 0x00000000]
[02:24:22.779]      __var protType   = __protocol & 0x0000FFFF;
[02:24:22.779]        // -> [protType <= 0x00000002]
[02:24:22.779]    </block>
[02:24:22.779]    <control if="protType == 1" while="" timeout="0" info="">
[02:24:22.779]      // if-block "protType == 1"
[02:24:22.779]        // =>  FALSE
[02:24:22.779]      // skip if-block "protType == 1"
[02:24:22.779]    </control>
[02:24:22.779]    <control if="protType == 2" while="" timeout="0" info="">
[02:24:22.779]      // if-block "protType == 2"
[02:24:22.779]        // =>  TRUE
[02:24:22.779]      <control if="isSWJ" while="" timeout="0" info="">
[02:24:22.779]        // if-block "isSWJ"
[02:24:22.779]          // =>  TRUE
[02:24:22.779]        <control if="hasDormant" while="" timeout="0" info="">
[02:24:22.779]          // if-block "hasDormant"
[02:24:22.779]            // =>  FALSE
[02:24:22.779]          // skip if-block "hasDormant"
[02:24:22.779]        </control>
[02:24:22.779]        <control if="!hasDormant" while="" timeout="0" info="">
[02:24:22.779]          // if-block "!hasDormant"
[02:24:22.779]            // =>  TRUE
[02:24:22.779]          <block atomic="false" info="">
[02:24:22.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:24:22.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:22.779]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:24:22.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:24:22.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:24:22.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:22.779]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:24:22.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:24:22.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:24:22.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:22.789]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:24:22.789]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:24:22.789]          </block>
[02:24:22.789]          // end if-block "!hasDormant"
[02:24:22.789]        </control>
[02:24:22.789]        // end if-block "isSWJ"
[02:24:22.789]      </control>
[02:24:22.789]      <control if="!isSWJ" while="" timeout="0" info="">
[02:24:22.789]        // if-block "!isSWJ"
[02:24:22.789]          // =>  FALSE
[02:24:22.789]        // skip if-block "!isSWJ"
[02:24:22.789]      </control>
[02:24:22.789]      <block atomic="false" info="">
[02:24:22.789]        ReadDP(0x0);
[02:24:22.789]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:24:22.789]      </block>
[02:24:22.789]      // end if-block "protType == 2"
[02:24:22.789]    </control>
[02:24:22.789]  </sequence>
[02:24:22.789]  
[02:24:22.789]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:24:22.789]  
[02:24:22.789]  <debugvars>
[02:24:22.789]    // Pre-defined
[02:24:22.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:22.789]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:24:22.789]    __dp=0x00000000
[02:24:22.789]    __ap=0x00000000
[02:24:22.789]    __traceout=0x00000000      (Trace Disabled)
[02:24:22.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:22.789]    __FlashAddr=0x00000000
[02:24:22.789]    __FlashLen=0x00000000
[02:24:22.789]    __FlashArg=0x00000000
[02:24:22.789]    __FlashOp=0x00000000
[02:24:22.789]    __Result=0x00000000
[02:24:22.789]  </debugvars>
[02:24:22.799]  
[02:24:22.799]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:24:22.799]    <block atomic="false" info="">
[02:24:22.799]      __var SW_DP_ABORT       = 0x0;
[02:24:22.799]        // -> [SW_DP_ABORT <= 0x00000000]
[02:24:22.799]      __var DP_CTRL_STAT      = 0x4;
[02:24:22.799]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:24:22.799]      __var DP_SELECT         = 0x8;
[02:24:22.799]        // -> [DP_SELECT <= 0x00000008]
[02:24:22.799]      __var powered_down      = 0;
[02:24:22.799]        // -> [powered_down <= 0x00000000]
[02:24:22.799]      WriteDP(DP_SELECT, 0x00000000);
[02:24:22.799]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:24:22.799]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:24:22.799]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:24:22.799]        // -> [powered_down <= 0x00000001]
[02:24:22.799]    </block>
[02:24:22.799]    <control if="powered_down" while="" timeout="0" info="">
[02:24:22.799]      // if-block "powered_down"
[02:24:22.799]        // =>  TRUE
[02:24:22.799]      <block atomic="false" info="">
[02:24:22.799]        Message(0, "Debug/System power-up request sent");
[02:24:22.799]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:24:22.809]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:24:22.809]      </block>
[02:24:22.809]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:24:22.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:24:22.809]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:24:22.809]        // while-condition  =>  FALSE
[02:24:22.809]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:24:22.809]      </control>
[02:24:22.809]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:24:22.809]        // if-block "(__protocol & 0xFFFF) == 1"
[02:24:22.809]          // =>  FALSE
[02:24:22.809]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:24:22.809]      </control>
[02:24:22.809]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:24:22.809]        // if-block "(__protocol & 0xFFFF) == 2"
[02:24:22.809]          // =>  TRUE
[02:24:22.809]        <block atomic="false" info="">
[02:24:22.809]          Message(0, "executing SWD power up");
[02:24:22.809]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:24:22.809]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:24:22.809]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:24:22.819]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:24:22.819]        </block>
[02:24:22.819]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:24:22.819]      </control>
[02:24:22.819]      // end if-block "powered_down"
[02:24:22.819]    </control>
[02:24:22.819]    <block atomic="false" info="">
[02:24:22.819]      __var DEBUG_PORT_VAL    = 0;
[02:24:22.819]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:24:22.819]      __var ACCESS_POINT_VAL  = 0;
[02:24:22.819]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:24:22.819]      __ap = 1; 
[02:24:22.819]        // -> [__ap <= 0x00000001]
[02:24:22.819]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:24:22.819]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:24:22.819]      __ap = 4;
[02:24:22.819]        // -> [__ap <= 0x00000004]
[02:24:22.819]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:24:22.825]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:24:22.825]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:24:22.825]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:24:22.829]    </block>
[02:24:22.829]    <block atomic="false" info="">
[02:24:22.829]      __var nReset = 0x80;
[02:24:22.829]        // -> [nReset <= 0x00000080]
[02:24:22.829]      __var canReadPins = 0;
[02:24:22.829]        // -> [canReadPins <= 0x00000000]
[02:24:22.829]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:24:22.829]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:24:22.829]        // -> [canReadPins <= 0x00000001]
[02:24:22.829]    </block>
[02:24:22.829]    <control if="" while="1" timeout="200" info="">
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.829]      // while-condition  =>  TRUE
[02:24:22.829]      // while "1"  (timeout="200")
[02:24:22.839]      // while-condition  =>  TRUE
[02:24:22.839]      // while "1"  (timeout="200")
[02:24:22.839]      // while  =>  TIMEOUT
[02:24:22.839]      // end while "1"
[02:24:22.839]    </control>
[02:24:22.839]    <control if="canReadPins" while="" timeout="0" info="">
[02:24:22.839]      // if-block "canReadPins"
[02:24:22.839]        // =>  TRUE
[02:24:22.839]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:24:22.839]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:24:22.839]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:24:22.839]        // while-condition  =>  FALSE
[02:24:22.839]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:24:22.839]      </control>
[02:24:22.839]      // end if-block "canReadPins"
[02:24:22.839]    </control>
[02:24:22.839]    <control if="!canReadPins" while="" timeout="0" info="">
[02:24:22.839]      // if-block "!canReadPins"
[02:24:22.839]        // =>  FALSE
[02:24:22.839]      // skip if-block "!canReadPins"
[02:24:22.839]    </control>
[02:24:22.839]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:24:22.839]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:24:22.839]        // =>  TRUE
[02:24:22.839]      <block atomic="false" info="">
[02:24:22.839]        WriteAP(0x00, 0x190008);
[02:24:22.839]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:24:22.839]        WriteAP(0xF0, 0x01);
[02:24:22.839]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:24:22.839]      </block>
[02:24:22.839]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:24:22.839]    </control>
[02:24:22.839]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:24:22.839]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:24:22.849]        // =>  FALSE
[02:24:22.849]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:24:22.849]    </control>
[02:24:22.849]    <block atomic="false" info="">
[02:24:22.849]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:24:22.849]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:24:22.849]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:24:22.849]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:24:22.849]      __ap = 0; //lets make sure we reset the access point selection
[02:24:22.849]        // -> [__ap <= 0x00000000]
[02:24:22.849]    </block>
[02:24:22.849]  </sequence>
[02:24:22.849]  
[02:24:22.869]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:24:22.869]  
[02:24:22.869]  <debugvars>
[02:24:22.869]    // Pre-defined
[02:24:22.869]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:22.869]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:24:22.869]    __dp=0x00000000
[02:24:22.869]    __ap=0x00000000
[02:24:22.869]    __traceout=0x00000000      (Trace Disabled)
[02:24:22.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:22.869]    __FlashAddr=0x00000000
[02:24:22.869]    __FlashLen=0x00000000
[02:24:22.869]    __FlashArg=0x00000000
[02:24:22.869]    __FlashOp=0x00000000
[02:24:22.869]    __Result=0x00000000
[02:24:22.869]  </debugvars>
[02:24:22.869]  
[02:24:22.869]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:24:22.869]    <block atomic="false" info="">
[02:24:22.869]      __var deviceID = 0;
[02:24:22.869]        // -> [deviceID <= 0x00000000]
[02:24:22.869]      __var version = 0;
[02:24:22.869]        // -> [version <= 0x00000000]
[02:24:22.869]      __var partNum = 0;
[02:24:22.869]        // -> [partNum <= 0x00000000]
[02:24:22.869]      __var manuf = 0;
[02:24:22.869]        // -> [manuf <= 0x00000000]
[02:24:22.869]      __var isMSPM0G1X0X_G3X0X = 0;
[02:24:22.869]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:24:22.869]      __var isProduction = 0;
[02:24:22.880]        // -> [isProduction <= 0x00000000]
[02:24:22.880]      __var continueId = 0;
[02:24:22.880]        // -> [continueId <= 0x00000000]
[02:24:22.880]      deviceID =   Read32(0x41C40004);
[02:24:22.880]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:24:22.880]        // -> [deviceID <= 0x2BB8802F]
[02:24:22.880]      version = deviceID >> 28;
[02:24:22.880]        // -> [version <= 0x00000002]
[02:24:22.880]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:24:22.880]        // -> [partNum <= 0x0000BB88]
[02:24:22.880]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:24:22.880]        // -> [manuf <= 0x00000017]
[02:24:22.880]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:24:22.880]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:24:22.880]      isProduction = (version > 0);
[02:24:22.880]        // -> [isProduction <= 0x00000001]
[02:24:22.880]    </block>
[02:24:22.880]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:24:22.880]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:24:22.880]        // =>  FALSE
[02:24:22.880]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:24:22.880]    </control>
[02:24:22.880]    <control if="continueId == 4" while="" timeout="0" info="">
[02:24:22.880]      // if-block "continueId == 4"
[02:24:22.880]        // =>  FALSE
[02:24:22.880]      // skip if-block "continueId == 4"
[02:24:22.880]    </control>
[02:24:22.880]    <control if="!isProduction" while="" timeout="0" info="">
[02:24:22.880]      // if-block "!isProduction"
[02:24:22.880]        // =>  FALSE
[02:24:22.880]      // skip if-block "!isProduction"
[02:24:22.880]    </control>
[02:24:22.880]  </sequence>
[02:24:22.880]  
[02:26:24.887]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:26:24.887]  
[02:26:24.887]  <debugvars>
[02:26:24.887]    // Pre-defined
[02:26:24.891]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:26:24.891]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:26:24.891]    __dp=0x00000000
[02:26:24.891]    __ap=0x00000000
[02:26:24.891]    __traceout=0x00000000      (Trace Disabled)
[02:26:24.891]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:26:24.891]    __FlashAddr=0x00000000
[02:26:24.891]    __FlashLen=0x00000000
[02:26:24.891]    __FlashArg=0x00000000
[02:26:24.891]    __FlashOp=0x00000000
[02:26:24.891]    __Result=0x00000000
[02:26:24.891]  </debugvars>
[02:26:24.891]  
[02:26:24.891]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:26:24.891]    <block atomic="false" info="">
[02:26:24.891]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:26:24.891]        // -> [isSWJ <= 0x00000001]
[02:26:24.891]      __var hasDormant = __protocol & 0x00020000;
[02:26:24.891]        // -> [hasDormant <= 0x00000000]
[02:26:24.891]      __var protType   = __protocol & 0x0000FFFF;
[02:26:24.891]        // -> [protType <= 0x00000002]
[02:26:24.891]    </block>
[02:26:24.891]    <control if="protType == 1" while="" timeout="0" info="">
[02:26:24.891]      // if-block "protType == 1"
[02:26:24.891]        // =>  FALSE
[02:26:24.891]      // skip if-block "protType == 1"
[02:26:24.891]    </control>
[02:26:24.891]    <control if="protType == 2" while="" timeout="0" info="">
[02:26:24.891]      // if-block "protType == 2"
[02:26:24.891]        // =>  TRUE
[02:26:24.891]      <control if="isSWJ" while="" timeout="0" info="">
[02:26:24.891]        // if-block "isSWJ"
[02:26:24.891]          // =>  TRUE
[02:26:24.891]        <control if="hasDormant" while="" timeout="0" info="">
[02:26:24.891]          // if-block "hasDormant"
[02:26:24.891]            // =>  FALSE
[02:26:24.891]          // skip if-block "hasDormant"
[02:26:24.891]        </control>
[02:26:24.891]        <control if="!hasDormant" while="" timeout="0" info="">
[02:26:24.891]          // if-block "!hasDormant"
[02:26:24.891]            // =>  TRUE
[02:26:24.891]          <block atomic="false" info="">
[02:26:24.891]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:26:24.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:26:24.901]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:26:24.901]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:26:24.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:26:24.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:26:24.901]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:26:24.907]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:26:24.907]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:26:24.907]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:26:24.907]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:26:24.907]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:26:24.907]          </block>
[02:26:24.907]          // end if-block "!hasDormant"
[02:26:24.907]        </control>
[02:26:24.907]        // end if-block "isSWJ"
[02:26:24.907]      </control>
[02:26:24.907]      <control if="!isSWJ" while="" timeout="0" info="">
[02:26:24.907]        // if-block "!isSWJ"
[02:26:24.907]          // =>  FALSE
[02:26:24.911]        // skip if-block "!isSWJ"
[02:26:24.911]      </control>
[02:26:24.911]      <block atomic="false" info="">
[02:26:24.911]        ReadDP(0x0);
[02:26:24.911]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:26:24.911]      </block>
[02:26:24.911]      // end if-block "protType == 2"
[02:26:24.911]    </control>
[02:26:24.911]  </sequence>
[02:26:24.911]  
[02:26:24.911]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:26:24.911]  
[02:26:24.911]  <debugvars>
[02:26:24.917]    // Pre-defined
[02:26:24.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:26:24.917]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:26:24.917]    __dp=0x00000000
[02:26:24.917]    __ap=0x00000000
[02:26:24.917]    __traceout=0x00000000      (Trace Disabled)
[02:26:24.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:26:24.917]    __FlashAddr=0x00000000
[02:26:24.917]    __FlashLen=0x00000000
[02:26:24.917]    __FlashArg=0x00000000
[02:26:24.917]    __FlashOp=0x00000000
[02:26:24.917]    __Result=0x00000000
[02:26:24.917]  </debugvars>
[02:26:24.917]  
[02:26:24.917]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:26:24.917]    <block atomic="false" info="">
[02:26:24.917]      __var SW_DP_ABORT       = 0x0;
[02:26:24.917]        // -> [SW_DP_ABORT <= 0x00000000]
[02:26:24.917]      __var DP_CTRL_STAT      = 0x4;
[02:26:24.917]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:26:24.917]      __var DP_SELECT         = 0x8;
[02:26:24.917]        // -> [DP_SELECT <= 0x00000008]
[02:26:24.917]      __var powered_down      = 0;
[02:26:24.917]        // -> [powered_down <= 0x00000000]
[02:26:24.917]      WriteDP(DP_SELECT, 0x00000000);
[02:26:24.921]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:26:24.921]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:26:24.921]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:26:24.921]        // -> [powered_down <= 0x00000001]
[02:26:24.921]    </block>
[02:26:24.921]    <control if="powered_down" while="" timeout="0" info="">
[02:26:24.921]      // if-block "powered_down"
[02:26:24.921]        // =>  TRUE
[02:26:24.921]      <block atomic="false" info="">
[02:26:24.921]        Message(0, "Debug/System power-up request sent");
[02:26:24.921]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:26:24.927]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:26:24.927]      </block>
[02:26:24.927]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:26:24.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:26:24.927]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:26:24.927]        // while-condition  =>  FALSE
[02:26:24.927]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:26:24.927]      </control>
[02:26:24.927]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:26:24.927]        // if-block "(__protocol & 0xFFFF) == 1"
[02:26:24.931]          // =>  FALSE
[02:26:24.931]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:26:24.931]      </control>
[02:26:24.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:26:24.931]        // if-block "(__protocol & 0xFFFF) == 2"
[02:26:24.931]          // =>  TRUE
[02:26:24.931]        <block atomic="false" info="">
[02:26:24.931]          Message(0, "executing SWD power up");
[02:26:24.931]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:26:24.931]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:26:24.931]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:26:24.931]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:26:24.931]        </block>
[02:26:24.931]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:26:24.931]      </control>
[02:26:24.931]      // end if-block "powered_down"
[02:26:24.931]    </control>
[02:26:24.931]    <block atomic="false" info="">
[02:26:24.931]      __var DEBUG_PORT_VAL    = 0;
[02:26:24.931]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:26:24.937]      __var ACCESS_POINT_VAL  = 0;
[02:26:24.937]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:26:24.937]      __ap = 1; 
[02:26:24.937]        // -> [__ap <= 0x00000001]
[02:26:24.937]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:26:24.937]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:26:24.937]      __ap = 4;
[02:26:24.941]        // -> [__ap <= 0x00000004]
[02:26:24.941]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:26:24.947]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:26:24.947]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:26:24.947]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:26:24.947]    </block>
[02:26:24.947]    <block atomic="false" info="">
[02:26:24.947]      __var nReset = 0x80;
[02:26:24.947]        // -> [nReset <= 0x00000080]
[02:26:24.947]      __var canReadPins = 0;
[02:26:24.947]        // -> [canReadPins <= 0x00000000]
[02:26:24.947]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:26:24.951]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:26:24.951]        // -> [canReadPins <= 0x00000001]
[02:26:24.951]    </block>
[02:26:24.951]    <control if="" while="1" timeout="200" info="">
[02:26:24.951]      // while "1"  (timeout="200")
[02:26:24.951]      // while-condition  =>  TRUE
[02:26:24.951]      // while "1"  (timeout="200")
[02:26:24.951]      // while-condition  =>  TRUE
[02:26:24.951]      // while "1"  (timeout="200")
[02:26:24.951]      // while-condition  =>  TRUE
[02:26:24.951]      // while "1"  (timeout="200")
[02:26:24.951]      // while-condition  =>  TRUE
[02:26:24.951]      // while "1"  (timeout="200")
[02:26:24.951]      // while-condition  =>  TRUE
[02:26:24.951]      // while "1"  (timeout="200")
[02:26:24.951]      // while-condition  =>  TRUE
[02:26:24.957]      // while "1"  (timeout="200")
[02:26:24.957]      // while  =>  TIMEOUT
[02:26:24.957]      // end while "1"
[02:26:24.957]    </control>
[02:26:24.957]    <control if="canReadPins" while="" timeout="0" info="">
[02:26:24.957]      // if-block "canReadPins"
[02:26:24.957]        // =>  TRUE
[02:26:24.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:26:24.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:26:24.957]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:26:24.957]        // while-condition  =>  FALSE
[02:26:24.957]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:26:24.957]      </control>
[02:26:24.957]      // end if-block "canReadPins"
[02:26:24.957]    </control>
[02:26:24.957]    <control if="!canReadPins" while="" timeout="0" info="">
[02:26:24.957]      // if-block "!canReadPins"
[02:26:24.957]        // =>  FALSE
[02:26:24.957]      // skip if-block "!canReadPins"
[02:26:24.961]    </control>
[02:26:24.961]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:26:24.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:26:24.961]        // =>  TRUE
[02:26:24.961]      <block atomic="false" info="">
[02:26:24.961]        WriteAP(0x00, 0x190008);
[02:26:24.961]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:26:24.961]        WriteAP(0xF0, 0x01);
[02:26:24.967]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:26:24.967]      </block>
[02:26:24.967]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:26:24.967]    </control>
[02:26:24.967]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:26:24.967]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:26:24.967]        // =>  FALSE
[02:26:24.967]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:26:24.967]    </control>
[02:26:24.967]    <block atomic="false" info="">
[02:26:24.967]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:26:24.971]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:26:24.971]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:26:24.971]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:26:24.971]      __ap = 0; //lets make sure we reset the access point selection
[02:26:24.971]        // -> [__ap <= 0x00000000]
[02:26:24.971]    </block>
[02:26:24.971]  </sequence>
[02:26:24.971]  
[02:26:25.007]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:26:25.007]  
[02:26:25.007]  <debugvars>
[02:26:25.007]    // Pre-defined
[02:26:25.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:26:25.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:26:25.007]    __dp=0x00000000
[02:26:25.007]    __ap=0x00000000
[02:26:25.007]    __traceout=0x00000000      (Trace Disabled)
[02:26:25.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:26:25.007]    __FlashAddr=0x00000000
[02:26:25.007]    __FlashLen=0x00000000
[02:26:25.007]    __FlashArg=0x00000000
[02:26:25.007]    __FlashOp=0x00000000
[02:26:25.007]    __Result=0x00000000
[02:26:25.007]  </debugvars>
[02:26:25.007]  
[02:26:25.007]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:26:25.007]    <block atomic="false" info="">
[02:26:25.007]      __var deviceID = 0;
[02:26:25.007]        // -> [deviceID <= 0x00000000]
[02:26:25.007]      __var version = 0;
[02:26:25.007]        // -> [version <= 0x00000000]
[02:26:25.007]      __var partNum = 0;
[02:26:25.007]        // -> [partNum <= 0x00000000]
[02:26:25.007]      __var manuf = 0;
[02:26:25.011]        // -> [manuf <= 0x00000000]
[02:26:25.011]      __var isMSPM0G1X0X_G3X0X = 0;
[02:26:25.011]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:26:25.011]      __var isProduction = 0;
[02:26:25.011]        // -> [isProduction <= 0x00000000]
[02:26:25.011]      __var continueId = 0;
[02:26:25.011]        // -> [continueId <= 0x00000000]
[02:26:25.011]      deviceID =   Read32(0x41C40004);
[02:26:25.017]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:26:25.017]        // -> [deviceID <= 0x2BB8802F]
[02:26:25.017]      version = deviceID >> 28;
[02:26:25.017]        // -> [version <= 0x00000002]
[02:26:25.017]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:26:25.017]        // -> [partNum <= 0x0000BB88]
[02:26:25.017]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:26:25.017]        // -> [manuf <= 0x00000017]
[02:26:25.017]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:26:25.017]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:26:25.017]      isProduction = (version > 0);
[02:26:25.017]        // -> [isProduction <= 0x00000001]
[02:26:25.017]    </block>
[02:26:25.017]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:26:25.017]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:26:25.017]        // =>  FALSE
[02:26:25.017]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:26:25.017]    </control>
[02:26:25.017]    <control if="continueId == 4" while="" timeout="0" info="">
[02:26:25.017]      // if-block "continueId == 4"
[02:26:25.017]        // =>  FALSE
[02:26:25.017]      // skip if-block "continueId == 4"
[02:26:25.017]    </control>
[02:26:25.017]    <control if="!isProduction" while="" timeout="0" info="">
[02:26:25.017]      // if-block "!isProduction"
[02:26:25.017]        // =>  FALSE
[02:26:25.017]      // skip if-block "!isProduction"
[02:26:25.017]    </control>
[02:26:25.017]  </sequence>
[02:26:25.017]  
[02:27:37.359]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:27:37.359]  
[02:27:37.370]  <debugvars>
[02:27:37.370]    // Pre-defined
[02:27:37.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:27:37.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:27:37.370]    __dp=0x00000000
[02:27:37.370]    __ap=0x00000000
[02:27:37.370]    __traceout=0x00000000      (Trace Disabled)
[02:27:37.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:27:37.370]    __FlashAddr=0x00000000
[02:27:37.370]    __FlashLen=0x00000000
[02:27:37.370]    __FlashArg=0x00000000
[02:27:37.370]    __FlashOp=0x00000000
[02:27:37.370]    __Result=0x00000000
[02:27:37.370]  </debugvars>
[02:27:37.370]  
[02:27:37.370]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:27:37.370]    <block atomic="false" info="">
[02:27:37.370]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:27:37.370]        // -> [isSWJ <= 0x00000001]
[02:27:37.370]      __var hasDormant = __protocol & 0x00020000;
[02:27:37.370]        // -> [hasDormant <= 0x00000000]
[02:27:37.370]      __var protType   = __protocol & 0x0000FFFF;
[02:27:37.370]        // -> [protType <= 0x00000002]
[02:27:37.370]    </block>
[02:27:37.370]    <control if="protType == 1" while="" timeout="0" info="">
[02:27:37.370]      // if-block "protType == 1"
[02:27:37.370]        // =>  FALSE
[02:27:37.370]      // skip if-block "protType == 1"
[02:27:37.370]    </control>
[02:27:37.370]    <control if="protType == 2" while="" timeout="0" info="">
[02:27:37.370]      // if-block "protType == 2"
[02:27:37.370]        // =>  TRUE
[02:27:37.370]      <control if="isSWJ" while="" timeout="0" info="">
[02:27:37.370]        // if-block "isSWJ"
[02:27:37.370]          // =>  TRUE
[02:27:37.370]        <control if="hasDormant" while="" timeout="0" info="">
[02:27:37.370]          // if-block "hasDormant"
[02:27:37.370]            // =>  FALSE
[02:27:37.370]          // skip if-block "hasDormant"
[02:27:37.370]        </control>
[02:27:37.370]        <control if="!hasDormant" while="" timeout="0" info="">
[02:27:37.370]          // if-block "!hasDormant"
[02:27:37.370]            // =>  TRUE
[02:27:37.370]          <block atomic="false" info="">
[02:27:37.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:27:37.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:27:37.370]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:27:37.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:27:37.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:27:37.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:27:37.380]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:27:37.390]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:27:37.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:27:37.390]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:27:37.390]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:27:37.400]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:27:37.400]          </block>
[02:27:37.400]          // end if-block "!hasDormant"
[02:27:37.400]        </control>
[02:27:37.400]        // end if-block "isSWJ"
[02:27:37.400]      </control>
[02:27:37.400]      <control if="!isSWJ" while="" timeout="0" info="">
[02:27:37.400]        // if-block "!isSWJ"
[02:27:37.400]          // =>  FALSE
[02:27:37.400]        // skip if-block "!isSWJ"
[02:27:37.400]      </control>
[02:27:37.400]      <block atomic="false" info="">
[02:27:37.400]        ReadDP(0x0);
[02:27:37.406]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:27:37.406]      </block>
[02:27:37.406]      // end if-block "protType == 2"
[02:27:37.406]    </control>
[02:27:37.406]  </sequence>
[02:27:37.406]  
[02:27:37.410]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:27:37.410]  
[02:27:37.410]  <debugvars>
[02:27:37.410]    // Pre-defined
[02:27:37.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:27:37.410]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:27:37.410]    __dp=0x00000000
[02:27:37.410]    __ap=0x00000000
[02:27:37.410]    __traceout=0x00000000      (Trace Disabled)
[02:27:37.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:27:37.410]    __FlashAddr=0x00000000
[02:27:37.410]    __FlashLen=0x00000000
[02:27:37.410]    __FlashArg=0x00000000
[02:27:37.410]    __FlashOp=0x00000000
[02:27:37.410]    __Result=0x00000000
[02:27:37.410]  </debugvars>
[02:27:37.410]  
[02:27:37.410]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:27:37.410]    <block atomic="false" info="">
[02:27:37.410]      __var SW_DP_ABORT       = 0x0;
[02:27:37.410]        // -> [SW_DP_ABORT <= 0x00000000]
[02:27:37.410]      __var DP_CTRL_STAT      = 0x4;
[02:27:37.410]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:27:37.410]      __var DP_SELECT         = 0x8;
[02:27:37.410]        // -> [DP_SELECT <= 0x00000008]
[02:27:37.410]      __var powered_down      = 0;
[02:27:37.410]        // -> [powered_down <= 0x00000000]
[02:27:37.410]      WriteDP(DP_SELECT, 0x00000000);
[02:27:37.420]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:27:37.420]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:27:37.423]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:27:37.423]        // -> [powered_down <= 0x00000001]
[02:27:37.423]    </block>
[02:27:37.423]    <control if="powered_down" while="" timeout="0" info="">
[02:27:37.423]      // if-block "powered_down"
[02:27:37.423]        // =>  TRUE
[02:27:37.423]      <block atomic="false" info="">
[02:27:37.423]        Message(0, "Debug/System power-up request sent");
[02:27:37.423]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:27:37.423]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:27:37.423]      </block>
[02:27:37.423]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:27:37.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:27:37.423]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:27:37.423]        // while-condition  =>  FALSE
[02:27:37.423]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:27:37.430]      </control>
[02:27:37.430]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:27:37.430]        // if-block "(__protocol & 0xFFFF) == 1"
[02:27:37.430]          // =>  FALSE
[02:27:37.430]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:27:37.430]      </control>
[02:27:37.430]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:27:37.430]        // if-block "(__protocol & 0xFFFF) == 2"
[02:27:37.430]          // =>  TRUE
[02:27:37.432]        <block atomic="false" info="">
[02:27:37.432]          Message(0, "executing SWD power up");
[02:27:37.432]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:27:37.432]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:27:37.432]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:27:37.439]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:27:37.439]        </block>
[02:27:37.439]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:27:37.439]      </control>
[02:27:37.439]      // end if-block "powered_down"
[02:27:37.439]    </control>
[02:27:37.439]    <block atomic="false" info="">
[02:27:37.439]      __var DEBUG_PORT_VAL    = 0;
[02:27:37.439]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:27:37.439]      __var ACCESS_POINT_VAL  = 0;
[02:27:37.439]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:27:37.439]      __ap = 1; 
[02:27:37.439]        // -> [__ap <= 0x00000001]
[02:27:37.439]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:27:37.449]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:27:37.449]      __ap = 4;
[02:27:37.449]        // -> [__ap <= 0x00000004]
[02:27:37.449]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:27:37.449]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:27:37.449]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:27:37.449]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:27:37.449]    </block>
[02:27:37.449]    <block atomic="false" info="">
[02:27:37.456]      __var nReset = 0x80;
[02:27:37.456]        // -> [nReset <= 0x00000080]
[02:27:37.456]      __var canReadPins = 0;
[02:27:37.456]        // -> [canReadPins <= 0x00000000]
[02:27:37.456]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:27:37.456]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:27:37.456]        // -> [canReadPins <= 0x00000001]
[02:27:37.456]    </block>
[02:27:37.456]    <control if="" while="1" timeout="200" info="">
[02:27:37.456]      // while "1"  (timeout="200")
[02:27:37.456]      // while-condition  =>  TRUE
[02:27:37.456]      // while "1"  (timeout="200")
[02:27:37.456]      // while-condition  =>  TRUE
[02:27:37.456]      // while "1"  (timeout="200")
[02:27:37.460]      // while-condition  =>  TRUE
[02:27:37.460]      // while "1"  (timeout="200")
[02:27:37.460]      // while  =>  TIMEOUT
[02:27:37.460]      // end while "1"
[02:27:37.460]    </control>
[02:27:37.460]    <control if="canReadPins" while="" timeout="0" info="">
[02:27:37.460]      // if-block "canReadPins"
[02:27:37.460]        // =>  TRUE
[02:27:37.460]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:27:37.460]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:27:37.460]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:27:37.460]        // while-condition  =>  FALSE
[02:27:37.460]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:27:37.460]      </control>
[02:27:37.460]      // end if-block "canReadPins"
[02:27:37.460]    </control>
[02:27:37.460]    <control if="!canReadPins" while="" timeout="0" info="">
[02:27:37.460]      // if-block "!canReadPins"
[02:27:37.460]        // =>  FALSE
[02:27:37.460]      // skip if-block "!canReadPins"
[02:27:37.460]    </control>
[02:27:37.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:27:37.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:27:37.460]        // =>  TRUE
[02:27:37.460]      <block atomic="false" info="">
[02:27:37.460]        WriteAP(0x00, 0x190008);
[02:27:37.460]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:27:37.460]        WriteAP(0xF0, 0x01);
[02:27:37.470]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:27:37.470]      </block>
[02:27:37.470]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:27:37.470]    </control>
[02:27:37.470]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:27:37.470]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:27:37.470]        // =>  FALSE
[02:27:37.470]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:27:37.470]    </control>
[02:27:37.470]    <block atomic="false" info="">
[02:27:37.470]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:27:37.480]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:27:37.480]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:27:37.480]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:27:37.480]      __ap = 0; //lets make sure we reset the access point selection
[02:27:37.480]        // -> [__ap <= 0x00000000]
[02:27:37.480]    </block>
[02:27:37.480]  </sequence>
[02:27:37.480]  
[02:27:37.510]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:27:37.510]  
[02:27:37.510]  <debugvars>
[02:27:37.510]    // Pre-defined
[02:27:37.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:27:37.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:27:37.510]    __dp=0x00000000
[02:27:37.510]    __ap=0x00000000
[02:27:37.510]    __traceout=0x00000000      (Trace Disabled)
[02:27:37.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:27:37.510]    __FlashAddr=0x00000000
[02:27:37.510]    __FlashLen=0x00000000
[02:27:37.510]    __FlashArg=0x00000000
[02:27:37.510]    __FlashOp=0x00000000
[02:27:37.510]    __Result=0x00000000
[02:27:37.510]  </debugvars>
[02:27:37.510]  
[02:27:37.510]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:27:37.510]    <block atomic="false" info="">
[02:27:37.510]      __var deviceID = 0;
[02:27:37.510]        // -> [deviceID <= 0x00000000]
[02:27:37.510]      __var version = 0;
[02:27:37.510]        // -> [version <= 0x00000000]
[02:27:37.510]      __var partNum = 0;
[02:27:37.510]        // -> [partNum <= 0x00000000]
[02:27:37.510]      __var manuf = 0;
[02:27:37.510]        // -> [manuf <= 0x00000000]
[02:27:37.510]      __var isMSPM0G1X0X_G3X0X = 0;
[02:27:37.510]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:27:37.510]      __var isProduction = 0;
[02:27:37.510]        // -> [isProduction <= 0x00000000]
[02:27:37.510]      __var continueId = 0;
[02:27:37.510]        // -> [continueId <= 0x00000000]
[02:27:37.510]      deviceID =   Read32(0x41C40004);
[02:27:37.520]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:27:37.520]        // -> [deviceID <= 0x2BB8802F]
[02:27:37.520]      version = deviceID >> 28;
[02:27:37.520]        // -> [version <= 0x00000002]
[02:27:37.520]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:27:37.520]        // -> [partNum <= 0x0000BB88]
[02:27:37.520]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:27:37.520]        // -> [manuf <= 0x00000017]
[02:27:37.520]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:27:37.520]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:27:37.520]      isProduction = (version > 0);
[02:27:37.520]        // -> [isProduction <= 0x00000001]
[02:27:37.520]    </block>
[02:27:37.520]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:27:37.520]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:27:37.520]        // =>  FALSE
[02:27:37.520]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:27:37.520]    </control>
[02:27:37.520]    <control if="continueId == 4" while="" timeout="0" info="">
[02:27:37.520]      // if-block "continueId == 4"
[02:27:37.520]        // =>  FALSE
[02:27:37.520]      // skip if-block "continueId == 4"
[02:27:37.520]    </control>
[02:27:37.520]    <control if="!isProduction" while="" timeout="0" info="">
[02:27:37.520]      // if-block "!isProduction"
[02:27:37.520]        // =>  FALSE
[02:27:37.520]      // skip if-block "!isProduction"
[02:27:37.520]    </control>
[02:27:37.520]  </sequence>
[02:27:37.520]  
[02:27:44.088]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:27:44.088]  
[02:27:44.088]  <debugvars>
[02:27:44.088]    // Pre-defined
[02:27:44.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:27:44.088]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:27:44.088]    __dp=0x00000000
[02:27:44.088]    __ap=0x00000000
[02:27:44.088]    __traceout=0x00000000      (Trace Disabled)
[02:27:44.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:27:44.088]    __FlashAddr=0x00000000
[02:27:44.088]    __FlashLen=0x00000000
[02:27:44.088]    __FlashArg=0x00000000
[02:27:44.088]    __FlashOp=0x00000000
[02:27:44.088]    __Result=0x00000000
[02:27:44.088]  </debugvars>
[02:27:44.088]  
[02:27:44.088]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:27:44.088]    <block atomic="false" info="">
[02:27:44.088]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:27:44.088]        // -> [isSWJ <= 0x00000001]
[02:27:44.088]      __var hasDormant = __protocol & 0x00020000;
[02:27:44.088]        // -> [hasDormant <= 0x00000000]
[02:27:44.088]      __var protType   = __protocol & 0x0000FFFF;
[02:27:44.088]        // -> [protType <= 0x00000002]
[02:27:44.088]    </block>
[02:27:44.088]    <control if="protType == 1" while="" timeout="0" info="">
[02:27:44.088]      // if-block "protType == 1"
[02:27:44.088]        // =>  FALSE
[02:27:44.088]      // skip if-block "protType == 1"
[02:27:44.088]    </control>
[02:27:44.088]    <control if="protType == 2" while="" timeout="0" info="">
[02:27:44.088]      // if-block "protType == 2"
[02:27:44.098]        // =>  TRUE
[02:27:44.098]      <control if="isSWJ" while="" timeout="0" info="">
[02:27:44.098]        // if-block "isSWJ"
[02:27:44.098]          // =>  TRUE
[02:27:44.098]        <control if="hasDormant" while="" timeout="0" info="">
[02:27:44.098]          // if-block "hasDormant"
[02:27:44.098]            // =>  FALSE
[02:27:44.098]          // skip if-block "hasDormant"
[02:27:44.098]        </control>
[02:27:44.098]        <control if="!hasDormant" while="" timeout="0" info="">
[02:27:44.098]          // if-block "!hasDormant"
[02:27:44.098]            // =>  TRUE
[02:27:44.098]          <block atomic="false" info="">
[02:27:44.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:27:44.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:27:44.098]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:27:44.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:27:44.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:27:44.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:27:44.108]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:27:44.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:27:44.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:27:44.118]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:27:44.118]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:27:44.118]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:27:44.118]          </block>
[02:27:44.118]          // end if-block "!hasDormant"
[02:27:44.118]        </control>
[02:27:44.118]        // end if-block "isSWJ"
[02:27:44.118]      </control>
[02:27:44.118]      <control if="!isSWJ" while="" timeout="0" info="">
[02:27:44.118]        // if-block "!isSWJ"
[02:27:44.118]          // =>  FALSE
[02:27:44.118]        // skip if-block "!isSWJ"
[02:27:44.118]      </control>
[02:27:44.118]      <block atomic="false" info="">
[02:27:44.118]        ReadDP(0x0);
[02:27:44.118]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:27:44.118]      </block>
[02:27:44.118]      // end if-block "protType == 2"
[02:27:44.128]    </control>
[02:27:44.128]  </sequence>
[02:27:44.128]  
[02:27:44.128]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:27:44.128]  
[02:27:44.128]  <debugvars>
[02:27:44.128]    // Pre-defined
[02:27:44.128]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:27:44.128]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:27:44.128]    __dp=0x00000000
[02:27:44.128]    __ap=0x00000000
[02:27:44.128]    __traceout=0x00000000      (Trace Disabled)
[02:27:44.128]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:27:44.128]    __FlashAddr=0x00000000
[02:27:44.128]    __FlashLen=0x00000000
[02:27:44.128]    __FlashArg=0x00000000
[02:27:44.128]    __FlashOp=0x00000000
[02:27:44.128]    __Result=0x00000000
[02:27:44.128]  </debugvars>
[02:27:44.128]  
[02:27:44.128]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:27:44.128]    <block atomic="false" info="">
[02:27:44.128]      __var SW_DP_ABORT       = 0x0;
[02:27:44.128]        // -> [SW_DP_ABORT <= 0x00000000]
[02:27:44.128]      __var DP_CTRL_STAT      = 0x4;
[02:27:44.128]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:27:44.128]      __var DP_SELECT         = 0x8;
[02:27:44.128]        // -> [DP_SELECT <= 0x00000008]
[02:27:44.128]      __var powered_down      = 0;
[02:27:44.128]        // -> [powered_down <= 0x00000000]
[02:27:44.128]      WriteDP(DP_SELECT, 0x00000000);
[02:27:44.138]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:27:44.138]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:27:44.138]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:27:44.138]        // -> [powered_down <= 0x00000001]
[02:27:44.138]    </block>
[02:27:44.138]    <control if="powered_down" while="" timeout="0" info="">
[02:27:44.138]      // if-block "powered_down"
[02:27:44.138]        // =>  TRUE
[02:27:44.138]      <block atomic="false" info="">
[02:27:44.138]        Message(0, "Debug/System power-up request sent");
[02:27:44.138]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:27:44.138]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:27:44.138]      </block>
[02:27:44.148]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:27:44.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:27:44.148]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:27:44.148]        // while-condition  =>  FALSE
[02:27:44.148]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:27:44.148]      </control>
[02:27:44.148]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:27:44.148]        // if-block "(__protocol & 0xFFFF) == 1"
[02:27:44.148]          // =>  FALSE
[02:27:44.148]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:27:44.148]      </control>
[02:27:44.148]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:27:44.148]        // if-block "(__protocol & 0xFFFF) == 2"
[02:27:44.148]          // =>  TRUE
[02:27:44.148]        <block atomic="false" info="">
[02:27:44.148]          Message(0, "executing SWD power up");
[02:27:44.148]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:27:44.158]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:27:44.158]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:27:44.168]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:27:44.168]        </block>
[02:27:44.168]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:27:44.168]      </control>
[02:27:44.168]      // end if-block "powered_down"
[02:27:44.168]    </control>
[02:27:44.168]    <block atomic="false" info="">
[02:27:44.168]      __var DEBUG_PORT_VAL    = 0;
[02:27:44.168]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:27:44.168]      __var ACCESS_POINT_VAL  = 0;
[02:27:44.168]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:27:44.168]      __ap = 1; 
[02:27:44.168]        // -> [__ap <= 0x00000001]
[02:27:44.168]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:27:44.178]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:27:44.178]      __ap = 4;
[02:27:44.178]        // -> [__ap <= 0x00000004]
[02:27:44.178]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:27:44.188]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:27:44.188]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:27:44.188]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:27:44.188]    </block>
[02:27:44.188]    <block atomic="false" info="">
[02:27:44.188]      __var nReset = 0x80;
[02:27:44.188]        // -> [nReset <= 0x00000080]
[02:27:44.188]      __var canReadPins = 0;
[02:27:44.188]        // -> [canReadPins <= 0x00000000]
[02:27:44.188]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:27:44.188]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:27:44.188]        // -> [canReadPins <= 0x00000001]
[02:27:44.188]    </block>
[02:27:44.188]    <control if="" while="1" timeout="200" info="">
[02:27:44.188]      // while "1"  (timeout="200")
[02:27:44.188]      // while-condition  =>  TRUE
[02:27:44.198]      // while "1"  (timeout="200")
[02:27:44.198]      // while  =>  TIMEOUT
[02:27:44.198]      // end while "1"
[02:27:44.198]    </control>
[02:27:44.198]    <control if="canReadPins" while="" timeout="0" info="">
[02:27:44.198]      // if-block "canReadPins"
[02:27:44.198]        // =>  TRUE
[02:27:44.198]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:27:44.198]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:27:44.198]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:27:44.198]        // while-condition  =>  FALSE
[02:27:44.198]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:27:44.198]      </control>
[02:27:44.198]      // end if-block "canReadPins"
[02:27:44.198]    </control>
[02:27:44.198]    <control if="!canReadPins" while="" timeout="0" info="">
[02:27:44.198]      // if-block "!canReadPins"
[02:27:44.198]        // =>  FALSE
[02:27:44.198]      // skip if-block "!canReadPins"
[02:27:44.198]    </control>
[02:27:44.198]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:27:44.198]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:27:44.198]        // =>  TRUE
[02:27:44.198]      <block atomic="false" info="">
[02:27:44.198]        WriteAP(0x00, 0x190008);
[02:27:44.198]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:27:44.198]        WriteAP(0xF0, 0x01);
[02:27:44.208]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:27:44.208]      </block>
[02:27:44.208]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:27:44.208]    </control>
[02:27:44.208]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:27:44.208]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:27:44.208]        // =>  FALSE
[02:27:44.208]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:27:44.208]    </control>
[02:27:44.208]    <block atomic="false" info="">
[02:27:44.208]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:27:44.218]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:27:44.218]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:27:44.218]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:27:44.218]      __ap = 0; //lets make sure we reset the access point selection
[02:27:44.218]        // -> [__ap <= 0x00000000]
[02:27:44.218]    </block>
[02:27:44.218]  </sequence>
[02:27:44.218]  
[02:27:44.258]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:27:44.258]  
[02:27:44.258]  <debugvars>
[02:27:44.258]    // Pre-defined
[02:27:44.258]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:27:44.258]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:27:44.258]    __dp=0x00000000
[02:27:44.258]    __ap=0x00000000
[02:27:44.258]    __traceout=0x00000000      (Trace Disabled)
[02:27:44.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:27:44.268]    __FlashAddr=0x00000000
[02:27:44.268]    __FlashLen=0x00000000
[02:27:44.268]    __FlashArg=0x00000000
[02:27:44.268]    __FlashOp=0x00000000
[02:27:44.268]    __Result=0x00000000
[02:27:44.268]  </debugvars>
[02:27:44.268]  
[02:27:44.268]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:27:44.268]    <block atomic="false" info="">
[02:27:44.268]      __var deviceID = 0;
[02:27:44.268]        // -> [deviceID <= 0x00000000]
[02:27:44.268]      __var version = 0;
[02:27:44.268]        // -> [version <= 0x00000000]
[02:27:44.268]      __var partNum = 0;
[02:27:44.268]        // -> [partNum <= 0x00000000]
[02:27:44.268]      __var manuf = 0;
[02:27:44.268]        // -> [manuf <= 0x00000000]
[02:27:44.268]      __var isMSPM0G1X0X_G3X0X = 0;
[02:27:44.268]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:27:44.268]      __var isProduction = 0;
[02:27:44.268]        // -> [isProduction <= 0x00000000]
[02:27:44.268]      __var continueId = 0;
[02:27:44.268]        // -> [continueId <= 0x00000000]
[02:27:44.268]      deviceID =   Read32(0x41C40004);
[02:27:44.268]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:27:44.268]        // -> [deviceID <= 0x2BB8802F]
[02:27:44.268]      version = deviceID >> 28;
[02:27:44.268]        // -> [version <= 0x00000002]
[02:27:44.268]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:27:44.268]        // -> [partNum <= 0x0000BB88]
[02:27:44.268]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:27:44.268]        // -> [manuf <= 0x00000017]
[02:27:44.268]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:27:44.268]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:27:44.268]      isProduction = (version > 0);
[02:27:44.268]        // -> [isProduction <= 0x00000001]
[02:27:44.278]    </block>
[02:27:44.278]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:27:44.278]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:27:44.278]        // =>  FALSE
[02:27:44.278]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:27:44.278]    </control>
[02:27:44.278]    <control if="continueId == 4" while="" timeout="0" info="">
[02:27:44.278]      // if-block "continueId == 4"
[02:27:44.278]        // =>  FALSE
[02:27:44.278]      // skip if-block "continueId == 4"
[02:27:44.278]    </control>
[02:27:44.278]    <control if="!isProduction" while="" timeout="0" info="">
[02:27:44.278]      // if-block "!isProduction"
[02:27:44.278]        // =>  FALSE
[02:27:44.278]      // skip if-block "!isProduction"
[02:27:44.278]    </control>
[02:27:44.278]  </sequence>
[02:27:44.278]  
[02:34:37.513]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:34:37.513]  
[02:34:37.530]  <debugvars>
[02:34:37.530]    // Pre-defined
[02:34:37.530]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:37.530]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:34:37.530]    __dp=0x00000000
[02:34:37.530]    __ap=0x00000000
[02:34:37.530]    __traceout=0x00000000      (Trace Disabled)
[02:34:37.530]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:37.530]    __FlashAddr=0x00000000
[02:34:37.530]    __FlashLen=0x00000000
[02:34:37.530]    __FlashArg=0x00000000
[02:34:37.530]    __FlashOp=0x00000000
[02:34:37.530]    __Result=0x00000000
[02:34:37.530]  </debugvars>
[02:34:37.530]  
[02:34:37.530]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:34:37.530]    <block atomic="false" info="">
[02:34:37.530]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:34:37.530]        // -> [isSWJ <= 0x00000001]
[02:34:37.533]      __var hasDormant = __protocol & 0x00020000;
[02:34:37.533]        // -> [hasDormant <= 0x00000000]
[02:34:37.533]      __var protType   = __protocol & 0x0000FFFF;
[02:34:37.534]        // -> [protType <= 0x00000002]
[02:34:37.534]    </block>
[02:34:37.534]    <control if="protType == 1" while="" timeout="0" info="">
[02:34:37.534]      // if-block "protType == 1"
[02:34:37.534]        // =>  FALSE
[02:34:37.534]      // skip if-block "protType == 1"
[02:34:37.534]    </control>
[02:34:37.534]    <control if="protType == 2" while="" timeout="0" info="">
[02:34:37.534]      // if-block "protType == 2"
[02:34:37.534]        // =>  TRUE
[02:34:37.534]      <control if="isSWJ" while="" timeout="0" info="">
[02:34:37.534]        // if-block "isSWJ"
[02:34:37.534]          // =>  TRUE
[02:34:37.534]        <control if="hasDormant" while="" timeout="0" info="">
[02:34:37.534]          // if-block "hasDormant"
[02:34:37.534]            // =>  FALSE
[02:34:37.534]          // skip if-block "hasDormant"
[02:34:37.534]        </control>
[02:34:37.534]        <control if="!hasDormant" while="" timeout="0" info="">
[02:34:37.534]          // if-block "!hasDormant"
[02:34:37.534]            // =>  TRUE
[02:34:37.534]          <block atomic="false" info="">
[02:34:37.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:34:37.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:37.534]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:34:37.534]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:34:37.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:34:37.544]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:37.544]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:34:37.544]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:34:37.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:34:37.544]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:34:37.544]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:34:37.544]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:34:37.544]          </block>
[02:34:37.544]          // end if-block "!hasDormant"
[02:34:37.544]        </control>
[02:34:37.544]        // end if-block "isSWJ"
[02:34:37.544]      </control>
[02:34:37.544]      <control if="!isSWJ" while="" timeout="0" info="">
[02:34:37.544]        // if-block "!isSWJ"
[02:34:37.544]          // =>  FALSE
[02:34:37.544]        // skip if-block "!isSWJ"
[02:34:37.544]      </control>
[02:34:37.544]      <block atomic="false" info="">
[02:34:37.544]        ReadDP(0x0);
[02:34:37.544]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:34:37.544]      </block>
[02:34:37.544]      // end if-block "protType == 2"
[02:34:37.553]    </control>
[02:34:37.553]  </sequence>
[02:34:37.553]  
[02:34:37.553]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:34:37.553]  
[02:34:37.553]  <debugvars>
[02:34:37.553]    // Pre-defined
[02:34:37.553]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:37.553]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:34:37.553]    __dp=0x00000000
[02:34:37.553]    __ap=0x00000000
[02:34:37.553]    __traceout=0x00000000      (Trace Disabled)
[02:34:37.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:37.553]    __FlashAddr=0x00000000
[02:34:37.553]    __FlashLen=0x00000000
[02:34:37.553]    __FlashArg=0x00000000
[02:34:37.553]    __FlashOp=0x00000000
[02:34:37.553]    __Result=0x00000000
[02:34:37.553]  </debugvars>
[02:34:37.553]  
[02:34:37.553]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:34:37.553]    <block atomic="false" info="">
[02:34:37.553]      __var SW_DP_ABORT       = 0x0;
[02:34:37.553]        // -> [SW_DP_ABORT <= 0x00000000]
[02:34:37.553]      __var DP_CTRL_STAT      = 0x4;
[02:34:37.553]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:34:37.553]      __var DP_SELECT         = 0x8;
[02:34:37.553]        // -> [DP_SELECT <= 0x00000008]
[02:34:37.553]      __var powered_down      = 0;
[02:34:37.553]        // -> [powered_down <= 0x00000000]
[02:34:37.563]      WriteDP(DP_SELECT, 0x00000000);
[02:34:37.563]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:34:37.563]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:34:37.563]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:34:37.563]        // -> [powered_down <= 0x00000001]
[02:34:37.563]    </block>
[02:34:37.563]    <control if="powered_down" while="" timeout="0" info="">
[02:34:37.563]      // if-block "powered_down"
[02:34:37.563]        // =>  TRUE
[02:34:37.563]      <block atomic="false" info="">
[02:34:37.563]        Message(0, "Debug/System power-up request sent");
[02:34:37.563]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:34:37.563]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:34:37.563]      </block>
[02:34:37.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:34:37.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:34:37.573]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:34:37.573]        // while-condition  =>  FALSE
[02:34:37.573]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:34:37.573]      </control>
[02:34:37.573]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:34:37.573]        // if-block "(__protocol & 0xFFFF) == 1"
[02:34:37.573]          // =>  FALSE
[02:34:37.573]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:34:37.573]      </control>
[02:34:37.573]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:34:37.573]        // if-block "(__protocol & 0xFFFF) == 2"
[02:34:37.573]          // =>  TRUE
[02:34:37.573]        <block atomic="false" info="">
[02:34:37.573]          Message(0, "executing SWD power up");
[02:34:37.573]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:34:37.573]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:34:37.573]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:34:37.573]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:34:37.573]        </block>
[02:34:37.573]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:34:37.573]      </control>
[02:34:37.573]      // end if-block "powered_down"
[02:34:37.573]    </control>
[02:34:37.573]    <block atomic="false" info="">
[02:34:37.573]      __var DEBUG_PORT_VAL    = 0;
[02:34:37.573]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:34:37.573]      __var ACCESS_POINT_VAL  = 0;
[02:34:37.573]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:34:37.573]      __ap = 1; 
[02:34:37.573]        // -> [__ap <= 0x00000001]
[02:34:37.573]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:34:37.583]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:34:37.583]      __ap = 4;
[02:34:37.583]        // -> [__ap <= 0x00000004]
[02:34:37.583]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:34:37.594]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:34:37.594]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:34:37.594]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:34:37.594]    </block>
[02:34:37.594]    <block atomic="false" info="">
[02:34:37.594]      __var nReset = 0x80;
[02:34:37.594]        // -> [nReset <= 0x00000080]
[02:34:37.594]      __var canReadPins = 0;
[02:34:37.594]        // -> [canReadPins <= 0x00000000]
[02:34:37.594]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:34:37.594]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:34:37.594]        // -> [canReadPins <= 0x00000001]
[02:34:37.594]    </block>
[02:34:37.594]    <control if="" while="1" timeout="200" info="">
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.594]      // while "1"  (timeout="200")
[02:34:37.594]      // while-condition  =>  TRUE
[02:34:37.603]      // while "1"  (timeout="200")
[02:34:37.603]      // while  =>  TIMEOUT
[02:34:37.604]      // end while "1"
[02:34:37.604]    </control>
[02:34:37.604]    <control if="canReadPins" while="" timeout="0" info="">
[02:34:37.604]      // if-block "canReadPins"
[02:34:37.604]        // =>  TRUE
[02:34:37.604]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:34:37.604]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:34:37.604]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:34:37.604]        // while-condition  =>  FALSE
[02:34:37.604]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:34:37.604]      </control>
[02:34:37.604]      // end if-block "canReadPins"
[02:34:37.604]    </control>
[02:34:37.604]    <control if="!canReadPins" while="" timeout="0" info="">
[02:34:37.604]      // if-block "!canReadPins"
[02:34:37.604]        // =>  FALSE
[02:34:37.604]      // skip if-block "!canReadPins"
[02:34:37.604]    </control>
[02:34:37.604]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:34:37.604]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:34:37.604]        // =>  TRUE
[02:34:37.604]      <block atomic="false" info="">
[02:34:37.604]        WriteAP(0x00, 0x190008);
[02:34:37.604]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:34:37.604]        WriteAP(0xF0, 0x01);
[02:34:37.613]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:34:37.613]      </block>
[02:34:37.613]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:34:37.613]    </control>
[02:34:37.613]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:34:37.613]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:34:37.613]        // =>  FALSE
[02:34:37.613]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:34:37.613]    </control>
[02:34:37.613]    <block atomic="false" info="">
[02:34:37.613]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:34:37.623]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:34:37.623]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:34:37.623]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:34:37.623]      __ap = 0; //lets make sure we reset the access point selection
[02:34:37.623]        // -> [__ap <= 0x00000000]
[02:34:37.623]    </block>
[02:34:37.623]  </sequence>
[02:34:37.623]  
[02:34:37.643]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:34:37.643]  
[02:34:37.643]  <debugvars>
[02:34:37.643]    // Pre-defined
[02:34:37.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:34:37.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:34:37.643]    __dp=0x00000000
[02:34:37.643]    __ap=0x00000000
[02:34:37.643]    __traceout=0x00000000      (Trace Disabled)
[02:34:37.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:34:37.643]    __FlashAddr=0x00000000
[02:34:37.643]    __FlashLen=0x00000000
[02:34:37.653]    __FlashArg=0x00000000
[02:34:37.653]    __FlashOp=0x00000000
[02:34:37.653]    __Result=0x00000000
[02:34:37.653]  </debugvars>
[02:34:37.653]  
[02:34:37.653]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:34:37.653]    <block atomic="false" info="">
[02:34:37.653]      __var deviceID = 0;
[02:34:37.653]        // -> [deviceID <= 0x00000000]
[02:34:37.653]      __var version = 0;
[02:34:37.653]        // -> [version <= 0x00000000]
[02:34:37.653]      __var partNum = 0;
[02:34:37.653]        // -> [partNum <= 0x00000000]
[02:34:37.653]      __var manuf = 0;
[02:34:37.653]        // -> [manuf <= 0x00000000]
[02:34:37.653]      __var isMSPM0G1X0X_G3X0X = 0;
[02:34:37.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:34:37.653]      __var isProduction = 0;
[02:34:37.653]        // -> [isProduction <= 0x00000000]
[02:34:37.653]      __var continueId = 0;
[02:34:37.653]        // -> [continueId <= 0x00000000]
[02:34:37.653]      deviceID =   Read32(0x41C40004);
[02:34:37.653]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:34:37.653]        // -> [deviceID <= 0x2BB8802F]
[02:34:37.653]      version = deviceID >> 28;
[02:34:37.653]        // -> [version <= 0x00000002]
[02:34:37.653]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:34:37.653]        // -> [partNum <= 0x0000BB88]
[02:34:37.653]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:34:37.663]        // -> [manuf <= 0x00000017]
[02:34:37.663]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:34:37.663]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:34:37.663]      isProduction = (version > 0);
[02:34:37.663]        // -> [isProduction <= 0x00000001]
[02:34:37.663]    </block>
[02:34:37.663]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:34:37.663]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:34:37.663]        // =>  FALSE
[02:34:37.663]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:34:37.663]    </control>
[02:34:37.663]    <control if="continueId == 4" while="" timeout="0" info="">
[02:34:37.663]      // if-block "continueId == 4"
[02:34:37.663]        // =>  FALSE
[02:34:37.663]      // skip if-block "continueId == 4"
[02:34:37.663]    </control>
[02:34:37.663]    <control if="!isProduction" while="" timeout="0" info="">
[02:34:37.663]      // if-block "!isProduction"
[02:34:37.663]        // =>  FALSE
[02:34:37.663]      // skip if-block "!isProduction"
[02:34:37.663]    </control>
[02:34:37.663]  </sequence>
[02:34:37.663]  
[02:36:44.729]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:36:44.729]  
[02:36:44.745]  <debugvars>
[02:36:44.745]    // Pre-defined
[02:36:44.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:44.745]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:44.745]    __dp=0x00000000
[02:36:44.745]    __ap=0x00000000
[02:36:44.745]    __traceout=0x00000000      (Trace Disabled)
[02:36:44.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:44.745]    __FlashAddr=0x00000000
[02:36:44.745]    __FlashLen=0x00000000
[02:36:44.745]    __FlashArg=0x00000000
[02:36:44.745]    __FlashOp=0x00000000
[02:36:44.745]    __Result=0x00000000
[02:36:44.745]  </debugvars>
[02:36:44.745]  
[02:36:44.745]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:36:44.745]    <block atomic="false" info="">
[02:36:44.745]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:36:44.745]        // -> [isSWJ <= 0x00000001]
[02:36:44.745]      __var hasDormant = __protocol & 0x00020000;
[02:36:44.745]        // -> [hasDormant <= 0x00000000]
[02:36:44.749]      __var protType   = __protocol & 0x0000FFFF;
[02:36:44.749]        // -> [protType <= 0x00000002]
[02:36:44.749]    </block>
[02:36:44.749]    <control if="protType == 1" while="" timeout="0" info="">
[02:36:44.749]      // if-block "protType == 1"
[02:36:44.749]        // =>  FALSE
[02:36:44.749]      // skip if-block "protType == 1"
[02:36:44.749]    </control>
[02:36:44.749]    <control if="protType == 2" while="" timeout="0" info="">
[02:36:44.749]      // if-block "protType == 2"
[02:36:44.749]        // =>  TRUE
[02:36:44.749]      <control if="isSWJ" while="" timeout="0" info="">
[02:36:44.749]        // if-block "isSWJ"
[02:36:44.749]          // =>  TRUE
[02:36:44.749]        <control if="hasDormant" while="" timeout="0" info="">
[02:36:44.749]          // if-block "hasDormant"
[02:36:44.749]            // =>  FALSE
[02:36:44.749]          // skip if-block "hasDormant"
[02:36:44.749]        </control>
[02:36:44.749]        <control if="!hasDormant" while="" timeout="0" info="">
[02:36:44.749]          // if-block "!hasDormant"
[02:36:44.749]            // =>  TRUE
[02:36:44.749]          <block atomic="false" info="">
[02:36:44.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:36:44.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:44.749]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:36:44.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:36:44.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:36:44.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:44.759]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:36:44.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:36:44.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:36:44.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:44.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:36:44.769]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:36:44.769]          </block>
[02:36:44.769]          // end if-block "!hasDormant"
[02:36:44.769]        </control>
[02:36:44.779]        // end if-block "isSWJ"
[02:36:44.779]      </control>
[02:36:44.779]      <control if="!isSWJ" while="" timeout="0" info="">
[02:36:44.779]        // if-block "!isSWJ"
[02:36:44.779]          // =>  FALSE
[02:36:44.779]        // skip if-block "!isSWJ"
[02:36:44.779]      </control>
[02:36:44.779]      <block atomic="false" info="">
[02:36:44.779]        ReadDP(0x0);
[02:36:44.779]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:36:44.779]      </block>
[02:36:44.779]      // end if-block "protType == 2"
[02:36:44.779]    </control>
[02:36:44.779]  </sequence>
[02:36:44.779]  
[02:36:44.799]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:36:44.799]  
[02:36:44.799]  <debugvars>
[02:36:44.799]    // Pre-defined
[02:36:44.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:44.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:44.799]    __dp=0x00000000
[02:36:44.799]    __ap=0x00000000
[02:36:44.799]    __traceout=0x00000000      (Trace Disabled)
[02:36:44.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:44.799]    __FlashAddr=0x00000000
[02:36:44.799]    __FlashLen=0x00000000
[02:36:44.799]    __FlashArg=0x00000000
[02:36:44.799]    __FlashOp=0x00000000
[02:36:44.799]    __Result=0x00000000
[02:36:44.799]  </debugvars>
[02:36:44.799]  
[02:36:44.799]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:36:44.799]    <block atomic="false" info="">
[02:36:44.799]      __var SW_DP_ABORT       = 0x0;
[02:36:44.799]        // -> [SW_DP_ABORT <= 0x00000000]
[02:36:44.799]      __var DP_CTRL_STAT      = 0x4;
[02:36:44.799]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:36:44.799]      __var DP_SELECT         = 0x8;
[02:36:44.799]        // -> [DP_SELECT <= 0x00000008]
[02:36:44.799]      __var powered_down      = 0;
[02:36:44.799]        // -> [powered_down <= 0x00000000]
[02:36:44.799]      WriteDP(DP_SELECT, 0x00000000);
[02:36:44.799]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:36:44.799]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:36:44.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:36:44.809]        // -> [powered_down <= 0x00000001]
[02:36:44.809]    </block>
[02:36:44.809]    <control if="powered_down" while="" timeout="0" info="">
[02:36:44.809]      // if-block "powered_down"
[02:36:44.809]        // =>  TRUE
[02:36:44.809]      <block atomic="false" info="">
[02:36:44.809]        Message(0, "Debug/System power-up request sent");
[02:36:44.809]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:36:44.819]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:36:44.819]      </block>
[02:36:44.819]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:36:44.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.829]        // while-condition  =>  TRUE
[02:36:44.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.829]        // while-condition  =>  TRUE
[02:36:44.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.829]        // while-condition  =>  TRUE
[02:36:44.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.829]        // while-condition  =>  TRUE
[02:36:44.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.839]        // while-condition  =>  TRUE
[02:36:44.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.839]        // while-condition  =>  TRUE
[02:36:44.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.849]        // while-condition  =>  TRUE
[02:36:44.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.849]        // while-condition  =>  TRUE
[02:36:44.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.849]        // while-condition  =>  TRUE
[02:36:44.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.859]        // while-condition  =>  TRUE
[02:36:44.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.859]        // while-condition  =>  TRUE
[02:36:44.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.869]        // while-condition  =>  TRUE
[02:36:44.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.880]        // while-condition  =>  TRUE
[02:36:44.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.880]        // while-condition  =>  TRUE
[02:36:44.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.890]        // while-condition  =>  TRUE
[02:36:44.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.890]        // while-condition  =>  TRUE
[02:36:44.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.900]        // while-condition  =>  TRUE
[02:36:44.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.900]        // while-condition  =>  TRUE
[02:36:44.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.910]        // while-condition  =>  TRUE
[02:36:44.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.910]        // while-condition  =>  TRUE
[02:36:44.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.927]        // while-condition  =>  TRUE
[02:36:44.927]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.930]        // while-condition  =>  TRUE
[02:36:44.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.930]        // while-condition  =>  TRUE
[02:36:44.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.930]        // while-condition  =>  TRUE
[02:36:44.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.930]        // while-condition  =>  TRUE
[02:36:44.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.940]        // while-condition  =>  TRUE
[02:36:44.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.940]        // while-condition  =>  TRUE
[02:36:44.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.940]        // while-condition  =>  TRUE
[02:36:44.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.940]        // while-condition  =>  TRUE
[02:36:44.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.950]        // while-condition  =>  TRUE
[02:36:44.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.960]        // while-condition  =>  TRUE
[02:36:44.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.960]        // while-condition  =>  TRUE
[02:36:44.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.960]        // while-condition  =>  TRUE
[02:36:44.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.960]        // while-condition  =>  TRUE
[02:36:44.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.970]        // while-condition  =>  TRUE
[02:36:44.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.970]        // while-condition  =>  TRUE
[02:36:44.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.980]        // while-condition  =>  TRUE
[02:36:44.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.980]        // while-condition  =>  TRUE
[02:36:44.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.980]        // while-condition  =>  TRUE
[02:36:44.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:44.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:44.990]        // while-condition  =>  TRUE
[02:36:44.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.000]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.000]        // while-condition  =>  TRUE
[02:36:45.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.010]        // while-condition  =>  TRUE
[02:36:45.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.010]        // while-condition  =>  TRUE
[02:36:45.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.020]        // while-condition  =>  TRUE
[02:36:45.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.030]        // while-condition  =>  TRUE
[02:36:45.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.030]        // while-condition  =>  TRUE
[02:36:45.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.030]        // while-condition  =>  TRUE
[02:36:45.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.040]        // while-condition  =>  TRUE
[02:36:45.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.040]        // while-condition  =>  TRUE
[02:36:45.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.040]        // while-condition  =>  TRUE
[02:36:45.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.050]        // while-condition  =>  TRUE
[02:36:45.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.050]        // while-condition  =>  TRUE
[02:36:45.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.050]        // while-condition  =>  TRUE
[02:36:45.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.060]        // while-condition  =>  TRUE
[02:36:45.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.060]        // while-condition  =>  TRUE
[02:36:45.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.070]        // while-condition  =>  TRUE
[02:36:45.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.070]        // while-condition  =>  TRUE
[02:36:45.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.070]        // while-condition  =>  TRUE
[02:36:45.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.070]        // while-condition  =>  TRUE
[02:36:45.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.070]        // while-condition  =>  TRUE
[02:36:45.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.080]        // while-condition  =>  TRUE
[02:36:45.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.080]        // while-condition  =>  TRUE
[02:36:45.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.090]        // while-condition  =>  TRUE
[02:36:45.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.100]        // while-condition  =>  TRUE
[02:36:45.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.100]        // while-condition  =>  TRUE
[02:36:45.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.110]        // while-condition  =>  TRUE
[02:36:45.110]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.120]        // while-condition  =>  TRUE
[02:36:45.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.130]        // while-condition  =>  TRUE
[02:36:45.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.130]        // while-condition  =>  TRUE
[02:36:45.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.140]        // while-condition  =>  TRUE
[02:36:45.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.140]        // while-condition  =>  TRUE
[02:36:45.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.150]        // while-condition  =>  TRUE
[02:36:45.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.150]        // while-condition  =>  TRUE
[02:36:45.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.150]        // while-condition  =>  TRUE
[02:36:45.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.150]        // while-condition  =>  TRUE
[02:36:45.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.150]        // while-condition  =>  TRUE
[02:36:45.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.160]        // while-condition  =>  TRUE
[02:36:45.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.170]        // while-condition  =>  TRUE
[02:36:45.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.170]        // while-condition  =>  TRUE
[02:36:45.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.170]        // while-condition  =>  TRUE
[02:36:45.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.186]        // while-condition  =>  TRUE
[02:36:45.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.190]        // while-condition  =>  TRUE
[02:36:45.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.190]        // while-condition  =>  TRUE
[02:36:45.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.200]        // while-condition  =>  TRUE
[02:36:45.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.203]        // while-condition  =>  TRUE
[02:36:45.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.210]        // while-condition  =>  TRUE
[02:36:45.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.219]        // while-condition  =>  TRUE
[02:36:45.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.227]        // while-condition  =>  TRUE
[02:36:45.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.230]        // while-condition  =>  TRUE
[02:36:45.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.236]        // while-condition  =>  TRUE
[02:36:45.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.240]        // while-condition  =>  TRUE
[02:36:45.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.240]        // while-condition  =>  TRUE
[02:36:45.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.240]        // while-condition  =>  TRUE
[02:36:45.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.240]        // while-condition  =>  TRUE
[02:36:45.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.250]        // while-condition  =>  TRUE
[02:36:45.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.250]        // while-condition  =>  TRUE
[02:36:45.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.250]        // while-condition  =>  TRUE
[02:36:45.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.260]        // while-condition  =>  TRUE
[02:36:45.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.260]        // while-condition  =>  TRUE
[02:36:45.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.270]        // while-condition  =>  TRUE
[02:36:45.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.270]        // while-condition  =>  TRUE
[02:36:45.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.270]        // while-condition  =>  TRUE
[02:36:45.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.270]        // while-condition  =>  TRUE
[02:36:45.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.280]        // while-condition  =>  TRUE
[02:36:45.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.280]        // while-condition  =>  TRUE
[02:36:45.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.280]        // while-condition  =>  TRUE
[02:36:45.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.290]        // while-condition  =>  TRUE
[02:36:45.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.290]        // while-condition  =>  TRUE
[02:36:45.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.300]        // while-condition  =>  TRUE
[02:36:45.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.300]        // while-condition  =>  TRUE
[02:36:45.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.310]        // while-condition  =>  TRUE
[02:36:45.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.310]        // while-condition  =>  TRUE
[02:36:45.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.320]        // while-condition  =>  TRUE
[02:36:45.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.330]        // while-condition  =>  TRUE
[02:36:45.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.330]        // while-condition  =>  TRUE
[02:36:45.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.330]        // while-condition  =>  TRUE
[02:36:45.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.340]        // while-condition  =>  TRUE
[02:36:45.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.340]        // while-condition  =>  TRUE
[02:36:45.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.350]        // while-condition  =>  TRUE
[02:36:45.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.350]        // while-condition  =>  TRUE
[02:36:45.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.370]        // while-condition  =>  TRUE
[02:36:45.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.380]        // while-condition  =>  TRUE
[02:36:45.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.380]        // while-condition  =>  TRUE
[02:36:45.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.380]        // while-condition  =>  TRUE
[02:36:45.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.390]        // while-condition  =>  TRUE
[02:36:45.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.390]        // while-condition  =>  TRUE
[02:36:45.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.400]        // while-condition  =>  TRUE
[02:36:45.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.400]        // while-condition  =>  TRUE
[02:36:45.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.410]        // while-condition  =>  TRUE
[02:36:45.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.420]        // while-condition  =>  TRUE
[02:36:45.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.420]        // while-condition  =>  TRUE
[02:36:45.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.420]        // while-condition  =>  TRUE
[02:36:45.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.428]        // while-condition  =>  TRUE
[02:36:45.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.430]        // while-condition  =>  TRUE
[02:36:45.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.430]        // while-condition  =>  TRUE
[02:36:45.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.440]        // while-condition  =>  TRUE
[02:36:45.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.440]        // while-condition  =>  TRUE
[02:36:45.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.450]        // while-condition  =>  TRUE
[02:36:45.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.450]        // while-condition  =>  TRUE
[02:36:45.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.460]        // while-condition  =>  TRUE
[02:36:45.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.460]        // while-condition  =>  TRUE
[02:36:45.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.460]        // while-condition  =>  TRUE
[02:36:45.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.470]        // while-condition  =>  TRUE
[02:36:45.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.470]        // while-condition  =>  TRUE
[02:36:45.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.470]        // while-condition  =>  TRUE
[02:36:45.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.470]        // while-condition  =>  TRUE
[02:36:45.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.480]        // while-condition  =>  TRUE
[02:36:45.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.480]        // while-condition  =>  TRUE
[02:36:45.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.490]        // while-condition  =>  TRUE
[02:36:45.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.490]        // while-condition  =>  TRUE
[02:36:45.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.500]        // while-condition  =>  TRUE
[02:36:45.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.500]        // while-condition  =>  TRUE
[02:36:45.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.520]        // while-condition  =>  TRUE
[02:36:45.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.520]        // while-condition  =>  TRUE
[02:36:45.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.528]        // while-condition  =>  TRUE
[02:36:45.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.530]        // while-condition  =>  TRUE
[02:36:45.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.530]        // while-condition  =>  TRUE
[02:36:45.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.540]        // while-condition  =>  TRUE
[02:36:45.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.540]        // while-condition  =>  TRUE
[02:36:45.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.550]        // while-condition  =>  TRUE
[02:36:45.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.550]        // while-condition  =>  TRUE
[02:36:45.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.550]        // while-condition  =>  TRUE
[02:36:45.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.550]        // while-condition  =>  TRUE
[02:36:45.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.560]        // while-condition  =>  TRUE
[02:36:45.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.560]        // while-condition  =>  TRUE
[02:36:45.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.570]        // while-condition  =>  TRUE
[02:36:45.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.570]        // while-condition  =>  TRUE
[02:36:45.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.580]        // while-condition  =>  TRUE
[02:36:45.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.580]        // while-condition  =>  TRUE
[02:36:45.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.580]        // while-condition  =>  TRUE
[02:36:45.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.590]        // while-condition  =>  TRUE
[02:36:45.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.590]        // while-condition  =>  TRUE
[02:36:45.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.600]        // while-condition  =>  TRUE
[02:36:45.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.600]        // while-condition  =>  TRUE
[02:36:45.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.600]        // while-condition  =>  TRUE
[02:36:45.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.610]        // while-condition  =>  TRUE
[02:36:45.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.610]        // while-condition  =>  TRUE
[02:36:45.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.610]        // while-condition  =>  TRUE
[02:36:45.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.620]        // while-condition  =>  TRUE
[02:36:45.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.630]        // while-condition  =>  TRUE
[02:36:45.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.630]        // while-condition  =>  TRUE
[02:36:45.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.640]        // while-condition  =>  TRUE
[02:36:45.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.640]        // while-condition  =>  TRUE
[02:36:45.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.640]        // while-condition  =>  TRUE
[02:36:45.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.650]        // while-condition  =>  TRUE
[02:36:45.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.650]        // while-condition  =>  TRUE
[02:36:45.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.650]        // while-condition  =>  TRUE
[02:36:45.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.660]        // while-condition  =>  TRUE
[02:36:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.660]        // while-condition  =>  TRUE
[02:36:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.660]        // while-condition  =>  TRUE
[02:36:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.660]        // while-condition  =>  TRUE
[02:36:45.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.670]        // while-condition  =>  TRUE
[02:36:45.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.670]        // while-condition  =>  TRUE
[02:36:45.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.680]        // while-condition  =>  TRUE
[02:36:45.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.680]        // while-condition  =>  TRUE
[02:36:45.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.690]        // while-condition  =>  TRUE
[02:36:45.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.700]        // while-condition  =>  TRUE
[02:36:45.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.700]        // while-condition  =>  TRUE
[02:36:45.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.700]        // while-condition  =>  TRUE
[02:36:45.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.710]        // while-condition  =>  TRUE
[02:36:45.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.710]        // while-condition  =>  TRUE
[02:36:45.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.710]        // while-condition  =>  TRUE
[02:36:45.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.720]        // while-condition  =>  TRUE
[02:36:45.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.728]        // while-condition  =>  TRUE
[02:36:45.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.730]        // while-condition  =>  TRUE
[02:36:45.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.740]        // while-condition  =>  TRUE
[02:36:45.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.740]        // while-condition  =>  TRUE
[02:36:45.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.750]        // while-condition  =>  TRUE
[02:36:45.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.750]        // while-condition  =>  TRUE
[02:36:45.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.760]        // while-condition  =>  TRUE
[02:36:45.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.760]        // while-condition  =>  TRUE
[02:36:45.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.770]        // while-condition  =>  TRUE
[02:36:45.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.770]        // while-condition  =>  TRUE
[02:36:45.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.780]        // while-condition  =>  TRUE
[02:36:45.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.780]        // while-condition  =>  TRUE
[02:36:45.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.780]        // while-condition  =>  TRUE
[02:36:45.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.790]        // while-condition  =>  TRUE
[02:36:45.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.800]        // while-condition  =>  TRUE
[02:36:45.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.800]        // while-condition  =>  TRUE
[02:36:45.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.810]        // while-condition  =>  TRUE
[02:36:45.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:36:45.820]        // while-condition  =>  TRUE
[02:36:45.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:45.828]        // while  =>  TIMEOUT
[02:36:45.828]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:36:45.828]      </control>
[02:36:45.828]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:36:45.828]        // if-block "(__protocol & 0xFFFF) == 1"
[02:36:45.828]          // =>  FALSE
[02:36:45.828]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:36:45.828]      </control>
[02:36:45.828]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:36:45.828]        // if-block "(__protocol & 0xFFFF) == 2"
[02:36:45.828]          // =>  TRUE
[02:36:45.828]        <block atomic="false" info="">
[02:36:45.830]          Message(0, "executing SWD power up");
[02:36:45.830]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:36:45.830]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:36:45.830]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:36:45.830]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:36:45.830]        </block>
[02:36:45.830]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:36:45.830]      </control>
[02:36:45.830]      // end if-block "powered_down"
[02:36:45.830]    </control>
[02:36:45.830]    <block atomic="false" info="">
[02:36:45.830]      __var DEBUG_PORT_VAL    = 0;
[02:36:45.830]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:36:45.840]      __var ACCESS_POINT_VAL  = 0;
[02:36:45.840]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:36:45.840]      __ap = 1; 
[02:36:45.840]        // -> [__ap <= 0x00000001]
[02:36:45.840]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:36:45.860]  
[02:36:45.860]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[02:36:45.860]  
[02:36:45.860]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:36:45.860]    </block>
[02:36:45.860]  </sequence>
[02:36:45.860]  
[02:36:55.535]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:36:55.535]  
[02:36:55.544]  <debugvars>
[02:36:55.544]    // Pre-defined
[02:36:55.544]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:55.544]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:55.544]    __dp=0x00000000
[02:36:55.544]    __ap=0x00000000
[02:36:55.544]    __traceout=0x00000000      (Trace Disabled)
[02:36:55.544]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:55.544]    __FlashAddr=0x00000000
[02:36:55.544]    __FlashLen=0x00000000
[02:36:55.544]    __FlashArg=0x00000000
[02:36:55.544]    __FlashOp=0x00000000
[02:36:55.544]    __Result=0x00000000
[02:36:55.544]  </debugvars>
[02:36:55.544]  
[02:36:55.544]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:36:55.544]    <block atomic="false" info="">
[02:36:55.544]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:36:55.544]        // -> [isSWJ <= 0x00000001]
[02:36:55.544]      __var hasDormant = __protocol & 0x00020000;
[02:36:55.544]        // -> [hasDormant <= 0x00000000]
[02:36:55.544]      __var protType   = __protocol & 0x0000FFFF;
[02:36:55.544]        // -> [protType <= 0x00000002]
[02:36:55.544]    </block>
[02:36:55.544]    <control if="protType == 1" while="" timeout="0" info="">
[02:36:55.544]      // if-block "protType == 1"
[02:36:55.544]        // =>  FALSE
[02:36:55.544]      // skip if-block "protType == 1"
[02:36:55.544]    </control>
[02:36:55.544]    <control if="protType == 2" while="" timeout="0" info="">
[02:36:55.544]      // if-block "protType == 2"
[02:36:55.549]        // =>  TRUE
[02:36:55.549]      <control if="isSWJ" while="" timeout="0" info="">
[02:36:55.549]        // if-block "isSWJ"
[02:36:55.549]          // =>  TRUE
[02:36:55.549]        <control if="hasDormant" while="" timeout="0" info="">
[02:36:55.549]          // if-block "hasDormant"
[02:36:55.549]            // =>  FALSE
[02:36:55.549]          // skip if-block "hasDormant"
[02:36:55.549]        </control>
[02:36:55.549]        <control if="!hasDormant" while="" timeout="0" info="">
[02:36:55.549]          // if-block "!hasDormant"
[02:36:55.549]            // =>  TRUE
[02:36:55.549]          <block atomic="false" info="">
[02:36:55.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:36:55.549]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:55.549]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:36:55.549]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:36:55.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:36:55.549]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:55.549]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:36:55.559]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:36:55.559]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:36:55.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:36:55.559]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:36:55.559]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:36:55.559]          </block>
[02:36:55.559]          // end if-block "!hasDormant"
[02:36:55.559]        </control>
[02:36:55.559]        // end if-block "isSWJ"
[02:36:55.559]      </control>
[02:36:55.559]      <control if="!isSWJ" while="" timeout="0" info="">
[02:36:55.559]        // if-block "!isSWJ"
[02:36:55.559]          // =>  FALSE
[02:36:55.559]        // skip if-block "!isSWJ"
[02:36:55.559]      </control>
[02:36:55.559]      <block atomic="false" info="">
[02:36:55.559]        ReadDP(0x0);
[02:36:55.559]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:36:55.559]      </block>
[02:36:55.559]      // end if-block "protType == 2"
[02:36:55.559]    </control>
[02:36:55.559]  </sequence>
[02:36:55.559]  
[02:36:55.569]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:36:55.569]  
[02:36:55.569]  <debugvars>
[02:36:55.579]    // Pre-defined
[02:36:55.579]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:55.579]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:55.579]    __dp=0x00000000
[02:36:55.579]    __ap=0x00000000
[02:36:55.579]    __traceout=0x00000000      (Trace Disabled)
[02:36:55.579]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:55.579]    __FlashAddr=0x00000000
[02:36:55.579]    __FlashLen=0x00000000
[02:36:55.579]    __FlashArg=0x00000000
[02:36:55.579]    __FlashOp=0x00000000
[02:36:55.579]    __Result=0x00000000
[02:36:55.579]  </debugvars>
[02:36:55.579]  
[02:36:55.579]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:36:55.579]    <block atomic="false" info="">
[02:36:55.579]      __var SW_DP_ABORT       = 0x0;
[02:36:55.579]        // -> [SW_DP_ABORT <= 0x00000000]
[02:36:55.579]      __var DP_CTRL_STAT      = 0x4;
[02:36:55.579]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:36:55.579]      __var DP_SELECT         = 0x8;
[02:36:55.579]        // -> [DP_SELECT <= 0x00000008]
[02:36:55.579]      __var powered_down      = 0;
[02:36:55.579]        // -> [powered_down <= 0x00000000]
[02:36:55.579]      WriteDP(DP_SELECT, 0x00000000);
[02:36:55.589]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:36:55.589]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:36:55.589]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:36:55.589]        // -> [powered_down <= 0x00000001]
[02:36:55.589]    </block>
[02:36:55.589]    <control if="powered_down" while="" timeout="0" info="">
[02:36:55.589]      // if-block "powered_down"
[02:36:55.589]        // =>  TRUE
[02:36:55.589]      <block atomic="false" info="">
[02:36:55.589]        Message(0, "Debug/System power-up request sent");
[02:36:55.589]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:36:55.599]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:36:55.599]      </block>
[02:36:55.599]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:36:55.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:36:55.599]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:36:55.599]        // while-condition  =>  FALSE
[02:36:55.599]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:36:55.599]      </control>
[02:36:55.599]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:36:55.599]        // if-block "(__protocol & 0xFFFF) == 1"
[02:36:55.599]          // =>  FALSE
[02:36:55.599]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:36:55.599]      </control>
[02:36:55.599]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:36:55.599]        // if-block "(__protocol & 0xFFFF) == 2"
[02:36:55.599]          // =>  TRUE
[02:36:55.599]        <block atomic="false" info="">
[02:36:55.599]          Message(0, "executing SWD power up");
[02:36:55.599]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:36:55.599]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:36:55.599]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:36:55.609]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:36:55.609]        </block>
[02:36:55.609]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:36:55.609]      </control>
[02:36:55.609]      // end if-block "powered_down"
[02:36:55.609]    </control>
[02:36:55.609]    <block atomic="false" info="">
[02:36:55.609]      __var DEBUG_PORT_VAL    = 0;
[02:36:55.609]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:36:55.609]      __var ACCESS_POINT_VAL  = 0;
[02:36:55.609]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:36:55.609]      __ap = 1; 
[02:36:55.609]        // -> [__ap <= 0x00000001]
[02:36:55.609]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:36:55.619]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:36:55.619]      __ap = 4;
[02:36:55.619]        // -> [__ap <= 0x00000004]
[02:36:55.619]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:36:55.619]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:36:55.619]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:36:55.619]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:36:55.619]    </block>
[02:36:55.619]    <block atomic="false" info="">
[02:36:55.619]      __var nReset = 0x80;
[02:36:55.619]        // -> [nReset <= 0x00000080]
[02:36:55.619]      __var canReadPins = 0;
[02:36:55.619]        // -> [canReadPins <= 0x00000000]
[02:36:55.619]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:36:55.629]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:36:55.629]        // -> [canReadPins <= 0x00000001]
[02:36:55.629]    </block>
[02:36:55.629]    <control if="" while="1" timeout="200" info="">
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.629]      // while "1"  (timeout="200")
[02:36:55.629]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.639]      // while-condition  =>  TRUE
[02:36:55.639]      // while "1"  (timeout="200")
[02:36:55.649]      // while-condition  =>  TRUE
[02:36:55.649]      // while "1"  (timeout="200")
[02:36:55.649]      // while  =>  TIMEOUT
[02:36:55.649]      // end while "1"
[02:36:55.649]    </control>
[02:36:55.649]    <control if="canReadPins" while="" timeout="0" info="">
[02:36:55.649]      // if-block "canReadPins"
[02:36:55.649]        // =>  TRUE
[02:36:55.649]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:36:55.649]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:36:55.649]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:36:55.649]        // while-condition  =>  FALSE
[02:36:55.649]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:36:55.649]      </control>
[02:36:55.649]      // end if-block "canReadPins"
[02:36:55.649]    </control>
[02:36:55.649]    <control if="!canReadPins" while="" timeout="0" info="">
[02:36:55.649]      // if-block "!canReadPins"
[02:36:55.649]        // =>  FALSE
[02:36:55.649]      // skip if-block "!canReadPins"
[02:36:55.649]    </control>
[02:36:55.649]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:36:55.649]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:36:55.649]        // =>  TRUE
[02:36:55.649]      <block atomic="false" info="">
[02:36:55.649]        WriteAP(0x00, 0x190008);
[02:36:55.649]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:36:55.649]        WriteAP(0xF0, 0x01);
[02:36:55.659]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:36:55.659]      </block>
[02:36:55.659]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:36:55.659]    </control>
[02:36:55.659]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:36:55.659]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:36:55.659]        // =>  FALSE
[02:36:55.659]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:36:55.659]    </control>
[02:36:55.659]    <block atomic="false" info="">
[02:36:55.659]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:36:55.669]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:36:55.669]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:36:55.669]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:36:55.669]      __ap = 0; //lets make sure we reset the access point selection
[02:36:55.669]        // -> [__ap <= 0x00000000]
[02:36:55.669]    </block>
[02:36:55.669]  </sequence>
[02:36:55.669]  
[02:36:55.694]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:36:55.694]  
[02:36:55.694]  <debugvars>
[02:36:55.694]    // Pre-defined
[02:36:55.694]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:36:55.694]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:36:55.694]    __dp=0x00000000
[02:36:55.694]    __ap=0x00000000
[02:36:55.694]    __traceout=0x00000000      (Trace Disabled)
[02:36:55.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:36:55.699]    __FlashAddr=0x00000000
[02:36:55.699]    __FlashLen=0x00000000
[02:36:55.699]    __FlashArg=0x00000000
[02:36:55.699]    __FlashOp=0x00000000
[02:36:55.699]    __Result=0x00000000
[02:36:55.699]  </debugvars>
[02:36:55.699]  
[02:36:55.699]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:36:55.699]    <block atomic="false" info="">
[02:36:55.699]      __var deviceID = 0;
[02:36:55.699]        // -> [deviceID <= 0x00000000]
[02:36:55.699]      __var version = 0;
[02:36:55.699]        // -> [version <= 0x00000000]
[02:36:55.699]      __var partNum = 0;
[02:36:55.699]        // -> [partNum <= 0x00000000]
[02:36:55.699]      __var manuf = 0;
[02:36:55.699]        // -> [manuf <= 0x00000000]
[02:36:55.699]      __var isMSPM0G1X0X_G3X0X = 0;
[02:36:55.699]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:36:55.699]      __var isProduction = 0;
[02:36:55.699]        // -> [isProduction <= 0x00000000]
[02:36:55.699]      __var continueId = 0;
[02:36:55.699]        // -> [continueId <= 0x00000000]
[02:36:55.699]      deviceID =   Read32(0x41C40004);
[02:36:55.709]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:36:55.709]        // -> [deviceID <= 0x2BB8802F]
[02:36:55.709]      version = deviceID >> 28;
[02:36:55.709]        // -> [version <= 0x00000002]
[02:36:55.709]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:36:55.709]        // -> [partNum <= 0x0000BB88]
[02:36:55.709]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:36:55.709]        // -> [manuf <= 0x00000017]
[02:36:55.709]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:36:55.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:36:55.709]      isProduction = (version > 0);
[02:36:55.709]        // -> [isProduction <= 0x00000001]
[02:36:55.709]    </block>
[02:36:55.709]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:36:55.709]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:36:55.709]        // =>  FALSE
[02:36:55.709]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:36:55.709]    </control>
[02:36:55.709]    <control if="continueId == 4" while="" timeout="0" info="">
[02:36:55.709]      // if-block "continueId == 4"
[02:36:55.709]        // =>  FALSE
[02:36:55.709]      // skip if-block "continueId == 4"
[02:36:55.709]    </control>
[02:36:55.709]    <control if="!isProduction" while="" timeout="0" info="">
[02:36:55.709]      // if-block "!isProduction"
[02:36:55.709]        // =>  FALSE
[02:36:55.709]      // skip if-block "!isProduction"
[02:36:55.709]    </control>
[02:36:55.709]  </sequence>
[02:36:55.709]  
[02:39:17.722]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:39:17.722]  
[02:39:17.736]  <debugvars>
[02:39:17.736]    // Pre-defined
[02:39:17.736]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:17.736]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:17.736]    __dp=0x00000000
[02:39:17.736]    __ap=0x00000000
[02:39:17.736]    __traceout=0x00000000      (Trace Disabled)
[02:39:17.736]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:17.736]    __FlashAddr=0x00000000
[02:39:17.736]    __FlashLen=0x00000000
[02:39:17.736]    __FlashArg=0x00000000
[02:39:17.736]    __FlashOp=0x00000000
[02:39:17.736]    __Result=0x00000000
[02:39:17.736]  </debugvars>
[02:39:17.736]  
[02:39:17.736]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:39:17.736]    <block atomic="false" info="">
[02:39:17.736]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:39:17.736]        // -> [isSWJ <= 0x00000001]
[02:39:17.736]      __var hasDormant = __protocol & 0x00020000;
[02:39:17.736]        // -> [hasDormant <= 0x00000000]
[02:39:17.736]      __var protType   = __protocol & 0x0000FFFF;
[02:39:17.736]        // -> [protType <= 0x00000002]
[02:39:17.736]    </block>
[02:39:17.736]    <control if="protType == 1" while="" timeout="0" info="">
[02:39:17.736]      // if-block "protType == 1"
[02:39:17.736]        // =>  FALSE
[02:39:17.736]      // skip if-block "protType == 1"
[02:39:17.736]    </control>
[02:39:17.736]    <control if="protType == 2" while="" timeout="0" info="">
[02:39:17.736]      // if-block "protType == 2"
[02:39:17.736]        // =>  TRUE
[02:39:17.736]      <control if="isSWJ" while="" timeout="0" info="">
[02:39:17.736]        // if-block "isSWJ"
[02:39:17.736]          // =>  TRUE
[02:39:17.736]        <control if="hasDormant" while="" timeout="0" info="">
[02:39:17.736]          // if-block "hasDormant"
[02:39:17.736]            // =>  FALSE
[02:39:17.736]          // skip if-block "hasDormant"
[02:39:17.736]        </control>
[02:39:17.736]        <control if="!hasDormant" while="" timeout="0" info="">
[02:39:17.736]          // if-block "!hasDormant"
[02:39:17.736]            // =>  TRUE
[02:39:17.743]          <block atomic="false" info="">
[02:39:17.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:39:17.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:17.743]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:39:17.743]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:39:17.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:39:17.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:17.743]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:39:17.743]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:39:17.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:39:17.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:17.753]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:39:17.753]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:39:17.753]          </block>
[02:39:17.753]          // end if-block "!hasDormant"
[02:39:17.753]        </control>
[02:39:17.753]        // end if-block "isSWJ"
[02:39:17.753]      </control>
[02:39:17.753]      <control if="!isSWJ" while="" timeout="0" info="">
[02:39:17.753]        // if-block "!isSWJ"
[02:39:17.763]          // =>  FALSE
[02:39:17.763]        // skip if-block "!isSWJ"
[02:39:17.763]      </control>
[02:39:17.763]      <block atomic="false" info="">
[02:39:17.763]        ReadDP(0x0);
[02:39:17.763]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:39:17.763]      </block>
[02:39:17.763]      // end if-block "protType == 2"
[02:39:17.763]    </control>
[02:39:17.763]  </sequence>
[02:39:17.763]  
[02:39:17.773]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:39:17.773]  
[02:39:17.773]  <debugvars>
[02:39:17.773]    // Pre-defined
[02:39:17.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:17.773]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:17.773]    __dp=0x00000000
[02:39:17.773]    __ap=0x00000000
[02:39:17.773]    __traceout=0x00000000      (Trace Disabled)
[02:39:17.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:17.773]    __FlashAddr=0x00000000
[02:39:17.773]    __FlashLen=0x00000000
[02:39:17.773]    __FlashArg=0x00000000
[02:39:17.773]    __FlashOp=0x00000000
[02:39:17.773]    __Result=0x00000000
[02:39:17.773]  </debugvars>
[02:39:17.773]  
[02:39:17.773]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:39:17.773]    <block atomic="false" info="">
[02:39:17.773]      __var SW_DP_ABORT       = 0x0;
[02:39:17.773]        // -> [SW_DP_ABORT <= 0x00000000]
[02:39:17.773]      __var DP_CTRL_STAT      = 0x4;
[02:39:17.773]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:39:17.773]      __var DP_SELECT         = 0x8;
[02:39:17.773]        // -> [DP_SELECT <= 0x00000008]
[02:39:17.773]      __var powered_down      = 0;
[02:39:17.773]        // -> [powered_down <= 0x00000000]
[02:39:17.773]      WriteDP(DP_SELECT, 0x00000000);
[02:39:17.773]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:39:17.773]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:39:17.773]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:39:17.783]        // -> [powered_down <= 0x00000001]
[02:39:17.783]    </block>
[02:39:17.783]    <control if="powered_down" while="" timeout="0" info="">
[02:39:17.783]      // if-block "powered_down"
[02:39:17.783]        // =>  TRUE
[02:39:17.783]      <block atomic="false" info="">
[02:39:17.783]        Message(0, "Debug/System power-up request sent");
[02:39:17.783]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:39:17.783]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:39:17.783]      </block>
[02:39:17.783]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:39:17.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:39:17.791]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:39:17.791]        // while-condition  =>  FALSE
[02:39:17.793]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:39:17.793]      </control>
[02:39:17.793]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:39:17.793]        // if-block "(__protocol & 0xFFFF) == 1"
[02:39:17.793]          // =>  FALSE
[02:39:17.793]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:39:17.793]      </control>
[02:39:17.793]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:39:17.793]        // if-block "(__protocol & 0xFFFF) == 2"
[02:39:17.793]          // =>  TRUE
[02:39:17.793]        <block atomic="false" info="">
[02:39:17.793]          Message(0, "executing SWD power up");
[02:39:17.793]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:39:17.793]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:39:17.793]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:39:17.803]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:39:17.803]        </block>
[02:39:17.803]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:39:17.803]      </control>
[02:39:17.803]      // end if-block "powered_down"
[02:39:17.803]    </control>
[02:39:17.803]    <block atomic="false" info="">
[02:39:17.803]      __var DEBUG_PORT_VAL    = 0;
[02:39:17.803]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:39:17.803]      __var ACCESS_POINT_VAL  = 0;
[02:39:17.803]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:39:17.803]      __ap = 1; 
[02:39:17.803]        // -> [__ap <= 0x00000001]
[02:39:17.803]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:39:17.803]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:39:17.803]      __ap = 4;
[02:39:17.803]        // -> [__ap <= 0x00000004]
[02:39:17.803]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:39:17.813]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:39:17.813]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:39:17.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:39:17.813]    </block>
[02:39:17.813]    <block atomic="false" info="">
[02:39:17.813]      __var nReset = 0x80;
[02:39:17.813]        // -> [nReset <= 0x00000080]
[02:39:17.813]      __var canReadPins = 0;
[02:39:17.813]        // -> [canReadPins <= 0x00000000]
[02:39:17.813]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:39:17.823]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:39:17.823]        // -> [canReadPins <= 0x00000001]
[02:39:17.823]    </block>
[02:39:17.823]    <control if="" while="1" timeout="200" info="">
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.823]      // while "1"  (timeout="200")
[02:39:17.823]      // while-condition  =>  TRUE
[02:39:17.833]      // while "1"  (timeout="200")
[02:39:17.833]      // while  =>  TIMEOUT
[02:39:17.833]      // end while "1"
[02:39:17.833]    </control>
[02:39:17.833]    <control if="canReadPins" while="" timeout="0" info="">
[02:39:17.833]      // if-block "canReadPins"
[02:39:17.833]        // =>  TRUE
[02:39:17.833]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:39:17.833]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:39:17.833]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:39:17.833]        // while-condition  =>  FALSE
[02:39:17.833]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:39:17.833]      </control>
[02:39:17.833]      // end if-block "canReadPins"
[02:39:17.833]    </control>
[02:39:17.833]    <control if="!canReadPins" while="" timeout="0" info="">
[02:39:17.833]      // if-block "!canReadPins"
[02:39:17.833]        // =>  FALSE
[02:39:17.833]      // skip if-block "!canReadPins"
[02:39:17.833]    </control>
[02:39:17.833]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:39:17.833]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:39:17.833]        // =>  TRUE
[02:39:17.833]      <block atomic="false" info="">
[02:39:17.833]        WriteAP(0x00, 0x190008);
[02:39:17.833]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:39:17.833]        WriteAP(0xF0, 0x01);
[02:39:17.853]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:39:17.853]      </block>
[02:39:17.853]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:39:17.853]    </control>
[02:39:17.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:39:17.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:39:17.853]        // =>  FALSE
[02:39:17.853]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:39:17.853]    </control>
[02:39:17.853]    <block atomic="false" info="">
[02:39:17.853]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:39:17.863]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:39:17.863]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:39:17.863]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:39:17.863]      __ap = 0; //lets make sure we reset the access point selection
[02:39:17.863]        // -> [__ap <= 0x00000000]
[02:39:17.863]    </block>
[02:39:17.863]  </sequence>
[02:39:17.863]  
[02:39:17.903]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:39:17.903]  
[02:39:17.903]  <debugvars>
[02:39:17.903]    // Pre-defined
[02:39:17.903]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:17.903]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:17.903]    __dp=0x00000000
[02:39:17.903]    __ap=0x00000000
[02:39:17.903]    __traceout=0x00000000      (Trace Disabled)
[02:39:17.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:17.903]    __FlashAddr=0x00000000
[02:39:17.903]    __FlashLen=0x00000000
[02:39:17.903]    __FlashArg=0x00000000
[02:39:17.903]    __FlashOp=0x00000000
[02:39:17.903]    __Result=0x00000000
[02:39:17.903]  </debugvars>
[02:39:17.903]  
[02:39:17.903]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:39:17.903]    <block atomic="false" info="">
[02:39:17.903]      __var deviceID = 0;
[02:39:17.903]        // -> [deviceID <= 0x00000000]
[02:39:17.903]      __var version = 0;
[02:39:17.903]        // -> [version <= 0x00000000]
[02:39:17.903]      __var partNum = 0;
[02:39:17.903]        // -> [partNum <= 0x00000000]
[02:39:17.903]      __var manuf = 0;
[02:39:17.903]        // -> [manuf <= 0x00000000]
[02:39:17.903]      __var isMSPM0G1X0X_G3X0X = 0;
[02:39:17.903]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:39:17.903]      __var isProduction = 0;
[02:39:17.903]        // -> [isProduction <= 0x00000000]
[02:39:17.903]      __var continueId = 0;
[02:39:17.903]        // -> [continueId <= 0x00000000]
[02:39:17.903]      deviceID =   Read32(0x41C40004);
[02:39:17.913]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:39:17.913]        // -> [deviceID <= 0x2BB8802F]
[02:39:17.913]      version = deviceID >> 28;
[02:39:17.913]        // -> [version <= 0x00000002]
[02:39:17.913]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:39:17.913]        // -> [partNum <= 0x0000BB88]
[02:39:17.913]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:39:17.913]        // -> [manuf <= 0x00000017]
[02:39:17.913]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:39:17.923]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:39:17.923]      isProduction = (version > 0);
[02:39:17.923]        // -> [isProduction <= 0x00000001]
[02:39:17.923]    </block>
[02:39:17.923]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:39:17.923]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:39:17.923]        // =>  FALSE
[02:39:17.923]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:39:17.923]    </control>
[02:39:17.923]    <control if="continueId == 4" while="" timeout="0" info="">
[02:39:17.923]      // if-block "continueId == 4"
[02:39:17.923]        // =>  FALSE
[02:39:17.923]      // skip if-block "continueId == 4"
[02:39:17.923]    </control>
[02:39:17.923]    <control if="!isProduction" while="" timeout="0" info="">
[02:39:17.923]      // if-block "!isProduction"
[02:39:17.923]        // =>  FALSE
[02:39:17.923]      // skip if-block "!isProduction"
[02:39:17.923]    </control>
[02:39:17.923]  </sequence>
[02:39:17.923]  
[02:39:54.021]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:39:54.031]  
[02:39:54.031]  <debugvars>
[02:39:54.031]    // Pre-defined
[02:39:54.031]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:54.031]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:54.031]    __dp=0x00000000
[02:39:54.031]    __ap=0x00000000
[02:39:54.031]    __traceout=0x00000000      (Trace Disabled)
[02:39:54.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:54.031]    __FlashAddr=0x00000000
[02:39:54.031]    __FlashLen=0x00000000
[02:39:54.031]    __FlashArg=0x00000000
[02:39:54.031]    __FlashOp=0x00000000
[02:39:54.031]    __Result=0x00000000
[02:39:54.031]  </debugvars>
[02:39:54.031]  
[02:39:54.031]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:39:54.031]    <block atomic="false" info="">
[02:39:54.031]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:39:54.031]        // -> [isSWJ <= 0x00000001]
[02:39:54.031]      __var hasDormant = __protocol & 0x00020000;
[02:39:54.031]        // -> [hasDormant <= 0x00000000]
[02:39:54.031]      __var protType   = __protocol & 0x0000FFFF;
[02:39:54.031]        // -> [protType <= 0x00000002]
[02:39:54.031]    </block>
[02:39:54.031]    <control if="protType == 1" while="" timeout="0" info="">
[02:39:54.031]      // if-block "protType == 1"
[02:39:54.031]        // =>  FALSE
[02:39:54.031]      // skip if-block "protType == 1"
[02:39:54.031]    </control>
[02:39:54.031]    <control if="protType == 2" while="" timeout="0" info="">
[02:39:54.031]      // if-block "protType == 2"
[02:39:54.031]        // =>  TRUE
[02:39:54.031]      <control if="isSWJ" while="" timeout="0" info="">
[02:39:54.031]        // if-block "isSWJ"
[02:39:54.031]          // =>  TRUE
[02:39:54.031]        <control if="hasDormant" while="" timeout="0" info="">
[02:39:54.031]          // if-block "hasDormant"
[02:39:54.031]            // =>  FALSE
[02:39:54.031]          // skip if-block "hasDormant"
[02:39:54.031]        </control>
[02:39:54.031]        <control if="!hasDormant" while="" timeout="0" info="">
[02:39:54.031]          // if-block "!hasDormant"
[02:39:54.031]            // =>  TRUE
[02:39:54.031]          <block atomic="false" info="">
[02:39:54.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:39:54.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:54.041]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:39:54.041]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:39:54.041]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:39:54.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:54.041]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:39:54.051]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:39:54.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:39:54.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:39:54.051]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:39:54.051]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:39:54.051]          </block>
[02:39:54.051]          // end if-block "!hasDormant"
[02:39:54.051]        </control>
[02:39:54.051]        // end if-block "isSWJ"
[02:39:54.051]      </control>
[02:39:54.051]      <control if="!isSWJ" while="" timeout="0" info="">
[02:39:54.051]        // if-block "!isSWJ"
[02:39:54.061]          // =>  FALSE
[02:39:54.061]        // skip if-block "!isSWJ"
[02:39:54.061]      </control>
[02:39:54.061]      <block atomic="false" info="">
[02:39:54.061]        ReadDP(0x0);
[02:39:54.061]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:39:54.061]      </block>
[02:39:54.061]      // end if-block "protType == 2"
[02:39:54.061]    </control>
[02:39:54.061]  </sequence>
[02:39:54.061]  
[02:39:54.061]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:39:54.061]  
[02:39:54.061]  <debugvars>
[02:39:54.061]    // Pre-defined
[02:39:54.061]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:54.061]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:54.061]    __dp=0x00000000
[02:39:54.061]    __ap=0x00000000
[02:39:54.061]    __traceout=0x00000000      (Trace Disabled)
[02:39:54.061]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:54.061]    __FlashAddr=0x00000000
[02:39:54.061]    __FlashLen=0x00000000
[02:39:54.061]    __FlashArg=0x00000000
[02:39:54.061]    __FlashOp=0x00000000
[02:39:54.061]    __Result=0x00000000
[02:39:54.061]  </debugvars>
[02:39:54.071]  
[02:39:54.071]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:39:54.071]    <block atomic="false" info="">
[02:39:54.071]      __var SW_DP_ABORT       = 0x0;
[02:39:54.071]        // -> [SW_DP_ABORT <= 0x00000000]
[02:39:54.071]      __var DP_CTRL_STAT      = 0x4;
[02:39:54.071]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:39:54.071]      __var DP_SELECT         = 0x8;
[02:39:54.071]        // -> [DP_SELECT <= 0x00000008]
[02:39:54.071]      __var powered_down      = 0;
[02:39:54.071]        // -> [powered_down <= 0x00000000]
[02:39:54.071]      WriteDP(DP_SELECT, 0x00000000);
[02:39:54.081]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:39:54.081]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:39:54.081]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:39:54.081]        // -> [powered_down <= 0x00000001]
[02:39:54.081]    </block>
[02:39:54.081]    <control if="powered_down" while="" timeout="0" info="">
[02:39:54.081]      // if-block "powered_down"
[02:39:54.081]        // =>  TRUE
[02:39:54.081]      <block atomic="false" info="">
[02:39:54.081]        Message(0, "Debug/System power-up request sent");
[02:39:54.081]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:39:54.091]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:39:54.091]      </block>
[02:39:54.091]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:39:54.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:39:54.091]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:39:54.091]        // while-condition  =>  FALSE
[02:39:54.091]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:39:54.091]      </control>
[02:39:54.091]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:39:54.091]        // if-block "(__protocol & 0xFFFF) == 1"
[02:39:54.091]          // =>  FALSE
[02:39:54.091]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:39:54.091]      </control>
[02:39:54.091]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:39:54.091]        // if-block "(__protocol & 0xFFFF) == 2"
[02:39:54.091]          // =>  TRUE
[02:39:54.091]        <block atomic="false" info="">
[02:39:54.091]          Message(0, "executing SWD power up");
[02:39:54.091]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:39:54.101]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:39:54.101]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:39:54.101]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:39:54.101]        </block>
[02:39:54.101]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:39:54.101]      </control>
[02:39:54.101]      // end if-block "powered_down"
[02:39:54.101]    </control>
[02:39:54.101]    <block atomic="false" info="">
[02:39:54.101]      __var DEBUG_PORT_VAL    = 0;
[02:39:54.101]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:39:54.101]      __var ACCESS_POINT_VAL  = 0;
[02:39:54.101]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:39:54.101]      __ap = 1; 
[02:39:54.101]        // -> [__ap <= 0x00000001]
[02:39:54.101]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:39:54.101]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:39:54.101]      __ap = 4;
[02:39:54.101]        // -> [__ap <= 0x00000004]
[02:39:54.101]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:39:54.111]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:39:54.117]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:39:54.117]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:39:54.117]    </block>
[02:39:54.117]    <block atomic="false" info="">
[02:39:54.117]      __var nReset = 0x80;
[02:39:54.117]        // -> [nReset <= 0x00000080]
[02:39:54.117]      __var canReadPins = 0;
[02:39:54.117]        // -> [canReadPins <= 0x00000000]
[02:39:54.117]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:39:54.117]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:39:54.117]        // -> [canReadPins <= 0x00000001]
[02:39:54.117]    </block>
[02:39:54.121]    <control if="" while="1" timeout="200" info="">
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.121]      // while "1"  (timeout="200")
[02:39:54.121]      // while-condition  =>  TRUE
[02:39:54.131]      // while "1"  (timeout="200")
[02:39:54.131]      // while  =>  TIMEOUT
[02:39:54.131]      // end while "1"
[02:39:54.131]    </control>
[02:39:54.131]    <control if="canReadPins" while="" timeout="0" info="">
[02:39:54.131]      // if-block "canReadPins"
[02:39:54.131]        // =>  TRUE
[02:39:54.131]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:39:54.131]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:39:54.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:39:54.131]        // while-condition  =>  FALSE
[02:39:54.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:39:54.131]      </control>
[02:39:54.131]      // end if-block "canReadPins"
[02:39:54.131]    </control>
[02:39:54.131]    <control if="!canReadPins" while="" timeout="0" info="">
[02:39:54.131]      // if-block "!canReadPins"
[02:39:54.131]        // =>  FALSE
[02:39:54.131]      // skip if-block "!canReadPins"
[02:39:54.131]    </control>
[02:39:54.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:39:54.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:39:54.131]        // =>  TRUE
[02:39:54.131]      <block atomic="false" info="">
[02:39:54.131]        WriteAP(0x00, 0x190008);
[02:39:54.131]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:39:54.131]        WriteAP(0xF0, 0x01);
[02:39:54.151]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:39:54.151]      </block>
[02:39:54.151]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:39:54.151]    </control>
[02:39:54.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:39:54.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:39:54.151]        // =>  FALSE
[02:39:54.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:39:54.151]    </control>
[02:39:54.151]    <block atomic="false" info="">
[02:39:54.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:39:54.161]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:39:54.161]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:39:54.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:39:54.161]      __ap = 0; //lets make sure we reset the access point selection
[02:39:54.161]        // -> [__ap <= 0x00000000]
[02:39:54.161]    </block>
[02:39:54.161]  </sequence>
[02:39:54.161]  
[02:39:54.217]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:39:54.217]  
[02:39:54.217]  <debugvars>
[02:39:54.217]    // Pre-defined
[02:39:54.217]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:39:54.217]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:39:54.217]    __dp=0x00000000
[02:39:54.217]    __ap=0x00000000
[02:39:54.217]    __traceout=0x00000000      (Trace Disabled)
[02:39:54.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:39:54.217]    __FlashAddr=0x00000000
[02:39:54.217]    __FlashLen=0x00000000
[02:39:54.217]    __FlashArg=0x00000000
[02:39:54.217]    __FlashOp=0x00000000
[02:39:54.217]    __Result=0x00000000
[02:39:54.222]  </debugvars>
[02:39:54.222]  
[02:39:54.222]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:39:54.222]    <block atomic="false" info="">
[02:39:54.222]      __var deviceID = 0;
[02:39:54.222]        // -> [deviceID <= 0x00000000]
[02:39:54.222]      __var version = 0;
[02:39:54.222]        // -> [version <= 0x00000000]
[02:39:54.222]      __var partNum = 0;
[02:39:54.222]        // -> [partNum <= 0x00000000]
[02:39:54.222]      __var manuf = 0;
[02:39:54.222]        // -> [manuf <= 0x00000000]
[02:39:54.222]      __var isMSPM0G1X0X_G3X0X = 0;
[02:39:54.222]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:39:54.222]      __var isProduction = 0;
[02:39:54.222]        // -> [isProduction <= 0x00000000]
[02:39:54.222]      __var continueId = 0;
[02:39:54.222]        // -> [continueId <= 0x00000000]
[02:39:54.222]      deviceID =   Read32(0x41C40004);
[02:39:54.232]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:39:54.232]        // -> [deviceID <= 0x2BB8802F]
[02:39:54.232]      version = deviceID >> 28;
[02:39:54.232]        // -> [version <= 0x00000002]
[02:39:54.232]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:39:54.232]        // -> [partNum <= 0x0000BB88]
[02:39:54.232]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:39:54.232]        // -> [manuf <= 0x00000017]
[02:39:54.232]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:39:54.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:39:54.232]      isProduction = (version > 0);
[02:39:54.232]        // -> [isProduction <= 0x00000001]
[02:39:54.232]    </block>
[02:39:54.232]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:39:54.232]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:39:54.232]        // =>  FALSE
[02:39:54.232]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:39:54.232]    </control>
[02:39:54.232]    <control if="continueId == 4" while="" timeout="0" info="">
[02:39:54.232]      // if-block "continueId == 4"
[02:39:54.232]        // =>  FALSE
[02:39:54.232]      // skip if-block "continueId == 4"
[02:39:54.232]    </control>
[02:39:54.232]    <control if="!isProduction" while="" timeout="0" info="">
[02:39:54.232]      // if-block "!isProduction"
[02:39:54.232]        // =>  FALSE
[02:39:54.232]      // skip if-block "!isProduction"
[02:39:54.232]    </control>
[02:39:54.232]  </sequence>
[02:39:54.232]  
[02:41:35.202]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:41:35.202]  
[02:41:35.217]  <debugvars>
[02:41:35.217]    // Pre-defined
[02:41:35.217]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:35.217]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:35.217]    __dp=0x00000000
[02:41:35.217]    __ap=0x00000000
[02:41:35.217]    __traceout=0x00000000      (Trace Disabled)
[02:41:35.217]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:35.217]    __FlashAddr=0x00000000
[02:41:35.217]    __FlashLen=0x00000000
[02:41:35.217]    __FlashArg=0x00000000
[02:41:35.217]    __FlashOp=0x00000000
[02:41:35.217]    __Result=0x00000000
[02:41:35.217]  </debugvars>
[02:41:35.217]  
[02:41:35.217]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:41:35.217]    <block atomic="false" info="">
[02:41:35.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:41:35.217]        // -> [isSWJ <= 0x00000001]
[02:41:35.217]      __var hasDormant = __protocol & 0x00020000;
[02:41:35.217]        // -> [hasDormant <= 0x00000000]
[02:41:35.217]      __var protType   = __protocol & 0x0000FFFF;
[02:41:35.217]        // -> [protType <= 0x00000002]
[02:41:35.217]    </block>
[02:41:35.217]    <control if="protType == 1" while="" timeout="0" info="">
[02:41:35.217]      // if-block "protType == 1"
[02:41:35.217]        // =>  FALSE
[02:41:35.217]      // skip if-block "protType == 1"
[02:41:35.217]    </control>
[02:41:35.217]    <control if="protType == 2" while="" timeout="0" info="">
[02:41:35.217]      // if-block "protType == 2"
[02:41:35.217]        // =>  TRUE
[02:41:35.222]      <control if="isSWJ" while="" timeout="0" info="">
[02:41:35.222]        // if-block "isSWJ"
[02:41:35.222]          // =>  TRUE
[02:41:35.222]        <control if="hasDormant" while="" timeout="0" info="">
[02:41:35.222]          // if-block "hasDormant"
[02:41:35.222]            // =>  FALSE
[02:41:35.222]          // skip if-block "hasDormant"
[02:41:35.222]        </control>
[02:41:35.222]        <control if="!hasDormant" while="" timeout="0" info="">
[02:41:35.222]          // if-block "!hasDormant"
[02:41:35.222]            // =>  TRUE
[02:41:35.222]          <block atomic="false" info="">
[02:41:35.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:41:35.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:35.222]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:41:35.222]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:41:35.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:41:35.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:35.222]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:41:35.232]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:41:35.232]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:41:35.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:35.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:41:35.242]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:41:35.242]          </block>
[02:41:35.242]          // end if-block "!hasDormant"
[02:41:35.242]        </control>
[02:41:35.242]        // end if-block "isSWJ"
[02:41:35.242]      </control>
[02:41:35.242]      <control if="!isSWJ" while="" timeout="0" info="">
[02:41:35.242]        // if-block "!isSWJ"
[02:41:35.242]          // =>  FALSE
[02:41:35.242]        // skip if-block "!isSWJ"
[02:41:35.242]      </control>
[02:41:35.242]      <block atomic="false" info="">
[02:41:35.242]        ReadDP(0x0);
[02:41:35.252]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:41:35.252]      </block>
[02:41:35.252]      // end if-block "protType == 2"
[02:41:35.252]    </control>
[02:41:35.252]  </sequence>
[02:41:35.252]  
[02:41:35.262]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:41:35.262]  
[02:41:35.262]  <debugvars>
[02:41:35.262]    // Pre-defined
[02:41:35.262]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:35.262]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:35.262]    __dp=0x00000000
[02:41:35.262]    __ap=0x00000000
[02:41:35.262]    __traceout=0x00000000      (Trace Disabled)
[02:41:35.262]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:35.262]    __FlashAddr=0x00000000
[02:41:35.262]    __FlashLen=0x00000000
[02:41:35.262]    __FlashArg=0x00000000
[02:41:35.262]    __FlashOp=0x00000000
[02:41:35.262]    __Result=0x00000000
[02:41:35.262]  </debugvars>
[02:41:35.262]  
[02:41:35.262]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:41:35.262]    <block atomic="false" info="">
[02:41:35.262]      __var SW_DP_ABORT       = 0x0;
[02:41:35.262]        // -> [SW_DP_ABORT <= 0x00000000]
[02:41:35.262]      __var DP_CTRL_STAT      = 0x4;
[02:41:35.262]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:41:35.262]      __var DP_SELECT         = 0x8;
[02:41:35.262]        // -> [DP_SELECT <= 0x00000008]
[02:41:35.262]      __var powered_down      = 0;
[02:41:35.262]        // -> [powered_down <= 0x00000000]
[02:41:35.262]      WriteDP(DP_SELECT, 0x00000000);
[02:41:35.272]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:41:35.272]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:41:35.272]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:41:35.272]        // -> [powered_down <= 0x00000001]
[02:41:35.272]    </block>
[02:41:35.272]    <control if="powered_down" while="" timeout="0" info="">
[02:41:35.272]      // if-block "powered_down"
[02:41:35.272]        // =>  TRUE
[02:41:35.272]      <block atomic="false" info="">
[02:41:35.272]        Message(0, "Debug/System power-up request sent");
[02:41:35.282]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:41:35.282]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:41:35.282]      </block>
[02:41:35.282]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:41:35.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.282]        // while-condition  =>  TRUE
[02:41:35.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.292]        // while-condition  =>  TRUE
[02:41:35.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.292]        // while-condition  =>  TRUE
[02:41:35.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.292]        // while-condition  =>  TRUE
[02:41:35.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.302]        // while-condition  =>  TRUE
[02:41:35.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.302]        // while-condition  =>  TRUE
[02:41:35.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.302]        // while-condition  =>  TRUE
[02:41:35.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.312]        // while-condition  =>  TRUE
[02:41:35.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.312]        // while-condition  =>  TRUE
[02:41:35.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.312]        // while-condition  =>  TRUE
[02:41:35.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.322]        // while-condition  =>  TRUE
[02:41:35.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.322]        // while-condition  =>  TRUE
[02:41:35.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.332]        // while-condition  =>  TRUE
[02:41:35.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.342]        // while-condition  =>  TRUE
[02:41:35.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.342]        // while-condition  =>  TRUE
[02:41:35.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.352]        // while-condition  =>  TRUE
[02:41:35.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.352]        // while-condition  =>  TRUE
[02:41:35.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.352]        // while-condition  =>  TRUE
[02:41:35.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.365]        // while-condition  =>  TRUE
[02:41:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.365]        // while-condition  =>  TRUE
[02:41:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.365]        // while-condition  =>  TRUE
[02:41:35.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.372]        // while-condition  =>  TRUE
[02:41:35.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.372]        // while-condition  =>  TRUE
[02:41:35.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.372]        // while-condition  =>  TRUE
[02:41:35.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.382]        // while-condition  =>  TRUE
[02:41:35.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.391]        // while-condition  =>  TRUE
[02:41:35.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.391]        // while-condition  =>  TRUE
[02:41:35.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.391]        // while-condition  =>  TRUE
[02:41:35.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.398]        // while-condition  =>  TRUE
[02:41:35.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.398]        // while-condition  =>  TRUE
[02:41:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.401]        // while-condition  =>  TRUE
[02:41:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.401]        // while-condition  =>  TRUE
[02:41:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.401]        // while-condition  =>  TRUE
[02:41:35.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.411]        // while-condition  =>  TRUE
[02:41:35.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.411]        // while-condition  =>  TRUE
[02:41:35.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.411]        // while-condition  =>  TRUE
[02:41:35.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.411]        // while-condition  =>  TRUE
[02:41:35.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.411]        // while-condition  =>  TRUE
[02:41:35.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.421]        // while-condition  =>  TRUE
[02:41:35.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.421]        // while-condition  =>  TRUE
[02:41:35.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.431]        // while-condition  =>  TRUE
[02:41:35.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.441]        // while-condition  =>  TRUE
[02:41:35.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.441]        // while-condition  =>  TRUE
[02:41:35.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.451]        // while-condition  =>  TRUE
[02:41:35.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.451]        // while-condition  =>  TRUE
[02:41:35.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.471]        // while-condition  =>  TRUE
[02:41:35.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.471]        // while-condition  =>  TRUE
[02:41:35.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.471]        // while-condition  =>  TRUE
[02:41:35.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.471]        // while-condition  =>  TRUE
[02:41:35.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.482]        // while-condition  =>  TRUE
[02:41:35.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.482]        // while-condition  =>  TRUE
[02:41:35.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.482]        // while-condition  =>  TRUE
[02:41:35.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.482]        // while-condition  =>  TRUE
[02:41:35.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.492]        // while-condition  =>  TRUE
[02:41:35.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.492]        // while-condition  =>  TRUE
[02:41:35.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.492]        // while-condition  =>  TRUE
[02:41:35.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.502]        // while-condition  =>  TRUE
[02:41:35.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.502]        // while-condition  =>  TRUE
[02:41:35.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.502]        // while-condition  =>  TRUE
[02:41:35.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.512]        // while-condition  =>  TRUE
[02:41:35.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.512]        // while-condition  =>  TRUE
[02:41:35.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.512]        // while-condition  =>  TRUE
[02:41:35.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.512]        // while-condition  =>  TRUE
[02:41:35.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.522]        // while-condition  =>  TRUE
[02:41:35.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.532]        // while-condition  =>  TRUE
[02:41:35.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.532]        // while-condition  =>  TRUE
[02:41:35.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.532]        // while-condition  =>  TRUE
[02:41:35.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.532]        // while-condition  =>  TRUE
[02:41:35.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.542]        // while-condition  =>  TRUE
[02:41:35.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.542]        // while-condition  =>  TRUE
[02:41:35.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.542]        // while-condition  =>  TRUE
[02:41:35.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.542]        // while-condition  =>  TRUE
[02:41:35.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.552]        // while-condition  =>  TRUE
[02:41:35.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.552]        // while-condition  =>  TRUE
[02:41:35.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.552]        // while-condition  =>  TRUE
[02:41:35.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.562]        // while-condition  =>  TRUE
[02:41:35.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.562]        // while-condition  =>  TRUE
[02:41:35.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.562]        // while-condition  =>  TRUE
[02:41:35.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.572]        // while-condition  =>  TRUE
[02:41:35.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.572]        // while-condition  =>  TRUE
[02:41:35.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.572]        // while-condition  =>  TRUE
[02:41:35.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.572]        // while-condition  =>  TRUE
[02:41:35.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.582]        // while-condition  =>  TRUE
[02:41:35.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.582]        // while-condition  =>  TRUE
[02:41:35.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.592]        // while-condition  =>  TRUE
[02:41:35.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.602]        // while-condition  =>  TRUE
[02:41:35.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.612]        // while-condition  =>  TRUE
[02:41:35.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.612]        // while-condition  =>  TRUE
[02:41:35.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.622]        // while-condition  =>  TRUE
[02:41:35.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.622]        // while-condition  =>  TRUE
[02:41:35.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.622]        // while-condition  =>  TRUE
[02:41:35.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.632]        // while-condition  =>  TRUE
[02:41:35.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.632]        // while-condition  =>  TRUE
[02:41:35.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.632]        // while-condition  =>  TRUE
[02:41:35.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.632]        // while-condition  =>  TRUE
[02:41:35.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.642]        // while-condition  =>  TRUE
[02:41:35.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.642]        // while-condition  =>  TRUE
[02:41:35.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.652]        // while-condition  =>  TRUE
[02:41:35.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.662]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.662]        // while-condition  =>  TRUE
[02:41:35.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.672]        // while-condition  =>  TRUE
[02:41:35.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.672]        // while-condition  =>  TRUE
[02:41:35.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.672]        // while-condition  =>  TRUE
[02:41:35.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.672]        // while-condition  =>  TRUE
[02:41:35.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.682]        // while-condition  =>  TRUE
[02:41:35.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.682]        // while-condition  =>  TRUE
[02:41:35.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.682]        // while-condition  =>  TRUE
[02:41:35.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.692]        // while-condition  =>  TRUE
[02:41:35.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.692]        // while-condition  =>  TRUE
[02:41:35.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.692]        // while-condition  =>  TRUE
[02:41:35.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.702]        // while-condition  =>  TRUE
[02:41:35.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.702]        // while-condition  =>  TRUE
[02:41:35.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.702]        // while-condition  =>  TRUE
[02:41:35.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.712]        // while-condition  =>  TRUE
[02:41:35.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.712]        // while-condition  =>  TRUE
[02:41:35.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.722]        // while-condition  =>  TRUE
[02:41:35.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.722]        // while-condition  =>  TRUE
[02:41:35.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.732]        // while-condition  =>  TRUE
[02:41:35.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.732]        // while-condition  =>  TRUE
[02:41:35.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.752]        // while-condition  =>  TRUE
[02:41:35.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.752]        // while-condition  =>  TRUE
[02:41:35.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.762]        // while-condition  =>  TRUE
[02:41:35.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.762]        // while-condition  =>  TRUE
[02:41:35.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.772]        // while-condition  =>  TRUE
[02:41:35.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.772]        // while-condition  =>  TRUE
[02:41:35.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.772]        // while-condition  =>  TRUE
[02:41:35.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.782]        // while-condition  =>  TRUE
[02:41:35.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.782]        // while-condition  =>  TRUE
[02:41:35.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.792]        // while-condition  =>  TRUE
[02:41:35.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.792]        // while-condition  =>  TRUE
[02:41:35.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.792]        // while-condition  =>  TRUE
[02:41:35.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.802]        // while-condition  =>  TRUE
[02:41:35.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.812]        // while-condition  =>  TRUE
[02:41:35.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.812]        // while-condition  =>  TRUE
[02:41:35.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.812]        // while-condition  =>  TRUE
[02:41:35.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.822]        // while-condition  =>  TRUE
[02:41:35.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.832]        // while-condition  =>  TRUE
[02:41:35.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.832]        // while-condition  =>  TRUE
[02:41:35.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.842]        // while-condition  =>  TRUE
[02:41:35.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.842]        // while-condition  =>  TRUE
[02:41:35.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.852]        // while-condition  =>  TRUE
[02:41:35.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.852]        // while-condition  =>  TRUE
[02:41:35.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.852]        // while-condition  =>  TRUE
[02:41:35.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.862]        // while-condition  =>  TRUE
[02:41:35.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.873]        // while-condition  =>  TRUE
[02:41:35.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.882]        // while-condition  =>  TRUE
[02:41:35.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.882]        // while-condition  =>  TRUE
[02:41:35.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.882]        // while-condition  =>  TRUE
[02:41:35.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.882]        // while-condition  =>  TRUE
[02:41:35.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.892]        // while-condition  =>  TRUE
[02:41:35.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.892]        // while-condition  =>  TRUE
[02:41:35.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.892]        // while-condition  =>  TRUE
[02:41:35.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.902]        // while-condition  =>  TRUE
[02:41:35.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.902]        // while-condition  =>  TRUE
[02:41:35.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.912]        // while-condition  =>  TRUE
[02:41:35.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.912]        // while-condition  =>  TRUE
[02:41:35.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.912]        // while-condition  =>  TRUE
[02:41:35.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.922]        // while-condition  =>  TRUE
[02:41:35.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.922]        // while-condition  =>  TRUE
[02:41:35.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.922]        // while-condition  =>  TRUE
[02:41:35.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.922]        // while-condition  =>  TRUE
[02:41:35.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.932]        // while-condition  =>  TRUE
[02:41:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.932]        // while-condition  =>  TRUE
[02:41:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.932]        // while-condition  =>  TRUE
[02:41:35.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.942]        // while-condition  =>  TRUE
[02:41:35.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.942]        // while-condition  =>  TRUE
[02:41:35.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.942]        // while-condition  =>  TRUE
[02:41:35.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.952]        // while-condition  =>  TRUE
[02:41:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.952]        // while-condition  =>  TRUE
[02:41:35.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.962]        // while-condition  =>  TRUE
[02:41:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.962]        // while-condition  =>  TRUE
[02:41:35.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.973]        // while-condition  =>  TRUE
[02:41:35.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.982]        // while-condition  =>  TRUE
[02:41:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.982]        // while-condition  =>  TRUE
[02:41:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.982]        // while-condition  =>  TRUE
[02:41:35.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.992]        // while-condition  =>  TRUE
[02:41:35.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.992]        // while-condition  =>  TRUE
[02:41:35.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:35.992]        // while-condition  =>  TRUE
[02:41:35.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:35.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.002]        // while-condition  =>  TRUE
[02:41:36.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.002]        // while-condition  =>  TRUE
[02:41:36.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.002]        // while-condition  =>  TRUE
[02:41:36.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.002]        // while-condition  =>  TRUE
[02:41:36.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.012]        // while-condition  =>  TRUE
[02:41:36.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.012]        // while-condition  =>  TRUE
[02:41:36.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.022]        // while-condition  =>  TRUE
[02:41:36.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.032]        // while-condition  =>  TRUE
[02:41:36.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.032]        // while-condition  =>  TRUE
[02:41:36.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.042]        // while-condition  =>  TRUE
[02:41:36.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.042]        // while-condition  =>  TRUE
[02:41:36.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.052]        // while-condition  =>  TRUE
[02:41:36.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.052]        // while-condition  =>  TRUE
[02:41:36.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.052]        // while-condition  =>  TRUE
[02:41:36.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.062]        // while-condition  =>  TRUE
[02:41:36.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.062]        // while-condition  =>  TRUE
[02:41:36.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.072]        // while-condition  =>  TRUE
[02:41:36.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.082]        // while-condition  =>  TRUE
[02:41:36.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.092]        // while-condition  =>  TRUE
[02:41:36.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.112]        // while-condition  =>  TRUE
[02:41:36.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.112]        // while-condition  =>  TRUE
[02:41:36.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.112]        // while-condition  =>  TRUE
[02:41:36.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.112]        // while-condition  =>  TRUE
[02:41:36.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.122]        // while-condition  =>  TRUE
[02:41:36.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.122]        // while-condition  =>  TRUE
[02:41:36.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.122]        // while-condition  =>  TRUE
[02:41:36.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.122]        // while-condition  =>  TRUE
[02:41:36.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.132]        // while-condition  =>  TRUE
[02:41:36.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.132]        // while-condition  =>  TRUE
[02:41:36.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.132]        // while-condition  =>  TRUE
[02:41:36.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.142]        // while-condition  =>  TRUE
[02:41:36.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.142]        // while-condition  =>  TRUE
[02:41:36.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.142]        // while-condition  =>  TRUE
[02:41:36.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.152]        // while-condition  =>  TRUE
[02:41:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.152]        // while-condition  =>  TRUE
[02:41:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.152]        // while-condition  =>  TRUE
[02:41:36.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.162]        // while-condition  =>  TRUE
[02:41:36.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.172]        // while-condition  =>  TRUE
[02:41:36.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.172]        // while-condition  =>  TRUE
[02:41:36.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.182]        // while-condition  =>  TRUE
[02:41:36.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.182]        // while-condition  =>  TRUE
[02:41:36.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.192]        // while-condition  =>  TRUE
[02:41:36.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.192]        // while-condition  =>  TRUE
[02:41:36.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.192]        // while-condition  =>  TRUE
[02:41:36.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.202]        // while-condition  =>  TRUE
[02:41:36.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.212]        // while-condition  =>  TRUE
[02:41:36.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.212]        // while-condition  =>  TRUE
[02:41:36.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.222]        // while-condition  =>  TRUE
[02:41:36.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.222]        // while-condition  =>  TRUE
[02:41:36.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.222]        // while-condition  =>  TRUE
[02:41:36.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.232]        // while-condition  =>  TRUE
[02:41:36.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.232]        // while-condition  =>  TRUE
[02:41:36.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.232]        // while-condition  =>  TRUE
[02:41:36.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.242]        // while-condition  =>  TRUE
[02:41:36.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.242]        // while-condition  =>  TRUE
[02:41:36.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.252]        // while-condition  =>  TRUE
[02:41:36.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.252]        // while-condition  =>  TRUE
[02:41:36.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.262]        // while-condition  =>  TRUE
[02:41:36.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.262]        // while-condition  =>  TRUE
[02:41:36.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.262]        // while-condition  =>  TRUE
[02:41:36.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[02:41:36.282]        // while-condition  =>  TRUE
[02:41:36.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:36.282]        // while  =>  TIMEOUT
[02:41:36.282]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:41:36.282]      </control>
[02:41:36.282]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:41:36.282]        // if-block "(__protocol & 0xFFFF) == 1"
[02:41:36.282]          // =>  FALSE
[02:41:36.282]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:41:36.282]      </control>
[02:41:36.282]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:41:36.282]        // if-block "(__protocol & 0xFFFF) == 2"
[02:41:36.282]          // =>  TRUE
[02:41:36.282]        <block atomic="false" info="">
[02:41:36.282]          Message(0, "executing SWD power up");
[02:41:36.282]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:41:36.282]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:41:36.282]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:41:36.302]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:41:36.302]        </block>
[02:41:36.302]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:41:36.302]      </control>
[02:41:36.302]      // end if-block "powered_down"
[02:41:36.302]    </control>
[02:41:36.302]    <block atomic="false" info="">
[02:41:36.302]      __var DEBUG_PORT_VAL    = 0;
[02:41:36.302]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:41:36.302]      __var ACCESS_POINT_VAL  = 0;
[02:41:36.302]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:41:36.302]      __ap = 1; 
[02:41:36.302]        // -> [__ap <= 0x00000001]
[02:41:36.302]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:41:36.322]  
[02:41:36.322]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[02:41:36.322]  
[02:41:36.322]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:41:36.322]    </block>
[02:41:36.322]  </sequence>
[02:41:36.322]  
[02:41:45.754]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:41:45.754]  
[02:41:45.768]  <debugvars>
[02:41:45.768]    // Pre-defined
[02:41:45.768]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:45.768]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:45.768]    __dp=0x00000000
[02:41:45.768]    __ap=0x00000000
[02:41:45.768]    __traceout=0x00000000      (Trace Disabled)
[02:41:45.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:45.768]    __FlashAddr=0x00000000
[02:41:45.768]    __FlashLen=0x00000000
[02:41:45.768]    __FlashArg=0x00000000
[02:41:45.768]    __FlashOp=0x00000000
[02:41:45.768]    __Result=0x00000000
[02:41:45.768]  </debugvars>
[02:41:45.768]  
[02:41:45.768]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:41:45.768]    <block atomic="false" info="">
[02:41:45.768]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:41:45.768]        // -> [isSWJ <= 0x00000001]
[02:41:45.768]      __var hasDormant = __protocol & 0x00020000;
[02:41:45.768]        // -> [hasDormant <= 0x00000000]
[02:41:45.768]      __var protType   = __protocol & 0x0000FFFF;
[02:41:45.768]        // -> [protType <= 0x00000002]
[02:41:45.768]    </block>
[02:41:45.768]    <control if="protType == 1" while="" timeout="0" info="">
[02:41:45.768]      // if-block "protType == 1"
[02:41:45.768]        // =>  FALSE
[02:41:45.768]      // skip if-block "protType == 1"
[02:41:45.768]    </control>
[02:41:45.768]    <control if="protType == 2" while="" timeout="0" info="">
[02:41:45.768]      // if-block "protType == 2"
[02:41:45.768]        // =>  TRUE
[02:41:45.768]      <control if="isSWJ" while="" timeout="0" info="">
[02:41:45.768]        // if-block "isSWJ"
[02:41:45.768]          // =>  TRUE
[02:41:45.768]        <control if="hasDormant" while="" timeout="0" info="">
[02:41:45.768]          // if-block "hasDormant"
[02:41:45.768]            // =>  FALSE
[02:41:45.768]          // skip if-block "hasDormant"
[02:41:45.768]        </control>
[02:41:45.774]        <control if="!hasDormant" while="" timeout="0" info="">
[02:41:45.774]          // if-block "!hasDormant"
[02:41:45.774]            // =>  TRUE
[02:41:45.774]          <block atomic="false" info="">
[02:41:45.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:41:45.774]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:45.774]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:41:45.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:41:45.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:41:45.774]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:45.774]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:41:45.784]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:41:45.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:41:45.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:41:45.788]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:41:45.788]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:41:45.788]          </block>
[02:41:45.788]          // end if-block "!hasDormant"
[02:41:45.788]        </control>
[02:41:45.788]        // end if-block "isSWJ"
[02:41:45.788]      </control>
[02:41:45.794]      <control if="!isSWJ" while="" timeout="0" info="">
[02:41:45.794]        // if-block "!isSWJ"
[02:41:45.794]          // =>  FALSE
[02:41:45.794]        // skip if-block "!isSWJ"
[02:41:45.794]      </control>
[02:41:45.794]      <block atomic="false" info="">
[02:41:45.794]        ReadDP(0x0);
[02:41:45.794]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:41:45.794]      </block>
[02:41:45.794]      // end if-block "protType == 2"
[02:41:45.794]    </control>
[02:41:45.794]  </sequence>
[02:41:45.794]  
[02:41:45.814]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:41:45.814]  
[02:41:45.814]  <debugvars>
[02:41:45.814]    // Pre-defined
[02:41:45.814]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:45.814]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:45.814]    __dp=0x00000000
[02:41:45.814]    __ap=0x00000000
[02:41:45.814]    __traceout=0x00000000      (Trace Disabled)
[02:41:45.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:45.814]    __FlashAddr=0x00000000
[02:41:45.814]    __FlashLen=0x00000000
[02:41:45.814]    __FlashArg=0x00000000
[02:41:45.814]    __FlashOp=0x00000000
[02:41:45.814]    __Result=0x00000000
[02:41:45.814]  </debugvars>
[02:41:45.814]  
[02:41:45.814]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:41:45.814]    <block atomic="false" info="">
[02:41:45.814]      __var SW_DP_ABORT       = 0x0;
[02:41:45.814]        // -> [SW_DP_ABORT <= 0x00000000]
[02:41:45.814]      __var DP_CTRL_STAT      = 0x4;
[02:41:45.814]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:41:45.814]      __var DP_SELECT         = 0x8;
[02:41:45.814]        // -> [DP_SELECT <= 0x00000008]
[02:41:45.814]      __var powered_down      = 0;
[02:41:45.814]        // -> [powered_down <= 0x00000000]
[02:41:45.814]      WriteDP(DP_SELECT, 0x00000000);
[02:41:45.824]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:41:45.824]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:41:45.824]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:41:45.824]        // -> [powered_down <= 0x00000001]
[02:41:45.824]    </block>
[02:41:45.824]    <control if="powered_down" while="" timeout="0" info="">
[02:41:45.824]      // if-block "powered_down"
[02:41:45.824]        // =>  TRUE
[02:41:45.824]      <block atomic="false" info="">
[02:41:45.824]        Message(0, "Debug/System power-up request sent");
[02:41:45.824]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:41:45.834]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:41:45.834]      </block>
[02:41:45.834]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:41:45.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:41:45.844]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:41:45.844]        // while-condition  =>  FALSE
[02:41:45.844]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:41:45.844]      </control>
[02:41:45.844]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:41:45.844]        // if-block "(__protocol & 0xFFFF) == 1"
[02:41:45.844]          // =>  FALSE
[02:41:45.844]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:41:45.844]      </control>
[02:41:45.844]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:41:45.844]        // if-block "(__protocol & 0xFFFF) == 2"
[02:41:45.844]          // =>  TRUE
[02:41:45.844]        <block atomic="false" info="">
[02:41:45.844]          Message(0, "executing SWD power up");
[02:41:45.844]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:41:45.854]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:41:45.854]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:41:45.854]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:41:45.854]        </block>
[02:41:45.854]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:41:45.854]      </control>
[02:41:45.854]      // end if-block "powered_down"
[02:41:45.854]    </control>
[02:41:45.854]    <block atomic="false" info="">
[02:41:45.854]      __var DEBUG_PORT_VAL    = 0;
[02:41:45.854]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:41:45.854]      __var ACCESS_POINT_VAL  = 0;
[02:41:45.854]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:41:45.854]      __ap = 1; 
[02:41:45.854]        // -> [__ap <= 0x00000001]
[02:41:45.854]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:41:45.864]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:41:45.864]      __ap = 4;
[02:41:45.864]        // -> [__ap <= 0x00000004]
[02:41:45.864]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:41:45.875]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:41:45.875]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:41:45.875]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:41:45.875]    </block>
[02:41:45.875]    <block atomic="false" info="">
[02:41:45.884]      __var nReset = 0x80;
[02:41:45.884]        // -> [nReset <= 0x00000080]
[02:41:45.884]      __var canReadPins = 0;
[02:41:45.884]        // -> [canReadPins <= 0x00000000]
[02:41:45.884]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:41:45.884]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:41:45.884]        // -> [canReadPins <= 0x00000001]
[02:41:45.884]    </block>
[02:41:45.884]    <control if="" while="1" timeout="200" info="">
[02:41:45.884]      // while "1"  (timeout="200")
[02:41:45.884]      // while-condition  =>  TRUE
[02:41:45.884]      // while "1"  (timeout="200")
[02:41:45.884]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.888]      // while "1"  (timeout="200")
[02:41:45.888]      // while-condition  =>  TRUE
[02:41:45.894]      // while "1"  (timeout="200")
[02:41:45.894]      // while  =>  TIMEOUT
[02:41:45.894]      // end while "1"
[02:41:45.894]    </control>
[02:41:45.894]    <control if="canReadPins" while="" timeout="0" info="">
[02:41:45.894]      // if-block "canReadPins"
[02:41:45.894]        // =>  TRUE
[02:41:45.894]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:41:45.894]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:41:45.894]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:41:45.894]        // while-condition  =>  FALSE
[02:41:45.894]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:41:45.894]      </control>
[02:41:45.894]      // end if-block "canReadPins"
[02:41:45.894]    </control>
[02:41:45.894]    <control if="!canReadPins" while="" timeout="0" info="">
[02:41:45.894]      // if-block "!canReadPins"
[02:41:45.894]        // =>  FALSE
[02:41:45.894]      // skip if-block "!canReadPins"
[02:41:45.894]    </control>
[02:41:45.894]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:41:45.894]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:41:45.894]        // =>  TRUE
[02:41:45.894]      <block atomic="false" info="">
[02:41:45.894]        WriteAP(0x00, 0x190008);
[02:41:45.904]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:41:45.904]        WriteAP(0xF0, 0x01);
[02:41:45.904]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:41:45.904]      </block>
[02:41:45.904]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:41:45.904]    </control>
[02:41:45.914]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:41:45.914]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:41:45.914]        // =>  FALSE
[02:41:45.914]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:41:45.914]    </control>
[02:41:45.914]    <block atomic="false" info="">
[02:41:45.914]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:41:45.914]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:41:45.914]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:41:45.914]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:41:45.914]      __ap = 0; //lets make sure we reset the access point selection
[02:41:45.914]        // -> [__ap <= 0x00000000]
[02:41:45.914]    </block>
[02:41:45.914]  </sequence>
[02:41:45.914]  
[02:41:45.954]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:41:45.954]  
[02:41:45.954]  <debugvars>
[02:41:45.954]    // Pre-defined
[02:41:45.954]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:41:45.954]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:41:45.954]    __dp=0x00000000
[02:41:45.954]    __ap=0x00000000
[02:41:45.954]    __traceout=0x00000000      (Trace Disabled)
[02:41:45.954]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:41:45.954]    __FlashAddr=0x00000000
[02:41:45.954]    __FlashLen=0x00000000
[02:41:45.954]    __FlashArg=0x00000000
[02:41:45.954]    __FlashOp=0x00000000
[02:41:45.954]    __Result=0x00000000
[02:41:45.954]  </debugvars>
[02:41:45.954]  
[02:41:45.954]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:41:45.954]    <block atomic="false" info="">
[02:41:45.954]      __var deviceID = 0;
[02:41:45.954]        // -> [deviceID <= 0x00000000]
[02:41:45.954]      __var version = 0;
[02:41:45.954]        // -> [version <= 0x00000000]
[02:41:45.954]      __var partNum = 0;
[02:41:45.954]        // -> [partNum <= 0x00000000]
[02:41:45.954]      __var manuf = 0;
[02:41:45.954]        // -> [manuf <= 0x00000000]
[02:41:45.954]      __var isMSPM0G1X0X_G3X0X = 0;
[02:41:45.954]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:41:45.954]      __var isProduction = 0;
[02:41:45.954]        // -> [isProduction <= 0x00000000]
[02:41:45.954]      __var continueId = 0;
[02:41:45.954]        // -> [continueId <= 0x00000000]
[02:41:45.954]      deviceID =   Read32(0x41C40004);
[02:41:45.964]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:41:45.964]        // -> [deviceID <= 0x2BB8802F]
[02:41:45.964]      version = deviceID >> 28;
[02:41:45.964]        // -> [version <= 0x00000002]
[02:41:45.964]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:41:45.964]        // -> [partNum <= 0x0000BB88]
[02:41:45.964]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:41:45.964]        // -> [manuf <= 0x00000017]
[02:41:45.964]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:41:45.974]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:41:45.975]      isProduction = (version > 0);
[02:41:45.975]        // -> [isProduction <= 0x00000001]
[02:41:45.975]    </block>
[02:41:45.975]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:41:45.975]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:41:45.975]        // =>  FALSE
[02:41:45.975]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:41:45.975]    </control>
[02:41:45.975]    <control if="continueId == 4" while="" timeout="0" info="">
[02:41:45.975]      // if-block "continueId == 4"
[02:41:45.975]        // =>  FALSE
[02:41:45.975]      // skip if-block "continueId == 4"
[02:41:45.975]    </control>
[02:41:45.975]    <control if="!isProduction" while="" timeout="0" info="">
[02:41:45.975]      // if-block "!isProduction"
[02:41:45.975]        // =>  FALSE
[02:41:45.975]      // skip if-block "!isProduction"
[02:41:45.975]    </control>
[02:41:45.975]  </sequence>
[02:41:45.975]  
[02:45:20.577]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:45:20.577]  
[02:45:20.589]  <debugvars>
[02:45:20.589]    // Pre-defined
[02:45:20.589]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:20.589]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:20.589]    __dp=0x00000000
[02:45:20.589]    __ap=0x00000000
[02:45:20.589]    __traceout=0x00000000      (Trace Disabled)
[02:45:20.589]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:20.589]    __FlashAddr=0x00000000
[02:45:20.589]    __FlashLen=0x00000000
[02:45:20.589]    __FlashArg=0x00000000
[02:45:20.589]    __FlashOp=0x00000000
[02:45:20.589]    __Result=0x00000000
[02:45:20.589]  </debugvars>
[02:45:20.589]  
[02:45:20.589]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:45:20.589]    <block atomic="false" info="">
[02:45:20.589]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:45:20.589]        // -> [isSWJ <= 0x00000001]
[02:45:20.589]      __var hasDormant = __protocol & 0x00020000;
[02:45:20.589]        // -> [hasDormant <= 0x00000000]
[02:45:20.589]      __var protType   = __protocol & 0x0000FFFF;
[02:45:20.589]        // -> [protType <= 0x00000002]
[02:45:20.589]    </block>
[02:45:20.589]    <control if="protType == 1" while="" timeout="0" info="">
[02:45:20.589]      // if-block "protType == 1"
[02:45:20.589]        // =>  FALSE
[02:45:20.589]      // skip if-block "protType == 1"
[02:45:20.589]    </control>
[02:45:20.589]    <control if="protType == 2" while="" timeout="0" info="">
[02:45:20.589]      // if-block "protType == 2"
[02:45:20.589]        // =>  TRUE
[02:45:20.589]      <control if="isSWJ" while="" timeout="0" info="">
[02:45:20.589]        // if-block "isSWJ"
[02:45:20.589]          // =>  TRUE
[02:45:20.589]        <control if="hasDormant" while="" timeout="0" info="">
[02:45:20.589]          // if-block "hasDormant"
[02:45:20.589]            // =>  FALSE
[02:45:20.589]          // skip if-block "hasDormant"
[02:45:20.589]        </control>
[02:45:20.589]        <control if="!hasDormant" while="" timeout="0" info="">
[02:45:20.589]          // if-block "!hasDormant"
[02:45:20.589]            // =>  TRUE
[02:45:20.589]          <block atomic="false" info="">
[02:45:20.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:45:20.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:20.597]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:45:20.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:45:20.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:45:20.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:20.597]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:45:20.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:45:20.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:45:20.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:45:20.607]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:45:20.617]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:45:20.617]          </block>
[02:45:20.617]          // end if-block "!hasDormant"
[02:45:20.617]        </control>
[02:45:20.617]        // end if-block "isSWJ"
[02:45:20.617]      </control>
[02:45:20.617]      <control if="!isSWJ" while="" timeout="0" info="">
[02:45:20.617]        // if-block "!isSWJ"
[02:45:20.617]          // =>  FALSE
[02:45:20.617]        // skip if-block "!isSWJ"
[02:45:20.617]      </control>
[02:45:20.617]      <block atomic="false" info="">
[02:45:20.617]        ReadDP(0x0);
[02:45:20.617]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:45:20.617]      </block>
[02:45:20.617]      // end if-block "protType == 2"
[02:45:20.617]    </control>
[02:45:20.617]  </sequence>
[02:45:20.617]  
[02:45:20.627]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:45:20.627]  
[02:45:20.627]  <debugvars>
[02:45:20.627]    // Pre-defined
[02:45:20.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:20.627]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:20.627]    __dp=0x00000000
[02:45:20.627]    __ap=0x00000000
[02:45:20.627]    __traceout=0x00000000      (Trace Disabled)
[02:45:20.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:20.627]    __FlashAddr=0x00000000
[02:45:20.627]    __FlashLen=0x00000000
[02:45:20.627]    __FlashArg=0x00000000
[02:45:20.627]    __FlashOp=0x00000000
[02:45:20.627]    __Result=0x00000000
[02:45:20.627]  </debugvars>
[02:45:20.627]  
[02:45:20.627]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:45:20.627]    <block atomic="false" info="">
[02:45:20.627]      __var SW_DP_ABORT       = 0x0;
[02:45:20.627]        // -> [SW_DP_ABORT <= 0x00000000]
[02:45:20.627]      __var DP_CTRL_STAT      = 0x4;
[02:45:20.627]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:45:20.627]      __var DP_SELECT         = 0x8;
[02:45:20.627]        // -> [DP_SELECT <= 0x00000008]
[02:45:20.627]      __var powered_down      = 0;
[02:45:20.627]        // -> [powered_down <= 0x00000000]
[02:45:20.627]      WriteDP(DP_SELECT, 0x00000000);
[02:45:20.627]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:45:20.637]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:45:20.637]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:45:20.637]        // -> [powered_down <= 0x00000001]
[02:45:20.637]    </block>
[02:45:20.637]    <control if="powered_down" while="" timeout="0" info="">
[02:45:20.637]      // if-block "powered_down"
[02:45:20.637]        // =>  TRUE
[02:45:20.637]      <block atomic="false" info="">
[02:45:20.637]        Message(0, "Debug/System power-up request sent");
[02:45:20.637]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:45:20.637]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:45:20.647]      </block>
[02:45:20.647]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:45:20.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:45:20.647]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:45:20.647]        // while-condition  =>  FALSE
[02:45:20.647]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:45:20.647]      </control>
[02:45:20.647]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:45:20.647]        // if-block "(__protocol & 0xFFFF) == 1"
[02:45:20.647]          // =>  FALSE
[02:45:20.647]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:45:20.647]      </control>
[02:45:20.647]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:45:20.647]        // if-block "(__protocol & 0xFFFF) == 2"
[02:45:20.647]          // =>  TRUE
[02:45:20.647]        <block atomic="false" info="">
[02:45:20.647]          Message(0, "executing SWD power up");
[02:45:20.657]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:45:20.657]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:45:20.657]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:45:20.667]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:45:20.667]        </block>
[02:45:20.667]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:45:20.667]      </control>
[02:45:20.667]      // end if-block "powered_down"
[02:45:20.667]    </control>
[02:45:20.667]    <block atomic="false" info="">
[02:45:20.667]      __var DEBUG_PORT_VAL    = 0;
[02:45:20.667]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:45:20.667]      __var ACCESS_POINT_VAL  = 0;
[02:45:20.667]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:45:20.667]      __ap = 1; 
[02:45:20.667]        // -> [__ap <= 0x00000001]
[02:45:20.667]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:45:20.667]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:45:20.667]      __ap = 4;
[02:45:20.667]        // -> [__ap <= 0x00000004]
[02:45:20.667]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:20.677]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:45:20.677]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:45:20.677]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:20.677]    </block>
[02:45:20.677]    <block atomic="false" info="">
[02:45:20.687]      __var nReset = 0x80;
[02:45:20.687]        // -> [nReset <= 0x00000080]
[02:45:20.687]      __var canReadPins = 0;
[02:45:20.687]        // -> [canReadPins <= 0x00000000]
[02:45:20.687]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:45:20.687]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:45:20.687]        // -> [canReadPins <= 0x00000001]
[02:45:20.687]    </block>
[02:45:20.687]    <control if="" while="1" timeout="200" info="">
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.687]      // while-condition  =>  TRUE
[02:45:20.687]      // while "1"  (timeout="200")
[02:45:20.697]      // while-condition  =>  TRUE
[02:45:20.697]      // while "1"  (timeout="200")
[02:45:20.697]      // while  =>  TIMEOUT
[02:45:20.697]      // end while "1"
[02:45:20.697]    </control>
[02:45:20.697]    <control if="canReadPins" while="" timeout="0" info="">
[02:45:20.697]      // if-block "canReadPins"
[02:45:20.697]        // =>  TRUE
[02:45:20.697]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:45:20.697]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:45:20.697]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:45:20.697]        // while-condition  =>  FALSE
[02:45:20.697]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:45:20.697]      </control>
[02:45:20.697]      // end if-block "canReadPins"
[02:45:20.697]    </control>
[02:45:20.697]    <control if="!canReadPins" while="" timeout="0" info="">
[02:45:20.697]      // if-block "!canReadPins"
[02:45:20.697]        // =>  FALSE
[02:45:20.697]      // skip if-block "!canReadPins"
[02:45:20.697]    </control>
[02:45:20.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:45:20.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:20.697]        // =>  TRUE
[02:45:20.697]      <block atomic="false" info="">
[02:45:20.697]        WriteAP(0x00, 0x190008);
[02:45:20.707]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:20.707]        WriteAP(0xF0, 0x01);
[02:45:20.707]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:45:20.707]      </block>
[02:45:20.707]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:45:20.707]    </control>
[02:45:20.707]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:45:20.707]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:20.707]        // =>  FALSE
[02:45:20.707]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:45:20.707]    </control>
[02:45:20.707]    <block atomic="false" info="">
[02:45:20.707]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:45:20.717]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:45:20.717]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:45:20.717]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:45:20.724]      __ap = 0; //lets make sure we reset the access point selection
[02:45:20.724]        // -> [__ap <= 0x00000000]
[02:45:20.724]    </block>
[02:45:20.724]  </sequence>
[02:45:20.724]  
[02:45:20.757]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:45:20.757]  
[02:45:20.757]  <debugvars>
[02:45:20.757]    // Pre-defined
[02:45:20.757]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:45:20.757]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:45:20.757]    __dp=0x00000000
[02:45:20.757]    __ap=0x00000000
[02:45:20.757]    __traceout=0x00000000      (Trace Disabled)
[02:45:20.757]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:45:20.757]    __FlashAddr=0x00000000
[02:45:20.757]    __FlashLen=0x00000000
[02:45:20.757]    __FlashArg=0x00000000
[02:45:20.757]    __FlashOp=0x00000000
[02:45:20.757]    __Result=0x00000000
[02:45:20.757]  </debugvars>
[02:45:20.757]  
[02:45:20.757]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:45:20.757]    <block atomic="false" info="">
[02:45:20.767]      __var deviceID = 0;
[02:45:20.767]        // -> [deviceID <= 0x00000000]
[02:45:20.767]      __var version = 0;
[02:45:20.767]        // -> [version <= 0x00000000]
[02:45:20.767]      __var partNum = 0;
[02:45:20.767]        // -> [partNum <= 0x00000000]
[02:45:20.767]      __var manuf = 0;
[02:45:20.767]        // -> [manuf <= 0x00000000]
[02:45:20.767]      __var isMSPM0G1X0X_G3X0X = 0;
[02:45:20.767]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:45:20.767]      __var isProduction = 0;
[02:45:20.767]        // -> [isProduction <= 0x00000000]
[02:45:20.767]      __var continueId = 0;
[02:45:20.767]        // -> [continueId <= 0x00000000]
[02:45:20.767]      deviceID =   Read32(0x41C40004);
[02:45:20.767]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:45:20.767]        // -> [deviceID <= 0x2BB8802F]
[02:45:20.767]      version = deviceID >> 28;
[02:45:20.767]        // -> [version <= 0x00000002]
[02:45:20.767]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:45:20.767]        // -> [partNum <= 0x0000BB88]
[02:45:20.767]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:45:20.767]        // -> [manuf <= 0x00000017]
[02:45:20.767]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:45:20.767]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:45:20.767]      isProduction = (version > 0);
[02:45:20.767]        // -> [isProduction <= 0x00000001]
[02:45:20.767]    </block>
[02:45:20.777]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:45:20.777]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:45:20.777]        // =>  FALSE
[02:45:20.777]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:45:20.777]    </control>
[02:45:20.777]    <control if="continueId == 4" while="" timeout="0" info="">
[02:45:20.777]      // if-block "continueId == 4"
[02:45:20.777]        // =>  FALSE
[02:45:20.777]      // skip if-block "continueId == 4"
[02:45:20.777]    </control>
[02:45:20.777]    <control if="!isProduction" while="" timeout="0" info="">
[02:45:20.777]      // if-block "!isProduction"
[02:45:20.777]        // =>  FALSE
[02:45:20.777]      // skip if-block "!isProduction"
[02:45:20.777]    </control>
[02:45:20.777]  </sequence>
[02:45:20.777]  
[03:01:48.130]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:01:48.130]  
[03:01:48.130]  <debugvars>
[03:01:48.130]    // Pre-defined
[03:01:48.130]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:48.130]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:01:48.130]    __dp=0x00000000
[03:01:48.130]    __ap=0x00000000
[03:01:48.130]    __traceout=0x00000000      (Trace Disabled)
[03:01:48.130]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:48.130]    __FlashAddr=0x00000000
[03:01:48.130]    __FlashLen=0x00000000
[03:01:48.130]    __FlashArg=0x00000000
[03:01:48.130]    __FlashOp=0x00000000
[03:01:48.130]    __Result=0x00000000
[03:01:48.130]  </debugvars>
[03:01:48.130]  
[03:01:48.130]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:01:48.130]    <block atomic="false" info="">
[03:01:48.130]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:01:48.130]        // -> [isSWJ <= 0x00000001]
[03:01:48.130]      __var hasDormant = __protocol & 0x00020000;
[03:01:48.130]        // -> [hasDormant <= 0x00000000]
[03:01:48.130]      __var protType   = __protocol & 0x0000FFFF;
[03:01:48.130]        // -> [protType <= 0x00000002]
[03:01:48.130]    </block>
[03:01:48.130]    <control if="protType == 1" while="" timeout="0" info="">
[03:01:48.140]      // if-block "protType == 1"
[03:01:48.140]        // =>  FALSE
[03:01:48.140]      // skip if-block "protType == 1"
[03:01:48.140]    </control>
[03:01:48.140]    <control if="protType == 2" while="" timeout="0" info="">
[03:01:48.140]      // if-block "protType == 2"
[03:01:48.140]        // =>  TRUE
[03:01:48.140]      <control if="isSWJ" while="" timeout="0" info="">
[03:01:48.140]        // if-block "isSWJ"
[03:01:48.140]          // =>  TRUE
[03:01:48.140]        <control if="hasDormant" while="" timeout="0" info="">
[03:01:48.140]          // if-block "hasDormant"
[03:01:48.140]            // =>  FALSE
[03:01:48.140]          // skip if-block "hasDormant"
[03:01:48.140]        </control>
[03:01:48.140]        <control if="!hasDormant" while="" timeout="0" info="">
[03:01:48.140]          // if-block "!hasDormant"
[03:01:48.140]            // =>  TRUE
[03:01:48.140]          <block atomic="false" info="">
[03:01:48.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:01:48.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:01:48.140]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:01:48.153]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:01:48.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:01:48.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:01:48.153]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:01:48.153]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:01:48.153]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:01:49.217]  
[03:01:49.217]  !!! E320 : DAP access error
[03:01:49.217]  
[03:01:49.217]          </block>
[03:01:49.217]          // end if-block "!hasDormant"
[03:01:49.217]        </control>
[03:01:49.217]        // end if-block "isSWJ"
[03:01:49.217]      </control>
[03:01:49.217]      // end if-block "protType == 2"
[03:01:49.217]    </control>
[03:01:49.217]  </sequence>
[03:01:49.217]  
[03:01:51.857]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:01:51.857]  
[03:01:51.868]  <debugvars>
[03:01:51.868]    // Pre-defined
[03:01:51.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:51.868]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:01:51.868]    __dp=0x00000000
[03:01:51.868]    __ap=0x00000000
[03:01:51.868]    __traceout=0x00000000      (Trace Disabled)
[03:01:51.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:51.868]    __FlashAddr=0x00000000
[03:01:51.868]    __FlashLen=0x00000000
[03:01:51.868]    __FlashArg=0x00000000
[03:01:51.868]    __FlashOp=0x00000000
[03:01:51.868]    __Result=0x00000000
[03:01:51.868]  </debugvars>
[03:01:51.868]  
[03:01:51.868]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:01:51.868]    <block atomic="false" info="">
[03:01:51.868]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:01:51.868]        // -> [isSWJ <= 0x00000001]
[03:01:51.868]      __var hasDormant = __protocol & 0x00020000;
[03:01:51.868]        // -> [hasDormant <= 0x00000000]
[03:01:51.868]      __var protType   = __protocol & 0x0000FFFF;
[03:01:51.868]        // -> [protType <= 0x00000002]
[03:01:51.868]    </block>
[03:01:51.868]    <control if="protType == 1" while="" timeout="0" info="">
[03:01:51.868]      // if-block "protType == 1"
[03:01:51.868]        // =>  FALSE
[03:01:51.868]      // skip if-block "protType == 1"
[03:01:51.868]    </control>
[03:01:51.868]    <control if="protType == 2" while="" timeout="0" info="">
[03:01:51.868]      // if-block "protType == 2"
[03:01:51.868]        // =>  TRUE
[03:01:51.868]      <control if="isSWJ" while="" timeout="0" info="">
[03:01:51.868]        // if-block "isSWJ"
[03:01:51.868]          // =>  TRUE
[03:01:51.868]        <control if="hasDormant" while="" timeout="0" info="">
[03:01:51.868]          // if-block "hasDormant"
[03:01:51.868]            // =>  FALSE
[03:01:51.868]          // skip if-block "hasDormant"
[03:01:51.868]        </control>
[03:01:51.868]        <control if="!hasDormant" while="" timeout="0" info="">
[03:01:51.868]          // if-block "!hasDormant"
[03:01:51.868]            // =>  TRUE
[03:01:51.868]          <block atomic="false" info="">
[03:01:51.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:01:51.877]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:01:51.877]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:01:52.908]  
[03:01:52.908]  !!! E320 : DAP access error
[03:01:52.908]  
[03:01:52.922]          </block>
[03:01:52.922]          // end if-block "!hasDormant"
[03:01:52.922]        </control>
[03:01:52.922]        // end if-block "isSWJ"
[03:01:52.922]      </control>
[03:01:52.922]      // end if-block "protType == 2"
[03:01:52.922]    </control>
[03:01:52.922]  </sequence>
[03:01:52.922]  
[03:01:55.859]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:01:55.859]  
[03:01:55.867]  <debugvars>
[03:01:55.867]    // Pre-defined
[03:01:55.867]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:55.867]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:01:55.867]    __dp=0x00000000
[03:01:55.867]    __ap=0x00000000
[03:01:55.869]    __traceout=0x00000000      (Trace Disabled)
[03:01:55.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:55.869]    __FlashAddr=0x00000000
[03:01:55.869]    __FlashLen=0x00000000
[03:01:55.869]    __FlashArg=0x00000000
[03:01:55.869]    __FlashOp=0x00000000
[03:01:55.869]    __Result=0x00000000
[03:01:55.869]  </debugvars>
[03:01:55.869]  
[03:01:55.869]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:01:55.869]    <block atomic="false" info="">
[03:01:55.869]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:01:55.869]        // -> [isSWJ <= 0x00000001]
[03:01:55.869]      __var hasDormant = __protocol & 0x00020000;
[03:01:55.869]        // -> [hasDormant <= 0x00000000]
[03:01:55.869]      __var protType   = __protocol & 0x0000FFFF;
[03:01:55.869]        // -> [protType <= 0x00000002]
[03:01:55.869]    </block>
[03:01:55.869]    <control if="protType == 1" while="" timeout="0" info="">
[03:01:55.869]      // if-block "protType == 1"
[03:01:55.869]        // =>  FALSE
[03:01:55.869]      // skip if-block "protType == 1"
[03:01:55.869]    </control>
[03:01:55.869]    <control if="protType == 2" while="" timeout="0" info="">
[03:01:55.869]      // if-block "protType == 2"
[03:01:55.869]        // =>  TRUE
[03:01:55.869]      <control if="isSWJ" while="" timeout="0" info="">
[03:01:55.869]        // if-block "isSWJ"
[03:01:55.869]          // =>  TRUE
[03:01:55.869]        <control if="hasDormant" while="" timeout="0" info="">
[03:01:55.869]          // if-block "hasDormant"
[03:01:55.869]            // =>  FALSE
[03:01:55.869]          // skip if-block "hasDormant"
[03:01:55.869]        </control>
[03:01:55.869]        <control if="!hasDormant" while="" timeout="0" info="">
[03:01:55.869]          // if-block "!hasDormant"
[03:01:55.869]            // =>  TRUE
[03:01:55.869]          <block atomic="false" info="">
[03:01:55.869]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:01:55.881]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:01:55.881]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:01:55.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:01:55.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:01:55.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:01:55.889]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:01:55.889]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:01:55.889]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:01:55.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:01:55.889]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:01:55.899]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:01:55.899]          </block>
[03:01:55.899]          // end if-block "!hasDormant"
[03:01:55.899]        </control>
[03:01:55.899]        // end if-block "isSWJ"
[03:01:55.899]      </control>
[03:01:55.899]      <control if="!isSWJ" while="" timeout="0" info="">
[03:01:55.899]        // if-block "!isSWJ"
[03:01:55.899]          // =>  FALSE
[03:01:55.899]        // skip if-block "!isSWJ"
[03:01:55.899]      </control>
[03:01:55.899]      <block atomic="false" info="">
[03:01:55.899]        ReadDP(0x0);
[03:01:55.899]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:01:55.899]      </block>
[03:01:55.899]      // end if-block "protType == 2"
[03:01:55.899]    </control>
[03:01:55.899]  </sequence>
[03:01:55.899]  
[03:01:55.914]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:01:55.914]  
[03:01:55.914]  <debugvars>
[03:01:55.914]    // Pre-defined
[03:01:55.914]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:01:55.914]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:01:55.914]    __dp=0x00000000
[03:01:55.914]    __ap=0x00000000
[03:01:55.914]    __traceout=0x00000000      (Trace Disabled)
[03:01:55.914]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:01:55.914]    __FlashAddr=0x00000000
[03:01:55.914]    __FlashLen=0x00000000
[03:01:55.914]    __FlashArg=0x00000000
[03:01:55.914]    __FlashOp=0x00000000
[03:01:55.914]    __Result=0x00000000
[03:01:55.914]  </debugvars>
[03:01:55.914]  
[03:01:55.914]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:01:55.914]    <block atomic="false" info="">
[03:01:55.914]      __var SW_DP_ABORT       = 0x0;
[03:01:55.914]        // -> [SW_DP_ABORT <= 0x00000000]
[03:01:55.919]      __var DP_CTRL_STAT      = 0x4;
[03:01:55.919]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:01:55.919]      __var DP_SELECT         = 0x8;
[03:01:55.919]        // -> [DP_SELECT <= 0x00000008]
[03:01:55.919]      __var powered_down      = 0;
[03:01:55.919]        // -> [powered_down <= 0x00000000]
[03:01:55.919]      WriteDP(DP_SELECT, 0x00000000);
[03:01:55.919]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:01:55.919]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:01:55.919]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[03:01:55.919]        // -> [powered_down <= 0x00000000]
[03:01:55.929]    </block>
[03:01:55.929]    <control if="powered_down" while="" timeout="0" info="">
[03:01:55.929]      // if-block "powered_down"
[03:01:55.929]        // =>  FALSE
[03:01:55.929]      // skip if-block "powered_down"
[03:01:55.929]    </control>
[03:01:55.929]    <block atomic="false" info="">
[03:01:55.929]      __var DEBUG_PORT_VAL    = 0;
[03:01:55.929]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:01:55.929]      __var ACCESS_POINT_VAL  = 0;
[03:01:55.929]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:01:55.929]      __ap = 1; 
[03:01:55.929]        // -> [__ap <= 0x00000001]
[03:01:55.929]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:01:55.939]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:01:55.939]      __ap = 4;
[03:01:55.939]        // -> [__ap <= 0x00000004]
[03:01:55.939]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:01:55.949]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[03:01:55.949]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[03:01:55.949]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:01:55.949]    </block>
[03:01:55.949]    <block atomic="false" info="">
[03:01:55.949]      __var nReset = 0x80;
[03:01:55.949]        // -> [nReset <= 0x00000080]
[03:01:55.949]      __var canReadPins = 0;
[03:01:55.949]        // -> [canReadPins <= 0x00000000]
[03:01:55.949]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:01:56.979]  
[03:01:56.979]  !!! E320 : DAP access error
[03:01:56.979]  
[03:01:56.988]    </block>
[03:01:56.988]  </sequence>
[03:01:56.988]  
[03:02:13.746]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:02:13.746]  
[03:02:13.758]  <debugvars>
[03:02:13.758]    // Pre-defined
[03:02:13.758]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:13.758]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:13.758]    __dp=0x00000000
[03:02:13.758]    __ap=0x00000000
[03:02:13.758]    __traceout=0x00000000      (Trace Disabled)
[03:02:13.758]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:13.758]    __FlashAddr=0x00000000
[03:02:13.758]    __FlashLen=0x00000000
[03:02:13.758]    __FlashArg=0x00000000
[03:02:13.758]    __FlashOp=0x00000000
[03:02:13.758]    __Result=0x00000000
[03:02:13.758]  </debugvars>
[03:02:13.758]  
[03:02:13.758]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:02:13.758]    <block atomic="false" info="">
[03:02:13.758]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:02:13.762]        // -> [isSWJ <= 0x00000001]
[03:02:13.762]      __var hasDormant = __protocol & 0x00020000;
[03:02:13.762]        // -> [hasDormant <= 0x00000000]
[03:02:13.762]      __var protType   = __protocol & 0x0000FFFF;
[03:02:13.762]        // -> [protType <= 0x00000002]
[03:02:13.762]    </block>
[03:02:13.762]    <control if="protType == 1" while="" timeout="0" info="">
[03:02:13.762]      // if-block "protType == 1"
[03:02:13.762]        // =>  FALSE
[03:02:13.762]      // skip if-block "protType == 1"
[03:02:13.762]    </control>
[03:02:13.762]    <control if="protType == 2" while="" timeout="0" info="">
[03:02:13.762]      // if-block "protType == 2"
[03:02:13.762]        // =>  TRUE
[03:02:13.762]      <control if="isSWJ" while="" timeout="0" info="">
[03:02:13.762]        // if-block "isSWJ"
[03:02:13.762]          // =>  TRUE
[03:02:13.762]        <control if="hasDormant" while="" timeout="0" info="">
[03:02:13.762]          // if-block "hasDormant"
[03:02:13.762]            // =>  FALSE
[03:02:13.762]          // skip if-block "hasDormant"
[03:02:13.762]        </control>
[03:02:13.762]        <control if="!hasDormant" while="" timeout="0" info="">
[03:02:13.762]          // if-block "!hasDormant"
[03:02:13.762]            // =>  TRUE
[03:02:13.762]          <block atomic="false" info="">
[03:02:13.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:02:13.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:13.767]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:02:13.767]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:02:13.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:02:13.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:13.777]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:02:13.787]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:02:13.787]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:02:13.787]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:13.787]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:02:13.787]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:02:13.787]          </block>
[03:02:13.787]          // end if-block "!hasDormant"
[03:02:13.787]        </control>
[03:02:13.787]        // end if-block "isSWJ"
[03:02:13.787]      </control>
[03:02:13.787]      <control if="!isSWJ" while="" timeout="0" info="">
[03:02:13.797]        // if-block "!isSWJ"
[03:02:13.797]          // =>  FALSE
[03:02:13.797]        // skip if-block "!isSWJ"
[03:02:13.797]      </control>
[03:02:13.797]      <block atomic="false" info="">
[03:02:13.797]        ReadDP(0x0);
[03:02:13.797]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:02:13.797]      </block>
[03:02:13.797]      // end if-block "protType == 2"
[03:02:13.797]    </control>
[03:02:13.797]  </sequence>
[03:02:13.797]  
[03:02:13.807]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:02:13.807]  
[03:02:13.807]  <debugvars>
[03:02:13.807]    // Pre-defined
[03:02:13.807]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:13.807]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:13.807]    __dp=0x00000000
[03:02:13.807]    __ap=0x00000000
[03:02:13.807]    __traceout=0x00000000      (Trace Disabled)
[03:02:13.807]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:13.807]    __FlashAddr=0x00000000
[03:02:13.807]    __FlashLen=0x00000000
[03:02:13.807]    __FlashArg=0x00000000
[03:02:13.807]    __FlashOp=0x00000000
[03:02:13.807]    __Result=0x00000000
[03:02:13.807]  </debugvars>
[03:02:13.807]  
[03:02:13.807]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:02:13.807]    <block atomic="false" info="">
[03:02:13.807]      __var SW_DP_ABORT       = 0x0;
[03:02:13.807]        // -> [SW_DP_ABORT <= 0x00000000]
[03:02:13.807]      __var DP_CTRL_STAT      = 0x4;
[03:02:13.807]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:02:13.807]      __var DP_SELECT         = 0x8;
[03:02:13.807]        // -> [DP_SELECT <= 0x00000008]
[03:02:13.807]      __var powered_down      = 0;
[03:02:13.807]        // -> [powered_down <= 0x00000000]
[03:02:13.807]      WriteDP(DP_SELECT, 0x00000000);
[03:02:13.807]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:02:13.817]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:02:13.817]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:02:13.817]        // -> [powered_down <= 0x00000001]
[03:02:13.817]    </block>
[03:02:13.817]    <control if="powered_down" while="" timeout="0" info="">
[03:02:13.817]      // if-block "powered_down"
[03:02:13.817]        // =>  TRUE
[03:02:13.817]      <block atomic="false" info="">
[03:02:13.817]        Message(0, "Debug/System power-up request sent");
[03:02:13.817]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:02:14.863]  
[03:02:14.863]  !!! E310 : Debug access failed - cannot write value 0x50000000 to DP register 0x04
[03:02:14.863]  
[03:02:14.867]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:02:14.867]      </block>
[03:02:14.867]      // end if-block "powered_down"
[03:02:14.867]    </control>
[03:02:14.867]  </sequence>
[03:02:14.867]  
[03:02:29.924]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:02:29.924]  
[03:02:29.940]  <debugvars>
[03:02:29.940]    // Pre-defined
[03:02:29.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:29.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:29.940]    __dp=0x00000000
[03:02:29.940]    __ap=0x00000000
[03:02:29.940]    __traceout=0x00000000      (Trace Disabled)
[03:02:29.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:29.940]    __FlashAddr=0x00000000
[03:02:29.940]    __FlashLen=0x00000000
[03:02:29.940]    __FlashArg=0x00000000
[03:02:29.940]    __FlashOp=0x00000000
[03:02:29.940]    __Result=0x00000000
[03:02:29.940]  </debugvars>
[03:02:29.940]  
[03:02:29.940]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:02:29.940]    <block atomic="false" info="">
[03:02:29.940]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:02:29.940]        // -> [isSWJ <= 0x00000001]
[03:02:29.940]      __var hasDormant = __protocol & 0x00020000;
[03:02:29.940]        // -> [hasDormant <= 0x00000000]
[03:02:29.940]      __var protType   = __protocol & 0x0000FFFF;
[03:02:29.940]        // -> [protType <= 0x00000002]
[03:02:29.940]    </block>
[03:02:29.940]    <control if="protType == 1" while="" timeout="0" info="">
[03:02:29.940]      // if-block "protType == 1"
[03:02:29.944]        // =>  FALSE
[03:02:29.944]      // skip if-block "protType == 1"
[03:02:29.944]    </control>
[03:02:29.944]    <control if="protType == 2" while="" timeout="0" info="">
[03:02:29.944]      // if-block "protType == 2"
[03:02:29.944]        // =>  TRUE
[03:02:29.944]      <control if="isSWJ" while="" timeout="0" info="">
[03:02:29.944]        // if-block "isSWJ"
[03:02:29.944]          // =>  TRUE
[03:02:29.944]        <control if="hasDormant" while="" timeout="0" info="">
[03:02:29.944]          // if-block "hasDormant"
[03:02:29.944]            // =>  FALSE
[03:02:29.944]          // skip if-block "hasDormant"
[03:02:29.944]        </control>
[03:02:29.944]        <control if="!hasDormant" while="" timeout="0" info="">
[03:02:29.944]          // if-block "!hasDormant"
[03:02:29.944]            // =>  TRUE
[03:02:29.944]          <block atomic="false" info="">
[03:02:29.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:02:29.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:29.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:02:29.944]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:02:29.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:02:29.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:29.954]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:02:29.954]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:02:29.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:02:29.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:29.954]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:02:29.964]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:02:29.964]          </block>
[03:02:29.964]          // end if-block "!hasDormant"
[03:02:29.964]        </control>
[03:02:29.964]        // end if-block "isSWJ"
[03:02:29.964]      </control>
[03:02:29.964]      <control if="!isSWJ" while="" timeout="0" info="">
[03:02:29.964]        // if-block "!isSWJ"
[03:02:29.964]          // =>  FALSE
[03:02:29.964]        // skip if-block "!isSWJ"
[03:02:29.964]      </control>
[03:02:29.964]      <block atomic="false" info="">
[03:02:29.964]        ReadDP(0x0);
[03:02:29.978]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:02:29.978]      </block>
[03:02:29.978]      // end if-block "protType == 2"
[03:02:29.978]    </control>
[03:02:29.978]  </sequence>
[03:02:29.978]  
[03:02:29.984]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:02:29.984]  
[03:02:29.984]  <debugvars>
[03:02:29.984]    // Pre-defined
[03:02:29.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:29.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:29.984]    __dp=0x00000000
[03:02:29.984]    __ap=0x00000000
[03:02:29.984]    __traceout=0x00000000      (Trace Disabled)
[03:02:29.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:29.984]    __FlashAddr=0x00000000
[03:02:29.984]    __FlashLen=0x00000000
[03:02:29.984]    __FlashArg=0x00000000
[03:02:29.984]    __FlashOp=0x00000000
[03:02:29.984]    __Result=0x00000000
[03:02:29.984]  </debugvars>
[03:02:29.984]  
[03:02:29.984]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:02:29.984]    <block atomic="false" info="">
[03:02:29.984]      __var SW_DP_ABORT       = 0x0;
[03:02:29.984]        // -> [SW_DP_ABORT <= 0x00000000]
[03:02:29.984]      __var DP_CTRL_STAT      = 0x4;
[03:02:29.984]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:02:29.984]      __var DP_SELECT         = 0x8;
[03:02:29.984]        // -> [DP_SELECT <= 0x00000008]
[03:02:29.984]      __var powered_down      = 0;
[03:02:29.984]        // -> [powered_down <= 0x00000000]
[03:02:29.984]      WriteDP(DP_SELECT, 0x00000000);
[03:02:29.994]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:02:29.994]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:02:29.994]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:02:29.994]        // -> [powered_down <= 0x00000001]
[03:02:29.994]    </block>
[03:02:29.994]    <control if="powered_down" while="" timeout="0" info="">
[03:02:29.994]      // if-block "powered_down"
[03:02:29.994]        // =>  TRUE
[03:02:29.994]      <block atomic="false" info="">
[03:02:29.994]        Message(0, "Debug/System power-up request sent");
[03:02:29.994]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:02:30.004]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:02:30.004]      </block>
[03:02:30.004]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:02:30.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:02:30.014]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:02:30.014]        // while-condition  =>  FALSE
[03:02:30.014]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:02:30.014]      </control>
[03:02:30.014]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:02:30.014]        // if-block "(__protocol & 0xFFFF) == 1"
[03:02:30.014]          // =>  FALSE
[03:02:30.014]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:02:30.014]      </control>
[03:02:30.014]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:02:30.014]        // if-block "(__protocol & 0xFFFF) == 2"
[03:02:30.014]          // =>  TRUE
[03:02:30.014]        <block atomic="false" info="">
[03:02:30.014]          Message(0, "executing SWD power up");
[03:02:30.014]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:02:30.014]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:02:30.014]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:02:30.024]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:02:30.024]        </block>
[03:02:30.024]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:02:30.024]      </control>
[03:02:30.024]      // end if-block "powered_down"
[03:02:30.024]    </control>
[03:02:30.024]    <block atomic="false" info="">
[03:02:30.024]      __var DEBUG_PORT_VAL    = 0;
[03:02:30.024]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:02:30.024]      __var ACCESS_POINT_VAL  = 0;
[03:02:30.024]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:02:30.024]      __ap = 1; 
[03:02:30.024]        // -> [__ap <= 0x00000001]
[03:02:30.024]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:02:30.034]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:02:30.034]      __ap = 4;
[03:02:30.034]        // -> [__ap <= 0x00000004]
[03:02:30.034]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:02:30.064]  
[03:02:30.064]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[03:02:30.064]  
[03:02:30.064]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[03:02:30.064]    </block>
[03:02:30.064]  </sequence>
[03:02:30.064]  
[03:02:34.885]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:02:34.885]  
[03:02:34.885]  <debugvars>
[03:02:34.885]    // Pre-defined
[03:02:34.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:34.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:34.885]    __dp=0x00000000
[03:02:34.885]    __ap=0x00000000
[03:02:34.885]    __traceout=0x00000000      (Trace Disabled)
[03:02:34.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:34.885]    __FlashAddr=0x00000000
[03:02:34.885]    __FlashLen=0x00000000
[03:02:34.895]    __FlashArg=0x00000000
[03:02:34.895]    __FlashOp=0x00000000
[03:02:34.895]    __Result=0x00000000
[03:02:34.895]  </debugvars>
[03:02:34.895]  
[03:02:34.895]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:02:34.895]    <block atomic="false" info="">
[03:02:34.895]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:02:34.895]        // -> [isSWJ <= 0x00000001]
[03:02:34.895]      __var hasDormant = __protocol & 0x00020000;
[03:02:34.895]        // -> [hasDormant <= 0x00000000]
[03:02:34.895]      __var protType   = __protocol & 0x0000FFFF;
[03:02:34.895]        // -> [protType <= 0x00000002]
[03:02:34.895]    </block>
[03:02:34.895]    <control if="protType == 1" while="" timeout="0" info="">
[03:02:34.895]      // if-block "protType == 1"
[03:02:34.895]        // =>  FALSE
[03:02:34.895]      // skip if-block "protType == 1"
[03:02:34.895]    </control>
[03:02:34.895]    <control if="protType == 2" while="" timeout="0" info="">
[03:02:34.895]      // if-block "protType == 2"
[03:02:34.895]        // =>  TRUE
[03:02:34.895]      <control if="isSWJ" while="" timeout="0" info="">
[03:02:34.895]        // if-block "isSWJ"
[03:02:34.895]          // =>  TRUE
[03:02:34.895]        <control if="hasDormant" while="" timeout="0" info="">
[03:02:34.895]          // if-block "hasDormant"
[03:02:34.895]            // =>  FALSE
[03:02:34.895]          // skip if-block "hasDormant"
[03:02:34.895]        </control>
[03:02:34.895]        <control if="!hasDormant" while="" timeout="0" info="">
[03:02:34.895]          // if-block "!hasDormant"
[03:02:34.895]            // =>  TRUE
[03:02:34.895]          <block atomic="false" info="">
[03:02:34.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:02:34.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:34.895]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:02:34.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:02:34.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:02:34.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:34.912]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:02:34.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:02:34.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:02:34.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:34.915]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:02:34.915]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:02:34.915]          </block>
[03:02:34.915]          // end if-block "!hasDormant"
[03:02:34.915]        </control>
[03:02:34.915]        // end if-block "isSWJ"
[03:02:34.915]      </control>
[03:02:34.915]      <control if="!isSWJ" while="" timeout="0" info="">
[03:02:34.915]        // if-block "!isSWJ"
[03:02:34.915]          // =>  FALSE
[03:02:34.915]        // skip if-block "!isSWJ"
[03:02:34.915]      </control>
[03:02:34.915]      <block atomic="false" info="">
[03:02:34.915]        ReadDP(0x0);
[03:02:34.955]  
[03:02:34.955]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:02:34.955]  
[03:02:34.965]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:02:34.965]      </block>
[03:02:34.965]      // end if-block "protType == 2"
[03:02:34.965]    </control>
[03:02:34.965]  </sequence>
[03:02:34.972]  
[03:02:45.238]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:02:45.238]  
[03:02:45.238]  <debugvars>
[03:02:45.238]    // Pre-defined
[03:02:45.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:45.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:45.238]    __dp=0x00000000
[03:02:45.238]    __ap=0x00000000
[03:02:45.238]    __traceout=0x00000000      (Trace Disabled)
[03:02:45.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:45.238]    __FlashAddr=0x00000000
[03:02:45.238]    __FlashLen=0x00000000
[03:02:45.238]    __FlashArg=0x00000000
[03:02:45.238]    __FlashOp=0x00000000
[03:02:45.238]    __Result=0x00000000
[03:02:45.238]  </debugvars>
[03:02:45.238]  
[03:02:45.238]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:02:45.238]    <block atomic="false" info="">
[03:02:45.238]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:02:45.238]        // -> [isSWJ <= 0x00000001]
[03:02:45.238]      __var hasDormant = __protocol & 0x00020000;
[03:02:45.238]        // -> [hasDormant <= 0x00000000]
[03:02:45.238]      __var protType   = __protocol & 0x0000FFFF;
[03:02:45.238]        // -> [protType <= 0x00000002]
[03:02:45.248]    </block>
[03:02:45.248]    <control if="protType == 1" while="" timeout="0" info="">
[03:02:45.248]      // if-block "protType == 1"
[03:02:45.248]        // =>  FALSE
[03:02:45.248]      // skip if-block "protType == 1"
[03:02:45.248]    </control>
[03:02:45.248]    <control if="protType == 2" while="" timeout="0" info="">
[03:02:45.248]      // if-block "protType == 2"
[03:02:45.248]        // =>  TRUE
[03:02:45.248]      <control if="isSWJ" while="" timeout="0" info="">
[03:02:45.248]        // if-block "isSWJ"
[03:02:45.248]          // =>  TRUE
[03:02:45.248]        <control if="hasDormant" while="" timeout="0" info="">
[03:02:45.248]          // if-block "hasDormant"
[03:02:45.248]            // =>  FALSE
[03:02:45.248]          // skip if-block "hasDormant"
[03:02:45.248]        </control>
[03:02:45.248]        <control if="!hasDormant" while="" timeout="0" info="">
[03:02:45.248]          // if-block "!hasDormant"
[03:02:45.248]            // =>  TRUE
[03:02:45.248]          <block atomic="false" info="">
[03:02:45.248]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:02:45.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:45.248]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:02:45.248]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:02:45.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:02:45.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:45.258]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:02:45.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:02:45.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:02:45.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:02:45.268]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:02:45.268]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:02:45.268]          </block>
[03:02:45.268]          // end if-block "!hasDormant"
[03:02:45.268]        </control>
[03:02:45.268]        // end if-block "isSWJ"
[03:02:45.268]      </control>
[03:02:45.268]      <control if="!isSWJ" while="" timeout="0" info="">
[03:02:45.268]        // if-block "!isSWJ"
[03:02:45.268]          // =>  FALSE
[03:02:45.268]        // skip if-block "!isSWJ"
[03:02:45.268]      </control>
[03:02:45.274]      <block atomic="false" info="">
[03:02:45.274]        ReadDP(0x0);
[03:02:45.274]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:02:45.278]      </block>
[03:02:45.278]      // end if-block "protType == 2"
[03:02:45.278]    </control>
[03:02:45.278]  </sequence>
[03:02:45.278]  
[03:02:45.280]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:02:45.280]  
[03:02:45.280]  <debugvars>
[03:02:45.280]    // Pre-defined
[03:02:45.280]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:02:45.280]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:02:45.280]    __dp=0x00000000
[03:02:45.280]    __ap=0x00000000
[03:02:45.280]    __traceout=0x00000000      (Trace Disabled)
[03:02:45.280]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:02:45.280]    __FlashAddr=0x00000000
[03:02:45.280]    __FlashLen=0x00000000
[03:02:45.280]    __FlashArg=0x00000000
[03:02:45.280]    __FlashOp=0x00000000
[03:02:45.280]    __Result=0x00000000
[03:02:45.280]  </debugvars>
[03:02:45.280]  
[03:02:45.280]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:02:45.280]    <block atomic="false" info="">
[03:02:45.280]      __var SW_DP_ABORT       = 0x0;
[03:02:45.288]        // -> [SW_DP_ABORT <= 0x00000000]
[03:02:45.288]      __var DP_CTRL_STAT      = 0x4;
[03:02:45.288]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:02:45.288]      __var DP_SELECT         = 0x8;
[03:02:45.288]        // -> [DP_SELECT <= 0x00000008]
[03:02:45.288]      __var powered_down      = 0;
[03:02:45.288]        // -> [powered_down <= 0x00000000]
[03:02:45.288]      WriteDP(DP_SELECT, 0x00000000);
[03:02:45.291]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:02:45.291]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:02:45.298]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:02:45.298]        // -> [powered_down <= 0x00000001]
[03:02:45.298]    </block>
[03:02:45.298]    <control if="powered_down" while="" timeout="0" info="">
[03:02:45.298]      // if-block "powered_down"
[03:02:45.298]        // =>  TRUE
[03:02:45.298]      <block atomic="false" info="">
[03:02:45.298]        Message(0, "Debug/System power-up request sent");
[03:02:45.298]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:02:45.307]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:02:45.307]      </block>
[03:02:45.307]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:02:45.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:02:45.307]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:02:45.307]        // while-condition  =>  FALSE
[03:02:45.307]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:02:45.307]      </control>
[03:02:45.307]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:02:45.307]        // if-block "(__protocol & 0xFFFF) == 1"
[03:02:45.307]          // =>  FALSE
[03:02:45.307]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:02:45.307]      </control>
[03:02:45.307]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:02:45.307]        // if-block "(__protocol & 0xFFFF) == 2"
[03:02:45.307]          // =>  TRUE
[03:02:45.307]        <block atomic="false" info="">
[03:02:45.307]          Message(0, "executing SWD power up");
[03:02:45.324]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:02:45.327]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:02:45.327]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:02:45.327]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:02:45.327]        </block>
[03:02:45.327]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:02:45.327]      </control>
[03:02:45.327]      // end if-block "powered_down"
[03:02:45.327]    </control>
[03:02:45.327]    <block atomic="false" info="">
[03:02:45.327]      __var DEBUG_PORT_VAL    = 0;
[03:02:45.327]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:02:45.327]      __var ACCESS_POINT_VAL  = 0;
[03:02:45.327]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:02:45.327]      __ap = 1; 
[03:02:45.327]        // -> [__ap <= 0x00000001]
[03:02:45.327]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:02:45.337]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:02:45.337]      __ap = 4;
[03:02:45.337]        // -> [__ap <= 0x00000004]
[03:02:45.337]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:02:45.347]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:02:45.347]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:02:45.347]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:02:45.347]    </block>
[03:02:45.347]    <block atomic="false" info="">
[03:02:45.347]      __var nReset = 0x80;
[03:02:45.347]        // -> [nReset <= 0x00000080]
[03:02:45.347]      __var canReadPins = 0;
[03:02:45.347]        // -> [canReadPins <= 0x00000000]
[03:02:45.347]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:02:45.357]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:02:45.357]        // -> [canReadPins <= 0x00000001]
[03:02:45.357]    </block>
[03:02:45.357]    <control if="" while="1" timeout="200" info="">
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.357]      // while-condition  =>  TRUE
[03:02:45.357]      // while "1"  (timeout="200")
[03:02:45.367]      // while-condition  =>  TRUE
[03:02:45.367]      // while "1"  (timeout="200")
[03:02:45.367]      // while  =>  TIMEOUT
[03:02:45.367]      // end while "1"
[03:02:45.367]    </control>
[03:02:45.367]    <control if="canReadPins" while="" timeout="0" info="">
[03:02:45.367]      // if-block "canReadPins"
[03:02:45.367]        // =>  TRUE
[03:02:45.367]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:02:45.367]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:02:45.367]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:02:45.367]        // while-condition  =>  FALSE
[03:02:45.367]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:02:45.367]      </control>
[03:02:45.367]      // end if-block "canReadPins"
[03:02:45.367]    </control>
[03:02:45.367]    <control if="!canReadPins" while="" timeout="0" info="">
[03:02:45.367]      // if-block "!canReadPins"
[03:02:45.367]        // =>  FALSE
[03:02:45.367]      // skip if-block "!canReadPins"
[03:02:45.367]    </control>
[03:02:45.367]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:02:45.367]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:02:45.367]        // =>  TRUE
[03:02:45.367]      <block atomic="false" info="">
[03:02:45.367]        WriteAP(0x00, 0x190008);
[03:02:45.380]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:02:45.380]        WriteAP(0xF0, 0x01);
[03:02:45.387]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:02:45.387]      </block>
[03:02:45.387]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:02:45.387]    </control>
[03:02:45.387]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:02:45.387]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:02:45.387]        // =>  FALSE
[03:02:45.387]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:02:45.387]    </control>
[03:02:45.387]    <block atomic="false" info="">
[03:02:45.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:02:45.397]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:02:45.397]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:02:45.397]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:02:45.407]      __ap = 0; //lets make sure we reset the access point selection
[03:02:45.407]        // -> [__ap <= 0x00000000]
[03:02:45.407]    </block>
[03:02:45.407]  </sequence>
[03:02:45.407]  
[03:03:20.706]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:03:20.706]  
[03:03:20.706]  <debugvars>
[03:03:20.706]    // Pre-defined
[03:03:20.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:20.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:03:20.706]    __dp=0x00000000
[03:03:20.706]    __ap=0x00000000
[03:03:20.706]    __traceout=0x00000000      (Trace Disabled)
[03:03:20.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:20.706]    __FlashAddr=0x00000000
[03:03:20.706]    __FlashLen=0x00000000
[03:03:20.706]    __FlashArg=0x00000000
[03:03:20.706]    __FlashOp=0x00000000
[03:03:20.706]    __Result=0x00000000
[03:03:20.706]  </debugvars>
[03:03:20.706]  
[03:03:20.706]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:03:20.706]    <block atomic="false" info="">
[03:03:20.706]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:03:20.706]        // -> [isSWJ <= 0x00000001]
[03:03:20.706]      __var hasDormant = __protocol & 0x00020000;
[03:03:20.706]        // -> [hasDormant <= 0x00000000]
[03:03:20.706]      __var protType   = __protocol & 0x0000FFFF;
[03:03:20.716]        // -> [protType <= 0x00000002]
[03:03:20.716]    </block>
[03:03:20.716]    <control if="protType == 1" while="" timeout="0" info="">
[03:03:20.716]      // if-block "protType == 1"
[03:03:20.716]        // =>  FALSE
[03:03:20.716]      // skip if-block "protType == 1"
[03:03:20.716]    </control>
[03:03:20.716]    <control if="protType == 2" while="" timeout="0" info="">
[03:03:20.716]      // if-block "protType == 2"
[03:03:20.716]        // =>  TRUE
[03:03:20.716]      <control if="isSWJ" while="" timeout="0" info="">
[03:03:20.716]        // if-block "isSWJ"
[03:03:20.716]          // =>  TRUE
[03:03:20.716]        <control if="hasDormant" while="" timeout="0" info="">
[03:03:20.716]          // if-block "hasDormant"
[03:03:20.716]            // =>  FALSE
[03:03:20.716]          // skip if-block "hasDormant"
[03:03:20.716]        </control>
[03:03:20.716]        <control if="!hasDormant" while="" timeout="0" info="">
[03:03:20.716]          // if-block "!hasDormant"
[03:03:20.716]            // =>  TRUE
[03:03:20.716]          <block atomic="false" info="">
[03:03:20.716]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:03:20.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:20.716]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:03:20.726]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:03:20.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:03:20.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:20.726]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:03:20.726]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:03:20.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:03:20.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:20.726]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:03:20.736]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:03:20.736]          </block>
[03:03:20.736]          // end if-block "!hasDormant"
[03:03:20.736]        </control>
[03:03:20.736]        // end if-block "isSWJ"
[03:03:20.736]      </control>
[03:03:20.736]      <control if="!isSWJ" while="" timeout="0" info="">
[03:03:20.736]        // if-block "!isSWJ"
[03:03:20.736]          // =>  FALSE
[03:03:20.736]        // skip if-block "!isSWJ"
[03:03:20.736]      </control>
[03:03:20.736]      <block atomic="false" info="">
[03:03:20.736]        ReadDP(0x0);
[03:03:20.786]  
[03:03:20.786]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:03:20.786]  
[03:03:20.786]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:03:20.786]      </block>
[03:03:20.786]      // end if-block "protType == 2"
[03:03:20.786]    </control>
[03:03:20.786]  </sequence>
[03:03:20.786]  
[03:03:39.531]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:03:39.531]  
[03:03:39.543]  <debugvars>
[03:03:39.543]    // Pre-defined
[03:03:39.543]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:39.543]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:03:39.543]    __dp=0x00000000
[03:03:39.543]    __ap=0x00000000
[03:03:39.543]    __traceout=0x00000000      (Trace Disabled)
[03:03:39.543]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:39.543]    __FlashAddr=0x00000000
[03:03:39.543]    __FlashLen=0x00000000
[03:03:39.543]    __FlashArg=0x00000000
[03:03:39.543]    __FlashOp=0x00000000
[03:03:39.543]    __Result=0x00000000
[03:03:39.543]  </debugvars>
[03:03:39.543]  
[03:03:39.543]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:03:39.543]    <block atomic="false" info="">
[03:03:39.543]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:03:39.543]        // -> [isSWJ <= 0x00000001]
[03:03:39.547]      __var hasDormant = __protocol & 0x00020000;
[03:03:39.547]        // -> [hasDormant <= 0x00000000]
[03:03:39.547]      __var protType   = __protocol & 0x0000FFFF;
[03:03:39.547]        // -> [protType <= 0x00000002]
[03:03:39.547]    </block>
[03:03:39.547]    <control if="protType == 1" while="" timeout="0" info="">
[03:03:39.547]      // if-block "protType == 1"
[03:03:39.547]        // =>  FALSE
[03:03:39.547]      // skip if-block "protType == 1"
[03:03:39.547]    </control>
[03:03:39.547]    <control if="protType == 2" while="" timeout="0" info="">
[03:03:39.547]      // if-block "protType == 2"
[03:03:39.547]        // =>  TRUE
[03:03:39.547]      <control if="isSWJ" while="" timeout="0" info="">
[03:03:39.547]        // if-block "isSWJ"
[03:03:39.547]          // =>  TRUE
[03:03:39.547]        <control if="hasDormant" while="" timeout="0" info="">
[03:03:39.547]          // if-block "hasDormant"
[03:03:39.547]            // =>  FALSE
[03:03:39.547]          // skip if-block "hasDormant"
[03:03:39.547]        </control>
[03:03:39.547]        <control if="!hasDormant" while="" timeout="0" info="">
[03:03:39.547]          // if-block "!hasDormant"
[03:03:39.547]            // =>  TRUE
[03:03:39.547]          <block atomic="false" info="">
[03:03:39.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:03:39.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:39.551]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:03:39.555]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:03:39.555]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:03:39.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:39.559]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:03:39.567]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:03:39.567]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:03:39.575]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:39.575]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:03:39.579]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:03:39.579]          </block>
[03:03:39.579]          // end if-block "!hasDormant"
[03:03:39.579]        </control>
[03:03:39.579]        // end if-block "isSWJ"
[03:03:39.579]      </control>
[03:03:39.579]      <control if="!isSWJ" while="" timeout="0" info="">
[03:03:39.579]        // if-block "!isSWJ"
[03:03:39.584]          // =>  FALSE
[03:03:39.584]        // skip if-block "!isSWJ"
[03:03:39.584]      </control>
[03:03:39.584]      <block atomic="false" info="">
[03:03:39.584]        ReadDP(0x0);
[03:03:40.620]  
[03:03:40.620]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:03:40.620]  
[03:03:40.624]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:03:40.624]      </block>
[03:03:40.624]      // end if-block "protType == 2"
[03:03:40.624]    </control>
[03:03:40.624]  </sequence>
[03:03:40.628]  
[03:03:44.189]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:03:44.189]  
[03:03:44.192]  <debugvars>
[03:03:44.192]    // Pre-defined
[03:03:44.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:44.192]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:03:44.192]    __dp=0x00000000
[03:03:44.192]    __ap=0x00000000
[03:03:44.192]    __traceout=0x00000000      (Trace Disabled)
[03:03:44.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:44.192]    __FlashAddr=0x00000000
[03:03:44.192]    __FlashLen=0x00000000
[03:03:44.193]    __FlashArg=0x00000000
[03:03:44.193]    __FlashOp=0x00000000
[03:03:44.193]    __Result=0x00000000
[03:03:44.193]  </debugvars>
[03:03:44.193]  
[03:03:44.193]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:03:44.193]    <block atomic="false" info="">
[03:03:44.193]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:03:44.193]        // -> [isSWJ <= 0x00000001]
[03:03:44.193]      __var hasDormant = __protocol & 0x00020000;
[03:03:44.193]        // -> [hasDormant <= 0x00000000]
[03:03:44.193]      __var protType   = __protocol & 0x0000FFFF;
[03:03:44.193]        // -> [protType <= 0x00000002]
[03:03:44.193]    </block>
[03:03:44.193]    <control if="protType == 1" while="" timeout="0" info="">
[03:03:44.193]      // if-block "protType == 1"
[03:03:44.193]        // =>  FALSE
[03:03:44.193]      // skip if-block "protType == 1"
[03:03:44.193]    </control>
[03:03:44.193]    <control if="protType == 2" while="" timeout="0" info="">
[03:03:44.193]      // if-block "protType == 2"
[03:03:44.193]        // =>  TRUE
[03:03:44.193]      <control if="isSWJ" while="" timeout="0" info="">
[03:03:44.197]        // if-block "isSWJ"
[03:03:44.197]          // =>  TRUE
[03:03:44.197]        <control if="hasDormant" while="" timeout="0" info="">
[03:03:44.197]          // if-block "hasDormant"
[03:03:44.197]            // =>  FALSE
[03:03:44.197]          // skip if-block "hasDormant"
[03:03:44.197]        </control>
[03:03:44.197]        <control if="!hasDormant" while="" timeout="0" info="">
[03:03:44.197]          // if-block "!hasDormant"
[03:03:44.197]            // =>  TRUE
[03:03:44.197]          <block atomic="false" info="">
[03:03:44.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:03:44.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:44.201]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:03:44.209]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:03:44.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:03:44.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:44.213]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:03:44.217]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:03:44.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:03:44.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:44.221]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:03:44.229]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:03:44.229]          </block>
[03:03:44.229]          // end if-block "!hasDormant"
[03:03:44.229]        </control>
[03:03:44.229]        // end if-block "isSWJ"
[03:03:44.229]      </control>
[03:03:44.229]      <control if="!isSWJ" while="" timeout="0" info="">
[03:03:44.229]        // if-block "!isSWJ"
[03:03:44.229]          // =>  FALSE
[03:03:44.229]        // skip if-block "!isSWJ"
[03:03:44.229]      </control>
[03:03:44.229]      <block atomic="false" info="">
[03:03:44.229]        ReadDP(0x0);
[03:03:44.233]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:03:44.233]      </block>
[03:03:44.233]      // end if-block "protType == 2"
[03:03:44.233]    </control>
[03:03:44.233]  </sequence>
[03:03:44.233]  
[03:03:47.444]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:03:47.444]  
[03:03:47.444]  <debugvars>
[03:03:47.444]    // Pre-defined
[03:03:47.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:47.444]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:03:47.448]    __dp=0x00000000
[03:03:47.448]    __ap=0x00000000
[03:03:47.448]    __traceout=0x00000000      (Trace Disabled)
[03:03:47.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:47.448]    __FlashAddr=0x00000000
[03:03:47.448]    __FlashLen=0x00000000
[03:03:47.448]    __FlashArg=0x00000000
[03:03:47.448]    __FlashOp=0x00000000
[03:03:47.448]    __Result=0x00000000
[03:03:47.448]  </debugvars>
[03:03:47.448]  
[03:03:47.448]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:03:47.448]    <block atomic="false" info="">
[03:03:47.448]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:03:47.448]        // -> [isSWJ <= 0x00000001]
[03:03:47.448]      __var hasDormant = __protocol & 0x00020000;
[03:03:47.448]        // -> [hasDormant <= 0x00000000]
[03:03:47.448]      __var protType   = __protocol & 0x0000FFFF;
[03:03:47.448]        // -> [protType <= 0x00000002]
[03:03:47.448]    </block>
[03:03:47.448]    <control if="protType == 1" while="" timeout="0" info="">
[03:03:47.448]      // if-block "protType == 1"
[03:03:47.448]        // =>  FALSE
[03:03:47.448]      // skip if-block "protType == 1"
[03:03:47.448]    </control>
[03:03:47.452]    <control if="protType == 2" while="" timeout="0" info="">
[03:03:47.452]      // if-block "protType == 2"
[03:03:47.452]        // =>  TRUE
[03:03:47.452]      <control if="isSWJ" while="" timeout="0" info="">
[03:03:47.452]        // if-block "isSWJ"
[03:03:47.452]          // =>  TRUE
[03:03:47.452]        <control if="hasDormant" while="" timeout="0" info="">
[03:03:47.452]          // if-block "hasDormant"
[03:03:47.452]            // =>  FALSE
[03:03:47.452]          // skip if-block "hasDormant"
[03:03:47.452]        </control>
[03:03:47.452]        <control if="!hasDormant" while="" timeout="0" info="">
[03:03:47.452]          // if-block "!hasDormant"
[03:03:47.452]            // =>  TRUE
[03:03:47.452]          <block atomic="false" info="">
[03:03:47.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:03:47.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:47.456]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:03:47.460]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:03:47.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:03:47.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:47.464]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:03:47.468]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:03:47.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:03:47.468]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:03:47.472]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:03:47.472]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:03:47.476]          </block>
[03:03:47.476]          // end if-block "!hasDormant"
[03:03:47.476]        </control>
[03:03:47.476]        // end if-block "isSWJ"
[03:03:47.476]      </control>
[03:03:47.476]      <control if="!isSWJ" while="" timeout="0" info="">
[03:03:47.476]        // if-block "!isSWJ"
[03:03:47.476]          // =>  FALSE
[03:03:47.476]        // skip if-block "!isSWJ"
[03:03:47.476]      </control>
[03:03:47.476]      <block atomic="false" info="">
[03:03:47.476]        ReadDP(0x0);
[03:03:47.480]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:03:47.480]      </block>
[03:03:47.480]      // end if-block "protType == 2"
[03:03:47.480]    </control>
[03:03:47.480]  </sequence>
[03:03:47.480]  
[03:03:47.488]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:03:47.488]  
[03:03:47.488]  <debugvars>
[03:03:47.488]    // Pre-defined
[03:03:47.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:03:47.488]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:03:47.488]    __dp=0x00000000
[03:03:47.488]    __ap=0x00000000
[03:03:47.488]    __traceout=0x00000000      (Trace Disabled)
[03:03:47.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:03:47.488]    __FlashAddr=0x00000000
[03:03:47.488]    __FlashLen=0x00000000
[03:03:47.488]    __FlashArg=0x00000000
[03:03:47.488]    __FlashOp=0x00000000
[03:03:47.488]    __Result=0x00000000
[03:03:47.488]  </debugvars>
[03:03:47.488]  
[03:03:47.488]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:03:47.488]    <block atomic="false" info="">
[03:03:47.488]      __var SW_DP_ABORT       = 0x0;
[03:03:47.488]        // -> [SW_DP_ABORT <= 0x00000000]
[03:03:47.488]      __var DP_CTRL_STAT      = 0x4;
[03:03:47.488]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:03:47.488]      __var DP_SELECT         = 0x8;
[03:03:47.488]        // -> [DP_SELECT <= 0x00000008]
[03:03:47.488]      __var powered_down      = 0;
[03:03:47.488]        // -> [powered_down <= 0x00000000]
[03:03:47.492]      WriteDP(DP_SELECT, 0x00000000);
[03:03:47.496]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:03:47.496]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:03:47.496]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:03:47.500]        // -> [powered_down <= 0x00000001]
[03:03:47.500]    </block>
[03:03:47.500]    <control if="powered_down" while="" timeout="0" info="">
[03:03:47.500]      // if-block "powered_down"
[03:03:47.500]        // =>  TRUE
[03:03:47.500]      <block atomic="false" info="">
[03:03:47.500]        Message(0, "Debug/System power-up request sent");
[03:03:47.504]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:03:47.508]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:03:47.508]      </block>
[03:03:47.508]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:03:47.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:03:47.512]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:03:47.512]        // while-condition  =>  FALSE
[03:03:47.512]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:03:47.512]      </control>
[03:03:47.512]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:03:47.512]        // if-block "(__protocol & 0xFFFF) == 1"
[03:03:47.512]          // =>  FALSE
[03:03:47.512]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:03:47.516]      </control>
[03:03:47.516]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:03:47.516]        // if-block "(__protocol & 0xFFFF) == 2"
[03:03:47.516]          // =>  TRUE
[03:03:47.516]        <block atomic="false" info="">
[03:03:47.516]          Message(0, "executing SWD power up");
[03:03:47.520]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:03:48.558]  
[03:03:48.558]  !!! E310 : Debug access failed - cannot write value 0x50000F00 to DP register 0x04
[03:03:48.558]  
[03:03:48.562]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:03:48.562]        </block>
[03:03:48.562]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:03:48.566]      </control>
[03:03:48.566]      // end if-block "powered_down"
[03:03:48.566]    </control>
[03:03:48.566]  </sequence>
[03:03:48.566]  
[03:04:05.329]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:05.329]  
[03:04:05.344]  <debugvars>
[03:04:05.344]    // Pre-defined
[03:04:05.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:05.344]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:05.344]    __dp=0x00000000
[03:04:05.344]    __ap=0x00000000
[03:04:05.344]    __traceout=0x00000000      (Trace Disabled)
[03:04:05.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:05.344]    __FlashAddr=0x00000000
[03:04:05.344]    __FlashLen=0x00000000
[03:04:05.344]    __FlashArg=0x00000000
[03:04:05.344]    __FlashOp=0x00000000
[03:04:05.344]    __Result=0x00000000
[03:04:05.344]  </debugvars>
[03:04:05.344]  
[03:04:05.344]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:05.344]    <block atomic="false" info="">
[03:04:05.347]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:05.347]        // -> [isSWJ <= 0x00000001]
[03:04:05.347]      __var hasDormant = __protocol & 0x00020000;
[03:04:05.347]        // -> [hasDormant <= 0x00000000]
[03:04:05.347]      __var protType   = __protocol & 0x0000FFFF;
[03:04:05.347]        // -> [protType <= 0x00000002]
[03:04:05.347]    </block>
[03:04:05.347]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:05.347]      // if-block "protType == 1"
[03:04:05.347]        // =>  FALSE
[03:04:05.347]      // skip if-block "protType == 1"
[03:04:05.347]    </control>
[03:04:05.347]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:05.347]      // if-block "protType == 2"
[03:04:05.347]        // =>  TRUE
[03:04:05.347]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:05.347]        // if-block "isSWJ"
[03:04:05.347]          // =>  TRUE
[03:04:05.347]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:05.347]          // if-block "hasDormant"
[03:04:05.347]            // =>  FALSE
[03:04:05.347]          // skip if-block "hasDormant"
[03:04:05.347]        </control>
[03:04:05.347]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:05.347]          // if-block "!hasDormant"
[03:04:05.347]            // =>  TRUE
[03:04:05.347]          <block atomic="false" info="">
[03:04:05.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:05.347]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:05.347]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:05.357]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:05.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:05.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:05.357]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:05.357]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:05.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:05.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:05.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:05.367]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:04:05.367]          </block>
[03:04:05.367]          // end if-block "!hasDormant"
[03:04:05.367]        </control>
[03:04:05.367]        // end if-block "isSWJ"
[03:04:05.367]      </control>
[03:04:05.367]      <control if="!isSWJ" while="" timeout="0" info="">
[03:04:05.367]        // if-block "!isSWJ"
[03:04:05.367]          // =>  FALSE
[03:04:05.367]        // skip if-block "!isSWJ"
[03:04:05.367]      </control>
[03:04:05.367]      <block atomic="false" info="">
[03:04:05.367]        ReadDP(0x0);
[03:04:05.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:04:05.377]      </block>
[03:04:05.377]      // end if-block "protType == 2"
[03:04:05.377]    </control>
[03:04:05.377]  </sequence>
[03:04:05.377]  
[03:04:05.377]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:04:05.377]  
[03:04:05.377]  <debugvars>
[03:04:05.377]    // Pre-defined
[03:04:05.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:05.377]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:05.377]    __dp=0x00000000
[03:04:05.387]    __ap=0x00000000
[03:04:05.387]    __traceout=0x00000000      (Trace Disabled)
[03:04:05.387]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:05.387]    __FlashAddr=0x00000000
[03:04:05.387]    __FlashLen=0x00000000
[03:04:05.387]    __FlashArg=0x00000000
[03:04:05.387]    __FlashOp=0x00000000
[03:04:05.387]    __Result=0x00000000
[03:04:05.387]  </debugvars>
[03:04:05.387]  
[03:04:05.387]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:04:05.387]    <block atomic="false" info="">
[03:04:05.387]      __var SW_DP_ABORT       = 0x0;
[03:04:05.387]        // -> [SW_DP_ABORT <= 0x00000000]
[03:04:05.387]      __var DP_CTRL_STAT      = 0x4;
[03:04:05.387]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:04:05.387]      __var DP_SELECT         = 0x8;
[03:04:05.387]        // -> [DP_SELECT <= 0x00000008]
[03:04:05.387]      __var powered_down      = 0;
[03:04:05.387]        // -> [powered_down <= 0x00000000]
[03:04:05.387]      WriteDP(DP_SELECT, 0x00000000);
[03:04:05.387]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:04:05.387]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:04:05.397]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:04:05.397]        // -> [powered_down <= 0x00000001]
[03:04:05.397]    </block>
[03:04:05.397]    <control if="powered_down" while="" timeout="0" info="">
[03:04:05.397]      // if-block "powered_down"
[03:04:05.397]        // =>  TRUE
[03:04:05.397]      <block atomic="false" info="">
[03:04:05.397]        Message(0, "Debug/System power-up request sent");
[03:04:05.397]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:04:05.407]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:04:05.407]      </block>
[03:04:05.407]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:04:05.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:04:05.417]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:04:05.417]        // while-condition  =>  FALSE
[03:04:05.417]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:04:05.417]      </control>
[03:04:05.417]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:04:05.417]        // if-block "(__protocol & 0xFFFF) == 1"
[03:04:05.417]          // =>  FALSE
[03:04:05.417]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:04:05.417]      </control>
[03:04:05.417]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:04:05.417]        // if-block "(__protocol & 0xFFFF) == 2"
[03:04:05.417]          // =>  TRUE
[03:04:05.417]        <block atomic="false" info="">
[03:04:05.417]          Message(0, "executing SWD power up");
[03:04:05.427]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:04:05.457]  
[03:04:05.457]  !!! E310 : Debug access failed - cannot write value 0x50000F00 to DP register 0x04
[03:04:05.457]  
[03:04:05.457]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:04:05.467]        </block>
[03:04:05.467]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:04:05.467]      </control>
[03:04:05.467]      // end if-block "powered_down"
[03:04:05.467]    </control>
[03:04:05.467]  </sequence>
[03:04:05.467]  
[03:04:18.840]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:18.840]  
[03:04:18.850]  <debugvars>
[03:04:18.850]    // Pre-defined
[03:04:18.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:18.850]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:18.851]    __dp=0x00000000
[03:04:18.851]    __ap=0x00000000
[03:04:18.851]    __traceout=0x00000000      (Trace Disabled)
[03:04:18.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:18.851]    __FlashAddr=0x00000000
[03:04:18.852]    __FlashLen=0x00000000
[03:04:18.852]    __FlashArg=0x00000000
[03:04:18.852]    __FlashOp=0x00000000
[03:04:18.852]    __Result=0x00000000
[03:04:18.852]  </debugvars>
[03:04:18.853]  
[03:04:18.853]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:18.853]    <block atomic="false" info="">
[03:04:18.853]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:18.854]        // -> [isSWJ <= 0x00000001]
[03:04:18.854]      __var hasDormant = __protocol & 0x00020000;
[03:04:18.854]        // -> [hasDormant <= 0x00000000]
[03:04:18.854]      __var protType   = __protocol & 0x0000FFFF;
[03:04:18.855]        // -> [protType <= 0x00000002]
[03:04:18.855]    </block>
[03:04:18.855]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:18.855]      // if-block "protType == 1"
[03:04:18.855]        // =>  FALSE
[03:04:18.855]      // skip if-block "protType == 1"
[03:04:18.856]    </control>
[03:04:18.856]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:18.856]      // if-block "protType == 2"
[03:04:18.856]        // =>  TRUE
[03:04:18.856]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:18.857]        // if-block "isSWJ"
[03:04:18.857]          // =>  TRUE
[03:04:18.858]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:18.858]          // if-block "hasDormant"
[03:04:18.858]            // =>  FALSE
[03:04:18.858]          // skip if-block "hasDormant"
[03:04:18.858]        </control>
[03:04:18.858]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:18.859]          // if-block "!hasDormant"
[03:04:18.859]            // =>  TRUE
[03:04:18.859]          <block atomic="false" info="">
[03:04:18.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:18.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:18.862]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:18.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:18.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:18.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:18.876]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:18.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:18.881]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:18.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:18.888]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:18.888]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:04:18.888]          </block>
[03:04:18.888]          // end if-block "!hasDormant"
[03:04:18.888]        </control>
[03:04:18.888]        // end if-block "isSWJ"
[03:04:18.888]      </control>
[03:04:18.888]      <control if="!isSWJ" while="" timeout="0" info="">
[03:04:18.888]        // if-block "!isSWJ"
[03:04:18.888]          // =>  FALSE
[03:04:18.888]        // skip if-block "!isSWJ"
[03:04:18.888]      </control>
[03:04:18.888]      <block atomic="false" info="">
[03:04:18.888]        ReadDP(0x0);
[03:04:18.898]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:04:18.898]      </block>
[03:04:18.898]      // end if-block "protType == 2"
[03:04:18.898]    </control>
[03:04:18.898]  </sequence>
[03:04:18.898]  
[03:04:30.008]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:30.008]  
[03:04:30.018]  <debugvars>
[03:04:30.018]    // Pre-defined
[03:04:30.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:30.018]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:30.018]    __dp=0x00000000
[03:04:30.018]    __ap=0x00000000
[03:04:30.018]    __traceout=0x00000000      (Trace Disabled)
[03:04:30.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:30.018]    __FlashAddr=0x00000000
[03:04:30.018]    __FlashLen=0x00000000
[03:04:30.018]    __FlashArg=0x00000000
[03:04:30.018]    __FlashOp=0x00000000
[03:04:30.018]    __Result=0x00000000
[03:04:30.018]  </debugvars>
[03:04:30.018]  
[03:04:30.018]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:30.018]    <block atomic="false" info="">
[03:04:30.018]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:30.018]        // -> [isSWJ <= 0x00000001]
[03:04:30.018]      __var hasDormant = __protocol & 0x00020000;
[03:04:30.018]        // -> [hasDormant <= 0x00000000]
[03:04:30.018]      __var protType   = __protocol & 0x0000FFFF;
[03:04:30.018]        // -> [protType <= 0x00000002]
[03:04:30.018]    </block>
[03:04:30.018]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:30.018]      // if-block "protType == 1"
[03:04:30.018]        // =>  FALSE
[03:04:30.018]      // skip if-block "protType == 1"
[03:04:30.018]    </control>
[03:04:30.018]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:30.018]      // if-block "protType == 2"
[03:04:30.018]        // =>  TRUE
[03:04:30.018]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:30.018]        // if-block "isSWJ"
[03:04:30.018]          // =>  TRUE
[03:04:30.018]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:30.018]          // if-block "hasDormant"
[03:04:30.018]            // =>  FALSE
[03:04:30.018]          // skip if-block "hasDormant"
[03:04:30.018]        </control>
[03:04:30.018]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:30.018]          // if-block "!hasDormant"
[03:04:30.018]            // =>  TRUE
[03:04:30.018]          <block atomic="false" info="">
[03:04:30.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:30.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:30.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:30.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:30.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:30.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:30.028]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:30.038]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:30.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:30.048]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:30.048]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:30.048]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:04:30.048]          </block>
[03:04:30.048]          // end if-block "!hasDormant"
[03:04:30.048]        </control>
[03:04:30.048]        // end if-block "isSWJ"
[03:04:30.058]      </control>
[03:04:30.058]      <control if="!isSWJ" while="" timeout="0" info="">
[03:04:30.058]        // if-block "!isSWJ"
[03:04:30.058]          // =>  FALSE
[03:04:30.058]        // skip if-block "!isSWJ"
[03:04:30.058]      </control>
[03:04:30.058]      <block atomic="false" info="">
[03:04:30.058]        ReadDP(0x0);
[03:04:30.058]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:04:30.058]      </block>
[03:04:30.058]      // end if-block "protType == 2"
[03:04:30.058]    </control>
[03:04:30.058]  </sequence>
[03:04:30.058]  
[03:04:30.068]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:04:30.068]  
[03:04:30.068]  <debugvars>
[03:04:30.068]    // Pre-defined
[03:04:30.068]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:30.068]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:04:30.068]    __dp=0x00000000
[03:04:30.068]    __ap=0x00000000
[03:04:30.068]    __traceout=0x00000000      (Trace Disabled)
[03:04:30.068]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:30.068]    __FlashAddr=0x00000000
[03:04:30.068]    __FlashLen=0x00000000
[03:04:30.068]    __FlashArg=0x00000000
[03:04:30.068]    __FlashOp=0x00000000
[03:04:30.068]    __Result=0x00000000
[03:04:30.068]  </debugvars>
[03:04:30.068]  
[03:04:30.068]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:04:30.068]    <block atomic="false" info="">
[03:04:30.068]      __var SW_DP_ABORT       = 0x0;
[03:04:30.068]        // -> [SW_DP_ABORT <= 0x00000000]
[03:04:30.068]      __var DP_CTRL_STAT      = 0x4;
[03:04:30.068]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:04:30.068]      __var DP_SELECT         = 0x8;
[03:04:30.068]        // -> [DP_SELECT <= 0x00000008]
[03:04:30.078]      __var powered_down      = 0;
[03:04:30.078]        // -> [powered_down <= 0x00000000]
[03:04:30.078]      WriteDP(DP_SELECT, 0x00000000);
[03:04:30.078]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:04:30.078]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:04:30.078]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:04:30.078]        // -> [powered_down <= 0x00000001]
[03:04:30.078]    </block>
[03:04:30.078]    <control if="powered_down" while="" timeout="0" info="">
[03:04:30.078]      // if-block "powered_down"
[03:04:30.078]        // =>  TRUE
[03:04:30.078]      <block atomic="false" info="">
[03:04:30.078]        Message(0, "Debug/System power-up request sent");
[03:04:30.088]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:04:30.088]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:04:30.088]      </block>
[03:04:30.088]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:04:30.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:04:30.098]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:04:30.098]        // while-condition  =>  FALSE
[03:04:30.098]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:04:30.098]      </control>
[03:04:30.098]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:04:30.098]        // if-block "(__protocol & 0xFFFF) == 1"
[03:04:30.098]          // =>  FALSE
[03:04:30.098]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:04:30.098]      </control>
[03:04:30.098]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:04:30.098]        // if-block "(__protocol & 0xFFFF) == 2"
[03:04:30.098]          // =>  TRUE
[03:04:30.098]        <block atomic="false" info="">
[03:04:30.098]          Message(0, "executing SWD power up");
[03:04:30.098]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:04:30.108]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:04:30.108]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:04:30.108]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:04:30.108]        </block>
[03:04:30.108]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:04:30.108]      </control>
[03:04:30.108]      // end if-block "powered_down"
[03:04:30.108]    </control>
[03:04:30.108]    <block atomic="false" info="">
[03:04:30.108]      __var DEBUG_PORT_VAL    = 0;
[03:04:30.108]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:04:30.108]      __var ACCESS_POINT_VAL  = 0;
[03:04:30.108]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:04:30.108]      __ap = 1; 
[03:04:30.108]        // -> [__ap <= 0x00000001]
[03:04:30.118]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:04:31.148]  
[03:04:31.148]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:04:31.148]  
[03:04:31.166]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:04:31.166]    </block>
[03:04:31.166]  </sequence>
[03:04:31.168]  
[03:04:47.380]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:47.380]  
[03:04:47.380]  <debugvars>
[03:04:47.380]    // Pre-defined
[03:04:47.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:47.380]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:04:47.380]    __dp=0x00000000
[03:04:47.380]    __ap=0x00000000
[03:04:47.380]    __traceout=0x00000000      (Trace Disabled)
[03:04:47.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:47.380]    __FlashAddr=0x00000000
[03:04:47.380]    __FlashLen=0x00000000
[03:04:47.384]    __FlashArg=0x00000000
[03:04:47.384]    __FlashOp=0x00000000
[03:04:47.384]    __Result=0x00000000
[03:04:47.384]  </debugvars>
[03:04:47.384]  
[03:04:47.384]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:47.384]    <block atomic="false" info="">
[03:04:47.384]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:47.384]        // -> [isSWJ <= 0x00000001]
[03:04:47.384]      __var hasDormant = __protocol & 0x00020000;
[03:04:47.384]        // -> [hasDormant <= 0x00000000]
[03:04:47.384]      __var protType   = __protocol & 0x0000FFFF;
[03:04:47.384]        // -> [protType <= 0x00000002]
[03:04:47.384]    </block>
[03:04:47.384]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:47.384]      // if-block "protType == 1"
[03:04:47.384]        // =>  FALSE
[03:04:47.384]      // skip if-block "protType == 1"
[03:04:47.384]    </control>
[03:04:47.384]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:47.384]      // if-block "protType == 2"
[03:04:47.384]        // =>  TRUE
[03:04:47.384]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:47.384]        // if-block "isSWJ"
[03:04:47.384]          // =>  TRUE
[03:04:47.384]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:47.384]          // if-block "hasDormant"
[03:04:47.384]            // =>  FALSE
[03:04:47.384]          // skip if-block "hasDormant"
[03:04:47.384]        </control>
[03:04:47.384]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:47.384]          // if-block "!hasDormant"
[03:04:47.384]            // =>  TRUE
[03:04:47.384]          <block atomic="false" info="">
[03:04:47.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:47.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:47.394]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:47.401]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:47.401]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:47.404]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:47.404]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:48.435]  
[03:04:48.435]  !!! E320 : DAP access error
[03:04:48.435]  
[03:04:48.449]          </block>
[03:04:48.449]          // end if-block "!hasDormant"
[03:04:48.449]        </control>
[03:04:48.449]        // end if-block "isSWJ"
[03:04:48.449]      </control>
[03:04:48.449]      // end if-block "protType == 2"
[03:04:48.449]    </control>
[03:04:48.449]  </sequence>
[03:04:48.449]  
[03:04:50.532]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:50.532]  
[03:04:50.551]  <debugvars>
[03:04:50.551]    // Pre-defined
[03:04:50.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:50.551]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:04:50.551]    __dp=0x00000000
[03:04:50.551]    __ap=0x00000000
[03:04:50.551]    __traceout=0x00000000      (Trace Disabled)
[03:04:50.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:50.551]    __FlashAddr=0x00000000
[03:04:50.552]    __FlashLen=0x00000000
[03:04:50.552]    __FlashArg=0x00000000
[03:04:50.552]    __FlashOp=0x00000000
[03:04:50.552]    __Result=0x00000000
[03:04:50.552]  </debugvars>
[03:04:50.552]  
[03:04:50.552]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:50.552]    <block atomic="false" info="">
[03:04:50.552]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:50.552]        // -> [isSWJ <= 0x00000001]
[03:04:50.552]      __var hasDormant = __protocol & 0x00020000;
[03:04:50.552]        // -> [hasDormant <= 0x00000000]
[03:04:50.552]      __var protType   = __protocol & 0x0000FFFF;
[03:04:50.552]        // -> [protType <= 0x00000002]
[03:04:50.552]    </block>
[03:04:50.552]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:50.552]      // if-block "protType == 1"
[03:04:50.552]        // =>  FALSE
[03:04:50.552]      // skip if-block "protType == 1"
[03:04:50.552]    </control>
[03:04:50.552]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:50.552]      // if-block "protType == 2"
[03:04:50.552]        // =>  TRUE
[03:04:50.552]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:50.552]        // if-block "isSWJ"
[03:04:50.552]          // =>  TRUE
[03:04:50.552]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:50.552]          // if-block "hasDormant"
[03:04:50.552]            // =>  FALSE
[03:04:50.552]          // skip if-block "hasDormant"
[03:04:50.552]        </control>
[03:04:50.552]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:50.552]          // if-block "!hasDormant"
[03:04:50.552]            // =>  TRUE
[03:04:50.552]          <block atomic="false" info="">
[03:04:50.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:50.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:50.552]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:50.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:50.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:50.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:50.562]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:50.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:50.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:50.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:50.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:50.582]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:04:50.582]          </block>
[03:04:50.582]          // end if-block "!hasDormant"
[03:04:50.582]        </control>
[03:04:50.582]        // end if-block "isSWJ"
[03:04:50.582]      </control>
[03:04:50.582]      <control if="!isSWJ" while="" timeout="0" info="">
[03:04:50.582]        // if-block "!isSWJ"
[03:04:50.582]          // =>  FALSE
[03:04:50.582]        // skip if-block "!isSWJ"
[03:04:50.582]      </control>
[03:04:50.582]      <block atomic="false" info="">
[03:04:50.582]        ReadDP(0x0);
[03:04:50.592]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:04:50.592]      </block>
[03:04:50.592]      // end if-block "protType == 2"
[03:04:50.592]    </control>
[03:04:50.592]  </sequence>
[03:04:50.592]  
[03:04:55.806]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:55.806]  
[03:04:55.819]  <debugvars>
[03:04:55.819]    // Pre-defined
[03:04:55.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:55.819]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:04:55.819]    __dp=0x00000000
[03:04:55.819]    __ap=0x00000000
[03:04:55.819]    __traceout=0x00000000      (Trace Disabled)
[03:04:55.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:55.819]    __FlashAddr=0x00000000
[03:04:55.819]    __FlashLen=0x00000000
[03:04:55.819]    __FlashArg=0x00000000
[03:04:55.819]    __FlashOp=0x00000000
[03:04:55.819]    __Result=0x00000000
[03:04:55.819]  </debugvars>
[03:04:55.819]  
[03:04:55.819]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:55.822]    <block atomic="false" info="">
[03:04:55.822]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:55.822]        // -> [isSWJ <= 0x00000001]
[03:04:55.822]      __var hasDormant = __protocol & 0x00020000;
[03:04:55.822]        // -> [hasDormant <= 0x00000000]
[03:04:55.822]      __var protType   = __protocol & 0x0000FFFF;
[03:04:55.822]        // -> [protType <= 0x00000002]
[03:04:55.822]    </block>
[03:04:55.822]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:55.822]      // if-block "protType == 1"
[03:04:55.822]        // =>  FALSE
[03:04:55.822]      // skip if-block "protType == 1"
[03:04:55.822]    </control>
[03:04:55.822]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:55.822]      // if-block "protType == 2"
[03:04:55.822]        // =>  TRUE
[03:04:55.822]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:55.822]        // if-block "isSWJ"
[03:04:55.822]          // =>  TRUE
[03:04:55.822]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:55.822]          // if-block "hasDormant"
[03:04:55.822]            // =>  FALSE
[03:04:55.822]          // skip if-block "hasDormant"
[03:04:55.822]        </control>
[03:04:55.822]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:55.822]          // if-block "!hasDormant"
[03:04:55.822]            // =>  TRUE
[03:04:55.822]          <block atomic="false" info="">
[03:04:55.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:55.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:55.832]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:55.832]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:55.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:55.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:55.832]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:55.842]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:55.842]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:55.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:55.842]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:56.872]  
[03:04:56.872]  !!! E320 : DAP access error
[03:04:56.872]  
[03:04:56.882]          </block>
[03:04:56.882]          // end if-block "!hasDormant"
[03:04:56.882]        </control>
[03:04:56.882]        // end if-block "isSWJ"
[03:04:56.882]      </control>
[03:04:56.882]      // end if-block "protType == 2"
[03:04:56.882]    </control>
[03:04:56.882]  </sequence>
[03:04:56.882]  
[03:04:59.275]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:04:59.275]  
[03:04:59.287]  <debugvars>
[03:04:59.287]    // Pre-defined
[03:04:59.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:04:59.287]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:04:59.287]    __dp=0x00000000
[03:04:59.287]    __ap=0x00000000
[03:04:59.287]    __traceout=0x00000000      (Trace Disabled)
[03:04:59.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:04:59.287]    __FlashAddr=0x00000000
[03:04:59.287]    __FlashLen=0x00000000
[03:04:59.287]    __FlashArg=0x00000000
[03:04:59.287]    __FlashOp=0x00000000
[03:04:59.287]    __Result=0x00000000
[03:04:59.287]  </debugvars>
[03:04:59.287]  
[03:04:59.287]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:04:59.287]    <block atomic="false" info="">
[03:04:59.287]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:04:59.287]        // -> [isSWJ <= 0x00000001]
[03:04:59.287]      __var hasDormant = __protocol & 0x00020000;
[03:04:59.287]        // -> [hasDormant <= 0x00000000]
[03:04:59.287]      __var protType   = __protocol & 0x0000FFFF;
[03:04:59.287]        // -> [protType <= 0x00000002]
[03:04:59.287]    </block>
[03:04:59.287]    <control if="protType == 1" while="" timeout="0" info="">
[03:04:59.287]      // if-block "protType == 1"
[03:04:59.287]        // =>  FALSE
[03:04:59.287]      // skip if-block "protType == 1"
[03:04:59.287]    </control>
[03:04:59.287]    <control if="protType == 2" while="" timeout="0" info="">
[03:04:59.287]      // if-block "protType == 2"
[03:04:59.295]        // =>  TRUE
[03:04:59.295]      <control if="isSWJ" while="" timeout="0" info="">
[03:04:59.295]        // if-block "isSWJ"
[03:04:59.295]          // =>  TRUE
[03:04:59.295]        <control if="hasDormant" while="" timeout="0" info="">
[03:04:59.295]          // if-block "hasDormant"
[03:04:59.295]            // =>  FALSE
[03:04:59.295]          // skip if-block "hasDormant"
[03:04:59.295]        </control>
[03:04:59.295]        <control if="!hasDormant" while="" timeout="0" info="">
[03:04:59.295]          // if-block "!hasDormant"
[03:04:59.295]            // =>  TRUE
[03:04:59.295]          <block atomic="false" info="">
[03:04:59.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:04:59.295]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:59.295]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:04:59.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:04:59.308]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:04:59.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:59.308]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:04:59.308]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:04:59.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:04:59.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:04:59.315]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:04:59.325]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:04:59.325]          </block>
[03:04:59.325]          // end if-block "!hasDormant"
[03:04:59.325]        </control>
[03:04:59.325]        // end if-block "isSWJ"
[03:04:59.325]      </control>
[03:04:59.325]      <control if="!isSWJ" while="" timeout="0" info="">
[03:04:59.325]        // if-block "!isSWJ"
[03:04:59.325]          // =>  FALSE
[03:04:59.325]        // skip if-block "!isSWJ"
[03:04:59.325]      </control>
[03:04:59.325]      <block atomic="false" info="">
[03:04:59.325]        ReadDP(0x0);
[03:04:59.325]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:04:59.325]      </block>
[03:04:59.325]      // end if-block "protType == 2"
[03:04:59.325]    </control>
[03:04:59.325]  </sequence>
[03:04:59.325]  
[03:05:02.068]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:02.068]  
[03:05:02.068]  <debugvars>
[03:05:02.068]    // Pre-defined
[03:05:02.068]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:02.068]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:05:02.068]    __dp=0x00000000
[03:05:02.068]    __ap=0x00000000
[03:05:02.068]    __traceout=0x00000000      (Trace Disabled)
[03:05:02.068]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:02.068]    __FlashAddr=0x00000000
[03:05:02.068]    __FlashLen=0x00000000
[03:05:02.068]    __FlashArg=0x00000000
[03:05:02.068]    __FlashOp=0x00000000
[03:05:02.068]    __Result=0x00000000
[03:05:02.068]  </debugvars>
[03:05:02.068]  
[03:05:02.068]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:02.068]    <block atomic="false" info="">
[03:05:02.068]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:02.068]        // -> [isSWJ <= 0x00000001]
[03:05:02.068]      __var hasDormant = __protocol & 0x00020000;
[03:05:02.068]        // -> [hasDormant <= 0x00000000]
[03:05:02.078]      __var protType   = __protocol & 0x0000FFFF;
[03:05:02.078]        // -> [protType <= 0x00000002]
[03:05:02.078]    </block>
[03:05:02.078]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:02.078]      // if-block "protType == 1"
[03:05:02.078]        // =>  FALSE
[03:05:02.078]      // skip if-block "protType == 1"
[03:05:02.078]    </control>
[03:05:02.078]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:02.078]      // if-block "protType == 2"
[03:05:02.078]        // =>  TRUE
[03:05:02.078]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:02.078]        // if-block "isSWJ"
[03:05:02.078]          // =>  TRUE
[03:05:02.078]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:02.078]          // if-block "hasDormant"
[03:05:02.078]            // =>  FALSE
[03:05:02.078]          // skip if-block "hasDormant"
[03:05:02.078]        </control>
[03:05:02.078]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:02.078]          // if-block "!hasDormant"
[03:05:02.078]            // =>  TRUE
[03:05:02.078]          <block atomic="false" info="">
[03:05:02.078]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:02.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:02.078]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:02.088]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:02.088]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:02.088]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:02.088]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:02.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:02.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:02.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:02.098]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:02.098]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:02.098]          </block>
[03:05:02.098]          // end if-block "!hasDormant"
[03:05:02.098]        </control>
[03:05:02.098]        // end if-block "isSWJ"
[03:05:02.098]      </control>
[03:05:02.098]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:02.108]        // if-block "!isSWJ"
[03:05:02.108]          // =>  FALSE
[03:05:02.108]        // skip if-block "!isSWJ"
[03:05:02.108]      </control>
[03:05:02.108]      <block atomic="false" info="">
[03:05:02.108]        ReadDP(0x0);
[03:05:02.109]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:02.109]      </block>
[03:05:02.109]      // end if-block "protType == 2"
[03:05:02.109]    </control>
[03:05:02.109]  </sequence>
[03:05:02.109]  
[03:05:04.802]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:04.802]  
[03:05:04.812]  <debugvars>
[03:05:04.812]    // Pre-defined
[03:05:04.812]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:04.812]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:05:04.812]    __dp=0x00000000
[03:05:04.812]    __ap=0x00000000
[03:05:04.812]    __traceout=0x00000000      (Trace Disabled)
[03:05:04.812]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:04.812]    __FlashAddr=0x00000000
[03:05:04.812]    __FlashLen=0x00000000
[03:05:04.812]    __FlashArg=0x00000000
[03:05:04.812]    __FlashOp=0x00000000
[03:05:04.812]    __Result=0x00000000
[03:05:04.812]  </debugvars>
[03:05:04.812]  
[03:05:04.812]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:04.812]    <block atomic="false" info="">
[03:05:04.812]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:04.812]        // -> [isSWJ <= 0x00000001]
[03:05:04.812]      __var hasDormant = __protocol & 0x00020000;
[03:05:04.812]        // -> [hasDormant <= 0x00000000]
[03:05:04.812]      __var protType   = __protocol & 0x0000FFFF;
[03:05:04.812]        // -> [protType <= 0x00000002]
[03:05:04.812]    </block>
[03:05:04.812]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:04.812]      // if-block "protType == 1"
[03:05:04.812]        // =>  FALSE
[03:05:04.812]      // skip if-block "protType == 1"
[03:05:04.812]    </control>
[03:05:04.812]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:04.812]      // if-block "protType == 2"
[03:05:04.812]        // =>  TRUE
[03:05:04.812]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:04.812]        // if-block "isSWJ"
[03:05:04.812]          // =>  TRUE
[03:05:04.812]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:04.812]          // if-block "hasDormant"
[03:05:04.812]            // =>  FALSE
[03:05:04.812]          // skip if-block "hasDormant"
[03:05:04.812]        </control>
[03:05:04.812]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:04.812]          // if-block "!hasDormant"
[03:05:04.812]            // =>  TRUE
[03:05:04.812]          <block atomic="false" info="">
[03:05:04.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:04.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:04.822]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:04.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:04.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:04.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:04.822]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:04.832]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:04.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:04.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:04.842]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:04.842]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:04.842]          </block>
[03:05:04.842]          // end if-block "!hasDormant"
[03:05:04.842]        </control>
[03:05:04.842]        // end if-block "isSWJ"
[03:05:04.842]      </control>
[03:05:04.842]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:04.842]        // if-block "!isSWJ"
[03:05:04.842]          // =>  FALSE
[03:05:04.842]        // skip if-block "!isSWJ"
[03:05:04.842]      </control>
[03:05:04.842]      <block atomic="false" info="">
[03:05:04.842]        ReadDP(0x0);
[03:05:04.852]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:04.852]      </block>
[03:05:04.852]      // end if-block "protType == 2"
[03:05:04.852]    </control>
[03:05:04.852]  </sequence>
[03:05:04.852]  
[03:05:07.828]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:07.828]  
[03:05:07.828]  <debugvars>
[03:05:07.828]    // Pre-defined
[03:05:07.828]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:07.828]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:05:07.828]    __dp=0x00000000
[03:05:07.828]    __ap=0x00000000
[03:05:07.828]    __traceout=0x00000000      (Trace Disabled)
[03:05:07.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:07.828]    __FlashAddr=0x00000000
[03:05:07.828]    __FlashLen=0x00000000
[03:05:07.828]    __FlashArg=0x00000000
[03:05:07.828]    __FlashOp=0x00000000
[03:05:07.828]    __Result=0x00000000
[03:05:07.828]  </debugvars>
[03:05:07.828]  
[03:05:07.828]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:07.828]    <block atomic="false" info="">
[03:05:07.828]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:07.828]        // -> [isSWJ <= 0x00000001]
[03:05:07.828]      __var hasDormant = __protocol & 0x00020000;
[03:05:07.828]        // -> [hasDormant <= 0x00000000]
[03:05:07.828]      __var protType   = __protocol & 0x0000FFFF;
[03:05:07.828]        // -> [protType <= 0x00000002]
[03:05:07.828]    </block>
[03:05:07.828]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:07.828]      // if-block "protType == 1"
[03:05:07.828]        // =>  FALSE
[03:05:07.828]      // skip if-block "protType == 1"
[03:05:07.828]    </control>
[03:05:07.828]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:07.828]      // if-block "protType == 2"
[03:05:07.828]        // =>  TRUE
[03:05:07.828]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:07.828]        // if-block "isSWJ"
[03:05:07.828]          // =>  TRUE
[03:05:07.828]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:07.828]          // if-block "hasDormant"
[03:05:07.828]            // =>  FALSE
[03:05:07.828]          // skip if-block "hasDormant"
[03:05:07.828]        </control>
[03:05:07.828]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:07.828]          // if-block "!hasDormant"
[03:05:07.828]            // =>  TRUE
[03:05:07.828]          <block atomic="false" info="">
[03:05:07.828]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:07.838]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:07.838]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:07.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:07.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:07.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:07.848]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:07.848]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:07.848]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:07.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:07.848]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:07.848]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:07.848]          </block>
[03:05:07.848]          // end if-block "!hasDormant"
[03:05:07.848]        </control>
[03:05:07.848]        // end if-block "isSWJ"
[03:05:07.848]      </control>
[03:05:07.848]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:07.848]        // if-block "!isSWJ"
[03:05:07.848]          // =>  FALSE
[03:05:07.848]        // skip if-block "!isSWJ"
[03:05:07.848]      </control>
[03:05:07.848]      <block atomic="false" info="">
[03:05:07.848]        ReadDP(0x0);
[03:05:07.878]  
[03:05:07.878]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:05:07.878]  
[03:05:07.878]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:07.878]      </block>
[03:05:07.878]      // end if-block "protType == 2"
[03:05:07.878]    </control>
[03:05:07.878]  </sequence>
[03:05:07.878]  
[03:05:10.802]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:10.802]  
[03:05:10.811]  <debugvars>
[03:05:10.811]    // Pre-defined
[03:05:10.811]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:10.811]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:05:10.811]    __dp=0x00000000
[03:05:10.811]    __ap=0x00000000
[03:05:10.812]    __traceout=0x00000000      (Trace Disabled)
[03:05:10.812]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:10.812]    __FlashAddr=0x00000000
[03:05:10.812]    __FlashLen=0x00000000
[03:05:10.812]    __FlashArg=0x00000000
[03:05:10.812]    __FlashOp=0x00000000
[03:05:10.812]    __Result=0x00000000
[03:05:10.812]  </debugvars>
[03:05:10.812]  
[03:05:10.812]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:10.812]    <block atomic="false" info="">
[03:05:10.812]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:10.812]        // -> [isSWJ <= 0x00000001]
[03:05:10.812]      __var hasDormant = __protocol & 0x00020000;
[03:05:10.812]        // -> [hasDormant <= 0x00000000]
[03:05:10.815]      __var protType   = __protocol & 0x0000FFFF;
[03:05:10.815]        // -> [protType <= 0x00000002]
[03:05:10.815]    </block>
[03:05:10.815]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:10.815]      // if-block "protType == 1"
[03:05:10.815]        // =>  FALSE
[03:05:10.815]      // skip if-block "protType == 1"
[03:05:10.815]    </control>
[03:05:10.815]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:10.815]      // if-block "protType == 2"
[03:05:10.815]        // =>  TRUE
[03:05:10.815]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:10.815]        // if-block "isSWJ"
[03:05:10.815]          // =>  TRUE
[03:05:10.815]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:10.815]          // if-block "hasDormant"
[03:05:10.815]            // =>  FALSE
[03:05:10.815]          // skip if-block "hasDormant"
[03:05:10.815]        </control>
[03:05:10.815]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:10.815]          // if-block "!hasDormant"
[03:05:10.815]            // =>  TRUE
[03:05:10.815]          <block atomic="false" info="">
[03:05:10.815]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:10.815]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:10.815]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:10.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:10.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:10.822]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:10.822]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:10.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:10.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:10.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:10.832]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:10.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:10.832]          </block>
[03:05:10.832]          // end if-block "!hasDormant"
[03:05:10.832]        </control>
[03:05:10.832]        // end if-block "isSWJ"
[03:05:10.832]      </control>
[03:05:10.832]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:10.832]        // if-block "!isSWJ"
[03:05:10.832]          // =>  FALSE
[03:05:10.832]        // skip if-block "!isSWJ"
[03:05:10.832]      </control>
[03:05:10.832]      <block atomic="false" info="">
[03:05:10.832]        ReadDP(0x0);
[03:05:10.842]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:10.842]      </block>
[03:05:10.842]      // end if-block "protType == 2"
[03:05:10.842]    </control>
[03:05:10.842]  </sequence>
[03:05:10.842]  
[03:05:14.352]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:14.352]  
[03:05:14.363]  <debugvars>
[03:05:14.363]    // Pre-defined
[03:05:14.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:14.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:14.363]    __dp=0x00000000
[03:05:14.363]    __ap=0x00000000
[03:05:14.363]    __traceout=0x00000000      (Trace Disabled)
[03:05:14.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:14.363]    __FlashAddr=0x00000000
[03:05:14.363]    __FlashLen=0x00000000
[03:05:14.363]    __FlashArg=0x00000000
[03:05:14.363]    __FlashOp=0x00000000
[03:05:14.363]    __Result=0x00000000
[03:05:14.363]  </debugvars>
[03:05:14.363]  
[03:05:14.363]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:14.363]    <block atomic="false" info="">
[03:05:14.363]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:14.363]        // -> [isSWJ <= 0x00000001]
[03:05:14.363]      __var hasDormant = __protocol & 0x00020000;
[03:05:14.363]        // -> [hasDormant <= 0x00000000]
[03:05:14.363]      __var protType   = __protocol & 0x0000FFFF;
[03:05:14.363]        // -> [protType <= 0x00000002]
[03:05:14.363]    </block>
[03:05:14.363]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:14.363]      // if-block "protType == 1"
[03:05:14.363]        // =>  FALSE
[03:05:14.363]      // skip if-block "protType == 1"
[03:05:14.363]    </control>
[03:05:14.363]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:14.363]      // if-block "protType == 2"
[03:05:14.363]        // =>  TRUE
[03:05:14.363]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:14.363]        // if-block "isSWJ"
[03:05:14.363]          // =>  TRUE
[03:05:14.363]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:14.363]          // if-block "hasDormant"
[03:05:14.363]            // =>  FALSE
[03:05:14.363]          // skip if-block "hasDormant"
[03:05:14.363]        </control>
[03:05:14.363]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:14.363]          // if-block "!hasDormant"
[03:05:14.363]            // =>  TRUE
[03:05:14.363]          <block atomic="false" info="">
[03:05:14.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:14.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:14.372]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:14.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:14.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:14.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:14.372]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:14.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:14.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:14.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:14.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:14.382]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:14.382]          </block>
[03:05:14.382]          // end if-block "!hasDormant"
[03:05:14.382]        </control>
[03:05:14.382]        // end if-block "isSWJ"
[03:05:14.382]      </control>
[03:05:14.382]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:14.382]        // if-block "!isSWJ"
[03:05:14.382]          // =>  FALSE
[03:05:14.382]        // skip if-block "!isSWJ"
[03:05:14.382]      </control>
[03:05:14.382]      <block atomic="false" info="">
[03:05:14.382]        ReadDP(0x0);
[03:05:14.382]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:14.382]      </block>
[03:05:14.382]      // end if-block "protType == 2"
[03:05:14.382]    </control>
[03:05:14.382]  </sequence>
[03:05:14.382]  
[03:05:14.392]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:05:14.392]  
[03:05:14.392]  <debugvars>
[03:05:14.392]    // Pre-defined
[03:05:14.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:14.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:14.392]    __dp=0x00000000
[03:05:14.392]    __ap=0x00000000
[03:05:14.392]    __traceout=0x00000000      (Trace Disabled)
[03:05:14.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:14.392]    __FlashAddr=0x00000000
[03:05:14.392]    __FlashLen=0x00000000
[03:05:14.392]    __FlashArg=0x00000000
[03:05:14.392]    __FlashOp=0x00000000
[03:05:14.392]    __Result=0x00000000
[03:05:14.392]  </debugvars>
[03:05:14.392]  
[03:05:14.392]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:05:14.392]    <block atomic="false" info="">
[03:05:14.392]      __var SW_DP_ABORT       = 0x0;
[03:05:14.392]        // -> [SW_DP_ABORT <= 0x00000000]
[03:05:14.392]      __var DP_CTRL_STAT      = 0x4;
[03:05:14.392]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:05:14.392]      __var DP_SELECT         = 0x8;
[03:05:14.402]        // -> [DP_SELECT <= 0x00000008]
[03:05:14.402]      __var powered_down      = 0;
[03:05:14.402]        // -> [powered_down <= 0x00000000]
[03:05:14.402]      WriteDP(DP_SELECT, 0x00000000);
[03:05:14.402]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:05:14.402]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:05:14.402]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[03:05:14.402]        // -> [powered_down <= 0x00000000]
[03:05:14.402]    </block>
[03:05:14.402]    <control if="powered_down" while="" timeout="0" info="">
[03:05:14.402]      // if-block "powered_down"
[03:05:14.402]        // =>  FALSE
[03:05:14.402]      // skip if-block "powered_down"
[03:05:14.402]    </control>
[03:05:14.402]    <block atomic="false" info="">
[03:05:14.402]      __var DEBUG_PORT_VAL    = 0;
[03:05:14.402]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:05:14.402]      __var ACCESS_POINT_VAL  = 0;
[03:05:14.402]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:05:14.402]      __ap = 1; 
[03:05:14.402]        // -> [__ap <= 0x00000001]
[03:05:14.402]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:05:14.422]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:05:14.422]      __ap = 4;
[03:05:14.422]        // -> [__ap <= 0x00000004]
[03:05:14.422]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:05:14.432]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:05:14.432]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:05:14.432]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:05:14.432]    </block>
[03:05:14.432]    <block atomic="false" info="">
[03:05:14.432]      __var nReset = 0x80;
[03:05:14.432]        // -> [nReset <= 0x00000080]
[03:05:14.432]      __var canReadPins = 0;
[03:05:14.432]        // -> [canReadPins <= 0x00000000]
[03:05:14.442]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:05:14.442]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:05:14.442]        // -> [canReadPins <= 0x00000001]
[03:05:14.442]    </block>
[03:05:14.442]    <control if="" while="1" timeout="200" info="">
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.442]      // while "1"  (timeout="200")
[03:05:14.442]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.452]      // while-condition  =>  TRUE
[03:05:14.452]      // while "1"  (timeout="200")
[03:05:14.462]      // while-condition  =>  TRUE
[03:05:14.462]      // while "1"  (timeout="200")
[03:05:14.462]      // while  =>  TIMEOUT
[03:05:14.462]      // end while "1"
[03:05:14.462]    </control>
[03:05:14.462]    <control if="canReadPins" while="" timeout="0" info="">
[03:05:14.462]      // if-block "canReadPins"
[03:05:14.462]        // =>  TRUE
[03:05:14.462]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:05:14.462]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:05:14.462]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:05:14.462]        // while-condition  =>  FALSE
[03:05:14.462]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:05:14.462]      </control>
[03:05:14.462]      // end if-block "canReadPins"
[03:05:14.462]    </control>
[03:05:14.462]    <control if="!canReadPins" while="" timeout="0" info="">
[03:05:14.462]      // if-block "!canReadPins"
[03:05:14.462]        // =>  FALSE
[03:05:14.462]      // skip if-block "!canReadPins"
[03:05:14.462]    </control>
[03:05:14.462]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:05:14.462]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:05:14.462]        // =>  TRUE
[03:05:14.462]      <block atomic="false" info="">
[03:05:14.462]        WriteAP(0x00, 0x190008);
[03:05:14.472]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:05:14.472]        WriteAP(0xF0, 0x01);
[03:05:14.472]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:05:14.472]      </block>
[03:05:14.472]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:05:14.472]    </control>
[03:05:14.482]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:05:14.482]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:05:14.482]        // =>  FALSE
[03:05:14.482]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:05:14.482]    </control>
[03:05:14.482]    <block atomic="false" info="">
[03:05:14.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:05:14.492]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:05:14.492]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:05:14.492]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:05:14.502]      __ap = 0; //lets make sure we reset the access point selection
[03:05:14.502]        // -> [__ap <= 0x00000000]
[03:05:14.502]    </block>
[03:05:14.502]  </sequence>
[03:05:14.502]  
[03:05:14.542]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:05:14.542]  
[03:05:14.542]  <debugvars>
[03:05:14.542]    // Pre-defined
[03:05:14.542]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:14.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:14.552]    __dp=0x00000000
[03:05:14.552]    __ap=0x00000000
[03:05:14.552]    __traceout=0x00000000      (Trace Disabled)
[03:05:14.552]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:14.552]    __FlashAddr=0x00000000
[03:05:14.552]    __FlashLen=0x00000000
[03:05:14.552]    __FlashArg=0x00000000
[03:05:14.552]    __FlashOp=0x00000000
[03:05:14.552]    __Result=0x00000000
[03:05:14.552]  </debugvars>
[03:05:14.552]  
[03:05:14.552]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:05:14.552]    <block atomic="false" info="">
[03:05:14.552]      __var deviceID = 0;
[03:05:14.552]        // -> [deviceID <= 0x00000000]
[03:05:14.552]      __var version = 0;
[03:05:14.552]        // -> [version <= 0x00000000]
[03:05:14.552]      __var partNum = 0;
[03:05:14.552]        // -> [partNum <= 0x00000000]
[03:05:14.552]      __var manuf = 0;
[03:05:14.552]        // -> [manuf <= 0x00000000]
[03:05:14.552]      __var isMSPM0G1X0X_G3X0X = 0;
[03:05:14.552]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:05:14.552]      __var isProduction = 0;
[03:05:14.552]        // -> [isProduction <= 0x00000000]
[03:05:14.552]      __var continueId = 0;
[03:05:14.552]        // -> [continueId <= 0x00000000]
[03:05:14.552]      deviceID =   Read32(0x41C40004);
[03:05:14.562]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:05:14.562]        // -> [deviceID <= 0x2BB8802F]
[03:05:14.562]      version = deviceID >> 28;
[03:05:14.562]        // -> [version <= 0x00000002]
[03:05:14.562]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:05:14.562]        // -> [partNum <= 0x0000BB88]
[03:05:14.562]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:05:14.562]        // -> [manuf <= 0x00000017]
[03:05:14.562]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:05:14.562]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:05:14.562]      isProduction = (version > 0);
[03:05:14.562]        // -> [isProduction <= 0x00000001]
[03:05:14.562]    </block>
[03:05:14.562]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:05:14.562]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:05:14.562]        // =>  FALSE
[03:05:14.562]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:05:14.562]    </control>
[03:05:14.562]    <control if="continueId == 4" while="" timeout="0" info="">
[03:05:14.562]      // if-block "continueId == 4"
[03:05:14.562]        // =>  FALSE
[03:05:14.562]      // skip if-block "continueId == 4"
[03:05:14.562]    </control>
[03:05:14.562]    <control if="!isProduction" while="" timeout="0" info="">
[03:05:14.562]      // if-block "!isProduction"
[03:05:14.572]        // =>  FALSE
[03:05:14.572]      // skip if-block "!isProduction"
[03:05:14.572]    </control>
[03:05:14.572]  </sequence>
[03:05:14.572]  
[03:05:20.441]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:20.441]  
[03:05:20.456]  <debugvars>
[03:05:20.456]    // Pre-defined
[03:05:20.456]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:20.456]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:20.456]    __dp=0x00000000
[03:05:20.456]    __ap=0x00000000
[03:05:20.456]    __traceout=0x00000000      (Trace Disabled)
[03:05:20.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:20.456]    __FlashAddr=0x00000000
[03:05:20.456]    __FlashLen=0x00000000
[03:05:20.456]    __FlashArg=0x00000000
[03:05:20.456]    __FlashOp=0x00000000
[03:05:20.456]    __Result=0x00000000
[03:05:20.456]  </debugvars>
[03:05:20.456]  
[03:05:20.456]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:20.456]    <block atomic="false" info="">
[03:05:20.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:20.456]        // -> [isSWJ <= 0x00000001]
[03:05:20.456]      __var hasDormant = __protocol & 0x00020000;
[03:05:20.456]        // -> [hasDormant <= 0x00000000]
[03:05:20.456]      __var protType   = __protocol & 0x0000FFFF;
[03:05:20.456]        // -> [protType <= 0x00000002]
[03:05:20.456]    </block>
[03:05:20.456]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:20.456]      // if-block "protType == 1"
[03:05:20.456]        // =>  FALSE
[03:05:20.456]      // skip if-block "protType == 1"
[03:05:20.456]    </control>
[03:05:20.456]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:20.456]      // if-block "protType == 2"
[03:05:20.456]        // =>  TRUE
[03:05:20.456]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:20.456]        // if-block "isSWJ"
[03:05:20.456]          // =>  TRUE
[03:05:20.462]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:20.462]          // if-block "hasDormant"
[03:05:20.462]            // =>  FALSE
[03:05:20.462]          // skip if-block "hasDormant"
[03:05:20.462]        </control>
[03:05:20.462]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:20.462]          // if-block "!hasDormant"
[03:05:20.462]            // =>  TRUE
[03:05:20.462]          <block atomic="false" info="">
[03:05:20.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:20.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:20.472]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:20.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:20.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:20.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:20.482]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:20.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:20.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:20.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:20.492]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:20.502]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:20.502]          </block>
[03:05:20.502]          // end if-block "!hasDormant"
[03:05:20.502]        </control>
[03:05:20.502]        // end if-block "isSWJ"
[03:05:20.502]      </control>
[03:05:20.502]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:20.502]        // if-block "!isSWJ"
[03:05:20.502]          // =>  FALSE
[03:05:20.502]        // skip if-block "!isSWJ"
[03:05:20.502]      </control>
[03:05:20.502]      <block atomic="false" info="">
[03:05:20.502]        ReadDP(0x0);
[03:05:20.502]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:20.502]      </block>
[03:05:20.502]      // end if-block "protType == 2"
[03:05:20.502]    </control>
[03:05:20.502]  </sequence>
[03:05:20.502]  
[03:05:20.512]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:05:20.512]  
[03:05:20.512]  <debugvars>
[03:05:20.512]    // Pre-defined
[03:05:20.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:20.512]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:20.512]    __dp=0x00000000
[03:05:20.512]    __ap=0x00000000
[03:05:20.512]    __traceout=0x00000000      (Trace Disabled)
[03:05:20.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:20.512]    __FlashAddr=0x00000000
[03:05:20.512]    __FlashLen=0x00000000
[03:05:20.512]    __FlashArg=0x00000000
[03:05:20.512]    __FlashOp=0x00000000
[03:05:20.512]    __Result=0x00000000
[03:05:20.512]  </debugvars>
[03:05:20.512]  
[03:05:20.512]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:05:20.512]    <block atomic="false" info="">
[03:05:20.512]      __var SW_DP_ABORT       = 0x0;
[03:05:20.512]        // -> [SW_DP_ABORT <= 0x00000000]
[03:05:20.512]      __var DP_CTRL_STAT      = 0x4;
[03:05:20.522]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:05:20.522]      __var DP_SELECT         = 0x8;
[03:05:20.522]        // -> [DP_SELECT <= 0x00000008]
[03:05:20.522]      __var powered_down      = 0;
[03:05:20.522]        // -> [powered_down <= 0x00000000]
[03:05:20.522]      WriteDP(DP_SELECT, 0x00000000);
[03:05:20.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:05:20.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:05:20.532]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:05:20.532]        // -> [powered_down <= 0x00000001]
[03:05:20.532]    </block>
[03:05:20.532]    <control if="powered_down" while="" timeout="0" info="">
[03:05:20.532]      // if-block "powered_down"
[03:05:20.532]        // =>  TRUE
[03:05:20.532]      <block atomic="false" info="">
[03:05:20.532]        Message(0, "Debug/System power-up request sent");
[03:05:20.532]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:05:20.542]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:05:20.542]      </block>
[03:05:20.542]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:05:20.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:05:20.542]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:05:20.542]        // while-condition  =>  FALSE
[03:05:20.542]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:05:20.542]      </control>
[03:05:20.542]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:05:20.542]        // if-block "(__protocol & 0xFFFF) == 1"
[03:05:20.542]          // =>  FALSE
[03:05:20.542]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:05:20.542]      </control>
[03:05:20.542]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:05:20.552]        // if-block "(__protocol & 0xFFFF) == 2"
[03:05:20.552]          // =>  TRUE
[03:05:20.552]        <block atomic="false" info="">
[03:05:20.552]          Message(0, "executing SWD power up");
[03:05:20.552]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:05:20.562]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:05:20.562]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:05:20.562]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:05:20.562]        </block>
[03:05:20.562]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:05:20.562]      </control>
[03:05:20.562]      // end if-block "powered_down"
[03:05:20.562]    </control>
[03:05:20.562]    <block atomic="false" info="">
[03:05:20.562]      __var DEBUG_PORT_VAL    = 0;
[03:05:20.562]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:05:20.562]      __var ACCESS_POINT_VAL  = 0;
[03:05:20.562]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:05:20.562]      __ap = 1; 
[03:05:20.562]        // -> [__ap <= 0x00000001]
[03:05:20.562]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:05:21.592]  
[03:05:21.592]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:05:21.592]  
[03:05:21.607]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:05:21.608]    </block>
[03:05:21.608]  </sequence>
[03:05:21.608]  
[03:05:30.224]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:30.224]  
[03:05:30.234]  <debugvars>
[03:05:30.234]    // Pre-defined
[03:05:30.234]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:30.234]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:05:30.234]    __dp=0x00000000
[03:05:30.234]    __ap=0x00000000
[03:05:30.234]    __traceout=0x00000000      (Trace Disabled)
[03:05:30.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:30.234]    __FlashAddr=0x00000000
[03:05:30.234]    __FlashLen=0x00000000
[03:05:30.234]    __FlashArg=0x00000000
[03:05:30.234]    __FlashOp=0x00000000
[03:05:30.234]    __Result=0x00000000
[03:05:30.234]  </debugvars>
[03:05:30.234]  
[03:05:30.234]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:30.234]    <block atomic="false" info="">
[03:05:30.234]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:30.234]        // -> [isSWJ <= 0x00000001]
[03:05:30.234]      __var hasDormant = __protocol & 0x00020000;
[03:05:30.234]        // -> [hasDormant <= 0x00000000]
[03:05:30.234]      __var protType   = __protocol & 0x0000FFFF;
[03:05:30.234]        // -> [protType <= 0x00000002]
[03:05:30.234]    </block>
[03:05:30.234]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:30.234]      // if-block "protType == 1"
[03:05:30.234]        // =>  FALSE
[03:05:30.234]      // skip if-block "protType == 1"
[03:05:30.234]    </control>
[03:05:30.234]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:30.234]      // if-block "protType == 2"
[03:05:30.234]        // =>  TRUE
[03:05:30.234]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:30.234]        // if-block "isSWJ"
[03:05:30.234]          // =>  TRUE
[03:05:30.234]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:30.234]          // if-block "hasDormant"
[03:05:30.234]            // =>  FALSE
[03:05:30.234]          // skip if-block "hasDormant"
[03:05:30.234]        </control>
[03:05:30.234]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:30.234]          // if-block "!hasDormant"
[03:05:30.234]            // =>  TRUE
[03:05:30.234]          <block atomic="false" info="">
[03:05:30.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:30.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:30.244]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:30.244]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:30.244]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:30.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:30.254]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:30.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:30.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:30.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:30.254]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:30.264]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:30.264]          </block>
[03:05:30.264]          // end if-block "!hasDormant"
[03:05:30.264]        </control>
[03:05:30.264]        // end if-block "isSWJ"
[03:05:30.264]      </control>
[03:05:30.264]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:30.267]        // if-block "!isSWJ"
[03:05:30.267]          // =>  FALSE
[03:05:30.267]        // skip if-block "!isSWJ"
[03:05:30.267]      </control>
[03:05:30.267]      <block atomic="false" info="">
[03:05:30.267]        ReadDP(0x0);
[03:05:30.267]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:30.267]      </block>
[03:05:30.267]      // end if-block "protType == 2"
[03:05:30.267]    </control>
[03:05:30.267]  </sequence>
[03:05:30.267]  
[03:05:34.698]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:34.698]  
[03:05:34.711]  <debugvars>
[03:05:34.711]    // Pre-defined
[03:05:34.711]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:34.711]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:05:34.711]    __dp=0x00000000
[03:05:34.711]    __ap=0x00000000
[03:05:34.711]    __traceout=0x00000000      (Trace Disabled)
[03:05:34.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:34.711]    __FlashAddr=0x00000000
[03:05:34.711]    __FlashLen=0x00000000
[03:05:34.711]    __FlashArg=0x00000000
[03:05:34.711]    __FlashOp=0x00000000
[03:05:34.711]    __Result=0x00000000
[03:05:34.711]  </debugvars>
[03:05:34.711]  
[03:05:34.711]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:34.711]    <block atomic="false" info="">
[03:05:34.711]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:34.711]        // -> [isSWJ <= 0x00000001]
[03:05:34.711]      __var hasDormant = __protocol & 0x00020000;
[03:05:34.711]        // -> [hasDormant <= 0x00000000]
[03:05:34.711]      __var protType   = __protocol & 0x0000FFFF;
[03:05:34.711]        // -> [protType <= 0x00000002]
[03:05:34.711]    </block>
[03:05:34.711]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:34.711]      // if-block "protType == 1"
[03:05:34.711]        // =>  FALSE
[03:05:34.711]      // skip if-block "protType == 1"
[03:05:34.711]    </control>
[03:05:34.711]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:34.711]      // if-block "protType == 2"
[03:05:34.711]        // =>  TRUE
[03:05:34.711]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:34.711]        // if-block "isSWJ"
[03:05:34.711]          // =>  TRUE
[03:05:34.711]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:34.711]          // if-block "hasDormant"
[03:05:34.711]            // =>  FALSE
[03:05:34.711]          // skip if-block "hasDormant"
[03:05:34.711]        </control>
[03:05:34.711]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:34.711]          // if-block "!hasDormant"
[03:05:34.711]            // =>  TRUE
[03:05:34.711]          <block atomic="false" info="">
[03:05:34.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:34.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:34.719]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:34.719]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:34.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:34.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:34.729]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:34.729]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:34.729]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:34.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:34.742]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:34.742]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:34.742]          </block>
[03:05:34.742]          // end if-block "!hasDormant"
[03:05:34.742]        </control>
[03:05:34.742]        // end if-block "isSWJ"
[03:05:34.742]      </control>
[03:05:34.742]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:34.742]        // if-block "!isSWJ"
[03:05:34.742]          // =>  FALSE
[03:05:34.742]        // skip if-block "!isSWJ"
[03:05:34.742]      </control>
[03:05:34.742]      <block atomic="false" info="">
[03:05:34.749]        ReadDP(0x0);
[03:05:35.794]  
[03:05:35.794]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:05:35.794]  
[03:05:35.808]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:35.808]      </block>
[03:05:35.808]      // end if-block "protType == 2"
[03:05:35.808]    </control>
[03:05:35.808]  </sequence>
[03:05:35.808]  
[03:05:50.203]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:05:50.203]  
[03:05:50.219]  <debugvars>
[03:05:50.219]    // Pre-defined
[03:05:50.219]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:05:50.220]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:05:50.220]    __dp=0x00000000
[03:05:50.220]    __ap=0x00000000
[03:05:50.220]    __traceout=0x00000000      (Trace Disabled)
[03:05:50.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:05:50.220]    __FlashAddr=0x00000000
[03:05:50.220]    __FlashLen=0x00000000
[03:05:50.220]    __FlashArg=0x00000000
[03:05:50.220]    __FlashOp=0x00000000
[03:05:50.220]    __Result=0x00000000
[03:05:50.220]  </debugvars>
[03:05:50.220]  
[03:05:50.220]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:05:50.220]    <block atomic="false" info="">
[03:05:50.220]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:05:50.220]        // -> [isSWJ <= 0x00000001]
[03:05:50.220]      __var hasDormant = __protocol & 0x00020000;
[03:05:50.220]        // -> [hasDormant <= 0x00000000]
[03:05:50.220]      __var protType   = __protocol & 0x0000FFFF;
[03:05:50.220]        // -> [protType <= 0x00000002]
[03:05:50.220]    </block>
[03:05:50.220]    <control if="protType == 1" while="" timeout="0" info="">
[03:05:50.220]      // if-block "protType == 1"
[03:05:50.220]        // =>  FALSE
[03:05:50.220]      // skip if-block "protType == 1"
[03:05:50.220]    </control>
[03:05:50.224]    <control if="protType == 2" while="" timeout="0" info="">
[03:05:50.224]      // if-block "protType == 2"
[03:05:50.224]        // =>  TRUE
[03:05:50.224]      <control if="isSWJ" while="" timeout="0" info="">
[03:05:50.224]        // if-block "isSWJ"
[03:05:50.224]          // =>  TRUE
[03:05:50.224]        <control if="hasDormant" while="" timeout="0" info="">
[03:05:50.224]          // if-block "hasDormant"
[03:05:50.224]            // =>  FALSE
[03:05:50.224]          // skip if-block "hasDormant"
[03:05:50.224]        </control>
[03:05:50.224]        <control if="!hasDormant" while="" timeout="0" info="">
[03:05:50.224]          // if-block "!hasDormant"
[03:05:50.224]            // =>  TRUE
[03:05:50.224]          <block atomic="false" info="">
[03:05:50.224]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:05:50.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:50.224]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:05:50.234]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:05:50.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:05:50.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:50.236]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:05:50.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:05:50.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:05:50.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:05:50.244]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:05:50.244]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:05:50.244]          </block>
[03:05:50.244]          // end if-block "!hasDormant"
[03:05:50.244]        </control>
[03:05:50.244]        // end if-block "isSWJ"
[03:05:50.244]      </control>
[03:05:50.244]      <control if="!isSWJ" while="" timeout="0" info="">
[03:05:50.244]        // if-block "!isSWJ"
[03:05:50.244]          // =>  FALSE
[03:05:50.244]        // skip if-block "!isSWJ"
[03:05:50.244]      </control>
[03:05:50.244]      <block atomic="false" info="">
[03:05:50.244]        ReadDP(0x0);
[03:05:50.253]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:05:50.253]      </block>
[03:05:50.253]      // end if-block "protType == 2"
[03:05:50.253]    </control>
[03:05:50.253]  </sequence>
[03:05:50.253]  
[03:06:04.597]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:04.597]  
[03:06:04.605]  <debugvars>
[03:06:04.605]    // Pre-defined
[03:06:04.605]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:04.605]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:04.605]    __dp=0x00000000
[03:06:04.605]    __ap=0x00000000
[03:06:04.605]    __traceout=0x00000000      (Trace Disabled)
[03:06:04.605]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:04.605]    __FlashAddr=0x00000000
[03:06:04.605]    __FlashLen=0x00000000
[03:06:04.605]    __FlashArg=0x00000000
[03:06:04.605]    __FlashOp=0x00000000
[03:06:04.605]    __Result=0x00000000
[03:06:04.605]  </debugvars>
[03:06:04.605]  
[03:06:04.605]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:04.605]    <block atomic="false" info="">
[03:06:04.605]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:04.605]        // -> [isSWJ <= 0x00000001]
[03:06:04.605]      __var hasDormant = __protocol & 0x00020000;
[03:06:04.605]        // -> [hasDormant <= 0x00000000]
[03:06:04.605]      __var protType   = __protocol & 0x0000FFFF;
[03:06:04.605]        // -> [protType <= 0x00000002]
[03:06:04.605]    </block>
[03:06:04.605]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:04.605]      // if-block "protType == 1"
[03:06:04.605]        // =>  FALSE
[03:06:04.605]      // skip if-block "protType == 1"
[03:06:04.605]    </control>
[03:06:04.605]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:04.605]      // if-block "protType == 2"
[03:06:04.605]        // =>  TRUE
[03:06:04.605]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:04.605]        // if-block "isSWJ"
[03:06:04.605]          // =>  TRUE
[03:06:04.605]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:04.611]          // if-block "hasDormant"
[03:06:04.611]            // =>  FALSE
[03:06:04.611]          // skip if-block "hasDormant"
[03:06:04.611]        </control>
[03:06:04.611]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:04.611]          // if-block "!hasDormant"
[03:06:04.611]            // =>  TRUE
[03:06:04.611]          <block atomic="false" info="">
[03:06:04.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:04.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:04.611]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:04.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:04.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:04.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:04.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:04.621]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:04.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:04.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:04.621]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:04.631]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:04.631]          </block>
[03:06:04.631]          // end if-block "!hasDormant"
[03:06:04.631]        </control>
[03:06:04.631]        // end if-block "isSWJ"
[03:06:04.631]      </control>
[03:06:04.631]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:04.631]        // if-block "!isSWJ"
[03:06:04.631]          // =>  FALSE
[03:06:04.631]        // skip if-block "!isSWJ"
[03:06:04.631]      </control>
[03:06:04.631]      <block atomic="false" info="">
[03:06:04.631]        ReadDP(0x0);
[03:06:04.641]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:04.641]      </block>
[03:06:04.641]      // end if-block "protType == 2"
[03:06:04.641]    </control>
[03:06:04.641]  </sequence>
[03:06:04.641]  
[03:06:07.410]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:07.410]  
[03:06:07.410]  <debugvars>
[03:06:07.410]    // Pre-defined
[03:06:07.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:07.410]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:07.410]    __dp=0x00000000
[03:06:07.410]    __ap=0x00000000
[03:06:07.410]    __traceout=0x00000000      (Trace Disabled)
[03:06:07.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:07.410]    __FlashAddr=0x00000000
[03:06:07.410]    __FlashLen=0x00000000
[03:06:07.410]    __FlashArg=0x00000000
[03:06:07.410]    __FlashOp=0x00000000
[03:06:07.410]    __Result=0x00000000
[03:06:07.410]  </debugvars>
[03:06:07.410]  
[03:06:07.410]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:07.410]    <block atomic="false" info="">
[03:06:07.410]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:07.410]        // -> [isSWJ <= 0x00000001]
[03:06:07.410]      __var hasDormant = __protocol & 0x00020000;
[03:06:07.410]        // -> [hasDormant <= 0x00000000]
[03:06:07.410]      __var protType   = __protocol & 0x0000FFFF;
[03:06:07.410]        // -> [protType <= 0x00000002]
[03:06:07.410]    </block>
[03:06:07.410]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:07.410]      // if-block "protType == 1"
[03:06:07.410]        // =>  FALSE
[03:06:07.410]      // skip if-block "protType == 1"
[03:06:07.410]    </control>
[03:06:07.410]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:07.410]      // if-block "protType == 2"
[03:06:07.410]        // =>  TRUE
[03:06:07.410]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:07.410]        // if-block "isSWJ"
[03:06:07.410]          // =>  TRUE
[03:06:07.410]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:07.410]          // if-block "hasDormant"
[03:06:07.410]            // =>  FALSE
[03:06:07.410]          // skip if-block "hasDormant"
[03:06:07.410]        </control>
[03:06:07.410]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:07.410]          // if-block "!hasDormant"
[03:06:07.410]            // =>  TRUE
[03:06:07.410]          <block atomic="false" info="">
[03:06:07.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:07.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:07.420]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:07.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:07.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:07.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:07.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:07.430]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:07.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:07.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:07.430]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:07.440]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:07.440]          </block>
[03:06:07.440]          // end if-block "!hasDormant"
[03:06:07.440]        </control>
[03:06:07.440]        // end if-block "isSWJ"
[03:06:07.440]      </control>
[03:06:07.440]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:07.440]        // if-block "!isSWJ"
[03:06:07.440]          // =>  FALSE
[03:06:07.440]        // skip if-block "!isSWJ"
[03:06:07.440]      </control>
[03:06:07.440]      <block atomic="false" info="">
[03:06:07.440]        ReadDP(0x0);
[03:06:07.440]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:07.440]      </block>
[03:06:07.440]      // end if-block "protType == 2"
[03:06:07.440]    </control>
[03:06:07.440]  </sequence>
[03:06:07.440]  
[03:06:16.324]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:16.324]  
[03:06:16.333]  <debugvars>
[03:06:16.333]    // Pre-defined
[03:06:16.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:16.333]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:16.333]    __dp=0x00000000
[03:06:16.333]    __ap=0x00000000
[03:06:16.333]    __traceout=0x00000000      (Trace Disabled)
[03:06:16.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:16.333]    __FlashAddr=0x00000000
[03:06:16.334]    __FlashLen=0x00000000
[03:06:16.334]    __FlashArg=0x00000000
[03:06:16.334]    __FlashOp=0x00000000
[03:06:16.334]    __Result=0x00000000
[03:06:16.334]  </debugvars>
[03:06:16.334]  
[03:06:16.334]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:16.334]    <block atomic="false" info="">
[03:06:16.334]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:16.334]        // -> [isSWJ <= 0x00000001]
[03:06:16.334]      __var hasDormant = __protocol & 0x00020000;
[03:06:16.334]        // -> [hasDormant <= 0x00000000]
[03:06:16.334]      __var protType   = __protocol & 0x0000FFFF;
[03:06:16.334]        // -> [protType <= 0x00000002]
[03:06:16.334]    </block>
[03:06:16.334]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:16.334]      // if-block "protType == 1"
[03:06:16.334]        // =>  FALSE
[03:06:16.334]      // skip if-block "protType == 1"
[03:06:16.334]    </control>
[03:06:16.334]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:16.334]      // if-block "protType == 2"
[03:06:16.334]        // =>  TRUE
[03:06:16.334]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:16.334]        // if-block "isSWJ"
[03:06:16.334]          // =>  TRUE
[03:06:16.334]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:16.334]          // if-block "hasDormant"
[03:06:16.334]            // =>  FALSE
[03:06:16.334]          // skip if-block "hasDormant"
[03:06:16.334]        </control>
[03:06:16.334]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:16.334]          // if-block "!hasDormant"
[03:06:16.334]            // =>  TRUE
[03:06:16.334]          <block atomic="false" info="">
[03:06:16.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:16.334]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:16.334]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:16.344]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:16.344]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:16.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:16.344]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:16.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:16.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:16.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:16.358]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:16.358]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:16.358]          </block>
[03:06:16.358]          // end if-block "!hasDormant"
[03:06:16.358]        </control>
[03:06:16.358]        // end if-block "isSWJ"
[03:06:16.358]      </control>
[03:06:16.358]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:16.358]        // if-block "!isSWJ"
[03:06:16.358]          // =>  FALSE
[03:06:16.358]        // skip if-block "!isSWJ"
[03:06:16.358]      </control>
[03:06:16.358]      <block atomic="false" info="">
[03:06:16.358]        ReadDP(0x0);
[03:06:16.364]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:16.364]      </block>
[03:06:16.364]      // end if-block "protType == 2"
[03:06:16.364]    </control>
[03:06:16.364]  </sequence>
[03:06:16.364]  
[03:06:19.237]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:19.237]  
[03:06:19.253]  <debugvars>
[03:06:19.253]    // Pre-defined
[03:06:19.253]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:19.253]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:19.253]    __dp=0x00000000
[03:06:19.253]    __ap=0x00000000
[03:06:19.253]    __traceout=0x00000000      (Trace Disabled)
[03:06:19.253]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:19.253]    __FlashAddr=0x00000000
[03:06:19.253]    __FlashLen=0x00000000
[03:06:19.253]    __FlashArg=0x00000000
[03:06:19.253]    __FlashOp=0x00000000
[03:06:19.253]    __Result=0x00000000
[03:06:19.253]  </debugvars>
[03:06:19.253]  
[03:06:19.253]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:19.253]    <block atomic="false" info="">
[03:06:19.253]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:19.253]        // -> [isSWJ <= 0x00000001]
[03:06:19.253]      __var hasDormant = __protocol & 0x00020000;
[03:06:19.253]        // -> [hasDormant <= 0x00000000]
[03:06:19.257]      __var protType   = __protocol & 0x0000FFFF;
[03:06:19.257]        // -> [protType <= 0x00000002]
[03:06:19.257]    </block>
[03:06:19.257]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:19.257]      // if-block "protType == 1"
[03:06:19.257]        // =>  FALSE
[03:06:19.257]      // skip if-block "protType == 1"
[03:06:19.257]    </control>
[03:06:19.257]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:19.257]      // if-block "protType == 2"
[03:06:19.257]        // =>  TRUE
[03:06:19.257]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:19.257]        // if-block "isSWJ"
[03:06:19.257]          // =>  TRUE
[03:06:19.257]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:19.257]          // if-block "hasDormant"
[03:06:19.257]            // =>  FALSE
[03:06:19.261]          // skip if-block "hasDormant"
[03:06:19.261]        </control>
[03:06:19.261]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:19.261]          // if-block "!hasDormant"
[03:06:19.261]            // =>  TRUE
[03:06:19.261]          <block atomic="false" info="">
[03:06:19.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:19.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:19.261]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:19.267]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:19.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:19.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:19.267]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:19.267]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:19.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:19.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:19.277]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:19.277]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:19.277]          </block>
[03:06:19.277]          // end if-block "!hasDormant"
[03:06:19.277]        </control>
[03:06:19.277]        // end if-block "isSWJ"
[03:06:19.277]      </control>
[03:06:19.277]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:19.277]        // if-block "!isSWJ"
[03:06:19.277]          // =>  FALSE
[03:06:19.277]        // skip if-block "!isSWJ"
[03:06:19.277]      </control>
[03:06:19.277]      <block atomic="false" info="">
[03:06:19.277]        ReadDP(0x0);
[03:06:19.287]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:19.287]      </block>
[03:06:19.287]      // end if-block "protType == 2"
[03:06:19.287]    </control>
[03:06:19.287]  </sequence>
[03:06:19.287]  
[03:06:34.341]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:34.341]  
[03:06:34.341]  <debugvars>
[03:06:34.341]    // Pre-defined
[03:06:34.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:34.341]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:34.341]    __dp=0x00000000
[03:06:34.341]    __ap=0x00000000
[03:06:34.341]    __traceout=0x00000000      (Trace Disabled)
[03:06:34.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:34.341]    __FlashAddr=0x00000000
[03:06:34.341]    __FlashLen=0x00000000
[03:06:34.341]    __FlashArg=0x00000000
[03:06:34.341]    __FlashOp=0x00000000
[03:06:34.341]    __Result=0x00000000
[03:06:34.341]  </debugvars>
[03:06:34.341]  
[03:06:34.341]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:34.341]    <block atomic="false" info="">
[03:06:34.341]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:34.341]        // -> [isSWJ <= 0x00000001]
[03:06:34.341]      __var hasDormant = __protocol & 0x00020000;
[03:06:34.341]        // -> [hasDormant <= 0x00000000]
[03:06:34.341]      __var protType   = __protocol & 0x0000FFFF;
[03:06:34.341]        // -> [protType <= 0x00000002]
[03:06:34.341]    </block>
[03:06:34.341]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:34.341]      // if-block "protType == 1"
[03:06:34.341]        // =>  FALSE
[03:06:34.341]      // skip if-block "protType == 1"
[03:06:34.341]    </control>
[03:06:34.341]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:34.341]      // if-block "protType == 2"
[03:06:34.341]        // =>  TRUE
[03:06:34.341]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:34.341]        // if-block "isSWJ"
[03:06:34.341]          // =>  TRUE
[03:06:34.341]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:34.341]          // if-block "hasDormant"
[03:06:34.341]            // =>  FALSE
[03:06:34.341]          // skip if-block "hasDormant"
[03:06:34.341]        </control>
[03:06:34.341]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:34.341]          // if-block "!hasDormant"
[03:06:34.341]            // =>  TRUE
[03:06:34.341]          <block atomic="false" info="">
[03:06:34.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:34.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:34.351]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:34.351]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:34.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:34.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:34.351]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:34.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:34.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:34.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:34.361]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:34.361]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:34.361]          </block>
[03:06:34.361]          // end if-block "!hasDormant"
[03:06:34.361]        </control>
[03:06:34.361]        // end if-block "isSWJ"
[03:06:34.361]      </control>
[03:06:34.361]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:34.361]        // if-block "!isSWJ"
[03:06:34.361]          // =>  FALSE
[03:06:34.371]        // skip if-block "!isSWJ"
[03:06:34.371]      </control>
[03:06:34.371]      <block atomic="false" info="">
[03:06:34.371]        ReadDP(0x0);
[03:06:34.371]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:34.371]      </block>
[03:06:34.371]      // end if-block "protType == 2"
[03:06:34.371]    </control>
[03:06:34.371]  </sequence>
[03:06:34.371]  
[03:06:37.028]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:37.028]  
[03:06:37.044]  <debugvars>
[03:06:37.044]    // Pre-defined
[03:06:37.044]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:37.044]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:37.044]    __dp=0x00000000
[03:06:37.044]    __ap=0x00000000
[03:06:37.044]    __traceout=0x00000000      (Trace Disabled)
[03:06:37.044]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:37.044]    __FlashAddr=0x00000000
[03:06:37.044]    __FlashLen=0x00000000
[03:06:37.044]    __FlashArg=0x00000000
[03:06:37.044]    __FlashOp=0x00000000
[03:06:37.044]    __Result=0x00000000
[03:06:37.044]  </debugvars>
[03:06:37.044]  
[03:06:37.044]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:37.044]    <block atomic="false" info="">
[03:06:37.044]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:37.044]        // -> [isSWJ <= 0x00000001]
[03:06:37.044]      __var hasDormant = __protocol & 0x00020000;
[03:06:37.044]        // -> [hasDormant <= 0x00000000]
[03:06:37.044]      __var protType   = __protocol & 0x0000FFFF;
[03:06:37.044]        // -> [protType <= 0x00000002]
[03:06:37.044]    </block>
[03:06:37.044]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:37.044]      // if-block "protType == 1"
[03:06:37.048]        // =>  FALSE
[03:06:37.048]      // skip if-block "protType == 1"
[03:06:37.048]    </control>
[03:06:37.048]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:37.048]      // if-block "protType == 2"
[03:06:37.048]        // =>  TRUE
[03:06:37.048]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:37.048]        // if-block "isSWJ"
[03:06:37.048]          // =>  TRUE
[03:06:37.048]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:37.048]          // if-block "hasDormant"
[03:06:37.048]            // =>  FALSE
[03:06:37.048]          // skip if-block "hasDormant"
[03:06:37.048]        </control>
[03:06:37.048]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:37.048]          // if-block "!hasDormant"
[03:06:37.048]            // =>  TRUE
[03:06:37.048]          <block atomic="false" info="">
[03:06:37.048]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:37.048]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:37.048]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:37.048]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:37.048]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:37.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:37.058]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:37.058]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:37.058]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:37.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:37.058]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:37.058]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:37.068]          </block>
[03:06:37.068]          // end if-block "!hasDormant"
[03:06:37.068]        </control>
[03:06:37.068]        // end if-block "isSWJ"
[03:06:37.068]      </control>
[03:06:37.068]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:37.068]        // if-block "!isSWJ"
[03:06:37.068]          // =>  FALSE
[03:06:37.068]        // skip if-block "!isSWJ"
[03:06:37.068]      </control>
[03:06:37.068]      <block atomic="false" info="">
[03:06:37.068]        ReadDP(0x0);
[03:06:37.098]  
[03:06:37.098]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:06:37.098]  
[03:06:37.098]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:37.098]      </block>
[03:06:37.098]      // end if-block "protType == 2"
[03:06:37.098]    </control>
[03:06:37.109]  </sequence>
[03:06:37.109]  
[03:06:40.937]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:40.937]  
[03:06:40.956]  <debugvars>
[03:06:40.956]    // Pre-defined
[03:06:40.956]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:40.956]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:40.956]    __dp=0x00000000
[03:06:40.956]    __ap=0x00000000
[03:06:40.957]    __traceout=0x00000000      (Trace Disabled)
[03:06:40.957]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:40.957]    __FlashAddr=0x00000000
[03:06:40.957]    __FlashLen=0x00000000
[03:06:40.957]    __FlashArg=0x00000000
[03:06:40.957]    __FlashOp=0x00000000
[03:06:40.957]    __Result=0x00000000
[03:06:40.957]  </debugvars>
[03:06:40.957]  
[03:06:40.957]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:40.957]    <block atomic="false" info="">
[03:06:40.957]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:40.957]        // -> [isSWJ <= 0x00000001]
[03:06:40.957]      __var hasDormant = __protocol & 0x00020000;
[03:06:40.957]        // -> [hasDormant <= 0x00000000]
[03:06:40.957]      __var protType   = __protocol & 0x0000FFFF;
[03:06:40.957]        // -> [protType <= 0x00000002]
[03:06:40.957]    </block>
[03:06:40.957]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:40.957]      // if-block "protType == 1"
[03:06:40.957]        // =>  FALSE
[03:06:40.957]      // skip if-block "protType == 1"
[03:06:40.957]    </control>
[03:06:40.957]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:40.957]      // if-block "protType == 2"
[03:06:40.957]        // =>  TRUE
[03:06:40.957]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:40.957]        // if-block "isSWJ"
[03:06:40.957]          // =>  TRUE
[03:06:40.957]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:40.957]          // if-block "hasDormant"
[03:06:40.957]            // =>  FALSE
[03:06:40.957]          // skip if-block "hasDormant"
[03:06:40.957]        </control>
[03:06:40.957]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:40.957]          // if-block "!hasDormant"
[03:06:40.957]            // =>  TRUE
[03:06:40.957]          <block atomic="false" info="">
[03:06:40.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:40.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:40.967]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:40.967]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:40.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:40.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:40.967]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:40.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:40.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:40.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:40.977]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:41.979]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:41.988]          </block>
[03:06:41.988]          // end if-block "!hasDormant"
[03:06:41.988]        </control>
[03:06:41.988]        // end if-block "isSWJ"
[03:06:41.988]      </control>
[03:06:41.989]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:41.989]        // if-block "!isSWJ"
[03:06:41.989]          // =>  FALSE
[03:06:41.989]        // skip if-block "!isSWJ"
[03:06:41.989]      </control>
[03:06:41.989]      <block atomic="false" info="">
[03:06:41.989]        ReadDP(0x0);
[03:06:42.029]  
[03:06:42.029]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:06:42.029]  
[03:06:42.029]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:42.029]      </block>
[03:06:42.029]      // end if-block "protType == 2"
[03:06:42.029]    </control>
[03:06:42.029]  </sequence>
[03:06:42.029]  
[03:06:50.919]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:50.919]  
[03:06:50.919]  <debugvars>
[03:06:50.919]    // Pre-defined
[03:06:50.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:50.919]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:50.919]    __dp=0x00000000
[03:06:50.919]    __ap=0x00000000
[03:06:50.919]    __traceout=0x00000000      (Trace Disabled)
[03:06:50.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:50.929]    __FlashAddr=0x00000000
[03:06:50.929]    __FlashLen=0x00000000
[03:06:50.929]    __FlashArg=0x00000000
[03:06:50.929]    __FlashOp=0x00000000
[03:06:50.929]    __Result=0x00000000
[03:06:50.929]  </debugvars>
[03:06:50.929]  
[03:06:50.929]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:50.929]    <block atomic="false" info="">
[03:06:50.929]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:50.929]        // -> [isSWJ <= 0x00000001]
[03:06:50.929]      __var hasDormant = __protocol & 0x00020000;
[03:06:50.929]        // -> [hasDormant <= 0x00000000]
[03:06:50.929]      __var protType   = __protocol & 0x0000FFFF;
[03:06:50.929]        // -> [protType <= 0x00000002]
[03:06:50.929]    </block>
[03:06:50.929]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:50.929]      // if-block "protType == 1"
[03:06:50.929]        // =>  FALSE
[03:06:50.929]      // skip if-block "protType == 1"
[03:06:50.929]    </control>
[03:06:50.929]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:50.929]      // if-block "protType == 2"
[03:06:50.929]        // =>  TRUE
[03:06:50.929]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:50.929]        // if-block "isSWJ"
[03:06:50.929]          // =>  TRUE
[03:06:50.929]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:50.929]          // if-block "hasDormant"
[03:06:50.929]            // =>  FALSE
[03:06:50.929]          // skip if-block "hasDormant"
[03:06:50.929]        </control>
[03:06:50.929]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:50.929]          // if-block "!hasDormant"
[03:06:50.929]            // =>  TRUE
[03:06:50.929]          <block atomic="false" info="">
[03:06:50.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:50.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:50.939]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:50.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:50.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:50.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:50.939]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:50.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:50.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:50.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:50.939]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:50.949]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:50.949]          </block>
[03:06:50.949]          // end if-block "!hasDormant"
[03:06:50.949]        </control>
[03:06:50.949]        // end if-block "isSWJ"
[03:06:50.949]      </control>
[03:06:50.949]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:50.949]        // if-block "!isSWJ"
[03:06:50.949]          // =>  FALSE
[03:06:50.949]        // skip if-block "!isSWJ"
[03:06:50.949]      </control>
[03:06:50.949]      <block atomic="false" info="">
[03:06:50.949]        ReadDP(0x0);
[03:06:50.980]  
[03:06:50.980]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:06:50.980]  
[03:06:50.980]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:50.980]      </block>
[03:06:50.980]      // end if-block "protType == 2"
[03:06:50.980]    </control>
[03:06:50.989]  </sequence>
[03:06:50.989]  
[03:06:53.592]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:53.592]  
[03:06:53.596]  <debugvars>
[03:06:53.596]    // Pre-defined
[03:06:53.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:53.596]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[03:06:53.596]    __dp=0x00000000
[03:06:53.596]    __ap=0x00000000
[03:06:53.596]    __traceout=0x00000000      (Trace Disabled)
[03:06:53.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:53.596]    __FlashAddr=0x00000000
[03:06:53.596]    __FlashLen=0x00000000
[03:06:53.596]    __FlashArg=0x00000000
[03:06:53.596]    __FlashOp=0x00000000
[03:06:53.596]    __Result=0x00000000
[03:06:53.596]  </debugvars>
[03:06:53.596]  
[03:06:53.596]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:53.596]    <block atomic="false" info="">
[03:06:53.596]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:53.596]        // -> [isSWJ <= 0x00000001]
[03:06:53.596]      __var hasDormant = __protocol & 0x00020000;
[03:06:53.596]        // -> [hasDormant <= 0x00000000]
[03:06:53.596]      __var protType   = __protocol & 0x0000FFFF;
[03:06:53.599]        // -> [protType <= 0x00000002]
[03:06:53.599]    </block>
[03:06:53.599]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:53.599]      // if-block "protType == 1"
[03:06:53.599]        // =>  FALSE
[03:06:53.599]      // skip if-block "protType == 1"
[03:06:53.599]    </control>
[03:06:53.599]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:53.599]      // if-block "protType == 2"
[03:06:53.599]        // =>  TRUE
[03:06:53.599]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:53.599]        // if-block "isSWJ"
[03:06:53.599]          // =>  TRUE
[03:06:53.599]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:53.599]          // if-block "hasDormant"
[03:06:53.599]            // =>  FALSE
[03:06:53.599]          // skip if-block "hasDormant"
[03:06:53.599]        </control>
[03:06:53.599]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:53.599]          // if-block "!hasDormant"
[03:06:53.599]            // =>  TRUE
[03:06:53.599]          <block atomic="false" info="">
[03:06:53.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:53.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:53.599]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:53.599]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:53.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:53.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:53.608]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:53.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:53.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:53.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:53.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:53.609]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:53.609]          </block>
[03:06:53.609]          // end if-block "!hasDormant"
[03:06:53.609]        </control>
[03:06:53.609]        // end if-block "isSWJ"
[03:06:53.609]      </control>
[03:06:53.609]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:53.609]        // if-block "!isSWJ"
[03:06:53.609]          // =>  FALSE
[03:06:53.609]        // skip if-block "!isSWJ"
[03:06:53.609]      </control>
[03:06:53.609]      <block atomic="false" info="">
[03:06:53.609]        ReadDP(0x0);
[03:06:53.640]  
[03:06:53.640]  !!! E310 : Debug access failed - cannot read DP register 0x00
[03:06:53.640]  
[03:06:53.640]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:53.640]      </block>
[03:06:53.640]      // end if-block "protType == 2"
[03:06:53.640]    </control>
[03:06:53.640]  </sequence>
[03:06:53.640]  
[03:06:56.310]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:06:56.310]  
[03:06:56.310]  <debugvars>
[03:06:56.310]    // Pre-defined
[03:06:56.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:56.310]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:06:56.310]    __dp=0x00000000
[03:06:56.310]    __ap=0x00000000
[03:06:56.310]    __traceout=0x00000000      (Trace Disabled)
[03:06:56.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:56.310]    __FlashAddr=0x00000000
[03:06:56.310]    __FlashLen=0x00000000
[03:06:56.310]    __FlashArg=0x00000000
[03:06:56.310]    __FlashOp=0x00000000
[03:06:56.310]    __Result=0x00000000
[03:06:56.310]  </debugvars>
[03:06:56.310]  
[03:06:56.310]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:06:56.310]    <block atomic="false" info="">
[03:06:56.310]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:06:56.310]        // -> [isSWJ <= 0x00000001]
[03:06:56.310]      __var hasDormant = __protocol & 0x00020000;
[03:06:56.310]        // -> [hasDormant <= 0x00000000]
[03:06:56.310]      __var protType   = __protocol & 0x0000FFFF;
[03:06:56.310]        // -> [protType <= 0x00000002]
[03:06:56.310]    </block>
[03:06:56.310]    <control if="protType == 1" while="" timeout="0" info="">
[03:06:56.310]      // if-block "protType == 1"
[03:06:56.310]        // =>  FALSE
[03:06:56.310]      // skip if-block "protType == 1"
[03:06:56.310]    </control>
[03:06:56.310]    <control if="protType == 2" while="" timeout="0" info="">
[03:06:56.310]      // if-block "protType == 2"
[03:06:56.310]        // =>  TRUE
[03:06:56.310]      <control if="isSWJ" while="" timeout="0" info="">
[03:06:56.310]        // if-block "isSWJ"
[03:06:56.310]          // =>  TRUE
[03:06:56.310]        <control if="hasDormant" while="" timeout="0" info="">
[03:06:56.310]          // if-block "hasDormant"
[03:06:56.320]            // =>  FALSE
[03:06:56.320]          // skip if-block "hasDormant"
[03:06:56.320]        </control>
[03:06:56.320]        <control if="!hasDormant" while="" timeout="0" info="">
[03:06:56.320]          // if-block "!hasDormant"
[03:06:56.320]            // =>  TRUE
[03:06:56.320]          <block atomic="false" info="">
[03:06:56.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:06:56.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:56.323]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:06:56.330]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:06:56.330]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:06:56.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:56.330]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:06:56.340]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:06:56.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:06:56.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:06:56.350]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:06:56.360]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:06:56.360]          </block>
[03:06:56.360]          // end if-block "!hasDormant"
[03:06:56.360]        </control>
[03:06:56.360]        // end if-block "isSWJ"
[03:06:56.360]      </control>
[03:06:56.360]      <control if="!isSWJ" while="" timeout="0" info="">
[03:06:56.360]        // if-block "!isSWJ"
[03:06:56.360]          // =>  FALSE
[03:06:56.360]        // skip if-block "!isSWJ"
[03:06:56.360]      </control>
[03:06:56.360]      <block atomic="false" info="">
[03:06:56.360]        ReadDP(0x0);
[03:06:56.370]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:06:56.370]      </block>
[03:06:56.370]      // end if-block "protType == 2"
[03:06:56.370]    </control>
[03:06:56.370]  </sequence>
[03:06:56.370]  
[03:06:56.380]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:06:56.380]  
[03:06:56.380]  <debugvars>
[03:06:56.380]    // Pre-defined
[03:06:56.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:56.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:06:56.380]    __dp=0x00000000
[03:06:56.380]    __ap=0x00000000
[03:06:56.380]    __traceout=0x00000000      (Trace Disabled)
[03:06:56.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:56.380]    __FlashAddr=0x00000000
[03:06:56.380]    __FlashLen=0x00000000
[03:06:56.380]    __FlashArg=0x00000000
[03:06:56.380]    __FlashOp=0x00000000
[03:06:56.380]    __Result=0x00000000
[03:06:56.380]  </debugvars>
[03:06:56.380]  
[03:06:56.380]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:06:56.380]    <block atomic="false" info="">
[03:06:56.380]      __var SW_DP_ABORT       = 0x0;
[03:06:56.380]        // -> [SW_DP_ABORT <= 0x00000000]
[03:06:56.380]      __var DP_CTRL_STAT      = 0x4;
[03:06:56.380]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:06:56.380]      __var DP_SELECT         = 0x8;
[03:06:56.380]        // -> [DP_SELECT <= 0x00000008]
[03:06:56.390]      __var powered_down      = 0;
[03:06:56.390]        // -> [powered_down <= 0x00000000]
[03:06:56.390]      WriteDP(DP_SELECT, 0x00000000);
[03:06:56.390]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:06:56.390]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:06:56.400]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:06:56.400]        // -> [powered_down <= 0x00000001]
[03:06:56.400]    </block>
[03:06:56.400]    <control if="powered_down" while="" timeout="0" info="">
[03:06:56.400]      // if-block "powered_down"
[03:06:56.400]        // =>  TRUE
[03:06:56.400]      <block atomic="false" info="">
[03:06:56.400]        Message(0, "Debug/System power-up request sent");
[03:06:56.400]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:06:56.410]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:06:56.410]      </block>
[03:06:56.410]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:06:56.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:06:56.410]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:06:56.410]        // while-condition  =>  FALSE
[03:06:56.410]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:06:56.410]      </control>
[03:06:56.410]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:06:56.410]        // if-block "(__protocol & 0xFFFF) == 1"
[03:06:56.420]          // =>  FALSE
[03:06:56.420]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:06:56.420]      </control>
[03:06:56.420]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:06:56.420]        // if-block "(__protocol & 0xFFFF) == 2"
[03:06:56.420]          // =>  TRUE
[03:06:56.420]        <block atomic="false" info="">
[03:06:56.420]          Message(0, "executing SWD power up");
[03:06:56.423]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:06:56.423]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:06:56.423]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:06:56.430]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:06:56.430]        </block>
[03:06:56.430]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:06:56.430]      </control>
[03:06:56.430]      // end if-block "powered_down"
[03:06:56.430]    </control>
[03:06:56.430]    <block atomic="false" info="">
[03:06:56.430]      __var DEBUG_PORT_VAL    = 0;
[03:06:56.430]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:06:56.430]      __var ACCESS_POINT_VAL  = 0;
[03:06:56.430]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:06:56.430]      __ap = 1; 
[03:06:56.430]        // -> [__ap <= 0x00000001]
[03:06:56.430]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:06:56.440]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:06:56.440]      __ap = 4;
[03:06:56.440]        // -> [__ap <= 0x00000004]
[03:06:56.440]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:06:56.440]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:06:56.440]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:06:56.440]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:06:56.450]    </block>
[03:06:56.450]    <block atomic="false" info="">
[03:06:56.450]      __var nReset = 0x80;
[03:06:56.450]        // -> [nReset <= 0x00000080]
[03:06:56.450]      __var canReadPins = 0;
[03:06:56.450]        // -> [canReadPins <= 0x00000000]
[03:06:56.450]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:06:56.460]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:06:56.460]        // -> [canReadPins <= 0x00000001]
[03:06:56.460]    </block>
[03:06:56.460]    <control if="" while="1" timeout="200" info="">
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.460]      // while "1"  (timeout="200")
[03:06:56.460]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.470]      // while "1"  (timeout="200")
[03:06:56.470]      // while-condition  =>  TRUE
[03:06:56.480]      // while "1"  (timeout="200")
[03:06:56.480]      // while  =>  TIMEOUT
[03:06:56.480]      // end while "1"
[03:06:56.480]    </control>
[03:06:56.480]    <control if="canReadPins" while="" timeout="0" info="">
[03:06:56.480]      // if-block "canReadPins"
[03:06:56.480]        // =>  TRUE
[03:06:56.480]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:06:56.480]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:06:56.480]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:06:56.480]        // while-condition  =>  FALSE
[03:06:56.480]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:06:56.480]      </control>
[03:06:56.480]      // end if-block "canReadPins"
[03:06:56.480]    </control>
[03:06:56.480]    <control if="!canReadPins" while="" timeout="0" info="">
[03:06:56.480]      // if-block "!canReadPins"
[03:06:56.480]        // =>  FALSE
[03:06:56.480]      // skip if-block "!canReadPins"
[03:06:56.480]    </control>
[03:06:56.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:06:56.480]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:06:56.480]        // =>  TRUE
[03:06:56.480]      <block atomic="false" info="">
[03:06:56.480]        WriteAP(0x00, 0x190008);
[03:06:56.490]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:06:56.490]        WriteAP(0xF0, 0x01);
[03:06:56.490]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:06:56.490]      </block>
[03:06:56.490]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:06:56.490]    </control>
[03:06:56.490]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:06:56.490]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:06:56.490]        // =>  FALSE
[03:06:56.490]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:06:56.490]    </control>
[03:06:56.490]    <block atomic="false" info="">
[03:06:56.490]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:06:56.500]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:06:56.500]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:06:56.500]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:06:56.500]      __ap = 0; //lets make sure we reset the access point selection
[03:06:56.500]        // -> [__ap <= 0x00000000]
[03:06:56.510]    </block>
[03:06:56.510]  </sequence>
[03:06:56.510]  
[03:06:56.570]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:06:56.570]  
[03:06:56.570]  <debugvars>
[03:06:56.570]    // Pre-defined
[03:06:56.570]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:06:56.570]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:06:56.570]    __dp=0x00000000
[03:06:56.570]    __ap=0x00000000
[03:06:56.570]    __traceout=0x00000000      (Trace Disabled)
[03:06:56.570]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:06:56.570]    __FlashAddr=0x00000000
[03:06:56.570]    __FlashLen=0x00000000
[03:06:56.570]    __FlashArg=0x00000000
[03:06:56.580]    __FlashOp=0x00000000
[03:06:56.580]    __Result=0x00000000
[03:06:56.580]  </debugvars>
[03:06:56.580]  
[03:06:56.580]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:06:56.580]    <block atomic="false" info="">
[03:06:56.580]      __var deviceID = 0;
[03:06:56.580]        // -> [deviceID <= 0x00000000]
[03:06:56.580]      __var version = 0;
[03:06:56.580]        // -> [version <= 0x00000000]
[03:06:56.580]      __var partNum = 0;
[03:06:56.580]        // -> [partNum <= 0x00000000]
[03:06:56.580]      __var manuf = 0;
[03:06:56.580]        // -> [manuf <= 0x00000000]
[03:06:56.580]      __var isMSPM0G1X0X_G3X0X = 0;
[03:06:56.580]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:06:56.580]      __var isProduction = 0;
[03:06:56.580]        // -> [isProduction <= 0x00000000]
[03:06:56.580]      __var continueId = 0;
[03:06:56.580]        // -> [continueId <= 0x00000000]
[03:06:56.580]      deviceID =   Read32(0x41C40004);
[03:06:56.600]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:06:56.600]        // -> [deviceID <= 0x2BB8802F]
[03:06:56.600]      version = deviceID >> 28;
[03:06:56.600]        // -> [version <= 0x00000002]
[03:06:56.600]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:06:56.600]        // -> [partNum <= 0x0000BB88]
[03:06:56.600]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:06:56.600]        // -> [manuf <= 0x00000017]
[03:06:56.600]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:06:56.600]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:06:56.600]      isProduction = (version > 0);
[03:06:56.600]        // -> [isProduction <= 0x00000001]
[03:06:56.600]    </block>
[03:06:56.600]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:06:56.600]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:06:56.600]        // =>  FALSE
[03:06:56.600]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:06:56.600]    </control>
[03:06:56.600]    <control if="continueId == 4" while="" timeout="0" info="">
[03:06:56.600]      // if-block "continueId == 4"
[03:06:56.600]        // =>  FALSE
[03:06:56.600]      // skip if-block "continueId == 4"
[03:06:56.600]    </control>
[03:06:56.600]    <control if="!isProduction" while="" timeout="0" info="">
[03:06:56.600]      // if-block "!isProduction"
[03:06:56.600]        // =>  FALSE
[03:06:56.610]      // skip if-block "!isProduction"
[03:06:56.610]    </control>
[03:06:56.610]  </sequence>
[03:06:56.610]  
[03:26:18.411]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:26:18.411]  
[03:26:18.411]  <debugvars>
[03:26:18.413]    // Pre-defined
[03:26:18.413]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.413]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:26:18.413]    __dp=0x00000000
[03:26:18.413]    __ap=0x00000000
[03:26:18.413]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.413]    __FlashAddr=0x00000000
[03:26:18.413]    __FlashLen=0x00000000
[03:26:18.413]    __FlashArg=0x00000000
[03:26:18.413]    __FlashOp=0x00000000
[03:26:18.413]    __Result=0x00000000
[03:26:18.413]  </debugvars>
[03:26:18.413]  
[03:26:18.413]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:26:18.413]    <block atomic="false" info="">
[03:26:18.413]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:26:18.413]        // -> [isSWJ <= 0x00000001]
[03:26:18.413]      __var hasDormant = __protocol & 0x00020000;
[03:26:18.413]        // -> [hasDormant <= 0x00000000]
[03:26:18.413]      __var protType   = __protocol & 0x0000FFFF;
[03:26:18.413]        // -> [protType <= 0x00000002]
[03:26:18.413]    </block>
[03:26:18.413]    <control if="protType == 1" while="" timeout="0" info="">
[03:26:18.413]      // if-block "protType == 1"
[03:26:18.413]        // =>  FALSE
[03:26:18.413]      // skip if-block "protType == 1"
[03:26:18.413]    </control>
[03:26:18.413]    <control if="protType == 2" while="" timeout="0" info="">
[03:26:18.413]      // if-block "protType == 2"
[03:26:18.413]        // =>  TRUE
[03:26:18.413]      <control if="isSWJ" while="" timeout="0" info="">
[03:26:18.413]        // if-block "isSWJ"
[03:26:18.413]          // =>  TRUE
[03:26:18.417]        <control if="hasDormant" while="" timeout="0" info="">
[03:26:18.417]          // if-block "hasDormant"
[03:26:18.417]            // =>  FALSE
[03:26:18.417]          // skip if-block "hasDormant"
[03:26:18.417]        </control>
[03:26:18.417]        <control if="!hasDormant" while="" timeout="0" info="">
[03:26:18.417]          // if-block "!hasDormant"
[03:26:18.417]            // =>  TRUE
[03:26:18.417]          <block atomic="false" info="">
[03:26:18.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:26:18.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.421]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:26:18.423]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:26:18.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:26:18.426]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.426]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:26:18.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:26:18.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:26:18.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:26:18.433]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:26:18.433]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:26:18.433]          </block>
[03:26:18.433]          // end if-block "!hasDormant"
[03:26:18.433]        </control>
[03:26:18.433]        // end if-block "isSWJ"
[03:26:18.433]      </control>
[03:26:18.433]      <control if="!isSWJ" while="" timeout="0" info="">
[03:26:18.433]        // if-block "!isSWJ"
[03:26:18.433]          // =>  FALSE
[03:26:18.433]        // skip if-block "!isSWJ"
[03:26:18.433]      </control>
[03:26:18.433]      <block atomic="false" info="">
[03:26:18.433]        ReadDP(0x0);
[03:26:18.441]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:26:18.441]      </block>
[03:26:18.441]      // end if-block "protType == 2"
[03:26:18.441]    </control>
[03:26:18.441]  </sequence>
[03:26:18.441]  
[03:26:18.448]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:26:18.448]  
[03:26:18.448]  <debugvars>
[03:26:18.448]    // Pre-defined
[03:26:18.448]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.448]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:26:18.448]    __dp=0x00000000
[03:26:18.448]    __ap=0x00000000
[03:26:18.448]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.448]    __FlashAddr=0x00000000
[03:26:18.448]    __FlashLen=0x00000000
[03:26:18.448]    __FlashArg=0x00000000
[03:26:18.448]    __FlashOp=0x00000000
[03:26:18.448]    __Result=0x00000000
[03:26:18.448]  </debugvars>
[03:26:18.448]  
[03:26:18.448]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:26:18.448]    <block atomic="false" info="">
[03:26:18.448]      __var SW_DP_ABORT       = 0x0;
[03:26:18.448]        // -> [SW_DP_ABORT <= 0x00000000]
[03:26:18.448]      __var DP_CTRL_STAT      = 0x4;
[03:26:18.448]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:26:18.448]      __var DP_SELECT         = 0x8;
[03:26:18.448]        // -> [DP_SELECT <= 0x00000008]
[03:26:18.448]      __var powered_down      = 0;
[03:26:18.448]        // -> [powered_down <= 0x00000000]
[03:26:18.448]      WriteDP(DP_SELECT, 0x00000000);
[03:26:18.456]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:26:18.456]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:26:18.463]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:26:18.463]        // -> [powered_down <= 0x00000001]
[03:26:18.463]    </block>
[03:26:18.463]    <control if="powered_down" while="" timeout="0" info="">
[03:26:18.463]      // if-block "powered_down"
[03:26:18.463]        // =>  TRUE
[03:26:18.463]      <block atomic="false" info="">
[03:26:18.463]        Message(0, "Debug/System power-up request sent");
[03:26:18.465]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:26:18.468]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:26:18.468]      </block>
[03:26:18.468]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:26:18.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:26:18.473]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:26:18.473]        // while-condition  =>  FALSE
[03:26:18.473]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:26:18.473]      </control>
[03:26:18.473]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:26:18.473]        // if-block "(__protocol & 0xFFFF) == 1"
[03:26:18.473]          // =>  FALSE
[03:26:18.473]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:26:18.473]      </control>
[03:26:18.473]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:26:18.476]        // if-block "(__protocol & 0xFFFF) == 2"
[03:26:18.476]          // =>  TRUE
[03:26:18.476]        <block atomic="false" info="">
[03:26:18.476]          Message(0, "executing SWD power up");
[03:26:18.476]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:26:18.483]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:26:18.483]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:26:18.489]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:26:18.489]        </block>
[03:26:18.489]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:26:18.489]      </control>
[03:26:18.489]      // end if-block "powered_down"
[03:26:18.489]    </control>
[03:26:18.489]    <block atomic="false" info="">
[03:26:18.489]      __var DEBUG_PORT_VAL    = 0;
[03:26:18.489]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:26:18.489]      __var ACCESS_POINT_VAL  = 0;
[03:26:18.489]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:26:18.489]      __ap = 1; 
[03:26:18.489]        // -> [__ap <= 0x00000001]
[03:26:18.489]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:26:18.498]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:26:18.498]      __ap = 4;
[03:26:18.498]        // -> [__ap <= 0x00000004]
[03:26:18.498]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:26:18.506]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:26:18.506]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:26:18.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:26:18.509]    </block>
[03:26:18.509]    <block atomic="false" info="">
[03:26:18.509]      __var nReset = 0x80;
[03:26:18.509]        // -> [nReset <= 0x00000080]
[03:26:18.509]      __var canReadPins = 0;
[03:26:18.509]        // -> [canReadPins <= 0x00000000]
[03:26:18.509]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:26:18.513]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:26:18.513]        // -> [canReadPins <= 0x00000001]
[03:26:18.513]    </block>
[03:26:18.513]    <control if="" while="1" timeout="200" info="">
[03:26:18.513]      // while "1"  (timeout="200")
[03:26:18.513]      // while-condition  =>  TRUE
[03:26:18.513]      // while "1"  (timeout="200")
[03:26:18.513]      // while-condition  =>  TRUE
[03:26:18.513]      // while "1"  (timeout="200")
[03:26:18.513]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.515]      // while-condition  =>  TRUE
[03:26:18.515]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.517]      // while "1"  (timeout="200")
[03:26:18.517]      // while-condition  =>  TRUE
[03:26:18.520]      // while "1"  (timeout="200")
[03:26:18.520]      // while  =>  TIMEOUT
[03:26:18.520]      // end while "1"
[03:26:18.520]    </control>
[03:26:18.520]    <control if="canReadPins" while="" timeout="0" info="">
[03:26:18.520]      // if-block "canReadPins"
[03:26:18.520]        // =>  TRUE
[03:26:18.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:26:18.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:26:18.523]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:26:18.523]        // while-condition  =>  FALSE
[03:26:18.523]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:26:18.523]      </control>
[03:26:18.523]      // end if-block "canReadPins"
[03:26:18.523]    </control>
[03:26:18.523]    <control if="!canReadPins" while="" timeout="0" info="">
[03:26:18.523]      // if-block "!canReadPins"
[03:26:18.523]        // =>  FALSE
[03:26:18.523]      // skip if-block "!canReadPins"
[03:26:18.523]    </control>
[03:26:18.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:26:18.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:26:18.523]        // =>  TRUE
[03:26:18.523]      <block atomic="false" info="">
[03:26:18.523]        WriteAP(0x00, 0x190008);
[03:26:18.528]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:26:18.528]        WriteAP(0xF0, 0x01);
[03:26:18.533]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:26:18.533]      </block>
[03:26:18.533]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:26:18.533]    </control>
[03:26:18.533]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:26:18.533]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:26:18.533]        // =>  FALSE
[03:26:18.533]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:26:18.533]    </control>
[03:26:18.533]    <block atomic="false" info="">
[03:26:18.533]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:26:18.540]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:26:18.540]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:26:18.540]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:26:18.545]      __ap = 0; //lets make sure we reset the access point selection
[03:26:18.545]        // -> [__ap <= 0x00000000]
[03:26:18.545]    </block>
[03:26:18.545]  </sequence>
[03:26:18.545]  
[03:26:18.588]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:26:18.588]  
[03:26:18.588]  <debugvars>
[03:26:18.588]    // Pre-defined
[03:26:18.588]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:26:18.588]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:26:18.588]    __dp=0x00000000
[03:26:18.588]    __ap=0x00000000
[03:26:18.588]    __traceout=0x00000000      (Trace Disabled)
[03:26:18.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:26:18.589]    __FlashAddr=0x00000000
[03:26:18.589]    __FlashLen=0x00000000
[03:26:18.589]    __FlashArg=0x00000000
[03:26:18.589]    __FlashOp=0x00000000
[03:26:18.589]    __Result=0x00000000
[03:26:18.589]  </debugvars>
[03:26:18.589]  
[03:26:18.589]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:26:18.589]    <block atomic="false" info="">
[03:26:18.589]      __var deviceID = 0;
[03:26:18.589]        // -> [deviceID <= 0x00000000]
[03:26:18.589]      __var version = 0;
[03:26:18.589]        // -> [version <= 0x00000000]
[03:26:18.589]      __var partNum = 0;
[03:26:18.589]        // -> [partNum <= 0x00000000]
[03:26:18.589]      __var manuf = 0;
[03:26:18.589]        // -> [manuf <= 0x00000000]
[03:26:18.589]      __var isMSPM0G1X0X_G3X0X = 0;
[03:26:18.589]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:26:18.589]      __var isProduction = 0;
[03:26:18.589]        // -> [isProduction <= 0x00000000]
[03:26:18.589]      __var continueId = 0;
[03:26:18.589]        // -> [continueId <= 0x00000000]
[03:26:18.589]      deviceID =   Read32(0x41C40004);
[03:26:18.593]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:26:18.593]        // -> [deviceID <= 0x2BB8802F]
[03:26:18.593]      version = deviceID >> 28;
[03:26:18.593]        // -> [version <= 0x00000002]
[03:26:18.593]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:26:18.593]        // -> [partNum <= 0x0000BB88]
[03:26:18.603]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:26:18.603]        // -> [manuf <= 0x00000017]
[03:26:18.603]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:26:18.603]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:26:18.603]      isProduction = (version > 0);
[03:26:18.603]        // -> [isProduction <= 0x00000001]
[03:26:18.603]    </block>
[03:26:18.603]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:26:18.603]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:26:18.603]        // =>  FALSE
[03:26:18.603]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:26:18.603]    </control>
[03:26:18.603]    <control if="continueId == 4" while="" timeout="0" info="">
[03:26:18.603]      // if-block "continueId == 4"
[03:26:18.603]        // =>  FALSE
[03:26:18.605]      // skip if-block "continueId == 4"
[03:26:18.605]    </control>
[03:26:18.605]    <control if="!isProduction" while="" timeout="0" info="">
[03:26:18.605]      // if-block "!isProduction"
[03:26:18.605]        // =>  FALSE
[03:26:18.605]      // skip if-block "!isProduction"
[03:26:18.605]    </control>
[03:26:18.605]  </sequence>
[03:26:18.605]  
[03:35:47.797]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:35:47.797]  
[03:35:47.805]  <debugvars>
[03:35:47.805]    // Pre-defined
[03:35:47.805]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:35:47.805]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:35:47.805]    __dp=0x00000000
[03:35:47.805]    __ap=0x00000000
[03:35:47.805]    __traceout=0x00000000      (Trace Disabled)
[03:35:47.805]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:35:47.805]    __FlashAddr=0x00000000
[03:35:47.805]    __FlashLen=0x00000000
[03:35:47.805]    __FlashArg=0x00000000
[03:35:47.805]    __FlashOp=0x00000000
[03:35:47.805]    __Result=0x00000000
[03:35:47.805]  </debugvars>
[03:35:47.805]  
[03:35:47.805]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:35:47.807]    <block atomic="false" info="">
[03:35:47.807]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:35:47.807]        // -> [isSWJ <= 0x00000001]
[03:35:47.807]      __var hasDormant = __protocol & 0x00020000;
[03:35:47.807]        // -> [hasDormant <= 0x00000000]
[03:35:47.807]      __var protType   = __protocol & 0x0000FFFF;
[03:35:47.807]        // -> [protType <= 0x00000002]
[03:35:47.807]    </block>
[03:35:47.807]    <control if="protType == 1" while="" timeout="0" info="">
[03:35:47.807]      // if-block "protType == 1"
[03:35:47.807]        // =>  FALSE
[03:35:47.807]      // skip if-block "protType == 1"
[03:35:47.807]    </control>
[03:35:47.807]    <control if="protType == 2" while="" timeout="0" info="">
[03:35:47.807]      // if-block "protType == 2"
[03:35:47.807]        // =>  TRUE
[03:35:47.807]      <control if="isSWJ" while="" timeout="0" info="">
[03:35:47.807]        // if-block "isSWJ"
[03:35:47.807]          // =>  TRUE
[03:35:47.807]        <control if="hasDormant" while="" timeout="0" info="">
[03:35:47.807]          // if-block "hasDormant"
[03:35:47.807]            // =>  FALSE
[03:35:47.807]          // skip if-block "hasDormant"
[03:35:47.807]        </control>
[03:35:47.807]        <control if="!hasDormant" while="" timeout="0" info="">
[03:35:47.807]          // if-block "!hasDormant"
[03:35:47.807]            // =>  TRUE
[03:35:47.807]          <block atomic="false" info="">
[03:35:47.807]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:35:47.807]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:35:47.807]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:35:47.807]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:35:47.807]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:35:47.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:35:47.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:35:47.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:35:47.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:35:47.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:35:47.827]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:35:47.829]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:35:47.829]          </block>
[03:35:47.829]          // end if-block "!hasDormant"
[03:35:47.829]        </control>
[03:35:47.829]        // end if-block "isSWJ"
[03:35:47.829]      </control>
[03:35:47.829]      <control if="!isSWJ" while="" timeout="0" info="">
[03:35:47.829]        // if-block "!isSWJ"
[03:35:47.829]          // =>  FALSE
[03:35:47.829]        // skip if-block "!isSWJ"
[03:35:47.829]      </control>
[03:35:47.829]      <block atomic="false" info="">
[03:35:47.829]        ReadDP(0x0);
[03:35:47.837]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:35:47.837]      </block>
[03:35:47.837]      // end if-block "protType == 2"
[03:35:47.837]    </control>
[03:35:47.837]  </sequence>
[03:35:47.839]  
[03:35:47.858]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:35:47.858]  
[03:35:47.858]  <debugvars>
[03:35:47.858]    // Pre-defined
[03:35:47.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:35:47.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:35:47.858]    __dp=0x00000000
[03:35:47.858]    __ap=0x00000000
[03:35:47.858]    __traceout=0x00000000      (Trace Disabled)
[03:35:47.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:35:47.858]    __FlashAddr=0x00000000
[03:35:47.858]    __FlashLen=0x00000000
[03:35:47.858]    __FlashArg=0x00000000
[03:35:47.858]    __FlashOp=0x00000000
[03:35:47.858]    __Result=0x00000000
[03:35:47.858]  </debugvars>
[03:35:47.858]  
[03:35:47.858]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:35:47.858]    <block atomic="false" info="">
[03:35:47.858]      __var SW_DP_ABORT       = 0x0;
[03:35:47.858]        // -> [SW_DP_ABORT <= 0x00000000]
[03:35:47.858]      __var DP_CTRL_STAT      = 0x4;
[03:35:47.858]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:35:47.858]      __var DP_SELECT         = 0x8;
[03:35:47.858]        // -> [DP_SELECT <= 0x00000008]
[03:35:47.858]      __var powered_down      = 0;
[03:35:47.858]        // -> [powered_down <= 0x00000000]
[03:35:47.858]      WriteDP(DP_SELECT, 0x00000000);
[03:35:47.858]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:35:47.858]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:35:47.868]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:35:47.868]        // -> [powered_down <= 0x00000001]
[03:35:47.868]    </block>
[03:35:47.868]    <control if="powered_down" while="" timeout="0" info="">
[03:35:47.868]      // if-block "powered_down"
[03:35:47.868]        // =>  TRUE
[03:35:47.868]      <block atomic="false" info="">
[03:35:47.868]        Message(0, "Debug/System power-up request sent");
[03:35:47.868]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:35:47.868]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:35:47.868]      </block>
[03:35:47.868]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:35:47.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.878]        // while-condition  =>  TRUE
[03:35:47.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.878]        // while-condition  =>  TRUE
[03:35:47.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.888]        // while-condition  =>  TRUE
[03:35:47.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.888]        // while-condition  =>  TRUE
[03:35:47.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.898]        // while-condition  =>  TRUE
[03:35:47.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.900]        // while-condition  =>  TRUE
[03:35:47.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.900]        // while-condition  =>  TRUE
[03:35:47.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.908]        // while-condition  =>  TRUE
[03:35:47.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.908]        // while-condition  =>  TRUE
[03:35:47.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.918]        // while-condition  =>  TRUE
[03:35:47.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.918]        // while-condition  =>  TRUE
[03:35:47.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.918]        // while-condition  =>  TRUE
[03:35:47.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.929]        // while-condition  =>  TRUE
[03:35:47.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.929]        // while-condition  =>  TRUE
[03:35:47.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.938]        // while-condition  =>  TRUE
[03:35:47.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.938]        // while-condition  =>  TRUE
[03:35:47.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.948]        // while-condition  =>  TRUE
[03:35:47.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.948]        // while-condition  =>  TRUE
[03:35:47.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.958]        // while-condition  =>  TRUE
[03:35:47.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.958]        // while-condition  =>  TRUE
[03:35:47.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.958]        // while-condition  =>  TRUE
[03:35:47.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.968]        // while-condition  =>  TRUE
[03:35:47.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.968]        // while-condition  =>  TRUE
[03:35:47.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.968]        // while-condition  =>  TRUE
[03:35:47.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.979]        // while-condition  =>  TRUE
[03:35:47.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.979]        // while-condition  =>  TRUE
[03:35:47.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.988]        // while-condition  =>  TRUE
[03:35:47.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.988]        // while-condition  =>  TRUE
[03:35:47.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.988]        // while-condition  =>  TRUE
[03:35:47.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.998]        // while-condition  =>  TRUE
[03:35:47.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.998]        // while-condition  =>  TRUE
[03:35:47.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:47.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:47.998]        // while-condition  =>  TRUE
[03:35:48.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.008]        // while-condition  =>  TRUE
[03:35:48.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.008]        // while-condition  =>  TRUE
[03:35:48.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.018]        // while-condition  =>  TRUE
[03:35:48.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.018]        // while-condition  =>  TRUE
[03:35:48.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.029]        // while-condition  =>  TRUE
[03:35:48.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.029]        // while-condition  =>  TRUE
[03:35:48.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.029]        // while-condition  =>  TRUE
[03:35:48.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.038]        // while-condition  =>  TRUE
[03:35:48.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.038]        // while-condition  =>  TRUE
[03:35:48.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.038]        // while-condition  =>  TRUE
[03:35:48.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.048]        // while-condition  =>  TRUE
[03:35:48.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.048]        // while-condition  =>  TRUE
[03:35:48.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.048]        // while-condition  =>  TRUE
[03:35:48.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.058]        // while-condition  =>  TRUE
[03:35:48.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.058]        // while-condition  =>  TRUE
[03:35:48.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.068]        // while-condition  =>  TRUE
[03:35:48.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.068]        // while-condition  =>  TRUE
[03:35:48.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.078]        // while-condition  =>  TRUE
[03:35:48.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.078]        // while-condition  =>  TRUE
[03:35:48.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.087]        // while-condition  =>  TRUE
[03:35:48.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.089]        // while-condition  =>  TRUE
[03:35:48.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.089]        // while-condition  =>  TRUE
[03:35:48.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.099]        // while-condition  =>  TRUE
[03:35:48.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.111]        // while-condition  =>  TRUE
[03:35:48.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.111]        // while-condition  =>  TRUE
[03:35:48.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.119]        // while-condition  =>  TRUE
[03:35:48.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.123]        // while-condition  =>  TRUE
[03:35:48.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.127]        // while-condition  =>  TRUE
[03:35:48.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.129]        // while-condition  =>  TRUE
[03:35:48.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.133]        // while-condition  =>  TRUE
[03:35:48.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.137]        // while-condition  =>  TRUE
[03:35:48.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.140]        // while-condition  =>  TRUE
[03:35:48.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.144]        // while-condition  =>  TRUE
[03:35:48.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.147]        // while-condition  =>  TRUE
[03:35:48.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.150]        // while-condition  =>  TRUE
[03:35:48.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.153]        // while-condition  =>  TRUE
[03:35:48.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.157]        // while-condition  =>  TRUE
[03:35:48.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.159]        // while-condition  =>  TRUE
[03:35:48.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.165]        // while-condition  =>  TRUE
[03:35:48.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.167]        // while-condition  =>  TRUE
[03:35:48.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.171]        // while-condition  =>  TRUE
[03:35:48.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.176]        // while-condition  =>  TRUE
[03:35:48.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.178]        // while-condition  =>  TRUE
[03:35:48.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.178]        // while-condition  =>  TRUE
[03:35:48.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.178]        // while-condition  =>  TRUE
[03:35:48.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.188]        // while-condition  =>  TRUE
[03:35:48.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.198]        // while-condition  =>  TRUE
[03:35:48.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.198]        // while-condition  =>  TRUE
[03:35:48.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.208]        // while-condition  =>  TRUE
[03:35:48.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.208]        // while-condition  =>  TRUE
[03:35:48.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.219]        // while-condition  =>  TRUE
[03:35:48.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.219]        // while-condition  =>  TRUE
[03:35:48.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.229]        // while-condition  =>  TRUE
[03:35:48.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.240]        // while-condition  =>  TRUE
[03:35:48.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.240]        // while-condition  =>  TRUE
[03:35:48.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.240]        // while-condition  =>  TRUE
[03:35:48.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.248]        // while-condition  =>  TRUE
[03:35:48.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.248]        // while-condition  =>  TRUE
[03:35:48.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.260]        // while-condition  =>  TRUE
[03:35:48.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.269]        // while-condition  =>  TRUE
[03:35:48.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.269]        // while-condition  =>  TRUE
[03:35:48.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.281]        // while-condition  =>  TRUE
[03:35:48.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.281]        // while-condition  =>  TRUE
[03:35:48.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.281]        // while-condition  =>  TRUE
[03:35:48.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.289]        // while-condition  =>  TRUE
[03:35:48.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.299]        // while-condition  =>  TRUE
[03:35:48.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.299]        // while-condition  =>  TRUE
[03:35:48.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.309]        // while-condition  =>  TRUE
[03:35:48.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.309]        // while-condition  =>  TRUE
[03:35:48.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.319]        // while-condition  =>  TRUE
[03:35:48.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.319]        // while-condition  =>  TRUE
[03:35:48.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.329]        // while-condition  =>  TRUE
[03:35:48.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.339]        // while-condition  =>  TRUE
[03:35:48.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.341]        // while-condition  =>  TRUE
[03:35:48.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.341]        // while-condition  =>  TRUE
[03:35:48.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.351]        // while-condition  =>  TRUE
[03:35:48.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.351]        // while-condition  =>  TRUE
[03:35:48.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.360]        // while-condition  =>  TRUE
[03:35:48.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.360]        // while-condition  =>  TRUE
[03:35:48.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.370]        // while-condition  =>  TRUE
[03:35:48.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.370]        // while-condition  =>  TRUE
[03:35:48.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.370]        // while-condition  =>  TRUE
[03:35:48.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.380]        // while-condition  =>  TRUE
[03:35:48.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.380]        // while-condition  =>  TRUE
[03:35:48.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.390]        // while-condition  =>  TRUE
[03:35:48.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.390]        // while-condition  =>  TRUE
[03:35:48.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.390]        // while-condition  =>  TRUE
[03:35:48.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.400]        // while-condition  =>  TRUE
[03:35:48.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.400]        // while-condition  =>  TRUE
[03:35:48.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.410]        // while-condition  =>  TRUE
[03:35:48.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.410]        // while-condition  =>  TRUE
[03:35:48.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.420]        // while-condition  =>  TRUE
[03:35:48.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.420]        // while-condition  =>  TRUE
[03:35:48.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.420]        // while-condition  =>  TRUE
[03:35:48.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.429]        // while-condition  =>  TRUE
[03:35:48.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.429]        // while-condition  =>  TRUE
[03:35:48.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.439]        // while-condition  =>  TRUE
[03:35:48.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.439]        // while-condition  =>  TRUE
[03:35:48.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.439]        // while-condition  =>  TRUE
[03:35:48.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.449]        // while-condition  =>  TRUE
[03:35:48.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.449]        // while-condition  =>  TRUE
[03:35:48.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.449]        // while-condition  =>  TRUE
[03:35:48.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.459]        // while-condition  =>  TRUE
[03:35:48.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.469]        // while-condition  =>  TRUE
[03:35:48.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.469]        // while-condition  =>  TRUE
[03:35:48.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.469]        // while-condition  =>  TRUE
[03:35:48.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.479]        // while-condition  =>  TRUE
[03:35:48.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.479]        // while-condition  =>  TRUE
[03:35:48.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.479]        // while-condition  =>  TRUE
[03:35:48.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.489]        // while-condition  =>  TRUE
[03:35:48.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.489]        // while-condition  =>  TRUE
[03:35:48.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.489]        // while-condition  =>  TRUE
[03:35:48.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.499]        // while-condition  =>  TRUE
[03:35:48.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.499]        // while-condition  =>  TRUE
[03:35:48.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.499]        // while-condition  =>  TRUE
[03:35:48.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.509]        // while-condition  =>  TRUE
[03:35:48.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.509]        // while-condition  =>  TRUE
[03:35:48.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.519]        // while-condition  =>  TRUE
[03:35:48.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.519]        // while-condition  =>  TRUE
[03:35:48.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.529]        // while-condition  =>  TRUE
[03:35:48.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.529]        // while-condition  =>  TRUE
[03:35:48.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.540]        // while-condition  =>  TRUE
[03:35:48.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.541]        // while-condition  =>  TRUE
[03:35:48.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.541]        // while-condition  =>  TRUE
[03:35:48.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.549]        // while-condition  =>  TRUE
[03:35:48.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.549]        // while-condition  =>  TRUE
[03:35:48.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.559]        // while-condition  =>  TRUE
[03:35:48.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.559]        // while-condition  =>  TRUE
[03:35:48.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.569]        // while-condition  =>  TRUE
[03:35:48.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.569]        // while-condition  =>  TRUE
[03:35:48.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.569]        // while-condition  =>  TRUE
[03:35:48.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.579]        // while-condition  =>  TRUE
[03:35:48.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.579]        // while-condition  =>  TRUE
[03:35:48.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.589]        // while-condition  =>  TRUE
[03:35:48.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.589]        // while-condition  =>  TRUE
[03:35:48.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.589]        // while-condition  =>  TRUE
[03:35:48.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.599]        // while-condition  =>  TRUE
[03:35:48.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.609]        // while-condition  =>  TRUE
[03:35:48.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.621]        // while-condition  =>  TRUE
[03:35:48.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.621]        // while-condition  =>  TRUE
[03:35:48.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.629]        // while-condition  =>  TRUE
[03:35:48.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.629]        // while-condition  =>  TRUE
[03:35:48.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.629]        // while-condition  =>  TRUE
[03:35:48.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.639]        // while-condition  =>  TRUE
[03:35:48.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.639]        // while-condition  =>  TRUE
[03:35:48.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.649]        // while-condition  =>  TRUE
[03:35:48.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.649]        // while-condition  =>  TRUE
[03:35:48.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.659]        // while-condition  =>  TRUE
[03:35:48.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.659]        // while-condition  =>  TRUE
[03:35:48.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.659]        // while-condition  =>  TRUE
[03:35:48.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.669]        // while-condition  =>  TRUE
[03:35:48.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.669]        // while-condition  =>  TRUE
[03:35:48.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.669]        // while-condition  =>  TRUE
[03:35:48.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.679]        // while-condition  =>  TRUE
[03:35:48.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.679]        // while-condition  =>  TRUE
[03:35:48.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.689]        // while-condition  =>  TRUE
[03:35:48.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.689]        // while-condition  =>  TRUE
[03:35:48.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.699]        // while-condition  =>  TRUE
[03:35:48.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.699]        // while-condition  =>  TRUE
[03:35:48.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.709]        // while-condition  =>  TRUE
[03:35:48.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.719]        // while-condition  =>  TRUE
[03:35:48.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.719]        // while-condition  =>  TRUE
[03:35:48.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.729]        // while-condition  =>  TRUE
[03:35:48.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.739]        // while-condition  =>  TRUE
[03:35:48.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.743]        // while-condition  =>  TRUE
[03:35:48.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.743]        // while-condition  =>  TRUE
[03:35:48.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.750]        // while-condition  =>  TRUE
[03:35:48.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.750]        // while-condition  =>  TRUE
[03:35:48.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.760]        // while-condition  =>  TRUE
[03:35:48.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.762]        // while-condition  =>  TRUE
[03:35:48.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.762]        // while-condition  =>  TRUE
[03:35:48.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.770]        // while-condition  =>  TRUE
[03:35:48.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.770]        // while-condition  =>  TRUE
[03:35:48.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.780]        // while-condition  =>  TRUE
[03:35:48.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.790]        // while-condition  =>  TRUE
[03:35:48.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.790]        // while-condition  =>  TRUE
[03:35:48.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.790]        // while-condition  =>  TRUE
[03:35:48.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.800]        // while-condition  =>  TRUE
[03:35:48.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.800]        // while-condition  =>  TRUE
[03:35:48.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.810]        // while-condition  =>  TRUE
[03:35:48.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.820]        // while-condition  =>  TRUE
[03:35:48.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.820]        // while-condition  =>  TRUE
[03:35:48.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.820]        // while-condition  =>  TRUE
[03:35:48.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.829]        // while-condition  =>  TRUE
[03:35:48.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.829]        // while-condition  =>  TRUE
[03:35:48.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.839]        // while-condition  =>  TRUE
[03:35:48.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.839]        // while-condition  =>  TRUE
[03:35:48.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.852]        // while-condition  =>  TRUE
[03:35:48.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.854]        // while-condition  =>  TRUE
[03:35:48.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.860]        // while-condition  =>  TRUE
[03:35:48.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.860]        // while-condition  =>  TRUE
[03:35:48.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:48.870]        // while-condition  =>  TRUE
[03:35:48.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:48.870]        // while  =>  TIMEOUT
[03:35:48.870]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:35:48.870]      </control>
[03:35:48.871]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:35:48.871]        // if-block "(__protocol & 0xFFFF) == 1"
[03:35:48.871]          // =>  FALSE
[03:35:48.871]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:35:48.871]      </control>
[03:35:48.871]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:35:48.871]        // if-block "(__protocol & 0xFFFF) == 2"
[03:35:48.871]          // =>  TRUE
[03:35:48.871]        <block atomic="false" info="">
[03:35:48.871]          Message(0, "executing SWD power up");
[03:35:48.871]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:35:48.871]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:35:48.871]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:35:48.881]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:35:48.881]        </block>
[03:35:48.881]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:35:48.881]      </control>
[03:35:48.881]      // end if-block "powered_down"
[03:35:48.881]    </control>
[03:35:48.881]    <block atomic="false" info="">
[03:35:48.881]      __var DEBUG_PORT_VAL    = 0;
[03:35:48.881]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:35:48.881]      __var ACCESS_POINT_VAL  = 0;
[03:35:48.881]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:35:48.881]      __ap = 1; 
[03:35:48.881]        // -> [__ap <= 0x00000001]
[03:35:48.881]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:35:48.900]  
[03:35:48.900]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:35:48.900]  
[03:35:48.900]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:35:48.900]    </block>
[03:35:48.900]  </sequence>
[03:35:48.900]  
[03:35:55.426]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:35:55.426]  
[03:35:55.426]  <debugvars>
[03:35:55.426]    // Pre-defined
[03:35:55.426]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:35:55.426]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:35:55.426]    __dp=0x00000000
[03:35:55.426]    __ap=0x00000000
[03:35:55.426]    __traceout=0x00000000      (Trace Disabled)
[03:35:55.426]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:35:55.426]    __FlashAddr=0x00000000
[03:35:55.426]    __FlashLen=0x00000000
[03:35:55.426]    __FlashArg=0x00000000
[03:35:55.426]    __FlashOp=0x00000000
[03:35:55.426]    __Result=0x00000000
[03:35:55.426]  </debugvars>
[03:35:55.426]  
[03:35:55.426]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:35:55.426]    <block atomic="false" info="">
[03:35:55.426]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:35:55.426]        // -> [isSWJ <= 0x00000001]
[03:35:55.426]      __var hasDormant = __protocol & 0x00020000;
[03:35:55.426]        // -> [hasDormant <= 0x00000000]
[03:35:55.426]      __var protType   = __protocol & 0x0000FFFF;
[03:35:55.426]        // -> [protType <= 0x00000002]
[03:35:55.426]    </block>
[03:35:55.426]    <control if="protType == 1" while="" timeout="0" info="">
[03:35:55.426]      // if-block "protType == 1"
[03:35:55.426]        // =>  FALSE
[03:35:55.426]      // skip if-block "protType == 1"
[03:35:55.426]    </control>
[03:35:55.426]    <control if="protType == 2" while="" timeout="0" info="">
[03:35:55.426]      // if-block "protType == 2"
[03:35:55.426]        // =>  TRUE
[03:35:55.426]      <control if="isSWJ" while="" timeout="0" info="">
[03:35:55.426]        // if-block "isSWJ"
[03:35:55.426]          // =>  TRUE
[03:35:55.426]        <control if="hasDormant" while="" timeout="0" info="">
[03:35:55.426]          // if-block "hasDormant"
[03:35:55.426]            // =>  FALSE
[03:35:55.426]          // skip if-block "hasDormant"
[03:35:55.426]        </control>
[03:35:55.426]        <control if="!hasDormant" while="" timeout="0" info="">
[03:35:55.426]          // if-block "!hasDormant"
[03:35:55.426]            // =>  TRUE
[03:35:55.426]          <block atomic="false" info="">
[03:35:55.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:35:55.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:35:55.435]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:35:55.435]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:35:55.435]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:35:55.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:35:55.447]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:35:55.447]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:35:55.447]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:35:55.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:35:55.447]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:35:55.455]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:35:55.455]          </block>
[03:35:55.455]          // end if-block "!hasDormant"
[03:35:55.455]        </control>
[03:35:55.455]        // end if-block "isSWJ"
[03:35:55.455]      </control>
[03:35:55.455]      <control if="!isSWJ" while="" timeout="0" info="">
[03:35:55.455]        // if-block "!isSWJ"
[03:35:55.455]          // =>  FALSE
[03:35:55.455]        // skip if-block "!isSWJ"
[03:35:55.455]      </control>
[03:35:55.455]      <block atomic="false" info="">
[03:35:55.455]        ReadDP(0x0);
[03:35:55.455]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:35:55.455]      </block>
[03:35:55.455]      // end if-block "protType == 2"
[03:35:55.455]    </control>
[03:35:55.455]  </sequence>
[03:35:55.455]  
[03:35:55.467]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:35:55.467]  
[03:35:55.467]  <debugvars>
[03:35:55.467]    // Pre-defined
[03:35:55.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:35:55.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:35:55.467]    __dp=0x00000000
[03:35:55.467]    __ap=0x00000000
[03:35:55.467]    __traceout=0x00000000      (Trace Disabled)
[03:35:55.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:35:55.467]    __FlashAddr=0x00000000
[03:35:55.467]    __FlashLen=0x00000000
[03:35:55.467]    __FlashArg=0x00000000
[03:35:55.467]    __FlashOp=0x00000000
[03:35:55.467]    __Result=0x00000000
[03:35:55.467]  </debugvars>
[03:35:55.467]  
[03:35:55.467]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:35:55.467]    <block atomic="false" info="">
[03:35:55.467]      __var SW_DP_ABORT       = 0x0;
[03:35:55.467]        // -> [SW_DP_ABORT <= 0x00000000]
[03:35:55.467]      __var DP_CTRL_STAT      = 0x4;
[03:35:55.467]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:35:55.467]      __var DP_SELECT         = 0x8;
[03:35:55.467]        // -> [DP_SELECT <= 0x00000008]
[03:35:55.467]      __var powered_down      = 0;
[03:35:55.467]        // -> [powered_down <= 0x00000000]
[03:35:55.467]      WriteDP(DP_SELECT, 0x00000000);
[03:35:55.476]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:35:55.476]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:35:55.476]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:35:55.476]        // -> [powered_down <= 0x00000001]
[03:35:55.476]    </block>
[03:35:55.476]    <control if="powered_down" while="" timeout="0" info="">
[03:35:55.476]      // if-block "powered_down"
[03:35:55.476]        // =>  TRUE
[03:35:55.476]      <block atomic="false" info="">
[03:35:55.476]        Message(0, "Debug/System power-up request sent");
[03:35:55.476]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:35:55.485]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:35:55.485]      </block>
[03:35:55.485]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:35:55.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.485]        // while-condition  =>  TRUE
[03:35:55.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.485]        // while-condition  =>  TRUE
[03:35:55.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.505]        // while-condition  =>  TRUE
[03:35:55.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.505]        // while-condition  =>  TRUE
[03:35:55.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.515]        // while-condition  =>  TRUE
[03:35:55.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.517]        // while-condition  =>  TRUE
[03:35:55.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.526]        // while-condition  =>  TRUE
[03:35:55.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.526]        // while-condition  =>  TRUE
[03:35:55.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.526]        // while-condition  =>  TRUE
[03:35:55.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.536]        // while-condition  =>  TRUE
[03:35:55.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.536]        // while-condition  =>  TRUE
[03:35:55.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.536]        // while-condition  =>  TRUE
[03:35:55.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.546]        // while-condition  =>  TRUE
[03:35:55.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.546]        // while-condition  =>  TRUE
[03:35:55.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.556]        // while-condition  =>  TRUE
[03:35:55.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.568]        // while-condition  =>  TRUE
[03:35:55.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.568]        // while-condition  =>  TRUE
[03:35:55.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.576]        // while-condition  =>  TRUE
[03:35:55.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.576]        // while-condition  =>  TRUE
[03:35:55.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.586]        // while-condition  =>  TRUE
[03:35:55.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.586]        // while-condition  =>  TRUE
[03:35:55.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.586]        // while-condition  =>  TRUE
[03:35:55.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.597]        // while-condition  =>  TRUE
[03:35:55.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.606]        // while-condition  =>  TRUE
[03:35:55.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.606]        // while-condition  =>  TRUE
[03:35:55.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.616]        // while-condition  =>  TRUE
[03:35:55.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.618]        // while-condition  =>  TRUE
[03:35:55.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.627]        // while-condition  =>  TRUE
[03:35:55.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.627]        // while-condition  =>  TRUE
[03:35:55.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.627]        // while-condition  =>  TRUE
[03:35:55.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.637]        // while-condition  =>  TRUE
[03:35:55.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.647]        // while-condition  =>  TRUE
[03:35:55.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.647]        // while-condition  =>  TRUE
[03:35:55.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.657]        // while-condition  =>  TRUE
[03:35:55.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.657]        // while-condition  =>  TRUE
[03:35:55.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.667]        // while-condition  =>  TRUE
[03:35:55.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.669]        // while-condition  =>  TRUE
[03:35:55.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.677]        // while-condition  =>  TRUE
[03:35:55.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.677]        // while-condition  =>  TRUE
[03:35:55.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.677]        // while-condition  =>  TRUE
[03:35:55.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.687]        // while-condition  =>  TRUE
[03:35:55.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.687]        // while-condition  =>  TRUE
[03:35:55.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.697]        // while-condition  =>  TRUE
[03:35:55.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.697]        // while-condition  =>  TRUE
[03:35:55.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.697]        // while-condition  =>  TRUE
[03:35:55.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.707]        // while-condition  =>  TRUE
[03:35:55.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.707]        // while-condition  =>  TRUE
[03:35:55.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.707]        // while-condition  =>  TRUE
[03:35:55.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.717]        // while-condition  =>  TRUE
[03:35:55.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.717]        // while-condition  =>  TRUE
[03:35:55.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.727]        // while-condition  =>  TRUE
[03:35:55.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.727]        // while-condition  =>  TRUE
[03:35:55.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.737]        // while-condition  =>  TRUE
[03:35:55.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.737]        // while-condition  =>  TRUE
[03:35:55.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.737]        // while-condition  =>  TRUE
[03:35:55.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.747]        // while-condition  =>  TRUE
[03:35:55.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.757]        // while-condition  =>  TRUE
[03:35:55.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.757]        // while-condition  =>  TRUE
[03:35:55.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.767]        // while-condition  =>  TRUE
[03:35:55.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.767]        // while-condition  =>  TRUE
[03:35:55.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.777]        // while-condition  =>  TRUE
[03:35:55.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.779]        // while-condition  =>  TRUE
[03:35:55.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.787]        // while-condition  =>  TRUE
[03:35:55.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.790]        // while-condition  =>  TRUE
[03:35:55.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.790]        // while-condition  =>  TRUE
[03:35:55.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.798]        // while-condition  =>  TRUE
[03:35:55.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.798]        // while-condition  =>  TRUE
[03:35:55.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.798]        // while-condition  =>  TRUE
[03:35:55.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.808]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.808]        // while-condition  =>  TRUE
[03:35:55.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.818]        // while-condition  =>  TRUE
[03:35:55.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.818]        // while-condition  =>  TRUE
[03:35:55.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.828]        // while-condition  =>  TRUE
[03:35:55.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.838]        // while-condition  =>  TRUE
[03:35:55.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.840]        // while-condition  =>  TRUE
[03:35:55.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.840]        // while-condition  =>  TRUE
[03:35:55.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.848]        // while-condition  =>  TRUE
[03:35:55.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.848]        // while-condition  =>  TRUE
[03:35:55.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.858]        // while-condition  =>  TRUE
[03:35:55.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.858]        // while-condition  =>  TRUE
[03:35:55.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.868]        // while-condition  =>  TRUE
[03:35:55.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.870]        // while-condition  =>  TRUE
[03:35:55.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.870]        // while-condition  =>  TRUE
[03:35:55.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.879]        // while-condition  =>  TRUE
[03:35:55.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.879]        // while-condition  =>  TRUE
[03:35:55.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.879]        // while-condition  =>  TRUE
[03:35:55.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.889]        // while-condition  =>  TRUE
[03:35:55.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.889]        // while-condition  =>  TRUE
[03:35:55.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.900]        // while-condition  =>  TRUE
[03:35:55.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.900]        // while-condition  =>  TRUE
[03:35:55.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.909]        // while-condition  =>  TRUE
[03:35:55.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.909]        // while-condition  =>  TRUE
[03:35:55.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.909]        // while-condition  =>  TRUE
[03:35:55.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.919]        // while-condition  =>  TRUE
[03:35:55.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.919]        // while-condition  =>  TRUE
[03:35:55.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.919]        // while-condition  =>  TRUE
[03:35:55.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.929]        // while-condition  =>  TRUE
[03:35:55.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.929]        // while-condition  =>  TRUE
[03:35:55.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.929]        // while-condition  =>  TRUE
[03:35:55.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.939]        // while-condition  =>  TRUE
[03:35:55.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.939]        // while-condition  =>  TRUE
[03:35:55.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.949]        // while-condition  =>  TRUE
[03:35:55.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.949]        // while-condition  =>  TRUE
[03:35:55.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.949]        // while-condition  =>  TRUE
[03:35:55.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.959]        // while-condition  =>  TRUE
[03:35:55.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.959]        // while-condition  =>  TRUE
[03:35:55.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.969]        // while-condition  =>  TRUE
[03:35:55.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.969]        // while-condition  =>  TRUE
[03:35:55.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.969]        // while-condition  =>  TRUE
[03:35:55.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.979]        // while-condition  =>  TRUE
[03:35:55.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.991]        // while-condition  =>  TRUE
[03:35:55.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.991]        // while-condition  =>  TRUE
[03:35:55.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.991]        // while-condition  =>  TRUE
[03:35:55.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.999]        // while-condition  =>  TRUE
[03:35:55.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:55.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:55.999]        // while-condition  =>  TRUE
[03:35:55.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.009]        // while-condition  =>  TRUE
[03:35:56.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.009]        // while-condition  =>  TRUE
[03:35:56.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.019]        // while-condition  =>  TRUE
[03:35:56.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.019]        // while-condition  =>  TRUE
[03:35:56.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.019]        // while-condition  =>  TRUE
[03:35:56.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.031]        // while-condition  =>  TRUE
[03:35:56.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.031]        // while-condition  =>  TRUE
[03:35:56.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.040]        // while-condition  =>  TRUE
[03:35:56.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.042]        // while-condition  =>  TRUE
[03:35:56.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.042]        // while-condition  =>  TRUE
[03:35:56.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.052]        // while-condition  =>  TRUE
[03:35:56.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.052]        // while-condition  =>  TRUE
[03:35:56.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.060]        // while-condition  =>  TRUE
[03:35:56.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.060]        // while-condition  =>  TRUE
[03:35:56.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.067]        // while-condition  =>  TRUE
[03:35:56.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.070]        // while-condition  =>  TRUE
[03:35:56.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.070]        // while-condition  =>  TRUE
[03:35:56.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.082]        // while-condition  =>  TRUE
[03:35:56.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.082]        // while-condition  =>  TRUE
[03:35:56.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.082]        // while-condition  =>  TRUE
[03:35:56.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.091]        // while-condition  =>  TRUE
[03:35:56.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.091]        // while-condition  =>  TRUE
[03:35:56.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.091]        // while-condition  =>  TRUE
[03:35:56.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.102]        // while-condition  =>  TRUE
[03:35:56.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.108]        // while-condition  =>  TRUE
[03:35:56.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.112]        // while-condition  =>  TRUE
[03:35:56.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.112]        // while-condition  =>  TRUE
[03:35:56.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.112]        // while-condition  =>  TRUE
[03:35:56.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.121]        // while-condition  =>  TRUE
[03:35:56.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.134]        // while-condition  =>  TRUE
[03:35:56.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.134]        // while-condition  =>  TRUE
[03:35:56.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.142]        // while-condition  =>  TRUE
[03:35:56.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.142]        // while-condition  =>  TRUE
[03:35:56.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.142]        // while-condition  =>  TRUE
[03:35:56.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.152]        // while-condition  =>  TRUE
[03:35:56.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.152]        // while-condition  =>  TRUE
[03:35:56.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.152]        // while-condition  =>  TRUE
[03:35:56.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.162]        // while-condition  =>  TRUE
[03:35:56.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.168]        // while-condition  =>  TRUE
[03:35:56.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.172]        // while-condition  =>  TRUE
[03:35:56.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.176]        // while-condition  =>  TRUE
[03:35:56.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.176]        // while-condition  =>  TRUE
[03:35:56.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.182]        // while-condition  =>  TRUE
[03:35:56.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.182]        // while-condition  =>  TRUE
[03:35:56.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.182]        // while-condition  =>  TRUE
[03:35:56.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.192]        // while-condition  =>  TRUE
[03:35:56.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.192]        // while-condition  =>  TRUE
[03:35:56.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.203]        // while-condition  =>  TRUE
[03:35:56.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.203]        // while-condition  =>  TRUE
[03:35:56.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.209]        // while-condition  =>  TRUE
[03:35:56.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.214]        // while-condition  =>  TRUE
[03:35:56.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.216]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.216]        // while-condition  =>  TRUE
[03:35:56.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.220]        // while-condition  =>  TRUE
[03:35:56.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.223]        // while-condition  =>  TRUE
[03:35:56.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.227]        // while-condition  =>  TRUE
[03:35:56.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.227]        // while-condition  =>  TRUE
[03:35:56.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.233]        // while-condition  =>  TRUE
[03:35:56.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.233]        // while-condition  =>  TRUE
[03:35:56.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.244]        // while-condition  =>  TRUE
[03:35:56.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.244]        // while-condition  =>  TRUE
[03:35:56.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.253]        // while-condition  =>  TRUE
[03:35:56.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.253]        // while-condition  =>  TRUE
[03:35:56.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.253]        // while-condition  =>  TRUE
[03:35:56.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.265]        // while-condition  =>  TRUE
[03:35:56.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.268]        // while-condition  =>  TRUE
[03:35:56.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.268]        // while-condition  =>  TRUE
[03:35:56.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.276]        // while-condition  =>  TRUE
[03:35:56.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.278]        // while-condition  =>  TRUE
[03:35:56.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.278]        // while-condition  =>  TRUE
[03:35:56.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.284]        // while-condition  =>  TRUE
[03:35:56.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.284]        // while-condition  =>  TRUE
[03:35:56.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.294]        // while-condition  =>  TRUE
[03:35:56.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.296]        // while-condition  =>  TRUE
[03:35:56.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.307]        // while-condition  =>  TRUE
[03:35:56.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.309]        // while-condition  =>  TRUE
[03:35:56.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.309]        // while-condition  =>  TRUE
[03:35:56.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.315]        // while-condition  =>  TRUE
[03:35:56.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.315]        // while-condition  =>  TRUE
[03:35:56.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.325]        // while-condition  =>  TRUE
[03:35:56.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.328]        // while-condition  =>  TRUE
[03:35:56.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.328]        // while-condition  =>  TRUE
[03:35:56.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.335]        // while-condition  =>  TRUE
[03:35:56.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.336]        // while-condition  =>  TRUE
[03:35:56.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.336]        // while-condition  =>  TRUE
[03:35:56.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.345]        // while-condition  =>  TRUE
[03:35:56.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.347]        // while-condition  =>  TRUE
[03:35:56.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.347]        // while-condition  =>  TRUE
[03:35:56.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.356]        // while-condition  =>  TRUE
[03:35:56.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.357]        // while-condition  =>  TRUE
[03:35:56.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.367]        // while-condition  =>  TRUE
[03:35:56.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.368]        // while-condition  =>  TRUE
[03:35:56.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.368]        // while-condition  =>  TRUE
[03:35:56.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.368]        // while-condition  =>  TRUE
[03:35:56.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.377]        // while-condition  =>  TRUE
[03:35:56.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.381]        // while-condition  =>  TRUE
[03:35:56.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.388]        // while-condition  =>  TRUE
[03:35:56.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.388]        // while-condition  =>  TRUE
[03:35:56.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.388]        // while-condition  =>  TRUE
[03:35:56.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.398]        // while-condition  =>  TRUE
[03:35:56.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.401]        // while-condition  =>  TRUE
[03:35:56.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.407]        // while-condition  =>  TRUE
[03:35:56.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.407]        // while-condition  =>  TRUE
[03:35:56.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.419]        // while-condition  =>  TRUE
[03:35:56.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.419]        // while-condition  =>  TRUE
[03:35:56.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.427]        // while-condition  =>  TRUE
[03:35:56.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.429]        // while-condition  =>  TRUE
[03:35:56.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.429]        // while-condition  =>  TRUE
[03:35:56.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.437]        // while-condition  =>  TRUE
[03:35:56.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.437]        // while-condition  =>  TRUE
[03:35:56.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.447]        // while-condition  =>  TRUE
[03:35:56.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.457]        // while-condition  =>  TRUE
[03:35:56.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.460]        // while-condition  =>  TRUE
[03:35:56.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.460]        // while-condition  =>  TRUE
[03:35:56.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.470]        // while-condition  =>  TRUE
[03:35:56.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.472]        // while-condition  =>  TRUE
[03:35:56.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[03:35:56.479]        // while-condition  =>  TRUE
[03:35:56.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:35:56.479]        // while  =>  TIMEOUT
[03:35:56.479]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:35:56.480]      </control>
[03:35:56.480]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:35:56.480]        // if-block "(__protocol & 0xFFFF) == 1"
[03:35:56.480]          // =>  FALSE
[03:35:56.480]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:35:56.480]      </control>
[03:35:56.480]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:35:56.480]        // if-block "(__protocol & 0xFFFF) == 2"
[03:35:56.480]          // =>  TRUE
[03:35:56.481]        <block atomic="false" info="">
[03:35:56.481]          Message(0, "executing SWD power up");
[03:35:56.481]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:35:56.489]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:35:56.489]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:35:56.491]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:35:56.491]        </block>
[03:35:56.491]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:35:56.491]      </control>
[03:35:56.491]      // end if-block "powered_down"
[03:35:56.491]    </control>
[03:35:56.491]    <block atomic="false" info="">
[03:35:56.491]      __var DEBUG_PORT_VAL    = 0;
[03:35:56.491]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:35:56.491]      __var ACCESS_POINT_VAL  = 0;
[03:35:56.491]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:35:56.491]      __ap = 1; 
[03:35:56.491]        // -> [__ap <= 0x00000001]
[03:35:56.491]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:35:56.509]  
[03:35:56.509]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[03:35:56.509]  
[03:35:56.519]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:35:56.519]    </block>
[03:35:56.519]  </sequence>
[03:35:56.519]  
[03:38:15.743]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:38:15.743]  
[03:38:15.761]  <debugvars>
[03:38:15.761]    // Pre-defined
[03:38:15.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:15.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:38:15.761]    __dp=0x00000000
[03:38:15.761]    __ap=0x00000000
[03:38:15.761]    __traceout=0x00000000      (Trace Disabled)
[03:38:15.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:15.761]    __FlashAddr=0x00000000
[03:38:15.761]    __FlashLen=0x00000000
[03:38:15.761]    __FlashArg=0x00000000
[03:38:15.761]    __FlashOp=0x00000000
[03:38:15.761]    __Result=0x00000000
[03:38:15.761]  </debugvars>
[03:38:15.761]  
[03:38:15.761]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:38:15.761]    <block atomic="false" info="">
[03:38:15.761]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:38:15.761]        // -> [isSWJ <= 0x00000001]
[03:38:15.763]      __var hasDormant = __protocol & 0x00020000;
[03:38:15.763]        // -> [hasDormant <= 0x00000000]
[03:38:15.763]      __var protType   = __protocol & 0x0000FFFF;
[03:38:15.763]        // -> [protType <= 0x00000002]
[03:38:15.763]    </block>
[03:38:15.763]    <control if="protType == 1" while="" timeout="0" info="">
[03:38:15.763]      // if-block "protType == 1"
[03:38:15.763]        // =>  FALSE
[03:38:15.763]      // skip if-block "protType == 1"
[03:38:15.763]    </control>
[03:38:15.763]    <control if="protType == 2" while="" timeout="0" info="">
[03:38:15.763]      // if-block "protType == 2"
[03:38:15.763]        // =>  TRUE
[03:38:15.763]      <control if="isSWJ" while="" timeout="0" info="">
[03:38:15.763]        // if-block "isSWJ"
[03:38:15.763]          // =>  TRUE
[03:38:15.763]        <control if="hasDormant" while="" timeout="0" info="">
[03:38:15.763]          // if-block "hasDormant"
[03:38:15.763]            // =>  FALSE
[03:38:15.763]          // skip if-block "hasDormant"
[03:38:15.763]        </control>
[03:38:15.763]        <control if="!hasDormant" while="" timeout="0" info="">
[03:38:15.763]          // if-block "!hasDormant"
[03:38:15.763]            // =>  TRUE
[03:38:15.763]          <block atomic="false" info="">
[03:38:15.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:38:15.768]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:38:15.768]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:38:15.770]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:38:15.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:38:15.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:38:15.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:38:15.773]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:38:15.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:38:15.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:38:15.773]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:38:15.783]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:38:15.783]          </block>
[03:38:15.783]          // end if-block "!hasDormant"
[03:38:15.783]        </control>
[03:38:15.783]        // end if-block "isSWJ"
[03:38:15.783]      </control>
[03:38:15.783]      <control if="!isSWJ" while="" timeout="0" info="">
[03:38:15.783]        // if-block "!isSWJ"
[03:38:15.783]          // =>  FALSE
[03:38:15.783]        // skip if-block "!isSWJ"
[03:38:15.783]      </control>
[03:38:15.783]      <block atomic="false" info="">
[03:38:15.783]        ReadDP(0x0);
[03:38:15.783]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:38:15.783]      </block>
[03:38:15.783]      // end if-block "protType == 2"
[03:38:15.783]    </control>
[03:38:15.783]  </sequence>
[03:38:15.783]  
[03:38:15.793]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:38:15.793]  
[03:38:15.793]  <debugvars>
[03:38:15.793]    // Pre-defined
[03:38:15.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:15.793]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:38:15.793]    __dp=0x00000000
[03:38:15.793]    __ap=0x00000000
[03:38:15.793]    __traceout=0x00000000      (Trace Disabled)
[03:38:15.793]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:15.793]    __FlashAddr=0x00000000
[03:38:15.793]    __FlashLen=0x00000000
[03:38:15.793]    __FlashArg=0x00000000
[03:38:15.793]    __FlashOp=0x00000000
[03:38:15.793]    __Result=0x00000000
[03:38:15.793]  </debugvars>
[03:38:15.793]  
[03:38:15.793]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:38:15.793]    <block atomic="false" info="">
[03:38:15.793]      __var SW_DP_ABORT       = 0x0;
[03:38:15.793]        // -> [SW_DP_ABORT <= 0x00000000]
[03:38:15.793]      __var DP_CTRL_STAT      = 0x4;
[03:38:15.793]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:38:15.793]      __var DP_SELECT         = 0x8;
[03:38:15.793]        // -> [DP_SELECT <= 0x00000008]
[03:38:15.793]      __var powered_down      = 0;
[03:38:15.793]        // -> [powered_down <= 0x00000000]
[03:38:15.793]      WriteDP(DP_SELECT, 0x00000000);
[03:38:15.793]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:38:15.793]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:38:15.803]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:38:15.803]        // -> [powered_down <= 0x00000001]
[03:38:15.803]    </block>
[03:38:15.803]    <control if="powered_down" while="" timeout="0" info="">
[03:38:15.803]      // if-block "powered_down"
[03:38:15.803]        // =>  TRUE
[03:38:15.803]      <block atomic="false" info="">
[03:38:15.803]        Message(0, "Debug/System power-up request sent");
[03:38:15.806]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:38:15.806]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:38:15.806]      </block>
[03:38:15.806]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:38:15.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:38:15.806]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:38:15.806]        // while-condition  =>  FALSE
[03:38:15.806]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:38:15.813]      </control>
[03:38:15.813]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:38:15.813]        // if-block "(__protocol & 0xFFFF) == 1"
[03:38:15.813]          // =>  FALSE
[03:38:15.813]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:38:15.813]      </control>
[03:38:15.813]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:38:15.813]        // if-block "(__protocol & 0xFFFF) == 2"
[03:38:15.813]          // =>  TRUE
[03:38:15.813]        <block atomic="false" info="">
[03:38:15.813]          Message(0, "executing SWD power up");
[03:38:15.813]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:38:15.813]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:38:15.813]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:38:15.813]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:38:15.813]        </block>
[03:38:15.813]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:38:15.813]      </control>
[03:38:15.813]      // end if-block "powered_down"
[03:38:15.813]    </control>
[03:38:15.813]    <block atomic="false" info="">
[03:38:15.813]      __var DEBUG_PORT_VAL    = 0;
[03:38:15.813]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:38:15.813]      __var ACCESS_POINT_VAL  = 0;
[03:38:15.824]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:38:15.824]      __ap = 1; 
[03:38:15.824]        // -> [__ap <= 0x00000001]
[03:38:15.824]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:38:15.826]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:38:15.826]      __ap = 4;
[03:38:15.826]        // -> [__ap <= 0x00000004]
[03:38:15.826]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:38:15.846]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:38:15.846]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:38:15.847]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:38:15.847]    </block>
[03:38:15.847]    <block atomic="false" info="">
[03:38:15.847]      __var nReset = 0x80;
[03:38:15.847]        // -> [nReset <= 0x00000080]
[03:38:15.847]      __var canReadPins = 0;
[03:38:15.847]        // -> [canReadPins <= 0x00000000]
[03:38:15.847]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:38:15.847]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:38:15.847]        // -> [canReadPins <= 0x00000001]
[03:38:15.847]    </block>
[03:38:15.847]    <control if="" while="1" timeout="200" info="">
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.847]      // while-condition  =>  TRUE
[03:38:15.847]      // while "1"  (timeout="200")
[03:38:15.854]      // while-condition  =>  TRUE
[03:38:15.854]      // while "1"  (timeout="200")
[03:38:15.854]      // while-condition  =>  TRUE
[03:38:15.854]      // while "1"  (timeout="200")
[03:38:15.854]      // while-condition  =>  TRUE
[03:38:15.854]      // while "1"  (timeout="200")
[03:38:15.854]      // while-condition  =>  TRUE
[03:38:15.854]      // while "1"  (timeout="200")
[03:38:15.854]      // while-condition  =>  TRUE
[03:38:15.854]      // while "1"  (timeout="200")
[03:38:15.854]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.856]      // while "1"  (timeout="200")
[03:38:15.856]      // while-condition  =>  TRUE
[03:38:15.865]      // while "1"  (timeout="200")
[03:38:15.865]      // while  =>  TIMEOUT
[03:38:15.865]      // end while "1"
[03:38:15.865]    </control>
[03:38:15.865]    <control if="canReadPins" while="" timeout="0" info="">
[03:38:15.865]      // if-block "canReadPins"
[03:38:15.865]        // =>  TRUE
[03:38:15.865]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:38:15.865]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:38:15.868]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:38:15.868]        // while-condition  =>  FALSE
[03:38:15.868]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:38:15.868]      </control>
[03:38:15.868]      // end if-block "canReadPins"
[03:38:15.868]    </control>
[03:38:15.868]    <control if="!canReadPins" while="" timeout="0" info="">
[03:38:15.868]      // if-block "!canReadPins"
[03:38:15.868]        // =>  FALSE
[03:38:15.868]      // skip if-block "!canReadPins"
[03:38:15.868]    </control>
[03:38:15.868]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:38:15.868]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:38:15.868]        // =>  TRUE
[03:38:15.868]      <block atomic="false" info="">
[03:38:15.868]        WriteAP(0x00, 0x190008);
[03:38:15.868]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:38:15.875]        WriteAP(0xF0, 0x01);
[03:38:15.876]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:38:15.876]      </block>
[03:38:15.876]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:38:15.876]    </control>
[03:38:15.876]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:38:15.876]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:38:15.876]        // =>  FALSE
[03:38:15.876]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:38:15.876]    </control>
[03:38:15.876]    <block atomic="false" info="">
[03:38:15.876]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:38:15.885]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:38:15.885]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:38:15.895]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:38:15.895]      __ap = 0; //lets make sure we reset the access point selection
[03:38:15.895]        // -> [__ap <= 0x00000000]
[03:38:15.895]    </block>
[03:38:15.895]  </sequence>
[03:38:15.895]  
[03:38:15.939]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:38:15.939]  
[03:38:15.939]  <debugvars>
[03:38:15.939]    // Pre-defined
[03:38:15.939]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:38:15.939]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:38:15.939]    __dp=0x00000000
[03:38:15.939]    __ap=0x00000000
[03:38:15.939]    __traceout=0x00000000      (Trace Disabled)
[03:38:15.939]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:38:15.939]    __FlashAddr=0x00000000
[03:38:15.946]    __FlashLen=0x00000000
[03:38:15.946]    __FlashArg=0x00000000
[03:38:15.946]    __FlashOp=0x00000000
[03:38:15.946]    __Result=0x00000000
[03:38:15.946]  </debugvars>
[03:38:15.946]  
[03:38:15.946]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:38:15.946]    <block atomic="false" info="">
[03:38:15.946]      __var deviceID = 0;
[03:38:15.946]        // -> [deviceID <= 0x00000000]
[03:38:15.946]      __var version = 0;
[03:38:15.946]        // -> [version <= 0x00000000]
[03:38:15.946]      __var partNum = 0;
[03:38:15.946]        // -> [partNum <= 0x00000000]
[03:38:15.946]      __var manuf = 0;
[03:38:15.946]        // -> [manuf <= 0x00000000]
[03:38:15.946]      __var isMSPM0G1X0X_G3X0X = 0;
[03:38:15.946]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:38:15.946]      __var isProduction = 0;
[03:38:15.946]        // -> [isProduction <= 0x00000000]
[03:38:15.946]      __var continueId = 0;
[03:38:15.946]        // -> [continueId <= 0x00000000]
[03:38:15.946]      deviceID =   Read32(0x41C40004);
[03:38:15.958]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:38:15.958]        // -> [deviceID <= 0x2BB8802F]
[03:38:15.958]      version = deviceID >> 28;
[03:38:15.958]        // -> [version <= 0x00000002]
[03:38:15.958]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:38:15.958]        // -> [partNum <= 0x0000BB88]
[03:38:15.958]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:38:15.958]        // -> [manuf <= 0x00000017]
[03:38:15.958]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:38:15.958]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:38:15.958]      isProduction = (version > 0);
[03:38:15.958]        // -> [isProduction <= 0x00000001]
[03:38:15.958]    </block>
[03:38:15.958]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:38:15.958]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:38:15.958]        // =>  FALSE
[03:38:15.958]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:38:15.958]    </control>
[03:38:15.958]    <control if="continueId == 4" while="" timeout="0" info="">
[03:38:15.958]      // if-block "continueId == 4"
[03:38:15.958]        // =>  FALSE
[03:38:15.958]      // skip if-block "continueId == 4"
[03:38:15.958]    </control>
[03:38:15.958]    <control if="!isProduction" while="" timeout="0" info="">
[03:38:15.958]      // if-block "!isProduction"
[03:38:15.958]        // =>  FALSE
[03:38:15.958]      // skip if-block "!isProduction"
[03:38:15.958]    </control>
[03:38:15.958]  </sequence>
[03:38:15.958]  
[03:45:29.212]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:45:29.212]  
[03:45:29.212]  <debugvars>
[03:45:29.212]    // Pre-defined
[03:45:29.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:29.212]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:45:29.212]    __dp=0x00000000
[03:45:29.212]    __ap=0x00000000
[03:45:29.212]    __traceout=0x00000000      (Trace Disabled)
[03:45:29.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:29.212]    __FlashAddr=0x00000000
[03:45:29.212]    __FlashLen=0x00000000
[03:45:29.212]    __FlashArg=0x00000000
[03:45:29.212]    __FlashOp=0x00000000
[03:45:29.212]    __Result=0x00000000
[03:45:29.212]  </debugvars>
[03:45:29.212]  
[03:45:29.212]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:45:29.212]    <block atomic="false" info="">
[03:45:29.212]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:45:29.212]        // -> [isSWJ <= 0x00000001]
[03:45:29.212]      __var hasDormant = __protocol & 0x00020000;
[03:45:29.212]        // -> [hasDormant <= 0x00000000]
[03:45:29.212]      __var protType   = __protocol & 0x0000FFFF;
[03:45:29.212]        // -> [protType <= 0x00000002]
[03:45:29.212]    </block>
[03:45:29.212]    <control if="protType == 1" while="" timeout="0" info="">
[03:45:29.212]      // if-block "protType == 1"
[03:45:29.212]        // =>  FALSE
[03:45:29.212]      // skip if-block "protType == 1"
[03:45:29.212]    </control>
[03:45:29.212]    <control if="protType == 2" while="" timeout="0" info="">
[03:45:29.212]      // if-block "protType == 2"
[03:45:29.212]        // =>  TRUE
[03:45:29.212]      <control if="isSWJ" while="" timeout="0" info="">
[03:45:29.212]        // if-block "isSWJ"
[03:45:29.212]          // =>  TRUE
[03:45:29.212]        <control if="hasDormant" while="" timeout="0" info="">
[03:45:29.212]          // if-block "hasDormant"
[03:45:29.212]            // =>  FALSE
[03:45:29.212]          // skip if-block "hasDormant"
[03:45:29.212]        </control>
[03:45:29.212]        <control if="!hasDormant" while="" timeout="0" info="">
[03:45:29.212]          // if-block "!hasDormant"
[03:45:29.212]            // =>  TRUE
[03:45:29.212]          <block atomic="false" info="">
[03:45:29.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:45:29.223]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:29.223]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:45:29.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:45:29.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:45:29.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:29.230]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:45:29.232]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:45:29.232]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:45:29.240]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:45:29.240]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:45:29.240]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:45:29.240]          </block>
[03:45:29.240]          // end if-block "!hasDormant"
[03:45:29.240]        </control>
[03:45:29.240]        // end if-block "isSWJ"
[03:45:29.240]      </control>
[03:45:29.240]      <control if="!isSWJ" while="" timeout="0" info="">
[03:45:29.240]        // if-block "!isSWJ"
[03:45:29.240]          // =>  FALSE
[03:45:29.240]        // skip if-block "!isSWJ"
[03:45:29.240]      </control>
[03:45:29.240]      <block atomic="false" info="">
[03:45:29.240]        ReadDP(0x0);
[03:45:29.240]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:45:29.240]      </block>
[03:45:29.240]      // end if-block "protType == 2"
[03:45:29.240]    </control>
[03:45:29.240]  </sequence>
[03:45:29.240]  
[03:45:29.250]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:45:29.250]  
[03:45:29.250]  <debugvars>
[03:45:29.250]    // Pre-defined
[03:45:29.250]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:29.250]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:45:29.250]    __dp=0x00000000
[03:45:29.250]    __ap=0x00000000
[03:45:29.250]    __traceout=0x00000000      (Trace Disabled)
[03:45:29.250]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:29.250]    __FlashAddr=0x00000000
[03:45:29.250]    __FlashLen=0x00000000
[03:45:29.250]    __FlashArg=0x00000000
[03:45:29.250]    __FlashOp=0x00000000
[03:45:29.250]    __Result=0x00000000
[03:45:29.250]  </debugvars>
[03:45:29.250]  
[03:45:29.250]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:45:29.250]    <block atomic="false" info="">
[03:45:29.250]      __var SW_DP_ABORT       = 0x0;
[03:45:29.250]        // -> [SW_DP_ABORT <= 0x00000000]
[03:45:29.250]      __var DP_CTRL_STAT      = 0x4;
[03:45:29.250]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:45:29.250]      __var DP_SELECT         = 0x8;
[03:45:29.250]        // -> [DP_SELECT <= 0x00000008]
[03:45:29.250]      __var powered_down      = 0;
[03:45:29.250]        // -> [powered_down <= 0x00000000]
[03:45:29.250]      WriteDP(DP_SELECT, 0x00000000);
[03:45:29.260]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:45:29.260]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:45:29.260]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:45:29.260]        // -> [powered_down <= 0x00000001]
[03:45:29.260]    </block>
[03:45:29.260]    <control if="powered_down" while="" timeout="0" info="">
[03:45:29.260]      // if-block "powered_down"
[03:45:29.260]        // =>  TRUE
[03:45:29.260]      <block atomic="false" info="">
[03:45:29.260]        Message(0, "Debug/System power-up request sent");
[03:45:29.270]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:45:29.270]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:45:29.270]      </block>
[03:45:29.270]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:45:29.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:45:29.270]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:45:29.270]        // while-condition  =>  FALSE
[03:45:29.270]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:45:29.270]      </control>
[03:45:29.270]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:45:29.270]        // if-block "(__protocol & 0xFFFF) == 1"
[03:45:29.270]          // =>  FALSE
[03:45:29.270]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:45:29.270]      </control>
[03:45:29.270]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:45:29.270]        // if-block "(__protocol & 0xFFFF) == 2"
[03:45:29.270]          // =>  TRUE
[03:45:29.280]        <block atomic="false" info="">
[03:45:29.280]          Message(0, "executing SWD power up");
[03:45:29.282]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:45:29.289]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:45:29.289]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:45:29.289]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:45:29.289]        </block>
[03:45:29.289]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:45:29.289]      </control>
[03:45:29.289]      // end if-block "powered_down"
[03:45:29.289]    </control>
[03:45:29.289]    <block atomic="false" info="">
[03:45:29.289]      __var DEBUG_PORT_VAL    = 0;
[03:45:29.289]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:45:29.289]      __var ACCESS_POINT_VAL  = 0;
[03:45:29.289]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:45:29.289]      __ap = 1; 
[03:45:29.289]        // -> [__ap <= 0x00000001]
[03:45:29.289]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:45:29.300]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:45:29.300]      __ap = 4;
[03:45:29.300]        // -> [__ap <= 0x00000004]
[03:45:29.300]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:45:29.300]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:45:29.300]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:45:29.300]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:45:29.310]    </block>
[03:45:29.310]    <block atomic="false" info="">
[03:45:29.310]      __var nReset = 0x80;
[03:45:29.310]        // -> [nReset <= 0x00000080]
[03:45:29.310]      __var canReadPins = 0;
[03:45:29.311]        // -> [canReadPins <= 0x00000000]
[03:45:29.311]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:45:29.311]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:45:29.315]        // -> [canReadPins <= 0x00000001]
[03:45:29.315]    </block>
[03:45:29.315]    <control if="" while="1" timeout="200" info="">
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.315]      // while-condition  =>  TRUE
[03:45:29.315]      // while "1"  (timeout="200")
[03:45:29.320]      // while-condition  =>  TRUE
[03:45:29.320]      // while "1"  (timeout="200")
[03:45:29.320]      // while  =>  TIMEOUT
[03:45:29.320]      // end while "1"
[03:45:29.320]    </control>
[03:45:29.320]    <control if="canReadPins" while="" timeout="0" info="">
[03:45:29.320]      // if-block "canReadPins"
[03:45:29.320]        // =>  TRUE
[03:45:29.320]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:45:29.320]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:45:29.324]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:45:29.324]        // while-condition  =>  FALSE
[03:45:29.324]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:45:29.324]      </control>
[03:45:29.324]      // end if-block "canReadPins"
[03:45:29.324]    </control>
[03:45:29.324]    <control if="!canReadPins" while="" timeout="0" info="">
[03:45:29.324]      // if-block "!canReadPins"
[03:45:29.324]        // =>  FALSE
[03:45:29.324]      // skip if-block "!canReadPins"
[03:45:29.324]    </control>
[03:45:29.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:45:29.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:45:29.324]        // =>  TRUE
[03:45:29.324]      <block atomic="false" info="">
[03:45:29.324]        WriteAP(0x00, 0x190008);
[03:45:29.329]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:45:29.330]        WriteAP(0xF0, 0x01);
[03:45:29.335]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:45:29.335]      </block>
[03:45:29.335]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:45:29.335]    </control>
[03:45:29.335]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:45:29.335]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:45:29.335]        // =>  FALSE
[03:45:29.335]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:45:29.335]    </control>
[03:45:29.335]    <block atomic="false" info="">
[03:45:29.335]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:45:29.342]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:45:29.342]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:45:29.342]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:45:29.342]      __ap = 0; //lets make sure we reset the access point selection
[03:45:29.342]        // -> [__ap <= 0x00000000]
[03:45:29.342]    </block>
[03:45:29.342]  </sequence>
[03:45:29.342]  
[03:45:29.390]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:45:29.390]  
[03:45:29.390]  <debugvars>
[03:45:29.390]    // Pre-defined
[03:45:29.390]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:45:29.390]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:45:29.390]    __dp=0x00000000
[03:45:29.390]    __ap=0x00000000
[03:45:29.390]    __traceout=0x00000000      (Trace Disabled)
[03:45:29.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:45:29.390]    __FlashAddr=0x00000000
[03:45:29.390]    __FlashLen=0x00000000
[03:45:29.390]    __FlashArg=0x00000000
[03:45:29.390]    __FlashOp=0x00000000
[03:45:29.390]    __Result=0x00000000
[03:45:29.390]  </debugvars>
[03:45:29.390]  
[03:45:29.390]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:45:29.390]    <block atomic="false" info="">
[03:45:29.390]      __var deviceID = 0;
[03:45:29.390]        // -> [deviceID <= 0x00000000]
[03:45:29.390]      __var version = 0;
[03:45:29.390]        // -> [version <= 0x00000000]
[03:45:29.390]      __var partNum = 0;
[03:45:29.390]        // -> [partNum <= 0x00000000]
[03:45:29.390]      __var manuf = 0;
[03:45:29.390]        // -> [manuf <= 0x00000000]
[03:45:29.390]      __var isMSPM0G1X0X_G3X0X = 0;
[03:45:29.390]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:45:29.390]      __var isProduction = 0;
[03:45:29.390]        // -> [isProduction <= 0x00000000]
[03:45:29.390]      __var continueId = 0;
[03:45:29.390]        // -> [continueId <= 0x00000000]
[03:45:29.390]      deviceID =   Read32(0x41C40004);
[03:45:29.410]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:45:29.412]        // -> [deviceID <= 0x2BB8802F]
[03:45:29.412]      version = deviceID >> 28;
[03:45:29.412]        // -> [version <= 0x00000002]
[03:45:29.412]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:45:29.412]        // -> [partNum <= 0x0000BB88]
[03:45:29.412]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:45:29.412]        // -> [manuf <= 0x00000017]
[03:45:29.412]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:45:29.412]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:45:29.412]      isProduction = (version > 0);
[03:45:29.412]        // -> [isProduction <= 0x00000001]
[03:45:29.412]    </block>
[03:45:29.412]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:45:29.412]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:45:29.412]        // =>  FALSE
[03:45:29.412]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:45:29.412]    </control>
[03:45:29.412]    <control if="continueId == 4" while="" timeout="0" info="">
[03:45:29.412]      // if-block "continueId == 4"
[03:45:29.412]        // =>  FALSE
[03:45:29.412]      // skip if-block "continueId == 4"
[03:45:29.412]    </control>
[03:45:29.412]    <control if="!isProduction" while="" timeout="0" info="">
[03:45:29.412]      // if-block "!isProduction"
[03:45:29.412]        // =>  FALSE
[03:45:29.412]      // skip if-block "!isProduction"
[03:45:29.412]    </control>
[03:45:29.412]  </sequence>
[03:45:29.412]  
[03:46:17.546]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:46:17.546]  
[03:46:17.554]  <debugvars>
[03:46:17.554]    // Pre-defined
[03:46:17.554]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:46:17.554]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:46:17.554]    __dp=0x00000000
[03:46:17.554]    __ap=0x00000000
[03:46:17.554]    __traceout=0x00000000      (Trace Disabled)
[03:46:17.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:46:17.554]    __FlashAddr=0x00000000
[03:46:17.554]    __FlashLen=0x00000000
[03:46:17.554]    __FlashArg=0x00000000
[03:46:17.554]    __FlashOp=0x00000000
[03:46:17.554]    __Result=0x00000000
[03:46:17.554]  </debugvars>
[03:46:17.554]  
[03:46:17.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:46:17.554]    <block atomic="false" info="">
[03:46:17.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:46:17.554]        // -> [isSWJ <= 0x00000001]
[03:46:17.556]      __var hasDormant = __protocol & 0x00020000;
[03:46:17.556]        // -> [hasDormant <= 0x00000000]
[03:46:17.556]      __var protType   = __protocol & 0x0000FFFF;
[03:46:17.556]        // -> [protType <= 0x00000002]
[03:46:17.556]    </block>
[03:46:17.556]    <control if="protType == 1" while="" timeout="0" info="">
[03:46:17.556]      // if-block "protType == 1"
[03:46:17.556]        // =>  FALSE
[03:46:17.556]      // skip if-block "protType == 1"
[03:46:17.556]    </control>
[03:46:17.556]    <control if="protType == 2" while="" timeout="0" info="">
[03:46:17.557]      // if-block "protType == 2"
[03:46:17.557]        // =>  TRUE
[03:46:17.557]      <control if="isSWJ" while="" timeout="0" info="">
[03:46:17.557]        // if-block "isSWJ"
[03:46:17.557]          // =>  TRUE
[03:46:17.557]        <control if="hasDormant" while="" timeout="0" info="">
[03:46:17.557]          // if-block "hasDormant"
[03:46:17.557]            // =>  FALSE
[03:46:17.557]          // skip if-block "hasDormant"
[03:46:17.557]        </control>
[03:46:17.557]        <control if="!hasDormant" while="" timeout="0" info="">
[03:46:17.557]          // if-block "!hasDormant"
[03:46:17.557]            // =>  TRUE
[03:46:17.557]          <block atomic="false" info="">
[03:46:17.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:46:17.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:46:17.557]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:46:17.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:46:17.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:46:17.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:46:17.566]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:46:17.566]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:46:17.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:46:17.576]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:46:17.576]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:46:17.586]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:46:17.586]          </block>
[03:46:17.586]          // end if-block "!hasDormant"
[03:46:17.586]        </control>
[03:46:17.586]        // end if-block "isSWJ"
[03:46:17.586]      </control>
[03:46:17.586]      <control if="!isSWJ" while="" timeout="0" info="">
[03:46:17.586]        // if-block "!isSWJ"
[03:46:17.586]          // =>  FALSE
[03:46:17.586]        // skip if-block "!isSWJ"
[03:46:17.586]      </control>
[03:46:17.586]      <block atomic="false" info="">
[03:46:17.586]        ReadDP(0x0);
[03:46:17.586]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:46:17.586]      </block>
[03:46:17.586]      // end if-block "protType == 2"
[03:46:17.586]    </control>
[03:46:17.586]  </sequence>
[03:46:17.586]  
[03:46:17.599]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:46:17.599]  
[03:46:17.603]  <debugvars>
[03:46:17.603]    // Pre-defined
[03:46:17.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:46:17.603]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:46:17.603]    __dp=0x00000000
[03:46:17.603]    __ap=0x00000000
[03:46:17.603]    __traceout=0x00000000      (Trace Disabled)
[03:46:17.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:46:17.603]    __FlashAddr=0x00000000
[03:46:17.603]    __FlashLen=0x00000000
[03:46:17.603]    __FlashArg=0x00000000
[03:46:17.603]    __FlashOp=0x00000000
[03:46:17.603]    __Result=0x00000000
[03:46:17.603]  </debugvars>
[03:46:17.603]  
[03:46:17.603]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:46:17.603]    <block atomic="false" info="">
[03:46:17.603]      __var SW_DP_ABORT       = 0x0;
[03:46:17.603]        // -> [SW_DP_ABORT <= 0x00000000]
[03:46:17.603]      __var DP_CTRL_STAT      = 0x4;
[03:46:17.603]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:46:17.603]      __var DP_SELECT         = 0x8;
[03:46:17.603]        // -> [DP_SELECT <= 0x00000008]
[03:46:17.603]      __var powered_down      = 0;
[03:46:17.603]        // -> [powered_down <= 0x00000000]
[03:46:17.603]      WriteDP(DP_SELECT, 0x00000000);
[03:46:17.607]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:46:17.607]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:46:17.607]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:46:17.607]        // -> [powered_down <= 0x00000001]
[03:46:17.607]    </block>
[03:46:17.607]    <control if="powered_down" while="" timeout="0" info="">
[03:46:17.607]      // if-block "powered_down"
[03:46:17.607]        // =>  TRUE
[03:46:17.607]      <block atomic="false" info="">
[03:46:17.607]        Message(0, "Debug/System power-up request sent");
[03:46:17.607]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:46:17.616]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:46:17.616]      </block>
[03:46:17.616]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:46:17.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:46:17.616]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:46:17.616]        // while-condition  =>  FALSE
[03:46:17.616]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:46:17.616]      </control>
[03:46:17.616]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:46:17.616]        // if-block "(__protocol & 0xFFFF) == 1"
[03:46:17.616]          // =>  FALSE
[03:46:17.616]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:46:17.616]      </control>
[03:46:17.616]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:46:17.616]        // if-block "(__protocol & 0xFFFF) == 2"
[03:46:17.616]          // =>  TRUE
[03:46:17.616]        <block atomic="false" info="">
[03:46:17.616]          Message(0, "executing SWD power up");
[03:46:17.616]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:46:17.616]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:46:17.616]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:46:17.626]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:46:17.626]        </block>
[03:46:17.626]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:46:17.626]      </control>
[03:46:17.626]      // end if-block "powered_down"
[03:46:17.626]    </control>
[03:46:17.626]    <block atomic="false" info="">
[03:46:17.626]      __var DEBUG_PORT_VAL    = 0;
[03:46:17.626]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:46:17.626]      __var ACCESS_POINT_VAL  = 0;
[03:46:17.626]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:46:17.626]      __ap = 1; 
[03:46:17.626]        // -> [__ap <= 0x00000001]
[03:46:17.626]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:46:17.640]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:46:17.640]      __ap = 4;
[03:46:17.646]        // -> [__ap <= 0x00000004]
[03:46:17.646]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:46:17.646]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:46:17.646]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:46:17.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:46:17.646]    </block>
[03:46:17.646]    <block atomic="false" info="">
[03:46:17.646]      __var nReset = 0x80;
[03:46:17.646]        // -> [nReset <= 0x00000080]
[03:46:17.646]      __var canReadPins = 0;
[03:46:17.656]        // -> [canReadPins <= 0x00000000]
[03:46:17.656]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:46:17.656]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:46:17.656]        // -> [canReadPins <= 0x00000001]
[03:46:17.656]    </block>
[03:46:17.656]    <control if="" while="1" timeout="200" info="">
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.656]      // while "1"  (timeout="200")
[03:46:17.656]      // while-condition  =>  TRUE
[03:46:17.666]      // while "1"  (timeout="200")
[03:46:17.666]      // while  =>  TIMEOUT
[03:46:17.666]      // end while "1"
[03:46:17.666]    </control>
[03:46:17.666]    <control if="canReadPins" while="" timeout="0" info="">
[03:46:17.666]      // if-block "canReadPins"
[03:46:17.666]        // =>  TRUE
[03:46:17.666]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:46:17.666]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:46:17.666]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:46:17.666]        // while-condition  =>  FALSE
[03:46:17.666]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:46:17.666]      </control>
[03:46:17.666]      // end if-block "canReadPins"
[03:46:17.666]    </control>
[03:46:17.666]    <control if="!canReadPins" while="" timeout="0" info="">
[03:46:17.666]      // if-block "!canReadPins"
[03:46:17.666]        // =>  FALSE
[03:46:17.666]      // skip if-block "!canReadPins"
[03:46:17.666]    </control>
[03:46:17.666]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:46:17.666]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:46:17.666]        // =>  TRUE
[03:46:17.666]      <block atomic="false" info="">
[03:46:17.666]        WriteAP(0x00, 0x190008);
[03:46:17.676]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:46:17.676]        WriteAP(0xF0, 0x01);
[03:46:17.676]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:46:17.676]      </block>
[03:46:17.676]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:46:17.676]    </control>
[03:46:17.676]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:46:17.676]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:46:17.676]        // =>  FALSE
[03:46:17.676]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:46:17.676]    </control>
[03:46:17.676]    <block atomic="false" info="">
[03:46:17.676]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:46:17.686]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:46:17.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:46:17.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:46:17.686]      __ap = 0; //lets make sure we reset the access point selection
[03:46:17.686]        // -> [__ap <= 0x00000000]
[03:46:17.686]    </block>
[03:46:17.686]  </sequence>
[03:46:17.686]  
[03:46:17.746]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:46:17.746]  
[03:46:17.746]  <debugvars>
[03:46:17.746]    // Pre-defined
[03:46:17.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:46:17.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:46:17.746]    __dp=0x00000000
[03:46:17.746]    __ap=0x00000000
[03:46:17.746]    __traceout=0x00000000      (Trace Disabled)
[03:46:17.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:46:17.746]    __FlashAddr=0x00000000
[03:46:17.746]    __FlashLen=0x00000000
[03:46:17.746]    __FlashArg=0x00000000
[03:46:17.746]    __FlashOp=0x00000000
[03:46:17.746]    __Result=0x00000000
[03:46:17.746]  </debugvars>
[03:46:17.746]  
[03:46:17.746]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:46:17.746]    <block atomic="false" info="">
[03:46:17.746]      __var deviceID = 0;
[03:46:17.746]        // -> [deviceID <= 0x00000000]
[03:46:17.746]      __var version = 0;
[03:46:17.746]        // -> [version <= 0x00000000]
[03:46:17.746]      __var partNum = 0;
[03:46:17.746]        // -> [partNum <= 0x00000000]
[03:46:17.746]      __var manuf = 0;
[03:46:17.746]        // -> [manuf <= 0x00000000]
[03:46:17.746]      __var isMSPM0G1X0X_G3X0X = 0;
[03:46:17.746]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:46:17.746]      __var isProduction = 0;
[03:46:17.746]        // -> [isProduction <= 0x00000000]
[03:46:17.746]      __var continueId = 0;
[03:46:17.746]        // -> [continueId <= 0x00000000]
[03:46:17.746]      deviceID =   Read32(0x41C40004);
[03:46:17.756]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:46:17.756]        // -> [deviceID <= 0x2BB8802F]
[03:46:17.756]      version = deviceID >> 28;
[03:46:17.756]        // -> [version <= 0x00000002]
[03:46:17.756]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:46:17.756]        // -> [partNum <= 0x0000BB88]
[03:46:17.756]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:46:17.756]        // -> [manuf <= 0x00000017]
[03:46:17.756]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:46:17.756]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:46:17.756]      isProduction = (version > 0);
[03:46:17.756]        // -> [isProduction <= 0x00000001]
[03:46:17.756]    </block>
[03:46:17.756]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:46:17.756]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:46:17.756]        // =>  FALSE
[03:46:17.756]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:46:17.756]    </control>
[03:46:17.756]    <control if="continueId == 4" while="" timeout="0" info="">
[03:46:17.756]      // if-block "continueId == 4"
[03:46:17.756]        // =>  FALSE
[03:46:17.756]      // skip if-block "continueId == 4"
[03:46:17.756]    </control>
[03:46:17.756]    <control if="!isProduction" while="" timeout="0" info="">
[03:46:17.756]      // if-block "!isProduction"
[03:46:17.756]        // =>  FALSE
[03:46:17.756]      // skip if-block "!isProduction"
[03:46:17.756]    </control>
[03:46:17.756]  </sequence>
[03:46:17.756]  
[03:47:23.613]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:47:23.613]  
[03:47:23.622]  <debugvars>
[03:47:23.622]    // Pre-defined
[03:47:23.622]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:47:23.622]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:47:23.622]    __dp=0x00000000
[03:47:23.622]    __ap=0x00000000
[03:47:23.622]    __traceout=0x00000000      (Trace Disabled)
[03:47:23.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:47:23.622]    __FlashAddr=0x00000000
[03:47:23.623]    __FlashLen=0x00000000
[03:47:23.623]    __FlashArg=0x00000000
[03:47:23.623]    __FlashOp=0x00000000
[03:47:23.623]    __Result=0x00000000
[03:47:23.623]  </debugvars>
[03:47:23.623]  
[03:47:23.624]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:47:23.624]    <block atomic="false" info="">
[03:47:23.624]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:47:23.624]        // -> [isSWJ <= 0x00000001]
[03:47:23.624]      __var hasDormant = __protocol & 0x00020000;
[03:47:23.624]        // -> [hasDormant <= 0x00000000]
[03:47:23.624]      __var protType   = __protocol & 0x0000FFFF;
[03:47:23.624]        // -> [protType <= 0x00000002]
[03:47:23.624]    </block>
[03:47:23.624]    <control if="protType == 1" while="" timeout="0" info="">
[03:47:23.624]      // if-block "protType == 1"
[03:47:23.624]        // =>  FALSE
[03:47:23.624]      // skip if-block "protType == 1"
[03:47:23.624]    </control>
[03:47:23.624]    <control if="protType == 2" while="" timeout="0" info="">
[03:47:23.624]      // if-block "protType == 2"
[03:47:23.624]        // =>  TRUE
[03:47:23.624]      <control if="isSWJ" while="" timeout="0" info="">
[03:47:23.624]        // if-block "isSWJ"
[03:47:23.624]          // =>  TRUE
[03:47:23.624]        <control if="hasDormant" while="" timeout="0" info="">
[03:47:23.624]          // if-block "hasDormant"
[03:47:23.624]            // =>  FALSE
[03:47:23.624]          // skip if-block "hasDormant"
[03:47:23.624]        </control>
[03:47:23.624]        <control if="!hasDormant" while="" timeout="0" info="">
[03:47:23.624]          // if-block "!hasDormant"
[03:47:23.624]            // =>  TRUE
[03:47:23.624]          <block atomic="false" info="">
[03:47:23.624]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:47:23.630]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:47:23.630]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:47:23.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:47:23.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:47:23.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:47:23.637]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:47:23.637]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:47:23.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:47:23.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:47:23.644]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:47:23.645]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:47:23.650]          </block>
[03:47:23.650]          // end if-block "!hasDormant"
[03:47:23.650]        </control>
[03:47:23.650]        // end if-block "isSWJ"
[03:47:23.650]      </control>
[03:47:23.650]      <control if="!isSWJ" while="" timeout="0" info="">
[03:47:23.650]        // if-block "!isSWJ"
[03:47:23.650]          // =>  FALSE
[03:47:23.650]        // skip if-block "!isSWJ"
[03:47:23.650]      </control>
[03:47:23.650]      <block atomic="false" info="">
[03:47:23.650]        ReadDP(0x0);
[03:47:23.653]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:47:23.653]      </block>
[03:47:23.653]      // end if-block "protType == 2"
[03:47:23.653]    </control>
[03:47:23.653]  </sequence>
[03:47:23.653]  
[03:47:23.660]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:47:23.660]  
[03:47:23.660]  <debugvars>
[03:47:23.660]    // Pre-defined
[03:47:23.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:47:23.660]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:47:23.660]    __dp=0x00000000
[03:47:23.660]    __ap=0x00000000
[03:47:23.660]    __traceout=0x00000000      (Trace Disabled)
[03:47:23.660]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:47:23.660]    __FlashAddr=0x00000000
[03:47:23.660]    __FlashLen=0x00000000
[03:47:23.660]    __FlashArg=0x00000000
[03:47:23.660]    __FlashOp=0x00000000
[03:47:23.660]    __Result=0x00000000
[03:47:23.660]  </debugvars>
[03:47:23.660]  
[03:47:23.660]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:47:23.660]    <block atomic="false" info="">
[03:47:23.660]      __var SW_DP_ABORT       = 0x0;
[03:47:23.660]        // -> [SW_DP_ABORT <= 0x00000000]
[03:47:23.660]      __var DP_CTRL_STAT      = 0x4;
[03:47:23.660]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:47:23.660]      __var DP_SELECT         = 0x8;
[03:47:23.664]        // -> [DP_SELECT <= 0x00000008]
[03:47:23.664]      __var powered_down      = 0;
[03:47:23.664]        // -> [powered_down <= 0x00000000]
[03:47:23.664]      WriteDP(DP_SELECT, 0x00000000);
[03:47:23.665]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:47:23.665]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:47:23.670]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:47:23.670]        // -> [powered_down <= 0x00000001]
[03:47:23.670]    </block>
[03:47:23.670]    <control if="powered_down" while="" timeout="0" info="">
[03:47:23.670]      // if-block "powered_down"
[03:47:23.670]        // =>  TRUE
[03:47:23.670]      <block atomic="false" info="">
[03:47:23.670]        Message(0, "Debug/System power-up request sent");
[03:47:23.670]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:47:23.673]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:47:23.673]      </block>
[03:47:23.673]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:47:23.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:47:23.678]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:47:23.678]        // while-condition  =>  FALSE
[03:47:23.678]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:47:23.678]      </control>
[03:47:23.678]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:47:23.678]        // if-block "(__protocol & 0xFFFF) == 1"
[03:47:23.678]          // =>  FALSE
[03:47:23.678]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:47:23.678]      </control>
[03:47:23.678]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:47:23.678]        // if-block "(__protocol & 0xFFFF) == 2"
[03:47:23.678]          // =>  TRUE
[03:47:23.678]        <block atomic="false" info="">
[03:47:23.678]          Message(0, "executing SWD power up");
[03:47:23.678]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:47:23.685]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:47:23.685]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:47:23.685]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:47:23.685]        </block>
[03:47:23.685]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:47:23.685]      </control>
[03:47:23.685]      // end if-block "powered_down"
[03:47:23.685]    </control>
[03:47:23.685]    <block atomic="false" info="">
[03:47:23.691]      __var DEBUG_PORT_VAL    = 0;
[03:47:23.691]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:47:23.691]      __var ACCESS_POINT_VAL  = 0;
[03:47:23.691]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:47:23.691]      __ap = 1; 
[03:47:23.691]        // -> [__ap <= 0x00000001]
[03:47:23.691]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:47:23.704]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:47:23.704]      __ap = 4;
[03:47:23.704]        // -> [__ap <= 0x00000004]
[03:47:23.704]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:47:23.714]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:47:23.714]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:47:23.714]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:47:23.714]    </block>
[03:47:23.714]    <block atomic="false" info="">
[03:47:23.714]      __var nReset = 0x80;
[03:47:23.714]        // -> [nReset <= 0x00000080]
[03:47:23.714]      __var canReadPins = 0;
[03:47:23.714]        // -> [canReadPins <= 0x00000000]
[03:47:23.714]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:47:23.722]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:47:23.722]        // -> [canReadPins <= 0x00000001]
[03:47:23.722]    </block>
[03:47:23.722]    <control if="" while="1" timeout="200" info="">
[03:47:23.722]      // while "1"  (timeout="200")
[03:47:23.722]      // while-condition  =>  TRUE
[03:47:23.722]      // while "1"  (timeout="200")
[03:47:23.722]      // while-condition  =>  TRUE
[03:47:23.722]      // while "1"  (timeout="200")
[03:47:23.722]      // while-condition  =>  TRUE
[03:47:23.722]      // while "1"  (timeout="200")
[03:47:23.722]      // while-condition  =>  TRUE
[03:47:23.722]      // while "1"  (timeout="200")
[03:47:23.724]      // while-condition  =>  TRUE
[03:47:23.724]      // while "1"  (timeout="200")
[03:47:23.724]      // while  =>  TIMEOUT
[03:47:23.724]      // end while "1"
[03:47:23.724]    </control>
[03:47:23.724]    <control if="canReadPins" while="" timeout="0" info="">
[03:47:23.724]      // if-block "canReadPins"
[03:47:23.724]        // =>  TRUE
[03:47:23.724]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:47:23.724]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:47:23.734]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:47:23.734]        // while-condition  =>  FALSE
[03:47:23.734]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:47:23.734]      </control>
[03:47:23.734]      // end if-block "canReadPins"
[03:47:23.734]    </control>
[03:47:23.734]    <control if="!canReadPins" while="" timeout="0" info="">
[03:47:23.734]      // if-block "!canReadPins"
[03:47:23.734]        // =>  FALSE
[03:47:23.734]      // skip if-block "!canReadPins"
[03:47:23.734]    </control>
[03:47:23.734]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:47:23.734]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:47:23.734]        // =>  TRUE
[03:47:23.734]      <block atomic="false" info="">
[03:47:23.734]        WriteAP(0x00, 0x190008);
[03:47:23.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:47:23.742]        WriteAP(0xF0, 0x01);
[03:47:23.744]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:47:23.744]      </block>
[03:47:23.744]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:47:23.752]    </control>
[03:47:23.752]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:47:23.752]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:47:23.752]        // =>  FALSE
[03:47:23.752]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:47:23.752]    </control>
[03:47:23.752]    <block atomic="false" info="">
[03:47:23.752]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:47:23.758]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:47:23.758]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:47:23.758]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:47:23.758]      __ap = 0; //lets make sure we reset the access point selection
[03:47:23.758]        // -> [__ap <= 0x00000000]
[03:47:23.758]    </block>
[03:47:23.758]  </sequence>
[03:47:23.758]  
[03:47:23.796]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:47:23.796]  
[03:47:23.796]  <debugvars>
[03:47:23.796]    // Pre-defined
[03:47:23.796]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:47:23.796]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:47:23.796]    __dp=0x00000000
[03:47:23.796]    __ap=0x00000000
[03:47:23.796]    __traceout=0x00000000      (Trace Disabled)
[03:47:23.796]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:47:23.803]    __FlashAddr=0x00000000
[03:47:23.803]    __FlashLen=0x00000000
[03:47:23.803]    __FlashArg=0x00000000
[03:47:23.803]    __FlashOp=0x00000000
[03:47:23.803]    __Result=0x00000000
[03:47:23.803]  </debugvars>
[03:47:23.803]  
[03:47:23.803]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:47:23.803]    <block atomic="false" info="">
[03:47:23.803]      __var deviceID = 0;
[03:47:23.804]        // -> [deviceID <= 0x00000000]
[03:47:23.804]      __var version = 0;
[03:47:23.804]        // -> [version <= 0x00000000]
[03:47:23.804]      __var partNum = 0;
[03:47:23.804]        // -> [partNum <= 0x00000000]
[03:47:23.804]      __var manuf = 0;
[03:47:23.804]        // -> [manuf <= 0x00000000]
[03:47:23.804]      __var isMSPM0G1X0X_G3X0X = 0;
[03:47:23.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:47:23.804]      __var isProduction = 0;
[03:47:23.804]        // -> [isProduction <= 0x00000000]
[03:47:23.804]      __var continueId = 0;
[03:47:23.804]        // -> [continueId <= 0x00000000]
[03:47:23.804]      deviceID =   Read32(0x41C40004);
[03:47:23.815]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:47:23.816]        // -> [deviceID <= 0x2BB8802F]
[03:47:23.816]      version = deviceID >> 28;
[03:47:23.816]        // -> [version <= 0x00000002]
[03:47:23.816]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:47:23.816]        // -> [partNum <= 0x0000BB88]
[03:47:23.816]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:47:23.816]        // -> [manuf <= 0x00000017]
[03:47:23.816]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:47:23.816]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:47:23.816]      isProduction = (version > 0);
[03:47:23.816]        // -> [isProduction <= 0x00000001]
[03:47:23.816]    </block>
[03:47:23.816]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:47:23.816]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:47:23.816]        // =>  FALSE
[03:47:23.816]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:47:23.816]    </control>
[03:47:23.816]    <control if="continueId == 4" while="" timeout="0" info="">
[03:47:23.816]      // if-block "continueId == 4"
[03:47:23.816]        // =>  FALSE
[03:47:23.816]      // skip if-block "continueId == 4"
[03:47:23.816]    </control>
[03:47:23.816]    <control if="!isProduction" while="" timeout="0" info="">
[03:47:23.816]      // if-block "!isProduction"
[03:47:23.816]        // =>  FALSE
[03:47:23.816]      // skip if-block "!isProduction"
[03:47:23.816]    </control>
[03:47:23.816]  </sequence>
[03:47:23.816]  
[03:48:30.280]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:48:30.280]  
[03:48:30.298]  <debugvars>
[03:48:30.298]    // Pre-defined
[03:48:30.298]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:30.298]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:30.298]    __dp=0x00000000
[03:48:30.298]    __ap=0x00000000
[03:48:30.298]    __traceout=0x00000000      (Trace Disabled)
[03:48:30.298]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:30.298]    __FlashAddr=0x00000000
[03:48:30.298]    __FlashLen=0x00000000
[03:48:30.298]    __FlashArg=0x00000000
[03:48:30.298]    __FlashOp=0x00000000
[03:48:30.298]    __Result=0x00000000
[03:48:30.298]  </debugvars>
[03:48:30.298]  
[03:48:30.298]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:48:30.298]    <block atomic="false" info="">
[03:48:30.298]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:48:30.298]        // -> [isSWJ <= 0x00000001]
[03:48:30.300]      __var hasDormant = __protocol & 0x00020000;
[03:48:30.300]        // -> [hasDormant <= 0x00000000]
[03:48:30.300]      __var protType   = __protocol & 0x0000FFFF;
[03:48:30.300]        // -> [protType <= 0x00000002]
[03:48:30.300]    </block>
[03:48:30.300]    <control if="protType == 1" while="" timeout="0" info="">
[03:48:30.300]      // if-block "protType == 1"
[03:48:30.300]        // =>  FALSE
[03:48:30.300]      // skip if-block "protType == 1"
[03:48:30.300]    </control>
[03:48:30.300]    <control if="protType == 2" while="" timeout="0" info="">
[03:48:30.300]      // if-block "protType == 2"
[03:48:30.300]        // =>  TRUE
[03:48:30.300]      <control if="isSWJ" while="" timeout="0" info="">
[03:48:30.300]        // if-block "isSWJ"
[03:48:30.300]          // =>  TRUE
[03:48:30.300]        <control if="hasDormant" while="" timeout="0" info="">
[03:48:30.300]          // if-block "hasDormant"
[03:48:30.300]            // =>  FALSE
[03:48:30.300]          // skip if-block "hasDormant"
[03:48:30.300]        </control>
[03:48:30.300]        <control if="!hasDormant" while="" timeout="0" info="">
[03:48:30.300]          // if-block "!hasDormant"
[03:48:30.300]            // =>  TRUE
[03:48:30.300]          <block atomic="false" info="">
[03:48:30.300]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:48:30.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:30.304]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:48:30.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:48:30.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:48:30.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:30.310]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:48:30.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:48:30.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:48:30.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:48:30.310]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:48:30.322]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:48:30.322]          </block>
[03:48:30.322]          // end if-block "!hasDormant"
[03:48:30.322]        </control>
[03:48:30.322]        // end if-block "isSWJ"
[03:48:30.322]      </control>
[03:48:30.322]      <control if="!isSWJ" while="" timeout="0" info="">
[03:48:30.322]        // if-block "!isSWJ"
[03:48:30.322]          // =>  FALSE
[03:48:30.322]        // skip if-block "!isSWJ"
[03:48:30.322]      </control>
[03:48:30.322]      <block atomic="false" info="">
[03:48:30.322]        ReadDP(0x0);
[03:48:30.322]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:48:30.322]      </block>
[03:48:30.322]      // end if-block "protType == 2"
[03:48:30.322]    </control>
[03:48:30.322]  </sequence>
[03:48:30.322]  
[03:48:30.330]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:48:30.330]  
[03:48:30.330]  <debugvars>
[03:48:30.330]    // Pre-defined
[03:48:30.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:30.330]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:30.330]    __dp=0x00000000
[03:48:30.330]    __ap=0x00000000
[03:48:30.330]    __traceout=0x00000000      (Trace Disabled)
[03:48:30.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:30.330]    __FlashAddr=0x00000000
[03:48:30.330]    __FlashLen=0x00000000
[03:48:30.330]    __FlashArg=0x00000000
[03:48:30.330]    __FlashOp=0x00000000
[03:48:30.330]    __Result=0x00000000
[03:48:30.330]  </debugvars>
[03:48:30.330]  
[03:48:30.330]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:48:30.330]    <block atomic="false" info="">
[03:48:30.330]      __var SW_DP_ABORT       = 0x0;
[03:48:30.330]        // -> [SW_DP_ABORT <= 0x00000000]
[03:48:30.330]      __var DP_CTRL_STAT      = 0x4;
[03:48:30.330]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:48:30.330]      __var DP_SELECT         = 0x8;
[03:48:30.330]        // -> [DP_SELECT <= 0x00000008]
[03:48:30.330]      __var powered_down      = 0;
[03:48:30.330]        // -> [powered_down <= 0x00000000]
[03:48:30.330]      WriteDP(DP_SELECT, 0x00000000);
[03:48:30.340]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:48:30.340]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:48:30.340]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:48:30.340]        // -> [powered_down <= 0x00000001]
[03:48:30.340]    </block>
[03:48:30.340]    <control if="powered_down" while="" timeout="0" info="">
[03:48:30.340]      // if-block "powered_down"
[03:48:30.340]        // =>  TRUE
[03:48:30.340]      <block atomic="false" info="">
[03:48:30.340]        Message(0, "Debug/System power-up request sent");
[03:48:30.340]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:48:30.350]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:48:30.350]      </block>
[03:48:30.350]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:48:30.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:48:30.350]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:48:30.350]        // while-condition  =>  FALSE
[03:48:30.350]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:48:30.350]      </control>
[03:48:30.350]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:48:30.350]        // if-block "(__protocol & 0xFFFF) == 1"
[03:48:30.350]          // =>  FALSE
[03:48:30.350]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:48:30.350]      </control>
[03:48:30.350]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:48:30.350]        // if-block "(__protocol & 0xFFFF) == 2"
[03:48:30.350]          // =>  TRUE
[03:48:30.350]        <block atomic="false" info="">
[03:48:30.350]          Message(0, "executing SWD power up");
[03:48:30.350]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:48:30.360]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:48:30.360]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:48:30.360]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:48:30.360]        </block>
[03:48:30.360]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:48:30.360]      </control>
[03:48:30.360]      // end if-block "powered_down"
[03:48:30.360]    </control>
[03:48:30.360]    <block atomic="false" info="">
[03:48:30.360]      __var DEBUG_PORT_VAL    = 0;
[03:48:30.360]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:48:30.360]      __var ACCESS_POINT_VAL  = 0;
[03:48:30.360]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:48:30.360]      __ap = 1; 
[03:48:30.370]        // -> [__ap <= 0x00000001]
[03:48:30.370]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:48:30.373]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:48:30.373]      __ap = 4;
[03:48:30.373]        // -> [__ap <= 0x00000004]
[03:48:30.373]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:48:30.382]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:48:30.382]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:48:30.382]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:48:30.382]    </block>
[03:48:30.382]    <block atomic="false" info="">
[03:48:30.382]      __var nReset = 0x80;
[03:48:30.382]        // -> [nReset <= 0x00000080]
[03:48:30.382]      __var canReadPins = 0;
[03:48:30.382]        // -> [canReadPins <= 0x00000000]
[03:48:30.382]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:48:30.391]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:48:30.391]        // -> [canReadPins <= 0x00000001]
[03:48:30.391]    </block>
[03:48:30.391]    <control if="" while="1" timeout="200" info="">
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.391]      // while "1"  (timeout="200")
[03:48:30.391]      // while-condition  =>  TRUE
[03:48:30.401]      // while "1"  (timeout="200")
[03:48:30.401]      // while  =>  TIMEOUT
[03:48:30.401]      // end while "1"
[03:48:30.401]    </control>
[03:48:30.401]    <control if="canReadPins" while="" timeout="0" info="">
[03:48:30.401]      // if-block "canReadPins"
[03:48:30.401]        // =>  TRUE
[03:48:30.401]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:48:30.401]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:48:30.404]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:48:30.404]        // while-condition  =>  FALSE
[03:48:30.404]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:48:30.404]      </control>
[03:48:30.404]      // end if-block "canReadPins"
[03:48:30.404]    </control>
[03:48:30.404]    <control if="!canReadPins" while="" timeout="0" info="">
[03:48:30.404]      // if-block "!canReadPins"
[03:48:30.404]        // =>  FALSE
[03:48:30.404]      // skip if-block "!canReadPins"
[03:48:30.404]    </control>
[03:48:30.404]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:48:30.404]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:48:30.404]        // =>  TRUE
[03:48:30.404]      <block atomic="false" info="">
[03:48:30.404]        WriteAP(0x00, 0x190008);
[03:48:30.411]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:48:30.411]        WriteAP(0xF0, 0x01);
[03:48:30.412]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:48:30.412]      </block>
[03:48:30.412]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:48:30.412]    </control>
[03:48:30.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:48:30.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:48:30.412]        // =>  FALSE
[03:48:30.412]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:48:30.412]    </control>
[03:48:30.412]    <block atomic="false" info="">
[03:48:30.412]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:48:30.421]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:48:30.421]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:48:30.421]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:48:30.421]      __ap = 0; //lets make sure we reset the access point selection
[03:48:30.421]        // -> [__ap <= 0x00000000]
[03:48:30.421]    </block>
[03:48:30.421]  </sequence>
[03:48:30.421]  
[03:48:30.462]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:48:30.462]  
[03:48:30.462]  <debugvars>
[03:48:30.462]    // Pre-defined
[03:48:30.462]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:48:30.462]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:48:30.462]    __dp=0x00000000
[03:48:30.472]    __ap=0x00000000
[03:48:30.472]    __traceout=0x00000000      (Trace Disabled)
[03:48:30.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:48:30.472]    __FlashAddr=0x00000000
[03:48:30.472]    __FlashLen=0x00000000
[03:48:30.472]    __FlashArg=0x00000000
[03:48:30.472]    __FlashOp=0x00000000
[03:48:30.472]    __Result=0x00000000
[03:48:30.472]  </debugvars>
[03:48:30.472]  
[03:48:30.472]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:48:30.472]    <block atomic="false" info="">
[03:48:30.472]      __var deviceID = 0;
[03:48:30.472]        // -> [deviceID <= 0x00000000]
[03:48:30.472]      __var version = 0;
[03:48:30.472]        // -> [version <= 0x00000000]
[03:48:30.472]      __var partNum = 0;
[03:48:30.472]        // -> [partNum <= 0x00000000]
[03:48:30.472]      __var manuf = 0;
[03:48:30.472]        // -> [manuf <= 0x00000000]
[03:48:30.472]      __var isMSPM0G1X0X_G3X0X = 0;
[03:48:30.472]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:48:30.472]      __var isProduction = 0;
[03:48:30.472]        // -> [isProduction <= 0x00000000]
[03:48:30.472]      __var continueId = 0;
[03:48:30.472]        // -> [continueId <= 0x00000000]
[03:48:30.472]      deviceID =   Read32(0x41C40004);
[03:48:30.482]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:48:30.482]        // -> [deviceID <= 0x2BB8802F]
[03:48:30.482]      version = deviceID >> 28;
[03:48:30.482]        // -> [version <= 0x00000002]
[03:48:30.482]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:48:30.482]        // -> [partNum <= 0x0000BB88]
[03:48:30.482]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:48:30.482]        // -> [manuf <= 0x00000017]
[03:48:30.482]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:48:30.482]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:48:30.482]      isProduction = (version > 0);
[03:48:30.482]        // -> [isProduction <= 0x00000001]
[03:48:30.482]    </block>
[03:48:30.482]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:48:30.482]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:48:30.482]        // =>  FALSE
[03:48:30.482]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:48:30.482]    </control>
[03:48:30.482]    <control if="continueId == 4" while="" timeout="0" info="">
[03:48:30.482]      // if-block "continueId == 4"
[03:48:30.482]        // =>  FALSE
[03:48:30.482]      // skip if-block "continueId == 4"
[03:48:30.482]    </control>
[03:48:30.482]    <control if="!isProduction" while="" timeout="0" info="">
[03:48:30.482]      // if-block "!isProduction"
[03:48:30.482]        // =>  FALSE
[03:48:30.482]      // skip if-block "!isProduction"
[03:48:30.482]    </control>
[03:48:30.482]  </sequence>
[03:48:30.482]  
[03:49:48.620]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:49:48.620]  
[03:49:48.628]  <debugvars>
[03:49:48.628]    // Pre-defined
[03:49:48.628]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:48.628]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:49:48.628]    __dp=0x00000000
[03:49:48.628]    __ap=0x00000000
[03:49:48.628]    __traceout=0x00000000      (Trace Disabled)
[03:49:48.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:48.628]    __FlashAddr=0x00000000
[03:49:48.629]    __FlashLen=0x00000000
[03:49:48.629]    __FlashArg=0x00000000
[03:49:48.629]    __FlashOp=0x00000000
[03:49:48.629]    __Result=0x00000000
[03:49:48.629]  </debugvars>
[03:49:48.629]  
[03:49:48.629]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:49:48.629]    <block atomic="false" info="">
[03:49:48.629]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:49:48.630]        // -> [isSWJ <= 0x00000001]
[03:49:48.630]      __var hasDormant = __protocol & 0x00020000;
[03:49:48.630]        // -> [hasDormant <= 0x00000000]
[03:49:48.630]      __var protType   = __protocol & 0x0000FFFF;
[03:49:48.630]        // -> [protType <= 0x00000002]
[03:49:48.630]    </block>
[03:49:48.630]    <control if="protType == 1" while="" timeout="0" info="">
[03:49:48.630]      // if-block "protType == 1"
[03:49:48.630]        // =>  FALSE
[03:49:48.630]      // skip if-block "protType == 1"
[03:49:48.631]    </control>
[03:49:48.631]    <control if="protType == 2" while="" timeout="0" info="">
[03:49:48.631]      // if-block "protType == 2"
[03:49:48.631]        // =>  TRUE
[03:49:48.631]      <control if="isSWJ" while="" timeout="0" info="">
[03:49:48.631]        // if-block "isSWJ"
[03:49:48.631]          // =>  TRUE
[03:49:48.631]        <control if="hasDormant" while="" timeout="0" info="">
[03:49:48.631]          // if-block "hasDormant"
[03:49:48.632]            // =>  FALSE
[03:49:48.632]          // skip if-block "hasDormant"
[03:49:48.632]        </control>
[03:49:48.633]        <control if="!hasDormant" while="" timeout="0" info="">
[03:49:48.633]          // if-block "!hasDormant"
[03:49:48.633]            // =>  TRUE
[03:49:48.633]          <block atomic="false" info="">
[03:49:48.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:49:48.640]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:48.641]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:49:48.646]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:49:48.646]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:49:48.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:48.649]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:49:48.651]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:49:48.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:49:48.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:49:48.655]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:49:48.658]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:49:48.658]          </block>
[03:49:48.658]          // end if-block "!hasDormant"
[03:49:48.658]        </control>
[03:49:48.658]        // end if-block "isSWJ"
[03:49:48.658]      </control>
[03:49:48.658]      <control if="!isSWJ" while="" timeout="0" info="">
[03:49:48.661]        // if-block "!isSWJ"
[03:49:48.661]          // =>  FALSE
[03:49:48.661]        // skip if-block "!isSWJ"
[03:49:48.661]      </control>
[03:49:48.661]      <block atomic="false" info="">
[03:49:48.661]        ReadDP(0x0);
[03:49:48.666]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:49:48.667]      </block>
[03:49:48.667]      // end if-block "protType == 2"
[03:49:48.667]    </control>
[03:49:48.667]  </sequence>
[03:49:48.667]  
[03:49:48.674]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:49:48.674]  
[03:49:48.674]  <debugvars>
[03:49:48.674]    // Pre-defined
[03:49:48.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:48.674]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:49:48.674]    __dp=0x00000000
[03:49:48.674]    __ap=0x00000000
[03:49:48.675]    __traceout=0x00000000      (Trace Disabled)
[03:49:48.675]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:48.675]    __FlashAddr=0x00000000
[03:49:48.675]    __FlashLen=0x00000000
[03:49:48.675]    __FlashArg=0x00000000
[03:49:48.675]    __FlashOp=0x00000000
[03:49:48.675]    __Result=0x00000000
[03:49:48.675]  </debugvars>
[03:49:48.675]  
[03:49:48.675]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:49:48.675]    <block atomic="false" info="">
[03:49:48.676]      __var SW_DP_ABORT       = 0x0;
[03:49:48.676]        // -> [SW_DP_ABORT <= 0x00000000]
[03:49:48.676]      __var DP_CTRL_STAT      = 0x4;
[03:49:48.676]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:49:48.676]      __var DP_SELECT         = 0x8;
[03:49:48.676]        // -> [DP_SELECT <= 0x00000008]
[03:49:48.676]      __var powered_down      = 0;
[03:49:48.676]        // -> [powered_down <= 0x00000000]
[03:49:48.676]      WriteDP(DP_SELECT, 0x00000000);
[03:49:48.683]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:49:48.683]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:49:48.687]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:49:48.687]        // -> [powered_down <= 0x00000001]
[03:49:48.687]    </block>
[03:49:48.687]    <control if="powered_down" while="" timeout="0" info="">
[03:49:48.687]      // if-block "powered_down"
[03:49:48.687]        // =>  TRUE
[03:49:48.687]      <block atomic="false" info="">
[03:49:48.687]        Message(0, "Debug/System power-up request sent");
[03:49:48.688]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:49:48.692]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:49:48.692]      </block>
[03:49:48.692]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:49:48.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:49:48.694]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:49:48.694]        // while-condition  =>  FALSE
[03:49:48.695]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:49:48.695]      </control>
[03:49:48.695]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:49:48.695]        // if-block "(__protocol & 0xFFFF) == 1"
[03:49:48.695]          // =>  FALSE
[03:49:48.696]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:49:48.696]      </control>
[03:49:48.696]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:49:48.696]        // if-block "(__protocol & 0xFFFF) == 2"
[03:49:48.696]          // =>  TRUE
[03:49:48.696]        <block atomic="false" info="">
[03:49:48.696]          Message(0, "executing SWD power up");
[03:49:48.696]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:49:48.699]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:49:48.699]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:49:48.705]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:49:48.706]        </block>
[03:49:48.706]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:49:48.706]      </control>
[03:49:48.706]      // end if-block "powered_down"
[03:49:48.707]    </control>
[03:49:48.707]    <block atomic="false" info="">
[03:49:48.707]      __var DEBUG_PORT_VAL    = 0;
[03:49:48.707]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:49:48.707]      __var ACCESS_POINT_VAL  = 0;
[03:49:48.707]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:49:48.707]      __ap = 1; 
[03:49:48.707]        // -> [__ap <= 0x00000001]
[03:49:48.707]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:49:48.712]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:49:48.712]      __ap = 4;
[03:49:48.712]        // -> [__ap <= 0x00000004]
[03:49:48.712]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:49:48.720]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:49:48.720]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:49:48.720]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:49:48.720]    </block>
[03:49:48.720]    <block atomic="false" info="">
[03:49:48.720]      __var nReset = 0x80;
[03:49:48.720]        // -> [nReset <= 0x00000080]
[03:49:48.720]      __var canReadPins = 0;
[03:49:48.720]        // -> [canReadPins <= 0x00000000]
[03:49:48.720]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:49:48.725]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:49:48.725]        // -> [canReadPins <= 0x00000001]
[03:49:48.725]    </block>
[03:49:48.725]    <control if="" while="1" timeout="200" info="">
[03:49:48.725]      // while "1"  (timeout="200")
[03:49:48.725]      // while-condition  =>  TRUE
[03:49:48.725]      // while "1"  (timeout="200")
[03:49:48.725]      // while-condition  =>  TRUE
[03:49:48.725]      // while "1"  (timeout="200")
[03:49:48.725]      // while-condition  =>  TRUE
[03:49:48.728]      // while "1"  (timeout="200")
[03:49:48.728]      // while-condition  =>  TRUE
[03:49:48.728]      // while "1"  (timeout="200")
[03:49:48.728]      // while-condition  =>  TRUE
[03:49:48.728]      // while "1"  (timeout="200")
[03:49:48.728]      // while-condition  =>  TRUE
[03:49:48.728]      // while "1"  (timeout="200")
[03:49:48.728]      // while-condition  =>  TRUE
[03:49:48.728]      // while "1"  (timeout="200")
[03:49:48.728]      // while-condition  =>  TRUE
[03:49:48.728]      // while "1"  (timeout="200")
[03:49:48.728]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.729]      // while-condition  =>  TRUE
[03:49:48.729]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.731]      // while "1"  (timeout="200")
[03:49:48.731]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.733]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.733]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.733]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.733]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.733]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.733]      // while-condition  =>  TRUE
[03:49:48.733]      // while "1"  (timeout="200")
[03:49:48.734]      // while-condition  =>  TRUE
[03:49:48.734]      // while "1"  (timeout="200")
[03:49:48.734]      // while-condition  =>  TRUE
[03:49:48.734]      // while "1"  (timeout="200")
[03:49:48.734]      // while-condition  =>  TRUE
[03:49:48.734]      // while "1"  (timeout="200")
[03:49:48.734]      // while-condition  =>  TRUE
[03:49:48.734]      // while "1"  (timeout="200")
[03:49:48.734]      // while-condition  =>  TRUE
[03:49:48.734]      // while "1"  (timeout="200")
[03:49:48.734]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.735]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.735]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.735]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.735]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.735]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.735]      // while-condition  =>  TRUE
[03:49:48.735]      // while "1"  (timeout="200")
[03:49:48.737]      // while-condition  =>  TRUE
[03:49:48.737]      // while "1"  (timeout="200")
[03:49:48.737]      // while-condition  =>  TRUE
[03:49:48.737]      // while "1"  (timeout="200")
[03:49:48.737]      // while-condition  =>  TRUE
[03:49:48.737]      // while "1"  (timeout="200")
[03:49:48.737]      // while-condition  =>  TRUE
[03:49:48.737]      // while "1"  (timeout="200")
[03:49:48.737]      // while-condition  =>  TRUE
[03:49:48.737]      // while "1"  (timeout="200")
[03:49:48.737]      // while-condition  =>  TRUE
[03:49:48.738]      // while "1"  (timeout="200")
[03:49:48.738]      // while  =>  TIMEOUT
[03:49:48.738]      // end while "1"
[03:49:48.738]    </control>
[03:49:48.738]    <control if="canReadPins" while="" timeout="0" info="">
[03:49:48.738]      // if-block "canReadPins"
[03:49:48.738]        // =>  TRUE
[03:49:48.738]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:49:48.738]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:49:48.741]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:49:48.741]        // while-condition  =>  FALSE
[03:49:48.741]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:49:48.741]      </control>
[03:49:48.741]      // end if-block "canReadPins"
[03:49:48.741]    </control>
[03:49:48.741]    <control if="!canReadPins" while="" timeout="0" info="">
[03:49:48.741]      // if-block "!canReadPins"
[03:49:48.741]        // =>  FALSE
[03:49:48.741]      // skip if-block "!canReadPins"
[03:49:48.741]    </control>
[03:49:48.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:49:48.743]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:49:48.743]        // =>  TRUE
[03:49:48.743]      <block atomic="false" info="">
[03:49:48.743]        WriteAP(0x00, 0x190008);
[03:49:48.746]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:49:48.746]        WriteAP(0xF0, 0x01);
[03:49:48.746]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:49:48.746]      </block>
[03:49:48.746]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:49:48.746]    </control>
[03:49:48.746]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:49:48.746]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:49:48.746]        // =>  FALSE
[03:49:48.746]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:49:48.746]    </control>
[03:49:48.746]    <block atomic="false" info="">
[03:49:48.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:49:48.757]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:49:48.757]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:49:48.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:49:48.757]      __ap = 0; //lets make sure we reset the access point selection
[03:49:48.757]        // -> [__ap <= 0x00000000]
[03:49:48.757]    </block>
[03:49:48.757]  </sequence>
[03:49:48.757]  
[03:49:48.799]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:49:48.799]  
[03:49:48.799]  <debugvars>
[03:49:48.799]    // Pre-defined
[03:49:48.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:49:48.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:49:48.799]    __dp=0x00000000
[03:49:48.799]    __ap=0x00000000
[03:49:48.799]    __traceout=0x00000000      (Trace Disabled)
[03:49:48.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:49:48.799]    __FlashAddr=0x00000000
[03:49:48.799]    __FlashLen=0x00000000
[03:49:48.799]    __FlashArg=0x00000000
[03:49:48.799]    __FlashOp=0x00000000
[03:49:48.799]    __Result=0x00000000
[03:49:48.799]  </debugvars>
[03:49:48.799]  
[03:49:48.799]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:49:48.799]    <block atomic="false" info="">
[03:49:48.799]      __var deviceID = 0;
[03:49:48.799]        // -> [deviceID <= 0x00000000]
[03:49:48.799]      __var version = 0;
[03:49:48.799]        // -> [version <= 0x00000000]
[03:49:48.799]      __var partNum = 0;
[03:49:48.799]        // -> [partNum <= 0x00000000]
[03:49:48.799]      __var manuf = 0;
[03:49:48.799]        // -> [manuf <= 0x00000000]
[03:49:48.804]      __var isMSPM0G1X0X_G3X0X = 0;
[03:49:48.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:49:48.804]      __var isProduction = 0;
[03:49:48.804]        // -> [isProduction <= 0x00000000]
[03:49:48.804]      __var continueId = 0;
[03:49:48.804]        // -> [continueId <= 0x00000000]
[03:49:48.804]      deviceID =   Read32(0x41C40004);
[03:49:48.811]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:49:48.811]        // -> [deviceID <= 0x2BB8802F]
[03:49:48.811]      version = deviceID >> 28;
[03:49:48.811]        // -> [version <= 0x00000002]
[03:49:48.811]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:49:48.811]        // -> [partNum <= 0x0000BB88]
[03:49:48.811]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:49:48.816]        // -> [manuf <= 0x00000017]
[03:49:48.816]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:49:48.816]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:49:48.816]      isProduction = (version > 0);
[03:49:48.816]        // -> [isProduction <= 0x00000001]
[03:49:48.816]    </block>
[03:49:48.816]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:49:48.816]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:49:48.816]        // =>  FALSE
[03:49:48.816]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:49:48.816]    </control>
[03:49:48.817]    <control if="continueId == 4" while="" timeout="0" info="">
[03:49:48.817]      // if-block "continueId == 4"
[03:49:48.817]        // =>  FALSE
[03:49:48.817]      // skip if-block "continueId == 4"
[03:49:48.817]    </control>
[03:49:48.817]    <control if="!isProduction" while="" timeout="0" info="">
[03:49:48.817]      // if-block "!isProduction"
[03:49:48.817]        // =>  FALSE
[03:49:48.817]      // skip if-block "!isProduction"
[03:49:48.817]    </control>
[03:49:48.817]  </sequence>
[03:49:48.817]  
[03:52:04.127]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:52:04.127]  
[03:52:04.127]  <debugvars>
[03:52:04.127]    // Pre-defined
[03:52:04.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:52:04.127]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:52:04.127]    __dp=0x00000000
[03:52:04.127]    __ap=0x00000000
[03:52:04.127]    __traceout=0x00000000      (Trace Disabled)
[03:52:04.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:52:04.127]    __FlashAddr=0x00000000
[03:52:04.127]    __FlashLen=0x00000000
[03:52:04.127]    __FlashArg=0x00000000
[03:52:04.127]    __FlashOp=0x00000000
[03:52:04.127]    __Result=0x00000000
[03:52:04.127]  </debugvars>
[03:52:04.127]  
[03:52:04.127]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:52:04.127]    <block atomic="false" info="">
[03:52:04.127]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:52:04.127]        // -> [isSWJ <= 0x00000001]
[03:52:04.127]      __var hasDormant = __protocol & 0x00020000;
[03:52:04.127]        // -> [hasDormant <= 0x00000000]
[03:52:04.127]      __var protType   = __protocol & 0x0000FFFF;
[03:52:04.127]        // -> [protType <= 0x00000002]
[03:52:04.127]    </block>
[03:52:04.127]    <control if="protType == 1" while="" timeout="0" info="">
[03:52:04.127]      // if-block "protType == 1"
[03:52:04.127]        // =>  FALSE
[03:52:04.127]      // skip if-block "protType == 1"
[03:52:04.127]    </control>
[03:52:04.127]    <control if="protType == 2" while="" timeout="0" info="">
[03:52:04.127]      // if-block "protType == 2"
[03:52:04.127]        // =>  TRUE
[03:52:04.127]      <control if="isSWJ" while="" timeout="0" info="">
[03:52:04.127]        // if-block "isSWJ"
[03:52:04.127]          // =>  TRUE
[03:52:04.127]        <control if="hasDormant" while="" timeout="0" info="">
[03:52:04.127]          // if-block "hasDormant"
[03:52:04.127]            // =>  FALSE
[03:52:04.127]          // skip if-block "hasDormant"
[03:52:04.127]        </control>
[03:52:04.127]        <control if="!hasDormant" while="" timeout="0" info="">
[03:52:04.127]          // if-block "!hasDormant"
[03:52:04.127]            // =>  TRUE
[03:52:04.127]          <block atomic="false" info="">
[03:52:04.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:52:04.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:52:04.137]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:52:04.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:52:04.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:52:04.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:52:04.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:52:04.145]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:52:04.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:52:04.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:52:04.150]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:52:04.150]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:52:04.150]          </block>
[03:52:04.150]          // end if-block "!hasDormant"
[03:52:04.150]        </control>
[03:52:04.150]        // end if-block "isSWJ"
[03:52:04.150]      </control>
[03:52:04.150]      <control if="!isSWJ" while="" timeout="0" info="">
[03:52:04.150]        // if-block "!isSWJ"
[03:52:04.150]          // =>  FALSE
[03:52:04.150]        // skip if-block "!isSWJ"
[03:52:04.150]      </control>
[03:52:04.150]      <block atomic="false" info="">
[03:52:04.150]        ReadDP(0x0);
[03:52:04.157]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:52:04.157]      </block>
[03:52:04.157]      // end if-block "protType == 2"
[03:52:04.157]    </control>
[03:52:04.157]  </sequence>
[03:52:04.157]  
[03:52:04.167]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:52:04.167]  
[03:52:04.167]  <debugvars>
[03:52:04.167]    // Pre-defined
[03:52:04.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:52:04.167]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:52:04.167]    __dp=0x00000000
[03:52:04.167]    __ap=0x00000000
[03:52:04.167]    __traceout=0x00000000      (Trace Disabled)
[03:52:04.167]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:52:04.167]    __FlashAddr=0x00000000
[03:52:04.167]    __FlashLen=0x00000000
[03:52:04.167]    __FlashArg=0x00000000
[03:52:04.167]    __FlashOp=0x00000000
[03:52:04.167]    __Result=0x00000000
[03:52:04.167]  </debugvars>
[03:52:04.167]  
[03:52:04.167]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:52:04.167]    <block atomic="false" info="">
[03:52:04.167]      __var SW_DP_ABORT       = 0x0;
[03:52:04.167]        // -> [SW_DP_ABORT <= 0x00000000]
[03:52:04.167]      __var DP_CTRL_STAT      = 0x4;
[03:52:04.167]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:52:04.167]      __var DP_SELECT         = 0x8;
[03:52:04.167]        // -> [DP_SELECT <= 0x00000008]
[03:52:04.167]      __var powered_down      = 0;
[03:52:04.167]        // -> [powered_down <= 0x00000000]
[03:52:04.167]      WriteDP(DP_SELECT, 0x00000000);
[03:52:04.167]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:52:04.167]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:52:04.177]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:52:04.177]        // -> [powered_down <= 0x00000001]
[03:52:04.177]    </block>
[03:52:04.177]    <control if="powered_down" while="" timeout="0" info="">
[03:52:04.177]      // if-block "powered_down"
[03:52:04.177]        // =>  TRUE
[03:52:04.177]      <block atomic="false" info="">
[03:52:04.177]        Message(0, "Debug/System power-up request sent");
[03:52:04.177]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:52:04.177]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:52:04.177]      </block>
[03:52:04.177]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:52:04.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:52:04.187]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:52:04.187]        // while-condition  =>  FALSE
[03:52:04.187]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:52:04.187]      </control>
[03:52:04.187]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:52:04.187]        // if-block "(__protocol & 0xFFFF) == 1"
[03:52:04.187]          // =>  FALSE
[03:52:04.187]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:52:04.187]      </control>
[03:52:04.187]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:52:04.187]        // if-block "(__protocol & 0xFFFF) == 2"
[03:52:04.187]          // =>  TRUE
[03:52:04.187]        <block atomic="false" info="">
[03:52:04.187]          Message(0, "executing SWD power up");
[03:52:04.187]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:52:04.187]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:52:04.187]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:52:04.197]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:52:04.197]        </block>
[03:52:04.197]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:52:04.197]      </control>
[03:52:04.197]      // end if-block "powered_down"
[03:52:04.197]    </control>
[03:52:04.197]    <block atomic="false" info="">
[03:52:04.197]      __var DEBUG_PORT_VAL    = 0;
[03:52:04.197]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:52:04.197]      __var ACCESS_POINT_VAL  = 0;
[03:52:04.197]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:52:04.197]      __ap = 1; 
[03:52:04.197]        // -> [__ap <= 0x00000001]
[03:52:04.197]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:52:04.197]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:52:04.207]      __ap = 4;
[03:52:04.207]        // -> [__ap <= 0x00000004]
[03:52:04.207]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:52:04.207]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:52:04.207]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:52:04.207]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:52:04.207]    </block>
[03:52:04.207]    <block atomic="false" info="">
[03:52:04.207]      __var nReset = 0x80;
[03:52:04.207]        // -> [nReset <= 0x00000080]
[03:52:04.207]      __var canReadPins = 0;
[03:52:04.207]        // -> [canReadPins <= 0x00000000]
[03:52:04.207]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:52:04.217]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:52:04.217]        // -> [canReadPins <= 0x00000001]
[03:52:04.217]    </block>
[03:52:04.217]    <control if="" while="1" timeout="200" info="">
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.217]      // while-condition  =>  TRUE
[03:52:04.217]      // while "1"  (timeout="200")
[03:52:04.227]      // while-condition  =>  TRUE
[03:52:04.227]      // while "1"  (timeout="200")
[03:52:04.227]      // while  =>  TIMEOUT
[03:52:04.227]      // end while "1"
[03:52:04.227]    </control>
[03:52:04.227]    <control if="canReadPins" while="" timeout="0" info="">
[03:52:04.227]      // if-block "canReadPins"
[03:52:04.227]        // =>  TRUE
[03:52:04.227]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:52:04.227]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:52:04.227]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:52:04.227]        // while-condition  =>  FALSE
[03:52:04.227]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:52:04.227]      </control>
[03:52:04.227]      // end if-block "canReadPins"
[03:52:04.227]    </control>
[03:52:04.227]    <control if="!canReadPins" while="" timeout="0" info="">
[03:52:04.227]      // if-block "!canReadPins"
[03:52:04.227]        // =>  FALSE
[03:52:04.227]      // skip if-block "!canReadPins"
[03:52:04.227]    </control>
[03:52:04.227]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:52:04.227]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:52:04.227]        // =>  TRUE
[03:52:04.227]      <block atomic="false" info="">
[03:52:04.227]        WriteAP(0x00, 0x190008);
[03:52:04.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:52:04.227]        WriteAP(0xF0, 0x01);
[03:52:04.247]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:52:04.247]      </block>
[03:52:04.247]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:52:04.247]    </control>
[03:52:04.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:52:04.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:52:04.247]        // =>  FALSE
[03:52:04.247]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:52:04.247]    </control>
[03:52:04.247]    <block atomic="false" info="">
[03:52:04.247]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:52:04.247]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:52:04.247]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:52:04.257]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:52:04.257]      __ap = 0; //lets make sure we reset the access point selection
[03:52:04.257]        // -> [__ap <= 0x00000000]
[03:52:04.257]    </block>
[03:52:04.257]  </sequence>
[03:52:04.257]  
[03:52:04.297]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:52:04.297]  
[03:52:04.297]  <debugvars>
[03:52:04.297]    // Pre-defined
[03:52:04.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:52:04.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:52:04.297]    __dp=0x00000000
[03:52:04.297]    __ap=0x00000000
[03:52:04.297]    __traceout=0x00000000      (Trace Disabled)
[03:52:04.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:52:04.297]    __FlashAddr=0x00000000
[03:52:04.297]    __FlashLen=0x00000000
[03:52:04.297]    __FlashArg=0x00000000
[03:52:04.297]    __FlashOp=0x00000000
[03:52:04.297]    __Result=0x00000000
[03:52:04.297]  </debugvars>
[03:52:04.297]  
[03:52:04.297]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:52:04.297]    <block atomic="false" info="">
[03:52:04.297]      __var deviceID = 0;
[03:52:04.297]        // -> [deviceID <= 0x00000000]
[03:52:04.297]      __var version = 0;
[03:52:04.297]        // -> [version <= 0x00000000]
[03:52:04.297]      __var partNum = 0;
[03:52:04.297]        // -> [partNum <= 0x00000000]
[03:52:04.297]      __var manuf = 0;
[03:52:04.297]        // -> [manuf <= 0x00000000]
[03:52:04.297]      __var isMSPM0G1X0X_G3X0X = 0;
[03:52:04.297]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:52:04.297]      __var isProduction = 0;
[03:52:04.297]        // -> [isProduction <= 0x00000000]
[03:52:04.297]      __var continueId = 0;
[03:52:04.297]        // -> [continueId <= 0x00000000]
[03:52:04.297]      deviceID =   Read32(0x41C40004);
[03:52:04.307]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:52:04.307]        // -> [deviceID <= 0x2BB8802F]
[03:52:04.307]      version = deviceID >> 28;
[03:52:04.307]        // -> [version <= 0x00000002]
[03:52:04.307]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:52:04.307]        // -> [partNum <= 0x0000BB88]
[03:52:04.307]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:52:04.307]        // -> [manuf <= 0x00000017]
[03:52:04.307]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:52:04.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:52:04.307]      isProduction = (version > 0);
[03:52:04.307]        // -> [isProduction <= 0x00000001]
[03:52:04.307]    </block>
[03:52:04.307]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:52:04.307]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:52:04.307]        // =>  FALSE
[03:52:04.307]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:52:04.307]    </control>
[03:52:04.307]    <control if="continueId == 4" while="" timeout="0" info="">
[03:52:04.307]      // if-block "continueId == 4"
[03:52:04.307]        // =>  FALSE
[03:52:04.307]      // skip if-block "continueId == 4"
[03:52:04.307]    </control>
[03:52:04.307]    <control if="!isProduction" while="" timeout="0" info="">
[03:52:04.307]      // if-block "!isProduction"
[03:52:04.307]        // =>  FALSE
[03:52:04.307]      // skip if-block "!isProduction"
[03:52:04.307]    </control>
[03:52:04.307]  </sequence>
[03:52:04.307]  
[03:53:57.073]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:53:57.073]  
[03:53:57.081]  <debugvars>
[03:53:57.081]    // Pre-defined
[03:53:57.081]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:57.081]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:57.081]    __dp=0x00000000
[03:53:57.081]    __ap=0x00000000
[03:53:57.081]    __traceout=0x00000000      (Trace Disabled)
[03:53:57.081]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:57.081]    __FlashAddr=0x00000000
[03:53:57.081]    __FlashLen=0x00000000
[03:53:57.081]    __FlashArg=0x00000000
[03:53:57.081]    __FlashOp=0x00000000
[03:53:57.081]    __Result=0x00000000
[03:53:57.081]  </debugvars>
[03:53:57.081]  
[03:53:57.081]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:53:57.081]    <block atomic="false" info="">
[03:53:57.083]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:53:57.083]        // -> [isSWJ <= 0x00000001]
[03:53:57.083]      __var hasDormant = __protocol & 0x00020000;
[03:53:57.083]        // -> [hasDormant <= 0x00000000]
[03:53:57.083]      __var protType   = __protocol & 0x0000FFFF;
[03:53:57.083]        // -> [protType <= 0x00000002]
[03:53:57.083]    </block>
[03:53:57.083]    <control if="protType == 1" while="" timeout="0" info="">
[03:53:57.083]      // if-block "protType == 1"
[03:53:57.083]        // =>  FALSE
[03:53:57.083]      // skip if-block "protType == 1"
[03:53:57.083]    </control>
[03:53:57.083]    <control if="protType == 2" while="" timeout="0" info="">
[03:53:57.083]      // if-block "protType == 2"
[03:53:57.083]        // =>  TRUE
[03:53:57.083]      <control if="isSWJ" while="" timeout="0" info="">
[03:53:57.083]        // if-block "isSWJ"
[03:53:57.083]          // =>  TRUE
[03:53:57.083]        <control if="hasDormant" while="" timeout="0" info="">
[03:53:57.083]          // if-block "hasDormant"
[03:53:57.083]            // =>  FALSE
[03:53:57.083]          // skip if-block "hasDormant"
[03:53:57.083]        </control>
[03:53:57.083]        <control if="!hasDormant" while="" timeout="0" info="">
[03:53:57.083]          // if-block "!hasDormant"
[03:53:57.083]            // =>  TRUE
[03:53:57.083]          <block atomic="false" info="">
[03:53:57.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:53:57.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:57.083]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:53:57.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:53:57.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:53:57.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:57.093]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:53:57.096]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:53:57.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:53:57.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:53:57.103]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:53:57.113]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:53:57.113]          </block>
[03:53:57.113]          // end if-block "!hasDormant"
[03:53:57.113]        </control>
[03:53:57.113]        // end if-block "isSWJ"
[03:53:57.113]      </control>
[03:53:57.113]      <control if="!isSWJ" while="" timeout="0" info="">
[03:53:57.113]        // if-block "!isSWJ"
[03:53:57.113]          // =>  FALSE
[03:53:57.113]        // skip if-block "!isSWJ"
[03:53:57.113]      </control>
[03:53:57.113]      <block atomic="false" info="">
[03:53:57.113]        ReadDP(0x0);
[03:53:57.113]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:53:57.113]      </block>
[03:53:57.113]      // end if-block "protType == 2"
[03:53:57.113]    </control>
[03:53:57.113]  </sequence>
[03:53:57.113]  
[03:53:57.133]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:53:57.133]  
[03:53:57.133]  <debugvars>
[03:53:57.133]    // Pre-defined
[03:53:57.133]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:57.133]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:57.133]    __dp=0x00000000
[03:53:57.133]    __ap=0x00000000
[03:53:57.133]    __traceout=0x00000000      (Trace Disabled)
[03:53:57.133]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:57.133]    __FlashAddr=0x00000000
[03:53:57.133]    __FlashLen=0x00000000
[03:53:57.133]    __FlashArg=0x00000000
[03:53:57.133]    __FlashOp=0x00000000
[03:53:57.133]    __Result=0x00000000
[03:53:57.133]  </debugvars>
[03:53:57.133]  
[03:53:57.133]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:53:57.133]    <block atomic="false" info="">
[03:53:57.133]      __var SW_DP_ABORT       = 0x0;
[03:53:57.133]        // -> [SW_DP_ABORT <= 0x00000000]
[03:53:57.133]      __var DP_CTRL_STAT      = 0x4;
[03:53:57.133]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:53:57.133]      __var DP_SELECT         = 0x8;
[03:53:57.133]        // -> [DP_SELECT <= 0x00000008]
[03:53:57.133]      __var powered_down      = 0;
[03:53:57.133]        // -> [powered_down <= 0x00000000]
[03:53:57.133]      WriteDP(DP_SELECT, 0x00000000);
[03:53:57.143]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:53:57.143]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:53:57.143]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:53:57.143]        // -> [powered_down <= 0x00000001]
[03:53:57.143]    </block>
[03:53:57.143]    <control if="powered_down" while="" timeout="0" info="">
[03:53:57.143]      // if-block "powered_down"
[03:53:57.143]        // =>  TRUE
[03:53:57.143]      <block atomic="false" info="">
[03:53:57.143]        Message(0, "Debug/System power-up request sent");
[03:53:57.143]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:53:57.151]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:53:57.151]      </block>
[03:53:57.151]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:53:57.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:53:57.153]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:53:57.153]        // while-condition  =>  FALSE
[03:53:57.153]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:53:57.153]      </control>
[03:53:57.153]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:53:57.153]        // if-block "(__protocol & 0xFFFF) == 1"
[03:53:57.153]          // =>  FALSE
[03:53:57.153]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:53:57.153]      </control>
[03:53:57.153]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:53:57.153]        // if-block "(__protocol & 0xFFFF) == 2"
[03:53:57.153]          // =>  TRUE
[03:53:57.153]        <block atomic="false" info="">
[03:53:57.153]          Message(0, "executing SWD power up");
[03:53:57.153]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:53:57.153]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:53:57.153]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:53:57.166]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:53:57.166]        </block>
[03:53:57.166]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:53:57.166]      </control>
[03:53:57.166]      // end if-block "powered_down"
[03:53:57.166]    </control>
[03:53:57.166]    <block atomic="false" info="">
[03:53:57.166]      __var DEBUG_PORT_VAL    = 0;
[03:53:57.166]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:53:57.166]      __var ACCESS_POINT_VAL  = 0;
[03:53:57.166]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:53:57.166]      __ap = 1; 
[03:53:57.166]        // -> [__ap <= 0x00000001]
[03:53:57.166]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:53:57.174]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:53:57.174]      __ap = 4;
[03:53:57.174]        // -> [__ap <= 0x00000004]
[03:53:57.174]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:53:57.184]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:53:57.184]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:53:57.184]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:53:57.184]    </block>
[03:53:57.184]    <block atomic="false" info="">
[03:53:57.184]      __var nReset = 0x80;
[03:53:57.184]        // -> [nReset <= 0x00000080]
[03:53:57.184]      __var canReadPins = 0;
[03:53:57.184]        // -> [canReadPins <= 0x00000000]
[03:53:57.184]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:53:57.194]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:53:57.194]        // -> [canReadPins <= 0x00000001]
[03:53:57.194]    </block>
[03:53:57.194]    <control if="" while="1" timeout="200" info="">
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.194]      // while "1"  (timeout="200")
[03:53:57.194]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.204]      // while "1"  (timeout="200")
[03:53:57.204]      // while-condition  =>  TRUE
[03:53:57.214]      // while "1"  (timeout="200")
[03:53:57.214]      // while  =>  TIMEOUT
[03:53:57.214]      // end while "1"
[03:53:57.214]    </control>
[03:53:57.214]    <control if="canReadPins" while="" timeout="0" info="">
[03:53:57.214]      // if-block "canReadPins"
[03:53:57.214]        // =>  TRUE
[03:53:57.214]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:53:57.214]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:53:57.214]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:53:57.214]        // while-condition  =>  FALSE
[03:53:57.214]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:53:57.214]      </control>
[03:53:57.214]      // end if-block "canReadPins"
[03:53:57.214]    </control>
[03:53:57.214]    <control if="!canReadPins" while="" timeout="0" info="">
[03:53:57.214]      // if-block "!canReadPins"
[03:53:57.214]        // =>  FALSE
[03:53:57.214]      // skip if-block "!canReadPins"
[03:53:57.214]    </control>
[03:53:57.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:53:57.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:53:57.214]        // =>  TRUE
[03:53:57.214]      <block atomic="false" info="">
[03:53:57.214]        WriteAP(0x00, 0x190008);
[03:53:57.214]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:53:57.214]        WriteAP(0xF0, 0x01);
[03:53:57.224]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:53:57.224]      </block>
[03:53:57.224]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:53:57.224]    </control>
[03:53:57.224]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:53:57.224]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:53:57.224]        // =>  FALSE
[03:53:57.224]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:53:57.224]    </control>
[03:53:57.224]    <block atomic="false" info="">
[03:53:57.224]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:53:57.241]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:53:57.241]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:53:57.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:53:57.241]      __ap = 0; //lets make sure we reset the access point selection
[03:53:57.241]        // -> [__ap <= 0x00000000]
[03:53:57.241]    </block>
[03:53:57.241]  </sequence>
[03:53:57.241]  
[03:53:57.284]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:53:57.284]  
[03:53:57.284]  <debugvars>
[03:53:57.284]    // Pre-defined
[03:53:57.284]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:53:57.284]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:53:57.284]    __dp=0x00000000
[03:53:57.284]    __ap=0x00000000
[03:53:57.284]    __traceout=0x00000000      (Trace Disabled)
[03:53:57.284]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:53:57.284]    __FlashAddr=0x00000000
[03:53:57.284]    __FlashLen=0x00000000
[03:53:57.284]    __FlashArg=0x00000000
[03:53:57.284]    __FlashOp=0x00000000
[03:53:57.284]    __Result=0x00000000
[03:53:57.284]  </debugvars>
[03:53:57.284]  
[03:53:57.284]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:53:57.284]    <block atomic="false" info="">
[03:53:57.284]      __var deviceID = 0;
[03:53:57.284]        // -> [deviceID <= 0x00000000]
[03:53:57.284]      __var version = 0;
[03:53:57.284]        // -> [version <= 0x00000000]
[03:53:57.284]      __var partNum = 0;
[03:53:57.284]        // -> [partNum <= 0x00000000]
[03:53:57.284]      __var manuf = 0;
[03:53:57.284]        // -> [manuf <= 0x00000000]
[03:53:57.284]      __var isMSPM0G1X0X_G3X0X = 0;
[03:53:57.284]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:53:57.284]      __var isProduction = 0;
[03:53:57.284]        // -> [isProduction <= 0x00000000]
[03:53:57.284]      __var continueId = 0;
[03:53:57.294]        // -> [continueId <= 0x00000000]
[03:53:57.294]      deviceID =   Read32(0x41C40004);
[03:53:57.304]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:53:57.304]        // -> [deviceID <= 0x2BB8802F]
[03:53:57.304]      version = deviceID >> 28;
[03:53:57.304]        // -> [version <= 0x00000002]
[03:53:57.304]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:53:57.304]        // -> [partNum <= 0x0000BB88]
[03:53:57.304]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:53:57.304]        // -> [manuf <= 0x00000017]
[03:53:57.304]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:53:57.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:53:57.304]      isProduction = (version > 0);
[03:53:57.304]        // -> [isProduction <= 0x00000001]
[03:53:57.304]    </block>
[03:53:57.304]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:53:57.304]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:53:57.304]        // =>  FALSE
[03:53:57.304]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:53:57.304]    </control>
[03:53:57.304]    <control if="continueId == 4" while="" timeout="0" info="">
[03:53:57.304]      // if-block "continueId == 4"
[03:53:57.304]        // =>  FALSE
[03:53:57.304]      // skip if-block "continueId == 4"
[03:53:57.304]    </control>
[03:53:57.304]    <control if="!isProduction" while="" timeout="0" info="">
[03:53:57.304]      // if-block "!isProduction"
[03:53:57.304]        // =>  FALSE
[03:53:57.304]      // skip if-block "!isProduction"
[03:53:57.304]    </control>
[03:53:57.304]  </sequence>
[03:53:57.304]  
[03:54:34.242]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[03:54:34.242]  
[03:54:34.251]  <debugvars>
[03:54:34.251]    // Pre-defined
[03:54:34.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:34.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:34.251]    __dp=0x00000000
[03:54:34.251]    __ap=0x00000000
[03:54:34.251]    __traceout=0x00000000      (Trace Disabled)
[03:54:34.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:34.251]    __FlashAddr=0x00000000
[03:54:34.253]    __FlashLen=0x00000000
[03:54:34.253]    __FlashArg=0x00000000
[03:54:34.253]    __FlashOp=0x00000000
[03:54:34.253]    __Result=0x00000000
[03:54:34.253]  </debugvars>
[03:54:34.253]  
[03:54:34.253]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[03:54:34.253]    <block atomic="false" info="">
[03:54:34.253]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[03:54:34.253]        // -> [isSWJ <= 0x00000001]
[03:54:34.253]      __var hasDormant = __protocol & 0x00020000;
[03:54:34.253]        // -> [hasDormant <= 0x00000000]
[03:54:34.253]      __var protType   = __protocol & 0x0000FFFF;
[03:54:34.253]        // -> [protType <= 0x00000002]
[03:54:34.253]    </block>
[03:54:34.253]    <control if="protType == 1" while="" timeout="0" info="">
[03:54:34.253]      // if-block "protType == 1"
[03:54:34.253]        // =>  FALSE
[03:54:34.253]      // skip if-block "protType == 1"
[03:54:34.253]    </control>
[03:54:34.253]    <control if="protType == 2" while="" timeout="0" info="">
[03:54:34.253]      // if-block "protType == 2"
[03:54:34.253]        // =>  TRUE
[03:54:34.253]      <control if="isSWJ" while="" timeout="0" info="">
[03:54:34.253]        // if-block "isSWJ"
[03:54:34.253]          // =>  TRUE
[03:54:34.253]        <control if="hasDormant" while="" timeout="0" info="">
[03:54:34.253]          // if-block "hasDormant"
[03:54:34.253]            // =>  FALSE
[03:54:34.253]          // skip if-block "hasDormant"
[03:54:34.253]        </control>
[03:54:34.253]        <control if="!hasDormant" while="" timeout="0" info="">
[03:54:34.253]          // if-block "!hasDormant"
[03:54:34.253]            // =>  TRUE
[03:54:34.253]          <block atomic="false" info="">
[03:54:34.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[03:54:34.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:34.253]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[03:54:34.262]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[03:54:34.262]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[03:54:34.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:34.271]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[03:54:34.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[03:54:34.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[03:54:34.272]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[03:54:34.272]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[03:54:34.272]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[03:54:34.272]          </block>
[03:54:34.272]          // end if-block "!hasDormant"
[03:54:34.272]        </control>
[03:54:34.272]        // end if-block "isSWJ"
[03:54:34.272]      </control>
[03:54:34.272]      <control if="!isSWJ" while="" timeout="0" info="">
[03:54:34.272]        // if-block "!isSWJ"
[03:54:34.272]          // =>  FALSE
[03:54:34.272]        // skip if-block "!isSWJ"
[03:54:34.272]      </control>
[03:54:34.283]      <block atomic="false" info="">
[03:54:34.283]        ReadDP(0x0);
[03:54:34.283]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[03:54:34.283]      </block>
[03:54:34.283]      // end if-block "protType == 2"
[03:54:34.283]    </control>
[03:54:34.283]  </sequence>
[03:54:34.283]  
[03:54:34.294]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[03:54:34.294]  
[03:54:34.294]  <debugvars>
[03:54:34.294]    // Pre-defined
[03:54:34.294]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:34.294]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:34.294]    __dp=0x00000000
[03:54:34.294]    __ap=0x00000000
[03:54:34.294]    __traceout=0x00000000      (Trace Disabled)
[03:54:34.294]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:34.294]    __FlashAddr=0x00000000
[03:54:34.294]    __FlashLen=0x00000000
[03:54:34.294]    __FlashArg=0x00000000
[03:54:34.294]    __FlashOp=0x00000000
[03:54:34.294]    __Result=0x00000000
[03:54:34.294]  </debugvars>
[03:54:34.294]  
[03:54:34.294]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[03:54:34.294]    <block atomic="false" info="">
[03:54:34.294]      __var SW_DP_ABORT       = 0x0;
[03:54:34.294]        // -> [SW_DP_ABORT <= 0x00000000]
[03:54:34.294]      __var DP_CTRL_STAT      = 0x4;
[03:54:34.294]        // -> [DP_CTRL_STAT <= 0x00000004]
[03:54:34.294]      __var DP_SELECT         = 0x8;
[03:54:34.294]        // -> [DP_SELECT <= 0x00000008]
[03:54:34.294]      __var powered_down      = 0;
[03:54:34.294]        // -> [powered_down <= 0x00000000]
[03:54:34.294]      WriteDP(DP_SELECT, 0x00000000);
[03:54:34.302]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[03:54:34.302]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[03:54:34.302]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[03:54:34.302]        // -> [powered_down <= 0x00000001]
[03:54:34.302]    </block>
[03:54:34.302]    <control if="powered_down" while="" timeout="0" info="">
[03:54:34.302]      // if-block "powered_down"
[03:54:34.302]        // =>  TRUE
[03:54:34.302]      <block atomic="false" info="">
[03:54:34.302]        Message(0, "Debug/System power-up request sent");
[03:54:34.312]        WriteDP(DP_CTRL_STAT, 0x50000000);
[03:54:34.312]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[03:54:34.312]      </block>
[03:54:34.312]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[03:54:34.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[03:54:34.312]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[03:54:34.312]        // while-condition  =>  FALSE
[03:54:34.312]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[03:54:34.312]      </control>
[03:54:34.312]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[03:54:34.312]        // if-block "(__protocol & 0xFFFF) == 1"
[03:54:34.312]          // =>  FALSE
[03:54:34.312]        // skip if-block "(__protocol & 0xFFFF) == 1"
[03:54:34.312]      </control>
[03:54:34.312]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[03:54:34.312]        // if-block "(__protocol & 0xFFFF) == 2"
[03:54:34.312]          // =>  TRUE
[03:54:34.312]        <block atomic="false" info="">
[03:54:34.312]          Message(0, "executing SWD power up");
[03:54:34.312]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[03:54:34.323]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[03:54:34.323]          WriteDP(SW_DP_ABORT, 0x0000001E);
[03:54:34.323]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[03:54:34.323]        </block>
[03:54:34.323]        // end if-block "(__protocol & 0xFFFF) == 2"
[03:54:34.323]      </control>
[03:54:34.323]      // end if-block "powered_down"
[03:54:34.323]    </control>
[03:54:34.323]    <block atomic="false" info="">
[03:54:34.323]      __var DEBUG_PORT_VAL    = 0;
[03:54:34.323]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[03:54:34.323]      __var ACCESS_POINT_VAL  = 0;
[03:54:34.323]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[03:54:34.323]      __ap = 1; 
[03:54:34.323]        // -> [__ap <= 0x00000001]
[03:54:34.323]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[03:54:34.332]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[03:54:34.332]      __ap = 4;
[03:54:34.332]        // -> [__ap <= 0x00000004]
[03:54:34.332]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:54:34.344]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[03:54:34.344]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[03:54:34.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:54:34.344]    </block>
[03:54:34.344]    <block atomic="false" info="">
[03:54:34.344]      __var nReset = 0x80;
[03:54:34.344]        // -> [nReset <= 0x00000080]
[03:54:34.344]      __var canReadPins = 0;
[03:54:34.344]        // -> [canReadPins <= 0x00000000]
[03:54:34.344]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[03:54:34.353]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[03:54:34.353]        // -> [canReadPins <= 0x00000001]
[03:54:34.353]    </block>
[03:54:34.353]    <control if="" while="1" timeout="200" info="">
[03:54:34.353]      // while "1"  (timeout="200")
[03:54:34.353]      // while-condition  =>  TRUE
[03:54:34.353]      // while "1"  (timeout="200")
[03:54:34.353]      // while-condition  =>  TRUE
[03:54:34.353]      // while "1"  (timeout="200")
[03:54:34.353]      // while-condition  =>  TRUE
[03:54:34.353]      // while "1"  (timeout="200")
[03:54:34.353]      // while-condition  =>  TRUE
[03:54:34.353]      // while "1"  (timeout="200")
[03:54:34.353]      // while-condition  =>  TRUE
[03:54:34.353]      // while "1"  (timeout="200")
[03:54:34.353]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.355]      // while "1"  (timeout="200")
[03:54:34.355]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.363]      // while-condition  =>  TRUE
[03:54:34.363]      // while "1"  (timeout="200")
[03:54:34.371]      // while-condition  =>  TRUE
[03:54:34.371]      // while "1"  (timeout="200")
[03:54:34.371]      // while  =>  TIMEOUT
[03:54:34.371]      // end while "1"
[03:54:34.371]    </control>
[03:54:34.371]    <control if="canReadPins" while="" timeout="0" info="">
[03:54:34.371]      // if-block "canReadPins"
[03:54:34.371]        // =>  TRUE
[03:54:34.371]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[03:54:34.371]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[03:54:34.373]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[03:54:34.373]        // while-condition  =>  FALSE
[03:54:34.373]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[03:54:34.373]      </control>
[03:54:34.373]      // end if-block "canReadPins"
[03:54:34.373]    </control>
[03:54:34.373]    <control if="!canReadPins" while="" timeout="0" info="">
[03:54:34.373]      // if-block "!canReadPins"
[03:54:34.373]        // =>  FALSE
[03:54:34.373]      // skip if-block "!canReadPins"
[03:54:34.373]    </control>
[03:54:34.373]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[03:54:34.373]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:54:34.373]        // =>  TRUE
[03:54:34.373]      <block atomic="false" info="">
[03:54:34.373]        WriteAP(0x00, 0x190008);
[03:54:34.373]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[03:54:34.373]        WriteAP(0xF0, 0x01);
[03:54:34.382]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[03:54:34.382]      </block>
[03:54:34.382]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[03:54:34.382]    </control>
[03:54:34.382]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[03:54:34.382]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:54:34.382]        // =>  FALSE
[03:54:34.382]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[03:54:34.382]    </control>
[03:54:34.382]    <block atomic="false" info="">
[03:54:34.382]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[03:54:34.392]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[03:54:34.392]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[03:54:34.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[03:54:34.392]      __ap = 0; //lets make sure we reset the access point selection
[03:54:34.392]        // -> [__ap <= 0x00000000]
[03:54:34.392]    </block>
[03:54:34.392]  </sequence>
[03:54:34.392]  
[03:54:34.442]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[03:54:34.442]  
[03:54:34.442]  <debugvars>
[03:54:34.442]    // Pre-defined
[03:54:34.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[03:54:34.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[03:54:34.442]    __dp=0x00000000
[03:54:34.442]    __ap=0x00000000
[03:54:34.442]    __traceout=0x00000000      (Trace Disabled)
[03:54:34.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[03:54:34.442]    __FlashAddr=0x00000000
[03:54:34.442]    __FlashLen=0x00000000
[03:54:34.442]    __FlashArg=0x00000000
[03:54:34.442]    __FlashOp=0x00000000
[03:54:34.442]    __Result=0x00000000
[03:54:34.442]  </debugvars>
[03:54:34.442]  
[03:54:34.442]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[03:54:34.442]    <block atomic="false" info="">
[03:54:34.442]      __var deviceID = 0;
[03:54:34.442]        // -> [deviceID <= 0x00000000]
[03:54:34.442]      __var version = 0;
[03:54:34.442]        // -> [version <= 0x00000000]
[03:54:34.442]      __var partNum = 0;
[03:54:34.442]        // -> [partNum <= 0x00000000]
[03:54:34.442]      __var manuf = 0;
[03:54:34.442]        // -> [manuf <= 0x00000000]
[03:54:34.442]      __var isMSPM0G1X0X_G3X0X = 0;
[03:54:34.442]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[03:54:34.442]      __var isProduction = 0;
[03:54:34.442]        // -> [isProduction <= 0x00000000]
[03:54:34.442]      __var continueId = 0;
[03:54:34.442]        // -> [continueId <= 0x00000000]
[03:54:34.442]      deviceID =   Read32(0x41C40004);
[03:54:34.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[03:54:34.463]        // -> [deviceID <= 0x2BB8802F]
[03:54:34.464]      version = deviceID >> 28;
[03:54:34.464]        // -> [version <= 0x00000002]
[03:54:34.464]      partNum = (deviceID & 0x0FFFF000) >> 12;
[03:54:34.464]        // -> [partNum <= 0x0000BB88]
[03:54:34.464]      manuf = (deviceID & 0x00000FFE) >> 1;
[03:54:34.464]        // -> [manuf <= 0x00000017]
[03:54:34.464]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[03:54:34.464]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[03:54:34.464]      isProduction = (version > 0);
[03:54:34.464]        // -> [isProduction <= 0x00000001]
[03:54:34.464]    </block>
[03:54:34.464]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[03:54:34.464]      // if-block "!isMSPM0G1X0X_G3X0X"
[03:54:34.464]        // =>  FALSE
[03:54:34.464]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[03:54:34.464]    </control>
[03:54:34.464]    <control if="continueId == 4" while="" timeout="0" info="">
[03:54:34.464]      // if-block "continueId == 4"
[03:54:34.464]        // =>  FALSE
[03:54:34.464]      // skip if-block "continueId == 4"
[03:54:34.464]    </control>
[03:54:34.464]    <control if="!isProduction" while="" timeout="0" info="">
[03:54:34.464]      // if-block "!isProduction"
[03:54:34.464]        // =>  FALSE
[03:54:34.464]      // skip if-block "!isProduction"
[03:54:34.464]    </control>
[03:54:34.464]  </sequence>
[03:54:34.464]  
[04:02:39.393]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:02:39.393]  
[04:02:39.393]  <debugvars>
[04:02:39.393]    // Pre-defined
[04:02:39.393]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:02:39.393]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:02:39.393]    __dp=0x00000000
[04:02:39.393]    __ap=0x00000000
[04:02:39.395]    __traceout=0x00000000      (Trace Disabled)
[04:02:39.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:02:39.395]    __FlashAddr=0x00000000
[04:02:39.395]    __FlashLen=0x00000000
[04:02:39.395]    __FlashArg=0x00000000
[04:02:39.395]    __FlashOp=0x00000000
[04:02:39.395]    __Result=0x00000000
[04:02:39.395]  </debugvars>
[04:02:39.395]  
[04:02:39.395]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:02:39.395]    <block atomic="false" info="">
[04:02:39.395]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:02:39.395]        // -> [isSWJ <= 0x00000001]
[04:02:39.395]      __var hasDormant = __protocol & 0x00020000;
[04:02:39.395]        // -> [hasDormant <= 0x00000000]
[04:02:39.395]      __var protType   = __protocol & 0x0000FFFF;
[04:02:39.395]        // -> [protType <= 0x00000002]
[04:02:39.395]    </block>
[04:02:39.395]    <control if="protType == 1" while="" timeout="0" info="">
[04:02:39.395]      // if-block "protType == 1"
[04:02:39.395]        // =>  FALSE
[04:02:39.395]      // skip if-block "protType == 1"
[04:02:39.395]    </control>
[04:02:39.395]    <control if="protType == 2" while="" timeout="0" info="">
[04:02:39.395]      // if-block "protType == 2"
[04:02:39.395]        // =>  TRUE
[04:02:39.395]      <control if="isSWJ" while="" timeout="0" info="">
[04:02:39.395]        // if-block "isSWJ"
[04:02:39.395]          // =>  TRUE
[04:02:39.395]        <control if="hasDormant" while="" timeout="0" info="">
[04:02:39.395]          // if-block "hasDormant"
[04:02:39.395]            // =>  FALSE
[04:02:39.395]          // skip if-block "hasDormant"
[04:02:39.395]        </control>
[04:02:39.395]        <control if="!hasDormant" while="" timeout="0" info="">
[04:02:39.395]          // if-block "!hasDormant"
[04:02:39.395]            // =>  TRUE
[04:02:39.395]          <block atomic="false" info="">
[04:02:39.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:02:39.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:02:39.401]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:02:39.408]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:02:39.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:02:39.409]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:02:39.409]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:02:39.414]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:02:39.414]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:02:39.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:02:39.415]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:02:39.418]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:02:39.418]          </block>
[04:02:39.418]          // end if-block "!hasDormant"
[04:02:39.418]        </control>
[04:02:39.418]        // end if-block "isSWJ"
[04:02:39.418]      </control>
[04:02:39.418]      <control if="!isSWJ" while="" timeout="0" info="">
[04:02:39.422]        // if-block "!isSWJ"
[04:02:39.422]          // =>  FALSE
[04:02:39.422]        // skip if-block "!isSWJ"
[04:02:39.422]      </control>
[04:02:39.422]      <block atomic="false" info="">
[04:02:39.422]        ReadDP(0x0);
[04:02:39.426]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:02:39.426]      </block>
[04:02:39.426]      // end if-block "protType == 2"
[04:02:39.426]    </control>
[04:02:39.426]  </sequence>
[04:02:39.426]  
[04:02:39.430]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:02:39.430]  
[04:02:39.430]  <debugvars>
[04:02:39.430]    // Pre-defined
[04:02:39.430]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:02:39.430]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:02:39.430]    __dp=0x00000000
[04:02:39.430]    __ap=0x00000000
[04:02:39.430]    __traceout=0x00000000      (Trace Disabled)
[04:02:39.430]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:02:39.430]    __FlashAddr=0x00000000
[04:02:39.430]    __FlashLen=0x00000000
[04:02:39.430]    __FlashArg=0x00000000
[04:02:39.430]    __FlashOp=0x00000000
[04:02:39.430]    __Result=0x00000000
[04:02:39.430]  </debugvars>
[04:02:39.430]  
[04:02:39.430]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:02:39.430]    <block atomic="false" info="">
[04:02:39.430]      __var SW_DP_ABORT       = 0x0;
[04:02:39.430]        // -> [SW_DP_ABORT <= 0x00000000]
[04:02:39.430]      __var DP_CTRL_STAT      = 0x4;
[04:02:39.430]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:02:39.430]      __var DP_SELECT         = 0x8;
[04:02:39.430]        // -> [DP_SELECT <= 0x00000008]
[04:02:39.430]      __var powered_down      = 0;
[04:02:39.430]        // -> [powered_down <= 0x00000000]
[04:02:39.436]      WriteDP(DP_SELECT, 0x00000000);
[04:02:39.439]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:02:39.439]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:02:39.439]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:02:39.439]        // -> [powered_down <= 0x00000001]
[04:02:39.443]    </block>
[04:02:39.443]    <control if="powered_down" while="" timeout="0" info="">
[04:02:39.443]      // if-block "powered_down"
[04:02:39.443]        // =>  TRUE
[04:02:39.443]      <block atomic="false" info="">
[04:02:39.443]        Message(0, "Debug/System power-up request sent");
[04:02:39.443]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:02:39.446]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:02:39.446]      </block>
[04:02:39.446]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:02:39.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:02:39.448]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:02:39.448]        // while-condition  =>  FALSE
[04:02:39.448]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:02:39.448]      </control>
[04:02:39.448]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:02:39.448]        // if-block "(__protocol & 0xFFFF) == 1"
[04:02:39.448]          // =>  FALSE
[04:02:39.448]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:02:39.451]      </control>
[04:02:39.451]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:02:39.451]        // if-block "(__protocol & 0xFFFF) == 2"
[04:02:39.451]          // =>  TRUE
[04:02:39.451]        <block atomic="false" info="">
[04:02:39.451]          Message(0, "executing SWD power up");
[04:02:39.451]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:02:39.453]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:02:39.453]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:02:39.458]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:02:39.458]        </block>
[04:02:39.458]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:02:39.458]      </control>
[04:02:39.459]      // end if-block "powered_down"
[04:02:39.459]    </control>
[04:02:39.459]    <block atomic="false" info="">
[04:02:39.459]      __var DEBUG_PORT_VAL    = 0;
[04:02:39.459]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:02:39.459]      __var ACCESS_POINT_VAL  = 0;
[04:02:39.459]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:02:39.459]      __ap = 1; 
[04:02:39.459]        // -> [__ap <= 0x00000001]
[04:02:39.459]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:02:39.462]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:02:39.467]      __ap = 4;
[04:02:39.467]        // -> [__ap <= 0x00000004]
[04:02:39.467]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:02:39.472]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:02:39.472]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:02:39.472]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:02:39.472]    </block>
[04:02:39.472]    <block atomic="false" info="">
[04:02:39.472]      __var nReset = 0x80;
[04:02:39.472]        // -> [nReset <= 0x00000080]
[04:02:39.472]      __var canReadPins = 0;
[04:02:39.472]        // -> [canReadPins <= 0x00000000]
[04:02:39.472]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:02:39.478]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:02:39.478]        // -> [canReadPins <= 0x00000001]
[04:02:39.478]    </block>
[04:02:39.478]    <control if="" while="1" timeout="200" info="">
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.478]      // while "1"  (timeout="200")
[04:02:39.478]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.480]      // while-condition  =>  TRUE
[04:02:39.480]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.487]      // while-condition  =>  TRUE
[04:02:39.487]      // while "1"  (timeout="200")
[04:02:39.492]      // while-condition  =>  TRUE
[04:02:39.492]      // while "1"  (timeout="200")
[04:02:39.492]      // while  =>  TIMEOUT
[04:02:39.492]      // end while "1"
[04:02:39.492]    </control>
[04:02:39.492]    <control if="canReadPins" while="" timeout="0" info="">
[04:02:39.492]      // if-block "canReadPins"
[04:02:39.492]        // =>  TRUE
[04:02:39.492]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:02:39.492]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:02:39.495]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:02:39.495]        // while-condition  =>  FALSE
[04:02:39.495]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:02:39.495]      </control>
[04:02:39.495]      // end if-block "canReadPins"
[04:02:39.495]    </control>
[04:02:39.495]    <control if="!canReadPins" while="" timeout="0" info="">
[04:02:39.495]      // if-block "!canReadPins"
[04:02:39.495]        // =>  FALSE
[04:02:39.495]      // skip if-block "!canReadPins"
[04:02:39.495]    </control>
[04:02:39.498]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:02:39.498]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:02:39.498]        // =>  TRUE
[04:02:39.498]      <block atomic="false" info="">
[04:02:39.498]        WriteAP(0x00, 0x190008);
[04:02:39.501]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:02:39.501]        WriteAP(0xF0, 0x01);
[04:02:39.508]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:02:39.508]      </block>
[04:02:39.508]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:02:39.508]    </control>
[04:02:39.508]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:02:39.508]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:02:39.508]        // =>  FALSE
[04:02:39.513]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:02:39.513]    </control>
[04:02:39.513]    <block atomic="false" info="">
[04:02:39.513]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:02:39.522]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:02:39.522]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:02:39.522]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:02:39.522]      __ap = 0; //lets make sure we reset the access point selection
[04:02:39.522]        // -> [__ap <= 0x00000000]
[04:02:39.522]    </block>
[04:02:39.522]  </sequence>
[04:02:39.522]  
[04:02:39.571]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:02:39.571]  
[04:02:39.571]  <debugvars>
[04:02:39.571]    // Pre-defined
[04:02:39.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:02:39.571]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:02:39.571]    __dp=0x00000000
[04:02:39.571]    __ap=0x00000000
[04:02:39.571]    __traceout=0x00000000      (Trace Disabled)
[04:02:39.571]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:02:39.571]    __FlashAddr=0x00000000
[04:02:39.572]    __FlashLen=0x00000000
[04:02:39.573]    __FlashArg=0x00000000
[04:02:39.573]    __FlashOp=0x00000000
[04:02:39.573]    __Result=0x00000000
[04:02:39.573]  </debugvars>
[04:02:39.573]  
[04:02:39.573]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:02:39.573]    <block atomic="false" info="">
[04:02:39.573]      __var deviceID = 0;
[04:02:39.573]        // -> [deviceID <= 0x00000000]
[04:02:39.573]      __var version = 0;
[04:02:39.573]        // -> [version <= 0x00000000]
[04:02:39.573]      __var partNum = 0;
[04:02:39.573]        // -> [partNum <= 0x00000000]
[04:02:39.573]      __var manuf = 0;
[04:02:39.573]        // -> [manuf <= 0x00000000]
[04:02:39.573]      __var isMSPM0G1X0X_G3X0X = 0;
[04:02:39.573]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:02:39.573]      __var isProduction = 0;
[04:02:39.573]        // -> [isProduction <= 0x00000000]
[04:02:39.573]      __var continueId = 0;
[04:02:39.574]        // -> [continueId <= 0x00000000]
[04:02:39.574]      deviceID =   Read32(0x41C40004);
[04:02:39.585]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:02:39.585]        // -> [deviceID <= 0x2BB8802F]
[04:02:39.585]      version = deviceID >> 28;
[04:02:39.585]        // -> [version <= 0x00000002]
[04:02:39.585]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:02:39.585]        // -> [partNum <= 0x0000BB88]
[04:02:39.585]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:02:39.585]        // -> [manuf <= 0x00000017]
[04:02:39.585]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:02:39.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:02:39.585]      isProduction = (version > 0);
[04:02:39.585]        // -> [isProduction <= 0x00000001]
[04:02:39.585]    </block>
[04:02:39.585]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:02:39.585]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:02:39.585]        // =>  FALSE
[04:02:39.585]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:02:39.585]    </control>
[04:02:39.585]    <control if="continueId == 4" while="" timeout="0" info="">
[04:02:39.585]      // if-block "continueId == 4"
[04:02:39.585]        // =>  FALSE
[04:02:39.588]      // skip if-block "continueId == 4"
[04:02:39.588]    </control>
[04:02:39.588]    <control if="!isProduction" while="" timeout="0" info="">
[04:02:39.588]      // if-block "!isProduction"
[04:02:39.588]        // =>  FALSE
[04:02:39.588]      // skip if-block "!isProduction"
[04:02:39.588]    </control>
[04:02:39.588]  </sequence>
[04:02:39.588]  
[04:12:10.767]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:12:10.767]  
[04:12:10.775]  <debugvars>
[04:12:10.775]    // Pre-defined
[04:12:10.775]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:10.775]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:10.776]    __dp=0x00000000
[04:12:10.776]    __ap=0x00000000
[04:12:10.776]    __traceout=0x00000000      (Trace Disabled)
[04:12:10.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:10.776]    __FlashAddr=0x00000000
[04:12:10.776]    __FlashLen=0x00000000
[04:12:10.776]    __FlashArg=0x00000000
[04:12:10.776]    __FlashOp=0x00000000
[04:12:10.776]    __Result=0x00000000
[04:12:10.776]  </debugvars>
[04:12:10.777]  
[04:12:10.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:12:10.777]    <block atomic="false" info="">
[04:12:10.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:12:10.777]        // -> [isSWJ <= 0x00000001]
[04:12:10.777]      __var hasDormant = __protocol & 0x00020000;
[04:12:10.777]        // -> [hasDormant <= 0x00000000]
[04:12:10.777]      __var protType   = __protocol & 0x0000FFFF;
[04:12:10.777]        // -> [protType <= 0x00000002]
[04:12:10.777]    </block>
[04:12:10.778]    <control if="protType == 1" while="" timeout="0" info="">
[04:12:10.778]      // if-block "protType == 1"
[04:12:10.778]        // =>  FALSE
[04:12:10.778]      // skip if-block "protType == 1"
[04:12:10.778]    </control>
[04:12:10.778]    <control if="protType == 2" while="" timeout="0" info="">
[04:12:10.779]      // if-block "protType == 2"
[04:12:10.779]        // =>  TRUE
[04:12:10.779]      <control if="isSWJ" while="" timeout="0" info="">
[04:12:10.779]        // if-block "isSWJ"
[04:12:10.779]          // =>  TRUE
[04:12:10.779]        <control if="hasDormant" while="" timeout="0" info="">
[04:12:10.779]          // if-block "hasDormant"
[04:12:10.779]            // =>  FALSE
[04:12:10.779]          // skip if-block "hasDormant"
[04:12:10.779]        </control>
[04:12:10.779]        <control if="!hasDormant" while="" timeout="0" info="">
[04:12:10.780]          // if-block "!hasDormant"
[04:12:10.780]            // =>  TRUE
[04:12:10.780]          <block atomic="false" info="">
[04:12:10.780]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:12:10.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:10.783]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:12:10.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:12:10.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:12:10.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:10.789]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:12:10.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:12:10.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:12:10.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:12:10.791]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:12:10.800]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:12:10.800]          </block>
[04:12:10.800]          // end if-block "!hasDormant"
[04:12:10.800]        </control>
[04:12:10.800]        // end if-block "isSWJ"
[04:12:10.800]      </control>
[04:12:10.800]      <control if="!isSWJ" while="" timeout="0" info="">
[04:12:10.800]        // if-block "!isSWJ"
[04:12:10.800]          // =>  FALSE
[04:12:10.800]        // skip if-block "!isSWJ"
[04:12:10.800]      </control>
[04:12:10.800]      <block atomic="false" info="">
[04:12:10.800]        ReadDP(0x0);
[04:12:10.810]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:12:10.810]      </block>
[04:12:10.810]      // end if-block "protType == 2"
[04:12:10.810]    </control>
[04:12:10.810]  </sequence>
[04:12:10.810]  
[04:12:10.813]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:12:10.813]  
[04:12:10.813]  <debugvars>
[04:12:10.813]    // Pre-defined
[04:12:10.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:10.813]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:10.813]    __dp=0x00000000
[04:12:10.813]    __ap=0x00000000
[04:12:10.813]    __traceout=0x00000000      (Trace Disabled)
[04:12:10.820]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:10.820]    __FlashAddr=0x00000000
[04:12:10.820]    __FlashLen=0x00000000
[04:12:10.820]    __FlashArg=0x00000000
[04:12:10.820]    __FlashOp=0x00000000
[04:12:10.820]    __Result=0x00000000
[04:12:10.820]  </debugvars>
[04:12:10.820]  
[04:12:10.820]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:12:10.820]    <block atomic="false" info="">
[04:12:10.820]      __var SW_DP_ABORT       = 0x0;
[04:12:10.820]        // -> [SW_DP_ABORT <= 0x00000000]
[04:12:10.820]      __var DP_CTRL_STAT      = 0x4;
[04:12:10.820]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:12:10.820]      __var DP_SELECT         = 0x8;
[04:12:10.820]        // -> [DP_SELECT <= 0x00000008]
[04:12:10.820]      __var powered_down      = 0;
[04:12:10.820]        // -> [powered_down <= 0x00000000]
[04:12:10.820]      WriteDP(DP_SELECT, 0x00000000);
[04:12:10.820]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:12:10.820]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:12:10.820]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:12:10.820]        // -> [powered_down <= 0x00000001]
[04:12:10.820]    </block>
[04:12:10.820]    <control if="powered_down" while="" timeout="0" info="">
[04:12:10.820]      // if-block "powered_down"
[04:12:10.820]        // =>  TRUE
[04:12:10.820]      <block atomic="false" info="">
[04:12:10.820]        Message(0, "Debug/System power-up request sent");
[04:12:10.830]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:12:10.830]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:12:10.830]      </block>
[04:12:10.830]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:12:10.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:12:10.830]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:12:10.830]        // while-condition  =>  FALSE
[04:12:10.830]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:12:10.830]      </control>
[04:12:10.830]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:12:10.830]        // if-block "(__protocol & 0xFFFF) == 1"
[04:12:10.830]          // =>  FALSE
[04:12:10.830]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:12:10.830]      </control>
[04:12:10.830]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:12:10.830]        // if-block "(__protocol & 0xFFFF) == 2"
[04:12:10.840]          // =>  TRUE
[04:12:10.840]        <block atomic="false" info="">
[04:12:10.841]          Message(0, "executing SWD power up");
[04:12:10.841]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:12:10.841]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:12:10.841]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:12:10.851]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:12:10.851]        </block>
[04:12:10.851]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:12:10.851]      </control>
[04:12:10.851]      // end if-block "powered_down"
[04:12:10.851]    </control>
[04:12:10.851]    <block atomic="false" info="">
[04:12:10.851]      __var DEBUG_PORT_VAL    = 0;
[04:12:10.851]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:12:10.851]      __var ACCESS_POINT_VAL  = 0;
[04:12:10.851]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:12:10.851]      __ap = 1; 
[04:12:10.851]        // -> [__ap <= 0x00000001]
[04:12:10.851]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:12:10.861]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:12:10.861]      __ap = 4;
[04:12:10.861]        // -> [__ap <= 0x00000004]
[04:12:10.861]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:12:10.861]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:12:10.861]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:12:10.861]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:12:10.871]    </block>
[04:12:10.871]    <block atomic="false" info="">
[04:12:10.871]      __var nReset = 0x80;
[04:12:10.871]        // -> [nReset <= 0x00000080]
[04:12:10.871]      __var canReadPins = 0;
[04:12:10.871]        // -> [canReadPins <= 0x00000000]
[04:12:10.871]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:12:10.871]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:12:10.871]        // -> [canReadPins <= 0x00000001]
[04:12:10.871]    </block>
[04:12:10.871]    <control if="" while="1" timeout="200" info="">
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.871]      // while-condition  =>  TRUE
[04:12:10.871]      // while "1"  (timeout="200")
[04:12:10.881]      // while-condition  =>  TRUE
[04:12:10.881]      // while "1"  (timeout="200")
[04:12:10.881]      // while  =>  TIMEOUT
[04:12:10.881]      // end while "1"
[04:12:10.881]    </control>
[04:12:10.881]    <control if="canReadPins" while="" timeout="0" info="">
[04:12:10.881]      // if-block "canReadPins"
[04:12:10.881]        // =>  TRUE
[04:12:10.881]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:12:10.881]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:12:10.884]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:12:10.884]        // while-condition  =>  FALSE
[04:12:10.884]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:12:10.884]      </control>
[04:12:10.884]      // end if-block "canReadPins"
[04:12:10.884]    </control>
[04:12:10.884]    <control if="!canReadPins" while="" timeout="0" info="">
[04:12:10.884]      // if-block "!canReadPins"
[04:12:10.884]        // =>  FALSE
[04:12:10.884]      // skip if-block "!canReadPins"
[04:12:10.884]    </control>
[04:12:10.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:12:10.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:12:10.884]        // =>  TRUE
[04:12:10.884]      <block atomic="false" info="">
[04:12:10.884]        WriteAP(0x00, 0x190008);
[04:12:10.884]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:12:10.884]        WriteAP(0xF0, 0x01);
[04:12:10.891]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:12:10.891]      </block>
[04:12:10.891]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:12:10.891]    </control>
[04:12:10.891]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:12:10.891]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:12:10.891]        // =>  FALSE
[04:12:10.891]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:12:10.891]    </control>
[04:12:10.891]    <block atomic="false" info="">
[04:12:10.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:12:10.902]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:12:10.902]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:12:10.902]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:12:10.908]      __ap = 0; //lets make sure we reset the access point selection
[04:12:10.908]        // -> [__ap <= 0x00000000]
[04:12:10.908]    </block>
[04:12:10.908]  </sequence>
[04:12:10.908]  
[04:12:10.944]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:12:10.944]  
[04:12:10.944]  <debugvars>
[04:12:10.944]    // Pre-defined
[04:12:10.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:12:10.944]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:12:10.944]    __dp=0x00000000
[04:12:10.944]    __ap=0x00000000
[04:12:10.944]    __traceout=0x00000000      (Trace Disabled)
[04:12:10.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:12:10.944]    __FlashAddr=0x00000000
[04:12:10.944]    __FlashLen=0x00000000
[04:12:10.944]    __FlashArg=0x00000000
[04:12:10.944]    __FlashOp=0x00000000
[04:12:10.944]    __Result=0x00000000
[04:12:10.944]  </debugvars>
[04:12:10.944]  
[04:12:10.944]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:12:10.944]    <block atomic="false" info="">
[04:12:10.944]      __var deviceID = 0;
[04:12:10.944]        // -> [deviceID <= 0x00000000]
[04:12:10.944]      __var version = 0;
[04:12:10.944]        // -> [version <= 0x00000000]
[04:12:10.944]      __var partNum = 0;
[04:12:10.944]        // -> [partNum <= 0x00000000]
[04:12:10.944]      __var manuf = 0;
[04:12:10.944]        // -> [manuf <= 0x00000000]
[04:12:10.944]      __var isMSPM0G1X0X_G3X0X = 0;
[04:12:10.944]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:12:10.944]      __var isProduction = 0;
[04:12:10.952]        // -> [isProduction <= 0x00000000]
[04:12:10.952]      __var continueId = 0;
[04:12:10.952]        // -> [continueId <= 0x00000000]
[04:12:10.952]      deviceID =   Read32(0x41C40004);
[04:12:10.963]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:12:10.963]        // -> [deviceID <= 0x2BB8802F]
[04:12:10.963]      version = deviceID >> 28;
[04:12:10.963]        // -> [version <= 0x00000002]
[04:12:10.963]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:12:10.963]        // -> [partNum <= 0x0000BB88]
[04:12:10.963]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:12:10.963]        // -> [manuf <= 0x00000017]
[04:12:10.963]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:12:10.963]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:12:10.963]      isProduction = (version > 0);
[04:12:10.963]        // -> [isProduction <= 0x00000001]
[04:12:10.963]    </block>
[04:12:10.963]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:12:10.963]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:12:10.963]        // =>  FALSE
[04:12:10.972]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:12:10.972]    </control>
[04:12:10.973]    <control if="continueId == 4" while="" timeout="0" info="">
[04:12:10.973]      // if-block "continueId == 4"
[04:12:10.973]        // =>  FALSE
[04:12:10.973]      // skip if-block "continueId == 4"
[04:12:10.973]    </control>
[04:12:10.973]    <control if="!isProduction" while="" timeout="0" info="">
[04:12:10.973]      // if-block "!isProduction"
[04:12:10.973]        // =>  FALSE
[04:12:10.973]      // skip if-block "!isProduction"
[04:12:10.973]    </control>
[04:12:10.973]  </sequence>
[04:12:10.973]  
[04:18:04.100]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:18:04.100]  
[04:18:04.111]  <debugvars>
[04:18:04.111]    // Pre-defined
[04:18:04.111]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:18:04.111]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:18:04.111]    __dp=0x00000000
[04:18:04.111]    __ap=0x00000000
[04:18:04.111]    __traceout=0x00000000      (Trace Disabled)
[04:18:04.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:18:04.112]    __FlashAddr=0x00000000
[04:18:04.112]    __FlashLen=0x00000000
[04:18:04.112]    __FlashArg=0x00000000
[04:18:04.112]    __FlashOp=0x00000000
[04:18:04.112]    __Result=0x00000000
[04:18:04.112]  </debugvars>
[04:18:04.112]  
[04:18:04.112]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:18:04.112]    <block atomic="false" info="">
[04:18:04.112]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:18:04.112]        // -> [isSWJ <= 0x00000001]
[04:18:04.112]      __var hasDormant = __protocol & 0x00020000;
[04:18:04.113]        // -> [hasDormant <= 0x00000000]
[04:18:04.113]      __var protType   = __protocol & 0x0000FFFF;
[04:18:04.113]        // -> [protType <= 0x00000002]
[04:18:04.113]    </block>
[04:18:04.113]    <control if="protType == 1" while="" timeout="0" info="">
[04:18:04.113]      // if-block "protType == 1"
[04:18:04.113]        // =>  FALSE
[04:18:04.113]      // skip if-block "protType == 1"
[04:18:04.113]    </control>
[04:18:04.113]    <control if="protType == 2" while="" timeout="0" info="">
[04:18:04.113]      // if-block "protType == 2"
[04:18:04.113]        // =>  TRUE
[04:18:04.113]      <control if="isSWJ" while="" timeout="0" info="">
[04:18:04.113]        // if-block "isSWJ"
[04:18:04.113]          // =>  TRUE
[04:18:04.113]        <control if="hasDormant" while="" timeout="0" info="">
[04:18:04.115]          // if-block "hasDormant"
[04:18:04.115]            // =>  FALSE
[04:18:04.115]          // skip if-block "hasDormant"
[04:18:04.115]        </control>
[04:18:04.115]        <control if="!hasDormant" while="" timeout="0" info="">
[04:18:04.115]          // if-block "!hasDormant"
[04:18:04.115]            // =>  TRUE
[04:18:04.115]          <block atomic="false" info="">
[04:18:04.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:18:04.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:18:04.120]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:18:04.123]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:18:04.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:18:04.126]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:18:04.126]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:18:04.129]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:18:04.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:18:04.131]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:18:04.131]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:18:04.134]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:18:04.134]          </block>
[04:18:04.134]          // end if-block "!hasDormant"
[04:18:04.134]        </control>
[04:18:04.134]        // end if-block "isSWJ"
[04:18:04.134]      </control>
[04:18:04.134]      <control if="!isSWJ" while="" timeout="0" info="">
[04:18:04.134]        // if-block "!isSWJ"
[04:18:04.134]          // =>  FALSE
[04:18:04.134]        // skip if-block "!isSWJ"
[04:18:04.137]      </control>
[04:18:04.137]      <block atomic="false" info="">
[04:18:04.137]        ReadDP(0x0);
[04:18:04.138]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:18:04.138]      </block>
[04:18:04.138]      // end if-block "protType == 2"
[04:18:04.138]    </control>
[04:18:04.138]  </sequence>
[04:18:04.138]  
[04:18:04.147]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:18:04.147]  
[04:18:04.147]  <debugvars>
[04:18:04.147]    // Pre-defined
[04:18:04.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:18:04.147]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:18:04.147]    __dp=0x00000000
[04:18:04.147]    __ap=0x00000000
[04:18:04.147]    __traceout=0x00000000      (Trace Disabled)
[04:18:04.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:18:04.147]    __FlashAddr=0x00000000
[04:18:04.147]    __FlashLen=0x00000000
[04:18:04.147]    __FlashArg=0x00000000
[04:18:04.147]    __FlashOp=0x00000000
[04:18:04.147]    __Result=0x00000000
[04:18:04.147]  </debugvars>
[04:18:04.147]  
[04:18:04.147]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:18:04.147]    <block atomic="false" info="">
[04:18:04.147]      __var SW_DP_ABORT       = 0x0;
[04:18:04.147]        // -> [SW_DP_ABORT <= 0x00000000]
[04:18:04.147]      __var DP_CTRL_STAT      = 0x4;
[04:18:04.147]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:18:04.147]      __var DP_SELECT         = 0x8;
[04:18:04.147]        // -> [DP_SELECT <= 0x00000008]
[04:18:04.147]      __var powered_down      = 0;
[04:18:04.151]        // -> [powered_down <= 0x00000000]
[04:18:04.151]      WriteDP(DP_SELECT, 0x00000000);
[04:18:04.154]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:18:04.154]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:18:04.156]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:18:04.156]        // -> [powered_down <= 0x00000001]
[04:18:04.158]    </block>
[04:18:04.158]    <control if="powered_down" while="" timeout="0" info="">
[04:18:04.158]      // if-block "powered_down"
[04:18:04.158]        // =>  TRUE
[04:18:04.158]      <block atomic="false" info="">
[04:18:04.158]        Message(0, "Debug/System power-up request sent");
[04:18:04.160]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:18:04.169]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:18:04.169]      </block>
[04:18:04.169]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:18:04.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:18:04.177]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:18:04.177]        // while-condition  =>  FALSE
[04:18:04.177]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:18:04.177]      </control>
[04:18:04.177]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:18:04.177]        // if-block "(__protocol & 0xFFFF) == 1"
[04:18:04.177]          // =>  FALSE
[04:18:04.177]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:18:04.177]      </control>
[04:18:04.177]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:18:04.177]        // if-block "(__protocol & 0xFFFF) == 2"
[04:18:04.177]          // =>  TRUE
[04:18:04.177]        <block atomic="false" info="">
[04:18:04.177]          Message(0, "executing SWD power up");
[04:18:04.180]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:18:04.187]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:18:04.187]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:18:04.190]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:18:04.190]        </block>
[04:18:04.190]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:18:04.190]      </control>
[04:18:04.190]      // end if-block "powered_down"
[04:18:04.191]    </control>
[04:18:04.191]    <block atomic="false" info="">
[04:18:04.191]      __var DEBUG_PORT_VAL    = 0;
[04:18:04.191]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:18:04.191]      __var ACCESS_POINT_VAL  = 0;
[04:18:04.191]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:18:04.191]      __ap = 1; 
[04:18:04.191]        // -> [__ap <= 0x00000001]
[04:18:04.191]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:18:04.203]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:18:04.203]      __ap = 4;
[04:18:04.203]        // -> [__ap <= 0x00000004]
[04:18:04.205]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:18:04.210]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:18:04.210]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:18:04.210]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:18:04.213]    </block>
[04:18:04.213]    <block atomic="false" info="">
[04:18:04.213]      __var nReset = 0x80;
[04:18:04.213]        // -> [nReset <= 0x00000080]
[04:18:04.213]      __var canReadPins = 0;
[04:18:04.213]        // -> [canReadPins <= 0x00000000]
[04:18:04.213]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:18:04.217]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:18:04.217]        // -> [canReadPins <= 0x00000001]
[04:18:04.217]    </block>
[04:18:04.217]    <control if="" while="1" timeout="200" info="">
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.217]      // while "1"  (timeout="200")
[04:18:04.217]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.221]      // while "1"  (timeout="200")
[04:18:04.221]      // while-condition  =>  TRUE
[04:18:04.225]      // while "1"  (timeout="200")
[04:18:04.225]      // while  =>  TIMEOUT
[04:18:04.225]      // end while "1"
[04:18:04.225]    </control>
[04:18:04.225]    <control if="canReadPins" while="" timeout="0" info="">
[04:18:04.225]      // if-block "canReadPins"
[04:18:04.225]        // =>  TRUE
[04:18:04.225]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:18:04.225]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:18:04.227]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:18:04.227]        // while-condition  =>  FALSE
[04:18:04.227]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:18:04.227]      </control>
[04:18:04.229]      // end if-block "canReadPins"
[04:18:04.229]    </control>
[04:18:04.229]    <control if="!canReadPins" while="" timeout="0" info="">
[04:18:04.229]      // if-block "!canReadPins"
[04:18:04.229]        // =>  FALSE
[04:18:04.229]      // skip if-block "!canReadPins"
[04:18:04.229]    </control>
[04:18:04.229]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:18:04.229]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:18:04.229]        // =>  TRUE
[04:18:04.229]      <block atomic="false" info="">
[04:18:04.229]        WriteAP(0x00, 0x190008);
[04:18:04.233]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:18:04.233]        WriteAP(0xF0, 0x01);
[04:18:04.239]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:18:04.239]      </block>
[04:18:04.239]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:18:04.239]    </control>
[04:18:04.239]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:18:04.239]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:18:04.239]        // =>  FALSE
[04:18:04.239]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:18:04.239]    </control>
[04:18:04.239]    <block atomic="false" info="">
[04:18:04.239]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:18:04.247]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:18:04.247]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:18:04.247]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:18:04.250]      __ap = 0; //lets make sure we reset the access point selection
[04:18:04.250]        // -> [__ap <= 0x00000000]
[04:18:04.250]    </block>
[04:18:04.250]  </sequence>
[04:18:04.250]  
[04:18:04.291]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:18:04.291]  
[04:18:04.291]  <debugvars>
[04:18:04.291]    // Pre-defined
[04:18:04.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:18:04.295]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:18:04.295]    __dp=0x00000000
[04:18:04.295]    __ap=0x00000000
[04:18:04.295]    __traceout=0x00000000      (Trace Disabled)
[04:18:04.295]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:18:04.295]    __FlashAddr=0x00000000
[04:18:04.295]    __FlashLen=0x00000000
[04:18:04.295]    __FlashArg=0x00000000
[04:18:04.295]    __FlashOp=0x00000000
[04:18:04.295]    __Result=0x00000000
[04:18:04.295]  </debugvars>
[04:18:04.295]  
[04:18:04.295]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:18:04.295]    <block atomic="false" info="">
[04:18:04.295]      __var deviceID = 0;
[04:18:04.295]        // -> [deviceID <= 0x00000000]
[04:18:04.295]      __var version = 0;
[04:18:04.295]        // -> [version <= 0x00000000]
[04:18:04.295]      __var partNum = 0;
[04:18:04.295]        // -> [partNum <= 0x00000000]
[04:18:04.295]      __var manuf = 0;
[04:18:04.297]        // -> [manuf <= 0x00000000]
[04:18:04.297]      __var isMSPM0G1X0X_G3X0X = 0;
[04:18:04.297]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:18:04.297]      __var isProduction = 0;
[04:18:04.297]        // -> [isProduction <= 0x00000000]
[04:18:04.297]      __var continueId = 0;
[04:18:04.297]        // -> [continueId <= 0x00000000]
[04:18:04.297]      deviceID =   Read32(0x41C40004);
[04:18:04.303]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:18:04.303]        // -> [deviceID <= 0x2BB8802F]
[04:18:04.303]      version = deviceID >> 28;
[04:18:04.307]        // -> [version <= 0x00000002]
[04:18:04.307]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:18:04.307]        // -> [partNum <= 0x0000BB88]
[04:18:04.307]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:18:04.307]        // -> [manuf <= 0x00000017]
[04:18:04.307]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:18:04.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:18:04.307]      isProduction = (version > 0);
[04:18:04.307]        // -> [isProduction <= 0x00000001]
[04:18:04.307]    </block>
[04:18:04.307]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:18:04.308]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:18:04.308]        // =>  FALSE
[04:18:04.308]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:18:04.308]    </control>
[04:18:04.308]    <control if="continueId == 4" while="" timeout="0" info="">
[04:18:04.308]      // if-block "continueId == 4"
[04:18:04.308]        // =>  FALSE
[04:18:04.308]      // skip if-block "continueId == 4"
[04:18:04.308]    </control>
[04:18:04.308]    <control if="!isProduction" while="" timeout="0" info="">
[04:18:04.308]      // if-block "!isProduction"
[04:18:04.308]        // =>  FALSE
[04:18:04.308]      // skip if-block "!isProduction"
[04:18:04.308]    </control>
[04:18:04.308]  </sequence>
[04:18:04.308]  
[04:19:11.626]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:19:11.626]  
[04:19:11.638]  <debugvars>
[04:19:11.638]    // Pre-defined
[04:19:11.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:19:11.638]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:19:11.638]    __dp=0x00000000
[04:19:11.638]    __ap=0x00000000
[04:19:11.638]    __traceout=0x00000000      (Trace Disabled)
[04:19:11.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:19:11.638]    __FlashAddr=0x00000000
[04:19:11.639]    __FlashLen=0x00000000
[04:19:11.639]    __FlashArg=0x00000000
[04:19:11.639]    __FlashOp=0x00000000
[04:19:11.639]    __Result=0x00000000
[04:19:11.639]  </debugvars>
[04:19:11.639]  
[04:19:11.639]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:19:11.639]    <block atomic="false" info="">
[04:19:11.639]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:19:11.639]        // -> [isSWJ <= 0x00000001]
[04:19:11.639]      __var hasDormant = __protocol & 0x00020000;
[04:19:11.639]        // -> [hasDormant <= 0x00000000]
[04:19:11.639]      __var protType   = __protocol & 0x0000FFFF;
[04:19:11.639]        // -> [protType <= 0x00000002]
[04:19:11.639]    </block>
[04:19:11.639]    <control if="protType == 1" while="" timeout="0" info="">
[04:19:11.639]      // if-block "protType == 1"
[04:19:11.639]        // =>  FALSE
[04:19:11.639]      // skip if-block "protType == 1"
[04:19:11.639]    </control>
[04:19:11.639]    <control if="protType == 2" while="" timeout="0" info="">
[04:19:11.639]      // if-block "protType == 2"
[04:19:11.639]        // =>  TRUE
[04:19:11.639]      <control if="isSWJ" while="" timeout="0" info="">
[04:19:11.639]        // if-block "isSWJ"
[04:19:11.639]          // =>  TRUE
[04:19:11.639]        <control if="hasDormant" while="" timeout="0" info="">
[04:19:11.639]          // if-block "hasDormant"
[04:19:11.639]            // =>  FALSE
[04:19:11.639]          // skip if-block "hasDormant"
[04:19:11.639]        </control>
[04:19:11.639]        <control if="!hasDormant" while="" timeout="0" info="">
[04:19:11.639]          // if-block "!hasDormant"
[04:19:11.639]            // =>  TRUE
[04:19:11.639]          <block atomic="false" info="">
[04:19:11.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:19:11.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:19:11.645]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:19:11.652]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:19:11.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:19:11.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:19:11.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:19:11.658]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:19:11.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:19:11.660]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:19:11.660]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:19:11.664]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:19:11.664]          </block>
[04:19:11.664]          // end if-block "!hasDormant"
[04:19:11.664]        </control>
[04:19:11.664]        // end if-block "isSWJ"
[04:19:11.664]      </control>
[04:19:11.664]      <control if="!isSWJ" while="" timeout="0" info="">
[04:19:11.664]        // if-block "!isSWJ"
[04:19:11.664]          // =>  FALSE
[04:19:11.664]        // skip if-block "!isSWJ"
[04:19:11.664]      </control>
[04:19:11.664]      <block atomic="false" info="">
[04:19:11.664]        ReadDP(0x0);
[04:19:11.668]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:19:11.668]      </block>
[04:19:11.668]      // end if-block "protType == 2"
[04:19:11.668]    </control>
[04:19:11.668]  </sequence>
[04:19:11.668]  
[04:19:11.676]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:19:11.676]  
[04:19:11.676]  <debugvars>
[04:19:11.676]    // Pre-defined
[04:19:11.677]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:19:11.677]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:19:11.677]    __dp=0x00000000
[04:19:11.677]    __ap=0x00000000
[04:19:11.677]    __traceout=0x00000000      (Trace Disabled)
[04:19:11.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:19:11.677]    __FlashAddr=0x00000000
[04:19:11.677]    __FlashLen=0x00000000
[04:19:11.677]    __FlashArg=0x00000000
[04:19:11.677]    __FlashOp=0x00000000
[04:19:11.677]    __Result=0x00000000
[04:19:11.677]  </debugvars>
[04:19:11.677]  
[04:19:11.677]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:19:11.677]    <block atomic="false" info="">
[04:19:11.677]      __var SW_DP_ABORT       = 0x0;
[04:19:11.677]        // -> [SW_DP_ABORT <= 0x00000000]
[04:19:11.677]      __var DP_CTRL_STAT      = 0x4;
[04:19:11.677]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:19:11.677]      __var DP_SELECT         = 0x8;
[04:19:11.677]        // -> [DP_SELECT <= 0x00000008]
[04:19:11.677]      __var powered_down      = 0;
[04:19:11.677]        // -> [powered_down <= 0x00000000]
[04:19:11.677]      WriteDP(DP_SELECT, 0x00000000);
[04:19:11.680]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:19:11.680]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:19:11.684]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:19:11.684]        // -> [powered_down <= 0x00000001]
[04:19:11.684]    </block>
[04:19:11.684]    <control if="powered_down" while="" timeout="0" info="">
[04:19:11.684]      // if-block "powered_down"
[04:19:11.684]        // =>  TRUE
[04:19:11.684]      <block atomic="false" info="">
[04:19:11.684]        Message(0, "Debug/System power-up request sent");
[04:19:11.688]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:19:11.698]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:19:11.698]      </block>
[04:19:11.698]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:19:11.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:19:11.705]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:19:11.705]        // while-condition  =>  FALSE
[04:19:11.705]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:19:11.705]      </control>
[04:19:11.705]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:19:11.705]        // if-block "(__protocol & 0xFFFF) == 1"
[04:19:11.705]          // =>  FALSE
[04:19:11.705]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:19:11.705]      </control>
[04:19:11.705]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:19:11.705]        // if-block "(__protocol & 0xFFFF) == 2"
[04:19:11.705]          // =>  TRUE
[04:19:11.705]        <block atomic="false" info="">
[04:19:11.705]          Message(0, "executing SWD power up");
[04:19:11.708]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:19:11.713]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:19:11.713]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:19:11.716]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:19:11.716]        </block>
[04:19:11.717]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:19:11.717]      </control>
[04:19:11.717]      // end if-block "powered_down"
[04:19:11.717]    </control>
[04:19:11.717]    <block atomic="false" info="">
[04:19:11.717]      __var DEBUG_PORT_VAL    = 0;
[04:19:11.717]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:19:11.717]      __var ACCESS_POINT_VAL  = 0;
[04:19:11.717]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:19:11.717]      __ap = 1; 
[04:19:11.717]        // -> [__ap <= 0x00000001]
[04:19:11.717]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:19:11.726]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:19:11.726]      __ap = 4;
[04:19:11.726]        // -> [__ap <= 0x00000004]
[04:19:11.726]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:19:11.734]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:19:11.734]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:19:11.734]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:19:11.737]    </block>
[04:19:11.737]    <block atomic="false" info="">
[04:19:11.737]      __var nReset = 0x80;
[04:19:11.737]        // -> [nReset <= 0x00000080]
[04:19:11.737]      __var canReadPins = 0;
[04:19:11.737]        // -> [canReadPins <= 0x00000000]
[04:19:11.737]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:19:11.741]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:19:11.741]        // -> [canReadPins <= 0x00000001]
[04:19:11.741]    </block>
[04:19:11.741]    <control if="" while="1" timeout="200" info="">
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.741]      // while-condition  =>  TRUE
[04:19:11.741]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.745]      // while "1"  (timeout="200")
[04:19:11.745]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.749]      // while "1"  (timeout="200")
[04:19:11.749]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.753]      // while "1"  (timeout="200")
[04:19:11.753]      // while-condition  =>  TRUE
[04:19:11.757]      // while "1"  (timeout="200")
[04:19:11.757]      // while  =>  TIMEOUT
[04:19:11.757]      // end while "1"
[04:19:11.757]    </control>
[04:19:11.757]    <control if="canReadPins" while="" timeout="0" info="">
[04:19:11.757]      // if-block "canReadPins"
[04:19:11.757]        // =>  TRUE
[04:19:11.757]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:19:11.757]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:19:11.760]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:19:11.760]        // while-condition  =>  FALSE
[04:19:11.760]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:19:11.760]      </control>
[04:19:11.760]      // end if-block "canReadPins"
[04:19:11.760]    </control>
[04:19:11.760]    <control if="!canReadPins" while="" timeout="0" info="">
[04:19:11.760]      // if-block "!canReadPins"
[04:19:11.762]        // =>  FALSE
[04:19:11.762]      // skip if-block "!canReadPins"
[04:19:11.762]    </control>
[04:19:11.762]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:19:11.762]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:19:11.762]        // =>  TRUE
[04:19:11.762]      <block atomic="false" info="">
[04:19:11.762]        WriteAP(0x00, 0x190008);
[04:19:11.765]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:19:11.765]        WriteAP(0xF0, 0x01);
[04:19:11.771]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:19:11.771]      </block>
[04:19:11.771]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:19:11.771]    </control>
[04:19:11.771]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:19:11.771]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:19:11.771]        // =>  FALSE
[04:19:11.771]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:19:11.771]    </control>
[04:19:11.771]    <block atomic="false" info="">
[04:19:11.771]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:19:11.779]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:19:11.779]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:19:11.779]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:19:11.783]      __ap = 0; //lets make sure we reset the access point selection
[04:19:11.783]        // -> [__ap <= 0x00000000]
[04:19:11.783]    </block>
[04:19:11.783]  </sequence>
[04:19:11.783]  
[04:19:11.831]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:19:11.831]  
[04:19:11.831]  <debugvars>
[04:19:11.831]    // Pre-defined
[04:19:11.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:19:11.831]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:19:11.831]    __dp=0x00000000
[04:19:11.831]    __ap=0x00000000
[04:19:11.831]    __traceout=0x00000000      (Trace Disabled)
[04:19:11.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:19:11.831]    __FlashAddr=0x00000000
[04:19:11.831]    __FlashLen=0x00000000
[04:19:11.831]    __FlashArg=0x00000000
[04:19:11.831]    __FlashOp=0x00000000
[04:19:11.831]    __Result=0x00000000
[04:19:11.831]  </debugvars>
[04:19:11.831]  
[04:19:11.831]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:19:11.831]    <block atomic="false" info="">
[04:19:11.831]      __var deviceID = 0;
[04:19:11.831]        // -> [deviceID <= 0x00000000]
[04:19:11.831]      __var version = 0;
[04:19:11.831]        // -> [version <= 0x00000000]
[04:19:11.831]      __var partNum = 0;
[04:19:11.831]        // -> [partNum <= 0x00000000]
[04:19:11.831]      __var manuf = 0;
[04:19:11.831]        // -> [manuf <= 0x00000000]
[04:19:11.831]      __var isMSPM0G1X0X_G3X0X = 0;
[04:19:11.831]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:19:11.835]      __var isProduction = 0;
[04:19:11.835]        // -> [isProduction <= 0x00000000]
[04:19:11.835]      __var continueId = 0;
[04:19:11.835]        // -> [continueId <= 0x00000000]
[04:19:11.835]      deviceID =   Read32(0x41C40004);
[04:19:11.847]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:19:11.847]        // -> [deviceID <= 0x2BB8802F]
[04:19:11.847]      version = deviceID >> 28;
[04:19:11.847]        // -> [version <= 0x00000002]
[04:19:11.847]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:19:11.847]        // -> [partNum <= 0x0000BB88]
[04:19:11.847]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:19:11.847]        // -> [manuf <= 0x00000017]
[04:19:11.847]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:19:11.847]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:19:11.847]      isProduction = (version > 0);
[04:19:11.847]        // -> [isProduction <= 0x00000001]
[04:19:11.847]    </block>
[04:19:11.847]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:19:11.847]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:19:11.847]        // =>  FALSE
[04:19:11.847]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:19:11.847]    </control>
[04:19:11.847]    <control if="continueId == 4" while="" timeout="0" info="">
[04:19:11.847]      // if-block "continueId == 4"
[04:19:11.847]        // =>  FALSE
[04:19:11.847]      // skip if-block "continueId == 4"
[04:19:11.847]    </control>
[04:19:11.847]    <control if="!isProduction" while="" timeout="0" info="">
[04:19:11.847]      // if-block "!isProduction"
[04:19:11.851]        // =>  FALSE
[04:19:11.851]      // skip if-block "!isProduction"
[04:19:11.851]    </control>
[04:19:11.851]  </sequence>
[04:19:11.851]  
[04:21:44.982]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:21:44.982]  
[04:21:44.994]  <debugvars>
[04:21:44.994]    // Pre-defined
[04:21:44.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:44.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:44.994]    __dp=0x00000000
[04:21:44.994]    __ap=0x00000000
[04:21:44.994]    __traceout=0x00000000      (Trace Disabled)
[04:21:44.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:44.994]    __FlashAddr=0x00000000
[04:21:44.995]    __FlashLen=0x00000000
[04:21:44.995]    __FlashArg=0x00000000
[04:21:44.995]    __FlashOp=0x00000000
[04:21:44.995]    __Result=0x00000000
[04:21:44.995]  </debugvars>
[04:21:44.995]  
[04:21:44.995]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:21:44.995]    <block atomic="false" info="">
[04:21:44.995]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:21:44.995]        // -> [isSWJ <= 0x00000001]
[04:21:44.995]      __var hasDormant = __protocol & 0x00020000;
[04:21:44.995]        // -> [hasDormant <= 0x00000000]
[04:21:44.995]      __var protType   = __protocol & 0x0000FFFF;
[04:21:44.995]        // -> [protType <= 0x00000002]
[04:21:44.995]    </block>
[04:21:44.995]    <control if="protType == 1" while="" timeout="0" info="">
[04:21:44.995]      // if-block "protType == 1"
[04:21:44.995]        // =>  FALSE
[04:21:44.995]      // skip if-block "protType == 1"
[04:21:44.995]    </control>
[04:21:44.995]    <control if="protType == 2" while="" timeout="0" info="">
[04:21:44.995]      // if-block "protType == 2"
[04:21:44.995]        // =>  TRUE
[04:21:44.995]      <control if="isSWJ" while="" timeout="0" info="">
[04:21:44.995]        // if-block "isSWJ"
[04:21:44.995]          // =>  TRUE
[04:21:44.995]        <control if="hasDormant" while="" timeout="0" info="">
[04:21:44.995]          // if-block "hasDormant"
[04:21:44.995]            // =>  FALSE
[04:21:44.995]          // skip if-block "hasDormant"
[04:21:44.995]        </control>
[04:21:44.995]        <control if="!hasDormant" while="" timeout="0" info="">
[04:21:44.995]          // if-block "!hasDormant"
[04:21:44.995]            // =>  TRUE
[04:21:44.995]          <block atomic="false" info="">
[04:21:44.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:21:45.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:45.007]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:21:45.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:21:45.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:21:45.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:45.016]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:21:45.023]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:21:45.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:21:45.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:45.023]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:21:45.031]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:21:45.031]          </block>
[04:21:45.031]          // end if-block "!hasDormant"
[04:21:45.031]        </control>
[04:21:45.031]        // end if-block "isSWJ"
[04:21:45.031]      </control>
[04:21:45.031]      <control if="!isSWJ" while="" timeout="0" info="">
[04:21:45.031]        // if-block "!isSWJ"
[04:21:45.031]          // =>  FALSE
[04:21:45.031]        // skip if-block "!isSWJ"
[04:21:45.031]      </control>
[04:21:45.031]      <block atomic="false" info="">
[04:21:45.031]        ReadDP(0x0);
[04:21:45.035]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:21:45.035]      </block>
[04:21:45.035]      // end if-block "protType == 2"
[04:21:45.035]    </control>
[04:21:45.035]  </sequence>
[04:21:45.035]  
[04:21:45.043]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:21:45.043]  
[04:21:45.043]  <debugvars>
[04:21:45.043]    // Pre-defined
[04:21:45.043]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:45.043]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:45.043]    __dp=0x00000000
[04:21:45.043]    __ap=0x00000000
[04:21:45.043]    __traceout=0x00000000      (Trace Disabled)
[04:21:45.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:45.043]    __FlashAddr=0x00000000
[04:21:45.043]    __FlashLen=0x00000000
[04:21:45.043]    __FlashArg=0x00000000
[04:21:45.043]    __FlashOp=0x00000000
[04:21:45.043]    __Result=0x00000000
[04:21:45.043]  </debugvars>
[04:21:45.043]  
[04:21:45.043]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:21:45.043]    <block atomic="false" info="">
[04:21:45.043]      __var SW_DP_ABORT       = 0x0;
[04:21:45.043]        // -> [SW_DP_ABORT <= 0x00000000]
[04:21:45.043]      __var DP_CTRL_STAT      = 0x4;
[04:21:45.043]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:21:45.043]      __var DP_SELECT         = 0x8;
[04:21:45.047]        // -> [DP_SELECT <= 0x00000008]
[04:21:45.047]      __var powered_down      = 0;
[04:21:45.047]        // -> [powered_down <= 0x00000000]
[04:21:45.047]      WriteDP(DP_SELECT, 0x00000000);
[04:21:45.047]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:21:45.047]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:21:45.051]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:21:45.051]        // -> [powered_down <= 0x00000001]
[04:21:45.051]    </block>
[04:21:45.055]    <control if="powered_down" while="" timeout="0" info="">
[04:21:45.055]      // if-block "powered_down"
[04:21:45.055]        // =>  TRUE
[04:21:45.055]      <block atomic="false" info="">
[04:21:45.055]        Message(0, "Debug/System power-up request sent");
[04:21:45.055]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:21:45.055]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:21:45.055]      </block>
[04:21:45.055]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:21:45.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:21:45.063]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:21:45.063]        // while-condition  =>  FALSE
[04:21:45.063]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:21:45.063]      </control>
[04:21:45.063]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:21:45.063]        // if-block "(__protocol & 0xFFFF) == 1"
[04:21:45.063]          // =>  FALSE
[04:21:45.063]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:21:45.063]      </control>
[04:21:45.063]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:21:45.063]        // if-block "(__protocol & 0xFFFF) == 2"
[04:21:45.063]          // =>  TRUE
[04:21:45.063]        <block atomic="false" info="">
[04:21:45.063]          Message(0, "executing SWD power up");
[04:21:45.063]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:21:45.067]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:21:45.067]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:21:45.071]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:21:45.071]        </block>
[04:21:45.071]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:21:45.071]      </control>
[04:21:45.071]      // end if-block "powered_down"
[04:21:45.071]    </control>
[04:21:45.071]    <block atomic="false" info="">
[04:21:45.071]      __var DEBUG_PORT_VAL    = 0;
[04:21:45.071]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:21:45.071]      __var ACCESS_POINT_VAL  = 0;
[04:21:45.071]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:21:45.071]      __ap = 1; 
[04:21:45.071]        // -> [__ap <= 0x00000001]
[04:21:45.071]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:21:45.079]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:21:45.079]      __ap = 4;
[04:21:45.079]        // -> [__ap <= 0x00000004]
[04:21:45.079]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:45.091]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:21:45.091]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:21:45.091]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:45.091]    </block>
[04:21:45.091]    <block atomic="false" info="">
[04:21:45.091]      __var nReset = 0x80;
[04:21:45.091]        // -> [nReset <= 0x00000080]
[04:21:45.091]      __var canReadPins = 0;
[04:21:45.095]        // -> [canReadPins <= 0x00000000]
[04:21:45.095]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:21:45.098]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:21:45.098]        // -> [canReadPins <= 0x00000001]
[04:21:45.098]    </block>
[04:21:45.098]    <control if="" while="1" timeout="200" info="">
[04:21:45.098]      // while "1"  (timeout="200")
[04:21:45.098]      // while-condition  =>  TRUE
[04:21:45.098]      // while "1"  (timeout="200")
[04:21:45.098]      // while-condition  =>  TRUE
[04:21:45.098]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.100]      // while "1"  (timeout="200")
[04:21:45.100]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.104]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.104]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.104]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.104]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.104]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.104]      // while-condition  =>  TRUE
[04:21:45.104]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.105]      // while "1"  (timeout="200")
[04:21:45.105]      // while-condition  =>  TRUE
[04:21:45.108]      // while "1"  (timeout="200")
[04:21:45.108]      // while-condition  =>  TRUE
[04:21:45.108]      // while "1"  (timeout="200")
[04:21:45.108]      // while-condition  =>  TRUE
[04:21:45.108]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.109]      // while-condition  =>  TRUE
[04:21:45.109]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.112]      // while "1"  (timeout="200")
[04:21:45.112]      // while-condition  =>  TRUE
[04:21:45.116]      // while "1"  (timeout="200")
[04:21:45.116]      // while  =>  TIMEOUT
[04:21:45.116]      // end while "1"
[04:21:45.116]    </control>
[04:21:45.116]    <control if="canReadPins" while="" timeout="0" info="">
[04:21:45.116]      // if-block "canReadPins"
[04:21:45.116]        // =>  TRUE
[04:21:45.116]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:21:45.116]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:21:45.116]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:21:45.116]        // while-condition  =>  FALSE
[04:21:45.116]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:21:45.120]      </control>
[04:21:45.120]      // end if-block "canReadPins"
[04:21:45.120]    </control>
[04:21:45.120]    <control if="!canReadPins" while="" timeout="0" info="">
[04:21:45.120]      // if-block "!canReadPins"
[04:21:45.120]        // =>  FALSE
[04:21:45.120]      // skip if-block "!canReadPins"
[04:21:45.120]    </control>
[04:21:45.120]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:21:45.120]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:45.120]        // =>  TRUE
[04:21:45.121]      <block atomic="false" info="">
[04:21:45.121]        WriteAP(0x00, 0x190008);
[04:21:45.125]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:45.125]        WriteAP(0xF0, 0x01);
[04:21:45.129]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:45.129]      </block>
[04:21:45.129]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:45.131]    </control>
[04:21:45.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:21:45.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:45.131]        // =>  FALSE
[04:21:45.131]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:45.132]    </control>
[04:21:45.132]    <block atomic="false" info="">
[04:21:45.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:45.138]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:21:45.138]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:21:45.138]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:45.139]      __ap = 0; //lets make sure we reset the access point selection
[04:21:45.139]        // -> [__ap <= 0x00000000]
[04:21:45.139]    </block>
[04:21:45.139]  </sequence>
[04:21:45.139]  
[04:21:45.186]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:21:45.186]  
[04:21:45.186]  <debugvars>
[04:21:45.186]    // Pre-defined
[04:21:45.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:45.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:21:45.186]    __dp=0x00000000
[04:21:45.186]    __ap=0x00000000
[04:21:45.186]    __traceout=0x00000000      (Trace Disabled)
[04:21:45.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:45.186]    __FlashAddr=0x00000000
[04:21:45.186]    __FlashLen=0x00000000
[04:21:45.186]    __FlashArg=0x00000000
[04:21:45.186]    __FlashOp=0x00000000
[04:21:45.186]    __Result=0x00000000
[04:21:45.190]  </debugvars>
[04:21:45.190]  
[04:21:45.190]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:21:45.190]    <block atomic="false" info="">
[04:21:45.190]      __var deviceID = 0;
[04:21:45.190]        // -> [deviceID <= 0x00000000]
[04:21:45.190]      __var version = 0;
[04:21:45.190]        // -> [version <= 0x00000000]
[04:21:45.190]      __var partNum = 0;
[04:21:45.190]        // -> [partNum <= 0x00000000]
[04:21:45.190]      __var manuf = 0;
[04:21:45.190]        // -> [manuf <= 0x00000000]
[04:21:45.190]      __var isMSPM0G1X0X_G3X0X = 0;
[04:21:45.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:21:45.190]      __var isProduction = 0;
[04:21:45.190]        // -> [isProduction <= 0x00000000]
[04:21:45.190]      __var continueId = 0;
[04:21:45.190]        // -> [continueId <= 0x00000000]
[04:21:45.190]      deviceID =   Read32(0x41C40004);
[04:21:45.198]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:21:45.198]        // -> [deviceID <= 0x2BB8802F]
[04:21:45.198]      version = deviceID >> 28;
[04:21:45.198]        // -> [version <= 0x00000002]
[04:21:45.198]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:21:45.198]        // -> [partNum <= 0x0000BB88]
[04:21:45.202]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:21:45.202]        // -> [manuf <= 0x00000017]
[04:21:45.202]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:21:45.202]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:21:45.202]      isProduction = (version > 0);
[04:21:45.202]        // -> [isProduction <= 0x00000001]
[04:21:45.202]    </block>
[04:21:45.202]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:21:45.202]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:21:45.202]        // =>  FALSE
[04:21:45.202]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:21:45.202]    </control>
[04:21:45.202]    <control if="continueId == 4" while="" timeout="0" info="">
[04:21:45.202]      // if-block "continueId == 4"
[04:21:45.202]        // =>  FALSE
[04:21:45.202]      // skip if-block "continueId == 4"
[04:21:45.202]    </control>
[04:21:45.202]    <control if="!isProduction" while="" timeout="0" info="">
[04:21:45.202]      // if-block "!isProduction"
[04:21:45.202]        // =>  FALSE
[04:21:45.202]      // skip if-block "!isProduction"
[04:21:45.202]    </control>
[04:21:45.202]  </sequence>
[04:21:45.202]  
[04:21:52.966]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:21:52.966]  
[04:21:52.966]  <debugvars>
[04:21:52.966]    // Pre-defined
[04:21:52.966]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:52.966]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:21:52.968]    __dp=0x00000000
[04:21:52.968]    __ap=0x00000000
[04:21:52.968]    __traceout=0x00000000      (Trace Disabled)
[04:21:52.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:52.968]    __FlashAddr=0x00000000
[04:21:52.968]    __FlashLen=0x00000000
[04:21:52.968]    __FlashArg=0x00000000
[04:21:52.968]    __FlashOp=0x00000000
[04:21:52.968]    __Result=0x00000000
[04:21:52.968]  </debugvars>
[04:21:52.969]  
[04:21:52.969]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:21:52.969]    <block atomic="false" info="">
[04:21:52.969]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:21:52.969]        // -> [isSWJ <= 0x00000001]
[04:21:52.969]      __var hasDormant = __protocol & 0x00020000;
[04:21:52.969]        // -> [hasDormant <= 0x00000000]
[04:21:52.969]      __var protType   = __protocol & 0x0000FFFF;
[04:21:52.969]        // -> [protType <= 0x00000002]
[04:21:52.969]    </block>
[04:21:52.969]    <control if="protType == 1" while="" timeout="0" info="">
[04:21:52.969]      // if-block "protType == 1"
[04:21:52.969]        // =>  FALSE
[04:21:52.969]      // skip if-block "protType == 1"
[04:21:52.969]    </control>
[04:21:52.969]    <control if="protType == 2" while="" timeout="0" info="">
[04:21:52.969]      // if-block "protType == 2"
[04:21:52.969]        // =>  TRUE
[04:21:52.969]      <control if="isSWJ" while="" timeout="0" info="">
[04:21:52.969]        // if-block "isSWJ"
[04:21:52.969]          // =>  TRUE
[04:21:52.969]        <control if="hasDormant" while="" timeout="0" info="">
[04:21:52.969]          // if-block "hasDormant"
[04:21:52.969]            // =>  FALSE
[04:21:52.969]          // skip if-block "hasDormant"
[04:21:52.969]        </control>
[04:21:52.969]        <control if="!hasDormant" while="" timeout="0" info="">
[04:21:52.969]          // if-block "!hasDormant"
[04:21:52.969]            // =>  TRUE
[04:21:52.969]          <block atomic="false" info="">
[04:21:52.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:21:52.979]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:52.979]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:21:52.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:21:52.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:21:52.987]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:52.988]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:21:52.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:21:52.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:21:52.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:21:52.995]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:21:52.998]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:21:52.998]          </block>
[04:21:52.998]          // end if-block "!hasDormant"
[04:21:52.998]        </control>
[04:21:52.998]        // end if-block "isSWJ"
[04:21:52.998]      </control>
[04:21:52.998]      <control if="!isSWJ" while="" timeout="0" info="">
[04:21:52.998]        // if-block "!isSWJ"
[04:21:52.998]          // =>  FALSE
[04:21:52.998]        // skip if-block "!isSWJ"
[04:21:52.998]      </control>
[04:21:52.998]      <block atomic="false" info="">
[04:21:52.998]        ReadDP(0x0);
[04:21:53.001]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:21:53.001]      </block>
[04:21:53.001]      // end if-block "protType == 2"
[04:21:53.001]    </control>
[04:21:53.001]  </sequence>
[04:21:53.001]  
[04:21:53.010]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:21:53.010]  
[04:21:53.010]  <debugvars>
[04:21:53.010]    // Pre-defined
[04:21:53.010]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:53.010]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:21:53.010]    __dp=0x00000000
[04:21:53.010]    __ap=0x00000000
[04:21:53.010]    __traceout=0x00000000      (Trace Disabled)
[04:21:53.010]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:53.010]    __FlashAddr=0x00000000
[04:21:53.010]    __FlashLen=0x00000000
[04:21:53.010]    __FlashArg=0x00000000
[04:21:53.010]    __FlashOp=0x00000000
[04:21:53.010]    __Result=0x00000000
[04:21:53.010]  </debugvars>
[04:21:53.010]  
[04:21:53.010]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:21:53.010]    <block atomic="false" info="">
[04:21:53.010]      __var SW_DP_ABORT       = 0x0;
[04:21:53.010]        // -> [SW_DP_ABORT <= 0x00000000]
[04:21:53.010]      __var DP_CTRL_STAT      = 0x4;
[04:21:53.010]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:21:53.010]      __var DP_SELECT         = 0x8;
[04:21:53.010]        // -> [DP_SELECT <= 0x00000008]
[04:21:53.010]      __var powered_down      = 0;
[04:21:53.010]        // -> [powered_down <= 0x00000000]
[04:21:53.010]      WriteDP(DP_SELECT, 0x00000000);
[04:21:53.018]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:21:53.018]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:21:53.020]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:21:53.020]        // -> [powered_down <= 0x00000001]
[04:21:53.020]    </block>
[04:21:53.020]    <control if="powered_down" while="" timeout="0" info="">
[04:21:53.020]      // if-block "powered_down"
[04:21:53.020]        // =>  TRUE
[04:21:53.020]      <block atomic="false" info="">
[04:21:53.020]        Message(0, "Debug/System power-up request sent");
[04:21:53.024]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:21:53.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:21:53.027]      </block>
[04:21:53.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:21:53.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:21:53.030]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:21:53.031]        // while-condition  =>  FALSE
[04:21:53.031]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:21:53.031]      </control>
[04:21:53.031]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:21:53.031]        // if-block "(__protocol & 0xFFFF) == 1"
[04:21:53.031]          // =>  FALSE
[04:21:53.031]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:21:53.031]      </control>
[04:21:53.031]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:21:53.031]        // if-block "(__protocol & 0xFFFF) == 2"
[04:21:53.031]          // =>  TRUE
[04:21:53.031]        <block atomic="false" info="">
[04:21:53.031]          Message(0, "executing SWD power up");
[04:21:53.034]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:21:53.037]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:21:53.037]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:21:53.042]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:21:53.042]        </block>
[04:21:53.042]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:21:53.042]      </control>
[04:21:53.042]      // end if-block "powered_down"
[04:21:53.042]    </control>
[04:21:53.042]    <block atomic="false" info="">
[04:21:53.042]      __var DEBUG_PORT_VAL    = 0;
[04:21:53.042]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:21:53.042]      __var ACCESS_POINT_VAL  = 0;
[04:21:53.042]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:21:53.042]      __ap = 1; 
[04:21:53.043]        // -> [__ap <= 0x00000001]
[04:21:53.043]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:21:53.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:21:53.055]      __ap = 4;
[04:21:53.055]        // -> [__ap <= 0x00000004]
[04:21:53.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:53.064]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:21:53.064]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:21:53.064]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:53.068]    </block>
[04:21:53.068]    <block atomic="false" info="">
[04:21:53.068]      __var nReset = 0x80;
[04:21:53.068]        // -> [nReset <= 0x00000080]
[04:21:53.068]      __var canReadPins = 0;
[04:21:53.068]        // -> [canReadPins <= 0x00000000]
[04:21:53.068]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:21:53.072]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:21:53.072]        // -> [canReadPins <= 0x00000001]
[04:21:53.072]    </block>
[04:21:53.072]    <control if="" while="1" timeout="200" info="">
[04:21:53.072]      // while "1"  (timeout="200")
[04:21:53.072]      // while-condition  =>  TRUE
[04:21:53.072]      // while "1"  (timeout="200")
[04:21:53.072]      // while-condition  =>  TRUE
[04:21:53.072]      // while "1"  (timeout="200")
[04:21:53.072]      // while-condition  =>  TRUE
[04:21:53.073]      // while "1"  (timeout="200")
[04:21:53.073]      // while-condition  =>  TRUE
[04:21:53.073]      // while "1"  (timeout="200")
[04:21:53.073]      // while-condition  =>  TRUE
[04:21:53.073]      // while "1"  (timeout="200")
[04:21:53.073]      // while-condition  =>  TRUE
[04:21:53.073]      // while "1"  (timeout="200")
[04:21:53.073]      // while-condition  =>  TRUE
[04:21:53.073]      // while "1"  (timeout="200")
[04:21:53.073]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.074]      // while-condition  =>  TRUE
[04:21:53.074]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.076]      // while-condition  =>  TRUE
[04:21:53.076]      // while "1"  (timeout="200")
[04:21:53.078]      // while-condition  =>  TRUE
[04:21:53.078]      // while "1"  (timeout="200")
[04:21:53.078]      // while-condition  =>  TRUE
[04:21:53.078]      // while "1"  (timeout="200")
[04:21:53.078]      // while-condition  =>  TRUE
[04:21:53.078]      // while "1"  (timeout="200")
[04:21:53.078]      // while-condition  =>  TRUE
[04:21:53.078]      // while "1"  (timeout="200")
[04:21:53.078]      // while-condition  =>  TRUE
[04:21:53.078]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.079]      // while "1"  (timeout="200")
[04:21:53.079]      // while-condition  =>  TRUE
[04:21:53.080]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.081]      // while-condition  =>  TRUE
[04:21:53.081]      // while "1"  (timeout="200")
[04:21:53.083]      // while-condition  =>  TRUE
[04:21:53.083]      // while "1"  (timeout="200")
[04:21:53.083]      // while  =>  TIMEOUT
[04:21:53.083]      // end while "1"
[04:21:53.083]    </control>
[04:21:53.083]    <control if="canReadPins" while="" timeout="0" info="">
[04:21:53.083]      // if-block "canReadPins"
[04:21:53.083]        // =>  TRUE
[04:21:53.083]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:21:53.083]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:21:53.084]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:21:53.084]        // while-condition  =>  FALSE
[04:21:53.084]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:21:53.084]      </control>
[04:21:53.084]      // end if-block "canReadPins"
[04:21:53.084]    </control>
[04:21:53.084]    <control if="!canReadPins" while="" timeout="0" info="">
[04:21:53.084]      // if-block "!canReadPins"
[04:21:53.084]        // =>  FALSE
[04:21:53.088]      // skip if-block "!canReadPins"
[04:21:53.088]    </control>
[04:21:53.088]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:21:53.088]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:53.088]        // =>  TRUE
[04:21:53.088]      <block atomic="false" info="">
[04:21:53.088]        WriteAP(0x00, 0x190008);
[04:21:53.092]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:53.092]        WriteAP(0xF0, 0x01);
[04:21:53.097]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:21:53.097]      </block>
[04:21:53.097]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:21:53.097]    </control>
[04:21:53.097]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:21:53.097]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:53.097]        // =>  FALSE
[04:21:53.097]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:21:53.097]    </control>
[04:21:53.097]    <block atomic="false" info="">
[04:21:53.099]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:21:53.105]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:21:53.105]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:21:53.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:21:53.108]      __ap = 0; //lets make sure we reset the access point selection
[04:21:53.108]        // -> [__ap <= 0x00000000]
[04:21:53.108]    </block>
[04:21:53.108]  </sequence>
[04:21:53.108]  
[04:21:53.159]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:21:53.159]  
[04:21:53.159]  <debugvars>
[04:21:53.159]    // Pre-defined
[04:21:53.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:21:53.159]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:21:53.159]    __dp=0x00000000
[04:21:53.159]    __ap=0x00000000
[04:21:53.159]    __traceout=0x00000000      (Trace Disabled)
[04:21:53.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:21:53.159]    __FlashAddr=0x00000000
[04:21:53.159]    __FlashLen=0x00000000
[04:21:53.159]    __FlashArg=0x00000000
[04:21:53.159]    __FlashOp=0x00000000
[04:21:53.159]    __Result=0x00000000
[04:21:53.159]  </debugvars>
[04:21:53.159]  
[04:21:53.163]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:21:53.163]    <block atomic="false" info="">
[04:21:53.163]      __var deviceID = 0;
[04:21:53.163]        // -> [deviceID <= 0x00000000]
[04:21:53.163]      __var version = 0;
[04:21:53.163]        // -> [version <= 0x00000000]
[04:21:53.163]      __var partNum = 0;
[04:21:53.163]        // -> [partNum <= 0x00000000]
[04:21:53.163]      __var manuf = 0;
[04:21:53.163]        // -> [manuf <= 0x00000000]
[04:21:53.163]      __var isMSPM0G1X0X_G3X0X = 0;
[04:21:53.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:21:53.163]      __var isProduction = 0;
[04:21:53.163]        // -> [isProduction <= 0x00000000]
[04:21:53.163]      __var continueId = 0;
[04:21:53.163]        // -> [continueId <= 0x00000000]
[04:21:53.163]      deviceID =   Read32(0x41C40004);
[04:21:53.177]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:21:53.177]        // -> [deviceID <= 0x2BB8802F]
[04:21:53.177]      version = deviceID >> 28;
[04:21:53.177]        // -> [version <= 0x00000002]
[04:21:53.177]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:21:53.177]        // -> [partNum <= 0x0000BB88]
[04:21:53.177]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:21:53.177]        // -> [manuf <= 0x00000017]
[04:21:53.177]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:21:53.177]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:21:53.179]      isProduction = (version > 0);
[04:21:53.179]        // -> [isProduction <= 0x00000001]
[04:21:53.179]    </block>
[04:21:53.179]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:21:53.179]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:21:53.179]        // =>  FALSE
[04:21:53.179]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:21:53.179]    </control>
[04:21:53.179]    <control if="continueId == 4" while="" timeout="0" info="">
[04:21:53.179]      // if-block "continueId == 4"
[04:21:53.179]        // =>  FALSE
[04:21:53.179]      // skip if-block "continueId == 4"
[04:21:53.179]    </control>
[04:21:53.179]    <control if="!isProduction" while="" timeout="0" info="">
[04:21:53.179]      // if-block "!isProduction"
[04:21:53.179]        // =>  FALSE
[04:21:53.179]      // skip if-block "!isProduction"
[04:21:53.179]    </control>
[04:21:53.179]  </sequence>
[04:21:53.179]  
[04:26:17.166]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:26:17.166]  
[04:26:17.166]  <debugvars>
[04:26:17.166]    // Pre-defined
[04:26:17.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:26:17.166]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:26:17.166]    __dp=0x00000000
[04:26:17.166]    __ap=0x00000000
[04:26:17.166]    __traceout=0x00000000      (Trace Disabled)
[04:26:17.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:26:17.166]    __FlashAddr=0x00000000
[04:26:17.166]    __FlashLen=0x00000000
[04:26:17.169]    __FlashArg=0x00000000
[04:26:17.169]    __FlashOp=0x00000000
[04:26:17.169]    __Result=0x00000000
[04:26:17.169]  </debugvars>
[04:26:17.169]  
[04:26:17.169]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:26:17.169]    <block atomic="false" info="">
[04:26:17.169]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:26:17.169]        // -> [isSWJ <= 0x00000001]
[04:26:17.169]      __var hasDormant = __protocol & 0x00020000;
[04:26:17.170]        // -> [hasDormant <= 0x00000000]
[04:26:17.170]      __var protType   = __protocol & 0x0000FFFF;
[04:26:17.170]        // -> [protType <= 0x00000002]
[04:26:17.170]    </block>
[04:26:17.170]    <control if="protType == 1" while="" timeout="0" info="">
[04:26:17.170]      // if-block "protType == 1"
[04:26:17.170]        // =>  FALSE
[04:26:17.170]      // skip if-block "protType == 1"
[04:26:17.170]    </control>
[04:26:17.170]    <control if="protType == 2" while="" timeout="0" info="">
[04:26:17.170]      // if-block "protType == 2"
[04:26:17.170]        // =>  TRUE
[04:26:17.170]      <control if="isSWJ" while="" timeout="0" info="">
[04:26:17.170]        // if-block "isSWJ"
[04:26:17.172]          // =>  TRUE
[04:26:17.172]        <control if="hasDormant" while="" timeout="0" info="">
[04:26:17.172]          // if-block "hasDormant"
[04:26:17.172]            // =>  FALSE
[04:26:17.172]          // skip if-block "hasDormant"
[04:26:17.172]        </control>
[04:26:17.172]        <control if="!hasDormant" while="" timeout="0" info="">
[04:26:17.172]          // if-block "!hasDormant"
[04:26:17.172]            // =>  TRUE
[04:26:17.172]          <block atomic="false" info="">
[04:26:17.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:26:17.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:26:17.175]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:26:17.181]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:26:17.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:26:17.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:26:17.186]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:26:17.189]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:26:17.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:26:17.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:26:17.193]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:26:17.198]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:26:17.198]          </block>
[04:26:17.198]          // end if-block "!hasDormant"
[04:26:17.198]        </control>
[04:26:17.198]        // end if-block "isSWJ"
[04:26:17.198]      </control>
[04:26:17.198]      <control if="!isSWJ" while="" timeout="0" info="">
[04:26:17.198]        // if-block "!isSWJ"
[04:26:17.198]          // =>  FALSE
[04:26:17.198]        // skip if-block "!isSWJ"
[04:26:17.198]      </control>
[04:26:17.198]      <block atomic="false" info="">
[04:26:17.198]        ReadDP(0x0);
[04:26:17.202]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:26:17.202]      </block>
[04:26:17.202]      // end if-block "protType == 2"
[04:26:17.202]    </control>
[04:26:17.202]  </sequence>
[04:26:17.202]  
[04:26:17.215]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:26:17.215]  
[04:26:17.215]  <debugvars>
[04:26:17.215]    // Pre-defined
[04:26:17.215]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:26:17.215]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:26:17.215]    __dp=0x00000000
[04:26:17.215]    __ap=0x00000000
[04:26:17.215]    __traceout=0x00000000      (Trace Disabled)
[04:26:17.215]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:26:17.215]    __FlashAddr=0x00000000
[04:26:17.215]    __FlashLen=0x00000000
[04:26:17.215]    __FlashArg=0x00000000
[04:26:17.216]    __FlashOp=0x00000000
[04:26:17.216]    __Result=0x00000000
[04:26:17.216]  </debugvars>
[04:26:17.216]  
[04:26:17.216]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:26:17.216]    <block atomic="false" info="">
[04:26:17.216]      __var SW_DP_ABORT       = 0x0;
[04:26:17.216]        // -> [SW_DP_ABORT <= 0x00000000]
[04:26:17.216]      __var DP_CTRL_STAT      = 0x4;
[04:26:17.216]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:26:17.216]      __var DP_SELECT         = 0x8;
[04:26:17.216]        // -> [DP_SELECT <= 0x00000008]
[04:26:17.216]      __var powered_down      = 0;
[04:26:17.216]        // -> [powered_down <= 0x00000000]
[04:26:17.216]      WriteDP(DP_SELECT, 0x00000000);
[04:26:17.219]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:26:17.221]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:26:17.222]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:26:17.222]        // -> [powered_down <= 0x00000001]
[04:26:17.222]    </block>
[04:26:17.222]    <control if="powered_down" while="" timeout="0" info="">
[04:26:17.222]      // if-block "powered_down"
[04:26:17.222]        // =>  TRUE
[04:26:17.222]      <block atomic="false" info="">
[04:26:17.222]        Message(0, "Debug/System power-up request sent");
[04:26:17.225]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:26:17.229]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:26:17.229]      </block>
[04:26:17.229]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:26:17.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:26:17.233]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:26:17.233]        // while-condition  =>  FALSE
[04:26:17.233]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:26:17.233]      </control>
[04:26:17.233]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:26:17.233]        // if-block "(__protocol & 0xFFFF) == 1"
[04:26:17.233]          // =>  FALSE
[04:26:17.233]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:26:17.233]      </control>
[04:26:17.233]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:26:17.233]        // if-block "(__protocol & 0xFFFF) == 2"
[04:26:17.236]          // =>  TRUE
[04:26:17.236]        <block atomic="false" info="">
[04:26:17.236]          Message(0, "executing SWD power up");
[04:26:17.238]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:26:17.238]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:26:17.238]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:26:17.246]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:26:17.246]        </block>
[04:26:17.246]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:26:17.246]      </control>
[04:26:17.246]      // end if-block "powered_down"
[04:26:17.246]    </control>
[04:26:17.246]    <block atomic="false" info="">
[04:26:17.246]      __var DEBUG_PORT_VAL    = 0;
[04:26:17.246]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:26:17.246]      __var ACCESS_POINT_VAL  = 0;
[04:26:17.246]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:26:17.246]      __ap = 1; 
[04:26:17.246]        // -> [__ap <= 0x00000001]
[04:26:17.246]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:26:17.254]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:26:17.254]      __ap = 4;
[04:26:17.254]        // -> [__ap <= 0x00000004]
[04:26:17.254]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:26:17.259]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:26:17.259]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:26:17.259]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:26:17.263]    </block>
[04:26:17.263]    <block atomic="false" info="">
[04:26:17.263]      __var nReset = 0x80;
[04:26:17.263]        // -> [nReset <= 0x00000080]
[04:26:17.263]      __var canReadPins = 0;
[04:26:17.263]        // -> [canReadPins <= 0x00000000]
[04:26:17.263]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:26:17.266]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:26:17.266]        // -> [canReadPins <= 0x00000001]
[04:26:17.267]    </block>
[04:26:17.267]    <control if="" while="1" timeout="200" info="">
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.267]      // while "1"  (timeout="200")
[04:26:17.267]      // while-condition  =>  TRUE
[04:26:17.270]      // while "1"  (timeout="200")
[04:26:17.270]      // while  =>  TIMEOUT
[04:26:17.270]      // end while "1"
[04:26:17.270]    </control>
[04:26:17.270]    <control if="canReadPins" while="" timeout="0" info="">
[04:26:17.270]      // if-block "canReadPins"
[04:26:17.270]        // =>  TRUE
[04:26:17.270]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:26:17.270]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:26:17.272]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:26:17.272]        // while-condition  =>  FALSE
[04:26:17.272]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:26:17.275]      </control>
[04:26:17.275]      // end if-block "canReadPins"
[04:26:17.275]    </control>
[04:26:17.275]    <control if="!canReadPins" while="" timeout="0" info="">
[04:26:17.275]      // if-block "!canReadPins"
[04:26:17.275]        // =>  FALSE
[04:26:17.275]      // skip if-block "!canReadPins"
[04:26:17.275]    </control>
[04:26:17.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:26:17.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:26:17.275]        // =>  TRUE
[04:26:17.276]      <block atomic="false" info="">
[04:26:17.276]        WriteAP(0x00, 0x190008);
[04:26:17.279]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:26:17.279]        WriteAP(0xF0, 0x01);
[04:26:17.285]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:26:17.285]      </block>
[04:26:17.285]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:26:17.285]    </control>
[04:26:17.285]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:26:17.285]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:26:17.285]        // =>  FALSE
[04:26:17.285]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:26:17.285]    </control>
[04:26:17.285]    <block atomic="false" info="">
[04:26:17.285]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:26:17.300]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:26:17.300]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:26:17.300]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:26:17.304]      __ap = 0; //lets make sure we reset the access point selection
[04:26:17.304]        // -> [__ap <= 0x00000000]
[04:26:17.304]    </block>
[04:26:17.304]  </sequence>
[04:26:17.304]  
[04:26:17.342]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:26:17.342]  
[04:26:17.342]  <debugvars>
[04:26:17.342]    // Pre-defined
[04:26:17.342]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:26:17.342]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:26:17.342]    __dp=0x00000000
[04:26:17.342]    __ap=0x00000000
[04:26:17.342]    __traceout=0x00000000      (Trace Disabled)
[04:26:17.345]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:26:17.345]    __FlashAddr=0x00000000
[04:26:17.345]    __FlashLen=0x00000000
[04:26:17.345]    __FlashArg=0x00000000
[04:26:17.345]    __FlashOp=0x00000000
[04:26:17.345]    __Result=0x00000000
[04:26:17.345]  </debugvars>
[04:26:17.345]  
[04:26:17.345]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:26:17.345]    <block atomic="false" info="">
[04:26:17.345]      __var deviceID = 0;
[04:26:17.345]        // -> [deviceID <= 0x00000000]
[04:26:17.346]      __var version = 0;
[04:26:17.346]        // -> [version <= 0x00000000]
[04:26:17.346]      __var partNum = 0;
[04:26:17.346]        // -> [partNum <= 0x00000000]
[04:26:17.346]      __var manuf = 0;
[04:26:17.346]        // -> [manuf <= 0x00000000]
[04:26:17.346]      __var isMSPM0G1X0X_G3X0X = 0;
[04:26:17.346]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:26:17.346]      __var isProduction = 0;
[04:26:17.346]        // -> [isProduction <= 0x00000000]
[04:26:17.346]      __var continueId = 0;
[04:26:17.346]        // -> [continueId <= 0x00000000]
[04:26:17.346]      deviceID =   Read32(0x41C40004);
[04:26:17.366]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:26:17.366]        // -> [deviceID <= 0x2BB8802F]
[04:26:17.366]      version = deviceID >> 28;
[04:26:17.366]        // -> [version <= 0x00000002]
[04:26:17.366]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:26:17.366]        // -> [partNum <= 0x0000BB88]
[04:26:17.366]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:26:17.366]        // -> [manuf <= 0x00000017]
[04:26:17.366]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:26:17.366]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:26:17.366]      isProduction = (version > 0);
[04:26:17.366]        // -> [isProduction <= 0x00000001]
[04:26:17.370]    </block>
[04:26:17.370]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:26:17.370]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:26:17.370]        // =>  FALSE
[04:26:17.370]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:26:17.370]    </control>
[04:26:17.370]    <control if="continueId == 4" while="" timeout="0" info="">
[04:26:17.370]      // if-block "continueId == 4"
[04:26:17.370]        // =>  FALSE
[04:26:17.370]      // skip if-block "continueId == 4"
[04:26:17.370]    </control>
[04:26:17.370]    <control if="!isProduction" while="" timeout="0" info="">
[04:26:17.370]      // if-block "!isProduction"
[04:26:17.370]        // =>  FALSE
[04:26:17.370]      // skip if-block "!isProduction"
[04:26:17.370]    </control>
[04:26:17.370]  </sequence>
[04:26:17.370]  
[04:29:14.710]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:29:14.710]  
[04:29:14.720]  <debugvars>
[04:29:14.720]    // Pre-defined
[04:29:14.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:29:14.720]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:29:14.720]    __dp=0x00000000
[04:29:14.720]    __ap=0x00000000
[04:29:14.720]    __traceout=0x00000000      (Trace Disabled)
[04:29:14.720]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:29:14.720]    __FlashAddr=0x00000000
[04:29:14.720]    __FlashLen=0x00000000
[04:29:14.721]    __FlashArg=0x00000000
[04:29:14.721]    __FlashOp=0x00000000
[04:29:14.721]    __Result=0x00000000
[04:29:14.721]  </debugvars>
[04:29:14.721]  
[04:29:14.722]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:29:14.722]    <block atomic="false" info="">
[04:29:14.722]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:29:14.722]        // -> [isSWJ <= 0x00000001]
[04:29:14.722]      __var hasDormant = __protocol & 0x00020000;
[04:29:14.722]        // -> [hasDormant <= 0x00000000]
[04:29:14.722]      __var protType   = __protocol & 0x0000FFFF;
[04:29:14.722]        // -> [protType <= 0x00000002]
[04:29:14.722]    </block>
[04:29:14.722]    <control if="protType == 1" while="" timeout="0" info="">
[04:29:14.722]      // if-block "protType == 1"
[04:29:14.722]        // =>  FALSE
[04:29:14.722]      // skip if-block "protType == 1"
[04:29:14.722]    </control>
[04:29:14.722]    <control if="protType == 2" while="" timeout="0" info="">
[04:29:14.722]      // if-block "protType == 2"
[04:29:14.723]        // =>  TRUE
[04:29:14.723]      <control if="isSWJ" while="" timeout="0" info="">
[04:29:14.723]        // if-block "isSWJ"
[04:29:14.723]          // =>  TRUE
[04:29:14.723]        <control if="hasDormant" while="" timeout="0" info="">
[04:29:14.723]          // if-block "hasDormant"
[04:29:14.723]            // =>  FALSE
[04:29:14.723]          // skip if-block "hasDormant"
[04:29:14.723]        </control>
[04:29:14.723]        <control if="!hasDormant" while="" timeout="0" info="">
[04:29:14.723]          // if-block "!hasDormant"
[04:29:14.723]            // =>  TRUE
[04:29:14.724]          <block atomic="false" info="">
[04:29:14.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:29:14.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:29:14.725]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:29:14.730]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:29:14.730]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:29:14.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:29:14.734]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:29:14.737]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:29:14.737]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:29:14.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:29:14.742]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:29:14.742]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:29:14.742]          </block>
[04:29:14.742]          // end if-block "!hasDormant"
[04:29:14.745]        </control>
[04:29:14.745]        // end if-block "isSWJ"
[04:29:14.745]      </control>
[04:29:14.745]      <control if="!isSWJ" while="" timeout="0" info="">
[04:29:14.745]        // if-block "!isSWJ"
[04:29:14.747]          // =>  FALSE
[04:29:14.747]        // skip if-block "!isSWJ"
[04:29:14.747]      </control>
[04:29:14.747]      <block atomic="false" info="">
[04:29:14.747]        ReadDP(0x0);
[04:29:14.750]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:29:14.750]      </block>
[04:29:14.750]      // end if-block "protType == 2"
[04:29:14.750]    </control>
[04:29:14.754]  </sequence>
[04:29:14.754]  
[04:29:14.761]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:29:14.761]  
[04:29:14.761]  <debugvars>
[04:29:14.761]    // Pre-defined
[04:29:14.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:29:14.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:29:14.762]    __dp=0x00000000
[04:29:14.762]    __ap=0x00000000
[04:29:14.762]    __traceout=0x00000000      (Trace Disabled)
[04:29:14.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:29:14.762]    __FlashAddr=0x00000000
[04:29:14.762]    __FlashLen=0x00000000
[04:29:14.762]    __FlashArg=0x00000000
[04:29:14.762]    __FlashOp=0x00000000
[04:29:14.762]    __Result=0x00000000
[04:29:14.762]  </debugvars>
[04:29:14.763]  
[04:29:14.763]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:29:14.763]    <block atomic="false" info="">
[04:29:14.763]      __var SW_DP_ABORT       = 0x0;
[04:29:14.763]        // -> [SW_DP_ABORT <= 0x00000000]
[04:29:14.763]      __var DP_CTRL_STAT      = 0x4;
[04:29:14.763]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:29:14.763]      __var DP_SELECT         = 0x8;
[04:29:14.763]        // -> [DP_SELECT <= 0x00000008]
[04:29:14.763]      __var powered_down      = 0;
[04:29:14.763]        // -> [powered_down <= 0x00000000]
[04:29:14.763]      WriteDP(DP_SELECT, 0x00000000);
[04:29:14.766]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:29:14.766]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:29:14.768]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:29:14.768]        // -> [powered_down <= 0x00000001]
[04:29:14.770]    </block>
[04:29:14.770]    <control if="powered_down" while="" timeout="0" info="">
[04:29:14.770]      // if-block "powered_down"
[04:29:14.770]        // =>  TRUE
[04:29:14.770]      <block atomic="false" info="">
[04:29:14.770]        Message(0, "Debug/System power-up request sent");
[04:29:14.773]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:29:14.774]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:29:14.774]      </block>
[04:29:14.774]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:29:14.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:29:14.779]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:29:14.779]        // while-condition  =>  FALSE
[04:29:14.779]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:29:14.779]      </control>
[04:29:14.783]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:29:14.783]        // if-block "(__protocol & 0xFFFF) == 1"
[04:29:14.783]          // =>  FALSE
[04:29:14.783]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:29:14.783]      </control>
[04:29:14.783]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:29:14.783]        // if-block "(__protocol & 0xFFFF) == 2"
[04:29:14.783]          // =>  TRUE
[04:29:14.783]        <block atomic="false" info="">
[04:29:14.784]          Message(0, "executing SWD power up");
[04:29:14.785]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:29:14.789]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:29:14.789]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:29:14.791]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:29:14.791]        </block>
[04:29:14.791]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:29:14.791]      </control>
[04:29:14.791]      // end if-block "powered_down"
[04:29:14.791]    </control>
[04:29:14.791]    <block atomic="false" info="">
[04:29:14.791]      __var DEBUG_PORT_VAL    = 0;
[04:29:14.791]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:29:14.791]      __var ACCESS_POINT_VAL  = 0;
[04:29:14.791]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:29:14.791]      __ap = 1; 
[04:29:14.791]        // -> [__ap <= 0x00000001]
[04:29:14.791]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:29:14.795]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:29:14.799]      __ap = 4;
[04:29:14.799]        // -> [__ap <= 0x00000004]
[04:29:14.799]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:29:14.805]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:29:14.805]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:29:14.805]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:29:14.808]    </block>
[04:29:14.808]    <block atomic="false" info="">
[04:29:14.808]      __var nReset = 0x80;
[04:29:14.808]        // -> [nReset <= 0x00000080]
[04:29:14.808]      __var canReadPins = 0;
[04:29:14.808]        // -> [canReadPins <= 0x00000000]
[04:29:14.808]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:29:14.814]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:29:14.814]        // -> [canReadPins <= 0x00000001]
[04:29:14.814]    </block>
[04:29:14.814]    <control if="" while="1" timeout="200" info="">
[04:29:14.814]      // while "1"  (timeout="200")
[04:29:14.814]      // while-condition  =>  TRUE
[04:29:14.814]      // while "1"  (timeout="200")
[04:29:14.814]      // while-condition  =>  TRUE
[04:29:14.814]      // while "1"  (timeout="200")
[04:29:14.814]      // while-condition  =>  TRUE
[04:29:14.814]      // while "1"  (timeout="200")
[04:29:14.814]      // while-condition  =>  TRUE
[04:29:14.814]      // while "1"  (timeout="200")
[04:29:14.814]      // while-condition  =>  TRUE
[04:29:14.815]      // while "1"  (timeout="200")
[04:29:14.815]      // while-condition  =>  TRUE
[04:29:14.815]      // while "1"  (timeout="200")
[04:29:14.815]      // while-condition  =>  TRUE
[04:29:14.815]      // while "1"  (timeout="200")
[04:29:14.815]      // while-condition  =>  TRUE
[04:29:14.815]      // while "1"  (timeout="200")
[04:29:14.816]      // while-condition  =>  TRUE
[04:29:14.816]      // while "1"  (timeout="200")
[04:29:14.816]      // while  =>  TIMEOUT
[04:29:14.816]      // end while "1"
[04:29:14.816]    </control>
[04:29:14.816]    <control if="canReadPins" while="" timeout="0" info="">
[04:29:14.816]      // if-block "canReadPins"
[04:29:14.816]        // =>  TRUE
[04:29:14.816]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:29:14.816]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:29:14.821]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:29:14.821]        // while-condition  =>  FALSE
[04:29:14.821]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:29:14.821]      </control>
[04:29:14.821]      // end if-block "canReadPins"
[04:29:14.821]    </control>
[04:29:14.821]    <control if="!canReadPins" while="" timeout="0" info="">
[04:29:14.821]      // if-block "!canReadPins"
[04:29:14.821]        // =>  FALSE
[04:29:14.821]      // skip if-block "!canReadPins"
[04:29:14.821]    </control>
[04:29:14.821]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:29:14.821]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:29:14.821]        // =>  TRUE
[04:29:14.821]      <block atomic="false" info="">
[04:29:14.822]        WriteAP(0x00, 0x190008);
[04:29:14.825]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:29:14.825]        WriteAP(0xF0, 0x01);
[04:29:14.830]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:29:14.833]      </block>
[04:29:14.833]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:29:14.833]    </control>
[04:29:14.833]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:29:14.833]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:29:14.833]        // =>  FALSE
[04:29:14.833]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:29:14.833]    </control>
[04:29:14.833]    <block atomic="false" info="">
[04:29:14.833]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:29:14.840]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:29:14.840]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:29:14.840]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:29:14.842]      __ap = 0; //lets make sure we reset the access point selection
[04:29:14.842]        // -> [__ap <= 0x00000000]
[04:29:14.842]    </block>
[04:29:14.842]  </sequence>
[04:29:14.842]  
[04:29:14.893]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:29:14.893]  
[04:29:14.893]  <debugvars>
[04:29:14.893]    // Pre-defined
[04:29:14.893]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:29:14.893]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:29:14.893]    __dp=0x00000000
[04:29:14.893]    __ap=0x00000000
[04:29:14.893]    __traceout=0x00000000      (Trace Disabled)
[04:29:14.893]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:29:14.893]    __FlashAddr=0x00000000
[04:29:14.893]    __FlashLen=0x00000000
[04:29:14.893]    __FlashArg=0x00000000
[04:29:14.893]    __FlashOp=0x00000000
[04:29:14.893]    __Result=0x00000000
[04:29:14.893]  </debugvars>
[04:29:14.893]  
[04:29:14.893]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:29:14.893]    <block atomic="false" info="">
[04:29:14.893]      __var deviceID = 0;
[04:29:14.893]        // -> [deviceID <= 0x00000000]
[04:29:14.893]      __var version = 0;
[04:29:14.897]        // -> [version <= 0x00000000]
[04:29:14.897]      __var partNum = 0;
[04:29:14.897]        // -> [partNum <= 0x00000000]
[04:29:14.897]      __var manuf = 0;
[04:29:14.897]        // -> [manuf <= 0x00000000]
[04:29:14.897]      __var isMSPM0G1X0X_G3X0X = 0;
[04:29:14.897]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:29:14.897]      __var isProduction = 0;
[04:29:14.897]        // -> [isProduction <= 0x00000000]
[04:29:14.897]      __var continueId = 0;
[04:29:14.897]        // -> [continueId <= 0x00000000]
[04:29:14.897]      deviceID =   Read32(0x41C40004);
[04:29:14.905]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:29:14.905]        // -> [deviceID <= 0x2BB8802F]
[04:29:14.905]      version = deviceID >> 28;
[04:29:14.905]        // -> [version <= 0x00000002]
[04:29:14.905]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:29:14.905]        // -> [partNum <= 0x0000BB88]
[04:29:14.905]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:29:14.905]        // -> [manuf <= 0x00000017]
[04:29:14.905]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:29:14.909]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:29:14.909]      isProduction = (version > 0);
[04:29:14.909]        // -> [isProduction <= 0x00000001]
[04:29:14.909]    </block>
[04:29:14.909]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:29:14.909]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:29:14.909]        // =>  FALSE
[04:29:14.909]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:29:14.909]    </control>
[04:29:14.909]    <control if="continueId == 4" while="" timeout="0" info="">
[04:29:14.909]      // if-block "continueId == 4"
[04:29:14.909]        // =>  FALSE
[04:29:14.909]      // skip if-block "continueId == 4"
[04:29:14.909]    </control>
[04:29:14.909]    <control if="!isProduction" while="" timeout="0" info="">
[04:29:14.909]      // if-block "!isProduction"
[04:29:14.909]        // =>  FALSE
[04:29:14.909]      // skip if-block "!isProduction"
[04:29:14.909]    </control>
[04:29:14.909]  </sequence>
[04:29:14.909]  
[04:33:30.193]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:33:30.193]  
[04:33:30.204]  <debugvars>
[04:33:30.204]    // Pre-defined
[04:33:30.204]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:33:30.204]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:33:30.204]    __dp=0x00000000
[04:33:30.204]    __ap=0x00000000
[04:33:30.205]    __traceout=0x00000000      (Trace Disabled)
[04:33:30.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:33:30.205]    __FlashAddr=0x00000000
[04:33:30.205]    __FlashLen=0x00000000
[04:33:30.205]    __FlashArg=0x00000000
[04:33:30.205]    __FlashOp=0x00000000
[04:33:30.205]    __Result=0x00000000
[04:33:30.205]  </debugvars>
[04:33:30.205]  
[04:33:30.205]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:33:30.205]    <block atomic="false" info="">
[04:33:30.205]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:33:30.205]        // -> [isSWJ <= 0x00000001]
[04:33:30.205]      __var hasDormant = __protocol & 0x00020000;
[04:33:30.205]        // -> [hasDormant <= 0x00000000]
[04:33:30.205]      __var protType   = __protocol & 0x0000FFFF;
[04:33:30.205]        // -> [protType <= 0x00000002]
[04:33:30.205]    </block>
[04:33:30.205]    <control if="protType == 1" while="" timeout="0" info="">
[04:33:30.205]      // if-block "protType == 1"
[04:33:30.205]        // =>  FALSE
[04:33:30.205]      // skip if-block "protType == 1"
[04:33:30.205]    </control>
[04:33:30.205]    <control if="protType == 2" while="" timeout="0" info="">
[04:33:30.205]      // if-block "protType == 2"
[04:33:30.205]        // =>  TRUE
[04:33:30.207]      <control if="isSWJ" while="" timeout="0" info="">
[04:33:30.207]        // if-block "isSWJ"
[04:33:30.207]          // =>  TRUE
[04:33:30.207]        <control if="hasDormant" while="" timeout="0" info="">
[04:33:30.207]          // if-block "hasDormant"
[04:33:30.207]            // =>  FALSE
[04:33:30.207]          // skip if-block "hasDormant"
[04:33:30.207]        </control>
[04:33:30.207]        <control if="!hasDormant" while="" timeout="0" info="">
[04:33:30.209]          // if-block "!hasDormant"
[04:33:30.209]            // =>  TRUE
[04:33:30.209]          <block atomic="false" info="">
[04:33:30.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:33:30.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:33:30.210]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:33:30.213]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:33:30.213]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:33:30.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:33:30.217]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:33:30.226]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:33:30.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:33:30.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:33:30.229]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:33:30.232]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:33:30.232]          </block>
[04:33:30.232]          // end if-block "!hasDormant"
[04:33:30.233]        </control>
[04:33:30.233]        // end if-block "isSWJ"
[04:33:30.233]      </control>
[04:33:30.233]      <control if="!isSWJ" while="" timeout="0" info="">
[04:33:30.233]        // if-block "!isSWJ"
[04:33:30.233]          // =>  FALSE
[04:33:30.233]        // skip if-block "!isSWJ"
[04:33:30.233]      </control>
[04:33:30.233]      <block atomic="false" info="">
[04:33:30.234]        ReadDP(0x0);
[04:33:30.240]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:33:30.240]      </block>
[04:33:30.240]      // end if-block "protType == 2"
[04:33:30.241]    </control>
[04:33:30.241]  </sequence>
[04:33:30.241]  
[04:33:30.247]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:33:30.247]  
[04:33:30.247]  <debugvars>
[04:33:30.247]    // Pre-defined
[04:33:30.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:33:30.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:33:30.248]    __dp=0x00000000
[04:33:30.248]    __ap=0x00000000
[04:33:30.248]    __traceout=0x00000000      (Trace Disabled)
[04:33:30.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:33:30.248]    __FlashAddr=0x00000000
[04:33:30.248]    __FlashLen=0x00000000
[04:33:30.248]    __FlashArg=0x00000000
[04:33:30.248]    __FlashOp=0x00000000
[04:33:30.249]    __Result=0x00000000
[04:33:30.249]  </debugvars>
[04:33:30.249]  
[04:33:30.249]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:33:30.249]    <block atomic="false" info="">
[04:33:30.249]      __var SW_DP_ABORT       = 0x0;
[04:33:30.249]        // -> [SW_DP_ABORT <= 0x00000000]
[04:33:30.249]      __var DP_CTRL_STAT      = 0x4;
[04:33:30.249]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:33:30.249]      __var DP_SELECT         = 0x8;
[04:33:30.250]        // -> [DP_SELECT <= 0x00000008]
[04:33:30.250]      __var powered_down      = 0;
[04:33:30.250]        // -> [powered_down <= 0x00000000]
[04:33:30.250]      WriteDP(DP_SELECT, 0x00000000);
[04:33:30.254]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:33:30.254]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:33:30.257]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:33:30.257]        // -> [powered_down <= 0x00000001]
[04:33:30.257]    </block>
[04:33:30.257]    <control if="powered_down" while="" timeout="0" info="">
[04:33:30.257]      // if-block "powered_down"
[04:33:30.257]        // =>  TRUE
[04:33:30.257]      <block atomic="false" info="">
[04:33:30.258]        Message(0, "Debug/System power-up request sent");
[04:33:30.260]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:33:30.263]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:33:30.263]      </block>
[04:33:30.263]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:33:30.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:33:30.264]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:33:30.264]        // while-condition  =>  FALSE
[04:33:30.264]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:33:30.264]      </control>
[04:33:30.264]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:33:30.267]        // if-block "(__protocol & 0xFFFF) == 1"
[04:33:30.267]          // =>  FALSE
[04:33:30.267]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:33:30.267]      </control>
[04:33:30.267]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:33:30.267]        // if-block "(__protocol & 0xFFFF) == 2"
[04:33:30.267]          // =>  TRUE
[04:33:30.267]        <block atomic="false" info="">
[04:33:30.267]          Message(0, "executing SWD power up");
[04:33:30.269]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:33:30.273]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:33:30.273]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:33:30.277]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:33:30.277]        </block>
[04:33:30.277]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:33:30.277]      </control>
[04:33:30.277]      // end if-block "powered_down"
[04:33:30.277]    </control>
[04:33:30.277]    <block atomic="false" info="">
[04:33:30.277]      __var DEBUG_PORT_VAL    = 0;
[04:33:30.279]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:33:30.279]      __var ACCESS_POINT_VAL  = 0;
[04:33:30.279]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:33:30.279]      __ap = 1; 
[04:33:30.279]        // -> [__ap <= 0x00000001]
[04:33:30.279]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:33:30.286]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:33:30.286]      __ap = 4;
[04:33:30.286]        // -> [__ap <= 0x00000004]
[04:33:30.286]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:33:30.292]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:33:30.292]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:33:30.292]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:33:30.293]    </block>
[04:33:30.293]    <block atomic="false" info="">
[04:33:30.293]      __var nReset = 0x80;
[04:33:30.293]        // -> [nReset <= 0x00000080]
[04:33:30.293]      __var canReadPins = 0;
[04:33:30.293]        // -> [canReadPins <= 0x00000000]
[04:33:30.293]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:33:30.297]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:33:30.298]        // -> [canReadPins <= 0x00000001]
[04:33:30.298]    </block>
[04:33:30.298]    <control if="" while="1" timeout="200" info="">
[04:33:30.298]      // while "1"  (timeout="200")
[04:33:30.298]      // while-condition  =>  TRUE
[04:33:30.298]      // while "1"  (timeout="200")
[04:33:30.298]      // while-condition  =>  TRUE
[04:33:30.298]      // while "1"  (timeout="200")
[04:33:30.298]      // while-condition  =>  TRUE
[04:33:30.298]      // while "1"  (timeout="200")
[04:33:30.298]      // while-condition  =>  TRUE
[04:33:30.298]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.299]      // while "1"  (timeout="200")
[04:33:30.299]      // while-condition  =>  TRUE
[04:33:30.301]      // while "1"  (timeout="200")
[04:33:30.301]      // while  =>  TIMEOUT
[04:33:30.301]      // end while "1"
[04:33:30.301]    </control>
[04:33:30.301]    <control if="canReadPins" while="" timeout="0" info="">
[04:33:30.301]      // if-block "canReadPins"
[04:33:30.301]        // =>  TRUE
[04:33:30.301]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:33:30.301]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:33:30.304]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:33:30.304]        // while-condition  =>  FALSE
[04:33:30.304]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:33:30.304]      </control>
[04:33:30.304]      // end if-block "canReadPins"
[04:33:30.304]    </control>
[04:33:30.304]    <control if="!canReadPins" while="" timeout="0" info="">
[04:33:30.304]      // if-block "!canReadPins"
[04:33:30.304]        // =>  FALSE
[04:33:30.304]      // skip if-block "!canReadPins"
[04:33:30.304]    </control>
[04:33:30.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:33:30.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:33:30.304]        // =>  TRUE
[04:33:30.304]      <block atomic="false" info="">
[04:33:30.307]        WriteAP(0x00, 0x190008);
[04:33:30.310]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:33:30.310]        WriteAP(0xF0, 0x01);
[04:33:30.318]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:33:30.318]      </block>
[04:33:30.318]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:33:30.318]    </control>
[04:33:30.318]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:33:30.318]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:33:30.318]        // =>  FALSE
[04:33:30.318]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:33:30.318]    </control>
[04:33:30.318]    <block atomic="false" info="">
[04:33:30.318]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:33:30.324]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:33:30.324]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:33:30.324]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:33:30.327]      __ap = 0; //lets make sure we reset the access point selection
[04:33:30.327]        // -> [__ap <= 0x00000000]
[04:33:30.327]    </block>
[04:33:30.327]  </sequence>
[04:33:30.327]  
[04:33:30.369]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:33:30.369]  
[04:33:30.369]  <debugvars>
[04:33:30.369]    // Pre-defined
[04:33:30.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:33:30.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:33:30.369]    __dp=0x00000000
[04:33:30.369]    __ap=0x00000000
[04:33:30.369]    __traceout=0x00000000      (Trace Disabled)
[04:33:30.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:33:30.369]    __FlashAddr=0x00000000
[04:33:30.369]    __FlashLen=0x00000000
[04:33:30.369]    __FlashArg=0x00000000
[04:33:30.369]    __FlashOp=0x00000000
[04:33:30.369]    __Result=0x00000000
[04:33:30.369]  </debugvars>
[04:33:30.369]  
[04:33:30.369]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:33:30.369]    <block atomic="false" info="">
[04:33:30.369]      __var deviceID = 0;
[04:33:30.369]        // -> [deviceID <= 0x00000000]
[04:33:30.369]      __var version = 0;
[04:33:30.369]        // -> [version <= 0x00000000]
[04:33:30.369]      __var partNum = 0;
[04:33:30.369]        // -> [partNum <= 0x00000000]
[04:33:30.369]      __var manuf = 0;
[04:33:30.369]        // -> [manuf <= 0x00000000]
[04:33:30.369]      __var isMSPM0G1X0X_G3X0X = 0;
[04:33:30.369]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:33:30.369]      __var isProduction = 0;
[04:33:30.369]        // -> [isProduction <= 0x00000000]
[04:33:30.369]      __var continueId = 0;
[04:33:30.369]        // -> [continueId <= 0x00000000]
[04:33:30.369]      deviceID =   Read32(0x41C40004);
[04:33:30.381]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:33:30.381]        // -> [deviceID <= 0x2BB8802F]
[04:33:30.381]      version = deviceID >> 28;
[04:33:30.381]        // -> [version <= 0x00000002]
[04:33:30.381]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:33:30.381]        // -> [partNum <= 0x0000BB88]
[04:33:30.381]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:33:30.381]        // -> [manuf <= 0x00000017]
[04:33:30.381]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:33:30.381]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:33:30.381]      isProduction = (version > 0);
[04:33:30.381]        // -> [isProduction <= 0x00000001]
[04:33:30.381]    </block>
[04:33:30.381]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:33:30.381]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:33:30.381]        // =>  FALSE
[04:33:30.381]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:33:30.381]    </control>
[04:33:30.381]    <control if="continueId == 4" while="" timeout="0" info="">
[04:33:30.381]      // if-block "continueId == 4"
[04:33:30.386]        // =>  FALSE
[04:33:30.386]      // skip if-block "continueId == 4"
[04:33:30.386]    </control>
[04:33:30.386]    <control if="!isProduction" while="" timeout="0" info="">
[04:33:30.386]      // if-block "!isProduction"
[04:33:30.386]        // =>  FALSE
[04:33:30.386]      // skip if-block "!isProduction"
[04:33:30.386]    </control>
[04:33:30.386]  </sequence>
[04:33:30.386]  
[04:34:49.913]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:34:49.913]  
[04:34:49.913]  <debugvars>
[04:34:49.914]    // Pre-defined
[04:34:49.914]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:34:49.914]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:34:49.914]    __dp=0x00000000
[04:34:49.914]    __ap=0x00000000
[04:34:49.914]    __traceout=0x00000000      (Trace Disabled)
[04:34:49.914]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:34:49.914]    __FlashAddr=0x00000000
[04:34:49.914]    __FlashLen=0x00000000
[04:34:49.914]    __FlashArg=0x00000000
[04:34:49.914]    __FlashOp=0x00000000
[04:34:49.915]    __Result=0x00000000
[04:34:49.915]  </debugvars>
[04:34:49.915]  
[04:34:49.915]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:34:49.915]    <block atomic="false" info="">
[04:34:49.915]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:34:49.915]        // -> [isSWJ <= 0x00000001]
[04:34:49.915]      __var hasDormant = __protocol & 0x00020000;
[04:34:49.915]        // -> [hasDormant <= 0x00000000]
[04:34:49.915]      __var protType   = __protocol & 0x0000FFFF;
[04:34:49.915]        // -> [protType <= 0x00000002]
[04:34:49.915]    </block>
[04:34:49.915]    <control if="protType == 1" while="" timeout="0" info="">
[04:34:49.915]      // if-block "protType == 1"
[04:34:49.915]        // =>  FALSE
[04:34:49.915]      // skip if-block "protType == 1"
[04:34:49.917]    </control>
[04:34:49.917]    <control if="protType == 2" while="" timeout="0" info="">
[04:34:49.917]      // if-block "protType == 2"
[04:34:49.917]        // =>  TRUE
[04:34:49.917]      <control if="isSWJ" while="" timeout="0" info="">
[04:34:49.917]        // if-block "isSWJ"
[04:34:49.917]          // =>  TRUE
[04:34:49.917]        <control if="hasDormant" while="" timeout="0" info="">
[04:34:49.917]          // if-block "hasDormant"
[04:34:49.917]            // =>  FALSE
[04:34:49.917]          // skip if-block "hasDormant"
[04:34:49.917]        </control>
[04:34:49.917]        <control if="!hasDormant" while="" timeout="0" info="">
[04:34:49.917]          // if-block "!hasDormant"
[04:34:49.917]            // =>  TRUE
[04:34:49.917]          <block atomic="false" info="">
[04:34:49.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:34:49.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:34:49.922]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:34:49.928]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:34:49.928]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:34:49.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:34:49.936]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:34:49.936]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:34:49.936]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:34:49.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:34:49.942]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:34:49.944]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:34:49.944]          </block>
[04:34:49.944]          // end if-block "!hasDormant"
[04:34:49.944]        </control>
[04:34:49.944]        // end if-block "isSWJ"
[04:34:49.944]      </control>
[04:34:49.944]      <control if="!isSWJ" while="" timeout="0" info="">
[04:34:49.944]        // if-block "!isSWJ"
[04:34:49.944]          // =>  FALSE
[04:34:49.944]        // skip if-block "!isSWJ"
[04:34:49.944]      </control>
[04:34:49.944]      <block atomic="false" info="">
[04:34:49.944]        ReadDP(0x0);
[04:34:49.948]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:34:49.952]      </block>
[04:34:49.952]      // end if-block "protType == 2"
[04:34:49.952]    </control>
[04:34:49.952]  </sequence>
[04:34:49.952]  
[04:34:49.956]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:34:49.956]  
[04:34:49.956]  <debugvars>
[04:34:49.956]    // Pre-defined
[04:34:49.956]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:34:49.956]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:34:49.956]    __dp=0x00000000
[04:34:49.960]    __ap=0x00000000
[04:34:49.960]    __traceout=0x00000000      (Trace Disabled)
[04:34:49.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:34:49.960]    __FlashAddr=0x00000000
[04:34:49.960]    __FlashLen=0x00000000
[04:34:49.960]    __FlashArg=0x00000000
[04:34:49.960]    __FlashOp=0x00000000
[04:34:49.960]    __Result=0x00000000
[04:34:49.960]  </debugvars>
[04:34:49.960]  
[04:34:49.960]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:34:49.960]    <block atomic="false" info="">
[04:34:49.960]      __var SW_DP_ABORT       = 0x0;
[04:34:49.960]        // -> [SW_DP_ABORT <= 0x00000000]
[04:34:49.960]      __var DP_CTRL_STAT      = 0x4;
[04:34:49.960]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:34:49.960]      __var DP_SELECT         = 0x8;
[04:34:49.960]        // -> [DP_SELECT <= 0x00000008]
[04:34:49.960]      __var powered_down      = 0;
[04:34:49.962]        // -> [powered_down <= 0x00000000]
[04:34:49.962]      WriteDP(DP_SELECT, 0x00000000);
[04:34:49.964]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:34:49.964]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:34:49.968]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:34:49.968]        // -> [powered_down <= 0x00000001]
[04:34:49.968]    </block>
[04:34:49.968]    <control if="powered_down" while="" timeout="0" info="">
[04:34:49.968]      // if-block "powered_down"
[04:34:49.968]        // =>  TRUE
[04:34:49.968]      <block atomic="false" info="">
[04:34:49.968]        Message(0, "Debug/System power-up request sent");
[04:34:49.972]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:34:49.976]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:34:49.976]      </block>
[04:34:49.976]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:34:49.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:34:49.976]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:34:49.976]        // while-condition  =>  FALSE
[04:34:49.976]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:34:49.980]      </control>
[04:34:49.980]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:34:49.980]        // if-block "(__protocol & 0xFFFF) == 1"
[04:34:49.980]          // =>  FALSE
[04:34:49.980]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:34:49.980]      </control>
[04:34:49.980]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:34:49.980]        // if-block "(__protocol & 0xFFFF) == 2"
[04:34:49.980]          // =>  TRUE
[04:34:49.980]        <block atomic="false" info="">
[04:34:49.980]          Message(0, "executing SWD power up");
[04:34:49.982]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:34:49.986]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:34:49.986]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:34:49.993]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:34:49.993]        </block>
[04:34:49.993]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:34:49.994]      </control>
[04:34:49.994]      // end if-block "powered_down"
[04:34:49.994]    </control>
[04:34:49.994]    <block atomic="false" info="">
[04:34:49.994]      __var DEBUG_PORT_VAL    = 0;
[04:34:49.994]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:34:49.994]      __var ACCESS_POINT_VAL  = 0;
[04:34:49.994]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:34:49.994]      __ap = 1; 
[04:34:49.994]        // -> [__ap <= 0x00000001]
[04:34:49.994]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:34:50.001]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:34:50.001]      __ap = 4;
[04:34:50.001]        // -> [__ap <= 0x00000004]
[04:34:50.001]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:34:50.005]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:34:50.005]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:34:50.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:34:50.010]    </block>
[04:34:50.010]    <block atomic="false" info="">
[04:34:50.010]      __var nReset = 0x80;
[04:34:50.010]        // -> [nReset <= 0x00000080]
[04:34:50.010]      __var canReadPins = 0;
[04:34:50.010]        // -> [canReadPins <= 0x00000000]
[04:34:50.010]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:34:50.013]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:34:50.013]        // -> [canReadPins <= 0x00000001]
[04:34:50.013]    </block>
[04:34:50.013]    <control if="" while="1" timeout="200" info="">
[04:34:50.013]      // while "1"  (timeout="200")
[04:34:50.013]      // while-condition  =>  TRUE
[04:34:50.013]      // while "1"  (timeout="200")
[04:34:50.013]      // while-condition  =>  TRUE
[04:34:50.013]      // while "1"  (timeout="200")
[04:34:50.013]      // while-condition  =>  TRUE
[04:34:50.013]      // while "1"  (timeout="200")
[04:34:50.013]      // while-condition  =>  TRUE
[04:34:50.013]      // while "1"  (timeout="200")
[04:34:50.013]      // while-condition  =>  TRUE
[04:34:50.013]      // while "1"  (timeout="200")
[04:34:50.013]      // while-condition  =>  TRUE
[04:34:50.017]      // while "1"  (timeout="200")
[04:34:50.017]      // while-condition  =>  TRUE
[04:34:50.017]      // while "1"  (timeout="200")
[04:34:50.017]      // while-condition  =>  TRUE
[04:34:50.017]      // while "1"  (timeout="200")
[04:34:50.017]      // while-condition  =>  TRUE
[04:34:50.018]      // while "1"  (timeout="200")
[04:34:50.018]      // while-condition  =>  TRUE
[04:34:50.018]      // while "1"  (timeout="200")
[04:34:50.018]      // while-condition  =>  TRUE
[04:34:50.018]      // while "1"  (timeout="200")
[04:34:50.018]      // while-condition  =>  TRUE
[04:34:50.018]      // while "1"  (timeout="200")
[04:34:50.018]      // while-condition  =>  TRUE
[04:34:50.018]      // while "1"  (timeout="200")
[04:34:50.018]      // while-condition  =>  TRUE
[04:34:50.018]      // while "1"  (timeout="200")
[04:34:50.018]      // while-condition  =>  TRUE
[04:34:50.019]      // while "1"  (timeout="200")
[04:34:50.019]      // while  =>  TIMEOUT
[04:34:50.019]      // end while "1"
[04:34:50.019]    </control>
[04:34:50.019]    <control if="canReadPins" while="" timeout="0" info="">
[04:34:50.019]      // if-block "canReadPins"
[04:34:50.019]        // =>  TRUE
[04:34:50.019]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:34:50.019]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:34:50.021]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:34:50.021]        // while-condition  =>  FALSE
[04:34:50.021]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:34:50.023]      </control>
[04:34:50.023]      // end if-block "canReadPins"
[04:34:50.023]    </control>
[04:34:50.023]    <control if="!canReadPins" while="" timeout="0" info="">
[04:34:50.023]      // if-block "!canReadPins"
[04:34:50.023]        // =>  FALSE
[04:34:50.023]      // skip if-block "!canReadPins"
[04:34:50.023]    </control>
[04:34:50.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:34:50.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:34:50.023]        // =>  TRUE
[04:34:50.023]      <block atomic="false" info="">
[04:34:50.023]        WriteAP(0x00, 0x190008);
[04:34:50.026]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:34:50.027]        WriteAP(0xF0, 0x01);
[04:34:50.046]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:34:50.046]      </block>
[04:34:50.046]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:34:50.046]    </control>
[04:34:50.046]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:34:50.046]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:34:50.046]        // =>  FALSE
[04:34:50.046]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:34:50.046]    </control>
[04:34:50.046]    <block atomic="false" info="">
[04:34:50.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:34:50.053]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:34:50.053]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:34:50.053]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:34:50.054]      __ap = 0; //lets make sure we reset the access point selection
[04:34:50.054]        // -> [__ap <= 0x00000000]
[04:34:50.054]    </block>
[04:34:50.054]  </sequence>
[04:34:50.054]  
[04:34:50.098]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:34:50.098]  
[04:34:50.098]  <debugvars>
[04:34:50.098]    // Pre-defined
[04:34:50.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:34:50.098]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:34:50.098]    __dp=0x00000000
[04:34:50.098]    __ap=0x00000000
[04:34:50.098]    __traceout=0x00000000      (Trace Disabled)
[04:34:50.098]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:34:50.098]    __FlashAddr=0x00000000
[04:34:50.098]    __FlashLen=0x00000000
[04:34:50.098]    __FlashArg=0x00000000
[04:34:50.098]    __FlashOp=0x00000000
[04:34:50.101]    __Result=0x00000000
[04:34:50.102]  </debugvars>
[04:34:50.102]  
[04:34:50.102]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:34:50.102]    <block atomic="false" info="">
[04:34:50.102]      __var deviceID = 0;
[04:34:50.102]        // -> [deviceID <= 0x00000000]
[04:34:50.102]      __var version = 0;
[04:34:50.102]        // -> [version <= 0x00000000]
[04:34:50.102]      __var partNum = 0;
[04:34:50.102]        // -> [partNum <= 0x00000000]
[04:34:50.102]      __var manuf = 0;
[04:34:50.102]        // -> [manuf <= 0x00000000]
[04:34:50.103]      __var isMSPM0G1X0X_G3X0X = 0;
[04:34:50.103]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:34:50.103]      __var isProduction = 0;
[04:34:50.103]        // -> [isProduction <= 0x00000000]
[04:34:50.103]      __var continueId = 0;
[04:34:50.103]        // -> [continueId <= 0x00000000]
[04:34:50.103]      deviceID =   Read32(0x41C40004);
[04:34:50.115]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:34:50.115]        // -> [deviceID <= 0x2BB8802F]
[04:34:50.115]      version = deviceID >> 28;
[04:34:50.115]        // -> [version <= 0x00000002]
[04:34:50.115]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:34:50.115]        // -> [partNum <= 0x0000BB88]
[04:34:50.115]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:34:50.115]        // -> [manuf <= 0x00000017]
[04:34:50.115]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:34:50.115]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:34:50.115]      isProduction = (version > 0);
[04:34:50.117]        // -> [isProduction <= 0x00000001]
[04:34:50.117]    </block>
[04:34:50.117]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:34:50.117]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:34:50.117]        // =>  FALSE
[04:34:50.117]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:34:50.117]    </control>
[04:34:50.117]    <control if="continueId == 4" while="" timeout="0" info="">
[04:34:50.117]      // if-block "continueId == 4"
[04:34:50.117]        // =>  FALSE
[04:34:50.117]      // skip if-block "continueId == 4"
[04:34:50.117]    </control>
[04:34:50.117]    <control if="!isProduction" while="" timeout="0" info="">
[04:34:50.117]      // if-block "!isProduction"
[04:34:50.117]        // =>  FALSE
[04:34:50.117]      // skip if-block "!isProduction"
[04:34:50.117]    </control>
[04:34:50.117]  </sequence>
[04:34:50.119]  
