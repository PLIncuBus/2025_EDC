/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0019.log
 *  Created     : 16:31:31 (26/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[16:31:31.472]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:31:31.472]  
[16:31:31.472]  <debugvars>
[16:31:31.472]    // Pre-defined
[16:31:31.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:31.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:31.472]    __dp=0x00000000
[16:31:31.472]    __ap=0x00000000
[16:31:31.472]    __traceout=0x00000000      (Trace Disabled)
[16:31:31.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:31.472]    __FlashAddr=0x00000000
[16:31:31.472]    __FlashLen=0x00000000
[16:31:31.472]    __FlashArg=0x00000000
[16:31:31.472]    __FlashOp=0x00000000
[16:31:31.472]    __Result=0x00000000
[16:31:31.472]  </debugvars>
[16:31:31.472]  
[16:31:31.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:31:31.472]    <block atomic="false" info="">
[16:31:31.472]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:31:31.472]        // -> [isSWJ <= 0x00000001]
[16:31:31.472]      __var hasDormant = __protocol & 0x00020000;
[16:31:31.472]        // -> [hasDormant <= 0x00000000]
[16:31:31.472]      __var protType   = __protocol & 0x0000FFFF;
[16:31:31.472]        // -> [protType <= 0x00000002]
[16:31:31.472]    </block>
[16:31:31.472]    <control if="protType == 1" while="" timeout="0" info="">
[16:31:31.472]      // if-block "protType == 1"
[16:31:31.472]        // =>  FALSE
[16:31:31.472]      // skip if-block "protType == 1"
[16:31:31.472]    </control>
[16:31:31.472]    <control if="protType == 2" while="" timeout="0" info="">
[16:31:31.472]      // if-block "protType == 2"
[16:31:31.472]        // =>  TRUE
[16:31:31.472]      <control if="isSWJ" while="" timeout="0" info="">
[16:31:31.472]        // if-block "isSWJ"
[16:31:31.472]          // =>  TRUE
[16:31:31.472]        <control if="hasDormant" while="" timeout="0" info="">
[16:31:31.472]          // if-block "hasDormant"
[16:31:31.472]            // =>  FALSE
[16:31:31.472]          // skip if-block "hasDormant"
[16:31:31.472]        </control>
[16:31:31.472]        <control if="!hasDormant" while="" timeout="0" info="">
[16:31:31.472]          // if-block "!hasDormant"
[16:31:31.472]            // =>  TRUE
[16:31:31.472]          <block atomic="false" info="">
[16:31:31.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:31:31.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:31.482]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:31:31.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:31:31.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:31:31.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:31.482]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:31:31.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:31:31.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:31:31.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:31:31.482]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:31:31.482]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:31:31.482]          </block>
[16:31:31.482]          // end if-block "!hasDormant"
[16:31:31.482]        </control>
[16:31:31.482]        // end if-block "isSWJ"
[16:31:31.482]      </control>
[16:31:31.482]      <control if="!isSWJ" while="" timeout="0" info="">
[16:31:31.482]        // if-block "!isSWJ"
[16:31:31.482]          // =>  FALSE
[16:31:31.482]        // skip if-block "!isSWJ"
[16:31:31.482]      </control>
[16:31:31.482]      <block atomic="false" info="">
[16:31:31.482]        ReadDP(0x0);
[16:31:31.492]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:31:31.492]      </block>
[16:31:31.492]      // end if-block "protType == 2"
[16:31:31.492]    </control>
[16:31:31.492]  </sequence>
[16:31:31.492]  
[16:31:31.492]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:31:31.492]  
[16:31:31.492]  <debugvars>
[16:31:31.492]    // Pre-defined
[16:31:31.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:31.492]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:31.492]    __dp=0x00000000
[16:31:31.492]    __ap=0x00000000
[16:31:31.492]    __traceout=0x00000000      (Trace Disabled)
[16:31:31.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:31.492]    __FlashAddr=0x00000000
[16:31:31.492]    __FlashLen=0x00000000
[16:31:31.492]    __FlashArg=0x00000000
[16:31:31.492]    __FlashOp=0x00000000
[16:31:31.492]    __Result=0x00000000
[16:31:31.492]  </debugvars>
[16:31:31.492]  
[16:31:31.492]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:31:31.492]    <block atomic="false" info="">
[16:31:31.492]      __var SW_DP_ABORT       = 0x0;
[16:31:31.492]        // -> [SW_DP_ABORT <= 0x00000000]
[16:31:31.492]      __var DP_CTRL_STAT      = 0x4;
[16:31:31.492]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:31:31.492]      __var DP_SELECT         = 0x8;
[16:31:31.492]        // -> [DP_SELECT <= 0x00000008]
[16:31:31.492]      __var powered_down      = 0;
[16:31:31.492]        // -> [powered_down <= 0x00000000]
[16:31:31.492]      WriteDP(DP_SELECT, 0x00000000);
[16:31:31.492]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:31:31.492]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:31:31.492]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:31:31.492]        // -> [powered_down <= 0x00000001]
[16:31:31.492]    </block>
[16:31:31.492]    <control if="powered_down" while="" timeout="0" info="">
[16:31:31.492]      // if-block "powered_down"
[16:31:31.492]        // =>  TRUE
[16:31:31.492]      <block atomic="false" info="">
[16:31:31.502]        Message(0, "Debug/System power-up request sent");
[16:31:31.502]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:31:31.502]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:31:31.502]      </block>
[16:31:31.502]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:31:31.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:31:31.502]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:31:31.502]        // while-condition  =>  FALSE
[16:31:31.502]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:31:31.502]      </control>
[16:31:31.502]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:31:31.502]        // if-block "(__protocol & 0xFFFF) == 1"
[16:31:31.502]          // =>  FALSE
[16:31:31.502]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:31:31.502]      </control>
[16:31:31.512]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:31:31.512]        // if-block "(__protocol & 0xFFFF) == 2"
[16:31:31.512]          // =>  TRUE
[16:31:31.512]        <block atomic="false" info="">
[16:31:31.512]          Message(0, "executing SWD power up");
[16:31:31.512]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:31:31.512]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:31:31.512]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:31:31.512]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:31:31.512]        </block>
[16:31:31.512]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:31:31.512]      </control>
[16:31:31.512]      // end if-block "powered_down"
[16:31:31.512]    </control>
[16:31:31.512]    <block atomic="false" info="">
[16:31:31.512]      __var DEBUG_PORT_VAL    = 0;
[16:31:31.512]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:31:31.512]      __var ACCESS_POINT_VAL  = 0;
[16:31:31.512]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:31:31.512]      __ap = 1; 
[16:31:31.512]        // -> [__ap <= 0x00000001]
[16:31:31.512]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:31:31.522]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:31:31.522]      __ap = 4;
[16:31:31.522]        // -> [__ap <= 0x00000004]
[16:31:31.522]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:31:31.522]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:31:31.522]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:31:31.522]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:31:31.532]    </block>
[16:31:31.532]    <block atomic="false" info="">
[16:31:31.532]      __var nReset = 0x80;
[16:31:31.532]        // -> [nReset <= 0x00000080]
[16:31:31.532]      __var canReadPins = 0;
[16:31:31.532]        // -> [canReadPins <= 0x00000000]
[16:31:31.532]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:31:31.532]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:31:31.532]        // -> [canReadPins <= 0x00000001]
[16:31:31.532]    </block>
[16:31:31.532]    <control if="" while="1" timeout="200" info="">
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.532]      // while-condition  =>  TRUE
[16:31:31.532]      // while "1"  (timeout="200")
[16:31:31.542]      // while-condition  =>  TRUE
[16:31:31.542]      // while "1"  (timeout="200")
[16:31:31.542]      // while  =>  TIMEOUT
[16:31:31.542]      // end while "1"
[16:31:31.542]    </control>
[16:31:31.542]    <control if="canReadPins" while="" timeout="0" info="">
[16:31:31.542]      // if-block "canReadPins"
[16:31:31.542]        // =>  TRUE
[16:31:31.542]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:31:31.542]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:31:31.544]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:31:31.544]        // while-condition  =>  FALSE
[16:31:31.544]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:31:31.544]      </control>
[16:31:31.544]      // end if-block "canReadPins"
[16:31:31.544]    </control>
[16:31:31.544]    <control if="!canReadPins" while="" timeout="0" info="">
[16:31:31.544]      // if-block "!canReadPins"
[16:31:31.544]        // =>  FALSE
[16:31:31.544]      // skip if-block "!canReadPins"
[16:31:31.544]    </control>
[16:31:31.544]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:31:31.544]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:31:31.544]        // =>  TRUE
[16:31:31.544]      <block atomic="false" info="">
[16:31:31.544]        WriteAP(0x00, 0x190008);
[16:31:31.544]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:31:31.544]        WriteAP(0xF0, 0x01);
[16:31:31.553]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:31:31.553]      </block>
[16:31:31.553]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:31:31.553]    </control>
[16:31:31.553]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:31:31.553]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:31:31.553]        // =>  FALSE
[16:31:31.553]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:31:31.553]    </control>
[16:31:31.553]    <block atomic="false" info="">
[16:31:31.553]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:31:31.553]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:31:31.553]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:31:31.553]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:31:31.553]      __ap = 0; //lets make sure we reset the access point selection
[16:31:31.553]        // -> [__ap <= 0x00000000]
[16:31:31.553]    </block>
[16:31:31.553]  </sequence>
[16:31:31.553]  
[16:31:31.573]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:31:31.573]  
[16:31:31.573]  <debugvars>
[16:31:31.573]    // Pre-defined
[16:31:31.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:31:31.573]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:31:31.573]    __dp=0x00000000
[16:31:31.573]    __ap=0x00000000
[16:31:31.573]    __traceout=0x00000000      (Trace Disabled)
[16:31:31.573]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:31:31.573]    __FlashAddr=0x00000000
[16:31:31.573]    __FlashLen=0x00000000
[16:31:31.573]    __FlashArg=0x00000000
[16:31:31.573]    __FlashOp=0x00000000
[16:31:31.573]    __Result=0x00000000
[16:31:31.573]  </debugvars>
[16:31:31.573]  
[16:31:31.573]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:31:31.573]    <block atomic="false" info="">
[16:31:31.573]      __var deviceID = 0;
[16:31:31.573]        // -> [deviceID <= 0x00000000]
[16:31:31.573]      __var version = 0;
[16:31:31.573]        // -> [version <= 0x00000000]
[16:31:31.573]      __var partNum = 0;
[16:31:31.573]        // -> [partNum <= 0x00000000]
[16:31:31.573]      __var manuf = 0;
[16:31:31.573]        // -> [manuf <= 0x00000000]
[16:31:31.573]      __var isMSPM0G1X0X_G3X0X = 0;
[16:31:31.573]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:31:31.573]      __var isProduction = 0;
[16:31:31.573]        // -> [isProduction <= 0x00000000]
[16:31:31.573]      __var continueId = 0;
[16:31:31.573]        // -> [continueId <= 0x00000000]
[16:31:31.573]      deviceID =   Read32(0x41C40004);
[16:31:31.585]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:31:31.585]        // -> [deviceID <= 0x2BB8802F]
[16:31:31.585]      version = deviceID >> 28;
[16:31:31.585]        // -> [version <= 0x00000002]
[16:31:31.585]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:31:31.585]        // -> [partNum <= 0x0000BB88]
[16:31:31.585]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:31:31.585]        // -> [manuf <= 0x00000017]
[16:31:31.585]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:31:31.585]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:31:31.585]      isProduction = (version > 0);
[16:31:31.585]        // -> [isProduction <= 0x00000001]
[16:31:31.585]    </block>
[16:31:31.585]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:31:31.585]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:31:31.585]        // =>  FALSE
[16:31:31.585]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:31:31.585]    </control>
[16:31:31.585]    <control if="continueId == 4" while="" timeout="0" info="">
[16:31:31.585]      // if-block "continueId == 4"
[16:31:31.585]        // =>  FALSE
[16:31:31.585]      // skip if-block "continueId == 4"
[16:31:31.585]    </control>
[16:31:31.585]    <control if="!isProduction" while="" timeout="0" info="">
[16:31:31.585]      // if-block "!isProduction"
[16:31:31.585]        // =>  FALSE
[16:31:31.585]      // skip if-block "!isProduction"
[16:31:31.585]    </control>
[16:31:31.585]  </sequence>
[16:31:31.585]  
[16:32:19.701]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:32:19.701]  
[16:32:19.702]  <debugvars>
[16:32:19.702]    // Pre-defined
[16:32:19.702]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:19.702]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:19.702]    __dp=0x00000000
[16:32:19.702]    __ap=0x00000000
[16:32:19.702]    __traceout=0x00000000      (Trace Disabled)
[16:32:19.702]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:19.702]    __FlashAddr=0x00000000
[16:32:19.702]    __FlashLen=0x00000000
[16:32:19.702]    __FlashArg=0x00000000
[16:32:19.703]    __FlashOp=0x00000000
[16:32:19.703]    __Result=0x00000000
[16:32:19.703]  </debugvars>
[16:32:19.703]  
[16:32:19.703]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:32:19.703]    <block atomic="false" info="">
[16:32:19.703]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:32:19.703]        // -> [isSWJ <= 0x00000001]
[16:32:19.703]      __var hasDormant = __protocol & 0x00020000;
[16:32:19.703]        // -> [hasDormant <= 0x00000000]
[16:32:19.703]      __var protType   = __protocol & 0x0000FFFF;
[16:32:19.703]        // -> [protType <= 0x00000002]
[16:32:19.705]    </block>
[16:32:19.705]    <control if="protType == 1" while="" timeout="0" info="">
[16:32:19.705]      // if-block "protType == 1"
[16:32:19.705]        // =>  FALSE
[16:32:19.705]      // skip if-block "protType == 1"
[16:32:19.705]    </control>
[16:32:19.705]    <control if="protType == 2" while="" timeout="0" info="">
[16:32:19.705]      // if-block "protType == 2"
[16:32:19.705]        // =>  TRUE
[16:32:19.705]      <control if="isSWJ" while="" timeout="0" info="">
[16:32:19.705]        // if-block "isSWJ"
[16:32:19.705]          // =>  TRUE
[16:32:19.705]        <control if="hasDormant" while="" timeout="0" info="">
[16:32:19.705]          // if-block "hasDormant"
[16:32:19.705]            // =>  FALSE
[16:32:19.705]          // skip if-block "hasDormant"
[16:32:19.707]        </control>
[16:32:19.707]        <control if="!hasDormant" while="" timeout="0" info="">
[16:32:19.707]          // if-block "!hasDormant"
[16:32:19.707]            // =>  TRUE
[16:32:19.707]          <block atomic="false" info="">
[16:32:19.707]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:32:19.708]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:19.709]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:32:19.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:32:19.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:32:19.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:19.711]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:32:19.711]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:32:19.711]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:32:19.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:19.711]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:32:19.717]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:32:19.718]          </block>
[16:32:19.718]          // end if-block "!hasDormant"
[16:32:19.718]        </control>
[16:32:19.718]        // end if-block "isSWJ"
[16:32:19.718]      </control>
[16:32:19.718]      <control if="!isSWJ" while="" timeout="0" info="">
[16:32:19.718]        // if-block "!isSWJ"
[16:32:19.718]          // =>  FALSE
[16:32:19.718]        // skip if-block "!isSWJ"
[16:32:19.718]      </control>
[16:32:19.718]      <block atomic="false" info="">
[16:32:19.718]        ReadDP(0x0);
[16:32:19.718]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:32:19.718]      </block>
[16:32:19.718]      // end if-block "protType == 2"
[16:32:19.718]    </control>
[16:32:19.718]  </sequence>
[16:32:19.718]  
[16:32:19.718]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:32:19.718]  
[16:32:19.718]  <debugvars>
[16:32:19.718]    // Pre-defined
[16:32:19.718]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:19.718]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:19.718]    __dp=0x00000000
[16:32:19.718]    __ap=0x00000000
[16:32:19.718]    __traceout=0x00000000      (Trace Disabled)
[16:32:19.718]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:19.718]    __FlashAddr=0x00000000
[16:32:19.718]    __FlashLen=0x00000000
[16:32:19.718]    __FlashArg=0x00000000
[16:32:19.718]    __FlashOp=0x00000000
[16:32:19.718]    __Result=0x00000000
[16:32:19.718]  </debugvars>
[16:32:19.718]  
[16:32:19.718]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:32:19.718]    <block atomic="false" info="">
[16:32:19.718]      __var SW_DP_ABORT       = 0x0;
[16:32:19.718]        // -> [SW_DP_ABORT <= 0x00000000]
[16:32:19.718]      __var DP_CTRL_STAT      = 0x4;
[16:32:19.718]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:32:19.718]      __var DP_SELECT         = 0x8;
[16:32:19.718]        // -> [DP_SELECT <= 0x00000008]
[16:32:19.718]      __var powered_down      = 0;
[16:32:19.718]        // -> [powered_down <= 0x00000000]
[16:32:19.718]      WriteDP(DP_SELECT, 0x00000000);
[16:32:19.728]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:32:19.728]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:32:19.729]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:32:19.729]        // -> [powered_down <= 0x00000001]
[16:32:19.729]    </block>
[16:32:19.729]    <control if="powered_down" while="" timeout="0" info="">
[16:32:19.729]      // if-block "powered_down"
[16:32:19.729]        // =>  TRUE
[16:32:19.729]      <block atomic="false" info="">
[16:32:19.729]        Message(0, "Debug/System power-up request sent");
[16:32:19.729]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:32:19.729]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:32:19.729]      </block>
[16:32:19.729]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:32:19.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:32:19.729]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:32:19.729]        // while-condition  =>  FALSE
[16:32:19.729]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:32:19.729]      </control>
[16:32:19.729]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:32:19.738]        // if-block "(__protocol & 0xFFFF) == 1"
[16:32:19.738]          // =>  FALSE
[16:32:19.738]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:32:19.738]      </control>
[16:32:19.738]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:32:19.738]        // if-block "(__protocol & 0xFFFF) == 2"
[16:32:19.738]          // =>  TRUE
[16:32:19.738]        <block atomic="false" info="">
[16:32:19.738]          Message(0, "executing SWD power up");
[16:32:19.740]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:32:19.740]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:32:19.740]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:32:19.740]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:32:19.740]        </block>
[16:32:19.740]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:32:19.740]      </control>
[16:32:19.740]      // end if-block "powered_down"
[16:32:19.740]    </control>
[16:32:19.740]    <block atomic="false" info="">
[16:32:19.740]      __var DEBUG_PORT_VAL    = 0;
[16:32:19.740]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:32:19.740]      __var ACCESS_POINT_VAL  = 0;
[16:32:19.740]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:32:19.740]      __ap = 1; 
[16:32:19.740]        // -> [__ap <= 0x00000001]
[16:32:19.740]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:32:19.748]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:32:19.748]      __ap = 4;
[16:32:19.748]        // -> [__ap <= 0x00000004]
[16:32:19.748]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:19.749]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:32:19.749]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:32:19.753]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:19.753]    </block>
[16:32:19.753]    <block atomic="false" info="">
[16:32:19.753]      __var nReset = 0x80;
[16:32:19.753]        // -> [nReset <= 0x00000080]
[16:32:19.753]      __var canReadPins = 0;
[16:32:19.753]        // -> [canReadPins <= 0x00000000]
[16:32:19.753]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:32:19.753]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:32:19.753]        // -> [canReadPins <= 0x00000001]
[16:32:19.753]    </block>
[16:32:19.753]    <control if="" while="1" timeout="200" info="">
[16:32:19.753]      // while "1"  (timeout="200")
[16:32:19.753]      // while-condition  =>  TRUE
[16:32:19.753]      // while "1"  (timeout="200")
[16:32:19.753]      // while-condition  =>  TRUE
[16:32:19.753]      // while "1"  (timeout="200")
[16:32:19.753]      // while-condition  =>  TRUE
[16:32:19.758]      // while "1"  (timeout="200")
[16:32:19.758]      // while-condition  =>  TRUE
[16:32:19.758]      // while "1"  (timeout="200")
[16:32:19.758]      // while-condition  =>  TRUE
[16:32:19.758]      // while "1"  (timeout="200")
[16:32:19.758]      // while-condition  =>  TRUE
[16:32:19.758]      // while "1"  (timeout="200")
[16:32:19.758]      // while-condition  =>  TRUE
[16:32:19.759]      // while "1"  (timeout="200")
[16:32:19.759]      // while-condition  =>  TRUE
[16:32:19.759]      // while "1"  (timeout="200")
[16:32:19.759]      // while-condition  =>  TRUE
[16:32:19.759]      // while "1"  (timeout="200")
[16:32:19.759]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.760]      // while-condition  =>  TRUE
[16:32:19.760]      // while "1"  (timeout="200")
[16:32:19.768]      // while-condition  =>  TRUE
[16:32:19.768]      // while "1"  (timeout="200")
[16:32:19.768]      // while-condition  =>  TRUE
[16:32:19.768]      // while "1"  (timeout="200")
[16:32:19.768]      // while-condition  =>  TRUE
[16:32:19.768]      // while "1"  (timeout="200")
[16:32:19.768]      // while-condition  =>  TRUE
[16:32:19.768]      // while "1"  (timeout="200")
[16:32:19.768]      // while-condition  =>  TRUE
[16:32:19.768]      // while "1"  (timeout="200")
[16:32:19.769]      // while-condition  =>  TRUE
[16:32:19.769]      // while "1"  (timeout="200")
[16:32:19.769]      // while  =>  TIMEOUT
[16:32:19.769]      // end while "1"
[16:32:19.769]    </control>
[16:32:19.769]    <control if="canReadPins" while="" timeout="0" info="">
[16:32:19.769]      // if-block "canReadPins"
[16:32:19.770]        // =>  TRUE
[16:32:19.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:32:19.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:32:19.774]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:32:19.774]        // while-condition  =>  FALSE
[16:32:19.774]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:32:19.774]      </control>
[16:32:19.774]      // end if-block "canReadPins"
[16:32:19.774]    </control>
[16:32:19.774]    <control if="!canReadPins" while="" timeout="0" info="">
[16:32:19.774]      // if-block "!canReadPins"
[16:32:19.774]        // =>  FALSE
[16:32:19.774]      // skip if-block "!canReadPins"
[16:32:19.774]    </control>
[16:32:19.774]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:32:19.774]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:19.774]        // =>  TRUE
[16:32:19.774]      <block atomic="false" info="">
[16:32:19.774]        WriteAP(0x00, 0x190008);
[16:32:19.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:19.774]        WriteAP(0xF0, 0x01);
[16:32:19.780]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:19.780]      </block>
[16:32:19.780]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:19.780]    </control>
[16:32:19.780]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:32:19.780]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:19.780]        // =>  FALSE
[16:32:19.780]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:19.780]    </control>
[16:32:19.780]    <block atomic="false" info="">
[16:32:19.780]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:19.780]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:32:19.780]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:32:19.780]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:19.780]      __ap = 0; //lets make sure we reset the access point selection
[16:32:19.788]        // -> [__ap <= 0x00000000]
[16:32:19.788]    </block>
[16:32:19.788]  </sequence>
[16:32:19.788]  
[16:32:19.808]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:32:19.808]  
[16:32:19.808]  <debugvars>
[16:32:19.808]    // Pre-defined
[16:32:19.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:19.808]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:19.808]    __dp=0x00000000
[16:32:19.808]    __ap=0x00000000
[16:32:19.808]    __traceout=0x00000000      (Trace Disabled)
[16:32:19.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:19.808]    __FlashAddr=0x00000000
[16:32:19.808]    __FlashLen=0x00000000
[16:32:19.808]    __FlashArg=0x00000000
[16:32:19.808]    __FlashOp=0x00000000
[16:32:19.808]    __Result=0x00000000
[16:32:19.808]  </debugvars>
[16:32:19.808]  
[16:32:19.808]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:32:19.808]    <block atomic="false" info="">
[16:32:19.808]      __var deviceID = 0;
[16:32:19.808]        // -> [deviceID <= 0x00000000]
[16:32:19.808]      __var version = 0;
[16:32:19.808]        // -> [version <= 0x00000000]
[16:32:19.808]      __var partNum = 0;
[16:32:19.808]        // -> [partNum <= 0x00000000]
[16:32:19.808]      __var manuf = 0;
[16:32:19.808]        // -> [manuf <= 0x00000000]
[16:32:19.808]      __var isMSPM0G1X0X_G3X0X = 0;
[16:32:19.808]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:32:19.808]      __var isProduction = 0;
[16:32:19.808]        // -> [isProduction <= 0x00000000]
[16:32:19.808]      __var continueId = 0;
[16:32:19.808]        // -> [continueId <= 0x00000000]
[16:32:19.808]      deviceID =   Read32(0x41C40004);
[16:32:19.816]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:32:19.816]        // -> [deviceID <= 0x2BB8802F]
[16:32:19.816]      version = deviceID >> 28;
[16:32:19.816]        // -> [version <= 0x00000002]
[16:32:19.816]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:32:19.816]        // -> [partNum <= 0x0000BB88]
[16:32:19.816]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:32:19.816]        // -> [manuf <= 0x00000017]
[16:32:19.816]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:32:19.818]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:32:19.818]      isProduction = (version > 0);
[16:32:19.818]        // -> [isProduction <= 0x00000001]
[16:32:19.818]    </block>
[16:32:19.818]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:32:19.818]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:32:19.818]        // =>  FALSE
[16:32:19.818]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:32:19.818]    </control>
[16:32:19.819]    <control if="continueId == 4" while="" timeout="0" info="">
[16:32:19.819]      // if-block "continueId == 4"
[16:32:19.819]        // =>  FALSE
[16:32:19.819]      // skip if-block "continueId == 4"
[16:32:19.819]    </control>
[16:32:19.819]    <control if="!isProduction" while="" timeout="0" info="">
[16:32:19.819]      // if-block "!isProduction"
[16:32:19.819]        // =>  FALSE
[16:32:19.819]      // skip if-block "!isProduction"
[16:32:19.819]    </control>
[16:32:19.819]  </sequence>
[16:32:19.819]  
[16:32:53.802]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:32:53.802]  
[16:32:53.802]  <debugvars>
[16:32:53.802]    // Pre-defined
[16:32:53.802]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:53.802]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:53.802]    __dp=0x00000000
[16:32:53.802]    __ap=0x00000000
[16:32:53.802]    __traceout=0x00000000      (Trace Disabled)
[16:32:53.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:53.802]    __FlashAddr=0x00000000
[16:32:53.802]    __FlashLen=0x00000000
[16:32:53.802]    __FlashArg=0x00000000
[16:32:53.802]    __FlashOp=0x00000000
[16:32:53.802]    __Result=0x00000000
[16:32:53.802]  </debugvars>
[16:32:53.802]  
[16:32:53.802]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:32:53.802]    <block atomic="false" info="">
[16:32:53.802]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:32:53.802]        // -> [isSWJ <= 0x00000001]
[16:32:53.802]      __var hasDormant = __protocol & 0x00020000;
[16:32:53.807]        // -> [hasDormant <= 0x00000000]
[16:32:53.807]      __var protType   = __protocol & 0x0000FFFF;
[16:32:53.807]        // -> [protType <= 0x00000002]
[16:32:53.807]    </block>
[16:32:53.807]    <control if="protType == 1" while="" timeout="0" info="">
[16:32:53.807]      // if-block "protType == 1"
[16:32:53.807]        // =>  FALSE
[16:32:53.807]      // skip if-block "protType == 1"
[16:32:53.807]    </control>
[16:32:53.807]    <control if="protType == 2" while="" timeout="0" info="">
[16:32:53.807]      // if-block "protType == 2"
[16:32:53.809]        // =>  TRUE
[16:32:53.809]      <control if="isSWJ" while="" timeout="0" info="">
[16:32:53.809]        // if-block "isSWJ"
[16:32:53.809]          // =>  TRUE
[16:32:53.809]        <control if="hasDormant" while="" timeout="0" info="">
[16:32:53.809]          // if-block "hasDormant"
[16:32:53.809]            // =>  FALSE
[16:32:53.809]          // skip if-block "hasDormant"
[16:32:53.809]        </control>
[16:32:53.809]        <control if="!hasDormant" while="" timeout="0" info="">
[16:32:53.809]          // if-block "!hasDormant"
[16:32:53.809]            // =>  TRUE
[16:32:53.809]          <block atomic="false" info="">
[16:32:53.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:32:53.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:53.810]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:32:53.810]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:32:53.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:32:53.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:53.810]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:32:53.810]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:32:53.810]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:32:53.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:32:53.810]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:32:53.810]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:32:53.820]          </block>
[16:32:53.821]          // end if-block "!hasDormant"
[16:32:53.821]        </control>
[16:32:53.821]        // end if-block "isSWJ"
[16:32:53.821]      </control>
[16:32:53.821]      <control if="!isSWJ" while="" timeout="0" info="">
[16:32:53.821]        // if-block "!isSWJ"
[16:32:53.821]          // =>  FALSE
[16:32:53.821]        // skip if-block "!isSWJ"
[16:32:53.821]      </control>
[16:32:53.821]      <block atomic="false" info="">
[16:32:53.821]        ReadDP(0x0);
[16:32:53.821]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:32:53.821]      </block>
[16:32:53.821]      // end if-block "protType == 2"
[16:32:53.821]    </control>
[16:32:53.821]  </sequence>
[16:32:53.821]  
[16:32:53.821]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:32:53.821]  
[16:32:53.821]  <debugvars>
[16:32:53.821]    // Pre-defined
[16:32:53.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:53.821]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:53.821]    __dp=0x00000000
[16:32:53.821]    __ap=0x00000000
[16:32:53.821]    __traceout=0x00000000      (Trace Disabled)
[16:32:53.821]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:53.821]    __FlashAddr=0x00000000
[16:32:53.821]    __FlashLen=0x00000000
[16:32:53.821]    __FlashArg=0x00000000
[16:32:53.821]    __FlashOp=0x00000000
[16:32:53.821]    __Result=0x00000000
[16:32:53.821]  </debugvars>
[16:32:53.821]  
[16:32:53.821]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:32:53.821]    <block atomic="false" info="">
[16:32:53.821]      __var SW_DP_ABORT       = 0x0;
[16:32:53.821]        // -> [SW_DP_ABORT <= 0x00000000]
[16:32:53.821]      __var DP_CTRL_STAT      = 0x4;
[16:32:53.821]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:32:53.821]      __var DP_SELECT         = 0x8;
[16:32:53.821]        // -> [DP_SELECT <= 0x00000008]
[16:32:53.821]      __var powered_down      = 0;
[16:32:53.821]        // -> [powered_down <= 0x00000000]
[16:32:53.821]      WriteDP(DP_SELECT, 0x00000000);
[16:32:53.831]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:32:53.832]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:32:53.833]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:32:53.833]        // -> [powered_down <= 0x00000001]
[16:32:53.833]    </block>
[16:32:53.833]    <control if="powered_down" while="" timeout="0" info="">
[16:32:53.833]      // if-block "powered_down"
[16:32:53.833]        // =>  TRUE
[16:32:53.833]      <block atomic="false" info="">
[16:32:53.833]        Message(0, "Debug/System power-up request sent");
[16:32:53.833]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:32:53.833]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:32:53.833]      </block>
[16:32:53.833]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:32:53.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:32:53.840]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:32:53.840]        // while-condition  =>  FALSE
[16:32:53.840]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:32:53.840]      </control>
[16:32:53.840]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:32:53.840]        // if-block "(__protocol & 0xFFFF) == 1"
[16:32:53.840]          // =>  FALSE
[16:32:53.840]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:32:53.840]      </control>
[16:32:53.840]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:32:53.840]        // if-block "(__protocol & 0xFFFF) == 2"
[16:32:53.840]          // =>  TRUE
[16:32:53.840]        <block atomic="false" info="">
[16:32:53.840]          Message(0, "executing SWD power up");
[16:32:53.840]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:32:53.840]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:32:53.840]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:32:53.840]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:32:53.840]        </block>
[16:32:53.840]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:32:53.840]      </control>
[16:32:53.840]      // end if-block "powered_down"
[16:32:53.840]    </control>
[16:32:53.840]    <block atomic="false" info="">
[16:32:53.840]      __var DEBUG_PORT_VAL    = 0;
[16:32:53.840]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:32:53.840]      __var ACCESS_POINT_VAL  = 0;
[16:32:53.840]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:32:53.840]      __ap = 1; 
[16:32:53.840]        // -> [__ap <= 0x00000001]
[16:32:53.840]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:32:53.850]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:32:53.850]      __ap = 4;
[16:32:53.850]        // -> [__ap <= 0x00000004]
[16:32:53.850]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:53.853]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:32:53.853]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:32:53.853]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:53.853]    </block>
[16:32:53.853]    <block atomic="false" info="">
[16:32:53.853]      __var nReset = 0x80;
[16:32:53.853]        // -> [nReset <= 0x00000080]
[16:32:53.853]      __var canReadPins = 0;
[16:32:53.853]        // -> [canReadPins <= 0x00000000]
[16:32:53.853]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:32:53.860]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:32:53.860]        // -> [canReadPins <= 0x00000001]
[16:32:53.860]    </block>
[16:32:53.860]    <control if="" while="1" timeout="200" info="">
[16:32:53.860]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.861]      // while "1"  (timeout="200")
[16:32:53.861]      // while-condition  =>  TRUE
[16:32:53.863]      // while "1"  (timeout="200")
[16:32:53.863]      // while  =>  TIMEOUT
[16:32:53.863]      // end while "1"
[16:32:53.863]    </control>
[16:32:53.863]    <control if="canReadPins" while="" timeout="0" info="">
[16:32:53.863]      // if-block "canReadPins"
[16:32:53.863]        // =>  TRUE
[16:32:53.863]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:32:53.863]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:32:53.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:32:53.864]        // while-condition  =>  FALSE
[16:32:53.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:32:53.864]      </control>
[16:32:53.864]      // end if-block "canReadPins"
[16:32:53.864]    </control>
[16:32:53.864]    <control if="!canReadPins" while="" timeout="0" info="">
[16:32:53.864]      // if-block "!canReadPins"
[16:32:53.864]        // =>  FALSE
[16:32:53.864]      // skip if-block "!canReadPins"
[16:32:53.864]    </control>
[16:32:53.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:32:53.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:53.864]        // =>  TRUE
[16:32:53.864]      <block atomic="false" info="">
[16:32:53.864]        WriteAP(0x00, 0x190008);
[16:32:53.864]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:53.864]        WriteAP(0xF0, 0x01);
[16:32:53.870]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:32:53.870]      </block>
[16:32:53.870]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:32:53.870]    </control>
[16:32:53.870]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:32:53.870]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:53.870]        // =>  FALSE
[16:32:53.870]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:32:53.870]    </control>
[16:32:53.870]    <block atomic="false" info="">
[16:32:53.870]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:32:53.877]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:32:53.877]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:32:53.877]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:32:53.879]      __ap = 0; //lets make sure we reset the access point selection
[16:32:53.879]        // -> [__ap <= 0x00000000]
[16:32:53.879]    </block>
[16:32:53.879]  </sequence>
[16:32:53.879]  
[16:32:53.901]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:32:53.901]  
[16:32:53.901]  <debugvars>
[16:32:53.901]    // Pre-defined
[16:32:53.901]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:32:53.901]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:32:53.901]    __dp=0x00000000
[16:32:53.901]    __ap=0x00000000
[16:32:53.901]    __traceout=0x00000000      (Trace Disabled)
[16:32:53.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:32:53.901]    __FlashAddr=0x00000000
[16:32:53.901]    __FlashLen=0x00000000
[16:32:53.901]    __FlashArg=0x00000000
[16:32:53.901]    __FlashOp=0x00000000
[16:32:53.901]    __Result=0x00000000
[16:32:53.901]  </debugvars>
[16:32:53.901]  
[16:32:53.901]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:32:53.901]    <block atomic="false" info="">
[16:32:53.901]      __var deviceID = 0;
[16:32:53.901]        // -> [deviceID <= 0x00000000]
[16:32:53.901]      __var version = 0;
[16:32:53.901]        // -> [version <= 0x00000000]
[16:32:53.901]      __var partNum = 0;
[16:32:53.901]        // -> [partNum <= 0x00000000]
[16:32:53.901]      __var manuf = 0;
[16:32:53.901]        // -> [manuf <= 0x00000000]
[16:32:53.901]      __var isMSPM0G1X0X_G3X0X = 0;
[16:32:53.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:32:53.907]      __var isProduction = 0;
[16:32:53.907]        // -> [isProduction <= 0x00000000]
[16:32:53.907]      __var continueId = 0;
[16:32:53.907]        // -> [continueId <= 0x00000000]
[16:32:53.907]      deviceID =   Read32(0x41C40004);
[16:32:53.912]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:32:53.912]        // -> [deviceID <= 0x2BB8802F]
[16:32:53.912]      version = deviceID >> 28;
[16:32:53.912]        // -> [version <= 0x00000002]
[16:32:53.912]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:32:53.912]        // -> [partNum <= 0x0000BB88]
[16:32:53.912]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:32:53.912]        // -> [manuf <= 0x00000017]
[16:32:53.912]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:32:53.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:32:53.912]      isProduction = (version > 0);
[16:32:53.912]        // -> [isProduction <= 0x00000001]
[16:32:53.912]    </block>
[16:32:53.912]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:32:53.912]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:32:53.912]        // =>  FALSE
[16:32:53.912]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:32:53.912]    </control>
[16:32:53.912]    <control if="continueId == 4" while="" timeout="0" info="">
[16:32:53.912]      // if-block "continueId == 4"
[16:32:53.912]        // =>  FALSE
[16:32:53.912]      // skip if-block "continueId == 4"
[16:32:53.912]    </control>
[16:32:53.914]    <control if="!isProduction" while="" timeout="0" info="">
[16:32:53.914]      // if-block "!isProduction"
[16:32:53.914]        // =>  FALSE
[16:32:53.914]      // skip if-block "!isProduction"
[16:32:53.914]    </control>
[16:32:53.914]  </sequence>
[16:32:53.914]  
[16:33:25.978]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:33:25.978]  
[16:33:25.992]  <debugvars>
[16:33:25.992]    // Pre-defined
[16:33:25.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:33:25.992]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:33:25.992]    __dp=0x00000000
[16:33:25.992]    __ap=0x00000000
[16:33:25.992]    __traceout=0x00000000      (Trace Disabled)
[16:33:25.992]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:33:25.992]    __FlashAddr=0x00000000
[16:33:25.992]    __FlashLen=0x00000000
[16:33:25.992]    __FlashArg=0x00000000
[16:33:25.992]    __FlashOp=0x00000000
[16:33:25.992]    __Result=0x00000000
[16:33:25.992]  </debugvars>
[16:33:25.992]  
[16:33:25.992]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:33:25.992]    <block atomic="false" info="">
[16:33:25.992]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:33:25.992]        // -> [isSWJ <= 0x00000001]
[16:33:25.992]      __var hasDormant = __protocol & 0x00020000;
[16:33:25.992]        // -> [hasDormant <= 0x00000000]
[16:33:25.992]      __var protType   = __protocol & 0x0000FFFF;
[16:33:25.992]        // -> [protType <= 0x00000002]
[16:33:25.992]    </block>
[16:33:25.992]    <control if="protType == 1" while="" timeout="0" info="">
[16:33:25.992]      // if-block "protType == 1"
[16:33:25.992]        // =>  FALSE
[16:33:25.992]      // skip if-block "protType == 1"
[16:33:25.992]    </control>
[16:33:25.992]    <control if="protType == 2" while="" timeout="0" info="">
[16:33:25.992]      // if-block "protType == 2"
[16:33:25.992]        // =>  TRUE
[16:33:25.992]      <control if="isSWJ" while="" timeout="0" info="">
[16:33:25.992]        // if-block "isSWJ"
[16:33:25.992]          // =>  TRUE
[16:33:25.992]        <control if="hasDormant" while="" timeout="0" info="">
[16:33:25.992]          // if-block "hasDormant"
[16:33:25.992]            // =>  FALSE
[16:33:25.992]          // skip if-block "hasDormant"
[16:33:25.992]        </control>
[16:33:25.996]        <control if="!hasDormant" while="" timeout="0" info="">
[16:33:25.996]          // if-block "!hasDormant"
[16:33:25.996]            // =>  TRUE
[16:33:25.996]          <block atomic="false" info="">
[16:33:25.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:33:25.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:33:25.996]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:33:25.996]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:33:25.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:33:25.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:33:25.996]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:33:25.996]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:33:25.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:33:25.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:33:25.996]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:33:25.996]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:33:25.996]          </block>
[16:33:25.996]          // end if-block "!hasDormant"
[16:33:25.996]        </control>
[16:33:26.006]        // end if-block "isSWJ"
[16:33:26.006]      </control>
[16:33:26.006]      <control if="!isSWJ" while="" timeout="0" info="">
[16:33:26.006]        // if-block "!isSWJ"
[16:33:26.006]          // =>  FALSE
[16:33:26.006]        // skip if-block "!isSWJ"
[16:33:26.006]      </control>
[16:33:26.006]      <block atomic="false" info="">
[16:33:26.006]        ReadDP(0x0);
[16:33:26.006]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:33:26.006]      </block>
[16:33:26.006]      // end if-block "protType == 2"
[16:33:26.006]    </control>
[16:33:26.006]  </sequence>
[16:33:26.006]  
[16:33:26.006]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:33:26.006]  
[16:33:26.006]  <debugvars>
[16:33:26.006]    // Pre-defined
[16:33:26.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:33:26.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:33:26.006]    __dp=0x00000000
[16:33:26.006]    __ap=0x00000000
[16:33:26.006]    __traceout=0x00000000      (Trace Disabled)
[16:33:26.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:33:26.006]    __FlashAddr=0x00000000
[16:33:26.006]    __FlashLen=0x00000000
[16:33:26.006]    __FlashArg=0x00000000
[16:33:26.006]    __FlashOp=0x00000000
[16:33:26.006]    __Result=0x00000000
[16:33:26.006]  </debugvars>
[16:33:26.006]  
[16:33:26.006]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:33:26.006]    <block atomic="false" info="">
[16:33:26.006]      __var SW_DP_ABORT       = 0x0;
[16:33:26.006]        // -> [SW_DP_ABORT <= 0x00000000]
[16:33:26.006]      __var DP_CTRL_STAT      = 0x4;
[16:33:26.006]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:33:26.006]      __var DP_SELECT         = 0x8;
[16:33:26.006]        // -> [DP_SELECT <= 0x00000008]
[16:33:26.006]      __var powered_down      = 0;
[16:33:26.006]        // -> [powered_down <= 0x00000000]
[16:33:26.006]      WriteDP(DP_SELECT, 0x00000000);
[16:33:26.017]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:33:26.017]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:33:26.017]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:33:26.017]        // -> [powered_down <= 0x00000001]
[16:33:26.017]    </block>
[16:33:26.017]    <control if="powered_down" while="" timeout="0" info="">
[16:33:26.017]      // if-block "powered_down"
[16:33:26.017]        // =>  TRUE
[16:33:26.017]      <block atomic="false" info="">
[16:33:26.017]        Message(0, "Debug/System power-up request sent");
[16:33:26.017]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:33:26.017]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:33:26.017]      </block>
[16:33:26.017]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:33:26.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:33:26.017]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:33:26.017]        // while-condition  =>  FALSE
[16:33:26.027]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:33:26.027]      </control>
[16:33:26.027]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:33:26.027]        // if-block "(__protocol & 0xFFFF) == 1"
[16:33:26.027]          // =>  FALSE
[16:33:26.027]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:33:26.027]      </control>
[16:33:26.027]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:33:26.027]        // if-block "(__protocol & 0xFFFF) == 2"
[16:33:26.027]          // =>  TRUE
[16:33:26.027]        <block atomic="false" info="">
[16:33:26.027]          Message(0, "executing SWD power up");
[16:33:26.027]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:33:26.027]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:33:26.027]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:33:26.027]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:33:26.027]        </block>
[16:33:26.027]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:33:26.027]      </control>
[16:33:26.027]      // end if-block "powered_down"
[16:33:26.027]    </control>
[16:33:26.027]    <block atomic="false" info="">
[16:33:26.027]      __var DEBUG_PORT_VAL    = 0;
[16:33:26.027]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:33:26.027]      __var ACCESS_POINT_VAL  = 0;
[16:33:26.027]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:33:26.027]      __ap = 1; 
[16:33:26.027]        // -> [__ap <= 0x00000001]
[16:33:26.027]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:33:26.037]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:33:26.037]      __ap = 4;
[16:33:26.037]        // -> [__ap <= 0x00000004]
[16:33:26.037]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:33:26.037]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:33:26.037]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:33:26.037]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:33:26.042]    </block>
[16:33:26.042]    <block atomic="false" info="">
[16:33:26.042]      __var nReset = 0x80;
[16:33:26.042]        // -> [nReset <= 0x00000080]
[16:33:26.042]      __var canReadPins = 0;
[16:33:26.042]        // -> [canReadPins <= 0x00000000]
[16:33:26.042]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:33:26.042]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:33:26.042]        // -> [canReadPins <= 0x00000001]
[16:33:26.042]    </block>
[16:33:26.042]    <control if="" while="1" timeout="200" info="">
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.042]      // while-condition  =>  TRUE
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.042]      // while-condition  =>  TRUE
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.042]      // while-condition  =>  TRUE
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.042]      // while-condition  =>  TRUE
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.042]      // while-condition  =>  TRUE
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.042]      // while-condition  =>  TRUE
[16:33:26.042]      // while "1"  (timeout="200")
[16:33:26.047]      // while-condition  =>  TRUE
[16:33:26.047]      // while "1"  (timeout="200")
[16:33:26.047]      // while-condition  =>  TRUE
[16:33:26.047]      // while "1"  (timeout="200")
[16:33:26.047]      // while-condition  =>  TRUE
[16:33:26.047]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.048]      // while "1"  (timeout="200")
[16:33:26.048]      // while-condition  =>  TRUE
[16:33:26.050]      // while "1"  (timeout="200")
[16:33:26.050]      // while  =>  TIMEOUT
[16:33:26.050]      // end while "1"
[16:33:26.050]    </control>
[16:33:26.050]    <control if="canReadPins" while="" timeout="0" info="">
[16:33:26.050]      // if-block "canReadPins"
[16:33:26.050]        // =>  TRUE
[16:33:26.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:33:26.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:33:26.050]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:33:26.050]        // while-condition  =>  FALSE
[16:33:26.050]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:33:26.050]      </control>
[16:33:26.050]      // end if-block "canReadPins"
[16:33:26.050]    </control>
[16:33:26.050]    <control if="!canReadPins" while="" timeout="0" info="">
[16:33:26.050]      // if-block "!canReadPins"
[16:33:26.050]        // =>  FALSE
[16:33:26.050]      // skip if-block "!canReadPins"
[16:33:26.050]    </control>
[16:33:26.050]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:33:26.050]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:33:26.050]        // =>  TRUE
[16:33:26.050]      <block atomic="false" info="">
[16:33:26.050]        WriteAP(0x00, 0x190008);
[16:33:26.050]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:33:26.050]        WriteAP(0xF0, 0x01);
[16:33:26.057]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:33:26.057]      </block>
[16:33:26.057]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:33:26.057]    </control>
[16:33:26.057]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:33:26.057]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:33:26.057]        // =>  FALSE
[16:33:26.057]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:33:26.057]    </control>
[16:33:26.057]    <block atomic="false" info="">
[16:33:26.057]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:33:26.062]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:33:26.062]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:33:26.062]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:33:26.062]      __ap = 0; //lets make sure we reset the access point selection
[16:33:26.062]        // -> [__ap <= 0x00000000]
[16:33:26.062]    </block>
[16:33:26.062]  </sequence>
[16:33:26.062]  
[16:33:26.078]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:33:26.078]  
[16:33:26.078]  <debugvars>
[16:33:26.078]    // Pre-defined
[16:33:26.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:33:26.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:33:26.078]    __dp=0x00000000
[16:33:26.078]    __ap=0x00000000
[16:33:26.078]    __traceout=0x00000000      (Trace Disabled)
[16:33:26.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:33:26.078]    __FlashAddr=0x00000000
[16:33:26.078]    __FlashLen=0x00000000
[16:33:26.078]    __FlashArg=0x00000000
[16:33:26.078]    __FlashOp=0x00000000
[16:33:26.078]    __Result=0x00000000
[16:33:26.078]  </debugvars>
[16:33:26.078]  
[16:33:26.078]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:33:26.078]    <block atomic="false" info="">
[16:33:26.078]      __var deviceID = 0;
[16:33:26.078]        // -> [deviceID <= 0x00000000]
[16:33:26.078]      __var version = 0;
[16:33:26.078]        // -> [version <= 0x00000000]
[16:33:26.078]      __var partNum = 0;
[16:33:26.078]        // -> [partNum <= 0x00000000]
[16:33:26.078]      __var manuf = 0;
[16:33:26.078]        // -> [manuf <= 0x00000000]
[16:33:26.078]      __var isMSPM0G1X0X_G3X0X = 0;
[16:33:26.078]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:33:26.078]      __var isProduction = 0;
[16:33:26.078]        // -> [isProduction <= 0x00000000]
[16:33:26.078]      __var continueId = 0;
[16:33:26.078]        // -> [continueId <= 0x00000000]
[16:33:26.078]      deviceID =   Read32(0x41C40004);
[16:33:26.087]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:33:26.087]        // -> [deviceID <= 0x2BB8802F]
[16:33:26.087]      version = deviceID >> 28;
[16:33:26.087]        // -> [version <= 0x00000002]
[16:33:26.087]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:33:26.087]        // -> [partNum <= 0x0000BB88]
[16:33:26.092]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:33:26.092]        // -> [manuf <= 0x00000017]
[16:33:26.092]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:33:26.092]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:33:26.092]      isProduction = (version > 0);
[16:33:26.092]        // -> [isProduction <= 0x00000001]
[16:33:26.092]    </block>
[16:33:26.092]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:33:26.092]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:33:26.092]        // =>  FALSE
[16:33:26.092]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:33:26.092]    </control>
[16:33:26.092]    <control if="continueId == 4" while="" timeout="0" info="">
[16:33:26.092]      // if-block "continueId == 4"
[16:33:26.092]        // =>  FALSE
[16:33:26.092]      // skip if-block "continueId == 4"
[16:33:26.092]    </control>
[16:33:26.092]    <control if="!isProduction" while="" timeout="0" info="">
[16:33:26.092]      // if-block "!isProduction"
[16:33:26.092]        // =>  FALSE
[16:33:26.092]      // skip if-block "!isProduction"
[16:33:26.092]    </control>
[16:33:26.092]  </sequence>
[16:33:26.092]  
[16:34:07.471]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:34:07.471]  
[16:34:07.472]  <debugvars>
[16:34:07.472]    // Pre-defined
[16:34:07.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:07.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:07.472]    __dp=0x00000000
[16:34:07.472]    __ap=0x00000000
[16:34:07.472]    __traceout=0x00000000      (Trace Disabled)
[16:34:07.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:07.472]    __FlashAddr=0x00000000
[16:34:07.472]    __FlashLen=0x00000000
[16:34:07.472]    __FlashArg=0x00000000
[16:34:07.472]    __FlashOp=0x00000000
[16:34:07.472]    __Result=0x00000000
[16:34:07.472]  </debugvars>
[16:34:07.472]  
[16:34:07.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:34:07.472]    <block atomic="false" info="">
[16:34:07.472]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:34:07.472]        // -> [isSWJ <= 0x00000001]
[16:34:07.472]      __var hasDormant = __protocol & 0x00020000;
[16:34:07.472]        // -> [hasDormant <= 0x00000000]
[16:34:07.472]      __var protType   = __protocol & 0x0000FFFF;
[16:34:07.472]        // -> [protType <= 0x00000002]
[16:34:07.472]    </block>
[16:34:07.472]    <control if="protType == 1" while="" timeout="0" info="">
[16:34:07.472]      // if-block "protType == 1"
[16:34:07.472]        // =>  FALSE
[16:34:07.472]      // skip if-block "protType == 1"
[16:34:07.472]    </control>
[16:34:07.472]    <control if="protType == 2" while="" timeout="0" info="">
[16:34:07.472]      // if-block "protType == 2"
[16:34:07.472]        // =>  TRUE
[16:34:07.472]      <control if="isSWJ" while="" timeout="0" info="">
[16:34:07.472]        // if-block "isSWJ"
[16:34:07.472]          // =>  TRUE
[16:34:07.472]        <control if="hasDormant" while="" timeout="0" info="">
[16:34:07.472]          // if-block "hasDormant"
[16:34:07.472]            // =>  FALSE
[16:34:07.472]          // skip if-block "hasDormant"
[16:34:07.472]        </control>
[16:34:07.472]        <control if="!hasDormant" while="" timeout="0" info="">
[16:34:07.472]          // if-block "!hasDormant"
[16:34:07.472]            // =>  TRUE
[16:34:07.472]          <block atomic="false" info="">
[16:34:07.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:34:07.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:07.478]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:34:07.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:34:07.479]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:34:07.479]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:07.479]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:34:07.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:34:07.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:34:07.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:34:07.489]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:34:07.489]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:34:07.489]          </block>
[16:34:07.489]          // end if-block "!hasDormant"
[16:34:07.489]        </control>
[16:34:07.489]        // end if-block "isSWJ"
[16:34:07.489]      </control>
[16:34:07.489]      <control if="!isSWJ" while="" timeout="0" info="">
[16:34:07.489]        // if-block "!isSWJ"
[16:34:07.489]          // =>  FALSE
[16:34:07.489]        // skip if-block "!isSWJ"
[16:34:07.489]      </control>
[16:34:07.489]      <block atomic="false" info="">
[16:34:07.489]        ReadDP(0x0);
[16:34:07.489]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:34:07.489]      </block>
[16:34:07.489]      // end if-block "protType == 2"
[16:34:07.489]    </control>
[16:34:07.489]  </sequence>
[16:34:07.489]  
[16:34:07.489]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:34:07.489]  
[16:34:07.489]  <debugvars>
[16:34:07.497]    // Pre-defined
[16:34:07.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:07.497]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:07.497]    __dp=0x00000000
[16:34:07.497]    __ap=0x00000000
[16:34:07.497]    __traceout=0x00000000      (Trace Disabled)
[16:34:07.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:07.497]    __FlashAddr=0x00000000
[16:34:07.497]    __FlashLen=0x00000000
[16:34:07.497]    __FlashArg=0x00000000
[16:34:07.497]    __FlashOp=0x00000000
[16:34:07.497]    __Result=0x00000000
[16:34:07.497]  </debugvars>
[16:34:07.498]  
[16:34:07.499]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:34:07.499]    <block atomic="false" info="">
[16:34:07.499]      __var SW_DP_ABORT       = 0x0;
[16:34:07.499]        // -> [SW_DP_ABORT <= 0x00000000]
[16:34:07.499]      __var DP_CTRL_STAT      = 0x4;
[16:34:07.499]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:34:07.499]      __var DP_SELECT         = 0x8;
[16:34:07.499]        // -> [DP_SELECT <= 0x00000008]
[16:34:07.499]      __var powered_down      = 0;
[16:34:07.499]        // -> [powered_down <= 0x00000000]
[16:34:07.499]      WriteDP(DP_SELECT, 0x00000000);
[16:34:07.501]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:34:07.501]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:34:07.503]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:34:07.503]        // -> [powered_down <= 0x00000001]
[16:34:07.503]    </block>
[16:34:07.503]    <control if="powered_down" while="" timeout="0" info="">
[16:34:07.503]      // if-block "powered_down"
[16:34:07.503]        // =>  TRUE
[16:34:07.503]      <block atomic="false" info="">
[16:34:07.503]        Message(0, "Debug/System power-up request sent");
[16:34:07.505]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:34:07.507]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:34:07.507]      </block>
[16:34:07.507]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:34:07.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:34:07.509]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:34:07.509]        // while-condition  =>  FALSE
[16:34:07.509]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:34:07.509]      </control>
[16:34:07.509]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:34:07.509]        // if-block "(__protocol & 0xFFFF) == 1"
[16:34:07.509]          // =>  FALSE
[16:34:07.509]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:34:07.509]      </control>
[16:34:07.509]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:34:07.510]        // if-block "(__protocol & 0xFFFF) == 2"
[16:34:07.510]          // =>  TRUE
[16:34:07.510]        <block atomic="false" info="">
[16:34:07.510]          Message(0, "executing SWD power up");
[16:34:07.512]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:34:07.517]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:34:07.517]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:34:07.519]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:34:07.520]        </block>
[16:34:07.520]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:34:07.520]      </control>
[16:34:07.520]      // end if-block "powered_down"
[16:34:07.520]    </control>
[16:34:07.520]    <block atomic="false" info="">
[16:34:07.520]      __var DEBUG_PORT_VAL    = 0;
[16:34:07.520]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:34:07.520]      __var ACCESS_POINT_VAL  = 0;
[16:34:07.520]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:34:07.520]      __ap = 1; 
[16:34:07.520]        // -> [__ap <= 0x00000001]
[16:34:07.522]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:34:07.524]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:34:07.524]      __ap = 4;
[16:34:07.524]        // -> [__ap <= 0x00000004]
[16:34:07.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:34:07.529]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.529]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:34:07.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:34:07.530]    </block>
[16:34:07.530]    <block atomic="false" info="">
[16:34:07.530]      __var nReset = 0x80;
[16:34:07.530]        // -> [nReset <= 0x00000080]
[16:34:07.530]      __var canReadPins = 0;
[16:34:07.530]        // -> [canReadPins <= 0x00000000]
[16:34:07.530]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:34:07.532]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:34:07.532]        // -> [canReadPins <= 0x00000001]
[16:34:07.532]    </block>
[16:34:07.532]    <control if="" while="1" timeout="200" info="">
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.532]      // while-condition  =>  TRUE
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.532]      // while-condition  =>  TRUE
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.532]      // while-condition  =>  TRUE
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.532]      // while-condition  =>  TRUE
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.532]      // while-condition  =>  TRUE
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.532]      // while-condition  =>  TRUE
[16:34:07.532]      // while "1"  (timeout="200")
[16:34:07.534]      // while-condition  =>  TRUE
[16:34:07.534]      // while "1"  (timeout="200")
[16:34:07.534]      // while-condition  =>  TRUE
[16:34:07.534]      // while "1"  (timeout="200")
[16:34:07.534]      // while-condition  =>  TRUE
[16:34:07.534]      // while "1"  (timeout="200")
[16:34:07.534]      // while-condition  =>  TRUE
[16:34:07.534]      // while "1"  (timeout="200")
[16:34:07.534]      // while-condition  =>  TRUE
[16:34:07.534]      // while "1"  (timeout="200")
[16:34:07.534]      // while-condition  =>  TRUE
[16:34:07.534]      // while "1"  (timeout="200")
[16:34:07.535]      // while-condition  =>  TRUE
[16:34:07.535]      // while "1"  (timeout="200")
[16:34:07.535]      // while  =>  TIMEOUT
[16:34:07.535]      // end while "1"
[16:34:07.535]    </control>
[16:34:07.535]    <control if="canReadPins" while="" timeout="0" info="">
[16:34:07.535]      // if-block "canReadPins"
[16:34:07.535]        // =>  TRUE
[16:34:07.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:34:07.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:34:07.536]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:34:07.536]        // while-condition  =>  FALSE
[16:34:07.536]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:34:07.536]      </control>
[16:34:07.536]      // end if-block "canReadPins"
[16:34:07.538]    </control>
[16:34:07.538]    <control if="!canReadPins" while="" timeout="0" info="">
[16:34:07.538]      // if-block "!canReadPins"
[16:34:07.538]        // =>  FALSE
[16:34:07.538]      // skip if-block "!canReadPins"
[16:34:07.538]    </control>
[16:34:07.538]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:34:07.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:34:07.539]        // =>  TRUE
[16:34:07.539]      <block atomic="false" info="">
[16:34:07.539]        WriteAP(0x00, 0x190008);
[16:34:07.541]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.541]        WriteAP(0xF0, 0x01);
[16:34:07.545]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.545]      </block>
[16:34:07.545]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:34:07.545]    </control>
[16:34:07.545]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:34:07.545]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:34:07.545]        // =>  FALSE
[16:34:07.545]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:34:07.545]    </control>
[16:34:07.545]    <block atomic="false" info="">
[16:34:07.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:34:07.547]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:34:07.547]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:34:07.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:34:07.551]      __ap = 0; //lets make sure we reset the access point selection
[16:34:07.551]        // -> [__ap <= 0x00000000]
[16:34:07.551]    </block>
[16:34:07.551]  </sequence>
[16:34:07.551]  
[16:34:07.569]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:34:07.569]  
[16:34:07.569]  <debugvars>
[16:34:07.569]    // Pre-defined
[16:34:07.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:34:07.569]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:34:07.569]    __dp=0x00000000
[16:34:07.569]    __ap=0x00000000
[16:34:07.569]    __traceout=0x00000000      (Trace Disabled)
[16:34:07.569]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:34:07.569]    __FlashAddr=0x00000000
[16:34:07.569]    __FlashLen=0x00000000
[16:34:07.569]    __FlashArg=0x00000000
[16:34:07.569]    __FlashOp=0x00000000
[16:34:07.569]    __Result=0x00000000
[16:34:07.569]  </debugvars>
[16:34:07.569]  
[16:34:07.569]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:34:07.569]    <block atomic="false" info="">
[16:34:07.569]      __var deviceID = 0;
[16:34:07.569]        // -> [deviceID <= 0x00000000]
[16:34:07.569]      __var version = 0;
[16:34:07.569]        // -> [version <= 0x00000000]
[16:34:07.575]      __var partNum = 0;
[16:34:07.575]        // -> [partNum <= 0x00000000]
[16:34:07.575]      __var manuf = 0;
[16:34:07.575]        // -> [manuf <= 0x00000000]
[16:34:07.575]      __var isMSPM0G1X0X_G3X0X = 0;
[16:34:07.575]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:34:07.575]      __var isProduction = 0;
[16:34:07.575]        // -> [isProduction <= 0x00000000]
[16:34:07.575]      __var continueId = 0;
[16:34:07.575]        // -> [continueId <= 0x00000000]
[16:34:07.575]      deviceID =   Read32(0x41C40004);
[16:34:07.578]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:34:07.578]        // -> [deviceID <= 0x2BB8802F]
[16:34:07.578]      version = deviceID >> 28;
[16:34:07.578]        // -> [version <= 0x00000002]
[16:34:07.578]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:34:07.581]        // -> [partNum <= 0x0000BB88]
[16:34:07.581]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:34:07.581]        // -> [manuf <= 0x00000017]
[16:34:07.581]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:34:07.581]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:34:07.581]      isProduction = (version > 0);
[16:34:07.581]        // -> [isProduction <= 0x00000001]
[16:34:07.581]    </block>
[16:34:07.581]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:34:07.581]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:34:07.581]        // =>  FALSE
[16:34:07.581]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:34:07.581]    </control>
[16:34:07.581]    <control if="continueId == 4" while="" timeout="0" info="">
[16:34:07.581]      // if-block "continueId == 4"
[16:34:07.581]        // =>  FALSE
[16:34:07.581]      // skip if-block "continueId == 4"
[16:34:07.581]    </control>
[16:34:07.583]    <control if="!isProduction" while="" timeout="0" info="">
[16:34:07.583]      // if-block "!isProduction"
[16:34:07.583]        // =>  FALSE
[16:34:07.583]      // skip if-block "!isProduction"
[16:34:07.583]    </control>
[16:34:07.583]  </sequence>
[16:34:07.583]  
