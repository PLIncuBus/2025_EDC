/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : F:\Code\2025_EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0035.log
 *  Created     : 17:11:51 (29/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : F:/keil/package/TexasInstruments/MSPM0G1X0X_G3X0X_DFP/1.3.1/TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[17:11:51.366]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:11:51.366]  
[17:11:51.369]  <debugvars>
[17:11:51.371]    // Pre-defined
[17:11:51.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:11:51.375]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:11:51.375]    __dp=0x00000000
[17:11:51.375]    __ap=0x00000000
[17:11:51.375]    __traceout=0x00000000      (Trace Disabled)
[17:11:51.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:11:51.375]    __FlashAddr=0x00000000
[17:11:51.375]    __FlashLen=0x00000000
[17:11:51.375]    __FlashArg=0x00000000
[17:11:51.375]    __FlashOp=0x00000000
[17:11:51.375]    __Result=0x00000000
[17:11:51.375]  </debugvars>
[17:11:51.375]  
[17:11:51.375]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:11:51.375]    <block atomic="false" info="">
[17:11:51.375]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:11:51.375]        // -> [isSWJ <= 0x00000001]
[17:11:51.375]      __var hasDormant = __protocol & 0x00020000;
[17:11:51.375]        // -> [hasDormant <= 0x00000000]
[17:11:51.375]      __var protType   = __protocol & 0x0000FFFF;
[17:11:51.376]        // -> [protType <= 0x00000002]
[17:11:51.376]    </block>
[17:11:51.376]    <control if="protType == 1" while="" timeout="0" info="">
[17:11:51.376]      // if-block "protType == 1"
[17:11:51.376]        // =>  FALSE
[17:11:51.376]      // skip if-block "protType == 1"
[17:11:51.376]    </control>
[17:11:51.376]    <control if="protType == 2" while="" timeout="0" info="">
[17:11:51.376]      // if-block "protType == 2"
[17:11:51.376]        // =>  TRUE
[17:11:51.376]      <control if="isSWJ" while="" timeout="0" info="">
[17:11:51.376]        // if-block "isSWJ"
[17:11:51.376]          // =>  TRUE
[17:11:51.376]        <control if="hasDormant" while="" timeout="0" info="">
[17:11:51.376]          // if-block "hasDormant"
[17:11:51.377]            // =>  FALSE
[17:11:51.377]          // skip if-block "hasDormant"
[17:11:51.377]        </control>
[17:11:51.377]        <control if="!hasDormant" while="" timeout="0" info="">
[17:11:51.377]          // if-block "!hasDormant"
[17:11:51.377]            // =>  TRUE
[17:11:51.377]          <block atomic="false" info="">
[17:11:51.377]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:11:51.379]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:51.380]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:11:51.381]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:11:51.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:11:51.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:51.388]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:11:51.390]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:11:51.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:11:51.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:11:51.392]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:11:51.393]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:11:51.394]          </block>
[17:11:51.394]          // end if-block "!hasDormant"
[17:11:51.394]        </control>
[17:11:51.394]        // end if-block "isSWJ"
[17:11:51.394]      </control>
[17:11:51.394]      <control if="!isSWJ" while="" timeout="0" info="">
[17:11:51.394]        // if-block "!isSWJ"
[17:11:51.394]          // =>  FALSE
[17:11:51.394]        // skip if-block "!isSWJ"
[17:11:51.394]      </control>
[17:11:51.394]      <block atomic="false" info="">
[17:11:51.394]        ReadDP(0x0);
[17:11:51.396]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:11:51.396]      </block>
[17:11:51.396]      // end if-block "protType == 2"
[17:11:51.396]    </control>
[17:11:51.396]  </sequence>
[17:11:51.396]  
[17:12:30.887]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:12:30.887]  
[17:12:30.887]  <debugvars>
[17:12:30.887]    // Pre-defined
[17:12:30.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:12:30.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:12:30.887]    __dp=0x00000000
[17:12:30.887]    __ap=0x00000000
[17:12:30.887]    __traceout=0x00000000      (Trace Disabled)
[17:12:30.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:12:30.887]    __FlashAddr=0x00000000
[17:12:30.888]    __FlashLen=0x00000000
[17:12:30.888]    __FlashArg=0x00000000
[17:12:30.888]    __FlashOp=0x00000000
[17:12:30.888]    __Result=0x00000000
[17:12:30.888]  </debugvars>
[17:12:30.888]  
[17:12:30.888]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:12:30.888]    <block atomic="false" info="">
[17:12:30.888]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:12:30.888]        // -> [isSWJ <= 0x00000001]
[17:12:30.889]      __var hasDormant = __protocol & 0x00020000;
[17:12:30.889]        // -> [hasDormant <= 0x00000000]
[17:12:30.889]      __var protType   = __protocol & 0x0000FFFF;
[17:12:30.889]        // -> [protType <= 0x00000002]
[17:12:30.889]    </block>
[17:12:30.889]    <control if="protType == 1" while="" timeout="0" info="">
[17:12:30.889]      // if-block "protType == 1"
[17:12:30.889]        // =>  FALSE
[17:12:30.889]      // skip if-block "protType == 1"
[17:12:30.889]    </control>
[17:12:30.889]    <control if="protType == 2" while="" timeout="0" info="">
[17:12:30.889]      // if-block "protType == 2"
[17:12:30.889]        // =>  TRUE
[17:12:30.889]      <control if="isSWJ" while="" timeout="0" info="">
[17:12:30.889]        // if-block "isSWJ"
[17:12:30.889]          // =>  TRUE
[17:12:30.889]        <control if="hasDormant" while="" timeout="0" info="">
[17:12:30.890]          // if-block "hasDormant"
[17:12:30.890]            // =>  FALSE
[17:12:30.890]          // skip if-block "hasDormant"
[17:12:30.890]        </control>
[17:12:30.890]        <control if="!hasDormant" while="" timeout="0" info="">
[17:12:30.890]          // if-block "!hasDormant"
[17:12:30.890]            // =>  TRUE
[17:12:30.890]          <block atomic="false" info="">
[17:12:30.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:12:30.892]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:12:30.892]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:12:30.894]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:12:30.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:12:30.900]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:12:30.900]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:12:30.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:12:30.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:12:30.907]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:12:30.908]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:12:30.911]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:12:30.911]          </block>
[17:12:30.911]          // end if-block "!hasDormant"
[17:12:30.911]        </control>
[17:12:30.911]        // end if-block "isSWJ"
[17:12:30.911]      </control>
[17:12:30.911]      <control if="!isSWJ" while="" timeout="0" info="">
[17:12:30.911]        // if-block "!isSWJ"
[17:12:30.911]          // =>  FALSE
[17:12:30.911]        // skip if-block "!isSWJ"
[17:12:30.911]      </control>
[17:12:30.911]      <block atomic="false" info="">
[17:12:30.911]        ReadDP(0x0);
[17:12:30.913]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:12:30.913]      </block>
[17:12:30.913]      // end if-block "protType == 2"
[17:12:30.913]    </control>
[17:12:30.913]  </sequence>
[17:12:30.913]  
[17:12:30.915]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:12:30.915]  
[17:12:30.915]  <debugvars>
[17:12:30.915]    // Pre-defined
[17:12:30.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:12:30.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:12:30.915]    __dp=0x00000000
[17:12:30.915]    __ap=0x00000000
[17:12:30.915]    __traceout=0x00000000      (Trace Disabled)
[17:12:30.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:12:30.915]    __FlashAddr=0x00000000
[17:12:30.915]    __FlashLen=0x00000000
[17:12:30.916]    __FlashArg=0x00000000
[17:12:30.916]    __FlashOp=0x00000000
[17:12:30.916]    __Result=0x00000000
[17:12:30.916]  </debugvars>
[17:12:30.916]  
[17:12:30.916]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:12:30.916]    <block atomic="false" info="">
[17:12:30.916]      __var SW_DP_ABORT       = 0x0;
[17:12:30.916]        // -> [SW_DP_ABORT <= 0x00000000]
[17:12:30.916]      __var DP_CTRL_STAT      = 0x4;
[17:12:30.916]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:12:30.916]      __var DP_SELECT         = 0x8;
[17:12:30.916]        // -> [DP_SELECT <= 0x00000008]
[17:12:30.916]      __var powered_down      = 0;
[17:12:30.916]        // -> [powered_down <= 0x00000000]
[17:12:30.916]      WriteDP(DP_SELECT, 0x00000000);
[17:12:30.919]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:12:30.919]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:12:30.920]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:12:30.920]        // -> [powered_down <= 0x00000001]
[17:12:30.921]    </block>
[17:12:30.921]    <control if="powered_down" while="" timeout="0" info="">
[17:12:30.921]      // if-block "powered_down"
[17:12:30.921]        // =>  TRUE
[17:12:30.921]      <block atomic="false" info="">
[17:12:30.921]        Message(0, "Debug/System power-up request sent");
[17:12:30.926]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:12:30.929]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:12:30.929]      </block>
[17:12:30.929]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:12:30.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:12:30.930]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:12:30.931]        // while-condition  =>  FALSE
[17:12:30.931]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:12:30.931]      </control>
[17:12:30.931]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:12:30.931]        // if-block "(__protocol & 0xFFFF) == 1"
[17:12:30.931]          // =>  FALSE
[17:12:30.931]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:12:30.931]      </control>
[17:12:30.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:12:30.931]        // if-block "(__protocol & 0xFFFF) == 2"
[17:12:30.931]          // =>  TRUE
[17:12:30.931]        <block atomic="false" info="">
[17:12:30.931]          Message(0, "executing SWD power up");
[17:12:30.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:12:30.935]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:12:30.935]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:12:30.936]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:12:30.936]        </block>
[17:12:30.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:12:30.937]      </control>
[17:12:30.937]      // end if-block "powered_down"
[17:12:30.937]    </control>
[17:12:30.937]    <block atomic="false" info="">
[17:12:30.937]      __var DEBUG_PORT_VAL    = 0;
[17:12:30.937]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:12:30.937]      __var ACCESS_POINT_VAL  = 0;
[17:12:30.937]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:12:30.937]      __ap = 1; 
[17:12:30.937]        // -> [__ap <= 0x00000001]
[17:12:30.937]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:12:30.940]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:12:30.940]      __ap = 4;
[17:12:30.941]        // -> [__ap <= 0x00000004]
[17:12:30.941]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:12:30.944]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:12:30.944]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:12:30.944]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:12:30.946]    </block>
[17:12:30.946]    <block atomic="false" info="">
[17:12:30.946]      __var nReset = 0x80;
[17:12:30.946]        // -> [nReset <= 0x00000080]
[17:12:30.946]      __var canReadPins = 0;
[17:12:30.946]        // -> [canReadPins <= 0x00000000]
[17:12:30.946]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:12:30.947]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:12:30.948]        // -> [canReadPins <= 0x00000001]
[17:12:30.948]    </block>
[17:12:30.948]    <control if="" while="1" timeout="200" info="">
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.948]      // while-condition  =>  TRUE
[17:12:30.948]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.949]      // while-condition  =>  TRUE
[17:12:30.949]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.950]      // while-condition  =>  TRUE
[17:12:30.950]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.951]      // while "1"  (timeout="200")
[17:12:30.951]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.952]      // while-condition  =>  TRUE
[17:12:30.952]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.954]      // while-condition  =>  TRUE
[17:12:30.954]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.955]      // while "1"  (timeout="200")
[17:12:30.955]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.956]      // while "1"  (timeout="200")
[17:12:30.956]      // while-condition  =>  TRUE
[17:12:30.957]      // while "1"  (timeout="200")
[17:12:30.957]      // while  =>  TIMEOUT
[17:12:30.957]      // end while "1"
[17:12:30.957]    </control>
[17:12:30.957]    <control if="canReadPins" while="" timeout="0" info="">
[17:12:30.957]      // if-block "canReadPins"
[17:12:30.957]        // =>  TRUE
[17:12:30.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:12:30.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:12:30.959]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:12:30.959]        // while-condition  =>  FALSE
[17:12:30.959]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:12:30.959]      </control>
[17:12:30.959]      // end if-block "canReadPins"
[17:12:30.959]    </control>
[17:12:30.959]    <control if="!canReadPins" while="" timeout="0" info="">
[17:12:30.959]      // if-block "!canReadPins"
[17:12:30.959]        // =>  FALSE
[17:12:30.959]      // skip if-block "!canReadPins"
[17:12:30.959]    </control>
[17:12:30.959]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:12:30.959]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:12:30.959]        // =>  TRUE
[17:12:30.959]      <block atomic="false" info="">
[17:12:30.960]        WriteAP(0x00, 0x190008);
[17:12:30.961]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:12:30.961]        WriteAP(0xF0, 0x01);
[17:12:30.970]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:12:30.970]      </block>
[17:12:30.970]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:12:30.970]    </control>
[17:12:30.970]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:12:30.970]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:12:30.970]        // =>  FALSE
[17:12:30.970]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:12:30.970]    </control>
[17:12:30.970]    <block atomic="false" info="">
[17:12:30.970]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:12:30.974]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:12:30.974]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:12:30.974]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:12:30.976]      __ap = 0; //lets make sure we reset the access point selection
[17:12:30.976]        // -> [__ap <= 0x00000000]
[17:12:30.976]    </block>
[17:12:30.976]  </sequence>
[17:12:30.976]  
[17:12:30.992]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:12:30.992]  
[17:12:30.992]  <debugvars>
[17:12:30.992]    // Pre-defined
[17:12:30.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:12:30.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:12:30.994]    __dp=0x00000000
[17:12:30.994]    __ap=0x00000000
[17:12:30.994]    __traceout=0x00000000      (Trace Disabled)
[17:12:30.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:12:30.994]    __FlashAddr=0x00000000
[17:12:30.994]    __FlashLen=0x00000000
[17:12:30.994]    __FlashArg=0x00000000
[17:12:30.994]    __FlashOp=0x00000000
[17:12:30.994]    __Result=0x00000000
[17:12:30.994]  </debugvars>
[17:12:30.994]  
[17:12:30.994]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:12:30.994]    <block atomic="false" info="">
[17:12:30.994]      __var deviceID = 0;
[17:12:30.994]        // -> [deviceID <= 0x00000000]
[17:12:30.994]      __var version = 0;
[17:12:30.995]        // -> [version <= 0x00000000]
[17:12:30.995]      __var partNum = 0;
[17:12:30.995]        // -> [partNum <= 0x00000000]
[17:12:30.995]      __var manuf = 0;
[17:12:30.995]        // -> [manuf <= 0x00000000]
[17:12:30.995]      __var isMSPM0G1X0X_G3X0X = 0;
[17:12:30.995]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:12:30.995]      __var isProduction = 0;
[17:12:30.995]        // -> [isProduction <= 0x00000000]
[17:12:30.995]      __var continueId = 0;
[17:12:30.995]        // -> [continueId <= 0x00000000]
[17:12:30.995]      deviceID =   Read32(0x41C40004);
[17:12:31.004]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:12:31.004]        // -> [deviceID <= 0x2BB8802F]
[17:12:31.004]      version = deviceID >> 28;
[17:12:31.004]        // -> [version <= 0x00000002]
[17:12:31.004]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:12:31.004]        // -> [partNum <= 0x0000BB88]
[17:12:31.004]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:12:31.004]        // -> [manuf <= 0x00000017]
[17:12:31.004]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:12:31.004]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:12:31.004]      isProduction = (version > 0);
[17:12:31.004]        // -> [isProduction <= 0x00000001]
[17:12:31.004]    </block>
[17:12:31.004]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:12:31.004]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:12:31.004]        // =>  FALSE
[17:12:31.005]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:12:31.005]    </control>
[17:12:31.005]    <control if="continueId == 4" while="" timeout="0" info="">
[17:12:31.005]      // if-block "continueId == 4"
[17:12:31.005]        // =>  FALSE
[17:12:31.005]      // skip if-block "continueId == 4"
[17:12:31.005]    </control>
[17:12:31.005]    <control if="!isProduction" while="" timeout="0" info="">
[17:12:31.005]      // if-block "!isProduction"
[17:12:31.005]        // =>  FALSE
[17:12:31.005]      // skip if-block "!isProduction"
[17:12:31.005]    </control>
[17:12:31.005]  </sequence>
[17:12:31.005]  
[17:13:42.944]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:13:42.944]  
[17:13:42.944]  <debugvars>
[17:13:42.944]    // Pre-defined
[17:13:42.944]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:13:42.944]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:13:42.944]    __dp=0x00000000
[17:13:42.944]    __ap=0x00000000
[17:13:42.944]    __traceout=0x00000000      (Trace Disabled)
[17:13:42.944]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:13:42.944]    __FlashAddr=0x00000000
[17:13:42.944]    __FlashLen=0x00000000
[17:13:42.944]    __FlashArg=0x00000000
[17:13:42.944]    __FlashOp=0x00000000
[17:13:42.944]    __Result=0x00000000
[17:13:42.944]  </debugvars>
[17:13:42.944]  
[17:13:42.944]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:13:42.944]    <block atomic="false" info="">
[17:13:42.945]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:13:42.945]        // -> [isSWJ <= 0x00000001]
[17:13:42.945]      __var hasDormant = __protocol & 0x00020000;
[17:13:42.945]        // -> [hasDormant <= 0x00000000]
[17:13:42.945]      __var protType   = __protocol & 0x0000FFFF;
[17:13:42.945]        // -> [protType <= 0x00000002]
[17:13:42.945]    </block>
[17:13:42.945]    <control if="protType == 1" while="" timeout="0" info="">
[17:13:42.945]      // if-block "protType == 1"
[17:13:42.945]        // =>  FALSE
[17:13:42.945]      // skip if-block "protType == 1"
[17:13:42.945]    </control>
[17:13:42.945]    <control if="protType == 2" while="" timeout="0" info="">
[17:13:42.945]      // if-block "protType == 2"
[17:13:42.945]        // =>  TRUE
[17:13:42.945]      <control if="isSWJ" while="" timeout="0" info="">
[17:13:42.945]        // if-block "isSWJ"
[17:13:42.945]          // =>  TRUE
[17:13:42.945]        <control if="hasDormant" while="" timeout="0" info="">
[17:13:42.945]          // if-block "hasDormant"
[17:13:42.945]            // =>  FALSE
[17:13:42.945]          // skip if-block "hasDormant"
[17:13:42.945]        </control>
[17:13:42.945]        <control if="!hasDormant" while="" timeout="0" info="">
[17:13:42.946]          // if-block "!hasDormant"
[17:13:42.946]            // =>  TRUE
[17:13:42.946]          <block atomic="false" info="">
[17:13:42.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:13:42.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:13:42.947]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:13:42.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:13:42.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:13:42.950]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:13:42.950]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:13:42.951]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:13:42.952]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:13:42.956]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:13:42.956]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:13:42.957]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:13:42.957]          </block>
[17:13:42.959]          // end if-block "!hasDormant"
[17:13:42.959]        </control>
[17:13:42.959]        // end if-block "isSWJ"
[17:13:42.959]      </control>
[17:13:42.959]      <control if="!isSWJ" while="" timeout="0" info="">
[17:13:42.959]        // if-block "!isSWJ"
[17:13:42.959]          // =>  FALSE
[17:13:42.959]        // skip if-block "!isSWJ"
[17:13:42.959]      </control>
[17:13:42.959]      <block atomic="false" info="">
[17:13:42.959]        ReadDP(0x0);
[17:13:42.961]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:13:42.961]      </block>
[17:13:42.961]      // end if-block "protType == 2"
[17:13:42.961]    </control>
[17:13:42.961]  </sequence>
[17:13:42.961]  
[17:13:42.966]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:13:42.966]  
[17:13:42.966]  <debugvars>
[17:13:42.966]    // Pre-defined
[17:13:42.966]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:13:42.966]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:13:42.966]    __dp=0x00000000
[17:13:42.966]    __ap=0x00000000
[17:13:42.966]    __traceout=0x00000000      (Trace Disabled)
[17:13:42.966]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:13:42.967]    __FlashAddr=0x00000000
[17:13:42.967]    __FlashLen=0x00000000
[17:13:42.967]    __FlashArg=0x00000000
[17:13:42.967]    __FlashOp=0x00000000
[17:13:42.967]    __Result=0x00000000
[17:13:42.967]  </debugvars>
[17:13:42.967]  
[17:13:42.967]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:13:42.967]    <block atomic="false" info="">
[17:13:42.967]      __var SW_DP_ABORT       = 0x0;
[17:13:42.967]        // -> [SW_DP_ABORT <= 0x00000000]
[17:13:42.967]      __var DP_CTRL_STAT      = 0x4;
[17:13:42.967]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:13:42.967]      __var DP_SELECT         = 0x8;
[17:13:42.967]        // -> [DP_SELECT <= 0x00000008]
[17:13:42.967]      __var powered_down      = 0;
[17:13:42.967]        // -> [powered_down <= 0x00000000]
[17:13:42.967]      WriteDP(DP_SELECT, 0x00000000);
[17:13:42.973]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:13:42.973]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:13:42.975]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:13:42.975]        // -> [powered_down <= 0x00000001]
[17:13:42.975]    </block>
[17:13:42.975]    <control if="powered_down" while="" timeout="0" info="">
[17:13:42.975]      // if-block "powered_down"
[17:13:42.975]        // =>  TRUE
[17:13:42.975]      <block atomic="false" info="">
[17:13:42.975]        Message(0, "Debug/System power-up request sent");
[17:13:42.975]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:13:42.977]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:13:42.977]      </block>
[17:13:42.977]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:13:42.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:13:42.979]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:13:42.979]        // while-condition  =>  FALSE
[17:13:42.979]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:13:42.979]      </control>
[17:13:42.979]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:13:42.979]        // if-block "(__protocol & 0xFFFF) == 1"
[17:13:42.979]          // =>  FALSE
[17:13:42.980]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:13:42.980]      </control>
[17:13:42.980]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:13:42.980]        // if-block "(__protocol & 0xFFFF) == 2"
[17:13:42.980]          // =>  TRUE
[17:13:42.980]        <block atomic="false" info="">
[17:13:42.980]          Message(0, "executing SWD power up");
[17:13:42.984]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:13:42.985]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:13:42.986]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:13:42.987]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:13:42.987]        </block>
[17:13:42.988]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:13:42.988]      </control>
[17:13:42.988]      // end if-block "powered_down"
[17:13:42.988]    </control>
[17:13:42.988]    <block atomic="false" info="">
[17:13:42.988]      __var DEBUG_PORT_VAL    = 0;
[17:13:42.988]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:13:42.988]      __var ACCESS_POINT_VAL  = 0;
[17:13:42.988]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:13:42.988]      __ap = 1; 
[17:13:42.988]        // -> [__ap <= 0x00000001]
[17:13:42.988]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:13:42.991]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:13:42.991]      __ap = 4;
[17:13:42.991]        // -> [__ap <= 0x00000004]
[17:13:42.991]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:13:42.995]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:13:42.995]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:13:42.995]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:13:42.997]    </block>
[17:13:42.997]    <block atomic="false" info="">
[17:13:42.997]      __var nReset = 0x80;
[17:13:42.997]        // -> [nReset <= 0x00000080]
[17:13:42.997]      __var canReadPins = 0;
[17:13:42.997]        // -> [canReadPins <= 0x00000000]
[17:13:42.997]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:13:42.999]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:13:42.999]        // -> [canReadPins <= 0x00000001]
[17:13:42.999]    </block>
[17:13:42.999]    <control if="" while="1" timeout="200" info="">
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:42.999]      // while-condition  =>  TRUE
[17:13:42.999]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.001]      // while "1"  (timeout="200")
[17:13:43.001]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.002]      // while "1"  (timeout="200")
[17:13:43.002]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.003]      // while-condition  =>  TRUE
[17:13:43.003]      // while "1"  (timeout="200")
[17:13:43.004]      // while-condition  =>  TRUE
[17:13:43.004]      // while "1"  (timeout="200")
[17:13:43.004]      // while  =>  TIMEOUT
[17:13:43.004]      // end while "1"
[17:13:43.004]    </control>
[17:13:43.004]    <control if="canReadPins" while="" timeout="0" info="">
[17:13:43.004]      // if-block "canReadPins"
[17:13:43.004]        // =>  TRUE
[17:13:43.004]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:13:43.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:13:43.005]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:13:43.006]        // while-condition  =>  FALSE
[17:13:43.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:13:43.006]      </control>
[17:13:43.006]      // end if-block "canReadPins"
[17:13:43.006]    </control>
[17:13:43.006]    <control if="!canReadPins" while="" timeout="0" info="">
[17:13:43.006]      // if-block "!canReadPins"
[17:13:43.006]        // =>  FALSE
[17:13:43.006]      // skip if-block "!canReadPins"
[17:13:43.006]    </control>
[17:13:43.006]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:13:43.006]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:13:43.006]        // =>  TRUE
[17:13:43.006]      <block atomic="false" info="">
[17:13:43.006]        WriteAP(0x00, 0x190008);
[17:13:43.010]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:13:43.010]        WriteAP(0xF0, 0x01);
[17:13:43.014]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:13:43.014]      </block>
[17:13:43.014]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:13:43.014]    </control>
[17:13:43.014]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:13:43.014]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:13:43.014]        // =>  FALSE
[17:13:43.014]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:13:43.014]    </control>
[17:13:43.014]    <block atomic="false" info="">
[17:13:43.014]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:13:43.017]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:13:43.017]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:13:43.017]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:13:43.019]      __ap = 0; //lets make sure we reset the access point selection
[17:13:43.019]        // -> [__ap <= 0x00000000]
[17:13:43.019]    </block>
[17:13:43.019]  </sequence>
[17:13:43.019]  
[17:13:43.041]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:13:43.041]  
[17:13:43.041]  <debugvars>
[17:13:43.041]    // Pre-defined
[17:13:43.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:13:43.042]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:13:43.042]    __dp=0x00000000
[17:13:43.042]    __ap=0x00000000
[17:13:43.042]    __traceout=0x00000000      (Trace Disabled)
[17:13:43.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:13:43.042]    __FlashAddr=0x00000000
[17:13:43.042]    __FlashLen=0x00000000
[17:13:43.042]    __FlashArg=0x00000000
[17:13:43.042]    __FlashOp=0x00000000
[17:13:43.042]    __Result=0x00000000
[17:13:43.042]  </debugvars>
[17:13:43.042]  
[17:13:43.042]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:13:43.042]    <block atomic="false" info="">
[17:13:43.042]      __var deviceID = 0;
[17:13:43.042]        // -> [deviceID <= 0x00000000]
[17:13:43.042]      __var version = 0;
[17:13:43.042]        // -> [version <= 0x00000000]
[17:13:43.042]      __var partNum = 0;
[17:13:43.042]        // -> [partNum <= 0x00000000]
[17:13:43.042]      __var manuf = 0;
[17:13:43.042]        // -> [manuf <= 0x00000000]
[17:13:43.042]      __var isMSPM0G1X0X_G3X0X = 0;
[17:13:43.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:13:43.043]      __var isProduction = 0;
[17:13:43.043]        // -> [isProduction <= 0x00000000]
[17:13:43.043]      __var continueId = 0;
[17:13:43.043]        // -> [continueId <= 0x00000000]
[17:13:43.043]      deviceID =   Read32(0x41C40004);
[17:13:43.049]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:13:43.049]        // -> [deviceID <= 0x2BB8802F]
[17:13:43.049]      version = deviceID >> 28;
[17:13:43.049]        // -> [version <= 0x00000002]
[17:13:43.049]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:13:43.049]        // -> [partNum <= 0x0000BB88]
[17:13:43.049]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:13:43.049]        // -> [manuf <= 0x00000017]
[17:13:43.049]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:13:43.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:13:43.049]      isProduction = (version > 0);
[17:13:43.049]        // -> [isProduction <= 0x00000001]
[17:13:43.049]    </block>
[17:13:43.049]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:13:43.049]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:13:43.049]        // =>  FALSE
[17:13:43.050]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:13:43.050]    </control>
[17:13:43.050]    <control if="continueId == 4" while="" timeout="0" info="">
[17:13:43.050]      // if-block "continueId == 4"
[17:13:43.050]        // =>  FALSE
[17:13:43.050]      // skip if-block "continueId == 4"
[17:13:43.050]    </control>
[17:13:43.050]    <control if="!isProduction" while="" timeout="0" info="">
[17:13:43.050]      // if-block "!isProduction"
[17:13:43.050]        // =>  FALSE
[17:13:43.050]      // skip if-block "!isProduction"
[17:13:43.050]    </control>
[17:13:43.050]  </sequence>
[17:13:43.050]  
[17:22:08.617]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:22:08.617]  
[17:22:08.617]  <debugvars>
[17:22:08.617]    // Pre-defined
[17:22:08.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:22:08.617]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:22:08.617]    __dp=0x00000000
[17:22:08.618]    __ap=0x00000000
[17:22:08.618]    __traceout=0x00000000      (Trace Disabled)
[17:22:08.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:22:08.618]    __FlashAddr=0x00000000
[17:22:08.618]    __FlashLen=0x00000000
[17:22:08.618]    __FlashArg=0x00000000
[17:22:08.618]    __FlashOp=0x00000000
[17:22:08.618]    __Result=0x00000000
[17:22:08.618]  </debugvars>
[17:22:08.618]  
[17:22:08.618]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:22:08.618]    <block atomic="false" info="">
[17:22:08.618]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:22:08.618]        // -> [isSWJ <= 0x00000001]
[17:22:08.618]      __var hasDormant = __protocol & 0x00020000;
[17:22:08.618]        // -> [hasDormant <= 0x00000000]
[17:22:08.618]      __var protType   = __protocol & 0x0000FFFF;
[17:22:08.618]        // -> [protType <= 0x00000002]
[17:22:08.618]    </block>
[17:22:08.619]    <control if="protType == 1" while="" timeout="0" info="">
[17:22:08.619]      // if-block "protType == 1"
[17:22:08.619]        // =>  FALSE
[17:22:08.619]      // skip if-block "protType == 1"
[17:22:08.619]    </control>
[17:22:08.619]    <control if="protType == 2" while="" timeout="0" info="">
[17:22:08.619]      // if-block "protType == 2"
[17:22:08.619]        // =>  TRUE
[17:22:08.619]      <control if="isSWJ" while="" timeout="0" info="">
[17:22:08.619]        // if-block "isSWJ"
[17:22:08.619]          // =>  TRUE
[17:22:08.619]        <control if="hasDormant" while="" timeout="0" info="">
[17:22:08.620]          // if-block "hasDormant"
[17:22:08.620]            // =>  FALSE
[17:22:08.620]          // skip if-block "hasDormant"
[17:22:08.620]        </control>
[17:22:08.620]        <control if="!hasDormant" while="" timeout="0" info="">
[17:22:08.620]          // if-block "!hasDormant"
[17:22:08.620]            // =>  TRUE
[17:22:08.620]          <block atomic="false" info="">
[17:22:08.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:22:08.624]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:22:08.624]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:22:08.630]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:22:08.630]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:22:08.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:22:08.631]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:22:08.634]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:22:08.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:22:08.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:22:08.637]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:22:08.638]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:22:08.638]          </block>
[17:22:08.638]          // end if-block "!hasDormant"
[17:22:08.638]        </control>
[17:22:08.638]        // end if-block "isSWJ"
[17:22:08.638]      </control>
[17:22:08.638]      <control if="!isSWJ" while="" timeout="0" info="">
[17:22:08.638]        // if-block "!isSWJ"
[17:22:08.638]          // =>  FALSE
[17:22:08.638]        // skip if-block "!isSWJ"
[17:22:08.638]      </control>
[17:22:08.638]      <block atomic="false" info="">
[17:22:08.638]        ReadDP(0x0);
[17:22:08.644]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:22:08.644]      </block>
[17:22:08.644]      // end if-block "protType == 2"
[17:22:08.644]    </control>
[17:22:08.644]  </sequence>
[17:22:08.644]  
[17:22:08.647]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:22:08.647]  
[17:22:08.647]  <debugvars>
[17:22:08.647]    // Pre-defined
[17:22:08.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:22:08.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:22:08.647]    __dp=0x00000000
[17:22:08.647]    __ap=0x00000000
[17:22:08.647]    __traceout=0x00000000      (Trace Disabled)
[17:22:08.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:22:08.647]    __FlashAddr=0x00000000
[17:22:08.647]    __FlashLen=0x00000000
[17:22:08.647]    __FlashArg=0x00000000
[17:22:08.647]    __FlashOp=0x00000000
[17:22:08.647]    __Result=0x00000000
[17:22:08.647]  </debugvars>
[17:22:08.647]  
[17:22:08.647]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:22:08.647]    <block atomic="false" info="">
[17:22:08.647]      __var SW_DP_ABORT       = 0x0;
[17:22:08.648]        // -> [SW_DP_ABORT <= 0x00000000]
[17:22:08.648]      __var DP_CTRL_STAT      = 0x4;
[17:22:08.648]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:22:08.648]      __var DP_SELECT         = 0x8;
[17:22:08.648]        // -> [DP_SELECT <= 0x00000008]
[17:22:08.648]      __var powered_down      = 0;
[17:22:08.648]        // -> [powered_down <= 0x00000000]
[17:22:08.648]      WriteDP(DP_SELECT, 0x00000000);
[17:22:08.649]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:22:08.650]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:22:08.651]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:22:08.651]        // -> [powered_down <= 0x00000001]
[17:22:08.651]    </block>
[17:22:08.651]    <control if="powered_down" while="" timeout="0" info="">
[17:22:08.651]      // if-block "powered_down"
[17:22:08.651]        // =>  TRUE
[17:22:08.651]      <block atomic="false" info="">
[17:22:08.651]        Message(0, "Debug/System power-up request sent");
[17:22:08.654]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:22:08.656]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:22:08.656]      </block>
[17:22:08.656]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:22:08.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:22:08.658]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:22:08.658]        // while-condition  =>  FALSE
[17:22:08.658]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:22:08.658]      </control>
[17:22:08.658]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:22:08.658]        // if-block "(__protocol & 0xFFFF) == 1"
[17:22:08.658]          // =>  FALSE
[17:22:08.658]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:22:08.658]      </control>
[17:22:08.658]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:22:08.658]        // if-block "(__protocol & 0xFFFF) == 2"
[17:22:08.658]          // =>  TRUE
[17:22:08.658]        <block atomic="false" info="">
[17:22:08.658]          Message(0, "executing SWD power up");
[17:22:08.660]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:22:08.661]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:22:08.661]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:22:08.663]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:22:08.663]        </block>
[17:22:08.663]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:22:08.663]      </control>
[17:22:08.663]      // end if-block "powered_down"
[17:22:08.663]    </control>
[17:22:08.663]    <block atomic="false" info="">
[17:22:08.663]      __var DEBUG_PORT_VAL    = 0;
[17:22:08.663]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:22:08.663]      __var ACCESS_POINT_VAL  = 0;
[17:22:08.663]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:22:08.663]      __ap = 1; 
[17:22:08.663]        // -> [__ap <= 0x00000001]
[17:22:08.663]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:22:08.667]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:22:08.667]      __ap = 4;
[17:22:08.667]        // -> [__ap <= 0x00000004]
[17:22:08.667]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:22:08.671]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:22:08.671]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:22:08.671]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:22:08.673]    </block>
[17:22:08.673]    <block atomic="false" info="">
[17:22:08.673]      __var nReset = 0x80;
[17:22:08.673]        // -> [nReset <= 0x00000080]
[17:22:08.673]      __var canReadPins = 0;
[17:22:08.673]        // -> [canReadPins <= 0x00000000]
[17:22:08.673]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:22:08.675]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:22:08.675]        // -> [canReadPins <= 0x00000001]
[17:22:08.675]    </block>
[17:22:08.675]    <control if="" while="1" timeout="200" info="">
[17:22:08.675]      // while "1"  (timeout="200")
[17:22:08.675]      // while-condition  =>  TRUE
[17:22:08.675]      // while "1"  (timeout="200")
[17:22:08.675]      // while-condition  =>  TRUE
[17:22:08.675]      // while "1"  (timeout="200")
[17:22:08.675]      // while-condition  =>  TRUE
[17:22:08.675]      // while "1"  (timeout="200")
[17:22:08.675]      // while-condition  =>  TRUE
[17:22:08.675]      // while "1"  (timeout="200")
[17:22:08.675]      // while-condition  =>  TRUE
[17:22:08.675]      // while "1"  (timeout="200")
[17:22:08.676]      // while-condition  =>  TRUE
[17:22:08.676]      // while "1"  (timeout="200")
[17:22:08.676]      // while  =>  TIMEOUT
[17:22:08.676]      // end while "1"
[17:22:08.676]    </control>
[17:22:08.676]    <control if="canReadPins" while="" timeout="0" info="">
[17:22:08.676]      // if-block "canReadPins"
[17:22:08.676]        // =>  TRUE
[17:22:08.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:22:08.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:22:08.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:22:08.678]        // while-condition  =>  FALSE
[17:22:08.678]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:22:08.678]      </control>
[17:22:08.678]      // end if-block "canReadPins"
[17:22:08.678]    </control>
[17:22:08.678]    <control if="!canReadPins" while="" timeout="0" info="">
[17:22:08.678]      // if-block "!canReadPins"
[17:22:08.678]        // =>  FALSE
[17:22:08.678]      // skip if-block "!canReadPins"
[17:22:08.678]    </control>
[17:22:08.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:22:08.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:22:08.678]        // =>  TRUE
[17:22:08.678]      <block atomic="false" info="">
[17:22:08.678]        WriteAP(0x00, 0x190008);
[17:22:08.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:22:08.680]        WriteAP(0xF0, 0x01);
[17:22:08.685]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:22:08.685]      </block>
[17:22:08.685]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:22:08.685]    </control>
[17:22:08.685]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:22:08.685]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:22:08.685]        // =>  FALSE
[17:22:08.685]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:22:08.685]    </control>
[17:22:08.685]    <block atomic="false" info="">
[17:22:08.685]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:22:08.688]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:22:08.688]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:22:08.688]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:22:08.690]      __ap = 0; //lets make sure we reset the access point selection
[17:22:08.690]        // -> [__ap <= 0x00000000]
[17:22:08.690]    </block>
[17:22:08.690]  </sequence>
[17:22:08.690]  
[17:22:08.708]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:22:08.708]  
[17:22:08.708]  <debugvars>
[17:22:08.708]    // Pre-defined
[17:22:08.708]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:22:08.708]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:22:08.709]    __dp=0x00000000
[17:22:08.709]    __ap=0x00000000
[17:22:08.709]    __traceout=0x00000000      (Trace Disabled)
[17:22:08.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:22:08.709]    __FlashAddr=0x00000000
[17:22:08.709]    __FlashLen=0x00000000
[17:22:08.709]    __FlashArg=0x00000000
[17:22:08.709]    __FlashOp=0x00000000
[17:22:08.709]    __Result=0x00000000
[17:22:08.709]  </debugvars>
[17:22:08.709]  
[17:22:08.709]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:22:08.709]    <block atomic="false" info="">
[17:22:08.709]      __var deviceID = 0;
[17:22:08.709]        // -> [deviceID <= 0x00000000]
[17:22:08.709]      __var version = 0;
[17:22:08.709]        // -> [version <= 0x00000000]
[17:22:08.709]      __var partNum = 0;
[17:22:08.709]        // -> [partNum <= 0x00000000]
[17:22:08.709]      __var manuf = 0;
[17:22:08.709]        // -> [manuf <= 0x00000000]
[17:22:08.709]      __var isMSPM0G1X0X_G3X0X = 0;
[17:22:08.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:22:08.710]      __var isProduction = 0;
[17:22:08.710]        // -> [isProduction <= 0x00000000]
[17:22:08.710]      __var continueId = 0;
[17:22:08.710]        // -> [continueId <= 0x00000000]
[17:22:08.710]      deviceID =   Read32(0x41C40004);
[17:22:08.719]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:22:08.719]        // -> [deviceID <= 0x2BB8802F]
[17:22:08.719]      version = deviceID >> 28;
[17:22:08.719]        // -> [version <= 0x00000002]
[17:22:08.719]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:22:08.719]        // -> [partNum <= 0x0000BB88]
[17:22:08.719]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:22:08.720]        // -> [manuf <= 0x00000017]
[17:22:08.720]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:22:08.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:22:08.720]      isProduction = (version > 0);
[17:22:08.720]        // -> [isProduction <= 0x00000001]
[17:22:08.720]    </block>
[17:22:08.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:22:08.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:22:08.720]        // =>  FALSE
[17:22:08.720]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:22:08.720]    </control>
[17:22:08.720]    <control if="continueId == 4" while="" timeout="0" info="">
[17:22:08.720]      // if-block "continueId == 4"
[17:22:08.720]        // =>  FALSE
[17:22:08.720]      // skip if-block "continueId == 4"
[17:22:08.720]    </control>
[17:22:08.720]    <control if="!isProduction" while="" timeout="0" info="">
[17:22:08.720]      // if-block "!isProduction"
[17:22:08.720]        // =>  FALSE
[17:22:08.720]      // skip if-block "!isProduction"
[17:22:08.720]    </control>
[17:22:08.720]  </sequence>
[17:22:08.720]  
[17:23:06.024]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:23:06.024]  
[17:23:06.024]  <debugvars>
[17:23:06.024]    // Pre-defined
[17:23:06.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:23:06.026]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:23:06.026]    __dp=0x00000000
[17:23:06.026]    __ap=0x00000000
[17:23:06.026]    __traceout=0x00000000      (Trace Disabled)
[17:23:06.026]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:23:06.026]    __FlashAddr=0x00000000
[17:23:06.026]    __FlashLen=0x00000000
[17:23:06.026]    __FlashArg=0x00000000
[17:23:06.026]    __FlashOp=0x00000000
[17:23:06.026]    __Result=0x00000000
[17:23:06.026]  </debugvars>
[17:23:06.026]  
[17:23:06.026]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:23:06.026]    <block atomic="false" info="">
[17:23:06.026]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:23:06.027]        // -> [isSWJ <= 0x00000001]
[17:23:06.027]      __var hasDormant = __protocol & 0x00020000;
[17:23:06.027]        // -> [hasDormant <= 0x00000000]
[17:23:06.027]      __var protType   = __protocol & 0x0000FFFF;
[17:23:06.027]        // -> [protType <= 0x00000002]
[17:23:06.027]    </block>
[17:23:06.027]    <control if="protType == 1" while="" timeout="0" info="">
[17:23:06.027]      // if-block "protType == 1"
[17:23:06.027]        // =>  FALSE
[17:23:06.027]      // skip if-block "protType == 1"
[17:23:06.027]    </control>
[17:23:06.027]    <control if="protType == 2" while="" timeout="0" info="">
[17:23:06.027]      // if-block "protType == 2"
[17:23:06.027]        // =>  TRUE
[17:23:06.027]      <control if="isSWJ" while="" timeout="0" info="">
[17:23:06.027]        // if-block "isSWJ"
[17:23:06.028]          // =>  TRUE
[17:23:06.028]        <control if="hasDormant" while="" timeout="0" info="">
[17:23:06.028]          // if-block "hasDormant"
[17:23:06.028]            // =>  FALSE
[17:23:06.028]          // skip if-block "hasDormant"
[17:23:06.028]        </control>
[17:23:06.028]        <control if="!hasDormant" while="" timeout="0" info="">
[17:23:06.028]          // if-block "!hasDormant"
[17:23:06.028]            // =>  TRUE
[17:23:06.028]          <block atomic="false" info="">
[17:23:06.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:23:06.029]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:23:06.029]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:23:06.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:23:06.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:23:06.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:23:06.033]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:23:06.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:23:06.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:23:06.036]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:23:06.037]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:23:06.038]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:23:06.038]          </block>
[17:23:06.038]          // end if-block "!hasDormant"
[17:23:06.038]        </control>
[17:23:06.038]        // end if-block "isSWJ"
[17:23:06.038]      </control>
[17:23:06.038]      <control if="!isSWJ" while="" timeout="0" info="">
[17:23:06.038]        // if-block "!isSWJ"
[17:23:06.038]          // =>  FALSE
[17:23:06.038]        // skip if-block "!isSWJ"
[17:23:06.039]      </control>
[17:23:06.039]      <block atomic="false" info="">
[17:23:06.039]        ReadDP(0x0);
[17:23:06.042]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:23:06.042]      </block>
[17:23:06.042]      // end if-block "protType == 2"
[17:23:06.043]    </control>
[17:23:06.043]  </sequence>
[17:23:06.043]  
[17:23:06.051]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:23:06.051]  
[17:23:06.051]  <debugvars>
[17:23:06.051]    // Pre-defined
[17:23:06.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:23:06.051]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:23:06.051]    __dp=0x00000000
[17:23:06.051]    __ap=0x00000000
[17:23:06.051]    __traceout=0x00000000      (Trace Disabled)
[17:23:06.051]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:23:06.051]    __FlashAddr=0x00000000
[17:23:06.051]    __FlashLen=0x00000000
[17:23:06.051]    __FlashArg=0x00000000
[17:23:06.051]    __FlashOp=0x00000000
[17:23:06.051]    __Result=0x00000000
[17:23:06.051]  </debugvars>
[17:23:06.051]  
[17:23:06.051]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:23:06.051]    <block atomic="false" info="">
[17:23:06.051]      __var SW_DP_ABORT       = 0x0;
[17:23:06.051]        // -> [SW_DP_ABORT <= 0x00000000]
[17:23:06.051]      __var DP_CTRL_STAT      = 0x4;
[17:23:06.051]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:23:06.051]      __var DP_SELECT         = 0x8;
[17:23:06.051]        // -> [DP_SELECT <= 0x00000008]
[17:23:06.052]      __var powered_down      = 0;
[17:23:06.052]        // -> [powered_down <= 0x00000000]
[17:23:06.052]      WriteDP(DP_SELECT, 0x00000000);
[17:23:06.053]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:23:06.053]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:23:06.055]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:23:06.055]        // -> [powered_down <= 0x00000001]
[17:23:06.055]    </block>
[17:23:06.055]    <control if="powered_down" while="" timeout="0" info="">
[17:23:06.055]      // if-block "powered_down"
[17:23:06.055]        // =>  TRUE
[17:23:06.055]      <block atomic="false" info="">
[17:23:06.055]        Message(0, "Debug/System power-up request sent");
[17:23:06.057]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:23:06.060]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:23:06.060]      </block>
[17:23:06.060]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:23:06.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:23:06.061]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:23:06.061]        // while-condition  =>  FALSE
[17:23:06.062]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:23:06.062]      </control>
[17:23:06.062]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:23:06.062]        // if-block "(__protocol & 0xFFFF) == 1"
[17:23:06.062]          // =>  FALSE
[17:23:06.062]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:23:06.062]      </control>
[17:23:06.062]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:23:06.062]        // if-block "(__protocol & 0xFFFF) == 2"
[17:23:06.062]          // =>  TRUE
[17:23:06.062]        <block atomic="false" info="">
[17:23:06.062]          Message(0, "executing SWD power up");
[17:23:06.064]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:23:06.065]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:23:06.065]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:23:06.071]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:23:06.071]        </block>
[17:23:06.071]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:23:06.071]      </control>
[17:23:06.071]      // end if-block "powered_down"
[17:23:06.071]    </control>
[17:23:06.071]    <block atomic="false" info="">
[17:23:06.071]      __var DEBUG_PORT_VAL    = 0;
[17:23:06.072]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:23:06.072]      __var ACCESS_POINT_VAL  = 0;
[17:23:06.072]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:23:06.072]      __ap = 1; 
[17:23:06.072]        // -> [__ap <= 0x00000001]
[17:23:06.072]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:23:06.076]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:23:06.076]      __ap = 4;
[17:23:06.076]        // -> [__ap <= 0x00000004]
[17:23:06.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:23:06.082]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:23:06.082]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:23:06.083]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:23:06.086]    </block>
[17:23:06.086]    <block atomic="false" info="">
[17:23:06.086]      __var nReset = 0x80;
[17:23:06.087]        // -> [nReset <= 0x00000080]
[17:23:06.087]      __var canReadPins = 0;
[17:23:06.087]        // -> [canReadPins <= 0x00000000]
[17:23:06.087]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:23:06.088]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:23:06.089]        // -> [canReadPins <= 0x00000001]
[17:23:06.089]    </block>
[17:23:06.089]    <control if="" while="1" timeout="200" info="">
[17:23:06.089]      // while "1"  (timeout="200")
[17:23:06.089]      // while-condition  =>  TRUE
[17:23:06.089]      // while "1"  (timeout="200")
[17:23:06.089]      // while-condition  =>  TRUE
[17:23:06.089]      // while "1"  (timeout="200")
[17:23:06.089]      // while-condition  =>  TRUE
[17:23:06.089]      // while "1"  (timeout="200")
[17:23:06.089]      // while-condition  =>  TRUE
[17:23:06.089]      // while "1"  (timeout="200")
[17:23:06.089]      // while-condition  =>  TRUE
[17:23:06.089]      // while "1"  (timeout="200")
[17:23:06.089]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.090]      // while-condition  =>  TRUE
[17:23:06.090]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.091]      // while "1"  (timeout="200")
[17:23:06.091]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.092]      // while-condition  =>  TRUE
[17:23:06.092]      // while "1"  (timeout="200")
[17:23:06.093]      // while-condition  =>  TRUE
[17:23:06.093]      // while "1"  (timeout="200")
[17:23:06.093]      // while-condition  =>  TRUE
[17:23:06.093]      // while "1"  (timeout="200")
[17:23:06.093]      // while-condition  =>  TRUE
[17:23:06.093]      // while "1"  (timeout="200")
[17:23:06.093]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.094]      // while "1"  (timeout="200")
[17:23:06.094]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.095]      // while "1"  (timeout="200")
[17:23:06.095]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.096]      // while "1"  (timeout="200")
[17:23:06.096]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.097]      // while "1"  (timeout="200")
[17:23:06.097]      // while-condition  =>  TRUE
[17:23:06.098]      // while "1"  (timeout="200")
[17:23:06.098]      // while  =>  TIMEOUT
[17:23:06.098]      // end while "1"
[17:23:06.098]    </control>
[17:23:06.098]    <control if="canReadPins" while="" timeout="0" info="">
[17:23:06.098]      // if-block "canReadPins"
[17:23:06.098]        // =>  TRUE
[17:23:06.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:23:06.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:23:06.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:23:06.100]        // while-condition  =>  FALSE
[17:23:06.100]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:23:06.100]      </control>
[17:23:06.100]      // end if-block "canReadPins"
[17:23:06.100]    </control>
[17:23:06.100]    <control if="!canReadPins" while="" timeout="0" info="">
[17:23:06.100]      // if-block "!canReadPins"
[17:23:06.100]        // =>  FALSE
[17:23:06.100]      // skip if-block "!canReadPins"
[17:23:06.100]    </control>
[17:23:06.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:23:06.100]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:23:06.100]        // =>  TRUE
[17:23:06.100]      <block atomic="false" info="">
[17:23:06.100]        WriteAP(0x00, 0x190008);
[17:23:06.103]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:23:06.103]        WriteAP(0xF0, 0x01);
[17:23:06.112]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:23:06.112]      </block>
[17:23:06.112]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:23:06.113]    </control>
[17:23:06.113]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:23:06.113]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:23:06.113]        // =>  FALSE
[17:23:06.113]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:23:06.113]    </control>
[17:23:06.113]    <block atomic="false" info="">
[17:23:06.113]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:23:06.116]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:23:06.116]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:23:06.116]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:23:06.117]      __ap = 0; //lets make sure we reset the access point selection
[17:23:06.118]        // -> [__ap <= 0x00000000]
[17:23:06.118]    </block>
[17:23:06.118]  </sequence>
[17:23:06.118]  
[17:23:06.138]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:23:06.138]  
[17:23:06.138]  <debugvars>
[17:23:06.138]    // Pre-defined
[17:23:06.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:23:06.139]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:23:06.139]    __dp=0x00000000
[17:23:06.139]    __ap=0x00000000
[17:23:06.139]    __traceout=0x00000000      (Trace Disabled)
[17:23:06.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:23:06.139]    __FlashAddr=0x00000000
[17:23:06.139]    __FlashLen=0x00000000
[17:23:06.139]    __FlashArg=0x00000000
[17:23:06.139]    __FlashOp=0x00000000
[17:23:06.139]    __Result=0x00000000
[17:23:06.139]  </debugvars>
[17:23:06.139]  
[17:23:06.139]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:23:06.139]    <block atomic="false" info="">
[17:23:06.139]      __var deviceID = 0;
[17:23:06.139]        // -> [deviceID <= 0x00000000]
[17:23:06.140]      __var version = 0;
[17:23:06.140]        // -> [version <= 0x00000000]
[17:23:06.140]      __var partNum = 0;
[17:23:06.140]        // -> [partNum <= 0x00000000]
[17:23:06.140]      __var manuf = 0;
[17:23:06.140]        // -> [manuf <= 0x00000000]
[17:23:06.140]      __var isMSPM0G1X0X_G3X0X = 0;
[17:23:06.140]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:23:06.140]      __var isProduction = 0;
[17:23:06.140]        // -> [isProduction <= 0x00000000]
[17:23:06.140]      __var continueId = 0;
[17:23:06.140]        // -> [continueId <= 0x00000000]
[17:23:06.140]      deviceID =   Read32(0x41C40004);
[17:23:06.152]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:23:06.152]        // -> [deviceID <= 0x2BB8802F]
[17:23:06.152]      version = deviceID >> 28;
[17:23:06.152]        // -> [version <= 0x00000002]
[17:23:06.152]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:23:06.152]        // -> [partNum <= 0x0000BB88]
[17:23:06.153]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:23:06.153]        // -> [manuf <= 0x00000017]
[17:23:06.153]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:23:06.153]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:23:06.153]      isProduction = (version > 0);
[17:23:06.153]        // -> [isProduction <= 0x00000001]
[17:23:06.153]    </block>
[17:23:06.153]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:23:06.153]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:23:06.153]        // =>  FALSE
[17:23:06.153]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:23:06.153]    </control>
[17:23:06.153]    <control if="continueId == 4" while="" timeout="0" info="">
[17:23:06.153]      // if-block "continueId == 4"
[17:23:06.153]        // =>  FALSE
[17:23:06.153]      // skip if-block "continueId == 4"
[17:23:06.153]    </control>
[17:23:06.153]    <control if="!isProduction" while="" timeout="0" info="">
[17:23:06.153]      // if-block "!isProduction"
[17:23:06.153]        // =>  FALSE
[17:23:06.154]      // skip if-block "!isProduction"
[17:23:06.154]    </control>
[17:23:06.154]  </sequence>
[17:23:06.154]  
[17:28:26.155]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:28:26.155]  
[17:28:26.155]  <debugvars>
[17:28:26.155]    // Pre-defined
[17:28:26.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:28:26.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:28:26.155]    __dp=0x00000000
[17:28:26.155]    __ap=0x00000000
[17:28:26.155]    __traceout=0x00000000      (Trace Disabled)
[17:28:26.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:28:26.155]    __FlashAddr=0x00000000
[17:28:26.155]    __FlashLen=0x00000000
[17:28:26.156]    __FlashArg=0x00000000
[17:28:26.156]    __FlashOp=0x00000000
[17:28:26.156]    __Result=0x00000000
[17:28:26.156]  </debugvars>
[17:28:26.156]  
[17:28:26.156]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:28:26.156]    <block atomic="false" info="">
[17:28:26.156]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:28:26.156]        // -> [isSWJ <= 0x00000001]
[17:28:26.156]      __var hasDormant = __protocol & 0x00020000;
[17:28:26.156]        // -> [hasDormant <= 0x00000000]
[17:28:26.156]      __var protType   = __protocol & 0x0000FFFF;
[17:28:26.156]        // -> [protType <= 0x00000002]
[17:28:26.156]    </block>
[17:28:26.156]    <control if="protType == 1" while="" timeout="0" info="">
[17:28:26.156]      // if-block "protType == 1"
[17:28:26.156]        // =>  FALSE
[17:28:26.156]      // skip if-block "protType == 1"
[17:28:26.156]    </control>
[17:28:26.157]    <control if="protType == 2" while="" timeout="0" info="">
[17:28:26.157]      // if-block "protType == 2"
[17:28:26.157]        // =>  TRUE
[17:28:26.157]      <control if="isSWJ" while="" timeout="0" info="">
[17:28:26.157]        // if-block "isSWJ"
[17:28:26.157]          // =>  TRUE
[17:28:26.157]        <control if="hasDormant" while="" timeout="0" info="">
[17:28:26.157]          // if-block "hasDormant"
[17:28:26.157]            // =>  FALSE
[17:28:26.157]          // skip if-block "hasDormant"
[17:28:26.157]        </control>
[17:28:26.157]        <control if="!hasDormant" while="" timeout="0" info="">
[17:28:26.157]          // if-block "!hasDormant"
[17:28:26.157]            // =>  TRUE
[17:28:26.157]          <block atomic="false" info="">
[17:28:26.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:28:26.159]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:28:26.159]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:28:26.160]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:28:26.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:28:26.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:28:26.163]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:28:26.164]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:28:26.164]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:28:26.166]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:28:26.166]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:28:26.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:28:26.168]          </block>
[17:28:26.168]          // end if-block "!hasDormant"
[17:28:26.168]        </control>
[17:28:26.168]        // end if-block "isSWJ"
[17:28:26.168]      </control>
[17:28:26.168]      <control if="!isSWJ" while="" timeout="0" info="">
[17:28:26.168]        // if-block "!isSWJ"
[17:28:26.168]          // =>  FALSE
[17:28:26.168]        // skip if-block "!isSWJ"
[17:28:26.168]      </control>
[17:28:26.168]      <block atomic="false" info="">
[17:28:26.168]        ReadDP(0x0);
[17:28:26.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:28:26.170]      </block>
[17:28:26.170]      // end if-block "protType == 2"
[17:28:26.170]    </control>
[17:28:26.170]  </sequence>
[17:28:26.170]  
[17:28:26.174]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:28:26.174]  
[17:28:26.174]  <debugvars>
[17:28:26.174]    // Pre-defined
[17:28:26.174]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:28:26.174]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:28:26.174]    __dp=0x00000000
[17:28:26.174]    __ap=0x00000000
[17:28:26.174]    __traceout=0x00000000      (Trace Disabled)
[17:28:26.174]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:28:26.174]    __FlashAddr=0x00000000
[17:28:26.174]    __FlashLen=0x00000000
[17:28:26.174]    __FlashArg=0x00000000
[17:28:26.174]    __FlashOp=0x00000000
[17:28:26.174]    __Result=0x00000000
[17:28:26.174]  </debugvars>
[17:28:26.174]  
[17:28:26.174]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:28:26.174]    <block atomic="false" info="">
[17:28:26.174]      __var SW_DP_ABORT       = 0x0;
[17:28:26.174]        // -> [SW_DP_ABORT <= 0x00000000]
[17:28:26.174]      __var DP_CTRL_STAT      = 0x4;
[17:28:26.174]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:28:26.174]      __var DP_SELECT         = 0x8;
[17:28:26.174]        // -> [DP_SELECT <= 0x00000008]
[17:28:26.174]      __var powered_down      = 0;
[17:28:26.174]        // -> [powered_down <= 0x00000000]
[17:28:26.175]      WriteDP(DP_SELECT, 0x00000000);
[17:28:26.176]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:28:26.176]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:28:26.178]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:28:26.178]        // -> [powered_down <= 0x00000001]
[17:28:26.178]    </block>
[17:28:26.178]    <control if="powered_down" while="" timeout="0" info="">
[17:28:26.178]      // if-block "powered_down"
[17:28:26.178]        // =>  TRUE
[17:28:26.178]      <block atomic="false" info="">
[17:28:26.178]        Message(0, "Debug/System power-up request sent");
[17:28:26.180]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:28:26.183]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:28:26.183]      </block>
[17:28:26.183]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:28:26.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:28:26.184]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:28:26.184]        // while-condition  =>  FALSE
[17:28:26.184]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:28:26.184]      </control>
[17:28:26.184]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:28:26.184]        // if-block "(__protocol & 0xFFFF) == 1"
[17:28:26.184]          // =>  FALSE
[17:28:26.184]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:28:26.184]      </control>
[17:28:26.184]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:28:26.184]        // if-block "(__protocol & 0xFFFF) == 2"
[17:28:26.185]          // =>  TRUE
[17:28:26.185]        <block atomic="false" info="">
[17:28:26.185]          Message(0, "executing SWD power up");
[17:28:26.186]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:28:26.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:28:26.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:28:26.190]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:28:26.190]        </block>
[17:28:26.190]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:28:26.190]      </control>
[17:28:26.190]      // end if-block "powered_down"
[17:28:26.190]    </control>
[17:28:26.190]    <block atomic="false" info="">
[17:28:26.190]      __var DEBUG_PORT_VAL    = 0;
[17:28:26.190]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:28:26.190]      __var ACCESS_POINT_VAL  = 0;
[17:28:26.190]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:28:26.190]      __ap = 1; 
[17:28:26.190]        // -> [__ap <= 0x00000001]
[17:28:26.190]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:28:26.193]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:28:26.193]      __ap = 4;
[17:28:26.193]        // -> [__ap <= 0x00000004]
[17:28:26.193]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:28:26.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:28:26.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:28:26.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:28:26.199]    </block>
[17:28:26.199]    <block atomic="false" info="">
[17:28:26.199]      __var nReset = 0x80;
[17:28:26.199]        // -> [nReset <= 0x00000080]
[17:28:26.199]      __var canReadPins = 0;
[17:28:26.199]        // -> [canReadPins <= 0x00000000]
[17:28:26.199]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:28:26.200]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:28:26.200]        // -> [canReadPins <= 0x00000001]
[17:28:26.200]    </block>
[17:28:26.200]    <control if="" while="1" timeout="200" info="">
[17:28:26.200]      // while "1"  (timeout="200")
[17:28:26.200]      // while-condition  =>  TRUE
[17:28:26.200]      // while "1"  (timeout="200")
[17:28:26.200]      // while-condition  =>  TRUE
[17:28:26.200]      // while "1"  (timeout="200")
[17:28:26.200]      // while-condition  =>  TRUE
[17:28:26.200]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.202]      // while-condition  =>  TRUE
[17:28:26.202]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.203]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.203]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.203]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.203]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.203]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.203]      // while "1"  (timeout="200")
[17:28:26.203]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.204]      // while-condition  =>  TRUE
[17:28:26.204]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.205]      // while "1"  (timeout="200")
[17:28:26.205]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.206]      // while "1"  (timeout="200")
[17:28:26.206]      // while-condition  =>  TRUE
[17:28:26.207]      // while "1"  (timeout="200")
[17:28:26.207]      // while  =>  TIMEOUT
[17:28:26.207]      // end while "1"
[17:28:26.207]    </control>
[17:28:26.207]    <control if="canReadPins" while="" timeout="0" info="">
[17:28:26.207]      // if-block "canReadPins"
[17:28:26.207]        // =>  TRUE
[17:28:26.207]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:28:26.207]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:28:26.208]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:28:26.208]        // while-condition  =>  FALSE
[17:28:26.208]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:28:26.208]      </control>
[17:28:26.209]      // end if-block "canReadPins"
[17:28:26.209]    </control>
[17:28:26.209]    <control if="!canReadPins" while="" timeout="0" info="">
[17:28:26.209]      // if-block "!canReadPins"
[17:28:26.209]        // =>  FALSE
[17:28:26.209]      // skip if-block "!canReadPins"
[17:28:26.209]    </control>
[17:28:26.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:28:26.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:28:26.209]        // =>  TRUE
[17:28:26.209]      <block atomic="false" info="">
[17:28:26.209]        WriteAP(0x00, 0x190008);
[17:28:26.217]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:28:26.217]        WriteAP(0xF0, 0x01);
[17:28:26.220]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:28:26.220]      </block>
[17:28:26.220]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:28:26.220]    </control>
[17:28:26.220]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:28:26.220]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:28:26.221]        // =>  FALSE
[17:28:26.221]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:28:26.221]    </control>
[17:28:26.221]    <block atomic="false" info="">
[17:28:26.221]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:28:26.224]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:28:26.224]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:28:26.224]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:28:26.228]      __ap = 0; //lets make sure we reset the access point selection
[17:28:26.228]        // -> [__ap <= 0x00000000]
[17:28:26.228]    </block>
[17:28:26.228]  </sequence>
[17:28:26.228]  
[17:28:26.252]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:28:26.252]  
[17:28:26.252]  <debugvars>
[17:28:26.252]    // Pre-defined
[17:28:26.252]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:28:26.253]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:28:26.253]    __dp=0x00000000
[17:28:26.253]    __ap=0x00000000
[17:28:26.253]    __traceout=0x00000000      (Trace Disabled)
[17:28:26.253]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:28:26.253]    __FlashAddr=0x00000000
[17:28:26.253]    __FlashLen=0x00000000
[17:28:26.253]    __FlashArg=0x00000000
[17:28:26.253]    __FlashOp=0x00000000
[17:28:26.253]    __Result=0x00000000
[17:28:26.253]  </debugvars>
[17:28:26.253]  
[17:28:26.253]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:28:26.253]    <block atomic="false" info="">
[17:28:26.253]      __var deviceID = 0;
[17:28:26.253]        // -> [deviceID <= 0x00000000]
[17:28:26.253]      __var version = 0;
[17:28:26.254]        // -> [version <= 0x00000000]
[17:28:26.254]      __var partNum = 0;
[17:28:26.254]        // -> [partNum <= 0x00000000]
[17:28:26.254]      __var manuf = 0;
[17:28:26.254]        // -> [manuf <= 0x00000000]
[17:28:26.254]      __var isMSPM0G1X0X_G3X0X = 0;
[17:28:26.254]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:28:26.254]      __var isProduction = 0;
[17:28:26.254]        // -> [isProduction <= 0x00000000]
[17:28:26.254]      __var continueId = 0;
[17:28:26.254]        // -> [continueId <= 0x00000000]
[17:28:26.254]      deviceID =   Read32(0x41C40004);
[17:28:26.263]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:28:26.263]        // -> [deviceID <= 0x2BB8802F]
[17:28:26.263]      version = deviceID >> 28;
[17:28:26.263]        // -> [version <= 0x00000002]
[17:28:26.263]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:28:26.263]        // -> [partNum <= 0x0000BB88]
[17:28:26.263]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:28:26.263]        // -> [manuf <= 0x00000017]
[17:28:26.263]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:28:26.264]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:28:26.264]      isProduction = (version > 0);
[17:28:26.264]        // -> [isProduction <= 0x00000001]
[17:28:26.264]    </block>
[17:28:26.264]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:28:26.264]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:28:26.264]        // =>  FALSE
[17:28:26.264]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:28:26.264]    </control>
[17:28:26.264]    <control if="continueId == 4" while="" timeout="0" info="">
[17:28:26.264]      // if-block "continueId == 4"
[17:28:26.264]        // =>  FALSE
[17:28:26.264]      // skip if-block "continueId == 4"
[17:28:26.264]    </control>
[17:28:26.264]    <control if="!isProduction" while="" timeout="0" info="">
[17:28:26.264]      // if-block "!isProduction"
[17:28:26.264]        // =>  FALSE
[17:28:26.264]      // skip if-block "!isProduction"
[17:28:26.265]    </control>
[17:28:26.265]  </sequence>
[17:28:26.265]  
[18:06:13.635]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:06:13.635]  
[18:06:13.636]  <debugvars>
[18:06:13.636]    // Pre-defined
[18:06:13.636]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:06:13.636]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:06:13.636]    __dp=0x00000000
[18:06:13.636]    __ap=0x00000000
[18:06:13.636]    __traceout=0x00000000      (Trace Disabled)
[18:06:13.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:06:13.636]    __FlashAddr=0x00000000
[18:06:13.636]    __FlashLen=0x00000000
[18:06:13.636]    __FlashArg=0x00000000
[18:06:13.636]    __FlashOp=0x00000000
[18:06:13.636]    __Result=0x00000000
[18:06:13.636]  </debugvars>
[18:06:13.636]  
[18:06:13.636]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:06:13.636]    <block atomic="false" info="">
[18:06:13.636]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:06:13.636]        // -> [isSWJ <= 0x00000001]
[18:06:13.636]      __var hasDormant = __protocol & 0x00020000;
[18:06:13.636]        // -> [hasDormant <= 0x00000000]
[18:06:13.636]      __var protType   = __protocol & 0x0000FFFF;
[18:06:13.636]        // -> [protType <= 0x00000002]
[18:06:13.636]    </block>
[18:06:13.636]    <control if="protType == 1" while="" timeout="0" info="">
[18:06:13.636]      // if-block "protType == 1"
[18:06:13.636]        // =>  FALSE
[18:06:13.637]      // skip if-block "protType == 1"
[18:06:13.637]    </control>
[18:06:13.637]    <control if="protType == 2" while="" timeout="0" info="">
[18:06:13.637]      // if-block "protType == 2"
[18:06:13.637]        // =>  TRUE
[18:06:13.637]      <control if="isSWJ" while="" timeout="0" info="">
[18:06:13.637]        // if-block "isSWJ"
[18:06:13.637]          // =>  TRUE
[18:06:13.637]        <control if="hasDormant" while="" timeout="0" info="">
[18:06:13.637]          // if-block "hasDormant"
[18:06:13.637]            // =>  FALSE
[18:06:13.637]          // skip if-block "hasDormant"
[18:06:13.637]        </control>
[18:06:13.637]        <control if="!hasDormant" while="" timeout="0" info="">
[18:06:13.637]          // if-block "!hasDormant"
[18:06:13.637]            // =>  TRUE
[18:06:13.637]          <block atomic="false" info="">
[18:06:13.637]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:06:13.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:06:13.639]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:06:13.640]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:06:13.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:06:13.642]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:06:13.642]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:06:13.643]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:06:13.643]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:06:13.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:06:13.646]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:06:13.647]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:06:13.647]          </block>
[18:06:13.647]          // end if-block "!hasDormant"
[18:06:13.647]        </control>
[18:06:13.647]        // end if-block "isSWJ"
[18:06:13.647]      </control>
[18:06:13.647]      <control if="!isSWJ" while="" timeout="0" info="">
[18:06:13.648]        // if-block "!isSWJ"
[18:06:13.648]          // =>  FALSE
[18:06:13.648]        // skip if-block "!isSWJ"
[18:06:13.648]      </control>
[18:06:13.648]      <block atomic="false" info="">
[18:06:13.648]        ReadDP(0x0);
[18:06:13.649]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:06:13.649]      </block>
[18:06:13.650]      // end if-block "protType == 2"
[18:06:13.650]    </control>
[18:06:13.650]  </sequence>
[18:06:13.650]  
[18:06:13.652]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:06:13.652]  
[18:06:13.652]  <debugvars>
[18:06:13.652]    // Pre-defined
[18:06:13.652]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:06:13.652]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:06:13.652]    __dp=0x00000000
[18:06:13.652]    __ap=0x00000000
[18:06:13.652]    __traceout=0x00000000      (Trace Disabled)
[18:06:13.652]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:06:13.652]    __FlashAddr=0x00000000
[18:06:13.652]    __FlashLen=0x00000000
[18:06:13.652]    __FlashArg=0x00000000
[18:06:13.652]    __FlashOp=0x00000000
[18:06:13.652]    __Result=0x00000000
[18:06:13.653]  </debugvars>
[18:06:13.653]  
[18:06:13.653]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:06:13.653]    <block atomic="false" info="">
[18:06:13.653]      __var SW_DP_ABORT       = 0x0;
[18:06:13.653]        // -> [SW_DP_ABORT <= 0x00000000]
[18:06:13.653]      __var DP_CTRL_STAT      = 0x4;
[18:06:13.653]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:06:13.653]      __var DP_SELECT         = 0x8;
[18:06:13.653]        // -> [DP_SELECT <= 0x00000008]
[18:06:13.653]      __var powered_down      = 0;
[18:06:13.653]        // -> [powered_down <= 0x00000000]
[18:06:13.653]      WriteDP(DP_SELECT, 0x00000000);
[18:06:13.658]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:06:13.658]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:06:13.660]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:06:13.660]        // -> [powered_down <= 0x00000001]
[18:06:13.660]    </block>
[18:06:13.660]    <control if="powered_down" while="" timeout="0" info="">
[18:06:13.660]      // if-block "powered_down"
[18:06:13.660]        // =>  TRUE
[18:06:13.660]      <block atomic="false" info="">
[18:06:13.661]        Message(0, "Debug/System power-up request sent");
[18:06:13.665]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:06:13.668]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:06:13.668]      </block>
[18:06:13.668]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:06:13.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:13.670]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:06:13.670]        // while-condition  =>  FALSE
[18:06:13.670]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:06:13.670]      </control>
[18:06:13.670]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:06:13.670]        // if-block "(__protocol & 0xFFFF) == 1"
[18:06:13.670]          // =>  FALSE
[18:06:13.671]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:06:13.671]      </control>
[18:06:13.671]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:06:13.671]        // if-block "(__protocol & 0xFFFF) == 2"
[18:06:13.671]          // =>  TRUE
[18:06:13.671]        <block atomic="false" info="">
[18:06:13.671]          Message(0, "executing SWD power up");
[18:06:13.673]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:06:13.674]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:06:13.674]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:06:13.676]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:06:13.676]        </block>
[18:06:13.676]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:06:13.676]      </control>
[18:06:13.676]      // end if-block "powered_down"
[18:06:13.676]    </control>
[18:06:13.676]    <block atomic="false" info="">
[18:06:13.676]      __var DEBUG_PORT_VAL    = 0;
[18:06:13.676]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:06:13.676]      __var ACCESS_POINT_VAL  = 0;
[18:06:13.676]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:06:13.677]      __ap = 1; 
[18:06:13.677]        // -> [__ap <= 0x00000001]
[18:06:13.677]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:06:13.680]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:06:13.680]      __ap = 4;
[18:06:13.680]        // -> [__ap <= 0x00000004]
[18:06:13.680]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:06:13.683]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:06:13.683]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:06:13.683]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:06:13.685]    </block>
[18:06:13.685]    <block atomic="false" info="">
[18:06:13.685]      __var nReset = 0x80;
[18:06:13.685]        // -> [nReset <= 0x00000080]
[18:06:13.685]      __var canReadPins = 0;
[18:06:13.685]        // -> [canReadPins <= 0x00000000]
[18:06:13.685]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:06:13.687]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:06:13.687]        // -> [canReadPins <= 0x00000001]
[18:06:13.687]    </block>
[18:06:13.687]    <control if="" while="1" timeout="200" info="">
[18:06:13.687]      // while "1"  (timeout="200")
[18:06:13.687]      // while-condition  =>  TRUE
[18:06:13.687]      // while "1"  (timeout="200")
[18:06:13.687]      // while-condition  =>  TRUE
[18:06:13.687]      // while "1"  (timeout="200")
[18:06:13.687]      // while-condition  =>  TRUE
[18:06:13.687]      // while "1"  (timeout="200")
[18:06:13.687]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.688]      // while-condition  =>  TRUE
[18:06:13.688]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.689]      // while-condition  =>  TRUE
[18:06:13.689]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.690]      // while "1"  (timeout="200")
[18:06:13.690]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.691]      // while "1"  (timeout="200")
[18:06:13.691]      // while-condition  =>  TRUE
[18:06:13.692]      // while "1"  (timeout="200")
[18:06:13.692]      // while  =>  TIMEOUT
[18:06:13.692]      // end while "1"
[18:06:13.692]    </control>
[18:06:13.692]    <control if="canReadPins" while="" timeout="0" info="">
[18:06:13.692]      // if-block "canReadPins"
[18:06:13.692]        // =>  TRUE
[18:06:13.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:06:13.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:06:13.693]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:06:13.693]        // while-condition  =>  FALSE
[18:06:13.693]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:06:13.693]      </control>
[18:06:13.693]      // end if-block "canReadPins"
[18:06:13.693]    </control>
[18:06:13.693]    <control if="!canReadPins" while="" timeout="0" info="">
[18:06:13.693]      // if-block "!canReadPins"
[18:06:13.693]        // =>  FALSE
[18:06:13.694]      // skip if-block "!canReadPins"
[18:06:13.694]    </control>
[18:06:13.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:06:13.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:06:13.694]        // =>  TRUE
[18:06:13.694]      <block atomic="false" info="">
[18:06:13.694]        WriteAP(0x00, 0x190008);
[18:06:13.695]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:06:13.695]        WriteAP(0xF0, 0x01);
[18:06:13.699]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:06:13.699]      </block>
[18:06:13.699]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:06:13.699]    </control>
[18:06:13.699]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:06:13.699]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:06:13.699]        // =>  FALSE
[18:06:13.699]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:06:13.699]    </control>
[18:06:13.699]    <block atomic="false" info="">
[18:06:13.699]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:06:13.703]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:06:13.703]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:06:13.703]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:06:13.705]      __ap = 0; //lets make sure we reset the access point selection
[18:06:13.705]        // -> [__ap <= 0x00000000]
[18:06:13.705]    </block>
[18:06:13.705]  </sequence>
[18:06:13.705]  
[18:06:13.724]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:06:13.724]  
[18:06:13.724]  <debugvars>
[18:06:13.724]    // Pre-defined
[18:06:13.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:06:13.724]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:06:13.724]    __dp=0x00000000
[18:06:13.724]    __ap=0x00000000
[18:06:13.724]    __traceout=0x00000000      (Trace Disabled)
[18:06:13.724]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:06:13.725]    __FlashAddr=0x00000000
[18:06:13.725]    __FlashLen=0x00000000
[18:06:13.725]    __FlashArg=0x00000000
[18:06:13.725]    __FlashOp=0x00000000
[18:06:13.725]    __Result=0x00000000
[18:06:13.725]  </debugvars>
[18:06:13.725]  
[18:06:13.725]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:06:13.725]    <block atomic="false" info="">
[18:06:13.725]      __var deviceID = 0;
[18:06:13.725]        // -> [deviceID <= 0x00000000]
[18:06:13.725]      __var version = 0;
[18:06:13.725]        // -> [version <= 0x00000000]
[18:06:13.725]      __var partNum = 0;
[18:06:13.725]        // -> [partNum <= 0x00000000]
[18:06:13.725]      __var manuf = 0;
[18:06:13.725]        // -> [manuf <= 0x00000000]
[18:06:13.725]      __var isMSPM0G1X0X_G3X0X = 0;
[18:06:13.725]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:06:13.725]      __var isProduction = 0;
[18:06:13.725]        // -> [isProduction <= 0x00000000]
[18:06:13.725]      __var continueId = 0;
[18:06:13.725]        // -> [continueId <= 0x00000000]
[18:06:13.725]      deviceID =   Read32(0x41C40004);
[18:06:13.731]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:06:13.731]        // -> [deviceID <= 0x2BB8802F]
[18:06:13.731]      version = deviceID >> 28;
[18:06:13.731]        // -> [version <= 0x00000002]
[18:06:13.731]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:06:13.731]        // -> [partNum <= 0x0000BB88]
[18:06:13.731]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:06:13.731]        // -> [manuf <= 0x00000017]
[18:06:13.732]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:06:13.732]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:06:13.732]      isProduction = (version > 0);
[18:06:13.732]        // -> [isProduction <= 0x00000001]
[18:06:13.732]    </block>
[18:06:13.732]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:06:13.732]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:06:13.732]        // =>  FALSE
[18:06:13.732]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:06:13.732]    </control>
[18:06:13.732]    <control if="continueId == 4" while="" timeout="0" info="">
[18:06:13.732]      // if-block "continueId == 4"
[18:06:13.732]        // =>  FALSE
[18:06:13.732]      // skip if-block "continueId == 4"
[18:06:13.732]    </control>
[18:06:13.732]    <control if="!isProduction" while="" timeout="0" info="">
[18:06:13.733]      // if-block "!isProduction"
[18:06:13.733]        // =>  FALSE
[18:06:13.733]      // skip if-block "!isProduction"
[18:06:13.733]    </control>
[18:06:13.733]  </sequence>
[18:06:13.733]  
[18:06:57.062]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:06:57.062]  
[18:06:57.063]  <debugvars>
[18:06:57.063]    // Pre-defined
[18:06:57.063]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:06:57.063]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:06:57.063]    __dp=0x00000000
[18:06:57.063]    __ap=0x00000000
[18:06:57.063]    __traceout=0x00000000      (Trace Disabled)
[18:06:57.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:06:57.063]    __FlashAddr=0x00000000
[18:06:57.063]    __FlashLen=0x00000000
[18:06:57.063]    __FlashArg=0x00000000
[18:06:57.063]    __FlashOp=0x00000000
[18:06:57.063]    __Result=0x00000000
[18:06:57.063]  </debugvars>
[18:06:57.064]  
[18:06:57.064]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:06:57.064]    <block atomic="false" info="">
[18:06:57.064]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:06:57.064]        // -> [isSWJ <= 0x00000001]
[18:06:57.064]      __var hasDormant = __protocol & 0x00020000;
[18:06:57.064]        // -> [hasDormant <= 0x00000000]
[18:06:57.064]      __var protType   = __protocol & 0x0000FFFF;
[18:06:57.064]        // -> [protType <= 0x00000002]
[18:06:57.064]    </block>
[18:06:57.064]    <control if="protType == 1" while="" timeout="0" info="">
[18:06:57.064]      // if-block "protType == 1"
[18:06:57.064]        // =>  FALSE
[18:06:57.064]      // skip if-block "protType == 1"
[18:06:57.064]    </control>
[18:06:57.064]    <control if="protType == 2" while="" timeout="0" info="">
[18:06:57.064]      // if-block "protType == 2"
[18:06:57.064]        // =>  TRUE
[18:06:57.064]      <control if="isSWJ" while="" timeout="0" info="">
[18:06:57.064]        // if-block "isSWJ"
[18:06:57.064]          // =>  TRUE
[18:06:57.064]        <control if="hasDormant" while="" timeout="0" info="">
[18:06:57.064]          // if-block "hasDormant"
[18:06:57.064]            // =>  FALSE
[18:06:57.064]          // skip if-block "hasDormant"
[18:06:57.065]        </control>
[18:06:57.065]        <control if="!hasDormant" while="" timeout="0" info="">
[18:06:57.065]          // if-block "!hasDormant"
[18:06:57.065]            // =>  TRUE
[18:06:57.065]          <block atomic="false" info="">
[18:06:57.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:06:57.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:06:57.068]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:06:57.069]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:06:57.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:06:57.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:06:57.072]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:06:57.073]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:06:57.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:06:57.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:06:57.075]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:06:57.076]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:06:57.076]          </block>
[18:06:57.076]          // end if-block "!hasDormant"
[18:06:57.076]        </control>
[18:06:57.076]        // end if-block "isSWJ"
[18:06:57.076]      </control>
[18:06:57.076]      <control if="!isSWJ" while="" timeout="0" info="">
[18:06:57.076]        // if-block "!isSWJ"
[18:06:57.076]          // =>  FALSE
[18:06:57.076]        // skip if-block "!isSWJ"
[18:06:57.077]      </control>
[18:06:57.077]      <block atomic="false" info="">
[18:06:57.077]        ReadDP(0x0);
[18:06:57.078]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:06:57.078]      </block>
[18:06:57.078]      // end if-block "protType == 2"
[18:06:57.078]    </control>
[18:06:57.079]  </sequence>
[18:06:57.079]  
[18:06:57.081]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:06:57.081]  
[18:06:57.081]  <debugvars>
[18:06:57.081]    // Pre-defined
[18:06:57.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:06:57.082]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:06:57.082]    __dp=0x00000000
[18:06:57.082]    __ap=0x00000000
[18:06:57.082]    __traceout=0x00000000      (Trace Disabled)
[18:06:57.082]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:06:57.082]    __FlashAddr=0x00000000
[18:06:57.082]    __FlashLen=0x00000000
[18:06:57.082]    __FlashArg=0x00000000
[18:06:57.082]    __FlashOp=0x00000000
[18:06:57.082]    __Result=0x00000000
[18:06:57.082]  </debugvars>
[18:06:57.082]  
[18:06:57.082]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:06:57.082]    <block atomic="false" info="">
[18:06:57.082]      __var SW_DP_ABORT       = 0x0;
[18:06:57.082]        // -> [SW_DP_ABORT <= 0x00000000]
[18:06:57.082]      __var DP_CTRL_STAT      = 0x4;
[18:06:57.082]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:06:57.082]      __var DP_SELECT         = 0x8;
[18:06:57.082]        // -> [DP_SELECT <= 0x00000008]
[18:06:57.082]      __var powered_down      = 0;
[18:06:57.082]        // -> [powered_down <= 0x00000000]
[18:06:57.082]      WriteDP(DP_SELECT, 0x00000000);
[18:06:57.084]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:06:57.084]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:06:57.087]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:06:57.087]        // -> [powered_down <= 0x00000001]
[18:06:57.087]    </block>
[18:06:57.087]    <control if="powered_down" while="" timeout="0" info="">
[18:06:57.087]      // if-block "powered_down"
[18:06:57.087]        // =>  TRUE
[18:06:57.087]      <block atomic="false" info="">
[18:06:57.087]        Message(0, "Debug/System power-up request sent");
[18:06:57.087]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:06:57.089]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:06:57.089]      </block>
[18:06:57.089]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:06:57.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.090]        // while-condition  =>  TRUE
[18:06:57.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.091]        // while-condition  =>  TRUE
[18:06:57.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.094]        // while-condition  =>  TRUE
[18:06:57.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.095]        // while-condition  =>  TRUE
[18:06:57.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.096]        // while-condition  =>  TRUE
[18:06:57.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.098]        // while-condition  =>  TRUE
[18:06:57.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.099]        // while-condition  =>  TRUE
[18:06:57.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.101]        // while-condition  =>  TRUE
[18:06:57.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.103]        // while-condition  =>  TRUE
[18:06:57.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.104]        // while-condition  =>  TRUE
[18:06:57.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.106]        // while-condition  =>  TRUE
[18:06:57.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.107]        // while-condition  =>  TRUE
[18:06:57.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.109]        // while-condition  =>  TRUE
[18:06:57.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.111]        // while-condition  =>  TRUE
[18:06:57.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.113]        // while-condition  =>  TRUE
[18:06:57.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.117]        // while-condition  =>  TRUE
[18:06:57.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.119]        // while-condition  =>  TRUE
[18:06:57.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.122]        // while-condition  =>  TRUE
[18:06:57.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.123]        // while-condition  =>  TRUE
[18:06:57.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.125]        // while-condition  =>  TRUE
[18:06:57.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.126]        // while-condition  =>  TRUE
[18:06:57.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.128]        // while-condition  =>  TRUE
[18:06:57.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.129]        // while-condition  =>  TRUE
[18:06:57.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.131]        // while-condition  =>  TRUE
[18:06:57.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.133]        // while-condition  =>  TRUE
[18:06:57.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.134]        // while-condition  =>  TRUE
[18:06:57.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.136]        // while-condition  =>  TRUE
[18:06:57.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.142]        // while-condition  =>  TRUE
[18:06:57.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.143]        // while-condition  =>  TRUE
[18:06:57.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.145]        // while-condition  =>  TRUE
[18:06:57.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.151]        // while-condition  =>  TRUE
[18:06:57.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.153]        // while-condition  =>  TRUE
[18:06:57.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.155]        // while-condition  =>  TRUE
[18:06:57.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.158]        // while-condition  =>  TRUE
[18:06:57.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.161]        // while-condition  =>  TRUE
[18:06:57.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.162]        // while-condition  =>  TRUE
[18:06:57.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.164]        // while-condition  =>  TRUE
[18:06:57.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.166]        // while-condition  =>  TRUE
[18:06:57.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.167]        // while-condition  =>  TRUE
[18:06:57.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.169]        // while-condition  =>  TRUE
[18:06:57.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.171]        // while-condition  =>  TRUE
[18:06:57.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.172]        // while-condition  =>  TRUE
[18:06:57.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.175]        // while-condition  =>  TRUE
[18:06:57.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.178]        // while-condition  =>  TRUE
[18:06:57.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.179]        // while-condition  =>  TRUE
[18:06:57.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.181]        // while-condition  =>  TRUE
[18:06:57.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.182]        // while-condition  =>  TRUE
[18:06:57.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.184]        // while-condition  =>  TRUE
[18:06:57.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.186]        // while-condition  =>  TRUE
[18:06:57.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.188]        // while-condition  =>  TRUE
[18:06:57.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.190]        // while-condition  =>  TRUE
[18:06:57.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.191]        // while-condition  =>  TRUE
[18:06:57.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.193]        // while-condition  =>  TRUE
[18:06:57.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.195]        // while-condition  =>  TRUE
[18:06:57.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.197]        // while-condition  =>  TRUE
[18:06:57.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.199]        // while-condition  =>  TRUE
[18:06:57.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.201]        // while-condition  =>  TRUE
[18:06:57.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.202]        // while-condition  =>  TRUE
[18:06:57.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.205]        // while-condition  =>  TRUE
[18:06:57.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.207]        // while-condition  =>  TRUE
[18:06:57.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.210]        // while-condition  =>  TRUE
[18:06:57.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.213]        // while-condition  =>  TRUE
[18:06:57.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.214]        // while-condition  =>  TRUE
[18:06:57.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.218]        // while-condition  =>  TRUE
[18:06:57.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.220]        // while-condition  =>  TRUE
[18:06:57.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.223]        // while-condition  =>  TRUE
[18:06:57.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.228]        // while-condition  =>  TRUE
[18:06:57.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.229]        // while-condition  =>  TRUE
[18:06:57.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.232]        // while-condition  =>  TRUE
[18:06:57.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.234]        // while-condition  =>  TRUE
[18:06:57.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.235]        // while-condition  =>  TRUE
[18:06:57.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.237]        // while-condition  =>  TRUE
[18:06:57.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.243]        // while-condition  =>  TRUE
[18:06:57.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.244]        // while-condition  =>  TRUE
[18:06:57.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.246]        // while-condition  =>  TRUE
[18:06:57.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.247]        // while-condition  =>  TRUE
[18:06:57.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.250]        // while-condition  =>  TRUE
[18:06:57.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.256]        // while-condition  =>  TRUE
[18:06:57.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.258]        // while-condition  =>  TRUE
[18:06:57.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.262]        // while-condition  =>  TRUE
[18:06:57.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.264]        // while-condition  =>  TRUE
[18:06:57.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.266]        // while-condition  =>  TRUE
[18:06:57.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.268]        // while-condition  =>  TRUE
[18:06:57.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.269]        // while-condition  =>  TRUE
[18:06:57.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.270]        // while-condition  =>  TRUE
[18:06:57.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.271]        // while-condition  =>  TRUE
[18:06:57.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.274]        // while-condition  =>  TRUE
[18:06:57.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.276]        // while-condition  =>  TRUE
[18:06:57.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.277]        // while-condition  =>  TRUE
[18:06:57.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.281]        // while-condition  =>  TRUE
[18:06:57.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.284]        // while-condition  =>  TRUE
[18:06:57.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.285]        // while-condition  =>  TRUE
[18:06:57.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.289]        // while-condition  =>  TRUE
[18:06:57.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.292]        // while-condition  =>  TRUE
[18:06:57.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.293]        // while-condition  =>  TRUE
[18:06:57.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.298]        // while-condition  =>  TRUE
[18:06:57.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.299]        // while-condition  =>  TRUE
[18:06:57.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.307]        // while-condition  =>  TRUE
[18:06:57.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.312]        // while-condition  =>  TRUE
[18:06:57.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.318]        // while-condition  =>  TRUE
[18:06:57.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.327]        // while-condition  =>  TRUE
[18:06:57.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.329]        // while-condition  =>  TRUE
[18:06:57.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.332]        // while-condition  =>  TRUE
[18:06:57.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.334]        // while-condition  =>  TRUE
[18:06:57.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.336]        // while-condition  =>  TRUE
[18:06:57.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.338]        // while-condition  =>  TRUE
[18:06:57.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.345]        // while-condition  =>  TRUE
[18:06:57.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.346]        // while-condition  =>  TRUE
[18:06:57.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.347]        // while-condition  =>  TRUE
[18:06:57.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.349]        // while-condition  =>  TRUE
[18:06:57.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.351]        // while-condition  =>  TRUE
[18:06:57.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.352]        // while-condition  =>  TRUE
[18:06:57.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.354]        // while-condition  =>  TRUE
[18:06:57.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.356]        // while-condition  =>  TRUE
[18:06:57.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.358]        // while-condition  =>  TRUE
[18:06:57.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.360]        // while-condition  =>  TRUE
[18:06:57.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.361]        // while-condition  =>  TRUE
[18:06:57.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.363]        // while-condition  =>  TRUE
[18:06:57.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.366]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.366]        // while-condition  =>  TRUE
[18:06:57.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.367]        // while-condition  =>  TRUE
[18:06:57.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.369]        // while-condition  =>  TRUE
[18:06:57.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.370]        // while-condition  =>  TRUE
[18:06:57.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.373]        // while-condition  =>  TRUE
[18:06:57.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.374]        // while-condition  =>  TRUE
[18:06:57.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.376]        // while-condition  =>  TRUE
[18:06:57.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.378]        // while-condition  =>  TRUE
[18:06:57.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.380]        // while-condition  =>  TRUE
[18:06:57.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.381]        // while-condition  =>  TRUE
[18:06:57.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.388]        // while-condition  =>  TRUE
[18:06:57.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.389]        // while-condition  =>  TRUE
[18:06:57.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.392]        // while-condition  =>  TRUE
[18:06:57.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.393]        // while-condition  =>  TRUE
[18:06:57.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.396]        // while-condition  =>  TRUE
[18:06:57.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.400]        // while-condition  =>  TRUE
[18:06:57.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.403]        // while-condition  =>  TRUE
[18:06:57.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.405]        // while-condition  =>  TRUE
[18:06:57.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.406]        // while-condition  =>  TRUE
[18:06:57.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.409]        // while-condition  =>  TRUE
[18:06:57.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.412]        // while-condition  =>  TRUE
[18:06:57.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.418]        // while-condition  =>  TRUE
[18:06:57.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.420]        // while-condition  =>  TRUE
[18:06:57.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.421]        // while-condition  =>  TRUE
[18:06:57.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.422]        // while-condition  =>  TRUE
[18:06:57.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.424]        // while-condition  =>  TRUE
[18:06:57.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.426]        // while-condition  =>  TRUE
[18:06:57.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.429]        // while-condition  =>  TRUE
[18:06:57.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.433]        // while-condition  =>  TRUE
[18:06:57.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.435]        // while-condition  =>  TRUE
[18:06:57.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.439]        // while-condition  =>  TRUE
[18:06:57.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.441]        // while-condition  =>  TRUE
[18:06:57.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.443]        // while-condition  =>  TRUE
[18:06:57.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.451]        // while-condition  =>  TRUE
[18:06:57.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.453]        // while-condition  =>  TRUE
[18:06:57.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.455]        // while-condition  =>  TRUE
[18:06:57.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.457]        // while-condition  =>  TRUE
[18:06:57.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.458]        // while-condition  =>  TRUE
[18:06:57.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.460]        // while-condition  =>  TRUE
[18:06:57.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.461]        // while-condition  =>  TRUE
[18:06:57.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.463]        // while-condition  =>  TRUE
[18:06:57.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.465]        // while-condition  =>  TRUE
[18:06:57.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.466]        // while-condition  =>  TRUE
[18:06:57.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.468]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.468]        // while-condition  =>  TRUE
[18:06:57.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.470]        // while-condition  =>  TRUE
[18:06:57.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.471]        // while-condition  =>  TRUE
[18:06:57.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.475]        // while-condition  =>  TRUE
[18:06:57.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.478]        // while-condition  =>  TRUE
[18:06:57.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.480]        // while-condition  =>  TRUE
[18:06:57.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.481]        // while-condition  =>  TRUE
[18:06:57.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.483]        // while-condition  =>  TRUE
[18:06:57.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.484]        // while-condition  =>  TRUE
[18:06:57.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.488]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.488]        // while-condition  =>  TRUE
[18:06:57.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.490]        // while-condition  =>  TRUE
[18:06:57.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.494]        // while-condition  =>  TRUE
[18:06:57.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.495]        // while-condition  =>  TRUE
[18:06:57.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.499]        // while-condition  =>  TRUE
[18:06:57.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.501]        // while-condition  =>  TRUE
[18:06:57.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.503]        // while-condition  =>  TRUE
[18:06:57.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.507]        // while-condition  =>  TRUE
[18:06:57.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.514]        // while-condition  =>  TRUE
[18:06:57.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.516]        // while-condition  =>  TRUE
[18:06:57.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.518]        // while-condition  =>  TRUE
[18:06:57.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.519]        // while-condition  =>  TRUE
[18:06:57.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.524]        // while-condition  =>  TRUE
[18:06:57.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.526]        // while-condition  =>  TRUE
[18:06:57.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.530]        // while-condition  =>  TRUE
[18:06:57.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.532]        // while-condition  =>  TRUE
[18:06:57.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.551]        // while-condition  =>  TRUE
[18:06:57.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.553]        // while-condition  =>  TRUE
[18:06:57.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.555]        // while-condition  =>  TRUE
[18:06:57.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.556]        // while-condition  =>  TRUE
[18:06:57.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.558]        // while-condition  =>  TRUE
[18:06:57.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.566]        // while-condition  =>  TRUE
[18:06:57.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.568]        // while-condition  =>  TRUE
[18:06:57.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.569]        // while-condition  =>  TRUE
[18:06:57.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.572]        // while-condition  =>  TRUE
[18:06:57.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.576]        // while-condition  =>  TRUE
[18:06:57.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.581]        // while-condition  =>  TRUE
[18:06:57.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.582]        // while-condition  =>  TRUE
[18:06:57.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.586]        // while-condition  =>  TRUE
[18:06:57.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.588]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.588]        // while-condition  =>  TRUE
[18:06:57.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.591]        // while-condition  =>  TRUE
[18:06:57.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.593]        // while-condition  =>  TRUE
[18:06:57.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.595]        // while-condition  =>  TRUE
[18:06:57.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.597]        // while-condition  =>  TRUE
[18:06:57.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.598]        // while-condition  =>  TRUE
[18:06:57.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.600]        // while-condition  =>  TRUE
[18:06:57.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.602]        // while-condition  =>  TRUE
[18:06:57.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.603]        // while-condition  =>  TRUE
[18:06:57.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.608]        // while-condition  =>  TRUE
[18:06:57.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.610]        // while-condition  =>  TRUE
[18:06:57.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.613]        // while-condition  =>  TRUE
[18:06:57.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.616]        // while-condition  =>  TRUE
[18:06:57.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.618]        // while-condition  =>  TRUE
[18:06:57.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.620]        // while-condition  =>  TRUE
[18:06:57.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.621]        // while-condition  =>  TRUE
[18:06:57.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.623]        // while-condition  =>  TRUE
[18:06:57.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.625]        // while-condition  =>  TRUE
[18:06:57.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.628]        // while-condition  =>  TRUE
[18:06:57.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.630]        // while-condition  =>  TRUE
[18:06:57.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.631]        // while-condition  =>  TRUE
[18:06:57.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.633]        // while-condition  =>  TRUE
[18:06:57.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.635]        // while-condition  =>  TRUE
[18:06:57.635]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.637]        // while-condition  =>  TRUE
[18:06:57.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.645]        // while-condition  =>  TRUE
[18:06:57.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.646]        // while-condition  =>  TRUE
[18:06:57.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.648]        // while-condition  =>  TRUE
[18:06:57.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.657]        // while-condition  =>  TRUE
[18:06:57.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.659]        // while-condition  =>  TRUE
[18:06:57.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.665]        // while-condition  =>  TRUE
[18:06:57.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.667]        // while-condition  =>  TRUE
[18:06:57.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.668]        // while-condition  =>  TRUE
[18:06:57.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.670]        // while-condition  =>  TRUE
[18:06:57.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.673]        // while-condition  =>  TRUE
[18:06:57.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.674]        // while-condition  =>  TRUE
[18:06:57.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.676]        // while-condition  =>  TRUE
[18:06:57.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.679]        // while-condition  =>  TRUE
[18:06:57.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.681]        // while-condition  =>  TRUE
[18:06:57.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.684]        // while-condition  =>  TRUE
[18:06:57.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.693]        // while-condition  =>  TRUE
[18:06:57.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.695]        // while-condition  =>  TRUE
[18:06:57.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.696]        // while-condition  =>  TRUE
[18:06:57.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.701]        // while-condition  =>  TRUE
[18:06:57.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.703]        // while-condition  =>  TRUE
[18:06:57.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.705]        // while-condition  =>  TRUE
[18:06:57.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.706]        // while-condition  =>  TRUE
[18:06:57.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.711]        // while-condition  =>  TRUE
[18:06:57.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.713]        // while-condition  =>  TRUE
[18:06:57.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.722]        // while-condition  =>  TRUE
[18:06:57.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.724]        // while-condition  =>  TRUE
[18:06:57.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.726]        // while-condition  =>  TRUE
[18:06:57.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.728]        // while-condition  =>  TRUE
[18:06:57.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.730]        // while-condition  =>  TRUE
[18:06:57.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.737]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.738]        // while-condition  =>  TRUE
[18:06:57.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.742]        // while-condition  =>  TRUE
[18:06:57.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.744]        // while-condition  =>  TRUE
[18:06:57.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.746]        // while-condition  =>  TRUE
[18:06:57.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.747]        // while-condition  =>  TRUE
[18:06:57.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.755]        // while-condition  =>  TRUE
[18:06:57.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.759]        // while-condition  =>  TRUE
[18:06:57.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.761]        // while-condition  =>  TRUE
[18:06:57.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.763]        // while-condition  =>  TRUE
[18:06:57.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.765]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.765]        // while-condition  =>  TRUE
[18:06:57.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.767]        // while-condition  =>  TRUE
[18:06:57.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.768]        // while-condition  =>  TRUE
[18:06:57.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.770]        // while-condition  =>  TRUE
[18:06:57.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.771]        // while-condition  =>  TRUE
[18:06:57.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.773]        // while-condition  =>  TRUE
[18:06:57.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.775]        // while-condition  =>  TRUE
[18:06:57.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.777]        // while-condition  =>  TRUE
[18:06:57.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.779]        // while-condition  =>  TRUE
[18:06:57.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.780]        // while-condition  =>  TRUE
[18:06:57.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.782]        // while-condition  =>  TRUE
[18:06:57.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.786]        // while-condition  =>  TRUE
[18:06:57.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.788]        // while-condition  =>  TRUE
[18:06:57.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.790]        // while-condition  =>  TRUE
[18:06:57.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.792]        // while-condition  =>  TRUE
[18:06:57.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.794]        // while-condition  =>  TRUE
[18:06:57.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.796]        // while-condition  =>  TRUE
[18:06:57.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.798]        // while-condition  =>  TRUE
[18:06:57.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.800]        // while-condition  =>  TRUE
[18:06:57.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.801]        // while-condition  =>  TRUE
[18:06:57.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.803]        // while-condition  =>  TRUE
[18:06:57.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.809]        // while-condition  =>  TRUE
[18:06:57.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.811]        // while-condition  =>  TRUE
[18:06:57.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.813]        // while-condition  =>  TRUE
[18:06:57.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.815]        // while-condition  =>  TRUE
[18:06:57.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.816]        // while-condition  =>  TRUE
[18:06:57.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.819]        // while-condition  =>  TRUE
[18:06:57.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.821]        // while-condition  =>  TRUE
[18:06:57.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.823]        // while-condition  =>  TRUE
[18:06:57.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.825]        // while-condition  =>  TRUE
[18:06:57.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.827]        // while-condition  =>  TRUE
[18:06:57.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.828]        // while-condition  =>  TRUE
[18:06:57.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.830]        // while-condition  =>  TRUE
[18:06:57.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.831]        // while-condition  =>  TRUE
[18:06:57.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.833]        // while-condition  =>  TRUE
[18:06:57.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.835]        // while-condition  =>  TRUE
[18:06:57.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.836]        // while-condition  =>  TRUE
[18:06:57.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.838]        // while-condition  =>  TRUE
[18:06:57.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.840]        // while-condition  =>  TRUE
[18:06:57.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.841]        // while-condition  =>  TRUE
[18:06:57.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.843]        // while-condition  =>  TRUE
[18:06:57.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.848]        // while-condition  =>  TRUE
[18:06:57.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.849]        // while-condition  =>  TRUE
[18:06:57.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.851]        // while-condition  =>  TRUE
[18:06:57.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.858]        // while-condition  =>  TRUE
[18:06:57.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.860]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.860]        // while-condition  =>  TRUE
[18:06:57.860]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.861]        // while-condition  =>  TRUE
[18:06:57.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.863]        // while-condition  =>  TRUE
[18:06:57.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.867]        // while-condition  =>  TRUE
[18:06:57.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.869]        // while-condition  =>  TRUE
[18:06:57.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.870]        // while-condition  =>  TRUE
[18:06:57.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.872]        // while-condition  =>  TRUE
[18:06:57.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.874]        // while-condition  =>  TRUE
[18:06:57.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.875]        // while-condition  =>  TRUE
[18:06:57.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.879]        // while-condition  =>  TRUE
[18:06:57.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.883]        // while-condition  =>  TRUE
[18:06:57.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.884]        // while-condition  =>  TRUE
[18:06:57.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.886]        // while-condition  =>  TRUE
[18:06:57.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.888]        // while-condition  =>  TRUE
[18:06:57.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.891]        // while-condition  =>  TRUE
[18:06:57.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.893]        // while-condition  =>  TRUE
[18:06:57.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.895]        // while-condition  =>  TRUE
[18:06:57.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.896]        // while-condition  =>  TRUE
[18:06:57.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.898]        // while-condition  =>  TRUE
[18:06:57.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.900]        // while-condition  =>  TRUE
[18:06:57.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.901]        // while-condition  =>  TRUE
[18:06:57.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.903]        // while-condition  =>  TRUE
[18:06:57.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.906]        // while-condition  =>  TRUE
[18:06:57.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.908]        // while-condition  =>  TRUE
[18:06:57.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.909]        // while-condition  =>  TRUE
[18:06:57.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.910]        // while-condition  =>  TRUE
[18:06:57.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.912]        // while-condition  =>  TRUE
[18:06:57.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.914]        // while-condition  =>  TRUE
[18:06:57.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.915]        // while-condition  =>  TRUE
[18:06:57.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.920]        // while-condition  =>  TRUE
[18:06:57.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.923]        // while-condition  =>  TRUE
[18:06:57.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.925]        // while-condition  =>  TRUE
[18:06:57.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.926]        // while-condition  =>  TRUE
[18:06:57.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.928]        // while-condition  =>  TRUE
[18:06:57.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.930]        // while-condition  =>  TRUE
[18:06:57.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.931]        // while-condition  =>  TRUE
[18:06:57.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.933]        // while-condition  =>  TRUE
[18:06:57.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.935]        // while-condition  =>  TRUE
[18:06:57.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.937]        // while-condition  =>  TRUE
[18:06:57.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.938]        // while-condition  =>  TRUE
[18:06:57.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.941]        // while-condition  =>  TRUE
[18:06:57.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.942]        // while-condition  =>  TRUE
[18:06:57.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.944]        // while-condition  =>  TRUE
[18:06:57.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.945]        // while-condition  =>  TRUE
[18:06:57.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.947]        // while-condition  =>  TRUE
[18:06:57.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.949]        // while-condition  =>  TRUE
[18:06:57.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.951]        // while-condition  =>  TRUE
[18:06:57.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.952]        // while-condition  =>  TRUE
[18:06:57.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.954]        // while-condition  =>  TRUE
[18:06:57.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.961]        // while-condition  =>  TRUE
[18:06:57.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.966]        // while-condition  =>  TRUE
[18:06:57.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.968]        // while-condition  =>  TRUE
[18:06:57.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.970]        // while-condition  =>  TRUE
[18:06:57.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.973]        // while-condition  =>  TRUE
[18:06:57.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.975]        // while-condition  =>  TRUE
[18:06:57.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.976]        // while-condition  =>  TRUE
[18:06:57.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.978]        // while-condition  =>  TRUE
[18:06:57.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.980]        // while-condition  =>  TRUE
[18:06:57.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.982]        // while-condition  =>  TRUE
[18:06:57.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.984]        // while-condition  =>  TRUE
[18:06:57.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.985]        // while-condition  =>  TRUE
[18:06:57.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.986]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.986]        // while-condition  =>  TRUE
[18:06:57.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.988]        // while-condition  =>  TRUE
[18:06:57.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.990]        // while-condition  =>  TRUE
[18:06:57.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.991]        // while-condition  =>  TRUE
[18:06:57.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:57.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:57.993]        // while-condition  =>  TRUE
[18:06:57.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.006]        // while-condition  =>  TRUE
[18:06:58.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.008]        // while-condition  =>  TRUE
[18:06:58.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.009]        // while-condition  =>  TRUE
[18:06:58.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.013]        // while-condition  =>  TRUE
[18:06:58.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.015]        // while-condition  =>  TRUE
[18:06:58.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.016]        // while-condition  =>  TRUE
[18:06:58.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.020]        // while-condition  =>  TRUE
[18:06:58.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.022]        // while-condition  =>  TRUE
[18:06:58.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.023]        // while-condition  =>  TRUE
[18:06:58.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.025]        // while-condition  =>  TRUE
[18:06:58.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.027]        // while-condition  =>  TRUE
[18:06:58.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.028]        // while-condition  =>  TRUE
[18:06:58.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.030]        // while-condition  =>  TRUE
[18:06:58.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.031]        // while-condition  =>  TRUE
[18:06:58.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.033]        // while-condition  =>  TRUE
[18:06:58.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.035]        // while-condition  =>  TRUE
[18:06:58.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.036]        // while-condition  =>  TRUE
[18:06:58.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.038]        // while-condition  =>  TRUE
[18:06:58.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.039]        // while-condition  =>  TRUE
[18:06:58.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.041]        // while-condition  =>  TRUE
[18:06:58.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.043]        // while-condition  =>  TRUE
[18:06:58.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.044]        // while-condition  =>  TRUE
[18:06:58.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.048]        // while-condition  =>  TRUE
[18:06:58.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.050]        // while-condition  =>  TRUE
[18:06:58.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.051]        // while-condition  =>  TRUE
[18:06:58.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.055]        // while-condition  =>  TRUE
[18:06:58.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.063]        // while-condition  =>  TRUE
[18:06:58.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.065]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.065]        // while-condition  =>  TRUE
[18:06:58.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.066]        // while-condition  =>  TRUE
[18:06:58.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.068]        // while-condition  =>  TRUE
[18:06:58.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.070]        // while-condition  =>  TRUE
[18:06:58.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.071]        // while-condition  =>  TRUE
[18:06:58.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.079]        // while-condition  =>  TRUE
[18:06:58.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:06:58.082]        // while-condition  =>  TRUE
[18:06:58.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:06:58.082]        // while  =>  TIMEOUT
[18:06:58.082]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:06:58.082]      </control>
[18:06:58.082]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:06:58.082]        // if-block "(__protocol & 0xFFFF) == 1"
[18:06:58.082]          // =>  FALSE
[18:06:58.082]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:06:58.082]      </control>
[18:06:58.082]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:06:58.082]        // if-block "(__protocol & 0xFFFF) == 2"
[18:06:58.082]          // =>  TRUE
[18:06:58.082]        <block atomic="false" info="">
[18:06:58.082]          Message(0, "executing SWD power up");
[18:06:58.085]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:06:58.087]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:06:58.087]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:06:58.088]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:06:58.089]        </block>
[18:06:58.089]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:06:58.089]      </control>
[18:06:58.089]      // end if-block "powered_down"
[18:06:58.089]    </control>
[18:06:58.089]    <block atomic="false" info="">
[18:06:58.089]      __var DEBUG_PORT_VAL    = 0;
[18:06:58.089]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:06:58.089]      __var ACCESS_POINT_VAL  = 0;
[18:06:58.089]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:06:58.089]      __ap = 1; 
[18:06:58.089]        // -> [__ap <= 0x00000001]
[18:06:58.089]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:06:58.106]  
[18:06:58.106]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[18:06:58.106]  
[18:06:58.107]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:06:58.107]    </block>
[18:06:58.107]  </sequence>
[18:06:58.107]  
[18:07:04.605]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:07:04.605]  
[18:07:04.605]  <debugvars>
[18:07:04.606]    // Pre-defined
[18:07:04.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:07:04.606]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:07:04.606]    __dp=0x00000000
[18:07:04.606]    __ap=0x00000000
[18:07:04.606]    __traceout=0x00000000      (Trace Disabled)
[18:07:04.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:07:04.606]    __FlashAddr=0x00000000
[18:07:04.606]    __FlashLen=0x00000000
[18:07:04.607]    __FlashArg=0x00000000
[18:07:04.607]    __FlashOp=0x00000000
[18:07:04.607]    __Result=0x00000000
[18:07:04.607]  </debugvars>
[18:07:04.607]  
[18:07:04.607]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:07:04.607]    <block atomic="false" info="">
[18:07:04.607]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:07:04.607]        // -> [isSWJ <= 0x00000001]
[18:07:04.607]      __var hasDormant = __protocol & 0x00020000;
[18:07:04.607]        // -> [hasDormant <= 0x00000000]
[18:07:04.607]      __var protType   = __protocol & 0x0000FFFF;
[18:07:04.607]        // -> [protType <= 0x00000002]
[18:07:04.607]    </block>
[18:07:04.607]    <control if="protType == 1" while="" timeout="0" info="">
[18:07:04.607]      // if-block "protType == 1"
[18:07:04.608]        // =>  FALSE
[18:07:04.608]      // skip if-block "protType == 1"
[18:07:04.608]    </control>
[18:07:04.608]    <control if="protType == 2" while="" timeout="0" info="">
[18:07:04.608]      // if-block "protType == 2"
[18:07:04.608]        // =>  TRUE
[18:07:04.608]      <control if="isSWJ" while="" timeout="0" info="">
[18:07:04.608]        // if-block "isSWJ"
[18:07:04.608]          // =>  TRUE
[18:07:04.609]        <control if="hasDormant" while="" timeout="0" info="">
[18:07:04.609]          // if-block "hasDormant"
[18:07:04.610]            // =>  FALSE
[18:07:04.610]          // skip if-block "hasDormant"
[18:07:04.610]        </control>
[18:07:04.610]        <control if="!hasDormant" while="" timeout="0" info="">
[18:07:04.610]          // if-block "!hasDormant"
[18:07:04.610]            // =>  TRUE
[18:07:04.610]          <block atomic="false" info="">
[18:07:04.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:07:04.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:07:04.612]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:07:04.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:07:04.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:07:04.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:07:04.619]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:07:04.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:07:04.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:07:04.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:07:04.622]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:07:04.623]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:07:04.623]          </block>
[18:07:04.623]          // end if-block "!hasDormant"
[18:07:04.623]        </control>
[18:07:04.623]        // end if-block "isSWJ"
[18:07:04.623]      </control>
[18:07:04.624]      <control if="!isSWJ" while="" timeout="0" info="">
[18:07:04.624]        // if-block "!isSWJ"
[18:07:04.624]          // =>  FALSE
[18:07:04.624]        // skip if-block "!isSWJ"
[18:07:04.624]      </control>
[18:07:04.624]      <block atomic="false" info="">
[18:07:04.624]        ReadDP(0x0);
[18:07:04.625]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:07:04.626]      </block>
[18:07:04.626]      // end if-block "protType == 2"
[18:07:04.626]    </control>
[18:07:04.626]  </sequence>
[18:07:04.626]  
[18:07:04.631]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:07:04.631]  
[18:07:04.631]  <debugvars>
[18:07:04.632]    // Pre-defined
[18:07:04.632]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:07:04.632]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:07:04.632]    __dp=0x00000000
[18:07:04.632]    __ap=0x00000000
[18:07:04.632]    __traceout=0x00000000      (Trace Disabled)
[18:07:04.632]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:07:04.632]    __FlashAddr=0x00000000
[18:07:04.633]    __FlashLen=0x00000000
[18:07:04.633]    __FlashArg=0x00000000
[18:07:04.633]    __FlashOp=0x00000000
[18:07:04.633]    __Result=0x00000000
[18:07:04.633]  </debugvars>
[18:07:04.633]  
[18:07:04.633]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:07:04.633]    <block atomic="false" info="">
[18:07:04.633]      __var SW_DP_ABORT       = 0x0;
[18:07:04.633]        // -> [SW_DP_ABORT <= 0x00000000]
[18:07:04.633]      __var DP_CTRL_STAT      = 0x4;
[18:07:04.634]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:07:04.634]      __var DP_SELECT         = 0x8;
[18:07:04.634]        // -> [DP_SELECT <= 0x00000008]
[18:07:04.634]      __var powered_down      = 0;
[18:07:04.634]        // -> [powered_down <= 0x00000000]
[18:07:04.634]      WriteDP(DP_SELECT, 0x00000000);
[18:07:04.637]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:07:04.637]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:07:04.641]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:07:04.641]        // -> [powered_down <= 0x00000001]
[18:07:04.642]    </block>
[18:07:04.642]    <control if="powered_down" while="" timeout="0" info="">
[18:07:04.642]      // if-block "powered_down"
[18:07:04.642]        // =>  TRUE
[18:07:04.642]      <block atomic="false" info="">
[18:07:04.642]        Message(0, "Debug/System power-up request sent");
[18:07:04.652]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:07:04.654]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:07:04.654]      </block>
[18:07:04.654]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:07:04.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.656]        // while-condition  =>  TRUE
[18:07:04.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.657]        // while-condition  =>  TRUE
[18:07:04.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.659]        // while-condition  =>  TRUE
[18:07:04.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.661]        // while-condition  =>  TRUE
[18:07:04.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.665]        // while-condition  =>  TRUE
[18:07:04.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.666]        // while-condition  =>  TRUE
[18:07:04.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.672]        // while-condition  =>  TRUE
[18:07:04.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.673]        // while-condition  =>  TRUE
[18:07:04.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.675]        // while-condition  =>  TRUE
[18:07:04.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.677]        // while-condition  =>  TRUE
[18:07:04.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.679]        // while-condition  =>  TRUE
[18:07:04.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.680]        // while-condition  =>  TRUE
[18:07:04.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.682]        // while-condition  =>  TRUE
[18:07:04.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.683]        // while-condition  =>  TRUE
[18:07:04.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.685]        // while-condition  =>  TRUE
[18:07:04.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.687]        // while-condition  =>  TRUE
[18:07:04.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.688]        // while-condition  =>  TRUE
[18:07:04.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.694]        // while-condition  =>  TRUE
[18:07:04.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.698]        // while-condition  =>  TRUE
[18:07:04.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.699]        // while-condition  =>  TRUE
[18:07:04.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.701]        // while-condition  =>  TRUE
[18:07:04.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.705]        // while-condition  =>  TRUE
[18:07:04.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.707]        // while-condition  =>  TRUE
[18:07:04.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.709]        // while-condition  =>  TRUE
[18:07:04.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.711]        // while-condition  =>  TRUE
[18:07:04.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.713]        // while-condition  =>  TRUE
[18:07:04.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.720]        // while-condition  =>  TRUE
[18:07:04.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.725]        // while-condition  =>  TRUE
[18:07:04.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.727]        // while-condition  =>  TRUE
[18:07:04.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.730]        // while-condition  =>  TRUE
[18:07:04.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.731]        // while-condition  =>  TRUE
[18:07:04.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.733]        // while-condition  =>  TRUE
[18:07:04.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.735]        // while-condition  =>  TRUE
[18:07:04.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.739]        // while-condition  =>  TRUE
[18:07:04.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.740]        // while-condition  =>  TRUE
[18:07:04.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.742]        // while-condition  =>  TRUE
[18:07:04.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.744]        // while-condition  =>  TRUE
[18:07:04.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.748]        // while-condition  =>  TRUE
[18:07:04.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.750]        // while-condition  =>  TRUE
[18:07:04.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.752]        // while-condition  =>  TRUE
[18:07:04.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.754]        // while-condition  =>  TRUE
[18:07:04.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.755]        // while-condition  =>  TRUE
[18:07:04.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.757]        // while-condition  =>  TRUE
[18:07:04.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.759]        // while-condition  =>  TRUE
[18:07:04.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.762]        // while-condition  =>  TRUE
[18:07:04.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.764]        // while-condition  =>  TRUE
[18:07:04.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.765]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.765]        // while-condition  =>  TRUE
[18:07:04.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.767]        // while-condition  =>  TRUE
[18:07:04.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.771]        // while-condition  =>  TRUE
[18:07:04.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.774]        // while-condition  =>  TRUE
[18:07:04.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.777]        // while-condition  =>  TRUE
[18:07:04.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.779]        // while-condition  =>  TRUE
[18:07:04.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.780]        // while-condition  =>  TRUE
[18:07:04.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.789]        // while-condition  =>  TRUE
[18:07:04.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.791]        // while-condition  =>  TRUE
[18:07:04.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.793]        // while-condition  =>  TRUE
[18:07:04.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.795]        // while-condition  =>  TRUE
[18:07:04.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.797]        // while-condition  =>  TRUE
[18:07:04.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.801]        // while-condition  =>  TRUE
[18:07:04.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.806]        // while-condition  =>  TRUE
[18:07:04.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.808]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.808]        // while-condition  =>  TRUE
[18:07:04.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.810]        // while-condition  =>  TRUE
[18:07:04.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.812]        // while-condition  =>  TRUE
[18:07:04.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.814]        // while-condition  =>  TRUE
[18:07:04.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.822]        // while-condition  =>  TRUE
[18:07:04.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.826]        // while-condition  =>  TRUE
[18:07:04.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.828]        // while-condition  =>  TRUE
[18:07:04.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.829]        // while-condition  =>  TRUE
[18:07:04.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.831]        // while-condition  =>  TRUE
[18:07:04.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.834]        // while-condition  =>  TRUE
[18:07:04.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.835]        // while-condition  =>  TRUE
[18:07:04.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.838]        // while-condition  =>  TRUE
[18:07:04.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.839]        // while-condition  =>  TRUE
[18:07:04.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.841]        // while-condition  =>  TRUE
[18:07:04.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.843]        // while-condition  =>  TRUE
[18:07:04.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.844]        // while-condition  =>  TRUE
[18:07:04.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.846]        // while-condition  =>  TRUE
[18:07:04.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.848]        // while-condition  =>  TRUE
[18:07:04.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.850]        // while-condition  =>  TRUE
[18:07:04.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.852]        // while-condition  =>  TRUE
[18:07:04.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.856]        // while-condition  =>  TRUE
[18:07:04.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.858]        // while-condition  =>  TRUE
[18:07:04.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.861]        // while-condition  =>  TRUE
[18:07:04.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.864]        // while-condition  =>  TRUE
[18:07:04.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.867]        // while-condition  =>  TRUE
[18:07:04.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.868]        // while-condition  =>  TRUE
[18:07:04.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.870]        // while-condition  =>  TRUE
[18:07:04.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.872]        // while-condition  =>  TRUE
[18:07:04.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.875]        // while-condition  =>  TRUE
[18:07:04.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.877]        // while-condition  =>  TRUE
[18:07:04.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.880]        // while-condition  =>  TRUE
[18:07:04.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.881]        // while-condition  =>  TRUE
[18:07:04.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.883]        // while-condition  =>  TRUE
[18:07:04.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.885]        // while-condition  =>  TRUE
[18:07:04.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.887]        // while-condition  =>  TRUE
[18:07:04.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.889]        // while-condition  =>  TRUE
[18:07:04.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.896]        // while-condition  =>  TRUE
[18:07:04.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.898]        // while-condition  =>  TRUE
[18:07:04.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.900]        // while-condition  =>  TRUE
[18:07:04.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.902]        // while-condition  =>  TRUE
[18:07:04.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.904]        // while-condition  =>  TRUE
[18:07:04.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.906]        // while-condition  =>  TRUE
[18:07:04.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.913]        // while-condition  =>  TRUE
[18:07:04.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.920]        // while-condition  =>  TRUE
[18:07:04.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.925]        // while-condition  =>  TRUE
[18:07:04.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.930]        // while-condition  =>  TRUE
[18:07:04.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.932]        // while-condition  =>  TRUE
[18:07:04.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.934]        // while-condition  =>  TRUE
[18:07:04.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.935]        // while-condition  =>  TRUE
[18:07:04.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.937]        // while-condition  =>  TRUE
[18:07:04.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.939]        // while-condition  =>  TRUE
[18:07:04.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.940]        // while-condition  =>  TRUE
[18:07:04.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.942]        // while-condition  =>  TRUE
[18:07:04.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.944]        // while-condition  =>  TRUE
[18:07:04.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.946]        // while-condition  =>  TRUE
[18:07:04.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.948]        // while-condition  =>  TRUE
[18:07:04.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.950]        // while-condition  =>  TRUE
[18:07:04.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.952]        // while-condition  =>  TRUE
[18:07:04.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.953]        // while-condition  =>  TRUE
[18:07:04.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.956]        // while-condition  =>  TRUE
[18:07:04.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.957]        // while-condition  =>  TRUE
[18:07:04.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.959]        // while-condition  =>  TRUE
[18:07:04.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.960]        // while-condition  =>  TRUE
[18:07:04.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.962]        // while-condition  =>  TRUE
[18:07:04.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.964]        // while-condition  =>  TRUE
[18:07:04.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.965]        // while-condition  =>  TRUE
[18:07:04.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.968]        // while-condition  =>  TRUE
[18:07:04.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.970]        // while-condition  =>  TRUE
[18:07:04.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.972]        // while-condition  =>  TRUE
[18:07:04.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.978]        // while-condition  =>  TRUE
[18:07:04.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.984]        // while-condition  =>  TRUE
[18:07:04.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.986]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.986]        // while-condition  =>  TRUE
[18:07:04.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.987]        // while-condition  =>  TRUE
[18:07:04.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.989]        // while-condition  =>  TRUE
[18:07:04.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:04.997]        // while-condition  =>  TRUE
[18:07:04.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:04.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.000]        // while-condition  =>  TRUE
[18:07:05.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.002]        // while-condition  =>  TRUE
[18:07:05.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.004]        // while-condition  =>  TRUE
[18:07:05.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.006]        // while-condition  =>  TRUE
[18:07:05.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.007]        // while-condition  =>  TRUE
[18:07:05.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.009]        // while-condition  =>  TRUE
[18:07:05.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.010]        // while-condition  =>  TRUE
[18:07:05.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.012]        // while-condition  =>  TRUE
[18:07:05.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.014]        // while-condition  =>  TRUE
[18:07:05.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.016]        // while-condition  =>  TRUE
[18:07:05.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.035]        // while-condition  =>  TRUE
[18:07:05.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.037]        // while-condition  =>  TRUE
[18:07:05.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.038]        // while-condition  =>  TRUE
[18:07:05.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.040]        // while-condition  =>  TRUE
[18:07:05.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.042]        // while-condition  =>  TRUE
[18:07:05.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.044]        // while-condition  =>  TRUE
[18:07:05.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.046]        // while-condition  =>  TRUE
[18:07:05.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.048]        // while-condition  =>  TRUE
[18:07:05.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.049]        // while-condition  =>  TRUE
[18:07:05.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.051]        // while-condition  =>  TRUE
[18:07:05.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.052]        // while-condition  =>  TRUE
[18:07:05.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.054]        // while-condition  =>  TRUE
[18:07:05.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.060]        // while-condition  =>  TRUE
[18:07:05.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.062]        // while-condition  =>  TRUE
[18:07:05.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.064]        // while-condition  =>  TRUE
[18:07:05.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.066]        // while-condition  =>  TRUE
[18:07:05.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.069]        // while-condition  =>  TRUE
[18:07:05.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.071]        // while-condition  =>  TRUE
[18:07:05.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.072]        // while-condition  =>  TRUE
[18:07:05.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.074]        // while-condition  =>  TRUE
[18:07:05.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.076]        // while-condition  =>  TRUE
[18:07:05.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.077]        // while-condition  =>  TRUE
[18:07:05.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.079]        // while-condition  =>  TRUE
[18:07:05.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.080]        // while-condition  =>  TRUE
[18:07:05.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.082]        // while-condition  =>  TRUE
[18:07:05.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.084]        // while-condition  =>  TRUE
[18:07:05.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.085]        // while-condition  =>  TRUE
[18:07:05.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.087]        // while-condition  =>  TRUE
[18:07:05.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.089]        // while-condition  =>  TRUE
[18:07:05.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.092]        // while-condition  =>  TRUE
[18:07:05.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.093]        // while-condition  =>  TRUE
[18:07:05.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.098]        // while-condition  =>  TRUE
[18:07:05.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.099]        // while-condition  =>  TRUE
[18:07:05.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.105]        // while-condition  =>  TRUE
[18:07:05.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.116]        // while-condition  =>  TRUE
[18:07:05.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.122]        // while-condition  =>  TRUE
[18:07:05.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.129]        // while-condition  =>  TRUE
[18:07:05.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.131]        // while-condition  =>  TRUE
[18:07:05.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.132]        // while-condition  =>  TRUE
[18:07:05.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.134]        // while-condition  =>  TRUE
[18:07:05.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.136]        // while-condition  =>  TRUE
[18:07:05.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.138]        // while-condition  =>  TRUE
[18:07:05.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.140]        // while-condition  =>  TRUE
[18:07:05.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.142]        // while-condition  =>  TRUE
[18:07:05.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.144]        // while-condition  =>  TRUE
[18:07:05.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.145]        // while-condition  =>  TRUE
[18:07:05.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.147]        // while-condition  =>  TRUE
[18:07:05.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.148]        // while-condition  =>  TRUE
[18:07:05.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.150]        // while-condition  =>  TRUE
[18:07:05.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.152]        // while-condition  =>  TRUE
[18:07:05.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.155]        // while-condition  =>  TRUE
[18:07:05.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.164]        // while-condition  =>  TRUE
[18:07:05.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.171]        // while-condition  =>  TRUE
[18:07:05.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.173]        // while-condition  =>  TRUE
[18:07:05.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.175]        // while-condition  =>  TRUE
[18:07:05.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.176]        // while-condition  =>  TRUE
[18:07:05.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.177]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.178]        // while-condition  =>  TRUE
[18:07:05.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.179]        // while-condition  =>  TRUE
[18:07:05.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.183]        // while-condition  =>  TRUE
[18:07:05.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.184]        // while-condition  =>  TRUE
[18:07:05.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.186]        // while-condition  =>  TRUE
[18:07:05.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.188]        // while-condition  =>  TRUE
[18:07:05.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.189]        // while-condition  =>  TRUE
[18:07:05.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.191]        // while-condition  =>  TRUE
[18:07:05.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.193]        // while-condition  =>  TRUE
[18:07:05.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.194]        // while-condition  =>  TRUE
[18:07:05.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.196]        // while-condition  =>  TRUE
[18:07:05.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.197]        // while-condition  =>  TRUE
[18:07:05.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.199]        // while-condition  =>  TRUE
[18:07:05.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.200]        // while-condition  =>  TRUE
[18:07:05.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.203]        // while-condition  =>  TRUE
[18:07:05.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.204]        // while-condition  =>  TRUE
[18:07:05.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.206]        // while-condition  =>  TRUE
[18:07:05.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.208]        // while-condition  =>  TRUE
[18:07:05.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.209]        // while-condition  =>  TRUE
[18:07:05.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.211]        // while-condition  =>  TRUE
[18:07:05.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.214]        // while-condition  =>  TRUE
[18:07:05.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.215]        // while-condition  =>  TRUE
[18:07:05.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.223]        // while-condition  =>  TRUE
[18:07:05.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.224]        // while-condition  =>  TRUE
[18:07:05.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.228]        // while-condition  =>  TRUE
[18:07:05.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.232]        // while-condition  =>  TRUE
[18:07:05.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.234]        // while-condition  =>  TRUE
[18:07:05.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.235]        // while-condition  =>  TRUE
[18:07:05.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.244]        // while-condition  =>  TRUE
[18:07:05.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.249]        // while-condition  =>  TRUE
[18:07:05.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.251]        // while-condition  =>  TRUE
[18:07:05.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.252]        // while-condition  =>  TRUE
[18:07:05.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.254]        // while-condition  =>  TRUE
[18:07:05.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.255]        // while-condition  =>  TRUE
[18:07:05.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.257]        // while-condition  =>  TRUE
[18:07:05.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.259]        // while-condition  =>  TRUE
[18:07:05.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.265]        // while-condition  =>  TRUE
[18:07:05.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.267]        // while-condition  =>  TRUE
[18:07:05.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.269]        // while-condition  =>  TRUE
[18:07:05.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.271]        // while-condition  =>  TRUE
[18:07:05.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.272]        // while-condition  =>  TRUE
[18:07:05.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.274]        // while-condition  =>  TRUE
[18:07:05.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.275]        // while-condition  =>  TRUE
[18:07:05.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.279]        // while-condition  =>  TRUE
[18:07:05.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.284]        // while-condition  =>  TRUE
[18:07:05.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.291]        // while-condition  =>  TRUE
[18:07:05.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.292]        // while-condition  =>  TRUE
[18:07:05.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.294]        // while-condition  =>  TRUE
[18:07:05.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.296]        // while-condition  =>  TRUE
[18:07:05.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.302]        // while-condition  =>  TRUE
[18:07:05.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.304]        // while-condition  =>  TRUE
[18:07:05.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.306]        // while-condition  =>  TRUE
[18:07:05.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.308]        // while-condition  =>  TRUE
[18:07:05.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.309]        // while-condition  =>  TRUE
[18:07:05.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.311]        // while-condition  =>  TRUE
[18:07:05.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.316]        // while-condition  =>  TRUE
[18:07:05.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.317]        // while-condition  =>  TRUE
[18:07:05.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.319]        // while-condition  =>  TRUE
[18:07:05.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.320]        // while-condition  =>  TRUE
[18:07:05.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.322]        // while-condition  =>  TRUE
[18:07:05.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.336]        // while-condition  =>  TRUE
[18:07:05.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.338]        // while-condition  =>  TRUE
[18:07:05.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.343]        // while-condition  =>  TRUE
[18:07:05.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.344]        // while-condition  =>  TRUE
[18:07:05.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.346]        // while-condition  =>  TRUE
[18:07:05.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.347]        // while-condition  =>  TRUE
[18:07:05.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.349]        // while-condition  =>  TRUE
[18:07:05.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.350]        // while-condition  =>  TRUE
[18:07:05.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.357]        // while-condition  =>  TRUE
[18:07:05.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.363]        // while-condition  =>  TRUE
[18:07:05.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.366]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.366]        // while-condition  =>  TRUE
[18:07:05.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.367]        // while-condition  =>  TRUE
[18:07:05.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.373]        // while-condition  =>  TRUE
[18:07:05.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.374]        // while-condition  =>  TRUE
[18:07:05.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.376]        // while-condition  =>  TRUE
[18:07:05.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.378]        // while-condition  =>  TRUE
[18:07:05.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.379]        // while-condition  =>  TRUE
[18:07:05.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.381]        // while-condition  =>  TRUE
[18:07:05.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.383]        // while-condition  =>  TRUE
[18:07:05.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.385]        // while-condition  =>  TRUE
[18:07:05.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.386]        // while-condition  =>  TRUE
[18:07:05.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.388]        // while-condition  =>  TRUE
[18:07:05.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.391]        // while-condition  =>  TRUE
[18:07:05.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.392]        // while-condition  =>  TRUE
[18:07:05.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.394]        // while-condition  =>  TRUE
[18:07:05.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.395]        // while-condition  =>  TRUE
[18:07:05.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.398]        // while-condition  =>  TRUE
[18:07:05.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.402]        // while-condition  =>  TRUE
[18:07:05.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.403]        // while-condition  =>  TRUE
[18:07:05.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.405]        // while-condition  =>  TRUE
[18:07:05.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.410]        // while-condition  =>  TRUE
[18:07:05.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.412]        // while-condition  =>  TRUE
[18:07:05.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.414]        // while-condition  =>  TRUE
[18:07:05.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.418]        // while-condition  =>  TRUE
[18:07:05.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.420]        // while-condition  =>  TRUE
[18:07:05.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.421]        // while-condition  =>  TRUE
[18:07:05.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.426]        // while-condition  =>  TRUE
[18:07:05.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.427]        // while-condition  =>  TRUE
[18:07:05.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.430]        // while-condition  =>  TRUE
[18:07:05.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.431]        // while-condition  =>  TRUE
[18:07:05.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.435]        // while-condition  =>  TRUE
[18:07:05.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.436]        // while-condition  =>  TRUE
[18:07:05.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.438]        // while-condition  =>  TRUE
[18:07:05.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.439]        // while-condition  =>  TRUE
[18:07:05.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.443]        // while-condition  =>  TRUE
[18:07:05.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.444]        // while-condition  =>  TRUE
[18:07:05.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.447]        // while-condition  =>  TRUE
[18:07:05.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.448]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.448]        // while-condition  =>  TRUE
[18:07:05.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.450]        // while-condition  =>  TRUE
[18:07:05.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.454]        // while-condition  =>  TRUE
[18:07:05.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.458]        // while-condition  =>  TRUE
[18:07:05.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.460]        // while-condition  =>  TRUE
[18:07:05.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.461]        // while-condition  =>  TRUE
[18:07:05.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.463]        // while-condition  =>  TRUE
[18:07:05.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.464]        // while-condition  =>  TRUE
[18:07:05.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.466]        // while-condition  =>  TRUE
[18:07:05.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.469]        // while-condition  =>  TRUE
[18:07:05.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.473]        // while-condition  =>  TRUE
[18:07:05.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.477]        // while-condition  =>  TRUE
[18:07:05.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.479]        // while-condition  =>  TRUE
[18:07:05.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.480]        // while-condition  =>  TRUE
[18:07:05.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.482]        // while-condition  =>  TRUE
[18:07:05.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.483]        // while-condition  =>  TRUE
[18:07:05.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.486]        // while-condition  =>  TRUE
[18:07:05.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.492]        // while-condition  =>  TRUE
[18:07:05.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.497]        // while-condition  =>  TRUE
[18:07:05.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.499]        // while-condition  =>  TRUE
[18:07:05.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.501]        // while-condition  =>  TRUE
[18:07:05.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.503]        // while-condition  =>  TRUE
[18:07:05.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.505]        // while-condition  =>  TRUE
[18:07:05.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.507]        // while-condition  =>  TRUE
[18:07:05.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.508]        // while-condition  =>  TRUE
[18:07:05.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.510]        // while-condition  =>  TRUE
[18:07:05.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.512]        // while-condition  =>  TRUE
[18:07:05.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.513]        // while-condition  =>  TRUE
[18:07:05.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.515]        // while-condition  =>  TRUE
[18:07:05.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.516]        // while-condition  =>  TRUE
[18:07:05.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.518]        // while-condition  =>  TRUE
[18:07:05.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.520]        // while-condition  =>  TRUE
[18:07:05.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.521]        // while-condition  =>  TRUE
[18:07:05.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.523]        // while-condition  =>  TRUE
[18:07:05.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.524]        // while-condition  =>  TRUE
[18:07:05.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.526]        // while-condition  =>  TRUE
[18:07:05.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.533]        // while-condition  =>  TRUE
[18:07:05.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.540]        // while-condition  =>  TRUE
[18:07:05.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.546]        // while-condition  =>  TRUE
[18:07:05.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.550]        // while-condition  =>  TRUE
[18:07:05.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.552]        // while-condition  =>  TRUE
[18:07:05.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.554]        // while-condition  =>  TRUE
[18:07:05.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.555]        // while-condition  =>  TRUE
[18:07:05.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.557]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.557]        // while-condition  =>  TRUE
[18:07:05.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.559]        // while-condition  =>  TRUE
[18:07:05.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.560]        // while-condition  =>  TRUE
[18:07:05.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.562]        // while-condition  =>  TRUE
[18:07:05.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.564]        // while-condition  =>  TRUE
[18:07:05.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.565]        // while-condition  =>  TRUE
[18:07:05.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.567]        // while-condition  =>  TRUE
[18:07:05.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.569]        // while-condition  =>  TRUE
[18:07:05.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.570]        // while-condition  =>  TRUE
[18:07:05.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.572]        // while-condition  =>  TRUE
[18:07:05.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.575]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.575]        // while-condition  =>  TRUE
[18:07:05.575]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.576]        // while-condition  =>  TRUE
[18:07:05.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.578]        // while-condition  =>  TRUE
[18:07:05.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.579]        // while-condition  =>  TRUE
[18:07:05.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.581]        // while-condition  =>  TRUE
[18:07:05.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.583]        // while-condition  =>  TRUE
[18:07:05.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.584]        // while-condition  =>  TRUE
[18:07:05.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.592]        // while-condition  =>  TRUE
[18:07:05.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.596]        // while-condition  =>  TRUE
[18:07:05.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.598]        // while-condition  =>  TRUE
[18:07:05.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.600]        // while-condition  =>  TRUE
[18:07:05.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.602]        // while-condition  =>  TRUE
[18:07:05.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.603]        // while-condition  =>  TRUE
[18:07:05.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.609]        // while-condition  =>  TRUE
[18:07:05.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.611]        // while-condition  =>  TRUE
[18:07:05.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.614]        // while-condition  =>  TRUE
[18:07:05.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.616]        // while-condition  =>  TRUE
[18:07:05.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.617]        // while-condition  =>  TRUE
[18:07:05.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.619]        // while-condition  =>  TRUE
[18:07:05.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.621]        // while-condition  =>  TRUE
[18:07:05.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.622]        // while-condition  =>  TRUE
[18:07:05.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.624]        // while-condition  =>  TRUE
[18:07:05.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.627]        // while-condition  =>  TRUE
[18:07:05.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.628]        // while-condition  =>  TRUE
[18:07:05.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.630]        // while-condition  =>  TRUE
[18:07:05.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.632]        // while-condition  =>  TRUE
[18:07:05.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.633]        // while-condition  =>  TRUE
[18:07:05.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.640]        // while-condition  =>  TRUE
[18:07:05.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.642]        // while-condition  =>  TRUE
[18:07:05.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.644]        // while-condition  =>  TRUE
[18:07:05.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.646]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:07:05.646]        // while-condition  =>  TRUE
[18:07:05.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:05.646]        // while  =>  TIMEOUT
[18:07:05.646]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:07:05.646]      </control>
[18:07:05.646]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:07:05.646]        // if-block "(__protocol & 0xFFFF) == 1"
[18:07:05.646]          // =>  FALSE
[18:07:05.646]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:07:05.646]      </control>
[18:07:05.646]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:07:05.646]        // if-block "(__protocol & 0xFFFF) == 2"
[18:07:05.646]          // =>  TRUE
[18:07:05.646]        <block atomic="false" info="">
[18:07:05.646]          Message(0, "executing SWD power up");
[18:07:05.648]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:07:05.650]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:07:05.651]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:07:05.652]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:07:05.652]        </block>
[18:07:05.652]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:07:05.652]      </control>
[18:07:05.652]      // end if-block "powered_down"
[18:07:05.652]    </control>
[18:07:05.652]    <block atomic="false" info="">
[18:07:05.652]      __var DEBUG_PORT_VAL    = 0;
[18:07:05.652]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:07:05.652]      __var ACCESS_POINT_VAL  = 0;
[18:07:05.652]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:07:05.653]      __ap = 1; 
[18:07:05.653]        // -> [__ap <= 0x00000001]
[18:07:05.653]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:07:05.668]  
[18:07:05.668]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[18:07:05.668]  
[18:07:05.671]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:07:05.671]    </block>
[18:07:05.671]  </sequence>
[18:07:05.671]  
[18:07:20.552]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:07:20.552]  
[18:07:20.558]  <debugvars>
[18:07:20.558]    // Pre-defined
[18:07:20.558]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:07:20.558]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:07:20.558]    __dp=0x00000000
[18:07:20.558]    __ap=0x00000000
[18:07:20.558]    __traceout=0x00000000      (Trace Disabled)
[18:07:20.559]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:07:20.559]    __FlashAddr=0x00000000
[18:07:20.559]    __FlashLen=0x00000000
[18:07:20.559]    __FlashArg=0x00000000
[18:07:20.559]    __FlashOp=0x00000000
[18:07:20.559]    __Result=0x00000000
[18:07:20.559]  </debugvars>
[18:07:20.559]  
[18:07:20.559]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:07:20.559]    <block atomic="false" info="">
[18:07:20.559]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:07:20.559]        // -> [isSWJ <= 0x00000001]
[18:07:20.559]      __var hasDormant = __protocol & 0x00020000;
[18:07:20.559]        // -> [hasDormant <= 0x00000000]
[18:07:20.559]      __var protType   = __protocol & 0x0000FFFF;
[18:07:20.559]        // -> [protType <= 0x00000002]
[18:07:20.559]    </block>
[18:07:20.559]    <control if="protType == 1" while="" timeout="0" info="">
[18:07:20.559]      // if-block "protType == 1"
[18:07:20.560]        // =>  FALSE
[18:07:20.560]      // skip if-block "protType == 1"
[18:07:20.560]    </control>
[18:07:20.560]    <control if="protType == 2" while="" timeout="0" info="">
[18:07:20.560]      // if-block "protType == 2"
[18:07:20.560]        // =>  TRUE
[18:07:20.560]      <control if="isSWJ" while="" timeout="0" info="">
[18:07:20.560]        // if-block "isSWJ"
[18:07:20.560]          // =>  TRUE
[18:07:20.560]        <control if="hasDormant" while="" timeout="0" info="">
[18:07:20.560]          // if-block "hasDormant"
[18:07:20.560]            // =>  FALSE
[18:07:20.560]          // skip if-block "hasDormant"
[18:07:20.560]        </control>
[18:07:20.560]        <control if="!hasDormant" while="" timeout="0" info="">
[18:07:20.560]          // if-block "!hasDormant"
[18:07:20.560]            // =>  TRUE
[18:07:20.560]          <block atomic="false" info="">
[18:07:20.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:07:20.565]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:07:20.565]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:07:20.570]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:07:20.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:07:20.574]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:07:20.574]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:07:20.575]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:07:20.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:07:20.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:07:20.577]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:07:20.578]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:07:20.579]          </block>
[18:07:20.579]          // end if-block "!hasDormant"
[18:07:20.579]        </control>
[18:07:20.579]        // end if-block "isSWJ"
[18:07:20.579]      </control>
[18:07:20.579]      <control if="!isSWJ" while="" timeout="0" info="">
[18:07:20.579]        // if-block "!isSWJ"
[18:07:20.579]          // =>  FALSE
[18:07:20.579]        // skip if-block "!isSWJ"
[18:07:20.579]      </control>
[18:07:20.579]      <block atomic="false" info="">
[18:07:20.579]        ReadDP(0x0);
[18:07:20.580]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:07:20.580]      </block>
[18:07:20.580]      // end if-block "protType == 2"
[18:07:20.581]    </control>
[18:07:20.581]  </sequence>
[18:07:20.581]  
[18:07:20.583]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:07:20.583]  
[18:07:20.583]  <debugvars>
[18:07:20.583]    // Pre-defined
[18:07:20.583]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:07:20.583]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:07:20.583]    __dp=0x00000000
[18:07:20.583]    __ap=0x00000000
[18:07:20.583]    __traceout=0x00000000      (Trace Disabled)
[18:07:20.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:07:20.583]    __FlashAddr=0x00000000
[18:07:20.583]    __FlashLen=0x00000000
[18:07:20.583]    __FlashArg=0x00000000
[18:07:20.583]    __FlashOp=0x00000000
[18:07:20.583]    __Result=0x00000000
[18:07:20.584]  </debugvars>
[18:07:20.584]  
[18:07:20.584]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:07:20.584]    <block atomic="false" info="">
[18:07:20.584]      __var SW_DP_ABORT       = 0x0;
[18:07:20.584]        // -> [SW_DP_ABORT <= 0x00000000]
[18:07:20.584]      __var DP_CTRL_STAT      = 0x4;
[18:07:20.584]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:07:20.584]      __var DP_SELECT         = 0x8;
[18:07:20.584]        // -> [DP_SELECT <= 0x00000008]
[18:07:20.584]      __var powered_down      = 0;
[18:07:20.584]        // -> [powered_down <= 0x00000000]
[18:07:20.584]      WriteDP(DP_SELECT, 0x00000000);
[18:07:20.590]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:07:20.590]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:07:20.591]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:07:20.591]        // -> [powered_down <= 0x00000001]
[18:07:20.592]    </block>
[18:07:20.592]    <control if="powered_down" while="" timeout="0" info="">
[18:07:20.592]      // if-block "powered_down"
[18:07:20.592]        // =>  TRUE
[18:07:20.592]      <block atomic="false" info="">
[18:07:20.592]        Message(0, "Debug/System power-up request sent");
[18:07:20.593]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:07:20.595]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:07:20.595]      </block>
[18:07:20.595]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:07:20.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:07:20.597]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:07:20.597]        // while-condition  =>  FALSE
[18:07:20.597]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:07:20.597]      </control>
[18:07:20.597]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:07:20.598]        // if-block "(__protocol & 0xFFFF) == 1"
[18:07:20.598]          // =>  FALSE
[18:07:20.598]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:07:20.598]      </control>
[18:07:20.598]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:07:20.598]        // if-block "(__protocol & 0xFFFF) == 2"
[18:07:20.598]          // =>  TRUE
[18:07:20.598]        <block atomic="false" info="">
[18:07:20.598]          Message(0, "executing SWD power up");
[18:07:20.599]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:07:20.601]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:07:20.601]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:07:20.603]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:07:20.603]        </block>
[18:07:20.603]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:07:20.603]      </control>
[18:07:20.603]      // end if-block "powered_down"
[18:07:20.604]    </control>
[18:07:20.604]    <block atomic="false" info="">
[18:07:20.604]      __var DEBUG_PORT_VAL    = 0;
[18:07:20.604]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:07:20.604]      __var ACCESS_POINT_VAL  = 0;
[18:07:20.604]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:07:20.604]      __ap = 1; 
[18:07:20.604]        // -> [__ap <= 0x00000001]
[18:07:20.605]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:07:20.608]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:07:20.608]      __ap = 4;
[18:07:20.608]        // -> [__ap <= 0x00000004]
[18:07:20.608]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:07:20.612]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:07:20.612]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:07:20.612]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:07:20.614]    </block>
[18:07:20.614]    <block atomic="false" info="">
[18:07:20.614]      __var nReset = 0x80;
[18:07:20.614]        // -> [nReset <= 0x00000080]
[18:07:20.615]      __var canReadPins = 0;
[18:07:20.615]        // -> [canReadPins <= 0x00000000]
[18:07:20.615]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:07:20.616]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:07:20.616]        // -> [canReadPins <= 0x00000001]
[18:07:20.616]    </block>
[18:07:20.616]    <control if="" while="1" timeout="200" info="">
[18:07:20.616]      // while "1"  (timeout="200")
[18:07:20.616]      // while-condition  =>  TRUE
[18:07:20.616]      // while "1"  (timeout="200")
[18:07:20.616]      // while-condition  =>  TRUE
[18:07:20.616]      // while "1"  (timeout="200")
[18:07:20.616]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.617]      // while-condition  =>  TRUE
[18:07:20.617]      // while "1"  (timeout="200")
[18:07:20.618]      // while-condition  =>  TRUE
[18:07:20.618]      // while "1"  (timeout="200")
[18:07:20.618]      // while-condition  =>  TRUE
[18:07:20.618]      // while "1"  (timeout="200")
[18:07:20.618]      // while-condition  =>  TRUE
[18:07:20.618]      // while "1"  (timeout="200")
[18:07:20.618]      // while-condition  =>  TRUE
[18:07:20.618]      // while "1"  (timeout="200")
[18:07:20.618]      // while-condition  =>  TRUE
[18:07:20.618]      // while "1"  (timeout="200")
[18:07:20.618]      // while-condition  =>  TRUE
[18:07:20.618]      // while "1"  (timeout="200")
[18:07:20.619]      // while-condition  =>  TRUE
[18:07:20.619]      // while "1"  (timeout="200")
[18:07:20.619]      // while-condition  =>  TRUE
[18:07:20.619]      // while "1"  (timeout="200")
[18:07:20.619]      // while-condition  =>  TRUE
[18:07:20.619]      // while "1"  (timeout="200")
[18:07:20.619]      // while-condition  =>  TRUE
[18:07:20.619]      // while "1"  (timeout="200")
[18:07:20.619]      // while-condition  =>  TRUE
[18:07:20.619]      // while "1"  (timeout="200")
[18:07:20.619]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.620]      // while-condition  =>  TRUE
[18:07:20.620]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.621]      // while "1"  (timeout="200")
[18:07:20.621]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.622]      // while-condition  =>  TRUE
[18:07:20.622]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.623]      // while "1"  (timeout="200")
[18:07:20.623]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.624]      // while-condition  =>  TRUE
[18:07:20.624]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.625]      // while-condition  =>  TRUE
[18:07:20.625]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.626]      // while "1"  (timeout="200")
[18:07:20.626]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.627]      // while-condition  =>  TRUE
[18:07:20.627]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.628]      // while-condition  =>  TRUE
[18:07:20.628]      // while "1"  (timeout="200")
[18:07:20.629]      // while-condition  =>  TRUE
[18:07:20.629]      // while "1"  (timeout="200")
[18:07:20.629]      // while  =>  TIMEOUT
[18:07:20.629]      // end while "1"
[18:07:20.629]    </control>
[18:07:20.629]    <control if="canReadPins" while="" timeout="0" info="">
[18:07:20.629]      // if-block "canReadPins"
[18:07:20.629]        // =>  TRUE
[18:07:20.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:07:20.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:07:20.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:07:20.630]        // while-condition  =>  FALSE
[18:07:20.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:07:20.630]      </control>
[18:07:20.630]      // end if-block "canReadPins"
[18:07:20.630]    </control>
[18:07:20.630]    <control if="!canReadPins" while="" timeout="0" info="">
[18:07:20.630]      // if-block "!canReadPins"
[18:07:20.630]        // =>  FALSE
[18:07:20.630]      // skip if-block "!canReadPins"
[18:07:20.631]    </control>
[18:07:20.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:07:20.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:07:20.631]        // =>  TRUE
[18:07:20.631]      <block atomic="false" info="">
[18:07:20.631]        WriteAP(0x00, 0x190008);
[18:07:20.632]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:07:20.632]        WriteAP(0xF0, 0x01);
[18:07:20.635]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:07:20.636]      </block>
[18:07:20.636]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:07:20.636]    </control>
[18:07:20.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:07:20.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:07:20.636]        // =>  FALSE
[18:07:20.636]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:07:20.636]    </control>
[18:07:20.636]    <block atomic="false" info="">
[18:07:20.636]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:07:20.643]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:07:20.644]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:07:20.644]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:07:20.645]      __ap = 0; //lets make sure we reset the access point selection
[18:07:20.645]        // -> [__ap <= 0x00000000]
[18:07:20.645]    </block>
[18:07:20.645]  </sequence>
[18:07:20.645]  
[18:07:20.666]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:07:20.666]  
[18:07:20.667]  <debugvars>
[18:07:20.667]    // Pre-defined
[18:07:20.667]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:07:20.667]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:07:20.667]    __dp=0x00000000
[18:07:20.667]    __ap=0x00000000
[18:07:20.667]    __traceout=0x00000000      (Trace Disabled)
[18:07:20.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:07:20.667]    __FlashAddr=0x00000000
[18:07:20.667]    __FlashLen=0x00000000
[18:07:20.667]    __FlashArg=0x00000000
[18:07:20.667]    __FlashOp=0x00000000
[18:07:20.667]    __Result=0x00000000
[18:07:20.667]  </debugvars>
[18:07:20.667]  
[18:07:20.667]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:07:20.667]    <block atomic="false" info="">
[18:07:20.667]      __var deviceID = 0;
[18:07:20.667]        // -> [deviceID <= 0x00000000]
[18:07:20.667]      __var version = 0;
[18:07:20.667]        // -> [version <= 0x00000000]
[18:07:20.667]      __var partNum = 0;
[18:07:20.667]        // -> [partNum <= 0x00000000]
[18:07:20.667]      __var manuf = 0;
[18:07:20.667]        // -> [manuf <= 0x00000000]
[18:07:20.668]      __var isMSPM0G1X0X_G3X0X = 0;
[18:07:20.668]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:07:20.668]      __var isProduction = 0;
[18:07:20.668]        // -> [isProduction <= 0x00000000]
[18:07:20.668]      __var continueId = 0;
[18:07:20.668]        // -> [continueId <= 0x00000000]
[18:07:20.668]      deviceID =   Read32(0x41C40004);
[18:07:20.675]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:07:20.675]        // -> [deviceID <= 0x2BB8802F]
[18:07:20.675]      version = deviceID >> 28;
[18:07:20.675]        // -> [version <= 0x00000002]
[18:07:20.675]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:07:20.675]        // -> [partNum <= 0x0000BB88]
[18:07:20.675]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:07:20.675]        // -> [manuf <= 0x00000017]
[18:07:20.675]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:07:20.676]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:07:20.676]      isProduction = (version > 0);
[18:07:20.676]        // -> [isProduction <= 0x00000001]
[18:07:20.676]    </block>
[18:07:20.676]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:07:20.676]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:07:20.676]        // =>  FALSE
[18:07:20.676]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:07:20.676]    </control>
[18:07:20.676]    <control if="continueId == 4" while="" timeout="0" info="">
[18:07:20.676]      // if-block "continueId == 4"
[18:07:20.676]        // =>  FALSE
[18:07:20.676]      // skip if-block "continueId == 4"
[18:07:20.676]    </control>
[18:07:20.676]    <control if="!isProduction" while="" timeout="0" info="">
[18:07:20.676]      // if-block "!isProduction"
[18:07:20.676]        // =>  FALSE
[18:07:20.676]      // skip if-block "!isProduction"
[18:07:20.676]    </control>
[18:07:20.676]  </sequence>
[18:07:20.676]  
[18:10:02.078]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:10:02.078]  
[18:10:02.078]  <debugvars>
[18:10:02.078]    // Pre-defined
[18:10:02.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:10:02.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:10:02.078]    __dp=0x00000000
[18:10:02.079]    __ap=0x00000000
[18:10:02.079]    __traceout=0x00000000      (Trace Disabled)
[18:10:02.079]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:10:02.079]    __FlashAddr=0x00000000
[18:10:02.079]    __FlashLen=0x00000000
[18:10:02.079]    __FlashArg=0x00000000
[18:10:02.079]    __FlashOp=0x00000000
[18:10:02.080]    __Result=0x00000000
[18:10:02.080]  </debugvars>
[18:10:02.080]  
[18:10:02.080]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:10:02.080]    <block atomic="false" info="">
[18:10:02.080]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:10:02.080]        // -> [isSWJ <= 0x00000001]
[18:10:02.080]      __var hasDormant = __protocol & 0x00020000;
[18:10:02.080]        // -> [hasDormant <= 0x00000000]
[18:10:02.081]      __var protType   = __protocol & 0x0000FFFF;
[18:10:02.081]        // -> [protType <= 0x00000002]
[18:10:02.081]    </block>
[18:10:02.081]    <control if="protType == 1" while="" timeout="0" info="">
[18:10:02.081]      // if-block "protType == 1"
[18:10:02.081]        // =>  FALSE
[18:10:02.081]      // skip if-block "protType == 1"
[18:10:02.081]    </control>
[18:10:02.081]    <control if="protType == 2" while="" timeout="0" info="">
[18:10:02.081]      // if-block "protType == 2"
[18:10:02.081]        // =>  TRUE
[18:10:02.081]      <control if="isSWJ" while="" timeout="0" info="">
[18:10:02.081]        // if-block "isSWJ"
[18:10:02.081]          // =>  TRUE
[18:10:02.082]        <control if="hasDormant" while="" timeout="0" info="">
[18:10:02.082]          // if-block "hasDormant"
[18:10:02.082]            // =>  FALSE
[18:10:02.082]          // skip if-block "hasDormant"
[18:10:02.082]        </control>
[18:10:02.082]        <control if="!hasDormant" while="" timeout="0" info="">
[18:10:02.082]          // if-block "!hasDormant"
[18:10:02.082]            // =>  TRUE
[18:10:02.082]          <block atomic="false" info="">
[18:10:02.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:10:02.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:10:02.086]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:10:02.088]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:10:02.088]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:10:02.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:10:02.090]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:10:02.091]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:10:02.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:10:02.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:10:02.093]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:10:02.095]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:10:02.096]          </block>
[18:10:02.096]          // end if-block "!hasDormant"
[18:10:02.096]        </control>
[18:10:02.096]        // end if-block "isSWJ"
[18:10:02.096]      </control>
[18:10:02.097]      <control if="!isSWJ" while="" timeout="0" info="">
[18:10:02.097]        // if-block "!isSWJ"
[18:10:02.097]          // =>  FALSE
[18:10:02.097]        // skip if-block "!isSWJ"
[18:10:02.097]      </control>
[18:10:02.097]      <block atomic="false" info="">
[18:10:02.098]        ReadDP(0x0);
[18:10:02.099]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:10:02.099]      </block>
[18:10:02.099]      // end if-block "protType == 2"
[18:10:02.099]    </control>
[18:10:02.099]  </sequence>
[18:10:02.100]  
[18:10:02.103]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:10:02.103]  
[18:10:02.103]  <debugvars>
[18:10:02.103]    // Pre-defined
[18:10:02.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:10:02.103]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:10:02.103]    __dp=0x00000000
[18:10:02.103]    __ap=0x00000000
[18:10:02.103]    __traceout=0x00000000      (Trace Disabled)
[18:10:02.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:10:02.103]    __FlashAddr=0x00000000
[18:10:02.103]    __FlashLen=0x00000000
[18:10:02.104]    __FlashArg=0x00000000
[18:10:02.104]    __FlashOp=0x00000000
[18:10:02.104]    __Result=0x00000000
[18:10:02.104]  </debugvars>
[18:10:02.104]  
[18:10:02.104]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:10:02.104]    <block atomic="false" info="">
[18:10:02.104]      __var SW_DP_ABORT       = 0x0;
[18:10:02.104]        // -> [SW_DP_ABORT <= 0x00000000]
[18:10:02.104]      __var DP_CTRL_STAT      = 0x4;
[18:10:02.105]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:10:02.105]      __var DP_SELECT         = 0x8;
[18:10:02.105]        // -> [DP_SELECT <= 0x00000008]
[18:10:02.105]      __var powered_down      = 0;
[18:10:02.105]        // -> [powered_down <= 0x00000000]
[18:10:02.106]      WriteDP(DP_SELECT, 0x00000000);
[18:10:02.107]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:10:02.107]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:10:02.109]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:10:02.110]        // -> [powered_down <= 0x00000001]
[18:10:02.110]    </block>
[18:10:02.110]    <control if="powered_down" while="" timeout="0" info="">
[18:10:02.110]      // if-block "powered_down"
[18:10:02.110]        // =>  TRUE
[18:10:02.110]      <block atomic="false" info="">
[18:10:02.110]        Message(0, "Debug/System power-up request sent");
[18:10:02.111]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:10:02.113]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:10:02.113]      </block>
[18:10:02.113]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:10:02.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:10:02.115]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:10:02.115]        // while-condition  =>  FALSE
[18:10:02.115]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:10:02.115]      </control>
[18:10:02.115]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:10:02.115]        // if-block "(__protocol & 0xFFFF) == 1"
[18:10:02.115]          // =>  FALSE
[18:10:02.115]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:10:02.115]      </control>
[18:10:02.115]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:10:02.115]        // if-block "(__protocol & 0xFFFF) == 2"
[18:10:02.115]          // =>  TRUE
[18:10:02.115]        <block atomic="false" info="">
[18:10:02.115]          Message(0, "executing SWD power up");
[18:10:02.118]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:10:02.120]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:10:02.120]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:10:02.123]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:10:02.123]        </block>
[18:10:02.123]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:10:02.123]      </control>
[18:10:02.123]      // end if-block "powered_down"
[18:10:02.123]    </control>
[18:10:02.123]    <block atomic="false" info="">
[18:10:02.123]      __var DEBUG_PORT_VAL    = 0;
[18:10:02.123]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:10:02.123]      __var ACCESS_POINT_VAL  = 0;
[18:10:02.123]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:10:02.123]      __ap = 1; 
[18:10:02.123]        // -> [__ap <= 0x00000001]
[18:10:02.123]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:10:02.132]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:10:02.132]      __ap = 4;
[18:10:02.132]        // -> [__ap <= 0x00000004]
[18:10:02.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:10:02.135]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:10:02.135]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:10:02.135]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:10:02.136]    </block>
[18:10:02.136]    <block atomic="false" info="">
[18:10:02.136]      __var nReset = 0x80;
[18:10:02.136]        // -> [nReset <= 0x00000080]
[18:10:02.136]      __var canReadPins = 0;
[18:10:02.137]        // -> [canReadPins <= 0x00000000]
[18:10:02.137]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:10:02.138]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:10:02.138]        // -> [canReadPins <= 0x00000001]
[18:10:02.138]    </block>
[18:10:02.138]    <control if="" while="1" timeout="200" info="">
[18:10:02.138]      // while "1"  (timeout="200")
[18:10:02.138]      // while-condition  =>  TRUE
[18:10:02.138]      // while "1"  (timeout="200")
[18:10:02.138]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.139]      // while "1"  (timeout="200")
[18:10:02.139]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.140]      // while "1"  (timeout="200")
[18:10:02.140]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.141]      // while "1"  (timeout="200")
[18:10:02.141]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.142]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.142]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.142]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.142]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.142]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.142]      // while-condition  =>  TRUE
[18:10:02.142]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.143]      // while "1"  (timeout="200")
[18:10:02.143]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.144]      // while-condition  =>  TRUE
[18:10:02.144]      // while "1"  (timeout="200")
[18:10:02.145]      // while-condition  =>  TRUE
[18:10:02.145]      // while "1"  (timeout="200")
[18:10:02.145]      // while  =>  TIMEOUT
[18:10:02.145]      // end while "1"
[18:10:02.145]    </control>
[18:10:02.145]    <control if="canReadPins" while="" timeout="0" info="">
[18:10:02.145]      // if-block "canReadPins"
[18:10:02.145]        // =>  TRUE
[18:10:02.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:10:02.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:10:02.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:10:02.147]        // while-condition  =>  FALSE
[18:10:02.147]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:10:02.147]      </control>
[18:10:02.147]      // end if-block "canReadPins"
[18:10:02.147]    </control>
[18:10:02.147]    <control if="!canReadPins" while="" timeout="0" info="">
[18:10:02.147]      // if-block "!canReadPins"
[18:10:02.147]        // =>  FALSE
[18:10:02.147]      // skip if-block "!canReadPins"
[18:10:02.147]    </control>
[18:10:02.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:10:02.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:10:02.147]        // =>  TRUE
[18:10:02.147]      <block atomic="false" info="">
[18:10:02.147]        WriteAP(0x00, 0x190008);
[18:10:02.149]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:10:02.149]        WriteAP(0xF0, 0x01);
[18:10:02.153]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:10:02.153]      </block>
[18:10:02.153]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:10:02.153]    </control>
[18:10:02.154]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:10:02.154]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:10:02.154]        // =>  FALSE
[18:10:02.154]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:10:02.154]    </control>
[18:10:02.154]    <block atomic="false" info="">
[18:10:02.154]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:10:02.160]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:10:02.160]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:10:02.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:10:02.162]      __ap = 0; //lets make sure we reset the access point selection
[18:10:02.162]        // -> [__ap <= 0x00000000]
[18:10:02.162]    </block>
[18:10:02.162]  </sequence>
[18:10:02.162]  
[18:10:02.183]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:10:02.183]  
[18:10:02.184]  <debugvars>
[18:10:02.184]    // Pre-defined
[18:10:02.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:10:02.184]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:10:02.184]    __dp=0x00000000
[18:10:02.185]    __ap=0x00000000
[18:10:02.185]    __traceout=0x00000000      (Trace Disabled)
[18:10:02.185]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:10:02.185]    __FlashAddr=0x00000000
[18:10:02.186]    __FlashLen=0x00000000
[18:10:02.186]    __FlashArg=0x00000000
[18:10:02.186]    __FlashOp=0x00000000
[18:10:02.187]    __Result=0x00000000
[18:10:02.187]  </debugvars>
[18:10:02.187]  
[18:10:02.187]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:10:02.187]    <block atomic="false" info="">
[18:10:02.187]      __var deviceID = 0;
[18:10:02.187]        // -> [deviceID <= 0x00000000]
[18:10:02.188]      __var version = 0;
[18:10:02.188]        // -> [version <= 0x00000000]
[18:10:02.188]      __var partNum = 0;
[18:10:02.188]        // -> [partNum <= 0x00000000]
[18:10:02.188]      __var manuf = 0;
[18:10:02.188]        // -> [manuf <= 0x00000000]
[18:10:02.188]      __var isMSPM0G1X0X_G3X0X = 0;
[18:10:02.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:10:02.188]      __var isProduction = 0;
[18:10:02.188]        // -> [isProduction <= 0x00000000]
[18:10:02.189]      __var continueId = 0;
[18:10:02.189]        // -> [continueId <= 0x00000000]
[18:10:02.189]      deviceID =   Read32(0x41C40004);
[18:10:02.194]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:10:02.194]        // -> [deviceID <= 0x2BB8802F]
[18:10:02.194]      version = deviceID >> 28;
[18:10:02.194]        // -> [version <= 0x00000002]
[18:10:02.195]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:10:02.195]        // -> [partNum <= 0x0000BB88]
[18:10:02.195]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:10:02.195]        // -> [manuf <= 0x00000017]
[18:10:02.195]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:10:02.195]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:10:02.196]      isProduction = (version > 0);
[18:10:02.196]        // -> [isProduction <= 0x00000001]
[18:10:02.196]    </block>
[18:10:02.196]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:10:02.196]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:10:02.197]        // =>  FALSE
[18:10:02.197]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:10:02.197]    </control>
[18:10:02.197]    <control if="continueId == 4" while="" timeout="0" info="">
[18:10:02.197]      // if-block "continueId == 4"
[18:10:02.197]        // =>  FALSE
[18:10:02.197]      // skip if-block "continueId == 4"
[18:10:02.197]    </control>
[18:10:02.198]    <control if="!isProduction" while="" timeout="0" info="">
[18:10:02.198]      // if-block "!isProduction"
[18:10:02.198]        // =>  FALSE
[18:10:02.198]      // skip if-block "!isProduction"
[18:10:02.198]    </control>
[18:10:02.198]  </sequence>
[18:10:02.198]  
[18:10:15.006]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:10:15.006]  
[18:10:15.006]  <debugvars>
[18:10:15.006]    // Pre-defined
[18:10:15.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:10:15.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:10:15.006]    __dp=0x00000000
[18:10:15.007]    __ap=0x00000000
[18:10:15.007]    __traceout=0x00000000      (Trace Disabled)
[18:10:15.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:10:15.007]    __FlashAddr=0x00000000
[18:10:15.007]    __FlashLen=0x00000000
[18:10:15.007]    __FlashArg=0x00000000
[18:10:15.007]    __FlashOp=0x00000000
[18:10:15.007]    __Result=0x00000000
[18:10:15.007]  </debugvars>
[18:10:15.007]  
[18:10:15.007]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:10:15.007]    <block atomic="false" info="">
[18:10:15.007]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:10:15.007]        // -> [isSWJ <= 0x00000001]
[18:10:15.007]      __var hasDormant = __protocol & 0x00020000;
[18:10:15.007]        // -> [hasDormant <= 0x00000000]
[18:10:15.007]      __var protType   = __protocol & 0x0000FFFF;
[18:10:15.007]        // -> [protType <= 0x00000002]
[18:10:15.007]    </block>
[18:10:15.008]    <control if="protType == 1" while="" timeout="0" info="">
[18:10:15.008]      // if-block "protType == 1"
[18:10:15.008]        // =>  FALSE
[18:10:15.008]      // skip if-block "protType == 1"
[18:10:15.008]    </control>
[18:10:15.008]    <control if="protType == 2" while="" timeout="0" info="">
[18:10:15.008]      // if-block "protType == 2"
[18:10:15.008]        // =>  TRUE
[18:10:15.008]      <control if="isSWJ" while="" timeout="0" info="">
[18:10:15.008]        // if-block "isSWJ"
[18:10:15.008]          // =>  TRUE
[18:10:15.008]        <control if="hasDormant" while="" timeout="0" info="">
[18:10:15.008]          // if-block "hasDormant"
[18:10:15.008]            // =>  FALSE
[18:10:15.008]          // skip if-block "hasDormant"
[18:10:15.008]        </control>
[18:10:15.008]        <control if="!hasDormant" while="" timeout="0" info="">
[18:10:15.008]          // if-block "!hasDormant"
[18:10:15.009]            // =>  TRUE
[18:10:15.009]          <block atomic="false" info="">
[18:10:15.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:10:15.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:10:15.010]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:10:15.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:10:15.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:10:15.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:10:15.014]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:10:15.015]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:10:15.015]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:10:15.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:10:15.016]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:10:15.017]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:10:15.017]          </block>
[18:10:15.017]          // end if-block "!hasDormant"
[18:10:15.018]        </control>
[18:10:15.018]        // end if-block "isSWJ"
[18:10:15.018]      </control>
[18:10:15.018]      <control if="!isSWJ" while="" timeout="0" info="">
[18:10:15.018]        // if-block "!isSWJ"
[18:10:15.018]          // =>  FALSE
[18:10:15.018]        // skip if-block "!isSWJ"
[18:10:15.018]      </control>
[18:10:15.018]      <block atomic="false" info="">
[18:10:15.018]        ReadDP(0x0);
[18:10:15.019]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:10:15.020]      </block>
[18:10:15.020]      // end if-block "protType == 2"
[18:10:15.020]    </control>
[18:10:15.020]  </sequence>
[18:10:15.020]  
[18:10:15.023]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:10:15.023]  
[18:10:15.023]  <debugvars>
[18:10:15.024]    // Pre-defined
[18:10:15.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:10:15.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:10:15.024]    __dp=0x00000000
[18:10:15.024]    __ap=0x00000000
[18:10:15.024]    __traceout=0x00000000      (Trace Disabled)
[18:10:15.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:10:15.024]    __FlashAddr=0x00000000
[18:10:15.024]    __FlashLen=0x00000000
[18:10:15.024]    __FlashArg=0x00000000
[18:10:15.024]    __FlashOp=0x00000000
[18:10:15.024]    __Result=0x00000000
[18:10:15.024]  </debugvars>
[18:10:15.024]  
[18:10:15.025]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:10:15.025]    <block atomic="false" info="">
[18:10:15.025]      __var SW_DP_ABORT       = 0x0;
[18:10:15.025]        // -> [SW_DP_ABORT <= 0x00000000]
[18:10:15.025]      __var DP_CTRL_STAT      = 0x4;
[18:10:15.025]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:10:15.025]      __var DP_SELECT         = 0x8;
[18:10:15.025]        // -> [DP_SELECT <= 0x00000008]
[18:10:15.025]      __var powered_down      = 0;
[18:10:15.025]        // -> [powered_down <= 0x00000000]
[18:10:15.025]      WriteDP(DP_SELECT, 0x00000000);
[18:10:15.026]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:10:15.026]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:10:15.027]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:10:15.028]        // -> [powered_down <= 0x00000001]
[18:10:15.028]    </block>
[18:10:15.028]    <control if="powered_down" while="" timeout="0" info="">
[18:10:15.028]      // if-block "powered_down"
[18:10:15.028]        // =>  TRUE
[18:10:15.028]      <block atomic="false" info="">
[18:10:15.028]        Message(0, "Debug/System power-up request sent");
[18:10:15.028]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:10:15.030]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:10:15.030]      </block>
[18:10:15.030]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:10:15.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:10:15.033]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:10:15.033]        // while-condition  =>  FALSE
[18:10:15.033]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:10:15.033]      </control>
[18:10:15.033]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:10:15.033]        // if-block "(__protocol & 0xFFFF) == 1"
[18:10:15.033]          // =>  FALSE
[18:10:15.033]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:10:15.033]      </control>
[18:10:15.033]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:10:15.033]        // if-block "(__protocol & 0xFFFF) == 2"
[18:10:15.033]          // =>  TRUE
[18:10:15.033]        <block atomic="false" info="">
[18:10:15.034]          Message(0, "executing SWD power up");
[18:10:15.035]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:10:15.037]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:10:15.037]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:10:15.038]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:10:15.039]        </block>
[18:10:15.039]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:10:15.039]      </control>
[18:10:15.039]      // end if-block "powered_down"
[18:10:15.039]    </control>
[18:10:15.039]    <block atomic="false" info="">
[18:10:15.039]      __var DEBUG_PORT_VAL    = 0;
[18:10:15.039]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:10:15.039]      __var ACCESS_POINT_VAL  = 0;
[18:10:15.039]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:10:15.039]      __ap = 1; 
[18:10:15.039]        // -> [__ap <= 0x00000001]
[18:10:15.040]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:10:15.043]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:10:15.043]      __ap = 4;
[18:10:15.043]        // -> [__ap <= 0x00000004]
[18:10:15.043]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:10:15.046]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:10:15.046]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:10:15.046]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:10:15.048]    </block>
[18:10:15.048]    <block atomic="false" info="">
[18:10:15.048]      __var nReset = 0x80;
[18:10:15.048]        // -> [nReset <= 0x00000080]
[18:10:15.048]      __var canReadPins = 0;
[18:10:15.048]        // -> [canReadPins <= 0x00000000]
[18:10:15.048]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:10:15.050]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:10:15.050]        // -> [canReadPins <= 0x00000001]
[18:10:15.050]    </block>
[18:10:15.050]    <control if="" while="1" timeout="200" info="">
[18:10:15.050]      // while "1"  (timeout="200")
[18:10:15.050]      // while-condition  =>  TRUE
[18:10:15.050]      // while "1"  (timeout="200")
[18:10:15.050]      // while-condition  =>  TRUE
[18:10:15.050]      // while "1"  (timeout="200")
[18:10:15.050]      // while-condition  =>  TRUE
[18:10:15.051]      // while "1"  (timeout="200")
[18:10:15.051]      // while  =>  TIMEOUT
[18:10:15.051]      // end while "1"
[18:10:15.051]    </control>
[18:10:15.051]    <control if="canReadPins" while="" timeout="0" info="">
[18:10:15.051]      // if-block "canReadPins"
[18:10:15.051]        // =>  TRUE
[18:10:15.051]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:10:15.051]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:10:15.053]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:10:15.054]        // while-condition  =>  FALSE
[18:10:15.054]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:10:15.054]      </control>
[18:10:15.054]      // end if-block "canReadPins"
[18:10:15.054]    </control>
[18:10:15.054]    <control if="!canReadPins" while="" timeout="0" info="">
[18:10:15.054]      // if-block "!canReadPins"
[18:10:15.054]        // =>  FALSE
[18:10:15.054]      // skip if-block "!canReadPins"
[18:10:15.054]    </control>
[18:10:15.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:10:15.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:10:15.054]        // =>  TRUE
[18:10:15.054]      <block atomic="false" info="">
[18:10:15.055]        WriteAP(0x00, 0x190008);
[18:10:15.056]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:10:15.056]        WriteAP(0xF0, 0x01);
[18:10:15.065]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:10:15.065]      </block>
[18:10:15.065]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:10:15.065]    </control>
[18:10:15.065]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:10:15.065]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:10:15.065]        // =>  FALSE
[18:10:15.065]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:10:15.065]    </control>
[18:10:15.065]    <block atomic="false" info="">
[18:10:15.065]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:10:15.068]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:10:15.068]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:10:15.068]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:10:15.070]      __ap = 0; //lets make sure we reset the access point selection
[18:10:15.070]        // -> [__ap <= 0x00000000]
[18:10:15.070]    </block>
[18:10:15.070]  </sequence>
[18:10:15.070]  
[18:10:15.090]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:10:15.090]  
[18:10:15.090]  <debugvars>
[18:10:15.090]    // Pre-defined
[18:10:15.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:10:15.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:10:15.090]    __dp=0x00000000
[18:10:15.090]    __ap=0x00000000
[18:10:15.091]    __traceout=0x00000000      (Trace Disabled)
[18:10:15.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:10:15.091]    __FlashAddr=0x00000000
[18:10:15.091]    __FlashLen=0x00000000
[18:10:15.091]    __FlashArg=0x00000000
[18:10:15.091]    __FlashOp=0x00000000
[18:10:15.091]    __Result=0x00000000
[18:10:15.091]  </debugvars>
[18:10:15.091]  
[18:10:15.091]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:10:15.091]    <block atomic="false" info="">
[18:10:15.091]      __var deviceID = 0;
[18:10:15.091]        // -> [deviceID <= 0x00000000]
[18:10:15.091]      __var version = 0;
[18:10:15.091]        // -> [version <= 0x00000000]
[18:10:15.091]      __var partNum = 0;
[18:10:15.091]        // -> [partNum <= 0x00000000]
[18:10:15.091]      __var manuf = 0;
[18:10:15.091]        // -> [manuf <= 0x00000000]
[18:10:15.091]      __var isMSPM0G1X0X_G3X0X = 0;
[18:10:15.092]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:10:15.092]      __var isProduction = 0;
[18:10:15.092]        // -> [isProduction <= 0x00000000]
[18:10:15.092]      __var continueId = 0;
[18:10:15.092]        // -> [continueId <= 0x00000000]
[18:10:15.092]      deviceID =   Read32(0x41C40004);
[18:10:15.100]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:10:15.100]        // -> [deviceID <= 0x2BB8802F]
[18:10:15.101]      version = deviceID >> 28;
[18:10:15.101]        // -> [version <= 0x00000002]
[18:10:15.101]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:10:15.101]        // -> [partNum <= 0x0000BB88]
[18:10:15.101]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:10:15.101]        // -> [manuf <= 0x00000017]
[18:10:15.101]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:10:15.101]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:10:15.101]      isProduction = (version > 0);
[18:10:15.101]        // -> [isProduction <= 0x00000001]
[18:10:15.101]    </block>
[18:10:15.101]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:10:15.101]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:10:15.101]        // =>  FALSE
[18:10:15.101]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:10:15.101]    </control>
[18:10:15.101]    <control if="continueId == 4" while="" timeout="0" info="">
[18:10:15.101]      // if-block "continueId == 4"
[18:10:15.101]        // =>  FALSE
[18:10:15.101]      // skip if-block "continueId == 4"
[18:10:15.101]    </control>
[18:10:15.102]    <control if="!isProduction" while="" timeout="0" info="">
[18:10:15.102]      // if-block "!isProduction"
[18:10:15.102]        // =>  FALSE
[18:10:15.102]      // skip if-block "!isProduction"
[18:10:15.102]    </control>
[18:10:15.102]  </sequence>
[18:10:15.102]  
[18:11:29.137]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:11:29.137]  
[18:11:29.138]  <debugvars>
[18:11:29.138]    // Pre-defined
[18:11:29.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:11:29.138]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:11:29.138]    __dp=0x00000000
[18:11:29.138]    __ap=0x00000000
[18:11:29.138]    __traceout=0x00000000      (Trace Disabled)
[18:11:29.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:11:29.138]    __FlashAddr=0x00000000
[18:11:29.138]    __FlashLen=0x00000000
[18:11:29.138]    __FlashArg=0x00000000
[18:11:29.138]    __FlashOp=0x00000000
[18:11:29.138]    __Result=0x00000000
[18:11:29.138]  </debugvars>
[18:11:29.138]  
[18:11:29.138]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:11:29.139]    <block atomic="false" info="">
[18:11:29.139]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:11:29.139]        // -> [isSWJ <= 0x00000001]
[18:11:29.139]      __var hasDormant = __protocol & 0x00020000;
[18:11:29.139]        // -> [hasDormant <= 0x00000000]
[18:11:29.139]      __var protType   = __protocol & 0x0000FFFF;
[18:11:29.139]        // -> [protType <= 0x00000002]
[18:11:29.139]    </block>
[18:11:29.139]    <control if="protType == 1" while="" timeout="0" info="">
[18:11:29.139]      // if-block "protType == 1"
[18:11:29.139]        // =>  FALSE
[18:11:29.139]      // skip if-block "protType == 1"
[18:11:29.139]    </control>
[18:11:29.140]    <control if="protType == 2" while="" timeout="0" info="">
[18:11:29.140]      // if-block "protType == 2"
[18:11:29.140]        // =>  TRUE
[18:11:29.140]      <control if="isSWJ" while="" timeout="0" info="">
[18:11:29.140]        // if-block "isSWJ"
[18:11:29.140]          // =>  TRUE
[18:11:29.140]        <control if="hasDormant" while="" timeout="0" info="">
[18:11:29.140]          // if-block "hasDormant"
[18:11:29.140]            // =>  FALSE
[18:11:29.140]          // skip if-block "hasDormant"
[18:11:29.140]        </control>
[18:11:29.140]        <control if="!hasDormant" while="" timeout="0" info="">
[18:11:29.140]          // if-block "!hasDormant"
[18:11:29.140]            // =>  TRUE
[18:11:29.140]          <block atomic="false" info="">
[18:11:29.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:11:29.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:11:29.145]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:11:29.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:11:29.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:11:29.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:11:29.148]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:11:29.150]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:11:29.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:11:29.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:11:29.152]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:11:29.153]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:11:29.153]          </block>
[18:11:29.153]          // end if-block "!hasDormant"
[18:11:29.153]        </control>
[18:11:29.153]        // end if-block "isSWJ"
[18:11:29.153]      </control>
[18:11:29.153]      <control if="!isSWJ" while="" timeout="0" info="">
[18:11:29.154]        // if-block "!isSWJ"
[18:11:29.154]          // =>  FALSE
[18:11:29.154]        // skip if-block "!isSWJ"
[18:11:29.154]      </control>
[18:11:29.154]      <block atomic="false" info="">
[18:11:29.154]        ReadDP(0x0);
[18:11:29.159]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:11:29.160]      </block>
[18:11:29.160]      // end if-block "protType == 2"
[18:11:29.160]    </control>
[18:11:29.160]  </sequence>
[18:11:29.160]  
[18:11:29.163]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:11:29.163]  
[18:11:29.163]  <debugvars>
[18:11:29.163]    // Pre-defined
[18:11:29.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:11:29.163]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:11:29.163]    __dp=0x00000000
[18:11:29.163]    __ap=0x00000000
[18:11:29.163]    __traceout=0x00000000      (Trace Disabled)
[18:11:29.163]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:11:29.163]    __FlashAddr=0x00000000
[18:11:29.163]    __FlashLen=0x00000000
[18:11:29.163]    __FlashArg=0x00000000
[18:11:29.163]    __FlashOp=0x00000000
[18:11:29.163]    __Result=0x00000000
[18:11:29.163]  </debugvars>
[18:11:29.164]  
[18:11:29.164]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:11:29.164]    <block atomic="false" info="">
[18:11:29.164]      __var SW_DP_ABORT       = 0x0;
[18:11:29.164]        // -> [SW_DP_ABORT <= 0x00000000]
[18:11:29.164]      __var DP_CTRL_STAT      = 0x4;
[18:11:29.164]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:11:29.164]      __var DP_SELECT         = 0x8;
[18:11:29.164]        // -> [DP_SELECT <= 0x00000008]
[18:11:29.164]      __var powered_down      = 0;
[18:11:29.164]        // -> [powered_down <= 0x00000000]
[18:11:29.164]      WriteDP(DP_SELECT, 0x00000000);
[18:11:29.166]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:11:29.166]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:11:29.168]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:11:29.168]        // -> [powered_down <= 0x00000001]
[18:11:29.168]    </block>
[18:11:29.168]    <control if="powered_down" while="" timeout="0" info="">
[18:11:29.168]      // if-block "powered_down"
[18:11:29.168]        // =>  TRUE
[18:11:29.168]      <block atomic="false" info="">
[18:11:29.168]        Message(0, "Debug/System power-up request sent");
[18:11:29.170]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:11:29.172]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:11:29.172]      </block>
[18:11:29.172]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:11:29.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:11:29.174]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:11:29.174]        // while-condition  =>  FALSE
[18:11:29.174]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:11:29.174]      </control>
[18:11:29.174]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:11:29.174]        // if-block "(__protocol & 0xFFFF) == 1"
[18:11:29.174]          // =>  FALSE
[18:11:29.174]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:11:29.174]      </control>
[18:11:29.174]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:11:29.174]        // if-block "(__protocol & 0xFFFF) == 2"
[18:11:29.174]          // =>  TRUE
[18:11:29.174]        <block atomic="false" info="">
[18:11:29.174]          Message(0, "executing SWD power up");
[18:11:29.176]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:11:29.181]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:11:29.181]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:11:29.185]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:11:29.185]        </block>
[18:11:29.185]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:11:29.185]      </control>
[18:11:29.185]      // end if-block "powered_down"
[18:11:29.185]    </control>
[18:11:29.185]    <block atomic="false" info="">
[18:11:29.185]      __var DEBUG_PORT_VAL    = 0;
[18:11:29.185]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:11:29.185]      __var ACCESS_POINT_VAL  = 0;
[18:11:29.185]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:11:29.185]      __ap = 1; 
[18:11:29.185]        // -> [__ap <= 0x00000001]
[18:11:29.185]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:11:29.189]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:11:29.189]      __ap = 4;
[18:11:29.189]        // -> [__ap <= 0x00000004]
[18:11:29.189]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:11:29.193]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:11:29.193]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:11:29.193]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:11:29.194]    </block>
[18:11:29.194]    <block atomic="false" info="">
[18:11:29.194]      __var nReset = 0x80;
[18:11:29.195]        // -> [nReset <= 0x00000080]
[18:11:29.195]      __var canReadPins = 0;
[18:11:29.195]        // -> [canReadPins <= 0x00000000]
[18:11:29.195]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:11:29.196]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:11:29.196]        // -> [canReadPins <= 0x00000001]
[18:11:29.196]    </block>
[18:11:29.196]    <control if="" while="1" timeout="200" info="">
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.197]      // while-condition  =>  TRUE
[18:11:29.197]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.198]      // while-condition  =>  TRUE
[18:11:29.198]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.199]      // while "1"  (timeout="200")
[18:11:29.199]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.200]      // while-condition  =>  TRUE
[18:11:29.200]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.201]      // while-condition  =>  TRUE
[18:11:29.201]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.202]      // while-condition  =>  TRUE
[18:11:29.202]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.203]      // while-condition  =>  TRUE
[18:11:29.203]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.204]      // while-condition  =>  TRUE
[18:11:29.204]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.205]      // while-condition  =>  TRUE
[18:11:29.205]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.206]      // while "1"  (timeout="200")
[18:11:29.206]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.207]      // while-condition  =>  TRUE
[18:11:29.207]      // while "1"  (timeout="200")
[18:11:29.208]      // while-condition  =>  TRUE
[18:11:29.208]      // while "1"  (timeout="200")
[18:11:29.208]      // while  =>  TIMEOUT
[18:11:29.208]      // end while "1"
[18:11:29.208]    </control>
[18:11:29.208]    <control if="canReadPins" while="" timeout="0" info="">
[18:11:29.208]      // if-block "canReadPins"
[18:11:29.208]        // =>  TRUE
[18:11:29.208]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:11:29.208]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:11:29.209]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:11:29.209]        // while-condition  =>  FALSE
[18:11:29.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:11:29.210]      </control>
[18:11:29.210]      // end if-block "canReadPins"
[18:11:29.210]    </control>
[18:11:29.210]    <control if="!canReadPins" while="" timeout="0" info="">
[18:11:29.210]      // if-block "!canReadPins"
[18:11:29.210]        // =>  FALSE
[18:11:29.210]      // skip if-block "!canReadPins"
[18:11:29.210]    </control>
[18:11:29.210]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:11:29.210]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:11:29.210]        // =>  TRUE
[18:11:29.210]      <block atomic="false" info="">
[18:11:29.210]        WriteAP(0x00, 0x190008);
[18:11:29.212]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:11:29.212]        WriteAP(0xF0, 0x01);
[18:11:29.218]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:11:29.218]      </block>
[18:11:29.219]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:11:29.219]    </control>
[18:11:29.219]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:11:29.219]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:11:29.219]        // =>  FALSE
[18:11:29.219]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:11:29.219]    </control>
[18:11:29.219]    <block atomic="false" info="">
[18:11:29.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:11:29.223]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:11:29.223]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:11:29.223]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:11:29.224]      __ap = 0; //lets make sure we reset the access point selection
[18:11:29.224]        // -> [__ap <= 0x00000000]
[18:11:29.224]    </block>
[18:11:29.225]  </sequence>
[18:11:29.225]  
[18:11:29.241]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:11:29.241]  
[18:11:29.241]  <debugvars>
[18:11:29.241]    // Pre-defined
[18:11:29.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:11:29.241]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:11:29.242]    __dp=0x00000000
[18:11:29.242]    __ap=0x00000000
[18:11:29.242]    __traceout=0x00000000      (Trace Disabled)
[18:11:29.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:11:29.242]    __FlashAddr=0x00000000
[18:11:29.242]    __FlashLen=0x00000000
[18:11:29.242]    __FlashArg=0x00000000
[18:11:29.242]    __FlashOp=0x00000000
[18:11:29.242]    __Result=0x00000000
[18:11:29.242]  </debugvars>
[18:11:29.242]  
[18:11:29.242]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:11:29.242]    <block atomic="false" info="">
[18:11:29.242]      __var deviceID = 0;
[18:11:29.242]        // -> [deviceID <= 0x00000000]
[18:11:29.242]      __var version = 0;
[18:11:29.242]        // -> [version <= 0x00000000]
[18:11:29.242]      __var partNum = 0;
[18:11:29.242]        // -> [partNum <= 0x00000000]
[18:11:29.242]      __var manuf = 0;
[18:11:29.242]        // -> [manuf <= 0x00000000]
[18:11:29.242]      __var isMSPM0G1X0X_G3X0X = 0;
[18:11:29.243]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:11:29.243]      __var isProduction = 0;
[18:11:29.243]        // -> [isProduction <= 0x00000000]
[18:11:29.243]      __var continueId = 0;
[18:11:29.243]        // -> [continueId <= 0x00000000]
[18:11:29.243]      deviceID =   Read32(0x41C40004);
[18:11:29.248]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:11:29.248]        // -> [deviceID <= 0x2BB8802F]
[18:11:29.249]      version = deviceID >> 28;
[18:11:29.249]        // -> [version <= 0x00000002]
[18:11:29.249]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:11:29.249]        // -> [partNum <= 0x0000BB88]
[18:11:29.249]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:11:29.249]        // -> [manuf <= 0x00000017]
[18:11:29.249]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:11:29.249]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:11:29.249]      isProduction = (version > 0);
[18:11:29.249]        // -> [isProduction <= 0x00000001]
[18:11:29.249]    </block>
[18:11:29.249]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:11:29.249]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:11:29.249]        // =>  FALSE
[18:11:29.249]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:11:29.249]    </control>
[18:11:29.249]    <control if="continueId == 4" while="" timeout="0" info="">
[18:11:29.249]      // if-block "continueId == 4"
[18:11:29.249]        // =>  FALSE
[18:11:29.249]      // skip if-block "continueId == 4"
[18:11:29.249]    </control>
[18:11:29.249]    <control if="!isProduction" while="" timeout="0" info="">
[18:11:29.250]      // if-block "!isProduction"
[18:11:29.250]        // =>  FALSE
[18:11:29.250]      // skip if-block "!isProduction"
[18:11:29.250]    </control>
[18:11:29.250]  </sequence>
[18:11:29.250]  
