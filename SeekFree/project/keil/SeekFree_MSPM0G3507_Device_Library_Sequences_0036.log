/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : F:\Code\2025_EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0036.log
 *  Created     : 18:21:35 (29/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : F:/keil/package/TexasInstruments/MSPM0G1X0X_G3X0X_DFP/1.3.1/TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[18:21:35.315]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:21:35.315]  
[18:21:35.317]  <debugvars>
[18:21:35.319]    // Pre-defined
[18:21:35.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:21:35.324]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:21:35.325]    __dp=0x00000000
[18:21:35.325]    __ap=0x00000000
[18:21:35.325]    __traceout=0x00000000      (Trace Disabled)
[18:21:35.325]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:21:35.325]    __FlashAddr=0x00000000
[18:21:35.325]    __FlashLen=0x00000000
[18:21:35.325]    __FlashArg=0x00000000
[18:21:35.325]    __FlashOp=0x00000000
[18:21:35.325]    __Result=0x00000000
[18:21:35.325]  </debugvars>
[18:21:35.326]  
[18:21:35.326]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:21:35.326]    <block atomic="false" info="">
[18:21:35.326]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:21:35.326]        // -> [isSWJ <= 0x00000001]
[18:21:35.326]      __var hasDormant = __protocol & 0x00020000;
[18:21:35.326]        // -> [hasDormant <= 0x00000000]
[18:21:35.326]      __var protType   = __protocol & 0x0000FFFF;
[18:21:35.327]        // -> [protType <= 0x00000002]
[18:21:35.327]    </block>
[18:21:35.327]    <control if="protType == 1" while="" timeout="0" info="">
[18:21:35.327]      // if-block "protType == 1"
[18:21:35.327]        // =>  FALSE
[18:21:35.327]      // skip if-block "protType == 1"
[18:21:35.327]    </control>
[18:21:35.328]    <control if="protType == 2" while="" timeout="0" info="">
[18:21:35.328]      // if-block "protType == 2"
[18:21:35.328]        // =>  TRUE
[18:21:35.328]      <control if="isSWJ" while="" timeout="0" info="">
[18:21:35.328]        // if-block "isSWJ"
[18:21:35.328]          // =>  TRUE
[18:21:35.328]        <control if="hasDormant" while="" timeout="0" info="">
[18:21:35.328]          // if-block "hasDormant"
[18:21:35.328]            // =>  FALSE
[18:21:35.328]          // skip if-block "hasDormant"
[18:21:35.328]        </control>
[18:21:35.328]        <control if="!hasDormant" while="" timeout="0" info="">
[18:21:35.328]          // if-block "!hasDormant"
[18:21:35.328]            // =>  TRUE
[18:21:35.328]          <block atomic="false" info="">
[18:21:35.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:21:35.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:21:35.332]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:21:35.334]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:21:35.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:21:35.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:21:35.335]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:21:35.337]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:21:35.337]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:21:35.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:21:35.339]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:21:35.340]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:21:35.340]          </block>
[18:21:35.340]          // end if-block "!hasDormant"
[18:21:35.340]        </control>
[18:21:35.340]        // end if-block "isSWJ"
[18:21:35.340]      </control>
[18:21:35.340]      <control if="!isSWJ" while="" timeout="0" info="">
[18:21:35.340]        // if-block "!isSWJ"
[18:21:35.340]          // =>  FALSE
[18:21:35.340]        // skip if-block "!isSWJ"
[18:21:35.341]      </control>
[18:21:35.341]      <block atomic="false" info="">
[18:21:35.341]        ReadDP(0x0);
[18:21:35.342]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:21:35.342]      </block>
[18:21:35.342]      // end if-block "protType == 2"
[18:21:35.342]    </control>
[18:21:35.342]  </sequence>
[18:21:35.342]  
[18:21:35.345]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:21:35.345]  
[18:21:35.345]  <debugvars>
[18:21:35.345]    // Pre-defined
[18:21:35.345]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:21:35.346]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:21:35.346]    __dp=0x00000000
[18:21:35.346]    __ap=0x00000000
[18:21:35.346]    __traceout=0x00000000      (Trace Disabled)
[18:21:35.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:21:35.346]    __FlashAddr=0x00000000
[18:21:35.346]    __FlashLen=0x00000000
[18:21:35.347]    __FlashArg=0x00000000
[18:21:35.347]    __FlashOp=0x00000000
[18:21:35.347]    __Result=0x00000000
[18:21:35.347]  </debugvars>
[18:21:35.347]  
[18:21:35.347]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:21:35.347]    <block atomic="false" info="">
[18:21:35.347]      __var SW_DP_ABORT       = 0x0;
[18:21:35.347]        // -> [SW_DP_ABORT <= 0x00000000]
[18:21:35.347]      __var DP_CTRL_STAT      = 0x4;
[18:21:35.347]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:21:35.347]      __var DP_SELECT         = 0x8;
[18:21:35.347]        // -> [DP_SELECT <= 0x00000008]
[18:21:35.347]      __var powered_down      = 0;
[18:21:35.348]        // -> [powered_down <= 0x00000000]
[18:21:35.348]      WriteDP(DP_SELECT, 0x00000000);
[18:21:35.349]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:21:35.349]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:21:35.351]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:21:35.351]        // -> [powered_down <= 0x00000001]
[18:21:35.351]    </block>
[18:21:35.352]    <control if="powered_down" while="" timeout="0" info="">
[18:21:35.352]      // if-block "powered_down"
[18:21:35.352]        // =>  TRUE
[18:21:35.352]      <block atomic="false" info="">
[18:21:35.352]        Message(0, "Debug/System power-up request sent");
[18:21:35.359]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:21:35.361]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:21:35.361]      </block>
[18:21:35.361]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:21:35.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:21:35.363]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:21:35.363]        // while-condition  =>  FALSE
[18:21:35.363]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:21:35.363]      </control>
[18:21:35.363]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:21:35.363]        // if-block "(__protocol & 0xFFFF) == 1"
[18:21:35.363]          // =>  FALSE
[18:21:35.363]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:21:35.363]      </control>
[18:21:35.363]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:21:35.363]        // if-block "(__protocol & 0xFFFF) == 2"
[18:21:35.363]          // =>  TRUE
[18:21:35.363]        <block atomic="false" info="">
[18:21:35.363]          Message(0, "executing SWD power up");
[18:21:35.365]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:21:35.366]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:21:35.367]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:21:35.369]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:21:35.369]        </block>
[18:21:35.369]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:21:35.369]      </control>
[18:21:35.369]      // end if-block "powered_down"
[18:21:35.369]    </control>
[18:21:35.369]    <block atomic="false" info="">
[18:21:35.369]      __var DEBUG_PORT_VAL    = 0;
[18:21:35.369]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:21:35.369]      __var ACCESS_POINT_VAL  = 0;
[18:21:35.369]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:21:35.369]      __ap = 1; 
[18:21:35.369]        // -> [__ap <= 0x00000001]
[18:21:35.369]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:21:35.373]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:21:35.373]      __ap = 4;
[18:21:35.373]        // -> [__ap <= 0x00000004]
[18:21:35.373]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:21:35.378]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:21:35.378]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:21:35.378]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:21:35.380]    </block>
[18:21:35.380]    <block atomic="false" info="">
[18:21:35.380]      __var nReset = 0x80;
[18:21:35.380]        // -> [nReset <= 0x00000080]
[18:21:35.380]      __var canReadPins = 0;
[18:21:35.381]        // -> [canReadPins <= 0x00000000]
[18:21:35.381]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:21:35.382]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:21:35.382]        // -> [canReadPins <= 0x00000001]
[18:21:35.382]    </block>
[18:21:35.383]    <control if="" while="1" timeout="200" info="">
[18:21:35.383]      // while "1"  (timeout="200")
[18:21:35.383]      // while-condition  =>  TRUE
[18:21:35.383]      // while "1"  (timeout="200")
[18:21:35.383]      // while-condition  =>  TRUE
[18:21:35.383]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.384]      // while "1"  (timeout="200")
[18:21:35.384]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.385]      // while-condition  =>  TRUE
[18:21:35.385]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.386]      // while-condition  =>  TRUE
[18:21:35.386]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.387]      // while "1"  (timeout="200")
[18:21:35.387]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.388]      // while "1"  (timeout="200")
[18:21:35.388]      // while-condition  =>  TRUE
[18:21:35.389]      // while "1"  (timeout="200")
[18:21:35.389]      // while-condition  =>  TRUE
[18:21:35.389]      // while "1"  (timeout="200")
[18:21:35.389]      // while-condition  =>  TRUE
[18:21:35.389]      // while "1"  (timeout="200")
[18:21:35.389]      // while-condition  =>  TRUE
[18:21:35.389]      // while "1"  (timeout="200")
[18:21:35.389]      // while-condition  =>  TRUE
[18:21:35.389]      // while "1"  (timeout="200")
[18:21:35.389]      // while-condition  =>  TRUE
[18:21:35.389]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.390]      // while-condition  =>  TRUE
[18:21:35.390]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.391]      // while "1"  (timeout="200")
[18:21:35.391]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.392]      // while "1"  (timeout="200")
[18:21:35.392]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.393]      // while-condition  =>  TRUE
[18:21:35.393]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.394]      // while "1"  (timeout="200")
[18:21:35.394]      // while-condition  =>  TRUE
[18:21:35.395]      // while "1"  (timeout="200")
[18:21:35.395]      // while  =>  TIMEOUT
[18:21:35.395]      // end while "1"
[18:21:35.395]    </control>
[18:21:35.395]    <control if="canReadPins" while="" timeout="0" info="">
[18:21:35.395]      // if-block "canReadPins"
[18:21:35.395]        // =>  TRUE
[18:21:35.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:21:35.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:21:35.398]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:21:35.398]        // while-condition  =>  FALSE
[18:21:35.398]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:21:35.398]      </control>
[18:21:35.398]      // end if-block "canReadPins"
[18:21:35.398]    </control>
[18:21:35.398]    <control if="!canReadPins" while="" timeout="0" info="">
[18:21:35.398]      // if-block "!canReadPins"
[18:21:35.398]        // =>  FALSE
[18:21:35.398]      // skip if-block "!canReadPins"
[18:21:35.398]    </control>
[18:21:35.398]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:21:35.398]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:21:35.398]        // =>  TRUE
[18:21:35.398]      <block atomic="false" info="">
[18:21:35.398]        WriteAP(0x00, 0x190008);
[18:21:35.400]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:21:35.400]        WriteAP(0xF0, 0x01);
[18:21:35.403]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:21:35.403]      </block>
[18:21:35.403]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:21:35.404]    </control>
[18:21:35.404]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:21:35.404]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:21:35.404]        // =>  FALSE
[18:21:35.404]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:21:35.404]    </control>
[18:21:35.404]    <block atomic="false" info="">
[18:21:35.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:21:35.408]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:21:35.408]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:21:35.408]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:21:35.410]      __ap = 0; //lets make sure we reset the access point selection
[18:21:35.410]        // -> [__ap <= 0x00000000]
[18:21:35.410]    </block>
[18:21:35.410]  </sequence>
[18:21:35.410]  
[18:21:35.429]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:21:35.429]  
[18:21:35.429]  <debugvars>
[18:21:35.429]    // Pre-defined
[18:21:35.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:21:35.430]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:21:35.430]    __dp=0x00000000
[18:21:35.430]    __ap=0x00000000
[18:21:35.430]    __traceout=0x00000000      (Trace Disabled)
[18:21:35.430]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:21:35.430]    __FlashAddr=0x00000000
[18:21:35.430]    __FlashLen=0x00000000
[18:21:35.431]    __FlashArg=0x00000000
[18:21:35.431]    __FlashOp=0x00000000
[18:21:35.431]    __Result=0x00000000
[18:21:35.431]  </debugvars>
[18:21:35.431]  
[18:21:35.431]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:21:35.431]    <block atomic="false" info="">
[18:21:35.431]      __var deviceID = 0;
[18:21:35.431]        // -> [deviceID <= 0x00000000]
[18:21:35.431]      __var version = 0;
[18:21:35.431]        // -> [version <= 0x00000000]
[18:21:35.431]      __var partNum = 0;
[18:21:35.432]        // -> [partNum <= 0x00000000]
[18:21:35.432]      __var manuf = 0;
[18:21:35.432]        // -> [manuf <= 0x00000000]
[18:21:35.432]      __var isMSPM0G1X0X_G3X0X = 0;
[18:21:35.432]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:21:35.432]      __var isProduction = 0;
[18:21:35.432]        // -> [isProduction <= 0x00000000]
[18:21:35.432]      __var continueId = 0;
[18:21:35.432]        // -> [continueId <= 0x00000000]
[18:21:35.432]      deviceID =   Read32(0x41C40004);
[18:21:35.438]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:21:35.438]        // -> [deviceID <= 0x2BB8802F]
[18:21:35.438]      version = deviceID >> 28;
[18:21:35.438]        // -> [version <= 0x00000002]
[18:21:35.438]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:21:35.438]        // -> [partNum <= 0x0000BB88]
[18:21:35.439]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:21:35.439]        // -> [manuf <= 0x00000017]
[18:21:35.439]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:21:35.439]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:21:35.439]      isProduction = (version > 0);
[18:21:35.439]        // -> [isProduction <= 0x00000001]
[18:21:35.439]    </block>
[18:21:35.439]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:21:35.439]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:21:35.439]        // =>  FALSE
[18:21:35.440]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:21:35.440]    </control>
[18:21:35.440]    <control if="continueId == 4" while="" timeout="0" info="">
[18:21:35.440]      // if-block "continueId == 4"
[18:21:35.440]        // =>  FALSE
[18:21:35.440]      // skip if-block "continueId == 4"
[18:21:35.440]    </control>
[18:21:35.440]    <control if="!isProduction" while="" timeout="0" info="">
[18:21:35.440]      // if-block "!isProduction"
[18:21:35.440]        // =>  FALSE
[18:21:35.440]      // skip if-block "!isProduction"
[18:21:35.440]    </control>
[18:21:35.440]  </sequence>
[18:21:35.440]  
[18:24:19.160]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:24:19.160]  
[18:24:19.166]  <debugvars>
[18:24:19.166]    // Pre-defined
[18:24:19.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:24:19.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:24:19.166]    __dp=0x00000000
[18:24:19.166]    __ap=0x00000000
[18:24:19.166]    __traceout=0x00000000      (Trace Disabled)
[18:24:19.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:24:19.166]    __FlashAddr=0x00000000
[18:24:19.166]    __FlashLen=0x00000000
[18:24:19.166]    __FlashArg=0x00000000
[18:24:19.167]    __FlashOp=0x00000000
[18:24:19.167]    __Result=0x00000000
[18:24:19.167]  </debugvars>
[18:24:19.167]  
[18:24:19.167]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:24:19.167]    <block atomic="false" info="">
[18:24:19.167]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:24:19.167]        // -> [isSWJ <= 0x00000001]
[18:24:19.167]      __var hasDormant = __protocol & 0x00020000;
[18:24:19.167]        // -> [hasDormant <= 0x00000000]
[18:24:19.167]      __var protType   = __protocol & 0x0000FFFF;
[18:24:19.167]        // -> [protType <= 0x00000002]
[18:24:19.167]    </block>
[18:24:19.167]    <control if="protType == 1" while="" timeout="0" info="">
[18:24:19.167]      // if-block "protType == 1"
[18:24:19.167]        // =>  FALSE
[18:24:19.167]      // skip if-block "protType == 1"
[18:24:19.167]    </control>
[18:24:19.167]    <control if="protType == 2" while="" timeout="0" info="">
[18:24:19.167]      // if-block "protType == 2"
[18:24:19.167]        // =>  TRUE
[18:24:19.167]      <control if="isSWJ" while="" timeout="0" info="">
[18:24:19.167]        // if-block "isSWJ"
[18:24:19.167]          // =>  TRUE
[18:24:19.167]        <control if="hasDormant" while="" timeout="0" info="">
[18:24:19.167]          // if-block "hasDormant"
[18:24:19.167]            // =>  FALSE
[18:24:19.168]          // skip if-block "hasDormant"
[18:24:19.168]        </control>
[18:24:19.168]        <control if="!hasDormant" while="" timeout="0" info="">
[18:24:19.168]          // if-block "!hasDormant"
[18:24:19.168]            // =>  TRUE
[18:24:19.168]          <block atomic="false" info="">
[18:24:19.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:24:19.169]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:24:19.169]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:24:19.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:24:19.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:24:19.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:24:19.172]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:24:19.173]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:24:19.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:24:19.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:24:19.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:24:19.177]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:24:19.177]          </block>
[18:24:19.177]          // end if-block "!hasDormant"
[18:24:19.177]        </control>
[18:24:19.177]        // end if-block "isSWJ"
[18:24:19.177]      </control>
[18:24:19.177]      <control if="!isSWJ" while="" timeout="0" info="">
[18:24:19.177]        // if-block "!isSWJ"
[18:24:19.177]          // =>  FALSE
[18:24:19.177]        // skip if-block "!isSWJ"
[18:24:19.178]      </control>
[18:24:19.178]      <block atomic="false" info="">
[18:24:19.178]        ReadDP(0x0);
[18:24:19.179]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:24:19.179]      </block>
[18:24:19.179]      // end if-block "protType == 2"
[18:24:19.179]    </control>
[18:24:19.179]  </sequence>
[18:24:19.179]  
[18:24:19.194]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:24:19.194]  
[18:24:19.194]  <debugvars>
[18:24:19.194]    // Pre-defined
[18:24:19.194]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:24:19.194]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:24:19.194]    __dp=0x00000000
[18:24:19.194]    __ap=0x00000000
[18:24:19.194]    __traceout=0x00000000      (Trace Disabled)
[18:24:19.194]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:24:19.194]    __FlashAddr=0x00000000
[18:24:19.194]    __FlashLen=0x00000000
[18:24:19.194]    __FlashArg=0x00000000
[18:24:19.194]    __FlashOp=0x00000000
[18:24:19.194]    __Result=0x00000000
[18:24:19.194]  </debugvars>
[18:24:19.194]  
[18:24:19.194]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:24:19.194]    <block atomic="false" info="">
[18:24:19.194]      __var SW_DP_ABORT       = 0x0;
[18:24:19.195]        // -> [SW_DP_ABORT <= 0x00000000]
[18:24:19.195]      __var DP_CTRL_STAT      = 0x4;
[18:24:19.195]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:24:19.195]      __var DP_SELECT         = 0x8;
[18:24:19.195]        // -> [DP_SELECT <= 0x00000008]
[18:24:19.195]      __var powered_down      = 0;
[18:24:19.195]        // -> [powered_down <= 0x00000000]
[18:24:19.195]      WriteDP(DP_SELECT, 0x00000000);
[18:24:19.196]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:24:19.197]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:24:19.198]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:24:19.199]        // -> [powered_down <= 0x00000001]
[18:24:19.199]    </block>
[18:24:19.199]    <control if="powered_down" while="" timeout="0" info="">
[18:24:19.199]      // if-block "powered_down"
[18:24:19.199]        // =>  TRUE
[18:24:19.199]      <block atomic="false" info="">
[18:24:19.199]        Message(0, "Debug/System power-up request sent");
[18:24:19.202]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:24:19.204]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:24:19.204]      </block>
[18:24:19.204]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:24:19.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:24:19.207]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:24:19.208]        // while-condition  =>  FALSE
[18:24:19.208]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:24:19.208]      </control>
[18:24:19.208]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:24:19.208]        // if-block "(__protocol & 0xFFFF) == 1"
[18:24:19.208]          // =>  FALSE
[18:24:19.208]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:24:19.208]      </control>
[18:24:19.208]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:24:19.208]        // if-block "(__protocol & 0xFFFF) == 2"
[18:24:19.208]          // =>  TRUE
[18:24:19.208]        <block atomic="false" info="">
[18:24:19.208]          Message(0, "executing SWD power up");
[18:24:19.209]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:24:19.211]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:24:19.211]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:24:19.213]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:24:19.213]        </block>
[18:24:19.213]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:24:19.213]      </control>
[18:24:19.213]      // end if-block "powered_down"
[18:24:19.213]    </control>
[18:24:19.213]    <block atomic="false" info="">
[18:24:19.213]      __var DEBUG_PORT_VAL    = 0;
[18:24:19.213]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:24:19.213]      __var ACCESS_POINT_VAL  = 0;
[18:24:19.213]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:24:19.213]      __ap = 1; 
[18:24:19.213]        // -> [__ap <= 0x00000001]
[18:24:19.213]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:24:19.217]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:24:19.217]      __ap = 4;
[18:24:19.217]        // -> [__ap <= 0x00000004]
[18:24:19.217]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:24:19.224]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:24:19.224]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:24:19.224]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:24:19.225]    </block>
[18:24:19.225]    <block atomic="false" info="">
[18:24:19.226]      __var nReset = 0x80;
[18:24:19.226]        // -> [nReset <= 0x00000080]
[18:24:19.226]      __var canReadPins = 0;
[18:24:19.226]        // -> [canReadPins <= 0x00000000]
[18:24:19.226]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:24:19.228]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:24:19.228]        // -> [canReadPins <= 0x00000001]
[18:24:19.228]    </block>
[18:24:19.228]    <control if="" while="1" timeout="200" info="">
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.228]      // while-condition  =>  TRUE
[18:24:19.228]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.229]      // while "1"  (timeout="200")
[18:24:19.229]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.230]      // while "1"  (timeout="200")
[18:24:19.230]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.231]      // while-condition  =>  TRUE
[18:24:19.231]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.232]      // while-condition  =>  TRUE
[18:24:19.232]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.233]      // while-condition  =>  TRUE
[18:24:19.233]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.234]      // while-condition  =>  TRUE
[18:24:19.234]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.235]      // while-condition  =>  TRUE
[18:24:19.235]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.236]      // while-condition  =>  TRUE
[18:24:19.236]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.237]      // while-condition  =>  TRUE
[18:24:19.237]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.238]      // while "1"  (timeout="200")
[18:24:19.238]      // while-condition  =>  TRUE
[18:24:19.239]      // while "1"  (timeout="200")
[18:24:19.239]      // while  =>  TIMEOUT
[18:24:19.239]      // end while "1"
[18:24:19.239]    </control>
[18:24:19.239]    <control if="canReadPins" while="" timeout="0" info="">
[18:24:19.239]      // if-block "canReadPins"
[18:24:19.239]        // =>  TRUE
[18:24:19.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:24:19.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:24:19.243]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:24:19.243]        // while-condition  =>  FALSE
[18:24:19.243]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:24:19.243]      </control>
[18:24:19.243]      // end if-block "canReadPins"
[18:24:19.243]    </control>
[18:24:19.243]    <control if="!canReadPins" while="" timeout="0" info="">
[18:24:19.243]      // if-block "!canReadPins"
[18:24:19.243]        // =>  FALSE
[18:24:19.243]      // skip if-block "!canReadPins"
[18:24:19.243]    </control>
[18:24:19.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:24:19.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:24:19.244]        // =>  TRUE
[18:24:19.244]      <block atomic="false" info="">
[18:24:19.244]        WriteAP(0x00, 0x190008);
[18:24:19.245]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:24:19.245]        WriteAP(0xF0, 0x01);
[18:24:19.254]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:24:19.254]      </block>
[18:24:19.254]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:24:19.254]    </control>
[18:24:19.254]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:24:19.254]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:24:19.254]        // =>  FALSE
[18:24:19.254]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:24:19.254]    </control>
[18:24:19.254]    <block atomic="false" info="">
[18:24:19.254]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:24:19.257]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:24:19.257]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:24:19.258]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:24:19.259]      __ap = 0; //lets make sure we reset the access point selection
[18:24:19.259]        // -> [__ap <= 0x00000000]
[18:24:19.259]    </block>
[18:24:19.259]  </sequence>
[18:24:19.259]  
[18:24:19.280]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:24:19.280]  
[18:24:19.280]  <debugvars>
[18:24:19.280]    // Pre-defined
[18:24:19.281]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:24:19.281]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:24:19.281]    __dp=0x00000000
[18:24:19.281]    __ap=0x00000000
[18:24:19.281]    __traceout=0x00000000      (Trace Disabled)
[18:24:19.281]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:24:19.281]    __FlashAddr=0x00000000
[18:24:19.281]    __FlashLen=0x00000000
[18:24:19.281]    __FlashArg=0x00000000
[18:24:19.281]    __FlashOp=0x00000000
[18:24:19.281]    __Result=0x00000000
[18:24:19.281]  </debugvars>
[18:24:19.281]  
[18:24:19.281]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:24:19.281]    <block atomic="false" info="">
[18:24:19.281]      __var deviceID = 0;
[18:24:19.281]        // -> [deviceID <= 0x00000000]
[18:24:19.281]      __var version = 0;
[18:24:19.281]        // -> [version <= 0x00000000]
[18:24:19.281]      __var partNum = 0;
[18:24:19.281]        // -> [partNum <= 0x00000000]
[18:24:19.281]      __var manuf = 0;
[18:24:19.281]        // -> [manuf <= 0x00000000]
[18:24:19.281]      __var isMSPM0G1X0X_G3X0X = 0;
[18:24:19.281]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:24:19.281]      __var isProduction = 0;
[18:24:19.282]        // -> [isProduction <= 0x00000000]
[18:24:19.282]      __var continueId = 0;
[18:24:19.282]        // -> [continueId <= 0x00000000]
[18:24:19.282]      deviceID =   Read32(0x41C40004);
[18:24:19.294]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:24:19.295]        // -> [deviceID <= 0x2BB8802F]
[18:24:19.295]      version = deviceID >> 28;
[18:24:19.295]        // -> [version <= 0x00000002]
[18:24:19.295]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:24:19.295]        // -> [partNum <= 0x0000BB88]
[18:24:19.295]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:24:19.295]        // -> [manuf <= 0x00000017]
[18:24:19.295]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:24:19.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:24:19.295]      isProduction = (version > 0);
[18:24:19.295]        // -> [isProduction <= 0x00000001]
[18:24:19.295]    </block>
[18:24:19.295]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:24:19.295]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:24:19.295]        // =>  FALSE
[18:24:19.295]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:24:19.296]    </control>
[18:24:19.296]    <control if="continueId == 4" while="" timeout="0" info="">
[18:24:19.296]      // if-block "continueId == 4"
[18:24:19.296]        // =>  FALSE
[18:24:19.296]      // skip if-block "continueId == 4"
[18:24:19.296]    </control>
[18:24:19.296]    <control if="!isProduction" while="" timeout="0" info="">
[18:24:19.296]      // if-block "!isProduction"
[18:24:19.296]        // =>  FALSE
[18:24:19.296]      // skip if-block "!isProduction"
[18:24:19.296]    </control>
[18:24:19.296]  </sequence>
[18:24:19.296]  
[18:24:36.111]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:24:36.111]  
[18:24:36.111]  <debugvars>
[18:24:36.111]    // Pre-defined
[18:24:36.111]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:24:36.111]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:24:36.111]    __dp=0x00000000
[18:24:36.111]    __ap=0x00000000
[18:24:36.111]    __traceout=0x00000000      (Trace Disabled)
[18:24:36.112]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:24:36.112]    __FlashAddr=0x00000000
[18:24:36.112]    __FlashLen=0x00000000
[18:24:36.112]    __FlashArg=0x00000000
[18:24:36.112]    __FlashOp=0x00000000
[18:24:36.112]    __Result=0x00000000
[18:24:36.112]  </debugvars>
[18:24:36.112]  
[18:24:36.112]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:24:36.112]    <block atomic="false" info="">
[18:24:36.112]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:24:36.112]        // -> [isSWJ <= 0x00000001]
[18:24:36.112]      __var hasDormant = __protocol & 0x00020000;
[18:24:36.112]        // -> [hasDormant <= 0x00000000]
[18:24:36.112]      __var protType   = __protocol & 0x0000FFFF;
[18:24:36.112]        // -> [protType <= 0x00000002]
[18:24:36.112]    </block>
[18:24:36.112]    <control if="protType == 1" while="" timeout="0" info="">
[18:24:36.112]      // if-block "protType == 1"
[18:24:36.112]        // =>  FALSE
[18:24:36.112]      // skip if-block "protType == 1"
[18:24:36.112]    </control>
[18:24:36.112]    <control if="protType == 2" while="" timeout="0" info="">
[18:24:36.112]      // if-block "protType == 2"
[18:24:36.112]        // =>  TRUE
[18:24:36.112]      <control if="isSWJ" while="" timeout="0" info="">
[18:24:36.112]        // if-block "isSWJ"
[18:24:36.112]          // =>  TRUE
[18:24:36.113]        <control if="hasDormant" while="" timeout="0" info="">
[18:24:36.113]          // if-block "hasDormant"
[18:24:36.113]            // =>  FALSE
[18:24:36.113]          // skip if-block "hasDormant"
[18:24:36.113]        </control>
[18:24:36.113]        <control if="!hasDormant" while="" timeout="0" info="">
[18:24:36.113]          // if-block "!hasDormant"
[18:24:36.113]            // =>  TRUE
[18:24:36.113]          <block atomic="false" info="">
[18:24:36.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:24:36.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:24:36.115]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:24:36.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:24:36.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:24:36.117]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:24:36.117]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:24:36.119]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:24:36.119]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:24:36.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:24:36.120]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:24:36.122]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:24:36.122]          </block>
[18:24:36.122]          // end if-block "!hasDormant"
[18:24:36.122]        </control>
[18:24:36.122]        // end if-block "isSWJ"
[18:24:36.122]      </control>
[18:24:36.122]      <control if="!isSWJ" while="" timeout="0" info="">
[18:24:36.122]        // if-block "!isSWJ"
[18:24:36.122]          // =>  FALSE
[18:24:36.122]        // skip if-block "!isSWJ"
[18:24:36.122]      </control>
[18:24:36.122]      <block atomic="false" info="">
[18:24:36.122]        ReadDP(0x0);
[18:24:36.124]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:24:36.124]      </block>
[18:24:36.124]      // end if-block "protType == 2"
[18:24:36.124]    </control>
[18:24:36.124]  </sequence>
[18:24:36.124]  
[18:24:36.127]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:24:36.127]  
[18:24:36.127]  <debugvars>
[18:24:36.127]    // Pre-defined
[18:24:36.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:24:36.127]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:24:36.127]    __dp=0x00000000
[18:24:36.127]    __ap=0x00000000
[18:24:36.127]    __traceout=0x00000000      (Trace Disabled)
[18:24:36.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:24:36.127]    __FlashAddr=0x00000000
[18:24:36.127]    __FlashLen=0x00000000
[18:24:36.127]    __FlashArg=0x00000000
[18:24:36.128]    __FlashOp=0x00000000
[18:24:36.128]    __Result=0x00000000
[18:24:36.128]  </debugvars>
[18:24:36.128]  
[18:24:36.128]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:24:36.128]    <block atomic="false" info="">
[18:24:36.128]      __var SW_DP_ABORT       = 0x0;
[18:24:36.128]        // -> [SW_DP_ABORT <= 0x00000000]
[18:24:36.128]      __var DP_CTRL_STAT      = 0x4;
[18:24:36.128]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:24:36.128]      __var DP_SELECT         = 0x8;
[18:24:36.128]        // -> [DP_SELECT <= 0x00000008]
[18:24:36.128]      __var powered_down      = 0;
[18:24:36.128]        // -> [powered_down <= 0x00000000]
[18:24:36.128]      WriteDP(DP_SELECT, 0x00000000);
[18:24:36.132]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:24:36.132]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:24:36.134]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:24:36.134]        // -> [powered_down <= 0x00000001]
[18:24:36.134]    </block>
[18:24:36.134]    <control if="powered_down" while="" timeout="0" info="">
[18:24:36.134]      // if-block "powered_down"
[18:24:36.134]        // =>  TRUE
[18:24:36.134]      <block atomic="false" info="">
[18:24:36.134]        Message(0, "Debug/System power-up request sent");
[18:24:36.136]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:24:36.139]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:24:36.139]      </block>
[18:24:36.139]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:24:36.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:24:36.141]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:24:36.141]        // while-condition  =>  FALSE
[18:24:36.141]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:24:36.141]      </control>
[18:24:36.141]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:24:36.141]        // if-block "(__protocol & 0xFFFF) == 1"
[18:24:36.141]          // =>  FALSE
[18:24:36.141]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:24:36.141]      </control>
[18:24:36.141]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:24:36.141]        // if-block "(__protocol & 0xFFFF) == 2"
[18:24:36.141]          // =>  TRUE
[18:24:36.141]        <block atomic="false" info="">
[18:24:36.141]          Message(0, "executing SWD power up");
[18:24:36.143]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:24:36.144]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:24:36.145]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:24:36.146]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:24:36.146]        </block>
[18:24:36.146]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:24:36.146]      </control>
[18:24:36.147]      // end if-block "powered_down"
[18:24:36.147]    </control>
[18:24:36.147]    <block atomic="false" info="">
[18:24:36.147]      __var DEBUG_PORT_VAL    = 0;
[18:24:36.147]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:24:36.147]      __var ACCESS_POINT_VAL  = 0;
[18:24:36.147]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:24:36.147]      __ap = 1; 
[18:24:36.147]        // -> [__ap <= 0x00000001]
[18:24:36.147]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:24:36.152]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:24:36.152]      __ap = 4;
[18:24:36.152]        // -> [__ap <= 0x00000004]
[18:24:36.152]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:24:36.156]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:24:36.156]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:24:36.157]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:24:36.158]    </block>
[18:24:36.158]    <block atomic="false" info="">
[18:24:36.158]      __var nReset = 0x80;
[18:24:36.158]        // -> [nReset <= 0x00000080]
[18:24:36.158]      __var canReadPins = 0;
[18:24:36.158]        // -> [canReadPins <= 0x00000000]
[18:24:36.158]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:24:36.160]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:24:36.160]        // -> [canReadPins <= 0x00000001]
[18:24:36.160]    </block>
[18:24:36.160]    <control if="" while="1" timeout="200" info="">
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.160]      // while "1"  (timeout="200")
[18:24:36.160]      // while-condition  =>  TRUE
[18:24:36.161]      // while "1"  (timeout="200")
[18:24:36.161]      // while  =>  TIMEOUT
[18:24:36.161]      // end while "1"
[18:24:36.161]    </control>
[18:24:36.161]    <control if="canReadPins" while="" timeout="0" info="">
[18:24:36.161]      // if-block "canReadPins"
[18:24:36.161]        // =>  TRUE
[18:24:36.161]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:24:36.161]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:24:36.162]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:24:36.162]        // while-condition  =>  FALSE
[18:24:36.162]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:24:36.162]      </control>
[18:24:36.162]      // end if-block "canReadPins"
[18:24:36.162]    </control>
[18:24:36.162]    <control if="!canReadPins" while="" timeout="0" info="">
[18:24:36.162]      // if-block "!canReadPins"
[18:24:36.162]        // =>  FALSE
[18:24:36.162]      // skip if-block "!canReadPins"
[18:24:36.163]    </control>
[18:24:36.163]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:24:36.163]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:24:36.163]        // =>  TRUE
[18:24:36.163]      <block atomic="false" info="">
[18:24:36.163]        WriteAP(0x00, 0x190008);
[18:24:36.166]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:24:36.166]        WriteAP(0xF0, 0x01);
[18:24:36.170]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:24:36.170]      </block>
[18:24:36.170]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:24:36.170]    </control>
[18:24:36.170]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:24:36.170]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:24:36.170]        // =>  FALSE
[18:24:36.170]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:24:36.171]    </control>
[18:24:36.171]    <block atomic="false" info="">
[18:24:36.171]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:24:36.178]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:24:36.178]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:24:36.178]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:24:36.179]      __ap = 0; //lets make sure we reset the access point selection
[18:24:36.179]        // -> [__ap <= 0x00000000]
[18:24:36.179]    </block>
[18:24:36.179]  </sequence>
[18:24:36.180]  
[18:24:36.195]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:24:36.195]  
[18:24:36.196]  <debugvars>
[18:24:36.196]    // Pre-defined
[18:24:36.196]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:24:36.196]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:24:36.196]    __dp=0x00000000
[18:24:36.196]    __ap=0x00000000
[18:24:36.196]    __traceout=0x00000000      (Trace Disabled)
[18:24:36.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:24:36.196]    __FlashAddr=0x00000000
[18:24:36.196]    __FlashLen=0x00000000
[18:24:36.196]    __FlashArg=0x00000000
[18:24:36.196]    __FlashOp=0x00000000
[18:24:36.196]    __Result=0x00000000
[18:24:36.196]  </debugvars>
[18:24:36.196]  
[18:24:36.196]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:24:36.196]    <block atomic="false" info="">
[18:24:36.196]      __var deviceID = 0;
[18:24:36.196]        // -> [deviceID <= 0x00000000]
[18:24:36.196]      __var version = 0;
[18:24:36.196]        // -> [version <= 0x00000000]
[18:24:36.196]      __var partNum = 0;
[18:24:36.196]        // -> [partNum <= 0x00000000]
[18:24:36.196]      __var manuf = 0;
[18:24:36.196]        // -> [manuf <= 0x00000000]
[18:24:36.197]      __var isMSPM0G1X0X_G3X0X = 0;
[18:24:36.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:24:36.197]      __var isProduction = 0;
[18:24:36.197]        // -> [isProduction <= 0x00000000]
[18:24:36.197]      __var continueId = 0;
[18:24:36.197]        // -> [continueId <= 0x00000000]
[18:24:36.197]      deviceID =   Read32(0x41C40004);
[18:24:36.201]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:24:36.201]        // -> [deviceID <= 0x2BB8802F]
[18:24:36.201]      version = deviceID >> 28;
[18:24:36.202]        // -> [version <= 0x00000002]
[18:24:36.202]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:24:36.202]        // -> [partNum <= 0x0000BB88]
[18:24:36.202]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:24:36.202]        // -> [manuf <= 0x00000017]
[18:24:36.202]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:24:36.202]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:24:36.202]      isProduction = (version > 0);
[18:24:36.202]        // -> [isProduction <= 0x00000001]
[18:24:36.202]    </block>
[18:24:36.202]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:24:36.202]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:24:36.202]        // =>  FALSE
[18:24:36.202]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:24:36.202]    </control>
[18:24:36.202]    <control if="continueId == 4" while="" timeout="0" info="">
[18:24:36.202]      // if-block "continueId == 4"
[18:24:36.202]        // =>  FALSE
[18:24:36.202]      // skip if-block "continueId == 4"
[18:24:36.202]    </control>
[18:24:36.202]    <control if="!isProduction" while="" timeout="0" info="">
[18:24:36.202]      // if-block "!isProduction"
[18:24:36.202]        // =>  FALSE
[18:24:36.202]      // skip if-block "!isProduction"
[18:24:36.202]    </control>
[18:24:36.202]  </sequence>
[18:24:36.203]  
[18:29:35.944]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:29:35.944]  
[18:29:35.944]  <debugvars>
[18:29:35.945]    // Pre-defined
[18:29:35.945]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:35.945]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:29:35.945]    __dp=0x00000000
[18:29:35.945]    __ap=0x00000000
[18:29:35.945]    __traceout=0x00000000      (Trace Disabled)
[18:29:35.945]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:35.945]    __FlashAddr=0x00000000
[18:29:35.945]    __FlashLen=0x00000000
[18:29:35.945]    __FlashArg=0x00000000
[18:29:35.945]    __FlashOp=0x00000000
[18:29:35.945]    __Result=0x00000000
[18:29:35.945]  </debugvars>
[18:29:35.945]  
[18:29:35.945]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:29:35.945]    <block atomic="false" info="">
[18:29:35.945]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:29:35.945]        // -> [isSWJ <= 0x00000001]
[18:29:35.945]      __var hasDormant = __protocol & 0x00020000;
[18:29:35.945]        // -> [hasDormant <= 0x00000000]
[18:29:35.946]      __var protType   = __protocol & 0x0000FFFF;
[18:29:35.946]        // -> [protType <= 0x00000002]
[18:29:35.946]    </block>
[18:29:35.946]    <control if="protType == 1" while="" timeout="0" info="">
[18:29:35.946]      // if-block "protType == 1"
[18:29:35.946]        // =>  FALSE
[18:29:35.946]      // skip if-block "protType == 1"
[18:29:35.946]    </control>
[18:29:35.946]    <control if="protType == 2" while="" timeout="0" info="">
[18:29:35.946]      // if-block "protType == 2"
[18:29:35.946]        // =>  TRUE
[18:29:35.946]      <control if="isSWJ" while="" timeout="0" info="">
[18:29:35.946]        // if-block "isSWJ"
[18:29:35.947]          // =>  TRUE
[18:29:35.947]        <control if="hasDormant" while="" timeout="0" info="">
[18:29:35.947]          // if-block "hasDormant"
[18:29:35.947]            // =>  FALSE
[18:29:35.947]          // skip if-block "hasDormant"
[18:29:35.947]        </control>
[18:29:35.947]        <control if="!hasDormant" while="" timeout="0" info="">
[18:29:35.947]          // if-block "!hasDormant"
[18:29:35.947]            // =>  TRUE
[18:29:35.947]          <block atomic="false" info="">
[18:29:35.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:29:35.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:35.952]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:29:35.953]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:29:35.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:29:35.959]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:35.960]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:29:35.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:29:35.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:29:35.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:29:35.963]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:29:35.964]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:29:35.965]          </block>
[18:29:35.965]          // end if-block "!hasDormant"
[18:29:35.965]        </control>
[18:29:35.965]        // end if-block "isSWJ"
[18:29:35.965]      </control>
[18:29:35.965]      <control if="!isSWJ" while="" timeout="0" info="">
[18:29:35.965]        // if-block "!isSWJ"
[18:29:35.965]          // =>  FALSE
[18:29:35.965]        // skip if-block "!isSWJ"
[18:29:35.965]      </control>
[18:29:35.965]      <block atomic="false" info="">
[18:29:35.965]        ReadDP(0x0);
[18:29:35.966]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:29:35.967]      </block>
[18:29:35.967]      // end if-block "protType == 2"
[18:29:35.967]    </control>
[18:29:35.967]  </sequence>
[18:29:35.967]  
[18:29:35.969]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:29:35.969]  
[18:29:35.969]  <debugvars>
[18:29:35.969]    // Pre-defined
[18:29:35.969]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:35.969]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:29:35.969]    __dp=0x00000000
[18:29:35.969]    __ap=0x00000000
[18:29:35.970]    __traceout=0x00000000      (Trace Disabled)
[18:29:35.970]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:35.970]    __FlashAddr=0x00000000
[18:29:35.970]    __FlashLen=0x00000000
[18:29:35.970]    __FlashArg=0x00000000
[18:29:35.970]    __FlashOp=0x00000000
[18:29:35.970]    __Result=0x00000000
[18:29:35.970]  </debugvars>
[18:29:35.970]  
[18:29:35.970]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:29:35.970]    <block atomic="false" info="">
[18:29:35.970]      __var SW_DP_ABORT       = 0x0;
[18:29:35.970]        // -> [SW_DP_ABORT <= 0x00000000]
[18:29:35.970]      __var DP_CTRL_STAT      = 0x4;
[18:29:35.970]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:29:35.970]      __var DP_SELECT         = 0x8;
[18:29:35.970]        // -> [DP_SELECT <= 0x00000008]
[18:29:35.970]      __var powered_down      = 0;
[18:29:35.970]        // -> [powered_down <= 0x00000000]
[18:29:35.970]      WriteDP(DP_SELECT, 0x00000000);
[18:29:35.973]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:29:35.974]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:29:35.975]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:29:35.975]        // -> [powered_down <= 0x00000001]
[18:29:35.975]    </block>
[18:29:35.975]    <control if="powered_down" while="" timeout="0" info="">
[18:29:35.975]      // if-block "powered_down"
[18:29:35.975]        // =>  TRUE
[18:29:35.975]      <block atomic="false" info="">
[18:29:35.976]        Message(0, "Debug/System power-up request sent");
[18:29:35.980]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:29:35.989]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:29:35.989]      </block>
[18:29:35.989]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:29:35.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:29:35.991]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:29:35.991]        // while-condition  =>  FALSE
[18:29:35.991]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:29:35.991]      </control>
[18:29:35.991]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:29:35.991]        // if-block "(__protocol & 0xFFFF) == 1"
[18:29:35.991]          // =>  FALSE
[18:29:35.991]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:29:35.991]      </control>
[18:29:35.991]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:29:35.991]        // if-block "(__protocol & 0xFFFF) == 2"
[18:29:35.991]          // =>  TRUE
[18:29:35.991]        <block atomic="false" info="">
[18:29:35.991]          Message(0, "executing SWD power up");
[18:29:35.992]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:29:36.003]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:29:36.004]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:29:36.005]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:29:36.005]        </block>
[18:29:36.005]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:29:36.005]      </control>
[18:29:36.005]      // end if-block "powered_down"
[18:29:36.005]    </control>
[18:29:36.005]    <block atomic="false" info="">
[18:29:36.005]      __var DEBUG_PORT_VAL    = 0;
[18:29:36.005]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:29:36.006]      __var ACCESS_POINT_VAL  = 0;
[18:29:36.006]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:29:36.006]      __ap = 1; 
[18:29:36.006]        // -> [__ap <= 0x00000001]
[18:29:36.006]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:29:36.010]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:29:36.010]      __ap = 4;
[18:29:36.010]        // -> [__ap <= 0x00000004]
[18:29:36.010]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:29:36.015]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:29:36.015]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:29:36.015]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:29:36.017]    </block>
[18:29:36.017]    <block atomic="false" info="">
[18:29:36.017]      __var nReset = 0x80;
[18:29:36.017]        // -> [nReset <= 0x00000080]
[18:29:36.017]      __var canReadPins = 0;
[18:29:36.017]        // -> [canReadPins <= 0x00000000]
[18:29:36.017]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:29:36.022]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:29:36.022]        // -> [canReadPins <= 0x00000001]
[18:29:36.022]    </block>
[18:29:36.022]    <control if="" while="1" timeout="200" info="">
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.022]      // while "1"  (timeout="200")
[18:29:36.022]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.023]      // while "1"  (timeout="200")
[18:29:36.023]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.024]      // while-condition  =>  TRUE
[18:29:36.024]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.025]      // while "1"  (timeout="200")
[18:29:36.025]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.026]      // while "1"  (timeout="200")
[18:29:36.026]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.027]      // while "1"  (timeout="200")
[18:29:36.027]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.028]      // while-condition  =>  TRUE
[18:29:36.028]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.029]      // while-condition  =>  TRUE
[18:29:36.029]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.030]      // while-condition  =>  TRUE
[18:29:36.030]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.031]      // while "1"  (timeout="200")
[18:29:36.031]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.032]      // while "1"  (timeout="200")
[18:29:36.032]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.033]      // while-condition  =>  TRUE
[18:29:36.033]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.034]      // while-condition  =>  TRUE
[18:29:36.034]      // while "1"  (timeout="200")
[18:29:36.035]      // while-condition  =>  TRUE
[18:29:36.035]      // while "1"  (timeout="200")
[18:29:36.035]      // while  =>  TIMEOUT
[18:29:36.035]      // end while "1"
[18:29:36.035]    </control>
[18:29:36.035]    <control if="canReadPins" while="" timeout="0" info="">
[18:29:36.035]      // if-block "canReadPins"
[18:29:36.035]        // =>  TRUE
[18:29:36.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:29:36.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:29:36.037]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:29:36.037]        // while-condition  =>  FALSE
[18:29:36.037]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:29:36.037]      </control>
[18:29:36.037]      // end if-block "canReadPins"
[18:29:36.037]    </control>
[18:29:36.037]    <control if="!canReadPins" while="" timeout="0" info="">
[18:29:36.037]      // if-block "!canReadPins"
[18:29:36.037]        // =>  FALSE
[18:29:36.037]      // skip if-block "!canReadPins"
[18:29:36.037]    </control>
[18:29:36.037]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:29:36.037]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:29:36.038]        // =>  TRUE
[18:29:36.038]      <block atomic="false" info="">
[18:29:36.038]        WriteAP(0x00, 0x190008);
[18:29:36.040]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:29:36.040]        WriteAP(0xF0, 0x01);
[18:29:36.045]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:29:36.045]      </block>
[18:29:36.045]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:29:36.045]    </control>
[18:29:36.045]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:29:36.045]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:29:36.045]        // =>  FALSE
[18:29:36.045]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:29:36.045]    </control>
[18:29:36.045]    <block atomic="false" info="">
[18:29:36.045]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:29:36.048]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:29:36.048]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:29:36.048]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:29:36.049]      __ap = 0; //lets make sure we reset the access point selection
[18:29:36.050]        // -> [__ap <= 0x00000000]
[18:29:36.050]    </block>
[18:29:36.050]  </sequence>
[18:29:36.050]  
[18:29:36.073]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:29:36.073]  
[18:29:36.073]  <debugvars>
[18:29:36.073]    // Pre-defined
[18:29:36.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:29:36.073]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:29:36.073]    __dp=0x00000000
[18:29:36.073]    __ap=0x00000000
[18:29:36.073]    __traceout=0x00000000      (Trace Disabled)
[18:29:36.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:29:36.073]    __FlashAddr=0x00000000
[18:29:36.073]    __FlashLen=0x00000000
[18:29:36.073]    __FlashArg=0x00000000
[18:29:36.073]    __FlashOp=0x00000000
[18:29:36.073]    __Result=0x00000000
[18:29:36.073]  </debugvars>
[18:29:36.073]  
[18:29:36.073]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:29:36.073]    <block atomic="false" info="">
[18:29:36.073]      __var deviceID = 0;
[18:29:36.073]        // -> [deviceID <= 0x00000000]
[18:29:36.073]      __var version = 0;
[18:29:36.073]        // -> [version <= 0x00000000]
[18:29:36.073]      __var partNum = 0;
[18:29:36.073]        // -> [partNum <= 0x00000000]
[18:29:36.073]      __var manuf = 0;
[18:29:36.073]        // -> [manuf <= 0x00000000]
[18:29:36.073]      __var isMSPM0G1X0X_G3X0X = 0;
[18:29:36.073]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:29:36.073]      __var isProduction = 0;
[18:29:36.073]        // -> [isProduction <= 0x00000000]
[18:29:36.073]      __var continueId = 0;
[18:29:36.073]        // -> [continueId <= 0x00000000]
[18:29:36.073]      deviceID =   Read32(0x41C40004);
[18:29:36.079]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:29:36.079]        // -> [deviceID <= 0x2BB8802F]
[18:29:36.079]      version = deviceID >> 28;
[18:29:36.079]        // -> [version <= 0x00000002]
[18:29:36.079]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:29:36.079]        // -> [partNum <= 0x0000BB88]
[18:29:36.079]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:29:36.079]        // -> [manuf <= 0x00000017]
[18:29:36.079]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:29:36.079]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:29:36.079]      isProduction = (version > 0);
[18:29:36.079]        // -> [isProduction <= 0x00000001]
[18:29:36.079]    </block>
[18:29:36.079]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:29:36.079]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:29:36.080]        // =>  FALSE
[18:29:36.080]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:29:36.080]    </control>
[18:29:36.080]    <control if="continueId == 4" while="" timeout="0" info="">
[18:29:36.080]      // if-block "continueId == 4"
[18:29:36.080]        // =>  FALSE
[18:29:36.080]      // skip if-block "continueId == 4"
[18:29:36.080]    </control>
[18:29:36.080]    <control if="!isProduction" while="" timeout="0" info="">
[18:29:36.080]      // if-block "!isProduction"
[18:29:36.080]        // =>  FALSE
[18:29:36.080]      // skip if-block "!isProduction"
[18:29:36.080]    </control>
[18:29:36.080]  </sequence>
[18:29:36.080]  
[18:30:18.546]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:30:18.546]  
[18:30:18.552]  <debugvars>
[18:30:18.553]    // Pre-defined
[18:30:18.553]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:18.553]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:18.553]    __dp=0x00000000
[18:30:18.553]    __ap=0x00000000
[18:30:18.553]    __traceout=0x00000000      (Trace Disabled)
[18:30:18.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:18.553]    __FlashAddr=0x00000000
[18:30:18.553]    __FlashLen=0x00000000
[18:30:18.553]    __FlashArg=0x00000000
[18:30:18.553]    __FlashOp=0x00000000
[18:30:18.554]    __Result=0x00000000
[18:30:18.554]  </debugvars>
[18:30:18.554]  
[18:30:18.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:30:18.554]    <block atomic="false" info="">
[18:30:18.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:30:18.554]        // -> [isSWJ <= 0x00000001]
[18:30:18.554]      __var hasDormant = __protocol & 0x00020000;
[18:30:18.554]        // -> [hasDormant <= 0x00000000]
[18:30:18.554]      __var protType   = __protocol & 0x0000FFFF;
[18:30:18.554]        // -> [protType <= 0x00000002]
[18:30:18.554]    </block>
[18:30:18.554]    <control if="protType == 1" while="" timeout="0" info="">
[18:30:18.554]      // if-block "protType == 1"
[18:30:18.554]        // =>  FALSE
[18:30:18.554]      // skip if-block "protType == 1"
[18:30:18.554]    </control>
[18:30:18.554]    <control if="protType == 2" while="" timeout="0" info="">
[18:30:18.554]      // if-block "protType == 2"
[18:30:18.554]        // =>  TRUE
[18:30:18.554]      <control if="isSWJ" while="" timeout="0" info="">
[18:30:18.554]        // if-block "isSWJ"
[18:30:18.554]          // =>  TRUE
[18:30:18.554]        <control if="hasDormant" while="" timeout="0" info="">
[18:30:18.554]          // if-block "hasDormant"
[18:30:18.555]            // =>  FALSE
[18:30:18.555]          // skip if-block "hasDormant"
[18:30:18.555]        </control>
[18:30:18.555]        <control if="!hasDormant" while="" timeout="0" info="">
[18:30:18.555]          // if-block "!hasDormant"
[18:30:18.555]            // =>  TRUE
[18:30:18.555]          <block atomic="false" info="">
[18:30:18.555]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:30:18.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:18.557]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:30:18.558]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:30:18.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:30:18.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:18.560]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:30:18.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:30:18.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:30:18.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:18.562]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:30:18.564]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:30:18.564]          </block>
[18:30:18.564]          // end if-block "!hasDormant"
[18:30:18.565]        </control>
[18:30:18.565]        // end if-block "isSWJ"
[18:30:18.565]      </control>
[18:30:18.565]      <control if="!isSWJ" while="" timeout="0" info="">
[18:30:18.565]        // if-block "!isSWJ"
[18:30:18.565]          // =>  FALSE
[18:30:18.565]        // skip if-block "!isSWJ"
[18:30:18.565]      </control>
[18:30:18.565]      <block atomic="false" info="">
[18:30:18.565]        ReadDP(0x0);
[18:30:18.570]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:30:18.571]      </block>
[18:30:18.571]      // end if-block "protType == 2"
[18:30:18.571]    </control>
[18:30:18.571]  </sequence>
[18:30:18.571]  
[18:30:18.576]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:30:18.576]  
[18:30:18.576]  <debugvars>
[18:30:18.576]    // Pre-defined
[18:30:18.576]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:18.577]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:18.577]    __dp=0x00000000
[18:30:18.577]    __ap=0x00000000
[18:30:18.578]    __traceout=0x00000000      (Trace Disabled)
[18:30:18.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:18.578]    __FlashAddr=0x00000000
[18:30:18.578]    __FlashLen=0x00000000
[18:30:18.578]    __FlashArg=0x00000000
[18:30:18.579]    __FlashOp=0x00000000
[18:30:18.579]    __Result=0x00000000
[18:30:18.579]  </debugvars>
[18:30:18.579]  
[18:30:18.579]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:30:18.580]    <block atomic="false" info="">
[18:30:18.580]      __var SW_DP_ABORT       = 0x0;
[18:30:18.580]        // -> [SW_DP_ABORT <= 0x00000000]
[18:30:18.580]      __var DP_CTRL_STAT      = 0x4;
[18:30:18.580]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:30:18.580]      __var DP_SELECT         = 0x8;
[18:30:18.580]        // -> [DP_SELECT <= 0x00000008]
[18:30:18.580]      __var powered_down      = 0;
[18:30:18.580]        // -> [powered_down <= 0x00000000]
[18:30:18.580]      WriteDP(DP_SELECT, 0x00000000);
[18:30:18.585]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:30:18.585]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:30:18.588]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:30:18.588]        // -> [powered_down <= 0x00000001]
[18:30:18.588]    </block>
[18:30:18.588]    <control if="powered_down" while="" timeout="0" info="">
[18:30:18.588]      // if-block "powered_down"
[18:30:18.588]        // =>  TRUE
[18:30:18.588]      <block atomic="false" info="">
[18:30:18.588]        Message(0, "Debug/System power-up request sent");
[18:30:18.591]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:30:18.595]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:30:18.595]      </block>
[18:30:18.595]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:30:18.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.596]        // while-condition  =>  TRUE
[18:30:18.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.604]        // while-condition  =>  TRUE
[18:30:18.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.606]        // while-condition  =>  TRUE
[18:30:18.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.607]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.607]        // while-condition  =>  TRUE
[18:30:18.607]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.609]        // while-condition  =>  TRUE
[18:30:18.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.613]        // while-condition  =>  TRUE
[18:30:18.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.618]        // while-condition  =>  TRUE
[18:30:18.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.621]        // while-condition  =>  TRUE
[18:30:18.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.622]        // while-condition  =>  TRUE
[18:30:18.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.625]        // while-condition  =>  TRUE
[18:30:18.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.627]        // while-condition  =>  TRUE
[18:30:18.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.628]        // while-condition  =>  TRUE
[18:30:18.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.630]        // while-condition  =>  TRUE
[18:30:18.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.638]        // while-condition  =>  TRUE
[18:30:18.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.640]        // while-condition  =>  TRUE
[18:30:18.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.642]        // while-condition  =>  TRUE
[18:30:18.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.646]        // while-condition  =>  TRUE
[18:30:18.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.648]        // while-condition  =>  TRUE
[18:30:18.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.650]        // while-condition  =>  TRUE
[18:30:18.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.655]        // while-condition  =>  TRUE
[18:30:18.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.657]        // while-condition  =>  TRUE
[18:30:18.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.659]        // while-condition  =>  TRUE
[18:30:18.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.660]        // while-condition  =>  TRUE
[18:30:18.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.663]        // while-condition  =>  TRUE
[18:30:18.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.666]        // while-condition  =>  TRUE
[18:30:18.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.668]        // while-condition  =>  TRUE
[18:30:18.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.670]        // while-condition  =>  TRUE
[18:30:18.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.671]        // while-condition  =>  TRUE
[18:30:18.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.673]        // while-condition  =>  TRUE
[18:30:18.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.675]        // while-condition  =>  TRUE
[18:30:18.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.679]        // while-condition  =>  TRUE
[18:30:18.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.681]        // while-condition  =>  TRUE
[18:30:18.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.682]        // while-condition  =>  TRUE
[18:30:18.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.687]        // while-condition  =>  TRUE
[18:30:18.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.690]        // while-condition  =>  TRUE
[18:30:18.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.692]        // while-condition  =>  TRUE
[18:30:18.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.693]        // while-condition  =>  TRUE
[18:30:18.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.695]        // while-condition  =>  TRUE
[18:30:18.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.697]        // while-condition  =>  TRUE
[18:30:18.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.699]        // while-condition  =>  TRUE
[18:30:18.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.700]        // while-condition  =>  TRUE
[18:30:18.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.702]        // while-condition  =>  TRUE
[18:30:18.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.704]        // while-condition  =>  TRUE
[18:30:18.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.706]        // while-condition  =>  TRUE
[18:30:18.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.708]        // while-condition  =>  TRUE
[18:30:18.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.709]        // while-condition  =>  TRUE
[18:30:18.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.711]        // while-condition  =>  TRUE
[18:30:18.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.712]        // while-condition  =>  TRUE
[18:30:18.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.715]        // while-condition  =>  TRUE
[18:30:18.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.716]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.716]        // while-condition  =>  TRUE
[18:30:18.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.718]        // while-condition  =>  TRUE
[18:30:18.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.720]        // while-condition  =>  TRUE
[18:30:18.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.721]        // while-condition  =>  TRUE
[18:30:18.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.725]        // while-condition  =>  TRUE
[18:30:18.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.728]        // while-condition  =>  TRUE
[18:30:18.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.730]        // while-condition  =>  TRUE
[18:30:18.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.732]        // while-condition  =>  TRUE
[18:30:18.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.734]        // while-condition  =>  TRUE
[18:30:18.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.736]        // while-condition  =>  TRUE
[18:30:18.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.739]        // while-condition  =>  TRUE
[18:30:18.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.741]        // while-condition  =>  TRUE
[18:30:18.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.743]        // while-condition  =>  TRUE
[18:30:18.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.747]        // while-condition  =>  TRUE
[18:30:18.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.750]        // while-condition  =>  TRUE
[18:30:18.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.756]        // while-condition  =>  TRUE
[18:30:18.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.758]        // while-condition  =>  TRUE
[18:30:18.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.760]        // while-condition  =>  TRUE
[18:30:18.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.762]        // while-condition  =>  TRUE
[18:30:18.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.764]        // while-condition  =>  TRUE
[18:30:18.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.766]        // while-condition  =>  TRUE
[18:30:18.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.769]        // while-condition  =>  TRUE
[18:30:18.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.772]        // while-condition  =>  TRUE
[18:30:18.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.775]        // while-condition  =>  TRUE
[18:30:18.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.777]        // while-condition  =>  TRUE
[18:30:18.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.779]        // while-condition  =>  TRUE
[18:30:18.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.780]        // while-condition  =>  TRUE
[18:30:18.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.782]        // while-condition  =>  TRUE
[18:30:18.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.783]        // while-condition  =>  TRUE
[18:30:18.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.786]        // while-condition  =>  TRUE
[18:30:18.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.792]        // while-condition  =>  TRUE
[18:30:18.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.794]        // while-condition  =>  TRUE
[18:30:18.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.796]        // while-condition  =>  TRUE
[18:30:18.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.798]        // while-condition  =>  TRUE
[18:30:18.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.803]        // while-condition  =>  TRUE
[18:30:18.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.805]        // while-condition  =>  TRUE
[18:30:18.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.807]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.807]        // while-condition  =>  TRUE
[18:30:18.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.810]        // while-condition  =>  TRUE
[18:30:18.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.812]        // while-condition  =>  TRUE
[18:30:18.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.814]        // while-condition  =>  TRUE
[18:30:18.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.819]        // while-condition  =>  TRUE
[18:30:18.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.827]        // while-condition  =>  TRUE
[18:30:18.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.833]        // while-condition  =>  TRUE
[18:30:18.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.834]        // while-condition  =>  TRUE
[18:30:18.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.837]        // while-condition  =>  TRUE
[18:30:18.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.839]        // while-condition  =>  TRUE
[18:30:18.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.844]        // while-condition  =>  TRUE
[18:30:18.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.850]        // while-condition  =>  TRUE
[18:30:18.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.853]        // while-condition  =>  TRUE
[18:30:18.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.855]        // while-condition  =>  TRUE
[18:30:18.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.857]        // while-condition  =>  TRUE
[18:30:18.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.859]        // while-condition  =>  TRUE
[18:30:18.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.861]        // while-condition  =>  TRUE
[18:30:18.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.863]        // while-condition  =>  TRUE
[18:30:18.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.868]        // while-condition  =>  TRUE
[18:30:18.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.870]        // while-condition  =>  TRUE
[18:30:18.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.871]        // while-condition  =>  TRUE
[18:30:18.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.877]        // while-condition  =>  TRUE
[18:30:18.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.878]        // while-condition  =>  TRUE
[18:30:18.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.880]        // while-condition  =>  TRUE
[18:30:18.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.882]        // while-condition  =>  TRUE
[18:30:18.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.886]        // while-condition  =>  TRUE
[18:30:18.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.888]        // while-condition  =>  TRUE
[18:30:18.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.890]        // while-condition  =>  TRUE
[18:30:18.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.892]        // while-condition  =>  TRUE
[18:30:18.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.895]        // while-condition  =>  TRUE
[18:30:18.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.897]        // while-condition  =>  TRUE
[18:30:18.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.899]        // while-condition  =>  TRUE
[18:30:18.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.900]        // while-condition  =>  TRUE
[18:30:18.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.902]        // while-condition  =>  TRUE
[18:30:18.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.904]        // while-condition  =>  TRUE
[18:30:18.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.906]        // while-condition  =>  TRUE
[18:30:18.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.910]        // while-condition  =>  TRUE
[18:30:18.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.912]        // while-condition  =>  TRUE
[18:30:18.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.919]        // while-condition  =>  TRUE
[18:30:18.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.920]        // while-condition  =>  TRUE
[18:30:18.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.922]        // while-condition  =>  TRUE
[18:30:18.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.925]        // while-condition  =>  TRUE
[18:30:18.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.929]        // while-condition  =>  TRUE
[18:30:18.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.931]        // while-condition  =>  TRUE
[18:30:18.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.933]        // while-condition  =>  TRUE
[18:30:18.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.935]        // while-condition  =>  TRUE
[18:30:18.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.937]        // while-condition  =>  TRUE
[18:30:18.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.939]        // while-condition  =>  TRUE
[18:30:18.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.941]        // while-condition  =>  TRUE
[18:30:18.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.949]        // while-condition  =>  TRUE
[18:30:18.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.951]        // while-condition  =>  TRUE
[18:30:18.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.953]        // while-condition  =>  TRUE
[18:30:18.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.955]        // while-condition  =>  TRUE
[18:30:18.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.956]        // while-condition  =>  TRUE
[18:30:18.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.961]        // while-condition  =>  TRUE
[18:30:18.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.965]        // while-condition  =>  TRUE
[18:30:18.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.974]        // while-condition  =>  TRUE
[18:30:18.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.975]        // while-condition  =>  TRUE
[18:30:18.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.977]        // while-condition  =>  TRUE
[18:30:18.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.980]        // while-condition  =>  TRUE
[18:30:18.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.981]        // while-condition  =>  TRUE
[18:30:18.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.983]        // while-condition  =>  TRUE
[18:30:18.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.984]        // while-condition  =>  TRUE
[18:30:18.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.985]        // while-condition  =>  TRUE
[18:30:18.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.987]        // while-condition  =>  TRUE
[18:30:18.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.988]        // while-condition  =>  TRUE
[18:30:18.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.990]        // while-condition  =>  TRUE
[18:30:18.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.993]        // while-condition  =>  TRUE
[18:30:18.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.996]        // while-condition  =>  TRUE
[18:30:18.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:18.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:18.997]        // while-condition  =>  TRUE
[18:30:18.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.004]        // while-condition  =>  TRUE
[18:30:19.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.005]        // while-condition  =>  TRUE
[18:30:19.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.007]        // while-condition  =>  TRUE
[18:30:19.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.008]        // while-condition  =>  TRUE
[18:30:19.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.010]        // while-condition  =>  TRUE
[18:30:19.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.012]        // while-condition  =>  TRUE
[18:30:19.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.014]        // while-condition  =>  TRUE
[18:30:19.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.018]        // while-condition  =>  TRUE
[18:30:19.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.020]        // while-condition  =>  TRUE
[18:30:19.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.021]        // while-condition  =>  TRUE
[18:30:19.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.023]        // while-condition  =>  TRUE
[18:30:19.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.024]        // while-condition  =>  TRUE
[18:30:19.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.025]        // while-condition  =>  TRUE
[18:30:19.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.028]        // while-condition  =>  TRUE
[18:30:19.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.029]        // while-condition  =>  TRUE
[18:30:19.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.031]        // while-condition  =>  TRUE
[18:30:19.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.033]        // while-condition  =>  TRUE
[18:30:19.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.036]        // while-condition  =>  TRUE
[18:30:19.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.038]        // while-condition  =>  TRUE
[18:30:19.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.044]        // while-condition  =>  TRUE
[18:30:19.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.047]        // while-condition  =>  TRUE
[18:30:19.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.049]        // while-condition  =>  TRUE
[18:30:19.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.051]        // while-condition  =>  TRUE
[18:30:19.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.052]        // while-condition  =>  TRUE
[18:30:19.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.053]        // while-condition  =>  TRUE
[18:30:19.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.055]        // while-condition  =>  TRUE
[18:30:19.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.057]        // while-condition  =>  TRUE
[18:30:19.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.058]        // while-condition  =>  TRUE
[18:30:19.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.060]        // while-condition  =>  TRUE
[18:30:19.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.062]        // while-condition  =>  TRUE
[18:30:19.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.067]        // while-condition  =>  TRUE
[18:30:19.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.068]        // while-condition  =>  TRUE
[18:30:19.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.072]        // while-condition  =>  TRUE
[18:30:19.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.074]        // while-condition  =>  TRUE
[18:30:19.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.078]        // while-condition  =>  TRUE
[18:30:19.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.080]        // while-condition  =>  TRUE
[18:30:19.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.082]        // while-condition  =>  TRUE
[18:30:19.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.084]        // while-condition  =>  TRUE
[18:30:19.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.085]        // while-condition  =>  TRUE
[18:30:19.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.087]        // while-condition  =>  TRUE
[18:30:19.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.088]        // while-condition  =>  TRUE
[18:30:19.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.090]        // while-condition  =>  TRUE
[18:30:19.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.092]        // while-condition  =>  TRUE
[18:30:19.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.096]        // while-condition  =>  TRUE
[18:30:19.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.104]        // while-condition  =>  TRUE
[18:30:19.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.107]        // while-condition  =>  TRUE
[18:30:19.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.108]        // while-condition  =>  TRUE
[18:30:19.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.114]        // while-condition  =>  TRUE
[18:30:19.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.117]        // while-condition  =>  TRUE
[18:30:19.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.118]        // while-condition  =>  TRUE
[18:30:19.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.125]        // while-condition  =>  TRUE
[18:30:19.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.131]        // while-condition  =>  TRUE
[18:30:19.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.133]        // while-condition  =>  TRUE
[18:30:19.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.135]        // while-condition  =>  TRUE
[18:30:19.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.140]        // while-condition  =>  TRUE
[18:30:19.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.147]        // while-condition  =>  TRUE
[18:30:19.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.149]        // while-condition  =>  TRUE
[18:30:19.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.151]        // while-condition  =>  TRUE
[18:30:19.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.152]        // while-condition  =>  TRUE
[18:30:19.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.154]        // while-condition  =>  TRUE
[18:30:19.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.155]        // while-condition  =>  TRUE
[18:30:19.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.158]        // while-condition  =>  TRUE
[18:30:19.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.162]        // while-condition  =>  TRUE
[18:30:19.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.166]        // while-condition  =>  TRUE
[18:30:19.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.170]        // while-condition  =>  TRUE
[18:30:19.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.173]        // while-condition  =>  TRUE
[18:30:19.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.175]        // while-condition  =>  TRUE
[18:30:19.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.178]        // while-condition  =>  TRUE
[18:30:19.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.182]        // while-condition  =>  TRUE
[18:30:19.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.183]        // while-condition  =>  TRUE
[18:30:19.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.185]        // while-condition  =>  TRUE
[18:30:19.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.186]        // while-condition  =>  TRUE
[18:30:19.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.188]        // while-condition  =>  TRUE
[18:30:19.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.189]        // while-condition  =>  TRUE
[18:30:19.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.191]        // while-condition  =>  TRUE
[18:30:19.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.193]        // while-condition  =>  TRUE
[18:30:19.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.195]        // while-condition  =>  TRUE
[18:30:19.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.201]        // while-condition  =>  TRUE
[18:30:19.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.203]        // while-condition  =>  TRUE
[18:30:19.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.205]        // while-condition  =>  TRUE
[18:30:19.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.206]        // while-condition  =>  TRUE
[18:30:19.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.208]        // while-condition  =>  TRUE
[18:30:19.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.210]        // while-condition  =>  TRUE
[18:30:19.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.211]        // while-condition  =>  TRUE
[18:30:19.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.213]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.213]        // while-condition  =>  TRUE
[18:30:19.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.216]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.216]        // while-condition  =>  TRUE
[18:30:19.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.218]        // while-condition  =>  TRUE
[18:30:19.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.220]        // while-condition  =>  TRUE
[18:30:19.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.221]        // while-condition  =>  TRUE
[18:30:19.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.223]        // while-condition  =>  TRUE
[18:30:19.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.225]        // while-condition  =>  TRUE
[18:30:19.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.230]        // while-condition  =>  TRUE
[18:30:19.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.231]        // while-condition  =>  TRUE
[18:30:19.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.233]        // while-condition  =>  TRUE
[18:30:19.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.234]        // while-condition  =>  TRUE
[18:30:19.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.236]        // while-condition  =>  TRUE
[18:30:19.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.237]        // while-condition  =>  TRUE
[18:30:19.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.239]        // while-condition  =>  TRUE
[18:30:19.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.240]        // while-condition  =>  TRUE
[18:30:19.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.242]        // while-condition  =>  TRUE
[18:30:19.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.244]        // while-condition  =>  TRUE
[18:30:19.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.245]        // while-condition  =>  TRUE
[18:30:19.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.247]        // while-condition  =>  TRUE
[18:30:19.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.249]        // while-condition  =>  TRUE
[18:30:19.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.250]        // while-condition  =>  TRUE
[18:30:19.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.258]        // while-condition  =>  TRUE
[18:30:19.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.263]        // while-condition  =>  TRUE
[18:30:19.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.265]        // while-condition  =>  TRUE
[18:30:19.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.266]        // while-condition  =>  TRUE
[18:30:19.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.268]        // while-condition  =>  TRUE
[18:30:19.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.270]        // while-condition  =>  TRUE
[18:30:19.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.276]        // while-condition  =>  TRUE
[18:30:19.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.278]        // while-condition  =>  TRUE
[18:30:19.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.279]        // while-condition  =>  TRUE
[18:30:19.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.281]        // while-condition  =>  TRUE
[18:30:19.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.282]        // while-condition  =>  TRUE
[18:30:19.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.284]        // while-condition  =>  TRUE
[18:30:19.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.286]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.286]        // while-condition  =>  TRUE
[18:30:19.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.288]        // while-condition  =>  TRUE
[18:30:19.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.289]        // while-condition  =>  TRUE
[18:30:19.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.291]        // while-condition  =>  TRUE
[18:30:19.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.294]        // while-condition  =>  TRUE
[18:30:19.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.296]        // while-condition  =>  TRUE
[18:30:19.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.298]        // while-condition  =>  TRUE
[18:30:19.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.304]        // while-condition  =>  TRUE
[18:30:19.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.305]        // while-condition  =>  TRUE
[18:30:19.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.309]        // while-condition  =>  TRUE
[18:30:19.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.311]        // while-condition  =>  TRUE
[18:30:19.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.312]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.312]        // while-condition  =>  TRUE
[18:30:19.312]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.314]        // while-condition  =>  TRUE
[18:30:19.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.317]        // while-condition  =>  TRUE
[18:30:19.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.318]        // while-condition  =>  TRUE
[18:30:19.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.320]        // while-condition  =>  TRUE
[18:30:19.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.322]        // while-condition  =>  TRUE
[18:30:19.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.323]        // while-condition  =>  TRUE
[18:30:19.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.325]        // while-condition  =>  TRUE
[18:30:19.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.326]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.326]        // while-condition  =>  TRUE
[18:30:19.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.328]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.328]        // while-condition  =>  TRUE
[18:30:19.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.329]        // while-condition  =>  TRUE
[18:30:19.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.331]        // while-condition  =>  TRUE
[18:30:19.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.333]        // while-condition  =>  TRUE
[18:30:19.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.334]        // while-condition  =>  TRUE
[18:30:19.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.336]        // while-condition  =>  TRUE
[18:30:19.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.338]        // while-condition  =>  TRUE
[18:30:19.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.339]        // while-condition  =>  TRUE
[18:30:19.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.341]        // while-condition  =>  TRUE
[18:30:19.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.343]        // while-condition  =>  TRUE
[18:30:19.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.344]        // while-condition  =>  TRUE
[18:30:19.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.346]        // while-condition  =>  TRUE
[18:30:19.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.348]        // while-condition  =>  TRUE
[18:30:19.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.352]        // while-condition  =>  TRUE
[18:30:19.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.353]        // while-condition  =>  TRUE
[18:30:19.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.356]        // while-condition  =>  TRUE
[18:30:19.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.359]        // while-condition  =>  TRUE
[18:30:19.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.361]        // while-condition  =>  TRUE
[18:30:19.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.363]        // while-condition  =>  TRUE
[18:30:19.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.364]        // while-condition  =>  TRUE
[18:30:19.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.366]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.366]        // while-condition  =>  TRUE
[18:30:19.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.367]        // while-condition  =>  TRUE
[18:30:19.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.369]        // while-condition  =>  TRUE
[18:30:19.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.371]        // while-condition  =>  TRUE
[18:30:19.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.372]        // while-condition  =>  TRUE
[18:30:19.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.376]        // while-condition  =>  TRUE
[18:30:19.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.377]        // while-condition  =>  TRUE
[18:30:19.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.379]        // while-condition  =>  TRUE
[18:30:19.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.381]        // while-condition  =>  TRUE
[18:30:19.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.383]        // while-condition  =>  TRUE
[18:30:19.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.384]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.384]        // while-condition  =>  TRUE
[18:30:19.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.386]        // while-condition  =>  TRUE
[18:30:19.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.388]        // while-condition  =>  TRUE
[18:30:19.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.390]        // while-condition  =>  TRUE
[18:30:19.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.399]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.399]        // while-condition  =>  TRUE
[18:30:19.399]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.404]        // while-condition  =>  TRUE
[18:30:19.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.408]        // while-condition  =>  TRUE
[18:30:19.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.410]        // while-condition  =>  TRUE
[18:30:19.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.411]        // while-condition  =>  TRUE
[18:30:19.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.413]        // while-condition  =>  TRUE
[18:30:19.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.415]        // while-condition  =>  TRUE
[18:30:19.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.416]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.416]        // while-condition  =>  TRUE
[18:30:19.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.418]        // while-condition  =>  TRUE
[18:30:19.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.419]        // while-condition  =>  TRUE
[18:30:19.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.425]        // while-condition  =>  TRUE
[18:30:19.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.426]        // while-condition  =>  TRUE
[18:30:19.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.428]        // while-condition  =>  TRUE
[18:30:19.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.429]        // while-condition  =>  TRUE
[18:30:19.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.431]        // while-condition  =>  TRUE
[18:30:19.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.433]        // while-condition  =>  TRUE
[18:30:19.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.435]        // while-condition  =>  TRUE
[18:30:19.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.436]        // while-condition  =>  TRUE
[18:30:19.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.438]        // while-condition  =>  TRUE
[18:30:19.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.439]        // while-condition  =>  TRUE
[18:30:19.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.441]        // while-condition  =>  TRUE
[18:30:19.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.445]        // while-condition  =>  TRUE
[18:30:19.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.449]        // while-condition  =>  TRUE
[18:30:19.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.451]        // while-condition  =>  TRUE
[18:30:19.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.452]        // while-condition  =>  TRUE
[18:30:19.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.454]        // while-condition  =>  TRUE
[18:30:19.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.455]        // while-condition  =>  TRUE
[18:30:19.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.457]        // while-condition  =>  TRUE
[18:30:19.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.460]        // while-condition  =>  TRUE
[18:30:19.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.462]        // while-condition  =>  TRUE
[18:30:19.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.463]        // while-condition  =>  TRUE
[18:30:19.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.465]        // while-condition  =>  TRUE
[18:30:19.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.466]        // while-condition  =>  TRUE
[18:30:19.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.468]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.468]        // while-condition  =>  TRUE
[18:30:19.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.469]        // while-condition  =>  TRUE
[18:30:19.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.471]        // while-condition  =>  TRUE
[18:30:19.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.477]        // while-condition  =>  TRUE
[18:30:19.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.479]        // while-condition  =>  TRUE
[18:30:19.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.480]        // while-condition  =>  TRUE
[18:30:19.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.482]        // while-condition  =>  TRUE
[18:30:19.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.483]        // while-condition  =>  TRUE
[18:30:19.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.490]        // while-condition  =>  TRUE
[18:30:19.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.491]        // while-condition  =>  TRUE
[18:30:19.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.495]        // while-condition  =>  TRUE
[18:30:19.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.498]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.498]        // while-condition  =>  TRUE
[18:30:19.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.505]        // while-condition  =>  TRUE
[18:30:19.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.506]        // while-condition  =>  TRUE
[18:30:19.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.510]        // while-condition  =>  TRUE
[18:30:19.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.516]        // while-condition  =>  TRUE
[18:30:19.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.518]        // while-condition  =>  TRUE
[18:30:19.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.519]        // while-condition  =>  TRUE
[18:30:19.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.521]        // while-condition  =>  TRUE
[18:30:19.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.522]        // while-condition  =>  TRUE
[18:30:19.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.524]        // while-condition  =>  TRUE
[18:30:19.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.526]        // while-condition  =>  TRUE
[18:30:19.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.527]        // while-condition  =>  TRUE
[18:30:19.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.529]        // while-condition  =>  TRUE
[18:30:19.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.530]        // while-condition  =>  TRUE
[18:30:19.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.532]        // while-condition  =>  TRUE
[18:30:19.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.533]        // while-condition  =>  TRUE
[18:30:19.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.535]        // while-condition  =>  TRUE
[18:30:19.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.539]        // while-condition  =>  TRUE
[18:30:19.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.541]        // while-condition  =>  TRUE
[18:30:19.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.543]        // while-condition  =>  TRUE
[18:30:19.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.544]        // while-condition  =>  TRUE
[18:30:19.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.546]        // while-condition  =>  TRUE
[18:30:19.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.547]        // while-condition  =>  TRUE
[18:30:19.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.549]        // while-condition  =>  TRUE
[18:30:19.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.551]        // while-condition  =>  TRUE
[18:30:19.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.553]        // while-condition  =>  TRUE
[18:30:19.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.554]        // while-condition  =>  TRUE
[18:30:19.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.556]        // while-condition  =>  TRUE
[18:30:19.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.559]        // while-condition  =>  TRUE
[18:30:19.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.560]        // while-condition  =>  TRUE
[18:30:19.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.562]        // while-condition  =>  TRUE
[18:30:19.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.564]        // while-condition  =>  TRUE
[18:30:19.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.565]        // while-condition  =>  TRUE
[18:30:19.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.567]        // while-condition  =>  TRUE
[18:30:19.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.572]        // while-condition  =>  TRUE
[18:30:19.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.574]        // while-condition  =>  TRUE
[18:30:19.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.577]        // while-condition  =>  TRUE
[18:30:19.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.578]        // while-condition  =>  TRUE
[18:30:19.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.580]        // while-condition  =>  TRUE
[18:30:19.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:19.583]        // while-condition  =>  TRUE
[18:30:19.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:19.583]        // while  =>  TIMEOUT
[18:30:19.583]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:30:19.583]      </control>
[18:30:19.583]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:30:19.583]        // if-block "(__protocol & 0xFFFF) == 1"
[18:30:19.583]          // =>  FALSE
[18:30:19.583]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:30:19.583]      </control>
[18:30:19.583]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:30:19.583]        // if-block "(__protocol & 0xFFFF) == 2"
[18:30:19.583]          // =>  TRUE
[18:30:19.583]        <block atomic="false" info="">
[18:30:19.583]          Message(0, "executing SWD power up");
[18:30:19.587]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:30:19.592]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:30:19.592]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:30:19.593]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:30:19.593]        </block>
[18:30:19.593]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:30:19.594]      </control>
[18:30:19.594]      // end if-block "powered_down"
[18:30:19.594]    </control>
[18:30:19.594]    <block atomic="false" info="">
[18:30:19.594]      __var DEBUG_PORT_VAL    = 0;
[18:30:19.594]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:30:19.594]      __var ACCESS_POINT_VAL  = 0;
[18:30:19.594]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:30:19.594]      __ap = 1; 
[18:30:19.594]        // -> [__ap <= 0x00000001]
[18:30:19.594]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:30:19.606]  
[18:30:19.606]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[18:30:19.606]  
[18:30:19.608]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:30:19.608]    </block>
[18:30:19.608]  </sequence>
[18:30:19.608]  
[18:30:27.912]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:30:27.912]  
[18:30:27.913]  <debugvars>
[18:30:27.913]    // Pre-defined
[18:30:27.913]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:27.913]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:27.913]    __dp=0x00000000
[18:30:27.913]    __ap=0x00000000
[18:30:27.913]    __traceout=0x00000000      (Trace Disabled)
[18:30:27.913]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:27.913]    __FlashAddr=0x00000000
[18:30:27.913]    __FlashLen=0x00000000
[18:30:27.914]    __FlashArg=0x00000000
[18:30:27.914]    __FlashOp=0x00000000
[18:30:27.914]    __Result=0x00000000
[18:30:27.914]  </debugvars>
[18:30:27.914]  
[18:30:27.914]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:30:27.914]    <block atomic="false" info="">
[18:30:27.914]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:30:27.914]        // -> [isSWJ <= 0x00000001]
[18:30:27.914]      __var hasDormant = __protocol & 0x00020000;
[18:30:27.914]        // -> [hasDormant <= 0x00000000]
[18:30:27.914]      __var protType   = __protocol & 0x0000FFFF;
[18:30:27.914]        // -> [protType <= 0x00000002]
[18:30:27.914]    </block>
[18:30:27.914]    <control if="protType == 1" while="" timeout="0" info="">
[18:30:27.914]      // if-block "protType == 1"
[18:30:27.914]        // =>  FALSE
[18:30:27.916]      // skip if-block "protType == 1"
[18:30:27.916]    </control>
[18:30:27.916]    <control if="protType == 2" while="" timeout="0" info="">
[18:30:27.916]      // if-block "protType == 2"
[18:30:27.916]        // =>  TRUE
[18:30:27.916]      <control if="isSWJ" while="" timeout="0" info="">
[18:30:27.916]        // if-block "isSWJ"
[18:30:27.916]          // =>  TRUE
[18:30:27.916]        <control if="hasDormant" while="" timeout="0" info="">
[18:30:27.916]          // if-block "hasDormant"
[18:30:27.916]            // =>  FALSE
[18:30:27.916]          // skip if-block "hasDormant"
[18:30:27.916]        </control>
[18:30:27.916]        <control if="!hasDormant" while="" timeout="0" info="">
[18:30:27.917]          // if-block "!hasDormant"
[18:30:27.917]            // =>  TRUE
[18:30:27.917]          <block atomic="false" info="">
[18:30:27.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:30:27.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:27.919]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:30:27.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:30:27.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:30:27.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:27.925]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:30:27.929]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:30:27.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:30:27.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:27.931]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:30:27.932]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:30:27.932]          </block>
[18:30:27.932]          // end if-block "!hasDormant"
[18:30:27.932]        </control>
[18:30:27.932]        // end if-block "isSWJ"
[18:30:27.932]      </control>
[18:30:27.932]      <control if="!isSWJ" while="" timeout="0" info="">
[18:30:27.932]        // if-block "!isSWJ"
[18:30:27.932]          // =>  FALSE
[18:30:27.932]        // skip if-block "!isSWJ"
[18:30:27.932]      </control>
[18:30:27.932]      <block atomic="false" info="">
[18:30:27.933]        ReadDP(0x0);
[18:30:27.939]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:30:27.939]      </block>
[18:30:27.939]      // end if-block "protType == 2"
[18:30:27.939]    </control>
[18:30:27.939]  </sequence>
[18:30:27.939]  
[18:30:27.942]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:30:27.942]  
[18:30:27.942]  <debugvars>
[18:30:27.942]    // Pre-defined
[18:30:27.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:27.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:27.942]    __dp=0x00000000
[18:30:27.942]    __ap=0x00000000
[18:30:27.943]    __traceout=0x00000000      (Trace Disabled)
[18:30:27.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:27.943]    __FlashAddr=0x00000000
[18:30:27.943]    __FlashLen=0x00000000
[18:30:27.943]    __FlashArg=0x00000000
[18:30:27.943]    __FlashOp=0x00000000
[18:30:27.943]    __Result=0x00000000
[18:30:27.943]  </debugvars>
[18:30:27.943]  
[18:30:27.943]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:30:27.943]    <block atomic="false" info="">
[18:30:27.944]      __var SW_DP_ABORT       = 0x0;
[18:30:27.944]        // -> [SW_DP_ABORT <= 0x00000000]
[18:30:27.944]      __var DP_CTRL_STAT      = 0x4;
[18:30:27.944]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:30:27.944]      __var DP_SELECT         = 0x8;
[18:30:27.944]        // -> [DP_SELECT <= 0x00000008]
[18:30:27.944]      __var powered_down      = 0;
[18:30:27.944]        // -> [powered_down <= 0x00000000]
[18:30:27.944]      WriteDP(DP_SELECT, 0x00000000);
[18:30:27.949]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:30:27.949]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:30:27.951]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:30:27.951]        // -> [powered_down <= 0x00000001]
[18:30:27.951]    </block>
[18:30:27.951]    <control if="powered_down" while="" timeout="0" info="">
[18:30:27.952]      // if-block "powered_down"
[18:30:27.952]        // =>  TRUE
[18:30:27.952]      <block atomic="false" info="">
[18:30:27.952]        Message(0, "Debug/System power-up request sent");
[18:30:27.954]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:30:27.955]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:30:27.956]      </block>
[18:30:27.956]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:30:27.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.957]        // while-condition  =>  TRUE
[18:30:27.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.959]        // while-condition  =>  TRUE
[18:30:27.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.961]        // while-condition  =>  TRUE
[18:30:27.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.962]        // while-condition  =>  TRUE
[18:30:27.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.965]        // while-condition  =>  TRUE
[18:30:27.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.966]        // while-condition  =>  TRUE
[18:30:27.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.967]        // while-condition  =>  TRUE
[18:30:27.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.971]        // while-condition  =>  TRUE
[18:30:27.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.973]        // while-condition  =>  TRUE
[18:30:27.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.976]        // while-condition  =>  TRUE
[18:30:27.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.982]        // while-condition  =>  TRUE
[18:30:27.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.983]        // while-condition  =>  TRUE
[18:30:27.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.986]        // while-condition  =>  TRUE
[18:30:27.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.988]        // while-condition  =>  TRUE
[18:30:27.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.990]        // while-condition  =>  TRUE
[18:30:27.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.993]        // while-condition  =>  TRUE
[18:30:27.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:27.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:27.994]        // while-condition  =>  TRUE
[18:30:27.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.001]        // while-condition  =>  TRUE
[18:30:28.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.004]        // while-condition  =>  TRUE
[18:30:28.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.006]        // while-condition  =>  TRUE
[18:30:28.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.008]        // while-condition  =>  TRUE
[18:30:28.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.010]        // while-condition  =>  TRUE
[18:30:28.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.011]        // while-condition  =>  TRUE
[18:30:28.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.013]        // while-condition  =>  TRUE
[18:30:28.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.015]        // while-condition  =>  TRUE
[18:30:28.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.016]        // while-condition  =>  TRUE
[18:30:28.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.018]        // while-condition  =>  TRUE
[18:30:28.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.020]        // while-condition  =>  TRUE
[18:30:28.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.022]        // while-condition  =>  TRUE
[18:30:28.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.023]        // while-condition  =>  TRUE
[18:30:28.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.025]        // while-condition  =>  TRUE
[18:30:28.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.027]        // while-condition  =>  TRUE
[18:30:28.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.029]        // while-condition  =>  TRUE
[18:30:28.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.031]        // while-condition  =>  TRUE
[18:30:28.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.033]        // while-condition  =>  TRUE
[18:30:28.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.035]        // while-condition  =>  TRUE
[18:30:28.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.045]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.045]        // while-condition  =>  TRUE
[18:30:28.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.049]        // while-condition  =>  TRUE
[18:30:28.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.050]        // while-condition  =>  TRUE
[18:30:28.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.052]        // while-condition  =>  TRUE
[18:30:28.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.054]        // while-condition  =>  TRUE
[18:30:28.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.059]        // while-condition  =>  TRUE
[18:30:28.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.060]        // while-condition  =>  TRUE
[18:30:28.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.065]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.065]        // while-condition  =>  TRUE
[18:30:28.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.067]        // while-condition  =>  TRUE
[18:30:28.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.068]        // while-condition  =>  TRUE
[18:30:28.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.070]        // while-condition  =>  TRUE
[18:30:28.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.071]        // while-condition  =>  TRUE
[18:30:28.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.079]        // while-condition  =>  TRUE
[18:30:28.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.081]        // while-condition  =>  TRUE
[18:30:28.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.082]        // while-condition  =>  TRUE
[18:30:28.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.084]        // while-condition  =>  TRUE
[18:30:28.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.085]        // while-condition  =>  TRUE
[18:30:28.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.088]        // while-condition  =>  TRUE
[18:30:28.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.092]        // while-condition  =>  TRUE
[18:30:28.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.093]        // while-condition  =>  TRUE
[18:30:28.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.099]        // while-condition  =>  TRUE
[18:30:28.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.100]        // while-condition  =>  TRUE
[18:30:28.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.102]        // while-condition  =>  TRUE
[18:30:28.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.106]        // while-condition  =>  TRUE
[18:30:28.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.108]        // while-condition  =>  TRUE
[18:30:28.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.110]        // while-condition  =>  TRUE
[18:30:28.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.112]        // while-condition  =>  TRUE
[18:30:28.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.115]        // while-condition  =>  TRUE
[18:30:28.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.117]        // while-condition  =>  TRUE
[18:30:28.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.122]        // while-condition  =>  TRUE
[18:30:28.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.124]        // while-condition  =>  TRUE
[18:30:28.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.126]        // while-condition  =>  TRUE
[18:30:28.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.132]        // while-condition  =>  TRUE
[18:30:28.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.134]        // while-condition  =>  TRUE
[18:30:28.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.137]        // while-condition  =>  TRUE
[18:30:28.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.139]        // while-condition  =>  TRUE
[18:30:28.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.142]        // while-condition  =>  TRUE
[18:30:28.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.146]        // while-condition  =>  TRUE
[18:30:28.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.148]        // while-condition  =>  TRUE
[18:30:28.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.149]        // while-condition  =>  TRUE
[18:30:28.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.151]        // while-condition  =>  TRUE
[18:30:28.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.154]        // while-condition  =>  TRUE
[18:30:28.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.156]        // while-condition  =>  TRUE
[18:30:28.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.159]        // while-condition  =>  TRUE
[18:30:28.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.162]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.163]        // while-condition  =>  TRUE
[18:30:28.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.164]        // while-condition  =>  TRUE
[18:30:28.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.168]        // while-condition  =>  TRUE
[18:30:28.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.172]        // while-condition  =>  TRUE
[18:30:28.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.174]        // while-condition  =>  TRUE
[18:30:28.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.176]        // while-condition  =>  TRUE
[18:30:28.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.179]        // while-condition  =>  TRUE
[18:30:28.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.184]        // while-condition  =>  TRUE
[18:30:28.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.187]        // while-condition  =>  TRUE
[18:30:28.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.189]        // while-condition  =>  TRUE
[18:30:28.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.191]        // while-condition  =>  TRUE
[18:30:28.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.194]        // while-condition  =>  TRUE
[18:30:28.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.195]        // while-condition  =>  TRUE
[18:30:28.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.197]        // while-condition  =>  TRUE
[18:30:28.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.198]        // while-condition  =>  TRUE
[18:30:28.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.200]        // while-condition  =>  TRUE
[18:30:28.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.201]        // while-condition  =>  TRUE
[18:30:28.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.203]        // while-condition  =>  TRUE
[18:30:28.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.206]        // while-condition  =>  TRUE
[18:30:28.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.207]        // while-condition  =>  TRUE
[18:30:28.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.210]        // while-condition  =>  TRUE
[18:30:28.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.214]        // while-condition  =>  TRUE
[18:30:28.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.216]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.216]        // while-condition  =>  TRUE
[18:30:28.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.221]        // while-condition  =>  TRUE
[18:30:28.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.223]        // while-condition  =>  TRUE
[18:30:28.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.224]        // while-condition  =>  TRUE
[18:30:28.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.230]        // while-condition  =>  TRUE
[18:30:28.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.231]        // while-condition  =>  TRUE
[18:30:28.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.233]        // while-condition  =>  TRUE
[18:30:28.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.235]        // while-condition  =>  TRUE
[18:30:28.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.237]        // while-condition  =>  TRUE
[18:30:28.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.238]        // while-condition  =>  TRUE
[18:30:28.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.240]        // while-condition  =>  TRUE
[18:30:28.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.242]        // while-condition  =>  TRUE
[18:30:28.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.243]        // while-condition  =>  TRUE
[18:30:28.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.245]        // while-condition  =>  TRUE
[18:30:28.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.247]        // while-condition  =>  TRUE
[18:30:28.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.249]        // while-condition  =>  TRUE
[18:30:28.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.250]        // while-condition  =>  TRUE
[18:30:28.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.253]        // while-condition  =>  TRUE
[18:30:28.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.254]        // while-condition  =>  TRUE
[18:30:28.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.256]        // while-condition  =>  TRUE
[18:30:28.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.258]        // while-condition  =>  TRUE
[18:30:28.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.265]        // while-condition  =>  TRUE
[18:30:28.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.267]        // while-condition  =>  TRUE
[18:30:28.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.273]        // while-condition  =>  TRUE
[18:30:28.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.275]        // while-condition  =>  TRUE
[18:30:28.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.279]        // while-condition  =>  TRUE
[18:30:28.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.281]        // while-condition  =>  TRUE
[18:30:28.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.282]        // while-condition  =>  TRUE
[18:30:28.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.286]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.286]        // while-condition  =>  TRUE
[18:30:28.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.288]        // while-condition  =>  TRUE
[18:30:28.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.289]        // while-condition  =>  TRUE
[18:30:28.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.291]        // while-condition  =>  TRUE
[18:30:28.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.292]        // while-condition  =>  TRUE
[18:30:28.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.294]        // while-condition  =>  TRUE
[18:30:28.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.295]        // while-condition  =>  TRUE
[18:30:28.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.297]        // while-condition  =>  TRUE
[18:30:28.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.298]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.299]        // while-condition  =>  TRUE
[18:30:28.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.300]        // while-condition  =>  TRUE
[18:30:28.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.304]        // while-condition  =>  TRUE
[18:30:28.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.306]        // while-condition  =>  TRUE
[18:30:28.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.307]        // while-condition  =>  TRUE
[18:30:28.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.309]        // while-condition  =>  TRUE
[18:30:28.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.311]        // while-condition  =>  TRUE
[18:30:28.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.315]        // while-condition  =>  TRUE
[18:30:28.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.317]        // while-condition  =>  TRUE
[18:30:28.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.318]        // while-condition  =>  TRUE
[18:30:28.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.320]        // while-condition  =>  TRUE
[18:30:28.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.321]        // while-condition  =>  TRUE
[18:30:28.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.324]        // while-condition  =>  TRUE
[18:30:28.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.325]        // while-condition  =>  TRUE
[18:30:28.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.327]        // while-condition  =>  TRUE
[18:30:28.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.330]        // while-condition  =>  TRUE
[18:30:28.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.332]        // while-condition  =>  TRUE
[18:30:28.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.333]        // while-condition  =>  TRUE
[18:30:28.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.335]        // while-condition  =>  TRUE
[18:30:28.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.336]        // while-condition  =>  TRUE
[18:30:28.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.339]        // while-condition  =>  TRUE
[18:30:28.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.340]        // while-condition  =>  TRUE
[18:30:28.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.342]        // while-condition  =>  TRUE
[18:30:28.342]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.343]        // while-condition  =>  TRUE
[18:30:28.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.345]        // while-condition  =>  TRUE
[18:30:28.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.347]        // while-condition  =>  TRUE
[18:30:28.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.348]        // while-condition  =>  TRUE
[18:30:28.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.350]        // while-condition  =>  TRUE
[18:30:28.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.351]        // while-condition  =>  TRUE
[18:30:28.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.353]        // while-condition  =>  TRUE
[18:30:28.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.354]        // while-condition  =>  TRUE
[18:30:28.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.356]        // while-condition  =>  TRUE
[18:30:28.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.358]        // while-condition  =>  TRUE
[18:30:28.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.359]        // while-condition  =>  TRUE
[18:30:28.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.364]        // while-condition  =>  TRUE
[18:30:28.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.367]        // while-condition  =>  TRUE
[18:30:28.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.370]        // while-condition  =>  TRUE
[18:30:28.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.371]        // while-condition  =>  TRUE
[18:30:28.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.373]        // while-condition  =>  TRUE
[18:30:28.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.377]        // while-condition  =>  TRUE
[18:30:28.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.385]        // while-condition  =>  TRUE
[18:30:28.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.387]        // while-condition  =>  TRUE
[18:30:28.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.389]        // while-condition  =>  TRUE
[18:30:28.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.391]        // while-condition  =>  TRUE
[18:30:28.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.394]        // while-condition  =>  TRUE
[18:30:28.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.397]        // while-condition  =>  TRUE
[18:30:28.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.403]        // while-condition  =>  TRUE
[18:30:28.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.404]        // while-condition  =>  TRUE
[18:30:28.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.406]        // while-condition  =>  TRUE
[18:30:28.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.408]        // while-condition  =>  TRUE
[18:30:28.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.413]        // while-condition  =>  TRUE
[18:30:28.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.416]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.416]        // while-condition  =>  TRUE
[18:30:28.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.419]        // while-condition  =>  TRUE
[18:30:28.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.421]        // while-condition  =>  TRUE
[18:30:28.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.429]        // while-condition  =>  TRUE
[18:30:28.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.431]        // while-condition  =>  TRUE
[18:30:28.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.433]        // while-condition  =>  TRUE
[18:30:28.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.435]        // while-condition  =>  TRUE
[18:30:28.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.437]        // while-condition  =>  TRUE
[18:30:28.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.439]        // while-condition  =>  TRUE
[18:30:28.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.440]        // while-condition  =>  TRUE
[18:30:28.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.451]        // while-condition  =>  TRUE
[18:30:28.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.453]        // while-condition  =>  TRUE
[18:30:28.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.458]        // while-condition  =>  TRUE
[18:30:28.458]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.464]        // while-condition  =>  TRUE
[18:30:28.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.470]        // while-condition  =>  TRUE
[18:30:28.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.474]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.475]        // while-condition  =>  TRUE
[18:30:28.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.477]        // while-condition  =>  TRUE
[18:30:28.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.479]        // while-condition  =>  TRUE
[18:30:28.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.480]        // while-condition  =>  TRUE
[18:30:28.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.482]        // while-condition  =>  TRUE
[18:30:28.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.483]        // while-condition  =>  TRUE
[18:30:28.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.485]        // while-condition  =>  TRUE
[18:30:28.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.487]        // while-condition  =>  TRUE
[18:30:28.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.488]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.489]        // while-condition  =>  TRUE
[18:30:28.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.490]        // while-condition  =>  TRUE
[18:30:28.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.492]        // while-condition  =>  TRUE
[18:30:28.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.494]        // while-condition  =>  TRUE
[18:30:28.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.496]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.496]        // while-condition  =>  TRUE
[18:30:28.496]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.497]        // while-condition  =>  TRUE
[18:30:28.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.499]        // while-condition  =>  TRUE
[18:30:28.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.501]        // while-condition  =>  TRUE
[18:30:28.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.503]        // while-condition  =>  TRUE
[18:30:28.503]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.505]        // while-condition  =>  TRUE
[18:30:28.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.511]        // while-condition  =>  TRUE
[18:30:28.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.512]        // while-condition  =>  TRUE
[18:30:28.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.514]        // while-condition  =>  TRUE
[18:30:28.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.516]        // while-condition  =>  TRUE
[18:30:28.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.518]        // while-condition  =>  TRUE
[18:30:28.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.520]        // while-condition  =>  TRUE
[18:30:28.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.521]        // while-condition  =>  TRUE
[18:30:28.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.523]        // while-condition  =>  TRUE
[18:30:28.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.524]        // while-condition  =>  TRUE
[18:30:28.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.526]        // while-condition  =>  TRUE
[18:30:28.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.527]        // while-condition  =>  TRUE
[18:30:28.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.530]        // while-condition  =>  TRUE
[18:30:28.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.531]        // while-condition  =>  TRUE
[18:30:28.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.533]        // while-condition  =>  TRUE
[18:30:28.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.535]        // while-condition  =>  TRUE
[18:30:28.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.537]        // while-condition  =>  TRUE
[18:30:28.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.538]        // while-condition  =>  TRUE
[18:30:28.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.540]        // while-condition  =>  TRUE
[18:30:28.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.541]        // while-condition  =>  TRUE
[18:30:28.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.543]        // while-condition  =>  TRUE
[18:30:28.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.544]        // while-condition  =>  TRUE
[18:30:28.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.546]        // while-condition  =>  TRUE
[18:30:28.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.547]        // while-condition  =>  TRUE
[18:30:28.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.549]        // while-condition  =>  TRUE
[18:30:28.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.551]        // while-condition  =>  TRUE
[18:30:28.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.555]        // while-condition  =>  TRUE
[18:30:28.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.557]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.557]        // while-condition  =>  TRUE
[18:30:28.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.558]        // while-condition  =>  TRUE
[18:30:28.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.560]        // while-condition  =>  TRUE
[18:30:28.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.562]        // while-condition  =>  TRUE
[18:30:28.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.563]        // while-condition  =>  TRUE
[18:30:28.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.567]        // while-condition  =>  TRUE
[18:30:28.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.569]        // while-condition  =>  TRUE
[18:30:28.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.573]        // while-condition  =>  TRUE
[18:30:28.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.580]        // while-condition  =>  TRUE
[18:30:28.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.581]        // while-condition  =>  TRUE
[18:30:28.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.583]        // while-condition  =>  TRUE
[18:30:28.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.585]        // while-condition  =>  TRUE
[18:30:28.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.590]        // while-condition  =>  TRUE
[18:30:28.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.594]        // while-condition  =>  TRUE
[18:30:28.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.596]        // while-condition  =>  TRUE
[18:30:28.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.598]        // while-condition  =>  TRUE
[18:30:28.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.603]        // while-condition  =>  TRUE
[18:30:28.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.605]        // while-condition  =>  TRUE
[18:30:28.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.606]        // while-condition  =>  TRUE
[18:30:28.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.608]        // while-condition  =>  TRUE
[18:30:28.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.609]        // while-condition  =>  TRUE
[18:30:28.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.611]        // while-condition  =>  TRUE
[18:30:28.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.614]        // while-condition  =>  TRUE
[18:30:28.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.616]        // while-condition  =>  TRUE
[18:30:28.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.619]        // while-condition  =>  TRUE
[18:30:28.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.620]        // while-condition  =>  TRUE
[18:30:28.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.624]        // while-condition  =>  TRUE
[18:30:28.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.631]        // while-condition  =>  TRUE
[18:30:28.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.632]        // while-condition  =>  TRUE
[18:30:28.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.634]        // while-condition  =>  TRUE
[18:30:28.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.635]        // while-condition  =>  TRUE
[18:30:28.635]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.638]        // while-condition  =>  TRUE
[18:30:28.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.639]        // while-condition  =>  TRUE
[18:30:28.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.641]        // while-condition  =>  TRUE
[18:30:28.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.643]        // while-condition  =>  TRUE
[18:30:28.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.644]        // while-condition  =>  TRUE
[18:30:28.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.647]        // while-condition  =>  TRUE
[18:30:28.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.649]        // while-condition  =>  TRUE
[18:30:28.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.650]        // while-condition  =>  TRUE
[18:30:28.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.652]        // while-condition  =>  TRUE
[18:30:28.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.653]        // while-condition  =>  TRUE
[18:30:28.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.655]        // while-condition  =>  TRUE
[18:30:28.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.656]        // while-condition  =>  TRUE
[18:30:28.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.658]        // while-condition  =>  TRUE
[18:30:28.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.660]        // while-condition  =>  TRUE
[18:30:28.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.663]        // while-condition  =>  TRUE
[18:30:28.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.665]        // while-condition  =>  TRUE
[18:30:28.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.666]        // while-condition  =>  TRUE
[18:30:28.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.668]        // while-condition  =>  TRUE
[18:30:28.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.669]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.670]        // while-condition  =>  TRUE
[18:30:28.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.672]        // while-condition  =>  TRUE
[18:30:28.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.676]        // while-condition  =>  TRUE
[18:30:28.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.682]        // while-condition  =>  TRUE
[18:30:28.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.684]        // while-condition  =>  TRUE
[18:30:28.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.685]        // while-condition  =>  TRUE
[18:30:28.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.687]        // while-condition  =>  TRUE
[18:30:28.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.689]        // while-condition  =>  TRUE
[18:30:28.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.690]        // while-condition  =>  TRUE
[18:30:28.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.696]        // while-condition  =>  TRUE
[18:30:28.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.705]        // while-condition  =>  TRUE
[18:30:28.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.708]        // while-condition  =>  TRUE
[18:30:28.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.709]        // while-condition  =>  TRUE
[18:30:28.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.711]        // while-condition  =>  TRUE
[18:30:28.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.712]        // while-condition  =>  TRUE
[18:30:28.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.714]        // while-condition  =>  TRUE
[18:30:28.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.715]        // while-condition  =>  TRUE
[18:30:28.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.716]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.716]        // while-condition  =>  TRUE
[18:30:28.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.720]        // while-condition  =>  TRUE
[18:30:28.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.723]        // while-condition  =>  TRUE
[18:30:28.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.726]        // while-condition  =>  TRUE
[18:30:28.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.728]        // while-condition  =>  TRUE
[18:30:28.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.732]        // while-condition  =>  TRUE
[18:30:28.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.735]        // while-condition  =>  TRUE
[18:30:28.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.736]        // while-condition  =>  TRUE
[18:30:28.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.738]        // while-condition  =>  TRUE
[18:30:28.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.739]        // while-condition  =>  TRUE
[18:30:28.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.742]        // while-condition  =>  TRUE
[18:30:28.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.746]        // while-condition  =>  TRUE
[18:30:28.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.748]        // while-condition  =>  TRUE
[18:30:28.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.753]        // while-condition  =>  TRUE
[18:30:28.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.755]        // while-condition  =>  TRUE
[18:30:28.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.760]        // while-condition  =>  TRUE
[18:30:28.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.762]        // while-condition  =>  TRUE
[18:30:28.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.765]        // while-condition  =>  TRUE
[18:30:28.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.766]        // while-condition  =>  TRUE
[18:30:28.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.768]        // while-condition  =>  TRUE
[18:30:28.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.769]        // while-condition  =>  TRUE
[18:30:28.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.776]        // while-condition  =>  TRUE
[18:30:28.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.778]        // while-condition  =>  TRUE
[18:30:28.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.779]        // while-condition  =>  TRUE
[18:30:28.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.781]        // while-condition  =>  TRUE
[18:30:28.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.783]        // while-condition  =>  TRUE
[18:30:28.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.784]        // while-condition  =>  TRUE
[18:30:28.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.787]        // while-condition  =>  TRUE
[18:30:28.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.789]        // while-condition  =>  TRUE
[18:30:28.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.790]        // while-condition  =>  TRUE
[18:30:28.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.793]        // while-condition  =>  TRUE
[18:30:28.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.794]        // while-condition  =>  TRUE
[18:30:28.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.798]        // while-condition  =>  TRUE
[18:30:28.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.803]        // while-condition  =>  TRUE
[18:30:28.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.809]        // while-condition  =>  TRUE
[18:30:28.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.813]        // while-condition  =>  TRUE
[18:30:28.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.815]        // while-condition  =>  TRUE
[18:30:28.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.817]        // while-condition  =>  TRUE
[18:30:28.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.818]        // while-condition  =>  TRUE
[18:30:28.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.820]        // while-condition  =>  TRUE
[18:30:28.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.822]        // while-condition  =>  TRUE
[18:30:28.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.829]        // while-condition  =>  TRUE
[18:30:28.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.831]        // while-condition  =>  TRUE
[18:30:28.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.841]        // while-condition  =>  TRUE
[18:30:28.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.843]        // while-condition  =>  TRUE
[18:30:28.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.844]        // while-condition  =>  TRUE
[18:30:28.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.846]        // while-condition  =>  TRUE
[18:30:28.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.850]        // while-condition  =>  TRUE
[18:30:28.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.851]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.851]        // while-condition  =>  TRUE
[18:30:28.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.853]        // while-condition  =>  TRUE
[18:30:28.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.855]        // while-condition  =>  TRUE
[18:30:28.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.858]        // while-condition  =>  TRUE
[18:30:28.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.859]        // while-condition  =>  TRUE
[18:30:28.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.861]        // while-condition  =>  TRUE
[18:30:28.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.863]        // while-condition  =>  TRUE
[18:30:28.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.864]        // while-condition  =>  TRUE
[18:30:28.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.866]        // while-condition  =>  TRUE
[18:30:28.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.867]        // while-condition  =>  TRUE
[18:30:28.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.869]        // while-condition  =>  TRUE
[18:30:28.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.871]        // while-condition  =>  TRUE
[18:30:28.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.875]        // while-condition  =>  TRUE
[18:30:28.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.878]        // while-condition  =>  TRUE
[18:30:28.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.883]        // while-condition  =>  TRUE
[18:30:28.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.885]        // while-condition  =>  TRUE
[18:30:28.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.887]        // while-condition  =>  TRUE
[18:30:28.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.888]        // while-condition  =>  TRUE
[18:30:28.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.890]        // while-condition  =>  TRUE
[18:30:28.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.892]        // while-condition  =>  TRUE
[18:30:28.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.894]        // while-condition  =>  TRUE
[18:30:28.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.895]        // while-condition  =>  TRUE
[18:30:28.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.897]        // while-condition  =>  TRUE
[18:30:28.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.900]        // while-condition  =>  TRUE
[18:30:28.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.906]        // while-condition  =>  TRUE
[18:30:28.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.908]        // while-condition  =>  TRUE
[18:30:28.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.911]        // while-condition  =>  TRUE
[18:30:28.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.913]        // while-condition  =>  TRUE
[18:30:28.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.920]        // while-condition  =>  TRUE
[18:30:28.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.921]        // while-condition  =>  TRUE
[18:30:28.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.925]        // while-condition  =>  TRUE
[18:30:28.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.933]        // while-condition  =>  TRUE
[18:30:28.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.935]        // while-condition  =>  TRUE
[18:30:28.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.938]        // while-condition  =>  TRUE
[18:30:28.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.941]        // while-condition  =>  TRUE
[18:30:28.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:30:28.947]        // while-condition  =>  TRUE
[18:30:28.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:28.948]        // while  =>  TIMEOUT
[18:30:28.948]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:30:28.948]      </control>
[18:30:28.948]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:30:28.948]        // if-block "(__protocol & 0xFFFF) == 1"
[18:30:28.948]          // =>  FALSE
[18:30:28.948]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:30:28.948]      </control>
[18:30:28.948]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:30:28.948]        // if-block "(__protocol & 0xFFFF) == 2"
[18:30:28.948]          // =>  TRUE
[18:30:28.948]        <block atomic="false" info="">
[18:30:28.948]          Message(0, "executing SWD power up");
[18:30:28.955]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:30:28.957]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:30:28.958]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:30:28.959]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:30:28.959]        </block>
[18:30:28.960]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:30:28.960]      </control>
[18:30:28.960]      // end if-block "powered_down"
[18:30:28.960]    </control>
[18:30:28.960]    <block atomic="false" info="">
[18:30:28.960]      __var DEBUG_PORT_VAL    = 0;
[18:30:28.960]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:30:28.960]      __var ACCESS_POINT_VAL  = 0;
[18:30:28.960]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:30:28.960]      __ap = 1; 
[18:30:28.960]        // -> [__ap <= 0x00000001]
[18:30:28.960]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:30:28.988]  
[18:30:28.988]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[18:30:28.988]  
[18:30:28.989]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:30:28.990]    </block>
[18:30:28.990]  </sequence>
[18:30:28.990]  
[18:30:43.242]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:30:43.242]  
[18:30:43.248]  <debugvars>
[18:30:43.249]    // Pre-defined
[18:30:43.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:43.249]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:43.249]    __dp=0x00000000
[18:30:43.249]    __ap=0x00000000
[18:30:43.249]    __traceout=0x00000000      (Trace Disabled)
[18:30:43.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:43.249]    __FlashAddr=0x00000000
[18:30:43.250]    __FlashLen=0x00000000
[18:30:43.250]    __FlashArg=0x00000000
[18:30:43.250]    __FlashOp=0x00000000
[18:30:43.250]    __Result=0x00000000
[18:30:43.250]  </debugvars>
[18:30:43.250]  
[18:30:43.250]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:30:43.251]    <block atomic="false" info="">
[18:30:43.251]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:30:43.251]        // -> [isSWJ <= 0x00000001]
[18:30:43.251]      __var hasDormant = __protocol & 0x00020000;
[18:30:43.251]        // -> [hasDormant <= 0x00000000]
[18:30:43.252]      __var protType   = __protocol & 0x0000FFFF;
[18:30:43.252]        // -> [protType <= 0x00000002]
[18:30:43.252]    </block>
[18:30:43.252]    <control if="protType == 1" while="" timeout="0" info="">
[18:30:43.253]      // if-block "protType == 1"
[18:30:43.253]        // =>  FALSE
[18:30:43.253]      // skip if-block "protType == 1"
[18:30:43.253]    </control>
[18:30:43.253]    <control if="protType == 2" while="" timeout="0" info="">
[18:30:43.253]      // if-block "protType == 2"
[18:30:43.254]        // =>  TRUE
[18:30:43.254]      <control if="isSWJ" while="" timeout="0" info="">
[18:30:43.254]        // if-block "isSWJ"
[18:30:43.254]          // =>  TRUE
[18:30:43.254]        <control if="hasDormant" while="" timeout="0" info="">
[18:30:43.254]          // if-block "hasDormant"
[18:30:43.254]            // =>  FALSE
[18:30:43.254]          // skip if-block "hasDormant"
[18:30:43.254]        </control>
[18:30:43.254]        <control if="!hasDormant" while="" timeout="0" info="">
[18:30:43.254]          // if-block "!hasDormant"
[18:30:43.255]            // =>  TRUE
[18:30:43.255]          <block atomic="false" info="">
[18:30:43.255]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:30:43.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:43.258]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:30:43.260]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:30:43.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:30:43.266]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:43.266]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:30:43.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:30:43.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:30:43.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:30:43.274]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:30:43.275]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:30:43.276]          </block>
[18:30:43.276]          // end if-block "!hasDormant"
[18:30:43.276]        </control>
[18:30:43.276]        // end if-block "isSWJ"
[18:30:43.276]      </control>
[18:30:43.276]      <control if="!isSWJ" while="" timeout="0" info="">
[18:30:43.276]        // if-block "!isSWJ"
[18:30:43.276]          // =>  FALSE
[18:30:43.276]        // skip if-block "!isSWJ"
[18:30:43.276]      </control>
[18:30:43.276]      <block atomic="false" info="">
[18:30:43.276]        ReadDP(0x0);
[18:30:43.280]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:30:43.280]      </block>
[18:30:43.280]      // end if-block "protType == 2"
[18:30:43.280]    </control>
[18:30:43.280]  </sequence>
[18:30:43.280]  
[18:30:43.284]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:30:43.284]  
[18:30:43.284]  <debugvars>
[18:30:43.284]    // Pre-defined
[18:30:43.284]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:43.284]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:43.284]    __dp=0x00000000
[18:30:43.285]    __ap=0x00000000
[18:30:43.285]    __traceout=0x00000000      (Trace Disabled)
[18:30:43.285]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:43.285]    __FlashAddr=0x00000000
[18:30:43.285]    __FlashLen=0x00000000
[18:30:43.286]    __FlashArg=0x00000000
[18:30:43.286]    __FlashOp=0x00000000
[18:30:43.286]    __Result=0x00000000
[18:30:43.286]  </debugvars>
[18:30:43.286]  
[18:30:43.286]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:30:43.286]    <block atomic="false" info="">
[18:30:43.287]      __var SW_DP_ABORT       = 0x0;
[18:30:43.287]        // -> [SW_DP_ABORT <= 0x00000000]
[18:30:43.287]      __var DP_CTRL_STAT      = 0x4;
[18:30:43.287]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:30:43.287]      __var DP_SELECT         = 0x8;
[18:30:43.287]        // -> [DP_SELECT <= 0x00000008]
[18:30:43.287]      __var powered_down      = 0;
[18:30:43.287]        // -> [powered_down <= 0x00000000]
[18:30:43.287]      WriteDP(DP_SELECT, 0x00000000);
[18:30:43.290]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:30:43.290]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:30:43.291]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:30:43.291]        // -> [powered_down <= 0x00000001]
[18:30:43.291]    </block>
[18:30:43.291]    <control if="powered_down" while="" timeout="0" info="">
[18:30:43.291]      // if-block "powered_down"
[18:30:43.291]        // =>  TRUE
[18:30:43.291]      <block atomic="false" info="">
[18:30:43.291]        Message(0, "Debug/System power-up request sent");
[18:30:43.294]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:30:43.302]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:30:43.302]      </block>
[18:30:43.302]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:30:43.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:30:43.304]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:30:43.304]        // while-condition  =>  FALSE
[18:30:43.304]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:30:43.304]      </control>
[18:30:43.304]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:30:43.304]        // if-block "(__protocol & 0xFFFF) == 1"
[18:30:43.304]          // =>  FALSE
[18:30:43.305]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:30:43.305]      </control>
[18:30:43.305]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:30:43.305]        // if-block "(__protocol & 0xFFFF) == 2"
[18:30:43.305]          // =>  TRUE
[18:30:43.305]        <block atomic="false" info="">
[18:30:43.305]          Message(0, "executing SWD power up");
[18:30:43.308]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:30:43.310]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:30:43.310]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:30:43.312]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:30:43.312]        </block>
[18:30:43.312]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:30:43.312]      </control>
[18:30:43.312]      // end if-block "powered_down"
[18:30:43.312]    </control>
[18:30:43.313]    <block atomic="false" info="">
[18:30:43.313]      __var DEBUG_PORT_VAL    = 0;
[18:30:43.313]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:30:43.313]      __var ACCESS_POINT_VAL  = 0;
[18:30:43.313]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:30:43.313]      __ap = 1; 
[18:30:43.313]        // -> [__ap <= 0x00000001]
[18:30:43.314]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:30:43.317]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:30:43.317]      __ap = 4;
[18:30:43.317]        // -> [__ap <= 0x00000004]
[18:30:43.318]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:30:43.324]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:30:43.325]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:30:43.325]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:30:43.326]    </block>
[18:30:43.327]    <block atomic="false" info="">
[18:30:43.328]      __var nReset = 0x80;
[18:30:43.328]        // -> [nReset <= 0x00000080]
[18:30:43.328]      __var canReadPins = 0;
[18:30:43.328]        // -> [canReadPins <= 0x00000000]
[18:30:43.328]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:30:43.332]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:30:43.332]        // -> [canReadPins <= 0x00000001]
[18:30:43.332]    </block>
[18:30:43.332]    <control if="" while="1" timeout="200" info="">
[18:30:43.332]      // while "1"  (timeout="200")
[18:30:43.332]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.333]      // while-condition  =>  TRUE
[18:30:43.333]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.334]      // while-condition  =>  TRUE
[18:30:43.334]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.335]      // while "1"  (timeout="200")
[18:30:43.335]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.336]      // while "1"  (timeout="200")
[18:30:43.336]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.337]      // while "1"  (timeout="200")
[18:30:43.337]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.338]      // while-condition  =>  TRUE
[18:30:43.338]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.339]      // while "1"  (timeout="200")
[18:30:43.339]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.340]      // while "1"  (timeout="200")
[18:30:43.340]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.341]      // while "1"  (timeout="200")
[18:30:43.341]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.342]      // while "1"  (timeout="200")
[18:30:43.342]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.343]      // while "1"  (timeout="200")
[18:30:43.343]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.344]      // while-condition  =>  TRUE
[18:30:43.344]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.345]      // while "1"  (timeout="200")
[18:30:43.345]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.346]      // while-condition  =>  TRUE
[18:30:43.346]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.347]      // while "1"  (timeout="200")
[18:30:43.347]      // while-condition  =>  TRUE
[18:30:43.348]      // while "1"  (timeout="200")
[18:30:43.348]      // while  =>  TIMEOUT
[18:30:43.348]      // end while "1"
[18:30:43.348]    </control>
[18:30:43.348]    <control if="canReadPins" while="" timeout="0" info="">
[18:30:43.348]      // if-block "canReadPins"
[18:30:43.348]        // =>  TRUE
[18:30:43.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:30:43.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:30:43.349]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:30:43.349]        // while-condition  =>  FALSE
[18:30:43.349]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:30:43.350]      </control>
[18:30:43.350]      // end if-block "canReadPins"
[18:30:43.350]    </control>
[18:30:43.350]    <control if="!canReadPins" while="" timeout="0" info="">
[18:30:43.350]      // if-block "!canReadPins"
[18:30:43.350]        // =>  FALSE
[18:30:43.350]      // skip if-block "!canReadPins"
[18:30:43.350]    </control>
[18:30:43.350]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:30:43.350]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:30:43.350]        // =>  TRUE
[18:30:43.350]      <block atomic="false" info="">
[18:30:43.350]        WriteAP(0x00, 0x190008);
[18:30:43.352]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:30:43.352]        WriteAP(0xF0, 0x01);
[18:30:43.365]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:30:43.365]      </block>
[18:30:43.365]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:30:43.365]    </control>
[18:30:43.365]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:30:43.365]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:30:43.365]        // =>  FALSE
[18:30:43.365]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:30:43.365]    </control>
[18:30:43.365]    <block atomic="false" info="">
[18:30:43.365]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:30:43.370]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:30:43.370]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:30:43.370]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:30:43.372]      __ap = 0; //lets make sure we reset the access point selection
[18:30:43.372]        // -> [__ap <= 0x00000000]
[18:30:43.372]    </block>
[18:30:43.372]  </sequence>
[18:30:43.372]  
[18:30:43.400]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:30:43.400]  
[18:30:43.400]  <debugvars>
[18:30:43.400]    // Pre-defined
[18:30:43.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:30:43.400]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:30:43.401]    __dp=0x00000000
[18:30:43.401]    __ap=0x00000000
[18:30:43.401]    __traceout=0x00000000      (Trace Disabled)
[18:30:43.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:30:43.401]    __FlashAddr=0x00000000
[18:30:43.401]    __FlashLen=0x00000000
[18:30:43.401]    __FlashArg=0x00000000
[18:30:43.401]    __FlashOp=0x00000000
[18:30:43.401]    __Result=0x00000000
[18:30:43.401]  </debugvars>
[18:30:43.401]  
[18:30:43.401]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:30:43.401]    <block atomic="false" info="">
[18:30:43.401]      __var deviceID = 0;
[18:30:43.401]        // -> [deviceID <= 0x00000000]
[18:30:43.401]      __var version = 0;
[18:30:43.401]        // -> [version <= 0x00000000]
[18:30:43.401]      __var partNum = 0;
[18:30:43.401]        // -> [partNum <= 0x00000000]
[18:30:43.401]      __var manuf = 0;
[18:30:43.401]        // -> [manuf <= 0x00000000]
[18:30:43.401]      __var isMSPM0G1X0X_G3X0X = 0;
[18:30:43.401]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:30:43.401]      __var isProduction = 0;
[18:30:43.401]        // -> [isProduction <= 0x00000000]
[18:30:43.402]      __var continueId = 0;
[18:30:43.402]        // -> [continueId <= 0x00000000]
[18:30:43.402]      deviceID =   Read32(0x41C40004);
[18:30:43.409]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:30:43.409]        // -> [deviceID <= 0x2BB8802F]
[18:30:43.409]      version = deviceID >> 28;
[18:30:43.409]        // -> [version <= 0x00000002]
[18:30:43.409]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:30:43.409]        // -> [partNum <= 0x0000BB88]
[18:30:43.409]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:30:43.409]        // -> [manuf <= 0x00000017]
[18:30:43.409]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:30:43.409]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:30:43.409]      isProduction = (version > 0);
[18:30:43.409]        // -> [isProduction <= 0x00000001]
[18:30:43.409]    </block>
[18:30:43.409]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:30:43.409]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:30:43.409]        // =>  FALSE
[18:30:43.410]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:30:43.410]    </control>
[18:30:43.410]    <control if="continueId == 4" while="" timeout="0" info="">
[18:30:43.410]      // if-block "continueId == 4"
[18:30:43.410]        // =>  FALSE
[18:30:43.410]      // skip if-block "continueId == 4"
[18:30:43.410]    </control>
[18:30:43.410]    <control if="!isProduction" while="" timeout="0" info="">
[18:30:43.410]      // if-block "!isProduction"
[18:30:43.410]        // =>  FALSE
[18:30:43.410]      // skip if-block "!isProduction"
[18:30:43.410]    </control>
[18:30:43.410]  </sequence>
[18:30:43.410]  
[18:33:33.448]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:33:33.448]  
[18:33:33.448]  <debugvars>
[18:33:33.449]    // Pre-defined
[18:33:33.449]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:33:33.449]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:33:33.449]    __dp=0x00000000
[18:33:33.449]    __ap=0x00000000
[18:33:33.449]    __traceout=0x00000000      (Trace Disabled)
[18:33:33.449]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:33:33.449]    __FlashAddr=0x00000000
[18:33:33.449]    __FlashLen=0x00000000
[18:33:33.449]    __FlashArg=0x00000000
[18:33:33.449]    __FlashOp=0x00000000
[18:33:33.449]    __Result=0x00000000
[18:33:33.449]  </debugvars>
[18:33:33.449]  
[18:33:33.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:33:33.450]    <block atomic="false" info="">
[18:33:33.450]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:33:33.450]        // -> [isSWJ <= 0x00000001]
[18:33:33.450]      __var hasDormant = __protocol & 0x00020000;
[18:33:33.450]        // -> [hasDormant <= 0x00000000]
[18:33:33.450]      __var protType   = __protocol & 0x0000FFFF;
[18:33:33.450]        // -> [protType <= 0x00000002]
[18:33:33.450]    </block>
[18:33:33.450]    <control if="protType == 1" while="" timeout="0" info="">
[18:33:33.450]      // if-block "protType == 1"
[18:33:33.450]        // =>  FALSE
[18:33:33.450]      // skip if-block "protType == 1"
[18:33:33.450]    </control>
[18:33:33.450]    <control if="protType == 2" while="" timeout="0" info="">
[18:33:33.450]      // if-block "protType == 2"
[18:33:33.450]        // =>  TRUE
[18:33:33.451]      <control if="isSWJ" while="" timeout="0" info="">
[18:33:33.451]        // if-block "isSWJ"
[18:33:33.451]          // =>  TRUE
[18:33:33.451]        <control if="hasDormant" while="" timeout="0" info="">
[18:33:33.451]          // if-block "hasDormant"
[18:33:33.451]            // =>  FALSE
[18:33:33.451]          // skip if-block "hasDormant"
[18:33:33.451]        </control>
[18:33:33.451]        <control if="!hasDormant" while="" timeout="0" info="">
[18:33:33.451]          // if-block "!hasDormant"
[18:33:33.451]            // =>  TRUE
[18:33:33.451]          <block atomic="false" info="">
[18:33:33.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:33:33.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:33:33.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:33:33.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:33:33.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:33:33.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:33:33.459]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:33:33.463]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:33:33.463]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:33:33.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:33:33.465]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:33:33.466]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:33:33.466]          </block>
[18:33:33.466]          // end if-block "!hasDormant"
[18:33:33.466]        </control>
[18:33:33.466]        // end if-block "isSWJ"
[18:33:33.466]      </control>
[18:33:33.466]      <control if="!isSWJ" while="" timeout="0" info="">
[18:33:33.466]        // if-block "!isSWJ"
[18:33:33.466]          // =>  FALSE
[18:33:33.466]        // skip if-block "!isSWJ"
[18:33:33.466]      </control>
[18:33:33.466]      <block atomic="false" info="">
[18:33:33.466]        ReadDP(0x0);
[18:33:33.470]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:33:33.470]      </block>
[18:33:33.470]      // end if-block "protType == 2"
[18:33:33.470]    </control>
[18:33:33.470]  </sequence>
[18:33:33.470]  
[18:33:33.474]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:33:33.474]  
[18:33:33.474]  <debugvars>
[18:33:33.474]    // Pre-defined
[18:33:33.474]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:33:33.474]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:33:33.474]    __dp=0x00000000
[18:33:33.474]    __ap=0x00000000
[18:33:33.474]    __traceout=0x00000000      (Trace Disabled)
[18:33:33.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:33:33.474]    __FlashAddr=0x00000000
[18:33:33.474]    __FlashLen=0x00000000
[18:33:33.475]    __FlashArg=0x00000000
[18:33:33.475]    __FlashOp=0x00000000
[18:33:33.475]    __Result=0x00000000
[18:33:33.475]  </debugvars>
[18:33:33.475]  
[18:33:33.475]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:33:33.475]    <block atomic="false" info="">
[18:33:33.475]      __var SW_DP_ABORT       = 0x0;
[18:33:33.475]        // -> [SW_DP_ABORT <= 0x00000000]
[18:33:33.475]      __var DP_CTRL_STAT      = 0x4;
[18:33:33.475]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:33:33.475]      __var DP_SELECT         = 0x8;
[18:33:33.475]        // -> [DP_SELECT <= 0x00000008]
[18:33:33.475]      __var powered_down      = 0;
[18:33:33.476]        // -> [powered_down <= 0x00000000]
[18:33:33.476]      WriteDP(DP_SELECT, 0x00000000);
[18:33:33.477]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:33:33.477]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:33:33.479]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:33:33.479]        // -> [powered_down <= 0x00000001]
[18:33:33.479]    </block>
[18:33:33.479]    <control if="powered_down" while="" timeout="0" info="">
[18:33:33.479]      // if-block "powered_down"
[18:33:33.479]        // =>  TRUE
[18:33:33.479]      <block atomic="false" info="">
[18:33:33.479]        Message(0, "Debug/System power-up request sent");
[18:33:33.485]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:33:33.489]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:33:33.489]      </block>
[18:33:33.489]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:33:33.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.491]        // while-condition  =>  TRUE
[18:33:33.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.492]        // while-condition  =>  TRUE
[18:33:33.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.494]        // while-condition  =>  TRUE
[18:33:33.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.495]        // while-condition  =>  TRUE
[18:33:33.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.497]        // while-condition  =>  TRUE
[18:33:33.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.499]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.499]        // while-condition  =>  TRUE
[18:33:33.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.500]        // while-condition  =>  TRUE
[18:33:33.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.502]        // while-condition  =>  TRUE
[18:33:33.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.504]        // while-condition  =>  TRUE
[18:33:33.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.505]        // while-condition  =>  TRUE
[18:33:33.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.509]        // while-condition  =>  TRUE
[18:33:33.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.510]        // while-condition  =>  TRUE
[18:33:33.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.512]        // while-condition  =>  TRUE
[18:33:33.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.513]        // while-condition  =>  TRUE
[18:33:33.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.515]        // while-condition  =>  TRUE
[18:33:33.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.516]        // while-condition  =>  TRUE
[18:33:33.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.518]        // while-condition  =>  TRUE
[18:33:33.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.519]        // while-condition  =>  TRUE
[18:33:33.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.522]        // while-condition  =>  TRUE
[18:33:33.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.524]        // while-condition  =>  TRUE
[18:33:33.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.525]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.525]        // while-condition  =>  TRUE
[18:33:33.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.527]        // while-condition  =>  TRUE
[18:33:33.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.529]        // while-condition  =>  TRUE
[18:33:33.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.531]        // while-condition  =>  TRUE
[18:33:33.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.532]        // while-condition  =>  TRUE
[18:33:33.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.535]        // while-condition  =>  TRUE
[18:33:33.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.537]        // while-condition  =>  TRUE
[18:33:33.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.538]        // while-condition  =>  TRUE
[18:33:33.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.540]        // while-condition  =>  TRUE
[18:33:33.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.541]        // while-condition  =>  TRUE
[18:33:33.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.543]        // while-condition  =>  TRUE
[18:33:33.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.544]        // while-condition  =>  TRUE
[18:33:33.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.546]        // while-condition  =>  TRUE
[18:33:33.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.548]        // while-condition  =>  TRUE
[18:33:33.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.550]        // while-condition  =>  TRUE
[18:33:33.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.556]        // while-condition  =>  TRUE
[18:33:33.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.558]        // while-condition  =>  TRUE
[18:33:33.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.562]        // while-condition  =>  TRUE
[18:33:33.562]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.564]        // while-condition  =>  TRUE
[18:33:33.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.567]        // while-condition  =>  TRUE
[18:33:33.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.568]        // while-condition  =>  TRUE
[18:33:33.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.570]        // while-condition  =>  TRUE
[18:33:33.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.575]        // while-condition  =>  TRUE
[18:33:33.575]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.576]        // while-condition  =>  TRUE
[18:33:33.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.578]        // while-condition  =>  TRUE
[18:33:33.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.579]        // while-condition  =>  TRUE
[18:33:33.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.581]        // while-condition  =>  TRUE
[18:33:33.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.582]        // while-condition  =>  TRUE
[18:33:33.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.584]        // while-condition  =>  TRUE
[18:33:33.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.585]        // while-condition  =>  TRUE
[18:33:33.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.587]        // while-condition  =>  TRUE
[18:33:33.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.588]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.588]        // while-condition  =>  TRUE
[18:33:33.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.590]        // while-condition  =>  TRUE
[18:33:33.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.592]        // while-condition  =>  TRUE
[18:33:33.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.593]        // while-condition  =>  TRUE
[18:33:33.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.595]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.595]        // while-condition  =>  TRUE
[18:33:33.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.597]        // while-condition  =>  TRUE
[18:33:33.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.600]        // while-condition  =>  TRUE
[18:33:33.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.611]        // while-condition  =>  TRUE
[18:33:33.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.612]        // while-condition  =>  TRUE
[18:33:33.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.614]        // while-condition  =>  TRUE
[18:33:33.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.616]        // while-condition  =>  TRUE
[18:33:33.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.617]        // while-condition  =>  TRUE
[18:33:33.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.619]        // while-condition  =>  TRUE
[18:33:33.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.620]        // while-condition  =>  TRUE
[18:33:33.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.622]        // while-condition  =>  TRUE
[18:33:33.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.625]        // while-condition  =>  TRUE
[18:33:33.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.626]        // while-condition  =>  TRUE
[18:33:33.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.628]        // while-condition  =>  TRUE
[18:33:33.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.629]        // while-condition  =>  TRUE
[18:33:33.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.631]        // while-condition  =>  TRUE
[18:33:33.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.632]        // while-condition  =>  TRUE
[18:33:33.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.634]        // while-condition  =>  TRUE
[18:33:33.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.636]        // while-condition  =>  TRUE
[18:33:33.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.637]        // while-condition  =>  TRUE
[18:33:33.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.639]        // while-condition  =>  TRUE
[18:33:33.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.641]        // while-condition  =>  TRUE
[18:33:33.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.642]        // while-condition  =>  TRUE
[18:33:33.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.644]        // while-condition  =>  TRUE
[18:33:33.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.647]        // while-condition  =>  TRUE
[18:33:33.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.648]        // while-condition  =>  TRUE
[18:33:33.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.650]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.650]        // while-condition  =>  TRUE
[18:33:33.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.657]        // while-condition  =>  TRUE
[18:33:33.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.660]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.660]        // while-condition  =>  TRUE
[18:33:33.660]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.661]        // while-condition  =>  TRUE
[18:33:33.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.663]        // while-condition  =>  TRUE
[18:33:33.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.664]        // while-condition  =>  TRUE
[18:33:33.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.670]        // while-condition  =>  TRUE
[18:33:33.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.676]        // while-condition  =>  TRUE
[18:33:33.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.678]        // while-condition  =>  TRUE
[18:33:33.678]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.679]        // while-condition  =>  TRUE
[18:33:33.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.681]        // while-condition  =>  TRUE
[18:33:33.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.682]        // while-condition  =>  TRUE
[18:33:33.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.684]        // while-condition  =>  TRUE
[18:33:33.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.686]        // while-condition  =>  TRUE
[18:33:33.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.690]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.690]        // while-condition  =>  TRUE
[18:33:33.690]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.692]        // while-condition  =>  TRUE
[18:33:33.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.693]        // while-condition  =>  TRUE
[18:33:33.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.695]        // while-condition  =>  TRUE
[18:33:33.695]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.696]        // while-condition  =>  TRUE
[18:33:33.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.698]        // while-condition  =>  TRUE
[18:33:33.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.701]        // while-condition  =>  TRUE
[18:33:33.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.703]        // while-condition  =>  TRUE
[18:33:33.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.705]        // while-condition  =>  TRUE
[18:33:33.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.710]        // while-condition  =>  TRUE
[18:33:33.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.712]        // while-condition  =>  TRUE
[18:33:33.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.713]        // while-condition  =>  TRUE
[18:33:33.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.716]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.716]        // while-condition  =>  TRUE
[18:33:33.716]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.717]        // while-condition  =>  TRUE
[18:33:33.718]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.719]        // while-condition  =>  TRUE
[18:33:33.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.721]        // while-condition  =>  TRUE
[18:33:33.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.722]        // while-condition  =>  TRUE
[18:33:33.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.724]        // while-condition  =>  TRUE
[18:33:33.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.726]        // while-condition  =>  TRUE
[18:33:33.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.728]        // while-condition  =>  TRUE
[18:33:33.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.731]        // while-condition  =>  TRUE
[18:33:33.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.733]        // while-condition  =>  TRUE
[18:33:33.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.734]        // while-condition  =>  TRUE
[18:33:33.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.740]        // while-condition  =>  TRUE
[18:33:33.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.742]        // while-condition  =>  TRUE
[18:33:33.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.744]        // while-condition  =>  TRUE
[18:33:33.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.745]        // while-condition  =>  TRUE
[18:33:33.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.748]        // while-condition  =>  TRUE
[18:33:33.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.750]        // while-condition  =>  TRUE
[18:33:33.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.751]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.751]        // while-condition  =>  TRUE
[18:33:33.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.753]        // while-condition  =>  TRUE
[18:33:33.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.755]        // while-condition  =>  TRUE
[18:33:33.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.757]        // while-condition  =>  TRUE
[18:33:33.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.759]        // while-condition  =>  TRUE
[18:33:33.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.766]        // while-condition  =>  TRUE
[18:33:33.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.768]        // while-condition  =>  TRUE
[18:33:33.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.770]        // while-condition  =>  TRUE
[18:33:33.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.773]        // while-condition  =>  TRUE
[18:33:33.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.774]        // while-condition  =>  TRUE
[18:33:33.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.776]        // while-condition  =>  TRUE
[18:33:33.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.778]        // while-condition  =>  TRUE
[18:33:33.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.779]        // while-condition  =>  TRUE
[18:33:33.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.781]        // while-condition  =>  TRUE
[18:33:33.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.783]        // while-condition  =>  TRUE
[18:33:33.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.784]        // while-condition  =>  TRUE
[18:33:33.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.794]        // while-condition  =>  TRUE
[18:33:33.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.804]        // while-condition  =>  TRUE
[18:33:33.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.806]        // while-condition  =>  TRUE
[18:33:33.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.809]        // while-condition  =>  TRUE
[18:33:33.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.813]        // while-condition  =>  TRUE
[18:33:33.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.815]        // while-condition  =>  TRUE
[18:33:33.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.816]        // while-condition  =>  TRUE
[18:33:33.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.818]        // while-condition  =>  TRUE
[18:33:33.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.822]        // while-condition  =>  TRUE
[18:33:33.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.823]        // while-condition  =>  TRUE
[18:33:33.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.825]        // while-condition  =>  TRUE
[18:33:33.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.826]        // while-condition  =>  TRUE
[18:33:33.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.828]        // while-condition  =>  TRUE
[18:33:33.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.830]        // while-condition  =>  TRUE
[18:33:33.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.831]        // while-condition  =>  TRUE
[18:33:33.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.833]        // while-condition  =>  TRUE
[18:33:33.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.835]        // while-condition  =>  TRUE
[18:33:33.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.836]        // while-condition  =>  TRUE
[18:33:33.836]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.841]        // while-condition  =>  TRUE
[18:33:33.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.843]        // while-condition  =>  TRUE
[18:33:33.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.844]        // while-condition  =>  TRUE
[18:33:33.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.846]        // while-condition  =>  TRUE
[18:33:33.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.847]        // while-condition  =>  TRUE
[18:33:33.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.849]        // while-condition  =>  TRUE
[18:33:33.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.852]        // while-condition  =>  TRUE
[18:33:33.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.853]        // while-condition  =>  TRUE
[18:33:33.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.855]        // while-condition  =>  TRUE
[18:33:33.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.856]        // while-condition  =>  TRUE
[18:33:33.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.858]        // while-condition  =>  TRUE
[18:33:33.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.862]        // while-condition  =>  TRUE
[18:33:33.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.865]        // while-condition  =>  TRUE
[18:33:33.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.866]        // while-condition  =>  TRUE
[18:33:33.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.867]        // while-condition  =>  TRUE
[18:33:33.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.868]        // while-condition  =>  TRUE
[18:33:33.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.870]        // while-condition  =>  TRUE
[18:33:33.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.871]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.871]        // while-condition  =>  TRUE
[18:33:33.871]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.873]        // while-condition  =>  TRUE
[18:33:33.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.875]        // while-condition  =>  TRUE
[18:33:33.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.879]        // while-condition  =>  TRUE
[18:33:33.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.881]        // while-condition  =>  TRUE
[18:33:33.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.883]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.883]        // while-condition  =>  TRUE
[18:33:33.883]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.884]        // while-condition  =>  TRUE
[18:33:33.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.887]        // while-condition  =>  TRUE
[18:33:33.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.888]        // while-condition  =>  TRUE
[18:33:33.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.889]        // while-condition  =>  TRUE
[18:33:33.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.891]        // while-condition  =>  TRUE
[18:33:33.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.892]        // while-condition  =>  TRUE
[18:33:33.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.894]        // while-condition  =>  TRUE
[18:33:33.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.897]        // while-condition  =>  TRUE
[18:33:33.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.899]        // while-condition  =>  TRUE
[18:33:33.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.900]        // while-condition  =>  TRUE
[18:33:33.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.903]        // while-condition  =>  TRUE
[18:33:33.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.907]        // while-condition  =>  TRUE
[18:33:33.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.909]        // while-condition  =>  TRUE
[18:33:33.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.910]        // while-condition  =>  TRUE
[18:33:33.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.912]        // while-condition  =>  TRUE
[18:33:33.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.914]        // while-condition  =>  TRUE
[18:33:33.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.916]        // while-condition  =>  TRUE
[18:33:33.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.917]        // while-condition  =>  TRUE
[18:33:33.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.919]        // while-condition  =>  TRUE
[18:33:33.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.928]        // while-condition  =>  TRUE
[18:33:33.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.930]        // while-condition  =>  TRUE
[18:33:33.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.932]        // while-condition  =>  TRUE
[18:33:33.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.933]        // while-condition  =>  TRUE
[18:33:33.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.935]        // while-condition  =>  TRUE
[18:33:33.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.936]        // while-condition  =>  TRUE
[18:33:33.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.938]        // while-condition  =>  TRUE
[18:33:33.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.940]        // while-condition  =>  TRUE
[18:33:33.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.941]        // while-condition  =>  TRUE
[18:33:33.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.943]        // while-condition  =>  TRUE
[18:33:33.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.945]        // while-condition  =>  TRUE
[18:33:33.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.951]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.951]        // while-condition  =>  TRUE
[18:33:33.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.953]        // while-condition  =>  TRUE
[18:33:33.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.954]        // while-condition  =>  TRUE
[18:33:33.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.955]        // while-condition  =>  TRUE
[18:33:33.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.958]        // while-condition  =>  TRUE
[18:33:33.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.959]        // while-condition  =>  TRUE
[18:33:33.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.962]        // while-condition  =>  TRUE
[18:33:33.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.967]        // while-condition  =>  TRUE
[18:33:33.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.968]        // while-condition  =>  TRUE
[18:33:33.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.971]        // while-condition  =>  TRUE
[18:33:33.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.976]        // while-condition  =>  TRUE
[18:33:33.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.978]        // while-condition  =>  TRUE
[18:33:33.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.980]        // while-condition  =>  TRUE
[18:33:33.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.981]        // while-condition  =>  TRUE
[18:33:33.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.983]        // while-condition  =>  TRUE
[18:33:33.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.985]        // while-condition  =>  TRUE
[18:33:33.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.986]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.986]        // while-condition  =>  TRUE
[18:33:33.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.988]        // while-condition  =>  TRUE
[18:33:33.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.990]        // while-condition  =>  TRUE
[18:33:33.990]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.991]        // while-condition  =>  TRUE
[18:33:33.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.993]        // while-condition  =>  TRUE
[18:33:33.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.994]        // while-condition  =>  TRUE
[18:33:33.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.996]        // while-condition  =>  TRUE
[18:33:33.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.998]        // while-condition  =>  TRUE
[18:33:33.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:33.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:33.999]        // while-condition  =>  TRUE
[18:33:34.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.002]        // while-condition  =>  TRUE
[18:33:34.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.003]        // while-condition  =>  TRUE
[18:33:34.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.005]        // while-condition  =>  TRUE
[18:33:34.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.007]        // while-condition  =>  TRUE
[18:33:34.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.009]        // while-condition  =>  TRUE
[18:33:34.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.010]        // while-condition  =>  TRUE
[18:33:34.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.014]        // while-condition  =>  TRUE
[18:33:34.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.016]        // while-condition  =>  TRUE
[18:33:34.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.018]        // while-condition  =>  TRUE
[18:33:34.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.022]        // while-condition  =>  TRUE
[18:33:34.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.024]        // while-condition  =>  TRUE
[18:33:34.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.025]        // while-condition  =>  TRUE
[18:33:34.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.027]        // while-condition  =>  TRUE
[18:33:34.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.033]        // while-condition  =>  TRUE
[18:33:34.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.036]        // while-condition  =>  TRUE
[18:33:34.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.038]        // while-condition  =>  TRUE
[18:33:34.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.039]        // while-condition  =>  TRUE
[18:33:34.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.041]        // while-condition  =>  TRUE
[18:33:34.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.043]        // while-condition  =>  TRUE
[18:33:34.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.046]        // while-condition  =>  TRUE
[18:33:34.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.048]        // while-condition  =>  TRUE
[18:33:34.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.050]        // while-condition  =>  TRUE
[18:33:34.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.052]        // while-condition  =>  TRUE
[18:33:34.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.054]        // while-condition  =>  TRUE
[18:33:34.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.055]        // while-condition  =>  TRUE
[18:33:34.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.057]        // while-condition  =>  TRUE
[18:33:34.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.059]        // while-condition  =>  TRUE
[18:33:34.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.060]        // while-condition  =>  TRUE
[18:33:34.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.062]        // while-condition  =>  TRUE
[18:33:34.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.066]        // while-condition  =>  TRUE
[18:33:34.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.069]        // while-condition  =>  TRUE
[18:33:34.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.071]        // while-condition  =>  TRUE
[18:33:34.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.075]        // while-condition  =>  TRUE
[18:33:34.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.076]        // while-condition  =>  TRUE
[18:33:34.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.078]        // while-condition  =>  TRUE
[18:33:34.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.080]        // while-condition  =>  TRUE
[18:33:34.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.081]        // while-condition  =>  TRUE
[18:33:34.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.083]        // while-condition  =>  TRUE
[18:33:34.083]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.085]        // while-condition  =>  TRUE
[18:33:34.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.086]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.086]        // while-condition  =>  TRUE
[18:33:34.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.090]        // while-condition  =>  TRUE
[18:33:34.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.092]        // while-condition  =>  TRUE
[18:33:34.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.093]        // while-condition  =>  TRUE
[18:33:34.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.096]        // while-condition  =>  TRUE
[18:33:34.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.097]        // while-condition  =>  TRUE
[18:33:34.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.099]        // while-condition  =>  TRUE
[18:33:34.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.100]        // while-condition  =>  TRUE
[18:33:34.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.102]        // while-condition  =>  TRUE
[18:33:34.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.103]        // while-condition  =>  TRUE
[18:33:34.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.105]        // while-condition  =>  TRUE
[18:33:34.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.108]        // while-condition  =>  TRUE
[18:33:34.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.109]        // while-condition  =>  TRUE
[18:33:34.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.111]        // while-condition  =>  TRUE
[18:33:34.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.113]        // while-condition  =>  TRUE
[18:33:34.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.116]        // while-condition  =>  TRUE
[18:33:34.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.118]        // while-condition  =>  TRUE
[18:33:34.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.119]        // while-condition  =>  TRUE
[18:33:34.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.122]        // while-condition  =>  TRUE
[18:33:34.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.124]        // while-condition  =>  TRUE
[18:33:34.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.127]        // while-condition  =>  TRUE
[18:33:34.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.129]        // while-condition  =>  TRUE
[18:33:34.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.130]        // while-condition  =>  TRUE
[18:33:34.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.132]        // while-condition  =>  TRUE
[18:33:34.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.133]        // while-condition  =>  TRUE
[18:33:34.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.135]        // while-condition  =>  TRUE
[18:33:34.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.138]        // while-condition  =>  TRUE
[18:33:34.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.140]        // while-condition  =>  TRUE
[18:33:34.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.141]        // while-condition  =>  TRUE
[18:33:34.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.143]        // while-condition  =>  TRUE
[18:33:34.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.145]        // while-condition  =>  TRUE
[18:33:34.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.149]        // while-condition  =>  TRUE
[18:33:34.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.152]        // while-condition  =>  TRUE
[18:33:34.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.153]        // while-condition  =>  TRUE
[18:33:34.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.155]        // while-condition  =>  TRUE
[18:33:34.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.158]        // while-condition  =>  TRUE
[18:33:34.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.165]        // while-condition  =>  TRUE
[18:33:34.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.171]        // while-condition  =>  TRUE
[18:33:34.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.173]        // while-condition  =>  TRUE
[18:33:34.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.175]        // while-condition  =>  TRUE
[18:33:34.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.178]        // while-condition  =>  TRUE
[18:33:34.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.180]        // while-condition  =>  TRUE
[18:33:34.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.182]        // while-condition  =>  TRUE
[18:33:34.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.184]        // while-condition  =>  TRUE
[18:33:34.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.186]        // while-condition  =>  TRUE
[18:33:34.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.188]        // while-condition  =>  TRUE
[18:33:34.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.190]        // while-condition  =>  TRUE
[18:33:34.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.191]        // while-condition  =>  TRUE
[18:33:34.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.193]        // while-condition  =>  TRUE
[18:33:34.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.195]        // while-condition  =>  TRUE
[18:33:34.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.196]        // while-condition  =>  TRUE
[18:33:34.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.198]        // while-condition  =>  TRUE
[18:33:34.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.201]        // while-condition  =>  TRUE
[18:33:34.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.202]        // while-condition  =>  TRUE
[18:33:34.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.204]        // while-condition  =>  TRUE
[18:33:34.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.205]        // while-condition  =>  TRUE
[18:33:34.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.210]        // while-condition  =>  TRUE
[18:33:34.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.215]        // while-condition  =>  TRUE
[18:33:34.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.216]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.216]        // while-condition  =>  TRUE
[18:33:34.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.219]        // while-condition  =>  TRUE
[18:33:34.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.221]        // while-condition  =>  TRUE
[18:33:34.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.222]        // while-condition  =>  TRUE
[18:33:34.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.224]        // while-condition  =>  TRUE
[18:33:34.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.225]        // while-condition  =>  TRUE
[18:33:34.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.227]        // while-condition  =>  TRUE
[18:33:34.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.228]        // while-condition  =>  TRUE
[18:33:34.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.230]        // while-condition  =>  TRUE
[18:33:34.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.231]        // while-condition  =>  TRUE
[18:33:34.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.233]        // while-condition  =>  TRUE
[18:33:34.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.235]        // while-condition  =>  TRUE
[18:33:34.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.236]        // while-condition  =>  TRUE
[18:33:34.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.237]        // while-condition  =>  TRUE
[18:33:34.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.239]        // while-condition  =>  TRUE
[18:33:34.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.241]        // while-condition  =>  TRUE
[18:33:34.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.242]        // while-condition  =>  TRUE
[18:33:34.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.246]        // while-condition  =>  TRUE
[18:33:34.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.249]        // while-condition  =>  TRUE
[18:33:34.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.250]        // while-condition  =>  TRUE
[18:33:34.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.252]        // while-condition  =>  TRUE
[18:33:34.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.254]        // while-condition  =>  TRUE
[18:33:34.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.255]        // while-condition  =>  TRUE
[18:33:34.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.257]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.257]        // while-condition  =>  TRUE
[18:33:34.257]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.259]        // while-condition  =>  TRUE
[18:33:34.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.260]        // while-condition  =>  TRUE
[18:33:34.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.262]        // while-condition  =>  TRUE
[18:33:34.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.264]        // while-condition  =>  TRUE
[18:33:34.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.265]        // while-condition  =>  TRUE
[18:33:34.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.267]        // while-condition  =>  TRUE
[18:33:34.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.269]        // while-condition  =>  TRUE
[18:33:34.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.272]        // while-condition  =>  TRUE
[18:33:34.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.275]        // while-condition  =>  TRUE
[18:33:34.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.280]        // while-condition  =>  TRUE
[18:33:34.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.283]        // while-condition  =>  TRUE
[18:33:34.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.285]        // while-condition  =>  TRUE
[18:33:34.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.297]        // while-condition  =>  TRUE
[18:33:34.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.301]        // while-condition  =>  TRUE
[18:33:34.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.303]        // while-condition  =>  TRUE
[18:33:34.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.307]        // while-condition  =>  TRUE
[18:33:34.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.309]        // while-condition  =>  TRUE
[18:33:34.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.316]        // while-condition  =>  TRUE
[18:33:34.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.318]        // while-condition  =>  TRUE
[18:33:34.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.320]        // while-condition  =>  TRUE
[18:33:34.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.322]        // while-condition  =>  TRUE
[18:33:34.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.324]        // while-condition  =>  TRUE
[18:33:34.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.326]        // while-condition  =>  TRUE
[18:33:34.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.327]        // while-condition  =>  TRUE
[18:33:34.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.334]        // while-condition  =>  TRUE
[18:33:34.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.336]        // while-condition  =>  TRUE
[18:33:34.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.338]        // while-condition  =>  TRUE
[18:33:34.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.341]        // while-condition  =>  TRUE
[18:33:34.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.343]        // while-condition  =>  TRUE
[18:33:34.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.344]        // while-condition  =>  TRUE
[18:33:34.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.346]        // while-condition  =>  TRUE
[18:33:34.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.349]        // while-condition  =>  TRUE
[18:33:34.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.350]        // while-condition  =>  TRUE
[18:33:34.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.352]        // while-condition  =>  TRUE
[18:33:34.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.354]        // while-condition  =>  TRUE
[18:33:34.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.355]        // while-condition  =>  TRUE
[18:33:34.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.357]        // while-condition  =>  TRUE
[18:33:34.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.359]        // while-condition  =>  TRUE
[18:33:34.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.360]        // while-condition  =>  TRUE
[18:33:34.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.362]        // while-condition  =>  TRUE
[18:33:34.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.364]        // while-condition  =>  TRUE
[18:33:34.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.366]        // while-condition  =>  TRUE
[18:33:34.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.367]        // while-condition  =>  TRUE
[18:33:34.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.369]        // while-condition  =>  TRUE
[18:33:34.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.377]        // while-condition  =>  TRUE
[18:33:34.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.378]        // while-condition  =>  TRUE
[18:33:34.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.381]        // while-condition  =>  TRUE
[18:33:34.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.382]        // while-condition  =>  TRUE
[18:33:34.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.385]        // while-condition  =>  TRUE
[18:33:34.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.387]        // while-condition  =>  TRUE
[18:33:34.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.388]        // while-condition  =>  TRUE
[18:33:34.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.390]        // while-condition  =>  TRUE
[18:33:34.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.392]        // while-condition  =>  TRUE
[18:33:34.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.395]        // while-condition  =>  TRUE
[18:33:34.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.398]        // while-condition  =>  TRUE
[18:33:34.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.400]        // while-condition  =>  TRUE
[18:33:34.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.402]        // while-condition  =>  TRUE
[18:33:34.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.403]        // while-condition  =>  TRUE
[18:33:34.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.405]        // while-condition  =>  TRUE
[18:33:34.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.406]        // while-condition  =>  TRUE
[18:33:34.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.412]        // while-condition  =>  TRUE
[18:33:34.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.414]        // while-condition  =>  TRUE
[18:33:34.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.415]        // while-condition  =>  TRUE
[18:33:34.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.417]        // while-condition  =>  TRUE
[18:33:34.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.419]        // while-condition  =>  TRUE
[18:33:34.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.421]        // while-condition  =>  TRUE
[18:33:34.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.423]        // while-condition  =>  TRUE
[18:33:34.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.424]        // while-condition  =>  TRUE
[18:33:34.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.431]        // while-condition  =>  TRUE
[18:33:34.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.433]        // while-condition  =>  TRUE
[18:33:34.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.434]        // while-condition  =>  TRUE
[18:33:34.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.436]        // while-condition  =>  TRUE
[18:33:34.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.438]        // while-condition  =>  TRUE
[18:33:34.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.440]        // while-condition  =>  TRUE
[18:33:34.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.441]        // while-condition  =>  TRUE
[18:33:34.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.445]        // while-condition  =>  TRUE
[18:33:34.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.447]        // while-condition  =>  TRUE
[18:33:34.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.449]        // while-condition  =>  TRUE
[18:33:34.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.461]        // while-condition  =>  TRUE
[18:33:34.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.462]        // while-condition  =>  TRUE
[18:33:34.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.465]        // while-condition  =>  TRUE
[18:33:34.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.467]        // while-condition  =>  TRUE
[18:33:34.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.468]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.468]        // while-condition  =>  TRUE
[18:33:34.468]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.470]        // while-condition  =>  TRUE
[18:33:34.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.472]        // while-condition  =>  TRUE
[18:33:34.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.475]        // while-condition  =>  TRUE
[18:33:34.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.478]        // while-condition  =>  TRUE
[18:33:34.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.480]        // while-condition  =>  TRUE
[18:33:34.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.481]        // while-condition  =>  TRUE
[18:33:34.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.483]        // while-condition  =>  TRUE
[18:33:34.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.484]        // while-condition  =>  TRUE
[18:33:34.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.486]        // while-condition  =>  TRUE
[18:33:34.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[18:33:34.487]        // while-condition  =>  TRUE
[18:33:34.488]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:34.488]        // while  =>  TIMEOUT
[18:33:34.488]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:33:34.488]      </control>
[18:33:34.488]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:33:34.488]        // if-block "(__protocol & 0xFFFF) == 1"
[18:33:34.488]          // =>  FALSE
[18:33:34.488]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:33:34.488]      </control>
[18:33:34.488]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:33:34.488]        // if-block "(__protocol & 0xFFFF) == 2"
[18:33:34.488]          // =>  TRUE
[18:33:34.488]        <block atomic="false" info="">
[18:33:34.488]          Message(0, "executing SWD power up");
[18:33:34.489]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:33:34.491]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:33:34.491]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:33:34.495]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:33:34.495]        </block>
[18:33:34.495]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:33:34.495]      </control>
[18:33:34.495]      // end if-block "powered_down"
[18:33:34.495]    </control>
[18:33:34.496]    <block atomic="false" info="">
[18:33:34.496]      __var DEBUG_PORT_VAL    = 0;
[18:33:34.496]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:33:34.496]      __var ACCESS_POINT_VAL  = 0;
[18:33:34.496]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:33:34.496]      __ap = 1; 
[18:33:34.496]        // -> [__ap <= 0x00000001]
[18:33:34.496]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:33:34.515]  
[18:33:34.515]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[18:33:34.515]  
[18:33:34.516]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:33:34.516]    </block>
[18:33:34.516]  </sequence>
[18:33:34.516]  
[18:33:46.594]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:33:46.594]  
[18:33:46.595]  <debugvars>
[18:33:46.595]    // Pre-defined
[18:33:46.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:33:46.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:33:46.595]    __dp=0x00000000
[18:33:46.595]    __ap=0x00000000
[18:33:46.595]    __traceout=0x00000000      (Trace Disabled)
[18:33:46.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:33:46.595]    __FlashAddr=0x00000000
[18:33:46.596]    __FlashLen=0x00000000
[18:33:46.596]    __FlashArg=0x00000000
[18:33:46.596]    __FlashOp=0x00000000
[18:33:46.596]    __Result=0x00000000
[18:33:46.596]  </debugvars>
[18:33:46.597]  
[18:33:46.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:33:46.597]    <block atomic="false" info="">
[18:33:46.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:33:46.597]        // -> [isSWJ <= 0x00000001]
[18:33:46.598]      __var hasDormant = __protocol & 0x00020000;
[18:33:46.598]        // -> [hasDormant <= 0x00000000]
[18:33:46.598]      __var protType   = __protocol & 0x0000FFFF;
[18:33:46.598]        // -> [protType <= 0x00000002]
[18:33:46.599]    </block>
[18:33:46.599]    <control if="protType == 1" while="" timeout="0" info="">
[18:33:46.599]      // if-block "protType == 1"
[18:33:46.599]        // =>  FALSE
[18:33:46.599]      // skip if-block "protType == 1"
[18:33:46.599]    </control>
[18:33:46.600]    <control if="protType == 2" while="" timeout="0" info="">
[18:33:46.600]      // if-block "protType == 2"
[18:33:46.600]        // =>  TRUE
[18:33:46.600]      <control if="isSWJ" while="" timeout="0" info="">
[18:33:46.600]        // if-block "isSWJ"
[18:33:46.600]          // =>  TRUE
[18:33:46.600]        <control if="hasDormant" while="" timeout="0" info="">
[18:33:46.600]          // if-block "hasDormant"
[18:33:46.600]            // =>  FALSE
[18:33:46.601]          // skip if-block "hasDormant"
[18:33:46.601]        </control>
[18:33:46.601]        <control if="!hasDormant" while="" timeout="0" info="">
[18:33:46.601]          // if-block "!hasDormant"
[18:33:46.601]            // =>  TRUE
[18:33:46.601]          <block atomic="false" info="">
[18:33:46.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:33:46.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:33:46.603]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:33:46.605]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:33:46.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:33:46.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:33:46.607]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:33:46.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:33:46.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:33:46.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:33:46.610]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:33:46.611]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:33:46.611]          </block>
[18:33:46.611]          // end if-block "!hasDormant"
[18:33:46.611]        </control>
[18:33:46.611]        // end if-block "isSWJ"
[18:33:46.611]      </control>
[18:33:46.611]      <control if="!isSWJ" while="" timeout="0" info="">
[18:33:46.611]        // if-block "!isSWJ"
[18:33:46.611]          // =>  FALSE
[18:33:46.612]        // skip if-block "!isSWJ"
[18:33:46.612]      </control>
[18:33:46.612]      <block atomic="false" info="">
[18:33:46.612]        ReadDP(0x0);
[18:33:46.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:33:46.613]      </block>
[18:33:46.613]      // end if-block "protType == 2"
[18:33:46.614]    </control>
[18:33:46.614]  </sequence>
[18:33:46.614]  
[18:33:46.616]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:33:46.616]  
[18:33:46.616]  <debugvars>
[18:33:46.617]    // Pre-defined
[18:33:46.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:33:46.617]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:33:46.617]    __dp=0x00000000
[18:33:46.617]    __ap=0x00000000
[18:33:46.617]    __traceout=0x00000000      (Trace Disabled)
[18:33:46.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:33:46.617]    __FlashAddr=0x00000000
[18:33:46.617]    __FlashLen=0x00000000
[18:33:46.617]    __FlashArg=0x00000000
[18:33:46.617]    __FlashOp=0x00000000
[18:33:46.617]    __Result=0x00000000
[18:33:46.617]  </debugvars>
[18:33:46.617]  
[18:33:46.617]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:33:46.617]    <block atomic="false" info="">
[18:33:46.617]      __var SW_DP_ABORT       = 0x0;
[18:33:46.617]        // -> [SW_DP_ABORT <= 0x00000000]
[18:33:46.618]      __var DP_CTRL_STAT      = 0x4;
[18:33:46.618]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:33:46.618]      __var DP_SELECT         = 0x8;
[18:33:46.618]        // -> [DP_SELECT <= 0x00000008]
[18:33:46.618]      __var powered_down      = 0;
[18:33:46.618]        // -> [powered_down <= 0x00000000]
[18:33:46.618]      WriteDP(DP_SELECT, 0x00000000);
[18:33:46.625]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:33:46.625]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:33:46.626]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:33:46.626]        // -> [powered_down <= 0x00000001]
[18:33:46.626]    </block>
[18:33:46.626]    <control if="powered_down" while="" timeout="0" info="">
[18:33:46.626]      // if-block "powered_down"
[18:33:46.626]        // =>  TRUE
[18:33:46.626]      <block atomic="false" info="">
[18:33:46.626]        Message(0, "Debug/System power-up request sent");
[18:33:46.629]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:33:46.632]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:33:46.632]      </block>
[18:33:46.632]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:33:46.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:33:46.634]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:33:46.634]        // while-condition  =>  FALSE
[18:33:46.634]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:33:46.634]      </control>
[18:33:46.635]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:33:46.635]        // if-block "(__protocol & 0xFFFF) == 1"
[18:33:46.635]          // =>  FALSE
[18:33:46.635]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:33:46.635]      </control>
[18:33:46.635]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:33:46.636]        // if-block "(__protocol & 0xFFFF) == 2"
[18:33:46.636]          // =>  TRUE
[18:33:46.636]        <block atomic="false" info="">
[18:33:46.636]          Message(0, "executing SWD power up");
[18:33:46.646]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:33:46.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:33:46.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:33:46.654]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:33:46.655]        </block>
[18:33:46.655]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:33:46.655]      </control>
[18:33:46.655]      // end if-block "powered_down"
[18:33:46.655]    </control>
[18:33:46.655]    <block atomic="false" info="">
[18:33:46.655]      __var DEBUG_PORT_VAL    = 0;
[18:33:46.655]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:33:46.655]      __var ACCESS_POINT_VAL  = 0;
[18:33:46.655]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:33:46.655]      __ap = 1; 
[18:33:46.655]        // -> [__ap <= 0x00000001]
[18:33:46.656]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:33:46.660]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:33:46.660]      __ap = 4;
[18:33:46.660]        // -> [__ap <= 0x00000004]
[18:33:46.660]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:33:46.664]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:33:46.665]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:33:46.665]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:33:46.670]    </block>
[18:33:46.671]    <block atomic="false" info="">
[18:33:46.671]      __var nReset = 0x80;
[18:33:46.671]        // -> [nReset <= 0x00000080]
[18:33:46.671]      __var canReadPins = 0;
[18:33:46.671]        // -> [canReadPins <= 0x00000000]
[18:33:46.671]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:33:46.673]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:33:46.673]        // -> [canReadPins <= 0x00000001]
[18:33:46.673]    </block>
[18:33:46.673]    <control if="" while="1" timeout="200" info="">
[18:33:46.673]      // while "1"  (timeout="200")
[18:33:46.673]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.674]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.674]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.674]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.674]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.674]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.674]      // while-condition  =>  TRUE
[18:33:46.674]      // while "1"  (timeout="200")
[18:33:46.675]      // while-condition  =>  TRUE
[18:33:46.675]      // while "1"  (timeout="200")
[18:33:46.675]      // while-condition  =>  TRUE
[18:33:46.675]      // while "1"  (timeout="200")
[18:33:46.675]      // while-condition  =>  TRUE
[18:33:46.675]      // while "1"  (timeout="200")
[18:33:46.676]      // while-condition  =>  TRUE
[18:33:46.676]      // while "1"  (timeout="200")
[18:33:46.676]      // while  =>  TIMEOUT
[18:33:46.676]      // end while "1"
[18:33:46.676]    </control>
[18:33:46.676]    <control if="canReadPins" while="" timeout="0" info="">
[18:33:46.676]      // if-block "canReadPins"
[18:33:46.676]        // =>  TRUE
[18:33:46.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:33:46.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:33:46.679]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:33:46.679]        // while-condition  =>  FALSE
[18:33:46.679]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:33:46.679]      </control>
[18:33:46.679]      // end if-block "canReadPins"
[18:33:46.679]    </control>
[18:33:46.679]    <control if="!canReadPins" while="" timeout="0" info="">
[18:33:46.679]      // if-block "!canReadPins"
[18:33:46.679]        // =>  FALSE
[18:33:46.679]      // skip if-block "!canReadPins"
[18:33:46.679]    </control>
[18:33:46.679]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:33:46.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:33:46.679]        // =>  TRUE
[18:33:46.680]      <block atomic="false" info="">
[18:33:46.680]        WriteAP(0x00, 0x190008);
[18:33:46.681]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:33:46.681]        WriteAP(0xF0, 0x01);
[18:33:46.686]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:33:46.686]      </block>
[18:33:46.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:33:46.686]    </control>
[18:33:46.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:33:46.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:33:46.687]        // =>  FALSE
[18:33:46.687]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:33:46.687]    </control>
[18:33:46.687]    <block atomic="false" info="">
[18:33:46.687]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:33:46.691]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:33:46.691]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:33:46.691]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:33:46.694]      __ap = 0; //lets make sure we reset the access point selection
[18:33:46.695]        // -> [__ap <= 0x00000000]
[18:33:46.695]    </block>
[18:33:46.695]  </sequence>
[18:33:46.695]  
[18:33:46.712]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:33:46.712]  
[18:33:46.712]  <debugvars>
[18:33:46.712]    // Pre-defined
[18:33:46.712]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:33:46.712]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:33:46.713]    __dp=0x00000000
[18:33:46.713]    __ap=0x00000000
[18:33:46.713]    __traceout=0x00000000      (Trace Disabled)
[18:33:46.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:33:46.713]    __FlashAddr=0x00000000
[18:33:46.713]    __FlashLen=0x00000000
[18:33:46.714]    __FlashArg=0x00000000
[18:33:46.714]    __FlashOp=0x00000000
[18:33:46.714]    __Result=0x00000000
[18:33:46.714]  </debugvars>
[18:33:46.715]  
[18:33:46.715]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:33:46.715]    <block atomic="false" info="">
[18:33:46.715]      __var deviceID = 0;
[18:33:46.716]        // -> [deviceID <= 0x00000000]
[18:33:46.716]      __var version = 0;
[18:33:46.716]        // -> [version <= 0x00000000]
[18:33:46.716]      __var partNum = 0;
[18:33:46.716]        // -> [partNum <= 0x00000000]
[18:33:46.716]      __var manuf = 0;
[18:33:46.717]        // -> [manuf <= 0x00000000]
[18:33:46.717]      __var isMSPM0G1X0X_G3X0X = 0;
[18:33:46.717]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:33:46.717]      __var isProduction = 0;
[18:33:46.717]        // -> [isProduction <= 0x00000000]
[18:33:46.717]      __var continueId = 0;
[18:33:46.717]        // -> [continueId <= 0x00000000]
[18:33:46.718]      deviceID =   Read32(0x41C40004);
[18:33:46.726]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:33:46.727]        // -> [deviceID <= 0x2BB8802F]
[18:33:46.727]      version = deviceID >> 28;
[18:33:46.727]        // -> [version <= 0x00000002]
[18:33:46.727]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:33:46.727]        // -> [partNum <= 0x0000BB88]
[18:33:46.728]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:33:46.728]        // -> [manuf <= 0x00000017]
[18:33:46.728]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:33:46.728]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:33:46.728]      isProduction = (version > 0);
[18:33:46.728]        // -> [isProduction <= 0x00000001]
[18:33:46.728]    </block>
[18:33:46.728]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:33:46.728]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:33:46.729]        // =>  FALSE
[18:33:46.729]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:33:46.729]    </control>
[18:33:46.730]    <control if="continueId == 4" while="" timeout="0" info="">
[18:33:46.730]      // if-block "continueId == 4"
[18:33:46.730]        // =>  FALSE
[18:33:46.730]      // skip if-block "continueId == 4"
[18:33:46.730]    </control>
[18:33:46.730]    <control if="!isProduction" while="" timeout="0" info="">
[18:33:46.730]      // if-block "!isProduction"
[18:33:46.731]        // =>  FALSE
[18:33:46.731]      // skip if-block "!isProduction"
[18:33:46.731]    </control>
[18:33:46.731]  </sequence>
[18:33:46.731]  
[18:34:20.166]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:34:20.166]  
[18:34:20.166]  <debugvars>
[18:34:20.166]    // Pre-defined
[18:34:20.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:20.166]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:34:20.166]    __dp=0x00000000
[18:34:20.166]    __ap=0x00000000
[18:34:20.166]    __traceout=0x00000000      (Trace Disabled)
[18:34:20.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:20.166]    __FlashAddr=0x00000000
[18:34:20.166]    __FlashLen=0x00000000
[18:34:20.166]    __FlashArg=0x00000000
[18:34:20.166]    __FlashOp=0x00000000
[18:34:20.166]    __Result=0x00000000
[18:34:20.166]  </debugvars>
[18:34:20.167]  
[18:34:20.167]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:34:20.167]    <block atomic="false" info="">
[18:34:20.167]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:34:20.167]        // -> [isSWJ <= 0x00000001]
[18:34:20.167]      __var hasDormant = __protocol & 0x00020000;
[18:34:20.167]        // -> [hasDormant <= 0x00000000]
[18:34:20.167]      __var protType   = __protocol & 0x0000FFFF;
[18:34:20.167]        // -> [protType <= 0x00000002]
[18:34:20.167]    </block>
[18:34:20.167]    <control if="protType == 1" while="" timeout="0" info="">
[18:34:20.167]      // if-block "protType == 1"
[18:34:20.167]        // =>  FALSE
[18:34:20.167]      // skip if-block "protType == 1"
[18:34:20.167]    </control>
[18:34:20.167]    <control if="protType == 2" while="" timeout="0" info="">
[18:34:20.167]      // if-block "protType == 2"
[18:34:20.168]        // =>  TRUE
[18:34:20.168]      <control if="isSWJ" while="" timeout="0" info="">
[18:34:20.168]        // if-block "isSWJ"
[18:34:20.168]          // =>  TRUE
[18:34:20.168]        <control if="hasDormant" while="" timeout="0" info="">
[18:34:20.168]          // if-block "hasDormant"
[18:34:20.168]            // =>  FALSE
[18:34:20.168]          // skip if-block "hasDormant"
[18:34:20.168]        </control>
[18:34:20.168]        <control if="!hasDormant" while="" timeout="0" info="">
[18:34:20.168]          // if-block "!hasDormant"
[18:34:20.168]            // =>  TRUE
[18:34:20.168]          <block atomic="false" info="">
[18:34:20.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:34:20.170]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:20.170]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:34:20.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:34:20.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:34:20.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:20.173]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:34:20.174]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:34:20.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:34:20.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:34:20.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:34:20.176]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:34:20.177]          </block>
[18:34:20.177]          // end if-block "!hasDormant"
[18:34:20.177]        </control>
[18:34:20.177]        // end if-block "isSWJ"
[18:34:20.177]      </control>
[18:34:20.177]      <control if="!isSWJ" while="" timeout="0" info="">
[18:34:20.177]        // if-block "!isSWJ"
[18:34:20.177]          // =>  FALSE
[18:34:20.177]        // skip if-block "!isSWJ"
[18:34:20.177]      </control>
[18:34:20.177]      <block atomic="false" info="">
[18:34:20.177]        ReadDP(0x0);
[18:34:20.179]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:34:20.180]      </block>
[18:34:20.180]      // end if-block "protType == 2"
[18:34:20.180]    </control>
[18:34:20.180]  </sequence>
[18:34:20.180]  
[18:34:20.185]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:34:20.185]  
[18:34:20.186]  <debugvars>
[18:34:20.186]    // Pre-defined
[18:34:20.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:20.186]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:34:20.186]    __dp=0x00000000
[18:34:20.186]    __ap=0x00000000
[18:34:20.187]    __traceout=0x00000000      (Trace Disabled)
[18:34:20.187]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:20.187]    __FlashAddr=0x00000000
[18:34:20.187]    __FlashLen=0x00000000
[18:34:20.187]    __FlashArg=0x00000000
[18:34:20.187]    __FlashOp=0x00000000
[18:34:20.187]    __Result=0x00000000
[18:34:20.187]  </debugvars>
[18:34:20.187]  
[18:34:20.187]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:34:20.187]    <block atomic="false" info="">
[18:34:20.187]      __var SW_DP_ABORT       = 0x0;
[18:34:20.187]        // -> [SW_DP_ABORT <= 0x00000000]
[18:34:20.187]      __var DP_CTRL_STAT      = 0x4;
[18:34:20.187]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:34:20.187]      __var DP_SELECT         = 0x8;
[18:34:20.187]        // -> [DP_SELECT <= 0x00000008]
[18:34:20.187]      __var powered_down      = 0;
[18:34:20.187]        // -> [powered_down <= 0x00000000]
[18:34:20.187]      WriteDP(DP_SELECT, 0x00000000);
[18:34:20.189]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:34:20.189]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:34:20.190]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:34:20.190]        // -> [powered_down <= 0x00000001]
[18:34:20.190]    </block>
[18:34:20.190]    <control if="powered_down" while="" timeout="0" info="">
[18:34:20.191]      // if-block "powered_down"
[18:34:20.191]        // =>  TRUE
[18:34:20.191]      <block atomic="false" info="">
[18:34:20.191]        Message(0, "Debug/System power-up request sent");
[18:34:20.192]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:34:20.194]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:34:20.194]      </block>
[18:34:20.194]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:34:20.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:34:20.195]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:34:20.195]        // while-condition  =>  FALSE
[18:34:20.195]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:34:20.195]      </control>
[18:34:20.195]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:34:20.195]        // if-block "(__protocol & 0xFFFF) == 1"
[18:34:20.196]          // =>  FALSE
[18:34:20.196]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:34:20.196]      </control>
[18:34:20.196]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:34:20.196]        // if-block "(__protocol & 0xFFFF) == 2"
[18:34:20.196]          // =>  TRUE
[18:34:20.196]        <block atomic="false" info="">
[18:34:20.196]          Message(0, "executing SWD power up");
[18:34:20.197]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:34:20.199]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:34:20.199]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:34:20.200]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:34:20.200]        </block>
[18:34:20.200]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:34:20.200]      </control>
[18:34:20.200]      // end if-block "powered_down"
[18:34:20.200]    </control>
[18:34:20.200]    <block atomic="false" info="">
[18:34:20.201]      __var DEBUG_PORT_VAL    = 0;
[18:34:20.201]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:34:20.201]      __var ACCESS_POINT_VAL  = 0;
[18:34:20.201]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:34:20.201]      __ap = 1; 
[18:34:20.201]        // -> [__ap <= 0x00000001]
[18:34:20.201]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:34:20.204]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:34:20.204]      __ap = 4;
[18:34:20.204]        // -> [__ap <= 0x00000004]
[18:34:20.204]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:34:20.207]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:34:20.207]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:34:20.207]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:34:20.209]    </block>
[18:34:20.209]    <block atomic="false" info="">
[18:34:20.209]      __var nReset = 0x80;
[18:34:20.209]        // -> [nReset <= 0x00000080]
[18:34:20.209]      __var canReadPins = 0;
[18:34:20.209]        // -> [canReadPins <= 0x00000000]
[18:34:20.209]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:34:20.214]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:34:20.214]        // -> [canReadPins <= 0x00000001]
[18:34:20.214]    </block>
[18:34:20.214]    <control if="" while="1" timeout="200" info="">
[18:34:20.214]      // while "1"  (timeout="200")
[18:34:20.214]      // while-condition  =>  TRUE
[18:34:20.214]      // while "1"  (timeout="200")
[18:34:20.214]      // while-condition  =>  TRUE
[18:34:20.214]      // while "1"  (timeout="200")
[18:34:20.214]      // while-condition  =>  TRUE
[18:34:20.214]      // while "1"  (timeout="200")
[18:34:20.214]      // while-condition  =>  TRUE
[18:34:20.214]      // while "1"  (timeout="200")
[18:34:20.214]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.215]      // while-condition  =>  TRUE
[18:34:20.215]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.216]      // while "1"  (timeout="200")
[18:34:20.216]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.217]      // while-condition  =>  TRUE
[18:34:20.217]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.218]      // while "1"  (timeout="200")
[18:34:20.218]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.219]      // while-condition  =>  TRUE
[18:34:20.219]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.220]      // while-condition  =>  TRUE
[18:34:20.220]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.221]      // while "1"  (timeout="200")
[18:34:20.221]      // while-condition  =>  TRUE
[18:34:20.222]      // while "1"  (timeout="200")
[18:34:20.222]      // while  =>  TIMEOUT
[18:34:20.222]      // end while "1"
[18:34:20.222]    </control>
[18:34:20.222]    <control if="canReadPins" while="" timeout="0" info="">
[18:34:20.222]      // if-block "canReadPins"
[18:34:20.222]        // =>  TRUE
[18:34:20.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:34:20.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:34:20.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:34:20.223]        // while-condition  =>  FALSE
[18:34:20.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:34:20.223]      </control>
[18:34:20.223]      // end if-block "canReadPins"
[18:34:20.224]    </control>
[18:34:20.224]    <control if="!canReadPins" while="" timeout="0" info="">
[18:34:20.224]      // if-block "!canReadPins"
[18:34:20.224]        // =>  FALSE
[18:34:20.224]      // skip if-block "!canReadPins"
[18:34:20.224]    </control>
[18:34:20.224]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:34:20.224]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:34:20.224]        // =>  TRUE
[18:34:20.224]      <block atomic="false" info="">
[18:34:20.224]        WriteAP(0x00, 0x190008);
[18:34:20.225]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:34:20.226]        WriteAP(0xF0, 0x01);
[18:34:20.229]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:34:20.229]      </block>
[18:34:20.229]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:34:20.229]    </control>
[18:34:20.229]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:34:20.229]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:34:20.229]        // =>  FALSE
[18:34:20.229]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:34:20.229]    </control>
[18:34:20.229]    <block atomic="false" info="">
[18:34:20.229]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:34:20.233]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:34:20.233]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:34:20.233]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:34:20.234]      __ap = 0; //lets make sure we reset the access point selection
[18:34:20.234]        // -> [__ap <= 0x00000000]
[18:34:20.234]    </block>
[18:34:20.234]  </sequence>
[18:34:20.234]  
[18:34:20.254]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:34:20.254]  
[18:34:20.254]  <debugvars>
[18:34:20.254]    // Pre-defined
[18:34:20.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:34:20.254]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[18:34:20.254]    __dp=0x00000000
[18:34:20.254]    __ap=0x00000000
[18:34:20.254]    __traceout=0x00000000      (Trace Disabled)
[18:34:20.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:34:20.254]    __FlashAddr=0x00000000
[18:34:20.254]    __FlashLen=0x00000000
[18:34:20.254]    __FlashArg=0x00000000
[18:34:20.255]    __FlashOp=0x00000000
[18:34:20.255]    __Result=0x00000000
[18:34:20.255]  </debugvars>
[18:34:20.255]  
[18:34:20.255]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:34:20.255]    <block atomic="false" info="">
[18:34:20.255]      __var deviceID = 0;
[18:34:20.255]        // -> [deviceID <= 0x00000000]
[18:34:20.255]      __var version = 0;
[18:34:20.255]        // -> [version <= 0x00000000]
[18:34:20.255]      __var partNum = 0;
[18:34:20.255]        // -> [partNum <= 0x00000000]
[18:34:20.255]      __var manuf = 0;
[18:34:20.255]        // -> [manuf <= 0x00000000]
[18:34:20.255]      __var isMSPM0G1X0X_G3X0X = 0;
[18:34:20.255]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:34:20.255]      __var isProduction = 0;
[18:34:20.255]        // -> [isProduction <= 0x00000000]
[18:34:20.255]      __var continueId = 0;
[18:34:20.255]        // -> [continueId <= 0x00000000]
[18:34:20.255]      deviceID =   Read32(0x41C40004);
[18:34:20.262]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:34:20.262]        // -> [deviceID <= 0x2BB8802F]
[18:34:20.262]      version = deviceID >> 28;
[18:34:20.262]        // -> [version <= 0x00000002]
[18:34:20.262]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:34:20.262]        // -> [partNum <= 0x0000BB88]
[18:34:20.262]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:34:20.262]        // -> [manuf <= 0x00000017]
[18:34:20.262]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:34:20.262]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:34:20.262]      isProduction = (version > 0);
[18:34:20.262]        // -> [isProduction <= 0x00000001]
[18:34:20.262]    </block>
[18:34:20.262]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:34:20.262]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:34:20.262]        // =>  FALSE
[18:34:20.262]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:34:20.262]    </control>
[18:34:20.262]    <control if="continueId == 4" while="" timeout="0" info="">
[18:34:20.263]      // if-block "continueId == 4"
[18:34:20.263]        // =>  FALSE
[18:34:20.263]      // skip if-block "continueId == 4"
[18:34:20.263]    </control>
[18:34:20.263]    <control if="!isProduction" while="" timeout="0" info="">
[18:34:20.263]      // if-block "!isProduction"
[18:34:20.263]        // =>  FALSE
[18:34:20.263]      // skip if-block "!isProduction"
[18:34:20.263]    </control>
[18:34:20.263]  </sequence>
[18:34:20.263]  
[18:39:12.896]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:39:12.896]  
[18:39:12.896]  <debugvars>
[18:39:12.897]    // Pre-defined
[18:39:12.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:39:12.897]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:39:12.897]    __dp=0x00000000
[18:39:12.897]    __ap=0x00000000
[18:39:12.897]    __traceout=0x00000000      (Trace Disabled)
[18:39:12.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:39:12.897]    __FlashAddr=0x00000000
[18:39:12.897]    __FlashLen=0x00000000
[18:39:12.897]    __FlashArg=0x00000000
[18:39:12.897]    __FlashOp=0x00000000
[18:39:12.897]    __Result=0x00000000
[18:39:12.897]  </debugvars>
[18:39:12.897]  
[18:39:12.897]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:39:12.898]    <block atomic="false" info="">
[18:39:12.898]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:39:12.898]        // -> [isSWJ <= 0x00000001]
[18:39:12.898]      __var hasDormant = __protocol & 0x00020000;
[18:39:12.898]        // -> [hasDormant <= 0x00000000]
[18:39:12.898]      __var protType   = __protocol & 0x0000FFFF;
[18:39:12.898]        // -> [protType <= 0x00000002]
[18:39:12.898]    </block>
[18:39:12.898]    <control if="protType == 1" while="" timeout="0" info="">
[18:39:12.898]      // if-block "protType == 1"
[18:39:12.898]        // =>  FALSE
[18:39:12.898]      // skip if-block "protType == 1"
[18:39:12.898]    </control>
[18:39:12.898]    <control if="protType == 2" while="" timeout="0" info="">
[18:39:12.898]      // if-block "protType == 2"
[18:39:12.898]        // =>  TRUE
[18:39:12.898]      <control if="isSWJ" while="" timeout="0" info="">
[18:39:12.898]        // if-block "isSWJ"
[18:39:12.899]          // =>  TRUE
[18:39:12.899]        <control if="hasDormant" while="" timeout="0" info="">
[18:39:12.899]          // if-block "hasDormant"
[18:39:12.899]            // =>  FALSE
[18:39:12.899]          // skip if-block "hasDormant"
[18:39:12.899]        </control>
[18:39:12.899]        <control if="!hasDormant" while="" timeout="0" info="">
[18:39:12.899]          // if-block "!hasDormant"
[18:39:12.899]            // =>  TRUE
[18:39:12.899]          <block atomic="false" info="">
[18:39:12.900]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:39:12.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:39:12.903]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:39:12.913]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:39:12.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:39:12.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:39:12.915]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:39:12.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:39:12.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:39:12.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:39:12.917]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:39:12.921]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:39:12.922]          </block>
[18:39:12.922]          // end if-block "!hasDormant"
[18:39:12.922]        </control>
[18:39:12.922]        // end if-block "isSWJ"
[18:39:12.922]      </control>
[18:39:12.922]      <control if="!isSWJ" while="" timeout="0" info="">
[18:39:12.922]        // if-block "!isSWJ"
[18:39:12.922]          // =>  FALSE
[18:39:12.922]        // skip if-block "!isSWJ"
[18:39:12.922]      </control>
[18:39:12.922]      <block atomic="false" info="">
[18:39:12.922]        ReadDP(0x0);
[18:39:12.925]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:39:12.925]      </block>
[18:39:12.925]      // end if-block "protType == 2"
[18:39:12.925]    </control>
[18:39:12.925]  </sequence>
[18:39:12.925]  
[18:39:12.936]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:39:12.936]  
[18:39:12.937]  <debugvars>
[18:39:12.937]    // Pre-defined
[18:39:12.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:39:12.937]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:39:12.937]    __dp=0x00000000
[18:39:12.937]    __ap=0x00000000
[18:39:12.937]    __traceout=0x00000000      (Trace Disabled)
[18:39:12.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:39:12.937]    __FlashAddr=0x00000000
[18:39:12.937]    __FlashLen=0x00000000
[18:39:12.937]    __FlashArg=0x00000000
[18:39:12.937]    __FlashOp=0x00000000
[18:39:12.937]    __Result=0x00000000
[18:39:12.937]  </debugvars>
[18:39:12.937]  
[18:39:12.937]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:39:12.937]    <block atomic="false" info="">
[18:39:12.937]      __var SW_DP_ABORT       = 0x0;
[18:39:12.937]        // -> [SW_DP_ABORT <= 0x00000000]
[18:39:12.937]      __var DP_CTRL_STAT      = 0x4;
[18:39:12.937]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:39:12.937]      __var DP_SELECT         = 0x8;
[18:39:12.937]        // -> [DP_SELECT <= 0x00000008]
[18:39:12.937]      __var powered_down      = 0;
[18:39:12.937]        // -> [powered_down <= 0x00000000]
[18:39:12.938]      WriteDP(DP_SELECT, 0x00000000);
[18:39:12.939]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:39:12.939]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:39:12.941]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:39:12.941]        // -> [powered_down <= 0x00000001]
[18:39:12.941]    </block>
[18:39:12.941]    <control if="powered_down" while="" timeout="0" info="">
[18:39:12.941]      // if-block "powered_down"
[18:39:12.941]        // =>  TRUE
[18:39:12.941]      <block atomic="false" info="">
[18:39:12.941]        Message(0, "Debug/System power-up request sent");
[18:39:12.941]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:39:12.947]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:39:12.947]      </block>
[18:39:12.947]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:39:12.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:39:12.948]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:39:12.948]        // while-condition  =>  FALSE
[18:39:12.949]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:39:12.949]      </control>
[18:39:12.949]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:39:12.949]        // if-block "(__protocol & 0xFFFF) == 1"
[18:39:12.949]          // =>  FALSE
[18:39:12.949]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:39:12.949]      </control>
[18:39:12.949]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:39:12.949]        // if-block "(__protocol & 0xFFFF) == 2"
[18:39:12.949]          // =>  TRUE
[18:39:12.949]        <block atomic="false" info="">
[18:39:12.949]          Message(0, "executing SWD power up");
[18:39:12.953]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:39:12.956]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:39:12.956]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:39:12.959]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:39:12.959]        </block>
[18:39:12.959]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:39:12.959]      </control>
[18:39:12.959]      // end if-block "powered_down"
[18:39:12.959]    </control>
[18:39:12.959]    <block atomic="false" info="">
[18:39:12.959]      __var DEBUG_PORT_VAL    = 0;
[18:39:12.959]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:39:12.960]      __var ACCESS_POINT_VAL  = 0;
[18:39:12.960]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:39:12.960]      __ap = 1; 
[18:39:12.960]        // -> [__ap <= 0x00000001]
[18:39:12.960]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:39:12.967]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:39:12.967]      __ap = 4;
[18:39:12.967]        // -> [__ap <= 0x00000004]
[18:39:12.967]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:39:12.981]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:39:12.981]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:39:12.981]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:39:12.982]    </block>
[18:39:12.983]    <block atomic="false" info="">
[18:39:12.983]      __var nReset = 0x80;
[18:39:12.983]        // -> [nReset <= 0x00000080]
[18:39:12.983]      __var canReadPins = 0;
[18:39:12.983]        // -> [canReadPins <= 0x00000000]
[18:39:12.983]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:39:12.986]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:39:12.986]        // -> [canReadPins <= 0x00000001]
[18:39:12.986]    </block>
[18:39:12.986]    <control if="" while="1" timeout="200" info="">
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.986]      // while-condition  =>  TRUE
[18:39:12.986]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.987]      // while "1"  (timeout="200")
[18:39:12.987]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while-condition  =>  TRUE
[18:39:12.988]      // while "1"  (timeout="200")
[18:39:12.988]      // while  =>  TIMEOUT
[18:39:12.988]      // end while "1"
[18:39:12.988]    </control>
[18:39:12.988]    <control if="canReadPins" while="" timeout="0" info="">
[18:39:12.988]      // if-block "canReadPins"
[18:39:12.988]        // =>  TRUE
[18:39:12.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:39:12.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:39:12.990]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:39:12.990]        // while-condition  =>  FALSE
[18:39:12.990]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:39:12.990]      </control>
[18:39:12.990]      // end if-block "canReadPins"
[18:39:12.990]    </control>
[18:39:12.990]    <control if="!canReadPins" while="" timeout="0" info="">
[18:39:12.990]      // if-block "!canReadPins"
[18:39:12.990]        // =>  FALSE
[18:39:12.990]      // skip if-block "!canReadPins"
[18:39:12.990]    </control>
[18:39:12.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:39:12.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:39:12.990]        // =>  TRUE
[18:39:12.990]      <block atomic="false" info="">
[18:39:12.990]        WriteAP(0x00, 0x190008);
[18:39:12.992]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:39:12.992]        WriteAP(0xF0, 0x01);
[18:39:13.001]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:39:13.001]      </block>
[18:39:13.001]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:39:13.001]    </control>
[18:39:13.001]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:39:13.001]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:39:13.001]        // =>  FALSE
[18:39:13.001]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:39:13.001]    </control>
[18:39:13.001]    <block atomic="false" info="">
[18:39:13.001]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:39:13.012]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:39:13.012]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:39:13.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:39:13.013]      __ap = 0; //lets make sure we reset the access point selection
[18:39:13.013]        // -> [__ap <= 0x00000000]
[18:39:13.013]    </block>
[18:39:13.013]  </sequence>
[18:39:13.014]  
[18:39:13.037]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:39:13.037]  
[18:39:13.037]  <debugvars>
[18:39:13.037]    // Pre-defined
[18:39:13.037]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:39:13.037]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:39:13.037]    __dp=0x00000000
[18:39:13.037]    __ap=0x00000000
[18:39:13.037]    __traceout=0x00000000      (Trace Disabled)
[18:39:13.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:39:13.037]    __FlashAddr=0x00000000
[18:39:13.037]    __FlashLen=0x00000000
[18:39:13.037]    __FlashArg=0x00000000
[18:39:13.038]    __FlashOp=0x00000000
[18:39:13.038]    __Result=0x00000000
[18:39:13.038]  </debugvars>
[18:39:13.038]  
[18:39:13.038]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:39:13.038]    <block atomic="false" info="">
[18:39:13.038]      __var deviceID = 0;
[18:39:13.038]        // -> [deviceID <= 0x00000000]
[18:39:13.038]      __var version = 0;
[18:39:13.038]        // -> [version <= 0x00000000]
[18:39:13.038]      __var partNum = 0;
[18:39:13.038]        // -> [partNum <= 0x00000000]
[18:39:13.038]      __var manuf = 0;
[18:39:13.038]        // -> [manuf <= 0x00000000]
[18:39:13.038]      __var isMSPM0G1X0X_G3X0X = 0;
[18:39:13.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:39:13.038]      __var isProduction = 0;
[18:39:13.038]        // -> [isProduction <= 0x00000000]
[18:39:13.039]      __var continueId = 0;
[18:39:13.039]        // -> [continueId <= 0x00000000]
[18:39:13.039]      deviceID =   Read32(0x41C40004);
[18:39:13.045]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:39:13.045]        // -> [deviceID <= 0x2BB8802F]
[18:39:13.045]      version = deviceID >> 28;
[18:39:13.045]        // -> [version <= 0x00000002]
[18:39:13.045]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:39:13.045]        // -> [partNum <= 0x0000BB88]
[18:39:13.045]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:39:13.045]        // -> [manuf <= 0x00000017]
[18:39:13.045]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:39:13.045]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:39:13.045]      isProduction = (version > 0);
[18:39:13.045]        // -> [isProduction <= 0x00000001]
[18:39:13.045]    </block>
[18:39:13.045]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:39:13.045]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:39:13.045]        // =>  FALSE
[18:39:13.045]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:39:13.046]    </control>
[18:39:13.046]    <control if="continueId == 4" while="" timeout="0" info="">
[18:39:13.046]      // if-block "continueId == 4"
[18:39:13.046]        // =>  FALSE
[18:39:13.046]      // skip if-block "continueId == 4"
[18:39:13.046]    </control>
[18:39:13.046]    <control if="!isProduction" while="" timeout="0" info="">
[18:39:13.046]      // if-block "!isProduction"
[18:39:13.046]        // =>  FALSE
[18:39:13.046]      // skip if-block "!isProduction"
[18:39:13.046]    </control>
[18:39:13.046]  </sequence>
[18:39:13.046]  
[18:39:41.963]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:39:41.963]  
[18:39:41.964]  <debugvars>
[18:39:41.964]    // Pre-defined
[18:39:41.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:39:41.964]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:39:41.964]    __dp=0x00000000
[18:39:41.965]    __ap=0x00000000
[18:39:41.965]    __traceout=0x00000000      (Trace Disabled)
[18:39:41.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:39:41.965]    __FlashAddr=0x00000000
[18:39:41.965]    __FlashLen=0x00000000
[18:39:41.965]    __FlashArg=0x00000000
[18:39:41.965]    __FlashOp=0x00000000
[18:39:41.965]    __Result=0x00000000
[18:39:41.965]  </debugvars>
[18:39:41.966]  
[18:39:41.966]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:39:41.966]    <block atomic="false" info="">
[18:39:41.966]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:39:41.966]        // -> [isSWJ <= 0x00000001]
[18:39:41.966]      __var hasDormant = __protocol & 0x00020000;
[18:39:41.966]        // -> [hasDormant <= 0x00000000]
[18:39:41.966]      __var protType   = __protocol & 0x0000FFFF;
[18:39:41.968]        // -> [protType <= 0x00000002]
[18:39:41.968]    </block>
[18:39:41.968]    <control if="protType == 1" while="" timeout="0" info="">
[18:39:41.968]      // if-block "protType == 1"
[18:39:41.968]        // =>  FALSE
[18:39:41.968]      // skip if-block "protType == 1"
[18:39:41.968]    </control>
[18:39:41.968]    <control if="protType == 2" while="" timeout="0" info="">
[18:39:41.968]      // if-block "protType == 2"
[18:39:41.969]        // =>  TRUE
[18:39:41.969]      <control if="isSWJ" while="" timeout="0" info="">
[18:39:41.969]        // if-block "isSWJ"
[18:39:41.969]          // =>  TRUE
[18:39:41.969]        <control if="hasDormant" while="" timeout="0" info="">
[18:39:41.969]          // if-block "hasDormant"
[18:39:41.969]            // =>  FALSE
[18:39:41.970]          // skip if-block "hasDormant"
[18:39:41.970]        </control>
[18:39:41.970]        <control if="!hasDormant" while="" timeout="0" info="">
[18:39:41.970]          // if-block "!hasDormant"
[18:39:41.970]            // =>  TRUE
[18:39:41.970]          <block atomic="false" info="">
[18:39:41.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:39:41.975]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:39:41.975]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:39:41.981]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:39:41.982]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:39:41.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:39:41.983]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:39:41.986]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:39:41.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:39:41.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:39:41.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:39:41.993]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:39:41.993]          </block>
[18:39:41.993]          // end if-block "!hasDormant"
[18:39:41.994]        </control>
[18:39:41.994]        // end if-block "isSWJ"
[18:39:41.994]      </control>
[18:39:41.994]      <control if="!isSWJ" while="" timeout="0" info="">
[18:39:41.994]        // if-block "!isSWJ"
[18:39:41.994]          // =>  FALSE
[18:39:41.995]        // skip if-block "!isSWJ"
[18:39:41.995]      </control>
[18:39:41.995]      <block atomic="false" info="">
[18:39:41.995]        ReadDP(0x0);
[18:39:42.003]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:39:42.003]      </block>
[18:39:42.003]      // end if-block "protType == 2"
[18:39:42.003]    </control>
[18:39:42.003]  </sequence>
[18:39:42.003]  
[18:39:42.006]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:39:42.006]  
[18:39:42.006]  <debugvars>
[18:39:42.006]    // Pre-defined
[18:39:42.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:39:42.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:39:42.006]    __dp=0x00000000
[18:39:42.006]    __ap=0x00000000
[18:39:42.006]    __traceout=0x00000000      (Trace Disabled)
[18:39:42.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:39:42.006]    __FlashAddr=0x00000000
[18:39:42.006]    __FlashLen=0x00000000
[18:39:42.006]    __FlashArg=0x00000000
[18:39:42.006]    __FlashOp=0x00000000
[18:39:42.006]    __Result=0x00000000
[18:39:42.006]  </debugvars>
[18:39:42.006]  
[18:39:42.007]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:39:42.007]    <block atomic="false" info="">
[18:39:42.007]      __var SW_DP_ABORT       = 0x0;
[18:39:42.007]        // -> [SW_DP_ABORT <= 0x00000000]
[18:39:42.007]      __var DP_CTRL_STAT      = 0x4;
[18:39:42.007]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:39:42.007]      __var DP_SELECT         = 0x8;
[18:39:42.007]        // -> [DP_SELECT <= 0x00000008]
[18:39:42.007]      __var powered_down      = 0;
[18:39:42.007]        // -> [powered_down <= 0x00000000]
[18:39:42.007]      WriteDP(DP_SELECT, 0x00000000);
[18:39:42.008]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:39:42.008]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:39:42.015]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:39:42.015]        // -> [powered_down <= 0x00000001]
[18:39:42.015]    </block>
[18:39:42.015]    <control if="powered_down" while="" timeout="0" info="">
[18:39:42.015]      // if-block "powered_down"
[18:39:42.015]        // =>  TRUE
[18:39:42.015]      <block atomic="false" info="">
[18:39:42.015]        Message(0, "Debug/System power-up request sent");
[18:39:42.016]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:39:42.025]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:39:42.025]      </block>
[18:39:42.025]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:39:42.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:39:42.027]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:39:42.027]        // while-condition  =>  FALSE
[18:39:42.027]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:39:42.027]      </control>
[18:39:42.027]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:39:42.027]        // if-block "(__protocol & 0xFFFF) == 1"
[18:39:42.027]          // =>  FALSE
[18:39:42.027]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:39:42.027]      </control>
[18:39:42.027]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:39:42.027]        // if-block "(__protocol & 0xFFFF) == 2"
[18:39:42.028]          // =>  TRUE
[18:39:42.028]        <block atomic="false" info="">
[18:39:42.028]          Message(0, "executing SWD power up");
[18:39:42.034]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:39:42.042]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:39:42.042]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:39:42.049]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:39:42.050]        </block>
[18:39:42.050]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:39:42.050]      </control>
[18:39:42.050]      // end if-block "powered_down"
[18:39:42.050]    </control>
[18:39:42.050]    <block atomic="false" info="">
[18:39:42.050]      __var DEBUG_PORT_VAL    = 0;
[18:39:42.050]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:39:42.050]      __var ACCESS_POINT_VAL  = 0;
[18:39:42.050]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:39:42.050]      __ap = 1; 
[18:39:42.050]        // -> [__ap <= 0x00000001]
[18:39:42.050]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:39:42.058]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:39:42.059]      __ap = 4;
[18:39:42.059]        // -> [__ap <= 0x00000004]
[18:39:42.059]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:39:42.067]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:39:42.067]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:39:42.067]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:39:42.073]    </block>
[18:39:42.073]    <block atomic="false" info="">
[18:39:42.073]      __var nReset = 0x80;
[18:39:42.073]        // -> [nReset <= 0x00000080]
[18:39:42.073]      __var canReadPins = 0;
[18:39:42.073]        // -> [canReadPins <= 0x00000000]
[18:39:42.073]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:39:42.076]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:39:42.076]        // -> [canReadPins <= 0x00000001]
[18:39:42.077]    </block>
[18:39:42.077]    <control if="" while="1" timeout="200" info="">
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.077]      // while-condition  =>  TRUE
[18:39:42.077]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.078]      // while-condition  =>  TRUE
[18:39:42.078]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.079]      // while "1"  (timeout="200")
[18:39:42.079]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.080]      // while "1"  (timeout="200")
[18:39:42.080]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.081]      // while-condition  =>  TRUE
[18:39:42.081]      // while "1"  (timeout="200")
[18:39:42.082]      // while-condition  =>  TRUE
[18:39:42.082]      // while "1"  (timeout="200")
[18:39:42.082]      // while  =>  TIMEOUT
[18:39:42.082]      // end while "1"
[18:39:42.082]    </control>
[18:39:42.082]    <control if="canReadPins" while="" timeout="0" info="">
[18:39:42.082]      // if-block "canReadPins"
[18:39:42.082]        // =>  TRUE
[18:39:42.082]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:39:42.082]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:39:42.085]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:39:42.085]        // while-condition  =>  FALSE
[18:39:42.085]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:39:42.085]      </control>
[18:39:42.085]      // end if-block "canReadPins"
[18:39:42.086]    </control>
[18:39:42.086]    <control if="!canReadPins" while="" timeout="0" info="">
[18:39:42.086]      // if-block "!canReadPins"
[18:39:42.086]        // =>  FALSE
[18:39:42.086]      // skip if-block "!canReadPins"
[18:39:42.086]    </control>
[18:39:42.086]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:39:42.086]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:39:42.086]        // =>  TRUE
[18:39:42.086]      <block atomic="false" info="">
[18:39:42.086]        WriteAP(0x00, 0x190008);
[18:39:42.090]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:39:42.090]        WriteAP(0xF0, 0x01);
[18:39:42.096]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:39:42.096]      </block>
[18:39:42.096]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:39:42.096]    </control>
[18:39:42.096]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:39:42.096]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:39:42.096]        // =>  FALSE
[18:39:42.096]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:39:42.096]    </control>
[18:39:42.096]    <block atomic="false" info="">
[18:39:42.096]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:39:42.099]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:39:42.099]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:39:42.099]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:39:42.101]      __ap = 0; //lets make sure we reset the access point selection
[18:39:42.101]        // -> [__ap <= 0x00000000]
[18:39:42.101]    </block>
[18:39:42.101]  </sequence>
[18:39:42.101]  
[18:39:42.135]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:39:42.135]  
[18:39:42.135]  <debugvars>
[18:39:42.135]    // Pre-defined
[18:39:42.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:39:42.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:39:42.135]    __dp=0x00000000
[18:39:42.135]    __ap=0x00000000
[18:39:42.135]    __traceout=0x00000000      (Trace Disabled)
[18:39:42.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:39:42.135]    __FlashAddr=0x00000000
[18:39:42.135]    __FlashLen=0x00000000
[18:39:42.135]    __FlashArg=0x00000000
[18:39:42.136]    __FlashOp=0x00000000
[18:39:42.136]    __Result=0x00000000
[18:39:42.136]  </debugvars>
[18:39:42.136]  
[18:39:42.136]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:39:42.136]    <block atomic="false" info="">
[18:39:42.136]      __var deviceID = 0;
[18:39:42.136]        // -> [deviceID <= 0x00000000]
[18:39:42.136]      __var version = 0;
[18:39:42.136]        // -> [version <= 0x00000000]
[18:39:42.136]      __var partNum = 0;
[18:39:42.136]        // -> [partNum <= 0x00000000]
[18:39:42.136]      __var manuf = 0;
[18:39:42.136]        // -> [manuf <= 0x00000000]
[18:39:42.136]      __var isMSPM0G1X0X_G3X0X = 0;
[18:39:42.136]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:39:42.136]      __var isProduction = 0;
[18:39:42.136]        // -> [isProduction <= 0x00000000]
[18:39:42.136]      __var continueId = 0;
[18:39:42.136]        // -> [continueId <= 0x00000000]
[18:39:42.136]      deviceID =   Read32(0x41C40004);
[18:39:42.148]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:39:42.148]        // -> [deviceID <= 0x2BB8802F]
[18:39:42.149]      version = deviceID >> 28;
[18:39:42.149]        // -> [version <= 0x00000002]
[18:39:42.149]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:39:42.149]        // -> [partNum <= 0x0000BB88]
[18:39:42.149]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:39:42.149]        // -> [manuf <= 0x00000017]
[18:39:42.149]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:39:42.149]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:39:42.149]      isProduction = (version > 0);
[18:39:42.149]        // -> [isProduction <= 0x00000001]
[18:39:42.149]    </block>
[18:39:42.149]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:39:42.149]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:39:42.149]        // =>  FALSE
[18:39:42.149]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:39:42.149]    </control>
[18:39:42.149]    <control if="continueId == 4" while="" timeout="0" info="">
[18:39:42.149]      // if-block "continueId == 4"
[18:39:42.149]        // =>  FALSE
[18:39:42.150]      // skip if-block "continueId == 4"
[18:39:42.150]    </control>
[18:39:42.150]    <control if="!isProduction" while="" timeout="0" info="">
[18:39:42.150]      // if-block "!isProduction"
[18:39:42.150]        // =>  FALSE
[18:39:42.150]      // skip if-block "!isProduction"
[18:39:42.150]    </control>
[18:39:42.150]  </sequence>
[18:39:42.150]  
[18:43:13.414]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:43:13.414]  
[18:43:13.415]  <debugvars>
[18:43:13.415]    // Pre-defined
[18:43:13.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:43:13.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:43:13.415]    __dp=0x00000000
[18:43:13.415]    __ap=0x00000000
[18:43:13.415]    __traceout=0x00000000      (Trace Disabled)
[18:43:13.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:43:13.415]    __FlashAddr=0x00000000
[18:43:13.415]    __FlashLen=0x00000000
[18:43:13.415]    __FlashArg=0x00000000
[18:43:13.415]    __FlashOp=0x00000000
[18:43:13.415]    __Result=0x00000000
[18:43:13.415]  </debugvars>
[18:43:13.415]  
[18:43:13.416]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:43:13.416]    <block atomic="false" info="">
[18:43:13.416]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:43:13.416]        // -> [isSWJ <= 0x00000001]
[18:43:13.416]      __var hasDormant = __protocol & 0x00020000;
[18:43:13.416]        // -> [hasDormant <= 0x00000000]
[18:43:13.416]      __var protType   = __protocol & 0x0000FFFF;
[18:43:13.416]        // -> [protType <= 0x00000002]
[18:43:13.416]    </block>
[18:43:13.416]    <control if="protType == 1" while="" timeout="0" info="">
[18:43:13.416]      // if-block "protType == 1"
[18:43:13.416]        // =>  FALSE
[18:43:13.416]      // skip if-block "protType == 1"
[18:43:13.416]    </control>
[18:43:13.416]    <control if="protType == 2" while="" timeout="0" info="">
[18:43:13.416]      // if-block "protType == 2"
[18:43:13.416]        // =>  TRUE
[18:43:13.416]      <control if="isSWJ" while="" timeout="0" info="">
[18:43:13.416]        // if-block "isSWJ"
[18:43:13.416]          // =>  TRUE
[18:43:13.417]        <control if="hasDormant" while="" timeout="0" info="">
[18:43:13.417]          // if-block "hasDormant"
[18:43:13.417]            // =>  FALSE
[18:43:13.417]          // skip if-block "hasDormant"
[18:43:13.417]        </control>
[18:43:13.417]        <control if="!hasDormant" while="" timeout="0" info="">
[18:43:13.417]          // if-block "!hasDormant"
[18:43:13.417]            // =>  TRUE
[18:43:13.417]          <block atomic="false" info="">
[18:43:13.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:43:13.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:43:13.422]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:43:13.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:43:13.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:43:13.433]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:43:13.433]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:43:13.436]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:43:13.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:43:13.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:43:13.440]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:43:13.443]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:43:13.443]          </block>
[18:43:13.443]          // end if-block "!hasDormant"
[18:43:13.443]        </control>
[18:43:13.443]        // end if-block "isSWJ"
[18:43:13.443]      </control>
[18:43:13.443]      <control if="!isSWJ" while="" timeout="0" info="">
[18:43:13.443]        // if-block "!isSWJ"
[18:43:13.443]          // =>  FALSE
[18:43:13.443]        // skip if-block "!isSWJ"
[18:43:13.444]      </control>
[18:43:13.444]      <block atomic="false" info="">
[18:43:13.444]        ReadDP(0x0);
[18:43:13.457]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:43:13.457]      </block>
[18:43:13.457]      // end if-block "protType == 2"
[18:43:13.457]    </control>
[18:43:13.457]  </sequence>
[18:43:13.457]  
[18:43:13.460]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:43:13.460]  
[18:43:13.460]  <debugvars>
[18:43:13.460]    // Pre-defined
[18:43:13.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:43:13.460]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:43:13.460]    __dp=0x00000000
[18:43:13.460]    __ap=0x00000000
[18:43:13.460]    __traceout=0x00000000      (Trace Disabled)
[18:43:13.460]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:43:13.460]    __FlashAddr=0x00000000
[18:43:13.460]    __FlashLen=0x00000000
[18:43:13.460]    __FlashArg=0x00000000
[18:43:13.460]    __FlashOp=0x00000000
[18:43:13.460]    __Result=0x00000000
[18:43:13.460]  </debugvars>
[18:43:13.460]  
[18:43:13.460]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:43:13.462]    <block atomic="false" info="">
[18:43:13.462]      __var SW_DP_ABORT       = 0x0;
[18:43:13.462]        // -> [SW_DP_ABORT <= 0x00000000]
[18:43:13.462]      __var DP_CTRL_STAT      = 0x4;
[18:43:13.462]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:43:13.462]      __var DP_SELECT         = 0x8;
[18:43:13.462]        // -> [DP_SELECT <= 0x00000008]
[18:43:13.462]      __var powered_down      = 0;
[18:43:13.462]        // -> [powered_down <= 0x00000000]
[18:43:13.462]      WriteDP(DP_SELECT, 0x00000000);
[18:43:13.463]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:43:13.464]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:43:13.465]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:43:13.465]        // -> [powered_down <= 0x00000001]
[18:43:13.465]    </block>
[18:43:13.465]    <control if="powered_down" while="" timeout="0" info="">
[18:43:13.465]      // if-block "powered_down"
[18:43:13.466]        // =>  TRUE
[18:43:13.466]      <block atomic="false" info="">
[18:43:13.466]        Message(0, "Debug/System power-up request sent");
[18:43:13.470]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:43:13.474]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:43:13.474]      </block>
[18:43:13.474]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:43:13.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:43:13.480]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:43:13.480]        // while-condition  =>  FALSE
[18:43:13.482]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:43:13.482]      </control>
[18:43:13.482]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:43:13.482]        // if-block "(__protocol & 0xFFFF) == 1"
[18:43:13.482]          // =>  FALSE
[18:43:13.482]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:43:13.482]      </control>
[18:43:13.482]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:43:13.483]        // if-block "(__protocol & 0xFFFF) == 2"
[18:43:13.483]          // =>  TRUE
[18:43:13.483]        <block atomic="false" info="">
[18:43:13.483]          Message(0, "executing SWD power up");
[18:43:13.486]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:43:13.487]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:43:13.487]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:43:13.489]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:43:13.489]        </block>
[18:43:13.489]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:43:13.489]      </control>
[18:43:13.489]      // end if-block "powered_down"
[18:43:13.489]    </control>
[18:43:13.490]    <block atomic="false" info="">
[18:43:13.490]      __var DEBUG_PORT_VAL    = 0;
[18:43:13.490]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:43:13.490]      __var ACCESS_POINT_VAL  = 0;
[18:43:13.490]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:43:13.490]      __ap = 1; 
[18:43:13.490]        // -> [__ap <= 0x00000001]
[18:43:13.490]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:43:13.494]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:43:13.494]      __ap = 4;
[18:43:13.494]        // -> [__ap <= 0x00000004]
[18:43:13.494]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:43:13.500]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:43:13.500]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:43:13.500]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:43:13.502]    </block>
[18:43:13.502]    <block atomic="false" info="">
[18:43:13.502]      __var nReset = 0x80;
[18:43:13.502]        // -> [nReset <= 0x00000080]
[18:43:13.502]      __var canReadPins = 0;
[18:43:13.502]        // -> [canReadPins <= 0x00000000]
[18:43:13.502]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:43:13.504]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:43:13.504]        // -> [canReadPins <= 0x00000001]
[18:43:13.504]    </block>
[18:43:13.504]    <control if="" while="1" timeout="200" info="">
[18:43:13.504]      // while "1"  (timeout="200")
[18:43:13.504]      // while-condition  =>  TRUE
[18:43:13.504]      // while "1"  (timeout="200")
[18:43:13.504]      // while-condition  =>  TRUE
[18:43:13.505]      // while "1"  (timeout="200")
[18:43:13.505]      // while  =>  TIMEOUT
[18:43:13.505]      // end while "1"
[18:43:13.505]    </control>
[18:43:13.505]    <control if="canReadPins" while="" timeout="0" info="">
[18:43:13.505]      // if-block "canReadPins"
[18:43:13.505]        // =>  TRUE
[18:43:13.505]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:43:13.505]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:43:13.508]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:43:13.508]        // while-condition  =>  FALSE
[18:43:13.508]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:43:13.508]      </control>
[18:43:13.508]      // end if-block "canReadPins"
[18:43:13.508]    </control>
[18:43:13.508]    <control if="!canReadPins" while="" timeout="0" info="">
[18:43:13.508]      // if-block "!canReadPins"
[18:43:13.508]        // =>  FALSE
[18:43:13.508]      // skip if-block "!canReadPins"
[18:43:13.508]    </control>
[18:43:13.508]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:43:13.508]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:43:13.508]        // =>  TRUE
[18:43:13.508]      <block atomic="false" info="">
[18:43:13.508]        WriteAP(0x00, 0x190008);
[18:43:13.512]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:43:13.512]        WriteAP(0xF0, 0x01);
[18:43:13.519]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:43:13.519]      </block>
[18:43:13.519]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:43:13.519]    </control>
[18:43:13.519]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:43:13.520]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:43:13.520]        // =>  FALSE
[18:43:13.520]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:43:13.520]    </control>
[18:43:13.520]    <block atomic="false" info="">
[18:43:13.520]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:43:13.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:43:13.527]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:43:13.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:43:13.532]      __ap = 0; //lets make sure we reset the access point selection
[18:43:13.532]        // -> [__ap <= 0x00000000]
[18:43:13.532]    </block>
[18:43:13.532]  </sequence>
[18:43:13.532]  
[18:43:13.566]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:43:13.566]  
[18:43:13.566]  <debugvars>
[18:43:13.566]    // Pre-defined
[18:43:13.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:43:13.566]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:43:13.566]    __dp=0x00000000
[18:43:13.566]    __ap=0x00000000
[18:43:13.566]    __traceout=0x00000000      (Trace Disabled)
[18:43:13.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:43:13.566]    __FlashAddr=0x00000000
[18:43:13.566]    __FlashLen=0x00000000
[18:43:13.566]    __FlashArg=0x00000000
[18:43:13.566]    __FlashOp=0x00000000
[18:43:13.566]    __Result=0x00000000
[18:43:13.566]  </debugvars>
[18:43:13.566]  
[18:43:13.566]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:43:13.566]    <block atomic="false" info="">
[18:43:13.566]      __var deviceID = 0;
[18:43:13.566]        // -> [deviceID <= 0x00000000]
[18:43:13.566]      __var version = 0;
[18:43:13.566]        // -> [version <= 0x00000000]
[18:43:13.566]      __var partNum = 0;
[18:43:13.567]        // -> [partNum <= 0x00000000]
[18:43:13.567]      __var manuf = 0;
[18:43:13.567]        // -> [manuf <= 0x00000000]
[18:43:13.567]      __var isMSPM0G1X0X_G3X0X = 0;
[18:43:13.567]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:43:13.567]      __var isProduction = 0;
[18:43:13.567]        // -> [isProduction <= 0x00000000]
[18:43:13.567]      __var continueId = 0;
[18:43:13.567]        // -> [continueId <= 0x00000000]
[18:43:13.567]      deviceID =   Read32(0x41C40004);
[18:43:13.573]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:43:13.573]        // -> [deviceID <= 0x2BB8802F]
[18:43:13.574]      version = deviceID >> 28;
[18:43:13.574]        // -> [version <= 0x00000002]
[18:43:13.574]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:43:13.574]        // -> [partNum <= 0x0000BB88]
[18:43:13.574]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:43:13.574]        // -> [manuf <= 0x00000017]
[18:43:13.574]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:43:13.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:43:13.574]      isProduction = (version > 0);
[18:43:13.574]        // -> [isProduction <= 0x00000001]
[18:43:13.574]    </block>
[18:43:13.574]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:43:13.574]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:43:13.574]        // =>  FALSE
[18:43:13.574]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:43:13.574]    </control>
[18:43:13.574]    <control if="continueId == 4" while="" timeout="0" info="">
[18:43:13.574]      // if-block "continueId == 4"
[18:43:13.575]        // =>  FALSE
[18:43:13.575]      // skip if-block "continueId == 4"
[18:43:13.575]    </control>
[18:43:13.575]    <control if="!isProduction" while="" timeout="0" info="">
[18:43:13.575]      // if-block "!isProduction"
[18:43:13.575]        // =>  FALSE
[18:43:13.575]      // skip if-block "!isProduction"
[18:43:13.575]    </control>
[18:43:13.575]  </sequence>
[18:43:13.575]  
[18:44:42.164]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:44:42.164]  
[18:44:42.164]  <debugvars>
[18:44:42.164]    // Pre-defined
[18:44:42.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:44:42.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:44:42.165]    __dp=0x00000000
[18:44:42.165]    __ap=0x00000000
[18:44:42.165]    __traceout=0x00000000      (Trace Disabled)
[18:44:42.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:44:42.165]    __FlashAddr=0x00000000
[18:44:42.165]    __FlashLen=0x00000000
[18:44:42.165]    __FlashArg=0x00000000
[18:44:42.165]    __FlashOp=0x00000000
[18:44:42.165]    __Result=0x00000000
[18:44:42.165]  </debugvars>
[18:44:42.165]  
[18:44:42.166]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:44:42.166]    <block atomic="false" info="">
[18:44:42.166]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:44:42.166]        // -> [isSWJ <= 0x00000001]
[18:44:42.166]      __var hasDormant = __protocol & 0x00020000;
[18:44:42.166]        // -> [hasDormant <= 0x00000000]
[18:44:42.166]      __var protType   = __protocol & 0x0000FFFF;
[18:44:42.166]        // -> [protType <= 0x00000002]
[18:44:42.166]    </block>
[18:44:42.166]    <control if="protType == 1" while="" timeout="0" info="">
[18:44:42.166]      // if-block "protType == 1"
[18:44:42.166]        // =>  FALSE
[18:44:42.166]      // skip if-block "protType == 1"
[18:44:42.166]    </control>
[18:44:42.167]    <control if="protType == 2" while="" timeout="0" info="">
[18:44:42.167]      // if-block "protType == 2"
[18:44:42.167]        // =>  TRUE
[18:44:42.167]      <control if="isSWJ" while="" timeout="0" info="">
[18:44:42.167]        // if-block "isSWJ"
[18:44:42.167]          // =>  TRUE
[18:44:42.167]        <control if="hasDormant" while="" timeout="0" info="">
[18:44:42.167]          // if-block "hasDormant"
[18:44:42.167]            // =>  FALSE
[18:44:42.167]          // skip if-block "hasDormant"
[18:44:42.167]        </control>
[18:44:42.167]        <control if="!hasDormant" while="" timeout="0" info="">
[18:44:42.167]          // if-block "!hasDormant"
[18:44:42.167]            // =>  TRUE
[18:44:42.167]          <block atomic="false" info="">
[18:44:42.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:44:42.169]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:44:42.169]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:44:42.170]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:44:42.170]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:44:42.172]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:44:42.172]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:44:42.174]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:44:42.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:44:42.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:44:42.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:44:42.178]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:44:42.178]          </block>
[18:44:42.178]          // end if-block "!hasDormant"
[18:44:42.178]        </control>
[18:44:42.178]        // end if-block "isSWJ"
[18:44:42.178]      </control>
[18:44:42.178]      <control if="!isSWJ" while="" timeout="0" info="">
[18:44:42.180]        // if-block "!isSWJ"
[18:44:42.180]          // =>  FALSE
[18:44:42.180]        // skip if-block "!isSWJ"
[18:44:42.180]      </control>
[18:44:42.180]      <block atomic="false" info="">
[18:44:42.180]        ReadDP(0x0);
[18:44:42.185]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:44:42.185]      </block>
[18:44:42.186]      // end if-block "protType == 2"
[18:44:42.186]    </control>
[18:44:42.186]  </sequence>
[18:44:42.186]  
[18:44:42.192]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:44:42.192]  
[18:44:42.192]  <debugvars>
[18:44:42.192]    // Pre-defined
[18:44:42.192]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:44:42.192]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:44:42.193]    __dp=0x00000000
[18:44:42.193]    __ap=0x00000000
[18:44:42.193]    __traceout=0x00000000      (Trace Disabled)
[18:44:42.193]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:44:42.194]    __FlashAddr=0x00000000
[18:44:42.194]    __FlashLen=0x00000000
[18:44:42.194]    __FlashArg=0x00000000
[18:44:42.194]    __FlashOp=0x00000000
[18:44:42.194]    __Result=0x00000000
[18:44:42.194]  </debugvars>
[18:44:42.195]  
[18:44:42.195]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:44:42.195]    <block atomic="false" info="">
[18:44:42.195]      __var SW_DP_ABORT       = 0x0;
[18:44:42.195]        // -> [SW_DP_ABORT <= 0x00000000]
[18:44:42.195]      __var DP_CTRL_STAT      = 0x4;
[18:44:42.195]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:44:42.195]      __var DP_SELECT         = 0x8;
[18:44:42.195]        // -> [DP_SELECT <= 0x00000008]
[18:44:42.195]      __var powered_down      = 0;
[18:44:42.196]        // -> [powered_down <= 0x00000000]
[18:44:42.196]      WriteDP(DP_SELECT, 0x00000000);
[18:44:42.203]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:44:42.203]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:44:42.205]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:44:42.205]        // -> [powered_down <= 0x00000001]
[18:44:42.205]    </block>
[18:44:42.205]    <control if="powered_down" while="" timeout="0" info="">
[18:44:42.205]      // if-block "powered_down"
[18:44:42.205]        // =>  TRUE
[18:44:42.205]      <block atomic="false" info="">
[18:44:42.205]        Message(0, "Debug/System power-up request sent");
[18:44:42.207]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:44:42.210]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:44:42.210]      </block>
[18:44:42.211]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:44:42.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:44:42.212]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:44:42.212]        // while-condition  =>  FALSE
[18:44:42.212]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:44:42.212]      </control>
[18:44:42.212]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:44:42.213]        // if-block "(__protocol & 0xFFFF) == 1"
[18:44:42.213]          // =>  FALSE
[18:44:42.213]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:44:42.213]      </control>
[18:44:42.213]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:44:42.213]        // if-block "(__protocol & 0xFFFF) == 2"
[18:44:42.214]          // =>  TRUE
[18:44:42.214]        <block atomic="false" info="">
[18:44:42.214]          Message(0, "executing SWD power up");
[18:44:42.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:44:42.224]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:44:42.224]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:44:42.226]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:44:42.226]        </block>
[18:44:42.226]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:44:42.226]      </control>
[18:44:42.226]      // end if-block "powered_down"
[18:44:42.226]    </control>
[18:44:42.226]    <block atomic="false" info="">
[18:44:42.227]      __var DEBUG_PORT_VAL    = 0;
[18:44:42.227]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:44:42.227]      __var ACCESS_POINT_VAL  = 0;
[18:44:42.227]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:44:42.227]      __ap = 1; 
[18:44:42.227]        // -> [__ap <= 0x00000001]
[18:44:42.227]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:44:42.234]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:44:42.235]      __ap = 4;
[18:44:42.235]        // -> [__ap <= 0x00000004]
[18:44:42.235]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:44:42.242]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:44:42.242]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:44:42.242]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:44:42.245]    </block>
[18:44:42.245]    <block atomic="false" info="">
[18:44:42.245]      __var nReset = 0x80;
[18:44:42.245]        // -> [nReset <= 0x00000080]
[18:44:42.245]      __var canReadPins = 0;
[18:44:42.245]        // -> [canReadPins <= 0x00000000]
[18:44:42.245]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:44:42.247]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:44:42.248]        // -> [canReadPins <= 0x00000001]
[18:44:42.248]    </block>
[18:44:42.248]    <control if="" while="1" timeout="200" info="">
[18:44:42.248]      // while "1"  (timeout="200")
[18:44:42.248]      // while-condition  =>  TRUE
[18:44:42.248]      // while "1"  (timeout="200")
[18:44:42.248]      // while-condition  =>  TRUE
[18:44:42.248]      // while "1"  (timeout="200")
[18:44:42.248]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.249]      // while "1"  (timeout="200")
[18:44:42.249]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.250]      // while-condition  =>  TRUE
[18:44:42.250]      // while "1"  (timeout="200")
[18:44:42.251]      // while-condition  =>  TRUE
[18:44:42.251]      // while "1"  (timeout="200")
[18:44:42.251]      // while-condition  =>  TRUE
[18:44:42.251]      // while "1"  (timeout="200")
[18:44:42.251]      // while-condition  =>  TRUE
[18:44:42.251]      // while "1"  (timeout="200")
[18:44:42.251]      // while-condition  =>  TRUE
[18:44:42.251]      // while "1"  (timeout="200")
[18:44:42.251]      // while-condition  =>  TRUE
[18:44:42.251]      // while "1"  (timeout="200")
[18:44:42.251]      // while-condition  =>  TRUE
[18:44:42.251]      // while "1"  (timeout="200")
[18:44:42.252]      // while-condition  =>  TRUE
[18:44:42.252]      // while "1"  (timeout="200")
[18:44:42.252]      // while-condition  =>  TRUE
[18:44:42.252]      // while "1"  (timeout="200")
[18:44:42.252]      // while-condition  =>  TRUE
[18:44:42.252]      // while "1"  (timeout="200")
[18:44:42.252]      // while-condition  =>  TRUE
[18:44:42.252]      // while "1"  (timeout="200")
[18:44:42.252]      // while-condition  =>  TRUE
[18:44:42.252]      // while "1"  (timeout="200")
[18:44:42.252]      // while-condition  =>  TRUE
[18:44:42.253]      // while "1"  (timeout="200")
[18:44:42.253]      // while-condition  =>  TRUE
[18:44:42.253]      // while "1"  (timeout="200")
[18:44:42.253]      // while-condition  =>  TRUE
[18:44:42.253]      // while "1"  (timeout="200")
[18:44:42.253]      // while-condition  =>  TRUE
[18:44:42.253]      // while "1"  (timeout="200")
[18:44:42.253]      // while-condition  =>  TRUE
[18:44:42.253]      // while "1"  (timeout="200")
[18:44:42.253]      // while-condition  =>  TRUE
[18:44:42.253]      // while "1"  (timeout="200")
[18:44:42.253]      // while-condition  =>  TRUE
[18:44:42.254]      // while "1"  (timeout="200")
[18:44:42.254]      // while  =>  TIMEOUT
[18:44:42.254]      // end while "1"
[18:44:42.254]    </control>
[18:44:42.254]    <control if="canReadPins" while="" timeout="0" info="">
[18:44:42.254]      // if-block "canReadPins"
[18:44:42.254]        // =>  TRUE
[18:44:42.254]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:44:42.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:44:42.256]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:44:42.256]        // while-condition  =>  FALSE
[18:44:42.256]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:44:42.256]      </control>
[18:44:42.256]      // end if-block "canReadPins"
[18:44:42.256]    </control>
[18:44:42.256]    <control if="!canReadPins" while="" timeout="0" info="">
[18:44:42.256]      // if-block "!canReadPins"
[18:44:42.256]        // =>  FALSE
[18:44:42.256]      // skip if-block "!canReadPins"
[18:44:42.257]    </control>
[18:44:42.257]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:44:42.257]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:44:42.257]        // =>  TRUE
[18:44:42.257]      <block atomic="false" info="">
[18:44:42.257]        WriteAP(0x00, 0x190008);
[18:44:42.258]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:44:42.260]        WriteAP(0xF0, 0x01);
[18:44:42.266]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:44:42.266]      </block>
[18:44:42.266]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:44:42.266]    </control>
[18:44:42.266]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:44:42.266]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:44:42.266]        // =>  FALSE
[18:44:42.266]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:44:42.266]    </control>
[18:44:42.266]    <block atomic="false" info="">
[18:44:42.266]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:44:42.272]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:44:42.272]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:44:42.272]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:44:42.274]      __ap = 0; //lets make sure we reset the access point selection
[18:44:42.274]        // -> [__ap <= 0x00000000]
[18:44:42.274]    </block>
[18:44:42.274]  </sequence>
[18:44:42.274]  
[18:44:42.300]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:44:42.300]  
[18:44:42.300]  <debugvars>
[18:44:42.300]    // Pre-defined
[18:44:42.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:44:42.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:44:42.300]    __dp=0x00000000
[18:44:42.300]    __ap=0x00000000
[18:44:42.300]    __traceout=0x00000000      (Trace Disabled)
[18:44:42.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:44:42.300]    __FlashAddr=0x00000000
[18:44:42.301]    __FlashLen=0x00000000
[18:44:42.301]    __FlashArg=0x00000000
[18:44:42.301]    __FlashOp=0x00000000
[18:44:42.301]    __Result=0x00000000
[18:44:42.301]  </debugvars>
[18:44:42.301]  
[18:44:42.301]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:44:42.301]    <block atomic="false" info="">
[18:44:42.301]      __var deviceID = 0;
[18:44:42.301]        // -> [deviceID <= 0x00000000]
[18:44:42.302]      __var version = 0;
[18:44:42.302]        // -> [version <= 0x00000000]
[18:44:42.302]      __var partNum = 0;
[18:44:42.302]        // -> [partNum <= 0x00000000]
[18:44:42.302]      __var manuf = 0;
[18:44:42.302]        // -> [manuf <= 0x00000000]
[18:44:42.302]      __var isMSPM0G1X0X_G3X0X = 0;
[18:44:42.302]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:44:42.302]      __var isProduction = 0;
[18:44:42.302]        // -> [isProduction <= 0x00000000]
[18:44:42.302]      __var continueId = 0;
[18:44:42.302]        // -> [continueId <= 0x00000000]
[18:44:42.302]      deviceID =   Read32(0x41C40004);
[18:44:42.307]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:44:42.307]        // -> [deviceID <= 0x2BB8802F]
[18:44:42.307]      version = deviceID >> 28;
[18:44:42.307]        // -> [version <= 0x00000002]
[18:44:42.309]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:44:42.309]        // -> [partNum <= 0x0000BB88]
[18:44:42.309]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:44:42.309]        // -> [manuf <= 0x00000017]
[18:44:42.309]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:44:42.309]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:44:42.309]      isProduction = (version > 0);
[18:44:42.309]        // -> [isProduction <= 0x00000001]
[18:44:42.309]    </block>
[18:44:42.309]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:44:42.309]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:44:42.309]        // =>  FALSE
[18:44:42.310]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:44:42.310]    </control>
[18:44:42.310]    <control if="continueId == 4" while="" timeout="0" info="">
[18:44:42.310]      // if-block "continueId == 4"
[18:44:42.310]        // =>  FALSE
[18:44:42.310]      // skip if-block "continueId == 4"
[18:44:42.310]    </control>
[18:44:42.310]    <control if="!isProduction" while="" timeout="0" info="">
[18:44:42.310]      // if-block "!isProduction"
[18:44:42.310]        // =>  FALSE
[18:44:42.310]      // skip if-block "!isProduction"
[18:44:42.310]    </control>
[18:44:42.310]  </sequence>
[18:44:42.310]  
[18:46:48.338]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:46:48.338]  
[18:46:48.338]  <debugvars>
[18:46:48.338]    // Pre-defined
[18:46:48.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:48.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:46:48.339]    __dp=0x00000000
[18:46:48.339]    __ap=0x00000000
[18:46:48.339]    __traceout=0x00000000      (Trace Disabled)
[18:46:48.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:48.339]    __FlashAddr=0x00000000
[18:46:48.339]    __FlashLen=0x00000000
[18:46:48.340]    __FlashArg=0x00000000
[18:46:48.340]    __FlashOp=0x00000000
[18:46:48.340]    __Result=0x00000000
[18:46:48.340]  </debugvars>
[18:46:48.340]  
[18:46:48.340]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:46:48.341]    <block atomic="false" info="">
[18:46:48.341]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:46:48.341]        // -> [isSWJ <= 0x00000001]
[18:46:48.341]      __var hasDormant = __protocol & 0x00020000;
[18:46:48.341]        // -> [hasDormant <= 0x00000000]
[18:46:48.341]      __var protType   = __protocol & 0x0000FFFF;
[18:46:48.341]        // -> [protType <= 0x00000002]
[18:46:48.341]    </block>
[18:46:48.342]    <control if="protType == 1" while="" timeout="0" info="">
[18:46:48.342]      // if-block "protType == 1"
[18:46:48.342]        // =>  FALSE
[18:46:48.342]      // skip if-block "protType == 1"
[18:46:48.342]    </control>
[18:46:48.342]    <control if="protType == 2" while="" timeout="0" info="">
[18:46:48.342]      // if-block "protType == 2"
[18:46:48.342]        // =>  TRUE
[18:46:48.342]      <control if="isSWJ" while="" timeout="0" info="">
[18:46:48.342]        // if-block "isSWJ"
[18:46:48.342]          // =>  TRUE
[18:46:48.343]        <control if="hasDormant" while="" timeout="0" info="">
[18:46:48.343]          // if-block "hasDormant"
[18:46:48.343]            // =>  FALSE
[18:46:48.343]          // skip if-block "hasDormant"
[18:46:48.343]        </control>
[18:46:48.343]        <control if="!hasDormant" while="" timeout="0" info="">
[18:46:48.343]          // if-block "!hasDormant"
[18:46:48.343]            // =>  TRUE
[18:46:48.343]          <block atomic="false" info="">
[18:46:48.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:46:48.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:48.345]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:46:48.346]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:46:48.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:46:48.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:48.348]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:46:48.350]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:46:48.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:46:48.352]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:46:48.352]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:46:48.354]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:46:48.354]          </block>
[18:46:48.354]          // end if-block "!hasDormant"
[18:46:48.354]        </control>
[18:46:48.355]        // end if-block "isSWJ"
[18:46:48.355]      </control>
[18:46:48.355]      <control if="!isSWJ" while="" timeout="0" info="">
[18:46:48.355]        // if-block "!isSWJ"
[18:46:48.355]          // =>  FALSE
[18:46:48.355]        // skip if-block "!isSWJ"
[18:46:48.355]      </control>
[18:46:48.355]      <block atomic="false" info="">
[18:46:48.355]        ReadDP(0x0);
[18:46:48.357]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:46:48.357]      </block>
[18:46:48.357]      // end if-block "protType == 2"
[18:46:48.357]    </control>
[18:46:48.357]  </sequence>
[18:46:48.357]  
[18:46:48.361]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:46:48.361]  
[18:46:48.361]  <debugvars>
[18:46:48.361]    // Pre-defined
[18:46:48.361]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:48.361]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:46:48.361]    __dp=0x00000000
[18:46:48.361]    __ap=0x00000000
[18:46:48.361]    __traceout=0x00000000      (Trace Disabled)
[18:46:48.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:48.361]    __FlashAddr=0x00000000
[18:46:48.361]    __FlashLen=0x00000000
[18:46:48.361]    __FlashArg=0x00000000
[18:46:48.361]    __FlashOp=0x00000000
[18:46:48.361]    __Result=0x00000000
[18:46:48.361]  </debugvars>
[18:46:48.361]  
[18:46:48.361]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:46:48.361]    <block atomic="false" info="">
[18:46:48.361]      __var SW_DP_ABORT       = 0x0;
[18:46:48.361]        // -> [SW_DP_ABORT <= 0x00000000]
[18:46:48.361]      __var DP_CTRL_STAT      = 0x4;
[18:46:48.361]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:46:48.361]      __var DP_SELECT         = 0x8;
[18:46:48.361]        // -> [DP_SELECT <= 0x00000008]
[18:46:48.362]      __var powered_down      = 0;
[18:46:48.362]        // -> [powered_down <= 0x00000000]
[18:46:48.362]      WriteDP(DP_SELECT, 0x00000000);
[18:46:48.365]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:46:48.365]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:46:48.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:46:48.367]        // -> [powered_down <= 0x00000001]
[18:46:48.368]    </block>
[18:46:48.368]    <control if="powered_down" while="" timeout="0" info="">
[18:46:48.368]      // if-block "powered_down"
[18:46:48.368]        // =>  TRUE
[18:46:48.368]      <block atomic="false" info="">
[18:46:48.368]        Message(0, "Debug/System power-up request sent");
[18:46:48.373]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:46:48.376]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:46:48.376]      </block>
[18:46:48.376]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:46:48.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:46:48.377]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:46:48.377]        // while-condition  =>  FALSE
[18:46:48.377]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:46:48.378]      </control>
[18:46:48.378]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:46:48.378]        // if-block "(__protocol & 0xFFFF) == 1"
[18:46:48.378]          // =>  FALSE
[18:46:48.378]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:46:48.378]      </control>
[18:46:48.378]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:46:48.378]        // if-block "(__protocol & 0xFFFF) == 2"
[18:46:48.378]          // =>  TRUE
[18:46:48.378]        <block atomic="false" info="">
[18:46:48.378]          Message(0, "executing SWD power up");
[18:46:48.380]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:46:48.381]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:46:48.381]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:46:48.383]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:46:48.383]        </block>
[18:46:48.383]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:46:48.383]      </control>
[18:46:48.383]      // end if-block "powered_down"
[18:46:48.383]    </control>
[18:46:48.383]    <block atomic="false" info="">
[18:46:48.383]      __var DEBUG_PORT_VAL    = 0;
[18:46:48.383]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:46:48.383]      __var ACCESS_POINT_VAL  = 0;
[18:46:48.383]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:46:48.383]      __ap = 1; 
[18:46:48.383]        // -> [__ap <= 0x00000001]
[18:46:48.384]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:46:48.388]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:46:48.388]      __ap = 4;
[18:46:48.388]        // -> [__ap <= 0x00000004]
[18:46:48.388]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:46:48.397]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:46:48.397]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:46:48.397]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:46:48.399]    </block>
[18:46:48.399]    <block atomic="false" info="">
[18:46:48.400]      __var nReset = 0x80;
[18:46:48.400]        // -> [nReset <= 0x00000080]
[18:46:48.400]      __var canReadPins = 0;
[18:46:48.400]        // -> [canReadPins <= 0x00000000]
[18:46:48.400]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:46:48.401]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:46:48.402]        // -> [canReadPins <= 0x00000001]
[18:46:48.402]    </block>
[18:46:48.402]    <control if="" while="1" timeout="200" info="">
[18:46:48.402]      // while "1"  (timeout="200")
[18:46:48.402]      // while-condition  =>  TRUE
[18:46:48.402]      // while "1"  (timeout="200")
[18:46:48.402]      // while-condition  =>  TRUE
[18:46:48.402]      // while "1"  (timeout="200")
[18:46:48.402]      // while-condition  =>  TRUE
[18:46:48.402]      // while "1"  (timeout="200")
[18:46:48.402]      // while-condition  =>  TRUE
[18:46:48.403]      // while "1"  (timeout="200")
[18:46:48.403]      // while-condition  =>  TRUE
[18:46:48.403]      // while "1"  (timeout="200")
[18:46:48.403]      // while-condition  =>  TRUE
[18:46:48.403]      // while "1"  (timeout="200")
[18:46:48.403]      // while-condition  =>  TRUE
[18:46:48.403]      // while "1"  (timeout="200")
[18:46:48.403]      // while-condition  =>  TRUE
[18:46:48.403]      // while "1"  (timeout="200")
[18:46:48.403]      // while-condition  =>  TRUE
[18:46:48.403]      // while "1"  (timeout="200")
[18:46:48.403]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.404]      // while-condition  =>  TRUE
[18:46:48.404]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.405]      // while "1"  (timeout="200")
[18:46:48.405]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.406]      // while-condition  =>  TRUE
[18:46:48.406]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.407]      // while-condition  =>  TRUE
[18:46:48.407]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.408]      // while-condition  =>  TRUE
[18:46:48.408]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.409]      // while "1"  (timeout="200")
[18:46:48.409]      // while-condition  =>  TRUE
[18:46:48.410]      // while "1"  (timeout="200")
[18:46:48.410]      // while  =>  TIMEOUT
[18:46:48.410]      // end while "1"
[18:46:48.410]    </control>
[18:46:48.410]    <control if="canReadPins" while="" timeout="0" info="">
[18:46:48.410]      // if-block "canReadPins"
[18:46:48.410]        // =>  TRUE
[18:46:48.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:46:48.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:46:48.412]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:46:48.412]        // while-condition  =>  FALSE
[18:46:48.412]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:46:48.412]      </control>
[18:46:48.412]      // end if-block "canReadPins"
[18:46:48.412]    </control>
[18:46:48.412]    <control if="!canReadPins" while="" timeout="0" info="">
[18:46:48.412]      // if-block "!canReadPins"
[18:46:48.412]        // =>  FALSE
[18:46:48.412]      // skip if-block "!canReadPins"
[18:46:48.412]    </control>
[18:46:48.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:46:48.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:46:48.412]        // =>  TRUE
[18:46:48.412]      <block atomic="false" info="">
[18:46:48.412]        WriteAP(0x00, 0x190008);
[18:46:48.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:46:48.414]        WriteAP(0xF0, 0x01);
[18:46:48.417]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:46:48.417]      </block>
[18:46:48.417]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:46:48.417]    </control>
[18:46:48.417]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:46:48.417]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:46:48.418]        // =>  FALSE
[18:46:48.418]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:46:48.418]    </control>
[18:46:48.418]    <block atomic="false" info="">
[18:46:48.418]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:46:48.422]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:46:48.422]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:46:48.422]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:46:48.424]      __ap = 0; //lets make sure we reset the access point selection
[18:46:48.424]        // -> [__ap <= 0x00000000]
[18:46:48.424]    </block>
[18:46:48.424]  </sequence>
[18:46:48.424]  
[18:46:48.450]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:46:48.450]  
[18:46:48.450]  <debugvars>
[18:46:48.451]    // Pre-defined
[18:46:48.451]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:46:48.451]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:46:48.451]    __dp=0x00000000
[18:46:48.451]    __ap=0x00000000
[18:46:48.451]    __traceout=0x00000000      (Trace Disabled)
[18:46:48.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:46:48.451]    __FlashAddr=0x00000000
[18:46:48.451]    __FlashLen=0x00000000
[18:46:48.451]    __FlashArg=0x00000000
[18:46:48.451]    __FlashOp=0x00000000
[18:46:48.451]    __Result=0x00000000
[18:46:48.452]  </debugvars>
[18:46:48.452]  
[18:46:48.452]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:46:48.452]    <block atomic="false" info="">
[18:46:48.452]      __var deviceID = 0;
[18:46:48.452]        // -> [deviceID <= 0x00000000]
[18:46:48.452]      __var version = 0;
[18:46:48.452]        // -> [version <= 0x00000000]
[18:46:48.452]      __var partNum = 0;
[18:46:48.452]        // -> [partNum <= 0x00000000]
[18:46:48.452]      __var manuf = 0;
[18:46:48.452]        // -> [manuf <= 0x00000000]
[18:46:48.452]      __var isMSPM0G1X0X_G3X0X = 0;
[18:46:48.452]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:46:48.452]      __var isProduction = 0;
[18:46:48.452]        // -> [isProduction <= 0x00000000]
[18:46:48.452]      __var continueId = 0;
[18:46:48.452]        // -> [continueId <= 0x00000000]
[18:46:48.452]      deviceID =   Read32(0x41C40004);
[18:46:48.459]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:46:48.459]        // -> [deviceID <= 0x2BB8802F]
[18:46:48.459]      version = deviceID >> 28;
[18:46:48.459]        // -> [version <= 0x00000002]
[18:46:48.459]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:46:48.460]        // -> [partNum <= 0x0000BB88]
[18:46:48.460]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:46:48.460]        // -> [manuf <= 0x00000017]
[18:46:48.460]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:46:48.460]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:46:48.460]      isProduction = (version > 0);
[18:46:48.460]        // -> [isProduction <= 0x00000001]
[18:46:48.460]    </block>
[18:46:48.460]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:46:48.460]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:46:48.460]        // =>  FALSE
[18:46:48.460]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:46:48.460]    </control>
[18:46:48.461]    <control if="continueId == 4" while="" timeout="0" info="">
[18:46:48.461]      // if-block "continueId == 4"
[18:46:48.461]        // =>  FALSE
[18:46:48.461]      // skip if-block "continueId == 4"
[18:46:48.461]    </control>
[18:46:48.461]    <control if="!isProduction" while="" timeout="0" info="">
[18:46:48.461]      // if-block "!isProduction"
[18:46:48.461]        // =>  FALSE
[18:46:48.461]      // skip if-block "!isProduction"
[18:46:48.461]    </control>
[18:46:48.461]  </sequence>
[18:46:48.461]  
[18:48:16.680]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:48:16.680]  
[18:48:16.680]  <debugvars>
[18:48:16.680]    // Pre-defined
[18:48:16.680]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:48:16.680]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:48:16.680]    __dp=0x00000000
[18:48:16.680]    __ap=0x00000000
[18:48:16.680]    __traceout=0x00000000      (Trace Disabled)
[18:48:16.680]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:48:16.680]    __FlashAddr=0x00000000
[18:48:16.680]    __FlashLen=0x00000000
[18:48:16.680]    __FlashArg=0x00000000
[18:48:16.680]    __FlashOp=0x00000000
[18:48:16.681]    __Result=0x00000000
[18:48:16.681]  </debugvars>
[18:48:16.681]  
[18:48:16.681]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:48:16.681]    <block atomic="false" info="">
[18:48:16.681]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:48:16.681]        // -> [isSWJ <= 0x00000001]
[18:48:16.681]      __var hasDormant = __protocol & 0x00020000;
[18:48:16.681]        // -> [hasDormant <= 0x00000000]
[18:48:16.681]      __var protType   = __protocol & 0x0000FFFF;
[18:48:16.681]        // -> [protType <= 0x00000002]
[18:48:16.681]    </block>
[18:48:16.681]    <control if="protType == 1" while="" timeout="0" info="">
[18:48:16.681]      // if-block "protType == 1"
[18:48:16.681]        // =>  FALSE
[18:48:16.681]      // skip if-block "protType == 1"
[18:48:16.681]    </control>
[18:48:16.681]    <control if="protType == 2" while="" timeout="0" info="">
[18:48:16.681]      // if-block "protType == 2"
[18:48:16.681]        // =>  TRUE
[18:48:16.682]      <control if="isSWJ" while="" timeout="0" info="">
[18:48:16.682]        // if-block "isSWJ"
[18:48:16.682]          // =>  TRUE
[18:48:16.682]        <control if="hasDormant" while="" timeout="0" info="">
[18:48:16.682]          // if-block "hasDormant"
[18:48:16.682]            // =>  FALSE
[18:48:16.682]          // skip if-block "hasDormant"
[18:48:16.682]        </control>
[18:48:16.682]        <control if="!hasDormant" while="" timeout="0" info="">
[18:48:16.682]          // if-block "!hasDormant"
[18:48:16.682]            // =>  TRUE
[18:48:16.682]          <block atomic="false" info="">
[18:48:16.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:48:16.684]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:48:16.684]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:48:16.688]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:48:16.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:48:16.690]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:48:16.690]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:48:16.695]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:48:16.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:48:16.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:48:16.697]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:48:16.698]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:48:16.698]          </block>
[18:48:16.698]          // end if-block "!hasDormant"
[18:48:16.698]        </control>
[18:48:16.698]        // end if-block "isSWJ"
[18:48:16.698]      </control>
[18:48:16.698]      <control if="!isSWJ" while="" timeout="0" info="">
[18:48:16.698]        // if-block "!isSWJ"
[18:48:16.699]          // =>  FALSE
[18:48:16.699]        // skip if-block "!isSWJ"
[18:48:16.699]      </control>
[18:48:16.699]      <block atomic="false" info="">
[18:48:16.699]        ReadDP(0x0);
[18:48:16.700]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:48:16.700]      </block>
[18:48:16.701]      // end if-block "protType == 2"
[18:48:16.701]    </control>
[18:48:16.701]  </sequence>
[18:48:16.701]  
[18:48:16.703]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:48:16.703]  
[18:48:16.703]  <debugvars>
[18:48:16.703]    // Pre-defined
[18:48:16.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:48:16.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:48:16.703]    __dp=0x00000000
[18:48:16.703]    __ap=0x00000000
[18:48:16.703]    __traceout=0x00000000      (Trace Disabled)
[18:48:16.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:48:16.703]    __FlashAddr=0x00000000
[18:48:16.703]    __FlashLen=0x00000000
[18:48:16.704]    __FlashArg=0x00000000
[18:48:16.704]    __FlashOp=0x00000000
[18:48:16.704]    __Result=0x00000000
[18:48:16.704]  </debugvars>
[18:48:16.704]  
[18:48:16.704]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:48:16.704]    <block atomic="false" info="">
[18:48:16.704]      __var SW_DP_ABORT       = 0x0;
[18:48:16.704]        // -> [SW_DP_ABORT <= 0x00000000]
[18:48:16.704]      __var DP_CTRL_STAT      = 0x4;
[18:48:16.704]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:48:16.704]      __var DP_SELECT         = 0x8;
[18:48:16.704]        // -> [DP_SELECT <= 0x00000008]
[18:48:16.704]      __var powered_down      = 0;
[18:48:16.704]        // -> [powered_down <= 0x00000000]
[18:48:16.704]      WriteDP(DP_SELECT, 0x00000000);
[18:48:16.707]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:48:16.707]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:48:16.708]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:48:16.708]        // -> [powered_down <= 0x00000001]
[18:48:16.708]    </block>
[18:48:16.708]    <control if="powered_down" while="" timeout="0" info="">
[18:48:16.708]      // if-block "powered_down"
[18:48:16.708]        // =>  TRUE
[18:48:16.708]      <block atomic="false" info="">
[18:48:16.708]        Message(0, "Debug/System power-up request sent");
[18:48:16.709]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:48:16.711]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:48:16.711]      </block>
[18:48:16.711]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:48:16.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:48:16.712]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:48:16.713]        // while-condition  =>  FALSE
[18:48:16.713]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:48:16.713]      </control>
[18:48:16.713]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:48:16.713]        // if-block "(__protocol & 0xFFFF) == 1"
[18:48:16.713]          // =>  FALSE
[18:48:16.713]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:48:16.713]      </control>
[18:48:16.713]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:48:16.713]        // if-block "(__protocol & 0xFFFF) == 2"
[18:48:16.713]          // =>  TRUE
[18:48:16.713]        <block atomic="false" info="">
[18:48:16.713]          Message(0, "executing SWD power up");
[18:48:16.717]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:48:16.719]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:48:16.719]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:48:16.720]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:48:16.721]        </block>
[18:48:16.721]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:48:16.721]      </control>
[18:48:16.721]      // end if-block "powered_down"
[18:48:16.721]    </control>
[18:48:16.721]    <block atomic="false" info="">
[18:48:16.721]      __var DEBUG_PORT_VAL    = 0;
[18:48:16.721]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:48:16.721]      __var ACCESS_POINT_VAL  = 0;
[18:48:16.721]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:48:16.721]      __ap = 1; 
[18:48:16.721]        // -> [__ap <= 0x00000001]
[18:48:16.721]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:48:16.724]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:48:16.724]      __ap = 4;
[18:48:16.724]        // -> [__ap <= 0x00000004]
[18:48:16.724]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:48:16.727]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:48:16.727]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:48:16.727]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:48:16.730]    </block>
[18:48:16.731]    <block atomic="false" info="">
[18:48:16.731]      __var nReset = 0x80;
[18:48:16.731]        // -> [nReset <= 0x00000080]
[18:48:16.731]      __var canReadPins = 0;
[18:48:16.731]        // -> [canReadPins <= 0x00000000]
[18:48:16.731]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:48:16.732]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:48:16.732]        // -> [canReadPins <= 0x00000001]
[18:48:16.732]    </block>
[18:48:16.732]    <control if="" while="1" timeout="200" info="">
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.733]      // while "1"  (timeout="200")
[18:48:16.733]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.734]      // while-condition  =>  TRUE
[18:48:16.734]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.735]      // while "1"  (timeout="200")
[18:48:16.735]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.736]      // while "1"  (timeout="200")
[18:48:16.736]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.737]      // while-condition  =>  TRUE
[18:48:16.737]      // while "1"  (timeout="200")
[18:48:16.738]      // while-condition  =>  TRUE
[18:48:16.738]      // while "1"  (timeout="200")
[18:48:16.738]      // while  =>  TIMEOUT
[18:48:16.738]      // end while "1"
[18:48:16.738]    </control>
[18:48:16.738]    <control if="canReadPins" while="" timeout="0" info="">
[18:48:16.738]      // if-block "canReadPins"
[18:48:16.738]        // =>  TRUE
[18:48:16.738]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:48:16.738]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:48:16.740]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:48:16.740]        // while-condition  =>  FALSE
[18:48:16.740]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:48:16.740]      </control>
[18:48:16.740]      // end if-block "canReadPins"
[18:48:16.740]    </control>
[18:48:16.740]    <control if="!canReadPins" while="" timeout="0" info="">
[18:48:16.740]      // if-block "!canReadPins"
[18:48:16.740]        // =>  FALSE
[18:48:16.740]      // skip if-block "!canReadPins"
[18:48:16.740]    </control>
[18:48:16.740]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:48:16.740]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:48:16.740]        // =>  TRUE
[18:48:16.740]      <block atomic="false" info="">
[18:48:16.740]        WriteAP(0x00, 0x190008);
[18:48:16.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:48:16.742]        WriteAP(0xF0, 0x01);
[18:48:16.745]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:48:16.745]      </block>
[18:48:16.745]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:48:16.745]    </control>
[18:48:16.745]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:48:16.745]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:48:16.745]        // =>  FALSE
[18:48:16.746]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:48:16.746]    </control>
[18:48:16.746]    <block atomic="false" info="">
[18:48:16.746]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:48:16.750]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:48:16.750]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:48:16.750]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:48:16.752]      __ap = 0; //lets make sure we reset the access point selection
[18:48:16.752]        // -> [__ap <= 0x00000000]
[18:48:16.752]    </block>
[18:48:16.752]  </sequence>
[18:48:16.752]  
[18:48:16.771]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:48:16.771]  
[18:48:16.771]  <debugvars>
[18:48:16.771]    // Pre-defined
[18:48:16.771]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:48:16.771]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:48:16.772]    __dp=0x00000000
[18:48:16.772]    __ap=0x00000000
[18:48:16.772]    __traceout=0x00000000      (Trace Disabled)
[18:48:16.772]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:48:16.772]    __FlashAddr=0x00000000
[18:48:16.772]    __FlashLen=0x00000000
[18:48:16.772]    __FlashArg=0x00000000
[18:48:16.772]    __FlashOp=0x00000000
[18:48:16.772]    __Result=0x00000000
[18:48:16.772]  </debugvars>
[18:48:16.772]  
[18:48:16.772]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:48:16.772]    <block atomic="false" info="">
[18:48:16.772]      __var deviceID = 0;
[18:48:16.772]        // -> [deviceID <= 0x00000000]
[18:48:16.772]      __var version = 0;
[18:48:16.772]        // -> [version <= 0x00000000]
[18:48:16.772]      __var partNum = 0;
[18:48:16.772]        // -> [partNum <= 0x00000000]
[18:48:16.772]      __var manuf = 0;
[18:48:16.772]        // -> [manuf <= 0x00000000]
[18:48:16.772]      __var isMSPM0G1X0X_G3X0X = 0;
[18:48:16.772]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:48:16.772]      __var isProduction = 0;
[18:48:16.772]        // -> [isProduction <= 0x00000000]
[18:48:16.772]      __var continueId = 0;
[18:48:16.772]        // -> [continueId <= 0x00000000]
[18:48:16.772]      deviceID =   Read32(0x41C40004);
[18:48:16.782]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:48:16.782]        // -> [deviceID <= 0x2BB8802F]
[18:48:16.782]      version = deviceID >> 28;
[18:48:16.782]        // -> [version <= 0x00000002]
[18:48:16.782]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:48:16.782]        // -> [partNum <= 0x0000BB88]
[18:48:16.782]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:48:16.782]        // -> [manuf <= 0x00000017]
[18:48:16.782]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:48:16.782]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:48:16.782]      isProduction = (version > 0);
[18:48:16.782]        // -> [isProduction <= 0x00000001]
[18:48:16.782]    </block>
[18:48:16.782]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:48:16.782]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:48:16.782]        // =>  FALSE
[18:48:16.783]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:48:16.783]    </control>
[18:48:16.783]    <control if="continueId == 4" while="" timeout="0" info="">
[18:48:16.783]      // if-block "continueId == 4"
[18:48:16.783]        // =>  FALSE
[18:48:16.783]      // skip if-block "continueId == 4"
[18:48:16.783]    </control>
[18:48:16.783]    <control if="!isProduction" while="" timeout="0" info="">
[18:48:16.783]      // if-block "!isProduction"
[18:48:16.783]        // =>  FALSE
[18:48:16.783]      // skip if-block "!isProduction"
[18:48:16.783]    </control>
[18:48:16.783]  </sequence>
[18:48:16.783]  
[18:50:40.369]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:50:40.369]  
[18:50:40.369]  <debugvars>
[18:50:40.369]    // Pre-defined
[18:50:40.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:50:40.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:50:40.370]    __dp=0x00000000
[18:50:40.370]    __ap=0x00000000
[18:50:40.370]    __traceout=0x00000000      (Trace Disabled)
[18:50:40.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:50:40.370]    __FlashAddr=0x00000000
[18:50:40.370]    __FlashLen=0x00000000
[18:50:40.370]    __FlashArg=0x00000000
[18:50:40.370]    __FlashOp=0x00000000
[18:50:40.370]    __Result=0x00000000
[18:50:40.370]  </debugvars>
[18:50:40.370]  
[18:50:40.370]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:50:40.370]    <block atomic="false" info="">
[18:50:40.370]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:50:40.370]        // -> [isSWJ <= 0x00000001]
[18:50:40.371]      __var hasDormant = __protocol & 0x00020000;
[18:50:40.371]        // -> [hasDormant <= 0x00000000]
[18:50:40.371]      __var protType   = __protocol & 0x0000FFFF;
[18:50:40.371]        // -> [protType <= 0x00000002]
[18:50:40.371]    </block>
[18:50:40.371]    <control if="protType == 1" while="" timeout="0" info="">
[18:50:40.371]      // if-block "protType == 1"
[18:50:40.371]        // =>  FALSE
[18:50:40.371]      // skip if-block "protType == 1"
[18:50:40.371]    </control>
[18:50:40.371]    <control if="protType == 2" while="" timeout="0" info="">
[18:50:40.371]      // if-block "protType == 2"
[18:50:40.371]        // =>  TRUE
[18:50:40.371]      <control if="isSWJ" while="" timeout="0" info="">
[18:50:40.371]        // if-block "isSWJ"
[18:50:40.371]          // =>  TRUE
[18:50:40.371]        <control if="hasDormant" while="" timeout="0" info="">
[18:50:40.371]          // if-block "hasDormant"
[18:50:40.371]            // =>  FALSE
[18:50:40.371]          // skip if-block "hasDormant"
[18:50:40.371]        </control>
[18:50:40.371]        <control if="!hasDormant" while="" timeout="0" info="">
[18:50:40.371]          // if-block "!hasDormant"
[18:50:40.371]            // =>  TRUE
[18:50:40.372]          <block atomic="false" info="">
[18:50:40.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:50:40.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:50:40.373]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:50:40.374]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:50:40.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:50:40.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:50:40.376]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:50:40.378]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:50:40.378]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:50:40.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:50:40.380]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:50:40.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:50:40.381]          </block>
[18:50:40.381]          // end if-block "!hasDormant"
[18:50:40.382]        </control>
[18:50:40.382]        // end if-block "isSWJ"
[18:50:40.382]      </control>
[18:50:40.382]      <control if="!isSWJ" while="" timeout="0" info="">
[18:50:40.382]        // if-block "!isSWJ"
[18:50:40.382]          // =>  FALSE
[18:50:40.382]        // skip if-block "!isSWJ"
[18:50:40.382]      </control>
[18:50:40.382]      <block atomic="false" info="">
[18:50:40.382]        ReadDP(0x0);
[18:50:40.383]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:50:40.383]      </block>
[18:50:40.383]      // end if-block "protType == 2"
[18:50:40.383]    </control>
[18:50:40.383]  </sequence>
[18:50:40.384]  
[18:50:40.392]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:50:40.392]  
[18:50:40.392]  <debugvars>
[18:50:40.392]    // Pre-defined
[18:50:40.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:50:40.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:50:40.392]    __dp=0x00000000
[18:50:40.392]    __ap=0x00000000
[18:50:40.392]    __traceout=0x00000000      (Trace Disabled)
[18:50:40.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:50:40.392]    __FlashAddr=0x00000000
[18:50:40.392]    __FlashLen=0x00000000
[18:50:40.392]    __FlashArg=0x00000000
[18:50:40.392]    __FlashOp=0x00000000
[18:50:40.392]    __Result=0x00000000
[18:50:40.392]  </debugvars>
[18:50:40.393]  
[18:50:40.393]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:50:40.393]    <block atomic="false" info="">
[18:50:40.393]      __var SW_DP_ABORT       = 0x0;
[18:50:40.393]        // -> [SW_DP_ABORT <= 0x00000000]
[18:50:40.393]      __var DP_CTRL_STAT      = 0x4;
[18:50:40.393]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:50:40.393]      __var DP_SELECT         = 0x8;
[18:50:40.393]        // -> [DP_SELECT <= 0x00000008]
[18:50:40.393]      __var powered_down      = 0;
[18:50:40.393]        // -> [powered_down <= 0x00000000]
[18:50:40.393]      WriteDP(DP_SELECT, 0x00000000);
[18:50:40.395]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:50:40.395]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:50:40.398]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:50:40.398]        // -> [powered_down <= 0x00000001]
[18:50:40.398]    </block>
[18:50:40.398]    <control if="powered_down" while="" timeout="0" info="">
[18:50:40.398]      // if-block "powered_down"
[18:50:40.398]        // =>  TRUE
[18:50:40.398]      <block atomic="false" info="">
[18:50:40.399]        Message(0, "Debug/System power-up request sent");
[18:50:40.404]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:50:40.406]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:50:40.406]      </block>
[18:50:40.406]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:50:40.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:50:40.407]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:50:40.407]        // while-condition  =>  FALSE
[18:50:40.407]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:50:40.407]      </control>
[18:50:40.407]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:50:40.407]        // if-block "(__protocol & 0xFFFF) == 1"
[18:50:40.407]          // =>  FALSE
[18:50:40.407]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:50:40.407]      </control>
[18:50:40.407]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:50:40.407]        // if-block "(__protocol & 0xFFFF) == 2"
[18:50:40.407]          // =>  TRUE
[18:50:40.407]        <block atomic="false" info="">
[18:50:40.408]          Message(0, "executing SWD power up");
[18:50:40.410]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:50:40.411]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:50:40.411]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:50:40.413]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:50:40.413]        </block>
[18:50:40.414]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:50:40.414]      </control>
[18:50:40.414]      // end if-block "powered_down"
[18:50:40.414]    </control>
[18:50:40.414]    <block atomic="false" info="">
[18:50:40.414]      __var DEBUG_PORT_VAL    = 0;
[18:50:40.414]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:50:40.414]      __var ACCESS_POINT_VAL  = 0;
[18:50:40.415]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:50:40.415]      __ap = 1; 
[18:50:40.415]        // -> [__ap <= 0x00000001]
[18:50:40.415]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:50:40.420]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:50:40.420]      __ap = 4;
[18:50:40.420]        // -> [__ap <= 0x00000004]
[18:50:40.420]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:50:40.426]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:50:40.426]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:50:40.426]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:50:40.428]    </block>
[18:50:40.428]    <block atomic="false" info="">
[18:50:40.428]      __var nReset = 0x80;
[18:50:40.428]        // -> [nReset <= 0x00000080]
[18:50:40.428]      __var canReadPins = 0;
[18:50:40.428]        // -> [canReadPins <= 0x00000000]
[18:50:40.428]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:50:40.430]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:50:40.430]        // -> [canReadPins <= 0x00000001]
[18:50:40.430]    </block>
[18:50:40.430]    <control if="" while="1" timeout="200" info="">
[18:50:40.430]      // while "1"  (timeout="200")
[18:50:40.430]      // while-condition  =>  TRUE
[18:50:40.430]      // while "1"  (timeout="200")
[18:50:40.430]      // while-condition  =>  TRUE
[18:50:40.430]      // while "1"  (timeout="200")
[18:50:40.430]      // while-condition  =>  TRUE
[18:50:40.430]      // while "1"  (timeout="200")
[18:50:40.430]      // while-condition  =>  TRUE
[18:50:40.430]      // while "1"  (timeout="200")
[18:50:40.431]      // while-condition  =>  TRUE
[18:50:40.431]      // while "1"  (timeout="200")
[18:50:40.431]      // while-condition  =>  TRUE
[18:50:40.431]      // while "1"  (timeout="200")
[18:50:40.431]      // while-condition  =>  TRUE
[18:50:40.431]      // while "1"  (timeout="200")
[18:50:40.431]      // while-condition  =>  TRUE
[18:50:40.431]      // while "1"  (timeout="200")
[18:50:40.431]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.432]      // while-condition  =>  TRUE
[18:50:40.432]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.433]      // while-condition  =>  TRUE
[18:50:40.433]      // while "1"  (timeout="200")
[18:50:40.434]      // while-condition  =>  TRUE
[18:50:40.434]      // while "1"  (timeout="200")
[18:50:40.434]      // while-condition  =>  TRUE
[18:50:40.434]      // while "1"  (timeout="200")
[18:50:40.434]      // while-condition  =>  TRUE
[18:50:40.434]      // while "1"  (timeout="200")
[18:50:40.434]      // while-condition  =>  TRUE
[18:50:40.434]      // while "1"  (timeout="200")
[18:50:40.434]      // while-condition  =>  TRUE
[18:50:40.434]      // while "1"  (timeout="200")
[18:50:40.434]      // while-condition  =>  TRUE
[18:50:40.434]      // while "1"  (timeout="200")
[18:50:40.435]      // while-condition  =>  TRUE
[18:50:40.435]      // while "1"  (timeout="200")
[18:50:40.435]      // while-condition  =>  TRUE
[18:50:40.435]      // while "1"  (timeout="200")
[18:50:40.435]      // while-condition  =>  TRUE
[18:50:40.435]      // while "1"  (timeout="200")
[18:50:40.435]      // while-condition  =>  TRUE
[18:50:40.435]      // while "1"  (timeout="200")
[18:50:40.435]      // while-condition  =>  TRUE
[18:50:40.435]      // while "1"  (timeout="200")
[18:50:40.435]      // while-condition  =>  TRUE
[18:50:40.435]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.436]      // while-condition  =>  TRUE
[18:50:40.436]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.437]      // while "1"  (timeout="200")
[18:50:40.437]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.438]      // while-condition  =>  TRUE
[18:50:40.438]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.439]      // while-condition  =>  TRUE
[18:50:40.439]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.440]      // while "1"  (timeout="200")
[18:50:40.440]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.441]      // while-condition  =>  TRUE
[18:50:40.441]      // while "1"  (timeout="200")
[18:50:40.442]      // while-condition  =>  TRUE
[18:50:40.442]      // while "1"  (timeout="200")
[18:50:40.442]      // while  =>  TIMEOUT
[18:50:40.442]      // end while "1"
[18:50:40.442]    </control>
[18:50:40.442]    <control if="canReadPins" while="" timeout="0" info="">
[18:50:40.442]      // if-block "canReadPins"
[18:50:40.442]        // =>  TRUE
[18:50:40.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:50:40.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:50:40.444]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:50:40.444]        // while-condition  =>  FALSE
[18:50:40.444]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:50:40.444]      </control>
[18:50:40.444]      // end if-block "canReadPins"
[18:50:40.444]    </control>
[18:50:40.444]    <control if="!canReadPins" while="" timeout="0" info="">
[18:50:40.444]      // if-block "!canReadPins"
[18:50:40.444]        // =>  FALSE
[18:50:40.445]      // skip if-block "!canReadPins"
[18:50:40.445]    </control>
[18:50:40.445]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:50:40.445]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:50:40.445]        // =>  TRUE
[18:50:40.445]      <block atomic="false" info="">
[18:50:40.445]        WriteAP(0x00, 0x190008);
[18:50:40.447]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:50:40.447]        WriteAP(0xF0, 0x01);
[18:50:40.450]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:50:40.450]      </block>
[18:50:40.450]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:50:40.450]    </control>
[18:50:40.450]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:50:40.450]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:50:40.450]        // =>  FALSE
[18:50:40.450]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:50:40.450]    </control>
[18:50:40.451]    <block atomic="false" info="">
[18:50:40.451]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:50:40.454]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:50:40.454]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:50:40.454]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:50:40.456]      __ap = 0; //lets make sure we reset the access point selection
[18:50:40.456]        // -> [__ap <= 0x00000000]
[18:50:40.456]    </block>
[18:50:40.457]  </sequence>
[18:50:40.457]  
[18:50:40.473]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:50:40.473]  
[18:50:40.473]  <debugvars>
[18:50:40.473]    // Pre-defined
[18:50:40.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:50:40.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:50:40.474]    __dp=0x00000000
[18:50:40.474]    __ap=0x00000000
[18:50:40.474]    __traceout=0x00000000      (Trace Disabled)
[18:50:40.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:50:40.474]    __FlashAddr=0x00000000
[18:50:40.474]    __FlashLen=0x00000000
[18:50:40.474]    __FlashArg=0x00000000
[18:50:40.474]    __FlashOp=0x00000000
[18:50:40.474]    __Result=0x00000000
[18:50:40.474]  </debugvars>
[18:50:40.474]  
[18:50:40.474]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:50:40.474]    <block atomic="false" info="">
[18:50:40.474]      __var deviceID = 0;
[18:50:40.474]        // -> [deviceID <= 0x00000000]
[18:50:40.474]      __var version = 0;
[18:50:40.474]        // -> [version <= 0x00000000]
[18:50:40.474]      __var partNum = 0;
[18:50:40.474]        // -> [partNum <= 0x00000000]
[18:50:40.474]      __var manuf = 0;
[18:50:40.474]        // -> [manuf <= 0x00000000]
[18:50:40.474]      __var isMSPM0G1X0X_G3X0X = 0;
[18:50:40.475]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:50:40.475]      __var isProduction = 0;
[18:50:40.475]        // -> [isProduction <= 0x00000000]
[18:50:40.475]      __var continueId = 0;
[18:50:40.475]        // -> [continueId <= 0x00000000]
[18:50:40.475]      deviceID =   Read32(0x41C40004);
[18:50:40.482]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:50:40.482]        // -> [deviceID <= 0x2BB8802F]
[18:50:40.482]      version = deviceID >> 28;
[18:50:40.482]        // -> [version <= 0x00000002]
[18:50:40.483]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:50:40.483]        // -> [partNum <= 0x0000BB88]
[18:50:40.483]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:50:40.483]        // -> [manuf <= 0x00000017]
[18:50:40.483]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:50:40.483]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:50:40.483]      isProduction = (version > 0);
[18:50:40.483]        // -> [isProduction <= 0x00000001]
[18:50:40.483]    </block>
[18:50:40.483]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:50:40.483]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:50:40.483]        // =>  FALSE
[18:50:40.483]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:50:40.483]    </control>
[18:50:40.484]    <control if="continueId == 4" while="" timeout="0" info="">
[18:50:40.484]      // if-block "continueId == 4"
[18:50:40.484]        // =>  FALSE
[18:50:40.484]      // skip if-block "continueId == 4"
[18:50:40.484]    </control>
[18:50:40.484]    <control if="!isProduction" while="" timeout="0" info="">
[18:50:40.484]      // if-block "!isProduction"
[18:50:40.484]        // =>  FALSE
[18:50:40.484]      // skip if-block "!isProduction"
[18:50:40.484]    </control>
[18:50:40.484]  </sequence>
[18:50:40.484]  
[18:51:20.767]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:51:20.767]  
[18:51:20.773]  <debugvars>
[18:51:20.773]    // Pre-defined
[18:51:20.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:51:20.773]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:51:20.773]    __dp=0x00000000
[18:51:20.773]    __ap=0x00000000
[18:51:20.773]    __traceout=0x00000000      (Trace Disabled)
[18:51:20.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:51:20.774]    __FlashAddr=0x00000000
[18:51:20.774]    __FlashLen=0x00000000
[18:51:20.774]    __FlashArg=0x00000000
[18:51:20.774]    __FlashOp=0x00000000
[18:51:20.774]    __Result=0x00000000
[18:51:20.774]  </debugvars>
[18:51:20.774]  
[18:51:20.774]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:51:20.774]    <block atomic="false" info="">
[18:51:20.774]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:51:20.774]        // -> [isSWJ <= 0x00000001]
[18:51:20.774]      __var hasDormant = __protocol & 0x00020000;
[18:51:20.774]        // -> [hasDormant <= 0x00000000]
[18:51:20.775]      __var protType   = __protocol & 0x0000FFFF;
[18:51:20.775]        // -> [protType <= 0x00000002]
[18:51:20.775]    </block>
[18:51:20.775]    <control if="protType == 1" while="" timeout="0" info="">
[18:51:20.775]      // if-block "protType == 1"
[18:51:20.775]        // =>  FALSE
[18:51:20.775]      // skip if-block "protType == 1"
[18:51:20.775]    </control>
[18:51:20.775]    <control if="protType == 2" while="" timeout="0" info="">
[18:51:20.775]      // if-block "protType == 2"
[18:51:20.776]        // =>  TRUE
[18:51:20.776]      <control if="isSWJ" while="" timeout="0" info="">
[18:51:20.776]        // if-block "isSWJ"
[18:51:20.776]          // =>  TRUE
[18:51:20.776]        <control if="hasDormant" while="" timeout="0" info="">
[18:51:20.776]          // if-block "hasDormant"
[18:51:20.776]            // =>  FALSE
[18:51:20.776]          // skip if-block "hasDormant"
[18:51:20.776]        </control>
[18:51:20.776]        <control if="!hasDormant" while="" timeout="0" info="">
[18:51:20.776]          // if-block "!hasDormant"
[18:51:20.776]            // =>  TRUE
[18:51:20.776]          <block atomic="false" info="">
[18:51:20.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:51:20.778]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:51:20.778]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:51:20.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:51:20.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:51:20.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:51:20.784]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:51:20.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:51:20.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:51:20.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:51:20.792]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:51:20.793]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:51:20.793]          </block>
[18:51:20.793]          // end if-block "!hasDormant"
[18:51:20.794]        </control>
[18:51:20.794]        // end if-block "isSWJ"
[18:51:20.794]      </control>
[18:51:20.794]      <control if="!isSWJ" while="" timeout="0" info="">
[18:51:20.794]        // if-block "!isSWJ"
[18:51:20.794]          // =>  FALSE
[18:51:20.795]        // skip if-block "!isSWJ"
[18:51:20.795]      </control>
[18:51:20.795]      <block atomic="false" info="">
[18:51:20.795]        ReadDP(0x0);
[18:51:20.796]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:51:20.797]      </block>
[18:51:20.797]      // end if-block "protType == 2"
[18:51:20.797]    </control>
[18:51:20.797]  </sequence>
[18:51:20.797]  
[18:51:20.803]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:51:20.803]  
[18:51:20.803]  <debugvars>
[18:51:20.803]    // Pre-defined
[18:51:20.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:51:20.804]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:51:20.804]    __dp=0x00000000
[18:51:20.804]    __ap=0x00000000
[18:51:20.804]    __traceout=0x00000000      (Trace Disabled)
[18:51:20.804]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:51:20.804]    __FlashAddr=0x00000000
[18:51:20.804]    __FlashLen=0x00000000
[18:51:20.804]    __FlashArg=0x00000000
[18:51:20.804]    __FlashOp=0x00000000
[18:51:20.804]    __Result=0x00000000
[18:51:20.804]  </debugvars>
[18:51:20.804]  
[18:51:20.804]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:51:20.804]    <block atomic="false" info="">
[18:51:20.804]      __var SW_DP_ABORT       = 0x0;
[18:51:20.805]        // -> [SW_DP_ABORT <= 0x00000000]
[18:51:20.805]      __var DP_CTRL_STAT      = 0x4;
[18:51:20.805]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:51:20.805]      __var DP_SELECT         = 0x8;
[18:51:20.805]        // -> [DP_SELECT <= 0x00000008]
[18:51:20.805]      __var powered_down      = 0;
[18:51:20.805]        // -> [powered_down <= 0x00000000]
[18:51:20.805]      WriteDP(DP_SELECT, 0x00000000);
[18:51:20.807]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:51:20.807]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:51:20.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:51:20.810]        // -> [powered_down <= 0x00000001]
[18:51:20.810]    </block>
[18:51:20.810]    <control if="powered_down" while="" timeout="0" info="">
[18:51:20.810]      // if-block "powered_down"
[18:51:20.810]        // =>  TRUE
[18:51:20.810]      <block atomic="false" info="">
[18:51:20.810]        Message(0, "Debug/System power-up request sent");
[18:51:20.812]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:51:20.814]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:51:20.814]      </block>
[18:51:20.815]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:51:20.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:51:20.816]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:51:20.816]        // while-condition  =>  FALSE
[18:51:20.816]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:51:20.816]      </control>
[18:51:20.816]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:51:20.816]        // if-block "(__protocol & 0xFFFF) == 1"
[18:51:20.816]          // =>  FALSE
[18:51:20.817]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:51:20.817]      </control>
[18:51:20.817]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:51:20.817]        // if-block "(__protocol & 0xFFFF) == 2"
[18:51:20.817]          // =>  TRUE
[18:51:20.817]        <block atomic="false" info="">
[18:51:20.817]          Message(0, "executing SWD power up");
[18:51:20.818]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:51:20.820]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:51:20.820]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:51:20.821]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:51:20.822]        </block>
[18:51:20.822]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:51:20.822]      </control>
[18:51:20.822]      // end if-block "powered_down"
[18:51:20.822]    </control>
[18:51:20.822]    <block atomic="false" info="">
[18:51:20.822]      __var DEBUG_PORT_VAL    = 0;
[18:51:20.822]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:51:20.822]      __var ACCESS_POINT_VAL  = 0;
[18:51:20.822]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:51:20.822]      __ap = 1; 
[18:51:20.822]        // -> [__ap <= 0x00000001]
[18:51:20.822]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:51:20.825]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:51:20.825]      __ap = 4;
[18:51:20.826]        // -> [__ap <= 0x00000004]
[18:51:20.826]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:51:20.829]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:51:20.829]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:51:20.829]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:51:20.831]    </block>
[18:51:20.831]    <block atomic="false" info="">
[18:51:20.831]      __var nReset = 0x80;
[18:51:20.831]        // -> [nReset <= 0x00000080]
[18:51:20.831]      __var canReadPins = 0;
[18:51:20.831]        // -> [canReadPins <= 0x00000000]
[18:51:20.831]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:51:20.834]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:51:20.834]        // -> [canReadPins <= 0x00000001]
[18:51:20.834]    </block>
[18:51:20.834]    <control if="" while="1" timeout="200" info="">
[18:51:20.834]      // while "1"  (timeout="200")
[18:51:20.834]      // while-condition  =>  TRUE
[18:51:20.834]      // while "1"  (timeout="200")
[18:51:20.834]      // while-condition  =>  TRUE
[18:51:20.834]      // while "1"  (timeout="200")
[18:51:20.834]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.835]      // while "1"  (timeout="200")
[18:51:20.835]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.836]      // while-condition  =>  TRUE
[18:51:20.836]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.837]      // while-condition  =>  TRUE
[18:51:20.837]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.838]      // while-condition  =>  TRUE
[18:51:20.838]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.839]      // while "1"  (timeout="200")
[18:51:20.839]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.840]      // while-condition  =>  TRUE
[18:51:20.840]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.841]      // while-condition  =>  TRUE
[18:51:20.841]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.842]      // while "1"  (timeout="200")
[18:51:20.842]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.843]      // while "1"  (timeout="200")
[18:51:20.843]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.844]      // while "1"  (timeout="200")
[18:51:20.844]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.845]      // while "1"  (timeout="200")
[18:51:20.845]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.846]      // while "1"  (timeout="200")
[18:51:20.846]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.847]      // while "1"  (timeout="200")
[18:51:20.847]      // while-condition  =>  TRUE
[18:51:20.848]      // while "1"  (timeout="200")
[18:51:20.848]      // while  =>  TIMEOUT
[18:51:20.848]      // end while "1"
[18:51:20.848]    </control>
[18:51:20.848]    <control if="canReadPins" while="" timeout="0" info="">
[18:51:20.848]      // if-block "canReadPins"
[18:51:20.848]        // =>  TRUE
[18:51:20.848]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:51:20.848]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:51:20.849]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:51:20.849]        // while-condition  =>  FALSE
[18:51:20.849]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:51:20.849]      </control>
[18:51:20.850]      // end if-block "canReadPins"
[18:51:20.850]    </control>
[18:51:20.850]    <control if="!canReadPins" while="" timeout="0" info="">
[18:51:20.850]      // if-block "!canReadPins"
[18:51:20.850]        // =>  FALSE
[18:51:20.850]      // skip if-block "!canReadPins"
[18:51:20.850]    </control>
[18:51:20.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:51:20.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:51:20.850]        // =>  TRUE
[18:51:20.850]      <block atomic="false" info="">
[18:51:20.850]        WriteAP(0x00, 0x190008);
[18:51:20.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:51:20.852]        WriteAP(0xF0, 0x01);
[18:51:20.855]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:51:20.855]      </block>
[18:51:20.855]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:51:20.855]    </control>
[18:51:20.855]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:51:20.855]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:51:20.855]        // =>  FALSE
[18:51:20.855]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:51:20.855]    </control>
[18:51:20.855]    <block atomic="false" info="">
[18:51:20.855]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:51:20.862]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:51:20.863]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:51:20.863]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:51:20.864]      __ap = 0; //lets make sure we reset the access point selection
[18:51:20.864]        // -> [__ap <= 0x00000000]
[18:51:20.865]    </block>
[18:51:20.865]  </sequence>
[18:51:20.865]  
[18:51:20.882]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:51:20.882]  
[18:51:20.882]  <debugvars>
[18:51:20.882]    // Pre-defined
[18:51:20.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:51:20.882]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:51:20.882]    __dp=0x00000000
[18:51:20.882]    __ap=0x00000000
[18:51:20.882]    __traceout=0x00000000      (Trace Disabled)
[18:51:20.882]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:51:20.882]    __FlashAddr=0x00000000
[18:51:20.882]    __FlashLen=0x00000000
[18:51:20.883]    __FlashArg=0x00000000
[18:51:20.883]    __FlashOp=0x00000000
[18:51:20.883]    __Result=0x00000000
[18:51:20.883]  </debugvars>
[18:51:20.883]  
[18:51:20.883]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:51:20.883]    <block atomic="false" info="">
[18:51:20.883]      __var deviceID = 0;
[18:51:20.883]        // -> [deviceID <= 0x00000000]
[18:51:20.883]      __var version = 0;
[18:51:20.883]        // -> [version <= 0x00000000]
[18:51:20.883]      __var partNum = 0;
[18:51:20.883]        // -> [partNum <= 0x00000000]
[18:51:20.883]      __var manuf = 0;
[18:51:20.883]        // -> [manuf <= 0x00000000]
[18:51:20.883]      __var isMSPM0G1X0X_G3X0X = 0;
[18:51:20.883]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:51:20.883]      __var isProduction = 0;
[18:51:20.883]        // -> [isProduction <= 0x00000000]
[18:51:20.883]      __var continueId = 0;
[18:51:20.883]        // -> [continueId <= 0x00000000]
[18:51:20.883]      deviceID =   Read32(0x41C40004);
[18:51:20.893]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:51:20.893]        // -> [deviceID <= 0x2BB8802F]
[18:51:20.893]      version = deviceID >> 28;
[18:51:20.893]        // -> [version <= 0x00000002]
[18:51:20.893]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:51:20.893]        // -> [partNum <= 0x0000BB88]
[18:51:20.893]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:51:20.893]        // -> [manuf <= 0x00000017]
[18:51:20.893]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:51:20.893]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:51:20.893]      isProduction = (version > 0);
[18:51:20.893]        // -> [isProduction <= 0x00000001]
[18:51:20.893]    </block>
[18:51:20.893]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:51:20.893]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:51:20.894]        // =>  FALSE
[18:51:20.894]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:51:20.894]    </control>
[18:51:20.894]    <control if="continueId == 4" while="" timeout="0" info="">
[18:51:20.894]      // if-block "continueId == 4"
[18:51:20.894]        // =>  FALSE
[18:51:20.894]      // skip if-block "continueId == 4"
[18:51:20.894]    </control>
[18:51:20.894]    <control if="!isProduction" while="" timeout="0" info="">
[18:51:20.894]      // if-block "!isProduction"
[18:51:20.894]        // =>  FALSE
[18:51:20.894]      // skip if-block "!isProduction"
[18:51:20.894]    </control>
[18:51:20.894]  </sequence>
[18:51:20.894]  
[18:52:03.621]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:52:03.621]  
[18:52:03.621]  <debugvars>
[18:52:03.622]    // Pre-defined
[18:52:03.622]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:52:03.622]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:52:03.622]    __dp=0x00000000
[18:52:03.622]    __ap=0x00000000
[18:52:03.622]    __traceout=0x00000000      (Trace Disabled)
[18:52:03.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:52:03.623]    __FlashAddr=0x00000000
[18:52:03.623]    __FlashLen=0x00000000
[18:52:03.624]    __FlashArg=0x00000000
[18:52:03.624]    __FlashOp=0x00000000
[18:52:03.624]    __Result=0x00000000
[18:52:03.624]  </debugvars>
[18:52:03.624]  
[18:52:03.625]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:52:03.625]    <block atomic="false" info="">
[18:52:03.625]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:52:03.625]        // -> [isSWJ <= 0x00000001]
[18:52:03.625]      __var hasDormant = __protocol & 0x00020000;
[18:52:03.625]        // -> [hasDormant <= 0x00000000]
[18:52:03.625]      __var protType   = __protocol & 0x0000FFFF;
[18:52:03.625]        // -> [protType <= 0x00000002]
[18:52:03.625]    </block>
[18:52:03.626]    <control if="protType == 1" while="" timeout="0" info="">
[18:52:03.626]      // if-block "protType == 1"
[18:52:03.626]        // =>  FALSE
[18:52:03.626]      // skip if-block "protType == 1"
[18:52:03.626]    </control>
[18:52:03.626]    <control if="protType == 2" while="" timeout="0" info="">
[18:52:03.626]      // if-block "protType == 2"
[18:52:03.626]        // =>  TRUE
[18:52:03.626]      <control if="isSWJ" while="" timeout="0" info="">
[18:52:03.626]        // if-block "isSWJ"
[18:52:03.627]          // =>  TRUE
[18:52:03.627]        <control if="hasDormant" while="" timeout="0" info="">
[18:52:03.627]          // if-block "hasDormant"
[18:52:03.627]            // =>  FALSE
[18:52:03.627]          // skip if-block "hasDormant"
[18:52:03.627]        </control>
[18:52:03.627]        <control if="!hasDormant" while="" timeout="0" info="">
[18:52:03.628]          // if-block "!hasDormant"
[18:52:03.628]            // =>  TRUE
[18:52:03.628]          <block atomic="false" info="">
[18:52:03.628]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:52:03.630]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:52:03.630]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:52:03.631]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:52:03.632]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:52:03.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:52:03.633]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:52:03.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:52:03.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:52:03.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:52:03.637]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:52:03.638]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:52:03.638]          </block>
[18:52:03.638]          // end if-block "!hasDormant"
[18:52:03.638]        </control>
[18:52:03.638]        // end if-block "isSWJ"
[18:52:03.638]      </control>
[18:52:03.638]      <control if="!isSWJ" while="" timeout="0" info="">
[18:52:03.638]        // if-block "!isSWJ"
[18:52:03.639]          // =>  FALSE
[18:52:03.639]        // skip if-block "!isSWJ"
[18:52:03.639]      </control>
[18:52:03.639]      <block atomic="false" info="">
[18:52:03.639]        ReadDP(0x0);
[18:52:03.641]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:52:03.641]      </block>
[18:52:03.641]      // end if-block "protType == 2"
[18:52:03.641]    </control>
[18:52:03.641]  </sequence>
[18:52:03.641]  
[18:52:03.644]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:52:03.644]  
[18:52:03.644]  <debugvars>
[18:52:03.644]    // Pre-defined
[18:52:03.644]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:52:03.644]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:52:03.644]    __dp=0x00000000
[18:52:03.645]    __ap=0x00000000
[18:52:03.645]    __traceout=0x00000000      (Trace Disabled)
[18:52:03.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:52:03.645]    __FlashAddr=0x00000000
[18:52:03.645]    __FlashLen=0x00000000
[18:52:03.645]    __FlashArg=0x00000000
[18:52:03.645]    __FlashOp=0x00000000
[18:52:03.646]    __Result=0x00000000
[18:52:03.646]  </debugvars>
[18:52:03.646]  
[18:52:03.646]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:52:03.646]    <block atomic="false" info="">
[18:52:03.646]      __var SW_DP_ABORT       = 0x0;
[18:52:03.646]        // -> [SW_DP_ABORT <= 0x00000000]
[18:52:03.646]      __var DP_CTRL_STAT      = 0x4;
[18:52:03.647]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:52:03.647]      __var DP_SELECT         = 0x8;
[18:52:03.647]        // -> [DP_SELECT <= 0x00000008]
[18:52:03.647]      __var powered_down      = 0;
[18:52:03.647]        // -> [powered_down <= 0x00000000]
[18:52:03.648]      WriteDP(DP_SELECT, 0x00000000);
[18:52:03.651]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:52:03.651]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:52:03.653]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:52:03.653]        // -> [powered_down <= 0x00000001]
[18:52:03.653]    </block>
[18:52:03.653]    <control if="powered_down" while="" timeout="0" info="">
[18:52:03.653]      // if-block "powered_down"
[18:52:03.653]        // =>  TRUE
[18:52:03.653]      <block atomic="false" info="">
[18:52:03.654]        Message(0, "Debug/System power-up request sent");
[18:52:03.654]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:52:03.656]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:52:03.656]      </block>
[18:52:03.656]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:52:03.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:52:03.661]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:52:03.661]        // while-condition  =>  FALSE
[18:52:03.661]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:52:03.661]      </control>
[18:52:03.661]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:52:03.661]        // if-block "(__protocol & 0xFFFF) == 1"
[18:52:03.661]          // =>  FALSE
[18:52:03.661]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:52:03.661]      </control>
[18:52:03.662]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:52:03.662]        // if-block "(__protocol & 0xFFFF) == 2"
[18:52:03.662]          // =>  TRUE
[18:52:03.662]        <block atomic="false" info="">
[18:52:03.662]          Message(0, "executing SWD power up");
[18:52:03.668]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:52:03.670]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:52:03.670]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:52:03.672]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:52:03.672]        </block>
[18:52:03.672]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:52:03.672]      </control>
[18:52:03.672]      // end if-block "powered_down"
[18:52:03.672]    </control>
[18:52:03.672]    <block atomic="false" info="">
[18:52:03.672]      __var DEBUG_PORT_VAL    = 0;
[18:52:03.672]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:52:03.672]      __var ACCESS_POINT_VAL  = 0;
[18:52:03.672]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:52:03.672]      __ap = 1; 
[18:52:03.672]        // -> [__ap <= 0x00000001]
[18:52:03.672]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:52:03.676]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:52:03.676]      __ap = 4;
[18:52:03.676]        // -> [__ap <= 0x00000004]
[18:52:03.676]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:52:03.680]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:52:03.680]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:52:03.680]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:52:03.681]    </block>
[18:52:03.681]    <block atomic="false" info="">
[18:52:03.682]      __var nReset = 0x80;
[18:52:03.682]        // -> [nReset <= 0x00000080]
[18:52:03.682]      __var canReadPins = 0;
[18:52:03.682]        // -> [canReadPins <= 0x00000000]
[18:52:03.682]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:52:03.683]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:52:03.683]        // -> [canReadPins <= 0x00000001]
[18:52:03.683]    </block>
[18:52:03.683]    <control if="" while="1" timeout="200" info="">
[18:52:03.683]      // while "1"  (timeout="200")
[18:52:03.683]      // while-condition  =>  TRUE
[18:52:03.683]      // while "1"  (timeout="200")
[18:52:03.683]      // while-condition  =>  TRUE
[18:52:03.683]      // while "1"  (timeout="200")
[18:52:03.683]      // while-condition  =>  TRUE
[18:52:03.683]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.684]      // while "1"  (timeout="200")
[18:52:03.684]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.685]      // while "1"  (timeout="200")
[18:52:03.685]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.686]      // while-condition  =>  TRUE
[18:52:03.686]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.687]      // while "1"  (timeout="200")
[18:52:03.687]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.688]      // while "1"  (timeout="200")
[18:52:03.688]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.689]      // while "1"  (timeout="200")
[18:52:03.689]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.690]      // while-condition  =>  TRUE
[18:52:03.690]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.691]      // while-condition  =>  TRUE
[18:52:03.691]      // while "1"  (timeout="200")
[18:52:03.692]      // while-condition  =>  TRUE
[18:52:03.692]      // while "1"  (timeout="200")
[18:52:03.692]      // while  =>  TIMEOUT
[18:52:03.692]      // end while "1"
[18:52:03.692]    </control>
[18:52:03.692]    <control if="canReadPins" while="" timeout="0" info="">
[18:52:03.692]      // if-block "canReadPins"
[18:52:03.692]        // =>  TRUE
[18:52:03.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:52:03.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:52:03.694]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:52:03.694]        // while-condition  =>  FALSE
[18:52:03.694]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:52:03.694]      </control>
[18:52:03.694]      // end if-block "canReadPins"
[18:52:03.694]    </control>
[18:52:03.694]    <control if="!canReadPins" while="" timeout="0" info="">
[18:52:03.694]      // if-block "!canReadPins"
[18:52:03.694]        // =>  FALSE
[18:52:03.694]      // skip if-block "!canReadPins"
[18:52:03.694]    </control>
[18:52:03.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:52:03.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:52:03.694]        // =>  TRUE
[18:52:03.695]      <block atomic="false" info="">
[18:52:03.695]        WriteAP(0x00, 0x190008);
[18:52:03.704]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:52:03.704]        WriteAP(0xF0, 0x01);
[18:52:03.707]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:52:03.707]      </block>
[18:52:03.708]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:52:03.708]    </control>
[18:52:03.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:52:03.709]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:52:03.709]        // =>  FALSE
[18:52:03.709]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:52:03.709]    </control>
[18:52:03.709]    <block atomic="false" info="">
[18:52:03.709]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:52:03.716]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:52:03.716]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:52:03.716]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:52:03.719]      __ap = 0; //lets make sure we reset the access point selection
[18:52:03.719]        // -> [__ap <= 0x00000000]
[18:52:03.719]    </block>
[18:52:03.719]  </sequence>
[18:52:03.719]  
[18:52:03.743]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:52:03.743]  
[18:52:03.744]  <debugvars>
[18:52:03.744]    // Pre-defined
[18:52:03.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:52:03.745]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:52:03.745]    __dp=0x00000000
[18:52:03.745]    __ap=0x00000000
[18:52:03.745]    __traceout=0x00000000      (Trace Disabled)
[18:52:03.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:52:03.745]    __FlashAddr=0x00000000
[18:52:03.746]    __FlashLen=0x00000000
[18:52:03.746]    __FlashArg=0x00000000
[18:52:03.746]    __FlashOp=0x00000000
[18:52:03.746]    __Result=0x00000000
[18:52:03.746]  </debugvars>
[18:52:03.746]  
[18:52:03.746]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:52:03.746]    <block atomic="false" info="">
[18:52:03.746]      __var deviceID = 0;
[18:52:03.747]        // -> [deviceID <= 0x00000000]
[18:52:03.747]      __var version = 0;
[18:52:03.747]        // -> [version <= 0x00000000]
[18:52:03.747]      __var partNum = 0;
[18:52:03.747]        // -> [partNum <= 0x00000000]
[18:52:03.747]      __var manuf = 0;
[18:52:03.747]        // -> [manuf <= 0x00000000]
[18:52:03.747]      __var isMSPM0G1X0X_G3X0X = 0;
[18:52:03.747]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:52:03.748]      __var isProduction = 0;
[18:52:03.748]        // -> [isProduction <= 0x00000000]
[18:52:03.748]      __var continueId = 0;
[18:52:03.748]        // -> [continueId <= 0x00000000]
[18:52:03.748]      deviceID =   Read32(0x41C40004);
[18:52:03.753]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:52:03.754]        // -> [deviceID <= 0x2BB8802F]
[18:52:03.754]      version = deviceID >> 28;
[18:52:03.754]        // -> [version <= 0x00000002]
[18:52:03.754]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:52:03.754]        // -> [partNum <= 0x0000BB88]
[18:52:03.754]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:52:03.755]        // -> [manuf <= 0x00000017]
[18:52:03.755]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:52:03.755]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:52:03.755]      isProduction = (version > 0);
[18:52:03.755]        // -> [isProduction <= 0x00000001]
[18:52:03.755]    </block>
[18:52:03.755]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:52:03.755]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:52:03.755]        // =>  FALSE
[18:52:03.755]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:52:03.755]    </control>
[18:52:03.755]    <control if="continueId == 4" while="" timeout="0" info="">
[18:52:03.755]      // if-block "continueId == 4"
[18:52:03.755]        // =>  FALSE
[18:52:03.756]      // skip if-block "continueId == 4"
[18:52:03.756]    </control>
[18:52:03.756]    <control if="!isProduction" while="" timeout="0" info="">
[18:52:03.756]      // if-block "!isProduction"
[18:52:03.756]        // =>  FALSE
[18:52:03.756]      // skip if-block "!isProduction"
[18:52:03.756]    </control>
[18:52:03.756]  </sequence>
[18:52:03.756]  
[18:52:38.114]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:52:38.114]  
[18:52:38.114]  <debugvars>
[18:52:38.114]    // Pre-defined
[18:52:38.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:52:38.115]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:52:38.115]    __dp=0x00000000
[18:52:38.115]    __ap=0x00000000
[18:52:38.115]    __traceout=0x00000000      (Trace Disabled)
[18:52:38.115]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:52:38.115]    __FlashAddr=0x00000000
[18:52:38.115]    __FlashLen=0x00000000
[18:52:38.115]    __FlashArg=0x00000000
[18:52:38.115]    __FlashOp=0x00000000
[18:52:38.115]    __Result=0x00000000
[18:52:38.115]  </debugvars>
[18:52:38.115]  
[18:52:38.115]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:52:38.115]    <block atomic="false" info="">
[18:52:38.115]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:52:38.115]        // -> [isSWJ <= 0x00000001]
[18:52:38.115]      __var hasDormant = __protocol & 0x00020000;
[18:52:38.115]        // -> [hasDormant <= 0x00000000]
[18:52:38.115]      __var protType   = __protocol & 0x0000FFFF;
[18:52:38.115]        // -> [protType <= 0x00000002]
[18:52:38.115]    </block>
[18:52:38.116]    <control if="protType == 1" while="" timeout="0" info="">
[18:52:38.116]      // if-block "protType == 1"
[18:52:38.116]        // =>  FALSE
[18:52:38.116]      // skip if-block "protType == 1"
[18:52:38.116]    </control>
[18:52:38.116]    <control if="protType == 2" while="" timeout="0" info="">
[18:52:38.116]      // if-block "protType == 2"
[18:52:38.116]        // =>  TRUE
[18:52:38.116]      <control if="isSWJ" while="" timeout="0" info="">
[18:52:38.116]        // if-block "isSWJ"
[18:52:38.116]          // =>  TRUE
[18:52:38.116]        <control if="hasDormant" while="" timeout="0" info="">
[18:52:38.116]          // if-block "hasDormant"
[18:52:38.116]            // =>  FALSE
[18:52:38.116]          // skip if-block "hasDormant"
[18:52:38.116]        </control>
[18:52:38.116]        <control if="!hasDormant" while="" timeout="0" info="">
[18:52:38.116]          // if-block "!hasDormant"
[18:52:38.116]            // =>  TRUE
[18:52:38.116]          <block atomic="false" info="">
[18:52:38.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:52:38.118]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:52:38.118]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:52:38.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:52:38.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:52:38.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:52:38.123]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:52:38.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:52:38.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:52:38.128]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:52:38.128]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:52:38.129]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:52:38.130]          </block>
[18:52:38.130]          // end if-block "!hasDormant"
[18:52:38.130]        </control>
[18:52:38.130]        // end if-block "isSWJ"
[18:52:38.130]      </control>
[18:52:38.130]      <control if="!isSWJ" while="" timeout="0" info="">
[18:52:38.130]        // if-block "!isSWJ"
[18:52:38.130]          // =>  FALSE
[18:52:38.130]        // skip if-block "!isSWJ"
[18:52:38.131]      </control>
[18:52:38.131]      <block atomic="false" info="">
[18:52:38.131]        ReadDP(0x0);
[18:52:38.135]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:52:38.135]      </block>
[18:52:38.135]      // end if-block "protType == 2"
[18:52:38.135]    </control>
[18:52:38.136]  </sequence>
[18:52:38.136]  
[18:52:38.138]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:52:38.138]  
[18:52:38.138]  <debugvars>
[18:52:38.138]    // Pre-defined
[18:52:38.139]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:52:38.139]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:52:38.139]    __dp=0x00000000
[18:52:38.139]    __ap=0x00000000
[18:52:38.139]    __traceout=0x00000000      (Trace Disabled)
[18:52:38.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:52:38.139]    __FlashAddr=0x00000000
[18:52:38.140]    __FlashLen=0x00000000
[18:52:38.140]    __FlashArg=0x00000000
[18:52:38.140]    __FlashOp=0x00000000
[18:52:38.140]    __Result=0x00000000
[18:52:38.140]  </debugvars>
[18:52:38.140]  
[18:52:38.140]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:52:38.140]    <block atomic="false" info="">
[18:52:38.140]      __var SW_DP_ABORT       = 0x0;
[18:52:38.140]        // -> [SW_DP_ABORT <= 0x00000000]
[18:52:38.140]      __var DP_CTRL_STAT      = 0x4;
[18:52:38.140]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:52:38.140]      __var DP_SELECT         = 0x8;
[18:52:38.141]        // -> [DP_SELECT <= 0x00000008]
[18:52:38.141]      __var powered_down      = 0;
[18:52:38.141]        // -> [powered_down <= 0x00000000]
[18:52:38.141]      WriteDP(DP_SELECT, 0x00000000);
[18:52:38.143]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:52:38.143]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:52:38.144]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:52:38.144]        // -> [powered_down <= 0x00000001]
[18:52:38.144]    </block>
[18:52:38.145]    <control if="powered_down" while="" timeout="0" info="">
[18:52:38.145]      // if-block "powered_down"
[18:52:38.145]        // =>  TRUE
[18:52:38.145]      <block atomic="false" info="">
[18:52:38.145]        Message(0, "Debug/System power-up request sent");
[18:52:38.146]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:52:38.147]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:52:38.147]      </block>
[18:52:38.147]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:52:38.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:52:38.149]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:52:38.149]        // while-condition  =>  FALSE
[18:52:38.149]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:52:38.149]      </control>
[18:52:38.149]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:52:38.149]        // if-block "(__protocol & 0xFFFF) == 1"
[18:52:38.149]          // =>  FALSE
[18:52:38.149]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:52:38.149]      </control>
[18:52:38.150]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:52:38.150]        // if-block "(__protocol & 0xFFFF) == 2"
[18:52:38.150]          // =>  TRUE
[18:52:38.150]        <block atomic="false" info="">
[18:52:38.150]          Message(0, "executing SWD power up");
[18:52:38.150]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:52:38.152]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:52:38.152]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:52:38.155]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:52:38.155]        </block>
[18:52:38.155]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:52:38.155]      </control>
[18:52:38.155]      // end if-block "powered_down"
[18:52:38.156]    </control>
[18:52:38.156]    <block atomic="false" info="">
[18:52:38.156]      __var DEBUG_PORT_VAL    = 0;
[18:52:38.156]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:52:38.156]      __var ACCESS_POINT_VAL  = 0;
[18:52:38.156]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:52:38.156]      __ap = 1; 
[18:52:38.156]        // -> [__ap <= 0x00000001]
[18:52:38.156]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:52:38.159]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:52:38.159]      __ap = 4;
[18:52:38.159]        // -> [__ap <= 0x00000004]
[18:52:38.159]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:52:38.164]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:52:38.164]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:52:38.164]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:52:38.164]    </block>
[18:52:38.164]    <block atomic="false" info="">
[18:52:38.164]      __var nReset = 0x80;
[18:52:38.164]        // -> [nReset <= 0x00000080]
[18:52:38.164]      __var canReadPins = 0;
[18:52:38.164]        // -> [canReadPins <= 0x00000000]
[18:52:38.164]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:52:38.166]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:52:38.167]        // -> [canReadPins <= 0x00000001]
[18:52:38.167]    </block>
[18:52:38.167]    <control if="" while="1" timeout="200" info="">
[18:52:38.167]      // while "1"  (timeout="200")
[18:52:38.167]      // while-condition  =>  TRUE
[18:52:38.167]      // while "1"  (timeout="200")
[18:52:38.167]      // while-condition  =>  TRUE
[18:52:38.167]      // while "1"  (timeout="200")
[18:52:38.167]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.168]      // while "1"  (timeout="200")
[18:52:38.168]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.169]      // while-condition  =>  TRUE
[18:52:38.169]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.170]      // while "1"  (timeout="200")
[18:52:38.170]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.171]      // while-condition  =>  TRUE
[18:52:38.171]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.172]      // while-condition  =>  TRUE
[18:52:38.172]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.173]      // while-condition  =>  TRUE
[18:52:38.173]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.174]      // while-condition  =>  TRUE
[18:52:38.174]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.175]      // while-condition  =>  TRUE
[18:52:38.175]      // while "1"  (timeout="200")
[18:52:38.176]      // while-condition  =>  TRUE
[18:52:38.176]      // while "1"  (timeout="200")
[18:52:38.176]      // while  =>  TIMEOUT
[18:52:38.176]      // end while "1"
[18:52:38.176]    </control>
[18:52:38.176]    <control if="canReadPins" while="" timeout="0" info="">
[18:52:38.176]      // if-block "canReadPins"
[18:52:38.176]        // =>  TRUE
[18:52:38.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:52:38.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:52:38.179]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:52:38.179]        // while-condition  =>  FALSE
[18:52:38.179]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:52:38.179]      </control>
[18:52:38.179]      // end if-block "canReadPins"
[18:52:38.179]    </control>
[18:52:38.179]    <control if="!canReadPins" while="" timeout="0" info="">
[18:52:38.179]      // if-block "!canReadPins"
[18:52:38.179]        // =>  FALSE
[18:52:38.179]      // skip if-block "!canReadPins"
[18:52:38.179]    </control>
[18:52:38.179]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:52:38.179]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:52:38.179]        // =>  TRUE
[18:52:38.179]      <block atomic="false" info="">
[18:52:38.179]        WriteAP(0x00, 0x190008);
[18:52:38.182]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:52:38.182]        WriteAP(0xF0, 0x01);
[18:52:38.187]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:52:38.187]      </block>
[18:52:38.187]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:52:38.187]    </control>
[18:52:38.187]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:52:38.187]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:52:38.187]        // =>  FALSE
[18:52:38.187]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:52:38.187]    </control>
[18:52:38.187]    <block atomic="false" info="">
[18:52:38.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:52:38.195]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:52:38.196]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:52:38.196]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:52:38.196]      __ap = 0; //lets make sure we reset the access point selection
[18:52:38.196]        // -> [__ap <= 0x00000000]
[18:52:38.196]    </block>
[18:52:38.196]  </sequence>
[18:52:38.196]  
[18:52:38.219]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:52:38.219]  
[18:52:38.220]  <debugvars>
[18:52:38.220]    // Pre-defined
[18:52:38.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:52:38.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:52:38.220]    __dp=0x00000000
[18:52:38.220]    __ap=0x00000000
[18:52:38.220]    __traceout=0x00000000      (Trace Disabled)
[18:52:38.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:52:38.220]    __FlashAddr=0x00000000
[18:52:38.220]    __FlashLen=0x00000000
[18:52:38.220]    __FlashArg=0x00000000
[18:52:38.220]    __FlashOp=0x00000000
[18:52:38.220]    __Result=0x00000000
[18:52:38.220]  </debugvars>
[18:52:38.220]  
[18:52:38.220]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:52:38.220]    <block atomic="false" info="">
[18:52:38.220]      __var deviceID = 0;
[18:52:38.220]        // -> [deviceID <= 0x00000000]
[18:52:38.220]      __var version = 0;
[18:52:38.221]        // -> [version <= 0x00000000]
[18:52:38.221]      __var partNum = 0;
[18:52:38.221]        // -> [partNum <= 0x00000000]
[18:52:38.221]      __var manuf = 0;
[18:52:38.221]        // -> [manuf <= 0x00000000]
[18:52:38.221]      __var isMSPM0G1X0X_G3X0X = 0;
[18:52:38.221]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:52:38.221]      __var isProduction = 0;
[18:52:38.221]        // -> [isProduction <= 0x00000000]
[18:52:38.221]      __var continueId = 0;
[18:52:38.221]        // -> [continueId <= 0x00000000]
[18:52:38.221]      deviceID =   Read32(0x41C40004);
[18:52:38.226]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:52:38.226]        // -> [deviceID <= 0x2BB8802F]
[18:52:38.226]      version = deviceID >> 28;
[18:52:38.226]        // -> [version <= 0x00000002]
[18:52:38.226]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:52:38.226]        // -> [partNum <= 0x0000BB88]
[18:52:38.226]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:52:38.227]        // -> [manuf <= 0x00000017]
[18:52:38.227]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:52:38.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:52:38.227]      isProduction = (version > 0);
[18:52:38.227]        // -> [isProduction <= 0x00000001]
[18:52:38.227]    </block>
[18:52:38.227]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:52:38.227]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:52:38.227]        // =>  FALSE
[18:52:38.227]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:52:38.227]    </control>
[18:52:38.227]    <control if="continueId == 4" while="" timeout="0" info="">
[18:52:38.227]      // if-block "continueId == 4"
[18:52:38.227]        // =>  FALSE
[18:52:38.227]      // skip if-block "continueId == 4"
[18:52:38.227]    </control>
[18:52:38.227]    <control if="!isProduction" while="" timeout="0" info="">
[18:52:38.227]      // if-block "!isProduction"
[18:52:38.227]        // =>  FALSE
[18:52:38.227]      // skip if-block "!isProduction"
[18:52:38.227]    </control>
[18:52:38.228]  </sequence>
[18:52:38.228]  
[18:53:21.612]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:53:21.612]  
[18:53:21.618]  <debugvars>
[18:53:21.618]    // Pre-defined
[18:53:21.618]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:53:21.618]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:53:21.618]    __dp=0x00000000
[18:53:21.618]    __ap=0x00000000
[18:53:21.618]    __traceout=0x00000000      (Trace Disabled)
[18:53:21.619]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:53:21.619]    __FlashAddr=0x00000000
[18:53:21.619]    __FlashLen=0x00000000
[18:53:21.619]    __FlashArg=0x00000000
[18:53:21.619]    __FlashOp=0x00000000
[18:53:21.619]    __Result=0x00000000
[18:53:21.619]  </debugvars>
[18:53:21.619]  
[18:53:21.619]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:53:21.619]    <block atomic="false" info="">
[18:53:21.619]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:53:21.619]        // -> [isSWJ <= 0x00000001]
[18:53:21.619]      __var hasDormant = __protocol & 0x00020000;
[18:53:21.619]        // -> [hasDormant <= 0x00000000]
[18:53:21.619]      __var protType   = __protocol & 0x0000FFFF;
[18:53:21.619]        // -> [protType <= 0x00000002]
[18:53:21.619]    </block>
[18:53:21.619]    <control if="protType == 1" while="" timeout="0" info="">
[18:53:21.619]      // if-block "protType == 1"
[18:53:21.619]        // =>  FALSE
[18:53:21.619]      // skip if-block "protType == 1"
[18:53:21.619]    </control>
[18:53:21.619]    <control if="protType == 2" while="" timeout="0" info="">
[18:53:21.619]      // if-block "protType == 2"
[18:53:21.619]        // =>  TRUE
[18:53:21.619]      <control if="isSWJ" while="" timeout="0" info="">
[18:53:21.619]        // if-block "isSWJ"
[18:53:21.620]          // =>  TRUE
[18:53:21.620]        <control if="hasDormant" while="" timeout="0" info="">
[18:53:21.620]          // if-block "hasDormant"
[18:53:21.620]            // =>  FALSE
[18:53:21.620]          // skip if-block "hasDormant"
[18:53:21.620]        </control>
[18:53:21.620]        <control if="!hasDormant" while="" timeout="0" info="">
[18:53:21.620]          // if-block "!hasDormant"
[18:53:21.620]            // =>  TRUE
[18:53:21.620]          <block atomic="false" info="">
[18:53:21.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:53:21.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:53:21.622]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:53:21.624]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:53:21.624]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:53:21.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:53:21.626]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:53:21.627]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:53:21.628]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:53:21.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:53:21.629]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:53:21.630]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:53:21.630]          </block>
[18:53:21.631]          // end if-block "!hasDormant"
[18:53:21.631]        </control>
[18:53:21.631]        // end if-block "isSWJ"
[18:53:21.631]      </control>
[18:53:21.631]      <control if="!isSWJ" while="" timeout="0" info="">
[18:53:21.631]        // if-block "!isSWJ"
[18:53:21.631]          // =>  FALSE
[18:53:21.631]        // skip if-block "!isSWJ"
[18:53:21.631]      </control>
[18:53:21.631]      <block atomic="false" info="">
[18:53:21.631]        ReadDP(0x0);
[18:53:21.634]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:53:21.634]      </block>
[18:53:21.634]      // end if-block "protType == 2"
[18:53:21.634]    </control>
[18:53:21.634]  </sequence>
[18:53:21.634]  
[18:53:21.637]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:53:21.637]  
[18:53:21.637]  <debugvars>
[18:53:21.637]    // Pre-defined
[18:53:21.637]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:53:21.637]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:53:21.637]    __dp=0x00000000
[18:53:21.637]    __ap=0x00000000
[18:53:21.637]    __traceout=0x00000000      (Trace Disabled)
[18:53:21.637]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:53:21.637]    __FlashAddr=0x00000000
[18:53:21.637]    __FlashLen=0x00000000
[18:53:21.637]    __FlashArg=0x00000000
[18:53:21.637]    __FlashOp=0x00000000
[18:53:21.637]    __Result=0x00000000
[18:53:21.637]  </debugvars>
[18:53:21.637]  
[18:53:21.638]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:53:21.638]    <block atomic="false" info="">
[18:53:21.638]      __var SW_DP_ABORT       = 0x0;
[18:53:21.638]        // -> [SW_DP_ABORT <= 0x00000000]
[18:53:21.638]      __var DP_CTRL_STAT      = 0x4;
[18:53:21.638]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:53:21.638]      __var DP_SELECT         = 0x8;
[18:53:21.638]        // -> [DP_SELECT <= 0x00000008]
[18:53:21.638]      __var powered_down      = 0;
[18:53:21.638]        // -> [powered_down <= 0x00000000]
[18:53:21.638]      WriteDP(DP_SELECT, 0x00000000);
[18:53:21.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:53:21.640]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:53:21.643]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:53:21.644]        // -> [powered_down <= 0x00000001]
[18:53:21.644]    </block>
[18:53:21.644]    <control if="powered_down" while="" timeout="0" info="">
[18:53:21.644]      // if-block "powered_down"
[18:53:21.644]        // =>  TRUE
[18:53:21.644]      <block atomic="false" info="">
[18:53:21.644]        Message(0, "Debug/System power-up request sent");
[18:53:21.645]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:53:21.646]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:53:21.646]      </block>
[18:53:21.646]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:53:21.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:53:21.648]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:53:21.648]        // while-condition  =>  FALSE
[18:53:21.648]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:53:21.648]      </control>
[18:53:21.648]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:53:21.648]        // if-block "(__protocol & 0xFFFF) == 1"
[18:53:21.648]          // =>  FALSE
[18:53:21.648]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:53:21.648]      </control>
[18:53:21.648]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:53:21.648]        // if-block "(__protocol & 0xFFFF) == 2"
[18:53:21.648]          // =>  TRUE
[18:53:21.648]        <block atomic="false" info="">
[18:53:21.648]          Message(0, "executing SWD power up");
[18:53:21.653]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:53:21.655]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:53:21.655]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:53:21.657]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:53:21.657]        </block>
[18:53:21.657]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:53:21.657]      </control>
[18:53:21.657]      // end if-block "powered_down"
[18:53:21.657]    </control>
[18:53:21.657]    <block atomic="false" info="">
[18:53:21.657]      __var DEBUG_PORT_VAL    = 0;
[18:53:21.657]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:53:21.657]      __var ACCESS_POINT_VAL  = 0;
[18:53:21.657]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:53:21.657]      __ap = 1; 
[18:53:21.658]        // -> [__ap <= 0x00000001]
[18:53:21.658]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:53:21.661]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:53:21.661]      __ap = 4;
[18:53:21.661]        // -> [__ap <= 0x00000004]
[18:53:21.661]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:53:21.666]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:53:21.666]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:53:21.666]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:53:21.669]    </block>
[18:53:21.669]    <block atomic="false" info="">
[18:53:21.670]      __var nReset = 0x80;
[18:53:21.670]        // -> [nReset <= 0x00000080]
[18:53:21.670]      __var canReadPins = 0;
[18:53:21.670]        // -> [canReadPins <= 0x00000000]
[18:53:21.670]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:53:21.671]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:53:21.671]        // -> [canReadPins <= 0x00000001]
[18:53:21.671]    </block>
[18:53:21.671]    <control if="" while="1" timeout="200" info="">
[18:53:21.671]      // while "1"  (timeout="200")
[18:53:21.671]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.672]      // while-condition  =>  TRUE
[18:53:21.672]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.673]      // while "1"  (timeout="200")
[18:53:21.673]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.674]      // while "1"  (timeout="200")
[18:53:21.674]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.675]      // while "1"  (timeout="200")
[18:53:21.675]      // while-condition  =>  TRUE
[18:53:21.676]      // while "1"  (timeout="200")
[18:53:21.676]      // while  =>  TIMEOUT
[18:53:21.676]      // end while "1"
[18:53:21.676]    </control>
[18:53:21.676]    <control if="canReadPins" while="" timeout="0" info="">
[18:53:21.676]      // if-block "canReadPins"
[18:53:21.676]        // =>  TRUE
[18:53:21.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:53:21.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:53:21.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:53:21.677]        // while-condition  =>  FALSE
[18:53:21.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:53:21.677]      </control>
[18:53:21.677]      // end if-block "canReadPins"
[18:53:21.677]    </control>
[18:53:21.678]    <control if="!canReadPins" while="" timeout="0" info="">
[18:53:21.678]      // if-block "!canReadPins"
[18:53:21.678]        // =>  FALSE
[18:53:21.678]      // skip if-block "!canReadPins"
[18:53:21.678]    </control>
[18:53:21.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:53:21.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:53:21.678]        // =>  TRUE
[18:53:21.678]      <block atomic="false" info="">
[18:53:21.678]        WriteAP(0x00, 0x190008);
[18:53:21.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:53:21.680]        WriteAP(0xF0, 0x01);
[18:53:21.683]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:53:21.683]      </block>
[18:53:21.683]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:53:21.683]    </control>
[18:53:21.683]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:53:21.683]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:53:21.683]        // =>  FALSE
[18:53:21.683]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:53:21.683]    </control>
[18:53:21.683]    <block atomic="false" info="">
[18:53:21.683]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:53:21.686]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:53:21.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:53:21.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:53:21.688]      __ap = 0; //lets make sure we reset the access point selection
[18:53:21.688]        // -> [__ap <= 0x00000000]
[18:53:21.688]    </block>
[18:53:21.688]  </sequence>
[18:53:21.688]  
[18:53:21.713]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:53:21.713]  
[18:53:21.713]  <debugvars>
[18:53:21.714]    // Pre-defined
[18:53:21.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:53:21.714]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:53:21.714]    __dp=0x00000000
[18:53:21.714]    __ap=0x00000000
[18:53:21.714]    __traceout=0x00000000      (Trace Disabled)
[18:53:21.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:53:21.714]    __FlashAddr=0x00000000
[18:53:21.714]    __FlashLen=0x00000000
[18:53:21.714]    __FlashArg=0x00000000
[18:53:21.715]    __FlashOp=0x00000000
[18:53:21.715]    __Result=0x00000000
[18:53:21.715]  </debugvars>
[18:53:21.715]  
[18:53:21.715]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:53:21.715]    <block atomic="false" info="">
[18:53:21.715]      __var deviceID = 0;
[18:53:21.715]        // -> [deviceID <= 0x00000000]
[18:53:21.715]      __var version = 0;
[18:53:21.715]        // -> [version <= 0x00000000]
[18:53:21.715]      __var partNum = 0;
[18:53:21.715]        // -> [partNum <= 0x00000000]
[18:53:21.715]      __var manuf = 0;
[18:53:21.715]        // -> [manuf <= 0x00000000]
[18:53:21.715]      __var isMSPM0G1X0X_G3X0X = 0;
[18:53:21.715]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:53:21.715]      __var isProduction = 0;
[18:53:21.716]        // -> [isProduction <= 0x00000000]
[18:53:21.716]      __var continueId = 0;
[18:53:21.716]        // -> [continueId <= 0x00000000]
[18:53:21.716]      deviceID =   Read32(0x41C40004);
[18:53:21.721]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:53:21.722]        // -> [deviceID <= 0x2BB8802F]
[18:53:21.722]      version = deviceID >> 28;
[18:53:21.722]        // -> [version <= 0x00000002]
[18:53:21.722]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:53:21.722]        // -> [partNum <= 0x0000BB88]
[18:53:21.722]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:53:21.722]        // -> [manuf <= 0x00000017]
[18:53:21.722]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:53:21.722]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:53:21.722]      isProduction = (version > 0);
[18:53:21.722]        // -> [isProduction <= 0x00000001]
[18:53:21.722]    </block>
[18:53:21.722]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:53:21.722]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:53:21.722]        // =>  FALSE
[18:53:21.722]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:53:21.722]    </control>
[18:53:21.722]    <control if="continueId == 4" while="" timeout="0" info="">
[18:53:21.722]      // if-block "continueId == 4"
[18:53:21.722]        // =>  FALSE
[18:53:21.723]      // skip if-block "continueId == 4"
[18:53:21.723]    </control>
[18:53:21.723]    <control if="!isProduction" while="" timeout="0" info="">
[18:53:21.723]      // if-block "!isProduction"
[18:53:21.723]        // =>  FALSE
[18:53:21.723]      // skip if-block "!isProduction"
[18:53:21.723]    </control>
[18:53:21.723]  </sequence>
[18:53:21.723]  
[18:53:43.405]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:53:43.405]  
[18:53:43.405]  <debugvars>
[18:53:43.405]    // Pre-defined
[18:53:43.405]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:53:43.405]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:53:43.407]    __dp=0x00000000
[18:53:43.407]    __ap=0x00000000
[18:53:43.407]    __traceout=0x00000000      (Trace Disabled)
[18:53:43.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:53:43.407]    __FlashAddr=0x00000000
[18:53:43.407]    __FlashLen=0x00000000
[18:53:43.407]    __FlashArg=0x00000000
[18:53:43.407]    __FlashOp=0x00000000
[18:53:43.407]    __Result=0x00000000
[18:53:43.407]  </debugvars>
[18:53:43.407]  
[18:53:43.407]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:53:43.407]    <block atomic="false" info="">
[18:53:43.407]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:53:43.407]        // -> [isSWJ <= 0x00000001]
[18:53:43.407]      __var hasDormant = __protocol & 0x00020000;
[18:53:43.407]        // -> [hasDormant <= 0x00000000]
[18:53:43.408]      __var protType   = __protocol & 0x0000FFFF;
[18:53:43.408]        // -> [protType <= 0x00000002]
[18:53:43.408]    </block>
[18:53:43.408]    <control if="protType == 1" while="" timeout="0" info="">
[18:53:43.408]      // if-block "protType == 1"
[18:53:43.408]        // =>  FALSE
[18:53:43.408]      // skip if-block "protType == 1"
[18:53:43.408]    </control>
[18:53:43.408]    <control if="protType == 2" while="" timeout="0" info="">
[18:53:43.408]      // if-block "protType == 2"
[18:53:43.408]        // =>  TRUE
[18:53:43.408]      <control if="isSWJ" while="" timeout="0" info="">
[18:53:43.408]        // if-block "isSWJ"
[18:53:43.408]          // =>  TRUE
[18:53:43.408]        <control if="hasDormant" while="" timeout="0" info="">
[18:53:43.408]          // if-block "hasDormant"
[18:53:43.408]            // =>  FALSE
[18:53:43.408]          // skip if-block "hasDormant"
[18:53:43.408]        </control>
[18:53:43.408]        <control if="!hasDormant" while="" timeout="0" info="">
[18:53:43.408]          // if-block "!hasDormant"
[18:53:43.409]            // =>  TRUE
[18:53:43.409]          <block atomic="false" info="">
[18:53:43.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:53:43.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:53:43.414]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:53:43.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:53:43.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:53:43.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:53:43.422]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:53:43.423]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:53:43.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:53:43.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:53:43.425]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:53:43.427]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:53:43.427]          </block>
[18:53:43.427]          // end if-block "!hasDormant"
[18:53:43.427]        </control>
[18:53:43.427]        // end if-block "isSWJ"
[18:53:43.427]      </control>
[18:53:43.427]      <control if="!isSWJ" while="" timeout="0" info="">
[18:53:43.428]        // if-block "!isSWJ"
[18:53:43.428]          // =>  FALSE
[18:53:43.428]        // skip if-block "!isSWJ"
[18:53:43.428]      </control>
[18:53:43.428]      <block atomic="false" info="">
[18:53:43.428]        ReadDP(0x0);
[18:53:43.433]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:53:43.434]      </block>
[18:53:43.434]      // end if-block "protType == 2"
[18:53:43.434]    </control>
[18:53:43.434]  </sequence>
[18:53:43.434]  
[18:53:43.438]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:53:43.438]  
[18:53:43.438]  <debugvars>
[18:53:43.438]    // Pre-defined
[18:53:43.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:53:43.438]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:53:43.438]    __dp=0x00000000
[18:53:43.438]    __ap=0x00000000
[18:53:43.438]    __traceout=0x00000000      (Trace Disabled)
[18:53:43.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:53:43.438]    __FlashAddr=0x00000000
[18:53:43.438]    __FlashLen=0x00000000
[18:53:43.438]    __FlashArg=0x00000000
[18:53:43.438]    __FlashOp=0x00000000
[18:53:43.439]    __Result=0x00000000
[18:53:43.439]  </debugvars>
[18:53:43.439]  
[18:53:43.439]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:53:43.439]    <block atomic="false" info="">
[18:53:43.439]      __var SW_DP_ABORT       = 0x0;
[18:53:43.439]        // -> [SW_DP_ABORT <= 0x00000000]
[18:53:43.439]      __var DP_CTRL_STAT      = 0x4;
[18:53:43.439]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:53:43.439]      __var DP_SELECT         = 0x8;
[18:53:43.439]        // -> [DP_SELECT <= 0x00000008]
[18:53:43.439]      __var powered_down      = 0;
[18:53:43.439]        // -> [powered_down <= 0x00000000]
[18:53:43.439]      WriteDP(DP_SELECT, 0x00000000);
[18:53:43.440]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:53:43.440]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:53:43.445]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:53:43.445]        // -> [powered_down <= 0x00000001]
[18:53:43.445]    </block>
[18:53:43.445]    <control if="powered_down" while="" timeout="0" info="">
[18:53:43.445]      // if-block "powered_down"
[18:53:43.445]        // =>  TRUE
[18:53:43.445]      <block atomic="false" info="">
[18:53:43.445]        Message(0, "Debug/System power-up request sent");
[18:53:43.445]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:53:43.449]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:53:43.449]      </block>
[18:53:43.449]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:53:43.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:53:43.457]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:53:43.457]        // while-condition  =>  FALSE
[18:53:43.457]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:53:43.457]      </control>
[18:53:43.457]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:53:43.457]        // if-block "(__protocol & 0xFFFF) == 1"
[18:53:43.457]          // =>  FALSE
[18:53:43.457]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:53:43.457]      </control>
[18:53:43.457]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:53:43.457]        // if-block "(__protocol & 0xFFFF) == 2"
[18:53:43.457]          // =>  TRUE
[18:53:43.457]        <block atomic="false" info="">
[18:53:43.457]          Message(0, "executing SWD power up");
[18:53:43.462]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:53:43.467]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:53:43.467]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:53:43.471]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:53:43.471]        </block>
[18:53:43.471]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:53:43.471]      </control>
[18:53:43.471]      // end if-block "powered_down"
[18:53:43.471]    </control>
[18:53:43.471]    <block atomic="false" info="">
[18:53:43.472]      __var DEBUG_PORT_VAL    = 0;
[18:53:43.472]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:53:43.472]      __var ACCESS_POINT_VAL  = 0;
[18:53:43.472]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:53:43.472]      __ap = 1; 
[18:53:43.472]        // -> [__ap <= 0x00000001]
[18:53:43.472]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:53:43.476]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:53:43.476]      __ap = 4;
[18:53:43.476]        // -> [__ap <= 0x00000004]
[18:53:43.476]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:53:43.482]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:53:43.483]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:53:43.483]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:53:43.484]    </block>
[18:53:43.484]    <block atomic="false" info="">
[18:53:43.484]      __var nReset = 0x80;
[18:53:43.484]        // -> [nReset <= 0x00000080]
[18:53:43.484]      __var canReadPins = 0;
[18:53:43.484]        // -> [canReadPins <= 0x00000000]
[18:53:43.485]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:53:43.486]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:53:43.486]        // -> [canReadPins <= 0x00000001]
[18:53:43.488]    </block>
[18:53:43.488]    <control if="" while="1" timeout="200" info="">
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.488]      // while "1"  (timeout="200")
[18:53:43.488]      // while-condition  =>  TRUE
[18:53:43.489]      // while "1"  (timeout="200")
[18:53:43.489]      // while  =>  TIMEOUT
[18:53:43.489]      // end while "1"
[18:53:43.489]    </control>
[18:53:43.489]    <control if="canReadPins" while="" timeout="0" info="">
[18:53:43.489]      // if-block "canReadPins"
[18:53:43.489]        // =>  TRUE
[18:53:43.489]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:53:43.489]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:53:43.493]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:53:43.493]        // while-condition  =>  FALSE
[18:53:43.493]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:53:43.493]      </control>
[18:53:43.493]      // end if-block "canReadPins"
[18:53:43.493]    </control>
[18:53:43.493]    <control if="!canReadPins" while="" timeout="0" info="">
[18:53:43.493]      // if-block "!canReadPins"
[18:53:43.493]        // =>  FALSE
[18:53:43.493]      // skip if-block "!canReadPins"
[18:53:43.493]    </control>
[18:53:43.493]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:53:43.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:53:43.493]        // =>  TRUE
[18:53:43.493]      <block atomic="false" info="">
[18:53:43.494]        WriteAP(0x00, 0x190008);
[18:53:43.501]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:53:43.501]        WriteAP(0xF0, 0x01);
[18:53:43.517]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:53:43.517]      </block>
[18:53:43.517]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:53:43.517]    </control>
[18:53:43.517]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:53:43.517]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:53:43.517]        // =>  FALSE
[18:53:43.517]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:53:43.517]    </control>
[18:53:43.517]    <block atomic="false" info="">
[18:53:43.517]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:53:43.520]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:53:43.520]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:53:43.520]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:53:43.521]      __ap = 0; //lets make sure we reset the access point selection
[18:53:43.521]        // -> [__ap <= 0x00000000]
[18:53:43.521]    </block>
[18:53:43.521]  </sequence>
[18:53:43.522]  
[18:53:43.537]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:53:43.537]  
[18:53:43.537]  <debugvars>
[18:53:43.538]    // Pre-defined
[18:53:43.538]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:53:43.538]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:53:43.538]    __dp=0x00000000
[18:53:43.538]    __ap=0x00000000
[18:53:43.538]    __traceout=0x00000000      (Trace Disabled)
[18:53:43.538]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:53:43.538]    __FlashAddr=0x00000000
[18:53:43.538]    __FlashLen=0x00000000
[18:53:43.538]    __FlashArg=0x00000000
[18:53:43.538]    __FlashOp=0x00000000
[18:53:43.538]    __Result=0x00000000
[18:53:43.538]  </debugvars>
[18:53:43.538]  
[18:53:43.539]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:53:43.539]    <block atomic="false" info="">
[18:53:43.539]      __var deviceID = 0;
[18:53:43.539]        // -> [deviceID <= 0x00000000]
[18:53:43.539]      __var version = 0;
[18:53:43.539]        // -> [version <= 0x00000000]
[18:53:43.539]      __var partNum = 0;
[18:53:43.539]        // -> [partNum <= 0x00000000]
[18:53:43.539]      __var manuf = 0;
[18:53:43.539]        // -> [manuf <= 0x00000000]
[18:53:43.539]      __var isMSPM0G1X0X_G3X0X = 0;
[18:53:43.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:53:43.539]      __var isProduction = 0;
[18:53:43.539]        // -> [isProduction <= 0x00000000]
[18:53:43.539]      __var continueId = 0;
[18:53:43.539]        // -> [continueId <= 0x00000000]
[18:53:43.539]      deviceID =   Read32(0x41C40004);
[18:53:43.549]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:53:43.549]        // -> [deviceID <= 0x2BB8802F]
[18:53:43.549]      version = deviceID >> 28;
[18:53:43.550]        // -> [version <= 0x00000002]
[18:53:43.550]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:53:43.550]        // -> [partNum <= 0x0000BB88]
[18:53:43.550]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:53:43.550]        // -> [manuf <= 0x00000017]
[18:53:43.550]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:53:43.550]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:53:43.550]      isProduction = (version > 0);
[18:53:43.550]        // -> [isProduction <= 0x00000001]
[18:53:43.550]    </block>
[18:53:43.550]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:53:43.550]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:53:43.550]        // =>  FALSE
[18:53:43.550]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:53:43.550]    </control>
[18:53:43.550]    <control if="continueId == 4" while="" timeout="0" info="">
[18:53:43.550]      // if-block "continueId == 4"
[18:53:43.550]        // =>  FALSE
[18:53:43.550]      // skip if-block "continueId == 4"
[18:53:43.550]    </control>
[18:53:43.550]    <control if="!isProduction" while="" timeout="0" info="">
[18:53:43.550]      // if-block "!isProduction"
[18:53:43.550]        // =>  FALSE
[18:53:43.550]      // skip if-block "!isProduction"
[18:53:43.550]    </control>
[18:53:43.551]  </sequence>
[18:53:43.551]  
[18:54:07.125]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:54:07.125]  
[18:54:07.125]  <debugvars>
[18:54:07.125]    // Pre-defined
[18:54:07.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:07.126]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:07.126]    __dp=0x00000000
[18:54:07.126]    __ap=0x00000000
[18:54:07.126]    __traceout=0x00000000      (Trace Disabled)
[18:54:07.126]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:07.126]    __FlashAddr=0x00000000
[18:54:07.126]    __FlashLen=0x00000000
[18:54:07.126]    __FlashArg=0x00000000
[18:54:07.126]    __FlashOp=0x00000000
[18:54:07.126]    __Result=0x00000000
[18:54:07.126]  </debugvars>
[18:54:07.126]  
[18:54:07.126]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:54:07.126]    <block atomic="false" info="">
[18:54:07.126]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:54:07.127]        // -> [isSWJ <= 0x00000001]
[18:54:07.127]      __var hasDormant = __protocol & 0x00020000;
[18:54:07.127]        // -> [hasDormant <= 0x00000000]
[18:54:07.127]      __var protType   = __protocol & 0x0000FFFF;
[18:54:07.127]        // -> [protType <= 0x00000002]
[18:54:07.127]    </block>
[18:54:07.127]    <control if="protType == 1" while="" timeout="0" info="">
[18:54:07.127]      // if-block "protType == 1"
[18:54:07.127]        // =>  FALSE
[18:54:07.127]      // skip if-block "protType == 1"
[18:54:07.127]    </control>
[18:54:07.127]    <control if="protType == 2" while="" timeout="0" info="">
[18:54:07.127]      // if-block "protType == 2"
[18:54:07.127]        // =>  TRUE
[18:54:07.127]      <control if="isSWJ" while="" timeout="0" info="">
[18:54:07.127]        // if-block "isSWJ"
[18:54:07.128]          // =>  TRUE
[18:54:07.128]        <control if="hasDormant" while="" timeout="0" info="">
[18:54:07.128]          // if-block "hasDormant"
[18:54:07.128]            // =>  FALSE
[18:54:07.128]          // skip if-block "hasDormant"
[18:54:07.128]        </control>
[18:54:07.128]        <control if="!hasDormant" while="" timeout="0" info="">
[18:54:07.128]          // if-block "!hasDormant"
[18:54:07.128]            // =>  TRUE
[18:54:07.128]          <block atomic="false" info="">
[18:54:07.128]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:54:07.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:07.132]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:54:07.135]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:54:07.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:54:07.136]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:07.136]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:54:07.138]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:54:07.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:54:07.139]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:07.140]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:54:07.141]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:54:07.141]          </block>
[18:54:07.141]          // end if-block "!hasDormant"
[18:54:07.141]        </control>
[18:54:07.141]        // end if-block "isSWJ"
[18:54:07.141]      </control>
[18:54:07.141]      <control if="!isSWJ" while="" timeout="0" info="">
[18:54:07.141]        // if-block "!isSWJ"
[18:54:07.141]          // =>  FALSE
[18:54:07.141]        // skip if-block "!isSWJ"
[18:54:07.141]      </control>
[18:54:07.141]      <block atomic="false" info="">
[18:54:07.142]        ReadDP(0x0);
[18:54:07.143]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:54:07.143]      </block>
[18:54:07.143]      // end if-block "protType == 2"
[18:54:07.143]    </control>
[18:54:07.143]  </sequence>
[18:54:07.143]  
[18:54:07.150]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:54:07.150]  
[18:54:07.150]  <debugvars>
[18:54:07.150]    // Pre-defined
[18:54:07.150]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:07.150]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:07.150]    __dp=0x00000000
[18:54:07.150]    __ap=0x00000000
[18:54:07.150]    __traceout=0x00000000      (Trace Disabled)
[18:54:07.151]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:07.151]    __FlashAddr=0x00000000
[18:54:07.151]    __FlashLen=0x00000000
[18:54:07.151]    __FlashArg=0x00000000
[18:54:07.151]    __FlashOp=0x00000000
[18:54:07.151]    __Result=0x00000000
[18:54:07.151]  </debugvars>
[18:54:07.151]  
[18:54:07.151]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:54:07.151]    <block atomic="false" info="">
[18:54:07.151]      __var SW_DP_ABORT       = 0x0;
[18:54:07.151]        // -> [SW_DP_ABORT <= 0x00000000]
[18:54:07.151]      __var DP_CTRL_STAT      = 0x4;
[18:54:07.151]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:54:07.151]      __var DP_SELECT         = 0x8;
[18:54:07.152]        // -> [DP_SELECT <= 0x00000008]
[18:54:07.152]      __var powered_down      = 0;
[18:54:07.152]        // -> [powered_down <= 0x00000000]
[18:54:07.152]      WriteDP(DP_SELECT, 0x00000000);
[18:54:07.153]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:54:07.153]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:54:07.158]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:54:07.158]        // -> [powered_down <= 0x00000001]
[18:54:07.158]    </block>
[18:54:07.158]    <control if="powered_down" while="" timeout="0" info="">
[18:54:07.158]      // if-block "powered_down"
[18:54:07.158]        // =>  TRUE
[18:54:07.158]      <block atomic="false" info="">
[18:54:07.158]        Message(0, "Debug/System power-up request sent");
[18:54:07.159]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:54:07.169]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:54:07.169]      </block>
[18:54:07.169]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:54:07.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:54:07.171]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:54:07.171]        // while-condition  =>  FALSE
[18:54:07.171]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:54:07.171]      </control>
[18:54:07.171]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:54:07.171]        // if-block "(__protocol & 0xFFFF) == 1"
[18:54:07.171]          // =>  FALSE
[18:54:07.172]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:54:07.172]      </control>
[18:54:07.172]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:54:07.172]        // if-block "(__protocol & 0xFFFF) == 2"
[18:54:07.172]          // =>  TRUE
[18:54:07.172]        <block atomic="false" info="">
[18:54:07.172]          Message(0, "executing SWD power up");
[18:54:07.174]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:54:07.176]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:54:07.176]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:54:07.178]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:54:07.178]        </block>
[18:54:07.178]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:54:07.178]      </control>
[18:54:07.178]      // end if-block "powered_down"
[18:54:07.178]    </control>
[18:54:07.178]    <block atomic="false" info="">
[18:54:07.178]      __var DEBUG_PORT_VAL    = 0;
[18:54:07.178]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:54:07.178]      __var ACCESS_POINT_VAL  = 0;
[18:54:07.178]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:54:07.178]      __ap = 1; 
[18:54:07.178]        // -> [__ap <= 0x00000001]
[18:54:07.178]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:54:07.183]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:54:07.183]      __ap = 4;
[18:54:07.183]        // -> [__ap <= 0x00000004]
[18:54:07.183]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:07.193]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:54:07.193]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:54:07.193]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:07.195]    </block>
[18:54:07.195]    <block atomic="false" info="">
[18:54:07.195]      __var nReset = 0x80;
[18:54:07.195]        // -> [nReset <= 0x00000080]
[18:54:07.195]      __var canReadPins = 0;
[18:54:07.195]        // -> [canReadPins <= 0x00000000]
[18:54:07.195]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:54:07.196]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:54:07.196]        // -> [canReadPins <= 0x00000001]
[18:54:07.196]    </block>
[18:54:07.196]    <control if="" while="1" timeout="200" info="">
[18:54:07.196]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.197]      // while-condition  =>  TRUE
[18:54:07.197]      // while "1"  (timeout="200")
[18:54:07.198]      // while-condition  =>  TRUE
[18:54:07.198]      // while "1"  (timeout="200")
[18:54:07.198]      // while-condition  =>  TRUE
[18:54:07.198]      // while "1"  (timeout="200")
[18:54:07.198]      // while-condition  =>  TRUE
[18:54:07.198]      // while "1"  (timeout="200")
[18:54:07.198]      // while-condition  =>  TRUE
[18:54:07.198]      // while "1"  (timeout="200")
[18:54:07.198]      // while-condition  =>  TRUE
[18:54:07.198]      // while "1"  (timeout="200")
[18:54:07.198]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.199]      // while-condition  =>  TRUE
[18:54:07.199]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.200]      // while "1"  (timeout="200")
[18:54:07.200]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.201]      // while-condition  =>  TRUE
[18:54:07.201]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.202]      // while-condition  =>  TRUE
[18:54:07.202]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.203]      // while-condition  =>  TRUE
[18:54:07.203]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.204]      // while-condition  =>  TRUE
[18:54:07.204]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.205]      // while-condition  =>  TRUE
[18:54:07.205]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.206]      // while "1"  (timeout="200")
[18:54:07.206]      // while-condition  =>  TRUE
[18:54:07.207]      // while "1"  (timeout="200")
[18:54:07.207]      // while  =>  TIMEOUT
[18:54:07.207]      // end while "1"
[18:54:07.207]    </control>
[18:54:07.207]    <control if="canReadPins" while="" timeout="0" info="">
[18:54:07.207]      // if-block "canReadPins"
[18:54:07.207]        // =>  TRUE
[18:54:07.207]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:54:07.207]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:54:07.209]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:54:07.209]        // while-condition  =>  FALSE
[18:54:07.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:54:07.209]      </control>
[18:54:07.209]      // end if-block "canReadPins"
[18:54:07.209]    </control>
[18:54:07.209]    <control if="!canReadPins" while="" timeout="0" info="">
[18:54:07.209]      // if-block "!canReadPins"
[18:54:07.209]        // =>  FALSE
[18:54:07.209]      // skip if-block "!canReadPins"
[18:54:07.209]    </control>
[18:54:07.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:54:07.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:07.209]        // =>  TRUE
[18:54:07.209]      <block atomic="false" info="">
[18:54:07.209]        WriteAP(0x00, 0x190008);
[18:54:07.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:07.211]        WriteAP(0xF0, 0x01);
[18:54:07.215]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:07.215]      </block>
[18:54:07.215]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:07.216]    </control>
[18:54:07.216]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:54:07.216]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:07.216]        // =>  FALSE
[18:54:07.216]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:07.216]    </control>
[18:54:07.216]    <block atomic="false" info="">
[18:54:07.216]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:07.220]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:54:07.220]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:54:07.220]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:07.227]      __ap = 0; //lets make sure we reset the access point selection
[18:54:07.227]        // -> [__ap <= 0x00000000]
[18:54:07.227]    </block>
[18:54:07.227]  </sequence>
[18:54:07.228]  
[18:54:07.252]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:54:07.252]  
[18:54:07.252]  <debugvars>
[18:54:07.252]    // Pre-defined
[18:54:07.252]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:07.252]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:07.252]    __dp=0x00000000
[18:54:07.252]    __ap=0x00000000
[18:54:07.252]    __traceout=0x00000000      (Trace Disabled)
[18:54:07.252]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:07.252]    __FlashAddr=0x00000000
[18:54:07.252]    __FlashLen=0x00000000
[18:54:07.252]    __FlashArg=0x00000000
[18:54:07.252]    __FlashOp=0x00000000
[18:54:07.252]    __Result=0x00000000
[18:54:07.252]  </debugvars>
[18:54:07.252]  
[18:54:07.252]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:54:07.252]    <block atomic="false" info="">
[18:54:07.252]      __var deviceID = 0;
[18:54:07.252]        // -> [deviceID <= 0x00000000]
[18:54:07.252]      __var version = 0;
[18:54:07.252]        // -> [version <= 0x00000000]
[18:54:07.252]      __var partNum = 0;
[18:54:07.253]        // -> [partNum <= 0x00000000]
[18:54:07.253]      __var manuf = 0;
[18:54:07.253]        // -> [manuf <= 0x00000000]
[18:54:07.253]      __var isMSPM0G1X0X_G3X0X = 0;
[18:54:07.253]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:54:07.253]      __var isProduction = 0;
[18:54:07.253]        // -> [isProduction <= 0x00000000]
[18:54:07.253]      __var continueId = 0;
[18:54:07.253]        // -> [continueId <= 0x00000000]
[18:54:07.253]      deviceID =   Read32(0x41C40004);
[18:54:07.266]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:54:07.266]        // -> [deviceID <= 0x2BB8802F]
[18:54:07.266]      version = deviceID >> 28;
[18:54:07.266]        // -> [version <= 0x00000002]
[18:54:07.266]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:54:07.266]        // -> [partNum <= 0x0000BB88]
[18:54:07.266]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:54:07.266]        // -> [manuf <= 0x00000017]
[18:54:07.266]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:54:07.266]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:54:07.266]      isProduction = (version > 0);
[18:54:07.266]        // -> [isProduction <= 0x00000001]
[18:54:07.266]    </block>
[18:54:07.266]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:54:07.266]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:54:07.266]        // =>  FALSE
[18:54:07.266]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:54:07.266]    </control>
[18:54:07.268]    <control if="continueId == 4" while="" timeout="0" info="">
[18:54:07.268]      // if-block "continueId == 4"
[18:54:07.268]        // =>  FALSE
[18:54:07.268]      // skip if-block "continueId == 4"
[18:54:07.268]    </control>
[18:54:07.268]    <control if="!isProduction" while="" timeout="0" info="">
[18:54:07.268]      // if-block "!isProduction"
[18:54:07.268]        // =>  FALSE
[18:54:07.268]      // skip if-block "!isProduction"
[18:54:07.268]    </control>
[18:54:07.268]  </sequence>
[18:54:07.268]  
[18:54:25.326]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:54:25.326]  
[18:54:25.327]  <debugvars>
[18:54:25.327]    // Pre-defined
[18:54:25.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:25.327]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:25.327]    __dp=0x00000000
[18:54:25.327]    __ap=0x00000000
[18:54:25.327]    __traceout=0x00000000      (Trace Disabled)
[18:54:25.327]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:25.327]    __FlashAddr=0x00000000
[18:54:25.327]    __FlashLen=0x00000000
[18:54:25.327]    __FlashArg=0x00000000
[18:54:25.328]    __FlashOp=0x00000000
[18:54:25.328]    __Result=0x00000000
[18:54:25.328]  </debugvars>
[18:54:25.328]  
[18:54:25.328]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:54:25.328]    <block atomic="false" info="">
[18:54:25.328]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:54:25.328]        // -> [isSWJ <= 0x00000001]
[18:54:25.328]      __var hasDormant = __protocol & 0x00020000;
[18:54:25.328]        // -> [hasDormant <= 0x00000000]
[18:54:25.328]      __var protType   = __protocol & 0x0000FFFF;
[18:54:25.328]        // -> [protType <= 0x00000002]
[18:54:25.328]    </block>
[18:54:25.328]    <control if="protType == 1" while="" timeout="0" info="">
[18:54:25.328]      // if-block "protType == 1"
[18:54:25.328]        // =>  FALSE
[18:54:25.328]      // skip if-block "protType == 1"
[18:54:25.328]    </control>
[18:54:25.329]    <control if="protType == 2" while="" timeout="0" info="">
[18:54:25.329]      // if-block "protType == 2"
[18:54:25.329]        // =>  TRUE
[18:54:25.329]      <control if="isSWJ" while="" timeout="0" info="">
[18:54:25.329]        // if-block "isSWJ"
[18:54:25.329]          // =>  TRUE
[18:54:25.329]        <control if="hasDormant" while="" timeout="0" info="">
[18:54:25.329]          // if-block "hasDormant"
[18:54:25.329]            // =>  FALSE
[18:54:25.329]          // skip if-block "hasDormant"
[18:54:25.329]        </control>
[18:54:25.329]        <control if="!hasDormant" while="" timeout="0" info="">
[18:54:25.329]          // if-block "!hasDormant"
[18:54:25.329]            // =>  TRUE
[18:54:25.329]          <block atomic="false" info="">
[18:54:25.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:54:25.334]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:25.334]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:54:25.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:54:25.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:54:25.338]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:25.338]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:54:25.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:54:25.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:54:25.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:25.343]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:54:25.346]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:54:25.346]          </block>
[18:54:25.346]          // end if-block "!hasDormant"
[18:54:25.346]        </control>
[18:54:25.346]        // end if-block "isSWJ"
[18:54:25.346]      </control>
[18:54:25.346]      <control if="!isSWJ" while="" timeout="0" info="">
[18:54:25.346]        // if-block "!isSWJ"
[18:54:25.346]          // =>  FALSE
[18:54:25.346]        // skip if-block "!isSWJ"
[18:54:25.346]      </control>
[18:54:25.346]      <block atomic="false" info="">
[18:54:25.347]        ReadDP(0x0);
[18:54:25.350]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:54:25.350]      </block>
[18:54:25.350]      // end if-block "protType == 2"
[18:54:25.350]    </control>
[18:54:25.350]  </sequence>
[18:54:25.350]  
[18:54:25.353]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:54:25.353]  
[18:54:25.353]  <debugvars>
[18:54:25.353]    // Pre-defined
[18:54:25.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:25.353]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:25.353]    __dp=0x00000000
[18:54:25.353]    __ap=0x00000000
[18:54:25.353]    __traceout=0x00000000      (Trace Disabled)
[18:54:25.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:25.353]    __FlashAddr=0x00000000
[18:54:25.353]    __FlashLen=0x00000000
[18:54:25.354]    __FlashArg=0x00000000
[18:54:25.354]    __FlashOp=0x00000000
[18:54:25.354]    __Result=0x00000000
[18:54:25.354]  </debugvars>
[18:54:25.354]  
[18:54:25.354]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:54:25.354]    <block atomic="false" info="">
[18:54:25.354]      __var SW_DP_ABORT       = 0x0;
[18:54:25.354]        // -> [SW_DP_ABORT <= 0x00000000]
[18:54:25.354]      __var DP_CTRL_STAT      = 0x4;
[18:54:25.354]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:54:25.354]      __var DP_SELECT         = 0x8;
[18:54:25.354]        // -> [DP_SELECT <= 0x00000008]
[18:54:25.354]      __var powered_down      = 0;
[18:54:25.354]        // -> [powered_down <= 0x00000000]
[18:54:25.354]      WriteDP(DP_SELECT, 0x00000000);
[18:54:25.358]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:54:25.358]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:54:25.359]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:54:25.359]        // -> [powered_down <= 0x00000001]
[18:54:25.359]    </block>
[18:54:25.360]    <control if="powered_down" while="" timeout="0" info="">
[18:54:25.360]      // if-block "powered_down"
[18:54:25.360]        // =>  TRUE
[18:54:25.360]      <block atomic="false" info="">
[18:54:25.360]        Message(0, "Debug/System power-up request sent");
[18:54:25.360]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:54:25.363]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:54:25.363]      </block>
[18:54:25.363]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:54:25.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:54:25.364]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:54:25.364]        // while-condition  =>  FALSE
[18:54:25.364]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:54:25.364]      </control>
[18:54:25.365]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:54:25.365]        // if-block "(__protocol & 0xFFFF) == 1"
[18:54:25.365]          // =>  FALSE
[18:54:25.365]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:54:25.365]      </control>
[18:54:25.365]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:54:25.365]        // if-block "(__protocol & 0xFFFF) == 2"
[18:54:25.365]          // =>  TRUE
[18:54:25.365]        <block atomic="false" info="">
[18:54:25.365]          Message(0, "executing SWD power up");
[18:54:25.370]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:54:25.373]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:54:25.373]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:54:25.374]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:54:25.374]        </block>
[18:54:25.374]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:54:25.374]      </control>
[18:54:25.375]      // end if-block "powered_down"
[18:54:25.375]    </control>
[18:54:25.375]    <block atomic="false" info="">
[18:54:25.375]      __var DEBUG_PORT_VAL    = 0;
[18:54:25.375]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:54:25.375]      __var ACCESS_POINT_VAL  = 0;
[18:54:25.375]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:54:25.375]      __ap = 1; 
[18:54:25.375]        // -> [__ap <= 0x00000001]
[18:54:25.375]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:54:25.378]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:54:25.378]      __ap = 4;
[18:54:25.379]        // -> [__ap <= 0x00000004]
[18:54:25.379]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:25.385]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:54:25.385]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:54:25.386]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:25.387]    </block>
[18:54:25.387]    <block atomic="false" info="">
[18:54:25.387]      __var nReset = 0x80;
[18:54:25.387]        // -> [nReset <= 0x00000080]
[18:54:25.388]      __var canReadPins = 0;
[18:54:25.388]        // -> [canReadPins <= 0x00000000]
[18:54:25.388]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:54:25.394]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:54:25.394]        // -> [canReadPins <= 0x00000001]
[18:54:25.394]    </block>
[18:54:25.394]    <control if="" while="1" timeout="200" info="">
[18:54:25.394]      // while "1"  (timeout="200")
[18:54:25.394]      // while-condition  =>  TRUE
[18:54:25.394]      // while "1"  (timeout="200")
[18:54:25.394]      // while-condition  =>  TRUE
[18:54:25.394]      // while "1"  (timeout="200")
[18:54:25.394]      // while-condition  =>  TRUE
[18:54:25.394]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.395]      // while "1"  (timeout="200")
[18:54:25.395]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.396]      // while "1"  (timeout="200")
[18:54:25.396]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.397]      // while-condition  =>  TRUE
[18:54:25.397]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.398]      // while-condition  =>  TRUE
[18:54:25.398]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.399]      // while-condition  =>  TRUE
[18:54:25.399]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.400]      // while-condition  =>  TRUE
[18:54:25.400]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.401]      // while-condition  =>  TRUE
[18:54:25.401]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.403]      // while-condition  =>  TRUE
[18:54:25.403]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.404]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.404]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.404]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.404]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.404]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.404]      // while "1"  (timeout="200")
[18:54:25.404]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.405]      // while "1"  (timeout="200")
[18:54:25.405]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.406]      // while "1"  (timeout="200")
[18:54:25.406]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.407]      // while-condition  =>  TRUE
[18:54:25.407]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.408]      // while-condition  =>  TRUE
[18:54:25.408]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.409]      // while-condition  =>  TRUE
[18:54:25.409]      // while "1"  (timeout="200")
[18:54:25.410]      // while-condition  =>  TRUE
[18:54:25.410]      // while "1"  (timeout="200")
[18:54:25.410]      // while  =>  TIMEOUT
[18:54:25.410]      // end while "1"
[18:54:25.410]    </control>
[18:54:25.410]    <control if="canReadPins" while="" timeout="0" info="">
[18:54:25.410]      // if-block "canReadPins"
[18:54:25.410]        // =>  TRUE
[18:54:25.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:54:25.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:54:25.415]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:54:25.415]        // while-condition  =>  FALSE
[18:54:25.415]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:54:25.415]      </control>
[18:54:25.416]      // end if-block "canReadPins"
[18:54:25.416]    </control>
[18:54:25.416]    <control if="!canReadPins" while="" timeout="0" info="">
[18:54:25.416]      // if-block "!canReadPins"
[18:54:25.416]        // =>  FALSE
[18:54:25.416]      // skip if-block "!canReadPins"
[18:54:25.416]    </control>
[18:54:25.416]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:54:25.416]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:25.416]        // =>  TRUE
[18:54:25.416]      <block atomic="false" info="">
[18:54:25.417]        WriteAP(0x00, 0x190008);
[18:54:25.421]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:25.421]        WriteAP(0xF0, 0x01);
[18:54:25.427]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:25.427]      </block>
[18:54:25.427]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:25.428]    </control>
[18:54:25.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:54:25.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:25.428]        // =>  FALSE
[18:54:25.428]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:25.428]    </control>
[18:54:25.428]    <block atomic="false" info="">
[18:54:25.428]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:25.431]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:54:25.431]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:54:25.431]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:25.435]      __ap = 0; //lets make sure we reset the access point selection
[18:54:25.435]        // -> [__ap <= 0x00000000]
[18:54:25.435]    </block>
[18:54:25.435]  </sequence>
[18:54:25.435]  
[18:54:25.457]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:54:25.457]  
[18:54:25.457]  <debugvars>
[18:54:25.457]    // Pre-defined
[18:54:25.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:25.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:25.457]    __dp=0x00000000
[18:54:25.457]    __ap=0x00000000
[18:54:25.457]    __traceout=0x00000000      (Trace Disabled)
[18:54:25.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:25.457]    __FlashAddr=0x00000000
[18:54:25.458]    __FlashLen=0x00000000
[18:54:25.458]    __FlashArg=0x00000000
[18:54:25.458]    __FlashOp=0x00000000
[18:54:25.458]    __Result=0x00000000
[18:54:25.458]  </debugvars>
[18:54:25.458]  
[18:54:25.458]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:54:25.458]    <block atomic="false" info="">
[18:54:25.458]      __var deviceID = 0;
[18:54:25.458]        // -> [deviceID <= 0x00000000]
[18:54:25.458]      __var version = 0;
[18:54:25.458]        // -> [version <= 0x00000000]
[18:54:25.458]      __var partNum = 0;
[18:54:25.458]        // -> [partNum <= 0x00000000]
[18:54:25.458]      __var manuf = 0;
[18:54:25.458]        // -> [manuf <= 0x00000000]
[18:54:25.458]      __var isMSPM0G1X0X_G3X0X = 0;
[18:54:25.458]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:54:25.458]      __var isProduction = 0;
[18:54:25.458]        // -> [isProduction <= 0x00000000]
[18:54:25.458]      __var continueId = 0;
[18:54:25.458]        // -> [continueId <= 0x00000000]
[18:54:25.458]      deviceID =   Read32(0x41C40004);
[18:54:25.468]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:54:25.468]        // -> [deviceID <= 0x2BB8802F]
[18:54:25.468]      version = deviceID >> 28;
[18:54:25.468]        // -> [version <= 0x00000002]
[18:54:25.468]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:54:25.468]        // -> [partNum <= 0x0000BB88]
[18:54:25.468]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:54:25.468]        // -> [manuf <= 0x00000017]
[18:54:25.468]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:54:25.468]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:54:25.468]      isProduction = (version > 0);
[18:54:25.468]        // -> [isProduction <= 0x00000001]
[18:54:25.468]    </block>
[18:54:25.468]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:54:25.468]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:54:25.469]        // =>  FALSE
[18:54:25.469]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:54:25.469]    </control>
[18:54:25.469]    <control if="continueId == 4" while="" timeout="0" info="">
[18:54:25.469]      // if-block "continueId == 4"
[18:54:25.469]        // =>  FALSE
[18:54:25.469]      // skip if-block "continueId == 4"
[18:54:25.469]    </control>
[18:54:25.469]    <control if="!isProduction" while="" timeout="0" info="">
[18:54:25.469]      // if-block "!isProduction"
[18:54:25.469]        // =>  FALSE
[18:54:25.469]      // skip if-block "!isProduction"
[18:54:25.469]    </control>
[18:54:25.469]  </sequence>
[18:54:25.469]  
[18:54:43.901]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:54:43.901]  
[18:54:43.901]  <debugvars>
[18:54:43.902]    // Pre-defined
[18:54:43.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:43.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:43.902]    __dp=0x00000000
[18:54:43.902]    __ap=0x00000000
[18:54:43.902]    __traceout=0x00000000      (Trace Disabled)
[18:54:43.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:43.902]    __FlashAddr=0x00000000
[18:54:43.902]    __FlashLen=0x00000000
[18:54:43.902]    __FlashArg=0x00000000
[18:54:43.902]    __FlashOp=0x00000000
[18:54:43.902]    __Result=0x00000000
[18:54:43.902]  </debugvars>
[18:54:43.902]  
[18:54:43.902]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:54:43.903]    <block atomic="false" info="">
[18:54:43.903]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:54:43.903]        // -> [isSWJ <= 0x00000001]
[18:54:43.903]      __var hasDormant = __protocol & 0x00020000;
[18:54:43.903]        // -> [hasDormant <= 0x00000000]
[18:54:43.903]      __var protType   = __protocol & 0x0000FFFF;
[18:54:43.903]        // -> [protType <= 0x00000002]
[18:54:43.903]    </block>
[18:54:43.903]    <control if="protType == 1" while="" timeout="0" info="">
[18:54:43.903]      // if-block "protType == 1"
[18:54:43.903]        // =>  FALSE
[18:54:43.903]      // skip if-block "protType == 1"
[18:54:43.903]    </control>
[18:54:43.903]    <control if="protType == 2" while="" timeout="0" info="">
[18:54:43.904]      // if-block "protType == 2"
[18:54:43.904]        // =>  TRUE
[18:54:43.904]      <control if="isSWJ" while="" timeout="0" info="">
[18:54:43.904]        // if-block "isSWJ"
[18:54:43.904]          // =>  TRUE
[18:54:43.904]        <control if="hasDormant" while="" timeout="0" info="">
[18:54:43.904]          // if-block "hasDormant"
[18:54:43.904]            // =>  FALSE
[18:54:43.904]          // skip if-block "hasDormant"
[18:54:43.904]        </control>
[18:54:43.904]        <control if="!hasDormant" while="" timeout="0" info="">
[18:54:43.904]          // if-block "!hasDormant"
[18:54:43.904]            // =>  TRUE
[18:54:43.904]          <block atomic="false" info="">
[18:54:43.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:54:43.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:43.909]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:54:43.912]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:54:43.912]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:54:43.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:43.916]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:54:43.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:54:43.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:54:43.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:54:43.921]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:54:43.924]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:54:43.924]          </block>
[18:54:43.924]          // end if-block "!hasDormant"
[18:54:43.924]        </control>
[18:54:43.924]        // end if-block "isSWJ"
[18:54:43.924]      </control>
[18:54:43.924]      <control if="!isSWJ" while="" timeout="0" info="">
[18:54:43.924]        // if-block "!isSWJ"
[18:54:43.924]          // =>  FALSE
[18:54:43.924]        // skip if-block "!isSWJ"
[18:54:43.924]      </control>
[18:54:43.924]      <block atomic="false" info="">
[18:54:43.924]        ReadDP(0x0);
[18:54:43.928]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:54:43.928]      </block>
[18:54:43.928]      // end if-block "protType == 2"
[18:54:43.928]    </control>
[18:54:43.928]  </sequence>
[18:54:43.928]  
[18:54:43.930]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:54:43.930]  
[18:54:43.930]  <debugvars>
[18:54:43.931]    // Pre-defined
[18:54:43.931]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:43.931]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:43.931]    __dp=0x00000000
[18:54:43.932]    __ap=0x00000000
[18:54:43.932]    __traceout=0x00000000      (Trace Disabled)
[18:54:43.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:43.932]    __FlashAddr=0x00000000
[18:54:43.932]    __FlashLen=0x00000000
[18:54:43.933]    __FlashArg=0x00000000
[18:54:43.933]    __FlashOp=0x00000000
[18:54:43.933]    __Result=0x00000000
[18:54:43.933]  </debugvars>
[18:54:43.933]  
[18:54:43.933]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:54:43.933]    <block atomic="false" info="">
[18:54:43.933]      __var SW_DP_ABORT       = 0x0;
[18:54:43.933]        // -> [SW_DP_ABORT <= 0x00000000]
[18:54:43.934]      __var DP_CTRL_STAT      = 0x4;
[18:54:43.934]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:54:43.934]      __var DP_SELECT         = 0x8;
[18:54:43.934]        // -> [DP_SELECT <= 0x00000008]
[18:54:43.934]      __var powered_down      = 0;
[18:54:43.934]        // -> [powered_down <= 0x00000000]
[18:54:43.934]      WriteDP(DP_SELECT, 0x00000000);
[18:54:43.939]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:54:43.939]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:54:43.942]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:54:43.942]        // -> [powered_down <= 0x00000001]
[18:54:43.942]    </block>
[18:54:43.942]    <control if="powered_down" while="" timeout="0" info="">
[18:54:43.942]      // if-block "powered_down"
[18:54:43.942]        // =>  TRUE
[18:54:43.942]      <block atomic="false" info="">
[18:54:43.944]        Message(0, "Debug/System power-up request sent");
[18:54:43.944]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:54:43.946]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:54:43.946]      </block>
[18:54:43.946]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:54:43.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:54:43.950]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:54:43.950]        // while-condition  =>  FALSE
[18:54:43.950]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:54:43.950]      </control>
[18:54:43.951]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:54:43.951]        // if-block "(__protocol & 0xFFFF) == 1"
[18:54:43.951]          // =>  FALSE
[18:54:43.951]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:54:43.951]      </control>
[18:54:43.951]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:54:43.951]        // if-block "(__protocol & 0xFFFF) == 2"
[18:54:43.952]          // =>  TRUE
[18:54:43.952]        <block atomic="false" info="">
[18:54:43.952]          Message(0, "executing SWD power up");
[18:54:43.955]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:54:43.958]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:54:43.958]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:54:43.959]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:54:43.959]        </block>
[18:54:43.959]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:54:43.959]      </control>
[18:54:43.960]      // end if-block "powered_down"
[18:54:43.960]    </control>
[18:54:43.960]    <block atomic="false" info="">
[18:54:43.960]      __var DEBUG_PORT_VAL    = 0;
[18:54:43.960]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:54:43.960]      __var ACCESS_POINT_VAL  = 0;
[18:54:43.960]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:54:43.960]      __ap = 1; 
[18:54:43.960]        // -> [__ap <= 0x00000001]
[18:54:43.961]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:54:43.965]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:54:43.965]      __ap = 4;
[18:54:43.965]        // -> [__ap <= 0x00000004]
[18:54:43.965]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:43.970]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:54:43.970]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:54:43.971]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:43.974]    </block>
[18:54:43.974]    <block atomic="false" info="">
[18:54:43.974]      __var nReset = 0x80;
[18:54:43.974]        // -> [nReset <= 0x00000080]
[18:54:43.974]      __var canReadPins = 0;
[18:54:43.974]        // -> [canReadPins <= 0x00000000]
[18:54:43.974]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:54:43.976]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:54:43.976]        // -> [canReadPins <= 0x00000001]
[18:54:43.976]    </block>
[18:54:43.977]    <control if="" while="1" timeout="200" info="">
[18:54:43.977]      // while "1"  (timeout="200")
[18:54:43.977]      // while-condition  =>  TRUE
[18:54:43.977]      // while "1"  (timeout="200")
[18:54:43.977]      // while-condition  =>  TRUE
[18:54:43.977]      // while "1"  (timeout="200")
[18:54:43.977]      // while-condition  =>  TRUE
[18:54:43.977]      // while "1"  (timeout="200")
[18:54:43.978]      // while-condition  =>  TRUE
[18:54:43.978]      // while "1"  (timeout="200")
[18:54:43.978]      // while-condition  =>  TRUE
[18:54:43.978]      // while "1"  (timeout="200")
[18:54:43.978]      // while-condition  =>  TRUE
[18:54:43.978]      // while "1"  (timeout="200")
[18:54:43.978]      // while-condition  =>  TRUE
[18:54:43.978]      // while "1"  (timeout="200")
[18:54:43.978]      // while-condition  =>  TRUE
[18:54:43.978]      // while "1"  (timeout="200")
[18:54:43.978]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.979]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.979]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.979]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.979]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.979]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.979]      // while-condition  =>  TRUE
[18:54:43.979]      // while "1"  (timeout="200")
[18:54:43.980]      // while-condition  =>  TRUE
[18:54:43.980]      // while "1"  (timeout="200")
[18:54:43.980]      // while-condition  =>  TRUE
[18:54:43.980]      // while "1"  (timeout="200")
[18:54:43.980]      // while-condition  =>  TRUE
[18:54:43.980]      // while "1"  (timeout="200")
[18:54:43.980]      // while-condition  =>  TRUE
[18:54:43.980]      // while "1"  (timeout="200")
[18:54:43.980]      // while-condition  =>  TRUE
[18:54:43.980]      // while "1"  (timeout="200")
[18:54:43.980]      // while-condition  =>  TRUE
[18:54:43.980]      // while "1"  (timeout="200")
[18:54:43.981]      // while-condition  =>  TRUE
[18:54:43.981]      // while "1"  (timeout="200")
[18:54:43.981]      // while-condition  =>  TRUE
[18:54:43.981]      // while "1"  (timeout="200")
[18:54:43.981]      // while-condition  =>  TRUE
[18:54:43.981]      // while "1"  (timeout="200")
[18:54:43.981]      // while-condition  =>  TRUE
[18:54:43.981]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.982]      // while "1"  (timeout="200")
[18:54:43.982]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.984]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.984]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.984]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.984]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.984]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.984]      // while-condition  =>  TRUE
[18:54:43.984]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.985]      // while-condition  =>  TRUE
[18:54:43.985]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.986]      // while-condition  =>  TRUE
[18:54:43.986]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.987]      // while-condition  =>  TRUE
[18:54:43.987]      // while "1"  (timeout="200")
[18:54:43.988]      // while-condition  =>  TRUE
[18:54:43.988]      // while "1"  (timeout="200")
[18:54:43.988]      // while  =>  TIMEOUT
[18:54:43.988]      // end while "1"
[18:54:43.988]    </control>
[18:54:43.988]    <control if="canReadPins" while="" timeout="0" info="">
[18:54:43.988]      // if-block "canReadPins"
[18:54:43.988]        // =>  TRUE
[18:54:43.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:54:43.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:54:43.989]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:54:43.989]        // while-condition  =>  FALSE
[18:54:43.989]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:54:43.989]      </control>
[18:54:43.989]      // end if-block "canReadPins"
[18:54:43.990]    </control>
[18:54:43.990]    <control if="!canReadPins" while="" timeout="0" info="">
[18:54:43.990]      // if-block "!canReadPins"
[18:54:43.990]        // =>  FALSE
[18:54:43.990]      // skip if-block "!canReadPins"
[18:54:43.990]    </control>
[18:54:43.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:54:43.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:43.990]        // =>  TRUE
[18:54:43.990]      <block atomic="false" info="">
[18:54:43.990]        WriteAP(0x00, 0x190008);
[18:54:43.991]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:43.992]        WriteAP(0xF0, 0x01);
[18:54:43.995]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:54:43.995]      </block>
[18:54:43.995]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:54:43.995]    </control>
[18:54:43.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:54:43.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:43.996]        // =>  FALSE
[18:54:43.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:54:43.996]    </control>
[18:54:43.997]    <block atomic="false" info="">
[18:54:43.997]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:54:44.004]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:54:44.005]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:54:44.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:54:44.006]      __ap = 0; //lets make sure we reset the access point selection
[18:54:44.006]        // -> [__ap <= 0x00000000]
[18:54:44.006]    </block>
[18:54:44.006]  </sequence>
[18:54:44.006]  
[18:54:44.043]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:54:44.043]  
[18:54:44.043]  <debugvars>
[18:54:44.043]    // Pre-defined
[18:54:44.043]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:54:44.043]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:54:44.043]    __dp=0x00000000
[18:54:44.043]    __ap=0x00000000
[18:54:44.043]    __traceout=0x00000000      (Trace Disabled)
[18:54:44.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:54:44.043]    __FlashAddr=0x00000000
[18:54:44.043]    __FlashLen=0x00000000
[18:54:44.043]    __FlashArg=0x00000000
[18:54:44.043]    __FlashOp=0x00000000
[18:54:44.043]    __Result=0x00000000
[18:54:44.044]  </debugvars>
[18:54:44.044]  
[18:54:44.044]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:54:44.044]    <block atomic="false" info="">
[18:54:44.044]      __var deviceID = 0;
[18:54:44.044]        // -> [deviceID <= 0x00000000]
[18:54:44.044]      __var version = 0;
[18:54:44.044]        // -> [version <= 0x00000000]
[18:54:44.044]      __var partNum = 0;
[18:54:44.044]        // -> [partNum <= 0x00000000]
[18:54:44.045]      __var manuf = 0;
[18:54:44.045]        // -> [manuf <= 0x00000000]
[18:54:44.045]      __var isMSPM0G1X0X_G3X0X = 0;
[18:54:44.045]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:54:44.045]      __var isProduction = 0;
[18:54:44.045]        // -> [isProduction <= 0x00000000]
[18:54:44.045]      __var continueId = 0;
[18:54:44.045]        // -> [continueId <= 0x00000000]
[18:54:44.045]      deviceID =   Read32(0x41C40004);
[18:54:44.051]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:54:44.051]        // -> [deviceID <= 0x2BB8802F]
[18:54:44.051]      version = deviceID >> 28;
[18:54:44.051]        // -> [version <= 0x00000002]
[18:54:44.051]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:54:44.051]        // -> [partNum <= 0x0000BB88]
[18:54:44.051]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:54:44.051]        // -> [manuf <= 0x00000017]
[18:54:44.051]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:54:44.051]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:54:44.051]      isProduction = (version > 0);
[18:54:44.051]        // -> [isProduction <= 0x00000001]
[18:54:44.051]    </block>
[18:54:44.051]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:54:44.051]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:54:44.051]        // =>  FALSE
[18:54:44.051]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:54:44.051]    </control>
[18:54:44.051]    <control if="continueId == 4" while="" timeout="0" info="">
[18:54:44.051]      // if-block "continueId == 4"
[18:54:44.051]        // =>  FALSE
[18:54:44.051]      // skip if-block "continueId == 4"
[18:54:44.051]    </control>
[18:54:44.051]    <control if="!isProduction" while="" timeout="0" info="">
[18:54:44.052]      // if-block "!isProduction"
[18:54:44.052]        // =>  FALSE
[18:54:44.052]      // skip if-block "!isProduction"
[18:54:44.052]    </control>
[18:54:44.052]  </sequence>
[18:54:44.052]  
[18:55:09.254]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:55:09.254]  
[18:55:09.255]  <debugvars>
[18:55:09.255]    // Pre-defined
[18:55:09.255]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:09.255]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:09.255]    __dp=0x00000000
[18:55:09.255]    __ap=0x00000000
[18:55:09.256]    __traceout=0x00000000      (Trace Disabled)
[18:55:09.257]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:09.257]    __FlashAddr=0x00000000
[18:55:09.257]    __FlashLen=0x00000000
[18:55:09.257]    __FlashArg=0x00000000
[18:55:09.257]    __FlashOp=0x00000000
[18:55:09.257]    __Result=0x00000000
[18:55:09.257]  </debugvars>
[18:55:09.257]  
[18:55:09.257]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:55:09.257]    <block atomic="false" info="">
[18:55:09.257]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:55:09.257]        // -> [isSWJ <= 0x00000001]
[18:55:09.257]      __var hasDormant = __protocol & 0x00020000;
[18:55:09.257]        // -> [hasDormant <= 0x00000000]
[18:55:09.258]      __var protType   = __protocol & 0x0000FFFF;
[18:55:09.258]        // -> [protType <= 0x00000002]
[18:55:09.258]    </block>
[18:55:09.259]    <control if="protType == 1" while="" timeout="0" info="">
[18:55:09.259]      // if-block "protType == 1"
[18:55:09.259]        // =>  FALSE
[18:55:09.259]      // skip if-block "protType == 1"
[18:55:09.259]    </control>
[18:55:09.259]    <control if="protType == 2" while="" timeout="0" info="">
[18:55:09.260]      // if-block "protType == 2"
[18:55:09.260]        // =>  TRUE
[18:55:09.260]      <control if="isSWJ" while="" timeout="0" info="">
[18:55:09.260]        // if-block "isSWJ"
[18:55:09.260]          // =>  TRUE
[18:55:09.260]        <control if="hasDormant" while="" timeout="0" info="">
[18:55:09.260]          // if-block "hasDormant"
[18:55:09.260]            // =>  FALSE
[18:55:09.260]          // skip if-block "hasDormant"
[18:55:09.260]        </control>
[18:55:09.260]        <control if="!hasDormant" while="" timeout="0" info="">
[18:55:09.260]          // if-block "!hasDormant"
[18:55:09.261]            // =>  TRUE
[18:55:09.261]          <block atomic="false" info="">
[18:55:09.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:55:09.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:09.262]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:55:09.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:55:09.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:55:09.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:09.267]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:55:09.270]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:55:09.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:55:09.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:09.273]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:55:09.274]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:55:09.274]          </block>
[18:55:09.274]          // end if-block "!hasDormant"
[18:55:09.274]        </control>
[18:55:09.274]        // end if-block "isSWJ"
[18:55:09.274]      </control>
[18:55:09.274]      <control if="!isSWJ" while="" timeout="0" info="">
[18:55:09.275]        // if-block "!isSWJ"
[18:55:09.275]          // =>  FALSE
[18:55:09.275]        // skip if-block "!isSWJ"
[18:55:09.275]      </control>
[18:55:09.275]      <block atomic="false" info="">
[18:55:09.275]        ReadDP(0x0);
[18:55:09.276]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:55:09.276]      </block>
[18:55:09.276]      // end if-block "protType == 2"
[18:55:09.276]    </control>
[18:55:09.276]  </sequence>
[18:55:09.276]  
[18:55:09.279]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:55:09.279]  
[18:55:09.279]  <debugvars>
[18:55:09.279]    // Pre-defined
[18:55:09.279]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:09.279]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:09.279]    __dp=0x00000000
[18:55:09.279]    __ap=0x00000000
[18:55:09.279]    __traceout=0x00000000      (Trace Disabled)
[18:55:09.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:09.279]    __FlashAddr=0x00000000
[18:55:09.279]    __FlashLen=0x00000000
[18:55:09.279]    __FlashArg=0x00000000
[18:55:09.279]    __FlashOp=0x00000000
[18:55:09.279]    __Result=0x00000000
[18:55:09.280]  </debugvars>
[18:55:09.280]  
[18:55:09.280]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:55:09.280]    <block atomic="false" info="">
[18:55:09.280]      __var SW_DP_ABORT       = 0x0;
[18:55:09.280]        // -> [SW_DP_ABORT <= 0x00000000]
[18:55:09.280]      __var DP_CTRL_STAT      = 0x4;
[18:55:09.280]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:55:09.280]      __var DP_SELECT         = 0x8;
[18:55:09.280]        // -> [DP_SELECT <= 0x00000008]
[18:55:09.280]      __var powered_down      = 0;
[18:55:09.280]        // -> [powered_down <= 0x00000000]
[18:55:09.280]      WriteDP(DP_SELECT, 0x00000000);
[18:55:09.281]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:55:09.282]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:55:09.283]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:55:09.283]        // -> [powered_down <= 0x00000001]
[18:55:09.283]    </block>
[18:55:09.283]    <control if="powered_down" while="" timeout="0" info="">
[18:55:09.283]      // if-block "powered_down"
[18:55:09.283]        // =>  TRUE
[18:55:09.283]      <block atomic="false" info="">
[18:55:09.283]        Message(0, "Debug/System power-up request sent");
[18:55:09.284]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:55:09.286]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:55:09.286]      </block>
[18:55:09.286]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:55:09.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:55:09.294]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:55:09.294]        // while-condition  =>  FALSE
[18:55:09.294]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:55:09.294]      </control>
[18:55:09.294]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:55:09.294]        // if-block "(__protocol & 0xFFFF) == 1"
[18:55:09.294]          // =>  FALSE
[18:55:09.294]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:55:09.294]      </control>
[18:55:09.294]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:55:09.294]        // if-block "(__protocol & 0xFFFF) == 2"
[18:55:09.294]          // =>  TRUE
[18:55:09.294]        <block atomic="false" info="">
[18:55:09.294]          Message(0, "executing SWD power up");
[18:55:09.302]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:55:09.304]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:55:09.304]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:55:09.306]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:55:09.306]        </block>
[18:55:09.306]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:55:09.306]      </control>
[18:55:09.306]      // end if-block "powered_down"
[18:55:09.306]    </control>
[18:55:09.306]    <block atomic="false" info="">
[18:55:09.306]      __var DEBUG_PORT_VAL    = 0;
[18:55:09.306]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:55:09.306]      __var ACCESS_POINT_VAL  = 0;
[18:55:09.306]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:55:09.306]      __ap = 1; 
[18:55:09.306]        // -> [__ap <= 0x00000001]
[18:55:09.306]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:55:09.310]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:55:09.310]      __ap = 4;
[18:55:09.310]        // -> [__ap <= 0x00000004]
[18:55:09.310]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:09.314]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:55:09.314]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:55:09.314]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:09.316]    </block>
[18:55:09.316]    <block atomic="false" info="">
[18:55:09.316]      __var nReset = 0x80;
[18:55:09.316]        // -> [nReset <= 0x00000080]
[18:55:09.316]      __var canReadPins = 0;
[18:55:09.316]        // -> [canReadPins <= 0x00000000]
[18:55:09.316]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:55:09.319]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:55:09.319]        // -> [canReadPins <= 0x00000001]
[18:55:09.319]    </block>
[18:55:09.319]    <control if="" while="1" timeout="200" info="">
[18:55:09.319]      // while "1"  (timeout="200")
[18:55:09.319]      // while-condition  =>  TRUE
[18:55:09.319]      // while "1"  (timeout="200")
[18:55:09.319]      // while-condition  =>  TRUE
[18:55:09.319]      // while "1"  (timeout="200")
[18:55:09.319]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.320]      // while "1"  (timeout="200")
[18:55:09.320]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.321]      // while "1"  (timeout="200")
[18:55:09.321]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.322]      // while "1"  (timeout="200")
[18:55:09.322]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.323]      // while-condition  =>  TRUE
[18:55:09.323]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.324]      // while "1"  (timeout="200")
[18:55:09.324]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.325]      // while "1"  (timeout="200")
[18:55:09.325]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.326]      // while "1"  (timeout="200")
[18:55:09.326]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.327]      // while "1"  (timeout="200")
[18:55:09.327]      // while-condition  =>  TRUE
[18:55:09.328]      // while "1"  (timeout="200")
[18:55:09.328]      // while-condition  =>  TRUE
[18:55:09.328]      // while "1"  (timeout="200")
[18:55:09.328]      // while-condition  =>  TRUE
[18:55:09.328]      // while "1"  (timeout="200")
[18:55:09.328]      // while-condition  =>  TRUE
[18:55:09.328]      // while "1"  (timeout="200")
[18:55:09.328]      // while-condition  =>  TRUE
[18:55:09.328]      // while "1"  (timeout="200")
[18:55:09.328]      // while-condition  =>  TRUE
[18:55:09.328]      // while "1"  (timeout="200")
[18:55:09.328]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.329]      // while-condition  =>  TRUE
[18:55:09.329]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.330]      // while-condition  =>  TRUE
[18:55:09.330]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.331]      // while "1"  (timeout="200")
[18:55:09.331]      // while-condition  =>  TRUE
[18:55:09.332]      // while "1"  (timeout="200")
[18:55:09.332]      // while  =>  TIMEOUT
[18:55:09.332]      // end while "1"
[18:55:09.332]    </control>
[18:55:09.332]    <control if="canReadPins" while="" timeout="0" info="">
[18:55:09.332]      // if-block "canReadPins"
[18:55:09.332]        // =>  TRUE
[18:55:09.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:55:09.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:55:09.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:55:09.333]        // while-condition  =>  FALSE
[18:55:09.333]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:55:09.334]      </control>
[18:55:09.334]      // end if-block "canReadPins"
[18:55:09.334]    </control>
[18:55:09.334]    <control if="!canReadPins" while="" timeout="0" info="">
[18:55:09.334]      // if-block "!canReadPins"
[18:55:09.334]        // =>  FALSE
[18:55:09.334]      // skip if-block "!canReadPins"
[18:55:09.334]    </control>
[18:55:09.334]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:55:09.334]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:09.334]        // =>  TRUE
[18:55:09.334]      <block atomic="false" info="">
[18:55:09.334]        WriteAP(0x00, 0x190008);
[18:55:09.336]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:09.336]        WriteAP(0xF0, 0x01);
[18:55:09.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:09.340]      </block>
[18:55:09.340]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:09.340]    </control>
[18:55:09.340]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:55:09.340]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:09.340]        // =>  FALSE
[18:55:09.340]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:09.340]    </control>
[18:55:09.340]    <block atomic="false" info="">
[18:55:09.340]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:09.346]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:55:09.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:55:09.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:09.347]      __ap = 0; //lets make sure we reset the access point selection
[18:55:09.348]        // -> [__ap <= 0x00000000]
[18:55:09.348]    </block>
[18:55:09.348]  </sequence>
[18:55:09.348]  
[18:55:09.368]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:55:09.368]  
[18:55:09.368]  <debugvars>
[18:55:09.368]    // Pre-defined
[18:55:09.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:09.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:09.369]    __dp=0x00000000
[18:55:09.369]    __ap=0x00000000
[18:55:09.369]    __traceout=0x00000000      (Trace Disabled)
[18:55:09.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:09.369]    __FlashAddr=0x00000000
[18:55:09.369]    __FlashLen=0x00000000
[18:55:09.369]    __FlashArg=0x00000000
[18:55:09.369]    __FlashOp=0x00000000
[18:55:09.369]    __Result=0x00000000
[18:55:09.369]  </debugvars>
[18:55:09.369]  
[18:55:09.370]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:55:09.370]    <block atomic="false" info="">
[18:55:09.371]      __var deviceID = 0;
[18:55:09.371]        // -> [deviceID <= 0x00000000]
[18:55:09.371]      __var version = 0;
[18:55:09.371]        // -> [version <= 0x00000000]
[18:55:09.371]      __var partNum = 0;
[18:55:09.371]        // -> [partNum <= 0x00000000]
[18:55:09.371]      __var manuf = 0;
[18:55:09.371]        // -> [manuf <= 0x00000000]
[18:55:09.371]      __var isMSPM0G1X0X_G3X0X = 0;
[18:55:09.371]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:55:09.371]      __var isProduction = 0;
[18:55:09.371]        // -> [isProduction <= 0x00000000]
[18:55:09.371]      __var continueId = 0;
[18:55:09.371]        // -> [continueId <= 0x00000000]
[18:55:09.371]      deviceID =   Read32(0x41C40004);
[18:55:09.377]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:55:09.377]        // -> [deviceID <= 0x2BB8802F]
[18:55:09.377]      version = deviceID >> 28;
[18:55:09.377]        // -> [version <= 0x00000002]
[18:55:09.377]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:55:09.377]        // -> [partNum <= 0x0000BB88]
[18:55:09.377]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:55:09.377]        // -> [manuf <= 0x00000017]
[18:55:09.378]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:55:09.378]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:55:09.378]      isProduction = (version > 0);
[18:55:09.378]        // -> [isProduction <= 0x00000001]
[18:55:09.378]    </block>
[18:55:09.378]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:55:09.378]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:55:09.378]        // =>  FALSE
[18:55:09.378]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:55:09.378]    </control>
[18:55:09.378]    <control if="continueId == 4" while="" timeout="0" info="">
[18:55:09.378]      // if-block "continueId == 4"
[18:55:09.378]        // =>  FALSE
[18:55:09.378]      // skip if-block "continueId == 4"
[18:55:09.378]    </control>
[18:55:09.378]    <control if="!isProduction" while="" timeout="0" info="">
[18:55:09.378]      // if-block "!isProduction"
[18:55:09.378]        // =>  FALSE
[18:55:09.379]      // skip if-block "!isProduction"
[18:55:09.379]    </control>
[18:55:09.379]  </sequence>
[18:55:09.379]  
[18:55:30.033]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:55:30.033]  
[18:55:30.033]  <debugvars>
[18:55:30.033]    // Pre-defined
[18:55:30.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:30.034]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:30.034]    __dp=0x00000000
[18:55:30.034]    __ap=0x00000000
[18:55:30.034]    __traceout=0x00000000      (Trace Disabled)
[18:55:30.034]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:30.034]    __FlashAddr=0x00000000
[18:55:30.034]    __FlashLen=0x00000000
[18:55:30.034]    __FlashArg=0x00000000
[18:55:30.034]    __FlashOp=0x00000000
[18:55:30.034]    __Result=0x00000000
[18:55:30.034]  </debugvars>
[18:55:30.034]  
[18:55:30.034]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:55:30.034]    <block atomic="false" info="">
[18:55:30.034]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:55:30.034]        // -> [isSWJ <= 0x00000001]
[18:55:30.034]      __var hasDormant = __protocol & 0x00020000;
[18:55:30.035]        // -> [hasDormant <= 0x00000000]
[18:55:30.035]      __var protType   = __protocol & 0x0000FFFF;
[18:55:30.035]        // -> [protType <= 0x00000002]
[18:55:30.035]    </block>
[18:55:30.035]    <control if="protType == 1" while="" timeout="0" info="">
[18:55:30.035]      // if-block "protType == 1"
[18:55:30.035]        // =>  FALSE
[18:55:30.035]      // skip if-block "protType == 1"
[18:55:30.035]    </control>
[18:55:30.035]    <control if="protType == 2" while="" timeout="0" info="">
[18:55:30.035]      // if-block "protType == 2"
[18:55:30.035]        // =>  TRUE
[18:55:30.035]      <control if="isSWJ" while="" timeout="0" info="">
[18:55:30.035]        // if-block "isSWJ"
[18:55:30.035]          // =>  TRUE
[18:55:30.035]        <control if="hasDormant" while="" timeout="0" info="">
[18:55:30.036]          // if-block "hasDormant"
[18:55:30.036]            // =>  FALSE
[18:55:30.036]          // skip if-block "hasDormant"
[18:55:30.036]        </control>
[18:55:30.036]        <control if="!hasDormant" while="" timeout="0" info="">
[18:55:30.036]          // if-block "!hasDormant"
[18:55:30.036]            // =>  TRUE
[18:55:30.036]          <block atomic="false" info="">
[18:55:30.036]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:55:30.037]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:30.038]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:55:30.039]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:55:30.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:55:30.042]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:30.042]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:55:30.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:55:30.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:55:30.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:30.045]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:55:30.047]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:55:30.047]          </block>
[18:55:30.047]          // end if-block "!hasDormant"
[18:55:30.047]        </control>
[18:55:30.047]        // end if-block "isSWJ"
[18:55:30.047]      </control>
[18:55:30.047]      <control if="!isSWJ" while="" timeout="0" info="">
[18:55:30.047]        // if-block "!isSWJ"
[18:55:30.047]          // =>  FALSE
[18:55:30.047]        // skip if-block "!isSWJ"
[18:55:30.047]      </control>
[18:55:30.047]      <block atomic="false" info="">
[18:55:30.047]        ReadDP(0x0);
[18:55:30.048]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:55:30.049]      </block>
[18:55:30.049]      // end if-block "protType == 2"
[18:55:30.049]    </control>
[18:55:30.049]  </sequence>
[18:55:30.049]  
[18:55:30.051]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:55:30.051]  
[18:55:30.051]  <debugvars>
[18:55:30.051]    // Pre-defined
[18:55:30.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:30.051]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:30.051]    __dp=0x00000000
[18:55:30.051]    __ap=0x00000000
[18:55:30.051]    __traceout=0x00000000      (Trace Disabled)
[18:55:30.052]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:30.052]    __FlashAddr=0x00000000
[18:55:30.052]    __FlashLen=0x00000000
[18:55:30.052]    __FlashArg=0x00000000
[18:55:30.052]    __FlashOp=0x00000000
[18:55:30.052]    __Result=0x00000000
[18:55:30.052]  </debugvars>
[18:55:30.052]  
[18:55:30.052]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:55:30.052]    <block atomic="false" info="">
[18:55:30.052]      __var SW_DP_ABORT       = 0x0;
[18:55:30.052]        // -> [SW_DP_ABORT <= 0x00000000]
[18:55:30.052]      __var DP_CTRL_STAT      = 0x4;
[18:55:30.052]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:55:30.052]      __var DP_SELECT         = 0x8;
[18:55:30.052]        // -> [DP_SELECT <= 0x00000008]
[18:55:30.052]      __var powered_down      = 0;
[18:55:30.052]        // -> [powered_down <= 0x00000000]
[18:55:30.052]      WriteDP(DP_SELECT, 0x00000000);
[18:55:30.054]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:55:30.054]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:55:30.055]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:55:30.055]        // -> [powered_down <= 0x00000001]
[18:55:30.055]    </block>
[18:55:30.055]    <control if="powered_down" while="" timeout="0" info="">
[18:55:30.055]      // if-block "powered_down"
[18:55:30.056]        // =>  TRUE
[18:55:30.056]      <block atomic="false" info="">
[18:55:30.056]        Message(0, "Debug/System power-up request sent");
[18:55:30.056]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:55:30.058]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:55:30.058]      </block>
[18:55:30.058]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:55:30.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:55:30.061]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:55:30.061]        // while-condition  =>  FALSE
[18:55:30.061]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:55:30.061]      </control>
[18:55:30.061]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:55:30.061]        // if-block "(__protocol & 0xFFFF) == 1"
[18:55:30.061]          // =>  FALSE
[18:55:30.061]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:55:30.061]      </control>
[18:55:30.061]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:55:30.061]        // if-block "(__protocol & 0xFFFF) == 2"
[18:55:30.061]          // =>  TRUE
[18:55:30.061]        <block atomic="false" info="">
[18:55:30.061]          Message(0, "executing SWD power up");
[18:55:30.069]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:55:30.070]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:55:30.070]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:55:30.072]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:55:30.072]        </block>
[18:55:30.072]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:55:30.072]      </control>
[18:55:30.072]      // end if-block "powered_down"
[18:55:30.072]    </control>
[18:55:30.072]    <block atomic="false" info="">
[18:55:30.072]      __var DEBUG_PORT_VAL    = 0;
[18:55:30.072]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:55:30.072]      __var ACCESS_POINT_VAL  = 0;
[18:55:30.072]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:55:30.072]      __ap = 1; 
[18:55:30.072]        // -> [__ap <= 0x00000001]
[18:55:30.072]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:55:30.076]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:55:30.076]      __ap = 4;
[18:55:30.076]        // -> [__ap <= 0x00000004]
[18:55:30.077]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:30.085]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:55:30.085]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:55:30.085]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:30.087]    </block>
[18:55:30.087]    <block atomic="false" info="">
[18:55:30.087]      __var nReset = 0x80;
[18:55:30.088]        // -> [nReset <= 0x00000080]
[18:55:30.088]      __var canReadPins = 0;
[18:55:30.088]        // -> [canReadPins <= 0x00000000]
[18:55:30.088]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:55:30.090]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:55:30.090]        // -> [canReadPins <= 0x00000001]
[18:55:30.090]    </block>
[18:55:30.090]    <control if="" while="1" timeout="200" info="">
[18:55:30.090]      // while "1"  (timeout="200")
[18:55:30.090]      // while-condition  =>  TRUE
[18:55:30.090]      // while "1"  (timeout="200")
[18:55:30.090]      // while-condition  =>  TRUE
[18:55:30.090]      // while "1"  (timeout="200")
[18:55:30.090]      // while-condition  =>  TRUE
[18:55:30.090]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.091]      // while-condition  =>  TRUE
[18:55:30.091]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.092]      // while "1"  (timeout="200")
[18:55:30.092]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.093]      // while-condition  =>  TRUE
[18:55:30.093]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.094]      // while-condition  =>  TRUE
[18:55:30.094]      // while "1"  (timeout="200")
[18:55:30.095]      // while-condition  =>  TRUE
[18:55:30.095]      // while "1"  (timeout="200")
[18:55:30.095]      // while-condition  =>  TRUE
[18:55:30.095]      // while "1"  (timeout="200")
[18:55:30.095]      // while-condition  =>  TRUE
[18:55:30.095]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.096]      // while-condition  =>  TRUE
[18:55:30.096]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.097]      // while "1"  (timeout="200")
[18:55:30.097]      // while-condition  =>  TRUE
[18:55:30.098]      // while "1"  (timeout="200")
[18:55:30.098]      // while  =>  TIMEOUT
[18:55:30.098]      // end while "1"
[18:55:30.098]    </control>
[18:55:30.098]    <control if="canReadPins" while="" timeout="0" info="">
[18:55:30.098]      // if-block "canReadPins"
[18:55:30.098]        // =>  TRUE
[18:55:30.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:55:30.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:55:30.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:55:30.099]        // while-condition  =>  FALSE
[18:55:30.100]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:55:30.100]      </control>
[18:55:30.100]      // end if-block "canReadPins"
[18:55:30.100]    </control>
[18:55:30.100]    <control if="!canReadPins" while="" timeout="0" info="">
[18:55:30.100]      // if-block "!canReadPins"
[18:55:30.100]        // =>  FALSE
[18:55:30.100]      // skip if-block "!canReadPins"
[18:55:30.100]    </control>
[18:55:30.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:55:30.100]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:30.100]        // =>  TRUE
[18:55:30.100]      <block atomic="false" info="">
[18:55:30.100]        WriteAP(0x00, 0x190008);
[18:55:30.102]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:30.102]        WriteAP(0xF0, 0x01);
[18:55:30.106]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:30.106]      </block>
[18:55:30.106]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:30.106]    </control>
[18:55:30.106]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:55:30.106]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:30.106]        // =>  FALSE
[18:55:30.106]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:30.106]    </control>
[18:55:30.106]    <block atomic="false" info="">
[18:55:30.107]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:30.109]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:55:30.110]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:55:30.110]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:30.114]      __ap = 0; //lets make sure we reset the access point selection
[18:55:30.114]        // -> [__ap <= 0x00000000]
[18:55:30.114]    </block>
[18:55:30.114]  </sequence>
[18:55:30.114]  
[18:55:30.136]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:55:30.136]  
[18:55:30.137]  <debugvars>
[18:55:30.137]    // Pre-defined
[18:55:30.137]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:30.137]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:30.137]    __dp=0x00000000
[18:55:30.137]    __ap=0x00000000
[18:55:30.137]    __traceout=0x00000000      (Trace Disabled)
[18:55:30.137]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:30.137]    __FlashAddr=0x00000000
[18:55:30.137]    __FlashLen=0x00000000
[18:55:30.137]    __FlashArg=0x00000000
[18:55:30.137]    __FlashOp=0x00000000
[18:55:30.137]    __Result=0x00000000
[18:55:30.137]  </debugvars>
[18:55:30.137]  
[18:55:30.137]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:55:30.137]    <block atomic="false" info="">
[18:55:30.137]      __var deviceID = 0;
[18:55:30.137]        // -> [deviceID <= 0x00000000]
[18:55:30.137]      __var version = 0;
[18:55:30.137]        // -> [version <= 0x00000000]
[18:55:30.137]      __var partNum = 0;
[18:55:30.137]        // -> [partNum <= 0x00000000]
[18:55:30.137]      __var manuf = 0;
[18:55:30.138]        // -> [manuf <= 0x00000000]
[18:55:30.138]      __var isMSPM0G1X0X_G3X0X = 0;
[18:55:30.138]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:55:30.138]      __var isProduction = 0;
[18:55:30.138]        // -> [isProduction <= 0x00000000]
[18:55:30.138]      __var continueId = 0;
[18:55:30.138]        // -> [continueId <= 0x00000000]
[18:55:30.138]      deviceID =   Read32(0x41C40004);
[18:55:30.143]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:55:30.143]        // -> [deviceID <= 0x2BB8802F]
[18:55:30.143]      version = deviceID >> 28;
[18:55:30.143]        // -> [version <= 0x00000002]
[18:55:30.143]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:55:30.143]        // -> [partNum <= 0x0000BB88]
[18:55:30.143]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:55:30.143]        // -> [manuf <= 0x00000017]
[18:55:30.143]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:55:30.143]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:55:30.144]      isProduction = (version > 0);
[18:55:30.144]        // -> [isProduction <= 0x00000001]
[18:55:30.144]    </block>
[18:55:30.144]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:55:30.144]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:55:30.144]        // =>  FALSE
[18:55:30.144]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:55:30.144]    </control>
[18:55:30.144]    <control if="continueId == 4" while="" timeout="0" info="">
[18:55:30.144]      // if-block "continueId == 4"
[18:55:30.144]        // =>  FALSE
[18:55:30.144]      // skip if-block "continueId == 4"
[18:55:30.144]    </control>
[18:55:30.144]    <control if="!isProduction" while="" timeout="0" info="">
[18:55:30.144]      // if-block "!isProduction"
[18:55:30.144]        // =>  FALSE
[18:55:30.144]      // skip if-block "!isProduction"
[18:55:30.144]    </control>
[18:55:30.144]  </sequence>
[18:55:30.144]  
[18:55:48.178]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:55:48.178]  
[18:55:48.178]  <debugvars>
[18:55:48.178]    // Pre-defined
[18:55:48.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:48.178]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:48.178]    __dp=0x00000000
[18:55:48.178]    __ap=0x00000000
[18:55:48.180]    __traceout=0x00000000      (Trace Disabled)
[18:55:48.180]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:48.180]    __FlashAddr=0x00000000
[18:55:48.180]    __FlashLen=0x00000000
[18:55:48.180]    __FlashArg=0x00000000
[18:55:48.180]    __FlashOp=0x00000000
[18:55:48.180]    __Result=0x00000000
[18:55:48.180]  </debugvars>
[18:55:48.180]  
[18:55:48.180]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:55:48.181]    <block atomic="false" info="">
[18:55:48.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:55:48.181]        // -> [isSWJ <= 0x00000001]
[18:55:48.181]      __var hasDormant = __protocol & 0x00020000;
[18:55:48.181]        // -> [hasDormant <= 0x00000000]
[18:55:48.181]      __var protType   = __protocol & 0x0000FFFF;
[18:55:48.182]        // -> [protType <= 0x00000002]
[18:55:48.182]    </block>
[18:55:48.182]    <control if="protType == 1" while="" timeout="0" info="">
[18:55:48.182]      // if-block "protType == 1"
[18:55:48.182]        // =>  FALSE
[18:55:48.182]      // skip if-block "protType == 1"
[18:55:48.183]    </control>
[18:55:48.183]    <control if="protType == 2" while="" timeout="0" info="">
[18:55:48.183]      // if-block "protType == 2"
[18:55:48.184]        // =>  TRUE
[18:55:48.184]      <control if="isSWJ" while="" timeout="0" info="">
[18:55:48.184]        // if-block "isSWJ"
[18:55:48.184]          // =>  TRUE
[18:55:48.184]        <control if="hasDormant" while="" timeout="0" info="">
[18:55:48.184]          // if-block "hasDormant"
[18:55:48.185]            // =>  FALSE
[18:55:48.185]          // skip if-block "hasDormant"
[18:55:48.185]        </control>
[18:55:48.185]        <control if="!hasDormant" while="" timeout="0" info="">
[18:55:48.185]          // if-block "!hasDormant"
[18:55:48.185]            // =>  TRUE
[18:55:48.185]          <block atomic="false" info="">
[18:55:48.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:55:48.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:48.188]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:55:48.189]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:55:48.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:55:48.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:48.191]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:55:48.192]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:55:48.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:55:48.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:55:48.194]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:55:48.196]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:55:48.196]          </block>
[18:55:48.196]          // end if-block "!hasDormant"
[18:55:48.196]        </control>
[18:55:48.196]        // end if-block "isSWJ"
[18:55:48.196]      </control>
[18:55:48.196]      <control if="!isSWJ" while="" timeout="0" info="">
[18:55:48.196]        // if-block "!isSWJ"
[18:55:48.196]          // =>  FALSE
[18:55:48.196]        // skip if-block "!isSWJ"
[18:55:48.197]      </control>
[18:55:48.197]      <block atomic="false" info="">
[18:55:48.197]        ReadDP(0x0);
[18:55:48.200]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:55:48.200]      </block>
[18:55:48.200]      // end if-block "protType == 2"
[18:55:48.200]    </control>
[18:55:48.200]  </sequence>
[18:55:48.200]  
[18:55:48.205]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:55:48.205]  
[18:55:48.205]  <debugvars>
[18:55:48.205]    // Pre-defined
[18:55:48.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:48.205]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:48.205]    __dp=0x00000000
[18:55:48.205]    __ap=0x00000000
[18:55:48.205]    __traceout=0x00000000      (Trace Disabled)
[18:55:48.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:48.205]    __FlashAddr=0x00000000
[18:55:48.205]    __FlashLen=0x00000000
[18:55:48.205]    __FlashArg=0x00000000
[18:55:48.206]    __FlashOp=0x00000000
[18:55:48.206]    __Result=0x00000000
[18:55:48.206]  </debugvars>
[18:55:48.206]  
[18:55:48.206]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:55:48.206]    <block atomic="false" info="">
[18:55:48.206]      __var SW_DP_ABORT       = 0x0;
[18:55:48.206]        // -> [SW_DP_ABORT <= 0x00000000]
[18:55:48.206]      __var DP_CTRL_STAT      = 0x4;
[18:55:48.207]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:55:48.207]      __var DP_SELECT         = 0x8;
[18:55:48.207]        // -> [DP_SELECT <= 0x00000008]
[18:55:48.207]      __var powered_down      = 0;
[18:55:48.207]        // -> [powered_down <= 0x00000000]
[18:55:48.207]      WriteDP(DP_SELECT, 0x00000000);
[18:55:48.214]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:55:48.214]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:55:48.220]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:55:48.220]        // -> [powered_down <= 0x00000001]
[18:55:48.220]    </block>
[18:55:48.220]    <control if="powered_down" while="" timeout="0" info="">
[18:55:48.220]      // if-block "powered_down"
[18:55:48.220]        // =>  TRUE
[18:55:48.220]      <block atomic="false" info="">
[18:55:48.220]        Message(0, "Debug/System power-up request sent");
[18:55:48.220]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:55:48.222]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:55:48.222]      </block>
[18:55:48.222]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:55:48.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:55:48.223]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:55:48.224]        // while-condition  =>  FALSE
[18:55:48.224]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:55:48.224]      </control>
[18:55:48.224]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:55:48.224]        // if-block "(__protocol & 0xFFFF) == 1"
[18:55:48.224]          // =>  FALSE
[18:55:48.224]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:55:48.224]      </control>
[18:55:48.224]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:55:48.224]        // if-block "(__protocol & 0xFFFF) == 2"
[18:55:48.224]          // =>  TRUE
[18:55:48.224]        <block atomic="false" info="">
[18:55:48.224]          Message(0, "executing SWD power up");
[18:55:48.232]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:55:48.234]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:55:48.234]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:55:48.236]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:55:48.236]        </block>
[18:55:48.236]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:55:48.236]      </control>
[18:55:48.237]      // end if-block "powered_down"
[18:55:48.237]    </control>
[18:55:48.237]    <block atomic="false" info="">
[18:55:48.237]      __var DEBUG_PORT_VAL    = 0;
[18:55:48.237]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:55:48.237]      __var ACCESS_POINT_VAL  = 0;
[18:55:48.237]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:55:48.237]      __ap = 1; 
[18:55:48.237]        // -> [__ap <= 0x00000001]
[18:55:48.237]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:55:48.242]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:55:48.243]      __ap = 4;
[18:55:48.243]        // -> [__ap <= 0x00000004]
[18:55:48.243]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:48.252]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:55:48.252]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:55:48.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:48.255]    </block>
[18:55:48.255]    <block atomic="false" info="">
[18:55:48.255]      __var nReset = 0x80;
[18:55:48.255]        // -> [nReset <= 0x00000080]
[18:55:48.255]      __var canReadPins = 0;
[18:55:48.255]        // -> [canReadPins <= 0x00000000]
[18:55:48.255]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:55:48.259]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:55:48.259]        // -> [canReadPins <= 0x00000001]
[18:55:48.259]    </block>
[18:55:48.259]    <control if="" while="1" timeout="200" info="">
[18:55:48.260]      // while "1"  (timeout="200")
[18:55:48.260]      // while-condition  =>  TRUE
[18:55:48.260]      // while "1"  (timeout="200")
[18:55:48.260]      // while-condition  =>  TRUE
[18:55:48.260]      // while "1"  (timeout="200")
[18:55:48.260]      // while-condition  =>  TRUE
[18:55:48.261]      // while "1"  (timeout="200")
[18:55:48.261]      // while-condition  =>  TRUE
[18:55:48.261]      // while "1"  (timeout="200")
[18:55:48.261]      // while-condition  =>  TRUE
[18:55:48.261]      // while "1"  (timeout="200")
[18:55:48.261]      // while-condition  =>  TRUE
[18:55:48.261]      // while "1"  (timeout="200")
[18:55:48.261]      // while-condition  =>  TRUE
[18:55:48.262]      // while "1"  (timeout="200")
[18:55:48.262]      // while-condition  =>  TRUE
[18:55:48.262]      // while "1"  (timeout="200")
[18:55:48.262]      // while-condition  =>  TRUE
[18:55:48.262]      // while "1"  (timeout="200")
[18:55:48.262]      // while-condition  =>  TRUE
[18:55:48.262]      // while "1"  (timeout="200")
[18:55:48.263]      // while-condition  =>  TRUE
[18:55:48.263]      // while "1"  (timeout="200")
[18:55:48.263]      // while-condition  =>  TRUE
[18:55:48.263]      // while "1"  (timeout="200")
[18:55:48.263]      // while-condition  =>  TRUE
[18:55:48.263]      // while "1"  (timeout="200")
[18:55:48.263]      // while-condition  =>  TRUE
[18:55:48.263]      // while "1"  (timeout="200")
[18:55:48.263]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.264]      // while "1"  (timeout="200")
[18:55:48.264]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.265]      // while-condition  =>  TRUE
[18:55:48.265]      // while "1"  (timeout="200")
[18:55:48.266]      // while-condition  =>  TRUE
[18:55:48.266]      // while "1"  (timeout="200")
[18:55:48.266]      // while-condition  =>  TRUE
[18:55:48.266]      // while "1"  (timeout="200")
[18:55:48.266]      // while-condition  =>  TRUE
[18:55:48.266]      // while "1"  (timeout="200")
[18:55:48.266]      // while-condition  =>  TRUE
[18:55:48.266]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.267]      // while "1"  (timeout="200")
[18:55:48.267]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.268]      // while "1"  (timeout="200")
[18:55:48.268]      // while-condition  =>  TRUE
[18:55:48.269]      // while "1"  (timeout="200")
[18:55:48.269]      // while  =>  TIMEOUT
[18:55:48.269]      // end while "1"
[18:55:48.269]    </control>
[18:55:48.269]    <control if="canReadPins" while="" timeout="0" info="">
[18:55:48.269]      // if-block "canReadPins"
[18:55:48.269]        // =>  TRUE
[18:55:48.269]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:55:48.269]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:55:48.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:55:48.271]        // while-condition  =>  FALSE
[18:55:48.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:55:48.271]      </control>
[18:55:48.271]      // end if-block "canReadPins"
[18:55:48.271]    </control>
[18:55:48.271]    <control if="!canReadPins" while="" timeout="0" info="">
[18:55:48.271]      // if-block "!canReadPins"
[18:55:48.271]        // =>  FALSE
[18:55:48.271]      // skip if-block "!canReadPins"
[18:55:48.271]    </control>
[18:55:48.271]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:55:48.271]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:48.271]        // =>  TRUE
[18:55:48.271]      <block atomic="false" info="">
[18:55:48.271]        WriteAP(0x00, 0x190008);
[18:55:48.275]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:48.275]        WriteAP(0xF0, 0x01);
[18:55:48.278]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:55:48.278]      </block>
[18:55:48.278]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:55:48.278]    </control>
[18:55:48.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:55:48.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:48.278]        // =>  FALSE
[18:55:48.278]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:55:48.279]    </control>
[18:55:48.279]    <block atomic="false" info="">
[18:55:48.279]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:55:48.283]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:55:48.283]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:55:48.283]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:55:48.285]      __ap = 0; //lets make sure we reset the access point selection
[18:55:48.285]        // -> [__ap <= 0x00000000]
[18:55:48.285]    </block>
[18:55:48.286]  </sequence>
[18:55:48.286]  
[18:55:48.301]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:55:48.301]  
[18:55:48.301]  <debugvars>
[18:55:48.301]    // Pre-defined
[18:55:48.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:55:48.303]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:55:48.303]    __dp=0x00000000
[18:55:48.303]    __ap=0x00000000
[18:55:48.303]    __traceout=0x00000000      (Trace Disabled)
[18:55:48.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:55:48.303]    __FlashAddr=0x00000000
[18:55:48.303]    __FlashLen=0x00000000
[18:55:48.303]    __FlashArg=0x00000000
[18:55:48.303]    __FlashOp=0x00000000
[18:55:48.303]    __Result=0x00000000
[18:55:48.303]  </debugvars>
[18:55:48.303]  
[18:55:48.303]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:55:48.303]    <block atomic="false" info="">
[18:55:48.303]      __var deviceID = 0;
[18:55:48.303]        // -> [deviceID <= 0x00000000]
[18:55:48.303]      __var version = 0;
[18:55:48.303]        // -> [version <= 0x00000000]
[18:55:48.303]      __var partNum = 0;
[18:55:48.303]        // -> [partNum <= 0x00000000]
[18:55:48.304]      __var manuf = 0;
[18:55:48.304]        // -> [manuf <= 0x00000000]
[18:55:48.304]      __var isMSPM0G1X0X_G3X0X = 0;
[18:55:48.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:55:48.304]      __var isProduction = 0;
[18:55:48.304]        // -> [isProduction <= 0x00000000]
[18:55:48.304]      __var continueId = 0;
[18:55:48.304]        // -> [continueId <= 0x00000000]
[18:55:48.304]      deviceID =   Read32(0x41C40004);
[18:55:48.311]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:55:48.311]        // -> [deviceID <= 0x2BB8802F]
[18:55:48.311]      version = deviceID >> 28;
[18:55:48.311]        // -> [version <= 0x00000002]
[18:55:48.311]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:55:48.311]        // -> [partNum <= 0x0000BB88]
[18:55:48.311]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:55:48.312]        // -> [manuf <= 0x00000017]
[18:55:48.312]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:55:48.312]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:55:48.312]      isProduction = (version > 0);
[18:55:48.312]        // -> [isProduction <= 0x00000001]
[18:55:48.312]    </block>
[18:55:48.312]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:55:48.312]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:55:48.312]        // =>  FALSE
[18:55:48.312]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:55:48.312]    </control>
[18:55:48.312]    <control if="continueId == 4" while="" timeout="0" info="">
[18:55:48.313]      // if-block "continueId == 4"
[18:55:48.313]        // =>  FALSE
[18:55:48.313]      // skip if-block "continueId == 4"
[18:55:48.313]    </control>
[18:55:48.313]    <control if="!isProduction" while="" timeout="0" info="">
[18:55:48.313]      // if-block "!isProduction"
[18:55:48.313]        // =>  FALSE
[18:55:48.313]      // skip if-block "!isProduction"
[18:55:48.313]    </control>
[18:55:48.313]  </sequence>
[18:55:48.313]  
[18:56:05.173]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:56:05.173]  
[18:56:05.173]  <debugvars>
[18:56:05.173]    // Pre-defined
[18:56:05.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:05.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:05.173]    __dp=0x00000000
[18:56:05.173]    __ap=0x00000000
[18:56:05.174]    __traceout=0x00000000      (Trace Disabled)
[18:56:05.174]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:05.174]    __FlashAddr=0x00000000
[18:56:05.174]    __FlashLen=0x00000000
[18:56:05.174]    __FlashArg=0x00000000
[18:56:05.174]    __FlashOp=0x00000000
[18:56:05.174]    __Result=0x00000000
[18:56:05.174]  </debugvars>
[18:56:05.175]  
[18:56:05.175]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:56:05.175]    <block atomic="false" info="">
[18:56:05.175]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:56:05.175]        // -> [isSWJ <= 0x00000001]
[18:56:05.176]      __var hasDormant = __protocol & 0x00020000;
[18:56:05.176]        // -> [hasDormant <= 0x00000000]
[18:56:05.176]      __var protType   = __protocol & 0x0000FFFF;
[18:56:05.176]        // -> [protType <= 0x00000002]
[18:56:05.176]    </block>
[18:56:05.176]    <control if="protType == 1" while="" timeout="0" info="">
[18:56:05.176]      // if-block "protType == 1"
[18:56:05.176]        // =>  FALSE
[18:56:05.177]      // skip if-block "protType == 1"
[18:56:05.177]    </control>
[18:56:05.177]    <control if="protType == 2" while="" timeout="0" info="">
[18:56:05.177]      // if-block "protType == 2"
[18:56:05.177]        // =>  TRUE
[18:56:05.177]      <control if="isSWJ" while="" timeout="0" info="">
[18:56:05.177]        // if-block "isSWJ"
[18:56:05.177]          // =>  TRUE
[18:56:05.177]        <control if="hasDormant" while="" timeout="0" info="">
[18:56:05.178]          // if-block "hasDormant"
[18:56:05.178]            // =>  FALSE
[18:56:05.178]          // skip if-block "hasDormant"
[18:56:05.178]        </control>
[18:56:05.178]        <control if="!hasDormant" while="" timeout="0" info="">
[18:56:05.179]          // if-block "!hasDormant"
[18:56:05.179]            // =>  TRUE
[18:56:05.179]          <block atomic="false" info="">
[18:56:05.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:56:05.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:05.183]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:56:05.186]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:56:05.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:56:05.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:05.188]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:56:05.190]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:56:05.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:56:05.199]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:05.199]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:56:05.200]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:56:05.200]          </block>
[18:56:05.200]          // end if-block "!hasDormant"
[18:56:05.200]        </control>
[18:56:05.202]        // end if-block "isSWJ"
[18:56:05.202]      </control>
[18:56:05.202]      <control if="!isSWJ" while="" timeout="0" info="">
[18:56:05.202]        // if-block "!isSWJ"
[18:56:05.202]          // =>  FALSE
[18:56:05.202]        // skip if-block "!isSWJ"
[18:56:05.202]      </control>
[18:56:05.202]      <block atomic="false" info="">
[18:56:05.202]        ReadDP(0x0);
[18:56:05.204]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:56:05.204]      </block>
[18:56:05.204]      // end if-block "protType == 2"
[18:56:05.204]    </control>
[18:56:05.205]  </sequence>
[18:56:05.205]  
[18:56:05.209]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:56:05.209]  
[18:56:05.209]  <debugvars>
[18:56:05.209]    // Pre-defined
[18:56:05.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:05.210]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:05.210]    __dp=0x00000000
[18:56:05.210]    __ap=0x00000000
[18:56:05.210]    __traceout=0x00000000      (Trace Disabled)
[18:56:05.210]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:05.210]    __FlashAddr=0x00000000
[18:56:05.210]    __FlashLen=0x00000000
[18:56:05.210]    __FlashArg=0x00000000
[18:56:05.210]    __FlashOp=0x00000000
[18:56:05.210]    __Result=0x00000000
[18:56:05.211]  </debugvars>
[18:56:05.211]  
[18:56:05.211]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:56:05.211]    <block atomic="false" info="">
[18:56:05.211]      __var SW_DP_ABORT       = 0x0;
[18:56:05.211]        // -> [SW_DP_ABORT <= 0x00000000]
[18:56:05.211]      __var DP_CTRL_STAT      = 0x4;
[18:56:05.211]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:56:05.211]      __var DP_SELECT         = 0x8;
[18:56:05.211]        // -> [DP_SELECT <= 0x00000008]
[18:56:05.211]      __var powered_down      = 0;
[18:56:05.211]        // -> [powered_down <= 0x00000000]
[18:56:05.211]      WriteDP(DP_SELECT, 0x00000000);
[18:56:05.215]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:56:05.215]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:56:05.217]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:56:05.217]        // -> [powered_down <= 0x00000001]
[18:56:05.217]    </block>
[18:56:05.217]    <control if="powered_down" while="" timeout="0" info="">
[18:56:05.217]      // if-block "powered_down"
[18:56:05.217]        // =>  TRUE
[18:56:05.217]      <block atomic="false" info="">
[18:56:05.217]        Message(0, "Debug/System power-up request sent");
[18:56:05.217]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:56:05.219]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:56:05.220]      </block>
[18:56:05.220]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:56:05.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:56:05.223]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:56:05.224]        // while-condition  =>  FALSE
[18:56:05.224]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:56:05.224]      </control>
[18:56:05.224]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:56:05.224]        // if-block "(__protocol & 0xFFFF) == 1"
[18:56:05.224]          // =>  FALSE
[18:56:05.224]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:56:05.224]      </control>
[18:56:05.224]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:56:05.224]        // if-block "(__protocol & 0xFFFF) == 2"
[18:56:05.224]          // =>  TRUE
[18:56:05.224]        <block atomic="false" info="">
[18:56:05.224]          Message(0, "executing SWD power up");
[18:56:05.227]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:56:05.231]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:56:05.231]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:56:05.232]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:56:05.232]        </block>
[18:56:05.232]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:56:05.233]      </control>
[18:56:05.233]      // end if-block "powered_down"
[18:56:05.233]    </control>
[18:56:05.233]    <block atomic="false" info="">
[18:56:05.233]      __var DEBUG_PORT_VAL    = 0;
[18:56:05.233]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:56:05.233]      __var ACCESS_POINT_VAL  = 0;
[18:56:05.233]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:56:05.233]      __ap = 1; 
[18:56:05.233]        // -> [__ap <= 0x00000001]
[18:56:05.233]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:56:05.236]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:56:05.237]      __ap = 4;
[18:56:05.237]        // -> [__ap <= 0x00000004]
[18:56:05.237]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:56:05.241]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:56:05.241]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:56:05.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:56:05.243]    </block>
[18:56:05.244]    <block atomic="false" info="">
[18:56:05.244]      __var nReset = 0x80;
[18:56:05.244]        // -> [nReset <= 0x00000080]
[18:56:05.244]      __var canReadPins = 0;
[18:56:05.244]        // -> [canReadPins <= 0x00000000]
[18:56:05.244]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:56:05.246]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:56:05.246]        // -> [canReadPins <= 0x00000001]
[18:56:05.246]    </block>
[18:56:05.246]    <control if="" while="1" timeout="200" info="">
[18:56:05.246]      // while "1"  (timeout="200")
[18:56:05.246]      // while-condition  =>  TRUE
[18:56:05.246]      // while "1"  (timeout="200")
[18:56:05.246]      // while-condition  =>  TRUE
[18:56:05.246]      // while "1"  (timeout="200")
[18:56:05.246]      // while-condition  =>  TRUE
[18:56:05.246]      // while "1"  (timeout="200")
[18:56:05.246]      // while-condition  =>  TRUE
[18:56:05.246]      // while "1"  (timeout="200")
[18:56:05.246]      // while-condition  =>  TRUE
[18:56:05.246]      // while "1"  (timeout="200")
[18:56:05.247]      // while-condition  =>  TRUE
[18:56:05.247]      // while "1"  (timeout="200")
[18:56:05.247]      // while-condition  =>  TRUE
[18:56:05.247]      // while "1"  (timeout="200")
[18:56:05.247]      // while-condition  =>  TRUE
[18:56:05.247]      // while "1"  (timeout="200")
[18:56:05.247]      // while-condition  =>  TRUE
[18:56:05.247]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.248]      // while "1"  (timeout="200")
[18:56:05.248]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.249]      // while-condition  =>  TRUE
[18:56:05.249]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.250]      // while "1"  (timeout="200")
[18:56:05.250]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.252]      // while "1"  (timeout="200")
[18:56:05.252]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.253]      // while-condition  =>  TRUE
[18:56:05.253]      // while "1"  (timeout="200")
[18:56:05.254]      // while-condition  =>  TRUE
[18:56:05.254]      // while "1"  (timeout="200")
[18:56:05.254]      // while  =>  TIMEOUT
[18:56:05.254]      // end while "1"
[18:56:05.254]    </control>
[18:56:05.254]    <control if="canReadPins" while="" timeout="0" info="">
[18:56:05.254]      // if-block "canReadPins"
[18:56:05.254]        // =>  TRUE
[18:56:05.254]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:56:05.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:56:05.258]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:56:05.258]        // while-condition  =>  FALSE
[18:56:05.258]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:56:05.258]      </control>
[18:56:05.258]      // end if-block "canReadPins"
[18:56:05.258]    </control>
[18:56:05.258]    <control if="!canReadPins" while="" timeout="0" info="">
[18:56:05.258]      // if-block "!canReadPins"
[18:56:05.258]        // =>  FALSE
[18:56:05.258]      // skip if-block "!canReadPins"
[18:56:05.258]    </control>
[18:56:05.258]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:56:05.258]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:56:05.258]        // =>  TRUE
[18:56:05.258]      <block atomic="false" info="">
[18:56:05.258]        WriteAP(0x00, 0x190008);
[18:56:05.262]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:56:05.262]        WriteAP(0xF0, 0x01);
[18:56:05.271]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:56:05.271]      </block>
[18:56:05.271]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:56:05.271]    </control>
[18:56:05.271]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:56:05.271]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:56:05.271]        // =>  FALSE
[18:56:05.271]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:56:05.271]    </control>
[18:56:05.271]    <block atomic="false" info="">
[18:56:05.271]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:56:05.276]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:56:05.277]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:56:05.277]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:56:05.277]      __ap = 0; //lets make sure we reset the access point selection
[18:56:05.278]        // -> [__ap <= 0x00000000]
[18:56:05.278]    </block>
[18:56:05.278]  </sequence>
[18:56:05.278]  
[18:56:05.322]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:56:05.322]  
[18:56:05.322]  <debugvars>
[18:56:05.322]    // Pre-defined
[18:56:05.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:05.323]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:05.323]    __dp=0x00000000
[18:56:05.324]    __ap=0x00000000
[18:56:05.324]    __traceout=0x00000000      (Trace Disabled)
[18:56:05.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:05.324]    __FlashAddr=0x00000000
[18:56:05.324]    __FlashLen=0x00000000
[18:56:05.325]    __FlashArg=0x00000000
[18:56:05.325]    __FlashOp=0x00000000
[18:56:05.325]    __Result=0x00000000
[18:56:05.325]  </debugvars>
[18:56:05.325]  
[18:56:05.325]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:56:05.325]    <block atomic="false" info="">
[18:56:05.326]      __var deviceID = 0;
[18:56:05.326]        // -> [deviceID <= 0x00000000]
[18:56:05.326]      __var version = 0;
[18:56:05.326]        // -> [version <= 0x00000000]
[18:56:05.326]      __var partNum = 0;
[18:56:05.327]        // -> [partNum <= 0x00000000]
[18:56:05.327]      __var manuf = 0;
[18:56:05.327]        // -> [manuf <= 0x00000000]
[18:56:05.327]      __var isMSPM0G1X0X_G3X0X = 0;
[18:56:05.327]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:56:05.327]      __var isProduction = 0;
[18:56:05.327]        // -> [isProduction <= 0x00000000]
[18:56:05.327]      __var continueId = 0;
[18:56:05.327]        // -> [continueId <= 0x00000000]
[18:56:05.328]      deviceID =   Read32(0x41C40004);
[18:56:05.344]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:56:05.344]        // -> [deviceID <= 0x2BB8802F]
[18:56:05.345]      version = deviceID >> 28;
[18:56:05.345]        // -> [version <= 0x00000002]
[18:56:05.345]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:56:05.345]        // -> [partNum <= 0x0000BB88]
[18:56:05.345]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:56:05.345]        // -> [manuf <= 0x00000017]
[18:56:05.345]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:56:05.345]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:56:05.345]      isProduction = (version > 0);
[18:56:05.345]        // -> [isProduction <= 0x00000001]
[18:56:05.345]    </block>
[18:56:05.345]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:56:05.345]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:56:05.345]        // =>  FALSE
[18:56:05.345]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:56:05.345]    </control>
[18:56:05.345]    <control if="continueId == 4" while="" timeout="0" info="">
[18:56:05.345]      // if-block "continueId == 4"
[18:56:05.345]        // =>  FALSE
[18:56:05.345]      // skip if-block "continueId == 4"
[18:56:05.345]    </control>
[18:56:05.345]    <control if="!isProduction" while="" timeout="0" info="">
[18:56:05.345]      // if-block "!isProduction"
[18:56:05.346]        // =>  FALSE
[18:56:05.346]      // skip if-block "!isProduction"
[18:56:05.346]    </control>
[18:56:05.346]  </sequence>
[18:56:05.346]  
[18:56:22.681]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:56:22.681]  
[18:56:22.681]  <debugvars>
[18:56:22.682]    // Pre-defined
[18:56:22.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:22.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:22.683]    __dp=0x00000000
[18:56:22.683]    __ap=0x00000000
[18:56:22.683]    __traceout=0x00000000      (Trace Disabled)
[18:56:22.683]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:22.683]    __FlashAddr=0x00000000
[18:56:22.683]    __FlashLen=0x00000000
[18:56:22.683]    __FlashArg=0x00000000
[18:56:22.683]    __FlashOp=0x00000000
[18:56:22.683]    __Result=0x00000000
[18:56:22.683]  </debugvars>
[18:56:22.684]  
[18:56:22.684]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:56:22.684]    <block atomic="false" info="">
[18:56:22.684]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:56:22.684]        // -> [isSWJ <= 0x00000001]
[18:56:22.684]      __var hasDormant = __protocol & 0x00020000;
[18:56:22.684]        // -> [hasDormant <= 0x00000000]
[18:56:22.684]      __var protType   = __protocol & 0x0000FFFF;
[18:56:22.684]        // -> [protType <= 0x00000002]
[18:56:22.684]    </block>
[18:56:22.684]    <control if="protType == 1" while="" timeout="0" info="">
[18:56:22.684]      // if-block "protType == 1"
[18:56:22.684]        // =>  FALSE
[18:56:22.684]      // skip if-block "protType == 1"
[18:56:22.684]    </control>
[18:56:22.684]    <control if="protType == 2" while="" timeout="0" info="">
[18:56:22.684]      // if-block "protType == 2"
[18:56:22.684]        // =>  TRUE
[18:56:22.684]      <control if="isSWJ" while="" timeout="0" info="">
[18:56:22.685]        // if-block "isSWJ"
[18:56:22.685]          // =>  TRUE
[18:56:22.685]        <control if="hasDormant" while="" timeout="0" info="">
[18:56:22.685]          // if-block "hasDormant"
[18:56:22.685]            // =>  FALSE
[18:56:22.685]          // skip if-block "hasDormant"
[18:56:22.685]        </control>
[18:56:22.685]        <control if="!hasDormant" while="" timeout="0" info="">
[18:56:22.685]          // if-block "!hasDormant"
[18:56:22.685]            // =>  TRUE
[18:56:22.685]          <block atomic="false" info="">
[18:56:22.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:56:22.686]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:22.686]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:56:22.688]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:56:22.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:56:22.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:22.690]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:56:22.696]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:56:22.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:56:22.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:22.697]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:56:22.699]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:56:22.699]          </block>
[18:56:22.699]          // end if-block "!hasDormant"
[18:56:22.699]        </control>
[18:56:22.699]        // end if-block "isSWJ"
[18:56:22.699]      </control>
[18:56:22.699]      <control if="!isSWJ" while="" timeout="0" info="">
[18:56:22.699]        // if-block "!isSWJ"
[18:56:22.699]          // =>  FALSE
[18:56:22.699]        // skip if-block "!isSWJ"
[18:56:22.699]      </control>
[18:56:22.699]      <block atomic="false" info="">
[18:56:22.699]        ReadDP(0x0);
[18:56:22.704]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:56:22.705]      </block>
[18:56:22.705]      // end if-block "protType == 2"
[18:56:22.705]    </control>
[18:56:22.705]  </sequence>
[18:56:22.705]  
[18:56:22.711]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:56:22.711]  
[18:56:22.711]  <debugvars>
[18:56:22.711]    // Pre-defined
[18:56:22.712]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:22.712]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:22.712]    __dp=0x00000000
[18:56:22.712]    __ap=0x00000000
[18:56:22.712]    __traceout=0x00000000      (Trace Disabled)
[18:56:22.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:22.712]    __FlashAddr=0x00000000
[18:56:22.712]    __FlashLen=0x00000000
[18:56:22.712]    __FlashArg=0x00000000
[18:56:22.712]    __FlashOp=0x00000000
[18:56:22.712]    __Result=0x00000000
[18:56:22.712]  </debugvars>
[18:56:22.712]  
[18:56:22.712]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:56:22.712]    <block atomic="false" info="">
[18:56:22.712]      __var SW_DP_ABORT       = 0x0;
[18:56:22.712]        // -> [SW_DP_ABORT <= 0x00000000]
[18:56:22.712]      __var DP_CTRL_STAT      = 0x4;
[18:56:22.713]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:56:22.713]      __var DP_SELECT         = 0x8;
[18:56:22.713]        // -> [DP_SELECT <= 0x00000008]
[18:56:22.713]      __var powered_down      = 0;
[18:56:22.713]        // -> [powered_down <= 0x00000000]
[18:56:22.713]      WriteDP(DP_SELECT, 0x00000000);
[18:56:22.714]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:56:22.714]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:56:22.715]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:56:22.716]        // -> [powered_down <= 0x00000001]
[18:56:22.716]    </block>
[18:56:22.716]    <control if="powered_down" while="" timeout="0" info="">
[18:56:22.716]      // if-block "powered_down"
[18:56:22.716]        // =>  TRUE
[18:56:22.716]      <block atomic="false" info="">
[18:56:22.716]        Message(0, "Debug/System power-up request sent");
[18:56:22.716]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:56:22.719]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:56:22.719]      </block>
[18:56:22.719]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:56:22.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:56:22.721]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:56:22.721]        // while-condition  =>  FALSE
[18:56:22.721]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:56:22.721]      </control>
[18:56:22.721]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:56:22.721]        // if-block "(__protocol & 0xFFFF) == 1"
[18:56:22.721]          // =>  FALSE
[18:56:22.721]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:56:22.721]      </control>
[18:56:22.721]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:56:22.721]        // if-block "(__protocol & 0xFFFF) == 2"
[18:56:22.722]          // =>  TRUE
[18:56:22.722]        <block atomic="false" info="">
[18:56:22.722]          Message(0, "executing SWD power up");
[18:56:22.726]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:56:22.727]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:56:22.727]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:56:22.731]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:56:22.731]        </block>
[18:56:22.731]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:56:22.731]      </control>
[18:56:22.731]      // end if-block "powered_down"
[18:56:22.732]    </control>
[18:56:22.732]    <block atomic="false" info="">
[18:56:22.732]      __var DEBUG_PORT_VAL    = 0;
[18:56:22.732]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:56:22.732]      __var ACCESS_POINT_VAL  = 0;
[18:56:22.732]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:56:22.732]      __ap = 1; 
[18:56:22.732]        // -> [__ap <= 0x00000001]
[18:56:22.732]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:56:22.736]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:56:22.736]      __ap = 4;
[18:56:22.736]        // -> [__ap <= 0x00000004]
[18:56:22.736]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:56:22.740]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:56:22.740]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:56:22.740]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:56:22.742]    </block>
[18:56:22.742]    <block atomic="false" info="">
[18:56:22.742]      __var nReset = 0x80;
[18:56:22.742]        // -> [nReset <= 0x00000080]
[18:56:22.742]      __var canReadPins = 0;
[18:56:22.742]        // -> [canReadPins <= 0x00000000]
[18:56:22.742]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:56:22.743]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:56:22.743]        // -> [canReadPins <= 0x00000001]
[18:56:22.743]    </block>
[18:56:22.743]    <control if="" while="1" timeout="200" info="">
[18:56:22.743]      // while "1"  (timeout="200")
[18:56:22.743]      // while-condition  =>  TRUE
[18:56:22.743]      // while "1"  (timeout="200")
[18:56:22.743]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.744]      // while "1"  (timeout="200")
[18:56:22.744]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.745]      // while "1"  (timeout="200")
[18:56:22.745]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.746]      // while "1"  (timeout="200")
[18:56:22.746]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.747]      // while "1"  (timeout="200")
[18:56:22.747]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.748]      // while "1"  (timeout="200")
[18:56:22.748]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.749]      // while "1"  (timeout="200")
[18:56:22.749]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.750]      // while "1"  (timeout="200")
[18:56:22.750]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.751]      // while "1"  (timeout="200")
[18:56:22.751]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.752]      // while "1"  (timeout="200")
[18:56:22.752]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.753]      // while-condition  =>  TRUE
[18:56:22.753]      // while "1"  (timeout="200")
[18:56:22.754]      // while-condition  =>  TRUE
[18:56:22.754]      // while "1"  (timeout="200")
[18:56:22.754]      // while  =>  TIMEOUT
[18:56:22.754]      // end while "1"
[18:56:22.754]    </control>
[18:56:22.754]    <control if="canReadPins" while="" timeout="0" info="">
[18:56:22.754]      // if-block "canReadPins"
[18:56:22.754]        // =>  TRUE
[18:56:22.754]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:56:22.754]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:56:22.761]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:56:22.761]        // while-condition  =>  FALSE
[18:56:22.761]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:56:22.761]      </control>
[18:56:22.761]      // end if-block "canReadPins"
[18:56:22.761]    </control>
[18:56:22.761]    <control if="!canReadPins" while="" timeout="0" info="">
[18:56:22.761]      // if-block "!canReadPins"
[18:56:22.761]        // =>  FALSE
[18:56:22.761]      // skip if-block "!canReadPins"
[18:56:22.761]    </control>
[18:56:22.761]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:56:22.761]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:56:22.761]        // =>  TRUE
[18:56:22.762]      <block atomic="false" info="">
[18:56:22.762]        WriteAP(0x00, 0x190008);
[18:56:22.765]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:56:22.765]        WriteAP(0xF0, 0x01);
[18:56:22.772]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:56:22.773]      </block>
[18:56:22.773]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:56:22.773]    </control>
[18:56:22.773]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:56:22.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:56:22.773]        // =>  FALSE
[18:56:22.773]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:56:22.773]    </control>
[18:56:22.773]    <block atomic="false" info="">
[18:56:22.773]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:56:22.777]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:56:22.777]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:56:22.777]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:56:22.778]      __ap = 0; //lets make sure we reset the access point selection
[18:56:22.778]        // -> [__ap <= 0x00000000]
[18:56:22.778]    </block>
[18:56:22.778]  </sequence>
[18:56:22.778]  
[18:56:22.800]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:56:22.800]  
[18:56:22.800]  <debugvars>
[18:56:22.800]    // Pre-defined
[18:56:22.800]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:22.800]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:22.800]    __dp=0x00000000
[18:56:22.800]    __ap=0x00000000
[18:56:22.800]    __traceout=0x00000000      (Trace Disabled)
[18:56:22.801]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:22.801]    __FlashAddr=0x00000000
[18:56:22.801]    __FlashLen=0x00000000
[18:56:22.801]    __FlashArg=0x00000000
[18:56:22.801]    __FlashOp=0x00000000
[18:56:22.801]    __Result=0x00000000
[18:56:22.801]  </debugvars>
[18:56:22.801]  
[18:56:22.801]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:56:22.801]    <block atomic="false" info="">
[18:56:22.801]      __var deviceID = 0;
[18:56:22.801]        // -> [deviceID <= 0x00000000]
[18:56:22.801]      __var version = 0;
[18:56:22.801]        // -> [version <= 0x00000000]
[18:56:22.801]      __var partNum = 0;
[18:56:22.801]        // -> [partNum <= 0x00000000]
[18:56:22.801]      __var manuf = 0;
[18:56:22.801]        // -> [manuf <= 0x00000000]
[18:56:22.801]      __var isMSPM0G1X0X_G3X0X = 0;
[18:56:22.802]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:56:22.802]      __var isProduction = 0;
[18:56:22.802]        // -> [isProduction <= 0x00000000]
[18:56:22.802]      __var continueId = 0;
[18:56:22.802]        // -> [continueId <= 0x00000000]
[18:56:22.802]      deviceID =   Read32(0x41C40004);
[18:56:22.806]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:56:22.806]        // -> [deviceID <= 0x2BB8802F]
[18:56:22.806]      version = deviceID >> 28;
[18:56:22.806]        // -> [version <= 0x00000002]
[18:56:22.806]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:56:22.806]        // -> [partNum <= 0x0000BB88]
[18:56:22.807]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:56:22.807]        // -> [manuf <= 0x00000017]
[18:56:22.807]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:56:22.807]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:56:22.807]      isProduction = (version > 0);
[18:56:22.807]        // -> [isProduction <= 0x00000001]
[18:56:22.807]    </block>
[18:56:22.807]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:56:22.807]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:56:22.807]        // =>  FALSE
[18:56:22.807]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:56:22.807]    </control>
[18:56:22.807]    <control if="continueId == 4" while="" timeout="0" info="">
[18:56:22.807]      // if-block "continueId == 4"
[18:56:22.807]        // =>  FALSE
[18:56:22.807]      // skip if-block "continueId == 4"
[18:56:22.807]    </control>
[18:56:22.807]    <control if="!isProduction" while="" timeout="0" info="">
[18:56:22.807]      // if-block "!isProduction"
[18:56:22.807]        // =>  FALSE
[18:56:22.807]      // skip if-block "!isProduction"
[18:56:22.807]    </control>
[18:56:22.807]  </sequence>
[18:56:22.807]  
[18:56:53.506]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:56:53.506]  
[18:56:53.506]  <debugvars>
[18:56:53.506]    // Pre-defined
[18:56:53.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:53.506]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:53.506]    __dp=0x00000000
[18:56:53.506]    __ap=0x00000000
[18:56:53.506]    __traceout=0x00000000      (Trace Disabled)
[18:56:53.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:53.506]    __FlashAddr=0x00000000
[18:56:53.507]    __FlashLen=0x00000000
[18:56:53.507]    __FlashArg=0x00000000
[18:56:53.507]    __FlashOp=0x00000000
[18:56:53.507]    __Result=0x00000000
[18:56:53.507]  </debugvars>
[18:56:53.507]  
[18:56:53.507]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:56:53.507]    <block atomic="false" info="">
[18:56:53.507]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:56:53.507]        // -> [isSWJ <= 0x00000001]
[18:56:53.507]      __var hasDormant = __protocol & 0x00020000;
[18:56:53.507]        // -> [hasDormant <= 0x00000000]
[18:56:53.507]      __var protType   = __protocol & 0x0000FFFF;
[18:56:53.507]        // -> [protType <= 0x00000002]
[18:56:53.508]    </block>
[18:56:53.508]    <control if="protType == 1" while="" timeout="0" info="">
[18:56:53.508]      // if-block "protType == 1"
[18:56:53.508]        // =>  FALSE
[18:56:53.508]      // skip if-block "protType == 1"
[18:56:53.508]    </control>
[18:56:53.508]    <control if="protType == 2" while="" timeout="0" info="">
[18:56:53.508]      // if-block "protType == 2"
[18:56:53.508]        // =>  TRUE
[18:56:53.508]      <control if="isSWJ" while="" timeout="0" info="">
[18:56:53.508]        // if-block "isSWJ"
[18:56:53.508]          // =>  TRUE
[18:56:53.508]        <control if="hasDormant" while="" timeout="0" info="">
[18:56:53.508]          // if-block "hasDormant"
[18:56:53.508]            // =>  FALSE
[18:56:53.508]          // skip if-block "hasDormant"
[18:56:53.508]        </control>
[18:56:53.508]        <control if="!hasDormant" while="" timeout="0" info="">
[18:56:53.508]          // if-block "!hasDormant"
[18:56:53.508]            // =>  TRUE
[18:56:53.508]          <block atomic="false" info="">
[18:56:53.508]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:56:53.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:53.517]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:56:53.545]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:56:53.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:56:53.565]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:53.565]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:56:53.578]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:56:53.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:56:53.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:56:53.606]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:56:53.617]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:56:53.617]          </block>
[18:56:53.617]          // end if-block "!hasDormant"
[18:56:53.617]        </control>
[18:56:53.617]        // end if-block "isSWJ"
[18:56:53.617]      </control>
[18:56:53.617]      <control if="!isSWJ" while="" timeout="0" info="">
[18:56:53.617]        // if-block "!isSWJ"
[18:56:53.617]          // =>  FALSE
[18:56:53.617]        // skip if-block "!isSWJ"
[18:56:53.618]      </control>
[18:56:53.618]      <block atomic="false" info="">
[18:56:53.618]        ReadDP(0x0);
[18:56:53.638]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:56:53.638]      </block>
[18:56:53.638]      // end if-block "protType == 2"
[18:56:53.638]    </control>
[18:56:53.638]  </sequence>
[18:56:53.638]  
[18:56:53.673]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:56:53.673]  
[18:56:53.673]  <debugvars>
[18:56:53.673]    // Pre-defined
[18:56:53.673]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:53.673]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:53.673]    __dp=0x00000000
[18:56:53.673]    __ap=0x00000000
[18:56:53.673]    __traceout=0x00000000      (Trace Disabled)
[18:56:53.673]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:53.673]    __FlashAddr=0x00000000
[18:56:53.673]    __FlashLen=0x00000000
[18:56:53.673]    __FlashArg=0x00000000
[18:56:53.673]    __FlashOp=0x00000000
[18:56:53.673]    __Result=0x00000000
[18:56:53.673]  </debugvars>
[18:56:53.673]  
[18:56:53.673]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:56:53.673]    <block atomic="false" info="">
[18:56:53.673]      __var SW_DP_ABORT       = 0x0;
[18:56:53.673]        // -> [SW_DP_ABORT <= 0x00000000]
[18:56:53.673]      __var DP_CTRL_STAT      = 0x4;
[18:56:53.675]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:56:53.675]      __var DP_SELECT         = 0x8;
[18:56:53.675]        // -> [DP_SELECT <= 0x00000008]
[18:56:53.675]      __var powered_down      = 0;
[18:56:53.675]        // -> [powered_down <= 0x00000000]
[18:56:53.675]      WriteDP(DP_SELECT, 0x00000000);
[18:56:53.699]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:56:53.699]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:56:53.727]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:56:53.727]        // -> [powered_down <= 0x00000001]
[18:56:53.727]    </block>
[18:56:53.727]    <control if="powered_down" while="" timeout="0" info="">
[18:56:53.727]      // if-block "powered_down"
[18:56:53.727]        // =>  TRUE
[18:56:53.727]      <block atomic="false" info="">
[18:56:53.727]        Message(0, "Debug/System power-up request sent");
[18:56:53.728]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:56:53.767]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:56:53.767]      </block>
[18:56:53.767]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:56:53.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:56:53.790]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:56:53.790]        // while-condition  =>  FALSE
[18:56:53.791]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:56:53.791]      </control>
[18:56:53.791]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:56:53.791]        // if-block "(__protocol & 0xFFFF) == 1"
[18:56:53.791]          // =>  FALSE
[18:56:53.791]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:56:53.791]      </control>
[18:56:53.791]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:56:53.791]        // if-block "(__protocol & 0xFFFF) == 2"
[18:56:53.791]          // =>  TRUE
[18:56:53.792]        <block atomic="false" info="">
[18:56:53.792]          Message(0, "executing SWD power up");
[18:56:53.797]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:56:53.806]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:56:53.806]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:56:53.840]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:56:53.840]        </block>
[18:56:53.840]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:56:53.841]      </control>
[18:56:53.841]      // end if-block "powered_down"
[18:56:53.841]    </control>
[18:56:53.841]    <block atomic="false" info="">
[18:56:53.841]      __var DEBUG_PORT_VAL    = 0;
[18:56:53.841]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:56:53.841]      __var ACCESS_POINT_VAL  = 0;
[18:56:53.841]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:56:53.842]      __ap = 1; 
[18:56:53.842]        // -> [__ap <= 0x00000001]
[18:56:53.842]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:56:53.859]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:56:53.859]      __ap = 4;
[18:56:53.859]        // -> [__ap <= 0x00000004]
[18:56:53.860]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:56:53.880]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:56:53.881]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:56:53.881]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:56:53.882]    </block>
[18:56:53.882]    <block atomic="false" info="">
[18:56:53.882]      __var nReset = 0x80;
[18:56:53.882]        // -> [nReset <= 0x00000080]
[18:56:53.883]      __var canReadPins = 0;
[18:56:53.883]        // -> [canReadPins <= 0x00000000]
[18:56:53.883]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:56:53.903]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:56:53.903]        // -> [canReadPins <= 0x00000001]
[18:56:53.903]    </block>
[18:56:53.903]    <control if="" while="1" timeout="200" info="">
[18:56:53.903]      // while "1"  (timeout="200")
[18:56:53.903]      // while-condition  =>  TRUE
[18:56:53.903]      // while "1"  (timeout="200")
[18:56:53.903]      // while-condition  =>  TRUE
[18:56:53.903]      // while "1"  (timeout="200")
[18:56:53.903]      // while-condition  =>  TRUE
[18:56:53.903]      // while "1"  (timeout="200")
[18:56:53.903]      // while-condition  =>  TRUE
[18:56:53.903]      // while "1"  (timeout="200")
[18:56:53.903]      // while-condition  =>  TRUE
[18:56:53.903]      // while "1"  (timeout="200")
[18:56:53.903]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.905]      // while "1"  (timeout="200")
[18:56:53.905]      // while-condition  =>  TRUE
[18:56:53.906]      // while "1"  (timeout="200")
[18:56:53.906]      // while-condition  =>  TRUE
[18:56:53.906]      // while "1"  (timeout="200")
[18:56:53.906]      // while-condition  =>  TRUE
[18:56:53.906]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.907]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.907]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.907]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.907]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.907]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.907]      // while "1"  (timeout="200")
[18:56:53.907]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.908]      // while "1"  (timeout="200")
[18:56:53.908]      // while-condition  =>  TRUE
[18:56:53.909]      // while "1"  (timeout="200")
[18:56:53.909]      // while-condition  =>  TRUE
[18:56:53.909]      // while "1"  (timeout="200")
[18:56:53.909]      // while-condition  =>  TRUE
[18:56:53.909]      // while "1"  (timeout="200")
[18:56:53.909]      // while-condition  =>  TRUE
[18:56:53.909]      // while "1"  (timeout="200")
[18:56:53.909]      // while-condition  =>  TRUE
[18:56:53.909]      // while "1"  (timeout="200")
[18:56:53.909]      // while-condition  =>  TRUE
[18:56:53.909]      // while "1"  (timeout="200")
[18:56:53.909]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.910]      // while "1"  (timeout="200")
[18:56:53.910]      // while-condition  =>  TRUE
[18:56:53.911]      // while "1"  (timeout="200")
[18:56:53.911]      // while  =>  TIMEOUT
[18:56:53.911]      // end while "1"
[18:56:53.911]    </control>
[18:56:53.911]    <control if="canReadPins" while="" timeout="0" info="">
[18:56:53.911]      // if-block "canReadPins"
[18:56:53.911]        // =>  TRUE
[18:56:53.911]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:56:53.912]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:56:53.932]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:56:53.932]        // while-condition  =>  FALSE
[18:56:53.932]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:56:53.932]      </control>
[18:56:53.932]      // end if-block "canReadPins"
[18:56:53.933]    </control>
[18:56:53.933]    <control if="!canReadPins" while="" timeout="0" info="">
[18:56:53.933]      // if-block "!canReadPins"
[18:56:53.933]        // =>  FALSE
[18:56:53.933]      // skip if-block "!canReadPins"
[18:56:53.933]    </control>
[18:56:53.933]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:56:53.933]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:56:53.933]        // =>  TRUE
[18:56:53.933]      <block atomic="false" info="">
[18:56:53.933]        WriteAP(0x00, 0x190008);
[18:56:53.979]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:56:53.980]        WriteAP(0xF0, 0x01);
[18:56:54.023]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:56:54.023]      </block>
[18:56:54.023]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:56:54.023]    </control>
[18:56:54.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:56:54.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:56:54.023]        // =>  FALSE
[18:56:54.023]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:56:54.023]    </control>
[18:56:54.023]    <block atomic="false" info="">
[18:56:54.023]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:56:54.038]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:56:54.038]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:56:54.039]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:56:54.041]      __ap = 0; //lets make sure we reset the access point selection
[18:56:54.041]        // -> [__ap <= 0x00000000]
[18:56:54.041]    </block>
[18:56:54.042]  </sequence>
[18:56:54.042]  
[18:56:54.230]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:56:54.230]  
[18:56:54.230]  <debugvars>
[18:56:54.230]    // Pre-defined
[18:56:54.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:56:54.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:56:54.230]    __dp=0x00000000
[18:56:54.230]    __ap=0x00000000
[18:56:54.230]    __traceout=0x00000000      (Trace Disabled)
[18:56:54.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:56:54.230]    __FlashAddr=0x00000000
[18:56:54.230]    __FlashLen=0x00000000
[18:56:54.230]    __FlashArg=0x00000000
[18:56:54.230]    __FlashOp=0x00000000
[18:56:54.230]    __Result=0x00000000
[18:56:54.230]  </debugvars>
[18:56:54.230]  
[18:56:54.232]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:56:54.232]    <block atomic="false" info="">
[18:56:54.232]      __var deviceID = 0;
[18:56:54.232]        // -> [deviceID <= 0x00000000]
[18:56:54.232]      __var version = 0;
[18:56:54.232]        // -> [version <= 0x00000000]
[18:56:54.232]      __var partNum = 0;
[18:56:54.232]        // -> [partNum <= 0x00000000]
[18:56:54.232]      __var manuf = 0;
[18:56:54.232]        // -> [manuf <= 0x00000000]
[18:56:54.232]      __var isMSPM0G1X0X_G3X0X = 0;
[18:56:54.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:56:54.232]      __var isProduction = 0;
[18:56:54.232]        // -> [isProduction <= 0x00000000]
[18:56:54.232]      __var continueId = 0;
[18:56:54.233]        // -> [continueId <= 0x00000000]
[18:56:54.233]      deviceID =   Read32(0x41C40004);
[18:56:54.273]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:56:54.273]        // -> [deviceID <= 0x2BB8802F]
[18:56:54.273]      version = deviceID >> 28;
[18:56:54.273]        // -> [version <= 0x00000002]
[18:56:54.273]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:56:54.273]        // -> [partNum <= 0x0000BB88]
[18:56:54.273]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:56:54.273]        // -> [manuf <= 0x00000017]
[18:56:54.273]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:56:54.273]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:56:54.273]      isProduction = (version > 0);
[18:56:54.273]        // -> [isProduction <= 0x00000001]
[18:56:54.273]    </block>
[18:56:54.275]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:56:54.275]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:56:54.275]        // =>  FALSE
[18:56:54.275]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:56:54.275]    </control>
[18:56:54.275]    <control if="continueId == 4" while="" timeout="0" info="">
[18:56:54.275]      // if-block "continueId == 4"
[18:56:54.275]        // =>  FALSE
[18:56:54.275]      // skip if-block "continueId == 4"
[18:56:54.275]    </control>
[18:56:54.275]    <control if="!isProduction" while="" timeout="0" info="">
[18:56:54.275]      // if-block "!isProduction"
[18:56:54.275]        // =>  FALSE
[18:56:54.275]      // skip if-block "!isProduction"
[18:56:54.275]    </control>
[18:56:54.276]  </sequence>
[18:56:54.276]  
[18:58:28.630]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:58:28.630]  
[18:58:28.631]  <debugvars>
[18:58:28.631]    // Pre-defined
[18:58:28.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:58:28.631]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:58:28.631]    __dp=0x00000000
[18:58:28.632]    __ap=0x00000000
[18:58:28.632]    __traceout=0x00000000      (Trace Disabled)
[18:58:28.632]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:58:28.632]    __FlashAddr=0x00000000
[18:58:28.632]    __FlashLen=0x00000000
[18:58:28.632]    __FlashArg=0x00000000
[18:58:28.632]    __FlashOp=0x00000000
[18:58:28.632]    __Result=0x00000000
[18:58:28.632]  </debugvars>
[18:58:28.632]  
[18:58:28.632]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:58:28.632]    <block atomic="false" info="">
[18:58:28.632]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:58:28.632]        // -> [isSWJ <= 0x00000001]
[18:58:28.633]      __var hasDormant = __protocol & 0x00020000;
[18:58:28.633]        // -> [hasDormant <= 0x00000000]
[18:58:28.633]      __var protType   = __protocol & 0x0000FFFF;
[18:58:28.633]        // -> [protType <= 0x00000002]
[18:58:28.633]    </block>
[18:58:28.633]    <control if="protType == 1" while="" timeout="0" info="">
[18:58:28.633]      // if-block "protType == 1"
[18:58:28.633]        // =>  FALSE
[18:58:28.633]      // skip if-block "protType == 1"
[18:58:28.633]    </control>
[18:58:28.633]    <control if="protType == 2" while="" timeout="0" info="">
[18:58:28.633]      // if-block "protType == 2"
[18:58:28.633]        // =>  TRUE
[18:58:28.634]      <control if="isSWJ" while="" timeout="0" info="">
[18:58:28.634]        // if-block "isSWJ"
[18:58:28.634]          // =>  TRUE
[18:58:28.634]        <control if="hasDormant" while="" timeout="0" info="">
[18:58:28.634]          // if-block "hasDormant"
[18:58:28.634]            // =>  FALSE
[18:58:28.634]          // skip if-block "hasDormant"
[18:58:28.634]        </control>
[18:58:28.634]        <control if="!hasDormant" while="" timeout="0" info="">
[18:58:28.634]          // if-block "!hasDormant"
[18:58:28.634]            // =>  TRUE
[18:58:28.635]          <block atomic="false" info="">
[18:58:28.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:58:28.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:58:28.636]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:58:28.637]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:58:28.637]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:58:28.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:58:28.639]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:58:28.641]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:58:28.641]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:58:28.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:58:28.643]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:58:28.644]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:58:28.644]          </block>
[18:58:28.644]          // end if-block "!hasDormant"
[18:58:28.644]        </control>
[18:58:28.644]        // end if-block "isSWJ"
[18:58:28.644]      </control>
[18:58:28.644]      <control if="!isSWJ" while="" timeout="0" info="">
[18:58:28.644]        // if-block "!isSWJ"
[18:58:28.644]          // =>  FALSE
[18:58:28.644]        // skip if-block "!isSWJ"
[18:58:28.644]      </control>
[18:58:28.644]      <block atomic="false" info="">
[18:58:28.644]        ReadDP(0x0);
[18:58:28.646]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:58:28.646]      </block>
[18:58:28.646]      // end if-block "protType == 2"
[18:58:28.646]    </control>
[18:58:28.646]  </sequence>
[18:58:28.646]  
[18:58:28.649]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:58:28.649]  
[18:58:28.649]  <debugvars>
[18:58:28.649]    // Pre-defined
[18:58:28.649]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:58:28.649]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:58:28.649]    __dp=0x00000000
[18:58:28.649]    __ap=0x00000000
[18:58:28.649]    __traceout=0x00000000      (Trace Disabled)
[18:58:28.649]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:58:28.649]    __FlashAddr=0x00000000
[18:58:28.649]    __FlashLen=0x00000000
[18:58:28.649]    __FlashArg=0x00000000
[18:58:28.649]    __FlashOp=0x00000000
[18:58:28.649]    __Result=0x00000000
[18:58:28.650]  </debugvars>
[18:58:28.650]  
[18:58:28.650]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:58:28.650]    <block atomic="false" info="">
[18:58:28.650]      __var SW_DP_ABORT       = 0x0;
[18:58:28.650]        // -> [SW_DP_ABORT <= 0x00000000]
[18:58:28.650]      __var DP_CTRL_STAT      = 0x4;
[18:58:28.650]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:58:28.650]      __var DP_SELECT         = 0x8;
[18:58:28.650]        // -> [DP_SELECT <= 0x00000008]
[18:58:28.650]      __var powered_down      = 0;
[18:58:28.650]        // -> [powered_down <= 0x00000000]
[18:58:28.650]      WriteDP(DP_SELECT, 0x00000000);
[18:58:28.652]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:58:28.653]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:58:28.655]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:58:28.655]        // -> [powered_down <= 0x00000001]
[18:58:28.655]    </block>
[18:58:28.655]    <control if="powered_down" while="" timeout="0" info="">
[18:58:28.655]      // if-block "powered_down"
[18:58:28.655]        // =>  TRUE
[18:58:28.655]      <block atomic="false" info="">
[18:58:28.655]        Message(0, "Debug/System power-up request sent");
[18:58:28.662]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:58:28.665]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:58:28.665]      </block>
[18:58:28.665]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:58:28.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:58:28.668]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:58:28.668]        // while-condition  =>  FALSE
[18:58:28.668]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:58:28.668]      </control>
[18:58:28.668]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:58:28.668]        // if-block "(__protocol & 0xFFFF) == 1"
[18:58:28.668]          // =>  FALSE
[18:58:28.669]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:58:28.669]      </control>
[18:58:28.669]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:58:28.669]        // if-block "(__protocol & 0xFFFF) == 2"
[18:58:28.669]          // =>  TRUE
[18:58:28.669]        <block atomic="false" info="">
[18:58:28.669]          Message(0, "executing SWD power up");
[18:58:28.670]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:58:28.672]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:58:28.672]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:58:28.674]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:58:28.674]        </block>
[18:58:28.674]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:58:28.674]      </control>
[18:58:28.674]      // end if-block "powered_down"
[18:58:28.674]    </control>
[18:58:28.674]    <block atomic="false" info="">
[18:58:28.674]      __var DEBUG_PORT_VAL    = 0;
[18:58:28.675]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:58:28.675]      __var ACCESS_POINT_VAL  = 0;
[18:58:28.675]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:58:28.675]      __ap = 1; 
[18:58:28.675]        // -> [__ap <= 0x00000001]
[18:58:28.675]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:58:28.678]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:58:28.678]      __ap = 4;
[18:58:28.678]        // -> [__ap <= 0x00000004]
[18:58:28.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:58:28.681]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:58:28.681]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:58:28.682]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:58:28.683]    </block>
[18:58:28.683]    <block atomic="false" info="">
[18:58:28.683]      __var nReset = 0x80;
[18:58:28.683]        // -> [nReset <= 0x00000080]
[18:58:28.683]      __var canReadPins = 0;
[18:58:28.683]        // -> [canReadPins <= 0x00000000]
[18:58:28.683]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:58:28.687]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:58:28.687]        // -> [canReadPins <= 0x00000001]
[18:58:28.687]    </block>
[18:58:28.687]    <control if="" while="1" timeout="200" info="">
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.687]      // while-condition  =>  TRUE
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.687]      // while-condition  =>  TRUE
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.687]      // while-condition  =>  TRUE
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.687]      // while-condition  =>  TRUE
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.687]      // while-condition  =>  TRUE
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.687]      // while-condition  =>  TRUE
[18:58:28.687]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.688]      // while "1"  (timeout="200")
[18:58:28.688]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.689]      // while "1"  (timeout="200")
[18:58:28.689]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.690]      // while-condition  =>  TRUE
[18:58:28.690]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.691]      // while-condition  =>  TRUE
[18:58:28.691]      // while "1"  (timeout="200")
[18:58:28.692]      // while-condition  =>  TRUE
[18:58:28.692]      // while "1"  (timeout="200")
[18:58:28.692]      // while  =>  TIMEOUT
[18:58:28.692]      // end while "1"
[18:58:28.692]    </control>
[18:58:28.692]    <control if="canReadPins" while="" timeout="0" info="">
[18:58:28.692]      // if-block "canReadPins"
[18:58:28.692]        // =>  TRUE
[18:58:28.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:58:28.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:58:28.693]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:58:28.693]        // while-condition  =>  FALSE
[18:58:28.693]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:58:28.693]      </control>
[18:58:28.693]      // end if-block "canReadPins"
[18:58:28.694]    </control>
[18:58:28.694]    <control if="!canReadPins" while="" timeout="0" info="">
[18:58:28.694]      // if-block "!canReadPins"
[18:58:28.694]        // =>  FALSE
[18:58:28.694]      // skip if-block "!canReadPins"
[18:58:28.694]    </control>
[18:58:28.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:58:28.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:58:28.694]        // =>  TRUE
[18:58:28.694]      <block atomic="false" info="">
[18:58:28.694]        WriteAP(0x00, 0x190008);
[18:58:28.695]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:58:28.696]        WriteAP(0xF0, 0x01);
[18:58:28.703]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:58:28.703]      </block>
[18:58:28.703]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:58:28.703]    </control>
[18:58:28.703]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:58:28.703]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:58:28.703]        // =>  FALSE
[18:58:28.703]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:58:28.703]    </control>
[18:58:28.703]    <block atomic="false" info="">
[18:58:28.703]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:58:28.707]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:58:28.707]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:58:28.707]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:58:28.709]      __ap = 0; //lets make sure we reset the access point selection
[18:58:28.709]        // -> [__ap <= 0x00000000]
[18:58:28.709]    </block>
[18:58:28.709]  </sequence>
[18:58:28.709]  
[18:58:28.733]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:58:28.733]  
[18:58:28.733]  <debugvars>
[18:58:28.733]    // Pre-defined
[18:58:28.733]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:58:28.733]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:58:28.733]    __dp=0x00000000
[18:58:28.733]    __ap=0x00000000
[18:58:28.733]    __traceout=0x00000000      (Trace Disabled)
[18:58:28.733]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:58:28.733]    __FlashAddr=0x00000000
[18:58:28.733]    __FlashLen=0x00000000
[18:58:28.733]    __FlashArg=0x00000000
[18:58:28.733]    __FlashOp=0x00000000
[18:58:28.733]    __Result=0x00000000
[18:58:28.733]  </debugvars>
[18:58:28.733]  
[18:58:28.733]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:58:28.733]    <block atomic="false" info="">
[18:58:28.733]      __var deviceID = 0;
[18:58:28.733]        // -> [deviceID <= 0x00000000]
[18:58:28.733]      __var version = 0;
[18:58:28.733]        // -> [version <= 0x00000000]
[18:58:28.733]      __var partNum = 0;
[18:58:28.733]        // -> [partNum <= 0x00000000]
[18:58:28.733]      __var manuf = 0;
[18:58:28.733]        // -> [manuf <= 0x00000000]
[18:58:28.733]      __var isMSPM0G1X0X_G3X0X = 0;
[18:58:28.735]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:58:28.735]      __var isProduction = 0;
[18:58:28.735]        // -> [isProduction <= 0x00000000]
[18:58:28.735]      __var continueId = 0;
[18:58:28.735]        // -> [continueId <= 0x00000000]
[18:58:28.735]      deviceID =   Read32(0x41C40004);
[18:58:28.740]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:58:28.740]        // -> [deviceID <= 0x2BB8802F]
[18:58:28.740]      version = deviceID >> 28;
[18:58:28.740]        // -> [version <= 0x00000002]
[18:58:28.740]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:58:28.740]        // -> [partNum <= 0x0000BB88]
[18:58:28.740]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:58:28.740]        // -> [manuf <= 0x00000017]
[18:58:28.740]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:58:28.740]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:58:28.740]      isProduction = (version > 0);
[18:58:28.740]        // -> [isProduction <= 0x00000001]
[18:58:28.740]    </block>
[18:58:28.740]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:58:28.740]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:58:28.740]        // =>  FALSE
[18:58:28.740]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:58:28.740]    </control>
[18:58:28.740]    <control if="continueId == 4" while="" timeout="0" info="">
[18:58:28.740]      // if-block "continueId == 4"
[18:58:28.740]        // =>  FALSE
[18:58:28.740]      // skip if-block "continueId == 4"
[18:58:28.741]    </control>
[18:58:28.741]    <control if="!isProduction" while="" timeout="0" info="">
[18:58:28.741]      // if-block "!isProduction"
[18:58:28.741]        // =>  FALSE
[18:58:28.741]      // skip if-block "!isProduction"
[18:58:28.741]    </control>
[18:58:28.741]  </sequence>
[18:58:28.741]  
[18:59:44.154]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[18:59:44.154]  
[18:59:44.154]  <debugvars>
[18:59:44.154]    // Pre-defined
[18:59:44.154]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:59:44.154]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:59:44.154]    __dp=0x00000000
[18:59:44.154]    __ap=0x00000000
[18:59:44.154]    __traceout=0x00000000      (Trace Disabled)
[18:59:44.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:59:44.155]    __FlashAddr=0x00000000
[18:59:44.155]    __FlashLen=0x00000000
[18:59:44.155]    __FlashArg=0x00000000
[18:59:44.155]    __FlashOp=0x00000000
[18:59:44.155]    __Result=0x00000000
[18:59:44.155]  </debugvars>
[18:59:44.155]  
[18:59:44.155]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[18:59:44.155]    <block atomic="false" info="">
[18:59:44.155]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[18:59:44.155]        // -> [isSWJ <= 0x00000001]
[18:59:44.155]      __var hasDormant = __protocol & 0x00020000;
[18:59:44.155]        // -> [hasDormant <= 0x00000000]
[18:59:44.155]      __var protType   = __protocol & 0x0000FFFF;
[18:59:44.155]        // -> [protType <= 0x00000002]
[18:59:44.155]    </block>
[18:59:44.156]    <control if="protType == 1" while="" timeout="0" info="">
[18:59:44.156]      // if-block "protType == 1"
[18:59:44.156]        // =>  FALSE
[18:59:44.156]      // skip if-block "protType == 1"
[18:59:44.156]    </control>
[18:59:44.156]    <control if="protType == 2" while="" timeout="0" info="">
[18:59:44.156]      // if-block "protType == 2"
[18:59:44.156]        // =>  TRUE
[18:59:44.156]      <control if="isSWJ" while="" timeout="0" info="">
[18:59:44.156]        // if-block "isSWJ"
[18:59:44.156]          // =>  TRUE
[18:59:44.156]        <control if="hasDormant" while="" timeout="0" info="">
[18:59:44.156]          // if-block "hasDormant"
[18:59:44.156]            // =>  FALSE
[18:59:44.156]          // skip if-block "hasDormant"
[18:59:44.156]        </control>
[18:59:44.156]        <control if="!hasDormant" while="" timeout="0" info="">
[18:59:44.156]          // if-block "!hasDormant"
[18:59:44.156]            // =>  TRUE
[18:59:44.157]          <block atomic="false" info="">
[18:59:44.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[18:59:44.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:59:44.162]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[18:59:44.163]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[18:59:44.163]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[18:59:44.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:59:44.165]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[18:59:44.169]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[18:59:44.169]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[18:59:44.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[18:59:44.173]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[18:59:44.176]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[18:59:44.177]          </block>
[18:59:44.177]          // end if-block "!hasDormant"
[18:59:44.177]        </control>
[18:59:44.177]        // end if-block "isSWJ"
[18:59:44.177]      </control>
[18:59:44.177]      <control if="!isSWJ" while="" timeout="0" info="">
[18:59:44.177]        // if-block "!isSWJ"
[18:59:44.177]          // =>  FALSE
[18:59:44.177]        // skip if-block "!isSWJ"
[18:59:44.177]      </control>
[18:59:44.177]      <block atomic="false" info="">
[18:59:44.177]        ReadDP(0x0);
[18:59:44.179]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[18:59:44.180]      </block>
[18:59:44.180]      // end if-block "protType == 2"
[18:59:44.180]    </control>
[18:59:44.180]  </sequence>
[18:59:44.180]  
[18:59:44.182]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[18:59:44.182]  
[18:59:44.182]  <debugvars>
[18:59:44.182]    // Pre-defined
[18:59:44.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:59:44.182]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:59:44.182]    __dp=0x00000000
[18:59:44.182]    __ap=0x00000000
[18:59:44.183]    __traceout=0x00000000      (Trace Disabled)
[18:59:44.183]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:59:44.183]    __FlashAddr=0x00000000
[18:59:44.183]    __FlashLen=0x00000000
[18:59:44.183]    __FlashArg=0x00000000
[18:59:44.183]    __FlashOp=0x00000000
[18:59:44.183]    __Result=0x00000000
[18:59:44.183]  </debugvars>
[18:59:44.183]  
[18:59:44.183]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[18:59:44.183]    <block atomic="false" info="">
[18:59:44.183]      __var SW_DP_ABORT       = 0x0;
[18:59:44.183]        // -> [SW_DP_ABORT <= 0x00000000]
[18:59:44.183]      __var DP_CTRL_STAT      = 0x4;
[18:59:44.183]        // -> [DP_CTRL_STAT <= 0x00000004]
[18:59:44.183]      __var DP_SELECT         = 0x8;
[18:59:44.183]        // -> [DP_SELECT <= 0x00000008]
[18:59:44.183]      __var powered_down      = 0;
[18:59:44.183]        // -> [powered_down <= 0x00000000]
[18:59:44.183]      WriteDP(DP_SELECT, 0x00000000);
[18:59:44.188]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[18:59:44.188]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[18:59:44.191]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[18:59:44.192]        // -> [powered_down <= 0x00000001]
[18:59:44.192]    </block>
[18:59:44.192]    <control if="powered_down" while="" timeout="0" info="">
[18:59:44.192]      // if-block "powered_down"
[18:59:44.192]        // =>  TRUE
[18:59:44.192]      <block atomic="false" info="">
[18:59:44.192]        Message(0, "Debug/System power-up request sent");
[18:59:44.193]        WriteDP(DP_CTRL_STAT, 0x50000000);
[18:59:44.199]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[18:59:44.199]      </block>
[18:59:44.199]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[18:59:44.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[18:59:44.201]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[18:59:44.201]        // while-condition  =>  FALSE
[18:59:44.201]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[18:59:44.201]      </control>
[18:59:44.201]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[18:59:44.202]        // if-block "(__protocol & 0xFFFF) == 1"
[18:59:44.202]          // =>  FALSE
[18:59:44.202]        // skip if-block "(__protocol & 0xFFFF) == 1"
[18:59:44.202]      </control>
[18:59:44.202]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[18:59:44.202]        // if-block "(__protocol & 0xFFFF) == 2"
[18:59:44.202]          // =>  TRUE
[18:59:44.202]        <block atomic="false" info="">
[18:59:44.202]          Message(0, "executing SWD power up");
[18:59:44.206]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[18:59:44.209]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[18:59:44.209]          WriteDP(SW_DP_ABORT, 0x0000001E);
[18:59:44.210]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[18:59:44.211]        </block>
[18:59:44.211]        // end if-block "(__protocol & 0xFFFF) == 2"
[18:59:44.211]      </control>
[18:59:44.211]      // end if-block "powered_down"
[18:59:44.211]    </control>
[18:59:44.211]    <block atomic="false" info="">
[18:59:44.211]      __var DEBUG_PORT_VAL    = 0;
[18:59:44.211]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[18:59:44.211]      __var ACCESS_POINT_VAL  = 0;
[18:59:44.211]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[18:59:44.211]      __ap = 1; 
[18:59:44.211]        // -> [__ap <= 0x00000001]
[18:59:44.211]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[18:59:44.218]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[18:59:44.219]      __ap = 4;
[18:59:44.219]        // -> [__ap <= 0x00000004]
[18:59:44.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:59:44.222]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[18:59:44.222]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[18:59:44.222]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:59:44.224]    </block>
[18:59:44.224]    <block atomic="false" info="">
[18:59:44.224]      __var nReset = 0x80;
[18:59:44.224]        // -> [nReset <= 0x00000080]
[18:59:44.224]      __var canReadPins = 0;
[18:59:44.224]        // -> [canReadPins <= 0x00000000]
[18:59:44.224]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[18:59:44.227]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[18:59:44.227]        // -> [canReadPins <= 0x00000001]
[18:59:44.227]    </block>
[18:59:44.227]    <control if="" while="1" timeout="200" info="">
[18:59:44.227]      // while "1"  (timeout="200")
[18:59:44.227]      // while-condition  =>  TRUE
[18:59:44.227]      // while "1"  (timeout="200")
[18:59:44.227]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.228]      // while "1"  (timeout="200")
[18:59:44.228]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.229]      // while-condition  =>  TRUE
[18:59:44.229]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.230]      // while-condition  =>  TRUE
[18:59:44.230]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.231]      // while-condition  =>  TRUE
[18:59:44.231]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.232]      // while "1"  (timeout="200")
[18:59:44.232]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.233]      // while "1"  (timeout="200")
[18:59:44.233]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.235]      // while-condition  =>  TRUE
[18:59:44.235]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.236]      // while "1"  (timeout="200")
[18:59:44.236]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.237]      // while-condition  =>  TRUE
[18:59:44.237]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.238]      // while-condition  =>  TRUE
[18:59:44.238]      // while "1"  (timeout="200")
[18:59:44.239]      // while-condition  =>  TRUE
[18:59:44.239]      // while "1"  (timeout="200")
[18:59:44.239]      // while  =>  TIMEOUT
[18:59:44.239]      // end while "1"
[18:59:44.239]    </control>
[18:59:44.239]    <control if="canReadPins" while="" timeout="0" info="">
[18:59:44.239]      // if-block "canReadPins"
[18:59:44.239]        // =>  TRUE
[18:59:44.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[18:59:44.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[18:59:44.241]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[18:59:44.241]        // while-condition  =>  FALSE
[18:59:44.241]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[18:59:44.241]      </control>
[18:59:44.241]      // end if-block "canReadPins"
[18:59:44.241]    </control>
[18:59:44.241]    <control if="!canReadPins" while="" timeout="0" info="">
[18:59:44.241]      // if-block "!canReadPins"
[18:59:44.241]        // =>  FALSE
[18:59:44.241]      // skip if-block "!canReadPins"
[18:59:44.241]    </control>
[18:59:44.241]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[18:59:44.241]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:59:44.241]        // =>  TRUE
[18:59:44.241]      <block atomic="false" info="">
[18:59:44.241]        WriteAP(0x00, 0x190008);
[18:59:44.245]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[18:59:44.245]        WriteAP(0xF0, 0x01);
[18:59:44.255]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[18:59:44.255]      </block>
[18:59:44.255]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[18:59:44.255]    </control>
[18:59:44.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[18:59:44.256]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:59:44.256]        // =>  FALSE
[18:59:44.256]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[18:59:44.256]    </control>
[18:59:44.256]    <block atomic="false" info="">
[18:59:44.256]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[18:59:44.266]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[18:59:44.266]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[18:59:44.266]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[18:59:44.267]      __ap = 0; //lets make sure we reset the access point selection
[18:59:44.267]        // -> [__ap <= 0x00000000]
[18:59:44.267]    </block>
[18:59:44.267]  </sequence>
[18:59:44.268]  
[18:59:44.301]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[18:59:44.301]  
[18:59:44.302]  <debugvars>
[18:59:44.302]    // Pre-defined
[18:59:44.302]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[18:59:44.302]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[18:59:44.302]    __dp=0x00000000
[18:59:44.302]    __ap=0x00000000
[18:59:44.302]    __traceout=0x00000000      (Trace Disabled)
[18:59:44.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[18:59:44.302]    __FlashAddr=0x00000000
[18:59:44.302]    __FlashLen=0x00000000
[18:59:44.302]    __FlashArg=0x00000000
[18:59:44.302]    __FlashOp=0x00000000
[18:59:44.302]    __Result=0x00000000
[18:59:44.302]  </debugvars>
[18:59:44.302]  
[18:59:44.302]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[18:59:44.302]    <block atomic="false" info="">
[18:59:44.302]      __var deviceID = 0;
[18:59:44.302]        // -> [deviceID <= 0x00000000]
[18:59:44.302]      __var version = 0;
[18:59:44.302]        // -> [version <= 0x00000000]
[18:59:44.302]      __var partNum = 0;
[18:59:44.302]        // -> [partNum <= 0x00000000]
[18:59:44.302]      __var manuf = 0;
[18:59:44.303]        // -> [manuf <= 0x00000000]
[18:59:44.303]      __var isMSPM0G1X0X_G3X0X = 0;
[18:59:44.303]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[18:59:44.303]      __var isProduction = 0;
[18:59:44.303]        // -> [isProduction <= 0x00000000]
[18:59:44.303]      __var continueId = 0;
[18:59:44.303]        // -> [continueId <= 0x00000000]
[18:59:44.303]      deviceID =   Read32(0x41C40004);
[18:59:44.309]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[18:59:44.310]        // -> [deviceID <= 0x2BB8802F]
[18:59:44.310]      version = deviceID >> 28;
[18:59:44.310]        // -> [version <= 0x00000002]
[18:59:44.310]      partNum = (deviceID & 0x0FFFF000) >> 12;
[18:59:44.310]        // -> [partNum <= 0x0000BB88]
[18:59:44.310]      manuf = (deviceID & 0x00000FFE) >> 1;
[18:59:44.310]        // -> [manuf <= 0x00000017]
[18:59:44.310]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[18:59:44.310]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[18:59:44.310]      isProduction = (version > 0);
[18:59:44.310]        // -> [isProduction <= 0x00000001]
[18:59:44.310]    </block>
[18:59:44.310]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[18:59:44.310]      // if-block "!isMSPM0G1X0X_G3X0X"
[18:59:44.310]        // =>  FALSE
[18:59:44.310]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[18:59:44.310]    </control>
[18:59:44.310]    <control if="continueId == 4" while="" timeout="0" info="">
[18:59:44.310]      // if-block "continueId == 4"
[18:59:44.310]        // =>  FALSE
[18:59:44.310]      // skip if-block "continueId == 4"
[18:59:44.311]    </control>
[18:59:44.311]    <control if="!isProduction" while="" timeout="0" info="">
[18:59:44.311]      // if-block "!isProduction"
[18:59:44.311]        // =>  FALSE
[18:59:44.311]      // skip if-block "!isProduction"
[18:59:44.311]    </control>
[18:59:44.311]  </sequence>
[18:59:44.311]  
[19:00:04.287]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:00:04.287]  
[19:00:04.287]  <debugvars>
[19:00:04.287]    // Pre-defined
[19:00:04.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:00:04.287]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:00:04.287]    __dp=0x00000000
[19:00:04.287]    __ap=0x00000000
[19:00:04.288]    __traceout=0x00000000      (Trace Disabled)
[19:00:04.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:00:04.288]    __FlashAddr=0x00000000
[19:00:04.288]    __FlashLen=0x00000000
[19:00:04.288]    __FlashArg=0x00000000
[19:00:04.288]    __FlashOp=0x00000000
[19:00:04.288]    __Result=0x00000000
[19:00:04.288]  </debugvars>
[19:00:04.288]  
[19:00:04.288]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:00:04.288]    <block atomic="false" info="">
[19:00:04.288]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:00:04.288]        // -> [isSWJ <= 0x00000001]
[19:00:04.288]      __var hasDormant = __protocol & 0x00020000;
[19:00:04.288]        // -> [hasDormant <= 0x00000000]
[19:00:04.288]      __var protType   = __protocol & 0x0000FFFF;
[19:00:04.288]        // -> [protType <= 0x00000002]
[19:00:04.288]    </block>
[19:00:04.289]    <control if="protType == 1" while="" timeout="0" info="">
[19:00:04.289]      // if-block "protType == 1"
[19:00:04.289]        // =>  FALSE
[19:00:04.289]      // skip if-block "protType == 1"
[19:00:04.289]    </control>
[19:00:04.289]    <control if="protType == 2" while="" timeout="0" info="">
[19:00:04.289]      // if-block "protType == 2"
[19:00:04.289]        // =>  TRUE
[19:00:04.289]      <control if="isSWJ" while="" timeout="0" info="">
[19:00:04.289]        // if-block "isSWJ"
[19:00:04.289]          // =>  TRUE
[19:00:04.289]        <control if="hasDormant" while="" timeout="0" info="">
[19:00:04.289]          // if-block "hasDormant"
[19:00:04.289]            // =>  FALSE
[19:00:04.289]          // skip if-block "hasDormant"
[19:00:04.289]        </control>
[19:00:04.289]        <control if="!hasDormant" while="" timeout="0" info="">
[19:00:04.290]          // if-block "!hasDormant"
[19:00:04.290]            // =>  TRUE
[19:00:04.290]          <block atomic="false" info="">
[19:00:04.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:00:04.292]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:00:04.292]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:00:04.293]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:00:04.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:00:04.298]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:00:04.298]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:00:04.299]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:00:04.299]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:00:04.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:00:04.301]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:00:04.302]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:00:04.302]          </block>
[19:00:04.302]          // end if-block "!hasDormant"
[19:00:04.303]        </control>
[19:00:04.303]        // end if-block "isSWJ"
[19:00:04.303]      </control>
[19:00:04.303]      <control if="!isSWJ" while="" timeout="0" info="">
[19:00:04.303]        // if-block "!isSWJ"
[19:00:04.304]          // =>  FALSE
[19:00:04.304]        // skip if-block "!isSWJ"
[19:00:04.304]      </control>
[19:00:04.304]      <block atomic="false" info="">
[19:00:04.304]        ReadDP(0x0);
[19:00:04.305]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:00:04.305]      </block>
[19:00:04.305]      // end if-block "protType == 2"
[19:00:04.305]    </control>
[19:00:04.305]  </sequence>
[19:00:04.305]  
[19:00:04.308]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:00:04.308]  
[19:00:04.308]  <debugvars>
[19:00:04.308]    // Pre-defined
[19:00:04.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:00:04.308]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:00:04.308]    __dp=0x00000000
[19:00:04.308]    __ap=0x00000000
[19:00:04.308]    __traceout=0x00000000      (Trace Disabled)
[19:00:04.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:00:04.308]    __FlashAddr=0x00000000
[19:00:04.309]    __FlashLen=0x00000000
[19:00:04.309]    __FlashArg=0x00000000
[19:00:04.309]    __FlashOp=0x00000000
[19:00:04.309]    __Result=0x00000000
[19:00:04.309]  </debugvars>
[19:00:04.309]  
[19:00:04.309]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:00:04.309]    <block atomic="false" info="">
[19:00:04.309]      __var SW_DP_ABORT       = 0x0;
[19:00:04.309]        // -> [SW_DP_ABORT <= 0x00000000]
[19:00:04.309]      __var DP_CTRL_STAT      = 0x4;
[19:00:04.309]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:00:04.309]      __var DP_SELECT         = 0x8;
[19:00:04.309]        // -> [DP_SELECT <= 0x00000008]
[19:00:04.309]      __var powered_down      = 0;
[19:00:04.309]        // -> [powered_down <= 0x00000000]
[19:00:04.309]      WriteDP(DP_SELECT, 0x00000000);
[19:00:04.313]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:00:04.313]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:00:04.313]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:00:04.313]        // -> [powered_down <= 0x00000001]
[19:00:04.315]    </block>
[19:00:04.315]    <control if="powered_down" while="" timeout="0" info="">
[19:00:04.315]      // if-block "powered_down"
[19:00:04.315]        // =>  TRUE
[19:00:04.315]      <block atomic="false" info="">
[19:00:04.315]        Message(0, "Debug/System power-up request sent");
[19:00:04.315]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:00:04.317]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:00:04.317]      </block>
[19:00:04.317]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:00:04.317]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:00:04.320]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:00:04.320]        // while-condition  =>  FALSE
[19:00:04.320]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:00:04.320]      </control>
[19:00:04.320]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:00:04.320]        // if-block "(__protocol & 0xFFFF) == 1"
[19:00:04.320]          // =>  FALSE
[19:00:04.321]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:00:04.321]      </control>
[19:00:04.321]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:00:04.321]        // if-block "(__protocol & 0xFFFF) == 2"
[19:00:04.321]          // =>  TRUE
[19:00:04.321]        <block atomic="false" info="">
[19:00:04.321]          Message(0, "executing SWD power up");
[19:00:04.323]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:00:04.325]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:00:04.325]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:00:04.329]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:00:04.329]        </block>
[19:00:04.329]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:00:04.329]      </control>
[19:00:04.329]      // end if-block "powered_down"
[19:00:04.329]    </control>
[19:00:04.329]    <block atomic="false" info="">
[19:00:04.329]      __var DEBUG_PORT_VAL    = 0;
[19:00:04.329]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:00:04.329]      __var ACCESS_POINT_VAL  = 0;
[19:00:04.329]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:00:04.329]      __ap = 1; 
[19:00:04.329]        // -> [__ap <= 0x00000001]
[19:00:04.329]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:00:04.340]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:00:04.340]      __ap = 4;
[19:00:04.340]        // -> [__ap <= 0x00000004]
[19:00:04.340]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:00:04.344]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:00:04.344]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:00:04.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:00:04.346]    </block>
[19:00:04.347]    <block atomic="false" info="">
[19:00:04.347]      __var nReset = 0x80;
[19:00:04.347]        // -> [nReset <= 0x00000080]
[19:00:04.347]      __var canReadPins = 0;
[19:00:04.347]        // -> [canReadPins <= 0x00000000]
[19:00:04.347]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:00:04.353]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:00:04.353]        // -> [canReadPins <= 0x00000001]
[19:00:04.353]    </block>
[19:00:04.353]    <control if="" while="1" timeout="200" info="">
[19:00:04.353]      // while "1"  (timeout="200")
[19:00:04.353]      // while-condition  =>  TRUE
[19:00:04.353]      // while "1"  (timeout="200")
[19:00:04.353]      // while-condition  =>  TRUE
[19:00:04.353]      // while "1"  (timeout="200")
[19:00:04.353]      // while-condition  =>  TRUE
[19:00:04.353]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.355]      // while-condition  =>  TRUE
[19:00:04.355]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.356]      // while-condition  =>  TRUE
[19:00:04.356]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.357]      // while-condition  =>  TRUE
[19:00:04.357]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.358]      // while-condition  =>  TRUE
[19:00:04.358]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.359]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.359]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.359]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.359]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.359]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.359]      // while "1"  (timeout="200")
[19:00:04.359]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.360]      // while-condition  =>  TRUE
[19:00:04.360]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.361]      // while-condition  =>  TRUE
[19:00:04.361]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.362]      // while "1"  (timeout="200")
[19:00:04.362]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.363]      // while "1"  (timeout="200")
[19:00:04.363]      // while-condition  =>  TRUE
[19:00:04.364]      // while "1"  (timeout="200")
[19:00:04.364]      // while  =>  TIMEOUT
[19:00:04.364]      // end while "1"
[19:00:04.364]    </control>
[19:00:04.364]    <control if="canReadPins" while="" timeout="0" info="">
[19:00:04.364]      // if-block "canReadPins"
[19:00:04.364]        // =>  TRUE
[19:00:04.364]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:00:04.364]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:00:04.365]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:00:04.365]        // while-condition  =>  FALSE
[19:00:04.365]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:00:04.365]      </control>
[19:00:04.366]      // end if-block "canReadPins"
[19:00:04.366]    </control>
[19:00:04.366]    <control if="!canReadPins" while="" timeout="0" info="">
[19:00:04.366]      // if-block "!canReadPins"
[19:00:04.366]        // =>  FALSE
[19:00:04.366]      // skip if-block "!canReadPins"
[19:00:04.366]    </control>
[19:00:04.367]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:00:04.367]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:00:04.367]        // =>  TRUE
[19:00:04.367]      <block atomic="false" info="">
[19:00:04.367]        WriteAP(0x00, 0x190008);
[19:00:04.369]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:00:04.369]        WriteAP(0xF0, 0x01);
[19:00:04.372]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:00:04.373]      </block>
[19:00:04.373]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:00:04.373]    </control>
[19:00:04.373]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:00:04.373]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:00:04.373]        // =>  FALSE
[19:00:04.373]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:00:04.373]    </control>
[19:00:04.373]    <block atomic="false" info="">
[19:00:04.373]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:00:04.378]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:00:04.378]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:00:04.378]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:00:04.381]      __ap = 0; //lets make sure we reset the access point selection
[19:00:04.381]        // -> [__ap <= 0x00000000]
[19:00:04.381]    </block>
[19:00:04.381]  </sequence>
[19:00:04.381]  
[19:00:04.418]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:00:04.418]  
[19:00:04.418]  <debugvars>
[19:00:04.419]    // Pre-defined
[19:00:04.419]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:00:04.419]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:00:04.419]    __dp=0x00000000
[19:00:04.419]    __ap=0x00000000
[19:00:04.419]    __traceout=0x00000000      (Trace Disabled)
[19:00:04.419]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:00:04.419]    __FlashAddr=0x00000000
[19:00:04.419]    __FlashLen=0x00000000
[19:00:04.419]    __FlashArg=0x00000000
[19:00:04.419]    __FlashOp=0x00000000
[19:00:04.419]    __Result=0x00000000
[19:00:04.419]  </debugvars>
[19:00:04.419]  
[19:00:04.419]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:00:04.419]    <block atomic="false" info="">
[19:00:04.419]      __var deviceID = 0;
[19:00:04.419]        // -> [deviceID <= 0x00000000]
[19:00:04.419]      __var version = 0;
[19:00:04.419]        // -> [version <= 0x00000000]
[19:00:04.419]      __var partNum = 0;
[19:00:04.419]        // -> [partNum <= 0x00000000]
[19:00:04.419]      __var manuf = 0;
[19:00:04.419]        // -> [manuf <= 0x00000000]
[19:00:04.419]      __var isMSPM0G1X0X_G3X0X = 0;
[19:00:04.420]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:00:04.420]      __var isProduction = 0;
[19:00:04.420]        // -> [isProduction <= 0x00000000]
[19:00:04.420]      __var continueId = 0;
[19:00:04.420]        // -> [continueId <= 0x00000000]
[19:00:04.420]      deviceID =   Read32(0x41C40004);
[19:00:04.433]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:00:04.433]        // -> [deviceID <= 0x2BB8802F]
[19:00:04.433]      version = deviceID >> 28;
[19:00:04.433]        // -> [version <= 0x00000002]
[19:00:04.433]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:00:04.433]        // -> [partNum <= 0x0000BB88]
[19:00:04.433]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:00:04.433]        // -> [manuf <= 0x00000017]
[19:00:04.433]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:00:04.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:00:04.435]      isProduction = (version > 0);
[19:00:04.435]        // -> [isProduction <= 0x00000001]
[19:00:04.435]    </block>
[19:00:04.435]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:00:04.435]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:00:04.435]        // =>  FALSE
[19:00:04.435]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:00:04.435]    </control>
[19:00:04.435]    <control if="continueId == 4" while="" timeout="0" info="">
[19:00:04.435]      // if-block "continueId == 4"
[19:00:04.435]        // =>  FALSE
[19:00:04.435]      // skip if-block "continueId == 4"
[19:00:04.435]    </control>
[19:00:04.435]    <control if="!isProduction" while="" timeout="0" info="">
[19:00:04.435]      // if-block "!isProduction"
[19:00:04.435]        // =>  FALSE
[19:00:04.435]      // skip if-block "!isProduction"
[19:00:04.435]    </control>
[19:00:04.435]  </sequence>
[19:00:04.435]  
[19:01:22.644]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:01:22.644]  
[19:01:22.645]  <debugvars>
[19:01:22.645]    // Pre-defined
[19:01:22.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:22.645]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:22.645]    __dp=0x00000000
[19:01:22.645]    __ap=0x00000000
[19:01:22.645]    __traceout=0x00000000      (Trace Disabled)
[19:01:22.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:22.645]    __FlashAddr=0x00000000
[19:01:22.645]    __FlashLen=0x00000000
[19:01:22.645]    __FlashArg=0x00000000
[19:01:22.645]    __FlashOp=0x00000000
[19:01:22.645]    __Result=0x00000000
[19:01:22.646]  </debugvars>
[19:01:22.646]  
[19:01:22.646]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:01:22.646]    <block atomic="false" info="">
[19:01:22.646]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:01:22.646]        // -> [isSWJ <= 0x00000001]
[19:01:22.646]      __var hasDormant = __protocol & 0x00020000;
[19:01:22.646]        // -> [hasDormant <= 0x00000000]
[19:01:22.646]      __var protType   = __protocol & 0x0000FFFF;
[19:01:22.646]        // -> [protType <= 0x00000002]
[19:01:22.646]    </block>
[19:01:22.646]    <control if="protType == 1" while="" timeout="0" info="">
[19:01:22.646]      // if-block "protType == 1"
[19:01:22.646]        // =>  FALSE
[19:01:22.646]      // skip if-block "protType == 1"
[19:01:22.647]    </control>
[19:01:22.647]    <control if="protType == 2" while="" timeout="0" info="">
[19:01:22.647]      // if-block "protType == 2"
[19:01:22.647]        // =>  TRUE
[19:01:22.647]      <control if="isSWJ" while="" timeout="0" info="">
[19:01:22.647]        // if-block "isSWJ"
[19:01:22.647]          // =>  TRUE
[19:01:22.647]        <control if="hasDormant" while="" timeout="0" info="">
[19:01:22.648]          // if-block "hasDormant"
[19:01:22.648]            // =>  FALSE
[19:01:22.648]          // skip if-block "hasDormant"
[19:01:22.648]        </control>
[19:01:22.648]        <control if="!hasDormant" while="" timeout="0" info="">
[19:01:22.648]          // if-block "!hasDormant"
[19:01:22.648]            // =>  TRUE
[19:01:22.648]          <block atomic="false" info="">
[19:01:22.648]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:01:22.650]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:22.650]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:01:22.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:01:22.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:01:22.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:22.661]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:01:22.663]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:01:22.663]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:01:22.665]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:22.665]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:01:22.672]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:01:22.672]          </block>
[19:01:22.672]          // end if-block "!hasDormant"
[19:01:22.672]        </control>
[19:01:22.672]        // end if-block "isSWJ"
[19:01:22.672]      </control>
[19:01:22.672]      <control if="!isSWJ" while="" timeout="0" info="">
[19:01:22.672]        // if-block "!isSWJ"
[19:01:22.672]          // =>  FALSE
[19:01:22.672]        // skip if-block "!isSWJ"
[19:01:22.672]      </control>
[19:01:22.672]      <block atomic="false" info="">
[19:01:22.673]        ReadDP(0x0);
[19:01:22.677]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:01:22.677]      </block>
[19:01:22.678]      // end if-block "protType == 2"
[19:01:22.678]    </control>
[19:01:22.678]  </sequence>
[19:01:22.678]  
[19:01:22.685]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:01:22.685]  
[19:01:22.685]  <debugvars>
[19:01:22.685]    // Pre-defined
[19:01:22.685]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:22.685]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:22.685]    __dp=0x00000000
[19:01:22.685]    __ap=0x00000000
[19:01:22.685]    __traceout=0x00000000      (Trace Disabled)
[19:01:22.685]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:22.685]    __FlashAddr=0x00000000
[19:01:22.685]    __FlashLen=0x00000000
[19:01:22.686]    __FlashArg=0x00000000
[19:01:22.686]    __FlashOp=0x00000000
[19:01:22.686]    __Result=0x00000000
[19:01:22.686]  </debugvars>
[19:01:22.686]  
[19:01:22.686]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:01:22.686]    <block atomic="false" info="">
[19:01:22.686]      __var SW_DP_ABORT       = 0x0;
[19:01:22.686]        // -> [SW_DP_ABORT <= 0x00000000]
[19:01:22.686]      __var DP_CTRL_STAT      = 0x4;
[19:01:22.686]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:01:22.686]      __var DP_SELECT         = 0x8;
[19:01:22.686]        // -> [DP_SELECT <= 0x00000008]
[19:01:22.686]      __var powered_down      = 0;
[19:01:22.686]        // -> [powered_down <= 0x00000000]
[19:01:22.686]      WriteDP(DP_SELECT, 0x00000000);
[19:01:22.691]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:01:22.691]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:01:22.692]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:01:22.692]        // -> [powered_down <= 0x00000001]
[19:01:22.693]    </block>
[19:01:22.693]    <control if="powered_down" while="" timeout="0" info="">
[19:01:22.693]      // if-block "powered_down"
[19:01:22.693]        // =>  TRUE
[19:01:22.693]      <block atomic="false" info="">
[19:01:22.693]        Message(0, "Debug/System power-up request sent");
[19:01:22.694]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:01:22.701]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:01:22.701]      </block>
[19:01:22.701]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:01:22.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:01:22.704]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:01:22.704]        // while-condition  =>  FALSE
[19:01:22.704]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:01:22.704]      </control>
[19:01:22.704]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:01:22.704]        // if-block "(__protocol & 0xFFFF) == 1"
[19:01:22.704]          // =>  FALSE
[19:01:22.704]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:01:22.705]      </control>
[19:01:22.705]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:01:22.705]        // if-block "(__protocol & 0xFFFF) == 2"
[19:01:22.705]          // =>  TRUE
[19:01:22.705]        <block atomic="false" info="">
[19:01:22.705]          Message(0, "executing SWD power up");
[19:01:22.723]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:01:22.731]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:01:22.731]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:01:22.733]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:01:22.733]        </block>
[19:01:22.733]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:01:22.733]      </control>
[19:01:22.733]      // end if-block "powered_down"
[19:01:22.733]    </control>
[19:01:22.733]    <block atomic="false" info="">
[19:01:22.733]      __var DEBUG_PORT_VAL    = 0;
[19:01:22.733]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:01:22.734]      __var ACCESS_POINT_VAL  = 0;
[19:01:22.734]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:01:22.734]      __ap = 1; 
[19:01:22.734]        // -> [__ap <= 0x00000001]
[19:01:22.734]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:01:22.739]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:01:22.739]      __ap = 4;
[19:01:22.739]        // -> [__ap <= 0x00000004]
[19:01:22.739]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:22.747]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:01:22.748]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:01:22.748]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:22.750]    </block>
[19:01:22.750]    <block atomic="false" info="">
[19:01:22.750]      __var nReset = 0x80;
[19:01:22.750]        // -> [nReset <= 0x00000080]
[19:01:22.750]      __var canReadPins = 0;
[19:01:22.750]        // -> [canReadPins <= 0x00000000]
[19:01:22.751]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:01:22.753]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:01:22.753]        // -> [canReadPins <= 0x00000001]
[19:01:22.753]    </block>
[19:01:22.754]    <control if="" while="1" timeout="200" info="">
[19:01:22.754]      // while "1"  (timeout="200")
[19:01:22.754]      // while-condition  =>  TRUE
[19:01:22.754]      // while "1"  (timeout="200")
[19:01:22.755]      // while-condition  =>  TRUE
[19:01:22.755]      // while "1"  (timeout="200")
[19:01:22.755]      // while-condition  =>  TRUE
[19:01:22.755]      // while "1"  (timeout="200")
[19:01:22.755]      // while-condition  =>  TRUE
[19:01:22.755]      // while "1"  (timeout="200")
[19:01:22.755]      // while-condition  =>  TRUE
[19:01:22.755]      // while "1"  (timeout="200")
[19:01:22.755]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.756]      // while-condition  =>  TRUE
[19:01:22.756]      // while "1"  (timeout="200")
[19:01:22.757]      // while-condition  =>  TRUE
[19:01:22.757]      // while "1"  (timeout="200")
[19:01:22.757]      // while-condition  =>  TRUE
[19:01:22.757]      // while "1"  (timeout="200")
[19:01:22.757]      // while-condition  =>  TRUE
[19:01:22.757]      // while "1"  (timeout="200")
[19:01:22.757]      // while-condition  =>  TRUE
[19:01:22.757]      // while "1"  (timeout="200")
[19:01:22.757]      // while-condition  =>  TRUE
[19:01:22.758]      // while "1"  (timeout="200")
[19:01:22.758]      // while-condition  =>  TRUE
[19:01:22.758]      // while "1"  (timeout="200")
[19:01:22.758]      // while-condition  =>  TRUE
[19:01:22.758]      // while "1"  (timeout="200")
[19:01:22.758]      // while-condition  =>  TRUE
[19:01:22.758]      // while "1"  (timeout="200")
[19:01:22.758]      // while-condition  =>  TRUE
[19:01:22.758]      // while "1"  (timeout="200")
[19:01:22.758]      // while-condition  =>  TRUE
[19:01:22.758]      // while "1"  (timeout="200")
[19:01:22.758]      // while-condition  =>  TRUE
[19:01:22.759]      // while "1"  (timeout="200")
[19:01:22.759]      // while-condition  =>  TRUE
[19:01:22.759]      // while "1"  (timeout="200")
[19:01:22.759]      // while-condition  =>  TRUE
[19:01:22.759]      // while "1"  (timeout="200")
[19:01:22.759]      // while-condition  =>  TRUE
[19:01:22.759]      // while "1"  (timeout="200")
[19:01:22.759]      // while-condition  =>  TRUE
[19:01:22.759]      // while "1"  (timeout="200")
[19:01:22.759]      // while-condition  =>  TRUE
[19:01:22.759]      // while "1"  (timeout="200")
[19:01:22.759]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.760]      // while "1"  (timeout="200")
[19:01:22.760]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.761]      // while-condition  =>  TRUE
[19:01:22.761]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.762]      // while "1"  (timeout="200")
[19:01:22.762]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.763]      // while "1"  (timeout="200")
[19:01:22.763]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.764]      // while "1"  (timeout="200")
[19:01:22.764]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.765]      // while-condition  =>  TRUE
[19:01:22.765]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.767]      // while-condition  =>  TRUE
[19:01:22.767]      // while "1"  (timeout="200")
[19:01:22.768]      // while-condition  =>  TRUE
[19:01:22.768]      // while "1"  (timeout="200")
[19:01:22.768]      // while-condition  =>  TRUE
[19:01:22.768]      // while "1"  (timeout="200")
[19:01:22.768]      // while-condition  =>  TRUE
[19:01:22.768]      // while "1"  (timeout="200")
[19:01:22.768]      // while-condition  =>  TRUE
[19:01:22.768]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.769]      // while "1"  (timeout="200")
[19:01:22.769]      // while-condition  =>  TRUE
[19:01:22.770]      // while "1"  (timeout="200")
[19:01:22.770]      // while  =>  TIMEOUT
[19:01:22.770]      // end while "1"
[19:01:22.770]    </control>
[19:01:22.770]    <control if="canReadPins" while="" timeout="0" info="">
[19:01:22.770]      // if-block "canReadPins"
[19:01:22.770]        // =>  TRUE
[19:01:22.770]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:01:22.770]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:01:22.773]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:01:22.773]        // while-condition  =>  FALSE
[19:01:22.773]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:01:22.773]      </control>
[19:01:22.773]      // end if-block "canReadPins"
[19:01:22.773]    </control>
[19:01:22.773]    <control if="!canReadPins" while="" timeout="0" info="">
[19:01:22.773]      // if-block "!canReadPins"
[19:01:22.773]        // =>  FALSE
[19:01:22.773]      // skip if-block "!canReadPins"
[19:01:22.773]    </control>
[19:01:22.773]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:01:22.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:22.773]        // =>  TRUE
[19:01:22.773]      <block atomic="false" info="">
[19:01:22.773]        WriteAP(0x00, 0x190008);
[19:01:22.776]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:22.776]        WriteAP(0xF0, 0x01);
[19:01:22.783]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:22.783]      </block>
[19:01:22.784]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:22.784]    </control>
[19:01:22.784]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:01:22.784]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:22.784]        // =>  FALSE
[19:01:22.784]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:22.784]    </control>
[19:01:22.784]    <block atomic="false" info="">
[19:01:22.784]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:22.791]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:01:22.791]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:01:22.791]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:22.793]      __ap = 0; //lets make sure we reset the access point selection
[19:01:22.795]        // -> [__ap <= 0x00000000]
[19:01:22.795]    </block>
[19:01:22.795]  </sequence>
[19:01:22.795]  
[19:01:22.827]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:01:22.827]  
[19:01:22.827]  <debugvars>
[19:01:22.827]    // Pre-defined
[19:01:22.828]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:22.828]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:22.828]    __dp=0x00000000
[19:01:22.828]    __ap=0x00000000
[19:01:22.828]    __traceout=0x00000000      (Trace Disabled)
[19:01:22.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:22.828]    __FlashAddr=0x00000000
[19:01:22.828]    __FlashLen=0x00000000
[19:01:22.828]    __FlashArg=0x00000000
[19:01:22.828]    __FlashOp=0x00000000
[19:01:22.828]    __Result=0x00000000
[19:01:22.828]  </debugvars>
[19:01:22.828]  
[19:01:22.828]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:01:22.828]    <block atomic="false" info="">
[19:01:22.828]      __var deviceID = 0;
[19:01:22.828]        // -> [deviceID <= 0x00000000]
[19:01:22.828]      __var version = 0;
[19:01:22.828]        // -> [version <= 0x00000000]
[19:01:22.828]      __var partNum = 0;
[19:01:22.828]        // -> [partNum <= 0x00000000]
[19:01:22.828]      __var manuf = 0;
[19:01:22.828]        // -> [manuf <= 0x00000000]
[19:01:22.828]      __var isMSPM0G1X0X_G3X0X = 0;
[19:01:22.828]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:01:22.828]      __var isProduction = 0;
[19:01:22.828]        // -> [isProduction <= 0x00000000]
[19:01:22.829]      __var continueId = 0;
[19:01:22.829]        // -> [continueId <= 0x00000000]
[19:01:22.829]      deviceID =   Read32(0x41C40004);
[19:01:22.835]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:01:22.835]        // -> [deviceID <= 0x2BB8802F]
[19:01:22.835]      version = deviceID >> 28;
[19:01:22.835]        // -> [version <= 0x00000002]
[19:01:22.835]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:01:22.835]        // -> [partNum <= 0x0000BB88]
[19:01:22.836]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:01:22.836]        // -> [manuf <= 0x00000017]
[19:01:22.836]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:01:22.836]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:01:22.836]      isProduction = (version > 0);
[19:01:22.836]        // -> [isProduction <= 0x00000001]
[19:01:22.836]    </block>
[19:01:22.836]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:01:22.836]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:01:22.836]        // =>  FALSE
[19:01:22.836]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:01:22.836]    </control>
[19:01:22.836]    <control if="continueId == 4" while="" timeout="0" info="">
[19:01:22.836]      // if-block "continueId == 4"
[19:01:22.836]        // =>  FALSE
[19:01:22.836]      // skip if-block "continueId == 4"
[19:01:22.836]    </control>
[19:01:22.836]    <control if="!isProduction" while="" timeout="0" info="">
[19:01:22.836]      // if-block "!isProduction"
[19:01:22.836]        // =>  FALSE
[19:01:22.836]      // skip if-block "!isProduction"
[19:01:22.836]    </control>
[19:01:22.836]  </sequence>
[19:01:22.836]  
[19:05:07.781]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:05:07.781]  
[19:05:07.781]  <debugvars>
[19:05:07.781]    // Pre-defined
[19:05:07.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:05:07.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:05:07.781]    __dp=0x00000000
[19:05:07.781]    __ap=0x00000000
[19:05:07.781]    __traceout=0x00000000      (Trace Disabled)
[19:05:07.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:05:07.781]    __FlashAddr=0x00000000
[19:05:07.781]    __FlashLen=0x00000000
[19:05:07.781]    __FlashArg=0x00000000
[19:05:07.782]    __FlashOp=0x00000000
[19:05:07.782]    __Result=0x00000000
[19:05:07.782]  </debugvars>
[19:05:07.782]  
[19:05:07.782]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:05:07.782]    <block atomic="false" info="">
[19:05:07.782]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:05:07.782]        // -> [isSWJ <= 0x00000001]
[19:05:07.782]      __var hasDormant = __protocol & 0x00020000;
[19:05:07.782]        // -> [hasDormant <= 0x00000000]
[19:05:07.782]      __var protType   = __protocol & 0x0000FFFF;
[19:05:07.783]        // -> [protType <= 0x00000002]
[19:05:07.783]    </block>
[19:05:07.783]    <control if="protType == 1" while="" timeout="0" info="">
[19:05:07.783]      // if-block "protType == 1"
[19:05:07.783]        // =>  FALSE
[19:05:07.783]      // skip if-block "protType == 1"
[19:05:07.783]    </control>
[19:05:07.783]    <control if="protType == 2" while="" timeout="0" info="">
[19:05:07.783]      // if-block "protType == 2"
[19:05:07.783]        // =>  TRUE
[19:05:07.783]      <control if="isSWJ" while="" timeout="0" info="">
[19:05:07.783]        // if-block "isSWJ"
[19:05:07.783]          // =>  TRUE
[19:05:07.783]        <control if="hasDormant" while="" timeout="0" info="">
[19:05:07.783]          // if-block "hasDormant"
[19:05:07.783]            // =>  FALSE
[19:05:07.783]          // skip if-block "hasDormant"
[19:05:07.783]        </control>
[19:05:07.783]        <control if="!hasDormant" while="" timeout="0" info="">
[19:05:07.783]          // if-block "!hasDormant"
[19:05:07.783]            // =>  TRUE
[19:05:07.784]          <block atomic="false" info="">
[19:05:07.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:05:07.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:05:07.791]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:05:07.792]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:05:07.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:05:07.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:05:07.793]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:05:07.795]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:05:07.796]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:05:07.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:05:07.802]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:05:07.803]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:05:07.803]          </block>
[19:05:07.803]          // end if-block "!hasDormant"
[19:05:07.803]        </control>
[19:05:07.803]        // end if-block "isSWJ"
[19:05:07.803]      </control>
[19:05:07.803]      <control if="!isSWJ" while="" timeout="0" info="">
[19:05:07.803]        // if-block "!isSWJ"
[19:05:07.803]          // =>  FALSE
[19:05:07.803]        // skip if-block "!isSWJ"
[19:05:07.803]      </control>
[19:05:07.803]      <block atomic="false" info="">
[19:05:07.803]        ReadDP(0x0);
[19:05:07.805]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:05:07.805]      </block>
[19:05:07.805]      // end if-block "protType == 2"
[19:05:07.805]    </control>
[19:05:07.805]  </sequence>
[19:05:07.805]  
[19:05:07.810]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:05:07.810]  
[19:05:07.810]  <debugvars>
[19:05:07.810]    // Pre-defined
[19:05:07.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:05:07.810]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:05:07.810]    __dp=0x00000000
[19:05:07.810]    __ap=0x00000000
[19:05:07.810]    __traceout=0x00000000      (Trace Disabled)
[19:05:07.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:05:07.810]    __FlashAddr=0x00000000
[19:05:07.810]    __FlashLen=0x00000000
[19:05:07.811]    __FlashArg=0x00000000
[19:05:07.811]    __FlashOp=0x00000000
[19:05:07.811]    __Result=0x00000000
[19:05:07.811]  </debugvars>
[19:05:07.811]  
[19:05:07.811]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:05:07.811]    <block atomic="false" info="">
[19:05:07.811]      __var SW_DP_ABORT       = 0x0;
[19:05:07.811]        // -> [SW_DP_ABORT <= 0x00000000]
[19:05:07.811]      __var DP_CTRL_STAT      = 0x4;
[19:05:07.811]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:05:07.811]      __var DP_SELECT         = 0x8;
[19:05:07.811]        // -> [DP_SELECT <= 0x00000008]
[19:05:07.811]      __var powered_down      = 0;
[19:05:07.811]        // -> [powered_down <= 0x00000000]
[19:05:07.811]      WriteDP(DP_SELECT, 0x00000000);
[19:05:07.813]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:05:07.813]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:05:07.815]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:05:07.815]        // -> [powered_down <= 0x00000001]
[19:05:07.815]    </block>
[19:05:07.815]    <control if="powered_down" while="" timeout="0" info="">
[19:05:07.815]      // if-block "powered_down"
[19:05:07.815]        // =>  TRUE
[19:05:07.815]      <block atomic="false" info="">
[19:05:07.816]        Message(0, "Debug/System power-up request sent");
[19:05:07.820]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:05:07.821]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:05:07.822]      </block>
[19:05:07.822]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:05:07.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:05:07.823]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:05:07.823]        // while-condition  =>  FALSE
[19:05:07.823]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:05:07.823]      </control>
[19:05:07.823]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:05:07.823]        // if-block "(__protocol & 0xFFFF) == 1"
[19:05:07.823]          // =>  FALSE
[19:05:07.823]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:05:07.824]      </control>
[19:05:07.824]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:05:07.824]        // if-block "(__protocol & 0xFFFF) == 2"
[19:05:07.824]          // =>  TRUE
[19:05:07.824]        <block atomic="false" info="">
[19:05:07.824]          Message(0, "executing SWD power up");
[19:05:07.825]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:05:07.826]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:05:07.826]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:05:07.831]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:05:07.831]        </block>
[19:05:07.831]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:05:07.831]      </control>
[19:05:07.831]      // end if-block "powered_down"
[19:05:07.831]    </control>
[19:05:07.831]    <block atomic="false" info="">
[19:05:07.831]      __var DEBUG_PORT_VAL    = 0;
[19:05:07.831]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:05:07.831]      __var ACCESS_POINT_VAL  = 0;
[19:05:07.831]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:05:07.831]      __ap = 1; 
[19:05:07.831]        // -> [__ap <= 0x00000001]
[19:05:07.831]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:05:07.835]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:05:07.835]      __ap = 4;
[19:05:07.835]        // -> [__ap <= 0x00000004]
[19:05:07.835]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:05:07.838]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:05:07.838]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:05:07.838]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:05:07.840]    </block>
[19:05:07.840]    <block atomic="false" info="">
[19:05:07.840]      __var nReset = 0x80;
[19:05:07.840]        // -> [nReset <= 0x00000080]
[19:05:07.840]      __var canReadPins = 0;
[19:05:07.840]        // -> [canReadPins <= 0x00000000]
[19:05:07.840]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:05:07.842]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:05:07.842]        // -> [canReadPins <= 0x00000001]
[19:05:07.842]    </block>
[19:05:07.842]    <control if="" while="1" timeout="200" info="">
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.842]      // while "1"  (timeout="200")
[19:05:07.842]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.843]      // while "1"  (timeout="200")
[19:05:07.843]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.844]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.844]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.844]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.844]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.844]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.844]      // while-condition  =>  TRUE
[19:05:07.844]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.845]      // while-condition  =>  TRUE
[19:05:07.845]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.846]      // while-condition  =>  TRUE
[19:05:07.846]      // while "1"  (timeout="200")
[19:05:07.847]      // while-condition  =>  TRUE
[19:05:07.847]      // while "1"  (timeout="200")
[19:05:07.847]      // while  =>  TIMEOUT
[19:05:07.847]      // end while "1"
[19:05:07.847]    </control>
[19:05:07.847]    <control if="canReadPins" while="" timeout="0" info="">
[19:05:07.847]      // if-block "canReadPins"
[19:05:07.847]        // =>  TRUE
[19:05:07.847]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:05:07.847]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:05:07.850]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:05:07.850]        // while-condition  =>  FALSE
[19:05:07.850]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:05:07.850]      </control>
[19:05:07.850]      // end if-block "canReadPins"
[19:05:07.850]    </control>
[19:05:07.850]    <control if="!canReadPins" while="" timeout="0" info="">
[19:05:07.850]      // if-block "!canReadPins"
[19:05:07.850]        // =>  FALSE
[19:05:07.850]      // skip if-block "!canReadPins"
[19:05:07.850]    </control>
[19:05:07.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:05:07.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:05:07.850]        // =>  TRUE
[19:05:07.850]      <block atomic="false" info="">
[19:05:07.850]        WriteAP(0x00, 0x190008);
[19:05:07.854]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:05:07.854]        WriteAP(0xF0, 0x01);
[19:05:07.858]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:05:07.858]      </block>
[19:05:07.858]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:05:07.858]    </control>
[19:05:07.858]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:05:07.858]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:05:07.858]        // =>  FALSE
[19:05:07.858]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:05:07.858]    </control>
[19:05:07.858]    <block atomic="false" info="">
[19:05:07.858]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:05:07.861]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:05:07.861]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:05:07.862]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:05:07.865]      __ap = 0; //lets make sure we reset the access point selection
[19:05:07.865]        // -> [__ap <= 0x00000000]
[19:05:07.865]    </block>
[19:05:07.865]  </sequence>
[19:05:07.865]  
[19:05:07.887]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:05:07.887]  
[19:05:07.888]  <debugvars>
[19:05:07.888]    // Pre-defined
[19:05:07.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:05:07.888]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:05:07.888]    __dp=0x00000000
[19:05:07.888]    __ap=0x00000000
[19:05:07.888]    __traceout=0x00000000      (Trace Disabled)
[19:05:07.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:05:07.888]    __FlashAddr=0x00000000
[19:05:07.888]    __FlashLen=0x00000000
[19:05:07.888]    __FlashArg=0x00000000
[19:05:07.889]    __FlashOp=0x00000000
[19:05:07.889]    __Result=0x00000000
[19:05:07.889]  </debugvars>
[19:05:07.889]  
[19:05:07.889]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:05:07.889]    <block atomic="false" info="">
[19:05:07.889]      __var deviceID = 0;
[19:05:07.889]        // -> [deviceID <= 0x00000000]
[19:05:07.889]      __var version = 0;
[19:05:07.889]        // -> [version <= 0x00000000]
[19:05:07.889]      __var partNum = 0;
[19:05:07.889]        // -> [partNum <= 0x00000000]
[19:05:07.889]      __var manuf = 0;
[19:05:07.889]        // -> [manuf <= 0x00000000]
[19:05:07.889]      __var isMSPM0G1X0X_G3X0X = 0;
[19:05:07.889]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:05:07.889]      __var isProduction = 0;
[19:05:07.889]        // -> [isProduction <= 0x00000000]
[19:05:07.889]      __var continueId = 0;
[19:05:07.889]        // -> [continueId <= 0x00000000]
[19:05:07.889]      deviceID =   Read32(0x41C40004);
[19:05:07.898]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:05:07.898]        // -> [deviceID <= 0x2BB8802F]
[19:05:07.898]      version = deviceID >> 28;
[19:05:07.898]        // -> [version <= 0x00000002]
[19:05:07.898]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:05:07.898]        // -> [partNum <= 0x0000BB88]
[19:05:07.898]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:05:07.898]        // -> [manuf <= 0x00000017]
[19:05:07.898]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:05:07.898]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:05:07.898]      isProduction = (version > 0);
[19:05:07.899]        // -> [isProduction <= 0x00000001]
[19:05:07.899]    </block>
[19:05:07.899]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:05:07.899]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:05:07.899]        // =>  FALSE
[19:05:07.899]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:05:07.899]    </control>
[19:05:07.899]    <control if="continueId == 4" while="" timeout="0" info="">
[19:05:07.899]      // if-block "continueId == 4"
[19:05:07.899]        // =>  FALSE
[19:05:07.899]      // skip if-block "continueId == 4"
[19:05:07.899]    </control>
[19:05:07.899]    <control if="!isProduction" while="" timeout="0" info="">
[19:05:07.899]      // if-block "!isProduction"
[19:05:07.899]        // =>  FALSE
[19:05:07.899]      // skip if-block "!isProduction"
[19:05:07.899]    </control>
[19:05:07.899]  </sequence>
[19:05:07.899]  
[19:06:00.678]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:06:00.678]  
[19:06:00.679]  <debugvars>
[19:06:00.679]    // Pre-defined
[19:06:00.679]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:00.679]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:06:00.679]    __dp=0x00000000
[19:06:00.679]    __ap=0x00000000
[19:06:00.679]    __traceout=0x00000000      (Trace Disabled)
[19:06:00.679]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:00.679]    __FlashAddr=0x00000000
[19:06:00.680]    __FlashLen=0x00000000
[19:06:00.680]    __FlashArg=0x00000000
[19:06:00.680]    __FlashOp=0x00000000
[19:06:00.680]    __Result=0x00000000
[19:06:00.680]  </debugvars>
[19:06:00.680]  
[19:06:00.680]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:06:00.680]    <block atomic="false" info="">
[19:06:00.680]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:06:00.680]        // -> [isSWJ <= 0x00000001]
[19:06:00.680]      __var hasDormant = __protocol & 0x00020000;
[19:06:00.680]        // -> [hasDormant <= 0x00000000]
[19:06:00.680]      __var protType   = __protocol & 0x0000FFFF;
[19:06:00.680]        // -> [protType <= 0x00000002]
[19:06:00.680]    </block>
[19:06:00.681]    <control if="protType == 1" while="" timeout="0" info="">
[19:06:00.681]      // if-block "protType == 1"
[19:06:00.681]        // =>  FALSE
[19:06:00.681]      // skip if-block "protType == 1"
[19:06:00.681]    </control>
[19:06:00.681]    <control if="protType == 2" while="" timeout="0" info="">
[19:06:00.681]      // if-block "protType == 2"
[19:06:00.681]        // =>  TRUE
[19:06:00.681]      <control if="isSWJ" while="" timeout="0" info="">
[19:06:00.681]        // if-block "isSWJ"
[19:06:00.681]          // =>  TRUE
[19:06:00.681]        <control if="hasDormant" while="" timeout="0" info="">
[19:06:00.682]          // if-block "hasDormant"
[19:06:00.682]            // =>  FALSE
[19:06:00.682]          // skip if-block "hasDormant"
[19:06:00.682]        </control>
[19:06:00.682]        <control if="!hasDormant" while="" timeout="0" info="">
[19:06:00.682]          // if-block "!hasDormant"
[19:06:00.682]            // =>  TRUE
[19:06:00.682]          <block atomic="false" info="">
[19:06:00.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:06:00.685]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:00.685]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:06:00.686]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:06:00.686]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:06:00.687]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:00.687]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:06:00.689]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:06:00.690]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:06:00.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:00.691]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:06:00.696]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:06:00.697]          </block>
[19:06:00.697]          // end if-block "!hasDormant"
[19:06:00.697]        </control>
[19:06:00.697]        // end if-block "isSWJ"
[19:06:00.697]      </control>
[19:06:00.697]      <control if="!isSWJ" while="" timeout="0" info="">
[19:06:00.697]        // if-block "!isSWJ"
[19:06:00.697]          // =>  FALSE
[19:06:00.697]        // skip if-block "!isSWJ"
[19:06:00.698]      </control>
[19:06:00.698]      <block atomic="false" info="">
[19:06:00.698]        ReadDP(0x0);
[19:06:00.699]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:06:00.699]      </block>
[19:06:00.699]      // end if-block "protType == 2"
[19:06:00.699]    </control>
[19:06:00.699]  </sequence>
[19:06:00.699]  
[19:06:00.703]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:06:00.703]  
[19:06:00.703]  <debugvars>
[19:06:00.703]    // Pre-defined
[19:06:00.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:00.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:06:00.703]    __dp=0x00000000
[19:06:00.703]    __ap=0x00000000
[19:06:00.703]    __traceout=0x00000000      (Trace Disabled)
[19:06:00.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:00.703]    __FlashAddr=0x00000000
[19:06:00.703]    __FlashLen=0x00000000
[19:06:00.703]    __FlashArg=0x00000000
[19:06:00.703]    __FlashOp=0x00000000
[19:06:00.703]    __Result=0x00000000
[19:06:00.703]  </debugvars>
[19:06:00.703]  
[19:06:00.703]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:06:00.704]    <block atomic="false" info="">
[19:06:00.704]      __var SW_DP_ABORT       = 0x0;
[19:06:00.704]        // -> [SW_DP_ABORT <= 0x00000000]
[19:06:00.704]      __var DP_CTRL_STAT      = 0x4;
[19:06:00.704]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:06:00.704]      __var DP_SELECT         = 0x8;
[19:06:00.704]        // -> [DP_SELECT <= 0x00000008]
[19:06:00.704]      __var powered_down      = 0;
[19:06:00.704]        // -> [powered_down <= 0x00000000]
[19:06:00.704]      WriteDP(DP_SELECT, 0x00000000);
[19:06:00.705]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:06:00.705]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:06:00.707]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:06:00.707]        // -> [powered_down <= 0x00000001]
[19:06:00.707]    </block>
[19:06:00.707]    <control if="powered_down" while="" timeout="0" info="">
[19:06:00.707]      // if-block "powered_down"
[19:06:00.707]        // =>  TRUE
[19:06:00.707]      <block atomic="false" info="">
[19:06:00.707]        Message(0, "Debug/System power-up request sent");
[19:06:00.708]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:06:00.711]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:06:00.711]      </block>
[19:06:00.711]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:06:00.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:06:00.712]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:06:00.713]        // while-condition  =>  FALSE
[19:06:00.713]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:06:00.713]      </control>
[19:06:00.713]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:06:00.713]        // if-block "(__protocol & 0xFFFF) == 1"
[19:06:00.713]          // =>  FALSE
[19:06:00.713]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:06:00.713]      </control>
[19:06:00.713]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:06:00.713]        // if-block "(__protocol & 0xFFFF) == 2"
[19:06:00.713]          // =>  TRUE
[19:06:00.713]        <block atomic="false" info="">
[19:06:00.713]          Message(0, "executing SWD power up");
[19:06:00.717]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:06:00.719]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:06:00.719]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:06:00.721]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:06:00.721]        </block>
[19:06:00.721]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:06:00.721]      </control>
[19:06:00.721]      // end if-block "powered_down"
[19:06:00.721]    </control>
[19:06:00.721]    <block atomic="false" info="">
[19:06:00.721]      __var DEBUG_PORT_VAL    = 0;
[19:06:00.721]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:06:00.721]      __var ACCESS_POINT_VAL  = 0;
[19:06:00.721]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:06:00.722]      __ap = 1; 
[19:06:00.722]        // -> [__ap <= 0x00000001]
[19:06:00.722]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:06:00.725]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:06:00.725]      __ap = 4;
[19:06:00.725]        // -> [__ap <= 0x00000004]
[19:06:00.725]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:06:00.728]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:06:00.728]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:06:00.728]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:06:00.730]    </block>
[19:06:00.730]    <block atomic="false" info="">
[19:06:00.730]      __var nReset = 0x80;
[19:06:00.730]        // -> [nReset <= 0x00000080]
[19:06:00.730]      __var canReadPins = 0;
[19:06:00.730]        // -> [canReadPins <= 0x00000000]
[19:06:00.730]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:06:00.731]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:06:00.731]        // -> [canReadPins <= 0x00000001]
[19:06:00.732]    </block>
[19:06:00.732]    <control if="" while="1" timeout="200" info="">
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.732]      // while "1"  (timeout="200")
[19:06:00.732]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.733]      // while-condition  =>  TRUE
[19:06:00.733]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.735]      // while "1"  (timeout="200")
[19:06:00.735]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.736]      // while-condition  =>  TRUE
[19:06:00.736]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.737]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.737]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.737]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.737]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.737]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.737]      // while "1"  (timeout="200")
[19:06:00.737]      // while-condition  =>  TRUE
[19:06:00.738]      // while "1"  (timeout="200")
[19:06:00.738]      // while-condition  =>  TRUE
[19:06:00.738]      // while "1"  (timeout="200")
[19:06:00.738]      // while-condition  =>  TRUE
[19:06:00.738]      // while "1"  (timeout="200")
[19:06:00.738]      // while-condition  =>  TRUE
[19:06:00.738]      // while "1"  (timeout="200")
[19:06:00.739]      // while-condition  =>  TRUE
[19:06:00.739]      // while "1"  (timeout="200")
[19:06:00.739]      // while  =>  TIMEOUT
[19:06:00.739]      // end while "1"
[19:06:00.739]    </control>
[19:06:00.739]    <control if="canReadPins" while="" timeout="0" info="">
[19:06:00.739]      // if-block "canReadPins"
[19:06:00.739]        // =>  TRUE
[19:06:00.739]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:06:00.739]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:06:00.741]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:06:00.741]        // while-condition  =>  FALSE
[19:06:00.741]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:06:00.741]      </control>
[19:06:00.741]      // end if-block "canReadPins"
[19:06:00.741]    </control>
[19:06:00.741]    <control if="!canReadPins" while="" timeout="0" info="">
[19:06:00.741]      // if-block "!canReadPins"
[19:06:00.741]        // =>  FALSE
[19:06:00.741]      // skip if-block "!canReadPins"
[19:06:00.741]    </control>
[19:06:00.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:06:00.741]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:06:00.741]        // =>  TRUE
[19:06:00.741]      <block atomic="false" info="">
[19:06:00.741]        WriteAP(0x00, 0x190008);
[19:06:00.743]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:06:00.743]        WriteAP(0xF0, 0x01);
[19:06:00.746]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:06:00.746]      </block>
[19:06:00.746]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:06:00.747]    </control>
[19:06:00.747]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:06:00.747]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:06:00.747]        // =>  FALSE
[19:06:00.747]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:06:00.747]    </control>
[19:06:00.747]    <block atomic="false" info="">
[19:06:00.747]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:06:00.750]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:06:00.750]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:06:00.750]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:06:00.751]      __ap = 0; //lets make sure we reset the access point selection
[19:06:00.752]        // -> [__ap <= 0x00000000]
[19:06:00.752]    </block>
[19:06:00.752]  </sequence>
[19:06:00.752]  
[19:06:00.773]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:06:00.773]  
[19:06:00.773]  <debugvars>
[19:06:00.773]    // Pre-defined
[19:06:00.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:00.773]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:06:00.773]    __dp=0x00000000
[19:06:00.773]    __ap=0x00000000
[19:06:00.773]    __traceout=0x00000000      (Trace Disabled)
[19:06:00.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:00.773]    __FlashAddr=0x00000000
[19:06:00.773]    __FlashLen=0x00000000
[19:06:00.773]    __FlashArg=0x00000000
[19:06:00.773]    __FlashOp=0x00000000
[19:06:00.773]    __Result=0x00000000
[19:06:00.773]  </debugvars>
[19:06:00.774]  
[19:06:00.774]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:06:00.774]    <block atomic="false" info="">
[19:06:00.774]      __var deviceID = 0;
[19:06:00.774]        // -> [deviceID <= 0x00000000]
[19:06:00.774]      __var version = 0;
[19:06:00.774]        // -> [version <= 0x00000000]
[19:06:00.774]      __var partNum = 0;
[19:06:00.774]        // -> [partNum <= 0x00000000]
[19:06:00.774]      __var manuf = 0;
[19:06:00.774]        // -> [manuf <= 0x00000000]
[19:06:00.774]      __var isMSPM0G1X0X_G3X0X = 0;
[19:06:00.774]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:06:00.774]      __var isProduction = 0;
[19:06:00.774]        // -> [isProduction <= 0x00000000]
[19:06:00.774]      __var continueId = 0;
[19:06:00.774]        // -> [continueId <= 0x00000000]
[19:06:00.774]      deviceID =   Read32(0x41C40004);
[19:06:00.780]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:06:00.780]        // -> [deviceID <= 0x2BB8802F]
[19:06:00.780]      version = deviceID >> 28;
[19:06:00.781]        // -> [version <= 0x00000002]
[19:06:00.781]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:06:00.781]        // -> [partNum <= 0x0000BB88]
[19:06:00.781]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:06:00.781]        // -> [manuf <= 0x00000017]
[19:06:00.781]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:06:00.781]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:06:00.781]      isProduction = (version > 0);
[19:06:00.781]        // -> [isProduction <= 0x00000001]
[19:06:00.781]    </block>
[19:06:00.781]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:06:00.781]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:06:00.781]        // =>  FALSE
[19:06:00.781]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:06:00.782]    </control>
[19:06:00.782]    <control if="continueId == 4" while="" timeout="0" info="">
[19:06:00.782]      // if-block "continueId == 4"
[19:06:00.782]        // =>  FALSE
[19:06:00.782]      // skip if-block "continueId == 4"
[19:06:00.782]    </control>
[19:06:00.782]    <control if="!isProduction" while="" timeout="0" info="">
[19:06:00.782]      // if-block "!isProduction"
[19:06:00.782]        // =>  FALSE
[19:06:00.782]      // skip if-block "!isProduction"
[19:06:00.782]    </control>
[19:06:00.782]  </sequence>
[19:06:00.782]  
[19:06:18.016]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:06:18.016]  
[19:06:18.016]  <debugvars>
[19:06:18.016]    // Pre-defined
[19:06:18.016]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:18.016]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:06:18.016]    __dp=0x00000000
[19:06:18.016]    __ap=0x00000000
[19:06:18.016]    __traceout=0x00000000      (Trace Disabled)
[19:06:18.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:18.017]    __FlashAddr=0x00000000
[19:06:18.017]    __FlashLen=0x00000000
[19:06:18.017]    __FlashArg=0x00000000
[19:06:18.017]    __FlashOp=0x00000000
[19:06:18.017]    __Result=0x00000000
[19:06:18.017]  </debugvars>
[19:06:18.017]  
[19:06:18.017]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:06:18.017]    <block atomic="false" info="">
[19:06:18.017]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:06:18.017]        // -> [isSWJ <= 0x00000001]
[19:06:18.017]      __var hasDormant = __protocol & 0x00020000;
[19:06:18.017]        // -> [hasDormant <= 0x00000000]
[19:06:18.017]      __var protType   = __protocol & 0x0000FFFF;
[19:06:18.017]        // -> [protType <= 0x00000002]
[19:06:18.017]    </block>
[19:06:18.017]    <control if="protType == 1" while="" timeout="0" info="">
[19:06:18.017]      // if-block "protType == 1"
[19:06:18.017]        // =>  FALSE
[19:06:18.017]      // skip if-block "protType == 1"
[19:06:18.017]    </control>
[19:06:18.017]    <control if="protType == 2" while="" timeout="0" info="">
[19:06:18.017]      // if-block "protType == 2"
[19:06:18.017]        // =>  TRUE
[19:06:18.017]      <control if="isSWJ" while="" timeout="0" info="">
[19:06:18.018]        // if-block "isSWJ"
[19:06:18.018]          // =>  TRUE
[19:06:18.018]        <control if="hasDormant" while="" timeout="0" info="">
[19:06:18.018]          // if-block "hasDormant"
[19:06:18.018]            // =>  FALSE
[19:06:18.018]          // skip if-block "hasDormant"
[19:06:18.018]        </control>
[19:06:18.018]        <control if="!hasDormant" while="" timeout="0" info="">
[19:06:18.018]          // if-block "!hasDormant"
[19:06:18.018]            // =>  TRUE
[19:06:18.018]          <block atomic="false" info="">
[19:06:18.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:06:18.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:18.020]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:06:18.023]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:06:18.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:06:18.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:18.027]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:06:18.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:06:18.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:06:18.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:06:18.031]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:06:18.033]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:06:18.033]          </block>
[19:06:18.033]          // end if-block "!hasDormant"
[19:06:18.033]        </control>
[19:06:18.033]        // end if-block "isSWJ"
[19:06:18.033]      </control>
[19:06:18.033]      <control if="!isSWJ" while="" timeout="0" info="">
[19:06:18.033]        // if-block "!isSWJ"
[19:06:18.033]          // =>  FALSE
[19:06:18.033]        // skip if-block "!isSWJ"
[19:06:18.033]      </control>
[19:06:18.033]      <block atomic="false" info="">
[19:06:18.033]        ReadDP(0x0);
[19:06:18.035]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:06:18.035]      </block>
[19:06:18.035]      // end if-block "protType == 2"
[19:06:18.035]    </control>
[19:06:18.035]  </sequence>
[19:06:18.035]  
[19:06:18.037]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:06:18.037]  
[19:06:18.038]  <debugvars>
[19:06:18.038]    // Pre-defined
[19:06:18.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:18.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:06:18.038]    __dp=0x00000000
[19:06:18.039]    __ap=0x00000000
[19:06:18.039]    __traceout=0x00000000      (Trace Disabled)
[19:06:18.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:18.039]    __FlashAddr=0x00000000
[19:06:18.039]    __FlashLen=0x00000000
[19:06:18.039]    __FlashArg=0x00000000
[19:06:18.040]    __FlashOp=0x00000000
[19:06:18.040]    __Result=0x00000000
[19:06:18.040]  </debugvars>
[19:06:18.040]  
[19:06:18.040]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:06:18.040]    <block atomic="false" info="">
[19:06:18.040]      __var SW_DP_ABORT       = 0x0;
[19:06:18.041]        // -> [SW_DP_ABORT <= 0x00000000]
[19:06:18.041]      __var DP_CTRL_STAT      = 0x4;
[19:06:18.041]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:06:18.041]      __var DP_SELECT         = 0x8;
[19:06:18.041]        // -> [DP_SELECT <= 0x00000008]
[19:06:18.041]      __var powered_down      = 0;
[19:06:18.041]        // -> [powered_down <= 0x00000000]
[19:06:18.041]      WriteDP(DP_SELECT, 0x00000000);
[19:06:18.043]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:06:18.043]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:06:18.045]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:06:18.045]        // -> [powered_down <= 0x00000001]
[19:06:18.045]    </block>
[19:06:18.045]    <control if="powered_down" while="" timeout="0" info="">
[19:06:18.045]      // if-block "powered_down"
[19:06:18.045]        // =>  TRUE
[19:06:18.045]      <block atomic="false" info="">
[19:06:18.045]        Message(0, "Debug/System power-up request sent");
[19:06:18.046]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:06:18.047]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:06:18.047]      </block>
[19:06:18.047]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:06:18.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:06:18.050]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:06:18.050]        // while-condition  =>  FALSE
[19:06:18.050]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:06:18.050]      </control>
[19:06:18.050]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:06:18.050]        // if-block "(__protocol & 0xFFFF) == 1"
[19:06:18.050]          // =>  FALSE
[19:06:18.050]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:06:18.050]      </control>
[19:06:18.050]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:06:18.050]        // if-block "(__protocol & 0xFFFF) == 2"
[19:06:18.050]          // =>  TRUE
[19:06:18.051]        <block atomic="false" info="">
[19:06:18.051]          Message(0, "executing SWD power up");
[19:06:18.058]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:06:18.061]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:06:18.061]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:06:18.065]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:06:18.065]        </block>
[19:06:18.065]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:06:18.065]      </control>
[19:06:18.065]      // end if-block "powered_down"
[19:06:18.065]    </control>
[19:06:18.065]    <block atomic="false" info="">
[19:06:18.065]      __var DEBUG_PORT_VAL    = 0;
[19:06:18.065]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:06:18.065]      __var ACCESS_POINT_VAL  = 0;
[19:06:18.065]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:06:18.065]      __ap = 1; 
[19:06:18.065]        // -> [__ap <= 0x00000001]
[19:06:18.066]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:06:18.069]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:06:18.069]      __ap = 4;
[19:06:18.069]        // -> [__ap <= 0x00000004]
[19:06:18.069]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:06:18.073]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:06:18.073]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:06:18.073]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:06:18.077]    </block>
[19:06:18.077]    <block atomic="false" info="">
[19:06:18.077]      __var nReset = 0x80;
[19:06:18.077]        // -> [nReset <= 0x00000080]
[19:06:18.077]      __var canReadPins = 0;
[19:06:18.077]        // -> [canReadPins <= 0x00000000]
[19:06:18.077]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:06:18.079]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:06:18.079]        // -> [canReadPins <= 0x00000001]
[19:06:18.079]    </block>
[19:06:18.079]    <control if="" while="1" timeout="200" info="">
[19:06:18.079]      // while "1"  (timeout="200")
[19:06:18.079]      // while-condition  =>  TRUE
[19:06:18.079]      // while "1"  (timeout="200")
[19:06:18.079]      // while-condition  =>  TRUE
[19:06:18.079]      // while "1"  (timeout="200")
[19:06:18.079]      // while-condition  =>  TRUE
[19:06:18.079]      // while "1"  (timeout="200")
[19:06:18.079]      // while-condition  =>  TRUE
[19:06:18.079]      // while "1"  (timeout="200")
[19:06:18.079]      // while-condition  =>  TRUE
[19:06:18.079]      // while "1"  (timeout="200")
[19:06:18.079]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.080]      // while "1"  (timeout="200")
[19:06:18.080]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.081]      // while-condition  =>  TRUE
[19:06:18.081]      // while "1"  (timeout="200")
[19:06:18.082]      // while-condition  =>  TRUE
[19:06:18.082]      // while "1"  (timeout="200")
[19:06:18.082]      // while  =>  TIMEOUT
[19:06:18.082]      // end while "1"
[19:06:18.082]    </control>
[19:06:18.082]    <control if="canReadPins" while="" timeout="0" info="">
[19:06:18.082]      // if-block "canReadPins"
[19:06:18.082]        // =>  TRUE
[19:06:18.082]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:06:18.082]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:06:18.083]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:06:18.083]        // while-condition  =>  FALSE
[19:06:18.085]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:06:18.085]      </control>
[19:06:18.085]      // end if-block "canReadPins"
[19:06:18.085]    </control>
[19:06:18.085]    <control if="!canReadPins" while="" timeout="0" info="">
[19:06:18.085]      // if-block "!canReadPins"
[19:06:18.085]        // =>  FALSE
[19:06:18.085]      // skip if-block "!canReadPins"
[19:06:18.085]    </control>
[19:06:18.085]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:06:18.085]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:06:18.085]        // =>  TRUE
[19:06:18.085]      <block atomic="false" info="">
[19:06:18.085]        WriteAP(0x00, 0x190008);
[19:06:18.087]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:06:18.087]        WriteAP(0xF0, 0x01);
[19:06:18.100]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:06:18.100]      </block>
[19:06:18.100]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:06:18.100]    </control>
[19:06:18.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:06:18.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:06:18.101]        // =>  FALSE
[19:06:18.101]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:06:18.101]    </control>
[19:06:18.101]    <block atomic="false" info="">
[19:06:18.101]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:06:18.108]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:06:18.108]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:06:18.108]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:06:18.111]      __ap = 0; //lets make sure we reset the access point selection
[19:06:18.111]        // -> [__ap <= 0x00000000]
[19:06:18.111]    </block>
[19:06:18.111]  </sequence>
[19:06:18.111]  
[19:06:18.129]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:06:18.129]  
[19:06:18.129]  <debugvars>
[19:06:18.130]    // Pre-defined
[19:06:18.130]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:06:18.130]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:06:18.130]    __dp=0x00000000
[19:06:18.130]    __ap=0x00000000
[19:06:18.130]    __traceout=0x00000000      (Trace Disabled)
[19:06:18.130]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:06:18.130]    __FlashAddr=0x00000000
[19:06:18.130]    __FlashLen=0x00000000
[19:06:18.130]    __FlashArg=0x00000000
[19:06:18.130]    __FlashOp=0x00000000
[19:06:18.133]    __Result=0x00000000
[19:06:18.133]  </debugvars>
[19:06:18.133]  
[19:06:18.133]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:06:18.133]    <block atomic="false" info="">
[19:06:18.133]      __var deviceID = 0;
[19:06:18.133]        // -> [deviceID <= 0x00000000]
[19:06:18.133]      __var version = 0;
[19:06:18.133]        // -> [version <= 0x00000000]
[19:06:18.133]      __var partNum = 0;
[19:06:18.133]        // -> [partNum <= 0x00000000]
[19:06:18.133]      __var manuf = 0;
[19:06:18.134]        // -> [manuf <= 0x00000000]
[19:06:18.134]      __var isMSPM0G1X0X_G3X0X = 0;
[19:06:18.134]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:06:18.134]      __var isProduction = 0;
[19:06:18.134]        // -> [isProduction <= 0x00000000]
[19:06:18.134]      __var continueId = 0;
[19:06:18.134]        // -> [continueId <= 0x00000000]
[19:06:18.134]      deviceID =   Read32(0x41C40004);
[19:06:18.138]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:06:18.138]        // -> [deviceID <= 0x2BB8802F]
[19:06:18.139]      version = deviceID >> 28;
[19:06:18.139]        // -> [version <= 0x00000002]
[19:06:18.139]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:06:18.139]        // -> [partNum <= 0x0000BB88]
[19:06:18.139]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:06:18.139]        // -> [manuf <= 0x00000017]
[19:06:18.139]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:06:18.139]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:06:18.139]      isProduction = (version > 0);
[19:06:18.139]        // -> [isProduction <= 0x00000001]
[19:06:18.139]    </block>
[19:06:18.139]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:06:18.139]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:06:18.139]        // =>  FALSE
[19:06:18.139]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:06:18.139]    </control>
[19:06:18.139]    <control if="continueId == 4" while="" timeout="0" info="">
[19:06:18.139]      // if-block "continueId == 4"
[19:06:18.140]        // =>  FALSE
[19:06:18.140]      // skip if-block "continueId == 4"
[19:06:18.140]    </control>
[19:06:18.140]    <control if="!isProduction" while="" timeout="0" info="">
[19:06:18.140]      // if-block "!isProduction"
[19:06:18.140]        // =>  FALSE
[19:06:18.140]      // skip if-block "!isProduction"
[19:06:18.140]    </control>
[19:06:18.140]  </sequence>
[19:06:18.140]  
[19:13:44.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:13:44.346]  
[19:13:44.346]  <debugvars>
[19:13:44.346]    // Pre-defined
[19:13:44.346]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:13:44.347]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:13:44.347]    __dp=0x00000000
[19:13:44.347]    __ap=0x00000000
[19:13:44.347]    __traceout=0x00000000      (Trace Disabled)
[19:13:44.347]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:13:44.347]    __FlashAddr=0x00000000
[19:13:44.347]    __FlashLen=0x00000000
[19:13:44.347]    __FlashArg=0x00000000
[19:13:44.347]    __FlashOp=0x00000000
[19:13:44.347]    __Result=0x00000000
[19:13:44.347]  </debugvars>
[19:13:44.347]  
[19:13:44.347]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:13:44.347]    <block atomic="false" info="">
[19:13:44.347]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:13:44.347]        // -> [isSWJ <= 0x00000001]
[19:13:44.347]      __var hasDormant = __protocol & 0x00020000;
[19:13:44.347]        // -> [hasDormant <= 0x00000000]
[19:13:44.347]      __var protType   = __protocol & 0x0000FFFF;
[19:13:44.348]        // -> [protType <= 0x00000002]
[19:13:44.348]    </block>
[19:13:44.348]    <control if="protType == 1" while="" timeout="0" info="">
[19:13:44.348]      // if-block "protType == 1"
[19:13:44.348]        // =>  FALSE
[19:13:44.348]      // skip if-block "protType == 1"
[19:13:44.348]    </control>
[19:13:44.348]    <control if="protType == 2" while="" timeout="0" info="">
[19:13:44.348]      // if-block "protType == 2"
[19:13:44.348]        // =>  TRUE
[19:13:44.348]      <control if="isSWJ" while="" timeout="0" info="">
[19:13:44.348]        // if-block "isSWJ"
[19:13:44.348]          // =>  TRUE
[19:13:44.348]        <control if="hasDormant" while="" timeout="0" info="">
[19:13:44.348]          // if-block "hasDormant"
[19:13:44.348]            // =>  FALSE
[19:13:44.348]          // skip if-block "hasDormant"
[19:13:44.348]        </control>
[19:13:44.348]        <control if="!hasDormant" while="" timeout="0" info="">
[19:13:44.348]          // if-block "!hasDormant"
[19:13:44.348]            // =>  TRUE
[19:13:44.348]          <block atomic="false" info="">
[19:13:44.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:13:44.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:13:44.353]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:13:44.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:13:44.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:13:44.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:13:44.356]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:13:44.357]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:13:44.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:13:44.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:13:44.363]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:13:44.364]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:13:44.364]          </block>
[19:13:44.364]          // end if-block "!hasDormant"
[19:13:44.364]        </control>
[19:13:44.365]        // end if-block "isSWJ"
[19:13:44.365]      </control>
[19:13:44.365]      <control if="!isSWJ" while="" timeout="0" info="">
[19:13:44.365]        // if-block "!isSWJ"
[19:13:44.365]          // =>  FALSE
[19:13:44.365]        // skip if-block "!isSWJ"
[19:13:44.365]      </control>
[19:13:44.365]      <block atomic="false" info="">
[19:13:44.365]        ReadDP(0x0);
[19:13:44.366]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:13:44.366]      </block>
[19:13:44.366]      // end if-block "protType == 2"
[19:13:44.366]    </control>
[19:13:44.366]  </sequence>
[19:13:44.366]  
[19:13:44.370]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:13:44.370]  
[19:13:44.370]  <debugvars>
[19:13:44.370]    // Pre-defined
[19:13:44.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:13:44.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:13:44.370]    __dp=0x00000000
[19:13:44.370]    __ap=0x00000000
[19:13:44.370]    __traceout=0x00000000      (Trace Disabled)
[19:13:44.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:13:44.370]    __FlashAddr=0x00000000
[19:13:44.370]    __FlashLen=0x00000000
[19:13:44.370]    __FlashArg=0x00000000
[19:13:44.370]    __FlashOp=0x00000000
[19:13:44.370]    __Result=0x00000000
[19:13:44.370]  </debugvars>
[19:13:44.370]  
[19:13:44.371]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:13:44.371]    <block atomic="false" info="">
[19:13:44.371]      __var SW_DP_ABORT       = 0x0;
[19:13:44.371]        // -> [SW_DP_ABORT <= 0x00000000]
[19:13:44.371]      __var DP_CTRL_STAT      = 0x4;
[19:13:44.371]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:13:44.371]      __var DP_SELECT         = 0x8;
[19:13:44.371]        // -> [DP_SELECT <= 0x00000008]
[19:13:44.371]      __var powered_down      = 0;
[19:13:44.371]        // -> [powered_down <= 0x00000000]
[19:13:44.371]      WriteDP(DP_SELECT, 0x00000000);
[19:13:44.373]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:13:44.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:13:44.374]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:13:44.374]        // -> [powered_down <= 0x00000001]
[19:13:44.374]    </block>
[19:13:44.374]    <control if="powered_down" while="" timeout="0" info="">
[19:13:44.374]      // if-block "powered_down"
[19:13:44.374]        // =>  TRUE
[19:13:44.374]      <block atomic="false" info="">
[19:13:44.374]        Message(0, "Debug/System power-up request sent");
[19:13:44.376]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:13:44.377]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:13:44.377]      </block>
[19:13:44.377]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:13:44.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:13:44.379]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:13:44.379]        // while-condition  =>  FALSE
[19:13:44.379]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:13:44.379]      </control>
[19:13:44.379]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:13:44.379]        // if-block "(__protocol & 0xFFFF) == 1"
[19:13:44.379]          // =>  FALSE
[19:13:44.379]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:13:44.379]      </control>
[19:13:44.379]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:13:44.379]        // if-block "(__protocol & 0xFFFF) == 2"
[19:13:44.379]          // =>  TRUE
[19:13:44.379]        <block atomic="false" info="">
[19:13:44.380]          Message(0, "executing SWD power up");
[19:13:44.383]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:13:44.385]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:13:44.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:13:44.386]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:13:44.386]        </block>
[19:13:44.386]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:13:44.386]      </control>
[19:13:44.387]      // end if-block "powered_down"
[19:13:44.387]    </control>
[19:13:44.387]    <block atomic="false" info="">
[19:13:44.387]      __var DEBUG_PORT_VAL    = 0;
[19:13:44.387]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:13:44.387]      __var ACCESS_POINT_VAL  = 0;
[19:13:44.387]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:13:44.387]      __ap = 1; 
[19:13:44.387]        // -> [__ap <= 0x00000001]
[19:13:44.387]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:13:44.390]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:13:44.390]      __ap = 4;
[19:13:44.390]        // -> [__ap <= 0x00000004]
[19:13:44.390]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:13:44.397]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:13:44.397]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:13:44.397]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:13:44.398]    </block>
[19:13:44.398]    <block atomic="false" info="">
[19:13:44.398]      __var nReset = 0x80;
[19:13:44.398]        // -> [nReset <= 0x00000080]
[19:13:44.398]      __var canReadPins = 0;
[19:13:44.398]        // -> [canReadPins <= 0x00000000]
[19:13:44.398]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:13:44.400]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:13:44.400]        // -> [canReadPins <= 0x00000001]
[19:13:44.400]    </block>
[19:13:44.400]    <control if="" while="1" timeout="200" info="">
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.400]      // while "1"  (timeout="200")
[19:13:44.400]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.401]      // while-condition  =>  TRUE
[19:13:44.401]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.402]      // while "1"  (timeout="200")
[19:13:44.402]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.403]      // while-condition  =>  TRUE
[19:13:44.403]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.404]      // while-condition  =>  TRUE
[19:13:44.404]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.406]      // while "1"  (timeout="200")
[19:13:44.406]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.407]      // while "1"  (timeout="200")
[19:13:44.407]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.408]      // while "1"  (timeout="200")
[19:13:44.408]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.409]      // while "1"  (timeout="200")
[19:13:44.409]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.410]      // while-condition  =>  TRUE
[19:13:44.410]      // while "1"  (timeout="200")
[19:13:44.411]      // while-condition  =>  TRUE
[19:13:44.411]      // while "1"  (timeout="200")
[19:13:44.411]      // while  =>  TIMEOUT
[19:13:44.411]      // end while "1"
[19:13:44.411]    </control>
[19:13:44.411]    <control if="canReadPins" while="" timeout="0" info="">
[19:13:44.411]      // if-block "canReadPins"
[19:13:44.411]        // =>  TRUE
[19:13:44.411]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:13:44.411]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:13:44.412]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:13:44.412]        // while-condition  =>  FALSE
[19:13:44.413]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:13:44.413]      </control>
[19:13:44.413]      // end if-block "canReadPins"
[19:13:44.413]    </control>
[19:13:44.413]    <control if="!canReadPins" while="" timeout="0" info="">
[19:13:44.413]      // if-block "!canReadPins"
[19:13:44.413]        // =>  FALSE
[19:13:44.413]      // skip if-block "!canReadPins"
[19:13:44.413]    </control>
[19:13:44.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:13:44.413]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:13:44.413]        // =>  TRUE
[19:13:44.413]      <block atomic="false" info="">
[19:13:44.413]        WriteAP(0x00, 0x190008);
[19:13:44.416]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:13:44.417]        WriteAP(0xF0, 0x01);
[19:13:44.420]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:13:44.420]      </block>
[19:13:44.420]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:13:44.420]    </control>
[19:13:44.420]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:13:44.420]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:13:44.420]        // =>  FALSE
[19:13:44.420]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:13:44.420]    </control>
[19:13:44.420]    <block atomic="false" info="">
[19:13:44.420]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:13:44.423]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:13:44.425]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:13:44.425]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:13:44.426]      __ap = 0; //lets make sure we reset the access point selection
[19:13:44.427]        // -> [__ap <= 0x00000000]
[19:13:44.427]    </block>
[19:13:44.427]  </sequence>
[19:13:44.427]  
[19:13:44.447]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:13:44.447]  
[19:13:44.447]  <debugvars>
[19:13:44.447]    // Pre-defined
[19:13:44.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:13:44.447]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:13:44.447]    __dp=0x00000000
[19:13:44.447]    __ap=0x00000000
[19:13:44.447]    __traceout=0x00000000      (Trace Disabled)
[19:13:44.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:13:44.448]    __FlashAddr=0x00000000
[19:13:44.448]    __FlashLen=0x00000000
[19:13:44.448]    __FlashArg=0x00000000
[19:13:44.448]    __FlashOp=0x00000000
[19:13:44.448]    __Result=0x00000000
[19:13:44.448]  </debugvars>
[19:13:44.448]  
[19:13:44.448]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:13:44.448]    <block atomic="false" info="">
[19:13:44.448]      __var deviceID = 0;
[19:13:44.448]        // -> [deviceID <= 0x00000000]
[19:13:44.448]      __var version = 0;
[19:13:44.448]        // -> [version <= 0x00000000]
[19:13:44.448]      __var partNum = 0;
[19:13:44.448]        // -> [partNum <= 0x00000000]
[19:13:44.449]      __var manuf = 0;
[19:13:44.449]        // -> [manuf <= 0x00000000]
[19:13:44.449]      __var isMSPM0G1X0X_G3X0X = 0;
[19:13:44.449]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:13:44.449]      __var isProduction = 0;
[19:13:44.449]        // -> [isProduction <= 0x00000000]
[19:13:44.449]      __var continueId = 0;
[19:13:44.449]        // -> [continueId <= 0x00000000]
[19:13:44.449]      deviceID =   Read32(0x41C40004);
[19:13:44.461]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:13:44.461]        // -> [deviceID <= 0x2BB8802F]
[19:13:44.461]      version = deviceID >> 28;
[19:13:44.461]        // -> [version <= 0x00000002]
[19:13:44.461]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:13:44.461]        // -> [partNum <= 0x0000BB88]
[19:13:44.461]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:13:44.461]        // -> [manuf <= 0x00000017]
[19:13:44.461]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:13:44.461]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:13:44.461]      isProduction = (version > 0);
[19:13:44.461]        // -> [isProduction <= 0x00000001]
[19:13:44.461]    </block>
[19:13:44.461]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:13:44.461]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:13:44.461]        // =>  FALSE
[19:13:44.461]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:13:44.461]    </control>
[19:13:44.462]    <control if="continueId == 4" while="" timeout="0" info="">
[19:13:44.462]      // if-block "continueId == 4"
[19:13:44.462]        // =>  FALSE
[19:13:44.462]      // skip if-block "continueId == 4"
[19:13:44.462]    </control>
[19:13:44.462]    <control if="!isProduction" while="" timeout="0" info="">
[19:13:44.462]      // if-block "!isProduction"
[19:13:44.462]        // =>  FALSE
[19:13:44.462]      // skip if-block "!isProduction"
[19:13:44.462]    </control>
[19:13:44.462]  </sequence>
[19:13:44.462]  
[19:14:40.503]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:14:40.503]  
[19:14:40.503]  <debugvars>
[19:14:40.504]    // Pre-defined
[19:14:40.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:40.504]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:14:40.504]    __dp=0x00000000
[19:14:40.504]    __ap=0x00000000
[19:14:40.504]    __traceout=0x00000000      (Trace Disabled)
[19:14:40.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:40.504]    __FlashAddr=0x00000000
[19:14:40.504]    __FlashLen=0x00000000
[19:14:40.504]    __FlashArg=0x00000000
[19:14:40.504]    __FlashOp=0x00000000
[19:14:40.504]    __Result=0x00000000
[19:14:40.504]  </debugvars>
[19:14:40.504]  
[19:14:40.505]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:14:40.505]    <block atomic="false" info="">
[19:14:40.505]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:14:40.505]        // -> [isSWJ <= 0x00000001]
[19:14:40.505]      __var hasDormant = __protocol & 0x00020000;
[19:14:40.505]        // -> [hasDormant <= 0x00000000]
[19:14:40.505]      __var protType   = __protocol & 0x0000FFFF;
[19:14:40.505]        // -> [protType <= 0x00000002]
[19:14:40.505]    </block>
[19:14:40.505]    <control if="protType == 1" while="" timeout="0" info="">
[19:14:40.505]      // if-block "protType == 1"
[19:14:40.505]        // =>  FALSE
[19:14:40.505]      // skip if-block "protType == 1"
[19:14:40.505]    </control>
[19:14:40.505]    <control if="protType == 2" while="" timeout="0" info="">
[19:14:40.505]      // if-block "protType == 2"
[19:14:40.505]        // =>  TRUE
[19:14:40.505]      <control if="isSWJ" while="" timeout="0" info="">
[19:14:40.505]        // if-block "isSWJ"
[19:14:40.505]          // =>  TRUE
[19:14:40.505]        <control if="hasDormant" while="" timeout="0" info="">
[19:14:40.505]          // if-block "hasDormant"
[19:14:40.505]            // =>  FALSE
[19:14:40.505]          // skip if-block "hasDormant"
[19:14:40.506]        </control>
[19:14:40.506]        <control if="!hasDormant" while="" timeout="0" info="">
[19:14:40.506]          // if-block "!hasDormant"
[19:14:40.506]            // =>  TRUE
[19:14:40.506]          <block atomic="false" info="">
[19:14:40.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:14:40.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:40.508]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:14:40.509]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:14:40.509]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:14:40.511]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:40.511]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:14:40.512]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:14:40.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:14:40.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:40.513]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:14:40.515]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:14:40.516]          </block>
[19:14:40.516]          // end if-block "!hasDormant"
[19:14:40.516]        </control>
[19:14:40.516]        // end if-block "isSWJ"
[19:14:40.516]      </control>
[19:14:40.516]      <control if="!isSWJ" while="" timeout="0" info="">
[19:14:40.516]        // if-block "!isSWJ"
[19:14:40.516]          // =>  FALSE
[19:14:40.516]        // skip if-block "!isSWJ"
[19:14:40.517]      </control>
[19:14:40.517]      <block atomic="false" info="">
[19:14:40.517]        ReadDP(0x0);
[19:14:40.519]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:14:40.519]      </block>
[19:14:40.519]      // end if-block "protType == 2"
[19:14:40.519]    </control>
[19:14:40.519]  </sequence>
[19:14:40.519]  
[19:14:40.522]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:14:40.522]  
[19:14:40.522]  <debugvars>
[19:14:40.522]    // Pre-defined
[19:14:40.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:40.522]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:14:40.522]    __dp=0x00000000
[19:14:40.522]    __ap=0x00000000
[19:14:40.522]    __traceout=0x00000000      (Trace Disabled)
[19:14:40.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:40.522]    __FlashAddr=0x00000000
[19:14:40.522]    __FlashLen=0x00000000
[19:14:40.522]    __FlashArg=0x00000000
[19:14:40.523]    __FlashOp=0x00000000
[19:14:40.523]    __Result=0x00000000
[19:14:40.523]  </debugvars>
[19:14:40.523]  
[19:14:40.523]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:14:40.523]    <block atomic="false" info="">
[19:14:40.523]      __var SW_DP_ABORT       = 0x0;
[19:14:40.523]        // -> [SW_DP_ABORT <= 0x00000000]
[19:14:40.523]      __var DP_CTRL_STAT      = 0x4;
[19:14:40.523]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:14:40.523]      __var DP_SELECT         = 0x8;
[19:14:40.523]        // -> [DP_SELECT <= 0x00000008]
[19:14:40.523]      __var powered_down      = 0;
[19:14:40.523]        // -> [powered_down <= 0x00000000]
[19:14:40.523]      WriteDP(DP_SELECT, 0x00000000);
[19:14:40.528]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:14:40.528]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:14:40.530]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:14:40.530]        // -> [powered_down <= 0x00000001]
[19:14:40.530]    </block>
[19:14:40.530]    <control if="powered_down" while="" timeout="0" info="">
[19:14:40.530]      // if-block "powered_down"
[19:14:40.530]        // =>  TRUE
[19:14:40.530]      <block atomic="false" info="">
[19:14:40.530]        Message(0, "Debug/System power-up request sent");
[19:14:40.533]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:14:40.535]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:14:40.535]      </block>
[19:14:40.535]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:14:40.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.536]        // while-condition  =>  TRUE
[19:14:40.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.538]        // while-condition  =>  TRUE
[19:14:40.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.539]        // while-condition  =>  TRUE
[19:14:40.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.545]        // while-condition  =>  TRUE
[19:14:40.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.547]        // while-condition  =>  TRUE
[19:14:40.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.549]        // while-condition  =>  TRUE
[19:14:40.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.551]        // while-condition  =>  TRUE
[19:14:40.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.553]        // while-condition  =>  TRUE
[19:14:40.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.554]        // while-condition  =>  TRUE
[19:14:40.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.556]        // while-condition  =>  TRUE
[19:14:40.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.557]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.557]        // while-condition  =>  TRUE
[19:14:40.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.559]        // while-condition  =>  TRUE
[19:14:40.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.561]        // while-condition  =>  TRUE
[19:14:40.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.563]        // while-condition  =>  TRUE
[19:14:40.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.565]        // while-condition  =>  TRUE
[19:14:40.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.568]        // while-condition  =>  TRUE
[19:14:40.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.570]        // while-condition  =>  TRUE
[19:14:40.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.572]        // while-condition  =>  TRUE
[19:14:40.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.573]        // while-condition  =>  TRUE
[19:14:40.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.574]        // while-condition  =>  TRUE
[19:14:40.575]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.576]        // while-condition  =>  TRUE
[19:14:40.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.578]        // while-condition  =>  TRUE
[19:14:40.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.579]        // while-condition  =>  TRUE
[19:14:40.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.582]        // while-condition  =>  TRUE
[19:14:40.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.583]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.583]        // while-condition  =>  TRUE
[19:14:40.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.585]        // while-condition  =>  TRUE
[19:14:40.585]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.587]        // while-condition  =>  TRUE
[19:14:40.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.588]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.588]        // while-condition  =>  TRUE
[19:14:40.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.590]        // while-condition  =>  TRUE
[19:14:40.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.592]        // while-condition  =>  TRUE
[19:14:40.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.593]        // while-condition  =>  TRUE
[19:14:40.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.594]        // while-condition  =>  TRUE
[19:14:40.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.596]        // while-condition  =>  TRUE
[19:14:40.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.598]        // while-condition  =>  TRUE
[19:14:40.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.600]        // while-condition  =>  TRUE
[19:14:40.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.607]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.607]        // while-condition  =>  TRUE
[19:14:40.607]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.608]        // while-condition  =>  TRUE
[19:14:40.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.610]        // while-condition  =>  TRUE
[19:14:40.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.612]        // while-condition  =>  TRUE
[19:14:40.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.614]        // while-condition  =>  TRUE
[19:14:40.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.615]        // while-condition  =>  TRUE
[19:14:40.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.617]        // while-condition  =>  TRUE
[19:14:40.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.619]        // while-condition  =>  TRUE
[19:14:40.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.620]        // while-condition  =>  TRUE
[19:14:40.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.622]        // while-condition  =>  TRUE
[19:14:40.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.623]        // while-condition  =>  TRUE
[19:14:40.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.626]        // while-condition  =>  TRUE
[19:14:40.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.627]        // while-condition  =>  TRUE
[19:14:40.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.629]        // while-condition  =>  TRUE
[19:14:40.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.631]        // while-condition  =>  TRUE
[19:14:40.631]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.633]        // while-condition  =>  TRUE
[19:14:40.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.635]        // while-condition  =>  TRUE
[19:14:40.635]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.636]        // while-condition  =>  TRUE
[19:14:40.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.639]        // while-condition  =>  TRUE
[19:14:40.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.640]        // while-condition  =>  TRUE
[19:14:40.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.642]        // while-condition  =>  TRUE
[19:14:40.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.644]        // while-condition  =>  TRUE
[19:14:40.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.645]        // while-condition  =>  TRUE
[19:14:40.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.652]        // while-condition  =>  TRUE
[19:14:40.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.659]        // while-condition  =>  TRUE
[19:14:40.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.661]        // while-condition  =>  TRUE
[19:14:40.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.664]        // while-condition  =>  TRUE
[19:14:40.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.666]        // while-condition  =>  TRUE
[19:14:40.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.667]        // while-condition  =>  TRUE
[19:14:40.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.668]        // while-condition  =>  TRUE
[19:14:40.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.671]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.671]        // while-condition  =>  TRUE
[19:14:40.671]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.673]        // while-condition  =>  TRUE
[19:14:40.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.680]        // while-condition  =>  TRUE
[19:14:40.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.682]        // while-condition  =>  TRUE
[19:14:40.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.684]        // while-condition  =>  TRUE
[19:14:40.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.687]        // while-condition  =>  TRUE
[19:14:40.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.688]        // while-condition  =>  TRUE
[19:14:40.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.691]        // while-condition  =>  TRUE
[19:14:40.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.693]        // while-condition  =>  TRUE
[19:14:40.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.695]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.695]        // while-condition  =>  TRUE
[19:14:40.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.698]        // while-condition  =>  TRUE
[19:14:40.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.700]        // while-condition  =>  TRUE
[19:14:40.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.702]        // while-condition  =>  TRUE
[19:14:40.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.703]        // while-condition  =>  TRUE
[19:14:40.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.706]        // while-condition  =>  TRUE
[19:14:40.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.708]        // while-condition  =>  TRUE
[19:14:40.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.712]        // while-condition  =>  TRUE
[19:14:40.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.717]        // while-condition  =>  TRUE
[19:14:40.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.719]        // while-condition  =>  TRUE
[19:14:40.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.720]        // while-condition  =>  TRUE
[19:14:40.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.722]        // while-condition  =>  TRUE
[19:14:40.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.723]        // while-condition  =>  TRUE
[19:14:40.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.725]        // while-condition  =>  TRUE
[19:14:40.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.726]        // while-condition  =>  TRUE
[19:14:40.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.728]        // while-condition  =>  TRUE
[19:14:40.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.729]        // while-condition  =>  TRUE
[19:14:40.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.731]        // while-condition  =>  TRUE
[19:14:40.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.733]        // while-condition  =>  TRUE
[19:14:40.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.735]        // while-condition  =>  TRUE
[19:14:40.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.736]        // while-condition  =>  TRUE
[19:14:40.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.738]        // while-condition  =>  TRUE
[19:14:40.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.740]        // while-condition  =>  TRUE
[19:14:40.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.741]        // while-condition  =>  TRUE
[19:14:40.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.743]        // while-condition  =>  TRUE
[19:14:40.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.744]        // while-condition  =>  TRUE
[19:14:40.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.746]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.746]        // while-condition  =>  TRUE
[19:14:40.746]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.747]        // while-condition  =>  TRUE
[19:14:40.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.750]        // while-condition  =>  TRUE
[19:14:40.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.753]        // while-condition  =>  TRUE
[19:14:40.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.755]        // while-condition  =>  TRUE
[19:14:40.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.759]        // while-condition  =>  TRUE
[19:14:40.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.760]        // while-condition  =>  TRUE
[19:14:40.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.762]        // while-condition  =>  TRUE
[19:14:40.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.764]        // while-condition  =>  TRUE
[19:14:40.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.766]        // while-condition  =>  TRUE
[19:14:40.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.768]        // while-condition  =>  TRUE
[19:14:40.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.769]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.770]        // while-condition  =>  TRUE
[19:14:40.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.774]        // while-condition  =>  TRUE
[19:14:40.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.776]        // while-condition  =>  TRUE
[19:14:40.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.778]        // while-condition  =>  TRUE
[19:14:40.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.779]        // while-condition  =>  TRUE
[19:14:40.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.781]        // while-condition  =>  TRUE
[19:14:40.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.783]        // while-condition  =>  TRUE
[19:14:40.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.785]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.785]        // while-condition  =>  TRUE
[19:14:40.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.791]        // while-condition  =>  TRUE
[19:14:40.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.792]        // while-condition  =>  TRUE
[19:14:40.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.801]        // while-condition  =>  TRUE
[19:14:40.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.802]        // while-condition  =>  TRUE
[19:14:40.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.804]        // while-condition  =>  TRUE
[19:14:40.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.806]        // while-condition  =>  TRUE
[19:14:40.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.808]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.808]        // while-condition  =>  TRUE
[19:14:40.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.809]        // while-condition  =>  TRUE
[19:14:40.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.811]        // while-condition  =>  TRUE
[19:14:40.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.812]        // while-condition  =>  TRUE
[19:14:40.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.814]        // while-condition  =>  TRUE
[19:14:40.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.815]        // while-condition  =>  TRUE
[19:14:40.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.817]        // while-condition  =>  TRUE
[19:14:40.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.819]        // while-condition  =>  TRUE
[19:14:40.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.820]        // while-condition  =>  TRUE
[19:14:40.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.822]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.822]        // while-condition  =>  TRUE
[19:14:40.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.823]        // while-condition  =>  TRUE
[19:14:40.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.826]        // while-condition  =>  TRUE
[19:14:40.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.827]        // while-condition  =>  TRUE
[19:14:40.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.829]        // while-condition  =>  TRUE
[19:14:40.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.831]        // while-condition  =>  TRUE
[19:14:40.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.837]        // while-condition  =>  TRUE
[19:14:40.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.840]        // while-condition  =>  TRUE
[19:14:40.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.843]        // while-condition  =>  TRUE
[19:14:40.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.845]        // while-condition  =>  TRUE
[19:14:40.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.848]        // while-condition  =>  TRUE
[19:14:40.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.850]        // while-condition  =>  TRUE
[19:14:40.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.852]        // while-condition  =>  TRUE
[19:14:40.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.854]        // while-condition  =>  TRUE
[19:14:40.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.856]        // while-condition  =>  TRUE
[19:14:40.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.858]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.858]        // while-condition  =>  TRUE
[19:14:40.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.861]        // while-condition  =>  TRUE
[19:14:40.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.863]        // while-condition  =>  TRUE
[19:14:40.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.864]        // while-condition  =>  TRUE
[19:14:40.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.865]        // while-condition  =>  TRUE
[19:14:40.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.867]        // while-condition  =>  TRUE
[19:14:40.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.868]        // while-condition  =>  TRUE
[19:14:40.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.870]        // while-condition  =>  TRUE
[19:14:40.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.872]        // while-condition  =>  TRUE
[19:14:40.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.873]        // while-condition  =>  TRUE
[19:14:40.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.876]        // while-condition  =>  TRUE
[19:14:40.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.882]        // while-condition  =>  TRUE
[19:14:40.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.884]        // while-condition  =>  TRUE
[19:14:40.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.886]        // while-condition  =>  TRUE
[19:14:40.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.889]        // while-condition  =>  TRUE
[19:14:40.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.892]        // while-condition  =>  TRUE
[19:14:40.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.895]        // while-condition  =>  TRUE
[19:14:40.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.896]        // while-condition  =>  TRUE
[19:14:40.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.899]        // while-condition  =>  TRUE
[19:14:40.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.902]        // while-condition  =>  TRUE
[19:14:40.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.905]        // while-condition  =>  TRUE
[19:14:40.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.907]        // while-condition  =>  TRUE
[19:14:40.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.909]        // while-condition  =>  TRUE
[19:14:40.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.910]        // while-condition  =>  TRUE
[19:14:40.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.912]        // while-condition  =>  TRUE
[19:14:40.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.915]        // while-condition  =>  TRUE
[19:14:40.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.917]        // while-condition  =>  TRUE
[19:14:40.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.920]        // while-condition  =>  TRUE
[19:14:40.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.923]        // while-condition  =>  TRUE
[19:14:40.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.924]        // while-condition  =>  TRUE
[19:14:40.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.926]        // while-condition  =>  TRUE
[19:14:40.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.934]        // while-condition  =>  TRUE
[19:14:40.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.936]        // while-condition  =>  TRUE
[19:14:40.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.938]        // while-condition  =>  TRUE
[19:14:40.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.939]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.939]        // while-condition  =>  TRUE
[19:14:40.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.941]        // while-condition  =>  TRUE
[19:14:40.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.943]        // while-condition  =>  TRUE
[19:14:40.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.944]        // while-condition  =>  TRUE
[19:14:40.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.947]        // while-condition  =>  TRUE
[19:14:40.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.950]        // while-condition  =>  TRUE
[19:14:40.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.952]        // while-condition  =>  TRUE
[19:14:40.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.954]        // while-condition  =>  TRUE
[19:14:40.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.955]        // while-condition  =>  TRUE
[19:14:40.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.957]        // while-condition  =>  TRUE
[19:14:40.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.959]        // while-condition  =>  TRUE
[19:14:40.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.960]        // while-condition  =>  TRUE
[19:14:40.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.962]        // while-condition  =>  TRUE
[19:14:40.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.964]        // while-condition  =>  TRUE
[19:14:40.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.965]        // while-condition  =>  TRUE
[19:14:40.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.967]        // while-condition  =>  TRUE
[19:14:40.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.968]        // while-condition  =>  TRUE
[19:14:40.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.973]        // while-condition  =>  TRUE
[19:14:40.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.974]        // while-condition  =>  TRUE
[19:14:40.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.976]        // while-condition  =>  TRUE
[19:14:40.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.979]        // while-condition  =>  TRUE
[19:14:40.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.982]        // while-condition  =>  TRUE
[19:14:40.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.983]        // while-condition  =>  TRUE
[19:14:40.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.985]        // while-condition  =>  TRUE
[19:14:40.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.987]        // while-condition  =>  TRUE
[19:14:40.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.989]        // while-condition  =>  TRUE
[19:14:40.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.992]        // while-condition  =>  TRUE
[19:14:40.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.993]        // while-condition  =>  TRUE
[19:14:40.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.995]        // while-condition  =>  TRUE
[19:14:40.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:40.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:40.999]        // while-condition  =>  TRUE
[19:14:40.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.001]        // while-condition  =>  TRUE
[19:14:41.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.003]        // while-condition  =>  TRUE
[19:14:41.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.006]        // while-condition  =>  TRUE
[19:14:41.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.007]        // while-condition  =>  TRUE
[19:14:41.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.014]        // while-condition  =>  TRUE
[19:14:41.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.015]        // while-condition  =>  TRUE
[19:14:41.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.016]        // while-condition  =>  TRUE
[19:14:41.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.018]        // while-condition  =>  TRUE
[19:14:41.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.019]        // while-condition  =>  TRUE
[19:14:41.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.022]        // while-condition  =>  TRUE
[19:14:41.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.023]        // while-condition  =>  TRUE
[19:14:41.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.030]        // while-condition  =>  TRUE
[19:14:41.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.032]        // while-condition  =>  TRUE
[19:14:41.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.033]        // while-condition  =>  TRUE
[19:14:41.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.035]        // while-condition  =>  TRUE
[19:14:41.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.036]        // while-condition  =>  TRUE
[19:14:41.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.037]        // while-condition  =>  TRUE
[19:14:41.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.039]        // while-condition  =>  TRUE
[19:14:41.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.041]        // while-condition  =>  TRUE
[19:14:41.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.042]        // while-condition  =>  TRUE
[19:14:41.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.047]        // while-condition  =>  TRUE
[19:14:41.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.048]        // while-condition  =>  TRUE
[19:14:41.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.050]        // while-condition  =>  TRUE
[19:14:41.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.051]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.051]        // while-condition  =>  TRUE
[19:14:41.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.053]        // while-condition  =>  TRUE
[19:14:41.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.056]        // while-condition  =>  TRUE
[19:14:41.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.060]        // while-condition  =>  TRUE
[19:14:41.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.062]        // while-condition  =>  TRUE
[19:14:41.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.063]        // while-condition  =>  TRUE
[19:14:41.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.067]        // while-condition  =>  TRUE
[19:14:41.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.068]        // while-condition  =>  TRUE
[19:14:41.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.070]        // while-condition  =>  TRUE
[19:14:41.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.072]        // while-condition  =>  TRUE
[19:14:41.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.073]        // while-condition  =>  TRUE
[19:14:41.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.076]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.076]        // while-condition  =>  TRUE
[19:14:41.076]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.077]        // while-condition  =>  TRUE
[19:14:41.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.080]        // while-condition  =>  TRUE
[19:14:41.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.083]        // while-condition  =>  TRUE
[19:14:41.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.086]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.086]        // while-condition  =>  TRUE
[19:14:41.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.087]        // while-condition  =>  TRUE
[19:14:41.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.089]        // while-condition  =>  TRUE
[19:14:41.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.091]        // while-condition  =>  TRUE
[19:14:41.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.094]        // while-condition  =>  TRUE
[19:14:41.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.096]        // while-condition  =>  TRUE
[19:14:41.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.098]        // while-condition  =>  TRUE
[19:14:41.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.100]        // while-condition  =>  TRUE
[19:14:41.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.102]        // while-condition  =>  TRUE
[19:14:41.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.105]        // while-condition  =>  TRUE
[19:14:41.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.106]        // while-condition  =>  TRUE
[19:14:41.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.108]        // while-condition  =>  TRUE
[19:14:41.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.111]        // while-condition  =>  TRUE
[19:14:41.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.113]        // while-condition  =>  TRUE
[19:14:41.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.116]        // while-condition  =>  TRUE
[19:14:41.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.117]        // while-condition  =>  TRUE
[19:14:41.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.119]        // while-condition  =>  TRUE
[19:14:41.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.121]        // while-condition  =>  TRUE
[19:14:41.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.123]        // while-condition  =>  TRUE
[19:14:41.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.124]        // while-condition  =>  TRUE
[19:14:41.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.129]        // while-condition  =>  TRUE
[19:14:41.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.131]        // while-condition  =>  TRUE
[19:14:41.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.134]        // while-condition  =>  TRUE
[19:14:41.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.135]        // while-condition  =>  TRUE
[19:14:41.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.137]        // while-condition  =>  TRUE
[19:14:41.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.140]        // while-condition  =>  TRUE
[19:14:41.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.142]        // while-condition  =>  TRUE
[19:14:41.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.143]        // while-condition  =>  TRUE
[19:14:41.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.145]        // while-condition  =>  TRUE
[19:14:41.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.146]        // while-condition  =>  TRUE
[19:14:41.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.148]        // while-condition  =>  TRUE
[19:14:41.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.155]        // while-condition  =>  TRUE
[19:14:41.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.159]        // while-condition  =>  TRUE
[19:14:41.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.161]        // while-condition  =>  TRUE
[19:14:41.162]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.163]        // while-condition  =>  TRUE
[19:14:41.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.165]        // while-condition  =>  TRUE
[19:14:41.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.167]        // while-condition  =>  TRUE
[19:14:41.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.169]        // while-condition  =>  TRUE
[19:14:41.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.170]        // while-condition  =>  TRUE
[19:14:41.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.173]        // while-condition  =>  TRUE
[19:14:41.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.175]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.175]        // while-condition  =>  TRUE
[19:14:41.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.176]        // while-condition  =>  TRUE
[19:14:41.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.178]        // while-condition  =>  TRUE
[19:14:41.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.180]        // while-condition  =>  TRUE
[19:14:41.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.182]        // while-condition  =>  TRUE
[19:14:41.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.183]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.185]        // while-condition  =>  TRUE
[19:14:41.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.187]        // while-condition  =>  TRUE
[19:14:41.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.189]        // while-condition  =>  TRUE
[19:14:41.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.190]        // while-condition  =>  TRUE
[19:14:41.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.192]        // while-condition  =>  TRUE
[19:14:41.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.194]        // while-condition  =>  TRUE
[19:14:41.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.196]        // while-condition  =>  TRUE
[19:14:41.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.198]        // while-condition  =>  TRUE
[19:14:41.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.202]        // while-condition  =>  TRUE
[19:14:41.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.203]        // while-condition  =>  TRUE
[19:14:41.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.206]        // while-condition  =>  TRUE
[19:14:41.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.208]        // while-condition  =>  TRUE
[19:14:41.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.209]        // while-condition  =>  TRUE
[19:14:41.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.211]        // while-condition  =>  TRUE
[19:14:41.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.212]        // while-condition  =>  TRUE
[19:14:41.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.214]        // while-condition  =>  TRUE
[19:14:41.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.215]        // while-condition  =>  TRUE
[19:14:41.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.217]        // while-condition  =>  TRUE
[19:14:41.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.219]        // while-condition  =>  TRUE
[19:14:41.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.220]        // while-condition  =>  TRUE
[19:14:41.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.222]        // while-condition  =>  TRUE
[19:14:41.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.223]        // while-condition  =>  TRUE
[19:14:41.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.225]        // while-condition  =>  TRUE
[19:14:41.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.227]        // while-condition  =>  TRUE
[19:14:41.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.229]        // while-condition  =>  TRUE
[19:14:41.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.230]        // while-condition  =>  TRUE
[19:14:41.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.232]        // while-condition  =>  TRUE
[19:14:41.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.233]        // while-condition  =>  TRUE
[19:14:41.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.235]        // while-condition  =>  TRUE
[19:14:41.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.237]        // while-condition  =>  TRUE
[19:14:41.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.241]        // while-condition  =>  TRUE
[19:14:41.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.243]        // while-condition  =>  TRUE
[19:14:41.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.246]        // while-condition  =>  TRUE
[19:14:41.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.251]        // while-condition  =>  TRUE
[19:14:41.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.253]        // while-condition  =>  TRUE
[19:14:41.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.255]        // while-condition  =>  TRUE
[19:14:41.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.260]        // while-condition  =>  TRUE
[19:14:41.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.263]        // while-condition  =>  TRUE
[19:14:41.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.264]        // while-condition  =>  TRUE
[19:14:41.264]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.265]        // while-condition  =>  TRUE
[19:14:41.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.269]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.269]        // while-condition  =>  TRUE
[19:14:41.269]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.271]        // while-condition  =>  TRUE
[19:14:41.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.273]        // while-condition  =>  TRUE
[19:14:41.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.274]        // while-condition  =>  TRUE
[19:14:41.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.275]        // while-condition  =>  TRUE
[19:14:41.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.277]        // while-condition  =>  TRUE
[19:14:41.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.279]        // while-condition  =>  TRUE
[19:14:41.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.281]        // while-condition  =>  TRUE
[19:14:41.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.282]        // while-condition  =>  TRUE
[19:14:41.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.289]        // while-condition  =>  TRUE
[19:14:41.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.291]        // while-condition  =>  TRUE
[19:14:41.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.293]        // while-condition  =>  TRUE
[19:14:41.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.298]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.298]        // while-condition  =>  TRUE
[19:14:41.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.300]        // while-condition  =>  TRUE
[19:14:41.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.302]        // while-condition  =>  TRUE
[19:14:41.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.304]        // while-condition  =>  TRUE
[19:14:41.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.306]        // while-condition  =>  TRUE
[19:14:41.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.307]        // while-condition  =>  TRUE
[19:14:41.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.310]        // while-condition  =>  TRUE
[19:14:41.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.314]        // while-condition  =>  TRUE
[19:14:41.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.316]        // while-condition  =>  TRUE
[19:14:41.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.318]        // while-condition  =>  TRUE
[19:14:41.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.319]        // while-condition  =>  TRUE
[19:14:41.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.321]        // while-condition  =>  TRUE
[19:14:41.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.323]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.323]        // while-condition  =>  TRUE
[19:14:41.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.325]        // while-condition  =>  TRUE
[19:14:41.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.326]        // while-condition  =>  TRUE
[19:14:41.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.327]        // while-condition  =>  TRUE
[19:14:41.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.331]        // while-condition  =>  TRUE
[19:14:41.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.332]        // while-condition  =>  TRUE
[19:14:41.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.334]        // while-condition  =>  TRUE
[19:14:41.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.336]        // while-condition  =>  TRUE
[19:14:41.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.337]        // while-condition  =>  TRUE
[19:14:41.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.339]        // while-condition  =>  TRUE
[19:14:41.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.340]        // while-condition  =>  TRUE
[19:14:41.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.343]        // while-condition  =>  TRUE
[19:14:41.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.344]        // while-condition  =>  TRUE
[19:14:41.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.348]        // while-condition  =>  TRUE
[19:14:41.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.349]        // while-condition  =>  TRUE
[19:14:41.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.351]        // while-condition  =>  TRUE
[19:14:41.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.353]        // while-condition  =>  TRUE
[19:14:41.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.354]        // while-condition  =>  TRUE
[19:14:41.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.355]        // while-condition  =>  TRUE
[19:14:41.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.358]        // while-condition  =>  TRUE
[19:14:41.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.359]        // while-condition  =>  TRUE
[19:14:41.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.361]        // while-condition  =>  TRUE
[19:14:41.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.363]        // while-condition  =>  TRUE
[19:14:41.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.365]        // while-condition  =>  TRUE
[19:14:41.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.366]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.366]        // while-condition  =>  TRUE
[19:14:41.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.368]        // while-condition  =>  TRUE
[19:14:41.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.369]        // while-condition  =>  TRUE
[19:14:41.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.370]        // while-condition  =>  TRUE
[19:14:41.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.373]        // while-condition  =>  TRUE
[19:14:41.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.376]        // while-condition  =>  TRUE
[19:14:41.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.377]        // while-condition  =>  TRUE
[19:14:41.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.379]        // while-condition  =>  TRUE
[19:14:41.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.380]        // while-condition  =>  TRUE
[19:14:41.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.382]        // while-condition  =>  TRUE
[19:14:41.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.383]        // while-condition  =>  TRUE
[19:14:41.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.386]        // while-condition  =>  TRUE
[19:14:41.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.396]        // while-condition  =>  TRUE
[19:14:41.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.414]        // while-condition  =>  TRUE
[19:14:41.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.417]        // while-condition  =>  TRUE
[19:14:41.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.418]        // while-condition  =>  TRUE
[19:14:41.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.420]        // while-condition  =>  TRUE
[19:14:41.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.422]        // while-condition  =>  TRUE
[19:14:41.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.423]        // while-condition  =>  TRUE
[19:14:41.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.425]        // while-condition  =>  TRUE
[19:14:41.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.427]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.427]        // while-condition  =>  TRUE
[19:14:41.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.429]        // while-condition  =>  TRUE
[19:14:41.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.430]        // while-condition  =>  TRUE
[19:14:41.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.432]        // while-condition  =>  TRUE
[19:14:41.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.433]        // while-condition  =>  TRUE
[19:14:41.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.438]        // while-condition  =>  TRUE
[19:14:41.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.439]        // while-condition  =>  TRUE
[19:14:41.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.441]        // while-condition  =>  TRUE
[19:14:41.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.442]        // while-condition  =>  TRUE
[19:14:41.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.444]        // while-condition  =>  TRUE
[19:14:41.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.445]        // while-condition  =>  TRUE
[19:14:41.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.447]        // while-condition  =>  TRUE
[19:14:41.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.449]        // while-condition  =>  TRUE
[19:14:41.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.450]        // while-condition  =>  TRUE
[19:14:41.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.453]        // while-condition  =>  TRUE
[19:14:41.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.462]        // while-condition  =>  TRUE
[19:14:41.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.464]        // while-condition  =>  TRUE
[19:14:41.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.467]        // while-condition  =>  TRUE
[19:14:41.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.468]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.468]        // while-condition  =>  TRUE
[19:14:41.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.470]        // while-condition  =>  TRUE
[19:14:41.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.472]        // while-condition  =>  TRUE
[19:14:41.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.474]        // while-condition  =>  TRUE
[19:14:41.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.475]        // while-condition  =>  TRUE
[19:14:41.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.479]        // while-condition  =>  TRUE
[19:14:41.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.486]        // while-condition  =>  TRUE
[19:14:41.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.487]        // while-condition  =>  TRUE
[19:14:41.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.490]        // while-condition  =>  TRUE
[19:14:41.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.493]        // while-condition  =>  TRUE
[19:14:41.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.495]        // while-condition  =>  TRUE
[19:14:41.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.497]        // while-condition  =>  TRUE
[19:14:41.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.498]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.499]        // while-condition  =>  TRUE
[19:14:41.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.501]        // while-condition  =>  TRUE
[19:14:41.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.504]        // while-condition  =>  TRUE
[19:14:41.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.505]        // while-condition  =>  TRUE
[19:14:41.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.507]        // while-condition  =>  TRUE
[19:14:41.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.509]        // while-condition  =>  TRUE
[19:14:41.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.511]        // while-condition  =>  TRUE
[19:14:41.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.512]        // while-condition  =>  TRUE
[19:14:41.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.514]        // while-condition  =>  TRUE
[19:14:41.514]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:14:41.519]        // while-condition  =>  TRUE
[19:14:41.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:41.520]        // while  =>  TIMEOUT
[19:14:41.520]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:14:41.520]      </control>
[19:14:41.520]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:14:41.520]        // if-block "(__protocol & 0xFFFF) == 1"
[19:14:41.520]          // =>  FALSE
[19:14:41.520]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:14:41.520]      </control>
[19:14:41.520]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:14:41.520]        // if-block "(__protocol & 0xFFFF) == 2"
[19:14:41.520]          // =>  TRUE
[19:14:41.520]        <block atomic="false" info="">
[19:14:41.520]          Message(0, "executing SWD power up");
[19:14:41.522]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:14:41.525]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:14:41.525]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:14:41.526]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:14:41.527]        </block>
[19:14:41.527]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:14:41.527]      </control>
[19:14:41.527]      // end if-block "powered_down"
[19:14:41.527]    </control>
[19:14:41.527]    <block atomic="false" info="">
[19:14:41.527]      __var DEBUG_PORT_VAL    = 0;
[19:14:41.527]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:14:41.527]      __var ACCESS_POINT_VAL  = 0;
[19:14:41.527]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:14:41.528]      __ap = 1; 
[19:14:41.528]        // -> [__ap <= 0x00000001]
[19:14:41.528]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:14:41.540]  
[19:14:41.540]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[19:14:41.540]  
[19:14:41.542]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:14:41.542]    </block>
[19:14:41.542]  </sequence>
[19:14:41.542]  
[19:14:52.395]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:14:52.395]  
[19:14:52.395]  <debugvars>
[19:14:52.395]    // Pre-defined
[19:14:52.396]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:52.396]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:14:52.396]    __dp=0x00000000
[19:14:52.396]    __ap=0x00000000
[19:14:52.396]    __traceout=0x00000000      (Trace Disabled)
[19:14:52.396]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:52.396]    __FlashAddr=0x00000000
[19:14:52.396]    __FlashLen=0x00000000
[19:14:52.396]    __FlashArg=0x00000000
[19:14:52.396]    __FlashOp=0x00000000
[19:14:52.396]    __Result=0x00000000
[19:14:52.396]  </debugvars>
[19:14:52.396]  
[19:14:52.396]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:14:52.396]    <block atomic="false" info="">
[19:14:52.397]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:14:52.397]        // -> [isSWJ <= 0x00000001]
[19:14:52.397]      __var hasDormant = __protocol & 0x00020000;
[19:14:52.397]        // -> [hasDormant <= 0x00000000]
[19:14:52.397]      __var protType   = __protocol & 0x0000FFFF;
[19:14:52.397]        // -> [protType <= 0x00000002]
[19:14:52.397]    </block>
[19:14:52.397]    <control if="protType == 1" while="" timeout="0" info="">
[19:14:52.397]      // if-block "protType == 1"
[19:14:52.397]        // =>  FALSE
[19:14:52.397]      // skip if-block "protType == 1"
[19:14:52.397]    </control>
[19:14:52.397]    <control if="protType == 2" while="" timeout="0" info="">
[19:14:52.397]      // if-block "protType == 2"
[19:14:52.397]        // =>  TRUE
[19:14:52.397]      <control if="isSWJ" while="" timeout="0" info="">
[19:14:52.397]        // if-block "isSWJ"
[19:14:52.397]          // =>  TRUE
[19:14:52.397]        <control if="hasDormant" while="" timeout="0" info="">
[19:14:52.397]          // if-block "hasDormant"
[19:14:52.397]            // =>  FALSE
[19:14:52.397]          // skip if-block "hasDormant"
[19:14:52.397]        </control>
[19:14:52.397]        <control if="!hasDormant" while="" timeout="0" info="">
[19:14:52.398]          // if-block "!hasDormant"
[19:14:52.398]            // =>  TRUE
[19:14:52.398]          <block atomic="false" info="">
[19:14:52.398]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:14:52.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:52.400]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:14:52.402]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:14:52.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:14:52.404]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:52.404]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:14:52.406]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:14:52.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:14:52.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:14:52.408]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:14:52.409]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:14:52.409]          </block>
[19:14:52.409]          // end if-block "!hasDormant"
[19:14:52.409]        </control>
[19:14:52.409]        // end if-block "isSWJ"
[19:14:52.409]      </control>
[19:14:52.409]      <control if="!isSWJ" while="" timeout="0" info="">
[19:14:52.409]        // if-block "!isSWJ"
[19:14:52.409]          // =>  FALSE
[19:14:52.409]        // skip if-block "!isSWJ"
[19:14:52.409]      </control>
[19:14:52.410]      <block atomic="false" info="">
[19:14:52.410]        ReadDP(0x0);
[19:14:52.411]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:14:52.411]      </block>
[19:14:52.412]      // end if-block "protType == 2"
[19:14:52.412]    </control>
[19:14:52.412]  </sequence>
[19:14:52.412]  
[19:14:52.414]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:14:52.414]  
[19:14:52.414]  <debugvars>
[19:14:52.414]    // Pre-defined
[19:14:52.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:52.414]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:14:52.414]    __dp=0x00000000
[19:14:52.414]    __ap=0x00000000
[19:14:52.414]    __traceout=0x00000000      (Trace Disabled)
[19:14:52.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:52.415]    __FlashAddr=0x00000000
[19:14:52.415]    __FlashLen=0x00000000
[19:14:52.415]    __FlashArg=0x00000000
[19:14:52.415]    __FlashOp=0x00000000
[19:14:52.415]    __Result=0x00000000
[19:14:52.415]  </debugvars>
[19:14:52.415]  
[19:14:52.415]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:14:52.415]    <block atomic="false" info="">
[19:14:52.415]      __var SW_DP_ABORT       = 0x0;
[19:14:52.415]        // -> [SW_DP_ABORT <= 0x00000000]
[19:14:52.415]      __var DP_CTRL_STAT      = 0x4;
[19:14:52.415]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:14:52.415]      __var DP_SELECT         = 0x8;
[19:14:52.415]        // -> [DP_SELECT <= 0x00000008]
[19:14:52.416]      __var powered_down      = 0;
[19:14:52.416]        // -> [powered_down <= 0x00000000]
[19:14:52.416]      WriteDP(DP_SELECT, 0x00000000);
[19:14:52.417]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:14:52.417]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:14:52.419]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:14:52.419]        // -> [powered_down <= 0x00000001]
[19:14:52.419]    </block>
[19:14:52.419]    <control if="powered_down" while="" timeout="0" info="">
[19:14:52.419]      // if-block "powered_down"
[19:14:52.419]        // =>  TRUE
[19:14:52.419]      <block atomic="false" info="">
[19:14:52.419]        Message(0, "Debug/System power-up request sent");
[19:14:52.423]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:14:52.427]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:14:52.428]      </block>
[19:14:52.428]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:14:52.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:14:52.431]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:14:52.431]        // while-condition  =>  FALSE
[19:14:52.431]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:14:52.431]      </control>
[19:14:52.431]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:14:52.431]        // if-block "(__protocol & 0xFFFF) == 1"
[19:14:52.431]          // =>  FALSE
[19:14:52.431]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:14:52.431]      </control>
[19:14:52.431]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:14:52.431]        // if-block "(__protocol & 0xFFFF) == 2"
[19:14:52.432]          // =>  TRUE
[19:14:52.432]        <block atomic="false" info="">
[19:14:52.432]          Message(0, "executing SWD power up");
[19:14:52.433]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:14:52.435]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:14:52.435]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:14:52.437]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:14:52.437]        </block>
[19:14:52.437]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:14:52.437]      </control>
[19:14:52.437]      // end if-block "powered_down"
[19:14:52.437]    </control>
[19:14:52.437]    <block atomic="false" info="">
[19:14:52.437]      __var DEBUG_PORT_VAL    = 0;
[19:14:52.437]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:14:52.437]      __var ACCESS_POINT_VAL  = 0;
[19:14:52.437]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:14:52.437]      __ap = 1; 
[19:14:52.437]        // -> [__ap <= 0x00000001]
[19:14:52.437]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:14:52.443]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:14:52.443]      __ap = 4;
[19:14:52.443]        // -> [__ap <= 0x00000004]
[19:14:52.443]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:14:52.448]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:14:52.449]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:14:52.449]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:14:52.454]    </block>
[19:14:52.454]    <block atomic="false" info="">
[19:14:52.454]      __var nReset = 0x80;
[19:14:52.454]        // -> [nReset <= 0x00000080]
[19:14:52.455]      __var canReadPins = 0;
[19:14:52.455]        // -> [canReadPins <= 0x00000000]
[19:14:52.455]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:14:52.456]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:14:52.457]        // -> [canReadPins <= 0x00000001]
[19:14:52.457]    </block>
[19:14:52.457]    <control if="" while="1" timeout="200" info="">
[19:14:52.457]      // while "1"  (timeout="200")
[19:14:52.457]      // while-condition  =>  TRUE
[19:14:52.457]      // while "1"  (timeout="200")
[19:14:52.457]      // while-condition  =>  TRUE
[19:14:52.457]      // while "1"  (timeout="200")
[19:14:52.457]      // while-condition  =>  TRUE
[19:14:52.457]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.458]      // while-condition  =>  TRUE
[19:14:52.458]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.459]      // while "1"  (timeout="200")
[19:14:52.459]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.460]      // while "1"  (timeout="200")
[19:14:52.460]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.461]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.461]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.461]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.461]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.461]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.461]      // while-condition  =>  TRUE
[19:14:52.461]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.462]      // while-condition  =>  TRUE
[19:14:52.462]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.463]      // while-condition  =>  TRUE
[19:14:52.463]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.464]      // while "1"  (timeout="200")
[19:14:52.464]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.465]      // while "1"  (timeout="200")
[19:14:52.465]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.466]      // while-condition  =>  TRUE
[19:14:52.466]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.467]      // while "1"  (timeout="200")
[19:14:52.467]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.468]      // while-condition  =>  TRUE
[19:14:52.468]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.469]      // while-condition  =>  TRUE
[19:14:52.469]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.470]      // while-condition  =>  TRUE
[19:14:52.470]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.471]      // while "1"  (timeout="200")
[19:14:52.471]      // while-condition  =>  TRUE
[19:14:52.472]      // while "1"  (timeout="200")
[19:14:52.472]      // while  =>  TIMEOUT
[19:14:52.472]      // end while "1"
[19:14:52.472]    </control>
[19:14:52.472]    <control if="canReadPins" while="" timeout="0" info="">
[19:14:52.472]      // if-block "canReadPins"
[19:14:52.472]        // =>  TRUE
[19:14:52.472]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:14:52.472]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:14:52.474]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:14:52.474]        // while-condition  =>  FALSE
[19:14:52.474]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:14:52.474]      </control>
[19:14:52.474]      // end if-block "canReadPins"
[19:14:52.474]    </control>
[19:14:52.474]    <control if="!canReadPins" while="" timeout="0" info="">
[19:14:52.475]      // if-block "!canReadPins"
[19:14:52.475]        // =>  FALSE
[19:14:52.475]      // skip if-block "!canReadPins"
[19:14:52.475]    </control>
[19:14:52.475]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:14:52.475]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:14:52.475]        // =>  TRUE
[19:14:52.475]      <block atomic="false" info="">
[19:14:52.475]        WriteAP(0x00, 0x190008);
[19:14:52.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:14:52.477]        WriteAP(0xF0, 0x01);
[19:14:52.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:14:52.480]      </block>
[19:14:52.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:14:52.480]    </control>
[19:14:52.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:14:52.481]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:14:52.481]        // =>  FALSE
[19:14:52.481]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:14:52.481]    </control>
[19:14:52.481]    <block atomic="false" info="">
[19:14:52.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:14:52.483]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:14:52.483]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:14:52.483]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:14:52.486]      __ap = 0; //lets make sure we reset the access point selection
[19:14:52.487]        // -> [__ap <= 0x00000000]
[19:14:52.487]    </block>
[19:14:52.487]  </sequence>
[19:14:52.487]  
[19:14:52.508]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:14:52.508]  
[19:14:52.508]  <debugvars>
[19:14:52.508]    // Pre-defined
[19:14:52.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:14:52.508]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:14:52.508]    __dp=0x00000000
[19:14:52.508]    __ap=0x00000000
[19:14:52.508]    __traceout=0x00000000      (Trace Disabled)
[19:14:52.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:14:52.508]    __FlashAddr=0x00000000
[19:14:52.508]    __FlashLen=0x00000000
[19:14:52.508]    __FlashArg=0x00000000
[19:14:52.508]    __FlashOp=0x00000000
[19:14:52.508]    __Result=0x00000000
[19:14:52.508]  </debugvars>
[19:14:52.509]  
[19:14:52.509]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:14:52.509]    <block atomic="false" info="">
[19:14:52.509]      __var deviceID = 0;
[19:14:52.509]        // -> [deviceID <= 0x00000000]
[19:14:52.509]      __var version = 0;
[19:14:52.509]        // -> [version <= 0x00000000]
[19:14:52.509]      __var partNum = 0;
[19:14:52.509]        // -> [partNum <= 0x00000000]
[19:14:52.509]      __var manuf = 0;
[19:14:52.509]        // -> [manuf <= 0x00000000]
[19:14:52.509]      __var isMSPM0G1X0X_G3X0X = 0;
[19:14:52.509]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:14:52.509]      __var isProduction = 0;
[19:14:52.509]        // -> [isProduction <= 0x00000000]
[19:14:52.509]      __var continueId = 0;
[19:14:52.509]        // -> [continueId <= 0x00000000]
[19:14:52.509]      deviceID =   Read32(0x41C40004);
[19:14:52.514]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:14:52.514]        // -> [deviceID <= 0x2BB8802F]
[19:14:52.514]      version = deviceID >> 28;
[19:14:52.514]        // -> [version <= 0x00000002]
[19:14:52.514]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:14:52.514]        // -> [partNum <= 0x0000BB88]
[19:14:52.514]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:14:52.514]        // -> [manuf <= 0x00000017]
[19:14:52.514]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:14:52.514]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:14:52.514]      isProduction = (version > 0);
[19:14:52.514]        // -> [isProduction <= 0x00000001]
[19:14:52.514]    </block>
[19:14:52.514]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:14:52.514]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:14:52.514]        // =>  FALSE
[19:14:52.514]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:14:52.514]    </control>
[19:14:52.515]    <control if="continueId == 4" while="" timeout="0" info="">
[19:14:52.515]      // if-block "continueId == 4"
[19:14:52.515]        // =>  FALSE
[19:14:52.515]      // skip if-block "continueId == 4"
[19:14:52.515]    </control>
[19:14:52.515]    <control if="!isProduction" while="" timeout="0" info="">
[19:14:52.515]      // if-block "!isProduction"
[19:14:52.515]        // =>  FALSE
[19:14:52.515]      // skip if-block "!isProduction"
[19:14:52.515]    </control>
[19:14:52.515]  </sequence>
[19:14:52.515]  
[19:15:59.185]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:15:59.185]  
[19:15:59.186]  <debugvars>
[19:15:59.186]    // Pre-defined
[19:15:59.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:15:59.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:15:59.186]    __dp=0x00000000
[19:15:59.186]    __ap=0x00000000
[19:15:59.186]    __traceout=0x00000000      (Trace Disabled)
[19:15:59.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:15:59.186]    __FlashAddr=0x00000000
[19:15:59.186]    __FlashLen=0x00000000
[19:15:59.186]    __FlashArg=0x00000000
[19:15:59.186]    __FlashOp=0x00000000
[19:15:59.186]    __Result=0x00000000
[19:15:59.186]  </debugvars>
[19:15:59.186]  
[19:15:59.186]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:15:59.186]    <block atomic="false" info="">
[19:15:59.186]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:15:59.186]        // -> [isSWJ <= 0x00000001]
[19:15:59.186]      __var hasDormant = __protocol & 0x00020000;
[19:15:59.186]        // -> [hasDormant <= 0x00000000]
[19:15:59.187]      __var protType   = __protocol & 0x0000FFFF;
[19:15:59.187]        // -> [protType <= 0x00000002]
[19:15:59.187]    </block>
[19:15:59.187]    <control if="protType == 1" while="" timeout="0" info="">
[19:15:59.187]      // if-block "protType == 1"
[19:15:59.187]        // =>  FALSE
[19:15:59.187]      // skip if-block "protType == 1"
[19:15:59.187]    </control>
[19:15:59.187]    <control if="protType == 2" while="" timeout="0" info="">
[19:15:59.187]      // if-block "protType == 2"
[19:15:59.187]        // =>  TRUE
[19:15:59.187]      <control if="isSWJ" while="" timeout="0" info="">
[19:15:59.187]        // if-block "isSWJ"
[19:15:59.187]          // =>  TRUE
[19:15:59.187]        <control if="hasDormant" while="" timeout="0" info="">
[19:15:59.187]          // if-block "hasDormant"
[19:15:59.187]            // =>  FALSE
[19:15:59.187]          // skip if-block "hasDormant"
[19:15:59.187]        </control>
[19:15:59.187]        <control if="!hasDormant" while="" timeout="0" info="">
[19:15:59.187]          // if-block "!hasDormant"
[19:15:59.187]            // =>  TRUE
[19:15:59.188]          <block atomic="false" info="">
[19:15:59.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:15:59.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:15:59.189]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:15:59.192]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:15:59.192]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:15:59.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:15:59.194]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:15:59.195]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:15:59.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:15:59.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:15:59.197]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:15:59.198]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:15:59.198]          </block>
[19:15:59.198]          // end if-block "!hasDormant"
[19:15:59.198]        </control>
[19:15:59.198]        // end if-block "isSWJ"
[19:15:59.198]      </control>
[19:15:59.198]      <control if="!isSWJ" while="" timeout="0" info="">
[19:15:59.198]        // if-block "!isSWJ"
[19:15:59.198]          // =>  FALSE
[19:15:59.198]        // skip if-block "!isSWJ"
[19:15:59.198]      </control>
[19:15:59.198]      <block atomic="false" info="">
[19:15:59.198]        ReadDP(0x0);
[19:15:59.204]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:15:59.204]      </block>
[19:15:59.204]      // end if-block "protType == 2"
[19:15:59.204]    </control>
[19:15:59.204]  </sequence>
[19:15:59.204]  
[19:15:59.207]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:15:59.207]  
[19:15:59.207]  <debugvars>
[19:15:59.207]    // Pre-defined
[19:15:59.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:15:59.207]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:15:59.207]    __dp=0x00000000
[19:15:59.207]    __ap=0x00000000
[19:15:59.207]    __traceout=0x00000000      (Trace Disabled)
[19:15:59.207]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:15:59.207]    __FlashAddr=0x00000000
[19:15:59.207]    __FlashLen=0x00000000
[19:15:59.207]    __FlashArg=0x00000000
[19:15:59.207]    __FlashOp=0x00000000
[19:15:59.207]    __Result=0x00000000
[19:15:59.207]  </debugvars>
[19:15:59.207]  
[19:15:59.207]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:15:59.207]    <block atomic="false" info="">
[19:15:59.207]      __var SW_DP_ABORT       = 0x0;
[19:15:59.207]        // -> [SW_DP_ABORT <= 0x00000000]
[19:15:59.207]      __var DP_CTRL_STAT      = 0x4;
[19:15:59.207]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:15:59.207]      __var DP_SELECT         = 0x8;
[19:15:59.208]        // -> [DP_SELECT <= 0x00000008]
[19:15:59.208]      __var powered_down      = 0;
[19:15:59.208]        // -> [powered_down <= 0x00000000]
[19:15:59.208]      WriteDP(DP_SELECT, 0x00000000);
[19:15:59.212]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:15:59.212]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:15:59.213]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:15:59.214]        // -> [powered_down <= 0x00000001]
[19:15:59.214]    </block>
[19:15:59.214]    <control if="powered_down" while="" timeout="0" info="">
[19:15:59.214]      // if-block "powered_down"
[19:15:59.214]        // =>  TRUE
[19:15:59.214]      <block atomic="false" info="">
[19:15:59.214]        Message(0, "Debug/System power-up request sent");
[19:15:59.216]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:15:59.218]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:15:59.218]      </block>
[19:15:59.218]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:15:59.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:15:59.221]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:15:59.221]        // while-condition  =>  FALSE
[19:15:59.221]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:15:59.221]      </control>
[19:15:59.221]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:15:59.221]        // if-block "(__protocol & 0xFFFF) == 1"
[19:15:59.221]          // =>  FALSE
[19:15:59.221]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:15:59.221]      </control>
[19:15:59.221]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:15:59.221]        // if-block "(__protocol & 0xFFFF) == 2"
[19:15:59.221]          // =>  TRUE
[19:15:59.221]        <block atomic="false" info="">
[19:15:59.221]          Message(0, "executing SWD power up");
[19:15:59.223]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:15:59.226]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:15:59.226]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:15:59.227]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:15:59.228]        </block>
[19:15:59.228]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:15:59.228]      </control>
[19:15:59.228]      // end if-block "powered_down"
[19:15:59.228]    </control>
[19:15:59.228]    <block atomic="false" info="">
[19:15:59.228]      __var DEBUG_PORT_VAL    = 0;
[19:15:59.228]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:15:59.228]      __var ACCESS_POINT_VAL  = 0;
[19:15:59.228]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:15:59.228]      __ap = 1; 
[19:15:59.228]        // -> [__ap <= 0x00000001]
[19:15:59.228]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:15:59.232]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:15:59.232]      __ap = 4;
[19:15:59.232]        // -> [__ap <= 0x00000004]
[19:15:59.232]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:15:59.235]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:15:59.235]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:15:59.235]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:15:59.236]    </block>
[19:15:59.236]    <block atomic="false" info="">
[19:15:59.236]      __var nReset = 0x80;
[19:15:59.236]        // -> [nReset <= 0x00000080]
[19:15:59.236]      __var canReadPins = 0;
[19:15:59.236]        // -> [canReadPins <= 0x00000000]
[19:15:59.236]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:15:59.238]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:15:59.238]        // -> [canReadPins <= 0x00000001]
[19:15:59.238]    </block>
[19:15:59.238]    <control if="" while="1" timeout="200" info="">
[19:15:59.238]      // while "1"  (timeout="200")
[19:15:59.238]      // while-condition  =>  TRUE
[19:15:59.238]      // while "1"  (timeout="200")
[19:15:59.238]      // while-condition  =>  TRUE
[19:15:59.238]      // while "1"  (timeout="200")
[19:15:59.238]      // while-condition  =>  TRUE
[19:15:59.238]      // while "1"  (timeout="200")
[19:15:59.238]      // while-condition  =>  TRUE
[19:15:59.238]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.239]      // while-condition  =>  TRUE
[19:15:59.239]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.240]      // while-condition  =>  TRUE
[19:15:59.240]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.241]      // while "1"  (timeout="200")
[19:15:59.241]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.242]      // while-condition  =>  TRUE
[19:15:59.242]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.243]      // while "1"  (timeout="200")
[19:15:59.243]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.245]      // while-condition  =>  TRUE
[19:15:59.245]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.246]      // while-condition  =>  TRUE
[19:15:59.246]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.247]      // while-condition  =>  TRUE
[19:15:59.247]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.248]      // while "1"  (timeout="200")
[19:15:59.248]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.249]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.249]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.249]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.249]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.249]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.249]      // while-condition  =>  TRUE
[19:15:59.249]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.250]      // while "1"  (timeout="200")
[19:15:59.250]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.251]      // while "1"  (timeout="200")
[19:15:59.251]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.252]      // while-condition  =>  TRUE
[19:15:59.252]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.253]      // while-condition  =>  TRUE
[19:15:59.253]      // while "1"  (timeout="200")
[19:15:59.254]      // while-condition  =>  TRUE
[19:15:59.254]      // while "1"  (timeout="200")
[19:15:59.254]      // while  =>  TIMEOUT
[19:15:59.254]      // end while "1"
[19:15:59.254]    </control>
[19:15:59.254]    <control if="canReadPins" while="" timeout="0" info="">
[19:15:59.254]      // if-block "canReadPins"
[19:15:59.254]        // =>  TRUE
[19:15:59.254]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:15:59.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:15:59.255]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:15:59.255]        // while-condition  =>  FALSE
[19:15:59.255]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:15:59.255]      </control>
[19:15:59.255]      // end if-block "canReadPins"
[19:15:59.255]    </control>
[19:15:59.255]    <control if="!canReadPins" while="" timeout="0" info="">
[19:15:59.255]      // if-block "!canReadPins"
[19:15:59.256]        // =>  FALSE
[19:15:59.256]      // skip if-block "!canReadPins"
[19:15:59.256]    </control>
[19:15:59.256]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:15:59.256]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:15:59.256]        // =>  TRUE
[19:15:59.256]      <block atomic="false" info="">
[19:15:59.256]        WriteAP(0x00, 0x190008);
[19:15:59.257]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:15:59.258]        WriteAP(0xF0, 0x01);
[19:15:59.261]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:15:59.261]      </block>
[19:15:59.261]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:15:59.261]    </control>
[19:15:59.261]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:15:59.261]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:15:59.261]        // =>  FALSE
[19:15:59.261]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:15:59.261]    </control>
[19:15:59.261]    <block atomic="false" info="">
[19:15:59.261]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:15:59.264]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:15:59.264]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:15:59.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:15:59.267]      __ap = 0; //lets make sure we reset the access point selection
[19:15:59.267]        // -> [__ap <= 0x00000000]
[19:15:59.267]    </block>
[19:15:59.267]  </sequence>
[19:15:59.267]  
[19:15:59.288]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:15:59.288]  
[19:15:59.288]  <debugvars>
[19:15:59.288]    // Pre-defined
[19:15:59.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:15:59.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:15:59.289]    __dp=0x00000000
[19:15:59.289]    __ap=0x00000000
[19:15:59.289]    __traceout=0x00000000      (Trace Disabled)
[19:15:59.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:15:59.289]    __FlashAddr=0x00000000
[19:15:59.289]    __FlashLen=0x00000000
[19:15:59.289]    __FlashArg=0x00000000
[19:15:59.289]    __FlashOp=0x00000000
[19:15:59.289]    __Result=0x00000000
[19:15:59.289]  </debugvars>
[19:15:59.289]  
[19:15:59.289]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:15:59.290]    <block atomic="false" info="">
[19:15:59.290]      __var deviceID = 0;
[19:15:59.290]        // -> [deviceID <= 0x00000000]
[19:15:59.290]      __var version = 0;
[19:15:59.290]        // -> [version <= 0x00000000]
[19:15:59.290]      __var partNum = 0;
[19:15:59.290]        // -> [partNum <= 0x00000000]
[19:15:59.290]      __var manuf = 0;
[19:15:59.290]        // -> [manuf <= 0x00000000]
[19:15:59.290]      __var isMSPM0G1X0X_G3X0X = 0;
[19:15:59.290]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:15:59.290]      __var isProduction = 0;
[19:15:59.290]        // -> [isProduction <= 0x00000000]
[19:15:59.290]      __var continueId = 0;
[19:15:59.290]        // -> [continueId <= 0x00000000]
[19:15:59.290]      deviceID =   Read32(0x41C40004);
[19:15:59.294]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:15:59.295]        // -> [deviceID <= 0x2BB8802F]
[19:15:59.295]      version = deviceID >> 28;
[19:15:59.295]        // -> [version <= 0x00000002]
[19:15:59.295]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:15:59.295]        // -> [partNum <= 0x0000BB88]
[19:15:59.295]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:15:59.295]        // -> [manuf <= 0x00000017]
[19:15:59.295]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:15:59.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:15:59.295]      isProduction = (version > 0);
[19:15:59.295]        // -> [isProduction <= 0x00000001]
[19:15:59.295]    </block>
[19:15:59.295]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:15:59.295]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:15:59.295]        // =>  FALSE
[19:15:59.296]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:15:59.296]    </control>
[19:15:59.296]    <control if="continueId == 4" while="" timeout="0" info="">
[19:15:59.296]      // if-block "continueId == 4"
[19:15:59.296]        // =>  FALSE
[19:15:59.296]      // skip if-block "continueId == 4"
[19:15:59.296]    </control>
[19:15:59.296]    <control if="!isProduction" while="" timeout="0" info="">
[19:15:59.296]      // if-block "!isProduction"
[19:15:59.296]        // =>  FALSE
[19:15:59.296]      // skip if-block "!isProduction"
[19:15:59.296]    </control>
[19:15:59.296]  </sequence>
[19:15:59.296]  
[19:23:34.264]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:23:34.264]  
[19:23:34.264]  <debugvars>
[19:23:34.264]    // Pre-defined
[19:23:34.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:23:34.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:23:34.264]    __dp=0x00000000
[19:23:34.264]    __ap=0x00000000
[19:23:34.264]    __traceout=0x00000000      (Trace Disabled)
[19:23:34.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:23:34.266]    __FlashAddr=0x00000000
[19:23:34.266]    __FlashLen=0x00000000
[19:23:34.266]    __FlashArg=0x00000000
[19:23:34.266]    __FlashOp=0x00000000
[19:23:34.266]    __Result=0x00000000
[19:23:34.266]  </debugvars>
[19:23:34.266]  
[19:23:34.266]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:23:34.266]    <block atomic="false" info="">
[19:23:34.266]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:23:34.266]        // -> [isSWJ <= 0x00000001]
[19:23:34.266]      __var hasDormant = __protocol & 0x00020000;
[19:23:34.266]        // -> [hasDormant <= 0x00000000]
[19:23:34.266]      __var protType   = __protocol & 0x0000FFFF;
[19:23:34.266]        // -> [protType <= 0x00000002]
[19:23:34.266]    </block>
[19:23:34.266]    <control if="protType == 1" while="" timeout="0" info="">
[19:23:34.266]      // if-block "protType == 1"
[19:23:34.266]        // =>  FALSE
[19:23:34.267]      // skip if-block "protType == 1"
[19:23:34.267]    </control>
[19:23:34.267]    <control if="protType == 2" while="" timeout="0" info="">
[19:23:34.267]      // if-block "protType == 2"
[19:23:34.267]        // =>  TRUE
[19:23:34.267]      <control if="isSWJ" while="" timeout="0" info="">
[19:23:34.267]        // if-block "isSWJ"
[19:23:34.267]          // =>  TRUE
[19:23:34.267]        <control if="hasDormant" while="" timeout="0" info="">
[19:23:34.267]          // if-block "hasDormant"
[19:23:34.267]            // =>  FALSE
[19:23:34.267]          // skip if-block "hasDormant"
[19:23:34.267]        </control>
[19:23:34.267]        <control if="!hasDormant" while="" timeout="0" info="">
[19:23:34.267]          // if-block "!hasDormant"
[19:23:34.267]            // =>  TRUE
[19:23:34.267]          <block atomic="false" info="">
[19:23:34.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:23:34.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:23:34.269]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:23:34.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:23:34.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:23:34.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:23:34.273]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:23:34.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:23:34.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:23:34.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:23:34.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:23:34.282]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:23:34.282]          </block>
[19:23:34.282]          // end if-block "!hasDormant"
[19:23:34.282]        </control>
[19:23:34.282]        // end if-block "isSWJ"
[19:23:34.283]      </control>
[19:23:34.283]      <control if="!isSWJ" while="" timeout="0" info="">
[19:23:34.283]        // if-block "!isSWJ"
[19:23:34.283]          // =>  FALSE
[19:23:34.283]        // skip if-block "!isSWJ"
[19:23:34.283]      </control>
[19:23:34.283]      <block atomic="false" info="">
[19:23:34.283]        ReadDP(0x0);
[19:23:34.284]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:23:34.285]      </block>
[19:23:34.285]      // end if-block "protType == 2"
[19:23:34.285]    </control>
[19:23:34.285]  </sequence>
[19:23:34.285]  
[19:23:34.288]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:23:34.288]  
[19:23:34.288]  <debugvars>
[19:23:34.288]    // Pre-defined
[19:23:34.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:23:34.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:23:34.288]    __dp=0x00000000
[19:23:34.288]    __ap=0x00000000
[19:23:34.288]    __traceout=0x00000000      (Trace Disabled)
[19:23:34.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:23:34.288]    __FlashAddr=0x00000000
[19:23:34.288]    __FlashLen=0x00000000
[19:23:34.288]    __FlashArg=0x00000000
[19:23:34.288]    __FlashOp=0x00000000
[19:23:34.288]    __Result=0x00000000
[19:23:34.288]  </debugvars>
[19:23:34.288]  
[19:23:34.288]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:23:34.288]    <block atomic="false" info="">
[19:23:34.288]      __var SW_DP_ABORT       = 0x0;
[19:23:34.289]        // -> [SW_DP_ABORT <= 0x00000000]
[19:23:34.289]      __var DP_CTRL_STAT      = 0x4;
[19:23:34.289]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:23:34.289]      __var DP_SELECT         = 0x8;
[19:23:34.289]        // -> [DP_SELECT <= 0x00000008]
[19:23:34.289]      __var powered_down      = 0;
[19:23:34.289]        // -> [powered_down <= 0x00000000]
[19:23:34.289]      WriteDP(DP_SELECT, 0x00000000);
[19:23:34.294]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:23:34.294]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:23:34.296]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:23:34.297]        // -> [powered_down <= 0x00000001]
[19:23:34.297]    </block>
[19:23:34.297]    <control if="powered_down" while="" timeout="0" info="">
[19:23:34.297]      // if-block "powered_down"
[19:23:34.297]        // =>  TRUE
[19:23:34.297]      <block atomic="false" info="">
[19:23:34.297]        Message(0, "Debug/System power-up request sent");
[19:23:34.299]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:23:34.301]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:23:34.301]      </block>
[19:23:34.301]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:23:34.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:23:34.303]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:23:34.303]        // while-condition  =>  FALSE
[19:23:34.303]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:23:34.303]      </control>
[19:23:34.303]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:23:34.303]        // if-block "(__protocol & 0xFFFF) == 1"
[19:23:34.303]          // =>  FALSE
[19:23:34.303]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:23:34.303]      </control>
[19:23:34.303]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:23:34.303]        // if-block "(__protocol & 0xFFFF) == 2"
[19:23:34.303]          // =>  TRUE
[19:23:34.303]        <block atomic="false" info="">
[19:23:34.303]          Message(0, "executing SWD power up");
[19:23:34.305]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:23:34.308]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:23:34.308]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:23:34.310]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:23:34.310]        </block>
[19:23:34.310]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:23:34.310]      </control>
[19:23:34.310]      // end if-block "powered_down"
[19:23:34.310]    </control>
[19:23:34.310]    <block atomic="false" info="">
[19:23:34.310]      __var DEBUG_PORT_VAL    = 0;
[19:23:34.310]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:23:34.310]      __var ACCESS_POINT_VAL  = 0;
[19:23:34.310]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:23:34.310]      __ap = 1; 
[19:23:34.310]        // -> [__ap <= 0x00000001]
[19:23:34.310]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:23:34.314]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:23:34.314]      __ap = 4;
[19:23:34.314]        // -> [__ap <= 0x00000004]
[19:23:34.314]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:23:34.318]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:23:34.318]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:23:34.318]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:23:34.320]    </block>
[19:23:34.320]    <block atomic="false" info="">
[19:23:34.320]      __var nReset = 0x80;
[19:23:34.320]        // -> [nReset <= 0x00000080]
[19:23:34.320]      __var canReadPins = 0;
[19:23:34.320]        // -> [canReadPins <= 0x00000000]
[19:23:34.320]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:23:34.322]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:23:34.322]        // -> [canReadPins <= 0x00000001]
[19:23:34.323]    </block>
[19:23:34.323]    <control if="" while="1" timeout="200" info="">
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.323]      // while-condition  =>  TRUE
[19:23:34.323]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.324]      // while-condition  =>  TRUE
[19:23:34.324]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.325]      // while-condition  =>  TRUE
[19:23:34.325]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.326]      // while-condition  =>  TRUE
[19:23:34.326]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.327]      // while "1"  (timeout="200")
[19:23:34.327]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.328]      // while-condition  =>  TRUE
[19:23:34.328]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.329]      // while-condition  =>  TRUE
[19:23:34.329]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.330]      // while-condition  =>  TRUE
[19:23:34.330]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.331]      // while "1"  (timeout="200")
[19:23:34.331]      // while-condition  =>  TRUE
[19:23:34.332]      // while "1"  (timeout="200")
[19:23:34.332]      // while  =>  TIMEOUT
[19:23:34.332]      // end while "1"
[19:23:34.332]    </control>
[19:23:34.332]    <control if="canReadPins" while="" timeout="0" info="">
[19:23:34.332]      // if-block "canReadPins"
[19:23:34.332]        // =>  TRUE
[19:23:34.332]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:23:34.332]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:23:34.335]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:23:34.335]        // while-condition  =>  FALSE
[19:23:34.335]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:23:34.335]      </control>
[19:23:34.335]      // end if-block "canReadPins"
[19:23:34.335]    </control>
[19:23:34.335]    <control if="!canReadPins" while="" timeout="0" info="">
[19:23:34.336]      // if-block "!canReadPins"
[19:23:34.336]        // =>  FALSE
[19:23:34.336]      // skip if-block "!canReadPins"
[19:23:34.336]    </control>
[19:23:34.336]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:23:34.336]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:23:34.336]        // =>  TRUE
[19:23:34.336]      <block atomic="false" info="">
[19:23:34.336]        WriteAP(0x00, 0x190008);
[19:23:34.338]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:23:34.338]        WriteAP(0xF0, 0x01);
[19:23:34.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:23:34.341]      </block>
[19:23:34.341]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:23:34.341]    </control>
[19:23:34.342]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:23:34.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:23:34.342]        // =>  FALSE
[19:23:34.342]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:23:34.342]    </control>
[19:23:34.342]    <block atomic="false" info="">
[19:23:34.342]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:23:34.346]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:23:34.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:23:34.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:23:34.350]      __ap = 0; //lets make sure we reset the access point selection
[19:23:34.350]        // -> [__ap <= 0x00000000]
[19:23:34.350]    </block>
[19:23:34.350]  </sequence>
[19:23:34.350]  
[19:23:34.367]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:23:34.367]  
[19:23:34.367]  <debugvars>
[19:23:34.367]    // Pre-defined
[19:23:34.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:23:34.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:23:34.367]    __dp=0x00000000
[19:23:34.367]    __ap=0x00000000
[19:23:34.367]    __traceout=0x00000000      (Trace Disabled)
[19:23:34.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:23:34.367]    __FlashAddr=0x00000000
[19:23:34.367]    __FlashLen=0x00000000
[19:23:34.367]    __FlashArg=0x00000000
[19:23:34.368]    __FlashOp=0x00000000
[19:23:34.368]    __Result=0x00000000
[19:23:34.368]  </debugvars>
[19:23:34.368]  
[19:23:34.368]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:23:34.368]    <block atomic="false" info="">
[19:23:34.368]      __var deviceID = 0;
[19:23:34.368]        // -> [deviceID <= 0x00000000]
[19:23:34.368]      __var version = 0;
[19:23:34.368]        // -> [version <= 0x00000000]
[19:23:34.368]      __var partNum = 0;
[19:23:34.368]        // -> [partNum <= 0x00000000]
[19:23:34.368]      __var manuf = 0;
[19:23:34.368]        // -> [manuf <= 0x00000000]
[19:23:34.368]      __var isMSPM0G1X0X_G3X0X = 0;
[19:23:34.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:23:34.368]      __var isProduction = 0;
[19:23:34.368]        // -> [isProduction <= 0x00000000]
[19:23:34.369]      __var continueId = 0;
[19:23:34.369]        // -> [continueId <= 0x00000000]
[19:23:34.369]      deviceID =   Read32(0x41C40004);
[19:23:34.375]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:23:34.375]        // -> [deviceID <= 0x2BB8802F]
[19:23:34.375]      version = deviceID >> 28;
[19:23:34.375]        // -> [version <= 0x00000002]
[19:23:34.375]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:23:34.376]        // -> [partNum <= 0x0000BB88]
[19:23:34.376]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:23:34.376]        // -> [manuf <= 0x00000017]
[19:23:34.376]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:23:34.376]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:23:34.376]      isProduction = (version > 0);
[19:23:34.376]        // -> [isProduction <= 0x00000001]
[19:23:34.376]    </block>
[19:23:34.376]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:23:34.376]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:23:34.376]        // =>  FALSE
[19:23:34.376]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:23:34.376]    </control>
[19:23:34.376]    <control if="continueId == 4" while="" timeout="0" info="">
[19:23:34.376]      // if-block "continueId == 4"
[19:23:34.376]        // =>  FALSE
[19:23:34.376]      // skip if-block "continueId == 4"
[19:23:34.376]    </control>
[19:23:34.376]    <control if="!isProduction" while="" timeout="0" info="">
[19:23:34.376]      // if-block "!isProduction"
[19:23:34.377]        // =>  FALSE
[19:23:34.377]      // skip if-block "!isProduction"
[19:23:34.377]    </control>
[19:23:34.377]  </sequence>
[19:23:34.377]  
[19:28:51.441]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:28:51.441]  
[19:28:51.441]  <debugvars>
[19:28:51.441]    // Pre-defined
[19:28:51.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:28:51.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:28:51.441]    __dp=0x00000000
[19:28:51.441]    __ap=0x00000000
[19:28:51.441]    __traceout=0x00000000      (Trace Disabled)
[19:28:51.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:28:51.442]    __FlashAddr=0x00000000
[19:28:51.442]    __FlashLen=0x00000000
[19:28:51.442]    __FlashArg=0x00000000
[19:28:51.442]    __FlashOp=0x00000000
[19:28:51.442]    __Result=0x00000000
[19:28:51.442]  </debugvars>
[19:28:51.442]  
[19:28:51.442]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:28:51.442]    <block atomic="false" info="">
[19:28:51.442]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:28:51.442]        // -> [isSWJ <= 0x00000001]
[19:28:51.442]      __var hasDormant = __protocol & 0x00020000;
[19:28:51.442]        // -> [hasDormant <= 0x00000000]
[19:28:51.442]      __var protType   = __protocol & 0x0000FFFF;
[19:28:51.442]        // -> [protType <= 0x00000002]
[19:28:51.442]    </block>
[19:28:51.442]    <control if="protType == 1" while="" timeout="0" info="">
[19:28:51.442]      // if-block "protType == 1"
[19:28:51.442]        // =>  FALSE
[19:28:51.442]      // skip if-block "protType == 1"
[19:28:51.442]    </control>
[19:28:51.442]    <control if="protType == 2" while="" timeout="0" info="">
[19:28:51.442]      // if-block "protType == 2"
[19:28:51.442]        // =>  TRUE
[19:28:51.442]      <control if="isSWJ" while="" timeout="0" info="">
[19:28:51.442]        // if-block "isSWJ"
[19:28:51.443]          // =>  TRUE
[19:28:51.443]        <control if="hasDormant" while="" timeout="0" info="">
[19:28:51.443]          // if-block "hasDormant"
[19:28:51.443]            // =>  FALSE
[19:28:51.443]          // skip if-block "hasDormant"
[19:28:51.443]        </control>
[19:28:51.443]        <control if="!hasDormant" while="" timeout="0" info="">
[19:28:51.443]          // if-block "!hasDormant"
[19:28:51.443]            // =>  TRUE
[19:28:51.443]          <block atomic="false" info="">
[19:28:51.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:28:51.444]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:28:51.444]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:28:51.446]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:28:51.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:28:51.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:28:51.449]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:28:51.450]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:28:51.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:28:51.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:28:51.451]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:28:51.455]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:28:51.455]          </block>
[19:28:51.455]          // end if-block "!hasDormant"
[19:28:51.455]        </control>
[19:28:51.455]        // end if-block "isSWJ"
[19:28:51.455]      </control>
[19:28:51.455]      <control if="!isSWJ" while="" timeout="0" info="">
[19:28:51.455]        // if-block "!isSWJ"
[19:28:51.455]          // =>  FALSE
[19:28:51.455]        // skip if-block "!isSWJ"
[19:28:51.455]      </control>
[19:28:51.455]      <block atomic="false" info="">
[19:28:51.455]        ReadDP(0x0);
[19:28:51.457]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:28:51.457]      </block>
[19:28:51.457]      // end if-block "protType == 2"
[19:28:51.457]    </control>
[19:28:51.457]  </sequence>
[19:28:51.457]  
[19:28:51.459]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:28:51.459]  
[19:28:51.459]  <debugvars>
[19:28:51.459]    // Pre-defined
[19:28:51.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:28:51.459]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:28:51.459]    __dp=0x00000000
[19:28:51.459]    __ap=0x00000000
[19:28:51.459]    __traceout=0x00000000      (Trace Disabled)
[19:28:51.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:28:51.459]    __FlashAddr=0x00000000
[19:28:51.459]    __FlashLen=0x00000000
[19:28:51.460]    __FlashArg=0x00000000
[19:28:51.460]    __FlashOp=0x00000000
[19:28:51.460]    __Result=0x00000000
[19:28:51.460]  </debugvars>
[19:28:51.460]  
[19:28:51.460]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:28:51.460]    <block atomic="false" info="">
[19:28:51.460]      __var SW_DP_ABORT       = 0x0;
[19:28:51.460]        // -> [SW_DP_ABORT <= 0x00000000]
[19:28:51.460]      __var DP_CTRL_STAT      = 0x4;
[19:28:51.460]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:28:51.460]      __var DP_SELECT         = 0x8;
[19:28:51.460]        // -> [DP_SELECT <= 0x00000008]
[19:28:51.460]      __var powered_down      = 0;
[19:28:51.460]        // -> [powered_down <= 0x00000000]
[19:28:51.460]      WriteDP(DP_SELECT, 0x00000000);
[19:28:51.462]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:28:51.462]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:28:51.463]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:28:51.463]        // -> [powered_down <= 0x00000001]
[19:28:51.464]    </block>
[19:28:51.464]    <control if="powered_down" while="" timeout="0" info="">
[19:28:51.464]      // if-block "powered_down"
[19:28:51.464]        // =>  TRUE
[19:28:51.464]      <block atomic="false" info="">
[19:28:51.464]        Message(0, "Debug/System power-up request sent");
[19:28:51.468]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:28:51.470]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:28:51.470]      </block>
[19:28:51.470]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:28:51.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:28:51.471]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:28:51.471]        // while-condition  =>  FALSE
[19:28:51.471]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:28:51.471]      </control>
[19:28:51.472]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:28:51.472]        // if-block "(__protocol & 0xFFFF) == 1"
[19:28:51.472]          // =>  FALSE
[19:28:51.472]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:28:51.472]      </control>
[19:28:51.472]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:28:51.472]        // if-block "(__protocol & 0xFFFF) == 2"
[19:28:51.472]          // =>  TRUE
[19:28:51.472]        <block atomic="false" info="">
[19:28:51.472]          Message(0, "executing SWD power up");
[19:28:51.473]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:28:51.475]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:28:51.476]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:28:51.477]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:28:51.477]        </block>
[19:28:51.477]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:28:51.478]      </control>
[19:28:51.478]      // end if-block "powered_down"
[19:28:51.478]    </control>
[19:28:51.478]    <block atomic="false" info="">
[19:28:51.478]      __var DEBUG_PORT_VAL    = 0;
[19:28:51.478]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:28:51.478]      __var ACCESS_POINT_VAL  = 0;
[19:28:51.478]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:28:51.478]      __ap = 1; 
[19:28:51.478]        // -> [__ap <= 0x00000001]
[19:28:51.478]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:28:51.481]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:28:51.481]      __ap = 4;
[19:28:51.481]        // -> [__ap <= 0x00000004]
[19:28:51.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:28:51.484]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.484]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:28:51.484]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:28:51.486]    </block>
[19:28:51.486]    <block atomic="false" info="">
[19:28:51.486]      __var nReset = 0x80;
[19:28:51.486]        // -> [nReset <= 0x00000080]
[19:28:51.486]      __var canReadPins = 0;
[19:28:51.486]        // -> [canReadPins <= 0x00000000]
[19:28:51.486]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:28:51.488]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:28:51.488]        // -> [canReadPins <= 0x00000001]
[19:28:51.488]    </block>
[19:28:51.488]    <control if="" while="1" timeout="200" info="">
[19:28:51.488]      // while "1"  (timeout="200")
[19:28:51.488]      // while-condition  =>  TRUE
[19:28:51.488]      // while "1"  (timeout="200")
[19:28:51.488]      // while-condition  =>  TRUE
[19:28:51.488]      // while "1"  (timeout="200")
[19:28:51.488]      // while-condition  =>  TRUE
[19:28:51.488]      // while "1"  (timeout="200")
[19:28:51.488]      // while-condition  =>  TRUE
[19:28:51.488]      // while "1"  (timeout="200")
[19:28:51.489]      // while-condition  =>  TRUE
[19:28:51.489]      // while "1"  (timeout="200")
[19:28:51.489]      // while  =>  TIMEOUT
[19:28:51.489]      // end while "1"
[19:28:51.489]    </control>
[19:28:51.489]    <control if="canReadPins" while="" timeout="0" info="">
[19:28:51.489]      // if-block "canReadPins"
[19:28:51.489]        // =>  TRUE
[19:28:51.489]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:28:51.489]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:28:51.490]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:28:51.490]        // while-condition  =>  FALSE
[19:28:51.490]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:28:51.490]      </control>
[19:28:51.490]      // end if-block "canReadPins"
[19:28:51.490]    </control>
[19:28:51.490]    <control if="!canReadPins" while="" timeout="0" info="">
[19:28:51.491]      // if-block "!canReadPins"
[19:28:51.491]        // =>  FALSE
[19:28:51.491]      // skip if-block "!canReadPins"
[19:28:51.491]    </control>
[19:28:51.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:28:51.491]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:28:51.491]        // =>  TRUE
[19:28:51.491]      <block atomic="false" info="">
[19:28:51.491]        WriteAP(0x00, 0x190008);
[19:28:51.492]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.493]        WriteAP(0xF0, 0x01);
[19:28:51.496]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.496]      </block>
[19:28:51.496]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:28:51.496]    </control>
[19:28:51.496]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:28:51.496]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:28:51.496]        // =>  FALSE
[19:28:51.496]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:28:51.496]    </control>
[19:28:51.496]    <block atomic="false" info="">
[19:28:51.496]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:28:51.499]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:28:51.499]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:28:51.499]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:28:51.501]      __ap = 0; //lets make sure we reset the access point selection
[19:28:51.501]        // -> [__ap <= 0x00000000]
[19:28:51.501]    </block>
[19:28:51.501]  </sequence>
[19:28:51.501]  
[19:28:51.519]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:28:51.519]  
[19:28:51.519]  <debugvars>
[19:28:51.519]    // Pre-defined
[19:28:51.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:28:51.520]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:28:51.520]    __dp=0x00000000
[19:28:51.520]    __ap=0x00000000
[19:28:51.520]    __traceout=0x00000000      (Trace Disabled)
[19:28:51.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:28:51.520]    __FlashAddr=0x00000000
[19:28:51.520]    __FlashLen=0x00000000
[19:28:51.520]    __FlashArg=0x00000000
[19:28:51.520]    __FlashOp=0x00000000
[19:28:51.520]    __Result=0x00000000
[19:28:51.520]  </debugvars>
[19:28:51.520]  
[19:28:51.520]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:28:51.520]    <block atomic="false" info="">
[19:28:51.520]      __var deviceID = 0;
[19:28:51.520]        // -> [deviceID <= 0x00000000]
[19:28:51.520]      __var version = 0;
[19:28:51.520]        // -> [version <= 0x00000000]
[19:28:51.520]      __var partNum = 0;
[19:28:51.520]        // -> [partNum <= 0x00000000]
[19:28:51.520]      __var manuf = 0;
[19:28:51.520]        // -> [manuf <= 0x00000000]
[19:28:51.521]      __var isMSPM0G1X0X_G3X0X = 0;
[19:28:51.521]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:28:51.521]      __var isProduction = 0;
[19:28:51.521]        // -> [isProduction <= 0x00000000]
[19:28:51.521]      __var continueId = 0;
[19:28:51.521]        // -> [continueId <= 0x00000000]
[19:28:51.521]      deviceID =   Read32(0x41C40004);
[19:28:51.528]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:28:51.528]        // -> [deviceID <= 0x2BB8802F]
[19:28:51.528]      version = deviceID >> 28;
[19:28:51.528]        // -> [version <= 0x00000002]
[19:28:51.528]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:28:51.529]        // -> [partNum <= 0x0000BB88]
[19:28:51.529]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:28:51.529]        // -> [manuf <= 0x00000017]
[19:28:51.529]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:28:51.529]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:28:51.529]      isProduction = (version > 0);
[19:28:51.529]        // -> [isProduction <= 0x00000001]
[19:28:51.529]    </block>
[19:28:51.529]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:28:51.529]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:28:51.529]        // =>  FALSE
[19:28:51.529]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:28:51.529]    </control>
[19:28:51.529]    <control if="continueId == 4" while="" timeout="0" info="">
[19:28:51.529]      // if-block "continueId == 4"
[19:28:51.529]        // =>  FALSE
[19:28:51.529]      // skip if-block "continueId == 4"
[19:28:51.529]    </control>
[19:28:51.529]    <control if="!isProduction" while="" timeout="0" info="">
[19:28:51.529]      // if-block "!isProduction"
[19:28:51.529]        // =>  FALSE
[19:28:51.529]      // skip if-block "!isProduction"
[19:28:51.529]    </control>
[19:28:51.529]  </sequence>
[19:28:51.529]  
[19:48:31.490]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:48:31.490]  
[19:48:31.490]  <debugvars>
[19:48:31.490]    // Pre-defined
[19:48:31.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:31.490]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:31.490]    __dp=0x00000000
[19:48:31.490]    __ap=0x00000000
[19:48:31.490]    __traceout=0x00000000      (Trace Disabled)
[19:48:31.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:31.490]    __FlashAddr=0x00000000
[19:48:31.490]    __FlashLen=0x00000000
[19:48:31.491]    __FlashArg=0x00000000
[19:48:31.491]    __FlashOp=0x00000000
[19:48:31.491]    __Result=0x00000000
[19:48:31.491]  </debugvars>
[19:48:31.491]  
[19:48:31.491]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:48:31.491]    <block atomic="false" info="">
[19:48:31.491]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:48:31.491]        // -> [isSWJ <= 0x00000001]
[19:48:31.491]      __var hasDormant = __protocol & 0x00020000;
[19:48:31.491]        // -> [hasDormant <= 0x00000000]
[19:48:31.491]      __var protType   = __protocol & 0x0000FFFF;
[19:48:31.491]        // -> [protType <= 0x00000002]
[19:48:31.491]    </block>
[19:48:31.492]    <control if="protType == 1" while="" timeout="0" info="">
[19:48:31.492]      // if-block "protType == 1"
[19:48:31.492]        // =>  FALSE
[19:48:31.492]      // skip if-block "protType == 1"
[19:48:31.492]    </control>
[19:48:31.492]    <control if="protType == 2" while="" timeout="0" info="">
[19:48:31.492]      // if-block "protType == 2"
[19:48:31.492]        // =>  TRUE
[19:48:31.492]      <control if="isSWJ" while="" timeout="0" info="">
[19:48:31.492]        // if-block "isSWJ"
[19:48:31.492]          // =>  TRUE
[19:48:31.492]        <control if="hasDormant" while="" timeout="0" info="">
[19:48:31.493]          // if-block "hasDormant"
[19:48:31.493]            // =>  FALSE
[19:48:31.493]          // skip if-block "hasDormant"
[19:48:31.493]        </control>
[19:48:31.493]        <control if="!hasDormant" while="" timeout="0" info="">
[19:48:31.493]          // if-block "!hasDormant"
[19:48:31.493]            // =>  TRUE
[19:48:31.493]          <block atomic="false" info="">
[19:48:31.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:48:31.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:31.495]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:48:31.497]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:48:31.497]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:48:31.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:31.499]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:48:31.500]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:48:31.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:48:31.502]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:31.502]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:48:31.503]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:48:31.504]          </block>
[19:48:31.504]          // end if-block "!hasDormant"
[19:48:31.504]        </control>
[19:48:31.504]        // end if-block "isSWJ"
[19:48:31.505]      </control>
[19:48:31.505]      <control if="!isSWJ" while="" timeout="0" info="">
[19:48:31.505]        // if-block "!isSWJ"
[19:48:31.505]          // =>  FALSE
[19:48:31.505]        // skip if-block "!isSWJ"
[19:48:31.505]      </control>
[19:48:31.505]      <block atomic="false" info="">
[19:48:31.505]        ReadDP(0x0);
[19:48:31.507]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:48:31.507]      </block>
[19:48:31.507]      // end if-block "protType == 2"
[19:48:31.507]    </control>
[19:48:31.507]  </sequence>
[19:48:31.508]  
[19:48:31.510]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:48:31.510]  
[19:48:31.510]  <debugvars>
[19:48:31.510]    // Pre-defined
[19:48:31.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:31.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:31.510]    __dp=0x00000000
[19:48:31.510]    __ap=0x00000000
[19:48:31.510]    __traceout=0x00000000      (Trace Disabled)
[19:48:31.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:31.511]    __FlashAddr=0x00000000
[19:48:31.511]    __FlashLen=0x00000000
[19:48:31.511]    __FlashArg=0x00000000
[19:48:31.511]    __FlashOp=0x00000000
[19:48:31.511]    __Result=0x00000000
[19:48:31.511]  </debugvars>
[19:48:31.511]  
[19:48:31.511]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:48:31.511]    <block atomic="false" info="">
[19:48:31.511]      __var SW_DP_ABORT       = 0x0;
[19:48:31.511]        // -> [SW_DP_ABORT <= 0x00000000]
[19:48:31.511]      __var DP_CTRL_STAT      = 0x4;
[19:48:31.511]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:48:31.511]      __var DP_SELECT         = 0x8;
[19:48:31.511]        // -> [DP_SELECT <= 0x00000008]
[19:48:31.511]      __var powered_down      = 0;
[19:48:31.511]        // -> [powered_down <= 0x00000000]
[19:48:31.511]      WriteDP(DP_SELECT, 0x00000000);
[19:48:31.513]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:48:31.514]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:48:31.516]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:48:31.516]        // -> [powered_down <= 0x00000001]
[19:48:31.516]    </block>
[19:48:31.516]    <control if="powered_down" while="" timeout="0" info="">
[19:48:31.516]      // if-block "powered_down"
[19:48:31.516]        // =>  TRUE
[19:48:31.516]      <block atomic="false" info="">
[19:48:31.516]        Message(0, "Debug/System power-up request sent");
[19:48:31.518]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:48:31.520]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:48:31.520]      </block>
[19:48:31.520]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:48:31.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:48:31.522]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:48:31.522]        // while-condition  =>  FALSE
[19:48:31.522]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:48:31.522]      </control>
[19:48:31.522]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:48:31.522]        // if-block "(__protocol & 0xFFFF) == 1"
[19:48:31.522]          // =>  FALSE
[19:48:31.522]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:48:31.522]      </control>
[19:48:31.522]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:48:31.522]        // if-block "(__protocol & 0xFFFF) == 2"
[19:48:31.522]          // =>  TRUE
[19:48:31.522]        <block atomic="false" info="">
[19:48:31.522]          Message(0, "executing SWD power up");
[19:48:31.524]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:48:31.525]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:48:31.525]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:48:31.527]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:48:31.527]        </block>
[19:48:31.527]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:48:31.527]      </control>
[19:48:31.527]      // end if-block "powered_down"
[19:48:31.527]    </control>
[19:48:31.527]    <block atomic="false" info="">
[19:48:31.527]      __var DEBUG_PORT_VAL    = 0;
[19:48:31.527]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:48:31.528]      __var ACCESS_POINT_VAL  = 0;
[19:48:31.528]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:48:31.528]      __ap = 1; 
[19:48:31.528]        // -> [__ap <= 0x00000001]
[19:48:31.528]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:48:31.531]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:48:31.531]      __ap = 4;
[19:48:31.531]        // -> [__ap <= 0x00000004]
[19:48:31.531]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:31.535]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.535]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:48:31.535]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:31.536]    </block>
[19:48:31.536]    <block atomic="false" info="">
[19:48:31.536]      __var nReset = 0x80;
[19:48:31.536]        // -> [nReset <= 0x00000080]
[19:48:31.536]      __var canReadPins = 0;
[19:48:31.536]        // -> [canReadPins <= 0x00000000]
[19:48:31.536]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:48:31.537]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:48:31.538]        // -> [canReadPins <= 0x00000001]
[19:48:31.538]    </block>
[19:48:31.538]    <control if="" while="1" timeout="200" info="">
[19:48:31.538]      // while "1"  (timeout="200")
[19:48:31.538]      // while-condition  =>  TRUE
[19:48:31.538]      // while "1"  (timeout="200")
[19:48:31.538]      // while-condition  =>  TRUE
[19:48:31.538]      // while "1"  (timeout="200")
[19:48:31.538]      // while-condition  =>  TRUE
[19:48:31.538]      // while "1"  (timeout="200")
[19:48:31.538]      // while-condition  =>  TRUE
[19:48:31.538]      // while "1"  (timeout="200")
[19:48:31.538]      // while-condition  =>  TRUE
[19:48:31.538]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.539]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.539]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.539]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.539]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.539]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.539]      // while "1"  (timeout="200")
[19:48:31.539]      // while-condition  =>  TRUE
[19:48:31.540]      // while "1"  (timeout="200")
[19:48:31.540]      // while-condition  =>  TRUE
[19:48:31.540]      // while "1"  (timeout="200")
[19:48:31.540]      // while-condition  =>  TRUE
[19:48:31.540]      // while "1"  (timeout="200")
[19:48:31.540]      // while-condition  =>  TRUE
[19:48:31.540]      // while "1"  (timeout="200")
[19:48:31.540]      // while-condition  =>  TRUE
[19:48:31.540]      // while "1"  (timeout="200")
[19:48:31.540]      // while-condition  =>  TRUE
[19:48:31.540]      // while "1"  (timeout="200")
[19:48:31.540]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.541]      // while-condition  =>  TRUE
[19:48:31.541]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.542]      // while-condition  =>  TRUE
[19:48:31.542]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.543]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.543]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.543]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.543]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.543]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.543]      // while "1"  (timeout="200")
[19:48:31.543]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.544]      // while "1"  (timeout="200")
[19:48:31.544]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.545]      // while "1"  (timeout="200")
[19:48:31.545]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.546]      // while "1"  (timeout="200")
[19:48:31.546]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.547]      // while-condition  =>  TRUE
[19:48:31.547]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.548]      // while "1"  (timeout="200")
[19:48:31.548]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.549]      // while "1"  (timeout="200")
[19:48:31.549]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.550]      // while-condition  =>  TRUE
[19:48:31.550]      // while "1"  (timeout="200")
[19:48:31.551]      // while-condition  =>  TRUE
[19:48:31.551]      // while "1"  (timeout="200")
[19:48:31.551]      // while  =>  TIMEOUT
[19:48:31.551]      // end while "1"
[19:48:31.551]    </control>
[19:48:31.551]    <control if="canReadPins" while="" timeout="0" info="">
[19:48:31.551]      // if-block "canReadPins"
[19:48:31.551]        // =>  TRUE
[19:48:31.551]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:48:31.551]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:48:31.552]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:48:31.552]        // while-condition  =>  FALSE
[19:48:31.552]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:48:31.552]      </control>
[19:48:31.552]      // end if-block "canReadPins"
[19:48:31.553]    </control>
[19:48:31.553]    <control if="!canReadPins" while="" timeout="0" info="">
[19:48:31.553]      // if-block "!canReadPins"
[19:48:31.553]        // =>  FALSE
[19:48:31.553]      // skip if-block "!canReadPins"
[19:48:31.553]    </control>
[19:48:31.553]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:48:31.553]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:31.553]        // =>  TRUE
[19:48:31.553]      <block atomic="false" info="">
[19:48:31.553]        WriteAP(0x00, 0x190008);
[19:48:31.555]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.555]        WriteAP(0xF0, 0x01);
[19:48:31.558]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.558]      </block>
[19:48:31.558]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:31.558]    </control>
[19:48:31.558]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:48:31.558]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:31.559]        // =>  FALSE
[19:48:31.559]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:31.559]    </control>
[19:48:31.559]    <block atomic="false" info="">
[19:48:31.559]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:31.562]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:48:31.562]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:48:31.562]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:31.563]      __ap = 0; //lets make sure we reset the access point selection
[19:48:31.563]        // -> [__ap <= 0x00000000]
[19:48:31.563]    </block>
[19:48:31.563]  </sequence>
[19:48:31.563]  
[19:48:31.580]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:48:31.580]  
[19:48:31.580]  <debugvars>
[19:48:31.581]    // Pre-defined
[19:48:31.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:31.581]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:31.581]    __dp=0x00000000
[19:48:31.581]    __ap=0x00000000
[19:48:31.581]    __traceout=0x00000000      (Trace Disabled)
[19:48:31.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:31.581]    __FlashAddr=0x00000000
[19:48:31.581]    __FlashLen=0x00000000
[19:48:31.581]    __FlashArg=0x00000000
[19:48:31.581]    __FlashOp=0x00000000
[19:48:31.581]    __Result=0x00000000
[19:48:31.581]  </debugvars>
[19:48:31.581]  
[19:48:31.581]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:48:31.581]    <block atomic="false" info="">
[19:48:31.581]      __var deviceID = 0;
[19:48:31.581]        // -> [deviceID <= 0x00000000]
[19:48:31.581]      __var version = 0;
[19:48:31.581]        // -> [version <= 0x00000000]
[19:48:31.581]      __var partNum = 0;
[19:48:31.581]        // -> [partNum <= 0x00000000]
[19:48:31.581]      __var manuf = 0;
[19:48:31.581]        // -> [manuf <= 0x00000000]
[19:48:31.581]      __var isMSPM0G1X0X_G3X0X = 0;
[19:48:31.581]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:48:31.581]      __var isProduction = 0;
[19:48:31.581]        // -> [isProduction <= 0x00000000]
[19:48:31.581]      __var continueId = 0;
[19:48:31.581]        // -> [continueId <= 0x00000000]
[19:48:31.581]      deviceID =   Read32(0x41C40004);
[19:48:31.589]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:48:31.590]        // -> [deviceID <= 0x2BB8802F]
[19:48:31.590]      version = deviceID >> 28;
[19:48:31.590]        // -> [version <= 0x00000002]
[19:48:31.590]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:48:31.590]        // -> [partNum <= 0x0000BB88]
[19:48:31.590]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:48:31.590]        // -> [manuf <= 0x00000017]
[19:48:31.590]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:48:31.590]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:48:31.591]      isProduction = (version > 0);
[19:48:31.591]        // -> [isProduction <= 0x00000001]
[19:48:31.591]    </block>
[19:48:31.591]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:48:31.591]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:48:31.591]        // =>  FALSE
[19:48:31.591]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:48:31.591]    </control>
[19:48:31.591]    <control if="continueId == 4" while="" timeout="0" info="">
[19:48:31.591]      // if-block "continueId == 4"
[19:48:31.591]        // =>  FALSE
[19:48:31.591]      // skip if-block "continueId == 4"
[19:48:31.591]    </control>
[19:48:31.591]    <control if="!isProduction" while="" timeout="0" info="">
[19:48:31.591]      // if-block "!isProduction"
[19:48:31.591]        // =>  FALSE
[19:48:31.591]      // skip if-block "!isProduction"
[19:48:31.591]    </control>
[19:48:31.591]  </sequence>
[19:48:31.592]  
[19:51:24.035]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:51:24.035]  
[19:51:24.042]  <debugvars>
[19:51:24.042]    // Pre-defined
[19:51:24.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:24.042]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:24.042]    __dp=0x00000000
[19:51:24.043]    __ap=0x00000000
[19:51:24.043]    __traceout=0x00000000      (Trace Disabled)
[19:51:24.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:24.043]    __FlashAddr=0x00000000
[19:51:24.043]    __FlashLen=0x00000000
[19:51:24.043]    __FlashArg=0x00000000
[19:51:24.043]    __FlashOp=0x00000000
[19:51:24.043]    __Result=0x00000000
[19:51:24.043]  </debugvars>
[19:51:24.043]  
[19:51:24.044]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:51:24.044]    <block atomic="false" info="">
[19:51:24.044]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:51:24.044]        // -> [isSWJ <= 0x00000001]
[19:51:24.044]      __var hasDormant = __protocol & 0x00020000;
[19:51:24.044]        // -> [hasDormant <= 0x00000000]
[19:51:24.044]      __var protType   = __protocol & 0x0000FFFF;
[19:51:24.045]        // -> [protType <= 0x00000002]
[19:51:24.045]    </block>
[19:51:24.045]    <control if="protType == 1" while="" timeout="0" info="">
[19:51:24.045]      // if-block "protType == 1"
[19:51:24.045]        // =>  FALSE
[19:51:24.045]      // skip if-block "protType == 1"
[19:51:24.045]    </control>
[19:51:24.046]    <control if="protType == 2" while="" timeout="0" info="">
[19:51:24.046]      // if-block "protType == 2"
[19:51:24.046]        // =>  TRUE
[19:51:24.046]      <control if="isSWJ" while="" timeout="0" info="">
[19:51:24.046]        // if-block "isSWJ"
[19:51:24.046]          // =>  TRUE
[19:51:24.046]        <control if="hasDormant" while="" timeout="0" info="">
[19:51:24.046]          // if-block "hasDormant"
[19:51:24.047]            // =>  FALSE
[19:51:24.047]          // skip if-block "hasDormant"
[19:51:24.047]        </control>
[19:51:24.047]        <control if="!hasDormant" while="" timeout="0" info="">
[19:51:24.047]          // if-block "!hasDormant"
[19:51:24.047]            // =>  TRUE
[19:51:24.047]          <block atomic="false" info="">
[19:51:24.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:51:24.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:24.049]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:51:24.050]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:51:24.050]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:51:24.051]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:24.052]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:51:24.053]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:51:24.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:51:24.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:24.055]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:51:24.057]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:51:24.057]          </block>
[19:51:24.057]          // end if-block "!hasDormant"
[19:51:24.057]        </control>
[19:51:24.057]        // end if-block "isSWJ"
[19:51:24.057]      </control>
[19:51:24.057]      <control if="!isSWJ" while="" timeout="0" info="">
[19:51:24.057]        // if-block "!isSWJ"
[19:51:24.058]          // =>  FALSE
[19:51:24.058]        // skip if-block "!isSWJ"
[19:51:24.058]      </control>
[19:51:24.058]      <block atomic="false" info="">
[19:51:24.058]        ReadDP(0x0);
[19:51:24.060]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:51:24.060]      </block>
[19:51:24.060]      // end if-block "protType == 2"
[19:51:24.060]    </control>
[19:51:24.060]  </sequence>
[19:51:24.060]  
[19:51:24.063]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:51:24.063]  
[19:51:24.064]  <debugvars>
[19:51:24.064]    // Pre-defined
[19:51:24.064]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:24.064]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:24.064]    __dp=0x00000000
[19:51:24.064]    __ap=0x00000000
[19:51:24.064]    __traceout=0x00000000      (Trace Disabled)
[19:51:24.064]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:24.064]    __FlashAddr=0x00000000
[19:51:24.064]    __FlashLen=0x00000000
[19:51:24.064]    __FlashArg=0x00000000
[19:51:24.065]    __FlashOp=0x00000000
[19:51:24.065]    __Result=0x00000000
[19:51:24.065]  </debugvars>
[19:51:24.065]  
[19:51:24.065]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:51:24.065]    <block atomic="false" info="">
[19:51:24.065]      __var SW_DP_ABORT       = 0x0;
[19:51:24.066]        // -> [SW_DP_ABORT <= 0x00000000]
[19:51:24.066]      __var DP_CTRL_STAT      = 0x4;
[19:51:24.066]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:51:24.066]      __var DP_SELECT         = 0x8;
[19:51:24.066]        // -> [DP_SELECT <= 0x00000008]
[19:51:24.066]      __var powered_down      = 0;
[19:51:24.066]        // -> [powered_down <= 0x00000000]
[19:51:24.066]      WriteDP(DP_SELECT, 0x00000000);
[19:51:24.068]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:51:24.068]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:51:24.069]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:51:24.070]        // -> [powered_down <= 0x00000001]
[19:51:24.070]    </block>
[19:51:24.070]    <control if="powered_down" while="" timeout="0" info="">
[19:51:24.070]      // if-block "powered_down"
[19:51:24.070]        // =>  TRUE
[19:51:24.070]      <block atomic="false" info="">
[19:51:24.070]        Message(0, "Debug/System power-up request sent");
[19:51:24.072]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:51:24.074]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:51:24.074]      </block>
[19:51:24.074]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:51:24.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:51:24.076]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:51:24.076]        // while-condition  =>  FALSE
[19:51:24.076]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:51:24.076]      </control>
[19:51:24.076]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:51:24.076]        // if-block "(__protocol & 0xFFFF) == 1"
[19:51:24.076]          // =>  FALSE
[19:51:24.076]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:51:24.076]      </control>
[19:51:24.076]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:51:24.076]        // if-block "(__protocol & 0xFFFF) == 2"
[19:51:24.076]          // =>  TRUE
[19:51:24.076]        <block atomic="false" info="">
[19:51:24.076]          Message(0, "executing SWD power up");
[19:51:24.078]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:51:24.080]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:51:24.080]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:51:24.081]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:51:24.082]        </block>
[19:51:24.082]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:51:24.082]      </control>
[19:51:24.082]      // end if-block "powered_down"
[19:51:24.082]    </control>
[19:51:24.082]    <block atomic="false" info="">
[19:51:24.082]      __var DEBUG_PORT_VAL    = 0;
[19:51:24.082]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:51:24.082]      __var ACCESS_POINT_VAL  = 0;
[19:51:24.082]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:51:24.082]      __ap = 1; 
[19:51:24.082]        // -> [__ap <= 0x00000001]
[19:51:24.082]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:51:24.085]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:51:24.086]      __ap = 4;
[19:51:24.086]        // -> [__ap <= 0x00000004]
[19:51:24.086]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:24.089]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:51:24.089]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:51:24.089]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:24.092]    </block>
[19:51:24.092]    <block atomic="false" info="">
[19:51:24.092]      __var nReset = 0x80;
[19:51:24.092]        // -> [nReset <= 0x00000080]
[19:51:24.092]      __var canReadPins = 0;
[19:51:24.092]        // -> [canReadPins <= 0x00000000]
[19:51:24.092]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:51:24.094]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:51:24.094]        // -> [canReadPins <= 0x00000001]
[19:51:24.094]    </block>
[19:51:24.094]    <control if="" while="1" timeout="200" info="">
[19:51:24.094]      // while "1"  (timeout="200")
[19:51:24.094]      // while-condition  =>  TRUE
[19:51:24.094]      // while "1"  (timeout="200")
[19:51:24.094]      // while-condition  =>  TRUE
[19:51:24.094]      // while "1"  (timeout="200")
[19:51:24.094]      // while-condition  =>  TRUE
[19:51:24.094]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.095]      // while "1"  (timeout="200")
[19:51:24.095]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.096]      // while "1"  (timeout="200")
[19:51:24.096]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.097]      // while-condition  =>  TRUE
[19:51:24.097]      // while "1"  (timeout="200")
[19:51:24.098]      // while-condition  =>  TRUE
[19:51:24.098]      // while "1"  (timeout="200")
[19:51:24.098]      // while  =>  TIMEOUT
[19:51:24.098]      // end while "1"
[19:51:24.098]    </control>
[19:51:24.098]    <control if="canReadPins" while="" timeout="0" info="">
[19:51:24.098]      // if-block "canReadPins"
[19:51:24.098]        // =>  TRUE
[19:51:24.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:51:24.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:51:24.103]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:51:24.104]        // while-condition  =>  FALSE
[19:51:24.104]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:51:24.104]      </control>
[19:51:24.104]      // end if-block "canReadPins"
[19:51:24.104]    </control>
[19:51:24.104]    <control if="!canReadPins" while="" timeout="0" info="">
[19:51:24.104]      // if-block "!canReadPins"
[19:51:24.104]        // =>  FALSE
[19:51:24.104]      // skip if-block "!canReadPins"
[19:51:24.104]    </control>
[19:51:24.104]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:51:24.104]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:24.104]        // =>  TRUE
[19:51:24.104]      <block atomic="false" info="">
[19:51:24.104]        WriteAP(0x00, 0x190008);
[19:51:24.106]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:24.106]        WriteAP(0xF0, 0x01);
[19:51:24.111]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:24.111]      </block>
[19:51:24.112]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:24.112]    </control>
[19:51:24.112]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:51:24.112]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:24.112]        // =>  FALSE
[19:51:24.112]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:24.112]    </control>
[19:51:24.112]    <block atomic="false" info="">
[19:51:24.112]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:24.116]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:51:24.116]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:51:24.116]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:24.121]      __ap = 0; //lets make sure we reset the access point selection
[19:51:24.122]        // -> [__ap <= 0x00000000]
[19:51:24.122]    </block>
[19:51:24.122]  </sequence>
[19:51:24.122]  
[19:51:24.142]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:51:24.142]  
[19:51:24.142]  <debugvars>
[19:51:24.142]    // Pre-defined
[19:51:24.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:24.142]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:24.142]    __dp=0x00000000
[19:51:24.143]    __ap=0x00000000
[19:51:24.143]    __traceout=0x00000000      (Trace Disabled)
[19:51:24.143]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:24.143]    __FlashAddr=0x00000000
[19:51:24.143]    __FlashLen=0x00000000
[19:51:24.143]    __FlashArg=0x00000000
[19:51:24.143]    __FlashOp=0x00000000
[19:51:24.143]    __Result=0x00000000
[19:51:24.144]  </debugvars>
[19:51:24.144]  
[19:51:24.144]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:51:24.144]    <block atomic="false" info="">
[19:51:24.144]      __var deviceID = 0;
[19:51:24.144]        // -> [deviceID <= 0x00000000]
[19:51:24.145]      __var version = 0;
[19:51:24.145]        // -> [version <= 0x00000000]
[19:51:24.145]      __var partNum = 0;
[19:51:24.145]        // -> [partNum <= 0x00000000]
[19:51:24.145]      __var manuf = 0;
[19:51:24.145]        // -> [manuf <= 0x00000000]
[19:51:24.145]      __var isMSPM0G1X0X_G3X0X = 0;
[19:51:24.145]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:51:24.145]      __var isProduction = 0;
[19:51:24.145]        // -> [isProduction <= 0x00000000]
[19:51:24.145]      __var continueId = 0;
[19:51:24.146]        // -> [continueId <= 0x00000000]
[19:51:24.146]      deviceID =   Read32(0x41C40004);
[19:51:24.150]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:51:24.151]        // -> [deviceID <= 0x2BB8802F]
[19:51:24.151]      version = deviceID >> 28;
[19:51:24.151]        // -> [version <= 0x00000002]
[19:51:24.151]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:51:24.151]        // -> [partNum <= 0x0000BB88]
[19:51:24.151]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:51:24.151]        // -> [manuf <= 0x00000017]
[19:51:24.151]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:51:24.151]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:51:24.151]      isProduction = (version > 0);
[19:51:24.151]        // -> [isProduction <= 0x00000001]
[19:51:24.151]    </block>
[19:51:24.152]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:51:24.152]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:51:24.152]        // =>  FALSE
[19:51:24.152]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:51:24.152]    </control>
[19:51:24.152]    <control if="continueId == 4" while="" timeout="0" info="">
[19:51:24.152]      // if-block "continueId == 4"
[19:51:24.152]        // =>  FALSE
[19:51:24.152]      // skip if-block "continueId == 4"
[19:51:24.152]    </control>
[19:51:24.152]    <control if="!isProduction" while="" timeout="0" info="">
[19:51:24.152]      // if-block "!isProduction"
[19:51:24.152]        // =>  FALSE
[19:51:24.152]      // skip if-block "!isProduction"
[19:51:24.152]    </control>
[19:51:24.152]  </sequence>
[19:51:24.152]  
[19:52:29.554]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:52:29.554]  
[19:52:29.554]  <debugvars>
[19:52:29.555]    // Pre-defined
[19:52:29.555]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:29.555]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:29.555]    __dp=0x00000000
[19:52:29.555]    __ap=0x00000000
[19:52:29.555]    __traceout=0x00000000      (Trace Disabled)
[19:52:29.555]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:29.555]    __FlashAddr=0x00000000
[19:52:29.556]    __FlashLen=0x00000000
[19:52:29.556]    __FlashArg=0x00000000
[19:52:29.556]    __FlashOp=0x00000000
[19:52:29.556]    __Result=0x00000000
[19:52:29.556]  </debugvars>
[19:52:29.556]  
[19:52:29.556]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:52:29.556]    <block atomic="false" info="">
[19:52:29.557]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:52:29.557]        // -> [isSWJ <= 0x00000001]
[19:52:29.557]      __var hasDormant = __protocol & 0x00020000;
[19:52:29.557]        // -> [hasDormant <= 0x00000000]
[19:52:29.557]      __var protType   = __protocol & 0x0000FFFF;
[19:52:29.557]        // -> [protType <= 0x00000002]
[19:52:29.557]    </block>
[19:52:29.557]    <control if="protType == 1" while="" timeout="0" info="">
[19:52:29.557]      // if-block "protType == 1"
[19:52:29.557]        // =>  FALSE
[19:52:29.558]      // skip if-block "protType == 1"
[19:52:29.558]    </control>
[19:52:29.558]    <control if="protType == 2" while="" timeout="0" info="">
[19:52:29.558]      // if-block "protType == 2"
[19:52:29.558]        // =>  TRUE
[19:52:29.558]      <control if="isSWJ" while="" timeout="0" info="">
[19:52:29.558]        // if-block "isSWJ"
[19:52:29.558]          // =>  TRUE
[19:52:29.558]        <control if="hasDormant" while="" timeout="0" info="">
[19:52:29.559]          // if-block "hasDormant"
[19:52:29.559]            // =>  FALSE
[19:52:29.559]          // skip if-block "hasDormant"
[19:52:29.559]        </control>
[19:52:29.559]        <control if="!hasDormant" while="" timeout="0" info="">
[19:52:29.559]          // if-block "!hasDormant"
[19:52:29.559]            // =>  TRUE
[19:52:29.559]          <block atomic="false" info="">
[19:52:29.559]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:52:29.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:29.560]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:52:29.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:52:29.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:52:29.564]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:29.564]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:52:29.565]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:52:29.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:52:29.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:29.567]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:52:29.574]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:52:29.574]          </block>
[19:52:29.574]          // end if-block "!hasDormant"
[19:52:29.574]        </control>
[19:52:29.575]        // end if-block "isSWJ"
[19:52:29.575]      </control>
[19:52:29.575]      <control if="!isSWJ" while="" timeout="0" info="">
[19:52:29.575]        // if-block "!isSWJ"
[19:52:29.575]          // =>  FALSE
[19:52:29.575]        // skip if-block "!isSWJ"
[19:52:29.575]      </control>
[19:52:29.575]      <block atomic="false" info="">
[19:52:29.575]        ReadDP(0x0);
[19:52:29.578]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:52:29.579]      </block>
[19:52:29.579]      // end if-block "protType == 2"
[19:52:29.579]    </control>
[19:52:29.579]  </sequence>
[19:52:29.579]  
[19:52:29.582]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:52:29.582]  
[19:52:29.582]  <debugvars>
[19:52:29.582]    // Pre-defined
[19:52:29.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:29.582]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:29.582]    __dp=0x00000000
[19:52:29.583]    __ap=0x00000000
[19:52:29.583]    __traceout=0x00000000      (Trace Disabled)
[19:52:29.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:29.583]    __FlashAddr=0x00000000
[19:52:29.583]    __FlashLen=0x00000000
[19:52:29.583]    __FlashArg=0x00000000
[19:52:29.583]    __FlashOp=0x00000000
[19:52:29.583]    __Result=0x00000000
[19:52:29.583]  </debugvars>
[19:52:29.583]  
[19:52:29.583]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:52:29.583]    <block atomic="false" info="">
[19:52:29.583]      __var SW_DP_ABORT       = 0x0;
[19:52:29.583]        // -> [SW_DP_ABORT <= 0x00000000]
[19:52:29.583]      __var DP_CTRL_STAT      = 0x4;
[19:52:29.584]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:52:29.584]      __var DP_SELECT         = 0x8;
[19:52:29.584]        // -> [DP_SELECT <= 0x00000008]
[19:52:29.584]      __var powered_down      = 0;
[19:52:29.584]        // -> [powered_down <= 0x00000000]
[19:52:29.584]      WriteDP(DP_SELECT, 0x00000000);
[19:52:29.586]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:52:29.586]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:52:29.587]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:52:29.587]        // -> [powered_down <= 0x00000001]
[19:52:29.587]    </block>
[19:52:29.588]    <control if="powered_down" while="" timeout="0" info="">
[19:52:29.588]      // if-block "powered_down"
[19:52:29.588]        // =>  TRUE
[19:52:29.588]      <block atomic="false" info="">
[19:52:29.588]        Message(0, "Debug/System power-up request sent");
[19:52:29.588]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:52:29.590]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:52:29.590]      </block>
[19:52:29.590]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:52:29.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:52:29.591]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:52:29.592]        // while-condition  =>  FALSE
[19:52:29.592]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:52:29.592]      </control>
[19:52:29.592]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:52:29.592]        // if-block "(__protocol & 0xFFFF) == 1"
[19:52:29.592]          // =>  FALSE
[19:52:29.592]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:52:29.592]      </control>
[19:52:29.592]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:52:29.592]        // if-block "(__protocol & 0xFFFF) == 2"
[19:52:29.592]          // =>  TRUE
[19:52:29.592]        <block atomic="false" info="">
[19:52:29.592]          Message(0, "executing SWD power up");
[19:52:29.600]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:52:29.602]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:52:29.602]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:52:29.604]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:52:29.604]        </block>
[19:52:29.604]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:52:29.604]      </control>
[19:52:29.604]      // end if-block "powered_down"
[19:52:29.604]    </control>
[19:52:29.604]    <block atomic="false" info="">
[19:52:29.604]      __var DEBUG_PORT_VAL    = 0;
[19:52:29.604]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:52:29.604]      __var ACCESS_POINT_VAL  = 0;
[19:52:29.604]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:52:29.604]      __ap = 1; 
[19:52:29.604]        // -> [__ap <= 0x00000001]
[19:52:29.604]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:52:29.608]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:52:29.608]      __ap = 4;
[19:52:29.608]        // -> [__ap <= 0x00000004]
[19:52:29.608]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:52:29.611]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:52:29.611]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:52:29.611]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:52:29.613]    </block>
[19:52:29.613]    <block atomic="false" info="">
[19:52:29.613]      __var nReset = 0x80;
[19:52:29.613]        // -> [nReset <= 0x00000080]
[19:52:29.613]      __var canReadPins = 0;
[19:52:29.613]        // -> [canReadPins <= 0x00000000]
[19:52:29.613]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:52:29.614]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:52:29.615]        // -> [canReadPins <= 0x00000001]
[19:52:29.615]    </block>
[19:52:29.615]    <control if="" while="1" timeout="200" info="">
[19:52:29.615]      // while "1"  (timeout="200")
[19:52:29.615]      // while-condition  =>  TRUE
[19:52:29.615]      // while "1"  (timeout="200")
[19:52:29.615]      // while-condition  =>  TRUE
[19:52:29.615]      // while "1"  (timeout="200")
[19:52:29.615]      // while-condition  =>  TRUE
[19:52:29.615]      // while "1"  (timeout="200")
[19:52:29.615]      // while-condition  =>  TRUE
[19:52:29.615]      // while "1"  (timeout="200")
[19:52:29.615]      // while-condition  =>  TRUE
[19:52:29.615]      // while "1"  (timeout="200")
[19:52:29.615]      // while-condition  =>  TRUE
[19:52:29.616]      // while "1"  (timeout="200")
[19:52:29.616]      // while-condition  =>  TRUE
[19:52:29.616]      // while "1"  (timeout="200")
[19:52:29.616]      // while-condition  =>  TRUE
[19:52:29.616]      // while "1"  (timeout="200")
[19:52:29.616]      // while-condition  =>  TRUE
[19:52:29.616]      // while "1"  (timeout="200")
[19:52:29.616]      // while-condition  =>  TRUE
[19:52:29.616]      // while "1"  (timeout="200")
[19:52:29.616]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.617]      // while-condition  =>  TRUE
[19:52:29.617]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.618]      // while-condition  =>  TRUE
[19:52:29.618]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.619]      // while-condition  =>  TRUE
[19:52:29.619]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.620]      // while "1"  (timeout="200")
[19:52:29.620]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.621]      // while "1"  (timeout="200")
[19:52:29.621]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.622]      // while-condition  =>  TRUE
[19:52:29.622]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.623]      // while-condition  =>  TRUE
[19:52:29.623]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.624]      // while "1"  (timeout="200")
[19:52:29.624]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.625]      // while-condition  =>  TRUE
[19:52:29.625]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.626]      // while-condition  =>  TRUE
[19:52:29.626]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.627]      // while-condition  =>  TRUE
[19:52:29.627]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.628]      // while-condition  =>  TRUE
[19:52:29.628]      // while "1"  (timeout="200")
[19:52:29.629]      // while-condition  =>  TRUE
[19:52:29.629]      // while "1"  (timeout="200")
[19:52:29.629]      // while  =>  TIMEOUT
[19:52:29.629]      // end while "1"
[19:52:29.629]    </control>
[19:52:29.629]    <control if="canReadPins" while="" timeout="0" info="">
[19:52:29.629]      // if-block "canReadPins"
[19:52:29.629]        // =>  TRUE
[19:52:29.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:52:29.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:52:29.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:52:29.631]        // while-condition  =>  FALSE
[19:52:29.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:52:29.631]      </control>
[19:52:29.631]      // end if-block "canReadPins"
[19:52:29.631]    </control>
[19:52:29.631]    <control if="!canReadPins" while="" timeout="0" info="">
[19:52:29.631]      // if-block "!canReadPins"
[19:52:29.631]        // =>  FALSE
[19:52:29.631]      // skip if-block "!canReadPins"
[19:52:29.631]    </control>
[19:52:29.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:52:29.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:52:29.631]        // =>  TRUE
[19:52:29.631]      <block atomic="false" info="">
[19:52:29.631]        WriteAP(0x00, 0x190008);
[19:52:29.633]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:52:29.633]        WriteAP(0xF0, 0x01);
[19:52:29.636]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:52:29.636]      </block>
[19:52:29.636]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:52:29.636]    </control>
[19:52:29.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:52:29.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:52:29.636]        // =>  FALSE
[19:52:29.636]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:52:29.636]    </control>
[19:52:29.636]    <block atomic="false" info="">
[19:52:29.636]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:52:29.639]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:52:29.639]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:52:29.639]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:52:29.641]      __ap = 0; //lets make sure we reset the access point selection
[19:52:29.641]        // -> [__ap <= 0x00000000]
[19:52:29.641]    </block>
[19:52:29.642]  </sequence>
[19:52:29.642]  
[19:52:29.659]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:52:29.659]  
[19:52:29.659]  <debugvars>
[19:52:29.659]    // Pre-defined
[19:52:29.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:29.659]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:29.659]    __dp=0x00000000
[19:52:29.659]    __ap=0x00000000
[19:52:29.659]    __traceout=0x00000000      (Trace Disabled)
[19:52:29.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:29.660]    __FlashAddr=0x00000000
[19:52:29.660]    __FlashLen=0x00000000
[19:52:29.660]    __FlashArg=0x00000000
[19:52:29.660]    __FlashOp=0x00000000
[19:52:29.660]    __Result=0x00000000
[19:52:29.660]  </debugvars>
[19:52:29.660]  
[19:52:29.660]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:52:29.660]    <block atomic="false" info="">
[19:52:29.660]      __var deviceID = 0;
[19:52:29.660]        // -> [deviceID <= 0x00000000]
[19:52:29.660]      __var version = 0;
[19:52:29.660]        // -> [version <= 0x00000000]
[19:52:29.660]      __var partNum = 0;
[19:52:29.660]        // -> [partNum <= 0x00000000]
[19:52:29.660]      __var manuf = 0;
[19:52:29.660]        // -> [manuf <= 0x00000000]
[19:52:29.660]      __var isMSPM0G1X0X_G3X0X = 0;
[19:52:29.661]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:52:29.661]      __var isProduction = 0;
[19:52:29.661]        // -> [isProduction <= 0x00000000]
[19:52:29.661]      __var continueId = 0;
[19:52:29.661]        // -> [continueId <= 0x00000000]
[19:52:29.661]      deviceID =   Read32(0x41C40004);
[19:52:29.668]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:52:29.668]        // -> [deviceID <= 0x2BB8802F]
[19:52:29.668]      version = deviceID >> 28;
[19:52:29.668]        // -> [version <= 0x00000002]
[19:52:29.668]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:52:29.668]        // -> [partNum <= 0x0000BB88]
[19:52:29.668]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:52:29.668]        // -> [manuf <= 0x00000017]
[19:52:29.668]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:52:29.668]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:52:29.668]      isProduction = (version > 0);
[19:52:29.668]        // -> [isProduction <= 0x00000001]
[19:52:29.668]    </block>
[19:52:29.668]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:52:29.668]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:52:29.668]        // =>  FALSE
[19:52:29.668]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:52:29.668]    </control>
[19:52:29.668]    <control if="continueId == 4" while="" timeout="0" info="">
[19:52:29.668]      // if-block "continueId == 4"
[19:52:29.668]        // =>  FALSE
[19:52:29.668]      // skip if-block "continueId == 4"
[19:52:29.668]    </control>
[19:52:29.668]    <control if="!isProduction" while="" timeout="0" info="">
[19:52:29.668]      // if-block "!isProduction"
[19:52:29.669]        // =>  FALSE
[19:52:29.669]      // skip if-block "!isProduction"
[19:52:29.669]    </control>
[19:52:29.669]  </sequence>
[19:52:29.669]  
[19:55:23.209]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:55:23.209]  
[19:55:23.209]  <debugvars>
[19:55:23.209]    // Pre-defined
[19:55:23.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:55:23.209]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:55:23.210]    __dp=0x00000000
[19:55:23.210]    __ap=0x00000000
[19:55:23.210]    __traceout=0x00000000      (Trace Disabled)
[19:55:23.210]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:55:23.210]    __FlashAddr=0x00000000
[19:55:23.210]    __FlashLen=0x00000000
[19:55:23.210]    __FlashArg=0x00000000
[19:55:23.210]    __FlashOp=0x00000000
[19:55:23.210]    __Result=0x00000000
[19:55:23.210]  </debugvars>
[19:55:23.210]  
[19:55:23.210]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:55:23.210]    <block atomic="false" info="">
[19:55:23.210]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:55:23.211]        // -> [isSWJ <= 0x00000001]
[19:55:23.211]      __var hasDormant = __protocol & 0x00020000;
[19:55:23.211]        // -> [hasDormant <= 0x00000000]
[19:55:23.211]      __var protType   = __protocol & 0x0000FFFF;
[19:55:23.211]        // -> [protType <= 0x00000002]
[19:55:23.211]    </block>
[19:55:23.211]    <control if="protType == 1" while="" timeout="0" info="">
[19:55:23.211]      // if-block "protType == 1"
[19:55:23.211]        // =>  FALSE
[19:55:23.211]      // skip if-block "protType == 1"
[19:55:23.211]    </control>
[19:55:23.211]    <control if="protType == 2" while="" timeout="0" info="">
[19:55:23.211]      // if-block "protType == 2"
[19:55:23.211]        // =>  TRUE
[19:55:23.212]      <control if="isSWJ" while="" timeout="0" info="">
[19:55:23.212]        // if-block "isSWJ"
[19:55:23.212]          // =>  TRUE
[19:55:23.212]        <control if="hasDormant" while="" timeout="0" info="">
[19:55:23.212]          // if-block "hasDormant"
[19:55:23.212]            // =>  FALSE
[19:55:23.212]          // skip if-block "hasDormant"
[19:55:23.212]        </control>
[19:55:23.212]        <control if="!hasDormant" while="" timeout="0" info="">
[19:55:23.212]          // if-block "!hasDormant"
[19:55:23.212]            // =>  TRUE
[19:55:23.212]          <block atomic="false" info="">
[19:55:23.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:55:23.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:55:23.214]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:55:23.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:55:23.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:55:23.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:55:23.217]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:55:23.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:55:23.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:55:23.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:55:23.226]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:55:23.227]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:55:23.227]          </block>
[19:55:23.227]          // end if-block "!hasDormant"
[19:55:23.228]        </control>
[19:55:23.228]        // end if-block "isSWJ"
[19:55:23.228]      </control>
[19:55:23.228]      <control if="!isSWJ" while="" timeout="0" info="">
[19:55:23.228]        // if-block "!isSWJ"
[19:55:23.228]          // =>  FALSE
[19:55:23.228]        // skip if-block "!isSWJ"
[19:55:23.228]      </control>
[19:55:23.228]      <block atomic="false" info="">
[19:55:23.228]        ReadDP(0x0);
[19:55:23.230]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:55:23.230]      </block>
[19:55:23.230]      // end if-block "protType == 2"
[19:55:23.231]    </control>
[19:55:23.231]  </sequence>
[19:55:23.231]  
[19:55:23.233]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:55:23.233]  
[19:55:23.233]  <debugvars>
[19:55:23.233]    // Pre-defined
[19:55:23.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:55:23.233]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:55:23.233]    __dp=0x00000000
[19:55:23.234]    __ap=0x00000000
[19:55:23.234]    __traceout=0x00000000      (Trace Disabled)
[19:55:23.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:55:23.234]    __FlashAddr=0x00000000
[19:55:23.234]    __FlashLen=0x00000000
[19:55:23.234]    __FlashArg=0x00000000
[19:55:23.234]    __FlashOp=0x00000000
[19:55:23.234]    __Result=0x00000000
[19:55:23.234]  </debugvars>
[19:55:23.234]  
[19:55:23.234]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:55:23.234]    <block atomic="false" info="">
[19:55:23.234]      __var SW_DP_ABORT       = 0x0;
[19:55:23.234]        // -> [SW_DP_ABORT <= 0x00000000]
[19:55:23.234]      __var DP_CTRL_STAT      = 0x4;
[19:55:23.234]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:55:23.234]      __var DP_SELECT         = 0x8;
[19:55:23.234]        // -> [DP_SELECT <= 0x00000008]
[19:55:23.234]      __var powered_down      = 0;
[19:55:23.234]        // -> [powered_down <= 0x00000000]
[19:55:23.235]      WriteDP(DP_SELECT, 0x00000000);
[19:55:23.236]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:55:23.236]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:55:23.238]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:55:23.238]        // -> [powered_down <= 0x00000001]
[19:55:23.238]    </block>
[19:55:23.238]    <control if="powered_down" while="" timeout="0" info="">
[19:55:23.238]      // if-block "powered_down"
[19:55:23.238]        // =>  TRUE
[19:55:23.238]      <block atomic="false" info="">
[19:55:23.238]        Message(0, "Debug/System power-up request sent");
[19:55:23.239]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:55:23.240]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:55:23.240]      </block>
[19:55:23.240]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:55:23.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:55:23.242]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:55:23.242]        // while-condition  =>  FALSE
[19:55:23.242]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:55:23.242]      </control>
[19:55:23.242]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:55:23.242]        // if-block "(__protocol & 0xFFFF) == 1"
[19:55:23.242]          // =>  FALSE
[19:55:23.243]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:55:23.243]      </control>
[19:55:23.243]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:55:23.243]        // if-block "(__protocol & 0xFFFF) == 2"
[19:55:23.243]          // =>  TRUE
[19:55:23.243]        <block atomic="false" info="">
[19:55:23.243]          Message(0, "executing SWD power up");
[19:55:23.250]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:55:23.252]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:55:23.252]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:55:23.254]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:55:23.254]        </block>
[19:55:23.254]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:55:23.254]      </control>
[19:55:23.254]      // end if-block "powered_down"
[19:55:23.254]    </control>
[19:55:23.254]    <block atomic="false" info="">
[19:55:23.254]      __var DEBUG_PORT_VAL    = 0;
[19:55:23.254]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:55:23.254]      __var ACCESS_POINT_VAL  = 0;
[19:55:23.254]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:55:23.255]      __ap = 1; 
[19:55:23.255]        // -> [__ap <= 0x00000001]
[19:55:23.255]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:55:23.258]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:55:23.258]      __ap = 4;
[19:55:23.258]        // -> [__ap <= 0x00000004]
[19:55:23.258]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:55:23.265]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:55:23.265]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:55:23.265]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:55:23.266]    </block>
[19:55:23.266]    <block atomic="false" info="">
[19:55:23.266]      __var nReset = 0x80;
[19:55:23.266]        // -> [nReset <= 0x00000080]
[19:55:23.266]      __var canReadPins = 0;
[19:55:23.266]        // -> [canReadPins <= 0x00000000]
[19:55:23.266]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:55:23.271]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:55:23.271]        // -> [canReadPins <= 0x00000001]
[19:55:23.271]    </block>
[19:55:23.271]    <control if="" while="1" timeout="200" info="">
[19:55:23.271]      // while "1"  (timeout="200")
[19:55:23.271]      // while-condition  =>  TRUE
[19:55:23.271]      // while "1"  (timeout="200")
[19:55:23.271]      // while-condition  =>  TRUE
[19:55:23.271]      // while "1"  (timeout="200")
[19:55:23.271]      // while-condition  =>  TRUE
[19:55:23.271]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.272]      // while "1"  (timeout="200")
[19:55:23.272]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.273]      // while "1"  (timeout="200")
[19:55:23.273]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.274]      // while "1"  (timeout="200")
[19:55:23.274]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.275]      // while-condition  =>  TRUE
[19:55:23.275]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.276]      // while "1"  (timeout="200")
[19:55:23.276]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.277]      // while-condition  =>  TRUE
[19:55:23.277]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.278]      // while "1"  (timeout="200")
[19:55:23.278]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.279]      // while-condition  =>  TRUE
[19:55:23.279]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.280]      // while-condition  =>  TRUE
[19:55:23.280]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.281]      // while "1"  (timeout="200")
[19:55:23.281]      // while-condition  =>  TRUE
[19:55:23.282]      // while "1"  (timeout="200")
[19:55:23.282]      // while-condition  =>  TRUE
[19:55:23.282]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.283]      // while-condition  =>  TRUE
[19:55:23.283]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.284]      // while "1"  (timeout="200")
[19:55:23.284]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.285]      // while "1"  (timeout="200")
[19:55:23.285]      // while-condition  =>  TRUE
[19:55:23.286]      // while "1"  (timeout="200")
[19:55:23.286]      // while  =>  TIMEOUT
[19:55:23.286]      // end while "1"
[19:55:23.286]    </control>
[19:55:23.286]    <control if="canReadPins" while="" timeout="0" info="">
[19:55:23.286]      // if-block "canReadPins"
[19:55:23.286]        // =>  TRUE
[19:55:23.286]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:55:23.286]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:55:23.287]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:55:23.287]        // while-condition  =>  FALSE
[19:55:23.287]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:55:23.287]      </control>
[19:55:23.287]      // end if-block "canReadPins"
[19:55:23.287]    </control>
[19:55:23.287]    <control if="!canReadPins" while="" timeout="0" info="">
[19:55:23.287]      // if-block "!canReadPins"
[19:55:23.287]        // =>  FALSE
[19:55:23.287]      // skip if-block "!canReadPins"
[19:55:23.288]    </control>
[19:55:23.288]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:55:23.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:55:23.288]        // =>  TRUE
[19:55:23.288]      <block atomic="false" info="">
[19:55:23.288]        WriteAP(0x00, 0x190008);
[19:55:23.289]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:55:23.290]        WriteAP(0xF0, 0x01);
[19:55:23.294]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:55:23.294]      </block>
[19:55:23.294]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:55:23.294]    </control>
[19:55:23.294]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:55:23.294]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:55:23.294]        // =>  FALSE
[19:55:23.294]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:55:23.294]    </control>
[19:55:23.294]    <block atomic="false" info="">
[19:55:23.294]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:55:23.302]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:55:23.302]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:55:23.302]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:55:23.304]      __ap = 0; //lets make sure we reset the access point selection
[19:55:23.304]        // -> [__ap <= 0x00000000]
[19:55:23.304]    </block>
[19:55:23.304]  </sequence>
[19:55:23.304]  
[19:55:23.325]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:55:23.325]  
[19:55:23.325]  <debugvars>
[19:55:23.325]    // Pre-defined
[19:55:23.326]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:55:23.326]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:55:23.326]    __dp=0x00000000
[19:55:23.326]    __ap=0x00000000
[19:55:23.326]    __traceout=0x00000000      (Trace Disabled)
[19:55:23.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:55:23.326]    __FlashAddr=0x00000000
[19:55:23.326]    __FlashLen=0x00000000
[19:55:23.327]    __FlashArg=0x00000000
[19:55:23.327]    __FlashOp=0x00000000
[19:55:23.327]    __Result=0x00000000
[19:55:23.327]  </debugvars>
[19:55:23.327]  
[19:55:23.327]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:55:23.327]    <block atomic="false" info="">
[19:55:23.327]      __var deviceID = 0;
[19:55:23.327]        // -> [deviceID <= 0x00000000]
[19:55:23.327]      __var version = 0;
[19:55:23.327]        // -> [version <= 0x00000000]
[19:55:23.328]      __var partNum = 0;
[19:55:23.328]        // -> [partNum <= 0x00000000]
[19:55:23.328]      __var manuf = 0;
[19:55:23.328]        // -> [manuf <= 0x00000000]
[19:55:23.328]      __var isMSPM0G1X0X_G3X0X = 0;
[19:55:23.328]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:55:23.328]      __var isProduction = 0;
[19:55:23.328]        // -> [isProduction <= 0x00000000]
[19:55:23.328]      __var continueId = 0;
[19:55:23.328]        // -> [continueId <= 0x00000000]
[19:55:23.329]      deviceID =   Read32(0x41C40004);
[19:55:23.334]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:55:23.334]        // -> [deviceID <= 0x2BB8802F]
[19:55:23.334]      version = deviceID >> 28;
[19:55:23.335]        // -> [version <= 0x00000002]
[19:55:23.335]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:55:23.335]        // -> [partNum <= 0x0000BB88]
[19:55:23.335]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:55:23.335]        // -> [manuf <= 0x00000017]
[19:55:23.335]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:55:23.335]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:55:23.335]      isProduction = (version > 0);
[19:55:23.336]        // -> [isProduction <= 0x00000001]
[19:55:23.336]    </block>
[19:55:23.336]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:55:23.336]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:55:23.336]        // =>  FALSE
[19:55:23.336]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:55:23.336]    </control>
[19:55:23.336]    <control if="continueId == 4" while="" timeout="0" info="">
[19:55:23.336]      // if-block "continueId == 4"
[19:55:23.336]        // =>  FALSE
[19:55:23.336]      // skip if-block "continueId == 4"
[19:55:23.336]    </control>
[19:55:23.336]    <control if="!isProduction" while="" timeout="0" info="">
[19:55:23.336]      // if-block "!isProduction"
[19:55:23.336]        // =>  FALSE
[19:55:23.337]      // skip if-block "!isProduction"
[19:55:23.337]    </control>
[19:55:23.337]  </sequence>
[19:55:23.337]  
[19:56:04.406]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:56:04.406]  
[19:56:04.412]  <debugvars>
[19:56:04.412]    // Pre-defined
[19:56:04.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:56:04.412]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:56:04.413]    __dp=0x00000000
[19:56:04.413]    __ap=0x00000000
[19:56:04.413]    __traceout=0x00000000      (Trace Disabled)
[19:56:04.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:56:04.413]    __FlashAddr=0x00000000
[19:56:04.413]    __FlashLen=0x00000000
[19:56:04.413]    __FlashArg=0x00000000
[19:56:04.413]    __FlashOp=0x00000000
[19:56:04.413]    __Result=0x00000000
[19:56:04.413]  </debugvars>
[19:56:04.413]  
[19:56:04.413]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:56:04.413]    <block atomic="false" info="">
[19:56:04.413]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:56:04.413]        // -> [isSWJ <= 0x00000001]
[19:56:04.413]      __var hasDormant = __protocol & 0x00020000;
[19:56:04.413]        // -> [hasDormant <= 0x00000000]
[19:56:04.413]      __var protType   = __protocol & 0x0000FFFF;
[19:56:04.413]        // -> [protType <= 0x00000002]
[19:56:04.413]    </block>
[19:56:04.413]    <control if="protType == 1" while="" timeout="0" info="">
[19:56:04.413]      // if-block "protType == 1"
[19:56:04.413]        // =>  FALSE
[19:56:04.413]      // skip if-block "protType == 1"
[19:56:04.414]    </control>
[19:56:04.414]    <control if="protType == 2" while="" timeout="0" info="">
[19:56:04.414]      // if-block "protType == 2"
[19:56:04.414]        // =>  TRUE
[19:56:04.414]      <control if="isSWJ" while="" timeout="0" info="">
[19:56:04.414]        // if-block "isSWJ"
[19:56:04.414]          // =>  TRUE
[19:56:04.414]        <control if="hasDormant" while="" timeout="0" info="">
[19:56:04.414]          // if-block "hasDormant"
[19:56:04.414]            // =>  FALSE
[19:56:04.414]          // skip if-block "hasDormant"
[19:56:04.414]        </control>
[19:56:04.414]        <control if="!hasDormant" while="" timeout="0" info="">
[19:56:04.414]          // if-block "!hasDormant"
[19:56:04.414]            // =>  TRUE
[19:56:04.414]          <block atomic="false" info="">
[19:56:04.414]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:56:04.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:56:04.416]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:56:04.418]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:56:04.418]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:56:04.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:56:04.419]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:56:04.420]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:56:04.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:56:04.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:56:04.422]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:56:04.422]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:56:04.422]          </block>
[19:56:04.422]          // end if-block "!hasDormant"
[19:56:04.422]        </control>
[19:56:04.422]        // end if-block "isSWJ"
[19:56:04.422]      </control>
[19:56:04.422]      <control if="!isSWJ" while="" timeout="0" info="">
[19:56:04.422]        // if-block "!isSWJ"
[19:56:04.423]          // =>  FALSE
[19:56:04.423]        // skip if-block "!isSWJ"
[19:56:04.423]      </control>
[19:56:04.423]      <block atomic="false" info="">
[19:56:04.423]        ReadDP(0x0);
[19:56:04.424]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:56:04.424]      </block>
[19:56:04.424]      // end if-block "protType == 2"
[19:56:04.424]    </control>
[19:56:04.425]  </sequence>
[19:56:04.425]  
[19:56:04.427]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:56:04.427]  
[19:56:04.427]  <debugvars>
[19:56:04.427]    // Pre-defined
[19:56:04.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:56:04.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:56:04.428]    __dp=0x00000000
[19:56:04.428]    __ap=0x00000000
[19:56:04.428]    __traceout=0x00000000      (Trace Disabled)
[19:56:04.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:56:04.428]    __FlashAddr=0x00000000
[19:56:04.428]    __FlashLen=0x00000000
[19:56:04.428]    __FlashArg=0x00000000
[19:56:04.428]    __FlashOp=0x00000000
[19:56:04.428]    __Result=0x00000000
[19:56:04.428]  </debugvars>
[19:56:04.428]  
[19:56:04.428]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:56:04.429]    <block atomic="false" info="">
[19:56:04.429]      __var SW_DP_ABORT       = 0x0;
[19:56:04.429]        // -> [SW_DP_ABORT <= 0x00000000]
[19:56:04.429]      __var DP_CTRL_STAT      = 0x4;
[19:56:04.429]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:56:04.429]      __var DP_SELECT         = 0x8;
[19:56:04.429]        // -> [DP_SELECT <= 0x00000008]
[19:56:04.429]      __var powered_down      = 0;
[19:56:04.429]        // -> [powered_down <= 0x00000000]
[19:56:04.429]      WriteDP(DP_SELECT, 0x00000000);
[19:56:04.430]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:56:04.431]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:56:04.432]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:56:04.432]        // -> [powered_down <= 0x00000001]
[19:56:04.432]    </block>
[19:56:04.432]    <control if="powered_down" while="" timeout="0" info="">
[19:56:04.432]      // if-block "powered_down"
[19:56:04.432]        // =>  TRUE
[19:56:04.432]      <block atomic="false" info="">
[19:56:04.432]        Message(0, "Debug/System power-up request sent");
[19:56:04.433]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:56:04.435]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:56:04.435]      </block>
[19:56:04.435]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:56:04.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:56:04.436]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:56:04.437]        // while-condition  =>  FALSE
[19:56:04.437]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:56:04.437]      </control>
[19:56:04.437]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:56:04.437]        // if-block "(__protocol & 0xFFFF) == 1"
[19:56:04.437]          // =>  FALSE
[19:56:04.437]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:56:04.437]      </control>
[19:56:04.437]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:56:04.437]        // if-block "(__protocol & 0xFFFF) == 2"
[19:56:04.437]          // =>  TRUE
[19:56:04.437]        <block atomic="false" info="">
[19:56:04.437]          Message(0, "executing SWD power up");
[19:56:04.439]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:56:04.441]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:56:04.441]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:56:04.442]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:56:04.442]        </block>
[19:56:04.443]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:56:04.443]      </control>
[19:56:04.443]      // end if-block "powered_down"
[19:56:04.443]    </control>
[19:56:04.443]    <block atomic="false" info="">
[19:56:04.443]      __var DEBUG_PORT_VAL    = 0;
[19:56:04.443]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:56:04.443]      __var ACCESS_POINT_VAL  = 0;
[19:56:04.443]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:56:04.443]      __ap = 1; 
[19:56:04.443]        // -> [__ap <= 0x00000001]
[19:56:04.443]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:56:04.446]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:56:04.446]      __ap = 4;
[19:56:04.446]        // -> [__ap <= 0x00000004]
[19:56:04.446]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:56:04.449]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:56:04.449]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:56:04.449]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:56:04.451]    </block>
[19:56:04.451]    <block atomic="false" info="">
[19:56:04.451]      __var nReset = 0x80;
[19:56:04.451]        // -> [nReset <= 0x00000080]
[19:56:04.451]      __var canReadPins = 0;
[19:56:04.451]        // -> [canReadPins <= 0x00000000]
[19:56:04.451]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:56:04.452]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:56:04.452]        // -> [canReadPins <= 0x00000001]
[19:56:04.453]    </block>
[19:56:04.453]    <control if="" while="1" timeout="200" info="">
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.453]      // while "1"  (timeout="200")
[19:56:04.453]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.454]      // while-condition  =>  TRUE
[19:56:04.454]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.455]      // while-condition  =>  TRUE
[19:56:04.455]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.456]      // while-condition  =>  TRUE
[19:56:04.456]      // while "1"  (timeout="200")
[19:56:04.457]      // while-condition  =>  TRUE
[19:56:04.457]      // while "1"  (timeout="200")
[19:56:04.457]      // while-condition  =>  TRUE
[19:56:04.457]      // while "1"  (timeout="200")
[19:56:04.457]      // while-condition  =>  TRUE
[19:56:04.457]      // while "1"  (timeout="200")
[19:56:04.457]      // while  =>  TIMEOUT
[19:56:04.457]      // end while "1"
[19:56:04.457]    </control>
[19:56:04.457]    <control if="canReadPins" while="" timeout="0" info="">
[19:56:04.457]      // if-block "canReadPins"
[19:56:04.457]        // =>  TRUE
[19:56:04.457]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:56:04.457]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:56:04.458]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:56:04.458]        // while-condition  =>  FALSE
[19:56:04.458]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:56:04.458]      </control>
[19:56:04.458]      // end if-block "canReadPins"
[19:56:04.458]    </control>
[19:56:04.458]    <control if="!canReadPins" while="" timeout="0" info="">
[19:56:04.459]      // if-block "!canReadPins"
[19:56:04.459]        // =>  FALSE
[19:56:04.459]      // skip if-block "!canReadPins"
[19:56:04.459]    </control>
[19:56:04.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:56:04.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:56:04.459]        // =>  TRUE
[19:56:04.459]      <block atomic="false" info="">
[19:56:04.459]        WriteAP(0x00, 0x190008);
[19:56:04.461]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:56:04.461]        WriteAP(0xF0, 0x01);
[19:56:04.465]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:56:04.465]      </block>
[19:56:04.465]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:56:04.465]    </control>
[19:56:04.465]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:56:04.465]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:56:04.465]        // =>  FALSE
[19:56:04.465]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:56:04.465]    </control>
[19:56:04.465]    <block atomic="false" info="">
[19:56:04.465]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:56:04.468]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:56:04.469]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:56:04.469]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:56:04.470]      __ap = 0; //lets make sure we reset the access point selection
[19:56:04.470]        // -> [__ap <= 0x00000000]
[19:56:04.470]    </block>
[19:56:04.471]  </sequence>
[19:56:04.471]  
[19:56:04.490]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:56:04.490]  
[19:56:04.491]  <debugvars>
[19:56:04.491]    // Pre-defined
[19:56:04.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:56:04.491]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:56:04.491]    __dp=0x00000000
[19:56:04.492]    __ap=0x00000000
[19:56:04.492]    __traceout=0x00000000      (Trace Disabled)
[19:56:04.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:56:04.492]    __FlashAddr=0x00000000
[19:56:04.492]    __FlashLen=0x00000000
[19:56:04.493]    __FlashArg=0x00000000
[19:56:04.493]    __FlashOp=0x00000000
[19:56:04.493]    __Result=0x00000000
[19:56:04.493]  </debugvars>
[19:56:04.493]  
[19:56:04.493]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:56:04.493]    <block atomic="false" info="">
[19:56:04.493]      __var deviceID = 0;
[19:56:04.493]        // -> [deviceID <= 0x00000000]
[19:56:04.493]      __var version = 0;
[19:56:04.493]        // -> [version <= 0x00000000]
[19:56:04.493]      __var partNum = 0;
[19:56:04.494]        // -> [partNum <= 0x00000000]
[19:56:04.494]      __var manuf = 0;
[19:56:04.494]        // -> [manuf <= 0x00000000]
[19:56:04.494]      __var isMSPM0G1X0X_G3X0X = 0;
[19:56:04.494]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:56:04.494]      __var isProduction = 0;
[19:56:04.494]        // -> [isProduction <= 0x00000000]
[19:56:04.494]      __var continueId = 0;
[19:56:04.494]        // -> [continueId <= 0x00000000]
[19:56:04.494]      deviceID =   Read32(0x41C40004);
[19:56:04.500]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:56:04.500]        // -> [deviceID <= 0x2BB8802F]
[19:56:04.500]      version = deviceID >> 28;
[19:56:04.500]        // -> [version <= 0x00000002]
[19:56:04.500]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:56:04.500]        // -> [partNum <= 0x0000BB88]
[19:56:04.500]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:56:04.500]        // -> [manuf <= 0x00000017]
[19:56:04.500]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:56:04.500]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:56:04.500]      isProduction = (version > 0);
[19:56:04.500]        // -> [isProduction <= 0x00000001]
[19:56:04.500]    </block>
[19:56:04.501]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:56:04.501]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:56:04.501]        // =>  FALSE
[19:56:04.501]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:56:04.501]    </control>
[19:56:04.501]    <control if="continueId == 4" while="" timeout="0" info="">
[19:56:04.501]      // if-block "continueId == 4"
[19:56:04.501]        // =>  FALSE
[19:56:04.501]      // skip if-block "continueId == 4"
[19:56:04.501]    </control>
[19:56:04.501]    <control if="!isProduction" while="" timeout="0" info="">
[19:56:04.501]      // if-block "!isProduction"
[19:56:04.501]        // =>  FALSE
[19:56:04.501]      // skip if-block "!isProduction"
[19:56:04.501]    </control>
[19:56:04.501]  </sequence>
[19:56:04.502]  
[19:58:11.110]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:58:11.110]  
[19:58:11.110]  <debugvars>
[19:58:11.110]    // Pre-defined
[19:58:11.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:11.110]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:58:11.110]    __dp=0x00000000
[19:58:11.110]    __ap=0x00000000
[19:58:11.110]    __traceout=0x00000000      (Trace Disabled)
[19:58:11.110]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:11.110]    __FlashAddr=0x00000000
[19:58:11.110]    __FlashLen=0x00000000
[19:58:11.110]    __FlashArg=0x00000000
[19:58:11.110]    __FlashOp=0x00000000
[19:58:11.110]    __Result=0x00000000
[19:58:11.110]  </debugvars>
[19:58:11.110]  
[19:58:11.110]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:58:11.110]    <block atomic="false" info="">
[19:58:11.110]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:58:11.110]        // -> [isSWJ <= 0x00000001]
[19:58:11.110]      __var hasDormant = __protocol & 0x00020000;
[19:58:11.110]        // -> [hasDormant <= 0x00000000]
[19:58:11.110]      __var protType   = __protocol & 0x0000FFFF;
[19:58:11.110]        // -> [protType <= 0x00000002]
[19:58:11.110]    </block>
[19:58:11.110]    <control if="protType == 1" while="" timeout="0" info="">
[19:58:11.110]      // if-block "protType == 1"
[19:58:11.110]        // =>  FALSE
[19:58:11.110]      // skip if-block "protType == 1"
[19:58:11.110]    </control>
[19:58:11.111]    <control if="protType == 2" while="" timeout="0" info="">
[19:58:11.111]      // if-block "protType == 2"
[19:58:11.111]        // =>  TRUE
[19:58:11.111]      <control if="isSWJ" while="" timeout="0" info="">
[19:58:11.111]        // if-block "isSWJ"
[19:58:11.111]          // =>  TRUE
[19:58:11.111]        <control if="hasDormant" while="" timeout="0" info="">
[19:58:11.111]          // if-block "hasDormant"
[19:58:11.111]            // =>  FALSE
[19:58:11.111]          // skip if-block "hasDormant"
[19:58:11.111]        </control>
[19:58:11.111]        <control if="!hasDormant" while="" timeout="0" info="">
[19:58:11.111]          // if-block "!hasDormant"
[19:58:11.111]            // =>  TRUE
[19:58:11.111]          <block atomic="false" info="">
[19:58:11.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:58:11.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:11.113]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:58:11.114]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:58:11.114]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:58:11.117]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:11.118]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:58:11.119]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:58:11.119]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:58:11.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:11.120]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:58:11.122]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:58:11.122]          </block>
[19:58:11.122]          // end if-block "!hasDormant"
[19:58:11.122]        </control>
[19:58:11.122]        // end if-block "isSWJ"
[19:58:11.122]      </control>
[19:58:11.122]      <control if="!isSWJ" while="" timeout="0" info="">
[19:58:11.122]        // if-block "!isSWJ"
[19:58:11.122]          // =>  FALSE
[19:58:11.123]        // skip if-block "!isSWJ"
[19:58:11.123]      </control>
[19:58:11.123]      <block atomic="false" info="">
[19:58:11.123]        ReadDP(0x0);
[19:58:11.125]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:58:11.125]      </block>
[19:58:11.125]      // end if-block "protType == 2"
[19:58:11.125]    </control>
[19:58:11.125]  </sequence>
[19:58:11.126]  
[19:58:11.128]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:58:11.128]  
[19:58:11.128]  <debugvars>
[19:58:11.128]    // Pre-defined
[19:58:11.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:11.129]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:58:11.129]    __dp=0x00000000
[19:58:11.129]    __ap=0x00000000
[19:58:11.129]    __traceout=0x00000000      (Trace Disabled)
[19:58:11.130]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:11.130]    __FlashAddr=0x00000000
[19:58:11.130]    __FlashLen=0x00000000
[19:58:11.130]    __FlashArg=0x00000000
[19:58:11.130]    __FlashOp=0x00000000
[19:58:11.130]    __Result=0x00000000
[19:58:11.130]  </debugvars>
[19:58:11.130]  
[19:58:11.130]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:58:11.130]    <block atomic="false" info="">
[19:58:11.130]      __var SW_DP_ABORT       = 0x0;
[19:58:11.130]        // -> [SW_DP_ABORT <= 0x00000000]
[19:58:11.130]      __var DP_CTRL_STAT      = 0x4;
[19:58:11.131]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:58:11.131]      __var DP_SELECT         = 0x8;
[19:58:11.131]        // -> [DP_SELECT <= 0x00000008]
[19:58:11.131]      __var powered_down      = 0;
[19:58:11.131]        // -> [powered_down <= 0x00000000]
[19:58:11.131]      WriteDP(DP_SELECT, 0x00000000);
[19:58:11.133]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:58:11.133]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:58:11.135]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:58:11.135]        // -> [powered_down <= 0x00000001]
[19:58:11.135]    </block>
[19:58:11.135]    <control if="powered_down" while="" timeout="0" info="">
[19:58:11.135]      // if-block "powered_down"
[19:58:11.135]        // =>  TRUE
[19:58:11.136]      <block atomic="false" info="">
[19:58:11.136]        Message(0, "Debug/System power-up request sent");
[19:58:11.138]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:58:11.140]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:58:11.140]      </block>
[19:58:11.140]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:58:11.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:11.142]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:58:11.142]        // while-condition  =>  FALSE
[19:58:11.142]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:58:11.142]      </control>
[19:58:11.142]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:58:11.142]        // if-block "(__protocol & 0xFFFF) == 1"
[19:58:11.142]          // =>  FALSE
[19:58:11.143]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:58:11.143]      </control>
[19:58:11.143]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:58:11.143]        // if-block "(__protocol & 0xFFFF) == 2"
[19:58:11.143]          // =>  TRUE
[19:58:11.143]        <block atomic="false" info="">
[19:58:11.143]          Message(0, "executing SWD power up");
[19:58:11.145]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:58:11.148]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:58:11.148]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:58:11.150]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:58:11.150]        </block>
[19:58:11.150]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:58:11.150]      </control>
[19:58:11.150]      // end if-block "powered_down"
[19:58:11.150]    </control>
[19:58:11.150]    <block atomic="false" info="">
[19:58:11.151]      __var DEBUG_PORT_VAL    = 0;
[19:58:11.151]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:58:11.151]      __var ACCESS_POINT_VAL  = 0;
[19:58:11.151]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:58:11.151]      __ap = 1; 
[19:58:11.151]        // -> [__ap <= 0x00000001]
[19:58:11.151]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:58:11.154]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:58:11.154]      __ap = 4;
[19:58:11.154]        // -> [__ap <= 0x00000004]
[19:58:11.155]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:58:11.158]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:58:11.158]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:58:11.158]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:58:11.160]    </block>
[19:58:11.160]    <block atomic="false" info="">
[19:58:11.160]      __var nReset = 0x80;
[19:58:11.160]        // -> [nReset <= 0x00000080]
[19:58:11.160]      __var canReadPins = 0;
[19:58:11.160]        // -> [canReadPins <= 0x00000000]
[19:58:11.160]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:58:11.162]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:58:11.162]        // -> [canReadPins <= 0x00000001]
[19:58:11.162]    </block>
[19:58:11.162]    <control if="" while="1" timeout="200" info="">
[19:58:11.162]      // while "1"  (timeout="200")
[19:58:11.162]      // while-condition  =>  TRUE
[19:58:11.162]      // while "1"  (timeout="200")
[19:58:11.162]      // while-condition  =>  TRUE
[19:58:11.162]      // while "1"  (timeout="200")
[19:58:11.162]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.163]      // while-condition  =>  TRUE
[19:58:11.163]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.164]      // while-condition  =>  TRUE
[19:58:11.164]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.165]      // while "1"  (timeout="200")
[19:58:11.165]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.166]      // while "1"  (timeout="200")
[19:58:11.166]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.167]      // while-condition  =>  TRUE
[19:58:11.167]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.168]      // while-condition  =>  TRUE
[19:58:11.168]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.169]      // while-condition  =>  TRUE
[19:58:11.169]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.170]      // while-condition  =>  TRUE
[19:58:11.170]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.171]      // while "1"  (timeout="200")
[19:58:11.171]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.172]      // while "1"  (timeout="200")
[19:58:11.172]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.173]      // while "1"  (timeout="200")
[19:58:11.173]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.174]      // while-condition  =>  TRUE
[19:58:11.174]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.175]      // while "1"  (timeout="200")
[19:58:11.175]      // while-condition  =>  TRUE
[19:58:11.176]      // while "1"  (timeout="200")
[19:58:11.176]      // while  =>  TIMEOUT
[19:58:11.176]      // end while "1"
[19:58:11.176]    </control>
[19:58:11.176]    <control if="canReadPins" while="" timeout="0" info="">
[19:58:11.176]      // if-block "canReadPins"
[19:58:11.176]        // =>  TRUE
[19:58:11.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:58:11.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:58:11.177]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:58:11.177]        // while-condition  =>  FALSE
[19:58:11.177]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:58:11.177]      </control>
[19:58:11.177]      // end if-block "canReadPins"
[19:58:11.177]    </control>
[19:58:11.177]    <control if="!canReadPins" while="" timeout="0" info="">
[19:58:11.177]      // if-block "!canReadPins"
[19:58:11.177]        // =>  FALSE
[19:58:11.177]      // skip if-block "!canReadPins"
[19:58:11.177]    </control>
[19:58:11.177]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:58:11.177]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:58:11.177]        // =>  TRUE
[19:58:11.177]      <block atomic="false" info="">
[19:58:11.177]        WriteAP(0x00, 0x190008);
[19:58:11.179]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:58:11.179]        WriteAP(0xF0, 0x01);
[19:58:11.182]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:58:11.182]      </block>
[19:58:11.182]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:58:11.183]    </control>
[19:58:11.183]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:58:11.183]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:58:11.183]        // =>  FALSE
[19:58:11.183]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:58:11.183]    </control>
[19:58:11.183]    <block atomic="false" info="">
[19:58:11.183]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:58:11.188]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:58:11.188]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:58:11.188]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:58:11.190]      __ap = 0; //lets make sure we reset the access point selection
[19:58:11.190]        // -> [__ap <= 0x00000000]
[19:58:11.190]    </block>
[19:58:11.190]  </sequence>
[19:58:11.190]  
[19:58:11.205]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:58:11.205]  
[19:58:11.205]  <debugvars>
[19:58:11.205]    // Pre-defined
[19:58:11.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:11.206]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:58:11.206]    __dp=0x00000000
[19:58:11.206]    __ap=0x00000000
[19:58:11.206]    __traceout=0x00000000      (Trace Disabled)
[19:58:11.206]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:11.206]    __FlashAddr=0x00000000
[19:58:11.206]    __FlashLen=0x00000000
[19:58:11.206]    __FlashArg=0x00000000
[19:58:11.206]    __FlashOp=0x00000000
[19:58:11.206]    __Result=0x00000000
[19:58:11.206]  </debugvars>
[19:58:11.206]  
[19:58:11.206]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:58:11.206]    <block atomic="false" info="">
[19:58:11.206]      __var deviceID = 0;
[19:58:11.206]        // -> [deviceID <= 0x00000000]
[19:58:11.206]      __var version = 0;
[19:58:11.206]        // -> [version <= 0x00000000]
[19:58:11.206]      __var partNum = 0;
[19:58:11.206]        // -> [partNum <= 0x00000000]
[19:58:11.206]      __var manuf = 0;
[19:58:11.207]        // -> [manuf <= 0x00000000]
[19:58:11.207]      __var isMSPM0G1X0X_G3X0X = 0;
[19:58:11.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:58:11.207]      __var isProduction = 0;
[19:58:11.207]        // -> [isProduction <= 0x00000000]
[19:58:11.207]      __var continueId = 0;
[19:58:11.207]        // -> [continueId <= 0x00000000]
[19:58:11.207]      deviceID =   Read32(0x41C40004);
[19:58:11.213]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:58:11.213]        // -> [deviceID <= 0x2BB8802F]
[19:58:11.213]      version = deviceID >> 28;
[19:58:11.213]        // -> [version <= 0x00000002]
[19:58:11.213]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:58:11.213]        // -> [partNum <= 0x0000BB88]
[19:58:11.213]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:58:11.213]        // -> [manuf <= 0x00000017]
[19:58:11.213]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:58:11.213]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:58:11.213]      isProduction = (version > 0);
[19:58:11.214]        // -> [isProduction <= 0x00000001]
[19:58:11.214]    </block>
[19:58:11.214]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:58:11.214]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:58:11.214]        // =>  FALSE
[19:58:11.214]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:58:11.214]    </control>
[19:58:11.214]    <control if="continueId == 4" while="" timeout="0" info="">
[19:58:11.214]      // if-block "continueId == 4"
[19:58:11.214]        // =>  FALSE
[19:58:11.214]      // skip if-block "continueId == 4"
[19:58:11.214]    </control>
[19:58:11.214]    <control if="!isProduction" while="" timeout="0" info="">
[19:58:11.214]      // if-block "!isProduction"
[19:58:11.214]        // =>  FALSE
[19:58:11.214]      // skip if-block "!isProduction"
[19:58:11.214]    </control>
[19:58:11.214]  </sequence>
[19:58:11.214]  
[19:59:22.674]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:22.674]  
[19:59:22.680]  <debugvars>
[19:59:22.680]    // Pre-defined
[19:59:22.680]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:22.680]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:22.680]    __dp=0x00000000
[19:59:22.680]    __ap=0x00000000
[19:59:22.680]    __traceout=0x00000000      (Trace Disabled)
[19:59:22.680]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:22.680]    __FlashAddr=0x00000000
[19:59:22.681]    __FlashLen=0x00000000
[19:59:22.681]    __FlashArg=0x00000000
[19:59:22.681]    __FlashOp=0x00000000
[19:59:22.681]    __Result=0x00000000
[19:59:22.681]  </debugvars>
[19:59:22.681]  
[19:59:22.681]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:22.681]    <block atomic="false" info="">
[19:59:22.681]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:22.681]        // -> [isSWJ <= 0x00000001]
[19:59:22.681]      __var hasDormant = __protocol & 0x00020000;
[19:59:22.681]        // -> [hasDormant <= 0x00000000]
[19:59:22.681]      __var protType   = __protocol & 0x0000FFFF;
[19:59:22.681]        // -> [protType <= 0x00000002]
[19:59:22.681]    </block>
[19:59:22.681]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:22.681]      // if-block "protType == 1"
[19:59:22.681]        // =>  FALSE
[19:59:22.681]      // skip if-block "protType == 1"
[19:59:22.681]    </control>
[19:59:22.681]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:22.681]      // if-block "protType == 2"
[19:59:22.681]        // =>  TRUE
[19:59:22.681]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:22.681]        // if-block "isSWJ"
[19:59:22.681]          // =>  TRUE
[19:59:22.682]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:22.682]          // if-block "hasDormant"
[19:59:22.682]            // =>  FALSE
[19:59:22.682]          // skip if-block "hasDormant"
[19:59:22.682]        </control>
[19:59:22.682]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:22.682]          // if-block "!hasDormant"
[19:59:22.682]            // =>  TRUE
[19:59:22.682]          <block atomic="false" info="">
[19:59:22.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:23.698]  
[19:59:23.698]  !!! E320 : DAP access error
[19:59:23.698]  
[19:59:23.699]          </block>
[19:59:23.699]          // end if-block "!hasDormant"
[19:59:23.699]        </control>
[19:59:23.699]        // end if-block "isSWJ"
[19:59:23.699]      </control>
[19:59:23.699]      // end if-block "protType == 2"
[19:59:23.700]    </control>
[19:59:23.700]  </sequence>
[19:59:23.700]  
[19:59:23.760]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:23.760]  
[19:59:23.760]  <debugvars>
[19:59:23.760]    // Pre-defined
[19:59:23.760]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:23.760]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:23.761]    __dp=0x00000000
[19:59:23.761]    __ap=0x00000000
[19:59:23.761]    __traceout=0x00000000      (Trace Disabled)
[19:59:23.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:23.761]    __FlashAddr=0x00000000
[19:59:23.761]    __FlashLen=0x00000000
[19:59:23.761]    __FlashArg=0x00000000
[19:59:23.761]    __FlashOp=0x00000000
[19:59:23.762]    __Result=0x00000000
[19:59:23.762]  </debugvars>
[19:59:23.762]  
[19:59:23.762]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:23.762]    <block atomic="false" info="">
[19:59:23.762]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:23.762]        // -> [isSWJ <= 0x00000001]
[19:59:23.762]      __var hasDormant = __protocol & 0x00020000;
[19:59:23.762]        // -> [hasDormant <= 0x00000000]
[19:59:23.762]      __var protType   = __protocol & 0x0000FFFF;
[19:59:23.762]        // -> [protType <= 0x00000002]
[19:59:23.762]    </block>
[19:59:23.762]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:23.762]      // if-block "protType == 1"
[19:59:23.762]        // =>  FALSE
[19:59:23.763]      // skip if-block "protType == 1"
[19:59:23.763]    </control>
[19:59:23.763]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:23.763]      // if-block "protType == 2"
[19:59:23.763]        // =>  TRUE
[19:59:23.763]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:23.763]        // if-block "isSWJ"
[19:59:23.763]          // =>  TRUE
[19:59:23.763]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:23.763]          // if-block "hasDormant"
[19:59:23.763]            // =>  FALSE
[19:59:23.763]          // skip if-block "hasDormant"
[19:59:23.763]        </control>
[19:59:23.763]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:23.763]          // if-block "!hasDormant"
[19:59:23.763]            // =>  TRUE
[19:59:23.763]          <block atomic="false" info="">
[19:59:23.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:24.767]  
[19:59:24.767]  !!! E320 : DAP access error
[19:59:24.767]  
[19:59:24.767]          </block>
[19:59:24.767]          // end if-block "!hasDormant"
[19:59:24.767]        </control>
[19:59:24.767]        // end if-block "isSWJ"
[19:59:24.767]      </control>
[19:59:24.767]      // end if-block "protType == 2"
[19:59:24.767]    </control>
[19:59:24.768]  </sequence>
[19:59:24.768]  
[19:59:24.827]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:24.827]  
[19:59:24.827]  <debugvars>
[19:59:24.827]    // Pre-defined
[19:59:24.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:24.827]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:24.828]    __dp=0x00000000
[19:59:24.828]    __ap=0x00000000
[19:59:24.828]    __traceout=0x00000000      (Trace Disabled)
[19:59:24.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:24.828]    __FlashAddr=0x00000000
[19:59:24.828]    __FlashLen=0x00000000
[19:59:24.828]    __FlashArg=0x00000000
[19:59:24.828]    __FlashOp=0x00000000
[19:59:24.828]    __Result=0x00000000
[19:59:24.828]  </debugvars>
[19:59:24.828]  
[19:59:24.829]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:24.829]    <block atomic="false" info="">
[19:59:24.829]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:24.829]        // -> [isSWJ <= 0x00000001]
[19:59:24.829]      __var hasDormant = __protocol & 0x00020000;
[19:59:24.829]        // -> [hasDormant <= 0x00000000]
[19:59:24.829]      __var protType   = __protocol & 0x0000FFFF;
[19:59:24.829]        // -> [protType <= 0x00000002]
[19:59:24.829]    </block>
[19:59:24.829]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:24.829]      // if-block "protType == 1"
[19:59:24.829]        // =>  FALSE
[19:59:24.829]      // skip if-block "protType == 1"
[19:59:24.829]    </control>
[19:59:24.829]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:24.829]      // if-block "protType == 2"
[19:59:24.829]        // =>  TRUE
[19:59:24.829]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:24.830]        // if-block "isSWJ"
[19:59:24.830]          // =>  TRUE
[19:59:24.830]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:24.830]          // if-block "hasDormant"
[19:59:24.830]            // =>  FALSE
[19:59:24.830]          // skip if-block "hasDormant"
[19:59:24.830]        </control>
[19:59:24.830]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:24.830]          // if-block "!hasDormant"
[19:59:24.830]            // =>  TRUE
[19:59:24.830]          <block atomic="false" info="">
[19:59:24.830]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:25.843]  
[19:59:25.843]  !!! E320 : DAP access error
[19:59:25.843]  
[19:59:25.844]          </block>
[19:59:25.844]          // end if-block "!hasDormant"
[19:59:25.844]        </control>
[19:59:25.845]        // end if-block "isSWJ"
[19:59:25.845]      </control>
[19:59:25.845]      // end if-block "protType == 2"
[19:59:25.845]    </control>
[19:59:25.845]  </sequence>
[19:59:25.845]  
[19:59:25.903]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:25.903]  
[19:59:25.903]  <debugvars>
[19:59:25.903]    // Pre-defined
[19:59:25.904]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:25.904]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:25.904]    __dp=0x00000000
[19:59:25.904]    __ap=0x00000000
[19:59:25.904]    __traceout=0x00000000      (Trace Disabled)
[19:59:25.904]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:25.904]    __FlashAddr=0x00000000
[19:59:25.905]    __FlashLen=0x00000000
[19:59:25.905]    __FlashArg=0x00000000
[19:59:25.905]    __FlashOp=0x00000000
[19:59:25.905]    __Result=0x00000000
[19:59:25.905]  </debugvars>
[19:59:25.906]  
[19:59:25.906]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:25.906]    <block atomic="false" info="">
[19:59:25.906]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:25.906]        // -> [isSWJ <= 0x00000001]
[19:59:25.906]      __var hasDormant = __protocol & 0x00020000;
[19:59:25.906]        // -> [hasDormant <= 0x00000000]
[19:59:25.907]      __var protType   = __protocol & 0x0000FFFF;
[19:59:25.907]        // -> [protType <= 0x00000002]
[19:59:25.907]    </block>
[19:59:25.907]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:25.907]      // if-block "protType == 1"
[19:59:25.907]        // =>  FALSE
[19:59:25.907]      // skip if-block "protType == 1"
[19:59:25.907]    </control>
[19:59:25.907]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:25.908]      // if-block "protType == 2"
[19:59:25.908]        // =>  TRUE
[19:59:25.908]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:25.908]        // if-block "isSWJ"
[19:59:25.908]          // =>  TRUE
[19:59:25.908]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:25.908]          // if-block "hasDormant"
[19:59:25.908]            // =>  FALSE
[19:59:25.908]          // skip if-block "hasDormant"
[19:59:25.908]        </control>
[19:59:25.908]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:25.908]          // if-block "!hasDormant"
[19:59:25.908]            // =>  TRUE
[19:59:25.908]          <block atomic="false" info="">
[19:59:25.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:27.879]  
[19:59:27.879]  !!! E320 : DAP access error
[19:59:27.879]  
[19:59:27.879]          </block>
[19:59:27.879]          // end if-block "!hasDormant"
[19:59:27.879]        </control>
[19:59:27.879]        // end if-block "isSWJ"
[19:59:27.879]      </control>
[19:59:27.879]      // end if-block "protType == 2"
[19:59:27.879]    </control>
[19:59:27.880]  </sequence>
[19:59:27.880]  
[19:59:28.137]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[19:59:28.137]  
[19:59:28.137]  <debugvars>
[19:59:28.137]    // Pre-defined
[19:59:28.137]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:28.137]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:59:28.137]    __dp=0x00000000
[19:59:28.137]    __ap=0x00000000
[19:59:28.137]    __traceout=0x00000000      (Trace Disabled)
[19:59:28.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:28.138]    __FlashAddr=0x00000000
[19:59:28.138]    __FlashLen=0x00000000
[19:59:28.138]    __FlashArg=0x00000000
[19:59:28.138]    __FlashOp=0x00000000
[19:59:28.139]    __Result=0x00000000
[19:59:28.139]  </debugvars>
[19:59:28.139]  
[19:59:28.139]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:28.139]    <block atomic="false" info="">
[19:59:28.139]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:28.139]        // -> [isSWJ <= 0x00000001]
[19:59:28.139]      __var hasDormant = __protocol & 0x00020000;
[19:59:28.139]        // -> [hasDormant <= 0x00000000]
[19:59:28.139]      __var protType   = __protocol & 0x0000FFFF;
[19:59:28.139]        // -> [protType <= 0x00000002]
[19:59:28.139]    </block>
[19:59:28.139]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:28.139]      // if-block "protType == 1"
[19:59:28.140]        // =>  FALSE
[19:59:28.140]      // skip if-block "protType == 1"
[19:59:28.140]    </control>
[19:59:28.140]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:28.140]      // if-block "protType == 2"
[19:59:28.140]        // =>  TRUE
[19:59:28.140]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:28.140]        // if-block "isSWJ"
[19:59:28.140]          // =>  TRUE
[19:59:28.140]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:28.140]          // if-block "hasDormant"
[19:59:28.141]            // =>  FALSE
[19:59:28.141]          // skip if-block "hasDormant"
[19:59:28.141]        </control>
[19:59:28.141]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:28.141]          // if-block "!hasDormant"
[19:59:28.141]            // =>  TRUE
[19:59:28.141]          <block atomic="false" info="">
[19:59:28.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
