/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0028.log
 *  Created     : 00:50:21 (28/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[00:50:21.096]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:50:21.096]  
[00:50:21.096]  <debugvars>
[00:50:21.096]    // Pre-defined
[00:50:21.097]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:21.097]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:21.097]    __dp=0x00000000
[00:50:21.097]    __ap=0x00000000
[00:50:21.097]    __traceout=0x00000000      (Trace Disabled)
[00:50:21.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:21.098]    __FlashAddr=0x00000000
[00:50:21.098]    __FlashLen=0x00000000
[00:50:21.098]    __FlashArg=0x00000000
[00:50:21.098]    __FlashOp=0x00000000
[00:50:21.098]    __Result=0x00000000
[00:50:21.098]  </debugvars>
[00:50:21.098]  
[00:50:21.098]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:50:21.098]    <block atomic="false" info="">
[00:50:21.099]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:50:21.099]        // -> [isSWJ <= 0x00000001]
[00:50:21.099]      __var hasDormant = __protocol & 0x00020000;
[00:50:21.099]        // -> [hasDormant <= 0x00000000]
[00:50:21.099]      __var protType   = __protocol & 0x0000FFFF;
[00:50:21.099]        // -> [protType <= 0x00000002]
[00:50:21.099]    </block>
[00:50:21.099]    <control if="protType == 1" while="" timeout="0" info="">
[00:50:21.099]      // if-block "protType == 1"
[00:50:21.100]        // =>  FALSE
[00:50:21.100]      // skip if-block "protType == 1"
[00:50:21.100]    </control>
[00:50:21.100]    <control if="protType == 2" while="" timeout="0" info="">
[00:50:21.100]      // if-block "protType == 2"
[00:50:21.100]        // =>  TRUE
[00:50:21.100]      <control if="isSWJ" while="" timeout="0" info="">
[00:50:21.100]        // if-block "isSWJ"
[00:50:21.100]          // =>  TRUE
[00:50:21.100]        <control if="hasDormant" while="" timeout="0" info="">
[00:50:21.100]          // if-block "hasDormant"
[00:50:21.100]            // =>  FALSE
[00:50:21.101]          // skip if-block "hasDormant"
[00:50:21.101]        </control>
[00:50:21.101]        <control if="!hasDormant" while="" timeout="0" info="">
[00:50:21.101]          // if-block "!hasDormant"
[00:50:21.101]            // =>  TRUE
[00:50:21.101]          <block atomic="false" info="">
[00:50:21.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:50:21.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:21.106]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:50:21.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:50:21.108]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:50:21.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:21.112]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:50:21.117]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:50:21.118]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:50:21.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:21.121]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:50:21.125]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:50:21.126]          </block>
[00:50:21.126]          // end if-block "!hasDormant"
[00:50:21.126]        </control>
[00:50:21.126]        // end if-block "isSWJ"
[00:50:21.126]      </control>
[00:50:21.126]      <control if="!isSWJ" while="" timeout="0" info="">
[00:50:21.126]        // if-block "!isSWJ"
[00:50:21.126]          // =>  FALSE
[00:50:21.127]        // skip if-block "!isSWJ"
[00:50:21.127]      </control>
[00:50:21.127]      <block atomic="false" info="">
[00:50:21.127]        ReadDP(0x0);
[00:50:21.130]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:50:21.130]      </block>
[00:50:21.130]      // end if-block "protType == 2"
[00:50:21.130]    </control>
[00:50:21.132]  </sequence>
[00:50:21.132]  
[00:50:21.138]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:50:21.138]  
[00:50:21.138]  <debugvars>
[00:50:21.138]    // Pre-defined
[00:50:21.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:21.138]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:21.138]    __dp=0x00000000
[00:50:21.139]    __ap=0x00000000
[00:50:21.139]    __traceout=0x00000000      (Trace Disabled)
[00:50:21.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:21.139]    __FlashAddr=0x00000000
[00:50:21.139]    __FlashLen=0x00000000
[00:50:21.139]    __FlashArg=0x00000000
[00:50:21.139]    __FlashOp=0x00000000
[00:50:21.139]    __Result=0x00000000
[00:50:21.139]  </debugvars>
[00:50:21.139]  
[00:50:21.140]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:50:21.140]    <block atomic="false" info="">
[00:50:21.140]      __var SW_DP_ABORT       = 0x0;
[00:50:21.140]        // -> [SW_DP_ABORT <= 0x00000000]
[00:50:21.140]      __var DP_CTRL_STAT      = 0x4;
[00:50:21.140]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:50:21.140]      __var DP_SELECT         = 0x8;
[00:50:21.140]        // -> [DP_SELECT <= 0x00000008]
[00:50:21.140]      __var powered_down      = 0;
[00:50:21.140]        // -> [powered_down <= 0x00000000]
[00:50:21.140]      WriteDP(DP_SELECT, 0x00000000);
[00:50:21.142]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:50:21.144]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:50:21.146]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:50:21.146]        // -> [powered_down <= 0x00000001]
[00:50:21.146]    </block>
[00:50:21.146]    <control if="powered_down" while="" timeout="0" info="">
[00:50:21.147]      // if-block "powered_down"
[00:50:21.147]        // =>  TRUE
[00:50:21.147]      <block atomic="false" info="">
[00:50:21.147]        Message(0, "Debug/System power-up request sent");
[00:50:21.149]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:50:21.152]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:50:21.152]      </block>
[00:50:21.152]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:50:21.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:50:21.157]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:50:21.157]        // while-condition  =>  FALSE
[00:50:21.157]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:50:21.158]      </control>
[00:50:21.158]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:50:21.158]        // if-block "(__protocol & 0xFFFF) == 1"
[00:50:21.158]          // =>  FALSE
[00:50:21.158]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:50:21.158]      </control>
[00:50:21.158]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:50:21.158]        // if-block "(__protocol & 0xFFFF) == 2"
[00:50:21.158]          // =>  TRUE
[00:50:21.159]        <block atomic="false" info="">
[00:50:21.159]          Message(0, "executing SWD power up");
[00:50:21.160]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:50:21.167]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:50:21.167]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:50:21.173]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:50:21.173]        </block>
[00:50:21.173]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:50:21.173]      </control>
[00:50:21.173]      // end if-block "powered_down"
[00:50:21.173]    </control>
[00:50:21.173]    <block atomic="false" info="">
[00:50:21.174]      __var DEBUG_PORT_VAL    = 0;
[00:50:21.174]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:50:21.174]      __var ACCESS_POINT_VAL  = 0;
[00:50:21.174]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:50:21.174]      __ap = 1; 
[00:50:21.174]        // -> [__ap <= 0x00000001]
[00:50:21.174]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:50:21.187]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:50:21.187]      __ap = 4;
[00:50:21.187]        // -> [__ap <= 0x00000004]
[00:50:21.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:21.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:50:21.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:50:21.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:21.199]    </block>
[00:50:21.199]    <block atomic="false" info="">
[00:50:21.199]      __var nReset = 0x80;
[00:50:21.199]        // -> [nReset <= 0x00000080]
[00:50:21.199]      __var canReadPins = 0;
[00:50:21.199]        // -> [canReadPins <= 0x00000000]
[00:50:21.200]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:50:21.203]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:50:21.203]        // -> [canReadPins <= 0x00000001]
[00:50:21.203]    </block>
[00:50:21.203]    <control if="" while="1" timeout="200" info="">
[00:50:21.203]      // while "1"  (timeout="200")
[00:50:21.203]      // while-condition  =>  TRUE
[00:50:21.203]      // while "1"  (timeout="200")
[00:50:21.203]      // while-condition  =>  TRUE
[00:50:21.203]      // while "1"  (timeout="200")
[00:50:21.203]      // while-condition  =>  TRUE
[00:50:21.203]      // while "1"  (timeout="200")
[00:50:21.203]      // while-condition  =>  TRUE
[00:50:21.203]      // while "1"  (timeout="200")
[00:50:21.203]      // while-condition  =>  TRUE
[00:50:21.204]      // while "1"  (timeout="200")
[00:50:21.204]      // while-condition  =>  TRUE
[00:50:21.205]      // while "1"  (timeout="200")
[00:50:21.205]      // while-condition  =>  TRUE
[00:50:21.205]      // while "1"  (timeout="200")
[00:50:21.205]      // while-condition  =>  TRUE
[00:50:21.205]      // while "1"  (timeout="200")
[00:50:21.205]      // while-condition  =>  TRUE
[00:50:21.205]      // while "1"  (timeout="200")
[00:50:21.205]      // while-condition  =>  TRUE
[00:50:21.205]      // while "1"  (timeout="200")
[00:50:21.205]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.206]      // while "1"  (timeout="200")
[00:50:21.206]      // while-condition  =>  TRUE
[00:50:21.207]      // while "1"  (timeout="200")
[00:50:21.207]      // while-condition  =>  TRUE
[00:50:21.207]      // while "1"  (timeout="200")
[00:50:21.207]      // while-condition  =>  TRUE
[00:50:21.207]      // while "1"  (timeout="200")
[00:50:21.207]      // while-condition  =>  TRUE
[00:50:21.207]      // while "1"  (timeout="200")
[00:50:21.207]      // while-condition  =>  TRUE
[00:50:21.207]      // while "1"  (timeout="200")
[00:50:21.209]      // while-condition  =>  TRUE
[00:50:21.209]      // while "1"  (timeout="200")
[00:50:21.209]      // while-condition  =>  TRUE
[00:50:21.209]      // while "1"  (timeout="200")
[00:50:21.209]      // while-condition  =>  TRUE
[00:50:21.209]      // while "1"  (timeout="200")
[00:50:21.209]      // while-condition  =>  TRUE
[00:50:21.209]      // while "1"  (timeout="200")
[00:50:21.209]      // while-condition  =>  TRUE
[00:50:21.209]      // while "1"  (timeout="200")
[00:50:21.209]      // while-condition  =>  TRUE
[00:50:21.210]      // while "1"  (timeout="200")
[00:50:21.210]      // while-condition  =>  TRUE
[00:50:21.210]      // while "1"  (timeout="200")
[00:50:21.210]      // while-condition  =>  TRUE
[00:50:21.210]      // while "1"  (timeout="200")
[00:50:21.210]      // while-condition  =>  TRUE
[00:50:21.210]      // while "1"  (timeout="200")
[00:50:21.210]      // while-condition  =>  TRUE
[00:50:21.210]      // while "1"  (timeout="200")
[00:50:21.210]      // while-condition  =>  TRUE
[00:50:21.210]      // while "1"  (timeout="200")
[00:50:21.210]      // while-condition  =>  TRUE
[00:50:21.211]      // while "1"  (timeout="200")
[00:50:21.211]      // while-condition  =>  TRUE
[00:50:21.211]      // while "1"  (timeout="200")
[00:50:21.211]      // while-condition  =>  TRUE
[00:50:21.211]      // while "1"  (timeout="200")
[00:50:21.211]      // while-condition  =>  TRUE
[00:50:21.211]      // while "1"  (timeout="200")
[00:50:21.211]      // while-condition  =>  TRUE
[00:50:21.212]      // while "1"  (timeout="200")
[00:50:21.212]      // while-condition  =>  TRUE
[00:50:21.212]      // while "1"  (timeout="200")
[00:50:21.212]      // while-condition  =>  TRUE
[00:50:21.212]      // while "1"  (timeout="200")
[00:50:21.212]      // while-condition  =>  TRUE
[00:50:21.212]      // while "1"  (timeout="200")
[00:50:21.212]      // while-condition  =>  TRUE
[00:50:21.212]      // while "1"  (timeout="200")
[00:50:21.213]      // while-condition  =>  TRUE
[00:50:21.213]      // while "1"  (timeout="200")
[00:50:21.213]      // while-condition  =>  TRUE
[00:50:21.213]      // while "1"  (timeout="200")
[00:50:21.213]      // while-condition  =>  TRUE
[00:50:21.213]      // while "1"  (timeout="200")
[00:50:21.213]      // while-condition  =>  TRUE
[00:50:21.213]      // while "1"  (timeout="200")
[00:50:21.213]      // while-condition  =>  TRUE
[00:50:21.213]      // while "1"  (timeout="200")
[00:50:21.213]      // while-condition  =>  TRUE
[00:50:21.213]      // while "1"  (timeout="200")
[00:50:21.214]      // while-condition  =>  TRUE
[00:50:21.214]      // while "1"  (timeout="200")
[00:50:21.214]      // while-condition  =>  TRUE
[00:50:21.214]      // while "1"  (timeout="200")
[00:50:21.214]      // while-condition  =>  TRUE
[00:50:21.214]      // while "1"  (timeout="200")
[00:50:21.214]      // while-condition  =>  TRUE
[00:50:21.214]      // while "1"  (timeout="200")
[00:50:21.214]      // while-condition  =>  TRUE
[00:50:21.215]      // while "1"  (timeout="200")
[00:50:21.215]      // while-condition  =>  TRUE
[00:50:21.215]      // while "1"  (timeout="200")
[00:50:21.215]      // while-condition  =>  TRUE
[00:50:21.215]      // while "1"  (timeout="200")
[00:50:21.215]      // while-condition  =>  TRUE
[00:50:21.216]      // while "1"  (timeout="200")
[00:50:21.216]      // while-condition  =>  TRUE
[00:50:21.216]      // while "1"  (timeout="200")
[00:50:21.216]      // while-condition  =>  TRUE
[00:50:21.216]      // while "1"  (timeout="200")
[00:50:21.216]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.217]      // while "1"  (timeout="200")
[00:50:21.217]      // while-condition  =>  TRUE
[00:50:21.218]      // while "1"  (timeout="200")
[00:50:21.218]      // while-condition  =>  TRUE
[00:50:21.218]      // while "1"  (timeout="200")
[00:50:21.218]      // while-condition  =>  TRUE
[00:50:21.218]      // while "1"  (timeout="200")
[00:50:21.218]      // while-condition  =>  TRUE
[00:50:21.218]      // while "1"  (timeout="200")
[00:50:21.218]      // while-condition  =>  TRUE
[00:50:21.218]      // while "1"  (timeout="200")
[00:50:21.218]      // while-condition  =>  TRUE
[00:50:21.218]      // while "1"  (timeout="200")
[00:50:21.218]      // while-condition  =>  TRUE
[00:50:21.219]      // while "1"  (timeout="200")
[00:50:21.219]      // while  =>  TIMEOUT
[00:50:21.219]      // end while "1"
[00:50:21.219]    </control>
[00:50:21.219]    <control if="canReadPins" while="" timeout="0" info="">
[00:50:21.219]      // if-block "canReadPins"
[00:50:21.219]        // =>  TRUE
[00:50:21.219]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:50:21.219]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:50:21.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:50:21.223]        // while-condition  =>  FALSE
[00:50:21.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:50:21.223]      </control>
[00:50:21.223]      // end if-block "canReadPins"
[00:50:21.223]    </control>
[00:50:21.223]    <control if="!canReadPins" while="" timeout="0" info="">
[00:50:21.223]      // if-block "!canReadPins"
[00:50:21.223]        // =>  FALSE
[00:50:21.223]      // skip if-block "!canReadPins"
[00:50:21.224]    </control>
[00:50:21.224]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:50:21.224]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:21.224]        // =>  TRUE
[00:50:21.224]      <block atomic="false" info="">
[00:50:21.224]        WriteAP(0x00, 0x190008);
[00:50:21.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:21.227]        WriteAP(0xF0, 0x01);
[00:50:21.235]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:21.236]      </block>
[00:50:21.236]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:21.236]    </control>
[00:50:21.236]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:50:21.236]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:21.236]        // =>  FALSE
[00:50:21.236]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:21.236]    </control>
[00:50:21.236]    <block atomic="false" info="">
[00:50:21.237]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:21.245]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:50:21.246]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:50:21.246]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:21.247]      __ap = 0; //lets make sure we reset the access point selection
[00:50:21.247]        // -> [__ap <= 0x00000000]
[00:50:21.247]    </block>
[00:50:21.248]  </sequence>
[00:50:21.248]  
[00:50:21.296]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:50:21.296]  
[00:50:21.297]  <debugvars>
[00:50:21.297]    // Pre-defined
[00:50:21.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:21.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:21.298]    __dp=0x00000000
[00:50:21.298]    __ap=0x00000000
[00:50:21.298]    __traceout=0x00000000      (Trace Disabled)
[00:50:21.298]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:21.298]    __FlashAddr=0x00000000
[00:50:21.298]    __FlashLen=0x00000000
[00:50:21.298]    __FlashArg=0x00000000
[00:50:21.298]    __FlashOp=0x00000000
[00:50:21.298]    __Result=0x00000000
[00:50:21.299]  </debugvars>
[00:50:21.299]  
[00:50:21.299]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:50:21.299]    <block atomic="false" info="">
[00:50:21.299]      __var deviceID = 0;
[00:50:21.299]        // -> [deviceID <= 0x00000000]
[00:50:21.299]      __var version = 0;
[00:50:21.299]        // -> [version <= 0x00000000]
[00:50:21.299]      __var partNum = 0;
[00:50:21.299]        // -> [partNum <= 0x00000000]
[00:50:21.300]      __var manuf = 0;
[00:50:21.300]        // -> [manuf <= 0x00000000]
[00:50:21.300]      __var isMSPM0G1X0X_G3X0X = 0;
[00:50:21.300]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:50:21.300]      __var isProduction = 0;
[00:50:21.300]        // -> [isProduction <= 0x00000000]
[00:50:21.300]      __var continueId = 0;
[00:50:21.300]        // -> [continueId <= 0x00000000]
[00:50:21.300]      deviceID =   Read32(0x41C40004);
[00:50:21.314]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:50:21.314]        // -> [deviceID <= 0x2BB8802F]
[00:50:21.314]      version = deviceID >> 28;
[00:50:21.314]        // -> [version <= 0x00000002]
[00:50:21.314]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:50:21.314]        // -> [partNum <= 0x0000BB88]
[00:50:21.314]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:50:21.314]        // -> [manuf <= 0x00000017]
[00:50:21.314]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:50:21.314]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:50:21.315]      isProduction = (version > 0);
[00:50:21.315]        // -> [isProduction <= 0x00000001]
[00:50:21.315]    </block>
[00:50:21.315]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:50:21.315]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:50:21.315]        // =>  FALSE
[00:50:21.315]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:50:21.315]    </control>
[00:50:21.316]    <control if="continueId == 4" while="" timeout="0" info="">
[00:50:21.316]      // if-block "continueId == 4"
[00:50:21.316]        // =>  FALSE
[00:50:21.316]      // skip if-block "continueId == 4"
[00:50:21.316]    </control>
[00:50:21.316]    <control if="!isProduction" while="" timeout="0" info="">
[00:50:21.316]      // if-block "!isProduction"
[00:50:21.316]        // =>  FALSE
[00:50:21.316]      // skip if-block "!isProduction"
[00:50:21.316]    </control>
[00:50:21.316]  </sequence>
[00:50:21.316]  
[00:50:29.014]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:50:29.014]  
[00:50:29.014]  <debugvars>
[00:50:29.014]    // Pre-defined
[00:50:29.014]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:29.014]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:50:29.015]    __dp=0x00000000
[00:50:29.015]    __ap=0x00000000
[00:50:29.015]    __traceout=0x00000000      (Trace Disabled)
[00:50:29.015]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:29.015]    __FlashAddr=0x00000000
[00:50:29.015]    __FlashLen=0x00000000
[00:50:29.015]    __FlashArg=0x00000000
[00:50:29.015]    __FlashOp=0x00000000
[00:50:29.015]    __Result=0x00000000
[00:50:29.016]  </debugvars>
[00:50:29.016]  
[00:50:29.016]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:50:29.016]    <block atomic="false" info="">
[00:50:29.016]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:50:29.016]        // -> [isSWJ <= 0x00000001]
[00:50:29.016]      __var hasDormant = __protocol & 0x00020000;
[00:50:29.016]        // -> [hasDormant <= 0x00000000]
[00:50:29.016]      __var protType   = __protocol & 0x0000FFFF;
[00:50:29.016]        // -> [protType <= 0x00000002]
[00:50:29.016]    </block>
[00:50:29.017]    <control if="protType == 1" while="" timeout="0" info="">
[00:50:29.017]      // if-block "protType == 1"
[00:50:29.017]        // =>  FALSE
[00:50:29.017]      // skip if-block "protType == 1"
[00:50:29.017]    </control>
[00:50:29.017]    <control if="protType == 2" while="" timeout="0" info="">
[00:50:29.017]      // if-block "protType == 2"
[00:50:29.017]        // =>  TRUE
[00:50:29.017]      <control if="isSWJ" while="" timeout="0" info="">
[00:50:29.017]        // if-block "isSWJ"
[00:50:29.017]          // =>  TRUE
[00:50:29.018]        <control if="hasDormant" while="" timeout="0" info="">
[00:50:29.018]          // if-block "hasDormant"
[00:50:29.018]            // =>  FALSE
[00:50:29.018]          // skip if-block "hasDormant"
[00:50:29.018]        </control>
[00:50:29.018]        <control if="!hasDormant" while="" timeout="0" info="">
[00:50:29.018]          // if-block "!hasDormant"
[00:50:29.018]            // =>  TRUE
[00:50:29.018]          <block atomic="false" info="">
[00:50:29.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:50:29.025]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:29.025]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:50:29.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:50:29.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:50:29.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:29.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:50:29.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:50:29.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:50:29.040]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:29.040]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:50:29.045]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:50:29.045]          </block>
[00:50:29.045]          // end if-block "!hasDormant"
[00:50:29.045]        </control>
[00:50:29.045]        // end if-block "isSWJ"
[00:50:29.045]      </control>
[00:50:29.045]      <control if="!isSWJ" while="" timeout="0" info="">
[00:50:29.045]        // if-block "!isSWJ"
[00:50:29.045]          // =>  FALSE
[00:50:29.045]        // skip if-block "!isSWJ"
[00:50:29.045]      </control>
[00:50:29.046]      <block atomic="false" info="">
[00:50:29.046]        ReadDP(0x0);
[00:50:29.048]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:50:29.049]      </block>
[00:50:29.049]      // end if-block "protType == 2"
[00:50:29.049]    </control>
[00:50:29.049]  </sequence>
[00:50:29.049]  
[00:50:29.056]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:50:29.056]  
[00:50:29.056]  <debugvars>
[00:50:29.056]    // Pre-defined
[00:50:29.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:29.056]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:50:29.056]    __dp=0x00000000
[00:50:29.056]    __ap=0x00000000
[00:50:29.056]    __traceout=0x00000000      (Trace Disabled)
[00:50:29.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:29.056]    __FlashAddr=0x00000000
[00:50:29.056]    __FlashLen=0x00000000
[00:50:29.056]    __FlashArg=0x00000000
[00:50:29.056]    __FlashOp=0x00000000
[00:50:29.057]    __Result=0x00000000
[00:50:29.057]  </debugvars>
[00:50:29.057]  
[00:50:29.057]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:50:29.057]    <block atomic="false" info="">
[00:50:29.057]      __var SW_DP_ABORT       = 0x0;
[00:50:29.057]        // -> [SW_DP_ABORT <= 0x00000000]
[00:50:29.057]      __var DP_CTRL_STAT      = 0x4;
[00:50:29.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:50:29.058]      __var DP_SELECT         = 0x8;
[00:50:29.058]        // -> [DP_SELECT <= 0x00000008]
[00:50:29.058]      __var powered_down      = 0;
[00:50:29.058]        // -> [powered_down <= 0x00000000]
[00:50:29.058]      WriteDP(DP_SELECT, 0x00000000);
[00:50:29.064]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:50:29.064]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:50:29.067]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:50:29.067]        // -> [powered_down <= 0x00000001]
[00:50:29.067]    </block>
[00:50:29.067]    <control if="powered_down" while="" timeout="0" info="">
[00:50:29.067]      // if-block "powered_down"
[00:50:29.067]        // =>  TRUE
[00:50:29.067]      <block atomic="false" info="">
[00:50:29.067]        Message(0, "Debug/System power-up request sent");
[00:50:29.069]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:50:29.073]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:50:29.075]      </block>
[00:50:29.075]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:50:29.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:50:29.078]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:50:29.078]        // while-condition  =>  FALSE
[00:50:29.078]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:50:29.078]      </control>
[00:50:29.078]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:50:29.078]        // if-block "(__protocol & 0xFFFF) == 1"
[00:50:29.079]          // =>  FALSE
[00:50:29.079]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:50:29.079]      </control>
[00:50:29.079]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:50:29.079]        // if-block "(__protocol & 0xFFFF) == 2"
[00:50:29.079]          // =>  TRUE
[00:50:29.079]        <block atomic="false" info="">
[00:50:29.079]          Message(0, "executing SWD power up");
[00:50:29.080]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:50:29.084]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:50:29.084]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:50:29.088]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:50:29.088]        </block>
[00:50:29.088]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:50:29.088]      </control>
[00:50:29.088]      // end if-block "powered_down"
[00:50:29.088]    </control>
[00:50:29.088]    <block atomic="false" info="">
[00:50:29.088]      __var DEBUG_PORT_VAL    = 0;
[00:50:29.088]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:50:29.089]      __var ACCESS_POINT_VAL  = 0;
[00:50:29.089]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:50:29.089]      __ap = 1; 
[00:50:29.089]        // -> [__ap <= 0x00000001]
[00:50:29.089]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:50:29.096]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:50:29.096]      __ap = 4;
[00:50:29.096]        // -> [__ap <= 0x00000004]
[00:50:29.096]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:29.111]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:50:29.111]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:50:29.111]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:29.114]    </block>
[00:50:29.114]    <block atomic="false" info="">
[00:50:29.114]      __var nReset = 0x80;
[00:50:29.114]        // -> [nReset <= 0x00000080]
[00:50:29.114]      __var canReadPins = 0;
[00:50:29.114]        // -> [canReadPins <= 0x00000000]
[00:50:29.114]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:50:29.122]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:50:29.122]        // -> [canReadPins <= 0x00000001]
[00:50:29.122]    </block>
[00:50:29.122]    <control if="" while="1" timeout="200" info="">
[00:50:29.122]      // while "1"  (timeout="200")
[00:50:29.122]      // while-condition  =>  TRUE
[00:50:29.122]      // while "1"  (timeout="200")
[00:50:29.123]      // while-condition  =>  TRUE
[00:50:29.123]      // while "1"  (timeout="200")
[00:50:29.123]      // while-condition  =>  TRUE
[00:50:29.123]      // while "1"  (timeout="200")
[00:50:29.123]      // while-condition  =>  TRUE
[00:50:29.123]      // while "1"  (timeout="200")
[00:50:29.123]      // while-condition  =>  TRUE
[00:50:29.123]      // while "1"  (timeout="200")
[00:50:29.123]      // while-condition  =>  TRUE
[00:50:29.123]      // while "1"  (timeout="200")
[00:50:29.124]      // while-condition  =>  TRUE
[00:50:29.124]      // while "1"  (timeout="200")
[00:50:29.124]      // while-condition  =>  TRUE
[00:50:29.124]      // while "1"  (timeout="200")
[00:50:29.124]      // while-condition  =>  TRUE
[00:50:29.124]      // while "1"  (timeout="200")
[00:50:29.125]      // while-condition  =>  TRUE
[00:50:29.125]      // while "1"  (timeout="200")
[00:50:29.125]      // while  =>  TIMEOUT
[00:50:29.125]      // end while "1"
[00:50:29.125]    </control>
[00:50:29.125]    <control if="canReadPins" while="" timeout="0" info="">
[00:50:29.125]      // if-block "canReadPins"
[00:50:29.125]        // =>  TRUE
[00:50:29.126]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:50:29.126]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:50:29.129]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:50:29.129]        // while-condition  =>  FALSE
[00:50:29.130]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:50:29.130]      </control>
[00:50:29.130]      // end if-block "canReadPins"
[00:50:29.130]    </control>
[00:50:29.130]    <control if="!canReadPins" while="" timeout="0" info="">
[00:50:29.130]      // if-block "!canReadPins"
[00:50:29.130]        // =>  FALSE
[00:50:29.130]      // skip if-block "!canReadPins"
[00:50:29.130]    </control>
[00:50:29.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:50:29.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:29.131]        // =>  TRUE
[00:50:29.131]      <block atomic="false" info="">
[00:50:29.131]        WriteAP(0x00, 0x190008);
[00:50:29.137]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:29.137]        WriteAP(0xF0, 0x01);
[00:50:29.145]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:29.145]      </block>
[00:50:29.145]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:29.145]    </control>
[00:50:29.145]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:50:29.145]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:29.145]        // =>  FALSE
[00:50:29.145]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:29.145]    </control>
[00:50:29.145]    <block atomic="false" info="">
[00:50:29.145]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:29.152]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:50:29.152]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:50:29.152]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:29.154]      __ap = 0; //lets make sure we reset the access point selection
[00:50:29.154]        // -> [__ap <= 0x00000000]
[00:50:29.154]    </block>
[00:50:29.154]  </sequence>
[00:50:29.154]  
[00:50:29.212]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:50:29.212]  
[00:50:29.212]  <debugvars>
[00:50:29.212]    // Pre-defined
[00:50:29.212]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:29.212]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:50:29.212]    __dp=0x00000000
[00:50:29.212]    __ap=0x00000000
[00:50:29.212]    __traceout=0x00000000      (Trace Disabled)
[00:50:29.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:29.214]    __FlashAddr=0x00000000
[00:50:29.214]    __FlashLen=0x00000000
[00:50:29.214]    __FlashArg=0x00000000
[00:50:29.214]    __FlashOp=0x00000000
[00:50:29.214]    __Result=0x00000000
[00:50:29.214]  </debugvars>
[00:50:29.215]  
[00:50:29.215]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:50:29.215]    <block atomic="false" info="">
[00:50:29.215]      __var deviceID = 0;
[00:50:29.215]        // -> [deviceID <= 0x00000000]
[00:50:29.216]      __var version = 0;
[00:50:29.216]        // -> [version <= 0x00000000]
[00:50:29.216]      __var partNum = 0;
[00:50:29.216]        // -> [partNum <= 0x00000000]
[00:50:29.216]      __var manuf = 0;
[00:50:29.216]        // -> [manuf <= 0x00000000]
[00:50:29.216]      __var isMSPM0G1X0X_G3X0X = 0;
[00:50:29.216]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:50:29.216]      __var isProduction = 0;
[00:50:29.216]        // -> [isProduction <= 0x00000000]
[00:50:29.216]      __var continueId = 0;
[00:50:29.216]        // -> [continueId <= 0x00000000]
[00:50:29.217]      deviceID =   Read32(0x41C40004);
[00:50:29.227]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:50:29.227]        // -> [deviceID <= 0x2BB8802F]
[00:50:29.227]      version = deviceID >> 28;
[00:50:29.227]        // -> [version <= 0x00000002]
[00:50:29.227]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:50:29.227]        // -> [partNum <= 0x0000BB88]
[00:50:29.227]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:50:29.227]        // -> [manuf <= 0x00000017]
[00:50:29.227]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:50:29.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:50:29.229]      isProduction = (version > 0);
[00:50:29.229]        // -> [isProduction <= 0x00000001]
[00:50:29.229]    </block>
[00:50:29.229]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:50:29.229]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:50:29.229]        // =>  FALSE
[00:50:29.229]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:50:29.229]    </control>
[00:50:29.229]    <control if="continueId == 4" while="" timeout="0" info="">
[00:50:29.229]      // if-block "continueId == 4"
[00:50:29.229]        // =>  FALSE
[00:50:29.230]      // skip if-block "continueId == 4"
[00:50:29.230]    </control>
[00:50:29.231]    <control if="!isProduction" while="" timeout="0" info="">
[00:50:29.231]      // if-block "!isProduction"
[00:50:29.231]        // =>  FALSE
[00:50:29.231]      // skip if-block "!isProduction"
[00:50:29.231]    </control>
[00:50:29.231]  </sequence>
[00:50:29.231]  
[00:55:05.271]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:55:05.271]  
[00:55:05.280]  <debugvars>
[00:55:05.280]    // Pre-defined
[00:55:05.280]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:05.280]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:05.280]    __dp=0x00000000
[00:55:05.280]    __ap=0x00000000
[00:55:05.280]    __traceout=0x00000000      (Trace Disabled)
[00:55:05.280]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:05.280]    __FlashAddr=0x00000000
[00:55:05.280]    __FlashLen=0x00000000
[00:55:05.280]    __FlashArg=0x00000000
[00:55:05.280]    __FlashOp=0x00000000
[00:55:05.280]    __Result=0x00000000
[00:55:05.281]  </debugvars>
[00:55:05.281]  
[00:55:05.281]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:55:05.281]    <block atomic="false" info="">
[00:55:05.281]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:55:05.281]        // -> [isSWJ <= 0x00000001]
[00:55:05.281]      __var hasDormant = __protocol & 0x00020000;
[00:55:05.281]        // -> [hasDormant <= 0x00000000]
[00:55:05.281]      __var protType   = __protocol & 0x0000FFFF;
[00:55:05.281]        // -> [protType <= 0x00000002]
[00:55:05.282]    </block>
[00:55:05.282]    <control if="protType == 1" while="" timeout="0" info="">
[00:55:05.282]      // if-block "protType == 1"
[00:55:05.282]        // =>  FALSE
[00:55:05.282]      // skip if-block "protType == 1"
[00:55:05.282]    </control>
[00:55:05.282]    <control if="protType == 2" while="" timeout="0" info="">
[00:55:05.282]      // if-block "protType == 2"
[00:55:05.283]        // =>  TRUE
[00:55:05.283]      <control if="isSWJ" while="" timeout="0" info="">
[00:55:05.283]        // if-block "isSWJ"
[00:55:05.283]          // =>  TRUE
[00:55:05.283]        <control if="hasDormant" while="" timeout="0" info="">
[00:55:05.283]          // if-block "hasDormant"
[00:55:05.283]            // =>  FALSE
[00:55:05.283]          // skip if-block "hasDormant"
[00:55:05.283]        </control>
[00:55:05.283]        <control if="!hasDormant" while="" timeout="0" info="">
[00:55:05.283]          // if-block "!hasDormant"
[00:55:05.283]            // =>  TRUE
[00:55:05.283]          <block atomic="false" info="">
[00:55:05.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:55:05.288]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:05.288]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:55:05.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:55:05.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:55:05.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:05.294]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:55:05.296]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:55:05.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:55:05.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:05.306]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:55:05.309]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:55:05.309]          </block>
[00:55:05.310]          // end if-block "!hasDormant"
[00:55:05.310]        </control>
[00:55:05.310]        // end if-block "isSWJ"
[00:55:05.310]      </control>
[00:55:05.310]      <control if="!isSWJ" while="" timeout="0" info="">
[00:55:05.310]        // if-block "!isSWJ"
[00:55:05.310]          // =>  FALSE
[00:55:05.310]        // skip if-block "!isSWJ"
[00:55:05.311]      </control>
[00:55:05.311]      <block atomic="false" info="">
[00:55:05.311]        ReadDP(0x0);
[00:55:05.317]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:55:05.317]      </block>
[00:55:05.317]      // end if-block "protType == 2"
[00:55:05.318]    </control>
[00:55:05.318]  </sequence>
[00:55:05.318]  
[00:55:05.329]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:55:05.329]  
[00:55:05.329]  <debugvars>
[00:55:05.329]    // Pre-defined
[00:55:05.329]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:05.329]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:05.330]    __dp=0x00000000
[00:55:05.330]    __ap=0x00000000
[00:55:05.330]    __traceout=0x00000000      (Trace Disabled)
[00:55:05.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:05.330]    __FlashAddr=0x00000000
[00:55:05.330]    __FlashLen=0x00000000
[00:55:05.330]    __FlashArg=0x00000000
[00:55:05.330]    __FlashOp=0x00000000
[00:55:05.330]    __Result=0x00000000
[00:55:05.330]  </debugvars>
[00:55:05.330]  
[00:55:05.330]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:55:05.330]    <block atomic="false" info="">
[00:55:05.331]      __var SW_DP_ABORT       = 0x0;
[00:55:05.331]        // -> [SW_DP_ABORT <= 0x00000000]
[00:55:05.331]      __var DP_CTRL_STAT      = 0x4;
[00:55:05.331]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:55:05.331]      __var DP_SELECT         = 0x8;
[00:55:05.331]        // -> [DP_SELECT <= 0x00000008]
[00:55:05.331]      __var powered_down      = 0;
[00:55:05.331]        // -> [powered_down <= 0x00000000]
[00:55:05.331]      WriteDP(DP_SELECT, 0x00000000);
[00:55:05.334]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:55:05.334]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:55:05.337]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:55:05.337]        // -> [powered_down <= 0x00000001]
[00:55:05.337]    </block>
[00:55:05.338]    <control if="powered_down" while="" timeout="0" info="">
[00:55:05.338]      // if-block "powered_down"
[00:55:05.338]        // =>  TRUE
[00:55:05.338]      <block atomic="false" info="">
[00:55:05.338]        Message(0, "Debug/System power-up request sent");
[00:55:05.340]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:55:05.343]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:55:05.343]      </block>
[00:55:05.343]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:55:05.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:55:05.354]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:55:05.354]        // while-condition  =>  FALSE
[00:55:05.354]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:55:05.354]      </control>
[00:55:05.354]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:55:05.355]        // if-block "(__protocol & 0xFFFF) == 1"
[00:55:05.356]          // =>  FALSE
[00:55:05.356]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:55:05.356]      </control>
[00:55:05.356]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:55:05.356]        // if-block "(__protocol & 0xFFFF) == 2"
[00:55:05.356]          // =>  TRUE
[00:55:05.356]        <block atomic="false" info="">
[00:55:05.356]          Message(0, "executing SWD power up");
[00:55:05.358]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:55:05.366]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:55:05.366]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:55:05.368]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:55:05.368]        </block>
[00:55:05.368]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:55:05.368]      </control>
[00:55:05.368]      // end if-block "powered_down"
[00:55:05.368]    </control>
[00:55:05.368]    <block atomic="false" info="">
[00:55:05.370]      __var DEBUG_PORT_VAL    = 0;
[00:55:05.370]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:55:05.370]      __var ACCESS_POINT_VAL  = 0;
[00:55:05.370]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:55:05.370]      __ap = 1; 
[00:55:05.370]        // -> [__ap <= 0x00000001]
[00:55:05.370]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:55:05.384]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:55:05.384]      __ap = 4;
[00:55:05.384]        // -> [__ap <= 0x00000004]
[00:55:05.384]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:05.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:55:05.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:55:05.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:05.394]    </block>
[00:55:05.394]    <block atomic="false" info="">
[00:55:05.394]      __var nReset = 0x80;
[00:55:05.394]        // -> [nReset <= 0x00000080]
[00:55:05.394]      __var canReadPins = 0;
[00:55:05.394]        // -> [canReadPins <= 0x00000000]
[00:55:05.394]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:55:05.397]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:55:05.397]        // -> [canReadPins <= 0x00000001]
[00:55:05.397]    </block>
[00:55:05.397]    <control if="" while="1" timeout="200" info="">
[00:55:05.397]      // while "1"  (timeout="200")
[00:55:05.397]      // while-condition  =>  TRUE
[00:55:05.397]      // while "1"  (timeout="200")
[00:55:05.398]      // while-condition  =>  TRUE
[00:55:05.398]      // while "1"  (timeout="200")
[00:55:05.398]      // while-condition  =>  TRUE
[00:55:05.398]      // while "1"  (timeout="200")
[00:55:05.398]      // while-condition  =>  TRUE
[00:55:05.398]      // while "1"  (timeout="200")
[00:55:05.398]      // while-condition  =>  TRUE
[00:55:05.398]      // while "1"  (timeout="200")
[00:55:05.398]      // while-condition  =>  TRUE
[00:55:05.398]      // while "1"  (timeout="200")
[00:55:05.398]      // while-condition  =>  TRUE
[00:55:05.398]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.400]      // while-condition  =>  TRUE
[00:55:05.400]      // while "1"  (timeout="200")
[00:55:05.401]      // while-condition  =>  TRUE
[00:55:05.401]      // while "1"  (timeout="200")
[00:55:05.401]      // while-condition  =>  TRUE
[00:55:05.401]      // while "1"  (timeout="200")
[00:55:05.401]      // while-condition  =>  TRUE
[00:55:05.401]      // while "1"  (timeout="200")
[00:55:05.401]      // while-condition  =>  TRUE
[00:55:05.402]      // while "1"  (timeout="200")
[00:55:05.402]      // while-condition  =>  TRUE
[00:55:05.402]      // while "1"  (timeout="200")
[00:55:05.402]      // while-condition  =>  TRUE
[00:55:05.402]      // while "1"  (timeout="200")
[00:55:05.402]      // while-condition  =>  TRUE
[00:55:05.402]      // while "1"  (timeout="200")
[00:55:05.402]      // while-condition  =>  TRUE
[00:55:05.402]      // while "1"  (timeout="200")
[00:55:05.402]      // while-condition  =>  TRUE
[00:55:05.402]      // while "1"  (timeout="200")
[00:55:05.403]      // while-condition  =>  TRUE
[00:55:05.403]      // while "1"  (timeout="200")
[00:55:05.403]      // while-condition  =>  TRUE
[00:55:05.403]      // while "1"  (timeout="200")
[00:55:05.403]      // while-condition  =>  TRUE
[00:55:05.403]      // while "1"  (timeout="200")
[00:55:05.403]      // while-condition  =>  TRUE
[00:55:05.403]      // while "1"  (timeout="200")
[00:55:05.403]      // while-condition  =>  TRUE
[00:55:05.403]      // while "1"  (timeout="200")
[00:55:05.403]      // while-condition  =>  TRUE
[00:55:05.403]      // while "1"  (timeout="200")
[00:55:05.404]      // while-condition  =>  TRUE
[00:55:05.404]      // while "1"  (timeout="200")
[00:55:05.404]      // while-condition  =>  TRUE
[00:55:05.404]      // while "1"  (timeout="200")
[00:55:05.404]      // while-condition  =>  TRUE
[00:55:05.404]      // while "1"  (timeout="200")
[00:55:05.404]      // while-condition  =>  TRUE
[00:55:05.404]      // while "1"  (timeout="200")
[00:55:05.404]      // while-condition  =>  TRUE
[00:55:05.404]      // while "1"  (timeout="200")
[00:55:05.404]      // while-condition  =>  TRUE
[00:55:05.405]      // while "1"  (timeout="200")
[00:55:05.405]      // while-condition  =>  TRUE
[00:55:05.405]      // while "1"  (timeout="200")
[00:55:05.405]      // while-condition  =>  TRUE
[00:55:05.405]      // while "1"  (timeout="200")
[00:55:05.405]      // while-condition  =>  TRUE
[00:55:05.405]      // while "1"  (timeout="200")
[00:55:05.405]      // while-condition  =>  TRUE
[00:55:05.406]      // while "1"  (timeout="200")
[00:55:05.406]      // while  =>  TIMEOUT
[00:55:05.406]      // end while "1"
[00:55:05.406]    </control>
[00:55:05.406]    <control if="canReadPins" while="" timeout="0" info="">
[00:55:05.406]      // if-block "canReadPins"
[00:55:05.406]        // =>  TRUE
[00:55:05.406]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:55:05.406]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:55:05.410]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:55:05.410]        // while-condition  =>  FALSE
[00:55:05.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:55:05.410]      </control>
[00:55:05.410]      // end if-block "canReadPins"
[00:55:05.410]    </control>
[00:55:05.410]    <control if="!canReadPins" while="" timeout="0" info="">
[00:55:05.410]      // if-block "!canReadPins"
[00:55:05.410]        // =>  FALSE
[00:55:05.410]      // skip if-block "!canReadPins"
[00:55:05.410]    </control>
[00:55:05.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:55:05.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:05.412]        // =>  TRUE
[00:55:05.412]      <block atomic="false" info="">
[00:55:05.412]        WriteAP(0x00, 0x190008);
[00:55:05.417]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:05.417]        WriteAP(0xF0, 0x01);
[00:55:05.427]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:05.427]      </block>
[00:55:05.427]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:05.427]    </control>
[00:55:05.427]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:55:05.427]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:05.427]        // =>  FALSE
[00:55:05.427]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:05.428]    </control>
[00:55:05.428]    <block atomic="false" info="">
[00:55:05.428]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:05.440]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:55:05.440]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:55:05.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:05.444]      __ap = 0; //lets make sure we reset the access point selection
[00:55:05.444]        // -> [__ap <= 0x00000000]
[00:55:05.444]    </block>
[00:55:05.444]  </sequence>
[00:55:05.444]  
[00:55:05.488]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:55:05.488]  
[00:55:05.488]  <debugvars>
[00:55:05.488]    // Pre-defined
[00:55:05.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:05.489]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:05.489]    __dp=0x00000000
[00:55:05.489]    __ap=0x00000000
[00:55:05.489]    __traceout=0x00000000      (Trace Disabled)
[00:55:05.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:05.489]    __FlashAddr=0x00000000
[00:55:05.489]    __FlashLen=0x00000000
[00:55:05.489]    __FlashArg=0x00000000
[00:55:05.490]    __FlashOp=0x00000000
[00:55:05.490]    __Result=0x00000000
[00:55:05.490]  </debugvars>
[00:55:05.490]  
[00:55:05.490]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:55:05.490]    <block atomic="false" info="">
[00:55:05.490]      __var deviceID = 0;
[00:55:05.490]        // -> [deviceID <= 0x00000000]
[00:55:05.491]      __var version = 0;
[00:55:05.491]        // -> [version <= 0x00000000]
[00:55:05.491]      __var partNum = 0;
[00:55:05.491]        // -> [partNum <= 0x00000000]
[00:55:05.492]      __var manuf = 0;
[00:55:05.492]        // -> [manuf <= 0x00000000]
[00:55:05.492]      __var isMSPM0G1X0X_G3X0X = 0;
[00:55:05.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:55:05.492]      __var isProduction = 0;
[00:55:05.492]        // -> [isProduction <= 0x00000000]
[00:55:05.492]      __var continueId = 0;
[00:55:05.492]        // -> [continueId <= 0x00000000]
[00:55:05.492]      deviceID =   Read32(0x41C40004);
[00:55:05.501]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:55:05.501]        // -> [deviceID <= 0x2BB8802F]
[00:55:05.501]      version = deviceID >> 28;
[00:55:05.501]        // -> [version <= 0x00000002]
[00:55:05.502]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:55:05.502]        // -> [partNum <= 0x0000BB88]
[00:55:05.502]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:55:05.502]        // -> [manuf <= 0x00000017]
[00:55:05.502]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:55:05.502]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:55:05.502]      isProduction = (version > 0);
[00:55:05.502]        // -> [isProduction <= 0x00000001]
[00:55:05.502]    </block>
[00:55:05.502]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:55:05.503]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:55:05.503]        // =>  FALSE
[00:55:05.503]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:55:05.503]    </control>
[00:55:05.503]    <control if="continueId == 4" while="" timeout="0" info="">
[00:55:05.503]      // if-block "continueId == 4"
[00:55:05.503]        // =>  FALSE
[00:55:05.503]      // skip if-block "continueId == 4"
[00:55:05.503]    </control>
[00:55:05.503]    <control if="!isProduction" while="" timeout="0" info="">
[00:55:05.503]      // if-block "!isProduction"
[00:55:05.503]        // =>  FALSE
[00:55:05.505]      // skip if-block "!isProduction"
[00:55:05.505]    </control>
[00:55:05.505]  </sequence>
[00:55:05.505]  
[00:55:13.934]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:55:13.934]  
[00:55:13.935]  <debugvars>
[00:55:13.935]    // Pre-defined
[00:55:13.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:13.935]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:55:13.935]    __dp=0x00000000
[00:55:13.935]    __ap=0x00000000
[00:55:13.935]    __traceout=0x00000000      (Trace Disabled)
[00:55:13.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:13.935]    __FlashAddr=0x00000000
[00:55:13.937]    __FlashLen=0x00000000
[00:55:13.937]    __FlashArg=0x00000000
[00:55:13.937]    __FlashOp=0x00000000
[00:55:13.937]    __Result=0x00000000
[00:55:13.937]  </debugvars>
[00:55:13.937]  
[00:55:13.937]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:55:13.937]    <block atomic="false" info="">
[00:55:13.937]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:55:13.937]        // -> [isSWJ <= 0x00000001]
[00:55:13.937]      __var hasDormant = __protocol & 0x00020000;
[00:55:13.937]        // -> [hasDormant <= 0x00000000]
[00:55:13.937]      __var protType   = __protocol & 0x0000FFFF;
[00:55:13.937]        // -> [protType <= 0x00000002]
[00:55:13.937]    </block>
[00:55:13.938]    <control if="protType == 1" while="" timeout="0" info="">
[00:55:13.938]      // if-block "protType == 1"
[00:55:13.938]        // =>  FALSE
[00:55:13.938]      // skip if-block "protType == 1"
[00:55:13.938]    </control>
[00:55:13.938]    <control if="protType == 2" while="" timeout="0" info="">
[00:55:13.939]      // if-block "protType == 2"
[00:55:13.939]        // =>  TRUE
[00:55:13.939]      <control if="isSWJ" while="" timeout="0" info="">
[00:55:13.939]        // if-block "isSWJ"
[00:55:13.939]          // =>  TRUE
[00:55:13.939]        <control if="hasDormant" while="" timeout="0" info="">
[00:55:13.939]          // if-block "hasDormant"
[00:55:13.939]            // =>  FALSE
[00:55:13.939]          // skip if-block "hasDormant"
[00:55:13.939]        </control>
[00:55:13.939]        <control if="!hasDormant" while="" timeout="0" info="">
[00:55:13.940]          // if-block "!hasDormant"
[00:55:13.940]            // =>  TRUE
[00:55:13.940]          <block atomic="false" info="">
[00:55:13.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:55:13.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:13.945]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:55:13.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:55:13.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:55:13.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:13.951]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:55:13.956]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:55:13.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:55:13.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:13.961]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:55:13.969]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:55:13.969]          </block>
[00:55:13.969]          // end if-block "!hasDormant"
[00:55:13.969]        </control>
[00:55:13.969]        // end if-block "isSWJ"
[00:55:13.969]      </control>
[00:55:13.970]      <control if="!isSWJ" while="" timeout="0" info="">
[00:55:13.970]        // if-block "!isSWJ"
[00:55:13.970]          // =>  FALSE
[00:55:13.970]        // skip if-block "!isSWJ"
[00:55:13.970]      </control>
[00:55:13.970]      <block atomic="false" info="">
[00:55:13.970]        ReadDP(0x0);
[00:55:13.980]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:55:13.980]      </block>
[00:55:13.980]      // end if-block "protType == 2"
[00:55:13.980]    </control>
[00:55:13.980]  </sequence>
[00:55:13.980]  
[00:55:13.996]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:55:13.996]  
[00:55:13.996]  <debugvars>
[00:55:13.996]    // Pre-defined
[00:55:13.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:13.996]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:55:13.996]    __dp=0x00000000
[00:55:13.996]    __ap=0x00000000
[00:55:13.996]    __traceout=0x00000000      (Trace Disabled)
[00:55:13.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:13.996]    __FlashAddr=0x00000000
[00:55:13.997]    __FlashLen=0x00000000
[00:55:13.997]    __FlashArg=0x00000000
[00:55:13.997]    __FlashOp=0x00000000
[00:55:13.997]    __Result=0x00000000
[00:55:13.997]  </debugvars>
[00:55:13.997]  
[00:55:13.997]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:55:13.997]    <block atomic="false" info="">
[00:55:13.997]      __var SW_DP_ABORT       = 0x0;
[00:55:13.997]        // -> [SW_DP_ABORT <= 0x00000000]
[00:55:13.997]      __var DP_CTRL_STAT      = 0x4;
[00:55:13.998]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:55:13.998]      __var DP_SELECT         = 0x8;
[00:55:13.998]        // -> [DP_SELECT <= 0x00000008]
[00:55:13.998]      __var powered_down      = 0;
[00:55:13.998]        // -> [powered_down <= 0x00000000]
[00:55:13.998]      WriteDP(DP_SELECT, 0x00000000);
[00:55:14.005]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:55:14.005]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:55:14.010]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:55:14.011]        // -> [powered_down <= 0x00000001]
[00:55:14.011]    </block>
[00:55:14.011]    <control if="powered_down" while="" timeout="0" info="">
[00:55:14.012]      // if-block "powered_down"
[00:55:14.012]        // =>  TRUE
[00:55:14.012]      <block atomic="false" info="">
[00:55:14.012]        Message(0, "Debug/System power-up request sent");
[00:55:14.014]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:55:14.018]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:55:14.018]      </block>
[00:55:14.018]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:55:14.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:55:14.021]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:55:14.022]        // while-condition  =>  FALSE
[00:55:14.022]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:55:14.022]      </control>
[00:55:14.022]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:55:14.022]        // if-block "(__protocol & 0xFFFF) == 1"
[00:55:14.022]          // =>  FALSE
[00:55:14.022]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:55:14.022]      </control>
[00:55:14.022]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:55:14.023]        // if-block "(__protocol & 0xFFFF) == 2"
[00:55:14.023]          // =>  TRUE
[00:55:14.023]        <block atomic="false" info="">
[00:55:14.023]          Message(0, "executing SWD power up");
[00:55:14.024]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:55:14.030]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:55:14.030]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:55:14.035]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:55:14.035]        </block>
[00:55:14.035]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:55:14.035]      </control>
[00:55:14.035]      // end if-block "powered_down"
[00:55:14.035]    </control>
[00:55:14.035]    <block atomic="false" info="">
[00:55:14.035]      __var DEBUG_PORT_VAL    = 0;
[00:55:14.035]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:55:14.036]      __var ACCESS_POINT_VAL  = 0;
[00:55:14.036]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:55:14.036]      __ap = 1; 
[00:55:14.036]        // -> [__ap <= 0x00000001]
[00:55:14.036]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:55:14.048]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:55:14.048]      __ap = 4;
[00:55:14.048]        // -> [__ap <= 0x00000004]
[00:55:14.048]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:14.058]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:55:14.058]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:55:14.058]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:14.059]    </block>
[00:55:14.059]    <block atomic="false" info="">
[00:55:14.059]      __var nReset = 0x80;
[00:55:14.059]        // -> [nReset <= 0x00000080]
[00:55:14.059]      __var canReadPins = 0;
[00:55:14.060]        // -> [canReadPins <= 0x00000000]
[00:55:14.060]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:55:14.071]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:55:14.072]        // -> [canReadPins <= 0x00000001]
[00:55:14.072]    </block>
[00:55:14.072]    <control if="" while="1" timeout="200" info="">
[00:55:14.072]      // while "1"  (timeout="200")
[00:55:14.072]      // while-condition  =>  TRUE
[00:55:14.072]      // while "1"  (timeout="200")
[00:55:14.073]      // while-condition  =>  TRUE
[00:55:14.073]      // while "1"  (timeout="200")
[00:55:14.073]      // while-condition  =>  TRUE
[00:55:14.073]      // while "1"  (timeout="200")
[00:55:14.073]      // while-condition  =>  TRUE
[00:55:14.073]      // while "1"  (timeout="200")
[00:55:14.073]      // while-condition  =>  TRUE
[00:55:14.073]      // while "1"  (timeout="200")
[00:55:14.073]      // while-condition  =>  TRUE
[00:55:14.073]      // while "1"  (timeout="200")
[00:55:14.074]      // while-condition  =>  TRUE
[00:55:14.074]      // while "1"  (timeout="200")
[00:55:14.074]      // while-condition  =>  TRUE
[00:55:14.074]      // while "1"  (timeout="200")
[00:55:14.074]      // while-condition  =>  TRUE
[00:55:14.074]      // while "1"  (timeout="200")
[00:55:14.074]      // while-condition  =>  TRUE
[00:55:14.074]      // while "1"  (timeout="200")
[00:55:14.074]      // while-condition  =>  TRUE
[00:55:14.074]      // while "1"  (timeout="200")
[00:55:14.075]      // while-condition  =>  TRUE
[00:55:14.075]      // while "1"  (timeout="200")
[00:55:14.075]      // while-condition  =>  TRUE
[00:55:14.075]      // while "1"  (timeout="200")
[00:55:14.075]      // while-condition  =>  TRUE
[00:55:14.075]      // while "1"  (timeout="200")
[00:55:14.075]      // while-condition  =>  TRUE
[00:55:14.075]      // while "1"  (timeout="200")
[00:55:14.075]      // while-condition  =>  TRUE
[00:55:14.075]      // while "1"  (timeout="200")
[00:55:14.076]      // while-condition  =>  TRUE
[00:55:14.076]      // while "1"  (timeout="200")
[00:55:14.076]      // while-condition  =>  TRUE
[00:55:14.076]      // while "1"  (timeout="200")
[00:55:14.076]      // while-condition  =>  TRUE
[00:55:14.076]      // while "1"  (timeout="200")
[00:55:14.077]      // while-condition  =>  TRUE
[00:55:14.077]      // while "1"  (timeout="200")
[00:55:14.077]      // while-condition  =>  TRUE
[00:55:14.077]      // while "1"  (timeout="200")
[00:55:14.077]      // while-condition  =>  TRUE
[00:55:14.077]      // while "1"  (timeout="200")
[00:55:14.077]      // while-condition  =>  TRUE
[00:55:14.077]      // while "1"  (timeout="200")
[00:55:14.077]      // while-condition  =>  TRUE
[00:55:14.077]      // while "1"  (timeout="200")
[00:55:14.077]      // while-condition  =>  TRUE
[00:55:14.078]      // while "1"  (timeout="200")
[00:55:14.078]      // while  =>  TIMEOUT
[00:55:14.078]      // end while "1"
[00:55:14.078]    </control>
[00:55:14.078]    <control if="canReadPins" while="" timeout="0" info="">
[00:55:14.078]      // if-block "canReadPins"
[00:55:14.078]        // =>  TRUE
[00:55:14.078]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:55:14.078]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:55:14.086]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:55:14.086]        // while-condition  =>  FALSE
[00:55:14.086]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:55:14.086]      </control>
[00:55:14.086]      // end if-block "canReadPins"
[00:55:14.086]    </control>
[00:55:14.086]    <control if="!canReadPins" while="" timeout="0" info="">
[00:55:14.086]      // if-block "!canReadPins"
[00:55:14.086]        // =>  FALSE
[00:55:14.086]      // skip if-block "!canReadPins"
[00:55:14.086]    </control>
[00:55:14.086]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:55:14.087]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:14.087]        // =>  TRUE
[00:55:14.087]      <block atomic="false" info="">
[00:55:14.087]        WriteAP(0x00, 0x190008);
[00:55:14.097]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:14.098]        WriteAP(0xF0, 0x01);
[00:55:14.112]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:14.112]      </block>
[00:55:14.112]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:14.112]    </control>
[00:55:14.112]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:55:14.112]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:14.112]        // =>  FALSE
[00:55:14.112]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:14.113]    </control>
[00:55:14.113]    <block atomic="false" info="">
[00:55:14.113]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:14.124]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:55:14.125]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:55:14.125]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:14.126]      __ap = 0; //lets make sure we reset the access point selection
[00:55:14.126]        // -> [__ap <= 0x00000000]
[00:55:14.126]    </block>
[00:55:14.126]  </sequence>
[00:55:14.127]  
[00:55:14.187]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:55:14.187]  
[00:55:14.188]  <debugvars>
[00:55:14.188]    // Pre-defined
[00:55:14.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:14.188]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:55:14.188]    __dp=0x00000000
[00:55:14.188]    __ap=0x00000000
[00:55:14.189]    __traceout=0x00000000      (Trace Disabled)
[00:55:14.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:14.189]    __FlashAddr=0x00000000
[00:55:14.189]    __FlashLen=0x00000000
[00:55:14.189]    __FlashArg=0x00000000
[00:55:14.189]    __FlashOp=0x00000000
[00:55:14.189]    __Result=0x00000000
[00:55:14.189]  </debugvars>
[00:55:14.189]  
[00:55:14.189]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:55:14.190]    <block atomic="false" info="">
[00:55:14.190]      __var deviceID = 0;
[00:55:14.190]        // -> [deviceID <= 0x00000000]
[00:55:14.190]      __var version = 0;
[00:55:14.190]        // -> [version <= 0x00000000]
[00:55:14.190]      __var partNum = 0;
[00:55:14.190]        // -> [partNum <= 0x00000000]
[00:55:14.190]      __var manuf = 0;
[00:55:14.190]        // -> [manuf <= 0x00000000]
[00:55:14.190]      __var isMSPM0G1X0X_G3X0X = 0;
[00:55:14.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:55:14.190]      __var isProduction = 0;
[00:55:14.191]        // -> [isProduction <= 0x00000000]
[00:55:14.191]      __var continueId = 0;
[00:55:14.191]        // -> [continueId <= 0x00000000]
[00:55:14.191]      deviceID =   Read32(0x41C40004);
[00:55:14.219]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:55:14.219]        // -> [deviceID <= 0x2BB8802F]
[00:55:14.219]      version = deviceID >> 28;
[00:55:14.219]        // -> [version <= 0x00000002]
[00:55:14.219]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:55:14.220]        // -> [partNum <= 0x0000BB88]
[00:55:14.220]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:55:14.220]        // -> [manuf <= 0x00000017]
[00:55:14.220]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:55:14.220]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:55:14.220]      isProduction = (version > 0);
[00:55:14.220]        // -> [isProduction <= 0x00000001]
[00:55:14.220]    </block>
[00:55:14.220]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:55:14.220]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:55:14.221]        // =>  FALSE
[00:55:14.221]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:55:14.221]    </control>
[00:55:14.221]    <control if="continueId == 4" while="" timeout="0" info="">
[00:55:14.221]      // if-block "continueId == 4"
[00:55:14.221]        // =>  FALSE
[00:55:14.221]      // skip if-block "continueId == 4"
[00:55:14.221]    </control>
[00:55:14.221]    <control if="!isProduction" while="" timeout="0" info="">
[00:55:14.222]      // if-block "!isProduction"
[00:55:14.222]        // =>  FALSE
[00:55:14.222]      // skip if-block "!isProduction"
[00:55:14.222]    </control>
[00:55:14.222]  </sequence>
[00:55:14.222]  
[00:56:19.288]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:56:19.288]  
[00:56:19.288]  <debugvars>
[00:56:19.288]    // Pre-defined
[00:56:19.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:19.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:19.288]    __dp=0x00000000
[00:56:19.288]    __ap=0x00000000
[00:56:19.289]    __traceout=0x00000000      (Trace Disabled)
[00:56:19.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:19.289]    __FlashAddr=0x00000000
[00:56:19.289]    __FlashLen=0x00000000
[00:56:19.289]    __FlashArg=0x00000000
[00:56:19.289]    __FlashOp=0x00000000
[00:56:19.289]    __Result=0x00000000
[00:56:19.289]  </debugvars>
[00:56:19.289]  
[00:56:19.290]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:56:19.290]    <block atomic="false" info="">
[00:56:19.290]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:56:19.290]        // -> [isSWJ <= 0x00000001]
[00:56:19.290]      __var hasDormant = __protocol & 0x00020000;
[00:56:19.290]        // -> [hasDormant <= 0x00000000]
[00:56:19.290]      __var protType   = __protocol & 0x0000FFFF;
[00:56:19.290]        // -> [protType <= 0x00000002]
[00:56:19.291]    </block>
[00:56:19.291]    <control if="protType == 1" while="" timeout="0" info="">
[00:56:19.291]      // if-block "protType == 1"
[00:56:19.291]        // =>  FALSE
[00:56:19.292]      // skip if-block "protType == 1"
[00:56:19.292]    </control>
[00:56:19.292]    <control if="protType == 2" while="" timeout="0" info="">
[00:56:19.292]      // if-block "protType == 2"
[00:56:19.292]        // =>  TRUE
[00:56:19.292]      <control if="isSWJ" while="" timeout="0" info="">
[00:56:19.292]        // if-block "isSWJ"
[00:56:19.292]          // =>  TRUE
[00:56:19.292]        <control if="hasDormant" while="" timeout="0" info="">
[00:56:19.292]          // if-block "hasDormant"
[00:56:19.292]            // =>  FALSE
[00:56:19.293]          // skip if-block "hasDormant"
[00:56:19.293]        </control>
[00:56:19.293]        <control if="!hasDormant" while="" timeout="0" info="">
[00:56:19.293]          // if-block "!hasDormant"
[00:56:19.293]            // =>  TRUE
[00:56:19.293]          <block atomic="false" info="">
[00:56:19.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:56:19.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:19.297]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:56:19.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:56:19.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:56:19.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:19.316]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:56:19.319]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:56:19.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:56:19.333]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:19.333]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:56:19.339]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:56:19.339]          </block>
[00:56:19.339]          // end if-block "!hasDormant"
[00:56:19.339]        </control>
[00:56:19.339]        // end if-block "isSWJ"
[00:56:19.340]      </control>
[00:56:19.340]      <control if="!isSWJ" while="" timeout="0" info="">
[00:56:19.340]        // if-block "!isSWJ"
[00:56:19.340]          // =>  FALSE
[00:56:19.340]        // skip if-block "!isSWJ"
[00:56:19.340]      </control>
[00:56:19.340]      <block atomic="false" info="">
[00:56:19.340]        ReadDP(0x0);
[00:56:19.348]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:56:19.348]      </block>
[00:56:19.348]      // end if-block "protType == 2"
[00:56:19.348]    </control>
[00:56:19.348]  </sequence>
[00:56:19.348]  
[00:56:19.367]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:56:19.367]  
[00:56:19.367]  <debugvars>
[00:56:19.367]    // Pre-defined
[00:56:19.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:19.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:19.367]    __dp=0x00000000
[00:56:19.367]    __ap=0x00000000
[00:56:19.368]    __traceout=0x00000000      (Trace Disabled)
[00:56:19.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:19.368]    __FlashAddr=0x00000000
[00:56:19.368]    __FlashLen=0x00000000
[00:56:19.368]    __FlashArg=0x00000000
[00:56:19.368]    __FlashOp=0x00000000
[00:56:19.368]    __Result=0x00000000
[00:56:19.368]  </debugvars>
[00:56:19.368]  
[00:56:19.369]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:56:19.369]    <block atomic="false" info="">
[00:56:19.369]      __var SW_DP_ABORT       = 0x0;
[00:56:19.369]        // -> [SW_DP_ABORT <= 0x00000000]
[00:56:19.369]      __var DP_CTRL_STAT      = 0x4;
[00:56:19.369]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:56:19.369]      __var DP_SELECT         = 0x8;
[00:56:19.369]        // -> [DP_SELECT <= 0x00000008]
[00:56:19.370]      __var powered_down      = 0;
[00:56:19.370]        // -> [powered_down <= 0x00000000]
[00:56:19.370]      WriteDP(DP_SELECT, 0x00000000);
[00:56:19.375]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:56:19.375]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:56:19.380]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:56:19.380]        // -> [powered_down <= 0x00000001]
[00:56:19.380]    </block>
[00:56:19.380]    <control if="powered_down" while="" timeout="0" info="">
[00:56:19.380]      // if-block "powered_down"
[00:56:19.380]        // =>  TRUE
[00:56:19.381]      <block atomic="false" info="">
[00:56:19.381]        Message(0, "Debug/System power-up request sent");
[00:56:19.385]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:56:19.390]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:56:19.390]      </block>
[00:56:19.390]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:56:19.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:56:19.394]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:56:19.394]        // while-condition  =>  FALSE
[00:56:19.394]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:56:19.394]      </control>
[00:56:19.394]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:56:19.394]        // if-block "(__protocol & 0xFFFF) == 1"
[00:56:19.394]          // =>  FALSE
[00:56:19.394]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:56:19.396]      </control>
[00:56:19.396]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:56:19.396]        // if-block "(__protocol & 0xFFFF) == 2"
[00:56:19.396]          // =>  TRUE
[00:56:19.396]        <block atomic="false" info="">
[00:56:19.396]          Message(0, "executing SWD power up");
[00:56:19.398]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:56:19.401]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:56:19.401]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:56:19.408]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:56:19.408]        </block>
[00:56:19.408]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:56:19.408]      </control>
[00:56:19.408]      // end if-block "powered_down"
[00:56:19.408]    </control>
[00:56:19.408]    <block atomic="false" info="">
[00:56:19.408]      __var DEBUG_PORT_VAL    = 0;
[00:56:19.408]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:56:19.409]      __var ACCESS_POINT_VAL  = 0;
[00:56:19.409]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:56:19.409]      __ap = 1; 
[00:56:19.409]        // -> [__ap <= 0x00000001]
[00:56:19.409]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:56:19.419]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:56:19.419]      __ap = 4;
[00:56:19.419]        // -> [__ap <= 0x00000004]
[00:56:19.419]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:19.427]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.428]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:56:19.428]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:19.430]    </block>
[00:56:19.430]    <block atomic="false" info="">
[00:56:19.430]      __var nReset = 0x80;
[00:56:19.430]        // -> [nReset <= 0x00000080]
[00:56:19.430]      __var canReadPins = 0;
[00:56:19.430]        // -> [canReadPins <= 0x00000000]
[00:56:19.430]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:56:19.436]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:56:19.436]        // -> [canReadPins <= 0x00000001]
[00:56:19.436]    </block>
[00:56:19.437]    <control if="" while="1" timeout="200" info="">
[00:56:19.437]      // while "1"  (timeout="200")
[00:56:19.437]      // while-condition  =>  TRUE
[00:56:19.437]      // while "1"  (timeout="200")
[00:56:19.437]      // while-condition  =>  TRUE
[00:56:19.437]      // while "1"  (timeout="200")
[00:56:19.437]      // while-condition  =>  TRUE
[00:56:19.437]      // while "1"  (timeout="200")
[00:56:19.437]      // while-condition  =>  TRUE
[00:56:19.438]      // while "1"  (timeout="200")
[00:56:19.438]      // while-condition  =>  TRUE
[00:56:19.438]      // while "1"  (timeout="200")
[00:56:19.438]      // while-condition  =>  TRUE
[00:56:19.438]      // while "1"  (timeout="200")
[00:56:19.438]      // while-condition  =>  TRUE
[00:56:19.438]      // while "1"  (timeout="200")
[00:56:19.438]      // while-condition  =>  TRUE
[00:56:19.438]      // while "1"  (timeout="200")
[00:56:19.438]      // while-condition  =>  TRUE
[00:56:19.439]      // while "1"  (timeout="200")
[00:56:19.439]      // while-condition  =>  TRUE
[00:56:19.439]      // while "1"  (timeout="200")
[00:56:19.439]      // while-condition  =>  TRUE
[00:56:19.439]      // while "1"  (timeout="200")
[00:56:19.439]      // while-condition  =>  TRUE
[00:56:19.439]      // while "1"  (timeout="200")
[00:56:19.439]      // while-condition  =>  TRUE
[00:56:19.439]      // while "1"  (timeout="200")
[00:56:19.439]      // while-condition  =>  TRUE
[00:56:19.439]      // while "1"  (timeout="200")
[00:56:19.440]      // while-condition  =>  TRUE
[00:56:19.440]      // while "1"  (timeout="200")
[00:56:19.440]      // while-condition  =>  TRUE
[00:56:19.440]      // while "1"  (timeout="200")
[00:56:19.440]      // while-condition  =>  TRUE
[00:56:19.440]      // while "1"  (timeout="200")
[00:56:19.440]      // while-condition  =>  TRUE
[00:56:19.440]      // while "1"  (timeout="200")
[00:56:19.440]      // while-condition  =>  TRUE
[00:56:19.440]      // while "1"  (timeout="200")
[00:56:19.440]      // while-condition  =>  TRUE
[00:56:19.440]      // while "1"  (timeout="200")
[00:56:19.441]      // while-condition  =>  TRUE
[00:56:19.441]      // while "1"  (timeout="200")
[00:56:19.441]      // while-condition  =>  TRUE
[00:56:19.441]      // while "1"  (timeout="200")
[00:56:19.441]      // while-condition  =>  TRUE
[00:56:19.441]      // while "1"  (timeout="200")
[00:56:19.441]      // while-condition  =>  TRUE
[00:56:19.441]      // while "1"  (timeout="200")
[00:56:19.441]      // while-condition  =>  TRUE
[00:56:19.441]      // while "1"  (timeout="200")
[00:56:19.441]      // while-condition  =>  TRUE
[00:56:19.441]      // while "1"  (timeout="200")
[00:56:19.442]      // while-condition  =>  TRUE
[00:56:19.442]      // while "1"  (timeout="200")
[00:56:19.442]      // while-condition  =>  TRUE
[00:56:19.442]      // while "1"  (timeout="200")
[00:56:19.442]      // while-condition  =>  TRUE
[00:56:19.442]      // while "1"  (timeout="200")
[00:56:19.442]      // while-condition  =>  TRUE
[00:56:19.442]      // while "1"  (timeout="200")
[00:56:19.442]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.443]      // while "1"  (timeout="200")
[00:56:19.443]      // while-condition  =>  TRUE
[00:56:19.445]      // while "1"  (timeout="200")
[00:56:19.445]      // while-condition  =>  TRUE
[00:56:19.445]      // while "1"  (timeout="200")
[00:56:19.445]      // while-condition  =>  TRUE
[00:56:19.445]      // while "1"  (timeout="200")
[00:56:19.445]      // while-condition  =>  TRUE
[00:56:19.445]      // while "1"  (timeout="200")
[00:56:19.445]      // while-condition  =>  TRUE
[00:56:19.445]      // while "1"  (timeout="200")
[00:56:19.445]      // while-condition  =>  TRUE
[00:56:19.445]      // while "1"  (timeout="200")
[00:56:19.446]      // while-condition  =>  TRUE
[00:56:19.446]      // while "1"  (timeout="200")
[00:56:19.446]      // while-condition  =>  TRUE
[00:56:19.446]      // while "1"  (timeout="200")
[00:56:19.446]      // while-condition  =>  TRUE
[00:56:19.446]      // while "1"  (timeout="200")
[00:56:19.446]      // while-condition  =>  TRUE
[00:56:19.446]      // while "1"  (timeout="200")
[00:56:19.446]      // while-condition  =>  TRUE
[00:56:19.446]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.447]      // while "1"  (timeout="200")
[00:56:19.447]      // while-condition  =>  TRUE
[00:56:19.450]      // while "1"  (timeout="200")
[00:56:19.450]      // while-condition  =>  TRUE
[00:56:19.450]      // while "1"  (timeout="200")
[00:56:19.450]      // while-condition  =>  TRUE
[00:56:19.450]      // while "1"  (timeout="200")
[00:56:19.450]      // while-condition  =>  TRUE
[00:56:19.450]      // while "1"  (timeout="200")
[00:56:19.450]      // while-condition  =>  TRUE
[00:56:19.450]      // while "1"  (timeout="200")
[00:56:19.451]      // while-condition  =>  TRUE
[00:56:19.451]      // while "1"  (timeout="200")
[00:56:19.451]      // while-condition  =>  TRUE
[00:56:19.451]      // while "1"  (timeout="200")
[00:56:19.451]      // while-condition  =>  TRUE
[00:56:19.451]      // while "1"  (timeout="200")
[00:56:19.451]      // while-condition  =>  TRUE
[00:56:19.451]      // while "1"  (timeout="200")
[00:56:19.451]      // while-condition  =>  TRUE
[00:56:19.451]      // while "1"  (timeout="200")
[00:56:19.452]      // while-condition  =>  TRUE
[00:56:19.452]      // while "1"  (timeout="200")
[00:56:19.452]      // while-condition  =>  TRUE
[00:56:19.452]      // while "1"  (timeout="200")
[00:56:19.452]      // while-condition  =>  TRUE
[00:56:19.452]      // while "1"  (timeout="200")
[00:56:19.452]      // while-condition  =>  TRUE
[00:56:19.452]      // while "1"  (timeout="200")
[00:56:19.452]      // while-condition  =>  TRUE
[00:56:19.452]      // while "1"  (timeout="200")
[00:56:19.452]      // while-condition  =>  TRUE
[00:56:19.452]      // while "1"  (timeout="200")
[00:56:19.453]      // while-condition  =>  TRUE
[00:56:19.453]      // while "1"  (timeout="200")
[00:56:19.453]      // while  =>  TIMEOUT
[00:56:19.453]      // end while "1"
[00:56:19.453]    </control>
[00:56:19.453]    <control if="canReadPins" while="" timeout="0" info="">
[00:56:19.453]      // if-block "canReadPins"
[00:56:19.453]        // =>  TRUE
[00:56:19.453]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:56:19.453]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:56:19.458]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:56:19.458]        // while-condition  =>  FALSE
[00:56:19.458]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:56:19.458]      </control>
[00:56:19.459]      // end if-block "canReadPins"
[00:56:19.459]    </control>
[00:56:19.459]    <control if="!canReadPins" while="" timeout="0" info="">
[00:56:19.459]      // if-block "!canReadPins"
[00:56:19.459]        // =>  FALSE
[00:56:19.459]      // skip if-block "!canReadPins"
[00:56:19.459]    </control>
[00:56:19.459]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:56:19.459]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:19.459]        // =>  TRUE
[00:56:19.460]      <block atomic="false" info="">
[00:56:19.460]        WriteAP(0x00, 0x190008);
[00:56:19.467]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.467]        WriteAP(0xF0, 0x01);
[00:56:19.482]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.482]      </block>
[00:56:19.482]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:19.482]    </control>
[00:56:19.482]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:56:19.482]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:19.482]        // =>  FALSE
[00:56:19.482]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:19.483]    </control>
[00:56:19.483]    <block atomic="false" info="">
[00:56:19.483]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:19.504]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.505]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:56:19.505]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:19.507]      __ap = 0; //lets make sure we reset the access point selection
[00:56:19.507]        // -> [__ap <= 0x00000000]
[00:56:19.507]    </block>
[00:56:19.507]  </sequence>
[00:56:19.507]  
[00:56:19.589]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:56:19.589]  
[00:56:19.590]  <debugvars>
[00:56:19.590]    // Pre-defined
[00:56:19.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:19.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:19.590]    __dp=0x00000000
[00:56:19.590]    __ap=0x00000000
[00:56:19.590]    __traceout=0x00000000      (Trace Disabled)
[00:56:19.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:19.590]    __FlashAddr=0x00000000
[00:56:19.590]    __FlashLen=0x00000000
[00:56:19.590]    __FlashArg=0x00000000
[00:56:19.590]    __FlashOp=0x00000000
[00:56:19.591]    __Result=0x00000000
[00:56:19.591]  </debugvars>
[00:56:19.591]  
[00:56:19.591]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:56:19.591]    <block atomic="false" info="">
[00:56:19.591]      __var deviceID = 0;
[00:56:19.591]        // -> [deviceID <= 0x00000000]
[00:56:19.591]      __var version = 0;
[00:56:19.591]        // -> [version <= 0x00000000]
[00:56:19.591]      __var partNum = 0;
[00:56:19.591]        // -> [partNum <= 0x00000000]
[00:56:19.592]      __var manuf = 0;
[00:56:19.592]        // -> [manuf <= 0x00000000]
[00:56:19.593]      __var isMSPM0G1X0X_G3X0X = 0;
[00:56:19.593]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:56:19.593]      __var isProduction = 0;
[00:56:19.593]        // -> [isProduction <= 0x00000000]
[00:56:19.593]      __var continueId = 0;
[00:56:19.593]        // -> [continueId <= 0x00000000]
[00:56:19.593]      deviceID =   Read32(0x41C40004);
[00:56:19.611]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:56:19.611]        // -> [deviceID <= 0x2BB8802F]
[00:56:19.611]      version = deviceID >> 28;
[00:56:19.611]        // -> [version <= 0x00000002]
[00:56:19.611]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:56:19.611]        // -> [partNum <= 0x0000BB88]
[00:56:19.612]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:56:19.612]        // -> [manuf <= 0x00000017]
[00:56:19.612]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:56:19.612]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:56:19.612]      isProduction = (version > 0);
[00:56:19.612]        // -> [isProduction <= 0x00000001]
[00:56:19.612]    </block>
[00:56:19.612]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:56:19.612]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:56:19.612]        // =>  FALSE
[00:56:19.613]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:56:19.613]    </control>
[00:56:19.613]    <control if="continueId == 4" while="" timeout="0" info="">
[00:56:19.613]      // if-block "continueId == 4"
[00:56:19.613]        // =>  FALSE
[00:56:19.613]      // skip if-block "continueId == 4"
[00:56:19.613]    </control>
[00:56:19.613]    <control if="!isProduction" while="" timeout="0" info="">
[00:56:19.613]      // if-block "!isProduction"
[00:56:19.613]        // =>  FALSE
[00:56:19.613]      // skip if-block "!isProduction"
[00:56:19.613]    </control>
[00:56:19.614]  </sequence>
[00:56:19.615]  
[00:56:29.379]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:56:29.379]  
[00:56:29.388]  <debugvars>
[00:56:29.388]    // Pre-defined
[00:56:29.388]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:29.388]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:56:29.388]    __dp=0x00000000
[00:56:29.388]    __ap=0x00000000
[00:56:29.388]    __traceout=0x00000000      (Trace Disabled)
[00:56:29.388]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:29.388]    __FlashAddr=0x00000000
[00:56:29.388]    __FlashLen=0x00000000
[00:56:29.389]    __FlashArg=0x00000000
[00:56:29.389]    __FlashOp=0x00000000
[00:56:29.389]    __Result=0x00000000
[00:56:29.389]  </debugvars>
[00:56:29.389]  
[00:56:29.389]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:56:29.389]    <block atomic="false" info="">
[00:56:29.389]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:56:29.389]        // -> [isSWJ <= 0x00000001]
[00:56:29.389]      __var hasDormant = __protocol & 0x00020000;
[00:56:29.390]        // -> [hasDormant <= 0x00000000]
[00:56:29.390]      __var protType   = __protocol & 0x0000FFFF;
[00:56:29.390]        // -> [protType <= 0x00000002]
[00:56:29.390]    </block>
[00:56:29.390]    <control if="protType == 1" while="" timeout="0" info="">
[00:56:29.390]      // if-block "protType == 1"
[00:56:29.390]        // =>  FALSE
[00:56:29.390]      // skip if-block "protType == 1"
[00:56:29.390]    </control>
[00:56:29.390]    <control if="protType == 2" while="" timeout="0" info="">
[00:56:29.390]      // if-block "protType == 2"
[00:56:29.391]        // =>  TRUE
[00:56:29.391]      <control if="isSWJ" while="" timeout="0" info="">
[00:56:29.391]        // if-block "isSWJ"
[00:56:29.391]          // =>  TRUE
[00:56:29.391]        <control if="hasDormant" while="" timeout="0" info="">
[00:56:29.391]          // if-block "hasDormant"
[00:56:29.391]            // =>  FALSE
[00:56:29.391]          // skip if-block "hasDormant"
[00:56:29.391]        </control>
[00:56:29.391]        <control if="!hasDormant" while="" timeout="0" info="">
[00:56:29.391]          // if-block "!hasDormant"
[00:56:29.391]            // =>  TRUE
[00:56:29.392]          <block atomic="false" info="">
[00:56:29.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:56:29.398]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:29.399]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:56:29.402]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:56:29.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:56:29.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:29.405]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:56:29.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:56:29.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:56:29.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:29.425]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:56:29.433]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:56:29.433]          </block>
[00:56:29.433]          // end if-block "!hasDormant"
[00:56:29.433]        </control>
[00:56:29.433]        // end if-block "isSWJ"
[00:56:29.433]      </control>
[00:56:29.433]      <control if="!isSWJ" while="" timeout="0" info="">
[00:56:29.434]        // if-block "!isSWJ"
[00:56:29.434]          // =>  FALSE
[00:56:29.434]        // skip if-block "!isSWJ"
[00:56:29.434]      </control>
[00:56:29.434]      <block atomic="false" info="">
[00:56:29.434]        ReadDP(0x0);
[00:56:29.437]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:56:29.437]      </block>
[00:56:29.437]      // end if-block "protType == 2"
[00:56:29.437]    </control>
[00:56:29.437]  </sequence>
[00:56:29.437]  
[00:56:29.447]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:56:29.447]  
[00:56:29.447]  <debugvars>
[00:56:29.447]    // Pre-defined
[00:56:29.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:29.447]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:56:29.447]    __dp=0x00000000
[00:56:29.447]    __ap=0x00000000
[00:56:29.447]    __traceout=0x00000000      (Trace Disabled)
[00:56:29.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:29.448]    __FlashAddr=0x00000000
[00:56:29.448]    __FlashLen=0x00000000
[00:56:29.448]    __FlashArg=0x00000000
[00:56:29.448]    __FlashOp=0x00000000
[00:56:29.448]    __Result=0x00000000
[00:56:29.448]  </debugvars>
[00:56:29.449]  
[00:56:29.449]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:56:29.449]    <block atomic="false" info="">
[00:56:29.449]      __var SW_DP_ABORT       = 0x0;
[00:56:29.449]        // -> [SW_DP_ABORT <= 0x00000000]
[00:56:29.449]      __var DP_CTRL_STAT      = 0x4;
[00:56:29.450]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:56:29.450]      __var DP_SELECT         = 0x8;
[00:56:29.450]        // -> [DP_SELECT <= 0x00000008]
[00:56:29.450]      __var powered_down      = 0;
[00:56:29.450]        // -> [powered_down <= 0x00000000]
[00:56:29.450]      WriteDP(DP_SELECT, 0x00000000);
[00:56:29.456]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:56:29.456]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:56:29.460]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:56:29.460]        // -> [powered_down <= 0x00000001]
[00:56:29.460]    </block>
[00:56:29.460]    <control if="powered_down" while="" timeout="0" info="">
[00:56:29.460]      // if-block "powered_down"
[00:56:29.460]        // =>  TRUE
[00:56:29.460]      <block atomic="false" info="">
[00:56:29.460]        Message(0, "Debug/System power-up request sent");
[00:56:29.462]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:56:29.464]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:56:29.464]      </block>
[00:56:29.464]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:56:29.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:56:29.467]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:56:29.467]        // while-condition  =>  FALSE
[00:56:29.467]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:56:29.467]      </control>
[00:56:29.468]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:56:29.468]        // if-block "(__protocol & 0xFFFF) == 1"
[00:56:29.468]          // =>  FALSE
[00:56:29.468]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:56:29.468]      </control>
[00:56:29.468]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:56:29.468]        // if-block "(__protocol & 0xFFFF) == 2"
[00:56:29.468]          // =>  TRUE
[00:56:29.468]        <block atomic="false" info="">
[00:56:29.468]          Message(0, "executing SWD power up");
[00:56:29.470]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:56:29.473]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:56:29.475]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:56:29.485]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:56:29.485]        </block>
[00:56:29.485]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:56:29.485]      </control>
[00:56:29.485]      // end if-block "powered_down"
[00:56:29.485]    </control>
[00:56:29.485]    <block atomic="false" info="">
[00:56:29.486]      __var DEBUG_PORT_VAL    = 0;
[00:56:29.486]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:56:29.486]      __var ACCESS_POINT_VAL  = 0;
[00:56:29.486]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:56:29.486]      __ap = 1; 
[00:56:29.486]        // -> [__ap <= 0x00000001]
[00:56:29.486]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:56:29.492]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:56:29.492]      __ap = 4;
[00:56:29.492]        // -> [__ap <= 0x00000004]
[00:56:29.492]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:29.509]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:56:29.510]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:56:29.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:29.511]    </block>
[00:56:29.511]    <block atomic="false" info="">
[00:56:29.511]      __var nReset = 0x80;
[00:56:29.512]        // -> [nReset <= 0x00000080]
[00:56:29.512]      __var canReadPins = 0;
[00:56:29.512]        // -> [canReadPins <= 0x00000000]
[00:56:29.512]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:56:29.515]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:56:29.515]        // -> [canReadPins <= 0x00000001]
[00:56:29.516]    </block>
[00:56:29.516]    <control if="" while="1" timeout="200" info="">
[00:56:29.516]      // while "1"  (timeout="200")
[00:56:29.516]      // while-condition  =>  TRUE
[00:56:29.516]      // while "1"  (timeout="200")
[00:56:29.516]      // while-condition  =>  TRUE
[00:56:29.517]      // while "1"  (timeout="200")
[00:56:29.517]      // while-condition  =>  TRUE
[00:56:29.517]      // while "1"  (timeout="200")
[00:56:29.517]      // while-condition  =>  TRUE
[00:56:29.517]      // while "1"  (timeout="200")
[00:56:29.517]      // while-condition  =>  TRUE
[00:56:29.517]      // while "1"  (timeout="200")
[00:56:29.517]      // while-condition  =>  TRUE
[00:56:29.517]      // while "1"  (timeout="200")
[00:56:29.517]      // while-condition  =>  TRUE
[00:56:29.517]      // while "1"  (timeout="200")
[00:56:29.518]      // while-condition  =>  TRUE
[00:56:29.518]      // while "1"  (timeout="200")
[00:56:29.518]      // while-condition  =>  TRUE
[00:56:29.518]      // while "1"  (timeout="200")
[00:56:29.518]      // while-condition  =>  TRUE
[00:56:29.518]      // while "1"  (timeout="200")
[00:56:29.518]      // while-condition  =>  TRUE
[00:56:29.519]      // while "1"  (timeout="200")
[00:56:29.519]      // while-condition  =>  TRUE
[00:56:29.519]      // while "1"  (timeout="200")
[00:56:29.519]      // while-condition  =>  TRUE
[00:56:29.519]      // while "1"  (timeout="200")
[00:56:29.519]      // while-condition  =>  TRUE
[00:56:29.520]      // while "1"  (timeout="200")
[00:56:29.520]      // while-condition  =>  TRUE
[00:56:29.520]      // while "1"  (timeout="200")
[00:56:29.520]      // while-condition  =>  TRUE
[00:56:29.520]      // while "1"  (timeout="200")
[00:56:29.520]      // while-condition  =>  TRUE
[00:56:29.520]      // while "1"  (timeout="200")
[00:56:29.520]      // while-condition  =>  TRUE
[00:56:29.521]      // while "1"  (timeout="200")
[00:56:29.521]      // while-condition  =>  TRUE
[00:56:29.521]      // while "1"  (timeout="200")
[00:56:29.521]      // while-condition  =>  TRUE
[00:56:29.521]      // while "1"  (timeout="200")
[00:56:29.521]      // while-condition  =>  TRUE
[00:56:29.521]      // while "1"  (timeout="200")
[00:56:29.521]      // while-condition  =>  TRUE
[00:56:29.521]      // while "1"  (timeout="200")
[00:56:29.521]      // while-condition  =>  TRUE
[00:56:29.521]      // while "1"  (timeout="200")
[00:56:29.522]      // while-condition  =>  TRUE
[00:56:29.522]      // while "1"  (timeout="200")
[00:56:29.522]      // while-condition  =>  TRUE
[00:56:29.522]      // while "1"  (timeout="200")
[00:56:29.522]      // while-condition  =>  TRUE
[00:56:29.522]      // while "1"  (timeout="200")
[00:56:29.522]      // while-condition  =>  TRUE
[00:56:29.522]      // while "1"  (timeout="200")
[00:56:29.522]      // while-condition  =>  TRUE
[00:56:29.523]      // while "1"  (timeout="200")
[00:56:29.523]      // while-condition  =>  TRUE
[00:56:29.523]      // while "1"  (timeout="200")
[00:56:29.523]      // while-condition  =>  TRUE
[00:56:29.523]      // while "1"  (timeout="200")
[00:56:29.523]      // while-condition  =>  TRUE
[00:56:29.523]      // while "1"  (timeout="200")
[00:56:29.523]      // while-condition  =>  TRUE
[00:56:29.523]      // while "1"  (timeout="200")
[00:56:29.523]      // while-condition  =>  TRUE
[00:56:29.523]      // while "1"  (timeout="200")
[00:56:29.523]      // while-condition  =>  TRUE
[00:56:29.524]      // while "1"  (timeout="200")
[00:56:29.524]      // while-condition  =>  TRUE
[00:56:29.524]      // while "1"  (timeout="200")
[00:56:29.524]      // while-condition  =>  TRUE
[00:56:29.524]      // while "1"  (timeout="200")
[00:56:29.524]      // while-condition  =>  TRUE
[00:56:29.524]      // while "1"  (timeout="200")
[00:56:29.524]      // while-condition  =>  TRUE
[00:56:29.524]      // while "1"  (timeout="200")
[00:56:29.524]      // while-condition  =>  TRUE
[00:56:29.524]      // while "1"  (timeout="200")
[00:56:29.525]      // while-condition  =>  TRUE
[00:56:29.525]      // while "1"  (timeout="200")
[00:56:29.525]      // while-condition  =>  TRUE
[00:56:29.525]      // while "1"  (timeout="200")
[00:56:29.525]      // while-condition  =>  TRUE
[00:56:29.525]      // while "1"  (timeout="200")
[00:56:29.525]      // while-condition  =>  TRUE
[00:56:29.525]      // while "1"  (timeout="200")
[00:56:29.525]      // while-condition  =>  TRUE
[00:56:29.525]      // while "1"  (timeout="200")
[00:56:29.525]      // while-condition  =>  TRUE
[00:56:29.527]      // while "1"  (timeout="200")
[00:56:29.527]      // while-condition  =>  TRUE
[00:56:29.527]      // while "1"  (timeout="200")
[00:56:29.527]      // while-condition  =>  TRUE
[00:56:29.527]      // while "1"  (timeout="200")
[00:56:29.527]      // while-condition  =>  TRUE
[00:56:29.527]      // while "1"  (timeout="200")
[00:56:29.527]      // while-condition  =>  TRUE
[00:56:29.527]      // while "1"  (timeout="200")
[00:56:29.527]      // while-condition  =>  TRUE
[00:56:29.528]      // while "1"  (timeout="200")
[00:56:29.528]      // while-condition  =>  TRUE
[00:56:29.528]      // while "1"  (timeout="200")
[00:56:29.528]      // while-condition  =>  TRUE
[00:56:29.528]      // while "1"  (timeout="200")
[00:56:29.528]      // while-condition  =>  TRUE
[00:56:29.528]      // while "1"  (timeout="200")
[00:56:29.528]      // while-condition  =>  TRUE
[00:56:29.528]      // while "1"  (timeout="200")
[00:56:29.528]      // while-condition  =>  TRUE
[00:56:29.528]      // while "1"  (timeout="200")
[00:56:29.529]      // while-condition  =>  TRUE
[00:56:29.529]      // while "1"  (timeout="200")
[00:56:29.529]      // while-condition  =>  TRUE
[00:56:29.529]      // while "1"  (timeout="200")
[00:56:29.529]      // while-condition  =>  TRUE
[00:56:29.529]      // while "1"  (timeout="200")
[00:56:29.529]      // while-condition  =>  TRUE
[00:56:29.529]      // while "1"  (timeout="200")
[00:56:29.529]      // while-condition  =>  TRUE
[00:56:29.529]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.530]      // while-condition  =>  TRUE
[00:56:29.530]      // while "1"  (timeout="200")
[00:56:29.531]      // while-condition  =>  TRUE
[00:56:29.531]      // while "1"  (timeout="200")
[00:56:29.531]      // while  =>  TIMEOUT
[00:56:29.531]      // end while "1"
[00:56:29.531]    </control>
[00:56:29.531]    <control if="canReadPins" while="" timeout="0" info="">
[00:56:29.531]      // if-block "canReadPins"
[00:56:29.531]        // =>  TRUE
[00:56:29.531]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:56:29.531]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:56:29.534]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:56:29.534]        // while-condition  =>  FALSE
[00:56:29.534]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:56:29.534]      </control>
[00:56:29.536]      // end if-block "canReadPins"
[00:56:29.536]    </control>
[00:56:29.536]    <control if="!canReadPins" while="" timeout="0" info="">
[00:56:29.536]      // if-block "!canReadPins"
[00:56:29.536]        // =>  FALSE
[00:56:29.536]      // skip if-block "!canReadPins"
[00:56:29.536]    </control>
[00:56:29.536]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:56:29.536]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:29.536]        // =>  TRUE
[00:56:29.536]      <block atomic="false" info="">
[00:56:29.536]        WriteAP(0x00, 0x190008);
[00:56:29.539]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:29.539]        WriteAP(0xF0, 0x01);
[00:56:29.548]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:29.548]      </block>
[00:56:29.548]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:29.548]    </control>
[00:56:29.548]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:56:29.548]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:29.549]        // =>  FALSE
[00:56:29.549]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:29.549]    </control>
[00:56:29.549]    <block atomic="false" info="">
[00:56:29.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:29.563]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:56:29.563]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:56:29.563]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:29.565]      __ap = 0; //lets make sure we reset the access point selection
[00:56:29.565]        // -> [__ap <= 0x00000000]
[00:56:29.565]    </block>
[00:56:29.565]  </sequence>
[00:56:29.565]  
[00:56:29.631]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:56:29.631]  
[00:56:29.632]  <debugvars>
[00:56:29.632]    // Pre-defined
[00:56:29.632]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:29.632]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:56:29.633]    __dp=0x00000000
[00:56:29.633]    __ap=0x00000000
[00:56:29.633]    __traceout=0x00000000      (Trace Disabled)
[00:56:29.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:29.633]    __FlashAddr=0x00000000
[00:56:29.633]    __FlashLen=0x00000000
[00:56:29.633]    __FlashArg=0x00000000
[00:56:29.633]    __FlashOp=0x00000000
[00:56:29.633]    __Result=0x00000000
[00:56:29.633]  </debugvars>
[00:56:29.633]  
[00:56:29.633]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:56:29.633]    <block atomic="false" info="">
[00:56:29.633]      __var deviceID = 0;
[00:56:29.634]        // -> [deviceID <= 0x00000000]
[00:56:29.634]      __var version = 0;
[00:56:29.634]        // -> [version <= 0x00000000]
[00:56:29.634]      __var partNum = 0;
[00:56:29.634]        // -> [partNum <= 0x00000000]
[00:56:29.634]      __var manuf = 0;
[00:56:29.634]        // -> [manuf <= 0x00000000]
[00:56:29.634]      __var isMSPM0G1X0X_G3X0X = 0;
[00:56:29.634]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:56:29.634]      __var isProduction = 0;
[00:56:29.634]        // -> [isProduction <= 0x00000000]
[00:56:29.635]      __var continueId = 0;
[00:56:29.635]        // -> [continueId <= 0x00000000]
[00:56:29.635]      deviceID =   Read32(0x41C40004);
[00:56:29.652]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:56:29.652]        // -> [deviceID <= 0x2BB8802F]
[00:56:29.652]      version = deviceID >> 28;
[00:56:29.652]        // -> [version <= 0x00000002]
[00:56:29.652]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:56:29.653]        // -> [partNum <= 0x0000BB88]
[00:56:29.653]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:56:29.654]        // -> [manuf <= 0x00000017]
[00:56:29.654]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:56:29.654]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:56:29.654]      isProduction = (version > 0);
[00:56:29.654]        // -> [isProduction <= 0x00000001]
[00:56:29.654]    </block>
[00:56:29.654]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:56:29.654]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:56:29.654]        // =>  FALSE
[00:56:29.654]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:56:29.654]    </control>
[00:56:29.654]    <control if="continueId == 4" while="" timeout="0" info="">
[00:56:29.654]      // if-block "continueId == 4"
[00:56:29.654]        // =>  FALSE
[00:56:29.654]      // skip if-block "continueId == 4"
[00:56:29.654]    </control>
[00:56:29.655]    <control if="!isProduction" while="" timeout="0" info="">
[00:56:29.655]      // if-block "!isProduction"
[00:56:29.655]        // =>  FALSE
[00:56:29.655]      // skip if-block "!isProduction"
[00:56:29.655]    </control>
[00:56:29.655]  </sequence>
[00:56:29.655]  
[00:58:24.345]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:58:24.345]  
[00:58:24.345]  <debugvars>
[00:58:24.345]    // Pre-defined
[00:58:24.345]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:24.347]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:24.347]    __dp=0x00000000
[00:58:24.347]    __ap=0x00000000
[00:58:24.347]    __traceout=0x00000000      (Trace Disabled)
[00:58:24.347]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:24.347]    __FlashAddr=0x00000000
[00:58:24.347]    __FlashLen=0x00000000
[00:58:24.347]    __FlashArg=0x00000000
[00:58:24.347]    __FlashOp=0x00000000
[00:58:24.347]    __Result=0x00000000
[00:58:24.347]  </debugvars>
[00:58:24.347]  
[00:58:24.347]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:58:24.348]    <block atomic="false" info="">
[00:58:24.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:58:24.348]        // -> [isSWJ <= 0x00000001]
[00:58:24.348]      __var hasDormant = __protocol & 0x00020000;
[00:58:24.348]        // -> [hasDormant <= 0x00000000]
[00:58:24.348]      __var protType   = __protocol & 0x0000FFFF;
[00:58:24.349]        // -> [protType <= 0x00000002]
[00:58:24.349]    </block>
[00:58:24.349]    <control if="protType == 1" while="" timeout="0" info="">
[00:58:24.349]      // if-block "protType == 1"
[00:58:24.349]        // =>  FALSE
[00:58:24.349]      // skip if-block "protType == 1"
[00:58:24.349]    </control>
[00:58:24.349]    <control if="protType == 2" while="" timeout="0" info="">
[00:58:24.349]      // if-block "protType == 2"
[00:58:24.349]        // =>  TRUE
[00:58:24.350]      <control if="isSWJ" while="" timeout="0" info="">
[00:58:24.350]        // if-block "isSWJ"
[00:58:24.350]          // =>  TRUE
[00:58:24.350]        <control if="hasDormant" while="" timeout="0" info="">
[00:58:24.350]          // if-block "hasDormant"
[00:58:24.350]            // =>  FALSE
[00:58:24.350]          // skip if-block "hasDormant"
[00:58:24.350]        </control>
[00:58:24.350]        <control if="!hasDormant" while="" timeout="0" info="">
[00:58:24.350]          // if-block "!hasDormant"
[00:58:24.350]            // =>  TRUE
[00:58:24.350]          <block atomic="false" info="">
[00:58:24.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:58:24.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:24.353]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:58:24.360]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:58:24.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:58:24.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:24.364]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:58:24.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:58:24.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:58:24.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:24.377]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:58:24.380]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:58:24.380]          </block>
[00:58:24.380]          // end if-block "!hasDormant"
[00:58:24.380]        </control>
[00:58:24.380]        // end if-block "isSWJ"
[00:58:24.381]      </control>
[00:58:24.381]      <control if="!isSWJ" while="" timeout="0" info="">
[00:58:24.381]        // if-block "!isSWJ"
[00:58:24.381]          // =>  FALSE
[00:58:24.381]        // skip if-block "!isSWJ"
[00:58:24.381]      </control>
[00:58:24.381]      <block atomic="false" info="">
[00:58:24.381]        ReadDP(0x0);
[00:58:24.387]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:58:24.387]      </block>
[00:58:24.388]      // end if-block "protType == 2"
[00:58:24.388]    </control>
[00:58:24.388]  </sequence>
[00:58:24.388]  
[00:58:24.406]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:58:24.406]  
[00:58:24.406]  <debugvars>
[00:58:24.406]    // Pre-defined
[00:58:24.406]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:24.406]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:24.406]    __dp=0x00000000
[00:58:24.406]    __ap=0x00000000
[00:58:24.406]    __traceout=0x00000000      (Trace Disabled)
[00:58:24.406]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:24.406]    __FlashAddr=0x00000000
[00:58:24.406]    __FlashLen=0x00000000
[00:58:24.407]    __FlashArg=0x00000000
[00:58:24.407]    __FlashOp=0x00000000
[00:58:24.407]    __Result=0x00000000
[00:58:24.407]  </debugvars>
[00:58:24.407]  
[00:58:24.407]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:58:24.407]    <block atomic="false" info="">
[00:58:24.407]      __var SW_DP_ABORT       = 0x0;
[00:58:24.407]        // -> [SW_DP_ABORT <= 0x00000000]
[00:58:24.407]      __var DP_CTRL_STAT      = 0x4;
[00:58:24.407]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:58:24.407]      __var DP_SELECT         = 0x8;
[00:58:24.409]        // -> [DP_SELECT <= 0x00000008]
[00:58:24.409]      __var powered_down      = 0;
[00:58:24.409]        // -> [powered_down <= 0x00000000]
[00:58:24.409]      WriteDP(DP_SELECT, 0x00000000);
[00:58:24.420]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:58:24.420]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:58:24.429]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:58:24.429]        // -> [powered_down <= 0x00000001]
[00:58:24.429]    </block>
[00:58:24.429]    <control if="powered_down" while="" timeout="0" info="">
[00:58:24.429]      // if-block "powered_down"
[00:58:24.429]        // =>  TRUE
[00:58:24.429]      <block atomic="false" info="">
[00:58:24.429]        Message(0, "Debug/System power-up request sent");
[00:58:24.431]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:58:24.435]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:58:24.435]      </block>
[00:58:24.435]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:58:24.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:58:24.439]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:58:24.439]        // while-condition  =>  FALSE
[00:58:24.439]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:58:24.439]      </control>
[00:58:24.440]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:58:24.440]        // if-block "(__protocol & 0xFFFF) == 1"
[00:58:24.440]          // =>  FALSE
[00:58:24.440]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:58:24.440]      </control>
[00:58:24.440]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:58:24.440]        // if-block "(__protocol & 0xFFFF) == 2"
[00:58:24.440]          // =>  TRUE
[00:58:24.441]        <block atomic="false" info="">
[00:58:24.441]          Message(0, "executing SWD power up");
[00:58:24.443]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:58:24.447]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:58:24.447]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:58:24.458]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:58:24.458]        </block>
[00:58:24.458]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:58:24.458]      </control>
[00:58:24.458]      // end if-block "powered_down"
[00:58:24.458]    </control>
[00:58:24.458]    <block atomic="false" info="">
[00:58:24.458]      __var DEBUG_PORT_VAL    = 0;
[00:58:24.458]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:58:24.458]      __var ACCESS_POINT_VAL  = 0;
[00:58:24.458]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:58:24.460]      __ap = 1; 
[00:58:24.460]        // -> [__ap <= 0x00000001]
[00:58:24.460]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:58:24.466]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:58:24.466]      __ap = 4;
[00:58:24.466]        // -> [__ap <= 0x00000004]
[00:58:24.467]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:24.477]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:58:24.477]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:58:24.478]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:24.479]    </block>
[00:58:24.479]    <block atomic="false" info="">
[00:58:24.479]      __var nReset = 0x80;
[00:58:24.480]        // -> [nReset <= 0x00000080]
[00:58:24.480]      __var canReadPins = 0;
[00:58:24.480]        // -> [canReadPins <= 0x00000000]
[00:58:24.480]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:58:24.487]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:58:24.487]        // -> [canReadPins <= 0x00000001]
[00:58:24.487]    </block>
[00:58:24.487]    <control if="" while="1" timeout="200" info="">
[00:58:24.487]      // while "1"  (timeout="200")
[00:58:24.487]      // while-condition  =>  TRUE
[00:58:24.487]      // while "1"  (timeout="200")
[00:58:24.488]      // while-condition  =>  TRUE
[00:58:24.488]      // while "1"  (timeout="200")
[00:58:24.488]      // while-condition  =>  TRUE
[00:58:24.488]      // while "1"  (timeout="200")
[00:58:24.488]      // while-condition  =>  TRUE
[00:58:24.488]      // while "1"  (timeout="200")
[00:58:24.488]      // while-condition  =>  TRUE
[00:58:24.488]      // while "1"  (timeout="200")
[00:58:24.488]      // while-condition  =>  TRUE
[00:58:24.488]      // while "1"  (timeout="200")
[00:58:24.489]      // while-condition  =>  TRUE
[00:58:24.489]      // while "1"  (timeout="200")
[00:58:24.489]      // while-condition  =>  TRUE
[00:58:24.489]      // while "1"  (timeout="200")
[00:58:24.489]      // while-condition  =>  TRUE
[00:58:24.489]      // while "1"  (timeout="200")
[00:58:24.489]      // while-condition  =>  TRUE
[00:58:24.489]      // while "1"  (timeout="200")
[00:58:24.490]      // while-condition  =>  TRUE
[00:58:24.490]      // while "1"  (timeout="200")
[00:58:24.490]      // while-condition  =>  TRUE
[00:58:24.490]      // while "1"  (timeout="200")
[00:58:24.490]      // while-condition  =>  TRUE
[00:58:24.490]      // while "1"  (timeout="200")
[00:58:24.490]      // while-condition  =>  TRUE
[00:58:24.491]      // while "1"  (timeout="200")
[00:58:24.491]      // while-condition  =>  TRUE
[00:58:24.491]      // while "1"  (timeout="200")
[00:58:24.491]      // while-condition  =>  TRUE
[00:58:24.491]      // while "1"  (timeout="200")
[00:58:24.491]      // while-condition  =>  TRUE
[00:58:24.491]      // while "1"  (timeout="200")
[00:58:24.491]      // while-condition  =>  TRUE
[00:58:24.491]      // while "1"  (timeout="200")
[00:58:24.492]      // while-condition  =>  TRUE
[00:58:24.492]      // while "1"  (timeout="200")
[00:58:24.492]      // while-condition  =>  TRUE
[00:58:24.492]      // while "1"  (timeout="200")
[00:58:24.492]      // while-condition  =>  TRUE
[00:58:24.492]      // while "1"  (timeout="200")
[00:58:24.492]      // while-condition  =>  TRUE
[00:58:24.492]      // while "1"  (timeout="200")
[00:58:24.492]      // while-condition  =>  TRUE
[00:58:24.492]      // while "1"  (timeout="200")
[00:58:24.493]      // while-condition  =>  TRUE
[00:58:24.493]      // while "1"  (timeout="200")
[00:58:24.493]      // while-condition  =>  TRUE
[00:58:24.493]      // while "1"  (timeout="200")
[00:58:24.493]      // while-condition  =>  TRUE
[00:58:24.493]      // while "1"  (timeout="200")
[00:58:24.493]      // while-condition  =>  TRUE
[00:58:24.493]      // while "1"  (timeout="200")
[00:58:24.494]      // while-condition  =>  TRUE
[00:58:24.494]      // while "1"  (timeout="200")
[00:58:24.494]      // while-condition  =>  TRUE
[00:58:24.494]      // while "1"  (timeout="200")
[00:58:24.495]      // while-condition  =>  TRUE
[00:58:24.495]      // while "1"  (timeout="200")
[00:58:24.495]      // while-condition  =>  TRUE
[00:58:24.495]      // while "1"  (timeout="200")
[00:58:24.495]      // while-condition  =>  TRUE
[00:58:24.495]      // while "1"  (timeout="200")
[00:58:24.495]      // while-condition  =>  TRUE
[00:58:24.495]      // while "1"  (timeout="200")
[00:58:24.495]      // while-condition  =>  TRUE
[00:58:24.495]      // while "1"  (timeout="200")
[00:58:24.496]      // while-condition  =>  TRUE
[00:58:24.496]      // while "1"  (timeout="200")
[00:58:24.496]      // while-condition  =>  TRUE
[00:58:24.496]      // while "1"  (timeout="200")
[00:58:24.496]      // while-condition  =>  TRUE
[00:58:24.496]      // while "1"  (timeout="200")
[00:58:24.496]      // while-condition  =>  TRUE
[00:58:24.496]      // while "1"  (timeout="200")
[00:58:24.496]      // while-condition  =>  TRUE
[00:58:24.497]      // while "1"  (timeout="200")
[00:58:24.497]      // while-condition  =>  TRUE
[00:58:24.497]      // while "1"  (timeout="200")
[00:58:24.497]      // while-condition  =>  TRUE
[00:58:24.497]      // while "1"  (timeout="200")
[00:58:24.497]      // while-condition  =>  TRUE
[00:58:24.497]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.498]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.498]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.498]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.498]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.498]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.498]      // while "1"  (timeout="200")
[00:58:24.498]      // while-condition  =>  TRUE
[00:58:24.499]      // while "1"  (timeout="200")
[00:58:24.499]      // while-condition  =>  TRUE
[00:58:24.499]      // while "1"  (timeout="200")
[00:58:24.499]      // while-condition  =>  TRUE
[00:58:24.499]      // while "1"  (timeout="200")
[00:58:24.499]      // while-condition  =>  TRUE
[00:58:24.499]      // while "1"  (timeout="200")
[00:58:24.499]      // while-condition  =>  TRUE
[00:58:24.499]      // while "1"  (timeout="200")
[00:58:24.499]      // while-condition  =>  TRUE
[00:58:24.499]      // while "1"  (timeout="200")
[00:58:24.500]      // while-condition  =>  TRUE
[00:58:24.500]      // while "1"  (timeout="200")
[00:58:24.500]      // while  =>  TIMEOUT
[00:58:24.500]      // end while "1"
[00:58:24.500]    </control>
[00:58:24.500]    <control if="canReadPins" while="" timeout="0" info="">
[00:58:24.500]      // if-block "canReadPins"
[00:58:24.500]        // =>  TRUE
[00:58:24.500]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:58:24.501]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:58:24.505]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:58:24.505]        // while-condition  =>  FALSE
[00:58:24.505]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:58:24.505]      </control>
[00:58:24.505]      // end if-block "canReadPins"
[00:58:24.506]    </control>
[00:58:24.506]    <control if="!canReadPins" while="" timeout="0" info="">
[00:58:24.506]      // if-block "!canReadPins"
[00:58:24.506]        // =>  FALSE
[00:58:24.506]      // skip if-block "!canReadPins"
[00:58:24.506]    </control>
[00:58:24.506]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:58:24.506]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:24.506]        // =>  TRUE
[00:58:24.506]      <block atomic="false" info="">
[00:58:24.506]        WriteAP(0x00, 0x190008);
[00:58:24.510]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:24.510]        WriteAP(0xF0, 0x01);
[00:58:24.518]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:24.518]      </block>
[00:58:24.518]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:24.519]    </control>
[00:58:24.519]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:58:24.519]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:24.519]        // =>  FALSE
[00:58:24.519]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:24.519]    </control>
[00:58:24.519]    <block atomic="false" info="">
[00:58:24.519]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:24.526]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:58:24.526]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:58:24.526]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:24.529]      __ap = 0; //lets make sure we reset the access point selection
[00:58:24.530]        // -> [__ap <= 0x00000000]
[00:58:24.530]    </block>
[00:58:24.530]  </sequence>
[00:58:24.530]  
[00:58:24.612]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:58:24.612]  
[00:58:24.612]  <debugvars>
[00:58:24.612]    // Pre-defined
[00:58:24.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:24.613]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:24.613]    __dp=0x00000000
[00:58:24.613]    __ap=0x00000000
[00:58:24.613]    __traceout=0x00000000      (Trace Disabled)
[00:58:24.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:24.613]    __FlashAddr=0x00000000
[00:58:24.613]    __FlashLen=0x00000000
[00:58:24.613]    __FlashArg=0x00000000
[00:58:24.613]    __FlashOp=0x00000000
[00:58:24.613]    __Result=0x00000000
[00:58:24.614]  </debugvars>
[00:58:24.614]  
[00:58:24.614]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:58:24.614]    <block atomic="false" info="">
[00:58:24.614]      __var deviceID = 0;
[00:58:24.614]        // -> [deviceID <= 0x00000000]
[00:58:24.614]      __var version = 0;
[00:58:24.614]        // -> [version <= 0x00000000]
[00:58:24.614]      __var partNum = 0;
[00:58:24.614]        // -> [partNum <= 0x00000000]
[00:58:24.615]      __var manuf = 0;
[00:58:24.615]        // -> [manuf <= 0x00000000]
[00:58:24.615]      __var isMSPM0G1X0X_G3X0X = 0;
[00:58:24.615]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:58:24.615]      __var isProduction = 0;
[00:58:24.615]        // -> [isProduction <= 0x00000000]
[00:58:24.615]      __var continueId = 0;
[00:58:24.615]        // -> [continueId <= 0x00000000]
[00:58:24.615]      deviceID =   Read32(0x41C40004);
[00:58:24.629]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:58:24.629]        // -> [deviceID <= 0x2BB8802F]
[00:58:24.629]      version = deviceID >> 28;
[00:58:24.629]        // -> [version <= 0x00000002]
[00:58:24.629]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:58:24.630]        // -> [partNum <= 0x0000BB88]
[00:58:24.630]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:58:24.630]        // -> [manuf <= 0x00000017]
[00:58:24.630]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:58:24.630]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:58:24.630]      isProduction = (version > 0);
[00:58:24.630]        // -> [isProduction <= 0x00000001]
[00:58:24.630]    </block>
[00:58:24.630]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:58:24.630]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:58:24.631]        // =>  FALSE
[00:58:24.631]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:58:24.631]    </control>
[00:58:24.631]    <control if="continueId == 4" while="" timeout="0" info="">
[00:58:24.631]      // if-block "continueId == 4"
[00:58:24.631]        // =>  FALSE
[00:58:24.631]      // skip if-block "continueId == 4"
[00:58:24.631]    </control>
[00:58:24.631]    <control if="!isProduction" while="" timeout="0" info="">
[00:58:24.631]      // if-block "!isProduction"
[00:58:24.632]        // =>  FALSE
[00:58:24.632]      // skip if-block "!isProduction"
[00:58:24.632]    </control>
[00:58:24.632]  </sequence>
[00:58:24.632]  
[00:58:32.454]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:58:32.454]  
[00:58:32.463]  <debugvars>
[00:58:32.463]    // Pre-defined
[00:58:32.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:32.463]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:58:32.463]    __dp=0x00000000
[00:58:32.464]    __ap=0x00000000
[00:58:32.464]    __traceout=0x00000000      (Trace Disabled)
[00:58:32.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:32.464]    __FlashAddr=0x00000000
[00:58:32.464]    __FlashLen=0x00000000
[00:58:32.464]    __FlashArg=0x00000000
[00:58:32.465]    __FlashOp=0x00000000
[00:58:32.465]    __Result=0x00000000
[00:58:32.465]  </debugvars>
[00:58:32.465]  
[00:58:32.465]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:58:32.465]    <block atomic="false" info="">
[00:58:32.465]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:58:32.465]        // -> [isSWJ <= 0x00000001]
[00:58:32.465]      __var hasDormant = __protocol & 0x00020000;
[00:58:32.465]        // -> [hasDormant <= 0x00000000]
[00:58:32.465]      __var protType   = __protocol & 0x0000FFFF;
[00:58:32.466]        // -> [protType <= 0x00000002]
[00:58:32.466]    </block>
[00:58:32.466]    <control if="protType == 1" while="" timeout="0" info="">
[00:58:32.466]      // if-block "protType == 1"
[00:58:32.467]        // =>  FALSE
[00:58:32.467]      // skip if-block "protType == 1"
[00:58:32.467]    </control>
[00:58:32.467]    <control if="protType == 2" while="" timeout="0" info="">
[00:58:32.467]      // if-block "protType == 2"
[00:58:32.467]        // =>  TRUE
[00:58:32.467]      <control if="isSWJ" while="" timeout="0" info="">
[00:58:32.467]        // if-block "isSWJ"
[00:58:32.467]          // =>  TRUE
[00:58:32.467]        <control if="hasDormant" while="" timeout="0" info="">
[00:58:32.468]          // if-block "hasDormant"
[00:58:32.468]            // =>  FALSE
[00:58:32.468]          // skip if-block "hasDormant"
[00:58:32.468]        </control>
[00:58:32.468]        <control if="!hasDormant" while="" timeout="0" info="">
[00:58:32.468]          // if-block "!hasDormant"
[00:58:32.468]            // =>  TRUE
[00:58:32.468]          <block atomic="false" info="">
[00:58:32.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:58:32.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:32.471]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:58:32.475]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:58:32.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:58:32.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:32.478]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:58:32.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:58:32.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:58:32.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:32.485]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:58:32.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:58:32.490]          </block>
[00:58:32.490]          // end if-block "!hasDormant"
[00:58:32.490]        </control>
[00:58:32.490]        // end if-block "isSWJ"
[00:58:32.490]      </control>
[00:58:32.490]      <control if="!isSWJ" while="" timeout="0" info="">
[00:58:32.491]        // if-block "!isSWJ"
[00:58:32.491]          // =>  FALSE
[00:58:32.491]        // skip if-block "!isSWJ"
[00:58:32.491]      </control>
[00:58:32.491]      <block atomic="false" info="">
[00:58:32.491]        ReadDP(0x0);
[00:58:32.494]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:58:32.494]      </block>
[00:58:32.494]      // end if-block "protType == 2"
[00:58:32.494]    </control>
[00:58:32.494]  </sequence>
[00:58:32.494]  
[00:58:32.508]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:58:32.508]  
[00:58:32.508]  <debugvars>
[00:58:32.508]    // Pre-defined
[00:58:32.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:32.509]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:58:32.509]    __dp=0x00000000
[00:58:32.509]    __ap=0x00000000
[00:58:32.509]    __traceout=0x00000000      (Trace Disabled)
[00:58:32.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:32.509]    __FlashAddr=0x00000000
[00:58:32.509]    __FlashLen=0x00000000
[00:58:32.509]    __FlashArg=0x00000000
[00:58:32.509]    __FlashOp=0x00000000
[00:58:32.509]    __Result=0x00000000
[00:58:32.509]  </debugvars>
[00:58:32.510]  
[00:58:32.510]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:58:32.510]    <block atomic="false" info="">
[00:58:32.510]      __var SW_DP_ABORT       = 0x0;
[00:58:32.510]        // -> [SW_DP_ABORT <= 0x00000000]
[00:58:32.510]      __var DP_CTRL_STAT      = 0x4;
[00:58:32.510]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:58:32.510]      __var DP_SELECT         = 0x8;
[00:58:32.510]        // -> [DP_SELECT <= 0x00000008]
[00:58:32.510]      __var powered_down      = 0;
[00:58:32.510]        // -> [powered_down <= 0x00000000]
[00:58:32.510]      WriteDP(DP_SELECT, 0x00000000);
[00:58:32.514]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:58:32.514]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:58:32.517]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:58:32.517]        // -> [powered_down <= 0x00000001]
[00:58:32.517]    </block>
[00:58:32.517]    <control if="powered_down" while="" timeout="0" info="">
[00:58:32.517]      // if-block "powered_down"
[00:58:32.518]        // =>  TRUE
[00:58:32.518]      <block atomic="false" info="">
[00:58:32.518]        Message(0, "Debug/System power-up request sent");
[00:58:32.519]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:58:32.522]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:58:32.522]      </block>
[00:58:32.522]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:58:32.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:58:32.525]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:58:32.525]        // while-condition  =>  FALSE
[00:58:32.525]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:58:32.525]      </control>
[00:58:32.525]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:58:32.525]        // if-block "(__protocol & 0xFFFF) == 1"
[00:58:32.525]          // =>  FALSE
[00:58:32.525]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:58:32.525]      </control>
[00:58:32.526]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:58:32.526]        // if-block "(__protocol & 0xFFFF) == 2"
[00:58:32.526]          // =>  TRUE
[00:58:32.527]        <block atomic="false" info="">
[00:58:32.527]          Message(0, "executing SWD power up");
[00:58:32.528]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:58:32.532]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:58:32.532]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:58:32.542]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:58:32.542]        </block>
[00:58:32.542]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:58:32.542]      </control>
[00:58:32.542]      // end if-block "powered_down"
[00:58:32.542]    </control>
[00:58:32.542]    <block atomic="false" info="">
[00:58:32.543]      __var DEBUG_PORT_VAL    = 0;
[00:58:32.543]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:58:32.543]      __var ACCESS_POINT_VAL  = 0;
[00:58:32.543]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:58:32.543]      __ap = 1; 
[00:58:32.543]        // -> [__ap <= 0x00000001]
[00:58:32.543]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:58:32.551]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:58:32.551]      __ap = 4;
[00:58:32.552]        // -> [__ap <= 0x00000004]
[00:58:32.552]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:32.558]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:58:32.558]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:58:32.558]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:32.560]    </block>
[00:58:32.560]    <block atomic="false" info="">
[00:58:32.560]      __var nReset = 0x80;
[00:58:32.560]        // -> [nReset <= 0x00000080]
[00:58:32.560]      __var canReadPins = 0;
[00:58:32.560]        // -> [canReadPins <= 0x00000000]
[00:58:32.560]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:58:32.561]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:58:32.564]        // -> [canReadPins <= 0x00000001]
[00:58:32.564]    </block>
[00:58:32.564]    <control if="" while="1" timeout="200" info="">
[00:58:32.564]      // while "1"  (timeout="200")
[00:58:32.564]      // while-condition  =>  TRUE
[00:58:32.564]      // while "1"  (timeout="200")
[00:58:32.564]      // while-condition  =>  TRUE
[00:58:32.565]      // while "1"  (timeout="200")
[00:58:32.565]      // while-condition  =>  TRUE
[00:58:32.565]      // while "1"  (timeout="200")
[00:58:32.565]      // while-condition  =>  TRUE
[00:58:32.565]      // while "1"  (timeout="200")
[00:58:32.565]      // while-condition  =>  TRUE
[00:58:32.566]      // while "1"  (timeout="200")
[00:58:32.566]      // while-condition  =>  TRUE
[00:58:32.566]      // while "1"  (timeout="200")
[00:58:32.566]      // while-condition  =>  TRUE
[00:58:32.566]      // while "1"  (timeout="200")
[00:58:32.566]      // while-condition  =>  TRUE
[00:58:32.566]      // while "1"  (timeout="200")
[00:58:32.567]      // while-condition  =>  TRUE
[00:58:32.567]      // while "1"  (timeout="200")
[00:58:32.567]      // while-condition  =>  TRUE
[00:58:32.567]      // while "1"  (timeout="200")
[00:58:32.567]      // while-condition  =>  TRUE
[00:58:32.567]      // while "1"  (timeout="200")
[00:58:32.567]      // while-condition  =>  TRUE
[00:58:32.567]      // while "1"  (timeout="200")
[00:58:32.567]      // while-condition  =>  TRUE
[00:58:32.567]      // while "1"  (timeout="200")
[00:58:32.567]      // while-condition  =>  TRUE
[00:58:32.568]      // while "1"  (timeout="200")
[00:58:32.568]      // while-condition  =>  TRUE
[00:58:32.568]      // while "1"  (timeout="200")
[00:58:32.568]      // while-condition  =>  TRUE
[00:58:32.568]      // while "1"  (timeout="200")
[00:58:32.568]      // while-condition  =>  TRUE
[00:58:32.568]      // while "1"  (timeout="200")
[00:58:32.568]      // while-condition  =>  TRUE
[00:58:32.568]      // while "1"  (timeout="200")
[00:58:32.568]      // while-condition  =>  TRUE
[00:58:32.568]      // while "1"  (timeout="200")
[00:58:32.569]      // while-condition  =>  TRUE
[00:58:32.569]      // while "1"  (timeout="200")
[00:58:32.569]      // while-condition  =>  TRUE
[00:58:32.569]      // while "1"  (timeout="200")
[00:58:32.569]      // while-condition  =>  TRUE
[00:58:32.569]      // while "1"  (timeout="200")
[00:58:32.569]      // while-condition  =>  TRUE
[00:58:32.569]      // while "1"  (timeout="200")
[00:58:32.569]      // while-condition  =>  TRUE
[00:58:32.569]      // while "1"  (timeout="200")
[00:58:32.569]      // while-condition  =>  TRUE
[00:58:32.569]      // while "1"  (timeout="200")
[00:58:32.570]      // while-condition  =>  TRUE
[00:58:32.570]      // while "1"  (timeout="200")
[00:58:32.570]      // while-condition  =>  TRUE
[00:58:32.570]      // while "1"  (timeout="200")
[00:58:32.570]      // while-condition  =>  TRUE
[00:58:32.570]      // while "1"  (timeout="200")
[00:58:32.570]      // while-condition  =>  TRUE
[00:58:32.570]      // while "1"  (timeout="200")
[00:58:32.571]      // while-condition  =>  TRUE
[00:58:32.571]      // while "1"  (timeout="200")
[00:58:32.571]      // while-condition  =>  TRUE
[00:58:32.571]      // while "1"  (timeout="200")
[00:58:32.571]      // while-condition  =>  TRUE
[00:58:32.571]      // while "1"  (timeout="200")
[00:58:32.571]      // while-condition  =>  TRUE
[00:58:32.572]      // while "1"  (timeout="200")
[00:58:32.572]      // while-condition  =>  TRUE
[00:58:32.572]      // while "1"  (timeout="200")
[00:58:32.572]      // while-condition  =>  TRUE
[00:58:32.572]      // while "1"  (timeout="200")
[00:58:32.572]      // while-condition  =>  TRUE
[00:58:32.572]      // while "1"  (timeout="200")
[00:58:32.572]      // while-condition  =>  TRUE
[00:58:32.572]      // while "1"  (timeout="200")
[00:58:32.572]      // while-condition  =>  TRUE
[00:58:32.572]      // while "1"  (timeout="200")
[00:58:32.573]      // while-condition  =>  TRUE
[00:58:32.573]      // while "1"  (timeout="200")
[00:58:32.573]      // while-condition  =>  TRUE
[00:58:32.573]      // while "1"  (timeout="200")
[00:58:32.573]      // while-condition  =>  TRUE
[00:58:32.573]      // while "1"  (timeout="200")
[00:58:32.573]      // while-condition  =>  TRUE
[00:58:32.573]      // while "1"  (timeout="200")
[00:58:32.573]      // while-condition  =>  TRUE
[00:58:32.573]      // while "1"  (timeout="200")
[00:58:32.573]      // while-condition  =>  TRUE
[00:58:32.574]      // while "1"  (timeout="200")
[00:58:32.574]      // while-condition  =>  TRUE
[00:58:32.574]      // while "1"  (timeout="200")
[00:58:32.574]      // while-condition  =>  TRUE
[00:58:32.574]      // while "1"  (timeout="200")
[00:58:32.574]      // while-condition  =>  TRUE
[00:58:32.574]      // while "1"  (timeout="200")
[00:58:32.574]      // while-condition  =>  TRUE
[00:58:32.574]      // while "1"  (timeout="200")
[00:58:32.574]      // while-condition  =>  TRUE
[00:58:32.574]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.575]      // while "1"  (timeout="200")
[00:58:32.575]      // while-condition  =>  TRUE
[00:58:32.577]      // while "1"  (timeout="200")
[00:58:32.577]      // while-condition  =>  TRUE
[00:58:32.577]      // while "1"  (timeout="200")
[00:58:32.577]      // while-condition  =>  TRUE
[00:58:32.577]      // while "1"  (timeout="200")
[00:58:32.577]      // while-condition  =>  TRUE
[00:58:32.577]      // while "1"  (timeout="200")
[00:58:32.577]      // while-condition  =>  TRUE
[00:58:32.577]      // while "1"  (timeout="200")
[00:58:32.578]      // while-condition  =>  TRUE
[00:58:32.578]      // while "1"  (timeout="200")
[00:58:32.578]      // while  =>  TIMEOUT
[00:58:32.578]      // end while "1"
[00:58:32.578]    </control>
[00:58:32.578]    <control if="canReadPins" while="" timeout="0" info="">
[00:58:32.578]      // if-block "canReadPins"
[00:58:32.578]        // =>  TRUE
[00:58:32.579]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:58:32.579]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:58:32.581]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:58:32.581]        // while-condition  =>  FALSE
[00:58:32.582]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:58:32.582]      </control>
[00:58:32.582]      // end if-block "canReadPins"
[00:58:32.582]    </control>
[00:58:32.582]    <control if="!canReadPins" while="" timeout="0" info="">
[00:58:32.582]      // if-block "!canReadPins"
[00:58:32.582]        // =>  FALSE
[00:58:32.582]      // skip if-block "!canReadPins"
[00:58:32.582]    </control>
[00:58:32.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:58:32.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:32.582]        // =>  TRUE
[00:58:32.584]      <block atomic="false" info="">
[00:58:32.584]        WriteAP(0x00, 0x190008);
[00:58:32.588]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:32.588]        WriteAP(0xF0, 0x01);
[00:58:32.597]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:32.597]      </block>
[00:58:32.597]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:32.597]    </control>
[00:58:32.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:58:32.597]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:32.597]        // =>  FALSE
[00:58:32.598]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:32.598]    </control>
[00:58:32.598]    <block atomic="false" info="">
[00:58:32.598]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:32.608]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:58:32.608]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:58:32.609]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:32.610]      __ap = 0; //lets make sure we reset the access point selection
[00:58:32.610]        // -> [__ap <= 0x00000000]
[00:58:32.610]    </block>
[00:58:32.610]  </sequence>
[00:58:32.610]  
[00:58:32.661]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:58:32.661]  
[00:58:32.662]  <debugvars>
[00:58:32.662]    // Pre-defined
[00:58:32.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:32.662]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:58:32.662]    __dp=0x00000000
[00:58:32.662]    __ap=0x00000000
[00:58:32.662]    __traceout=0x00000000      (Trace Disabled)
[00:58:32.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:32.662]    __FlashAddr=0x00000000
[00:58:32.663]    __FlashLen=0x00000000
[00:58:32.663]    __FlashArg=0x00000000
[00:58:32.663]    __FlashOp=0x00000000
[00:58:32.663]    __Result=0x00000000
[00:58:32.663]  </debugvars>
[00:58:32.663]  
[00:58:32.663]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:58:32.663]    <block atomic="false" info="">
[00:58:32.663]      __var deviceID = 0;
[00:58:32.663]        // -> [deviceID <= 0x00000000]
[00:58:32.663]      __var version = 0;
[00:58:32.663]        // -> [version <= 0x00000000]
[00:58:32.663]      __var partNum = 0;
[00:58:32.663]        // -> [partNum <= 0x00000000]
[00:58:32.663]      __var manuf = 0;
[00:58:32.664]        // -> [manuf <= 0x00000000]
[00:58:32.664]      __var isMSPM0G1X0X_G3X0X = 0;
[00:58:32.664]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:58:32.664]      __var isProduction = 0;
[00:58:32.664]        // -> [isProduction <= 0x00000000]
[00:58:32.664]      __var continueId = 0;
[00:58:32.664]        // -> [continueId <= 0x00000000]
[00:58:32.664]      deviceID =   Read32(0x41C40004);
[00:58:32.672]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:58:32.673]        // -> [deviceID <= 0x2BB8802F]
[00:58:32.673]      version = deviceID >> 28;
[00:58:32.673]        // -> [version <= 0x00000002]
[00:58:32.673]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:58:32.673]        // -> [partNum <= 0x0000BB88]
[00:58:32.673]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:58:32.673]        // -> [manuf <= 0x00000017]
[00:58:32.673]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:58:32.673]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:58:32.673]      isProduction = (version > 0);
[00:58:32.675]        // -> [isProduction <= 0x00000001]
[00:58:32.675]    </block>
[00:58:32.675]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:58:32.675]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:58:32.675]        // =>  FALSE
[00:58:32.675]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:58:32.675]    </control>
[00:58:32.675]    <control if="continueId == 4" while="" timeout="0" info="">
[00:58:32.675]      // if-block "continueId == 4"
[00:58:32.675]        // =>  FALSE
[00:58:32.676]      // skip if-block "continueId == 4"
[00:58:32.676]    </control>
[00:58:32.676]    <control if="!isProduction" while="" timeout="0" info="">
[00:58:32.676]      // if-block "!isProduction"
[00:58:32.676]        // =>  FALSE
[00:58:32.676]      // skip if-block "!isProduction"
[00:58:32.676]    </control>
[00:58:32.676]  </sequence>
[00:58:32.676]  
[01:00:36.833]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:00:36.833]  
[01:00:36.834]  <debugvars>
[01:00:36.834]    // Pre-defined
[01:00:36.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:36.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:36.834]    __dp=0x00000000
[01:00:36.834]    __ap=0x00000000
[01:00:36.835]    __traceout=0x00000000      (Trace Disabled)
[01:00:36.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:36.835]    __FlashAddr=0x00000000
[01:00:36.835]    __FlashLen=0x00000000
[01:00:36.835]    __FlashArg=0x00000000
[01:00:36.835]    __FlashOp=0x00000000
[01:00:36.835]    __Result=0x00000000
[01:00:36.835]  </debugvars>
[01:00:36.835]  
[01:00:36.835]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:00:36.835]    <block atomic="false" info="">
[01:00:36.835]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:00:36.835]        // -> [isSWJ <= 0x00000001]
[01:00:36.835]      __var hasDormant = __protocol & 0x00020000;
[01:00:36.835]        // -> [hasDormant <= 0x00000000]
[01:00:36.835]      __var protType   = __protocol & 0x0000FFFF;
[01:00:36.835]        // -> [protType <= 0x00000002]
[01:00:36.837]    </block>
[01:00:36.837]    <control if="protType == 1" while="" timeout="0" info="">
[01:00:36.837]      // if-block "protType == 1"
[01:00:36.837]        // =>  FALSE
[01:00:36.837]      // skip if-block "protType == 1"
[01:00:36.837]    </control>
[01:00:36.838]    <control if="protType == 2" while="" timeout="0" info="">
[01:00:36.838]      // if-block "protType == 2"
[01:00:36.838]        // =>  TRUE
[01:00:36.838]      <control if="isSWJ" while="" timeout="0" info="">
[01:00:36.838]        // if-block "isSWJ"
[01:00:36.838]          // =>  TRUE
[01:00:36.838]        <control if="hasDormant" while="" timeout="0" info="">
[01:00:36.838]          // if-block "hasDormant"
[01:00:36.839]            // =>  FALSE
[01:00:36.839]          // skip if-block "hasDormant"
[01:00:36.839]        </control>
[01:00:36.839]        <control if="!hasDormant" while="" timeout="0" info="">
[01:00:36.839]          // if-block "!hasDormant"
[01:00:36.839]            // =>  TRUE
[01:00:36.839]          <block atomic="false" info="">
[01:00:36.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:00:36.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:36.842]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:00:36.846]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:00:36.846]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:00:36.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:36.849]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:00:36.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:00:36.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:00:36.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:36.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:00:36.864]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:00:36.864]          </block>
[01:00:36.864]          // end if-block "!hasDormant"
[01:00:36.864]        </control>
[01:00:36.864]        // end if-block "isSWJ"
[01:00:36.864]      </control>
[01:00:36.864]      <control if="!isSWJ" while="" timeout="0" info="">
[01:00:36.864]        // if-block "!isSWJ"
[01:00:36.865]          // =>  FALSE
[01:00:36.865]        // skip if-block "!isSWJ"
[01:00:36.865]      </control>
[01:00:36.865]      <block atomic="false" info="">
[01:00:36.865]        ReadDP(0x0);
[01:00:36.869]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:00:36.870]      </block>
[01:00:36.870]      // end if-block "protType == 2"
[01:00:36.870]    </control>
[01:00:36.870]  </sequence>
[01:00:36.870]  
[01:00:36.880]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:00:36.880]  
[01:00:36.880]  <debugvars>
[01:00:36.880]    // Pre-defined
[01:00:36.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:36.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:36.881]    __dp=0x00000000
[01:00:36.881]    __ap=0x00000000
[01:00:36.881]    __traceout=0x00000000      (Trace Disabled)
[01:00:36.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:36.881]    __FlashAddr=0x00000000
[01:00:36.881]    __FlashLen=0x00000000
[01:00:36.881]    __FlashArg=0x00000000
[01:00:36.881]    __FlashOp=0x00000000
[01:00:36.881]    __Result=0x00000000
[01:00:36.881]  </debugvars>
[01:00:36.881]  
[01:00:36.882]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:00:36.882]    <block atomic="false" info="">
[01:00:36.882]      __var SW_DP_ABORT       = 0x0;
[01:00:36.882]        // -> [SW_DP_ABORT <= 0x00000000]
[01:00:36.882]      __var DP_CTRL_STAT      = 0x4;
[01:00:36.882]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:00:36.882]      __var DP_SELECT         = 0x8;
[01:00:36.882]        // -> [DP_SELECT <= 0x00000008]
[01:00:36.882]      __var powered_down      = 0;
[01:00:36.882]        // -> [powered_down <= 0x00000000]
[01:00:36.883]      WriteDP(DP_SELECT, 0x00000000);
[01:00:36.892]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:00:36.892]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:00:36.897]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:00:36.897]        // -> [powered_down <= 0x00000001]
[01:00:36.897]    </block>
[01:00:36.897]    <control if="powered_down" while="" timeout="0" info="">
[01:00:36.897]      // if-block "powered_down"
[01:00:36.898]        // =>  TRUE
[01:00:36.898]      <block atomic="false" info="">
[01:00:36.898]        Message(0, "Debug/System power-up request sent");
[01:00:36.900]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:00:36.906]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:00:36.906]      </block>
[01:00:36.906]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:00:36.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:00:36.909]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:00:36.909]        // while-condition  =>  FALSE
[01:00:36.909]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:00:36.910]      </control>
[01:00:36.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:00:36.910]        // if-block "(__protocol & 0xFFFF) == 1"
[01:00:36.910]          // =>  FALSE
[01:00:36.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:00:36.910]      </control>
[01:00:36.910]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:00:36.910]        // if-block "(__protocol & 0xFFFF) == 2"
[01:00:36.910]          // =>  TRUE
[01:00:36.910]        <block atomic="false" info="">
[01:00:36.910]          Message(0, "executing SWD power up");
[01:00:36.913]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:00:36.917]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:00:36.917]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:00:36.920]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:00:36.921]        </block>
[01:00:36.921]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:00:36.921]      </control>
[01:00:36.921]      // end if-block "powered_down"
[01:00:36.921]    </control>
[01:00:36.921]    <block atomic="false" info="">
[01:00:36.921]      __var DEBUG_PORT_VAL    = 0;
[01:00:36.921]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:00:36.921]      __var ACCESS_POINT_VAL  = 0;
[01:00:36.921]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:00:36.922]      __ap = 1; 
[01:00:36.922]        // -> [__ap <= 0x00000001]
[01:00:36.922]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:00:36.932]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:00:36.933]      __ap = 4;
[01:00:36.933]        // -> [__ap <= 0x00000004]
[01:00:36.933]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:36.940]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:00:36.940]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:00:36.940]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:36.942]    </block>
[01:00:36.942]    <block atomic="false" info="">
[01:00:36.942]      __var nReset = 0x80;
[01:00:36.942]        // -> [nReset <= 0x00000080]
[01:00:36.942]      __var canReadPins = 0;
[01:00:36.942]        // -> [canReadPins <= 0x00000000]
[01:00:36.942]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:00:36.945]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:00:36.945]        // -> [canReadPins <= 0x00000001]
[01:00:36.946]    </block>
[01:00:36.946]    <control if="" while="1" timeout="200" info="">
[01:00:36.947]      // while "1"  (timeout="200")
[01:00:36.947]      // while-condition  =>  TRUE
[01:00:36.947]      // while "1"  (timeout="200")
[01:00:36.947]      // while-condition  =>  TRUE
[01:00:36.947]      // while "1"  (timeout="200")
[01:00:36.947]      // while-condition  =>  TRUE
[01:00:36.947]      // while "1"  (timeout="200")
[01:00:36.948]      // while-condition  =>  TRUE
[01:00:36.948]      // while "1"  (timeout="200")
[01:00:36.948]      // while-condition  =>  TRUE
[01:00:36.948]      // while "1"  (timeout="200")
[01:00:36.948]      // while-condition  =>  TRUE
[01:00:36.948]      // while "1"  (timeout="200")
[01:00:36.948]      // while-condition  =>  TRUE
[01:00:36.949]      // while "1"  (timeout="200")
[01:00:36.949]      // while-condition  =>  TRUE
[01:00:36.949]      // while "1"  (timeout="200")
[01:00:36.949]      // while-condition  =>  TRUE
[01:00:36.949]      // while "1"  (timeout="200")
[01:00:36.949]      // while-condition  =>  TRUE
[01:00:36.949]      // while "1"  (timeout="200")
[01:00:36.950]      // while-condition  =>  TRUE
[01:00:36.950]      // while "1"  (timeout="200")
[01:00:36.950]      // while-condition  =>  TRUE
[01:00:36.950]      // while "1"  (timeout="200")
[01:00:36.950]      // while-condition  =>  TRUE
[01:00:36.950]      // while "1"  (timeout="200")
[01:00:36.950]      // while-condition  =>  TRUE
[01:00:36.950]      // while "1"  (timeout="200")
[01:00:36.950]      // while-condition  =>  TRUE
[01:00:36.950]      // while "1"  (timeout="200")
[01:00:36.951]      // while-condition  =>  TRUE
[01:00:36.951]      // while "1"  (timeout="200")
[01:00:36.951]      // while-condition  =>  TRUE
[01:00:36.951]      // while "1"  (timeout="200")
[01:00:36.951]      // while-condition  =>  TRUE
[01:00:36.951]      // while "1"  (timeout="200")
[01:00:36.952]      // while-condition  =>  TRUE
[01:00:36.952]      // while "1"  (timeout="200")
[01:00:36.952]      // while-condition  =>  TRUE
[01:00:36.952]      // while "1"  (timeout="200")
[01:00:36.952]      // while-condition  =>  TRUE
[01:00:36.952]      // while "1"  (timeout="200")
[01:00:36.952]      // while-condition  =>  TRUE
[01:00:36.952]      // while "1"  (timeout="200")
[01:00:36.952]      // while-condition  =>  TRUE
[01:00:36.952]      // while "1"  (timeout="200")
[01:00:36.952]      // while-condition  =>  TRUE
[01:00:36.953]      // while "1"  (timeout="200")
[01:00:36.953]      // while  =>  TIMEOUT
[01:00:36.953]      // end while "1"
[01:00:36.953]    </control>
[01:00:36.953]    <control if="canReadPins" while="" timeout="0" info="">
[01:00:36.953]      // if-block "canReadPins"
[01:00:36.953]        // =>  TRUE
[01:00:36.953]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:00:36.953]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:00:36.958]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:00:36.959]        // while-condition  =>  FALSE
[01:00:36.959]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:00:36.959]      </control>
[01:00:36.959]      // end if-block "canReadPins"
[01:00:36.959]    </control>
[01:00:36.959]    <control if="!canReadPins" while="" timeout="0" info="">
[01:00:36.959]      // if-block "!canReadPins"
[01:00:36.959]        // =>  FALSE
[01:00:36.959]      // skip if-block "!canReadPins"
[01:00:36.959]    </control>
[01:00:36.959]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:00:36.959]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:36.959]        // =>  TRUE
[01:00:36.959]      <block atomic="false" info="">
[01:00:36.959]        WriteAP(0x00, 0x190008);
[01:00:36.964]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:36.964]        WriteAP(0xF0, 0x01);
[01:00:36.970]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:36.970]      </block>
[01:00:36.970]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:36.970]    </control>
[01:00:36.970]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:00:36.970]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:36.971]        // =>  FALSE
[01:00:36.971]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:36.971]    </control>
[01:00:36.971]    <block atomic="false" info="">
[01:00:36.971]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:36.977]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:00:36.977]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:00:36.977]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:36.979]      __ap = 0; //lets make sure we reset the access point selection
[01:00:36.979]        // -> [__ap <= 0x00000000]
[01:00:36.979]    </block>
[01:00:36.979]  </sequence>
[01:00:36.979]  
[01:00:37.032]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:37.032]  
[01:00:37.032]  <debugvars>
[01:00:37.032]    // Pre-defined
[01:00:37.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:37.032]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:37.032]    __dp=0x00000000
[01:00:37.032]    __ap=0x00000000
[01:00:37.032]    __traceout=0x00000000      (Trace Disabled)
[01:00:37.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:37.033]    __FlashAddr=0x00000000
[01:00:37.033]    __FlashLen=0x00000000
[01:00:37.033]    __FlashArg=0x00000000
[01:00:37.033]    __FlashOp=0x00000000
[01:00:37.033]    __Result=0x00000000
[01:00:37.033]  </debugvars>
[01:00:37.033]  
[01:00:37.033]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:37.033]    <block atomic="false" info="">
[01:00:37.034]      __var deviceID = 0;
[01:00:37.034]        // -> [deviceID <= 0x00000000]
[01:00:37.034]      __var version = 0;
[01:00:37.034]        // -> [version <= 0x00000000]
[01:00:37.034]      __var partNum = 0;
[01:00:37.034]        // -> [partNum <= 0x00000000]
[01:00:37.034]      __var manuf = 0;
[01:00:37.034]        // -> [manuf <= 0x00000000]
[01:00:37.034]      __var isMSPM0G1X0X_G3X0X = 0;
[01:00:37.034]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:00:37.035]      __var isProduction = 0;
[01:00:37.035]        // -> [isProduction <= 0x00000000]
[01:00:37.035]      __var continueId = 0;
[01:00:37.035]        // -> [continueId <= 0x00000000]
[01:00:37.035]      deviceID =   Read32(0x41C40004);
[01:00:37.046]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:00:37.046]        // -> [deviceID <= 0x2BB8802F]
[01:00:37.046]      version = deviceID >> 28;
[01:00:37.046]        // -> [version <= 0x00000002]
[01:00:37.046]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:00:37.046]        // -> [partNum <= 0x0000BB88]
[01:00:37.046]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:00:37.047]        // -> [manuf <= 0x00000017]
[01:00:37.047]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:00:37.047]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:00:37.047]      isProduction = (version > 0);
[01:00:37.047]        // -> [isProduction <= 0x00000001]
[01:00:37.047]    </block>
[01:00:37.047]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:00:37.047]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:00:37.047]        // =>  FALSE
[01:00:37.047]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:00:37.047]    </control>
[01:00:37.047]    <control if="continueId == 4" while="" timeout="0" info="">
[01:00:37.047]      // if-block "continueId == 4"
[01:00:37.047]        // =>  FALSE
[01:00:37.048]      // skip if-block "continueId == 4"
[01:00:37.048]    </control>
[01:00:37.048]    <control if="!isProduction" while="" timeout="0" info="">
[01:00:37.048]      // if-block "!isProduction"
[01:00:37.048]        // =>  FALSE
[01:00:37.048]      // skip if-block "!isProduction"
[01:00:37.049]    </control>
[01:00:37.049]  </sequence>
[01:00:37.049]  
[01:00:44.964]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:00:44.964]  
[01:00:44.973]  <debugvars>
[01:00:44.973]    // Pre-defined
[01:00:44.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:44.973]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:00:44.973]    __dp=0x00000000
[01:00:44.974]    __ap=0x00000000
[01:00:44.974]    __traceout=0x00000000      (Trace Disabled)
[01:00:44.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:44.974]    __FlashAddr=0x00000000
[01:00:44.974]    __FlashLen=0x00000000
[01:00:44.975]    __FlashArg=0x00000000
[01:00:44.975]    __FlashOp=0x00000000
[01:00:44.975]    __Result=0x00000000
[01:00:44.975]  </debugvars>
[01:00:44.975]  
[01:00:44.975]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:00:44.975]    <block atomic="false" info="">
[01:00:44.975]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:00:44.975]        // -> [isSWJ <= 0x00000001]
[01:00:44.975]      __var hasDormant = __protocol & 0x00020000;
[01:00:44.977]        // -> [hasDormant <= 0x00000000]
[01:00:44.977]      __var protType   = __protocol & 0x0000FFFF;
[01:00:44.977]        // -> [protType <= 0x00000002]
[01:00:44.977]    </block>
[01:00:44.977]    <control if="protType == 1" while="" timeout="0" info="">
[01:00:44.977]      // if-block "protType == 1"
[01:00:44.977]        // =>  FALSE
[01:00:44.977]      // skip if-block "protType == 1"
[01:00:44.977]    </control>
[01:00:44.978]    <control if="protType == 2" while="" timeout="0" info="">
[01:00:44.978]      // if-block "protType == 2"
[01:00:44.978]        // =>  TRUE
[01:00:44.978]      <control if="isSWJ" while="" timeout="0" info="">
[01:00:44.978]        // if-block "isSWJ"
[01:00:44.978]          // =>  TRUE
[01:00:44.978]        <control if="hasDormant" while="" timeout="0" info="">
[01:00:44.978]          // if-block "hasDormant"
[01:00:44.978]            // =>  FALSE
[01:00:44.978]          // skip if-block "hasDormant"
[01:00:44.978]        </control>
[01:00:44.979]        <control if="!hasDormant" while="" timeout="0" info="">
[01:00:44.979]          // if-block "!hasDormant"
[01:00:44.979]            // =>  TRUE
[01:00:44.979]          <block atomic="false" info="">
[01:00:44.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:00:44.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:44.985]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:00:44.990]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:00:44.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:00:44.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:44.994]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:00:44.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:00:44.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:00:44.999]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:44.999]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:00:45.007]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:00:45.007]          </block>
[01:00:45.007]          // end if-block "!hasDormant"
[01:00:45.007]        </control>
[01:00:45.007]        // end if-block "isSWJ"
[01:00:45.007]      </control>
[01:00:45.007]      <control if="!isSWJ" while="" timeout="0" info="">
[01:00:45.008]        // if-block "!isSWJ"
[01:00:45.008]          // =>  FALSE
[01:00:45.008]        // skip if-block "!isSWJ"
[01:00:45.008]      </control>
[01:00:45.008]      <block atomic="false" info="">
[01:00:45.008]        ReadDP(0x0);
[01:00:45.016]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:00:45.016]      </block>
[01:00:45.017]      // end if-block "protType == 2"
[01:00:45.017]    </control>
[01:00:45.017]  </sequence>
[01:00:45.017]  
[01:00:45.028]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:00:45.028]  
[01:00:45.028]  <debugvars>
[01:00:45.028]    // Pre-defined
[01:00:45.028]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:45.028]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:00:45.028]    __dp=0x00000000
[01:00:45.028]    __ap=0x00000000
[01:00:45.028]    __traceout=0x00000000      (Trace Disabled)
[01:00:45.028]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:45.028]    __FlashAddr=0x00000000
[01:00:45.028]    __FlashLen=0x00000000
[01:00:45.028]    __FlashArg=0x00000000
[01:00:45.028]    __FlashOp=0x00000000
[01:00:45.028]    __Result=0x00000000
[01:00:45.028]  </debugvars>
[01:00:45.028]  
[01:00:45.028]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:00:45.028]    <block atomic="false" info="">
[01:00:45.028]      __var SW_DP_ABORT       = 0x0;
[01:00:45.028]        // -> [SW_DP_ABORT <= 0x00000000]
[01:00:45.028]      __var DP_CTRL_STAT      = 0x4;
[01:00:45.028]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:00:45.028]      __var DP_SELECT         = 0x8;
[01:00:45.028]        // -> [DP_SELECT <= 0x00000008]
[01:00:45.028]      __var powered_down      = 0;
[01:00:45.028]        // -> [powered_down <= 0x00000000]
[01:00:45.028]      WriteDP(DP_SELECT, 0x00000000);
[01:00:45.035]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:00:45.035]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:00:45.044]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:00:45.044]        // -> [powered_down <= 0x00000001]
[01:00:45.045]    </block>
[01:00:45.045]    <control if="powered_down" while="" timeout="0" info="">
[01:00:45.045]      // if-block "powered_down"
[01:00:45.045]        // =>  TRUE
[01:00:45.045]      <block atomic="false" info="">
[01:00:45.045]        Message(0, "Debug/System power-up request sent");
[01:00:45.047]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:00:45.053]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:00:45.053]      </block>
[01:00:45.053]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:00:45.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:00:45.057]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:00:45.057]        // while-condition  =>  FALSE
[01:00:45.057]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:00:45.057]      </control>
[01:00:45.057]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:00:45.057]        // if-block "(__protocol & 0xFFFF) == 1"
[01:00:45.057]          // =>  FALSE
[01:00:45.058]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:00:45.058]      </control>
[01:00:45.058]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:00:45.058]        // if-block "(__protocol & 0xFFFF) == 2"
[01:00:45.058]          // =>  TRUE
[01:00:45.058]        <block atomic="false" info="">
[01:00:45.058]          Message(0, "executing SWD power up");
[01:00:45.059]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:00:45.063]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:00:45.063]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:00:45.068]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:00:45.068]        </block>
[01:00:45.068]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:00:45.068]      </control>
[01:00:45.069]      // end if-block "powered_down"
[01:00:45.069]    </control>
[01:00:45.069]    <block atomic="false" info="">
[01:00:45.069]      __var DEBUG_PORT_VAL    = 0;
[01:00:45.069]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:00:45.069]      __var ACCESS_POINT_VAL  = 0;
[01:00:45.069]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:00:45.069]      __ap = 1; 
[01:00:45.069]        // -> [__ap <= 0x00000001]
[01:00:45.069]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:00:45.077]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:00:45.077]      __ap = 4;
[01:00:45.077]        // -> [__ap <= 0x00000004]
[01:00:45.078]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:45.084]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:00:45.084]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:00:45.084]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:45.086]    </block>
[01:00:45.086]    <block atomic="false" info="">
[01:00:45.086]      __var nReset = 0x80;
[01:00:45.087]        // -> [nReset <= 0x00000080]
[01:00:45.087]      __var canReadPins = 0;
[01:00:45.087]        // -> [canReadPins <= 0x00000000]
[01:00:45.087]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:00:45.095]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:00:45.095]        // -> [canReadPins <= 0x00000001]
[01:00:45.095]    </block>
[01:00:45.095]    <control if="" while="1" timeout="200" info="">
[01:00:45.095]      // while "1"  (timeout="200")
[01:00:45.097]      // while-condition  =>  TRUE
[01:00:45.097]      // while "1"  (timeout="200")
[01:00:45.097]      // while-condition  =>  TRUE
[01:00:45.097]      // while "1"  (timeout="200")
[01:00:45.097]      // while-condition  =>  TRUE
[01:00:45.097]      // while "1"  (timeout="200")
[01:00:45.097]      // while-condition  =>  TRUE
[01:00:45.097]      // while "1"  (timeout="200")
[01:00:45.097]      // while-condition  =>  TRUE
[01:00:45.097]      // while "1"  (timeout="200")
[01:00:45.097]      // while-condition  =>  TRUE
[01:00:45.098]      // while "1"  (timeout="200")
[01:00:45.098]      // while-condition  =>  TRUE
[01:00:45.098]      // while "1"  (timeout="200")
[01:00:45.098]      // while-condition  =>  TRUE
[01:00:45.098]      // while "1"  (timeout="200")
[01:00:45.098]      // while-condition  =>  TRUE
[01:00:45.098]      // while "1"  (timeout="200")
[01:00:45.098]      // while-condition  =>  TRUE
[01:00:45.098]      // while "1"  (timeout="200")
[01:00:45.098]      // while-condition  =>  TRUE
[01:00:45.099]      // while "1"  (timeout="200")
[01:00:45.099]      // while-condition  =>  TRUE
[01:00:45.099]      // while "1"  (timeout="200")
[01:00:45.099]      // while-condition  =>  TRUE
[01:00:45.099]      // while "1"  (timeout="200")
[01:00:45.099]      // while-condition  =>  TRUE
[01:00:45.099]      // while "1"  (timeout="200")
[01:00:45.099]      // while-condition  =>  TRUE
[01:00:45.099]      // while "1"  (timeout="200")
[01:00:45.099]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.100]      // while-condition  =>  TRUE
[01:00:45.100]      // while "1"  (timeout="200")
[01:00:45.101]      // while-condition  =>  TRUE
[01:00:45.101]      // while "1"  (timeout="200")
[01:00:45.101]      // while-condition  =>  TRUE
[01:00:45.101]      // while "1"  (timeout="200")
[01:00:45.101]      // while-condition  =>  TRUE
[01:00:45.101]      // while "1"  (timeout="200")
[01:00:45.101]      // while-condition  =>  TRUE
[01:00:45.101]      // while "1"  (timeout="200")
[01:00:45.102]      // while-condition  =>  TRUE
[01:00:45.102]      // while "1"  (timeout="200")
[01:00:45.102]      // while-condition  =>  TRUE
[01:00:45.102]      // while "1"  (timeout="200")
[01:00:45.102]      // while-condition  =>  TRUE
[01:00:45.102]      // while "1"  (timeout="200")
[01:00:45.102]      // while-condition  =>  TRUE
[01:00:45.102]      // while "1"  (timeout="200")
[01:00:45.102]      // while-condition  =>  TRUE
[01:00:45.102]      // while "1"  (timeout="200")
[01:00:45.102]      // while-condition  =>  TRUE
[01:00:45.103]      // while "1"  (timeout="200")
[01:00:45.103]      // while-condition  =>  TRUE
[01:00:45.103]      // while "1"  (timeout="200")
[01:00:45.103]      // while-condition  =>  TRUE
[01:00:45.103]      // while "1"  (timeout="200")
[01:00:45.103]      // while-condition  =>  TRUE
[01:00:45.104]      // while "1"  (timeout="200")
[01:00:45.105]      // while-condition  =>  TRUE
[01:00:45.105]      // while "1"  (timeout="200")
[01:00:45.105]      // while-condition  =>  TRUE
[01:00:45.105]      // while "1"  (timeout="200")
[01:00:45.105]      // while-condition  =>  TRUE
[01:00:45.105]      // while "1"  (timeout="200")
[01:00:45.105]      // while-condition  =>  TRUE
[01:00:45.105]      // while "1"  (timeout="200")
[01:00:45.105]      // while-condition  =>  TRUE
[01:00:45.105]      // while "1"  (timeout="200")
[01:00:45.105]      // while-condition  =>  TRUE
[01:00:45.106]      // while "1"  (timeout="200")
[01:00:45.106]      // while-condition  =>  TRUE
[01:00:45.106]      // while "1"  (timeout="200")
[01:00:45.106]      // while-condition  =>  TRUE
[01:00:45.106]      // while "1"  (timeout="200")
[01:00:45.106]      // while-condition  =>  TRUE
[01:00:45.106]      // while "1"  (timeout="200")
[01:00:45.106]      // while-condition  =>  TRUE
[01:00:45.106]      // while "1"  (timeout="200")
[01:00:45.106]      // while-condition  =>  TRUE
[01:00:45.106]      // while "1"  (timeout="200")
[01:00:45.107]      // while-condition  =>  TRUE
[01:00:45.107]      // while "1"  (timeout="200")
[01:00:45.107]      // while-condition  =>  TRUE
[01:00:45.107]      // while "1"  (timeout="200")
[01:00:45.107]      // while-condition  =>  TRUE
[01:00:45.107]      // while "1"  (timeout="200")
[01:00:45.107]      // while-condition  =>  TRUE
[01:00:45.107]      // while "1"  (timeout="200")
[01:00:45.107]      // while-condition  =>  TRUE
[01:00:45.108]      // while "1"  (timeout="200")
[01:00:45.108]      // while-condition  =>  TRUE
[01:00:45.108]      // while "1"  (timeout="200")
[01:00:45.108]      // while-condition  =>  TRUE
[01:00:45.108]      // while "1"  (timeout="200")
[01:00:45.108]      // while-condition  =>  TRUE
[01:00:45.108]      // while "1"  (timeout="200")
[01:00:45.108]      // while-condition  =>  TRUE
[01:00:45.108]      // while "1"  (timeout="200")
[01:00:45.108]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.109]      // while "1"  (timeout="200")
[01:00:45.109]      // while-condition  =>  TRUE
[01:00:45.110]      // while "1"  (timeout="200")
[01:00:45.110]      // while  =>  TIMEOUT
[01:00:45.110]      // end while "1"
[01:00:45.110]    </control>
[01:00:45.110]    <control if="canReadPins" while="" timeout="0" info="">
[01:00:45.111]      // if-block "canReadPins"
[01:00:45.111]        // =>  TRUE
[01:00:45.111]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:00:45.111]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:00:45.117]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:00:45.117]        // while-condition  =>  FALSE
[01:00:45.117]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:00:45.119]      </control>
[01:00:45.119]      // end if-block "canReadPins"
[01:00:45.119]    </control>
[01:00:45.119]    <control if="!canReadPins" while="" timeout="0" info="">
[01:00:45.119]      // if-block "!canReadPins"
[01:00:45.119]        // =>  FALSE
[01:00:45.119]      // skip if-block "!canReadPins"
[01:00:45.119]    </control>
[01:00:45.119]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:00:45.119]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:45.119]        // =>  TRUE
[01:00:45.119]      <block atomic="false" info="">
[01:00:45.119]        WriteAP(0x00, 0x190008);
[01:00:45.123]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:45.123]        WriteAP(0xF0, 0x01);
[01:00:45.132]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:45.132]      </block>
[01:00:45.132]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:45.132]    </control>
[01:00:45.133]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:00:45.133]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:45.133]        // =>  FALSE
[01:00:45.133]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:45.133]    </control>
[01:00:45.133]    <block atomic="false" info="">
[01:00:45.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:45.140]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:00:45.140]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:00:45.140]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:45.142]      __ap = 0; //lets make sure we reset the access point selection
[01:00:45.142]        // -> [__ap <= 0x00000000]
[01:00:45.142]    </block>
[01:00:45.142]  </sequence>
[01:00:45.143]  
[01:00:45.198]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:45.198]  
[01:00:45.198]  <debugvars>
[01:00:45.199]    // Pre-defined
[01:00:45.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:45.199]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:00:45.199]    __dp=0x00000000
[01:00:45.199]    __ap=0x00000000
[01:00:45.199]    __traceout=0x00000000      (Trace Disabled)
[01:00:45.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:45.199]    __FlashAddr=0x00000000
[01:00:45.200]    __FlashLen=0x00000000
[01:00:45.200]    __FlashArg=0x00000000
[01:00:45.200]    __FlashOp=0x00000000
[01:00:45.200]    __Result=0x00000000
[01:00:45.200]  </debugvars>
[01:00:45.200]  
[01:00:45.200]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:45.200]    <block atomic="false" info="">
[01:00:45.200]      __var deviceID = 0;
[01:00:45.201]        // -> [deviceID <= 0x00000000]
[01:00:45.201]      __var version = 0;
[01:00:45.201]        // -> [version <= 0x00000000]
[01:00:45.201]      __var partNum = 0;
[01:00:45.201]        // -> [partNum <= 0x00000000]
[01:00:45.201]      __var manuf = 0;
[01:00:45.201]        // -> [manuf <= 0x00000000]
[01:00:45.201]      __var isMSPM0G1X0X_G3X0X = 0;
[01:00:45.201]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:00:45.201]      __var isProduction = 0;
[01:00:45.201]        // -> [isProduction <= 0x00000000]
[01:00:45.202]      __var continueId = 0;
[01:00:45.202]        // -> [continueId <= 0x00000000]
[01:00:45.202]      deviceID =   Read32(0x41C40004);
[01:00:45.219]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:00:45.219]        // -> [deviceID <= 0x2BB8802F]
[01:00:45.219]      version = deviceID >> 28;
[01:00:45.219]        // -> [version <= 0x00000002]
[01:00:45.220]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:00:45.220]        // -> [partNum <= 0x0000BB88]
[01:00:45.220]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:00:45.220]        // -> [manuf <= 0x00000017]
[01:00:45.220]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:00:45.220]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:00:45.220]      isProduction = (version > 0);
[01:00:45.220]        // -> [isProduction <= 0x00000001]
[01:00:45.220]    </block>
[01:00:45.221]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:00:45.221]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:00:45.221]        // =>  FALSE
[01:00:45.221]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:00:45.221]    </control>
[01:00:45.221]    <control if="continueId == 4" while="" timeout="0" info="">
[01:00:45.221]      // if-block "continueId == 4"
[01:00:45.221]        // =>  FALSE
[01:00:45.221]      // skip if-block "continueId == 4"
[01:00:45.221]    </control>
[01:00:45.222]    <control if="!isProduction" while="" timeout="0" info="">
[01:00:45.222]      // if-block "!isProduction"
[01:00:45.222]        // =>  FALSE
[01:00:45.222]      // skip if-block "!isProduction"
[01:00:45.222]    </control>
[01:00:45.222]  </sequence>
[01:00:45.223]  
[01:05:22.565]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:05:22.565]  
[01:05:22.575]  <debugvars>
[01:05:22.575]    // Pre-defined
[01:05:22.575]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:05:22.575]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:05:22.575]    __dp=0x00000000
[01:05:22.575]    __ap=0x00000000
[01:05:22.575]    __traceout=0x00000000      (Trace Disabled)
[01:05:22.575]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:05:22.575]    __FlashAddr=0x00000000
[01:05:22.575]    __FlashLen=0x00000000
[01:05:22.575]    __FlashArg=0x00000000
[01:05:22.577]    __FlashOp=0x00000000
[01:05:22.577]    __Result=0x00000000
[01:05:22.577]  </debugvars>
[01:05:22.577]  
[01:05:22.577]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:05:22.577]    <block atomic="false" info="">
[01:05:22.577]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:05:22.577]        // -> [isSWJ <= 0x00000001]
[01:05:22.577]      __var hasDormant = __protocol & 0x00020000;
[01:05:22.577]        // -> [hasDormant <= 0x00000000]
[01:05:22.578]      __var protType   = __protocol & 0x0000FFFF;
[01:05:22.578]        // -> [protType <= 0x00000002]
[01:05:22.578]    </block>
[01:05:22.578]    <control if="protType == 1" while="" timeout="0" info="">
[01:05:22.578]      // if-block "protType == 1"
[01:05:22.578]        // =>  FALSE
[01:05:22.579]      // skip if-block "protType == 1"
[01:05:22.579]    </control>
[01:05:22.579]    <control if="protType == 2" while="" timeout="0" info="">
[01:05:22.579]      // if-block "protType == 2"
[01:05:22.579]        // =>  TRUE
[01:05:22.579]      <control if="isSWJ" while="" timeout="0" info="">
[01:05:22.579]        // if-block "isSWJ"
[01:05:22.579]          // =>  TRUE
[01:05:22.579]        <control if="hasDormant" while="" timeout="0" info="">
[01:05:22.580]          // if-block "hasDormant"
[01:05:22.580]            // =>  FALSE
[01:05:22.580]          // skip if-block "hasDormant"
[01:05:22.580]        </control>
[01:05:22.580]        <control if="!hasDormant" while="" timeout="0" info="">
[01:05:22.580]          // if-block "!hasDormant"
[01:05:22.580]            // =>  TRUE
[01:05:22.580]          <block atomic="false" info="">
[01:05:22.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:05:22.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:05:22.584]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:05:22.589]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:05:22.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:05:22.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:05:22.595]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:05:22.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:05:22.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:05:22.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:05:22.610]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:05:22.617]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:05:22.618]          </block>
[01:05:22.618]          // end if-block "!hasDormant"
[01:05:22.618]        </control>
[01:05:22.618]        // end if-block "isSWJ"
[01:05:22.618]      </control>
[01:05:22.618]      <control if="!isSWJ" while="" timeout="0" info="">
[01:05:22.618]        // if-block "!isSWJ"
[01:05:22.619]          // =>  FALSE
[01:05:22.619]        // skip if-block "!isSWJ"
[01:05:22.619]      </control>
[01:05:22.619]      <block atomic="false" info="">
[01:05:22.619]        ReadDP(0x0);
[01:05:22.624]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:05:22.625]      </block>
[01:05:22.625]      // end if-block "protType == 2"
[01:05:22.625]    </control>
[01:05:22.625]  </sequence>
[01:05:22.625]  
[01:05:22.639]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:05:22.639]  
[01:05:22.640]  <debugvars>
[01:05:22.640]    // Pre-defined
[01:05:22.640]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:05:22.640]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:05:22.640]    __dp=0x00000000
[01:05:22.640]    __ap=0x00000000
[01:05:22.640]    __traceout=0x00000000      (Trace Disabled)
[01:05:22.640]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:05:22.640]    __FlashAddr=0x00000000
[01:05:22.642]    __FlashLen=0x00000000
[01:05:22.642]    __FlashArg=0x00000000
[01:05:22.642]    __FlashOp=0x00000000
[01:05:22.642]    __Result=0x00000000
[01:05:22.642]  </debugvars>
[01:05:22.642]  
[01:05:22.642]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:05:22.642]    <block atomic="false" info="">
[01:05:22.642]      __var SW_DP_ABORT       = 0x0;
[01:05:22.642]        // -> [SW_DP_ABORT <= 0x00000000]
[01:05:22.643]      __var DP_CTRL_STAT      = 0x4;
[01:05:22.643]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:05:22.643]      __var DP_SELECT         = 0x8;
[01:05:22.643]        // -> [DP_SELECT <= 0x00000008]
[01:05:22.643]      __var powered_down      = 0;
[01:05:22.643]        // -> [powered_down <= 0x00000000]
[01:05:22.643]      WriteDP(DP_SELECT, 0x00000000);
[01:05:22.652]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:05:22.653]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:05:22.656]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:05:22.656]        // -> [powered_down <= 0x00000001]
[01:05:22.657]    </block>
[01:05:22.657]    <control if="powered_down" while="" timeout="0" info="">
[01:05:22.657]      // if-block "powered_down"
[01:05:22.657]        // =>  TRUE
[01:05:22.657]      <block atomic="false" info="">
[01:05:22.657]        Message(0, "Debug/System power-up request sent");
[01:05:22.657]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:05:22.666]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:05:22.666]      </block>
[01:05:22.667]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:05:22.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:05:22.680]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:05:22.680]        // while-condition  =>  FALSE
[01:05:22.680]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:05:22.680]      </control>
[01:05:22.681]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:05:22.681]        // if-block "(__protocol & 0xFFFF) == 1"
[01:05:22.681]          // =>  FALSE
[01:05:22.681]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:05:22.681]      </control>
[01:05:22.681]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:05:22.681]        // if-block "(__protocol & 0xFFFF) == 2"
[01:05:22.681]          // =>  TRUE
[01:05:22.681]        <block atomic="false" info="">
[01:05:22.681]          Message(0, "executing SWD power up");
[01:05:22.683]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:05:22.697]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:05:22.697]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:05:22.702]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:05:22.702]        </block>
[01:05:22.703]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:05:22.703]      </control>
[01:05:22.703]      // end if-block "powered_down"
[01:05:22.703]    </control>
[01:05:22.703]    <block atomic="false" info="">
[01:05:22.703]      __var DEBUG_PORT_VAL    = 0;
[01:05:22.703]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:05:22.704]      __var ACCESS_POINT_VAL  = 0;
[01:05:22.704]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:05:22.704]      __ap = 1; 
[01:05:22.704]        // -> [__ap <= 0x00000001]
[01:05:22.704]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:05:22.717]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:05:22.718]      __ap = 4;
[01:05:22.718]        // -> [__ap <= 0x00000004]
[01:05:22.718]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:05:22.742]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:05:22.742]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:05:22.742]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:05:22.744]    </block>
[01:05:22.744]    <block atomic="false" info="">
[01:05:22.744]      __var nReset = 0x80;
[01:05:22.744]        // -> [nReset <= 0x00000080]
[01:05:22.744]      __var canReadPins = 0;
[01:05:22.745]        // -> [canReadPins <= 0x00000000]
[01:05:22.745]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:05:22.752]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:05:22.752]        // -> [canReadPins <= 0x00000001]
[01:05:22.752]    </block>
[01:05:22.752]    <control if="" while="1" timeout="200" info="">
[01:05:22.752]      // while "1"  (timeout="200")
[01:05:22.752]      // while-condition  =>  TRUE
[01:05:22.753]      // while "1"  (timeout="200")
[01:05:22.753]      // while-condition  =>  TRUE
[01:05:22.753]      // while "1"  (timeout="200")
[01:05:22.753]      // while-condition  =>  TRUE
[01:05:22.753]      // while "1"  (timeout="200")
[01:05:22.753]      // while-condition  =>  TRUE
[01:05:22.753]      // while "1"  (timeout="200")
[01:05:22.753]      // while-condition  =>  TRUE
[01:05:22.753]      // while "1"  (timeout="200")
[01:05:22.753]      // while-condition  =>  TRUE
[01:05:22.753]      // while "1"  (timeout="200")
[01:05:22.753]      // while-condition  =>  TRUE
[01:05:22.754]      // while "1"  (timeout="200")
[01:05:22.754]      // while-condition  =>  TRUE
[01:05:22.754]      // while "1"  (timeout="200")
[01:05:22.754]      // while-condition  =>  TRUE
[01:05:22.754]      // while "1"  (timeout="200")
[01:05:22.754]      // while-condition  =>  TRUE
[01:05:22.754]      // while "1"  (timeout="200")
[01:05:22.754]      // while-condition  =>  TRUE
[01:05:22.754]      // while "1"  (timeout="200")
[01:05:22.754]      // while-condition  =>  TRUE
[01:05:22.754]      // while "1"  (timeout="200")
[01:05:22.755]      // while-condition  =>  TRUE
[01:05:22.755]      // while "1"  (timeout="200")
[01:05:22.755]      // while-condition  =>  TRUE
[01:05:22.755]      // while "1"  (timeout="200")
[01:05:22.755]      // while-condition  =>  TRUE
[01:05:22.755]      // while "1"  (timeout="200")
[01:05:22.755]      // while-condition  =>  TRUE
[01:05:22.755]      // while "1"  (timeout="200")
[01:05:22.755]      // while-condition  =>  TRUE
[01:05:22.755]      // while "1"  (timeout="200")
[01:05:22.755]      // while-condition  =>  TRUE
[01:05:22.755]      // while "1"  (timeout="200")
[01:05:22.756]      // while-condition  =>  TRUE
[01:05:22.756]      // while "1"  (timeout="200")
[01:05:22.756]      // while-condition  =>  TRUE
[01:05:22.756]      // while "1"  (timeout="200")
[01:05:22.756]      // while-condition  =>  TRUE
[01:05:22.756]      // while "1"  (timeout="200")
[01:05:22.756]      // while-condition  =>  TRUE
[01:05:22.756]      // while "1"  (timeout="200")
[01:05:22.756]      // while-condition  =>  TRUE
[01:05:22.756]      // while "1"  (timeout="200")
[01:05:22.756]      // while-condition  =>  TRUE
[01:05:22.756]      // while "1"  (timeout="200")
[01:05:22.757]      // while-condition  =>  TRUE
[01:05:22.757]      // while "1"  (timeout="200")
[01:05:22.757]      // while-condition  =>  TRUE
[01:05:22.757]      // while "1"  (timeout="200")
[01:05:22.757]      // while-condition  =>  TRUE
[01:05:22.757]      // while "1"  (timeout="200")
[01:05:22.757]      // while-condition  =>  TRUE
[01:05:22.757]      // while "1"  (timeout="200")
[01:05:22.758]      // while-condition  =>  TRUE
[01:05:22.758]      // while "1"  (timeout="200")
[01:05:22.758]      // while-condition  =>  TRUE
[01:05:22.758]      // while "1"  (timeout="200")
[01:05:22.758]      // while-condition  =>  TRUE
[01:05:22.758]      // while "1"  (timeout="200")
[01:05:22.758]      // while-condition  =>  TRUE
[01:05:22.758]      // while "1"  (timeout="200")
[01:05:22.760]      // while-condition  =>  TRUE
[01:05:22.760]      // while "1"  (timeout="200")
[01:05:22.760]      // while-condition  =>  TRUE
[01:05:22.760]      // while "1"  (timeout="200")
[01:05:22.760]      // while-condition  =>  TRUE
[01:05:22.760]      // while "1"  (timeout="200")
[01:05:22.760]      // while-condition  =>  TRUE
[01:05:22.760]      // while "1"  (timeout="200")
[01:05:22.760]      // while-condition  =>  TRUE
[01:05:22.760]      // while "1"  (timeout="200")
[01:05:22.761]      // while-condition  =>  TRUE
[01:05:22.761]      // while "1"  (timeout="200")
[01:05:22.761]      // while-condition  =>  TRUE
[01:05:22.761]      // while "1"  (timeout="200")
[01:05:22.761]      // while-condition  =>  TRUE
[01:05:22.761]      // while "1"  (timeout="200")
[01:05:22.761]      // while-condition  =>  TRUE
[01:05:22.761]      // while "1"  (timeout="200")
[01:05:22.761]      // while-condition  =>  TRUE
[01:05:22.761]      // while "1"  (timeout="200")
[01:05:22.761]      // while-condition  =>  TRUE
[01:05:22.762]      // while "1"  (timeout="200")
[01:05:22.762]      // while-condition  =>  TRUE
[01:05:22.762]      // while "1"  (timeout="200")
[01:05:22.762]      // while-condition  =>  TRUE
[01:05:22.762]      // while "1"  (timeout="200")
[01:05:22.762]      // while-condition  =>  TRUE
[01:05:22.762]      // while "1"  (timeout="200")
[01:05:22.762]      // while-condition  =>  TRUE
[01:05:22.762]      // while "1"  (timeout="200")
[01:05:22.762]      // while-condition  =>  TRUE
[01:05:22.763]      // while "1"  (timeout="200")
[01:05:22.763]      // while-condition  =>  TRUE
[01:05:22.763]      // while "1"  (timeout="200")
[01:05:22.763]      // while-condition  =>  TRUE
[01:05:22.763]      // while "1"  (timeout="200")
[01:05:22.763]      // while-condition  =>  TRUE
[01:05:22.763]      // while "1"  (timeout="200")
[01:05:22.763]      // while-condition  =>  TRUE
[01:05:22.763]      // while "1"  (timeout="200")
[01:05:22.763]      // while-condition  =>  TRUE
[01:05:22.763]      // while "1"  (timeout="200")
[01:05:22.763]      // while-condition  =>  TRUE
[01:05:22.764]      // while "1"  (timeout="200")
[01:05:22.764]      // while-condition  =>  TRUE
[01:05:22.764]      // while "1"  (timeout="200")
[01:05:22.764]      // while-condition  =>  TRUE
[01:05:22.764]      // while "1"  (timeout="200")
[01:05:22.764]      // while-condition  =>  TRUE
[01:05:22.764]      // while "1"  (timeout="200")
[01:05:22.764]      // while-condition  =>  TRUE
[01:05:22.764]      // while "1"  (timeout="200")
[01:05:22.764]      // while-condition  =>  TRUE
[01:05:22.764]      // while "1"  (timeout="200")
[01:05:22.765]      // while-condition  =>  TRUE
[01:05:22.765]      // while "1"  (timeout="200")
[01:05:22.765]      // while-condition  =>  TRUE
[01:05:22.765]      // while "1"  (timeout="200")
[01:05:22.765]      // while-condition  =>  TRUE
[01:05:22.765]      // while "1"  (timeout="200")
[01:05:22.765]      // while-condition  =>  TRUE
[01:05:22.765]      // while "1"  (timeout="200")
[01:05:22.765]      // while-condition  =>  TRUE
[01:05:22.766]      // while "1"  (timeout="200")
[01:05:22.766]      // while  =>  TIMEOUT
[01:05:22.766]      // end while "1"
[01:05:22.766]    </control>
[01:05:22.766]    <control if="canReadPins" while="" timeout="0" info="">
[01:05:22.766]      // if-block "canReadPins"
[01:05:22.766]        // =>  TRUE
[01:05:22.767]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:05:22.767]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:05:22.769]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:05:22.770]        // while-condition  =>  FALSE
[01:05:22.770]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:05:22.770]      </control>
[01:05:22.770]      // end if-block "canReadPins"
[01:05:22.770]    </control>
[01:05:22.770]    <control if="!canReadPins" while="" timeout="0" info="">
[01:05:22.770]      // if-block "!canReadPins"
[01:05:22.770]        // =>  FALSE
[01:05:22.770]      // skip if-block "!canReadPins"
[01:05:22.770]    </control>
[01:05:22.770]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:05:22.771]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:05:22.771]        // =>  TRUE
[01:05:22.771]      <block atomic="false" info="">
[01:05:22.771]        WriteAP(0x00, 0x190008);
[01:05:22.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:05:22.775]        WriteAP(0xF0, 0x01);
[01:05:22.803]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:05:22.803]      </block>
[01:05:22.803]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:05:22.804]    </control>
[01:05:22.804]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:05:22.804]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:05:22.804]        // =>  FALSE
[01:05:22.804]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:05:22.804]    </control>
[01:05:22.804]    <block atomic="false" info="">
[01:05:22.804]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:05:22.811]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:05:22.811]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:05:22.811]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:05:22.813]      __ap = 0; //lets make sure we reset the access point selection
[01:05:22.813]        // -> [__ap <= 0x00000000]
[01:05:22.813]    </block>
[01:05:22.813]  </sequence>
[01:05:22.814]  
[01:05:22.883]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:05:22.883]  
[01:05:22.884]  <debugvars>
[01:05:22.884]    // Pre-defined
[01:05:22.884]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:05:22.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:05:22.885]    __dp=0x00000000
[01:05:22.885]    __ap=0x00000000
[01:05:22.885]    __traceout=0x00000000      (Trace Disabled)
[01:05:22.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:05:22.885]    __FlashAddr=0x00000000
[01:05:22.885]    __FlashLen=0x00000000
[01:05:22.885]    __FlashArg=0x00000000
[01:05:22.886]    __FlashOp=0x00000000
[01:05:22.886]    __Result=0x00000000
[01:05:22.886]  </debugvars>
[01:05:22.886]  
[01:05:22.886]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:05:22.886]    <block atomic="false" info="">
[01:05:22.886]      __var deviceID = 0;
[01:05:22.886]        // -> [deviceID <= 0x00000000]
[01:05:22.886]      __var version = 0;
[01:05:22.887]        // -> [version <= 0x00000000]
[01:05:22.887]      __var partNum = 0;
[01:05:22.887]        // -> [partNum <= 0x00000000]
[01:05:22.887]      __var manuf = 0;
[01:05:22.887]        // -> [manuf <= 0x00000000]
[01:05:22.887]      __var isMSPM0G1X0X_G3X0X = 0;
[01:05:22.887]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:05:22.888]      __var isProduction = 0;
[01:05:22.888]        // -> [isProduction <= 0x00000000]
[01:05:22.888]      __var continueId = 0;
[01:05:22.889]        // -> [continueId <= 0x00000000]
[01:05:22.889]      deviceID =   Read32(0x41C40004);
[01:05:22.905]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:05:22.906]        // -> [deviceID <= 0x2BB8802F]
[01:05:22.906]      version = deviceID >> 28;
[01:05:22.906]        // -> [version <= 0x00000002]
[01:05:22.906]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:05:22.906]        // -> [partNum <= 0x0000BB88]
[01:05:22.906]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:05:22.906]        // -> [manuf <= 0x00000017]
[01:05:22.906]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:05:22.906]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:05:22.906]      isProduction = (version > 0);
[01:05:22.907]        // -> [isProduction <= 0x00000001]
[01:05:22.907]    </block>
[01:05:22.907]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:05:22.907]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:05:22.907]        // =>  FALSE
[01:05:22.907]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:05:22.907]    </control>
[01:05:22.907]    <control if="continueId == 4" while="" timeout="0" info="">
[01:05:22.907]      // if-block "continueId == 4"
[01:05:22.907]        // =>  FALSE
[01:05:22.908]      // skip if-block "continueId == 4"
[01:05:22.908]    </control>
[01:05:22.908]    <control if="!isProduction" while="" timeout="0" info="">
[01:05:22.908]      // if-block "!isProduction"
[01:05:22.908]        // =>  FALSE
[01:05:22.908]      // skip if-block "!isProduction"
[01:05:22.908]    </control>
[01:05:22.908]  </sequence>
[01:05:22.908]  
[01:05:32.096]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:05:32.096]  
[01:05:32.104]  <debugvars>
[01:05:32.104]    // Pre-defined
[01:05:32.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:05:32.104]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:05:32.104]    __dp=0x00000000
[01:05:32.105]    __ap=0x00000000
[01:05:32.105]    __traceout=0x00000000      (Trace Disabled)
[01:05:32.105]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:05:32.105]    __FlashAddr=0x00000000
[01:05:32.105]    __FlashLen=0x00000000
[01:05:32.105]    __FlashArg=0x00000000
[01:05:32.105]    __FlashOp=0x00000000
[01:05:32.105]    __Result=0x00000000
[01:05:32.105]  </debugvars>
[01:05:32.105]  
[01:05:32.105]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:05:32.105]    <block atomic="false" info="">
[01:05:32.106]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:05:32.106]        // -> [isSWJ <= 0x00000001]
[01:05:32.106]      __var hasDormant = __protocol & 0x00020000;
[01:05:32.106]        // -> [hasDormant <= 0x00000000]
[01:05:32.106]      __var protType   = __protocol & 0x0000FFFF;
[01:05:32.106]        // -> [protType <= 0x00000002]
[01:05:32.106]    </block>
[01:05:32.106]    <control if="protType == 1" while="" timeout="0" info="">
[01:05:32.107]      // if-block "protType == 1"
[01:05:32.107]        // =>  FALSE
[01:05:32.107]      // skip if-block "protType == 1"
[01:05:32.107]    </control>
[01:05:32.107]    <control if="protType == 2" while="" timeout="0" info="">
[01:05:32.107]      // if-block "protType == 2"
[01:05:32.107]        // =>  TRUE
[01:05:32.107]      <control if="isSWJ" while="" timeout="0" info="">
[01:05:32.107]        // if-block "isSWJ"
[01:05:32.107]          // =>  TRUE
[01:05:32.107]        <control if="hasDormant" while="" timeout="0" info="">
[01:05:32.107]          // if-block "hasDormant"
[01:05:32.107]            // =>  FALSE
[01:05:32.107]          // skip if-block "hasDormant"
[01:05:32.107]        </control>
[01:05:32.107]        <control if="!hasDormant" while="" timeout="0" info="">
[01:05:32.107]          // if-block "!hasDormant"
[01:05:32.107]            // =>  TRUE
[01:05:32.109]          <block atomic="false" info="">
[01:05:32.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:05:32.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:05:32.113]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:05:32.117]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:05:32.117]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:05:32.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:05:32.120]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:05:32.125]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:05:32.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:05:32.128]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:05:32.128]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:05:32.133]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:05:32.135]          </block>
[01:05:32.135]          // end if-block "!hasDormant"
[01:05:32.135]        </control>
[01:05:32.135]        // end if-block "isSWJ"
[01:05:32.135]      </control>
[01:05:32.135]      <control if="!isSWJ" while="" timeout="0" info="">
[01:05:32.136]        // if-block "!isSWJ"
[01:05:32.136]          // =>  FALSE
[01:05:32.136]        // skip if-block "!isSWJ"
[01:05:32.137]      </control>
[01:05:32.137]      <block atomic="false" info="">
[01:05:32.137]        ReadDP(0x0);
[01:05:32.140]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:05:32.140]      </block>
[01:05:32.140]      // end if-block "protType == 2"
[01:05:32.140]    </control>
[01:05:32.141]  </sequence>
[01:05:32.141]  
[01:05:32.147]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:05:32.147]  
[01:05:32.149]  <debugvars>
[01:05:32.149]    // Pre-defined
[01:05:32.149]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:05:32.149]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:05:32.149]    __dp=0x00000000
[01:05:32.149]    __ap=0x00000000
[01:05:32.150]    __traceout=0x00000000      (Trace Disabled)
[01:05:32.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:05:32.150]    __FlashAddr=0x00000000
[01:05:32.150]    __FlashLen=0x00000000
[01:05:32.150]    __FlashArg=0x00000000
[01:05:32.150]    __FlashOp=0x00000000
[01:05:32.150]    __Result=0x00000000
[01:05:32.150]  </debugvars>
[01:05:32.150]  
[01:05:32.150]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:05:32.150]    <block atomic="false" info="">
[01:05:32.150]      __var SW_DP_ABORT       = 0x0;
[01:05:32.150]        // -> [SW_DP_ABORT <= 0x00000000]
[01:05:32.151]      __var DP_CTRL_STAT      = 0x4;
[01:05:32.151]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:05:32.151]      __var DP_SELECT         = 0x8;
[01:05:32.151]        // -> [DP_SELECT <= 0x00000008]
[01:05:32.151]      __var powered_down      = 0;
[01:05:32.151]        // -> [powered_down <= 0x00000000]
[01:05:32.151]      WriteDP(DP_SELECT, 0x00000000);
[01:05:32.156]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:05:32.157]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:05:32.160]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:05:32.161]        // -> [powered_down <= 0x00000001]
[01:05:32.161]    </block>
[01:05:32.161]    <control if="powered_down" while="" timeout="0" info="">
[01:05:32.161]      // if-block "powered_down"
[01:05:32.161]        // =>  TRUE
[01:05:32.161]      <block atomic="false" info="">
[01:05:32.161]        Message(0, "Debug/System power-up request sent");
[01:05:32.165]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:05:32.173]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:05:32.173]      </block>
[01:05:32.173]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:05:32.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:05:32.182]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:05:32.182]        // while-condition  =>  FALSE
[01:05:32.182]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:05:32.182]      </control>
[01:05:32.183]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:05:32.183]        // if-block "(__protocol & 0xFFFF) == 1"
[01:05:32.183]          // =>  FALSE
[01:05:32.183]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:05:32.183]      </control>
[01:05:32.183]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:05:32.183]        // if-block "(__protocol & 0xFFFF) == 2"
[01:05:32.183]          // =>  TRUE
[01:05:32.183]        <block atomic="false" info="">
[01:05:32.184]          Message(0, "executing SWD power up");
[01:05:32.187]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:05:32.191]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:05:32.191]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:05:32.196]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:05:32.196]        </block>
[01:05:32.196]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:05:32.196]      </control>
[01:05:32.196]      // end if-block "powered_down"
[01:05:32.196]    </control>
[01:05:32.197]    <block atomic="false" info="">
[01:05:32.197]      __var DEBUG_PORT_VAL    = 0;
[01:05:32.197]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:05:32.197]      __var ACCESS_POINT_VAL  = 0;
[01:05:32.197]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:05:32.197]      __ap = 1; 
[01:05:32.197]        // -> [__ap <= 0x00000001]
[01:05:32.197]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:05:32.208]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:05:32.208]      __ap = 4;
[01:05:32.209]        // -> [__ap <= 0x00000004]
[01:05:32.209]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:05:32.217]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:05:32.217]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:05:32.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:05:32.220]    </block>
[01:05:32.220]    <block atomic="false" info="">
[01:05:32.221]      __var nReset = 0x80;
[01:05:32.221]        // -> [nReset <= 0x00000080]
[01:05:32.221]      __var canReadPins = 0;
[01:05:32.221]        // -> [canReadPins <= 0x00000000]
[01:05:32.221]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:05:32.227]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:05:32.227]        // -> [canReadPins <= 0x00000001]
[01:05:32.227]    </block>
[01:05:32.228]    <control if="" while="1" timeout="200" info="">
[01:05:32.228]      // while "1"  (timeout="200")
[01:05:32.228]      // while-condition  =>  TRUE
[01:05:32.228]      // while "1"  (timeout="200")
[01:05:32.228]      // while-condition  =>  TRUE
[01:05:32.228]      // while "1"  (timeout="200")
[01:05:32.228]      // while-condition  =>  TRUE
[01:05:32.229]      // while "1"  (timeout="200")
[01:05:32.229]      // while-condition  =>  TRUE
[01:05:32.229]      // while "1"  (timeout="200")
[01:05:32.229]      // while-condition  =>  TRUE
[01:05:32.229]      // while "1"  (timeout="200")
[01:05:32.229]      // while-condition  =>  TRUE
[01:05:32.229]      // while "1"  (timeout="200")
[01:05:32.229]      // while-condition  =>  TRUE
[01:05:32.229]      // while "1"  (timeout="200")
[01:05:32.229]      // while-condition  =>  TRUE
[01:05:32.229]      // while "1"  (timeout="200")
[01:05:32.230]      // while-condition  =>  TRUE
[01:05:32.230]      // while "1"  (timeout="200")
[01:05:32.230]      // while-condition  =>  TRUE
[01:05:32.230]      // while "1"  (timeout="200")
[01:05:32.230]      // while-condition  =>  TRUE
[01:05:32.230]      // while "1"  (timeout="200")
[01:05:32.231]      // while-condition  =>  TRUE
[01:05:32.231]      // while "1"  (timeout="200")
[01:05:32.231]      // while-condition  =>  TRUE
[01:05:32.231]      // while "1"  (timeout="200")
[01:05:32.231]      // while-condition  =>  TRUE
[01:05:32.231]      // while "1"  (timeout="200")
[01:05:32.231]      // while-condition  =>  TRUE
[01:05:32.231]      // while "1"  (timeout="200")
[01:05:32.232]      // while-condition  =>  TRUE
[01:05:32.232]      // while "1"  (timeout="200")
[01:05:32.232]      // while-condition  =>  TRUE
[01:05:32.232]      // while "1"  (timeout="200")
[01:05:32.233]      // while-condition  =>  TRUE
[01:05:32.233]      // while "1"  (timeout="200")
[01:05:32.233]      // while-condition  =>  TRUE
[01:05:32.233]      // while "1"  (timeout="200")
[01:05:32.233]      // while-condition  =>  TRUE
[01:05:32.233]      // while "1"  (timeout="200")
[01:05:32.233]      // while-condition  =>  TRUE
[01:05:32.233]      // while "1"  (timeout="200")
[01:05:32.233]      // while-condition  =>  TRUE
[01:05:32.234]      // while "1"  (timeout="200")
[01:05:32.234]      // while-condition  =>  TRUE
[01:05:32.234]      // while "1"  (timeout="200")
[01:05:32.234]      // while-condition  =>  TRUE
[01:05:32.234]      // while "1"  (timeout="200")
[01:05:32.234]      // while  =>  TIMEOUT
[01:05:32.235]      // end while "1"
[01:05:32.235]    </control>
[01:05:32.235]    <control if="canReadPins" while="" timeout="0" info="">
[01:05:32.235]      // if-block "canReadPins"
[01:05:32.235]        // =>  TRUE
[01:05:32.235]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:05:32.235]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:05:32.238]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:05:32.238]        // while-condition  =>  FALSE
[01:05:32.238]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:05:32.238]      </control>
[01:05:32.239]      // end if-block "canReadPins"
[01:05:32.239]    </control>
[01:05:32.239]    <control if="!canReadPins" while="" timeout="0" info="">
[01:05:32.239]      // if-block "!canReadPins"
[01:05:32.239]        // =>  FALSE
[01:05:32.239]      // skip if-block "!canReadPins"
[01:05:32.239]    </control>
[01:05:32.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:05:32.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:05:32.240]        // =>  TRUE
[01:05:32.240]      <block atomic="false" info="">
[01:05:32.240]        WriteAP(0x00, 0x190008);
[01:05:32.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:05:32.243]        WriteAP(0xF0, 0x01);
[01:05:32.254]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:05:32.254]      </block>
[01:05:32.254]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:05:32.254]    </control>
[01:05:32.254]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:05:32.254]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:05:32.254]        // =>  FALSE
[01:05:32.254]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:05:32.255]    </control>
[01:05:32.255]    <block atomic="false" info="">
[01:05:32.255]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:05:32.263]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:05:32.263]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:05:32.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:05:32.265]      __ap = 0; //lets make sure we reset the access point selection
[01:05:32.265]        // -> [__ap <= 0x00000000]
[01:05:32.265]    </block>
[01:05:32.265]  </sequence>
[01:05:32.265]  
[01:05:32.315]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:05:32.315]  
[01:05:32.316]  <debugvars>
[01:05:32.316]    // Pre-defined
[01:05:32.316]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:05:32.316]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:05:32.316]    __dp=0x00000000
[01:05:32.316]    __ap=0x00000000
[01:05:32.316]    __traceout=0x00000000      (Trace Disabled)
[01:05:32.317]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:05:32.317]    __FlashAddr=0x00000000
[01:05:32.317]    __FlashLen=0x00000000
[01:05:32.317]    __FlashArg=0x00000000
[01:05:32.317]    __FlashOp=0x00000000
[01:05:32.317]    __Result=0x00000000
[01:05:32.317]  </debugvars>
[01:05:32.317]  
[01:05:32.317]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:05:32.317]    <block atomic="false" info="">
[01:05:32.318]      __var deviceID = 0;
[01:05:32.318]        // -> [deviceID <= 0x00000000]
[01:05:32.318]      __var version = 0;
[01:05:32.318]        // -> [version <= 0x00000000]
[01:05:32.318]      __var partNum = 0;
[01:05:32.318]        // -> [partNum <= 0x00000000]
[01:05:32.319]      __var manuf = 0;
[01:05:32.319]        // -> [manuf <= 0x00000000]
[01:05:32.319]      __var isMSPM0G1X0X_G3X0X = 0;
[01:05:32.319]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:05:32.319]      __var isProduction = 0;
[01:05:32.319]        // -> [isProduction <= 0x00000000]
[01:05:32.319]      __var continueId = 0;
[01:05:32.319]        // -> [continueId <= 0x00000000]
[01:05:32.319]      deviceID =   Read32(0x41C40004);
[01:05:32.329]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:05:32.329]        // -> [deviceID <= 0x2BB8802F]
[01:05:32.329]      version = deviceID >> 28;
[01:05:32.329]        // -> [version <= 0x00000002]
[01:05:32.329]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:05:32.329]        // -> [partNum <= 0x0000BB88]
[01:05:32.331]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:05:32.331]        // -> [manuf <= 0x00000017]
[01:05:32.331]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:05:32.331]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:05:32.331]      isProduction = (version > 0);
[01:05:32.331]        // -> [isProduction <= 0x00000001]
[01:05:32.331]    </block>
[01:05:32.331]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:05:32.331]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:05:32.331]        // =>  FALSE
[01:05:32.331]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:05:32.331]    </control>
[01:05:32.331]    <control if="continueId == 4" while="" timeout="0" info="">
[01:05:32.331]      // if-block "continueId == 4"
[01:05:32.331]        // =>  FALSE
[01:05:32.332]      // skip if-block "continueId == 4"
[01:05:32.332]    </control>
[01:05:32.332]    <control if="!isProduction" while="" timeout="0" info="">
[01:05:32.332]      // if-block "!isProduction"
[01:05:32.332]        // =>  FALSE
[01:05:32.332]      // skip if-block "!isProduction"
[01:05:32.332]    </control>
[01:05:32.332]  </sequence>
[01:05:32.332]  
[01:09:01.027]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:09:01.027]  
[01:09:01.035]  <debugvars>
[01:09:01.035]    // Pre-defined
[01:09:01.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:01.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:01.035]    __dp=0x00000000
[01:09:01.035]    __ap=0x00000000
[01:09:01.035]    __traceout=0x00000000      (Trace Disabled)
[01:09:01.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:01.037]    __FlashAddr=0x00000000
[01:09:01.037]    __FlashLen=0x00000000
[01:09:01.037]    __FlashArg=0x00000000
[01:09:01.037]    __FlashOp=0x00000000
[01:09:01.037]    __Result=0x00000000
[01:09:01.037]  </debugvars>
[01:09:01.037]  
[01:09:01.037]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:09:01.037]    <block atomic="false" info="">
[01:09:01.037]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:09:01.037]        // -> [isSWJ <= 0x00000001]
[01:09:01.038]      __var hasDormant = __protocol & 0x00020000;
[01:09:01.038]        // -> [hasDormant <= 0x00000000]
[01:09:01.038]      __var protType   = __protocol & 0x0000FFFF;
[01:09:01.038]        // -> [protType <= 0x00000002]
[01:09:01.038]    </block>
[01:09:01.038]    <control if="protType == 1" while="" timeout="0" info="">
[01:09:01.038]      // if-block "protType == 1"
[01:09:01.038]        // =>  FALSE
[01:09:01.038]      // skip if-block "protType == 1"
[01:09:01.038]    </control>
[01:09:01.038]    <control if="protType == 2" while="" timeout="0" info="">
[01:09:01.039]      // if-block "protType == 2"
[01:09:01.039]        // =>  TRUE
[01:09:01.039]      <control if="isSWJ" while="" timeout="0" info="">
[01:09:01.039]        // if-block "isSWJ"
[01:09:01.039]          // =>  TRUE
[01:09:01.039]        <control if="hasDormant" while="" timeout="0" info="">
[01:09:01.039]          // if-block "hasDormant"
[01:09:01.039]            // =>  FALSE
[01:09:01.039]          // skip if-block "hasDormant"
[01:09:01.040]        </control>
[01:09:01.040]        <control if="!hasDormant" while="" timeout="0" info="">
[01:09:01.040]          // if-block "!hasDormant"
[01:09:01.040]            // =>  TRUE
[01:09:01.040]          <block atomic="false" info="">
[01:09:01.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:09:01.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:01.051]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:09:01.053]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:09:01.053]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:09:01.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:01.058]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:09:01.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:09:01.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:09:01.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:01.068]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:09:01.071]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:09:01.071]          </block>
[01:09:01.071]          // end if-block "!hasDormant"
[01:09:01.071]        </control>
[01:09:01.071]        // end if-block "isSWJ"
[01:09:01.073]      </control>
[01:09:01.073]      <control if="!isSWJ" while="" timeout="0" info="">
[01:09:01.073]        // if-block "!isSWJ"
[01:09:01.073]          // =>  FALSE
[01:09:01.073]        // skip if-block "!isSWJ"
[01:09:01.073]      </control>
[01:09:01.074]      <block atomic="false" info="">
[01:09:01.074]        ReadDP(0x0);
[01:09:01.077]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:09:01.077]      </block>
[01:09:01.077]      // end if-block "protType == 2"
[01:09:01.077]    </control>
[01:09:01.077]  </sequence>
[01:09:01.077]  
[01:09:01.083]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:09:01.083]  
[01:09:01.083]  <debugvars>
[01:09:01.083]    // Pre-defined
[01:09:01.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:01.083]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:01.083]    __dp=0x00000000
[01:09:01.083]    __ap=0x00000000
[01:09:01.083]    __traceout=0x00000000      (Trace Disabled)
[01:09:01.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:01.083]    __FlashAddr=0x00000000
[01:09:01.083]    __FlashLen=0x00000000
[01:09:01.083]    __FlashArg=0x00000000
[01:09:01.083]    __FlashOp=0x00000000
[01:09:01.083]    __Result=0x00000000
[01:09:01.083]  </debugvars>
[01:09:01.083]  
[01:09:01.087]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:09:01.087]    <block atomic="false" info="">
[01:09:01.087]      __var SW_DP_ABORT       = 0x0;
[01:09:01.087]        // -> [SW_DP_ABORT <= 0x00000000]
[01:09:01.087]      __var DP_CTRL_STAT      = 0x4;
[01:09:01.087]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:09:01.087]      __var DP_SELECT         = 0x8;
[01:09:01.087]        // -> [DP_SELECT <= 0x00000008]
[01:09:01.087]      __var powered_down      = 0;
[01:09:01.087]        // -> [powered_down <= 0x00000000]
[01:09:01.087]      WriteDP(DP_SELECT, 0x00000000);
[01:09:01.093]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:09:01.095]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:09:01.098]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:09:01.098]        // -> [powered_down <= 0x00000001]
[01:09:01.099]    </block>
[01:09:01.099]    <control if="powered_down" while="" timeout="0" info="">
[01:09:01.099]      // if-block "powered_down"
[01:09:01.099]        // =>  TRUE
[01:09:01.099]      <block atomic="false" info="">
[01:09:01.099]        Message(0, "Debug/System power-up request sent");
[01:09:01.100]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:09:01.106]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:09:01.107]      </block>
[01:09:01.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:09:01.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:09:01.110]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:09:01.110]        // while-condition  =>  FALSE
[01:09:01.110]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:09:01.111]      </control>
[01:09:01.111]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:09:01.111]        // if-block "(__protocol & 0xFFFF) == 1"
[01:09:01.111]          // =>  FALSE
[01:09:01.112]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:09:01.112]      </control>
[01:09:01.112]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:09:01.112]        // if-block "(__protocol & 0xFFFF) == 2"
[01:09:01.112]          // =>  TRUE
[01:09:01.112]        <block atomic="false" info="">
[01:09:01.112]          Message(0, "executing SWD power up");
[01:09:01.114]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:09:01.120]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:09:01.121]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:09:01.126]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:09:01.126]        </block>
[01:09:01.126]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:09:01.126]      </control>
[01:09:01.126]      // end if-block "powered_down"
[01:09:01.126]    </control>
[01:09:01.126]    <block atomic="false" info="">
[01:09:01.126]      __var DEBUG_PORT_VAL    = 0;
[01:09:01.126]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:09:01.126]      __var ACCESS_POINT_VAL  = 0;
[01:09:01.127]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:09:01.127]      __ap = 1; 
[01:09:01.127]        // -> [__ap <= 0x00000001]
[01:09:01.127]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:09:01.133]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:09:01.133]      __ap = 4;
[01:09:01.133]        // -> [__ap <= 0x00000004]
[01:09:01.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:01.144]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:09:01.144]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:09:01.144]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:01.148]    </block>
[01:09:01.148]    <block atomic="false" info="">
[01:09:01.148]      __var nReset = 0x80;
[01:09:01.149]        // -> [nReset <= 0x00000080]
[01:09:01.149]      __var canReadPins = 0;
[01:09:01.149]        // -> [canReadPins <= 0x00000000]
[01:09:01.149]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:09:01.153]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:09:01.154]        // -> [canReadPins <= 0x00000001]
[01:09:01.154]    </block>
[01:09:01.154]    <control if="" while="1" timeout="200" info="">
[01:09:01.154]      // while "1"  (timeout="200")
[01:09:01.154]      // while-condition  =>  TRUE
[01:09:01.154]      // while "1"  (timeout="200")
[01:09:01.154]      // while-condition  =>  TRUE
[01:09:01.154]      // while "1"  (timeout="200")
[01:09:01.154]      // while-condition  =>  TRUE
[01:09:01.154]      // while "1"  (timeout="200")
[01:09:01.154]      // while-condition  =>  TRUE
[01:09:01.155]      // while "1"  (timeout="200")
[01:09:01.155]      // while-condition  =>  TRUE
[01:09:01.155]      // while "1"  (timeout="200")
[01:09:01.155]      // while-condition  =>  TRUE
[01:09:01.155]      // while "1"  (timeout="200")
[01:09:01.155]      // while-condition  =>  TRUE
[01:09:01.155]      // while "1"  (timeout="200")
[01:09:01.155]      // while-condition  =>  TRUE
[01:09:01.155]      // while "1"  (timeout="200")
[01:09:01.155]      // while-condition  =>  TRUE
[01:09:01.155]      // while "1"  (timeout="200")
[01:09:01.156]      // while-condition  =>  TRUE
[01:09:01.156]      // while "1"  (timeout="200")
[01:09:01.156]      // while  =>  TIMEOUT
[01:09:01.156]      // end while "1"
[01:09:01.156]    </control>
[01:09:01.156]    <control if="canReadPins" while="" timeout="0" info="">
[01:09:01.156]      // if-block "canReadPins"
[01:09:01.156]        // =>  TRUE
[01:09:01.156]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:09:01.156]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:09:01.163]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:09:01.163]        // while-condition  =>  FALSE
[01:09:01.163]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:09:01.163]      </control>
[01:09:01.163]      // end if-block "canReadPins"
[01:09:01.163]    </control>
[01:09:01.163]    <control if="!canReadPins" while="" timeout="0" info="">
[01:09:01.163]      // if-block "!canReadPins"
[01:09:01.163]        // =>  FALSE
[01:09:01.163]      // skip if-block "!canReadPins"
[01:09:01.163]    </control>
[01:09:01.163]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:09:01.163]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:01.163]        // =>  TRUE
[01:09:01.163]      <block atomic="false" info="">
[01:09:01.163]        WriteAP(0x00, 0x190008);
[01:09:01.170]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:01.172]        WriteAP(0xF0, 0x01);
[01:09:01.180]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:01.182]      </block>
[01:09:01.182]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:01.182]    </control>
[01:09:01.182]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:09:01.182]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:01.182]        // =>  FALSE
[01:09:01.182]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:01.182]    </control>
[01:09:01.183]    <block atomic="false" info="">
[01:09:01.183]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:01.189]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:09:01.190]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:09:01.190]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:01.192]      __ap = 0; //lets make sure we reset the access point selection
[01:09:01.192]        // -> [__ap <= 0x00000000]
[01:09:01.193]    </block>
[01:09:01.193]  </sequence>
[01:09:01.193]  
[01:09:01.268]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:09:01.269]  
[01:09:01.269]  <debugvars>
[01:09:01.269]    // Pre-defined
[01:09:01.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:01.269]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:09:01.269]    __dp=0x00000000
[01:09:01.270]    __ap=0x00000000
[01:09:01.270]    __traceout=0x00000000      (Trace Disabled)
[01:09:01.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:01.270]    __FlashAddr=0x00000000
[01:09:01.270]    __FlashLen=0x00000000
[01:09:01.270]    __FlashArg=0x00000000
[01:09:01.270]    __FlashOp=0x00000000
[01:09:01.270]    __Result=0x00000000
[01:09:01.270]  </debugvars>
[01:09:01.270]  
[01:09:01.270]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:09:01.270]    <block atomic="false" info="">
[01:09:01.270]      __var deviceID = 0;
[01:09:01.270]        // -> [deviceID <= 0x00000000]
[01:09:01.271]      __var version = 0;
[01:09:01.271]        // -> [version <= 0x00000000]
[01:09:01.271]      __var partNum = 0;
[01:09:01.271]        // -> [partNum <= 0x00000000]
[01:09:01.271]      __var manuf = 0;
[01:09:01.271]        // -> [manuf <= 0x00000000]
[01:09:01.271]      __var isMSPM0G1X0X_G3X0X = 0;
[01:09:01.271]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:09:01.271]      __var isProduction = 0;
[01:09:01.271]        // -> [isProduction <= 0x00000000]
[01:09:01.272]      __var continueId = 0;
[01:09:01.272]        // -> [continueId <= 0x00000000]
[01:09:01.272]      deviceID =   Read32(0x41C40004);
[01:09:01.284]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:09:01.284]        // -> [deviceID <= 0x2BB8802F]
[01:09:01.284]      version = deviceID >> 28;
[01:09:01.284]        // -> [version <= 0x00000002]
[01:09:01.284]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:09:01.284]        // -> [partNum <= 0x0000BB88]
[01:09:01.284]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:09:01.284]        // -> [manuf <= 0x00000017]
[01:09:01.285]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:09:01.285]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:09:01.285]      isProduction = (version > 0);
[01:09:01.285]        // -> [isProduction <= 0x00000001]
[01:09:01.285]    </block>
[01:09:01.285]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:09:01.285]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:09:01.285]        // =>  FALSE
[01:09:01.285]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:09:01.285]    </control>
[01:09:01.285]    <control if="continueId == 4" while="" timeout="0" info="">
[01:09:01.286]      // if-block "continueId == 4"
[01:09:01.286]        // =>  FALSE
[01:09:01.286]      // skip if-block "continueId == 4"
[01:09:01.286]    </control>
[01:09:01.286]    <control if="!isProduction" while="" timeout="0" info="">
[01:09:01.286]      // if-block "!isProduction"
[01:09:01.286]        // =>  FALSE
[01:09:01.286]      // skip if-block "!isProduction"
[01:09:01.286]    </control>
[01:09:01.286]  </sequence>
[01:09:01.286]  
[01:09:09.811]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:09:09.811]  
[01:09:09.820]  <debugvars>
[01:09:09.820]    // Pre-defined
[01:09:09.820]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:09.820]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:09:09.820]    __dp=0x00000000
[01:09:09.820]    __ap=0x00000000
[01:09:09.820]    __traceout=0x00000000      (Trace Disabled)
[01:09:09.820]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:09.820]    __FlashAddr=0x00000000
[01:09:09.820]    __FlashLen=0x00000000
[01:09:09.820]    __FlashArg=0x00000000
[01:09:09.820]    __FlashOp=0x00000000
[01:09:09.821]    __Result=0x00000000
[01:09:09.821]  </debugvars>
[01:09:09.821]  
[01:09:09.821]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:09:09.821]    <block atomic="false" info="">
[01:09:09.822]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:09:09.822]        // -> [isSWJ <= 0x00000001]
[01:09:09.822]      __var hasDormant = __protocol & 0x00020000;
[01:09:09.822]        // -> [hasDormant <= 0x00000000]
[01:09:09.822]      __var protType   = __protocol & 0x0000FFFF;
[01:09:09.822]        // -> [protType <= 0x00000002]
[01:09:09.823]    </block>
[01:09:09.823]    <control if="protType == 1" while="" timeout="0" info="">
[01:09:09.823]      // if-block "protType == 1"
[01:09:09.823]        // =>  FALSE
[01:09:09.823]      // skip if-block "protType == 1"
[01:09:09.823]    </control>
[01:09:09.823]    <control if="protType == 2" while="" timeout="0" info="">
[01:09:09.823]      // if-block "protType == 2"
[01:09:09.824]        // =>  TRUE
[01:09:09.824]      <control if="isSWJ" while="" timeout="0" info="">
[01:09:09.824]        // if-block "isSWJ"
[01:09:09.824]          // =>  TRUE
[01:09:09.824]        <control if="hasDormant" while="" timeout="0" info="">
[01:09:09.824]          // if-block "hasDormant"
[01:09:09.824]            // =>  FALSE
[01:09:09.824]          // skip if-block "hasDormant"
[01:09:09.824]        </control>
[01:09:09.824]        <control if="!hasDormant" while="" timeout="0" info="">
[01:09:09.824]          // if-block "!hasDormant"
[01:09:09.825]            // =>  TRUE
[01:09:09.825]          <block atomic="false" info="">
[01:09:09.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:09:09.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:09.829]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:09:09.832]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:09:09.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:09:09.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:09.842]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:09:09.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:09:09.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:09:09.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:09:09.859]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:09:09.862]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:09:09.862]          </block>
[01:09:09.862]          // end if-block "!hasDormant"
[01:09:09.862]        </control>
[01:09:09.862]        // end if-block "isSWJ"
[01:09:09.862]      </control>
[01:09:09.862]      <control if="!isSWJ" while="" timeout="0" info="">
[01:09:09.862]        // if-block "!isSWJ"
[01:09:09.863]          // =>  FALSE
[01:09:09.863]        // skip if-block "!isSWJ"
[01:09:09.863]      </control>
[01:09:09.863]      <block atomic="false" info="">
[01:09:09.863]        ReadDP(0x0);
[01:09:09.868]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:09:09.869]      </block>
[01:09:09.869]      // end if-block "protType == 2"
[01:09:09.869]    </control>
[01:09:09.869]  </sequence>
[01:09:09.869]  
[01:09:09.877]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:09:09.877]  
[01:09:09.877]  <debugvars>
[01:09:09.877]    // Pre-defined
[01:09:09.878]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:09.878]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:09:09.878]    __dp=0x00000000
[01:09:09.878]    __ap=0x00000000
[01:09:09.878]    __traceout=0x00000000      (Trace Disabled)
[01:09:09.878]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:09.878]    __FlashAddr=0x00000000
[01:09:09.878]    __FlashLen=0x00000000
[01:09:09.878]    __FlashArg=0x00000000
[01:09:09.878]    __FlashOp=0x00000000
[01:09:09.878]    __Result=0x00000000
[01:09:09.879]  </debugvars>
[01:09:09.879]  
[01:09:09.879]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:09:09.879]    <block atomic="false" info="">
[01:09:09.879]      __var SW_DP_ABORT       = 0x0;
[01:09:09.879]        // -> [SW_DP_ABORT <= 0x00000000]
[01:09:09.879]      __var DP_CTRL_STAT      = 0x4;
[01:09:09.879]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:09:09.879]      __var DP_SELECT         = 0x8;
[01:09:09.880]        // -> [DP_SELECT <= 0x00000008]
[01:09:09.880]      __var powered_down      = 0;
[01:09:09.880]        // -> [powered_down <= 0x00000000]
[01:09:09.880]      WriteDP(DP_SELECT, 0x00000000);
[01:09:09.892]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:09:09.892]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:09:09.898]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:09:09.898]        // -> [powered_down <= 0x00000001]
[01:09:09.898]    </block>
[01:09:09.901]    <control if="powered_down" while="" timeout="0" info="">
[01:09:09.901]      // if-block "powered_down"
[01:09:09.901]        // =>  TRUE
[01:09:09.901]      <block atomic="false" info="">
[01:09:09.901]        Message(0, "Debug/System power-up request sent");
[01:09:09.903]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:09:09.908]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:09:09.908]      </block>
[01:09:09.908]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:09:09.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:09:09.912]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:09:09.912]        // while-condition  =>  FALSE
[01:09:09.912]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:09:09.912]      </control>
[01:09:09.912]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:09:09.912]        // if-block "(__protocol & 0xFFFF) == 1"
[01:09:09.913]          // =>  FALSE
[01:09:09.913]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:09:09.913]      </control>
[01:09:09.913]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:09:09.913]        // if-block "(__protocol & 0xFFFF) == 2"
[01:09:09.913]          // =>  TRUE
[01:09:09.913]        <block atomic="false" info="">
[01:09:09.913]          Message(0, "executing SWD power up");
[01:09:09.914]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:09:09.918]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:09:09.918]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:09:09.927]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:09:09.927]        </block>
[01:09:09.927]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:09:09.927]      </control>
[01:09:09.927]      // end if-block "powered_down"
[01:09:09.927]    </control>
[01:09:09.927]    <block atomic="false" info="">
[01:09:09.927]      __var DEBUG_PORT_VAL    = 0;
[01:09:09.927]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:09:09.927]      __var ACCESS_POINT_VAL  = 0;
[01:09:09.927]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:09:09.928]      __ap = 1; 
[01:09:09.928]        // -> [__ap <= 0x00000001]
[01:09:09.928]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:09:09.936]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:09:09.937]      __ap = 4;
[01:09:09.937]        // -> [__ap <= 0x00000004]
[01:09:09.937]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:09.945]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:09:09.945]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:09:09.945]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:09.946]    </block>
[01:09:09.946]    <block atomic="false" info="">
[01:09:09.947]      __var nReset = 0x80;
[01:09:09.947]        // -> [nReset <= 0x00000080]
[01:09:09.947]      __var canReadPins = 0;
[01:09:09.947]        // -> [canReadPins <= 0x00000000]
[01:09:09.947]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:09:09.952]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:09:09.952]        // -> [canReadPins <= 0x00000001]
[01:09:09.952]    </block>
[01:09:09.952]    <control if="" while="1" timeout="200" info="">
[01:09:09.952]      // while "1"  (timeout="200")
[01:09:09.953]      // while-condition  =>  TRUE
[01:09:09.954]      // while "1"  (timeout="200")
[01:09:09.954]      // while  =>  TIMEOUT
[01:09:09.954]      // end while "1"
[01:09:09.954]    </control>
[01:09:09.954]    <control if="canReadPins" while="" timeout="0" info="">
[01:09:09.954]      // if-block "canReadPins"
[01:09:09.954]        // =>  TRUE
[01:09:09.954]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:09:09.954]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:09:09.961]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:09:09.961]        // while-condition  =>  FALSE
[01:09:09.961]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:09:09.961]      </control>
[01:09:09.961]      // end if-block "canReadPins"
[01:09:09.962]    </control>
[01:09:09.962]    <control if="!canReadPins" while="" timeout="0" info="">
[01:09:09.962]      // if-block "!canReadPins"
[01:09:09.962]        // =>  FALSE
[01:09:09.962]      // skip if-block "!canReadPins"
[01:09:09.962]    </control>
[01:09:09.962]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:09:09.962]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:09.962]        // =>  TRUE
[01:09:09.962]      <block atomic="false" info="">
[01:09:09.962]        WriteAP(0x00, 0x190008);
[01:09:09.970]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:09.970]        WriteAP(0xF0, 0x01);
[01:09:09.978]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:09:09.978]      </block>
[01:09:09.978]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:09:09.978]    </control>
[01:09:09.978]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:09:09.978]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:09.978]        // =>  FALSE
[01:09:09.978]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:09:09.978]    </control>
[01:09:09.978]    <block atomic="false" info="">
[01:09:09.978]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:09:09.993]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:09:09.993]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:09:09.993]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:09:09.994]      __ap = 0; //lets make sure we reset the access point selection
[01:09:09.994]        // -> [__ap <= 0x00000000]
[01:09:09.994]    </block>
[01:09:09.994]  </sequence>
[01:09:09.994]  
[01:09:10.050]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:09:10.050]  
[01:09:10.050]  <debugvars>
[01:09:10.050]    // Pre-defined
[01:09:10.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:09:10.050]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:09:10.050]    __dp=0x00000000
[01:09:10.050]    __ap=0x00000000
[01:09:10.050]    __traceout=0x00000000      (Trace Disabled)
[01:09:10.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:09:10.052]    __FlashAddr=0x00000000
[01:09:10.052]    __FlashLen=0x00000000
[01:09:10.052]    __FlashArg=0x00000000
[01:09:10.052]    __FlashOp=0x00000000
[01:09:10.052]    __Result=0x00000000
[01:09:10.052]  </debugvars>
[01:09:10.052]  
[01:09:10.052]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:09:10.052]    <block atomic="false" info="">
[01:09:10.052]      __var deviceID = 0;
[01:09:10.052]        // -> [deviceID <= 0x00000000]
[01:09:10.052]      __var version = 0;
[01:09:10.052]        // -> [version <= 0x00000000]
[01:09:10.053]      __var partNum = 0;
[01:09:10.053]        // -> [partNum <= 0x00000000]
[01:09:10.053]      __var manuf = 0;
[01:09:10.053]        // -> [manuf <= 0x00000000]
[01:09:10.053]      __var isMSPM0G1X0X_G3X0X = 0;
[01:09:10.053]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:09:10.053]      __var isProduction = 0;
[01:09:10.054]        // -> [isProduction <= 0x00000000]
[01:09:10.054]      __var continueId = 0;
[01:09:10.054]        // -> [continueId <= 0x00000000]
[01:09:10.054]      deviceID =   Read32(0x41C40004);
[01:09:10.068]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:09:10.068]        // -> [deviceID <= 0x2BB8802F]
[01:09:10.069]      version = deviceID >> 28;
[01:09:10.069]        // -> [version <= 0x00000002]
[01:09:10.069]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:09:10.069]        // -> [partNum <= 0x0000BB88]
[01:09:10.069]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:09:10.069]        // -> [manuf <= 0x00000017]
[01:09:10.069]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:09:10.070]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:09:10.070]      isProduction = (version > 0);
[01:09:10.070]        // -> [isProduction <= 0x00000001]
[01:09:10.070]    </block>
[01:09:10.070]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:09:10.070]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:09:10.070]        // =>  FALSE
[01:09:10.070]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:09:10.070]    </control>
[01:09:10.070]    <control if="continueId == 4" while="" timeout="0" info="">
[01:09:10.070]      // if-block "continueId == 4"
[01:09:10.070]        // =>  FALSE
[01:09:10.072]      // skip if-block "continueId == 4"
[01:09:10.072]    </control>
[01:09:10.072]    <control if="!isProduction" while="" timeout="0" info="">
[01:09:10.072]      // if-block "!isProduction"
[01:09:10.072]        // =>  FALSE
[01:09:10.072]      // skip if-block "!isProduction"
[01:09:10.072]    </control>
[01:09:10.072]  </sequence>
[01:09:10.072]  
