/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0004.log
 *  Created     : 20:35:53 (22/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:35:53.236]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:35:53.236]  
[20:35:53.236]  <debugvars>
[20:35:53.237]    // Pre-defined
[20:35:53.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:35:53.237]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:35:53.237]    __dp=0x00000000
[20:35:53.237]    __ap=0x00000000
[20:35:53.237]    __traceout=0x00000000      (Trace Disabled)
[20:35:53.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:35:53.237]    __FlashAddr=0x00000000
[20:35:53.237]    __FlashLen=0x00000000
[20:35:53.238]    __FlashArg=0x00000000
[20:35:53.238]    __FlashOp=0x00000000
[20:35:53.238]    __Result=0x00000000
[20:35:53.238]  </debugvars>
[20:35:53.238]  
[20:35:53.238]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:35:53.239]    <block atomic="false" info="">
[20:35:53.239]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:35:53.239]        // -> [isSWJ <= 0x00000001]
[20:35:53.239]      __var hasDormant = __protocol & 0x00020000;
[20:35:53.239]        // -> [hasDormant <= 0x00000000]
[20:35:53.239]      __var protType   = __protocol & 0x0000FFFF;
[20:35:53.239]        // -> [protType <= 0x00000002]
[20:35:53.239]    </block>
[20:35:53.239]    <control if="protType == 1" while="" timeout="0" info="">
[20:35:53.240]      // if-block "protType == 1"
[20:35:53.240]        // =>  FALSE
[20:35:53.240]      // skip if-block "protType == 1"
[20:35:53.240]    </control>
[20:35:53.240]    <control if="protType == 2" while="" timeout="0" info="">
[20:35:53.241]      // if-block "protType == 2"
[20:35:53.241]        // =>  TRUE
[20:35:53.241]      <control if="isSWJ" while="" timeout="0" info="">
[20:35:53.241]        // if-block "isSWJ"
[20:35:53.241]          // =>  TRUE
[20:35:53.241]        <control if="hasDormant" while="" timeout="0" info="">
[20:35:53.241]          // if-block "hasDormant"
[20:35:53.241]            // =>  FALSE
[20:35:53.242]          // skip if-block "hasDormant"
[20:35:53.242]        </control>
[20:35:53.242]        <control if="!hasDormant" while="" timeout="0" info="">
[20:35:53.242]          // if-block "!hasDormant"
[20:35:53.242]            // =>  TRUE
[20:35:53.242]          <block atomic="false" info="">
[20:35:53.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:35:53.243]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:35:53.243]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:35:53.243]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:35:53.243]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:35:53.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:35:53.244]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:35:53.244]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:35:53.244]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:35:53.245]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:35:53.245]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:35:53.245]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:35:53.245]          </block>
[20:35:53.245]          // end if-block "!hasDormant"
[20:35:53.245]        </control>
[20:35:53.245]        // end if-block "isSWJ"
[20:35:53.245]      </control>
[20:35:53.246]      <control if="!isSWJ" while="" timeout="0" info="">
[20:35:53.246]        // if-block "!isSWJ"
[20:35:53.246]          // =>  FALSE
[20:35:53.247]        // skip if-block "!isSWJ"
[20:35:53.247]      </control>
[20:35:53.247]      <block atomic="false" info="">
[20:35:53.247]        ReadDP(0x0);
[20:35:53.247]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:35:53.248]      </block>
[20:35:53.248]      // end if-block "protType == 2"
[20:35:53.248]    </control>
[20:35:53.248]  </sequence>
[20:35:53.248]  
[20:35:53.249]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:35:53.249]  
[20:35:53.249]  <debugvars>
[20:35:53.249]    // Pre-defined
[20:35:53.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:35:53.249]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:35:53.249]    __dp=0x00000000
[20:35:53.249]    __ap=0x00000000
[20:35:53.249]    __traceout=0x00000000      (Trace Disabled)
[20:35:53.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:35:53.249]    __FlashAddr=0x00000000
[20:35:53.249]    __FlashLen=0x00000000
[20:35:53.249]    __FlashArg=0x00000000
[20:35:53.250]    __FlashOp=0x00000000
[20:35:53.250]    __Result=0x00000000
[20:35:53.250]  </debugvars>
[20:35:53.250]  
[20:35:53.250]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:35:53.250]    <block atomic="false" info="">
[20:35:53.250]      __var SW_DP_ABORT       = 0x0;
[20:35:53.251]        // -> [SW_DP_ABORT <= 0x00000000]
[20:35:53.251]      __var DP_CTRL_STAT      = 0x4;
[20:35:53.251]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:35:53.251]      __var DP_SELECT         = 0x8;
[20:35:53.251]        // -> [DP_SELECT <= 0x00000008]
[20:35:53.251]      __var powered_down      = 0;
[20:35:53.251]        // -> [powered_down <= 0x00000000]
[20:35:53.251]      WriteDP(DP_SELECT, 0x00000000);
[20:35:53.252]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:35:53.252]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:35:53.252]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:35:53.252]        // -> [powered_down <= 0x00000001]
[20:35:53.253]    </block>
[20:35:53.253]    <control if="powered_down" while="" timeout="0" info="">
[20:35:53.253]      // if-block "powered_down"
[20:35:53.253]        // =>  TRUE
[20:35:53.253]      <block atomic="false" info="">
[20:35:53.253]        Message(0, "Debug/System power-up request sent");
[20:35:53.253]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:35:53.254]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:35:53.254]      </block>
[20:35:53.254]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:35:53.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:35:53.255]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:35:53.255]        // while-condition  =>  FALSE
[20:35:53.255]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:35:53.255]      </control>
[20:35:53.255]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:35:53.255]        // if-block "(__protocol & 0xFFFF) == 1"
[20:35:53.255]          // =>  FALSE
[20:35:53.255]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:35:53.255]      </control>
[20:35:53.256]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:35:53.256]        // if-block "(__protocol & 0xFFFF) == 2"
[20:35:53.256]          // =>  TRUE
[20:35:53.256]        <block atomic="false" info="">
[20:35:53.256]          Message(0, "executing SWD power up");
[20:35:53.256]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:35:53.257]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:35:53.257]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:35:53.257]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:35:53.257]        </block>
[20:35:53.258]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:35:53.258]      </control>
[20:35:53.258]      // end if-block "powered_down"
[20:35:53.258]    </control>
[20:35:53.258]    <block atomic="false" info="">
[20:35:53.258]      __var DEBUG_PORT_VAL    = 0;
[20:35:53.258]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:35:53.258]      __var ACCESS_POINT_VAL  = 0;
[20:35:53.258]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:35:53.258]      __ap = 1; 
[20:35:53.259]        // -> [__ap <= 0x00000001]
[20:35:53.259]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:35:53.260]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:35:53.261]      __ap = 4;
[20:35:53.261]        // -> [__ap <= 0x00000004]
[20:35:53.261]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:35:53.262]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:35:53.262]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:35:53.262]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:35:53.262]    </block>
[20:35:53.262]    <block atomic="false" info="">
[20:35:53.262]      __var nReset = 0x80;
[20:35:53.263]        // -> [nReset <= 0x00000080]
[20:35:53.263]      __var canReadPins = 0;
[20:35:53.263]        // -> [canReadPins <= 0x00000000]
[20:35:53.263]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:35:53.263]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:35:53.263]        // -> [canReadPins <= 0x00000001]
[20:35:53.263]    </block>
[20:35:53.264]    <control if="" while="1" timeout="200" info="">
[20:35:53.264]      // while "1"  (timeout="200")
[20:35:53.264]      // while-condition  =>  TRUE
[20:35:53.264]      // while "1"  (timeout="200")
[20:35:53.264]      // while-condition  =>  TRUE
[20:35:53.264]      // while "1"  (timeout="200")
[20:35:53.264]      // while-condition  =>  TRUE
[20:35:53.264]      // while "1"  (timeout="200")
[20:35:53.264]      // while-condition  =>  TRUE
[20:35:53.264]      // while "1"  (timeout="200")
[20:35:53.264]      // while-condition  =>  TRUE
[20:35:53.264]      // while "1"  (timeout="200")
[20:35:53.265]      // while-condition  =>  TRUE
[20:35:53.265]      // while "1"  (timeout="200")
[20:35:53.265]      // while-condition  =>  TRUE
[20:35:53.265]      // while "1"  (timeout="200")
[20:35:53.265]      // while-condition  =>  TRUE
[20:35:53.265]      // while "1"  (timeout="200")
[20:35:53.266]      // while-condition  =>  TRUE
[20:35:53.266]      // while "1"  (timeout="200")
[20:35:53.266]      // while-condition  =>  TRUE
[20:35:53.266]      // while "1"  (timeout="200")
[20:35:53.266]      // while-condition  =>  TRUE
[20:35:53.266]      // while "1"  (timeout="200")
[20:35:53.266]      // while-condition  =>  TRUE
[20:35:53.266]      // while "1"  (timeout="200")
[20:35:53.266]      // while-condition  =>  TRUE
[20:35:53.267]      // while "1"  (timeout="200")
[20:35:53.267]      // while-condition  =>  TRUE
[20:35:53.267]      // while "1"  (timeout="200")
[20:35:53.267]      // while-condition  =>  TRUE
[20:35:53.267]      // while "1"  (timeout="200")
[20:35:53.267]      // while-condition  =>  TRUE
[20:35:53.267]      // while "1"  (timeout="200")
[20:35:53.267]      // while-condition  =>  TRUE
[20:35:53.267]      // while "1"  (timeout="200")
[20:35:53.268]      // while-condition  =>  TRUE
[20:35:53.268]      // while "1"  (timeout="200")
[20:35:53.268]      // while-condition  =>  TRUE
[20:35:53.268]      // while "1"  (timeout="200")
[20:35:53.268]      // while-condition  =>  TRUE
[20:35:53.268]      // while "1"  (timeout="200")
[20:35:53.268]      // while-condition  =>  TRUE
[20:35:53.268]      // while "1"  (timeout="200")
[20:35:53.269]      // while-condition  =>  TRUE
[20:35:53.269]      // while "1"  (timeout="200")
[20:35:53.269]      // while-condition  =>  TRUE
[20:35:53.269]      // while "1"  (timeout="200")
[20:35:53.269]      // while-condition  =>  TRUE
[20:35:53.269]      // while "1"  (timeout="200")
[20:35:53.269]      // while-condition  =>  TRUE
[20:35:53.270]      // while "1"  (timeout="200")
[20:35:53.270]      // while  =>  TIMEOUT
[20:35:53.270]      // end while "1"
[20:35:53.270]    </control>
[20:35:53.270]    <control if="canReadPins" while="" timeout="0" info="">
[20:35:53.270]      // if-block "canReadPins"
[20:35:53.270]        // =>  TRUE
[20:35:53.270]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:35:53.270]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:35:53.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:35:53.271]        // while-condition  =>  FALSE
[20:35:53.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:35:53.271]      </control>
[20:35:53.271]      // end if-block "canReadPins"
[20:35:53.271]    </control>
[20:35:53.271]    <control if="!canReadPins" while="" timeout="0" info="">
[20:35:53.271]      // if-block "!canReadPins"
[20:35:53.272]        // =>  FALSE
[20:35:53.272]      // skip if-block "!canReadPins"
[20:35:53.272]    </control>
[20:35:53.272]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:35:53.272]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:35:53.272]        // =>  TRUE
[20:35:53.272]      <block atomic="false" info="">
[20:35:53.272]        WriteAP(0x00, 0x190008);
[20:35:53.272]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:35:53.273]        WriteAP(0xF0, 0x01);
[20:35:53.273]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:35:53.273]      </block>
[20:35:53.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:35:53.275]    </control>
[20:35:53.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:35:53.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:35:53.275]        // =>  FALSE
[20:35:53.275]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:35:53.276]    </control>
[20:35:53.276]    <block atomic="false" info="">
[20:35:53.276]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:35:53.276]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:35:53.276]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:35:53.276]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:35:53.283]      __ap = 0; //lets make sure we reset the access point selection
[20:35:53.283]        // -> [__ap <= 0x00000000]
[20:35:53.284]    </block>
[20:35:53.284]  </sequence>
[20:35:53.284]  
[20:35:53.290]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:35:53.290]  
[20:35:53.290]  <debugvars>
[20:35:53.290]    // Pre-defined
[20:35:53.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:35:53.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:35:53.290]    __dp=0x00000000
[20:35:53.291]    __ap=0x00000000
[20:35:53.291]    __traceout=0x00000000      (Trace Disabled)
[20:35:53.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:35:53.291]    __FlashAddr=0x00000000
[20:35:53.291]    __FlashLen=0x00000000
[20:35:53.291]    __FlashArg=0x00000000
[20:35:53.291]    __FlashOp=0x00000000
[20:35:53.291]    __Result=0x00000000
[20:35:53.291]  </debugvars>
[20:35:53.291]  
[20:35:53.291]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:35:53.291]    <block atomic="false" info="">
[20:35:53.291]      __var deviceID = 0;
[20:35:53.291]        // -> [deviceID <= 0x00000000]
[20:35:53.293]      __var version = 0;
[20:35:53.293]        // -> [version <= 0x00000000]
[20:35:53.293]      __var partNum = 0;
[20:35:53.293]        // -> [partNum <= 0x00000000]
[20:35:53.293]      __var manuf = 0;
[20:35:53.294]        // -> [manuf <= 0x00000000]
[20:35:53.294]      __var isMSPM0G1X0X_G3X0X = 0;
[20:35:53.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:35:53.294]      __var isProduction = 0;
[20:35:53.294]        // -> [isProduction <= 0x00000000]
[20:35:53.294]      __var continueId = 0;
[20:35:53.294]        // -> [continueId <= 0x00000000]
[20:35:53.294]      deviceID =   Read32(0x41C40004);
[20:35:53.296]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:35:53.296]        // -> [deviceID <= 0x2BB8802F]
[20:35:53.296]      version = deviceID >> 28;
[20:35:53.296]        // -> [version <= 0x00000002]
[20:35:53.297]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:35:53.297]        // -> [partNum <= 0x0000BB88]
[20:35:53.297]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:35:53.297]        // -> [manuf <= 0x00000017]
[20:35:53.297]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:35:53.297]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:35:53.297]      isProduction = (version > 0);
[20:35:53.297]        // -> [isProduction <= 0x00000001]
[20:35:53.297]    </block>
[20:35:53.297]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:35:53.297]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:35:53.297]        // =>  FALSE
[20:35:53.298]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:35:53.298]    </control>
[20:35:53.298]    <control if="continueId == 4" while="" timeout="0" info="">
[20:35:53.298]      // if-block "continueId == 4"
[20:35:53.298]        // =>  FALSE
[20:35:53.298]      // skip if-block "continueId == 4"
[20:35:53.298]    </control>
[20:35:53.298]    <control if="!isProduction" while="" timeout="0" info="">
[20:35:53.298]      // if-block "!isProduction"
[20:35:53.299]        // =>  FALSE
[20:35:53.299]      // skip if-block "!isProduction"
[20:35:53.299]    </control>
[20:35:53.299]  </sequence>
[20:35:53.299]  
[20:35:57.333]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:35:57.333]  
[20:35:57.343]  <debugvars>
[20:35:57.343]    // Pre-defined
[20:35:57.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:35:57.343]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:35:57.343]    __dp=0x00000000
[20:35:57.344]    __ap=0x00000000
[20:35:57.344]    __traceout=0x00000000      (Trace Disabled)
[20:35:57.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:35:57.344]    __FlashAddr=0x00000000
[20:35:57.344]    __FlashLen=0x00000000
[20:35:57.344]    __FlashArg=0x00000000
[20:35:57.345]    __FlashOp=0x00000000
[20:35:57.345]    __Result=0x00000000
[20:35:57.345]  </debugvars>
[20:35:57.345]  
[20:35:57.345]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:35:57.345]    <block atomic="false" info="">
[20:35:57.346]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:35:57.346]        // -> [isSWJ <= 0x00000001]
[20:35:57.346]      __var hasDormant = __protocol & 0x00020000;
[20:35:57.346]        // -> [hasDormant <= 0x00000000]
[20:35:57.346]      __var protType   = __protocol & 0x0000FFFF;
[20:35:57.346]        // -> [protType <= 0x00000002]
[20:35:57.346]    </block>
[20:35:57.346]    <control if="protType == 1" while="" timeout="0" info="">
[20:35:57.346]      // if-block "protType == 1"
[20:35:57.347]        // =>  FALSE
[20:35:57.347]      // skip if-block "protType == 1"
[20:35:57.347]    </control>
[20:35:57.347]    <control if="protType == 2" while="" timeout="0" info="">
[20:35:57.347]      // if-block "protType == 2"
[20:35:57.347]        // =>  TRUE
[20:35:57.347]      <control if="isSWJ" while="" timeout="0" info="">
[20:35:57.347]        // if-block "isSWJ"
[20:35:57.347]          // =>  TRUE
[20:35:57.347]        <control if="hasDormant" while="" timeout="0" info="">
[20:35:57.348]          // if-block "hasDormant"
[20:35:57.348]            // =>  FALSE
[20:35:57.348]          // skip if-block "hasDormant"
[20:35:57.348]        </control>
[20:35:57.348]        <control if="!hasDormant" while="" timeout="0" info="">
[20:35:57.348]          // if-block "!hasDormant"
[20:35:57.348]            // =>  TRUE
[20:35:57.348]          <block atomic="false" info="">
[20:35:57.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:35:57.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:35:57.349]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:35:57.349]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:35:57.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:35:57.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:35:57.350]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:35:57.350]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:35:57.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:35:57.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:35:57.350]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:35:57.351]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:35:57.351]          </block>
[20:35:57.351]          // end if-block "!hasDormant"
[20:35:57.351]        </control>
[20:35:57.351]        // end if-block "isSWJ"
[20:35:57.351]      </control>
[20:35:57.351]      <control if="!isSWJ" while="" timeout="0" info="">
[20:35:57.351]        // if-block "!isSWJ"
[20:35:57.351]          // =>  FALSE
[20:35:57.351]        // skip if-block "!isSWJ"
[20:35:57.351]      </control>
[20:35:57.351]      <block atomic="false" info="">
[20:35:57.351]        ReadDP(0x0);
[20:35:57.353]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:35:57.353]      </block>
[20:35:57.353]      // end if-block "protType == 2"
[20:35:57.353]    </control>
[20:35:57.353]  </sequence>
[20:35:57.353]  
[20:35:57.354]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:35:57.354]  
[20:35:57.354]  <debugvars>
[20:35:57.354]    // Pre-defined
[20:35:57.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:35:57.354]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:35:57.354]    __dp=0x00000000
[20:35:57.355]    __ap=0x00000000
[20:35:57.355]    __traceout=0x00000000      (Trace Disabled)
[20:35:57.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:35:57.355]    __FlashAddr=0x00000000
[20:35:57.355]    __FlashLen=0x00000000
[20:35:57.355]    __FlashArg=0x00000000
[20:35:57.355]    __FlashOp=0x00000000
[20:35:57.355]    __Result=0x00000000
[20:35:57.355]  </debugvars>
[20:35:57.355]  
[20:35:57.355]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:35:57.356]    <block atomic="false" info="">
[20:35:57.356]      __var SW_DP_ABORT       = 0x0;
[20:35:57.356]        // -> [SW_DP_ABORT <= 0x00000000]
[20:35:57.356]      __var DP_CTRL_STAT      = 0x4;
[20:35:57.356]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:35:57.356]      __var DP_SELECT         = 0x8;
[20:35:57.356]        // -> [DP_SELECT <= 0x00000008]
[20:35:57.356]      __var powered_down      = 0;
[20:35:57.356]        // -> [powered_down <= 0x00000000]
[20:35:57.356]      WriteDP(DP_SELECT, 0x00000000);
[20:35:57.357]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:35:57.357]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:35:57.357]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:35:57.357]        // -> [powered_down <= 0x00000001]
[20:35:57.357]    </block>
[20:35:57.357]    <control if="powered_down" while="" timeout="0" info="">
[20:35:57.357]      // if-block "powered_down"
[20:35:57.357]        // =>  TRUE
[20:35:57.358]      <block atomic="false" info="">
[20:35:57.358]        Message(0, "Debug/System power-up request sent");
[20:35:57.359]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:35:57.360]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:35:57.360]      </block>
[20:35:57.360]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:35:57.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:35:57.361]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:35:57.361]        // while-condition  =>  FALSE
[20:35:57.361]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:35:57.361]      </control>
[20:35:57.361]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:35:57.361]        // if-block "(__protocol & 0xFFFF) == 1"
[20:35:57.361]          // =>  FALSE
[20:35:57.361]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:35:57.363]      </control>
[20:35:57.363]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:35:57.363]        // if-block "(__protocol & 0xFFFF) == 2"
[20:35:57.363]          // =>  TRUE
[20:35:57.363]        <block atomic="false" info="">
[20:35:57.363]          Message(0, "executing SWD power up");
[20:35:57.364]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:35:57.365]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:35:57.365]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:35:57.365]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:35:57.366]        </block>
[20:35:57.366]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:35:57.366]      </control>
[20:35:57.366]      // end if-block "powered_down"
[20:35:57.366]    </control>
[20:35:57.366]    <block atomic="false" info="">
[20:35:57.366]      __var DEBUG_PORT_VAL    = 0;
[20:35:57.366]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:35:57.366]      __var ACCESS_POINT_VAL  = 0;
[20:35:57.366]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:35:57.367]      __ap = 1; 
[20:35:57.367]        // -> [__ap <= 0x00000001]
[20:35:57.367]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:35:57.368]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:35:57.368]      __ap = 4;
[20:35:57.368]        // -> [__ap <= 0x00000004]
[20:35:57.368]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:35:57.369]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:35:57.369]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:35:57.369]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:35:57.372]    </block>
[20:35:57.372]    <block atomic="false" info="">
[20:35:57.372]      __var nReset = 0x80;
[20:35:57.372]        // -> [nReset <= 0x00000080]
[20:35:57.372]      __var canReadPins = 0;
[20:35:57.372]        // -> [canReadPins <= 0x00000000]
[20:35:57.372]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:35:57.373]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:35:57.373]        // -> [canReadPins <= 0x00000001]
[20:35:57.373]    </block>
[20:35:57.373]    <control if="" while="1" timeout="200" info="">
[20:35:57.373]      // while "1"  (timeout="200")
[20:35:57.373]      // while-condition  =>  TRUE
[20:35:57.373]      // while "1"  (timeout="200")
[20:35:57.373]      // while-condition  =>  TRUE
[20:35:57.373]      // while "1"  (timeout="200")
[20:35:57.373]      // while-condition  =>  TRUE
[20:35:57.373]      // while "1"  (timeout="200")
[20:35:57.373]      // while-condition  =>  TRUE
[20:35:57.373]      // while "1"  (timeout="200")
[20:35:57.373]      // while-condition  =>  TRUE
[20:35:57.373]      // while "1"  (timeout="200")
[20:35:57.373]      // while-condition  =>  TRUE
[20:35:57.374]      // while "1"  (timeout="200")
[20:35:57.374]      // while-condition  =>  TRUE
[20:35:57.374]      // while "1"  (timeout="200")
[20:35:57.374]      // while-condition  =>  TRUE
[20:35:57.374]      // while "1"  (timeout="200")
[20:35:57.374]      // while-condition  =>  TRUE
[20:35:57.375]      // while "1"  (timeout="200")
[20:35:57.375]      // while-condition  =>  TRUE
[20:35:57.375]      // while "1"  (timeout="200")
[20:35:57.375]      // while-condition  =>  TRUE
[20:35:57.376]      // while "1"  (timeout="200")
[20:35:57.376]      // while-condition  =>  TRUE
[20:35:57.376]      // while "1"  (timeout="200")
[20:35:57.376]      // while-condition  =>  TRUE
[20:35:57.376]      // while "1"  (timeout="200")
[20:35:57.376]      // while-condition  =>  TRUE
[20:35:57.376]      // while "1"  (timeout="200")
[20:35:57.376]      // while-condition  =>  TRUE
[20:35:57.376]      // while "1"  (timeout="200")
[20:35:57.377]      // while-condition  =>  TRUE
[20:35:57.377]      // while "1"  (timeout="200")
[20:35:57.377]      // while-condition  =>  TRUE
[20:35:57.377]      // while "1"  (timeout="200")
[20:35:57.377]      // while-condition  =>  TRUE
[20:35:57.377]      // while "1"  (timeout="200")
[20:35:57.377]      // while-condition  =>  TRUE
[20:35:57.377]      // while "1"  (timeout="200")
[20:35:57.377]      // while-condition  =>  TRUE
[20:35:57.377]      // while "1"  (timeout="200")
[20:35:57.377]      // while-condition  =>  TRUE
[20:35:57.378]      // while "1"  (timeout="200")
[20:35:57.378]      // while-condition  =>  TRUE
[20:35:57.378]      // while "1"  (timeout="200")
[20:35:57.378]      // while-condition  =>  TRUE
[20:35:57.378]      // while "1"  (timeout="200")
[20:35:57.378]      // while-condition  =>  TRUE
[20:35:57.379]      // while "1"  (timeout="200")
[20:35:57.379]      // while  =>  TIMEOUT
[20:35:57.379]      // end while "1"
[20:35:57.379]    </control>
[20:35:57.379]    <control if="canReadPins" while="" timeout="0" info="">
[20:35:57.379]      // if-block "canReadPins"
[20:35:57.380]        // =>  TRUE
[20:35:57.380]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:35:57.380]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:35:57.381]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:35:57.381]        // while-condition  =>  FALSE
[20:35:57.381]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:35:57.381]      </control>
[20:35:57.381]      // end if-block "canReadPins"
[20:35:57.381]    </control>
[20:35:57.381]    <control if="!canReadPins" while="" timeout="0" info="">
[20:35:57.381]      // if-block "!canReadPins"
[20:35:57.381]        // =>  FALSE
[20:35:57.381]      // skip if-block "!canReadPins"
[20:35:57.381]    </control>
[20:35:57.382]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:35:57.382]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:35:57.382]        // =>  TRUE
[20:35:57.382]      <block atomic="false" info="">
[20:35:57.382]        WriteAP(0x00, 0x190008);
[20:35:57.383]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:35:57.383]        WriteAP(0xF0, 0x01);
[20:35:57.384]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:35:57.384]      </block>
[20:35:57.384]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:35:57.384]    </control>
[20:35:57.385]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:35:57.385]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:35:57.385]        // =>  FALSE
[20:35:57.385]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:35:57.385]    </control>
[20:35:57.386]    <block atomic="false" info="">
[20:35:57.386]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:35:57.387]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:35:57.387]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:35:57.387]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:35:57.388]      __ap = 0; //lets make sure we reset the access point selection
[20:35:57.388]        // -> [__ap <= 0x00000000]
[20:35:57.388]    </block>
[20:35:57.389]  </sequence>
[20:35:57.389]  
[20:35:57.395]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:35:57.395]  
[20:35:57.395]  <debugvars>
[20:35:57.395]    // Pre-defined
[20:35:57.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:35:57.395]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:35:57.395]    __dp=0x00000000
[20:35:57.395]    __ap=0x00000000
[20:35:57.395]    __traceout=0x00000000      (Trace Disabled)
[20:35:57.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:35:57.395]    __FlashAddr=0x00000000
[20:35:57.395]    __FlashLen=0x00000000
[20:35:57.395]    __FlashArg=0x00000000
[20:35:57.397]    __FlashOp=0x00000000
[20:35:57.397]    __Result=0x00000000
[20:35:57.397]  </debugvars>
[20:35:57.397]  
[20:35:57.397]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:35:57.397]    <block atomic="false" info="">
[20:35:57.397]      __var deviceID = 0;
[20:35:57.397]        // -> [deviceID <= 0x00000000]
[20:35:57.397]      __var version = 0;
[20:35:57.397]        // -> [version <= 0x00000000]
[20:35:57.397]      __var partNum = 0;
[20:35:57.397]        // -> [partNum <= 0x00000000]
[20:35:57.398]      __var manuf = 0;
[20:35:57.398]        // -> [manuf <= 0x00000000]
[20:35:57.398]      __var isMSPM0G1X0X_G3X0X = 0;
[20:35:57.398]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:35:57.398]      __var isProduction = 0;
[20:35:57.398]        // -> [isProduction <= 0x00000000]
[20:35:57.398]      __var continueId = 0;
[20:35:57.398]        // -> [continueId <= 0x00000000]
[20:35:57.398]      deviceID =   Read32(0x41C40004);
[20:35:57.399]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:35:57.399]        // -> [deviceID <= 0x2BB8802F]
[20:35:57.400]      version = deviceID >> 28;
[20:35:57.400]        // -> [version <= 0x00000002]
[20:35:57.400]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:35:57.400]        // -> [partNum <= 0x0000BB88]
[20:35:57.400]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:35:57.400]        // -> [manuf <= 0x00000017]
[20:35:57.400]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:35:57.400]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:35:57.400]      isProduction = (version > 0);
[20:35:57.400]        // -> [isProduction <= 0x00000001]
[20:35:57.400]    </block>
[20:35:57.400]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:35:57.401]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:35:57.401]        // =>  FALSE
[20:35:57.401]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:35:57.401]    </control>
[20:35:57.401]    <control if="continueId == 4" while="" timeout="0" info="">
[20:35:57.401]      // if-block "continueId == 4"
[20:35:57.401]        // =>  FALSE
[20:35:57.401]      // skip if-block "continueId == 4"
[20:35:57.401]    </control>
[20:35:57.401]    <control if="!isProduction" while="" timeout="0" info="">
[20:35:57.401]      // if-block "!isProduction"
[20:35:57.401]        // =>  FALSE
[20:35:57.401]      // skip if-block "!isProduction"
[20:35:57.403]    </control>
[20:35:57.403]  </sequence>
[20:35:57.403]  
[20:49:35.443]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:49:35.443]  
[20:49:35.454]  <debugvars>
[20:49:35.454]    // Pre-defined
[20:49:35.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:35.454]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:35.454]    __dp=0x00000000
[20:49:35.454]    __ap=0x00000000
[20:49:35.454]    __traceout=0x00000000      (Trace Disabled)
[20:49:35.454]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:35.454]    __FlashAddr=0x00000000
[20:49:35.454]    __FlashLen=0x00000000
[20:49:35.454]    __FlashArg=0x00000000
[20:49:35.454]    __FlashOp=0x00000000
[20:49:35.454]    __Result=0x00000000
[20:49:35.454]  </debugvars>
[20:49:35.454]  
[20:49:35.454]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:49:35.454]    <block atomic="false" info="">
[20:49:35.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:49:35.456]        // -> [isSWJ <= 0x00000001]
[20:49:35.456]      __var hasDormant = __protocol & 0x00020000;
[20:49:35.456]        // -> [hasDormant <= 0x00000000]
[20:49:35.456]      __var protType   = __protocol & 0x0000FFFF;
[20:49:35.456]        // -> [protType <= 0x00000002]
[20:49:35.456]    </block>
[20:49:35.456]    <control if="protType == 1" while="" timeout="0" info="">
[20:49:35.456]      // if-block "protType == 1"
[20:49:35.456]        // =>  FALSE
[20:49:35.456]      // skip if-block "protType == 1"
[20:49:35.456]    </control>
[20:49:35.456]    <control if="protType == 2" while="" timeout="0" info="">
[20:49:35.456]      // if-block "protType == 2"
[20:49:35.456]        // =>  TRUE
[20:49:35.456]      <control if="isSWJ" while="" timeout="0" info="">
[20:49:35.456]        // if-block "isSWJ"
[20:49:35.456]          // =>  TRUE
[20:49:35.456]        <control if="hasDormant" while="" timeout="0" info="">
[20:49:35.456]          // if-block "hasDormant"
[20:49:35.456]            // =>  FALSE
[20:49:35.456]          // skip if-block "hasDormant"
[20:49:35.456]        </control>
[20:49:35.456]        <control if="!hasDormant" while="" timeout="0" info="">
[20:49:35.458]          // if-block "!hasDormant"
[20:49:35.458]            // =>  TRUE
[20:49:35.458]          <block atomic="false" info="">
[20:49:35.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:49:35.460]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:35.460]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:49:35.460]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:49:35.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:49:35.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:35.461]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:49:35.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:49:35.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:49:35.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:35.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:49:35.461]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:49:35.461]          </block>
[20:49:35.461]          // end if-block "!hasDormant"
[20:49:35.461]        </control>
[20:49:35.461]        // end if-block "isSWJ"
[20:49:35.463]      </control>
[20:49:35.463]      <control if="!isSWJ" while="" timeout="0" info="">
[20:49:35.463]        // if-block "!isSWJ"
[20:49:35.463]          // =>  FALSE
[20:49:35.463]        // skip if-block "!isSWJ"
[20:49:35.463]      </control>
[20:49:35.463]      <block atomic="false" info="">
[20:49:35.463]        ReadDP(0x0);
[20:49:35.464]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:49:35.464]      </block>
[20:49:35.464]      // end if-block "protType == 2"
[20:49:35.464]    </control>
[20:49:35.464]  </sequence>
[20:49:35.464]  
[20:49:35.464]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:49:35.464]  
[20:49:35.464]  <debugvars>
[20:49:35.464]    // Pre-defined
[20:49:35.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:35.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:35.464]    __dp=0x00000000
[20:49:35.464]    __ap=0x00000000
[20:49:35.464]    __traceout=0x00000000      (Trace Disabled)
[20:49:35.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:35.464]    __FlashAddr=0x00000000
[20:49:35.464]    __FlashLen=0x00000000
[20:49:35.464]    __FlashArg=0x00000000
[20:49:35.464]    __FlashOp=0x00000000
[20:49:35.464]    __Result=0x00000000
[20:49:35.464]  </debugvars>
[20:49:35.464]  
[20:49:35.464]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:49:35.464]    <block atomic="false" info="">
[20:49:35.464]      __var SW_DP_ABORT       = 0x0;
[20:49:35.464]        // -> [SW_DP_ABORT <= 0x00000000]
[20:49:35.464]      __var DP_CTRL_STAT      = 0x4;
[20:49:35.464]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:49:35.464]      __var DP_SELECT         = 0x8;
[20:49:35.464]        // -> [DP_SELECT <= 0x00000008]
[20:49:35.464]      __var powered_down      = 0;
[20:49:35.464]        // -> [powered_down <= 0x00000000]
[20:49:35.464]      WriteDP(DP_SELECT, 0x00000000);
[20:49:35.468]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:49:35.468]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:49:35.469]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:49:35.469]        // -> [powered_down <= 0x00000001]
[20:49:35.469]    </block>
[20:49:35.469]    <control if="powered_down" while="" timeout="0" info="">
[20:49:35.469]      // if-block "powered_down"
[20:49:35.469]        // =>  TRUE
[20:49:35.469]      <block atomic="false" info="">
[20:49:35.469]        Message(0, "Debug/System power-up request sent");
[20:49:35.472]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:49:35.473]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:49:35.473]      </block>
[20:49:35.473]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:49:35.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:49:35.473]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:49:35.473]        // while-condition  =>  FALSE
[20:49:35.473]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:49:35.473]      </control>
[20:49:35.473]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:49:35.473]        // if-block "(__protocol & 0xFFFF) == 1"
[20:49:35.473]          // =>  FALSE
[20:49:35.473]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:49:35.473]      </control>
[20:49:35.473]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:49:35.473]        // if-block "(__protocol & 0xFFFF) == 2"
[20:49:35.473]          // =>  TRUE
[20:49:35.473]        <block atomic="false" info="">
[20:49:35.473]          Message(0, "executing SWD power up");
[20:49:35.476]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:49:35.476]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:49:35.476]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:49:35.478]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:49:35.478]        </block>
[20:49:35.478]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:49:35.478]      </control>
[20:49:35.478]      // end if-block "powered_down"
[20:49:35.478]    </control>
[20:49:35.478]    <block atomic="false" info="">
[20:49:35.478]      __var DEBUG_PORT_VAL    = 0;
[20:49:35.478]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:49:35.478]      __var ACCESS_POINT_VAL  = 0;
[20:49:35.479]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:49:35.479]      __ap = 1; 
[20:49:35.479]        // -> [__ap <= 0x00000001]
[20:49:35.479]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:49:35.480]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:49:35.480]      __ap = 4;
[20:49:35.480]        // -> [__ap <= 0x00000004]
[20:49:35.480]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:35.482]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:49:35.482]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:49:35.482]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:35.484]    </block>
[20:49:35.484]    <block atomic="false" info="">
[20:49:35.484]      __var nReset = 0x80;
[20:49:35.484]        // -> [nReset <= 0x00000080]
[20:49:35.484]      __var canReadPins = 0;
[20:49:35.484]        // -> [canReadPins <= 0x00000000]
[20:49:35.484]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:49:35.484]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:49:35.484]        // -> [canReadPins <= 0x00000001]
[20:49:35.484]    </block>
[20:49:35.484]    <control if="" while="1" timeout="200" info="">
[20:49:35.484]      // while "1"  (timeout="200")
[20:49:35.484]      // while-condition  =>  TRUE
[20:49:35.484]      // while "1"  (timeout="200")
[20:49:35.484]      // while-condition  =>  TRUE
[20:49:35.484]      // while "1"  (timeout="200")
[20:49:35.484]      // while-condition  =>  TRUE
[20:49:35.484]      // while "1"  (timeout="200")
[20:49:35.484]      // while-condition  =>  TRUE
[20:49:35.484]      // while "1"  (timeout="200")
[20:49:35.488]      // while-condition  =>  TRUE
[20:49:35.488]      // while "1"  (timeout="200")
[20:49:35.488]      // while  =>  TIMEOUT
[20:49:35.488]      // end while "1"
[20:49:35.488]    </control>
[20:49:35.488]    <control if="canReadPins" while="" timeout="0" info="">
[20:49:35.488]      // if-block "canReadPins"
[20:49:35.488]        // =>  TRUE
[20:49:35.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:49:35.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:49:35.489]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:49:35.489]        // while-condition  =>  FALSE
[20:49:35.489]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:49:35.489]      </control>
[20:49:35.489]      // end if-block "canReadPins"
[20:49:35.489]    </control>
[20:49:35.489]    <control if="!canReadPins" while="" timeout="0" info="">
[20:49:35.489]      // if-block "!canReadPins"
[20:49:35.489]        // =>  FALSE
[20:49:35.489]      // skip if-block "!canReadPins"
[20:49:35.489]    </control>
[20:49:35.489]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:49:35.489]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:35.489]        // =>  TRUE
[20:49:35.489]      <block atomic="false" info="">
[20:49:35.489]        WriteAP(0x00, 0x190008);
[20:49:35.492]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:35.492]        WriteAP(0xF0, 0x01);
[20:49:35.492]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:35.492]      </block>
[20:49:35.492]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:35.492]    </control>
[20:49:35.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:49:35.494]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:35.494]        // =>  FALSE
[20:49:35.494]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:35.494]    </control>
[20:49:35.494]    <block atomic="false" info="">
[20:49:35.494]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:35.494]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:49:35.494]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:49:35.494]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:35.499]      __ap = 0; //lets make sure we reset the access point selection
[20:49:35.499]        // -> [__ap <= 0x00000000]
[20:49:35.499]    </block>
[20:49:35.499]  </sequence>
[20:49:35.499]  
[20:49:35.504]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:49:35.504]  
[20:49:35.504]  <debugvars>
[20:49:35.504]    // Pre-defined
[20:49:35.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:35.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:35.504]    __dp=0x00000000
[20:49:35.504]    __ap=0x00000000
[20:49:35.504]    __traceout=0x00000000      (Trace Disabled)
[20:49:35.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:35.504]    __FlashAddr=0x00000000
[20:49:35.504]    __FlashLen=0x00000000
[20:49:35.504]    __FlashArg=0x00000000
[20:49:35.504]    __FlashOp=0x00000000
[20:49:35.504]    __Result=0x00000000
[20:49:35.504]  </debugvars>
[20:49:35.504]  
[20:49:35.504]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:49:35.508]    <block atomic="false" info="">
[20:49:35.508]      __var deviceID = 0;
[20:49:35.508]        // -> [deviceID <= 0x00000000]
[20:49:35.508]      __var version = 0;
[20:49:35.508]        // -> [version <= 0x00000000]
[20:49:35.508]      __var partNum = 0;
[20:49:35.508]        // -> [partNum <= 0x00000000]
[20:49:35.508]      __var manuf = 0;
[20:49:35.508]        // -> [manuf <= 0x00000000]
[20:49:35.510]      __var isMSPM0G1X0X_G3X0X = 0;
[20:49:35.510]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:49:35.510]      __var isProduction = 0;
[20:49:35.510]        // -> [isProduction <= 0x00000000]
[20:49:35.510]      __var continueId = 0;
[20:49:35.510]        // -> [continueId <= 0x00000000]
[20:49:35.510]      deviceID =   Read32(0x41C40004);
[20:49:35.510]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:49:35.510]        // -> [deviceID <= 0x2BB8802F]
[20:49:35.510]      version = deviceID >> 28;
[20:49:35.510]        // -> [version <= 0x00000002]
[20:49:35.510]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:49:35.510]        // -> [partNum <= 0x0000BB88]
[20:49:35.513]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:49:35.513]        // -> [manuf <= 0x00000017]
[20:49:35.513]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:49:35.513]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:49:35.513]      isProduction = (version > 0);
[20:49:35.513]        // -> [isProduction <= 0x00000001]
[20:49:35.513]    </block>
[20:49:35.513]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:49:35.513]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:49:35.513]        // =>  FALSE
[20:49:35.513]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:49:35.513]    </control>
[20:49:35.513]    <control if="continueId == 4" while="" timeout="0" info="">
[20:49:35.513]      // if-block "continueId == 4"
[20:49:35.513]        // =>  FALSE
[20:49:35.513]      // skip if-block "continueId == 4"
[20:49:35.513]    </control>
[20:49:35.513]    <control if="!isProduction" while="" timeout="0" info="">
[20:49:35.513]      // if-block "!isProduction"
[20:49:35.513]        // =>  FALSE
[20:49:35.513]      // skip if-block "!isProduction"
[20:49:35.513]    </control>
[20:49:35.513]  </sequence>
[20:49:35.513]  
[20:55:27.774]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:55:27.774]  
[20:55:27.774]  <debugvars>
[20:55:27.774]    // Pre-defined
[20:55:27.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:27.774]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:27.774]    __dp=0x00000000
[20:55:27.774]    __ap=0x00000000
[20:55:27.774]    __traceout=0x00000000      (Trace Disabled)
[20:55:27.774]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:27.774]    __FlashAddr=0x00000000
[20:55:27.774]    __FlashLen=0x00000000
[20:55:27.774]    __FlashArg=0x00000000
[20:55:27.774]    __FlashOp=0x00000000
[20:55:27.774]    __Result=0x00000000
[20:55:27.774]  </debugvars>
[20:55:27.774]  
[20:55:27.776]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:55:27.776]    <block atomic="false" info="">
[20:55:27.776]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:55:27.776]        // -> [isSWJ <= 0x00000001]
[20:55:27.776]      __var hasDormant = __protocol & 0x00020000;
[20:55:27.776]        // -> [hasDormant <= 0x00000000]
[20:55:27.776]      __var protType   = __protocol & 0x0000FFFF;
[20:55:27.776]        // -> [protType <= 0x00000002]
[20:55:27.776]    </block>
[20:55:27.776]    <control if="protType == 1" while="" timeout="0" info="">
[20:55:27.776]      // if-block "protType == 1"
[20:55:27.776]        // =>  FALSE
[20:55:27.776]      // skip if-block "protType == 1"
[20:55:27.776]    </control>
[20:55:27.776]    <control if="protType == 2" while="" timeout="0" info="">
[20:55:27.776]      // if-block "protType == 2"
[20:55:27.778]        // =>  TRUE
[20:55:27.778]      <control if="isSWJ" while="" timeout="0" info="">
[20:55:27.778]        // if-block "isSWJ"
[20:55:27.778]          // =>  TRUE
[20:55:27.778]        <control if="hasDormant" while="" timeout="0" info="">
[20:55:27.778]          // if-block "hasDormant"
[20:55:27.778]            // =>  FALSE
[20:55:27.779]          // skip if-block "hasDormant"
[20:55:27.779]        </control>
[20:55:27.779]        <control if="!hasDormant" while="" timeout="0" info="">
[20:55:27.779]          // if-block "!hasDormant"
[20:55:27.779]            // =>  TRUE
[20:55:27.779]          <block atomic="false" info="">
[20:55:27.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:55:27.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:27.779]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:55:27.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:55:27.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:55:27.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:27.779]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:55:27.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:55:27.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:55:27.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:27.782]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:55:27.783]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:55:27.783]          </block>
[20:55:27.783]          // end if-block "!hasDormant"
[20:55:27.783]        </control>
[20:55:27.783]        // end if-block "isSWJ"
[20:55:27.783]      </control>
[20:55:27.784]      <control if="!isSWJ" while="" timeout="0" info="">
[20:55:27.784]        // if-block "!isSWJ"
[20:55:27.784]          // =>  FALSE
[20:55:27.784]        // skip if-block "!isSWJ"
[20:55:27.784]      </control>
[20:55:27.784]      <block atomic="false" info="">
[20:55:27.784]        ReadDP(0x0);
[20:55:27.784]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:55:27.784]      </block>
[20:55:27.784]      // end if-block "protType == 2"
[20:55:27.784]    </control>
[20:55:27.784]  </sequence>
[20:55:27.784]  
[20:55:27.786]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:55:27.786]  
[20:55:27.786]  <debugvars>
[20:55:27.786]    // Pre-defined
[20:55:27.786]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:27.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:27.786]    __dp=0x00000000
[20:55:27.786]    __ap=0x00000000
[20:55:27.786]    __traceout=0x00000000      (Trace Disabled)
[20:55:27.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:27.786]    __FlashAddr=0x00000000
[20:55:27.786]    __FlashLen=0x00000000
[20:55:27.786]    __FlashArg=0x00000000
[20:55:27.786]    __FlashOp=0x00000000
[20:55:27.786]    __Result=0x00000000
[20:55:27.786]  </debugvars>
[20:55:27.786]  
[20:55:27.786]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:55:27.786]    <block atomic="false" info="">
[20:55:27.786]      __var SW_DP_ABORT       = 0x0;
[20:55:27.786]        // -> [SW_DP_ABORT <= 0x00000000]
[20:55:27.786]      __var DP_CTRL_STAT      = 0x4;
[20:55:27.786]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:55:27.786]      __var DP_SELECT         = 0x8;
[20:55:27.786]        // -> [DP_SELECT <= 0x00000008]
[20:55:27.786]      __var powered_down      = 0;
[20:55:27.789]        // -> [powered_down <= 0x00000000]
[20:55:27.789]      WriteDP(DP_SELECT, 0x00000000);
[20:55:27.789]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:55:27.789]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:55:27.790]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:55:27.790]        // -> [powered_down <= 0x00000001]
[20:55:27.790]    </block>
[20:55:27.790]    <control if="powered_down" while="" timeout="0" info="">
[20:55:27.790]      // if-block "powered_down"
[20:55:27.790]        // =>  TRUE
[20:55:27.790]      <block atomic="false" info="">
[20:55:27.790]        Message(0, "Debug/System power-up request sent");
[20:55:27.790]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:55:27.790]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:55:27.790]      </block>
[20:55:27.790]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:55:27.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:55:27.790]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:55:27.790]        // while-condition  =>  FALSE
[20:55:27.790]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:55:27.790]      </control>
[20:55:27.790]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:55:27.790]        // if-block "(__protocol & 0xFFFF) == 1"
[20:55:27.793]          // =>  FALSE
[20:55:27.793]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:55:27.793]      </control>
[20:55:27.794]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:55:27.794]        // if-block "(__protocol & 0xFFFF) == 2"
[20:55:27.794]          // =>  TRUE
[20:55:27.794]        <block atomic="false" info="">
[20:55:27.794]          Message(0, "executing SWD power up");
[20:55:27.794]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:55:27.795]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:55:27.795]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:55:27.795]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:55:27.795]        </block>
[20:55:27.795]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:55:27.795]      </control>
[20:55:27.795]      // end if-block "powered_down"
[20:55:27.795]    </control>
[20:55:27.795]    <block atomic="false" info="">
[20:55:27.795]      __var DEBUG_PORT_VAL    = 0;
[20:55:27.795]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:55:27.795]      __var ACCESS_POINT_VAL  = 0;
[20:55:27.795]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:55:27.795]      __ap = 1; 
[20:55:27.795]        // -> [__ap <= 0x00000001]
[20:55:27.795]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:55:27.798]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:55:27.798]      __ap = 4;
[20:55:27.798]        // -> [__ap <= 0x00000004]
[20:55:27.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:27.799]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:55:27.799]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:55:27.799]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:27.800]    </block>
[20:55:27.800]    <block atomic="false" info="">
[20:55:27.800]      __var nReset = 0x80;
[20:55:27.800]        // -> [nReset <= 0x00000080]
[20:55:27.800]      __var canReadPins = 0;
[20:55:27.800]        // -> [canReadPins <= 0x00000000]
[20:55:27.800]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:55:27.800]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:55:27.800]        // -> [canReadPins <= 0x00000001]
[20:55:27.800]    </block>
[20:55:27.800]    <control if="" while="1" timeout="200" info="">
[20:55:27.800]      // while "1"  (timeout="200")
[20:55:27.800]      // while-condition  =>  TRUE
[20:55:27.800]      // while "1"  (timeout="200")
[20:55:27.800]      // while-condition  =>  TRUE
[20:55:27.800]      // while "1"  (timeout="200")
[20:55:27.800]      // while-condition  =>  TRUE
[20:55:27.802]      // while "1"  (timeout="200")
[20:55:27.802]      // while  =>  TIMEOUT
[20:55:27.802]      // end while "1"
[20:55:27.802]    </control>
[20:55:27.802]    <control if="canReadPins" while="" timeout="0" info="">
[20:55:27.802]      // if-block "canReadPins"
[20:55:27.802]        // =>  TRUE
[20:55:27.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:55:27.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:55:27.803]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:55:27.803]        // while-condition  =>  FALSE
[20:55:27.803]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:55:27.803]      </control>
[20:55:27.803]      // end if-block "canReadPins"
[20:55:27.803]    </control>
[20:55:27.803]    <control if="!canReadPins" while="" timeout="0" info="">
[20:55:27.803]      // if-block "!canReadPins"
[20:55:27.803]        // =>  FALSE
[20:55:27.803]      // skip if-block "!canReadPins"
[20:55:27.804]    </control>
[20:55:27.804]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:55:27.804]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:27.804]        // =>  TRUE
[20:55:27.804]      <block atomic="false" info="">
[20:55:27.804]        WriteAP(0x00, 0x190008);
[20:55:27.804]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:27.804]        WriteAP(0xF0, 0x01);
[20:55:27.806]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:27.806]      </block>
[20:55:27.806]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:27.806]    </control>
[20:55:27.806]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:55:27.806]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:27.806]        // =>  FALSE
[20:55:27.806]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:27.806]    </control>
[20:55:27.806]    <block atomic="false" info="">
[20:55:27.806]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:27.806]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:55:27.806]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:55:27.806]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:27.813]      __ap = 0; //lets make sure we reset the access point selection
[20:55:27.813]        // -> [__ap <= 0x00000000]
[20:55:27.814]    </block>
[20:55:27.814]  </sequence>
[20:55:27.814]  
[20:55:27.819]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:55:27.819]  
[20:55:27.819]  <debugvars>
[20:55:27.819]    // Pre-defined
[20:55:27.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:27.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:27.819]    __dp=0x00000000
[20:55:27.819]    __ap=0x00000000
[20:55:27.819]    __traceout=0x00000000      (Trace Disabled)
[20:55:27.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:27.819]    __FlashAddr=0x00000000
[20:55:27.819]    __FlashLen=0x00000000
[20:55:27.819]    __FlashArg=0x00000000
[20:55:27.819]    __FlashOp=0x00000000
[20:55:27.819]    __Result=0x00000000
[20:55:27.819]  </debugvars>
[20:55:27.819]  
[20:55:27.819]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:55:27.819]    <block atomic="false" info="">
[20:55:27.819]      __var deviceID = 0;
[20:55:27.819]        // -> [deviceID <= 0x00000000]
[20:55:27.819]      __var version = 0;
[20:55:27.819]        // -> [version <= 0x00000000]
[20:55:27.819]      __var partNum = 0;
[20:55:27.823]        // -> [partNum <= 0x00000000]
[20:55:27.823]      __var manuf = 0;
[20:55:27.823]        // -> [manuf <= 0x00000000]
[20:55:27.823]      __var isMSPM0G1X0X_G3X0X = 0;
[20:55:27.823]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:55:27.823]      __var isProduction = 0;
[20:55:27.823]        // -> [isProduction <= 0x00000000]
[20:55:27.823]      __var continueId = 0;
[20:55:27.824]        // -> [continueId <= 0x00000000]
[20:55:27.824]      deviceID =   Read32(0x41C40004);
[20:55:27.825]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:55:27.825]        // -> [deviceID <= 0x2BB8802F]
[20:55:27.825]      version = deviceID >> 28;
[20:55:27.825]        // -> [version <= 0x00000002]
[20:55:27.825]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:55:27.825]        // -> [partNum <= 0x0000BB88]
[20:55:27.825]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:55:27.825]        // -> [manuf <= 0x00000017]
[20:55:27.825]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:55:27.827]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:55:27.827]      isProduction = (version > 0);
[20:55:27.827]        // -> [isProduction <= 0x00000001]
[20:55:27.827]    </block>
[20:55:27.827]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:55:27.827]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:55:27.827]        // =>  FALSE
[20:55:27.827]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:55:27.827]    </control>
[20:55:27.827]    <control if="continueId == 4" while="" timeout="0" info="">
[20:55:27.827]      // if-block "continueId == 4"
[20:55:27.827]        // =>  FALSE
[20:55:27.827]      // skip if-block "continueId == 4"
[20:55:27.827]    </control>
[20:55:27.827]    <control if="!isProduction" while="" timeout="0" info="">
[20:55:27.827]      // if-block "!isProduction"
[20:55:27.827]        // =>  FALSE
[20:55:27.827]      // skip if-block "!isProduction"
[20:55:27.829]    </control>
[20:55:27.829]  </sequence>
[20:55:27.829]  
[20:56:42.274]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:56:42.274]  
[20:56:42.274]  <debugvars>
[20:56:42.274]    // Pre-defined
[20:56:42.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:42.277]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:56:42.277]    __dp=0x00000000
[20:56:42.277]    __ap=0x00000000
[20:56:42.277]    __traceout=0x00000000      (Trace Disabled)
[20:56:42.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:42.277]    __FlashAddr=0x00000000
[20:56:42.277]    __FlashLen=0x00000000
[20:56:42.277]    __FlashArg=0x00000000
[20:56:42.277]    __FlashOp=0x00000000
[20:56:42.277]    __Result=0x00000000
[20:56:42.277]  </debugvars>
[20:56:42.277]  
[20:56:42.277]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:56:42.277]    <block atomic="false" info="">
[20:56:42.277]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:56:42.277]        // -> [isSWJ <= 0x00000001]
[20:56:42.277]      __var hasDormant = __protocol & 0x00020000;
[20:56:42.277]        // -> [hasDormant <= 0x00000000]
[20:56:42.277]      __var protType   = __protocol & 0x0000FFFF;
[20:56:42.277]        // -> [protType <= 0x00000002]
[20:56:42.277]    </block>
[20:56:42.277]    <control if="protType == 1" while="" timeout="0" info="">
[20:56:42.277]      // if-block "protType == 1"
[20:56:42.277]        // =>  FALSE
[20:56:42.277]      // skip if-block "protType == 1"
[20:56:42.277]    </control>
[20:56:42.277]    <control if="protType == 2" while="" timeout="0" info="">
[20:56:42.277]      // if-block "protType == 2"
[20:56:42.277]        // =>  TRUE
[20:56:42.277]      <control if="isSWJ" while="" timeout="0" info="">
[20:56:42.277]        // if-block "isSWJ"
[20:56:42.277]          // =>  TRUE
[20:56:42.277]        <control if="hasDormant" while="" timeout="0" info="">
[20:56:42.281]          // if-block "hasDormant"
[20:56:42.281]            // =>  FALSE
[20:56:42.281]          // skip if-block "hasDormant"
[20:56:42.281]        </control>
[20:56:42.281]        <control if="!hasDormant" while="" timeout="0" info="">
[20:56:42.281]          // if-block "!hasDormant"
[20:56:42.281]            // =>  TRUE
[20:56:42.282]          <block atomic="false" info="">
[20:56:42.282]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:56:42.282]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:42.282]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:56:42.282]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:56:42.282]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:56:42.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:42.283]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:56:42.283]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:56:42.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:56:42.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:42.284]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:56:42.284]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:56:42.284]          </block>
[20:56:42.284]          // end if-block "!hasDormant"
[20:56:42.284]        </control>
[20:56:42.284]        // end if-block "isSWJ"
[20:56:42.284]      </control>
[20:56:42.284]      <control if="!isSWJ" while="" timeout="0" info="">
[20:56:42.284]        // if-block "!isSWJ"
[20:56:42.284]          // =>  FALSE
[20:56:42.285]        // skip if-block "!isSWJ"
[20:56:42.285]      </control>
[20:56:42.285]      <block atomic="false" info="">
[20:56:42.285]        ReadDP(0x0);
[20:56:42.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:56:42.285]      </block>
[20:56:42.285]      // end if-block "protType == 2"
[20:56:42.285]    </control>
[20:56:42.285]  </sequence>
[20:56:42.285]  
[20:56:42.285]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:56:42.285]  
[20:56:42.285]  <debugvars>
[20:56:42.285]    // Pre-defined
[20:56:42.285]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:42.285]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:56:42.285]    __dp=0x00000000
[20:56:42.285]    __ap=0x00000000
[20:56:42.285]    __traceout=0x00000000      (Trace Disabled)
[20:56:42.285]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:42.285]    __FlashAddr=0x00000000
[20:56:42.285]    __FlashLen=0x00000000
[20:56:42.285]    __FlashArg=0x00000000
[20:56:42.285]    __FlashOp=0x00000000
[20:56:42.288]    __Result=0x00000000
[20:56:42.288]  </debugvars>
[20:56:42.288]  
[20:56:42.288]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:56:42.288]    <block atomic="false" info="">
[20:56:42.288]      __var SW_DP_ABORT       = 0x0;
[20:56:42.288]        // -> [SW_DP_ABORT <= 0x00000000]
[20:56:42.288]      __var DP_CTRL_STAT      = 0x4;
[20:56:42.288]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:56:42.288]      __var DP_SELECT         = 0x8;
[20:56:42.288]        // -> [DP_SELECT <= 0x00000008]
[20:56:42.288]      __var powered_down      = 0;
[20:56:42.288]        // -> [powered_down <= 0x00000000]
[20:56:42.288]      WriteDP(DP_SELECT, 0x00000000);
[20:56:42.288]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:56:42.291]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:56:42.291]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:56:42.291]        // -> [powered_down <= 0x00000001]
[20:56:42.291]    </block>
[20:56:42.291]    <control if="powered_down" while="" timeout="0" info="">
[20:56:42.291]      // if-block "powered_down"
[20:56:42.291]        // =>  TRUE
[20:56:42.291]      <block atomic="false" info="">
[20:56:42.291]        Message(0, "Debug/System power-up request sent");
[20:56:42.293]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:56:42.294]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:56:42.294]      </block>
[20:56:42.294]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:56:42.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:56:42.294]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:56:42.294]        // while-condition  =>  FALSE
[20:56:42.294]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:56:42.294]      </control>
[20:56:42.294]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:56:42.294]        // if-block "(__protocol & 0xFFFF) == 1"
[20:56:42.294]          // =>  FALSE
[20:56:42.294]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:56:42.294]      </control>
[20:56:42.294]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:56:42.294]        // if-block "(__protocol & 0xFFFF) == 2"
[20:56:42.294]          // =>  TRUE
[20:56:42.294]        <block atomic="false" info="">
[20:56:42.294]          Message(0, "executing SWD power up");
[20:56:42.299]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:56:42.299]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:56:42.299]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:56:42.299]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:56:42.299]        </block>
[20:56:42.299]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:56:42.299]      </control>
[20:56:42.299]      // end if-block "powered_down"
[20:56:42.299]    </control>
[20:56:42.299]    <block atomic="false" info="">
[20:56:42.301]      __var DEBUG_PORT_VAL    = 0;
[20:56:42.301]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:56:42.301]      __var ACCESS_POINT_VAL  = 0;
[20:56:42.301]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:56:42.301]      __ap = 1; 
[20:56:42.301]        // -> [__ap <= 0x00000001]
[20:56:42.301]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:56:42.301]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:56:42.301]      __ap = 4;
[20:56:42.301]        // -> [__ap <= 0x00000004]
[20:56:42.301]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:56:42.303]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:56:42.303]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:56:42.304]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:56:42.305]    </block>
[20:56:42.305]    <block atomic="false" info="">
[20:56:42.305]      __var nReset = 0x80;
[20:56:42.305]        // -> [nReset <= 0x00000080]
[20:56:42.305]      __var canReadPins = 0;
[20:56:42.305]        // -> [canReadPins <= 0x00000000]
[20:56:42.305]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:56:42.305]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:56:42.305]        // -> [canReadPins <= 0x00000001]
[20:56:42.305]    </block>
[20:56:42.305]    <control if="" while="1" timeout="200" info="">
[20:56:42.305]      // while "1"  (timeout="200")
[20:56:42.305]      // while-condition  =>  TRUE
[20:56:42.305]      // while "1"  (timeout="200")
[20:56:42.305]      // while-condition  =>  TRUE
[20:56:42.305]      // while "1"  (timeout="200")
[20:56:42.305]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.308]      // while "1"  (timeout="200")
[20:56:42.308]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.310]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.310]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.310]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.310]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.310]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.310]      // while-condition  =>  TRUE
[20:56:42.310]      // while "1"  (timeout="200")
[20:56:42.312]      // while-condition  =>  TRUE
[20:56:42.312]      // while "1"  (timeout="200")
[20:56:42.312]      // while-condition  =>  TRUE
[20:56:42.312]      // while "1"  (timeout="200")
[20:56:42.312]      // while-condition  =>  TRUE
[20:56:42.312]      // while "1"  (timeout="200")
[20:56:42.313]      // while-condition  =>  TRUE
[20:56:42.313]      // while "1"  (timeout="200")
[20:56:42.313]      // while-condition  =>  TRUE
[20:56:42.313]      // while "1"  (timeout="200")
[20:56:42.313]      // while-condition  =>  TRUE
[20:56:42.313]      // while "1"  (timeout="200")
[20:56:42.313]      // while-condition  =>  TRUE
[20:56:42.313]      // while "1"  (timeout="200")
[20:56:42.313]      // while-condition  =>  TRUE
[20:56:42.313]      // while "1"  (timeout="200")
[20:56:42.313]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.314]      // while-condition  =>  TRUE
[20:56:42.314]      // while "1"  (timeout="200")
[20:56:42.316]      // while-condition  =>  TRUE
[20:56:42.316]      // while "1"  (timeout="200")
[20:56:42.316]      // while  =>  TIMEOUT
[20:56:42.316]      // end while "1"
[20:56:42.316]    </control>
[20:56:42.316]    <control if="canReadPins" while="" timeout="0" info="">
[20:56:42.316]      // if-block "canReadPins"
[20:56:42.316]        // =>  TRUE
[20:56:42.316]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:56:42.316]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:56:42.316]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:56:42.316]        // while-condition  =>  FALSE
[20:56:42.316]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:56:42.316]      </control>
[20:56:42.316]      // end if-block "canReadPins"
[20:56:42.316]    </control>
[20:56:42.316]    <control if="!canReadPins" while="" timeout="0" info="">
[20:56:42.316]      // if-block "!canReadPins"
[20:56:42.316]        // =>  FALSE
[20:56:42.316]      // skip if-block "!canReadPins"
[20:56:42.316]    </control>
[20:56:42.316]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:56:42.316]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:56:42.316]        // =>  TRUE
[20:56:42.316]      <block atomic="false" info="">
[20:56:42.316]        WriteAP(0x00, 0x190008);
[20:56:42.316]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:56:42.316]        WriteAP(0xF0, 0x01);
[20:56:42.321]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:56:42.321]      </block>
[20:56:42.321]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:56:42.322]    </control>
[20:56:42.322]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:56:42.322]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:56:42.322]        // =>  FALSE
[20:56:42.322]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:56:42.322]    </control>
[20:56:42.322]    <block atomic="false" info="">
[20:56:42.322]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:56:42.323]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:56:42.323]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:56:42.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:56:42.325]      __ap = 0; //lets make sure we reset the access point selection
[20:56:42.325]        // -> [__ap <= 0x00000000]
[20:56:42.325]    </block>
[20:56:42.325]  </sequence>
[20:56:42.325]  
[20:56:42.330]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:56:42.330]  
[20:56:42.330]  <debugvars>
[20:56:42.330]    // Pre-defined
[20:56:42.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:42.330]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:56:42.330]    __dp=0x00000000
[20:56:42.332]    __ap=0x00000000
[20:56:42.332]    __traceout=0x00000000      (Trace Disabled)
[20:56:42.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:42.332]    __FlashAddr=0x00000000
[20:56:42.332]    __FlashLen=0x00000000
[20:56:42.332]    __FlashArg=0x00000000
[20:56:42.332]    __FlashOp=0x00000000
[20:56:42.332]    __Result=0x00000000
[20:56:42.332]  </debugvars>
[20:56:42.332]  
[20:56:42.333]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:56:42.333]    <block atomic="false" info="">
[20:56:42.333]      __var deviceID = 0;
[20:56:42.334]        // -> [deviceID <= 0x00000000]
[20:56:42.334]      __var version = 0;
[20:56:42.334]        // -> [version <= 0x00000000]
[20:56:42.334]      __var partNum = 0;
[20:56:42.334]        // -> [partNum <= 0x00000000]
[20:56:42.334]      __var manuf = 0;
[20:56:42.334]        // -> [manuf <= 0x00000000]
[20:56:42.334]      __var isMSPM0G1X0X_G3X0X = 0;
[20:56:42.334]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:56:42.334]      __var isProduction = 0;
[20:56:42.334]        // -> [isProduction <= 0x00000000]
[20:56:42.334]      __var continueId = 0;
[20:56:42.334]        // -> [continueId <= 0x00000000]
[20:56:42.334]      deviceID =   Read32(0x41C40004);
[20:56:42.335]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:56:42.335]        // -> [deviceID <= 0x2BB8802F]
[20:56:42.335]      version = deviceID >> 28;
[20:56:42.335]        // -> [version <= 0x00000002]
[20:56:42.335]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:56:42.337]        // -> [partNum <= 0x0000BB88]
[20:56:42.337]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:56:42.338]        // -> [manuf <= 0x00000017]
[20:56:42.338]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:56:42.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:56:42.338]      isProduction = (version > 0);
[20:56:42.338]        // -> [isProduction <= 0x00000001]
[20:56:42.338]    </block>
[20:56:42.338]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:56:42.338]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:56:42.338]        // =>  FALSE
[20:56:42.339]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:56:42.339]    </control>
[20:56:42.339]    <control if="continueId == 4" while="" timeout="0" info="">
[20:56:42.339]      // if-block "continueId == 4"
[20:56:42.339]        // =>  FALSE
[20:56:42.339]      // skip if-block "continueId == 4"
[20:56:42.339]    </control>
[20:56:42.339]    <control if="!isProduction" while="" timeout="0" info="">
[20:56:42.339]      // if-block "!isProduction"
[20:56:42.339]        // =>  FALSE
[20:56:42.339]      // skip if-block "!isProduction"
[20:56:42.339]    </control>
[20:56:42.339]  </sequence>
[20:56:42.340]  
