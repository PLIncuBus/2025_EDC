/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0006.log
 *  Created     : 16:06:58 (23/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[16:06:58.307]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:06:58.307]  
[16:06:58.307]  <debugvars>
[16:06:58.308]    // Pre-defined
[16:06:58.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:58.308]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:58.308]    __dp=0x00000000
[16:06:58.308]    __ap=0x00000000
[16:06:58.308]    __traceout=0x00000000      (Trace Disabled)
[16:06:58.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:58.309]    __FlashAddr=0x00000000
[16:06:58.309]    __FlashLen=0x00000000
[16:06:58.309]    __FlashArg=0x00000000
[16:06:58.309]    __FlashOp=0x00000000
[16:06:58.309]    __Result=0x00000000
[16:06:58.309]  </debugvars>
[16:06:58.309]  
[16:06:58.309]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:06:58.309]    <block atomic="false" info="">
[16:06:58.309]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:06:58.310]        // -> [isSWJ <= 0x00000001]
[16:06:58.310]      __var hasDormant = __protocol & 0x00020000;
[16:06:58.310]        // -> [hasDormant <= 0x00000000]
[16:06:58.310]      __var protType   = __protocol & 0x0000FFFF;
[16:06:58.310]        // -> [protType <= 0x00000002]
[16:06:58.310]    </block>
[16:06:58.310]    <control if="protType == 1" while="" timeout="0" info="">
[16:06:58.310]      // if-block "protType == 1"
[16:06:58.310]        // =>  FALSE
[16:06:58.310]      // skip if-block "protType == 1"
[16:06:58.311]    </control>
[16:06:58.311]    <control if="protType == 2" while="" timeout="0" info="">
[16:06:58.311]      // if-block "protType == 2"
[16:06:58.311]        // =>  TRUE
[16:06:58.311]      <control if="isSWJ" while="" timeout="0" info="">
[16:06:58.311]        // if-block "isSWJ"
[16:06:58.311]          // =>  TRUE
[16:06:58.311]        <control if="hasDormant" while="" timeout="0" info="">
[16:06:58.312]          // if-block "hasDormant"
[16:06:58.312]            // =>  FALSE
[16:06:58.312]          // skip if-block "hasDormant"
[16:06:58.312]        </control>
[16:06:58.312]        <control if="!hasDormant" while="" timeout="0" info="">
[16:06:58.313]          // if-block "!hasDormant"
[16:06:58.313]            // =>  TRUE
[16:06:58.313]          <block atomic="false" info="">
[16:06:58.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:06:58.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:58.313]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:06:58.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:06:58.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:06:58.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:58.315]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:06:58.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:06:58.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:06:58.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:58.315]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:06:58.316]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:06:58.316]          </block>
[16:06:58.316]          // end if-block "!hasDormant"
[16:06:58.316]        </control>
[16:06:58.316]        // end if-block "isSWJ"
[16:06:58.316]      </control>
[16:06:58.316]      <control if="!isSWJ" while="" timeout="0" info="">
[16:06:58.316]        // if-block "!isSWJ"
[16:06:58.317]          // =>  FALSE
[16:06:58.317]        // skip if-block "!isSWJ"
[16:06:58.317]      </control>
[16:06:58.317]      <block atomic="false" info="">
[16:06:58.317]        ReadDP(0x0);
[16:06:58.317]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:06:58.317]      </block>
[16:06:58.318]      // end if-block "protType == 2"
[16:06:58.318]    </control>
[16:06:58.318]  </sequence>
[16:06:58.318]  
[16:06:58.318]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:06:58.318]  
[16:06:58.319]  <debugvars>
[16:06:58.319]    // Pre-defined
[16:06:58.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:58.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:58.319]    __dp=0x00000000
[16:06:58.319]    __ap=0x00000000
[16:06:58.319]    __traceout=0x00000000      (Trace Disabled)
[16:06:58.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:58.319]    __FlashAddr=0x00000000
[16:06:58.319]    __FlashLen=0x00000000
[16:06:58.320]    __FlashArg=0x00000000
[16:06:58.320]    __FlashOp=0x00000000
[16:06:58.320]    __Result=0x00000000
[16:06:58.320]  </debugvars>
[16:06:58.320]  
[16:06:58.320]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:06:58.320]    <block atomic="false" info="">
[16:06:58.320]      __var SW_DP_ABORT       = 0x0;
[16:06:58.320]        // -> [SW_DP_ABORT <= 0x00000000]
[16:06:58.320]      __var DP_CTRL_STAT      = 0x4;
[16:06:58.320]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:06:58.320]      __var DP_SELECT         = 0x8;
[16:06:58.321]        // -> [DP_SELECT <= 0x00000008]
[16:06:58.321]      __var powered_down      = 0;
[16:06:58.321]        // -> [powered_down <= 0x00000000]
[16:06:58.321]      WriteDP(DP_SELECT, 0x00000000);
[16:06:58.322]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:06:58.322]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:06:58.322]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:06:58.322]        // -> [powered_down <= 0x00000001]
[16:06:58.323]    </block>
[16:06:58.323]    <control if="powered_down" while="" timeout="0" info="">
[16:06:58.323]      // if-block "powered_down"
[16:06:58.323]        // =>  TRUE
[16:06:58.323]      <block atomic="false" info="">
[16:06:58.323]        Message(0, "Debug/System power-up request sent");
[16:06:58.325]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:06:58.326]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:06:58.326]      </block>
[16:06:58.326]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:06:58.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:06:58.327]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:06:58.327]        // while-condition  =>  FALSE
[16:06:58.327]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:06:58.327]      </control>
[16:06:58.327]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:06:58.327]        // if-block "(__protocol & 0xFFFF) == 1"
[16:06:58.328]          // =>  FALSE
[16:06:58.328]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:06:58.328]      </control>
[16:06:58.328]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:06:58.328]        // if-block "(__protocol & 0xFFFF) == 2"
[16:06:58.328]          // =>  TRUE
[16:06:58.328]        <block atomic="false" info="">
[16:06:58.328]          Message(0, "executing SWD power up");
[16:06:58.330]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:06:58.331]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:06:58.331]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:06:58.331]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:06:58.332]        </block>
[16:06:58.332]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:06:58.332]      </control>
[16:06:58.332]      // end if-block "powered_down"
[16:06:58.332]    </control>
[16:06:58.332]    <block atomic="false" info="">
[16:06:58.332]      __var DEBUG_PORT_VAL    = 0;
[16:06:58.332]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:06:58.332]      __var ACCESS_POINT_VAL  = 0;
[16:06:58.332]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:06:58.333]      __ap = 1; 
[16:06:58.333]        // -> [__ap <= 0x00000001]
[16:06:58.333]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:06:58.335]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:06:58.335]      __ap = 4;
[16:06:58.335]        // -> [__ap <= 0x00000004]
[16:06:58.335]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:58.336]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:06:58.336]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:06:58.336]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:58.338]    </block>
[16:06:58.338]    <block atomic="false" info="">
[16:06:58.338]      __var nReset = 0x80;
[16:06:58.338]        // -> [nReset <= 0x00000080]
[16:06:58.338]      __var canReadPins = 0;
[16:06:58.338]        // -> [canReadPins <= 0x00000000]
[16:06:58.338]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:06:58.339]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:06:58.339]        // -> [canReadPins <= 0x00000001]
[16:06:58.339]    </block>
[16:06:58.339]    <control if="" while="1" timeout="200" info="">
[16:06:58.339]      // while "1"  (timeout="200")
[16:06:58.339]      // while-condition  =>  TRUE
[16:06:58.339]      // while "1"  (timeout="200")
[16:06:58.340]      // while-condition  =>  TRUE
[16:06:58.340]      // while "1"  (timeout="200")
[16:06:58.340]      // while-condition  =>  TRUE
[16:06:58.340]      // while "1"  (timeout="200")
[16:06:58.340]      // while-condition  =>  TRUE
[16:06:58.340]      // while "1"  (timeout="200")
[16:06:58.340]      // while-condition  =>  TRUE
[16:06:58.340]      // while "1"  (timeout="200")
[16:06:58.340]      // while-condition  =>  TRUE
[16:06:58.341]      // while "1"  (timeout="200")
[16:06:58.341]      // while-condition  =>  TRUE
[16:06:58.341]      // while "1"  (timeout="200")
[16:06:58.341]      // while-condition  =>  TRUE
[16:06:58.341]      // while "1"  (timeout="200")
[16:06:58.341]      // while-condition  =>  TRUE
[16:06:58.341]      // while "1"  (timeout="200")
[16:06:58.342]      // while-condition  =>  TRUE
[16:06:58.342]      // while "1"  (timeout="200")
[16:06:58.342]      // while-condition  =>  TRUE
[16:06:58.342]      // while "1"  (timeout="200")
[16:06:58.342]      // while-condition  =>  TRUE
[16:06:58.342]      // while "1"  (timeout="200")
[16:06:58.342]      // while-condition  =>  TRUE
[16:06:58.342]      // while "1"  (timeout="200")
[16:06:58.342]      // while-condition  =>  TRUE
[16:06:58.342]      // while "1"  (timeout="200")
[16:06:58.343]      // while-condition  =>  TRUE
[16:06:58.343]      // while "1"  (timeout="200")
[16:06:58.343]      // while-condition  =>  TRUE
[16:06:58.343]      // while "1"  (timeout="200")
[16:06:58.343]      // while-condition  =>  TRUE
[16:06:58.343]      // while "1"  (timeout="200")
[16:06:58.343]      // while-condition  =>  TRUE
[16:06:58.343]      // while "1"  (timeout="200")
[16:06:58.343]      // while-condition  =>  TRUE
[16:06:58.343]      // while "1"  (timeout="200")
[16:06:58.343]      // while-condition  =>  TRUE
[16:06:58.344]      // while "1"  (timeout="200")
[16:06:58.344]      // while-condition  =>  TRUE
[16:06:58.344]      // while "1"  (timeout="200")
[16:06:58.344]      // while-condition  =>  TRUE
[16:06:58.344]      // while "1"  (timeout="200")
[16:06:58.344]      // while-condition  =>  TRUE
[16:06:58.344]      // while "1"  (timeout="200")
[16:06:58.344]      // while-condition  =>  TRUE
[16:06:58.344]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.345]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.345]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.345]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.345]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.345]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.345]      // while "1"  (timeout="200")
[16:06:58.345]      // while-condition  =>  TRUE
[16:06:58.347]      // while "1"  (timeout="200")
[16:06:58.347]      // while-condition  =>  TRUE
[16:06:58.347]      // while "1"  (timeout="200")
[16:06:58.347]      // while-condition  =>  TRUE
[16:06:58.347]      // while "1"  (timeout="200")
[16:06:58.347]      // while-condition  =>  TRUE
[16:06:58.348]      // while "1"  (timeout="200")
[16:06:58.348]      // while-condition  =>  TRUE
[16:06:58.348]      // while "1"  (timeout="200")
[16:06:58.348]      // while-condition  =>  TRUE
[16:06:58.348]      // while "1"  (timeout="200")
[16:06:58.348]      // while-condition  =>  TRUE
[16:06:58.349]      // while "1"  (timeout="200")
[16:06:58.349]      // while-condition  =>  TRUE
[16:06:58.349]      // while "1"  (timeout="200")
[16:06:58.349]      // while-condition  =>  TRUE
[16:06:58.349]      // while "1"  (timeout="200")
[16:06:58.349]      // while-condition  =>  TRUE
[16:06:58.349]      // while "1"  (timeout="200")
[16:06:58.349]      // while-condition  =>  TRUE
[16:06:58.349]      // while "1"  (timeout="200")
[16:06:58.349]      // while-condition  =>  TRUE
[16:06:58.350]      // while "1"  (timeout="200")
[16:06:58.350]      // while  =>  TIMEOUT
[16:06:58.350]      // end while "1"
[16:06:58.350]    </control>
[16:06:58.350]    <control if="canReadPins" while="" timeout="0" info="">
[16:06:58.350]      // if-block "canReadPins"
[16:06:58.350]        // =>  TRUE
[16:06:58.350]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:06:58.350]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:06:58.350]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:06:58.350]        // while-condition  =>  FALSE
[16:06:58.351]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:06:58.351]      </control>
[16:06:58.351]      // end if-block "canReadPins"
[16:06:58.351]    </control>
[16:06:58.351]    <control if="!canReadPins" while="" timeout="0" info="">
[16:06:58.351]      // if-block "!canReadPins"
[16:06:58.351]        // =>  FALSE
[16:06:58.351]      // skip if-block "!canReadPins"
[16:06:58.352]    </control>
[16:06:58.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:06:58.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:58.352]        // =>  TRUE
[16:06:58.352]      <block atomic="false" info="">
[16:06:58.352]        WriteAP(0x00, 0x190008);
[16:06:58.353]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:58.353]        WriteAP(0xF0, 0x01);
[16:06:58.355]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:58.355]      </block>
[16:06:58.355]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:58.355]    </control>
[16:06:58.355]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:06:58.355]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:58.355]        // =>  FALSE
[16:06:58.356]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:58.356]    </control>
[16:06:58.356]    <block atomic="false" info="">
[16:06:58.356]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:58.357]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:06:58.357]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:06:58.357]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:58.359]      __ap = 0; //lets make sure we reset the access point selection
[16:06:58.359]        // -> [__ap <= 0x00000000]
[16:06:58.359]    </block>
[16:06:58.359]  </sequence>
[16:06:58.359]  
[16:06:58.366]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:06:58.366]  
[16:06:58.366]  <debugvars>
[16:06:58.366]    // Pre-defined
[16:06:58.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:58.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:58.366]    __dp=0x00000000
[16:06:58.366]    __ap=0x00000000
[16:06:58.366]    __traceout=0x00000000      (Trace Disabled)
[16:06:58.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:58.366]    __FlashAddr=0x00000000
[16:06:58.367]    __FlashLen=0x00000000
[16:06:58.367]    __FlashArg=0x00000000
[16:06:58.367]    __FlashOp=0x00000000
[16:06:58.367]    __Result=0x00000000
[16:06:58.367]  </debugvars>
[16:06:58.367]  
[16:06:58.367]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:06:58.367]    <block atomic="false" info="">
[16:06:58.367]      __var deviceID = 0;
[16:06:58.367]        // -> [deviceID <= 0x00000000]
[16:06:58.368]      __var version = 0;
[16:06:58.368]        // -> [version <= 0x00000000]
[16:06:58.368]      __var partNum = 0;
[16:06:58.368]        // -> [partNum <= 0x00000000]
[16:06:58.368]      __var manuf = 0;
[16:06:58.368]        // -> [manuf <= 0x00000000]
[16:06:58.368]      __var isMSPM0G1X0X_G3X0X = 0;
[16:06:58.369]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:06:58.369]      __var isProduction = 0;
[16:06:58.369]        // -> [isProduction <= 0x00000000]
[16:06:58.369]      __var continueId = 0;
[16:06:58.369]        // -> [continueId <= 0x00000000]
[16:06:58.369]      deviceID =   Read32(0x41C40004);
[16:06:58.371]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:06:58.371]        // -> [deviceID <= 0x2BB8802F]
[16:06:58.372]      version = deviceID >> 28;
[16:06:58.372]        // -> [version <= 0x00000002]
[16:06:58.372]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:06:58.372]        // -> [partNum <= 0x0000BB88]
[16:06:58.372]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:06:58.372]        // -> [manuf <= 0x00000017]
[16:06:58.373]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:06:58.373]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:06:58.373]      isProduction = (version > 0);
[16:06:58.373]        // -> [isProduction <= 0x00000001]
[16:06:58.373]    </block>
[16:06:58.373]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:06:58.373]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:06:58.373]        // =>  FALSE
[16:06:58.373]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:06:58.374]    </control>
[16:06:58.374]    <control if="continueId == 4" while="" timeout="0" info="">
[16:06:58.374]      // if-block "continueId == 4"
[16:06:58.374]        // =>  FALSE
[16:06:58.374]      // skip if-block "continueId == 4"
[16:06:58.374]    </control>
[16:06:58.374]    <control if="!isProduction" while="" timeout="0" info="">
[16:06:58.375]      // if-block "!isProduction"
[16:06:58.375]        // =>  FALSE
[16:06:58.375]      // skip if-block "!isProduction"
[16:06:58.375]    </control>
[16:06:58.375]  </sequence>
[16:06:58.375]  
[16:07:18.950]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:07:18.950]  
[16:07:18.950]  <debugvars>
[16:07:18.950]    // Pre-defined
[16:07:18.950]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:18.950]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:07:18.950]    __dp=0x00000000
[16:07:18.951]    __ap=0x00000000
[16:07:18.951]    __traceout=0x00000000      (Trace Disabled)
[16:07:18.951]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:18.951]    __FlashAddr=0x00000000
[16:07:18.951]    __FlashLen=0x00000000
[16:07:18.951]    __FlashArg=0x00000000
[16:07:18.951]    __FlashOp=0x00000000
[16:07:18.951]    __Result=0x00000000
[16:07:18.951]  </debugvars>
[16:07:18.951]  
[16:07:18.951]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:07:18.953]    <block atomic="false" info="">
[16:07:18.953]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:07:18.953]        // -> [isSWJ <= 0x00000001]
[16:07:18.953]      __var hasDormant = __protocol & 0x00020000;
[16:07:18.953]        // -> [hasDormant <= 0x00000000]
[16:07:18.953]      __var protType   = __protocol & 0x0000FFFF;
[16:07:18.953]        // -> [protType <= 0x00000002]
[16:07:18.953]    </block>
[16:07:18.953]    <control if="protType == 1" while="" timeout="0" info="">
[16:07:18.954]      // if-block "protType == 1"
[16:07:18.954]        // =>  FALSE
[16:07:18.954]      // skip if-block "protType == 1"
[16:07:18.954]    </control>
[16:07:18.954]    <control if="protType == 2" while="" timeout="0" info="">
[16:07:18.954]      // if-block "protType == 2"
[16:07:18.955]        // =>  TRUE
[16:07:18.955]      <control if="isSWJ" while="" timeout="0" info="">
[16:07:18.955]        // if-block "isSWJ"
[16:07:18.955]          // =>  TRUE
[16:07:18.955]        <control if="hasDormant" while="" timeout="0" info="">
[16:07:18.955]          // if-block "hasDormant"
[16:07:18.955]            // =>  FALSE
[16:07:18.956]          // skip if-block "hasDormant"
[16:07:18.956]        </control>
[16:07:18.956]        <control if="!hasDormant" while="" timeout="0" info="">
[16:07:18.956]          // if-block "!hasDormant"
[16:07:18.956]            // =>  TRUE
[16:07:18.956]          <block atomic="false" info="">
[16:07:18.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:07:18.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:18.957]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:07:18.957]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:07:18.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:07:18.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:18.957]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:07:18.958]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:07:18.958]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:07:18.958]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:18.958]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:07:18.958]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:07:18.958]          </block>
[16:07:18.959]          // end if-block "!hasDormant"
[16:07:18.959]        </control>
[16:07:18.959]        // end if-block "isSWJ"
[16:07:18.959]      </control>
[16:07:18.959]      <control if="!isSWJ" while="" timeout="0" info="">
[16:07:18.959]        // if-block "!isSWJ"
[16:07:18.959]          // =>  FALSE
[16:07:18.959]        // skip if-block "!isSWJ"
[16:07:18.959]      </control>
[16:07:18.960]      <block atomic="false" info="">
[16:07:18.960]        ReadDP(0x0);
[16:07:18.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:07:18.960]      </block>
[16:07:18.960]      // end if-block "protType == 2"
[16:07:18.960]    </control>
[16:07:18.960]  </sequence>
[16:07:18.960]  
[16:07:18.961]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:07:18.961]  
[16:07:18.961]  <debugvars>
[16:07:18.961]    // Pre-defined
[16:07:18.961]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:18.961]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:07:18.962]    __dp=0x00000000
[16:07:18.962]    __ap=0x00000000
[16:07:18.962]    __traceout=0x00000000      (Trace Disabled)
[16:07:18.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:18.962]    __FlashAddr=0x00000000
[16:07:18.962]    __FlashLen=0x00000000
[16:07:18.962]    __FlashArg=0x00000000
[16:07:18.962]    __FlashOp=0x00000000
[16:07:18.962]    __Result=0x00000000
[16:07:18.962]  </debugvars>
[16:07:18.963]  
[16:07:18.963]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:07:18.963]    <block atomic="false" info="">
[16:07:18.963]      __var SW_DP_ABORT       = 0x0;
[16:07:18.963]        // -> [SW_DP_ABORT <= 0x00000000]
[16:07:18.963]      __var DP_CTRL_STAT      = 0x4;
[16:07:18.963]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:07:18.963]      __var DP_SELECT         = 0x8;
[16:07:18.963]        // -> [DP_SELECT <= 0x00000008]
[16:07:18.963]      __var powered_down      = 0;
[16:07:18.964]        // -> [powered_down <= 0x00000000]
[16:07:18.964]      WriteDP(DP_SELECT, 0x00000000);
[16:07:18.964]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:07:18.965]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:07:18.965]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:07:18.965]        // -> [powered_down <= 0x00000001]
[16:07:18.965]    </block>
[16:07:18.965]    <control if="powered_down" while="" timeout="0" info="">
[16:07:18.965]      // if-block "powered_down"
[16:07:18.965]        // =>  TRUE
[16:07:18.967]      <block atomic="false" info="">
[16:07:18.967]        Message(0, "Debug/System power-up request sent");
[16:07:18.968]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:07:18.969]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:07:18.969]      </block>
[16:07:18.969]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:07:18.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:07:18.970]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:07:18.970]        // while-condition  =>  FALSE
[16:07:18.970]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:07:18.970]      </control>
[16:07:18.970]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:07:18.970]        // if-block "(__protocol & 0xFFFF) == 1"
[16:07:18.970]          // =>  FALSE
[16:07:18.971]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:07:18.971]      </control>
[16:07:18.971]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:07:18.971]        // if-block "(__protocol & 0xFFFF) == 2"
[16:07:18.971]          // =>  TRUE
[16:07:18.971]        <block atomic="false" info="">
[16:07:18.971]          Message(0, "executing SWD power up");
[16:07:18.972]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:07:18.973]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:07:18.973]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:07:18.974]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:07:18.974]        </block>
[16:07:18.974]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:07:18.974]      </control>
[16:07:18.974]      // end if-block "powered_down"
[16:07:18.974]    </control>
[16:07:18.975]    <block atomic="false" info="">
[16:07:18.975]      __var DEBUG_PORT_VAL    = 0;
[16:07:18.975]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:07:18.975]      __var ACCESS_POINT_VAL  = 0;
[16:07:18.975]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:07:18.975]      __ap = 1; 
[16:07:18.975]        // -> [__ap <= 0x00000001]
[16:07:18.975]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:07:18.977]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:07:18.977]      __ap = 4;
[16:07:18.977]        // -> [__ap <= 0x00000004]
[16:07:18.977]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:07:18.978]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:07:18.978]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:07:18.978]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:07:18.980]    </block>
[16:07:18.980]    <block atomic="false" info="">
[16:07:18.980]      __var nReset = 0x80;
[16:07:18.980]        // -> [nReset <= 0x00000080]
[16:07:18.981]      __var canReadPins = 0;
[16:07:18.981]        // -> [canReadPins <= 0x00000000]
[16:07:18.981]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:07:18.981]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:07:18.981]        // -> [canReadPins <= 0x00000001]
[16:07:18.981]    </block>
[16:07:18.981]    <control if="" while="1" timeout="200" info="">
[16:07:18.981]      // while "1"  (timeout="200")
[16:07:18.983]      // while-condition  =>  TRUE
[16:07:18.983]      // while "1"  (timeout="200")
[16:07:18.983]      // while-condition  =>  TRUE
[16:07:18.983]      // while "1"  (timeout="200")
[16:07:18.983]      // while-condition  =>  TRUE
[16:07:18.983]      // while "1"  (timeout="200")
[16:07:18.984]      // while-condition  =>  TRUE
[16:07:18.984]      // while "1"  (timeout="200")
[16:07:18.984]      // while-condition  =>  TRUE
[16:07:18.984]      // while "1"  (timeout="200")
[16:07:18.984]      // while-condition  =>  TRUE
[16:07:18.984]      // while "1"  (timeout="200")
[16:07:18.984]      // while-condition  =>  TRUE
[16:07:18.984]      // while "1"  (timeout="200")
[16:07:18.984]      // while-condition  =>  TRUE
[16:07:18.984]      // while "1"  (timeout="200")
[16:07:18.984]      // while-condition  =>  TRUE
[16:07:18.984]      // while "1"  (timeout="200")
[16:07:18.985]      // while-condition  =>  TRUE
[16:07:18.985]      // while "1"  (timeout="200")
[16:07:18.985]      // while-condition  =>  TRUE
[16:07:18.985]      // while "1"  (timeout="200")
[16:07:18.985]      // while-condition  =>  TRUE
[16:07:18.985]      // while "1"  (timeout="200")
[16:07:18.985]      // while-condition  =>  TRUE
[16:07:18.986]      // while "1"  (timeout="200")
[16:07:18.986]      // while-condition  =>  TRUE
[16:07:18.986]      // while "1"  (timeout="200")
[16:07:18.986]      // while-condition  =>  TRUE
[16:07:18.986]      // while "1"  (timeout="200")
[16:07:18.986]      // while-condition  =>  TRUE
[16:07:18.986]      // while "1"  (timeout="200")
[16:07:18.986]      // while-condition  =>  TRUE
[16:07:18.986]      // while "1"  (timeout="200")
[16:07:18.986]      // while-condition  =>  TRUE
[16:07:18.987]      // while "1"  (timeout="200")
[16:07:18.987]      // while-condition  =>  TRUE
[16:07:18.987]      // while "1"  (timeout="200")
[16:07:18.987]      // while-condition  =>  TRUE
[16:07:18.987]      // while "1"  (timeout="200")
[16:07:18.987]      // while-condition  =>  TRUE
[16:07:18.987]      // while "1"  (timeout="200")
[16:07:18.988]      // while-condition  =>  TRUE
[16:07:18.988]      // while "1"  (timeout="200")
[16:07:18.988]      // while-condition  =>  TRUE
[16:07:18.988]      // while "1"  (timeout="200")
[16:07:18.988]      // while-condition  =>  TRUE
[16:07:18.988]      // while "1"  (timeout="200")
[16:07:18.988]      // while-condition  =>  TRUE
[16:07:18.988]      // while "1"  (timeout="200")
[16:07:18.988]      // while-condition  =>  TRUE
[16:07:18.988]      // while "1"  (timeout="200")
[16:07:18.989]      // while-condition  =>  TRUE
[16:07:18.989]      // while "1"  (timeout="200")
[16:07:18.989]      // while-condition  =>  TRUE
[16:07:18.989]      // while "1"  (timeout="200")
[16:07:18.989]      // while-condition  =>  TRUE
[16:07:18.989]      // while "1"  (timeout="200")
[16:07:18.989]      // while-condition  =>  TRUE
[16:07:18.989]      // while "1"  (timeout="200")
[16:07:18.989]      // while-condition  =>  TRUE
[16:07:18.989]      // while "1"  (timeout="200")
[16:07:18.989]      // while-condition  =>  TRUE
[16:07:18.989]      // while "1"  (timeout="200")
[16:07:18.991]      // while-condition  =>  TRUE
[16:07:18.991]      // while "1"  (timeout="200")
[16:07:18.991]      // while  =>  TIMEOUT
[16:07:18.991]      // end while "1"
[16:07:18.991]    </control>
[16:07:18.991]    <control if="canReadPins" while="" timeout="0" info="">
[16:07:18.991]      // if-block "canReadPins"
[16:07:18.991]        // =>  TRUE
[16:07:18.992]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:07:18.992]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:07:18.992]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:07:18.992]        // while-condition  =>  FALSE
[16:07:18.992]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:07:18.992]      </control>
[16:07:18.992]      // end if-block "canReadPins"
[16:07:18.993]    </control>
[16:07:18.993]    <control if="!canReadPins" while="" timeout="0" info="">
[16:07:18.993]      // if-block "!canReadPins"
[16:07:18.993]        // =>  FALSE
[16:07:18.993]      // skip if-block "!canReadPins"
[16:07:18.993]    </control>
[16:07:18.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:07:18.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:07:18.993]        // =>  TRUE
[16:07:18.993]      <block atomic="false" info="">
[16:07:18.993]        WriteAP(0x00, 0x190008);
[16:07:18.994]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:18.995]        WriteAP(0xF0, 0x01);
[16:07:18.996]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:18.996]      </block>
[16:07:18.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:07:18.996]    </control>
[16:07:18.997]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:07:18.997]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:07:18.997]        // =>  FALSE
[16:07:18.997]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:07:18.997]    </control>
[16:07:18.997]    <block atomic="false" info="">
[16:07:18.997]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:07:18.998]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:07:18.998]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:07:18.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:07:19.000]      __ap = 0; //lets make sure we reset the access point selection
[16:07:19.000]        // -> [__ap <= 0x00000000]
[16:07:19.000]    </block>
[16:07:19.000]  </sequence>
[16:07:19.000]  
[16:07:19.006]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:07:19.006]  
[16:07:19.006]  <debugvars>
[16:07:19.007]    // Pre-defined
[16:07:19.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:19.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:07:19.007]    __dp=0x00000000
[16:07:19.007]    __ap=0x00000000
[16:07:19.007]    __traceout=0x00000000      (Trace Disabled)
[16:07:19.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:19.007]    __FlashAddr=0x00000000
[16:07:19.007]    __FlashLen=0x00000000
[16:07:19.008]    __FlashArg=0x00000000
[16:07:19.008]    __FlashOp=0x00000000
[16:07:19.008]    __Result=0x00000000
[16:07:19.008]  </debugvars>
[16:07:19.008]  
[16:07:19.008]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:07:19.008]    <block atomic="false" info="">
[16:07:19.008]      __var deviceID = 0;
[16:07:19.008]        // -> [deviceID <= 0x00000000]
[16:07:19.009]      __var version = 0;
[16:07:19.009]        // -> [version <= 0x00000000]
[16:07:19.009]      __var partNum = 0;
[16:07:19.009]        // -> [partNum <= 0x00000000]
[16:07:19.009]      __var manuf = 0;
[16:07:19.009]        // -> [manuf <= 0x00000000]
[16:07:19.009]      __var isMSPM0G1X0X_G3X0X = 0;
[16:07:19.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:07:19.009]      __var isProduction = 0;
[16:07:19.009]        // -> [isProduction <= 0x00000000]
[16:07:19.010]      __var continueId = 0;
[16:07:19.010]        // -> [continueId <= 0x00000000]
[16:07:19.010]      deviceID =   Read32(0x41C40004);
[16:07:19.011]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:07:19.012]        // -> [deviceID <= 0x2BB8802F]
[16:07:19.012]      version = deviceID >> 28;
[16:07:19.012]        // -> [version <= 0x00000002]
[16:07:19.012]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:07:19.012]        // -> [partNum <= 0x0000BB88]
[16:07:19.012]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:07:19.012]        // -> [manuf <= 0x00000017]
[16:07:19.012]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:07:19.012]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:07:19.013]      isProduction = (version > 0);
[16:07:19.013]        // -> [isProduction <= 0x00000001]
[16:07:19.013]    </block>
[16:07:19.013]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:07:19.013]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:07:19.013]        // =>  FALSE
[16:07:19.013]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:07:19.013]    </control>
[16:07:19.013]    <control if="continueId == 4" while="" timeout="0" info="">
[16:07:19.013]      // if-block "continueId == 4"
[16:07:19.014]        // =>  FALSE
[16:07:19.015]      // skip if-block "continueId == 4"
[16:07:19.015]    </control>
[16:07:19.015]    <control if="!isProduction" while="" timeout="0" info="">
[16:07:19.015]      // if-block "!isProduction"
[16:07:19.015]        // =>  FALSE
[16:07:19.015]      // skip if-block "!isProduction"
[16:07:19.015]    </control>
[16:07:19.015]  </sequence>
[16:07:19.015]  
[16:18:16.423]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:18:16.423]  
[16:18:16.431]  <debugvars>
[16:18:16.431]    // Pre-defined
[16:18:16.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:16.431]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:18:16.431]    __dp=0x00000000
[16:18:16.431]    __ap=0x00000000
[16:18:16.431]    __traceout=0x00000000      (Trace Disabled)
[16:18:16.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:16.431]    __FlashAddr=0x00000000
[16:18:16.431]    __FlashLen=0x00000000
[16:18:16.431]    __FlashArg=0x00000000
[16:18:16.432]    __FlashOp=0x00000000
[16:18:16.432]    __Result=0x00000000
[16:18:16.432]  </debugvars>
[16:18:16.432]  
[16:18:16.432]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:18:16.432]    <block atomic="false" info="">
[16:18:16.433]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:18:16.433]        // -> [isSWJ <= 0x00000001]
[16:18:16.433]      __var hasDormant = __protocol & 0x00020000;
[16:18:16.433]        // -> [hasDormant <= 0x00000000]
[16:18:16.433]      __var protType   = __protocol & 0x0000FFFF;
[16:18:16.433]        // -> [protType <= 0x00000002]
[16:18:16.433]    </block>
[16:18:16.433]    <control if="protType == 1" while="" timeout="0" info="">
[16:18:16.433]      // if-block "protType == 1"
[16:18:16.434]        // =>  FALSE
[16:18:16.434]      // skip if-block "protType == 1"
[16:18:16.434]    </control>
[16:18:16.434]    <control if="protType == 2" while="" timeout="0" info="">
[16:18:16.434]      // if-block "protType == 2"
[16:18:16.434]        // =>  TRUE
[16:18:16.434]      <control if="isSWJ" while="" timeout="0" info="">
[16:18:16.434]        // if-block "isSWJ"
[16:18:16.435]          // =>  TRUE
[16:18:16.435]        <control if="hasDormant" while="" timeout="0" info="">
[16:18:16.435]          // if-block "hasDormant"
[16:18:16.435]            // =>  FALSE
[16:18:16.435]          // skip if-block "hasDormant"
[16:18:16.435]        </control>
[16:18:16.435]        <control if="!hasDormant" while="" timeout="0" info="">
[16:18:16.435]          // if-block "!hasDormant"
[16:18:16.435]            // =>  TRUE
[16:18:16.435]          <block atomic="false" info="">
[16:18:16.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:18:16.436]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:16.436]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:18:16.436]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:18:16.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:18:16.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:16.437]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:18:16.437]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:18:16.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:18:16.439]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:18:16.439]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:18:16.439]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:18:16.439]          </block>
[16:18:16.439]          // end if-block "!hasDormant"
[16:18:16.439]        </control>
[16:18:16.439]        // end if-block "isSWJ"
[16:18:16.439]      </control>
[16:18:16.439]      <control if="!isSWJ" while="" timeout="0" info="">
[16:18:16.439]        // if-block "!isSWJ"
[16:18:16.439]          // =>  FALSE
[16:18:16.440]        // skip if-block "!isSWJ"
[16:18:16.440]      </control>
[16:18:16.440]      <block atomic="false" info="">
[16:18:16.440]        ReadDP(0x0);
[16:18:16.440]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:18:16.440]      </block>
[16:18:16.440]      // end if-block "protType == 2"
[16:18:16.441]    </control>
[16:18:16.441]  </sequence>
[16:18:16.441]  
[16:18:16.442]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:18:16.442]  
[16:18:16.442]  <debugvars>
[16:18:16.442]    // Pre-defined
[16:18:16.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:16.442]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:18:16.442]    __dp=0x00000000
[16:18:16.442]    __ap=0x00000000
[16:18:16.442]    __traceout=0x00000000      (Trace Disabled)
[16:18:16.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:16.443]    __FlashAddr=0x00000000
[16:18:16.443]    __FlashLen=0x00000000
[16:18:16.443]    __FlashArg=0x00000000
[16:18:16.443]    __FlashOp=0x00000000
[16:18:16.443]    __Result=0x00000000
[16:18:16.443]  </debugvars>
[16:18:16.443]  
[16:18:16.443]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:18:16.443]    <block atomic="false" info="">
[16:18:16.444]      __var SW_DP_ABORT       = 0x0;
[16:18:16.444]        // -> [SW_DP_ABORT <= 0x00000000]
[16:18:16.444]      __var DP_CTRL_STAT      = 0x4;
[16:18:16.444]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:18:16.444]      __var DP_SELECT         = 0x8;
[16:18:16.444]        // -> [DP_SELECT <= 0x00000008]
[16:18:16.444]      __var powered_down      = 0;
[16:18:16.445]        // -> [powered_down <= 0x00000000]
[16:18:16.445]      WriteDP(DP_SELECT, 0x00000000);
[16:18:16.445]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:18:16.445]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:18:16.446]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:18:16.446]        // -> [powered_down <= 0x00000001]
[16:18:16.446]    </block>
[16:18:16.446]    <control if="powered_down" while="" timeout="0" info="">
[16:18:16.446]      // if-block "powered_down"
[16:18:16.446]        // =>  TRUE
[16:18:16.446]      <block atomic="false" info="">
[16:18:16.446]        Message(0, "Debug/System power-up request sent");
[16:18:16.447]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:18:16.448]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:18:16.448]      </block>
[16:18:16.448]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:18:16.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:18:16.448]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:18:16.448]        // while-condition  =>  FALSE
[16:18:16.449]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:18:16.449]      </control>
[16:18:16.449]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:18:16.449]        // if-block "(__protocol & 0xFFFF) == 1"
[16:18:16.449]          // =>  FALSE
[16:18:16.449]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:18:16.449]      </control>
[16:18:16.449]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:18:16.449]        // if-block "(__protocol & 0xFFFF) == 2"
[16:18:16.449]          // =>  TRUE
[16:18:16.449]        <block atomic="false" info="">
[16:18:16.450]          Message(0, "executing SWD power up");
[16:18:16.451]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:18:16.451]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:18:16.451]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:18:16.453]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:18:16.453]        </block>
[16:18:16.453]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:18:16.453]      </control>
[16:18:16.454]      // end if-block "powered_down"
[16:18:16.454]    </control>
[16:18:16.454]    <block atomic="false" info="">
[16:18:16.454]      __var DEBUG_PORT_VAL    = 0;
[16:18:16.454]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:18:16.454]      __var ACCESS_POINT_VAL  = 0;
[16:18:16.454]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:18:16.454]      __ap = 1; 
[16:18:16.454]        // -> [__ap <= 0x00000001]
[16:18:16.454]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:18:16.455]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:18:16.456]      __ap = 4;
[16:18:16.456]        // -> [__ap <= 0x00000004]
[16:18:16.456]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:16.457]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:18:16.457]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:18:16.457]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:16.459]    </block>
[16:18:16.459]    <block atomic="false" info="">
[16:18:16.459]      __var nReset = 0x80;
[16:18:16.459]        // -> [nReset <= 0x00000080]
[16:18:16.459]      __var canReadPins = 0;
[16:18:16.459]        // -> [canReadPins <= 0x00000000]
[16:18:16.459]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:18:16.460]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:18:16.460]        // -> [canReadPins <= 0x00000001]
[16:18:16.460]    </block>
[16:18:16.460]    <control if="" while="1" timeout="200" info="">
[16:18:16.460]      // while "1"  (timeout="200")
[16:18:16.460]      // while-condition  =>  TRUE
[16:18:16.460]      // while "1"  (timeout="200")
[16:18:16.460]      // while-condition  =>  TRUE
[16:18:16.461]      // while "1"  (timeout="200")
[16:18:16.461]      // while-condition  =>  TRUE
[16:18:16.461]      // while "1"  (timeout="200")
[16:18:16.461]      // while-condition  =>  TRUE
[16:18:16.461]      // while "1"  (timeout="200")
[16:18:16.461]      // while-condition  =>  TRUE
[16:18:16.461]      // while "1"  (timeout="200")
[16:18:16.461]      // while-condition  =>  TRUE
[16:18:16.461]      // while "1"  (timeout="200")
[16:18:16.461]      // while-condition  =>  TRUE
[16:18:16.462]      // while "1"  (timeout="200")
[16:18:16.462]      // while-condition  =>  TRUE
[16:18:16.462]      // while "1"  (timeout="200")
[16:18:16.462]      // while-condition  =>  TRUE
[16:18:16.462]      // while "1"  (timeout="200")
[16:18:16.462]      // while-condition  =>  TRUE
[16:18:16.463]      // while "1"  (timeout="200")
[16:18:16.463]      // while-condition  =>  TRUE
[16:18:16.463]      // while "1"  (timeout="200")
[16:18:16.463]      // while-condition  =>  TRUE
[16:18:16.463]      // while "1"  (timeout="200")
[16:18:16.463]      // while-condition  =>  TRUE
[16:18:16.463]      // while "1"  (timeout="200")
[16:18:16.463]      // while-condition  =>  TRUE
[16:18:16.463]      // while "1"  (timeout="200")
[16:18:16.464]      // while-condition  =>  TRUE
[16:18:16.464]      // while "1"  (timeout="200")
[16:18:16.464]      // while-condition  =>  TRUE
[16:18:16.464]      // while "1"  (timeout="200")
[16:18:16.465]      // while-condition  =>  TRUE
[16:18:16.465]      // while "1"  (timeout="200")
[16:18:16.465]      // while-condition  =>  TRUE
[16:18:16.465]      // while "1"  (timeout="200")
[16:18:16.465]      // while-condition  =>  TRUE
[16:18:16.465]      // while "1"  (timeout="200")
[16:18:16.465]      // while-condition  =>  TRUE
[16:18:16.465]      // while "1"  (timeout="200")
[16:18:16.465]      // while-condition  =>  TRUE
[16:18:16.465]      // while "1"  (timeout="200")
[16:18:16.465]      // while-condition  =>  TRUE
[16:18:16.466]      // while "1"  (timeout="200")
[16:18:16.466]      // while-condition  =>  TRUE
[16:18:16.466]      // while "1"  (timeout="200")
[16:18:16.466]      // while-condition  =>  TRUE
[16:18:16.466]      // while "1"  (timeout="200")
[16:18:16.466]      // while-condition  =>  TRUE
[16:18:16.466]      // while "1"  (timeout="200")
[16:18:16.466]      // while-condition  =>  TRUE
[16:18:16.467]      // while "1"  (timeout="200")
[16:18:16.467]      // while-condition  =>  TRUE
[16:18:16.467]      // while "1"  (timeout="200")
[16:18:16.467]      // while-condition  =>  TRUE
[16:18:16.467]      // while "1"  (timeout="200")
[16:18:16.467]      // while-condition  =>  TRUE
[16:18:16.467]      // while "1"  (timeout="200")
[16:18:16.467]      // while-condition  =>  TRUE
[16:18:16.467]      // while "1"  (timeout="200")
[16:18:16.467]      // while-condition  =>  TRUE
[16:18:16.467]      // while "1"  (timeout="200")
[16:18:16.467]      // while-condition  =>  TRUE
[16:18:16.468]      // while "1"  (timeout="200")
[16:18:16.468]      // while-condition  =>  TRUE
[16:18:16.468]      // while "1"  (timeout="200")
[16:18:16.468]      // while-condition  =>  TRUE
[16:18:16.468]      // while "1"  (timeout="200")
[16:18:16.468]      // while-condition  =>  TRUE
[16:18:16.468]      // while "1"  (timeout="200")
[16:18:16.468]      // while-condition  =>  TRUE
[16:18:16.468]      // while "1"  (timeout="200")
[16:18:16.468]      // while-condition  =>  TRUE
[16:18:16.468]      // while "1"  (timeout="200")
[16:18:16.468]      // while-condition  =>  TRUE
[16:18:16.469]      // while "1"  (timeout="200")
[16:18:16.469]      // while-condition  =>  TRUE
[16:18:16.469]      // while "1"  (timeout="200")
[16:18:16.469]      // while-condition  =>  TRUE
[16:18:16.469]      // while "1"  (timeout="200")
[16:18:16.469]      // while-condition  =>  TRUE
[16:18:16.469]      // while "1"  (timeout="200")
[16:18:16.469]      // while-condition  =>  TRUE
[16:18:16.469]      // while "1"  (timeout="200")
[16:18:16.469]      // while-condition  =>  TRUE
[16:18:16.469]      // while "1"  (timeout="200")
[16:18:16.470]      // while-condition  =>  TRUE
[16:18:16.470]      // while "1"  (timeout="200")
[16:18:16.470]      // while-condition  =>  TRUE
[16:18:16.470]      // while "1"  (timeout="200")
[16:18:16.470]      // while-condition  =>  TRUE
[16:18:16.470]      // while "1"  (timeout="200")
[16:18:16.470]      // while-condition  =>  TRUE
[16:18:16.470]      // while "1"  (timeout="200")
[16:18:16.470]      // while-condition  =>  TRUE
[16:18:16.471]      // while "1"  (timeout="200")
[16:18:16.471]      // while-condition  =>  TRUE
[16:18:16.471]      // while "1"  (timeout="200")
[16:18:16.471]      // while-condition  =>  TRUE
[16:18:16.471]      // while "1"  (timeout="200")
[16:18:16.471]      // while-condition  =>  TRUE
[16:18:16.471]      // while "1"  (timeout="200")
[16:18:16.471]      // while-condition  =>  TRUE
[16:18:16.471]      // while "1"  (timeout="200")
[16:18:16.471]      // while-condition  =>  TRUE
[16:18:16.471]      // while "1"  (timeout="200")
[16:18:16.471]      // while-condition  =>  TRUE
[16:18:16.472]      // while "1"  (timeout="200")
[16:18:16.472]      // while-condition  =>  TRUE
[16:18:16.472]      // while "1"  (timeout="200")
[16:18:16.472]      // while-condition  =>  TRUE
[16:18:16.472]      // while "1"  (timeout="200")
[16:18:16.472]      // while-condition  =>  TRUE
[16:18:16.472]      // while "1"  (timeout="200")
[16:18:16.472]      // while-condition  =>  TRUE
[16:18:16.472]      // while "1"  (timeout="200")
[16:18:16.472]      // while-condition  =>  TRUE
[16:18:16.472]      // while "1"  (timeout="200")
[16:18:16.472]      // while-condition  =>  TRUE
[16:18:16.473]      // while "1"  (timeout="200")
[16:18:16.473]      // while-condition  =>  TRUE
[16:18:16.473]      // while "1"  (timeout="200")
[16:18:16.473]      // while-condition  =>  TRUE
[16:18:16.473]      // while "1"  (timeout="200")
[16:18:16.473]      // while-condition  =>  TRUE
[16:18:16.473]      // while "1"  (timeout="200")
[16:18:16.473]      // while-condition  =>  TRUE
[16:18:16.473]      // while "1"  (timeout="200")
[16:18:16.473]      // while-condition  =>  TRUE
[16:18:16.473]      // while "1"  (timeout="200")
[16:18:16.473]      // while-condition  =>  TRUE
[16:18:16.474]      // while "1"  (timeout="200")
[16:18:16.474]      // while-condition  =>  TRUE
[16:18:16.474]      // while "1"  (timeout="200")
[16:18:16.474]      // while-condition  =>  TRUE
[16:18:16.474]      // while "1"  (timeout="200")
[16:18:16.474]      // while-condition  =>  TRUE
[16:18:16.474]      // while "1"  (timeout="200")
[16:18:16.474]      // while-condition  =>  TRUE
[16:18:16.475]      // while "1"  (timeout="200")
[16:18:16.475]      // while  =>  TIMEOUT
[16:18:16.475]      // end while "1"
[16:18:16.475]    </control>
[16:18:16.475]    <control if="canReadPins" while="" timeout="0" info="">
[16:18:16.475]      // if-block "canReadPins"
[16:18:16.475]        // =>  TRUE
[16:18:16.475]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:18:16.476]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:18:16.476]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:18:16.476]        // while-condition  =>  FALSE
[16:18:16.476]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:18:16.476]      </control>
[16:18:16.477]      // end if-block "canReadPins"
[16:18:16.477]    </control>
[16:18:16.477]    <control if="!canReadPins" while="" timeout="0" info="">
[16:18:16.477]      // if-block "!canReadPins"
[16:18:16.477]        // =>  FALSE
[16:18:16.477]      // skip if-block "!canReadPins"
[16:18:16.477]    </control>
[16:18:16.477]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:18:16.477]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:16.478]        // =>  TRUE
[16:18:16.478]      <block atomic="false" info="">
[16:18:16.478]        WriteAP(0x00, 0x190008);
[16:18:16.478]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:16.479]        WriteAP(0xF0, 0x01);
[16:18:16.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:18:16.480]      </block>
[16:18:16.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:18:16.480]    </control>
[16:18:16.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:18:16.480]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:16.480]        // =>  FALSE
[16:18:16.480]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:18:16.481]    </control>
[16:18:16.481]    <block atomic="false" info="">
[16:18:16.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:18:16.482]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:18:16.482]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:18:16.482]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:18:16.483]      __ap = 0; //lets make sure we reset the access point selection
[16:18:16.483]        // -> [__ap <= 0x00000000]
[16:18:16.483]    </block>
[16:18:16.484]  </sequence>
[16:18:16.484]  
[16:18:16.490]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:18:16.490]  
[16:18:16.490]  <debugvars>
[16:18:16.490]    // Pre-defined
[16:18:16.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:18:16.491]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:18:16.491]    __dp=0x00000000
[16:18:16.491]    __ap=0x00000000
[16:18:16.491]    __traceout=0x00000000      (Trace Disabled)
[16:18:16.491]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:18:16.491]    __FlashAddr=0x00000000
[16:18:16.491]    __FlashLen=0x00000000
[16:18:16.492]    __FlashArg=0x00000000
[16:18:16.492]    __FlashOp=0x00000000
[16:18:16.492]    __Result=0x00000000
[16:18:16.492]  </debugvars>
[16:18:16.492]  
[16:18:16.492]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:18:16.492]    <block atomic="false" info="">
[16:18:16.492]      __var deviceID = 0;
[16:18:16.492]        // -> [deviceID <= 0x00000000]
[16:18:16.492]      __var version = 0;
[16:18:16.492]        // -> [version <= 0x00000000]
[16:18:16.493]      __var partNum = 0;
[16:18:16.493]        // -> [partNum <= 0x00000000]
[16:18:16.493]      __var manuf = 0;
[16:18:16.493]        // -> [manuf <= 0x00000000]
[16:18:16.493]      __var isMSPM0G1X0X_G3X0X = 0;
[16:18:16.493]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:18:16.493]      __var isProduction = 0;
[16:18:16.493]        // -> [isProduction <= 0x00000000]
[16:18:16.493]      __var continueId = 0;
[16:18:16.494]        // -> [continueId <= 0x00000000]
[16:18:16.494]      deviceID =   Read32(0x41C40004);
[16:18:16.495]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:18:16.495]        // -> [deviceID <= 0x2BB8802F]
[16:18:16.496]      version = deviceID >> 28;
[16:18:16.496]        // -> [version <= 0x00000002]
[16:18:16.496]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:18:16.496]        // -> [partNum <= 0x0000BB88]
[16:18:16.496]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:18:16.496]        // -> [manuf <= 0x00000017]
[16:18:16.496]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:18:16.496]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:18:16.496]      isProduction = (version > 0);
[16:18:16.496]        // -> [isProduction <= 0x00000001]
[16:18:16.497]    </block>
[16:18:16.497]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:18:16.497]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:18:16.497]        // =>  FALSE
[16:18:16.497]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:18:16.497]    </control>
[16:18:16.497]    <control if="continueId == 4" while="" timeout="0" info="">
[16:18:16.497]      // if-block "continueId == 4"
[16:18:16.497]        // =>  FALSE
[16:18:16.497]      // skip if-block "continueId == 4"
[16:18:16.497]    </control>
[16:18:16.497]    <control if="!isProduction" while="" timeout="0" info="">
[16:18:16.498]      // if-block "!isProduction"
[16:18:16.498]        // =>  FALSE
[16:18:16.498]      // skip if-block "!isProduction"
[16:18:16.498]    </control>
[16:18:16.498]  </sequence>
[16:18:16.498]  
[16:19:24.970]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:19:24.970]  
[16:19:24.979]  <debugvars>
[16:19:24.979]    // Pre-defined
[16:19:24.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:19:24.979]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:19:24.979]    __dp=0x00000000
[16:19:24.979]    __ap=0x00000000
[16:19:24.979]    __traceout=0x00000000      (Trace Disabled)
[16:19:24.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:19:24.979]    __FlashAddr=0x00000000
[16:19:24.979]    __FlashLen=0x00000000
[16:19:24.979]    __FlashArg=0x00000000
[16:19:24.980]    __FlashOp=0x00000000
[16:19:24.980]    __Result=0x00000000
[16:19:24.980]  </debugvars>
[16:19:24.980]  
[16:19:24.980]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:19:24.980]    <block atomic="false" info="">
[16:19:24.980]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:19:24.980]        // -> [isSWJ <= 0x00000001]
[16:19:24.980]      __var hasDormant = __protocol & 0x00020000;
[16:19:24.980]        // -> [hasDormant <= 0x00000000]
[16:19:24.981]      __var protType   = __protocol & 0x0000FFFF;
[16:19:24.981]        // -> [protType <= 0x00000002]
[16:19:24.981]    </block>
[16:19:24.981]    <control if="protType == 1" while="" timeout="0" info="">
[16:19:24.981]      // if-block "protType == 1"
[16:19:24.981]        // =>  FALSE
[16:19:24.981]      // skip if-block "protType == 1"
[16:19:24.981]    </control>
[16:19:24.981]    <control if="protType == 2" while="" timeout="0" info="">
[16:19:24.982]      // if-block "protType == 2"
[16:19:24.982]        // =>  TRUE
[16:19:24.982]      <control if="isSWJ" while="" timeout="0" info="">
[16:19:24.982]        // if-block "isSWJ"
[16:19:24.982]          // =>  TRUE
[16:19:24.982]        <control if="hasDormant" while="" timeout="0" info="">
[16:19:24.982]          // if-block "hasDormant"
[16:19:24.982]            // =>  FALSE
[16:19:24.982]          // skip if-block "hasDormant"
[16:19:24.982]        </control>
[16:19:24.983]        <control if="!hasDormant" while="" timeout="0" info="">
[16:19:24.983]          // if-block "!hasDormant"
[16:19:24.983]            // =>  TRUE
[16:19:24.983]          <block atomic="false" info="">
[16:19:24.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:19:24.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:19:24.983]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:19:24.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:19:24.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:19:24.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:19:24.985]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:19:24.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:19:24.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:19:24.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:19:24.985]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:19:24.986]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:19:24.986]          </block>
[16:19:24.986]          // end if-block "!hasDormant"
[16:19:24.986]        </control>
[16:19:24.987]        // end if-block "isSWJ"
[16:19:24.987]      </control>
[16:19:24.987]      <control if="!isSWJ" while="" timeout="0" info="">
[16:19:24.987]        // if-block "!isSWJ"
[16:19:24.987]          // =>  FALSE
[16:19:24.987]        // skip if-block "!isSWJ"
[16:19:24.987]      </control>
[16:19:24.988]      <block atomic="false" info="">
[16:19:24.988]        ReadDP(0x0);
[16:19:24.988]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:19:24.988]      </block>
[16:19:24.988]      // end if-block "protType == 2"
[16:19:24.988]    </control>
[16:19:24.988]  </sequence>
[16:19:24.989]  
[16:19:24.989]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:19:24.989]  
[16:19:24.989]  <debugvars>
[16:19:24.989]    // Pre-defined
[16:19:24.990]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:19:24.990]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:19:24.990]    __dp=0x00000000
[16:19:24.991]    __ap=0x00000000
[16:19:24.991]    __traceout=0x00000000      (Trace Disabled)
[16:19:24.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:19:24.991]    __FlashAddr=0x00000000
[16:19:24.991]    __FlashLen=0x00000000
[16:19:24.991]    __FlashArg=0x00000000
[16:19:24.991]    __FlashOp=0x00000000
[16:19:24.991]    __Result=0x00000000
[16:19:24.992]  </debugvars>
[16:19:24.992]  
[16:19:24.992]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:19:24.992]    <block atomic="false" info="">
[16:19:24.992]      __var SW_DP_ABORT       = 0x0;
[16:19:24.992]        // -> [SW_DP_ABORT <= 0x00000000]
[16:19:24.992]      __var DP_CTRL_STAT      = 0x4;
[16:19:24.992]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:19:24.992]      __var DP_SELECT         = 0x8;
[16:19:24.992]        // -> [DP_SELECT <= 0x00000008]
[16:19:24.993]      __var powered_down      = 0;
[16:19:24.993]        // -> [powered_down <= 0x00000000]
[16:19:24.993]      WriteDP(DP_SELECT, 0x00000000);
[16:19:24.993]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:19:24.993]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:19:24.994]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:19:24.994]        // -> [powered_down <= 0x00000001]
[16:19:24.994]    </block>
[16:19:24.994]    <control if="powered_down" while="" timeout="0" info="">
[16:19:24.994]      // if-block "powered_down"
[16:19:24.994]        // =>  TRUE
[16:19:24.994]      <block atomic="false" info="">
[16:19:24.994]        Message(0, "Debug/System power-up request sent");
[16:19:24.997]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:19:24.998]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:19:24.998]      </block>
[16:19:24.998]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:19:24.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:19:24.999]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:19:24.999]        // while-condition  =>  FALSE
[16:19:24.999]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:19:24.999]      </control>
[16:19:24.999]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:19:25.000]        // if-block "(__protocol & 0xFFFF) == 1"
[16:19:25.000]          // =>  FALSE
[16:19:25.000]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:19:25.000]      </control>
[16:19:25.000]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:19:25.000]        // if-block "(__protocol & 0xFFFF) == 2"
[16:19:25.000]          // =>  TRUE
[16:19:25.000]        <block atomic="false" info="">
[16:19:25.000]          Message(0, "executing SWD power up");
[16:19:25.002]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:19:25.002]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:19:25.003]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:19:25.003]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:19:25.003]        </block>
[16:19:25.003]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:19:25.003]      </control>
[16:19:25.003]      // end if-block "powered_down"
[16:19:25.004]    </control>
[16:19:25.004]    <block atomic="false" info="">
[16:19:25.004]      __var DEBUG_PORT_VAL    = 0;
[16:19:25.004]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:19:25.004]      __var ACCESS_POINT_VAL  = 0;
[16:19:25.004]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:19:25.004]      __ap = 1; 
[16:19:25.004]        // -> [__ap <= 0x00000001]
[16:19:25.004]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:19:25.005]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:19:25.005]      __ap = 4;
[16:19:25.005]        // -> [__ap <= 0x00000004]
[16:19:25.006]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:19:25.008]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:19:25.008]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:19:25.008]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:19:25.010]    </block>
[16:19:25.010]    <block atomic="false" info="">
[16:19:25.010]      __var nReset = 0x80;
[16:19:25.010]        // -> [nReset <= 0x00000080]
[16:19:25.010]      __var canReadPins = 0;
[16:19:25.010]        // -> [canReadPins <= 0x00000000]
[16:19:25.010]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:19:25.011]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:19:25.011]        // -> [canReadPins <= 0x00000001]
[16:19:25.011]    </block>
[16:19:25.011]    <control if="" while="1" timeout="200" info="">
[16:19:25.011]      // while "1"  (timeout="200")
[16:19:25.012]      // while-condition  =>  TRUE
[16:19:25.012]      // while "1"  (timeout="200")
[16:19:25.012]      // while-condition  =>  TRUE
[16:19:25.012]      // while "1"  (timeout="200")
[16:19:25.012]      // while-condition  =>  TRUE
[16:19:25.012]      // while "1"  (timeout="200")
[16:19:25.012]      // while-condition  =>  TRUE
[16:19:25.012]      // while "1"  (timeout="200")
[16:19:25.012]      // while-condition  =>  TRUE
[16:19:25.013]      // while "1"  (timeout="200")
[16:19:25.013]      // while-condition  =>  TRUE
[16:19:25.013]      // while "1"  (timeout="200")
[16:19:25.013]      // while-condition  =>  TRUE
[16:19:25.013]      // while "1"  (timeout="200")
[16:19:25.013]      // while-condition  =>  TRUE
[16:19:25.013]      // while "1"  (timeout="200")
[16:19:25.013]      // while-condition  =>  TRUE
[16:19:25.013]      // while "1"  (timeout="200")
[16:19:25.013]      // while-condition  =>  TRUE
[16:19:25.013]      // while "1"  (timeout="200")
[16:19:25.014]      // while-condition  =>  TRUE
[16:19:25.014]      // while "1"  (timeout="200")
[16:19:25.014]      // while-condition  =>  TRUE
[16:19:25.014]      // while "1"  (timeout="200")
[16:19:25.014]      // while-condition  =>  TRUE
[16:19:25.014]      // while "1"  (timeout="200")
[16:19:25.014]      // while-condition  =>  TRUE
[16:19:25.014]      // while "1"  (timeout="200")
[16:19:25.014]      // while-condition  =>  TRUE
[16:19:25.014]      // while "1"  (timeout="200")
[16:19:25.014]      // while-condition  =>  TRUE
[16:19:25.015]      // while "1"  (timeout="200")
[16:19:25.015]      // while-condition  =>  TRUE
[16:19:25.015]      // while "1"  (timeout="200")
[16:19:25.015]      // while-condition  =>  TRUE
[16:19:25.015]      // while "1"  (timeout="200")
[16:19:25.015]      // while-condition  =>  TRUE
[16:19:25.015]      // while "1"  (timeout="200")
[16:19:25.015]      // while-condition  =>  TRUE
[16:19:25.016]      // while "1"  (timeout="200")
[16:19:25.016]      // while-condition  =>  TRUE
[16:19:25.016]      // while "1"  (timeout="200")
[16:19:25.016]      // while-condition  =>  TRUE
[16:19:25.016]      // while "1"  (timeout="200")
[16:19:25.017]      // while-condition  =>  TRUE
[16:19:25.017]      // while "1"  (timeout="200")
[16:19:25.017]      // while-condition  =>  TRUE
[16:19:25.017]      // while "1"  (timeout="200")
[16:19:25.017]      // while-condition  =>  TRUE
[16:19:25.017]      // while "1"  (timeout="200")
[16:19:25.017]      // while-condition  =>  TRUE
[16:19:25.018]      // while "1"  (timeout="200")
[16:19:25.018]      // while-condition  =>  TRUE
[16:19:25.018]      // while "1"  (timeout="200")
[16:19:25.018]      // while-condition  =>  TRUE
[16:19:25.018]      // while "1"  (timeout="200")
[16:19:25.018]      // while-condition  =>  TRUE
[16:19:25.018]      // while "1"  (timeout="200")
[16:19:25.018]      // while-condition  =>  TRUE
[16:19:25.018]      // while "1"  (timeout="200")
[16:19:25.018]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.019]      // while "1"  (timeout="200")
[16:19:25.019]      // while-condition  =>  TRUE
[16:19:25.021]      // while "1"  (timeout="200")
[16:19:25.021]      // while-condition  =>  TRUE
[16:19:25.021]      // while "1"  (timeout="200")
[16:19:25.021]      // while-condition  =>  TRUE
[16:19:25.021]      // while "1"  (timeout="200")
[16:19:25.021]      // while-condition  =>  TRUE
[16:19:25.021]      // while "1"  (timeout="200")
[16:19:25.021]      // while-condition  =>  TRUE
[16:19:25.021]      // while "1"  (timeout="200")
[16:19:25.021]      // while-condition  =>  TRUE
[16:19:25.022]      // while "1"  (timeout="200")
[16:19:25.022]      // while  =>  TIMEOUT
[16:19:25.022]      // end while "1"
[16:19:25.022]    </control>
[16:19:25.022]    <control if="canReadPins" while="" timeout="0" info="">
[16:19:25.022]      // if-block "canReadPins"
[16:19:25.022]        // =>  TRUE
[16:19:25.022]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:19:25.023]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:19:25.023]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:19:25.023]        // while-condition  =>  FALSE
[16:19:25.023]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:19:25.023]      </control>
[16:19:25.023]      // end if-block "canReadPins"
[16:19:25.024]    </control>
[16:19:25.024]    <control if="!canReadPins" while="" timeout="0" info="">
[16:19:25.024]      // if-block "!canReadPins"
[16:19:25.024]        // =>  FALSE
[16:19:25.024]      // skip if-block "!canReadPins"
[16:19:25.024]    </control>
[16:19:25.024]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:19:25.025]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:19:25.025]        // =>  TRUE
[16:19:25.025]      <block atomic="false" info="">
[16:19:25.025]        WriteAP(0x00, 0x190008);
[16:19:25.026]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:19:25.026]        WriteAP(0xF0, 0x01);
[16:19:25.027]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:19:25.027]      </block>
[16:19:25.027]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:19:25.027]    </control>
[16:19:25.027]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:19:25.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:19:25.028]        // =>  FALSE
[16:19:25.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:19:25.028]    </control>
[16:19:25.028]    <block atomic="false" info="">
[16:19:25.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:19:25.030]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:19:25.030]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:19:25.030]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:19:25.031]      __ap = 0; //lets make sure we reset the access point selection
[16:19:25.031]        // -> [__ap <= 0x00000000]
[16:19:25.031]    </block>
[16:19:25.032]  </sequence>
[16:19:25.032]  
[16:19:25.038]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:19:25.038]  
[16:19:25.038]  <debugvars>
[16:19:25.038]    // Pre-defined
[16:19:25.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:19:25.038]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:19:25.039]    __dp=0x00000000
[16:19:25.039]    __ap=0x00000000
[16:19:25.039]    __traceout=0x00000000      (Trace Disabled)
[16:19:25.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:19:25.039]    __FlashAddr=0x00000000
[16:19:25.039]    __FlashLen=0x00000000
[16:19:25.039]    __FlashArg=0x00000000
[16:19:25.039]    __FlashOp=0x00000000
[16:19:25.039]    __Result=0x00000000
[16:19:25.039]  </debugvars>
[16:19:25.039]  
[16:19:25.040]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:19:25.040]    <block atomic="false" info="">
[16:19:25.040]      __var deviceID = 0;
[16:19:25.040]        // -> [deviceID <= 0x00000000]
[16:19:25.040]      __var version = 0;
[16:19:25.040]        // -> [version <= 0x00000000]
[16:19:25.040]      __var partNum = 0;
[16:19:25.041]        // -> [partNum <= 0x00000000]
[16:19:25.041]      __var manuf = 0;
[16:19:25.041]        // -> [manuf <= 0x00000000]
[16:19:25.041]      __var isMSPM0G1X0X_G3X0X = 0;
[16:19:25.041]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:19:25.041]      __var isProduction = 0;
[16:19:25.041]        // -> [isProduction <= 0x00000000]
[16:19:25.041]      __var continueId = 0;
[16:19:25.041]        // -> [continueId <= 0x00000000]
[16:19:25.042]      deviceID =   Read32(0x41C40004);
[16:19:25.043]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:19:25.043]        // -> [deviceID <= 0x2BB8802F]
[16:19:25.043]      version = deviceID >> 28;
[16:19:25.044]        // -> [version <= 0x00000002]
[16:19:25.044]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:19:25.044]        // -> [partNum <= 0x0000BB88]
[16:19:25.044]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:19:25.044]        // -> [manuf <= 0x00000017]
[16:19:25.044]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:19:25.044]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:19:25.044]      isProduction = (version > 0);
[16:19:25.044]        // -> [isProduction <= 0x00000001]
[16:19:25.044]    </block>
[16:19:25.044]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:19:25.046]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:19:25.046]        // =>  FALSE
[16:19:25.046]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:19:25.046]    </control>
[16:19:25.046]    <control if="continueId == 4" while="" timeout="0" info="">
[16:19:25.046]      // if-block "continueId == 4"
[16:19:25.046]        // =>  FALSE
[16:19:25.046]      // skip if-block "continueId == 4"
[16:19:25.046]    </control>
[16:19:25.046]    <control if="!isProduction" while="" timeout="0" info="">
[16:19:25.046]      // if-block "!isProduction"
[16:19:25.047]        // =>  FALSE
[16:19:25.047]      // skip if-block "!isProduction"
[16:19:25.047]    </control>
[16:19:25.047]  </sequence>
[16:19:25.047]  
[16:20:29.682]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:20:29.682]  
[16:20:29.690]  <debugvars>
[16:20:29.690]    // Pre-defined
[16:20:29.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:20:29.690]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:20:29.690]    __dp=0x00000000
[16:20:29.690]    __ap=0x00000000
[16:20:29.690]    __traceout=0x00000000      (Trace Disabled)
[16:20:29.690]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:20:29.690]    __FlashAddr=0x00000000
[16:20:29.690]    __FlashLen=0x00000000
[16:20:29.690]    __FlashArg=0x00000000
[16:20:29.690]    __FlashOp=0x00000000
[16:20:29.690]    __Result=0x00000000
[16:20:29.691]  </debugvars>
[16:20:29.691]  
[16:20:29.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:20:29.691]    <block atomic="false" info="">
[16:20:29.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:20:29.691]        // -> [isSWJ <= 0x00000001]
[16:20:29.691]      __var hasDormant = __protocol & 0x00020000;
[16:20:29.691]        // -> [hasDormant <= 0x00000000]
[16:20:29.691]      __var protType   = __protocol & 0x0000FFFF;
[16:20:29.691]        // -> [protType <= 0x00000002]
[16:20:29.691]    </block>
[16:20:29.691]    <control if="protType == 1" while="" timeout="0" info="">
[16:20:29.692]      // if-block "protType == 1"
[16:20:29.692]        // =>  FALSE
[16:20:29.692]      // skip if-block "protType == 1"
[16:20:29.692]    </control>
[16:20:29.692]    <control if="protType == 2" while="" timeout="0" info="">
[16:20:29.692]      // if-block "protType == 2"
[16:20:29.692]        // =>  TRUE
[16:20:29.692]      <control if="isSWJ" while="" timeout="0" info="">
[16:20:29.692]        // if-block "isSWJ"
[16:20:29.692]          // =>  TRUE
[16:20:29.692]        <control if="hasDormant" while="" timeout="0" info="">
[16:20:29.692]          // if-block "hasDormant"
[16:20:29.693]            // =>  FALSE
[16:20:29.693]          // skip if-block "hasDormant"
[16:20:29.693]        </control>
[16:20:29.693]        <control if="!hasDormant" while="" timeout="0" info="">
[16:20:29.693]          // if-block "!hasDormant"
[16:20:29.693]            // =>  TRUE
[16:20:29.693]          <block atomic="false" info="">
[16:20:29.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:20:29.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:20:29.694]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:20:29.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:20:29.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:20:29.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:20:29.695]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:20:29.695]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:20:29.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:20:29.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:20:29.696]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:20:29.696]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:20:29.696]          </block>
[16:20:29.696]          // end if-block "!hasDormant"
[16:20:29.696]        </control>
[16:20:29.696]        // end if-block "isSWJ"
[16:20:29.696]      </control>
[16:20:29.696]      <control if="!isSWJ" while="" timeout="0" info="">
[16:20:29.696]        // if-block "!isSWJ"
[16:20:29.696]          // =>  FALSE
[16:20:29.697]        // skip if-block "!isSWJ"
[16:20:29.697]      </control>
[16:20:29.697]      <block atomic="false" info="">
[16:20:29.697]        ReadDP(0x0);
[16:20:29.697]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:20:29.697]      </block>
[16:20:29.697]      // end if-block "protType == 2"
[16:20:29.697]    </control>
[16:20:29.698]  </sequence>
[16:20:29.698]  
[16:20:29.698]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:20:29.698]  
[16:20:29.698]  <debugvars>
[16:20:29.698]    // Pre-defined
[16:20:29.698]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:20:29.699]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:20:29.699]    __dp=0x00000000
[16:20:29.699]    __ap=0x00000000
[16:20:29.699]    __traceout=0x00000000      (Trace Disabled)
[16:20:29.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:20:29.699]    __FlashAddr=0x00000000
[16:20:29.699]    __FlashLen=0x00000000
[16:20:29.699]    __FlashArg=0x00000000
[16:20:29.699]    __FlashOp=0x00000000
[16:20:29.699]    __Result=0x00000000
[16:20:29.699]  </debugvars>
[16:20:29.700]  
[16:20:29.700]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:20:29.700]    <block atomic="false" info="">
[16:20:29.700]      __var SW_DP_ABORT       = 0x0;
[16:20:29.700]        // -> [SW_DP_ABORT <= 0x00000000]
[16:20:29.700]      __var DP_CTRL_STAT      = 0x4;
[16:20:29.700]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:20:29.700]      __var DP_SELECT         = 0x8;
[16:20:29.700]        // -> [DP_SELECT <= 0x00000008]
[16:20:29.700]      __var powered_down      = 0;
[16:20:29.700]        // -> [powered_down <= 0x00000000]
[16:20:29.702]      WriteDP(DP_SELECT, 0x00000000);
[16:20:29.702]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:20:29.703]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:20:29.703]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:20:29.703]        // -> [powered_down <= 0x00000001]
[16:20:29.703]    </block>
[16:20:29.703]    <control if="powered_down" while="" timeout="0" info="">
[16:20:29.704]      // if-block "powered_down"
[16:20:29.704]        // =>  TRUE
[16:20:29.704]      <block atomic="false" info="">
[16:20:29.704]        Message(0, "Debug/System power-up request sent");
[16:20:29.705]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:20:29.706]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:20:29.706]      </block>
[16:20:29.706]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:20:29.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:20:29.706]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:20:29.706]        // while-condition  =>  FALSE
[16:20:29.706]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:20:29.706]      </control>
[16:20:29.706]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:20:29.707]        // if-block "(__protocol & 0xFFFF) == 1"
[16:20:29.707]          // =>  FALSE
[16:20:29.707]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:20:29.707]      </control>
[16:20:29.707]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:20:29.707]        // if-block "(__protocol & 0xFFFF) == 2"
[16:20:29.707]          // =>  TRUE
[16:20:29.707]        <block atomic="false" info="">
[16:20:29.707]          Message(0, "executing SWD power up");
[16:20:29.708]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:20:29.709]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:20:29.709]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:20:29.710]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:20:29.710]        </block>
[16:20:29.710]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:20:29.710]      </control>
[16:20:29.710]      // end if-block "powered_down"
[16:20:29.710]    </control>
[16:20:29.710]    <block atomic="false" info="">
[16:20:29.710]      __var DEBUG_PORT_VAL    = 0;
[16:20:29.710]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:20:29.710]      __var ACCESS_POINT_VAL  = 0;
[16:20:29.710]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:20:29.710]      __ap = 1; 
[16:20:29.710]        // -> [__ap <= 0x00000001]
[16:20:29.712]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:20:29.713]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:20:29.713]      __ap = 4;
[16:20:29.713]        // -> [__ap <= 0x00000004]
[16:20:29.713]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:20:29.714]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:20:29.714]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:20:29.714]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:20:29.715]    </block>
[16:20:29.715]    <block atomic="false" info="">
[16:20:29.715]      __var nReset = 0x80;
[16:20:29.715]        // -> [nReset <= 0x00000080]
[16:20:29.715]      __var canReadPins = 0;
[16:20:29.715]        // -> [canReadPins <= 0x00000000]
[16:20:29.715]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:20:29.717]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:20:29.717]        // -> [canReadPins <= 0x00000001]
[16:20:29.717]    </block>
[16:20:29.717]    <control if="" while="1" timeout="200" info="">
[16:20:29.717]      // while "1"  (timeout="200")
[16:20:29.717]      // while-condition  =>  TRUE
[16:20:29.717]      // while "1"  (timeout="200")
[16:20:29.717]      // while-condition  =>  TRUE
[16:20:29.717]      // while "1"  (timeout="200")
[16:20:29.717]      // while-condition  =>  TRUE
[16:20:29.717]      // while "1"  (timeout="200")
[16:20:29.717]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.718]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.718]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.718]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.718]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.718]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.718]      // while-condition  =>  TRUE
[16:20:29.718]      // while "1"  (timeout="200")
[16:20:29.719]      // while-condition  =>  TRUE
[16:20:29.719]      // while "1"  (timeout="200")
[16:20:29.719]      // while-condition  =>  TRUE
[16:20:29.719]      // while "1"  (timeout="200")
[16:20:29.719]      // while-condition  =>  TRUE
[16:20:29.719]      // while "1"  (timeout="200")
[16:20:29.719]      // while-condition  =>  TRUE
[16:20:29.719]      // while "1"  (timeout="200")
[16:20:29.719]      // while-condition  =>  TRUE
[16:20:29.720]      // while "1"  (timeout="200")
[16:20:29.720]      // while-condition  =>  TRUE
[16:20:29.720]      // while "1"  (timeout="200")
[16:20:29.720]      // while-condition  =>  TRUE
[16:20:29.720]      // while "1"  (timeout="200")
[16:20:29.720]      // while-condition  =>  TRUE
[16:20:29.720]      // while "1"  (timeout="200")
[16:20:29.720]      // while-condition  =>  TRUE
[16:20:29.720]      // while "1"  (timeout="200")
[16:20:29.721]      // while-condition  =>  TRUE
[16:20:29.721]      // while "1"  (timeout="200")
[16:20:29.721]      // while-condition  =>  TRUE
[16:20:29.721]      // while "1"  (timeout="200")
[16:20:29.721]      // while-condition  =>  TRUE
[16:20:29.721]      // while "1"  (timeout="200")
[16:20:29.721]      // while-condition  =>  TRUE
[16:20:29.721]      // while "1"  (timeout="200")
[16:20:29.721]      // while-condition  =>  TRUE
[16:20:29.721]      // while "1"  (timeout="200")
[16:20:29.721]      // while-condition  =>  TRUE
[16:20:29.722]      // while "1"  (timeout="200")
[16:20:29.722]      // while-condition  =>  TRUE
[16:20:29.722]      // while "1"  (timeout="200")
[16:20:29.722]      // while-condition  =>  TRUE
[16:20:29.722]      // while "1"  (timeout="200")
[16:20:29.722]      // while-condition  =>  TRUE
[16:20:29.722]      // while "1"  (timeout="200")
[16:20:29.722]      // while-condition  =>  TRUE
[16:20:29.722]      // while "1"  (timeout="200")
[16:20:29.722]      // while-condition  =>  TRUE
[16:20:29.723]      // while "1"  (timeout="200")
[16:20:29.723]      // while-condition  =>  TRUE
[16:20:29.723]      // while "1"  (timeout="200")
[16:20:29.723]      // while-condition  =>  TRUE
[16:20:29.723]      // while "1"  (timeout="200")
[16:20:29.723]      // while-condition  =>  TRUE
[16:20:29.723]      // while "1"  (timeout="200")
[16:20:29.723]      // while-condition  =>  TRUE
[16:20:29.723]      // while "1"  (timeout="200")
[16:20:29.723]      // while-condition  =>  TRUE
[16:20:29.723]      // while "1"  (timeout="200")
[16:20:29.723]      // while-condition  =>  TRUE
[16:20:29.724]      // while "1"  (timeout="200")
[16:20:29.724]      // while-condition  =>  TRUE
[16:20:29.724]      // while "1"  (timeout="200")
[16:20:29.724]      // while-condition  =>  TRUE
[16:20:29.724]      // while "1"  (timeout="200")
[16:20:29.724]      // while  =>  TIMEOUT
[16:20:29.724]      // end while "1"
[16:20:29.724]    </control>
[16:20:29.724]    <control if="canReadPins" while="" timeout="0" info="">
[16:20:29.724]      // if-block "canReadPins"
[16:20:29.724]        // =>  TRUE
[16:20:29.724]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:20:29.724]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:20:29.725]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:20:29.725]        // while-condition  =>  FALSE
[16:20:29.725]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:20:29.725]      </control>
[16:20:29.725]      // end if-block "canReadPins"
[16:20:29.725]    </control>
[16:20:29.725]    <control if="!canReadPins" while="" timeout="0" info="">
[16:20:29.725]      // if-block "!canReadPins"
[16:20:29.726]        // =>  FALSE
[16:20:29.726]      // skip if-block "!canReadPins"
[16:20:29.726]    </control>
[16:20:29.726]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:20:29.726]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:20:29.726]        // =>  TRUE
[16:20:29.726]      <block atomic="false" info="">
[16:20:29.726]        WriteAP(0x00, 0x190008);
[16:20:29.727]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:20:29.727]        WriteAP(0xF0, 0x01);
[16:20:29.728]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:20:29.728]      </block>
[16:20:29.729]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:20:29.729]    </control>
[16:20:29.729]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:20:29.729]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:20:29.729]        // =>  FALSE
[16:20:29.729]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:20:29.729]    </control>
[16:20:29.730]    <block atomic="false" info="">
[16:20:29.730]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:20:29.731]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:20:29.731]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:20:29.731]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:20:29.733]      __ap = 0; //lets make sure we reset the access point selection
[16:20:29.733]        // -> [__ap <= 0x00000000]
[16:20:29.733]    </block>
[16:20:29.733]  </sequence>
[16:20:29.733]  
[16:20:29.739]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:20:29.739]  
[16:20:29.739]  <debugvars>
[16:20:29.739]    // Pre-defined
[16:20:29.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:20:29.739]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:20:29.739]    __dp=0x00000000
[16:20:29.740]    __ap=0x00000000
[16:20:29.740]    __traceout=0x00000000      (Trace Disabled)
[16:20:29.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:20:29.740]    __FlashAddr=0x00000000
[16:20:29.740]    __FlashLen=0x00000000
[16:20:29.740]    __FlashArg=0x00000000
[16:20:29.740]    __FlashOp=0x00000000
[16:20:29.740]    __Result=0x00000000
[16:20:29.740]  </debugvars>
[16:20:29.740]  
[16:20:29.740]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:20:29.741]    <block atomic="false" info="">
[16:20:29.741]      __var deviceID = 0;
[16:20:29.741]        // -> [deviceID <= 0x00000000]
[16:20:29.741]      __var version = 0;
[16:20:29.741]        // -> [version <= 0x00000000]
[16:20:29.741]      __var partNum = 0;
[16:20:29.742]        // -> [partNum <= 0x00000000]
[16:20:29.742]      __var manuf = 0;
[16:20:29.742]        // -> [manuf <= 0x00000000]
[16:20:29.742]      __var isMSPM0G1X0X_G3X0X = 0;
[16:20:29.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:20:29.742]      __var isProduction = 0;
[16:20:29.743]        // -> [isProduction <= 0x00000000]
[16:20:29.743]      __var continueId = 0;
[16:20:29.743]        // -> [continueId <= 0x00000000]
[16:20:29.743]      deviceID =   Read32(0x41C40004);
[16:20:29.745]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:20:29.746]        // -> [deviceID <= 0x2BB8802F]
[16:20:29.746]      version = deviceID >> 28;
[16:20:29.746]        // -> [version <= 0x00000002]
[16:20:29.746]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:20:29.746]        // -> [partNum <= 0x0000BB88]
[16:20:29.746]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:20:29.746]        // -> [manuf <= 0x00000017]
[16:20:29.746]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:20:29.746]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:20:29.747]      isProduction = (version > 0);
[16:20:29.747]        // -> [isProduction <= 0x00000001]
[16:20:29.747]    </block>
[16:20:29.747]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:20:29.747]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:20:29.747]        // =>  FALSE
[16:20:29.747]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:20:29.747]    </control>
[16:20:29.747]    <control if="continueId == 4" while="" timeout="0" info="">
[16:20:29.747]      // if-block "continueId == 4"
[16:20:29.747]        // =>  FALSE
[16:20:29.747]      // skip if-block "continueId == 4"
[16:20:29.748]    </control>
[16:20:29.748]    <control if="!isProduction" while="" timeout="0" info="">
[16:20:29.748]      // if-block "!isProduction"
[16:20:29.748]        // =>  FALSE
[16:20:29.748]      // skip if-block "!isProduction"
[16:20:29.748]    </control>
[16:20:29.748]  </sequence>
[16:20:29.748]  
[16:25:34.325]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:25:34.325]  
[16:25:34.333]  <debugvars>
[16:25:34.333]    // Pre-defined
[16:25:34.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:34.333]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:25:34.333]    __dp=0x00000000
[16:25:34.333]    __ap=0x00000000
[16:25:34.333]    __traceout=0x00000000      (Trace Disabled)
[16:25:34.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:34.334]    __FlashAddr=0x00000000
[16:25:34.334]    __FlashLen=0x00000000
[16:25:34.334]    __FlashArg=0x00000000
[16:25:34.334]    __FlashOp=0x00000000
[16:25:34.334]    __Result=0x00000000
[16:25:34.334]  </debugvars>
[16:25:34.334]  
[16:25:34.334]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:25:34.335]    <block atomic="false" info="">
[16:25:34.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:25:34.335]        // -> [isSWJ <= 0x00000001]
[16:25:34.335]      __var hasDormant = __protocol & 0x00020000;
[16:25:34.335]        // -> [hasDormant <= 0x00000000]
[16:25:34.335]      __var protType   = __protocol & 0x0000FFFF;
[16:25:34.335]        // -> [protType <= 0x00000002]
[16:25:34.335]    </block>
[16:25:34.335]    <control if="protType == 1" while="" timeout="0" info="">
[16:25:34.336]      // if-block "protType == 1"
[16:25:34.336]        // =>  FALSE
[16:25:34.336]      // skip if-block "protType == 1"
[16:25:34.336]    </control>
[16:25:34.336]    <control if="protType == 2" while="" timeout="0" info="">
[16:25:34.336]      // if-block "protType == 2"
[16:25:34.336]        // =>  TRUE
[16:25:34.336]      <control if="isSWJ" while="" timeout="0" info="">
[16:25:34.337]        // if-block "isSWJ"
[16:25:34.337]          // =>  TRUE
[16:25:34.337]        <control if="hasDormant" while="" timeout="0" info="">
[16:25:34.337]          // if-block "hasDormant"
[16:25:34.337]            // =>  FALSE
[16:25:34.337]          // skip if-block "hasDormant"
[16:25:34.337]        </control>
[16:25:34.337]        <control if="!hasDormant" while="" timeout="0" info="">
[16:25:34.338]          // if-block "!hasDormant"
[16:25:34.338]            // =>  TRUE
[16:25:34.338]          <block atomic="false" info="">
[16:25:34.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:25:34.338]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:34.338]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:25:34.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:25:34.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:25:34.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:34.339]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:25:34.340]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:25:34.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:25:34.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:25:34.340]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:25:34.340]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:25:34.341]          </block>
[16:25:34.341]          // end if-block "!hasDormant"
[16:25:34.341]        </control>
[16:25:34.341]        // end if-block "isSWJ"
[16:25:34.341]      </control>
[16:25:34.341]      <control if="!isSWJ" while="" timeout="0" info="">
[16:25:34.341]        // if-block "!isSWJ"
[16:25:34.341]          // =>  FALSE
[16:25:34.341]        // skip if-block "!isSWJ"
[16:25:34.341]      </control>
[16:25:34.342]      <block atomic="false" info="">
[16:25:34.342]        ReadDP(0x0);
[16:25:34.342]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:25:34.342]      </block>
[16:25:34.342]      // end if-block "protType == 2"
[16:25:34.342]    </control>
[16:25:34.343]  </sequence>
[16:25:34.343]  
[16:25:34.343]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:25:34.343]  
[16:25:34.343]  <debugvars>
[16:25:34.344]    // Pre-defined
[16:25:34.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:34.344]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:25:34.344]    __dp=0x00000000
[16:25:34.344]    __ap=0x00000000
[16:25:34.344]    __traceout=0x00000000      (Trace Disabled)
[16:25:34.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:34.344]    __FlashAddr=0x00000000
[16:25:34.344]    __FlashLen=0x00000000
[16:25:34.345]    __FlashArg=0x00000000
[16:25:34.345]    __FlashOp=0x00000000
[16:25:34.345]    __Result=0x00000000
[16:25:34.345]  </debugvars>
[16:25:34.345]  
[16:25:34.345]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:25:34.345]    <block atomic="false" info="">
[16:25:34.345]      __var SW_DP_ABORT       = 0x0;
[16:25:34.345]        // -> [SW_DP_ABORT <= 0x00000000]
[16:25:34.345]      __var DP_CTRL_STAT      = 0x4;
[16:25:34.345]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:25:34.346]      __var DP_SELECT         = 0x8;
[16:25:34.346]        // -> [DP_SELECT <= 0x00000008]
[16:25:34.346]      __var powered_down      = 0;
[16:25:34.346]        // -> [powered_down <= 0x00000000]
[16:25:34.346]      WriteDP(DP_SELECT, 0x00000000);
[16:25:34.347]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:25:34.347]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:25:34.347]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:25:34.347]        // -> [powered_down <= 0x00000001]
[16:25:34.348]    </block>
[16:25:34.348]    <control if="powered_down" while="" timeout="0" info="">
[16:25:34.348]      // if-block "powered_down"
[16:25:34.348]        // =>  TRUE
[16:25:34.348]      <block atomic="false" info="">
[16:25:34.348]        Message(0, "Debug/System power-up request sent");
[16:25:34.349]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:25:34.350]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:25:34.350]      </block>
[16:25:34.350]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:25:34.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:25:34.351]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:25:34.351]        // while-condition  =>  FALSE
[16:25:34.351]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:25:34.351]      </control>
[16:25:34.351]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:25:34.351]        // if-block "(__protocol & 0xFFFF) == 1"
[16:25:34.352]          // =>  FALSE
[16:25:34.352]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:25:34.352]      </control>
[16:25:34.352]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:25:34.352]        // if-block "(__protocol & 0xFFFF) == 2"
[16:25:34.352]          // =>  TRUE
[16:25:34.352]        <block atomic="false" info="">
[16:25:34.352]          Message(0, "executing SWD power up");
[16:25:34.354]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:25:34.355]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:25:34.355]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:25:34.355]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:25:34.356]        </block>
[16:25:34.356]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:25:34.356]      </control>
[16:25:34.356]      // end if-block "powered_down"
[16:25:34.356]    </control>
[16:25:34.356]    <block atomic="false" info="">
[16:25:34.356]      __var DEBUG_PORT_VAL    = 0;
[16:25:34.356]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:25:34.356]      __var ACCESS_POINT_VAL  = 0;
[16:25:34.356]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:25:34.358]      __ap = 1; 
[16:25:34.358]        // -> [__ap <= 0x00000001]
[16:25:34.358]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:25:34.358]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:25:34.359]      __ap = 4;
[16:25:34.359]        // -> [__ap <= 0x00000004]
[16:25:34.359]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:25:34.361]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:25:34.361]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:25:34.361]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:25:34.362]    </block>
[16:25:34.362]    <block atomic="false" info="">
[16:25:34.362]      __var nReset = 0x80;
[16:25:34.362]        // -> [nReset <= 0x00000080]
[16:25:34.362]      __var canReadPins = 0;
[16:25:34.362]        // -> [canReadPins <= 0x00000000]
[16:25:34.362]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:25:34.362]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:25:34.364]        // -> [canReadPins <= 0x00000001]
[16:25:34.364]    </block>
[16:25:34.364]    <control if="" while="1" timeout="200" info="">
[16:25:34.364]      // while "1"  (timeout="200")
[16:25:34.364]      // while-condition  =>  TRUE
[16:25:34.364]      // while "1"  (timeout="200")
[16:25:34.364]      // while-condition  =>  TRUE
[16:25:34.364]      // while "1"  (timeout="200")
[16:25:34.364]      // while-condition  =>  TRUE
[16:25:34.364]      // while "1"  (timeout="200")
[16:25:34.364]      // while-condition  =>  TRUE
[16:25:34.364]      // while "1"  (timeout="200")
[16:25:34.364]      // while-condition  =>  TRUE
[16:25:34.364]      // while "1"  (timeout="200")
[16:25:34.365]      // while-condition  =>  TRUE
[16:25:34.365]      // while "1"  (timeout="200")
[16:25:34.365]      // while-condition  =>  TRUE
[16:25:34.365]      // while "1"  (timeout="200")
[16:25:34.365]      // while-condition  =>  TRUE
[16:25:34.365]      // while "1"  (timeout="200")
[16:25:34.365]      // while-condition  =>  TRUE
[16:25:34.365]      // while "1"  (timeout="200")
[16:25:34.365]      // while-condition  =>  TRUE
[16:25:34.365]      // while "1"  (timeout="200")
[16:25:34.365]      // while-condition  =>  TRUE
[16:25:34.365]      // while "1"  (timeout="200")
[16:25:34.366]      // while-condition  =>  TRUE
[16:25:34.366]      // while "1"  (timeout="200")
[16:25:34.366]      // while  =>  TIMEOUT
[16:25:34.366]      // end while "1"
[16:25:34.366]    </control>
[16:25:34.366]    <control if="canReadPins" while="" timeout="0" info="">
[16:25:34.366]      // if-block "canReadPins"
[16:25:34.366]        // =>  TRUE
[16:25:34.366]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:25:34.366]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:25:34.367]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:25:34.367]        // while-condition  =>  FALSE
[16:25:34.367]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:25:34.367]      </control>
[16:25:34.367]      // end if-block "canReadPins"
[16:25:34.367]    </control>
[16:25:34.367]    <control if="!canReadPins" while="" timeout="0" info="">
[16:25:34.368]      // if-block "!canReadPins"
[16:25:34.368]        // =>  FALSE
[16:25:34.368]      // skip if-block "!canReadPins"
[16:25:34.368]    </control>
[16:25:34.368]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:25:34.368]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:25:34.368]        // =>  TRUE
[16:25:34.369]      <block atomic="false" info="">
[16:25:34.369]        WriteAP(0x00, 0x190008);
[16:25:34.369]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:25:34.369]        WriteAP(0xF0, 0x01);
[16:25:34.370]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:25:34.370]      </block>
[16:25:34.371]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:25:34.371]    </control>
[16:25:34.371]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:25:34.371]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:25:34.371]        // =>  FALSE
[16:25:34.371]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:25:34.371]    </control>
[16:25:34.371]    <block atomic="false" info="">
[16:25:34.371]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:25:34.372]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:25:34.373]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:25:34.373]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:25:34.374]      __ap = 0; //lets make sure we reset the access point selection
[16:25:34.374]        // -> [__ap <= 0x00000000]
[16:25:34.374]    </block>
[16:25:34.374]  </sequence>
[16:25:34.374]  
[16:25:34.380]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:25:34.380]  
[16:25:34.380]  <debugvars>
[16:25:34.380]    // Pre-defined
[16:25:34.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:25:34.380]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:25:34.380]    __dp=0x00000000
[16:25:34.380]    __ap=0x00000000
[16:25:34.382]    __traceout=0x00000000      (Trace Disabled)
[16:25:34.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:25:34.382]    __FlashAddr=0x00000000
[16:25:34.382]    __FlashLen=0x00000000
[16:25:34.382]    __FlashArg=0x00000000
[16:25:34.382]    __FlashOp=0x00000000
[16:25:34.382]    __Result=0x00000000
[16:25:34.382]  </debugvars>
[16:25:34.382]  
[16:25:34.382]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:25:34.382]    <block atomic="false" info="">
[16:25:34.383]      __var deviceID = 0;
[16:25:34.383]        // -> [deviceID <= 0x00000000]
[16:25:34.383]      __var version = 0;
[16:25:34.383]        // -> [version <= 0x00000000]
[16:25:34.383]      __var partNum = 0;
[16:25:34.383]        // -> [partNum <= 0x00000000]
[16:25:34.383]      __var manuf = 0;
[16:25:34.383]        // -> [manuf <= 0x00000000]
[16:25:34.383]      __var isMSPM0G1X0X_G3X0X = 0;
[16:25:34.383]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:25:34.383]      __var isProduction = 0;
[16:25:34.383]        // -> [isProduction <= 0x00000000]
[16:25:34.384]      __var continueId = 0;
[16:25:34.384]        // -> [continueId <= 0x00000000]
[16:25:34.384]      deviceID =   Read32(0x41C40004);
[16:25:34.385]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:25:34.385]        // -> [deviceID <= 0x2BB8802F]
[16:25:34.385]      version = deviceID >> 28;
[16:25:34.385]        // -> [version <= 0x00000002]
[16:25:34.385]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:25:34.385]        // -> [partNum <= 0x0000BB88]
[16:25:34.385]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:25:34.385]        // -> [manuf <= 0x00000017]
[16:25:34.387]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:25:34.387]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:25:34.387]      isProduction = (version > 0);
[16:25:34.387]        // -> [isProduction <= 0x00000001]
[16:25:34.387]    </block>
[16:25:34.387]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:25:34.387]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:25:34.387]        // =>  FALSE
[16:25:34.387]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:25:34.387]    </control>
[16:25:34.387]    <control if="continueId == 4" while="" timeout="0" info="">
[16:25:34.387]      // if-block "continueId == 4"
[16:25:34.387]        // =>  FALSE
[16:25:34.387]      // skip if-block "continueId == 4"
[16:25:34.388]    </control>
[16:25:34.388]    <control if="!isProduction" while="" timeout="0" info="">
[16:25:34.388]      // if-block "!isProduction"
[16:25:34.388]        // =>  FALSE
[16:25:34.388]      // skip if-block "!isProduction"
[16:25:34.388]    </control>
[16:25:34.388]  </sequence>
[16:25:34.388]  
[16:46:14.407]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:14.407]  
[16:46:14.408]  <debugvars>
[16:46:14.408]    // Pre-defined
[16:46:14.408]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:14.408]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:14.409]    __dp=0x00000000
[16:46:14.409]    __ap=0x00000000
[16:46:14.409]    __traceout=0x00000000      (Trace Disabled)
[16:46:14.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:14.410]    __FlashAddr=0x00000000
[16:46:14.410]    __FlashLen=0x00000000
[16:46:14.410]    __FlashArg=0x00000000
[16:46:14.410]    __FlashOp=0x00000000
[16:46:14.410]    __Result=0x00000000
[16:46:14.410]  </debugvars>
[16:46:14.411]  
[16:46:14.411]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:14.411]    <block atomic="false" info="">
[16:46:14.411]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:14.411]        // -> [isSWJ <= 0x00000001]
[16:46:14.411]      __var hasDormant = __protocol & 0x00020000;
[16:46:14.411]        // -> [hasDormant <= 0x00000000]
[16:46:14.411]      __var protType   = __protocol & 0x0000FFFF;
[16:46:14.411]        // -> [protType <= 0x00000002]
[16:46:14.411]    </block>
[16:46:14.411]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:14.412]      // if-block "protType == 1"
[16:46:14.412]        // =>  FALSE
[16:46:14.412]      // skip if-block "protType == 1"
[16:46:14.412]    </control>
[16:46:14.412]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:14.412]      // if-block "protType == 2"
[16:46:14.412]        // =>  TRUE
[16:46:14.412]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:14.412]        // if-block "isSWJ"
[16:46:14.412]          // =>  TRUE
[16:46:14.412]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:14.413]          // if-block "hasDormant"
[16:46:14.413]            // =>  FALSE
[16:46:14.413]          // skip if-block "hasDormant"
[16:46:14.413]        </control>
[16:46:14.413]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:14.413]          // if-block "!hasDormant"
[16:46:14.413]            // =>  TRUE
[16:46:14.413]          <block atomic="false" info="">
[16:46:14.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:14.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:14.414]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:14.414]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:14.414]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:14.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:14.414]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:14.414]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:14.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:14.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:14.415]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:14.415]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:14.415]          </block>
[16:46:14.415]          // end if-block "!hasDormant"
[16:46:14.416]        </control>
[16:46:14.416]        // end if-block "isSWJ"
[16:46:14.416]      </control>
[16:46:14.416]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:14.416]        // if-block "!isSWJ"
[16:46:14.416]          // =>  FALSE
[16:46:14.416]        // skip if-block "!isSWJ"
[16:46:14.416]      </control>
[16:46:14.416]      <block atomic="false" info="">
[16:46:14.416]        ReadDP(0x0);
[16:46:14.417]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:14.417]      </block>
[16:46:14.417]      // end if-block "protType == 2"
[16:46:14.417]    </control>
[16:46:14.417]  </sequence>
[16:46:14.417]  
[16:46:14.418]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:14.418]  
[16:46:14.418]  <debugvars>
[16:46:14.418]    // Pre-defined
[16:46:14.418]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:14.418]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:14.418]    __dp=0x00000000
[16:46:14.418]    __ap=0x00000000
[16:46:14.418]    __traceout=0x00000000      (Trace Disabled)
[16:46:14.419]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:14.419]    __FlashAddr=0x00000000
[16:46:14.419]    __FlashLen=0x00000000
[16:46:14.419]    __FlashArg=0x00000000
[16:46:14.419]    __FlashOp=0x00000000
[16:46:14.419]    __Result=0x00000000
[16:46:14.419]  </debugvars>
[16:46:14.419]  
[16:46:14.419]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:14.420]    <block atomic="false" info="">
[16:46:14.420]      __var SW_DP_ABORT       = 0x0;
[16:46:14.420]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:14.420]      __var DP_CTRL_STAT      = 0x4;
[16:46:14.420]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:14.420]      __var DP_SELECT         = 0x8;
[16:46:14.420]        // -> [DP_SELECT <= 0x00000008]
[16:46:14.420]      __var powered_down      = 0;
[16:46:14.420]        // -> [powered_down <= 0x00000000]
[16:46:14.420]      WriteDP(DP_SELECT, 0x00000000);
[16:46:14.421]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:14.421]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:14.421]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:14.421]        // -> [powered_down <= 0x00000001]
[16:46:14.421]    </block>
[16:46:14.421]    <control if="powered_down" while="" timeout="0" info="">
[16:46:14.422]      // if-block "powered_down"
[16:46:14.422]        // =>  TRUE
[16:46:14.422]      <block atomic="false" info="">
[16:46:14.422]        Message(0, "Debug/System power-up request sent");
[16:46:14.423]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:14.424]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:14.424]      </block>
[16:46:14.424]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:14.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:14.425]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:14.425]        // while-condition  =>  FALSE
[16:46:14.425]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:14.425]      </control>
[16:46:14.425]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:14.425]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:14.425]          // =>  FALSE
[16:46:14.425]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:14.425]      </control>
[16:46:14.426]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:14.426]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:14.426]          // =>  TRUE
[16:46:14.426]        <block atomic="false" info="">
[16:46:14.426]          Message(0, "executing SWD power up");
[16:46:14.427]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:14.428]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:14.428]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:14.429]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:14.429]        </block>
[16:46:14.429]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:14.429]      </control>
[16:46:14.429]      // end if-block "powered_down"
[16:46:14.429]    </control>
[16:46:14.429]    <block atomic="false" info="">
[16:46:14.429]      __var DEBUG_PORT_VAL    = 0;
[16:46:14.429]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:14.430]      __var ACCESS_POINT_VAL  = 0;
[16:46:14.430]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:14.430]      __ap = 1; 
[16:46:14.430]        // -> [__ap <= 0x00000001]
[16:46:14.430]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:14.431]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:14.432]      __ap = 4;
[16:46:14.432]        // -> [__ap <= 0x00000004]
[16:46:14.432]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:14.433]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:14.433]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:14.433]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:14.436]    </block>
[16:46:14.436]    <block atomic="false" info="">
[16:46:14.436]      __var nReset = 0x80;
[16:46:14.436]        // -> [nReset <= 0x00000080]
[16:46:14.436]      __var canReadPins = 0;
[16:46:14.437]        // -> [canReadPins <= 0x00000000]
[16:46:14.437]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:14.437]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:14.437]        // -> [canReadPins <= 0x00000001]
[16:46:14.437]    </block>
[16:46:14.437]    <control if="" while="1" timeout="200" info="">
[16:46:14.438]      // while "1"  (timeout="200")
[16:46:14.438]      // while-condition  =>  TRUE
[16:46:14.438]      // while "1"  (timeout="200")
[16:46:14.438]      // while-condition  =>  TRUE
[16:46:14.438]      // while "1"  (timeout="200")
[16:46:14.438]      // while-condition  =>  TRUE
[16:46:14.438]      // while "1"  (timeout="200")
[16:46:14.438]      // while-condition  =>  TRUE
[16:46:14.438]      // while "1"  (timeout="200")
[16:46:14.438]      // while-condition  =>  TRUE
[16:46:14.438]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.439]      // while-condition  =>  TRUE
[16:46:14.439]      // while "1"  (timeout="200")
[16:46:14.440]      // while-condition  =>  TRUE
[16:46:14.440]      // while "1"  (timeout="200")
[16:46:14.440]      // while-condition  =>  TRUE
[16:46:14.440]      // while "1"  (timeout="200")
[16:46:14.440]      // while-condition  =>  TRUE
[16:46:14.440]      // while "1"  (timeout="200")
[16:46:14.440]      // while-condition  =>  TRUE
[16:46:14.440]      // while "1"  (timeout="200")
[16:46:14.440]      // while-condition  =>  TRUE
[16:46:14.440]      // while "1"  (timeout="200")
[16:46:14.442]      // while-condition  =>  TRUE
[16:46:14.442]      // while "1"  (timeout="200")
[16:46:14.442]      // while-condition  =>  TRUE
[16:46:14.442]      // while "1"  (timeout="200")
[16:46:14.442]      // while-condition  =>  TRUE
[16:46:14.442]      // while "1"  (timeout="200")
[16:46:14.442]      // while-condition  =>  TRUE
[16:46:14.442]      // while "1"  (timeout="200")
[16:46:14.442]      // while-condition  =>  TRUE
[16:46:14.442]      // while "1"  (timeout="200")
[16:46:14.443]      // while-condition  =>  TRUE
[16:46:14.443]      // while "1"  (timeout="200")
[16:46:14.443]      // while-condition  =>  TRUE
[16:46:14.443]      // while "1"  (timeout="200")
[16:46:14.443]      // while-condition  =>  TRUE
[16:46:14.443]      // while "1"  (timeout="200")
[16:46:14.443]      // while-condition  =>  TRUE
[16:46:14.443]      // while "1"  (timeout="200")
[16:46:14.444]      // while-condition  =>  TRUE
[16:46:14.444]      // while "1"  (timeout="200")
[16:46:14.444]      // while  =>  TIMEOUT
[16:46:14.444]      // end while "1"
[16:46:14.444]    </control>
[16:46:14.444]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:14.444]      // if-block "canReadPins"
[16:46:14.444]        // =>  TRUE
[16:46:14.444]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:14.444]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:14.445]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:14.445]        // while-condition  =>  FALSE
[16:46:14.445]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:14.445]      </control>
[16:46:14.445]      // end if-block "canReadPins"
[16:46:14.445]    </control>
[16:46:14.445]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:14.445]      // if-block "!canReadPins"
[16:46:14.445]        // =>  FALSE
[16:46:14.446]      // skip if-block "!canReadPins"
[16:46:14.446]    </control>
[16:46:14.446]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:14.446]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:14.446]        // =>  TRUE
[16:46:14.446]      <block atomic="false" info="">
[16:46:14.446]        WriteAP(0x00, 0x190008);
[16:46:14.447]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:14.447]        WriteAP(0xF0, 0x01);
[16:46:14.448]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:14.448]      </block>
[16:46:14.448]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:14.448]    </control>
[16:46:14.449]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:14.449]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:14.449]        // =>  FALSE
[16:46:14.449]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:14.449]    </control>
[16:46:14.449]    <block atomic="false" info="">
[16:46:14.449]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:14.450]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:14.450]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:46:14.450]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:14.451]      __ap = 0; //lets make sure we reset the access point selection
[16:46:14.452]        // -> [__ap <= 0x00000000]
[16:46:14.452]    </block>
[16:46:14.452]  </sequence>
[16:46:14.452]  
[16:46:14.458]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:46:14.458]  
[16:46:14.459]  <debugvars>
[16:46:14.459]    // Pre-defined
[16:46:14.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:14.459]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:14.459]    __dp=0x00000000
[16:46:14.459]    __ap=0x00000000
[16:46:14.459]    __traceout=0x00000000      (Trace Disabled)
[16:46:14.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:14.459]    __FlashAddr=0x00000000
[16:46:14.459]    __FlashLen=0x00000000
[16:46:14.459]    __FlashArg=0x00000000
[16:46:14.459]    __FlashOp=0x00000000
[16:46:14.459]    __Result=0x00000000
[16:46:14.459]  </debugvars>
[16:46:14.460]  
[16:46:14.460]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:46:14.460]    <block atomic="false" info="">
[16:46:14.460]      __var deviceID = 0;
[16:46:14.460]        // -> [deviceID <= 0x00000000]
[16:46:14.460]      __var version = 0;
[16:46:14.461]        // -> [version <= 0x00000000]
[16:46:14.461]      __var partNum = 0;
[16:46:14.461]        // -> [partNum <= 0x00000000]
[16:46:14.461]      __var manuf = 0;
[16:46:14.461]        // -> [manuf <= 0x00000000]
[16:46:14.461]      __var isMSPM0G1X0X_G3X0X = 0;
[16:46:14.461]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:46:14.461]      __var isProduction = 0;
[16:46:14.461]        // -> [isProduction <= 0x00000000]
[16:46:14.461]      __var continueId = 0;
[16:46:14.462]        // -> [continueId <= 0x00000000]
[16:46:14.462]      deviceID =   Read32(0x41C40004);
[16:46:14.464]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:46:14.464]        // -> [deviceID <= 0x2BB8802F]
[16:46:14.464]      version = deviceID >> 28;
[16:46:14.464]        // -> [version <= 0x00000002]
[16:46:14.464]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:46:14.464]        // -> [partNum <= 0x0000BB88]
[16:46:14.464]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:46:14.465]        // -> [manuf <= 0x00000017]
[16:46:14.465]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:46:14.465]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:46:14.465]      isProduction = (version > 0);
[16:46:14.465]        // -> [isProduction <= 0x00000001]
[16:46:14.465]    </block>
[16:46:14.465]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:46:14.465]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:46:14.465]        // =>  FALSE
[16:46:14.465]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:46:14.465]    </control>
[16:46:14.465]    <control if="continueId == 4" while="" timeout="0" info="">
[16:46:14.466]      // if-block "continueId == 4"
[16:46:14.466]        // =>  FALSE
[16:46:14.466]      // skip if-block "continueId == 4"
[16:46:14.466]    </control>
[16:46:14.466]    <control if="!isProduction" while="" timeout="0" info="">
[16:46:14.466]      // if-block "!isProduction"
[16:46:14.466]        // =>  FALSE
[16:46:14.466]      // skip if-block "!isProduction"
[16:46:14.466]    </control>
[16:46:14.466]  </sequence>
[16:46:14.466]  
[16:46:33.374]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:46:33.374]  
[16:46:33.383]  <debugvars>
[16:46:33.383]    // Pre-defined
[16:46:33.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:33.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:33.383]    __dp=0x00000000
[16:46:33.383]    __ap=0x00000000
[16:46:33.383]    __traceout=0x00000000      (Trace Disabled)
[16:46:33.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:33.384]    __FlashAddr=0x00000000
[16:46:33.384]    __FlashLen=0x00000000
[16:46:33.384]    __FlashArg=0x00000000
[16:46:33.384]    __FlashOp=0x00000000
[16:46:33.384]    __Result=0x00000000
[16:46:33.384]  </debugvars>
[16:46:33.384]  
[16:46:33.384]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:46:33.384]    <block atomic="false" info="">
[16:46:33.385]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:46:33.385]        // -> [isSWJ <= 0x00000001]
[16:46:33.385]      __var hasDormant = __protocol & 0x00020000;
[16:46:33.385]        // -> [hasDormant <= 0x00000000]
[16:46:33.385]      __var protType   = __protocol & 0x0000FFFF;
[16:46:33.385]        // -> [protType <= 0x00000002]
[16:46:33.385]    </block>
[16:46:33.385]    <control if="protType == 1" while="" timeout="0" info="">
[16:46:33.385]      // if-block "protType == 1"
[16:46:33.385]        // =>  FALSE
[16:46:33.385]      // skip if-block "protType == 1"
[16:46:33.386]    </control>
[16:46:33.386]    <control if="protType == 2" while="" timeout="0" info="">
[16:46:33.386]      // if-block "protType == 2"
[16:46:33.386]        // =>  TRUE
[16:46:33.386]      <control if="isSWJ" while="" timeout="0" info="">
[16:46:33.386]        // if-block "isSWJ"
[16:46:33.386]          // =>  TRUE
[16:46:33.387]        <control if="hasDormant" while="" timeout="0" info="">
[16:46:33.387]          // if-block "hasDormant"
[16:46:33.387]            // =>  FALSE
[16:46:33.387]          // skip if-block "hasDormant"
[16:46:33.387]        </control>
[16:46:33.387]        <control if="!hasDormant" while="" timeout="0" info="">
[16:46:33.387]          // if-block "!hasDormant"
[16:46:33.387]            // =>  TRUE
[16:46:33.387]          <block atomic="false" info="">
[16:46:33.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:46:33.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:33.387]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:46:33.388]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:46:33.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:46:33.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:33.389]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:46:33.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:46:33.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:46:33.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:46:33.391]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:46:33.391]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:46:33.391]          </block>
[16:46:33.391]          // end if-block "!hasDormant"
[16:46:33.391]        </control>
[16:46:33.391]        // end if-block "isSWJ"
[16:46:33.391]      </control>
[16:46:33.391]      <control if="!isSWJ" while="" timeout="0" info="">
[16:46:33.391]        // if-block "!isSWJ"
[16:46:33.392]          // =>  FALSE
[16:46:33.392]        // skip if-block "!isSWJ"
[16:46:33.392]      </control>
[16:46:33.392]      <block atomic="false" info="">
[16:46:33.392]        ReadDP(0x0);
[16:46:33.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:46:33.392]      </block>
[16:46:33.392]      // end if-block "protType == 2"
[16:46:33.393]    </control>
[16:46:33.393]  </sequence>
[16:46:33.393]  
[16:46:33.393]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:46:33.393]  
[16:46:33.393]  <debugvars>
[16:46:33.393]    // Pre-defined
[16:46:33.393]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:33.394]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:33.394]    __dp=0x00000000
[16:46:33.394]    __ap=0x00000000
[16:46:33.394]    __traceout=0x00000000      (Trace Disabled)
[16:46:33.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:33.394]    __FlashAddr=0x00000000
[16:46:33.394]    __FlashLen=0x00000000
[16:46:33.395]    __FlashArg=0x00000000
[16:46:33.395]    __FlashOp=0x00000000
[16:46:33.395]    __Result=0x00000000
[16:46:33.395]  </debugvars>
[16:46:33.395]  
[16:46:33.395]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:46:33.395]    <block atomic="false" info="">
[16:46:33.395]      __var SW_DP_ABORT       = 0x0;
[16:46:33.395]        // -> [SW_DP_ABORT <= 0x00000000]
[16:46:33.395]      __var DP_CTRL_STAT      = 0x4;
[16:46:33.395]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:46:33.395]      __var DP_SELECT         = 0x8;
[16:46:33.396]        // -> [DP_SELECT <= 0x00000008]
[16:46:33.396]      __var powered_down      = 0;
[16:46:33.396]        // -> [powered_down <= 0x00000000]
[16:46:33.396]      WriteDP(DP_SELECT, 0x00000000);
[16:46:33.397]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:46:33.397]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:46:33.397]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:46:33.397]        // -> [powered_down <= 0x00000001]
[16:46:33.397]    </block>
[16:46:33.397]    <control if="powered_down" while="" timeout="0" info="">
[16:46:33.397]      // if-block "powered_down"
[16:46:33.397]        // =>  TRUE
[16:46:33.397]      <block atomic="false" info="">
[16:46:33.399]        Message(0, "Debug/System power-up request sent");
[16:46:33.402]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:46:33.402]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:46:33.402]      </block>
[16:46:33.402]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:46:33.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:46:33.403]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:46:33.403]        // while-condition  =>  FALSE
[16:46:33.403]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:46:33.403]      </control>
[16:46:33.403]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:46:33.403]        // if-block "(__protocol & 0xFFFF) == 1"
[16:46:33.403]          // =>  FALSE
[16:46:33.403]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:46:33.404]      </control>
[16:46:33.404]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:46:33.404]        // if-block "(__protocol & 0xFFFF) == 2"
[16:46:33.405]          // =>  TRUE
[16:46:33.405]        <block atomic="false" info="">
[16:46:33.405]          Message(0, "executing SWD power up");
[16:46:33.406]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:46:33.407]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:46:33.407]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:46:33.407]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:46:33.407]        </block>
[16:46:33.407]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:46:33.407]      </control>
[16:46:33.407]      // end if-block "powered_down"
[16:46:33.407]    </control>
[16:46:33.408]    <block atomic="false" info="">
[16:46:33.408]      __var DEBUG_PORT_VAL    = 0;
[16:46:33.408]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:46:33.408]      __var ACCESS_POINT_VAL  = 0;
[16:46:33.408]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:46:33.408]      __ap = 1; 
[16:46:33.409]        // -> [__ap <= 0x00000001]
[16:46:33.409]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:46:33.410]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:46:33.410]      __ap = 4;
[16:46:33.410]        // -> [__ap <= 0x00000004]
[16:46:33.410]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:33.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:46:33.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:46:33.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:33.413]    </block>
[16:46:33.413]    <block atomic="false" info="">
[16:46:33.413]      __var nReset = 0x80;
[16:46:33.413]        // -> [nReset <= 0x00000080]
[16:46:33.413]      __var canReadPins = 0;
[16:46:33.414]        // -> [canReadPins <= 0x00000000]
[16:46:33.414]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:46:33.414]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:46:33.414]        // -> [canReadPins <= 0x00000001]
[16:46:33.414]    </block>
[16:46:33.414]    <control if="" while="1" timeout="200" info="">
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.415]      // while-condition  =>  TRUE
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.415]      // while-condition  =>  TRUE
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.415]      // while-condition  =>  TRUE
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.415]      // while-condition  =>  TRUE
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.415]      // while-condition  =>  TRUE
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.415]      // while-condition  =>  TRUE
[16:46:33.415]      // while "1"  (timeout="200")
[16:46:33.416]      // while-condition  =>  TRUE
[16:46:33.416]      // while "1"  (timeout="200")
[16:46:33.416]      // while-condition  =>  TRUE
[16:46:33.416]      // while "1"  (timeout="200")
[16:46:33.416]      // while-condition  =>  TRUE
[16:46:33.416]      // while "1"  (timeout="200")
[16:46:33.416]      // while-condition  =>  TRUE
[16:46:33.416]      // while "1"  (timeout="200")
[16:46:33.416]      // while-condition  =>  TRUE
[16:46:33.416]      // while "1"  (timeout="200")
[16:46:33.416]      // while-condition  =>  TRUE
[16:46:33.417]      // while "1"  (timeout="200")
[16:46:33.417]      // while-condition  =>  TRUE
[16:46:33.417]      // while "1"  (timeout="200")
[16:46:33.417]      // while-condition  =>  TRUE
[16:46:33.417]      // while "1"  (timeout="200")
[16:46:33.417]      // while-condition  =>  TRUE
[16:46:33.417]      // while "1"  (timeout="200")
[16:46:33.417]      // while-condition  =>  TRUE
[16:46:33.417]      // while "1"  (timeout="200")
[16:46:33.417]      // while-condition  =>  TRUE
[16:46:33.417]      // while "1"  (timeout="200")
[16:46:33.418]      // while-condition  =>  TRUE
[16:46:33.418]      // while "1"  (timeout="200")
[16:46:33.418]      // while-condition  =>  TRUE
[16:46:33.418]      // while "1"  (timeout="200")
[16:46:33.418]      // while-condition  =>  TRUE
[16:46:33.418]      // while "1"  (timeout="200")
[16:46:33.418]      // while-condition  =>  TRUE
[16:46:33.418]      // while "1"  (timeout="200")
[16:46:33.418]      // while-condition  =>  TRUE
[16:46:33.419]      // while "1"  (timeout="200")
[16:46:33.419]      // while-condition  =>  TRUE
[16:46:33.419]      // while "1"  (timeout="200")
[16:46:33.419]      // while-condition  =>  TRUE
[16:46:33.419]      // while "1"  (timeout="200")
[16:46:33.419]      // while-condition  =>  TRUE
[16:46:33.419]      // while "1"  (timeout="200")
[16:46:33.419]      // while-condition  =>  TRUE
[16:46:33.419]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.420]      // while "1"  (timeout="200")
[16:46:33.420]      // while-condition  =>  TRUE
[16:46:33.422]      // while "1"  (timeout="200")
[16:46:33.422]      // while-condition  =>  TRUE
[16:46:33.422]      // while "1"  (timeout="200")
[16:46:33.422]      // while-condition  =>  TRUE
[16:46:33.422]      // while "1"  (timeout="200")
[16:46:33.422]      // while-condition  =>  TRUE
[16:46:33.422]      // while "1"  (timeout="200")
[16:46:33.422]      // while-condition  =>  TRUE
[16:46:33.422]      // while "1"  (timeout="200")
[16:46:33.422]      // while-condition  =>  TRUE
[16:46:33.422]      // while "1"  (timeout="200")
[16:46:33.422]      // while-condition  =>  TRUE
[16:46:33.423]      // while "1"  (timeout="200")
[16:46:33.423]      // while-condition  =>  TRUE
[16:46:33.423]      // while "1"  (timeout="200")
[16:46:33.423]      // while-condition  =>  TRUE
[16:46:33.423]      // while "1"  (timeout="200")
[16:46:33.423]      // while-condition  =>  TRUE
[16:46:33.423]      // while "1"  (timeout="200")
[16:46:33.423]      // while-condition  =>  TRUE
[16:46:33.423]      // while "1"  (timeout="200")
[16:46:33.423]      // while-condition  =>  TRUE
[16:46:33.423]      // while "1"  (timeout="200")
[16:46:33.423]      // while-condition  =>  TRUE
[16:46:33.424]      // while "1"  (timeout="200")
[16:46:33.424]      // while-condition  =>  TRUE
[16:46:33.424]      // while "1"  (timeout="200")
[16:46:33.424]      // while-condition  =>  TRUE
[16:46:33.424]      // while "1"  (timeout="200")
[16:46:33.424]      // while-condition  =>  TRUE
[16:46:33.424]      // while "1"  (timeout="200")
[16:46:33.424]      // while-condition  =>  TRUE
[16:46:33.424]      // while "1"  (timeout="200")
[16:46:33.424]      // while-condition  =>  TRUE
[16:46:33.424]      // while "1"  (timeout="200")
[16:46:33.425]      // while-condition  =>  TRUE
[16:46:33.425]      // while "1"  (timeout="200")
[16:46:33.425]      // while-condition  =>  TRUE
[16:46:33.425]      // while "1"  (timeout="200")
[16:46:33.425]      // while-condition  =>  TRUE
[16:46:33.425]      // while "1"  (timeout="200")
[16:46:33.425]      // while-condition  =>  TRUE
[16:46:33.425]      // while "1"  (timeout="200")
[16:46:33.425]      // while-condition  =>  TRUE
[16:46:33.425]      // while "1"  (timeout="200")
[16:46:33.425]      // while-condition  =>  TRUE
[16:46:33.426]      // while "1"  (timeout="200")
[16:46:33.426]      // while-condition  =>  TRUE
[16:46:33.426]      // while "1"  (timeout="200")
[16:46:33.426]      // while-condition  =>  TRUE
[16:46:33.426]      // while "1"  (timeout="200")
[16:46:33.426]      // while-condition  =>  TRUE
[16:46:33.426]      // while "1"  (timeout="200")
[16:46:33.426]      // while-condition  =>  TRUE
[16:46:33.426]      // while "1"  (timeout="200")
[16:46:33.426]      // while-condition  =>  TRUE
[16:46:33.426]      // while "1"  (timeout="200")
[16:46:33.426]      // while-condition  =>  TRUE
[16:46:33.427]      // while "1"  (timeout="200")
[16:46:33.427]      // while-condition  =>  TRUE
[16:46:33.427]      // while "1"  (timeout="200")
[16:46:33.427]      // while-condition  =>  TRUE
[16:46:33.427]      // while "1"  (timeout="200")
[16:46:33.427]      // while-condition  =>  TRUE
[16:46:33.427]      // while "1"  (timeout="200")
[16:46:33.427]      // while-condition  =>  TRUE
[16:46:33.427]      // while "1"  (timeout="200")
[16:46:33.427]      // while-condition  =>  TRUE
[16:46:33.428]      // while "1"  (timeout="200")
[16:46:33.428]      // while  =>  TIMEOUT
[16:46:33.428]      // end while "1"
[16:46:33.428]    </control>
[16:46:33.428]    <control if="canReadPins" while="" timeout="0" info="">
[16:46:33.428]      // if-block "canReadPins"
[16:46:33.428]        // =>  TRUE
[16:46:33.428]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:46:33.428]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:46:33.429]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:46:33.429]        // while-condition  =>  FALSE
[16:46:33.429]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:46:33.429]      </control>
[16:46:33.429]      // end if-block "canReadPins"
[16:46:33.429]    </control>
[16:46:33.429]    <control if="!canReadPins" while="" timeout="0" info="">
[16:46:33.429]      // if-block "!canReadPins"
[16:46:33.429]        // =>  FALSE
[16:46:33.429]      // skip if-block "!canReadPins"
[16:46:33.429]    </control>
[16:46:33.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:46:33.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:33.430]        // =>  TRUE
[16:46:33.430]      <block atomic="false" info="">
[16:46:33.430]        WriteAP(0x00, 0x190008);
[16:46:33.430]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:33.430]        WriteAP(0xF0, 0x01);
[16:46:33.432]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:46:33.432]      </block>
[16:46:33.432]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:46:33.432]    </control>
[16:46:33.432]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:46:33.432]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:33.432]        // =>  FALSE
[16:46:33.432]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:46:33.432]    </control>
[16:46:33.432]    <block atomic="false" info="">
[16:46:33.432]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:46:33.433]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:46:33.433]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:46:33.433]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:46:33.436]      __ap = 0; //lets make sure we reset the access point selection
[16:46:33.436]        // -> [__ap <= 0x00000000]
[16:46:33.436]    </block>
[16:46:33.436]  </sequence>
[16:46:33.436]  
[16:46:33.442]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:46:33.442]  
[16:46:33.442]  <debugvars>
[16:46:33.442]    // Pre-defined
[16:46:33.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:46:33.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:46:33.442]    __dp=0x00000000
[16:46:33.442]    __ap=0x00000000
[16:46:33.443]    __traceout=0x00000000      (Trace Disabled)
[16:46:33.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:46:33.443]    __FlashAddr=0x00000000
[16:46:33.443]    __FlashLen=0x00000000
[16:46:33.443]    __FlashArg=0x00000000
[16:46:33.443]    __FlashOp=0x00000000
[16:46:33.443]    __Result=0x00000000
[16:46:33.443]  </debugvars>
[16:46:33.443]  
[16:46:33.443]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:46:33.443]    <block atomic="false" info="">
[16:46:33.443]      __var deviceID = 0;
[16:46:33.444]        // -> [deviceID <= 0x00000000]
[16:46:33.444]      __var version = 0;
[16:46:33.444]        // -> [version <= 0x00000000]
[16:46:33.444]      __var partNum = 0;
[16:46:33.444]        // -> [partNum <= 0x00000000]
[16:46:33.444]      __var manuf = 0;
[16:46:33.444]        // -> [manuf <= 0x00000000]
[16:46:33.444]      __var isMSPM0G1X0X_G3X0X = 0;
[16:46:33.444]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:46:33.444]      __var isProduction = 0;
[16:46:33.444]        // -> [isProduction <= 0x00000000]
[16:46:33.444]      __var continueId = 0;
[16:46:33.445]        // -> [continueId <= 0x00000000]
[16:46:33.445]      deviceID =   Read32(0x41C40004);
[16:46:33.446]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:46:33.446]        // -> [deviceID <= 0x2BB8802F]
[16:46:33.446]      version = deviceID >> 28;
[16:46:33.446]        // -> [version <= 0x00000002]
[16:46:33.446]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:46:33.447]        // -> [partNum <= 0x0000BB88]
[16:46:33.447]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:46:33.447]        // -> [manuf <= 0x00000017]
[16:46:33.447]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:46:33.447]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:46:33.447]      isProduction = (version > 0);
[16:46:33.447]        // -> [isProduction <= 0x00000001]
[16:46:33.447]    </block>
[16:46:33.447]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:46:33.447]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:46:33.447]        // =>  FALSE
[16:46:33.447]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:46:33.447]    </control>
[16:46:33.447]    <control if="continueId == 4" while="" timeout="0" info="">
[16:46:33.447]      // if-block "continueId == 4"
[16:46:33.449]        // =>  FALSE
[16:46:33.449]      // skip if-block "continueId == 4"
[16:46:33.449]    </control>
[16:46:33.449]    <control if="!isProduction" while="" timeout="0" info="">
[16:46:33.449]      // if-block "!isProduction"
[16:46:33.449]        // =>  FALSE
[16:46:33.449]      // skip if-block "!isProduction"
[16:46:33.449]    </control>
[16:46:33.449]  </sequence>
[16:46:33.449]  
[16:49:03.584]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:49:03.584]  
[16:49:03.593]  <debugvars>
[16:49:03.593]    // Pre-defined
[16:49:03.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:03.593]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:03.593]    __dp=0x00000000
[16:49:03.593]    __ap=0x00000000
[16:49:03.593]    __traceout=0x00000000      (Trace Disabled)
[16:49:03.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:03.593]    __FlashAddr=0x00000000
[16:49:03.593]    __FlashLen=0x00000000
[16:49:03.594]    __FlashArg=0x00000000
[16:49:03.594]    __FlashOp=0x00000000
[16:49:03.594]    __Result=0x00000000
[16:49:03.594]  </debugvars>
[16:49:03.594]  
[16:49:03.594]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:49:03.594]    <block atomic="false" info="">
[16:49:03.594]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:49:03.594]        // -> [isSWJ <= 0x00000001]
[16:49:03.594]      __var hasDormant = __protocol & 0x00020000;
[16:49:03.594]        // -> [hasDormant <= 0x00000000]
[16:49:03.594]      __var protType   = __protocol & 0x0000FFFF;
[16:49:03.594]        // -> [protType <= 0x00000002]
[16:49:03.594]    </block>
[16:49:03.596]    <control if="protType == 1" while="" timeout="0" info="">
[16:49:03.596]      // if-block "protType == 1"
[16:49:03.596]        // =>  FALSE
[16:49:03.596]      // skip if-block "protType == 1"
[16:49:03.596]    </control>
[16:49:03.596]    <control if="protType == 2" while="" timeout="0" info="">
[16:49:03.596]      // if-block "protType == 2"
[16:49:03.596]        // =>  TRUE
[16:49:03.596]      <control if="isSWJ" while="" timeout="0" info="">
[16:49:03.597]        // if-block "isSWJ"
[16:49:03.597]          // =>  TRUE
[16:49:03.597]        <control if="hasDormant" while="" timeout="0" info="">
[16:49:03.597]          // if-block "hasDormant"
[16:49:03.597]            // =>  FALSE
[16:49:03.597]          // skip if-block "hasDormant"
[16:49:03.597]        </control>
[16:49:03.597]        <control if="!hasDormant" while="" timeout="0" info="">
[16:49:03.597]          // if-block "!hasDormant"
[16:49:03.597]            // =>  TRUE
[16:49:03.597]          <block atomic="false" info="">
[16:49:03.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:49:03.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:03.598]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:49:03.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:49:03.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:49:03.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:03.599]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:49:03.599]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:49:03.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:49:03.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:03.599]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:49:03.600]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:49:03.600]          </block>
[16:49:03.600]          // end if-block "!hasDormant"
[16:49:03.600]        </control>
[16:49:03.600]        // end if-block "isSWJ"
[16:49:03.600]      </control>
[16:49:03.600]      <control if="!isSWJ" while="" timeout="0" info="">
[16:49:03.600]        // if-block "!isSWJ"
[16:49:03.600]          // =>  FALSE
[16:49:03.601]        // skip if-block "!isSWJ"
[16:49:03.601]      </control>
[16:49:03.601]      <block atomic="false" info="">
[16:49:03.601]        ReadDP(0x0);
[16:49:03.601]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:49:03.601]      </block>
[16:49:03.601]      // end if-block "protType == 2"
[16:49:03.602]    </control>
[16:49:03.602]  </sequence>
[16:49:03.602]  
[16:49:03.602]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:49:03.602]  
[16:49:03.602]  <debugvars>
[16:49:03.603]    // Pre-defined
[16:49:03.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:03.603]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:03.603]    __dp=0x00000000
[16:49:03.603]    __ap=0x00000000
[16:49:03.603]    __traceout=0x00000000      (Trace Disabled)
[16:49:03.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:03.603]    __FlashAddr=0x00000000
[16:49:03.603]    __FlashLen=0x00000000
[16:49:03.603]    __FlashArg=0x00000000
[16:49:03.603]    __FlashOp=0x00000000
[16:49:03.603]    __Result=0x00000000
[16:49:03.604]  </debugvars>
[16:49:03.604]  
[16:49:03.604]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:49:03.604]    <block atomic="false" info="">
[16:49:03.604]      __var SW_DP_ABORT       = 0x0;
[16:49:03.604]        // -> [SW_DP_ABORT <= 0x00000000]
[16:49:03.604]      __var DP_CTRL_STAT      = 0x4;
[16:49:03.604]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:49:03.604]      __var DP_SELECT         = 0x8;
[16:49:03.604]        // -> [DP_SELECT <= 0x00000008]
[16:49:03.604]      __var powered_down      = 0;
[16:49:03.604]        // -> [powered_down <= 0x00000000]
[16:49:03.604]      WriteDP(DP_SELECT, 0x00000000);
[16:49:03.606]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:49:03.606]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:49:03.606]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:49:03.606]        // -> [powered_down <= 0x00000001]
[16:49:03.607]    </block>
[16:49:03.607]    <control if="powered_down" while="" timeout="0" info="">
[16:49:03.607]      // if-block "powered_down"
[16:49:03.607]        // =>  TRUE
[16:49:03.607]      <block atomic="false" info="">
[16:49:03.607]        Message(0, "Debug/System power-up request sent");
[16:49:03.609]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:49:03.609]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:49:03.609]      </block>
[16:49:03.609]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:49:03.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:49:03.610]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:49:03.610]        // while-condition  =>  FALSE
[16:49:03.610]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:49:03.610]      </control>
[16:49:03.610]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:49:03.610]        // if-block "(__protocol & 0xFFFF) == 1"
[16:49:03.610]          // =>  FALSE
[16:49:03.610]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:49:03.610]      </control>
[16:49:03.610]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:49:03.610]        // if-block "(__protocol & 0xFFFF) == 2"
[16:49:03.611]          // =>  TRUE
[16:49:03.611]        <block atomic="false" info="">
[16:49:03.611]          Message(0, "executing SWD power up");
[16:49:03.612]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:49:03.613]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:49:03.613]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:49:03.613]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:49:03.613]        </block>
[16:49:03.614]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:49:03.614]      </control>
[16:49:03.614]      // end if-block "powered_down"
[16:49:03.614]    </control>
[16:49:03.614]    <block atomic="false" info="">
[16:49:03.614]      __var DEBUG_PORT_VAL    = 0;
[16:49:03.614]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:49:03.614]      __var ACCESS_POINT_VAL  = 0;
[16:49:03.614]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:49:03.614]      __ap = 1; 
[16:49:03.614]        // -> [__ap <= 0x00000001]
[16:49:03.614]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:49:03.616]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:49:03.616]      __ap = 4;
[16:49:03.616]        // -> [__ap <= 0x00000004]
[16:49:03.617]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:03.618]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:49:03.618]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:49:03.618]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:03.619]    </block>
[16:49:03.619]    <block atomic="false" info="">
[16:49:03.619]      __var nReset = 0x80;
[16:49:03.620]        // -> [nReset <= 0x00000080]
[16:49:03.620]      __var canReadPins = 0;
[16:49:03.620]        // -> [canReadPins <= 0x00000000]
[16:49:03.620]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:49:03.620]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:49:03.620]        // -> [canReadPins <= 0x00000001]
[16:49:03.620]    </block>
[16:49:03.621]    <control if="" while="1" timeout="200" info="">
[16:49:03.621]      // while "1"  (timeout="200")
[16:49:03.621]      // while-condition  =>  TRUE
[16:49:03.621]      // while "1"  (timeout="200")
[16:49:03.621]      // while-condition  =>  TRUE
[16:49:03.621]      // while "1"  (timeout="200")
[16:49:03.621]      // while-condition  =>  TRUE
[16:49:03.621]      // while "1"  (timeout="200")
[16:49:03.622]      // while-condition  =>  TRUE
[16:49:03.622]      // while "1"  (timeout="200")
[16:49:03.622]      // while-condition  =>  TRUE
[16:49:03.622]      // while "1"  (timeout="200")
[16:49:03.622]      // while-condition  =>  TRUE
[16:49:03.622]      // while "1"  (timeout="200")
[16:49:03.622]      // while-condition  =>  TRUE
[16:49:03.622]      // while "1"  (timeout="200")
[16:49:03.622]      // while-condition  =>  TRUE
[16:49:03.622]      // while "1"  (timeout="200")
[16:49:03.622]      // while-condition  =>  TRUE
[16:49:03.623]      // while "1"  (timeout="200")
[16:49:03.623]      // while-condition  =>  TRUE
[16:49:03.623]      // while "1"  (timeout="200")
[16:49:03.623]      // while-condition  =>  TRUE
[16:49:03.623]      // while "1"  (timeout="200")
[16:49:03.623]      // while-condition  =>  TRUE
[16:49:03.623]      // while "1"  (timeout="200")
[16:49:03.623]      // while-condition  =>  TRUE
[16:49:03.623]      // while "1"  (timeout="200")
[16:49:03.623]      // while-condition  =>  TRUE
[16:49:03.623]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.624]      // while-condition  =>  TRUE
[16:49:03.624]      // while "1"  (timeout="200")
[16:49:03.625]      // while-condition  =>  TRUE
[16:49:03.625]      // while "1"  (timeout="200")
[16:49:03.625]      // while-condition  =>  TRUE
[16:49:03.625]      // while "1"  (timeout="200")
[16:49:03.625]      // while-condition  =>  TRUE
[16:49:03.625]      // while "1"  (timeout="200")
[16:49:03.625]      // while-condition  =>  TRUE
[16:49:03.625]      // while "1"  (timeout="200")
[16:49:03.625]      // while-condition  =>  TRUE
[16:49:03.625]      // while "1"  (timeout="200")
[16:49:03.625]      // while-condition  =>  TRUE
[16:49:03.626]      // while "1"  (timeout="200")
[16:49:03.626]      // while-condition  =>  TRUE
[16:49:03.626]      // while "1"  (timeout="200")
[16:49:03.626]      // while-condition  =>  TRUE
[16:49:03.626]      // while "1"  (timeout="200")
[16:49:03.626]      // while-condition  =>  TRUE
[16:49:03.626]      // while "1"  (timeout="200")
[16:49:03.626]      // while-condition  =>  TRUE
[16:49:03.626]      // while "1"  (timeout="200")
[16:49:03.626]      // while-condition  =>  TRUE
[16:49:03.626]      // while "1"  (timeout="200")
[16:49:03.626]      // while-condition  =>  TRUE
[16:49:03.628]      // while "1"  (timeout="200")
[16:49:03.628]      // while-condition  =>  TRUE
[16:49:03.628]      // while "1"  (timeout="200")
[16:49:03.628]      // while-condition  =>  TRUE
[16:49:03.628]      // while "1"  (timeout="200")
[16:49:03.628]      // while-condition  =>  TRUE
[16:49:03.628]      // while "1"  (timeout="200")
[16:49:03.628]      // while-condition  =>  TRUE
[16:49:03.629]      // while "1"  (timeout="200")
[16:49:03.629]      // while-condition  =>  TRUE
[16:49:03.629]      // while "1"  (timeout="200")
[16:49:03.629]      // while-condition  =>  TRUE
[16:49:03.629]      // while "1"  (timeout="200")
[16:49:03.629]      // while-condition  =>  TRUE
[16:49:03.629]      // while "1"  (timeout="200")
[16:49:03.629]      // while-condition  =>  TRUE
[16:49:03.629]      // while "1"  (timeout="200")
[16:49:03.629]      // while-condition  =>  TRUE
[16:49:03.629]      // while "1"  (timeout="200")
[16:49:03.630]      // while-condition  =>  TRUE
[16:49:03.630]      // while "1"  (timeout="200")
[16:49:03.630]      // while-condition  =>  TRUE
[16:49:03.630]      // while "1"  (timeout="200")
[16:49:03.630]      // while-condition  =>  TRUE
[16:49:03.630]      // while "1"  (timeout="200")
[16:49:03.630]      // while-condition  =>  TRUE
[16:49:03.630]      // while "1"  (timeout="200")
[16:49:03.630]      // while-condition  =>  TRUE
[16:49:03.630]      // while "1"  (timeout="200")
[16:49:03.630]      // while-condition  =>  TRUE
[16:49:03.631]      // while "1"  (timeout="200")
[16:49:03.631]      // while  =>  TIMEOUT
[16:49:03.631]      // end while "1"
[16:49:03.631]    </control>
[16:49:03.631]    <control if="canReadPins" while="" timeout="0" info="">
[16:49:03.631]      // if-block "canReadPins"
[16:49:03.632]        // =>  TRUE
[16:49:03.632]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:49:03.632]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:49:03.632]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:49:03.632]        // while-condition  =>  FALSE
[16:49:03.632]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:49:03.632]      </control>
[16:49:03.632]      // end if-block "canReadPins"
[16:49:03.632]    </control>
[16:49:03.632]    <control if="!canReadPins" while="" timeout="0" info="">
[16:49:03.633]      // if-block "!canReadPins"
[16:49:03.633]        // =>  FALSE
[16:49:03.633]      // skip if-block "!canReadPins"
[16:49:03.633]    </control>
[16:49:03.633]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:49:03.633]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:03.633]        // =>  TRUE
[16:49:03.633]      <block atomic="false" info="">
[16:49:03.633]        WriteAP(0x00, 0x190008);
[16:49:03.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:03.634]        WriteAP(0xF0, 0x01);
[16:49:03.636]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:03.636]      </block>
[16:49:03.636]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:03.636]    </control>
[16:49:03.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:49:03.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:03.637]        // =>  FALSE
[16:49:03.637]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:03.637]    </control>
[16:49:03.637]    <block atomic="false" info="">
[16:49:03.637]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:03.638]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:49:03.638]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:49:03.638]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:03.640]      __ap = 0; //lets make sure we reset the access point selection
[16:49:03.640]        // -> [__ap <= 0x00000000]
[16:49:03.640]    </block>
[16:49:03.640]  </sequence>
[16:49:03.640]  
[16:49:03.646]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:49:03.646]  
[16:49:03.646]  <debugvars>
[16:49:03.646]    // Pre-defined
[16:49:03.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:03.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:03.646]    __dp=0x00000000
[16:49:03.647]    __ap=0x00000000
[16:49:03.647]    __traceout=0x00000000      (Trace Disabled)
[16:49:03.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:03.647]    __FlashAddr=0x00000000
[16:49:03.647]    __FlashLen=0x00000000
[16:49:03.647]    __FlashArg=0x00000000
[16:49:03.647]    __FlashOp=0x00000000
[16:49:03.647]    __Result=0x00000000
[16:49:03.647]  </debugvars>
[16:49:03.647]  
[16:49:03.647]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:49:03.647]    <block atomic="false" info="">
[16:49:03.647]      __var deviceID = 0;
[16:49:03.648]        // -> [deviceID <= 0x00000000]
[16:49:03.648]      __var version = 0;
[16:49:03.648]        // -> [version <= 0x00000000]
[16:49:03.648]      __var partNum = 0;
[16:49:03.648]        // -> [partNum <= 0x00000000]
[16:49:03.648]      __var manuf = 0;
[16:49:03.648]        // -> [manuf <= 0x00000000]
[16:49:03.648]      __var isMSPM0G1X0X_G3X0X = 0;
[16:49:03.648]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:49:03.648]      __var isProduction = 0;
[16:49:03.649]        // -> [isProduction <= 0x00000000]
[16:49:03.649]      __var continueId = 0;
[16:49:03.649]        // -> [continueId <= 0x00000000]
[16:49:03.649]      deviceID =   Read32(0x41C40004);
[16:49:03.651]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:49:03.651]        // -> [deviceID <= 0x2BB8802F]
[16:49:03.651]      version = deviceID >> 28;
[16:49:03.651]        // -> [version <= 0x00000002]
[16:49:03.651]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:49:03.651]        // -> [partNum <= 0x0000BB88]
[16:49:03.651]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:49:03.651]        // -> [manuf <= 0x00000017]
[16:49:03.651]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:49:03.651]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:49:03.651]      isProduction = (version > 0);
[16:49:03.652]        // -> [isProduction <= 0x00000001]
[16:49:03.652]    </block>
[16:49:03.652]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:49:03.652]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:49:03.652]        // =>  FALSE
[16:49:03.652]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:49:03.652]    </control>
[16:49:03.652]    <control if="continueId == 4" while="" timeout="0" info="">
[16:49:03.652]      // if-block "continueId == 4"
[16:49:03.652]        // =>  FALSE
[16:49:03.652]      // skip if-block "continueId == 4"
[16:49:03.654]    </control>
[16:49:03.654]    <control if="!isProduction" while="" timeout="0" info="">
[16:49:03.654]      // if-block "!isProduction"
[16:49:03.654]        // =>  FALSE
[16:49:03.654]      // skip if-block "!isProduction"
[16:49:03.654]    </control>
[16:49:03.654]  </sequence>
[16:49:03.654]  
[16:49:30.949]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:49:30.949]  
[16:49:30.959]  <debugvars>
[16:49:30.959]    // Pre-defined
[16:49:30.959]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:30.959]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:30.959]    __dp=0x00000000
[16:49:30.960]    __ap=0x00000000
[16:49:30.960]    __traceout=0x00000000      (Trace Disabled)
[16:49:30.960]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:30.960]    __FlashAddr=0x00000000
[16:49:30.960]    __FlashLen=0x00000000
[16:49:30.960]    __FlashArg=0x00000000
[16:49:30.960]    __FlashOp=0x00000000
[16:49:30.960]    __Result=0x00000000
[16:49:30.961]  </debugvars>
[16:49:30.961]  
[16:49:30.961]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:49:30.961]    <block atomic="false" info="">
[16:49:30.961]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:49:30.961]        // -> [isSWJ <= 0x00000001]
[16:49:30.961]      __var hasDormant = __protocol & 0x00020000;
[16:49:30.961]        // -> [hasDormant <= 0x00000000]
[16:49:30.961]      __var protType   = __protocol & 0x0000FFFF;
[16:49:30.961]        // -> [protType <= 0x00000002]
[16:49:30.961]    </block>
[16:49:30.961]    <control if="protType == 1" while="" timeout="0" info="">
[16:49:30.962]      // if-block "protType == 1"
[16:49:30.962]        // =>  FALSE
[16:49:30.962]      // skip if-block "protType == 1"
[16:49:30.962]    </control>
[16:49:30.962]    <control if="protType == 2" while="" timeout="0" info="">
[16:49:30.962]      // if-block "protType == 2"
[16:49:30.962]        // =>  TRUE
[16:49:30.962]      <control if="isSWJ" while="" timeout="0" info="">
[16:49:30.962]        // if-block "isSWJ"
[16:49:30.962]          // =>  TRUE
[16:49:30.963]        <control if="hasDormant" while="" timeout="0" info="">
[16:49:30.963]          // if-block "hasDormant"
[16:49:30.963]            // =>  FALSE
[16:49:30.963]          // skip if-block "hasDormant"
[16:49:30.963]        </control>
[16:49:30.963]        <control if="!hasDormant" while="" timeout="0" info="">
[16:49:30.963]          // if-block "!hasDormant"
[16:49:30.963]            // =>  TRUE
[16:49:30.964]          <block atomic="false" info="">
[16:49:30.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:49:30.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:30.964]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:49:30.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:49:30.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:49:30.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:30.965]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:49:30.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:49:30.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:49:30.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:49:30.966]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:49:30.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:49:30.966]          </block>
[16:49:30.966]          // end if-block "!hasDormant"
[16:49:30.967]        </control>
[16:49:30.967]        // end if-block "isSWJ"
[16:49:30.967]      </control>
[16:49:30.967]      <control if="!isSWJ" while="" timeout="0" info="">
[16:49:30.967]        // if-block "!isSWJ"
[16:49:30.967]          // =>  FALSE
[16:49:30.968]        // skip if-block "!isSWJ"
[16:49:30.968]      </control>
[16:49:30.968]      <block atomic="false" info="">
[16:49:30.968]        ReadDP(0x0);
[16:49:30.968]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:49:30.968]      </block>
[16:49:30.968]      // end if-block "protType == 2"
[16:49:30.968]    </control>
[16:49:30.969]  </sequence>
[16:49:30.969]  
[16:49:30.970]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:49:30.970]  
[16:49:30.970]  <debugvars>
[16:49:30.970]    // Pre-defined
[16:49:30.970]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:30.970]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:30.971]    __dp=0x00000000
[16:49:30.971]    __ap=0x00000000
[16:49:30.971]    __traceout=0x00000000      (Trace Disabled)
[16:49:30.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:30.971]    __FlashAddr=0x00000000
[16:49:30.971]    __FlashLen=0x00000000
[16:49:30.971]    __FlashArg=0x00000000
[16:49:30.971]    __FlashOp=0x00000000
[16:49:30.971]    __Result=0x00000000
[16:49:30.972]  </debugvars>
[16:49:30.972]  
[16:49:30.972]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:49:30.972]    <block atomic="false" info="">
[16:49:30.972]      __var SW_DP_ABORT       = 0x0;
[16:49:30.972]        // -> [SW_DP_ABORT <= 0x00000000]
[16:49:30.972]      __var DP_CTRL_STAT      = 0x4;
[16:49:30.972]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:49:30.972]      __var DP_SELECT         = 0x8;
[16:49:30.972]        // -> [DP_SELECT <= 0x00000008]
[16:49:30.972]      __var powered_down      = 0;
[16:49:30.973]        // -> [powered_down <= 0x00000000]
[16:49:30.973]      WriteDP(DP_SELECT, 0x00000000);
[16:49:30.973]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:49:30.973]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:49:30.974]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:49:30.974]        // -> [powered_down <= 0x00000001]
[16:49:30.974]    </block>
[16:49:30.974]    <control if="powered_down" while="" timeout="0" info="">
[16:49:30.974]      // if-block "powered_down"
[16:49:30.974]        // =>  TRUE
[16:49:30.974]      <block atomic="false" info="">
[16:49:30.974]        Message(0, "Debug/System power-up request sent");
[16:49:30.977]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:49:30.978]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:49:30.978]      </block>
[16:49:30.978]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:49:30.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:49:30.979]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:49:30.979]        // while-condition  =>  FALSE
[16:49:30.979]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:49:30.979]      </control>
[16:49:30.979]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:49:30.979]        // if-block "(__protocol & 0xFFFF) == 1"
[16:49:30.979]          // =>  FALSE
[16:49:30.979]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:49:30.980]      </control>
[16:49:30.980]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:49:30.980]        // if-block "(__protocol & 0xFFFF) == 2"
[16:49:30.980]          // =>  TRUE
[16:49:30.980]        <block atomic="false" info="">
[16:49:30.980]          Message(0, "executing SWD power up");
[16:49:30.982]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:49:30.982]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:49:30.983]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:49:30.983]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:49:30.983]        </block>
[16:49:30.983]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:49:30.984]      </control>
[16:49:30.984]      // end if-block "powered_down"
[16:49:30.984]    </control>
[16:49:30.984]    <block atomic="false" info="">
[16:49:30.984]      __var DEBUG_PORT_VAL    = 0;
[16:49:30.984]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:49:30.984]      __var ACCESS_POINT_VAL  = 0;
[16:49:30.984]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:49:30.984]      __ap = 1; 
[16:49:30.984]        // -> [__ap <= 0x00000001]
[16:49:30.984]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:49:30.985]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:49:30.985]      __ap = 4;
[16:49:30.986]        // -> [__ap <= 0x00000004]
[16:49:30.986]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:30.986]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:49:30.986]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:49:30.986]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:30.989]    </block>
[16:49:30.989]    <block atomic="false" info="">
[16:49:30.989]      __var nReset = 0x80;
[16:49:30.990]        // -> [nReset <= 0x00000080]
[16:49:30.990]      __var canReadPins = 0;
[16:49:30.990]        // -> [canReadPins <= 0x00000000]
[16:49:30.990]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:49:30.990]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:49:30.990]        // -> [canReadPins <= 0x00000001]
[16:49:30.990]    </block>
[16:49:30.990]    <control if="" while="1" timeout="200" info="">
[16:49:30.990]      // while "1"  (timeout="200")
[16:49:30.990]      // while-condition  =>  TRUE
[16:49:30.990]      // while "1"  (timeout="200")
[16:49:30.991]      // while-condition  =>  TRUE
[16:49:30.991]      // while "1"  (timeout="200")
[16:49:30.991]      // while  =>  TIMEOUT
[16:49:30.991]      // end while "1"
[16:49:30.991]    </control>
[16:49:30.991]    <control if="canReadPins" while="" timeout="0" info="">
[16:49:30.992]      // if-block "canReadPins"
[16:49:30.992]        // =>  TRUE
[16:49:30.992]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:49:30.992]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:49:30.992]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:49:30.992]        // while-condition  =>  FALSE
[16:49:30.993]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:49:30.993]      </control>
[16:49:30.993]      // end if-block "canReadPins"
[16:49:30.993]    </control>
[16:49:30.993]    <control if="!canReadPins" while="" timeout="0" info="">
[16:49:30.993]      // if-block "!canReadPins"
[16:49:30.994]        // =>  FALSE
[16:49:30.994]      // skip if-block "!canReadPins"
[16:49:30.994]    </control>
[16:49:30.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:49:30.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:30.994]        // =>  TRUE
[16:49:30.994]      <block atomic="false" info="">
[16:49:30.994]        WriteAP(0x00, 0x190008);
[16:49:30.995]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:30.995]        WriteAP(0xF0, 0x01);
[16:49:30.996]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:49:30.996]      </block>
[16:49:30.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:49:30.996]    </control>
[16:49:30.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:49:30.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:30.996]        // =>  FALSE
[16:49:30.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:49:30.996]    </control>
[16:49:30.997]    <block atomic="false" info="">
[16:49:30.997]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:49:30.998]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:49:30.998]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:49:30.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:49:31.000]      __ap = 0; //lets make sure we reset the access point selection
[16:49:31.000]        // -> [__ap <= 0x00000000]
[16:49:31.000]    </block>
[16:49:31.000]  </sequence>
[16:49:31.000]  
[16:49:31.006]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:49:31.006]  
[16:49:31.006]  <debugvars>
[16:49:31.006]    // Pre-defined
[16:49:31.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:49:31.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:49:31.006]    __dp=0x00000000
[16:49:31.007]    __ap=0x00000000
[16:49:31.007]    __traceout=0x00000000      (Trace Disabled)
[16:49:31.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:49:31.007]    __FlashAddr=0x00000000
[16:49:31.007]    __FlashLen=0x00000000
[16:49:31.007]    __FlashArg=0x00000000
[16:49:31.007]    __FlashOp=0x00000000
[16:49:31.007]    __Result=0x00000000
[16:49:31.007]  </debugvars>
[16:49:31.007]  
[16:49:31.007]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:49:31.007]    <block atomic="false" info="">
[16:49:31.009]      __var deviceID = 0;
[16:49:31.009]        // -> [deviceID <= 0x00000000]
[16:49:31.009]      __var version = 0;
[16:49:31.009]        // -> [version <= 0x00000000]
[16:49:31.009]      __var partNum = 0;
[16:49:31.009]        // -> [partNum <= 0x00000000]
[16:49:31.009]      __var manuf = 0;
[16:49:31.009]        // -> [manuf <= 0x00000000]
[16:49:31.009]      __var isMSPM0G1X0X_G3X0X = 0;
[16:49:31.009]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:49:31.009]      __var isProduction = 0;
[16:49:31.009]        // -> [isProduction <= 0x00000000]
[16:49:31.010]      __var continueId = 0;
[16:49:31.010]        // -> [continueId <= 0x00000000]
[16:49:31.010]      deviceID =   Read32(0x41C40004);
[16:49:31.011]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:49:31.011]        // -> [deviceID <= 0x2BB8802F]
[16:49:31.011]      version = deviceID >> 28;
[16:49:31.011]        // -> [version <= 0x00000002]
[16:49:31.012]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:49:31.012]        // -> [partNum <= 0x0000BB88]
[16:49:31.012]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:49:31.012]        // -> [manuf <= 0x00000017]
[16:49:31.012]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:49:31.012]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:49:31.012]      isProduction = (version > 0);
[16:49:31.012]        // -> [isProduction <= 0x00000001]
[16:49:31.012]    </block>
[16:49:31.013]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:49:31.013]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:49:31.013]        // =>  FALSE
[16:49:31.014]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:49:31.014]    </control>
[16:49:31.014]    <control if="continueId == 4" while="" timeout="0" info="">
[16:49:31.014]      // if-block "continueId == 4"
[16:49:31.014]        // =>  FALSE
[16:49:31.014]      // skip if-block "continueId == 4"
[16:49:31.014]    </control>
[16:49:31.014]    <control if="!isProduction" while="" timeout="0" info="">
[16:49:31.015]      // if-block "!isProduction"
[16:49:31.015]        // =>  FALSE
[16:49:31.015]      // skip if-block "!isProduction"
[16:49:31.015]    </control>
[16:49:31.015]  </sequence>
[16:49:31.015]  
[17:37:59.683]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:37:59.683]  
[17:37:59.683]  <debugvars>
[17:37:59.683]    // Pre-defined
[17:37:59.684]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:37:59.684]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:37:59.684]    __dp=0x00000000
[17:37:59.684]    __ap=0x00000000
[17:37:59.684]    __traceout=0x00000000      (Trace Disabled)
[17:37:59.684]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:37:59.684]    __FlashAddr=0x00000000
[17:37:59.684]    __FlashLen=0x00000000
[17:37:59.684]    __FlashArg=0x00000000
[17:37:59.684]    __FlashOp=0x00000000
[17:37:59.685]    __Result=0x00000000
[17:37:59.685]  </debugvars>
[17:37:59.685]  
[17:37:59.685]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:37:59.685]    <block atomic="false" info="">
[17:37:59.685]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:37:59.685]        // -> [isSWJ <= 0x00000001]
[17:37:59.685]      __var hasDormant = __protocol & 0x00020000;
[17:37:59.685]        // -> [hasDormant <= 0x00000000]
[17:37:59.685]      __var protType   = __protocol & 0x0000FFFF;
[17:37:59.685]        // -> [protType <= 0x00000002]
[17:37:59.685]    </block>
[17:37:59.686]    <control if="protType == 1" while="" timeout="0" info="">
[17:37:59.686]      // if-block "protType == 1"
[17:37:59.686]        // =>  FALSE
[17:37:59.686]      // skip if-block "protType == 1"
[17:37:59.686]    </control>
[17:37:59.686]    <control if="protType == 2" while="" timeout="0" info="">
[17:37:59.686]      // if-block "protType == 2"
[17:37:59.686]        // =>  TRUE
[17:37:59.686]      <control if="isSWJ" while="" timeout="0" info="">
[17:37:59.686]        // if-block "isSWJ"
[17:37:59.688]          // =>  TRUE
[17:37:59.688]        <control if="hasDormant" while="" timeout="0" info="">
[17:37:59.688]          // if-block "hasDormant"
[17:37:59.688]            // =>  FALSE
[17:37:59.688]          // skip if-block "hasDormant"
[17:37:59.688]        </control>
[17:37:59.689]        <control if="!hasDormant" while="" timeout="0" info="">
[17:37:59.689]          // if-block "!hasDormant"
[17:37:59.689]            // =>  TRUE
[17:37:59.689]          <block atomic="false" info="">
[17:37:59.689]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:37:59.690]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:37:59.690]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:37:59.690]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:37:59.690]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:37:59.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:37:59.691]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:37:59.691]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:37:59.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:37:59.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:37:59.692]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:37:59.692]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:37:59.692]          </block>
[17:37:59.692]          // end if-block "!hasDormant"
[17:37:59.692]        </control>
[17:37:59.692]        // end if-block "isSWJ"
[17:37:59.693]      </control>
[17:37:59.693]      <control if="!isSWJ" while="" timeout="0" info="">
[17:37:59.693]        // if-block "!isSWJ"
[17:37:59.693]          // =>  FALSE
[17:37:59.693]        // skip if-block "!isSWJ"
[17:37:59.693]      </control>
[17:37:59.693]      <block atomic="false" info="">
[17:37:59.694]        ReadDP(0x0);
[17:37:59.694]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:37:59.694]      </block>
[17:37:59.694]      // end if-block "protType == 2"
[17:37:59.694]    </control>
[17:37:59.695]  </sequence>
[17:37:59.695]  
[17:37:59.695]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:37:59.695]  
[17:37:59.695]  <debugvars>
[17:37:59.695]    // Pre-defined
[17:37:59.696]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:37:59.696]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:37:59.696]    __dp=0x00000000
[17:37:59.696]    __ap=0x00000000
[17:37:59.696]    __traceout=0x00000000      (Trace Disabled)
[17:37:59.696]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:37:59.696]    __FlashAddr=0x00000000
[17:37:59.696]    __FlashLen=0x00000000
[17:37:59.696]    __FlashArg=0x00000000
[17:37:59.696]    __FlashOp=0x00000000
[17:37:59.696]    __Result=0x00000000
[17:37:59.698]  </debugvars>
[17:37:59.698]  
[17:37:59.698]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:37:59.698]    <block atomic="false" info="">
[17:37:59.698]      __var SW_DP_ABORT       = 0x0;
[17:37:59.698]        // -> [SW_DP_ABORT <= 0x00000000]
[17:37:59.698]      __var DP_CTRL_STAT      = 0x4;
[17:37:59.698]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:37:59.698]      __var DP_SELECT         = 0x8;
[17:37:59.698]        // -> [DP_SELECT <= 0x00000008]
[17:37:59.698]      __var powered_down      = 0;
[17:37:59.698]        // -> [powered_down <= 0x00000000]
[17:37:59.698]      WriteDP(DP_SELECT, 0x00000000);
[17:37:59.699]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:37:59.699]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:37:59.700]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:37:59.700]        // -> [powered_down <= 0x00000001]
[17:37:59.700]    </block>
[17:37:59.700]    <control if="powered_down" while="" timeout="0" info="">
[17:37:59.700]      // if-block "powered_down"
[17:37:59.700]        // =>  TRUE
[17:37:59.700]      <block atomic="false" info="">
[17:37:59.700]        Message(0, "Debug/System power-up request sent");
[17:37:59.702]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:37:59.703]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:37:59.703]      </block>
[17:37:59.703]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:37:59.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:37:59.703]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:37:59.703]        // while-condition  =>  FALSE
[17:37:59.705]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:37:59.705]      </control>
[17:37:59.705]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:37:59.705]        // if-block "(__protocol & 0xFFFF) == 1"
[17:37:59.705]          // =>  FALSE
[17:37:59.705]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:37:59.705]      </control>
[17:37:59.705]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:37:59.705]        // if-block "(__protocol & 0xFFFF) == 2"
[17:37:59.705]          // =>  TRUE
[17:37:59.705]        <block atomic="false" info="">
[17:37:59.706]          Message(0, "executing SWD power up");
[17:37:59.707]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:37:59.708]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:37:59.708]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:37:59.708]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:37:59.709]        </block>
[17:37:59.709]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:37:59.709]      </control>
[17:37:59.709]      // end if-block "powered_down"
[17:37:59.709]    </control>
[17:37:59.709]    <block atomic="false" info="">
[17:37:59.709]      __var DEBUG_PORT_VAL    = 0;
[17:37:59.709]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:37:59.709]      __var ACCESS_POINT_VAL  = 0;
[17:37:59.709]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:37:59.710]      __ap = 1; 
[17:37:59.710]        // -> [__ap <= 0x00000001]
[17:37:59.710]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:37:59.711]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:37:59.712]      __ap = 4;
[17:37:59.712]        // -> [__ap <= 0x00000004]
[17:37:59.712]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:37:59.713]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:37:59.713]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:37:59.713]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:37:59.715]    </block>
[17:37:59.715]    <block atomic="false" info="">
[17:37:59.715]      __var nReset = 0x80;
[17:37:59.715]        // -> [nReset <= 0x00000080]
[17:37:59.715]      __var canReadPins = 0;
[17:37:59.715]        // -> [canReadPins <= 0x00000000]
[17:37:59.716]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:37:59.716]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:37:59.716]        // -> [canReadPins <= 0x00000001]
[17:37:59.716]    </block>
[17:37:59.716]    <control if="" while="1" timeout="200" info="">
[17:37:59.716]      // while "1"  (timeout="200")
[17:37:59.717]      // while-condition  =>  TRUE
[17:37:59.717]      // while "1"  (timeout="200")
[17:37:59.717]      // while-condition  =>  TRUE
[17:37:59.717]      // while "1"  (timeout="200")
[17:37:59.717]      // while-condition  =>  TRUE
[17:37:59.717]      // while "1"  (timeout="200")
[17:37:59.717]      // while-condition  =>  TRUE
[17:37:59.717]      // while "1"  (timeout="200")
[17:37:59.717]      // while-condition  =>  TRUE
[17:37:59.717]      // while "1"  (timeout="200")
[17:37:59.718]      // while-condition  =>  TRUE
[17:37:59.718]      // while "1"  (timeout="200")
[17:37:59.718]      // while-condition  =>  TRUE
[17:37:59.718]      // while "1"  (timeout="200")
[17:37:59.718]      // while-condition  =>  TRUE
[17:37:59.718]      // while "1"  (timeout="200")
[17:37:59.718]      // while-condition  =>  TRUE
[17:37:59.718]      // while "1"  (timeout="200")
[17:37:59.719]      // while-condition  =>  TRUE
[17:37:59.719]      // while "1"  (timeout="200")
[17:37:59.719]      // while-condition  =>  TRUE
[17:37:59.719]      // while "1"  (timeout="200")
[17:37:59.719]      // while-condition  =>  TRUE
[17:37:59.719]      // while "1"  (timeout="200")
[17:37:59.719]      // while-condition  =>  TRUE
[17:37:59.719]      // while "1"  (timeout="200")
[17:37:59.719]      // while-condition  =>  TRUE
[17:37:59.720]      // while "1"  (timeout="200")
[17:37:59.720]      // while-condition  =>  TRUE
[17:37:59.720]      // while "1"  (timeout="200")
[17:37:59.720]      // while-condition  =>  TRUE
[17:37:59.720]      // while "1"  (timeout="200")
[17:37:59.720]      // while-condition  =>  TRUE
[17:37:59.720]      // while "1"  (timeout="200")
[17:37:59.720]      // while-condition  =>  TRUE
[17:37:59.720]      // while "1"  (timeout="200")
[17:37:59.720]      // while-condition  =>  TRUE
[17:37:59.721]      // while "1"  (timeout="200")
[17:37:59.721]      // while-condition  =>  TRUE
[17:37:59.721]      // while "1"  (timeout="200")
[17:37:59.721]      // while-condition  =>  TRUE
[17:37:59.721]      // while "1"  (timeout="200")
[17:37:59.721]      // while-condition  =>  TRUE
[17:37:59.721]      // while "1"  (timeout="200")
[17:37:59.721]      // while-condition  =>  TRUE
[17:37:59.722]      // while "1"  (timeout="200")
[17:37:59.722]      // while-condition  =>  TRUE
[17:37:59.722]      // while "1"  (timeout="200")
[17:37:59.722]      // while-condition  =>  TRUE
[17:37:59.722]      // while "1"  (timeout="200")
[17:37:59.722]      // while-condition  =>  TRUE
[17:37:59.722]      // while "1"  (timeout="200")
[17:37:59.722]      // while-condition  =>  TRUE
[17:37:59.722]      // while "1"  (timeout="200")
[17:37:59.723]      // while-condition  =>  TRUE
[17:37:59.723]      // while "1"  (timeout="200")
[17:37:59.723]      // while-condition  =>  TRUE
[17:37:59.723]      // while "1"  (timeout="200")
[17:37:59.724]      // while-condition  =>  TRUE
[17:37:59.724]      // while "1"  (timeout="200")
[17:37:59.724]      // while-condition  =>  TRUE
[17:37:59.724]      // while "1"  (timeout="200")
[17:37:59.724]      // while-condition  =>  TRUE
[17:37:59.724]      // while "1"  (timeout="200")
[17:37:59.724]      // while-condition  =>  TRUE
[17:37:59.724]      // while "1"  (timeout="200")
[17:37:59.724]      // while-condition  =>  TRUE
[17:37:59.725]      // while "1"  (timeout="200")
[17:37:59.725]      // while  =>  TIMEOUT
[17:37:59.725]      // end while "1"
[17:37:59.725]    </control>
[17:37:59.725]    <control if="canReadPins" while="" timeout="0" info="">
[17:37:59.725]      // if-block "canReadPins"
[17:37:59.725]        // =>  TRUE
[17:37:59.725]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:37:59.726]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:37:59.726]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:37:59.726]        // while-condition  =>  FALSE
[17:37:59.726]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:37:59.726]      </control>
[17:37:59.726]      // end if-block "canReadPins"
[17:37:59.727]    </control>
[17:37:59.727]    <control if="!canReadPins" while="" timeout="0" info="">
[17:37:59.727]      // if-block "!canReadPins"
[17:37:59.727]        // =>  FALSE
[17:37:59.727]      // skip if-block "!canReadPins"
[17:37:59.727]    </control>
[17:37:59.727]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:37:59.727]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:37:59.727]        // =>  TRUE
[17:37:59.727]      <block atomic="false" info="">
[17:37:59.728]        WriteAP(0x00, 0x190008);
[17:37:59.728]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:37:59.728]        WriteAP(0xF0, 0x01);
[17:37:59.729]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:37:59.730]      </block>
[17:37:59.730]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:37:59.730]    </control>
[17:37:59.730]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:37:59.730]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:37:59.730]        // =>  FALSE
[17:37:59.730]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:37:59.730]    </control>
[17:37:59.730]    <block atomic="false" info="">
[17:37:59.730]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:37:59.732]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:37:59.732]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:37:59.732]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:37:59.734]      __ap = 0; //lets make sure we reset the access point selection
[17:37:59.734]        // -> [__ap <= 0x00000000]
[17:37:59.734]    </block>
[17:37:59.734]  </sequence>
[17:37:59.734]  
[17:37:59.740]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:37:59.740]  
[17:37:59.740]  <debugvars>
[17:37:59.740]    // Pre-defined
[17:37:59.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:37:59.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:37:59.741]    __dp=0x00000000
[17:37:59.741]    __ap=0x00000000
[17:37:59.742]    __traceout=0x00000000      (Trace Disabled)
[17:37:59.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:37:59.742]    __FlashAddr=0x00000000
[17:37:59.742]    __FlashLen=0x00000000
[17:37:59.742]    __FlashArg=0x00000000
[17:37:59.742]    __FlashOp=0x00000000
[17:37:59.742]    __Result=0x00000000
[17:37:59.742]  </debugvars>
[17:37:59.743]  
[17:37:59.743]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:37:59.743]    <block atomic="false" info="">
[17:37:59.743]      __var deviceID = 0;
[17:37:59.743]        // -> [deviceID <= 0x00000000]
[17:37:59.743]      __var version = 0;
[17:37:59.743]        // -> [version <= 0x00000000]
[17:37:59.743]      __var partNum = 0;
[17:37:59.743]        // -> [partNum <= 0x00000000]
[17:37:59.744]      __var manuf = 0;
[17:37:59.744]        // -> [manuf <= 0x00000000]
[17:37:59.744]      __var isMSPM0G1X0X_G3X0X = 0;
[17:37:59.744]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:37:59.744]      __var isProduction = 0;
[17:37:59.744]        // -> [isProduction <= 0x00000000]
[17:37:59.744]      __var continueId = 0;
[17:37:59.744]        // -> [continueId <= 0x00000000]
[17:37:59.744]      deviceID =   Read32(0x41C40004);
[17:37:59.746]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:37:59.746]        // -> [deviceID <= 0x2BB8802F]
[17:37:59.746]      version = deviceID >> 28;
[17:37:59.746]        // -> [version <= 0x00000002]
[17:37:59.746]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:37:59.746]        // -> [partNum <= 0x0000BB88]
[17:37:59.747]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:37:59.747]        // -> [manuf <= 0x00000017]
[17:37:59.747]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:37:59.747]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:37:59.747]      isProduction = (version > 0);
[17:37:59.747]        // -> [isProduction <= 0x00000001]
[17:37:59.747]    </block>
[17:37:59.748]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:37:59.748]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:37:59.748]        // =>  FALSE
[17:37:59.748]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:37:59.748]    </control>
[17:37:59.748]    <control if="continueId == 4" while="" timeout="0" info="">
[17:37:59.748]      // if-block "continueId == 4"
[17:37:59.748]        // =>  FALSE
[17:37:59.748]      // skip if-block "continueId == 4"
[17:37:59.749]    </control>
[17:37:59.749]    <control if="!isProduction" while="" timeout="0" info="">
[17:37:59.749]      // if-block "!isProduction"
[17:37:59.749]        // =>  FALSE
[17:37:59.749]      // skip if-block "!isProduction"
[17:37:59.749]    </control>
[17:37:59.749]  </sequence>
[17:37:59.749]  
[17:38:10.996]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:38:10.996]  
[17:38:11.004]  <debugvars>
[17:38:11.004]    // Pre-defined
[17:38:11.004]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:38:11.004]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:38:11.005]    __dp=0x00000000
[17:38:11.005]    __ap=0x00000000
[17:38:11.005]    __traceout=0x00000000      (Trace Disabled)
[17:38:11.005]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:38:11.005]    __FlashAddr=0x00000000
[17:38:11.005]    __FlashLen=0x00000000
[17:38:11.005]    __FlashArg=0x00000000
[17:38:11.005]    __FlashOp=0x00000000
[17:38:11.005]    __Result=0x00000000
[17:38:11.005]  </debugvars>
[17:38:11.006]  
[17:38:11.006]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:38:11.006]    <block atomic="false" info="">
[17:38:11.006]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:38:11.006]        // -> [isSWJ <= 0x00000001]
[17:38:11.006]      __var hasDormant = __protocol & 0x00020000;
[17:38:11.006]        // -> [hasDormant <= 0x00000000]
[17:38:11.006]      __var protType   = __protocol & 0x0000FFFF;
[17:38:11.006]        // -> [protType <= 0x00000002]
[17:38:11.006]    </block>
[17:38:11.006]    <control if="protType == 1" while="" timeout="0" info="">
[17:38:11.006]      // if-block "protType == 1"
[17:38:11.006]        // =>  FALSE
[17:38:11.006]      // skip if-block "protType == 1"
[17:38:11.007]    </control>
[17:38:11.007]    <control if="protType == 2" while="" timeout="0" info="">
[17:38:11.007]      // if-block "protType == 2"
[17:38:11.007]        // =>  TRUE
[17:38:11.007]      <control if="isSWJ" while="" timeout="0" info="">
[17:38:11.008]        // if-block "isSWJ"
[17:38:11.008]          // =>  TRUE
[17:38:11.008]        <control if="hasDormant" while="" timeout="0" info="">
[17:38:11.008]          // if-block "hasDormant"
[17:38:11.008]            // =>  FALSE
[17:38:11.008]          // skip if-block "hasDormant"
[17:38:11.009]        </control>
[17:38:11.009]        <control if="!hasDormant" while="" timeout="0" info="">
[17:38:11.009]          // if-block "!hasDormant"
[17:38:11.009]            // =>  TRUE
[17:38:11.009]          <block atomic="false" info="">
[17:38:11.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:38:11.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:38:11.010]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:38:11.010]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:38:11.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:38:11.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:38:11.011]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:38:11.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:38:11.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:38:11.012]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:38:11.012]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:38:11.012]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:38:11.013]          </block>
[17:38:11.013]          // end if-block "!hasDormant"
[17:38:11.013]        </control>
[17:38:11.013]        // end if-block "isSWJ"
[17:38:11.013]      </control>
[17:38:11.013]      <control if="!isSWJ" while="" timeout="0" info="">
[17:38:11.013]        // if-block "!isSWJ"
[17:38:11.013]          // =>  FALSE
[17:38:11.014]        // skip if-block "!isSWJ"
[17:38:11.014]      </control>
[17:38:11.014]      <block atomic="false" info="">
[17:38:11.014]        ReadDP(0x0);
[17:38:11.014]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:38:11.014]      </block>
[17:38:11.014]      // end if-block "protType == 2"
[17:38:11.015]    </control>
[17:38:11.015]  </sequence>
[17:38:11.015]  
[17:38:11.015]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:38:11.015]  
[17:38:11.015]  <debugvars>
[17:38:11.015]    // Pre-defined
[17:38:11.015]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:38:11.016]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:38:11.016]    __dp=0x00000000
[17:38:11.016]    __ap=0x00000000
[17:38:11.016]    __traceout=0x00000000      (Trace Disabled)
[17:38:11.016]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:38:11.016]    __FlashAddr=0x00000000
[17:38:11.016]    __FlashLen=0x00000000
[17:38:11.016]    __FlashArg=0x00000000
[17:38:11.016]    __FlashOp=0x00000000
[17:38:11.016]    __Result=0x00000000
[17:38:11.016]  </debugvars>
[17:38:11.017]  
[17:38:11.017]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:38:11.017]    <block atomic="false" info="">
[17:38:11.017]      __var SW_DP_ABORT       = 0x0;
[17:38:11.017]        // -> [SW_DP_ABORT <= 0x00000000]
[17:38:11.017]      __var DP_CTRL_STAT      = 0x4;
[17:38:11.017]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:38:11.017]      __var DP_SELECT         = 0x8;
[17:38:11.017]        // -> [DP_SELECT <= 0x00000008]
[17:38:11.017]      __var powered_down      = 0;
[17:38:11.017]        // -> [powered_down <= 0x00000000]
[17:38:11.017]      WriteDP(DP_SELECT, 0x00000000);
[17:38:11.018]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:38:11.018]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:38:11.019]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:38:11.019]        // -> [powered_down <= 0x00000001]
[17:38:11.019]    </block>
[17:38:11.019]    <control if="powered_down" while="" timeout="0" info="">
[17:38:11.019]      // if-block "powered_down"
[17:38:11.019]        // =>  TRUE
[17:38:11.020]      <block atomic="false" info="">
[17:38:11.020]        Message(0, "Debug/System power-up request sent");
[17:38:11.021]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:38:11.022]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:38:11.022]      </block>
[17:38:11.022]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:38:11.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:38:11.022]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:38:11.022]        // while-condition  =>  FALSE
[17:38:11.023]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:38:11.023]      </control>
[17:38:11.023]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:38:11.023]        // if-block "(__protocol & 0xFFFF) == 1"
[17:38:11.024]          // =>  FALSE
[17:38:11.024]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:38:11.024]      </control>
[17:38:11.024]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:38:11.024]        // if-block "(__protocol & 0xFFFF) == 2"
[17:38:11.024]          // =>  TRUE
[17:38:11.024]        <block atomic="false" info="">
[17:38:11.024]          Message(0, "executing SWD power up");
[17:38:11.026]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:38:11.026]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:38:11.026]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:38:11.027]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:38:11.027]        </block>
[17:38:11.027]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:38:11.027]      </control>
[17:38:11.027]      // end if-block "powered_down"
[17:38:11.028]    </control>
[17:38:11.028]    <block atomic="false" info="">
[17:38:11.028]      __var DEBUG_PORT_VAL    = 0;
[17:38:11.028]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:38:11.028]      __var ACCESS_POINT_VAL  = 0;
[17:38:11.028]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:38:11.029]      __ap = 1; 
[17:38:11.030]        // -> [__ap <= 0x00000001]
[17:38:11.030]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:38:11.031]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:38:11.031]      __ap = 4;
[17:38:11.031]        // -> [__ap <= 0x00000004]
[17:38:11.031]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:38:11.032]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:38:11.032]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:38:11.032]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:38:11.033]    </block>
[17:38:11.033]    <block atomic="false" info="">
[17:38:11.033]      __var nReset = 0x80;
[17:38:11.033]        // -> [nReset <= 0x00000080]
[17:38:11.033]      __var canReadPins = 0;
[17:38:11.033]        // -> [canReadPins <= 0x00000000]
[17:38:11.033]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:38:11.034]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:38:11.034]        // -> [canReadPins <= 0x00000001]
[17:38:11.034]    </block>
[17:38:11.034]    <control if="" while="1" timeout="200" info="">
[17:38:11.034]      // while "1"  (timeout="200")
[17:38:11.034]      // while-condition  =>  TRUE
[17:38:11.034]      // while "1"  (timeout="200")
[17:38:11.034]      // while-condition  =>  TRUE
[17:38:11.035]      // while "1"  (timeout="200")
[17:38:11.035]      // while-condition  =>  TRUE
[17:38:11.035]      // while "1"  (timeout="200")
[17:38:11.035]      // while-condition  =>  TRUE
[17:38:11.035]      // while "1"  (timeout="200")
[17:38:11.035]      // while-condition  =>  TRUE
[17:38:11.035]      // while "1"  (timeout="200")
[17:38:11.035]      // while-condition  =>  TRUE
[17:38:11.035]      // while "1"  (timeout="200")
[17:38:11.035]      // while-condition  =>  TRUE
[17:38:11.036]      // while "1"  (timeout="200")
[17:38:11.036]      // while-condition  =>  TRUE
[17:38:11.036]      // while "1"  (timeout="200")
[17:38:11.036]      // while-condition  =>  TRUE
[17:38:11.036]      // while "1"  (timeout="200")
[17:38:11.036]      // while-condition  =>  TRUE
[17:38:11.036]      // while "1"  (timeout="200")
[17:38:11.036]      // while-condition  =>  TRUE
[17:38:11.037]      // while "1"  (timeout="200")
[17:38:11.037]      // while  =>  TIMEOUT
[17:38:11.037]      // end while "1"
[17:38:11.037]    </control>
[17:38:11.037]    <control if="canReadPins" while="" timeout="0" info="">
[17:38:11.037]      // if-block "canReadPins"
[17:38:11.037]        // =>  TRUE
[17:38:11.037]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:38:11.038]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:38:11.038]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:38:11.038]        // while-condition  =>  FALSE
[17:38:11.038]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:38:11.038]      </control>
[17:38:11.038]      // end if-block "canReadPins"
[17:38:11.038]    </control>
[17:38:11.039]    <control if="!canReadPins" while="" timeout="0" info="">
[17:38:11.039]      // if-block "!canReadPins"
[17:38:11.039]        // =>  FALSE
[17:38:11.039]      // skip if-block "!canReadPins"
[17:38:11.039]    </control>
[17:38:11.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:38:11.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:38:11.039]        // =>  TRUE
[17:38:11.039]      <block atomic="false" info="">
[17:38:11.039]        WriteAP(0x00, 0x190008);
[17:38:11.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:38:11.041]        WriteAP(0xF0, 0x01);
[17:38:11.042]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:38:11.042]      </block>
[17:38:11.043]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:38:11.043]    </control>
[17:38:11.043]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:38:11.043]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:38:11.043]        // =>  FALSE
[17:38:11.043]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:38:11.043]    </control>
[17:38:11.044]    <block atomic="false" info="">
[17:38:11.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:38:11.045]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:38:11.045]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:38:11.045]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:38:11.046]      __ap = 0; //lets make sure we reset the access point selection
[17:38:11.047]        // -> [__ap <= 0x00000000]
[17:38:11.047]    </block>
[17:38:11.047]  </sequence>
[17:38:11.047]  
[17:38:11.052]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:38:11.052]  
[17:38:11.052]  <debugvars>
[17:38:11.052]    // Pre-defined
[17:38:11.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:38:11.053]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:38:11.053]    __dp=0x00000000
[17:38:11.053]    __ap=0x00000000
[17:38:11.053]    __traceout=0x00000000      (Trace Disabled)
[17:38:11.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:38:11.053]    __FlashAddr=0x00000000
[17:38:11.053]    __FlashLen=0x00000000
[17:38:11.053]    __FlashArg=0x00000000
[17:38:11.053]    __FlashOp=0x00000000
[17:38:11.053]    __Result=0x00000000
[17:38:11.054]  </debugvars>
[17:38:11.054]  
[17:38:11.054]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:38:11.054]    <block atomic="false" info="">
[17:38:11.054]      __var deviceID = 0;
[17:38:11.054]        // -> [deviceID <= 0x00000000]
[17:38:11.054]      __var version = 0;
[17:38:11.054]        // -> [version <= 0x00000000]
[17:38:11.054]      __var partNum = 0;
[17:38:11.054]        // -> [partNum <= 0x00000000]
[17:38:11.054]      __var manuf = 0;
[17:38:11.055]        // -> [manuf <= 0x00000000]
[17:38:11.055]      __var isMSPM0G1X0X_G3X0X = 0;
[17:38:11.055]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:38:11.055]      __var isProduction = 0;
[17:38:11.055]        // -> [isProduction <= 0x00000000]
[17:38:11.055]      __var continueId = 0;
[17:38:11.055]        // -> [continueId <= 0x00000000]
[17:38:11.055]      deviceID =   Read32(0x41C40004);
[17:38:11.058]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:38:11.058]        // -> [deviceID <= 0x2BB8802F]
[17:38:11.058]      version = deviceID >> 28;
[17:38:11.058]        // -> [version <= 0x00000002]
[17:38:11.058]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:38:11.058]        // -> [partNum <= 0x0000BB88]
[17:38:11.058]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:38:11.059]        // -> [manuf <= 0x00000017]
[17:38:11.059]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:38:11.059]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:38:11.059]      isProduction = (version > 0);
[17:38:11.059]        // -> [isProduction <= 0x00000001]
[17:38:11.059]    </block>
[17:38:11.059]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:38:11.059]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:38:11.059]        // =>  FALSE
[17:38:11.059]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:38:11.059]    </control>
[17:38:11.059]    <control if="continueId == 4" while="" timeout="0" info="">
[17:38:11.059]      // if-block "continueId == 4"
[17:38:11.060]        // =>  FALSE
[17:38:11.060]      // skip if-block "continueId == 4"
[17:38:11.060]    </control>
[17:38:11.060]    <control if="!isProduction" while="" timeout="0" info="">
[17:38:11.060]      // if-block "!isProduction"
[17:38:11.060]        // =>  FALSE
[17:38:11.060]      // skip if-block "!isProduction"
[17:38:11.060]    </control>
[17:38:11.060]  </sequence>
[17:38:11.060]  
