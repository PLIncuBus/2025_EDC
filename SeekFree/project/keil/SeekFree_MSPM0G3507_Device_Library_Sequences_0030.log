/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0030.log
 *  Created     : 15:00:27 (28/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:00:27.441]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:00:27.441]  
[15:00:27.441]  <debugvars>
[15:00:27.441]    // Pre-defined
[15:00:27.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:00:27.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:00:27.441]    __dp=0x00000000
[15:00:27.441]    __ap=0x00000000
[15:00:27.441]    __traceout=0x00000000      (Trace Disabled)
[15:00:27.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:00:27.441]    __FlashAddr=0x00000000
[15:00:27.441]    __FlashLen=0x00000000
[15:00:27.441]    __FlashArg=0x00000000
[15:00:27.441]    __FlashOp=0x00000000
[15:00:27.441]    __Result=0x00000000
[15:00:27.441]  </debugvars>
[15:00:27.441]  
[15:00:27.441]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:00:27.441]    <block atomic="false" info="">
[15:00:27.441]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:00:27.441]        // -> [isSWJ <= 0x00000001]
[15:00:27.441]      __var hasDormant = __protocol & 0x00020000;
[15:00:27.441]        // -> [hasDormant <= 0x00000000]
[15:00:27.441]      __var protType   = __protocol & 0x0000FFFF;
[15:00:27.441]        // -> [protType <= 0x00000002]
[15:00:27.441]    </block>
[15:00:27.441]    <control if="protType == 1" while="" timeout="0" info="">
[15:00:27.441]      // if-block "protType == 1"
[15:00:27.441]        // =>  FALSE
[15:00:27.441]      // skip if-block "protType == 1"
[15:00:27.441]    </control>
[15:00:27.441]    <control if="protType == 2" while="" timeout="0" info="">
[15:00:27.441]      // if-block "protType == 2"
[15:00:27.441]        // =>  TRUE
[15:00:27.441]      <control if="isSWJ" while="" timeout="0" info="">
[15:00:27.441]        // if-block "isSWJ"
[15:00:27.441]          // =>  TRUE
[15:00:27.441]        <control if="hasDormant" while="" timeout="0" info="">
[15:00:27.441]          // if-block "hasDormant"
[15:00:27.441]            // =>  FALSE
[15:00:27.441]          // skip if-block "hasDormant"
[15:00:27.441]        </control>
[15:00:27.441]        <control if="!hasDormant" while="" timeout="0" info="">
[15:00:27.441]          // if-block "!hasDormant"
[15:00:27.441]            // =>  TRUE
[15:00:27.441]          <block atomic="false" info="">
[15:00:27.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:00:27.441]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:00:27.441]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:00:27.441]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:00:27.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:00:27.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:00:27.451]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:00:27.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:00:27.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:00:27.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:00:27.451]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:00:27.451]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:00:27.451]          </block>
[15:00:27.451]          // end if-block "!hasDormant"
[15:00:27.451]        </control>
[15:00:27.451]        // end if-block "isSWJ"
[15:00:27.451]      </control>
[15:00:27.451]      <control if="!isSWJ" while="" timeout="0" info="">
[15:00:27.451]        // if-block "!isSWJ"
[15:00:27.451]          // =>  FALSE
[15:00:27.451]        // skip if-block "!isSWJ"
[15:00:27.451]      </control>
[15:00:27.451]      <block atomic="false" info="">
[15:00:27.451]        ReadDP(0x0);
[15:00:27.461]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:00:27.461]      </block>
[15:00:27.461]      // end if-block "protType == 2"
[15:00:27.461]    </control>
[15:00:27.461]  </sequence>
[15:00:27.461]  
[15:00:27.461]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:00:27.461]  
[15:00:27.461]  <debugvars>
[15:00:27.461]    // Pre-defined
[15:00:27.461]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:00:27.461]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:00:27.461]    __dp=0x00000000
[15:00:27.461]    __ap=0x00000000
[15:00:27.461]    __traceout=0x00000000      (Trace Disabled)
[15:00:27.461]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:00:27.461]    __FlashAddr=0x00000000
[15:00:27.461]    __FlashLen=0x00000000
[15:00:27.461]    __FlashArg=0x00000000
[15:00:27.461]    __FlashOp=0x00000000
[15:00:27.461]    __Result=0x00000000
[15:00:27.461]  </debugvars>
[15:00:27.461]  
[15:00:27.461]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:00:27.461]    <block atomic="false" info="">
[15:00:27.461]      __var SW_DP_ABORT       = 0x0;
[15:00:27.461]        // -> [SW_DP_ABORT <= 0x00000000]
[15:00:27.461]      __var DP_CTRL_STAT      = 0x4;
[15:00:27.461]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:00:27.461]      __var DP_SELECT         = 0x8;
[15:00:27.461]        // -> [DP_SELECT <= 0x00000008]
[15:00:27.461]      __var powered_down      = 0;
[15:00:27.461]        // -> [powered_down <= 0x00000000]
[15:00:27.461]      WriteDP(DP_SELECT, 0x00000000);
[15:00:27.461]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:00:27.461]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:00:27.461]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:00:27.461]        // -> [powered_down <= 0x00000001]
[15:00:27.461]    </block>
[15:00:27.461]    <control if="powered_down" while="" timeout="0" info="">
[15:00:27.461]      // if-block "powered_down"
[15:00:27.461]        // =>  TRUE
[15:00:27.471]      <block atomic="false" info="">
[15:00:27.471]        Message(0, "Debug/System power-up request sent");
[15:00:27.471]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:00:27.471]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:00:27.471]      </block>
[15:00:27.471]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:00:27.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:00:27.471]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:00:27.471]        // while-condition  =>  FALSE
[15:00:27.471]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:00:27.471]      </control>
[15:00:27.471]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:00:27.471]        // if-block "(__protocol & 0xFFFF) == 1"
[15:00:27.471]          // =>  FALSE
[15:00:27.471]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:00:27.471]      </control>
[15:00:27.471]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:00:27.471]        // if-block "(__protocol & 0xFFFF) == 2"
[15:00:27.471]          // =>  TRUE
[15:00:27.471]        <block atomic="false" info="">
[15:00:27.471]          Message(0, "executing SWD power up");
[15:00:27.471]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:00:27.471]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:00:27.471]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:00:27.481]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:00:27.481]        </block>
[15:00:27.481]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:00:27.481]      </control>
[15:00:27.481]      // end if-block "powered_down"
[15:00:27.481]    </control>
[15:00:27.481]    <block atomic="false" info="">
[15:00:27.481]      __var DEBUG_PORT_VAL    = 0;
[15:00:27.481]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:00:27.481]      __var ACCESS_POINT_VAL  = 0;
[15:00:27.481]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:00:27.481]      __ap = 1; 
[15:00:27.481]        // -> [__ap <= 0x00000001]
[15:00:27.481]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:00:27.481]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:00:27.481]      __ap = 4;
[15:00:27.481]        // -> [__ap <= 0x00000004]
[15:00:27.481]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:00:27.491]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:00:27.491]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:00:27.491]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:00:27.491]    </block>
[15:00:27.491]    <block atomic="false" info="">
[15:00:27.491]      __var nReset = 0x80;
[15:00:27.491]        // -> [nReset <= 0x00000080]
[15:00:27.491]      __var canReadPins = 0;
[15:00:27.491]        // -> [canReadPins <= 0x00000000]
[15:00:27.491]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:00:27.491]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:00:27.491]        // -> [canReadPins <= 0x00000001]
[15:00:27.491]    </block>
[15:00:27.491]    <control if="" while="1" timeout="200" info="">
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.491]      // while-condition  =>  TRUE
[15:00:27.491]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.501]      // while "1"  (timeout="200")
[15:00:27.501]      // while-condition  =>  TRUE
[15:00:27.511]      // while "1"  (timeout="200")
[15:00:27.511]      // while  =>  TIMEOUT
[15:00:27.511]      // end while "1"
[15:00:27.511]    </control>
[15:00:27.511]    <control if="canReadPins" while="" timeout="0" info="">
[15:00:27.511]      // if-block "canReadPins"
[15:00:27.511]        // =>  TRUE
[15:00:27.511]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:00:27.511]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:00:27.511]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:00:27.511]        // while-condition  =>  FALSE
[15:00:27.511]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:00:27.511]      </control>
[15:00:27.511]      // end if-block "canReadPins"
[15:00:27.511]    </control>
[15:00:27.511]    <control if="!canReadPins" while="" timeout="0" info="">
[15:00:27.511]      // if-block "!canReadPins"
[15:00:27.511]        // =>  FALSE
[15:00:27.511]      // skip if-block "!canReadPins"
[15:00:27.511]    </control>
[15:00:27.511]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:00:27.511]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:00:27.511]        // =>  TRUE
[15:00:27.511]      <block atomic="false" info="">
[15:00:27.511]        WriteAP(0x00, 0x190008);
[15:00:27.511]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:00:27.511]        WriteAP(0xF0, 0x01);
[15:00:27.521]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:00:27.521]      </block>
[15:00:27.521]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:00:27.521]    </control>
[15:00:27.521]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:00:27.521]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:00:27.521]        // =>  FALSE
[15:00:27.521]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:00:27.521]    </control>
[15:00:27.521]    <block atomic="false" info="">
[15:00:27.521]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:00:27.521]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:00:27.521]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:00:27.521]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:00:27.521]      __ap = 0; //lets make sure we reset the access point selection
[15:00:27.521]        // -> [__ap <= 0x00000000]
[15:00:27.521]    </block>
[15:00:27.521]  </sequence>
[15:00:27.521]  
[15:00:27.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:00:27.552]  
[15:00:27.552]  <debugvars>
[15:00:27.552]    // Pre-defined
[15:00:27.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:00:27.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:00:27.552]    __dp=0x00000000
[15:00:27.552]    __ap=0x00000000
[15:00:27.552]    __traceout=0x00000000      (Trace Disabled)
[15:00:27.552]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:00:27.552]    __FlashAddr=0x00000000
[15:00:27.552]    __FlashLen=0x00000000
[15:00:27.552]    __FlashArg=0x00000000
[15:00:27.552]    __FlashOp=0x00000000
[15:00:27.552]    __Result=0x00000000
[15:00:27.552]  </debugvars>
[15:00:27.552]  
[15:00:27.552]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:00:27.552]    <block atomic="false" info="">
[15:00:27.552]      __var deviceID = 0;
[15:00:27.552]        // -> [deviceID <= 0x00000000]
[15:00:27.552]      __var version = 0;
[15:00:27.552]        // -> [version <= 0x00000000]
[15:00:27.552]      __var partNum = 0;
[15:00:27.552]        // -> [partNum <= 0x00000000]
[15:00:27.552]      __var manuf = 0;
[15:00:27.552]        // -> [manuf <= 0x00000000]
[15:00:27.552]      __var isMSPM0G1X0X_G3X0X = 0;
[15:00:27.552]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:00:27.552]      __var isProduction = 0;
[15:00:27.552]        // -> [isProduction <= 0x00000000]
[15:00:27.552]      __var continueId = 0;
[15:00:27.552]        // -> [continueId <= 0x00000000]
[15:00:27.552]      deviceID =   Read32(0x41C40004);
[15:00:27.562]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:00:27.562]        // -> [deviceID <= 0x2BB8802F]
[15:00:27.562]      version = deviceID >> 28;
[15:00:27.562]        // -> [version <= 0x00000002]
[15:00:27.562]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:00:27.562]        // -> [partNum <= 0x0000BB88]
[15:00:27.562]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:00:27.562]        // -> [manuf <= 0x00000017]
[15:00:27.562]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:00:27.562]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:00:27.562]      isProduction = (version > 0);
[15:00:27.562]        // -> [isProduction <= 0x00000001]
[15:00:27.562]    </block>
[15:00:27.562]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:00:27.562]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:00:27.562]        // =>  FALSE
[15:00:27.562]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:00:27.562]    </control>
[15:00:27.562]    <control if="continueId == 4" while="" timeout="0" info="">
[15:00:27.562]      // if-block "continueId == 4"
[15:00:27.562]        // =>  FALSE
[15:00:27.562]      // skip if-block "continueId == 4"
[15:00:27.562]    </control>
[15:00:27.562]    <control if="!isProduction" while="" timeout="0" info="">
[15:00:27.562]      // if-block "!isProduction"
[15:00:27.562]        // =>  FALSE
[15:00:27.562]      // skip if-block "!isProduction"
[15:00:27.562]    </control>
[15:00:27.562]  </sequence>
[15:00:27.562]  
[15:00:33.527]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:00:33.527]  
[15:00:33.536]  <debugvars>
[15:00:33.536]    // Pre-defined
[15:00:33.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:00:33.536]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:00:33.536]    __dp=0x00000000
[15:00:33.536]    __ap=0x00000000
[15:00:33.536]    __traceout=0x00000000      (Trace Disabled)
[15:00:33.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:00:33.536]    __FlashAddr=0x00000000
[15:00:33.536]    __FlashLen=0x00000000
[15:00:33.536]    __FlashArg=0x00000000
[15:00:33.536]    __FlashOp=0x00000000
[15:00:33.536]    __Result=0x00000000
[15:00:33.536]  </debugvars>
[15:00:33.536]  
[15:00:33.536]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:00:33.536]    <block atomic="false" info="">
[15:00:33.539]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:00:33.539]        // -> [isSWJ <= 0x00000001]
[15:00:33.539]      __var hasDormant = __protocol & 0x00020000;
[15:00:33.539]        // -> [hasDormant <= 0x00000000]
[15:00:33.539]      __var protType   = __protocol & 0x0000FFFF;
[15:00:33.539]        // -> [protType <= 0x00000002]
[15:00:33.539]    </block>
[15:00:33.539]    <control if="protType == 1" while="" timeout="0" info="">
[15:00:33.539]      // if-block "protType == 1"
[15:00:33.539]        // =>  FALSE
[15:00:33.539]      // skip if-block "protType == 1"
[15:00:33.539]    </control>
[15:00:33.539]    <control if="protType == 2" while="" timeout="0" info="">
[15:00:33.539]      // if-block "protType == 2"
[15:00:33.539]        // =>  TRUE
[15:00:33.539]      <control if="isSWJ" while="" timeout="0" info="">
[15:00:33.539]        // if-block "isSWJ"
[15:00:33.541]          // =>  TRUE
[15:00:33.541]        <control if="hasDormant" while="" timeout="0" info="">
[15:00:33.541]          // if-block "hasDormant"
[15:00:33.541]            // =>  FALSE
[15:00:33.541]          // skip if-block "hasDormant"
[15:00:33.541]        </control>
[15:00:33.541]        <control if="!hasDormant" while="" timeout="0" info="">
[15:00:33.541]          // if-block "!hasDormant"
[15:00:33.541]            // =>  TRUE
[15:00:33.541]          <block atomic="false" info="">
[15:00:33.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:00:33.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:00:33.542]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:00:33.542]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:00:33.542]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:00:33.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:00:33.546]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:00:33.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:00:33.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:00:33.555]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:00:33.555]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:00:33.555]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:00:33.555]          </block>
[15:00:33.555]          // end if-block "!hasDormant"
[15:00:33.555]        </control>
[15:00:33.555]        // end if-block "isSWJ"
[15:00:33.555]      </control>
[15:00:33.555]      <control if="!isSWJ" while="" timeout="0" info="">
[15:00:33.555]        // if-block "!isSWJ"
[15:00:33.555]          // =>  FALSE
[15:00:33.555]        // skip if-block "!isSWJ"
[15:00:33.555]      </control>
[15:00:33.555]      <block atomic="false" info="">
[15:00:33.555]        ReadDP(0x0);
[15:00:33.565]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:00:33.565]      </block>
[15:00:33.565]      // end if-block "protType == 2"
[15:00:33.565]    </control>
[15:00:33.565]  </sequence>
[15:00:33.565]  
[15:00:33.565]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:00:33.565]  
[15:00:33.565]  <debugvars>
[15:00:33.565]    // Pre-defined
[15:00:33.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:00:33.565]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:00:33.565]    __dp=0x00000000
[15:00:33.565]    __ap=0x00000000
[15:00:33.565]    __traceout=0x00000000      (Trace Disabled)
[15:00:33.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:00:33.565]    __FlashAddr=0x00000000
[15:00:33.565]    __FlashLen=0x00000000
[15:00:33.565]    __FlashArg=0x00000000
[15:00:33.565]    __FlashOp=0x00000000
[15:00:33.565]    __Result=0x00000000
[15:00:33.565]  </debugvars>
[15:00:33.565]  
[15:00:33.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:00:33.565]    <block atomic="false" info="">
[15:00:33.565]      __var SW_DP_ABORT       = 0x0;
[15:00:33.565]        // -> [SW_DP_ABORT <= 0x00000000]
[15:00:33.565]      __var DP_CTRL_STAT      = 0x4;
[15:00:33.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:00:33.565]      __var DP_SELECT         = 0x8;
[15:00:33.565]        // -> [DP_SELECT <= 0x00000008]
[15:00:33.565]      __var powered_down      = 0;
[15:00:33.565]        // -> [powered_down <= 0x00000000]
[15:00:33.565]      WriteDP(DP_SELECT, 0x00000000);
[15:00:33.565]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:00:33.565]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:00:33.576]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:00:33.576]        // -> [powered_down <= 0x00000001]
[15:00:33.577]    </block>
[15:00:33.577]    <control if="powered_down" while="" timeout="0" info="">
[15:00:33.577]      // if-block "powered_down"
[15:00:33.577]        // =>  TRUE
[15:00:33.577]      <block atomic="false" info="">
[15:00:33.577]        Message(0, "Debug/System power-up request sent");
[15:00:33.577]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:00:33.577]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:00:33.577]      </block>
[15:00:33.577]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:00:33.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:00:33.577]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:00:33.577]        // while-condition  =>  FALSE
[15:00:33.577]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:00:33.577]      </control>
[15:00:33.577]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:00:33.577]        // if-block "(__protocol & 0xFFFF) == 1"
[15:00:33.577]          // =>  FALSE
[15:00:33.577]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:00:33.577]      </control>
[15:00:33.577]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:00:33.577]        // if-block "(__protocol & 0xFFFF) == 2"
[15:00:33.577]          // =>  TRUE
[15:00:33.577]        <block atomic="false" info="">
[15:00:33.577]          Message(0, "executing SWD power up");
[15:00:33.587]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:00:33.590]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:00:33.590]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:00:33.594]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:00:33.594]        </block>
[15:00:33.595]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:00:33.595]      </control>
[15:00:33.595]      // end if-block "powered_down"
[15:00:33.595]    </control>
[15:00:33.595]    <block atomic="false" info="">
[15:00:33.595]      __var DEBUG_PORT_VAL    = 0;
[15:00:33.595]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:00:33.595]      __var ACCESS_POINT_VAL  = 0;
[15:00:33.595]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:00:33.596]      __ap = 1; 
[15:00:33.596]        // -> [__ap <= 0x00000001]
[15:00:33.596]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:00:33.600]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:00:33.600]      __ap = 4;
[15:00:33.600]        // -> [__ap <= 0x00000004]
[15:00:33.600]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:00:33.611]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:00:33.611]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:00:33.611]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:00:33.611]    </block>
[15:00:33.611]    <block atomic="false" info="">
[15:00:33.611]      __var nReset = 0x80;
[15:00:33.611]        // -> [nReset <= 0x00000080]
[15:00:33.611]      __var canReadPins = 0;
[15:00:33.611]        // -> [canReadPins <= 0x00000000]
[15:00:33.611]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:00:33.617]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:00:33.617]        // -> [canReadPins <= 0x00000001]
[15:00:33.617]    </block>
[15:00:33.617]    <control if="" while="1" timeout="200" info="">
[15:00:33.617]      // while "1"  (timeout="200")
[15:00:33.617]      // while-condition  =>  TRUE
[15:00:33.617]      // while "1"  (timeout="200")
[15:00:33.617]      // while-condition  =>  TRUE
[15:00:33.617]      // while "1"  (timeout="200")
[15:00:33.617]      // while-condition  =>  TRUE
[15:00:33.617]      // while "1"  (timeout="200")
[15:00:33.617]      // while-condition  =>  TRUE
[15:00:33.617]      // while "1"  (timeout="200")
[15:00:33.617]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.618]      // while-condition  =>  TRUE
[15:00:33.618]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.625]      // while-condition  =>  TRUE
[15:00:33.625]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.627]      // while-condition  =>  TRUE
[15:00:33.627]      // while "1"  (timeout="200")
[15:00:33.635]      // while-condition  =>  TRUE
[15:00:33.635]      // while "1"  (timeout="200")
[15:00:33.635]      // while  =>  TIMEOUT
[15:00:33.635]      // end while "1"
[15:00:33.635]    </control>
[15:00:33.635]    <control if="canReadPins" while="" timeout="0" info="">
[15:00:33.635]      // if-block "canReadPins"
[15:00:33.635]        // =>  TRUE
[15:00:33.635]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:00:33.635]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:00:33.635]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:00:33.635]        // while-condition  =>  FALSE
[15:00:33.635]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:00:33.638]      </control>
[15:00:33.638]      // end if-block "canReadPins"
[15:00:33.638]    </control>
[15:00:33.638]    <control if="!canReadPins" while="" timeout="0" info="">
[15:00:33.638]      // if-block "!canReadPins"
[15:00:33.638]        // =>  FALSE
[15:00:33.638]      // skip if-block "!canReadPins"
[15:00:33.638]    </control>
[15:00:33.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:00:33.638]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:00:33.638]        // =>  TRUE
[15:00:33.638]      <block atomic="false" info="">
[15:00:33.638]        WriteAP(0x00, 0x190008);
[15:00:33.638]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:00:33.638]        WriteAP(0xF0, 0x01);
[15:00:33.638]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:00:33.638]      </block>
[15:00:33.638]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:00:33.638]    </control>
[15:00:33.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:00:33.638]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:00:33.638]        // =>  FALSE
[15:00:33.638]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:00:33.638]    </control>
[15:00:33.638]    <block atomic="false" info="">
[15:00:33.638]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:00:33.645]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:00:33.645]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:00:33.645]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:00:33.645]      __ap = 0; //lets make sure we reset the access point selection
[15:00:33.645]        // -> [__ap <= 0x00000000]
[15:00:33.645]    </block>
[15:00:33.645]  </sequence>
[15:00:33.645]  
[15:00:33.668]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:00:33.668]  
[15:00:33.668]  <debugvars>
[15:00:33.668]    // Pre-defined
[15:00:33.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:00:33.668]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:00:33.668]    __dp=0x00000000
[15:00:33.668]    __ap=0x00000000
[15:00:33.668]    __traceout=0x00000000      (Trace Disabled)
[15:00:33.668]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:00:33.668]    __FlashAddr=0x00000000
[15:00:33.668]    __FlashLen=0x00000000
[15:00:33.668]    __FlashArg=0x00000000
[15:00:33.668]    __FlashOp=0x00000000
[15:00:33.668]    __Result=0x00000000
[15:00:33.668]  </debugvars>
[15:00:33.668]  
[15:00:33.668]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:00:33.668]    <block atomic="false" info="">
[15:00:33.668]      __var deviceID = 0;
[15:00:33.668]        // -> [deviceID <= 0x00000000]
[15:00:33.668]      __var version = 0;
[15:00:33.668]        // -> [version <= 0x00000000]
[15:00:33.668]      __var partNum = 0;
[15:00:33.668]        // -> [partNum <= 0x00000000]
[15:00:33.668]      __var manuf = 0;
[15:00:33.668]        // -> [manuf <= 0x00000000]
[15:00:33.676]      __var isMSPM0G1X0X_G3X0X = 0;
[15:00:33.676]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:00:33.676]      __var isProduction = 0;
[15:00:33.676]        // -> [isProduction <= 0x00000000]
[15:00:33.676]      __var continueId = 0;
[15:00:33.676]        // -> [continueId <= 0x00000000]
[15:00:33.676]      deviceID =   Read32(0x41C40004);
[15:00:33.686]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:00:33.686]        // -> [deviceID <= 0x2BB8802F]
[15:00:33.686]      version = deviceID >> 28;
[15:00:33.686]        // -> [version <= 0x00000002]
[15:00:33.686]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:00:33.686]        // -> [partNum <= 0x0000BB88]
[15:00:33.686]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:00:33.686]        // -> [manuf <= 0x00000017]
[15:00:33.686]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:00:33.686]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:00:33.686]      isProduction = (version > 0);
[15:00:33.686]        // -> [isProduction <= 0x00000001]
[15:00:33.686]    </block>
[15:00:33.686]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:00:33.686]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:00:33.686]        // =>  FALSE
[15:00:33.686]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:00:33.686]    </control>
[15:00:33.686]    <control if="continueId == 4" while="" timeout="0" info="">
[15:00:33.686]      // if-block "continueId == 4"
[15:00:33.686]        // =>  FALSE
[15:00:33.686]      // skip if-block "continueId == 4"
[15:00:33.686]    </control>
[15:00:33.686]    <control if="!isProduction" while="" timeout="0" info="">
[15:00:33.686]      // if-block "!isProduction"
[15:00:33.686]        // =>  FALSE
[15:00:33.686]      // skip if-block "!isProduction"
[15:00:33.686]    </control>
[15:00:33.686]  </sequence>
[15:00:33.686]  
[15:03:00.042]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:03:00.042]  
[15:03:00.051]  <debugvars>
[15:03:00.051]    // Pre-defined
[15:03:00.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:03:00.051]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:03:00.051]    __dp=0x00000000
[15:03:00.052]    __ap=0x00000000
[15:03:00.052]    __traceout=0x00000000      (Trace Disabled)
[15:03:00.052]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:03:00.052]    __FlashAddr=0x00000000
[15:03:00.052]    __FlashLen=0x00000000
[15:03:00.052]    __FlashArg=0x00000000
[15:03:00.052]    __FlashOp=0x00000000
[15:03:00.052]    __Result=0x00000000
[15:03:00.052]  </debugvars>
[15:03:00.052]  
[15:03:00.052]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:03:00.052]    <block atomic="false" info="">
[15:03:00.052]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:03:00.052]        // -> [isSWJ <= 0x00000001]
[15:03:00.052]      __var hasDormant = __protocol & 0x00020000;
[15:03:00.052]        // -> [hasDormant <= 0x00000000]
[15:03:00.052]      __var protType   = __protocol & 0x0000FFFF;
[15:03:00.052]        // -> [protType <= 0x00000002]
[15:03:00.052]    </block>
[15:03:00.052]    <control if="protType == 1" while="" timeout="0" info="">
[15:03:00.052]      // if-block "protType == 1"
[15:03:00.052]        // =>  FALSE
[15:03:00.052]      // skip if-block "protType == 1"
[15:03:00.052]    </control>
[15:03:00.052]    <control if="protType == 2" while="" timeout="0" info="">
[15:03:00.052]      // if-block "protType == 2"
[15:03:00.052]        // =>  TRUE
[15:03:00.052]      <control if="isSWJ" while="" timeout="0" info="">
[15:03:00.052]        // if-block "isSWJ"
[15:03:00.052]          // =>  TRUE
[15:03:00.052]        <control if="hasDormant" while="" timeout="0" info="">
[15:03:00.052]          // if-block "hasDormant"
[15:03:00.055]            // =>  FALSE
[15:03:00.055]          // skip if-block "hasDormant"
[15:03:00.055]        </control>
[15:03:00.055]        <control if="!hasDormant" while="" timeout="0" info="">
[15:03:00.055]          // if-block "!hasDormant"
[15:03:00.055]            // =>  TRUE
[15:03:00.055]          <block atomic="false" info="">
[15:03:00.055]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:03:00.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:03:00.055]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:03:00.055]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:03:00.055]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:03:00.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:03:00.062]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:03:00.065]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:03:00.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:03:00.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:03:00.065]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:03:00.065]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:03:00.065]          </block>
[15:03:00.065]          // end if-block "!hasDormant"
[15:03:00.065]        </control>
[15:03:00.065]        // end if-block "isSWJ"
[15:03:00.065]      </control>
[15:03:00.065]      <control if="!isSWJ" while="" timeout="0" info="">
[15:03:00.065]        // if-block "!isSWJ"
[15:03:00.065]          // =>  FALSE
[15:03:00.065]        // skip if-block "!isSWJ"
[15:03:00.065]      </control>
[15:03:00.065]      <block atomic="false" info="">
[15:03:00.065]        ReadDP(0x0);
[15:03:00.073]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:03:00.073]      </block>
[15:03:00.073]      // end if-block "protType == 2"
[15:03:00.073]    </control>
[15:03:00.073]  </sequence>
[15:03:00.073]  
[15:03:00.075]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:03:00.075]  
[15:03:00.075]  <debugvars>
[15:03:00.075]    // Pre-defined
[15:03:00.075]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:03:00.075]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:03:00.075]    __dp=0x00000000
[15:03:00.075]    __ap=0x00000000
[15:03:00.075]    __traceout=0x00000000      (Trace Disabled)
[15:03:00.075]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:03:00.075]    __FlashAddr=0x00000000
[15:03:00.075]    __FlashLen=0x00000000
[15:03:00.075]    __FlashArg=0x00000000
[15:03:00.075]    __FlashOp=0x00000000
[15:03:00.075]    __Result=0x00000000
[15:03:00.075]  </debugvars>
[15:03:00.075]  
[15:03:00.075]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:03:00.075]    <block atomic="false" info="">
[15:03:00.075]      __var SW_DP_ABORT       = 0x0;
[15:03:00.075]        // -> [SW_DP_ABORT <= 0x00000000]
[15:03:00.075]      __var DP_CTRL_STAT      = 0x4;
[15:03:00.075]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:03:00.075]      __var DP_SELECT         = 0x8;
[15:03:00.075]        // -> [DP_SELECT <= 0x00000008]
[15:03:00.075]      __var powered_down      = 0;
[15:03:00.075]        // -> [powered_down <= 0x00000000]
[15:03:00.075]      WriteDP(DP_SELECT, 0x00000000);
[15:03:00.075]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:03:00.075]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:03:00.083]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:03:00.083]        // -> [powered_down <= 0x00000001]
[15:03:00.083]    </block>
[15:03:00.083]    <control if="powered_down" while="" timeout="0" info="">
[15:03:00.083]      // if-block "powered_down"
[15:03:00.083]        // =>  TRUE
[15:03:00.083]      <block atomic="false" info="">
[15:03:00.083]        Message(0, "Debug/System power-up request sent");
[15:03:00.083]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:03:00.085]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:03:00.085]      </block>
[15:03:00.085]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:03:00.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:03:00.085]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:03:00.085]        // while-condition  =>  FALSE
[15:03:00.085]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:03:00.085]      </control>
[15:03:00.085]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:03:00.085]        // if-block "(__protocol & 0xFFFF) == 1"
[15:03:00.085]          // =>  FALSE
[15:03:00.085]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:03:00.085]      </control>
[15:03:00.085]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:03:00.085]        // if-block "(__protocol & 0xFFFF) == 2"
[15:03:00.085]          // =>  TRUE
[15:03:00.085]        <block atomic="false" info="">
[15:03:00.085]          Message(0, "executing SWD power up");
[15:03:00.085]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:03:00.085]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:03:00.085]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:03:00.093]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:03:00.093]        </block>
[15:03:00.093]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:03:00.093]      </control>
[15:03:00.093]      // end if-block "powered_down"
[15:03:00.093]    </control>
[15:03:00.093]    <block atomic="false" info="">
[15:03:00.095]      __var DEBUG_PORT_VAL    = 0;
[15:03:00.095]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:03:00.095]      __var ACCESS_POINT_VAL  = 0;
[15:03:00.095]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:03:00.095]      __ap = 1; 
[15:03:00.095]        // -> [__ap <= 0x00000001]
[15:03:00.095]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:03:00.100]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:03:00.100]      __ap = 4;
[15:03:00.100]        // -> [__ap <= 0x00000004]
[15:03:00.100]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:03:00.105]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:03:00.105]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:03:00.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:03:00.105]    </block>
[15:03:00.105]    <block atomic="false" info="">
[15:03:00.105]      __var nReset = 0x80;
[15:03:00.105]        // -> [nReset <= 0x00000080]
[15:03:00.105]      __var canReadPins = 0;
[15:03:00.105]        // -> [canReadPins <= 0x00000000]
[15:03:00.105]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:03:00.105]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:03:00.105]        // -> [canReadPins <= 0x00000001]
[15:03:00.105]    </block>
[15:03:00.105]    <control if="" while="1" timeout="200" info="">
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.105]      // while "1"  (timeout="200")
[15:03:00.105]      // while-condition  =>  TRUE
[15:03:00.113]      // while "1"  (timeout="200")
[15:03:00.113]      // while-condition  =>  TRUE
[15:03:00.113]      // while "1"  (timeout="200")
[15:03:00.113]      // while-condition  =>  TRUE
[15:03:00.113]      // while "1"  (timeout="200")
[15:03:00.113]      // while-condition  =>  TRUE
[15:03:00.113]      // while "1"  (timeout="200")
[15:03:00.113]      // while-condition  =>  TRUE
[15:03:00.113]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.115]      // while "1"  (timeout="200")
[15:03:00.115]      // while-condition  =>  TRUE
[15:03:00.123]      // while "1"  (timeout="200")
[15:03:00.123]      // while  =>  TIMEOUT
[15:03:00.123]      // end while "1"
[15:03:00.123]    </control>
[15:03:00.123]    <control if="canReadPins" while="" timeout="0" info="">
[15:03:00.123]      // if-block "canReadPins"
[15:03:00.123]        // =>  TRUE
[15:03:00.123]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:03:00.123]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:03:00.125]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:03:00.125]        // while-condition  =>  FALSE
[15:03:00.125]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:03:00.125]      </control>
[15:03:00.125]      // end if-block "canReadPins"
[15:03:00.125]    </control>
[15:03:00.125]    <control if="!canReadPins" while="" timeout="0" info="">
[15:03:00.125]      // if-block "!canReadPins"
[15:03:00.125]        // =>  FALSE
[15:03:00.125]      // skip if-block "!canReadPins"
[15:03:00.125]    </control>
[15:03:00.125]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:03:00.125]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:03:00.125]        // =>  TRUE
[15:03:00.125]      <block atomic="false" info="">
[15:03:00.125]        WriteAP(0x00, 0x190008);
[15:03:00.125]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:03:00.125]        WriteAP(0xF0, 0x01);
[15:03:00.125]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:03:00.125]      </block>
[15:03:00.125]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:03:00.125]    </control>
[15:03:00.125]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:03:00.125]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:03:00.125]        // =>  FALSE
[15:03:00.125]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:03:00.125]    </control>
[15:03:00.134]    <block atomic="false" info="">
[15:03:00.134]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:03:00.135]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:03:00.135]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:03:00.135]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:03:00.135]      __ap = 0; //lets make sure we reset the access point selection
[15:03:00.135]        // -> [__ap <= 0x00000000]
[15:03:00.135]    </block>
[15:03:00.135]  </sequence>
[15:03:00.135]  
[15:03:00.165]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:03:00.165]  
[15:03:00.165]  <debugvars>
[15:03:00.165]    // Pre-defined
[15:03:00.165]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:03:00.165]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:03:00.165]    __dp=0x00000000
[15:03:00.165]    __ap=0x00000000
[15:03:00.165]    __traceout=0x00000000      (Trace Disabled)
[15:03:00.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:03:00.165]    __FlashAddr=0x00000000
[15:03:00.165]    __FlashLen=0x00000000
[15:03:00.165]    __FlashArg=0x00000000
[15:03:00.165]    __FlashOp=0x00000000
[15:03:00.165]    __Result=0x00000000
[15:03:00.165]  </debugvars>
[15:03:00.165]  
[15:03:00.165]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:03:00.165]    <block atomic="false" info="">
[15:03:00.165]      __var deviceID = 0;
[15:03:00.165]        // -> [deviceID <= 0x00000000]
[15:03:00.165]      __var version = 0;
[15:03:00.165]        // -> [version <= 0x00000000]
[15:03:00.165]      __var partNum = 0;
[15:03:00.165]        // -> [partNum <= 0x00000000]
[15:03:00.165]      __var manuf = 0;
[15:03:00.165]        // -> [manuf <= 0x00000000]
[15:03:00.165]      __var isMSPM0G1X0X_G3X0X = 0;
[15:03:00.165]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:03:00.165]      __var isProduction = 0;
[15:03:00.165]        // -> [isProduction <= 0x00000000]
[15:03:00.165]      __var continueId = 0;
[15:03:00.165]        // -> [continueId <= 0x00000000]
[15:03:00.165]      deviceID =   Read32(0x41C40004);
[15:03:00.185]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:03:00.185]        // -> [deviceID <= 0x2BB8802F]
[15:03:00.185]      version = deviceID >> 28;
[15:03:00.185]        // -> [version <= 0x00000002]
[15:03:00.185]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:03:00.185]        // -> [partNum <= 0x0000BB88]
[15:03:00.185]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:03:00.185]        // -> [manuf <= 0x00000017]
[15:03:00.185]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:03:00.185]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:03:00.185]      isProduction = (version > 0);
[15:03:00.185]        // -> [isProduction <= 0x00000001]
[15:03:00.185]    </block>
[15:03:00.185]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:03:00.185]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:03:00.185]        // =>  FALSE
[15:03:00.185]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:03:00.185]    </control>
[15:03:00.185]    <control if="continueId == 4" while="" timeout="0" info="">
[15:03:00.185]      // if-block "continueId == 4"
[15:03:00.185]        // =>  FALSE
[15:03:00.185]      // skip if-block "continueId == 4"
[15:03:00.185]    </control>
[15:03:00.185]    <control if="!isProduction" while="" timeout="0" info="">
[15:03:00.185]      // if-block "!isProduction"
[15:03:00.185]        // =>  FALSE
[15:03:00.185]      // skip if-block "!isProduction"
[15:03:00.185]    </control>
[15:03:00.185]  </sequence>
[15:03:00.185]  
[15:04:15.173]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:04:15.173]  
[15:04:15.188]  <debugvars>
[15:04:15.188]    // Pre-defined
[15:04:15.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:04:15.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:04:15.188]    __dp=0x00000000
[15:04:15.188]    __ap=0x00000000
[15:04:15.188]    __traceout=0x00000000      (Trace Disabled)
[15:04:15.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:04:15.188]    __FlashAddr=0x00000000
[15:04:15.188]    __FlashLen=0x00000000
[15:04:15.188]    __FlashArg=0x00000000
[15:04:15.188]    __FlashOp=0x00000000
[15:04:15.188]    __Result=0x00000000
[15:04:15.188]  </debugvars>
[15:04:15.188]  
[15:04:15.188]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:04:15.188]    <block atomic="false" info="">
[15:04:15.188]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:04:15.188]        // -> [isSWJ <= 0x00000001]
[15:04:15.188]      __var hasDormant = __protocol & 0x00020000;
[15:04:15.188]        // -> [hasDormant <= 0x00000000]
[15:04:15.188]      __var protType   = __protocol & 0x0000FFFF;
[15:04:15.188]        // -> [protType <= 0x00000002]
[15:04:15.188]    </block>
[15:04:15.188]    <control if="protType == 1" while="" timeout="0" info="">
[15:04:15.188]      // if-block "protType == 1"
[15:04:15.188]        // =>  FALSE
[15:04:15.188]      // skip if-block "protType == 1"
[15:04:15.188]    </control>
[15:04:15.188]    <control if="protType == 2" while="" timeout="0" info="">
[15:04:15.188]      // if-block "protType == 2"
[15:04:15.188]        // =>  TRUE
[15:04:15.188]      <control if="isSWJ" while="" timeout="0" info="">
[15:04:15.188]        // if-block "isSWJ"
[15:04:15.188]          // =>  TRUE
[15:04:15.188]        <control if="hasDormant" while="" timeout="0" info="">
[15:04:15.188]          // if-block "hasDormant"
[15:04:15.188]            // =>  FALSE
[15:04:15.188]          // skip if-block "hasDormant"
[15:04:15.188]        </control>
[15:04:15.188]        <control if="!hasDormant" while="" timeout="0" info="">
[15:04:15.188]          // if-block "!hasDormant"
[15:04:15.188]            // =>  TRUE
[15:04:15.188]          <block atomic="false" info="">
[15:04:15.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:04:15.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:04:15.194]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:04:15.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:04:15.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:04:15.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:04:15.194]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:04:15.199]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:04:15.199]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:04:15.199]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:04:15.199]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:04:15.203]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:04:15.203]          </block>
[15:04:15.203]          // end if-block "!hasDormant"
[15:04:15.203]        </control>
[15:04:15.203]        // end if-block "isSWJ"
[15:04:15.203]      </control>
[15:04:15.203]      <control if="!isSWJ" while="" timeout="0" info="">
[15:04:15.203]        // if-block "!isSWJ"
[15:04:15.203]          // =>  FALSE
[15:04:15.203]        // skip if-block "!isSWJ"
[15:04:15.203]      </control>
[15:04:15.203]      <block atomic="false" info="">
[15:04:15.203]        ReadDP(0x0);
[15:04:15.208]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:04:15.208]      </block>
[15:04:15.208]      // end if-block "protType == 2"
[15:04:15.208]    </control>
[15:04:15.208]  </sequence>
[15:04:15.208]  
[15:04:15.214]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:04:15.214]  
[15:04:15.214]  <debugvars>
[15:04:15.214]    // Pre-defined
[15:04:15.214]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:04:15.214]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:04:15.214]    __dp=0x00000000
[15:04:15.214]    __ap=0x00000000
[15:04:15.214]    __traceout=0x00000000      (Trace Disabled)
[15:04:15.219]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:04:15.219]    __FlashAddr=0x00000000
[15:04:15.219]    __FlashLen=0x00000000
[15:04:15.219]    __FlashArg=0x00000000
[15:04:15.219]    __FlashOp=0x00000000
[15:04:15.219]    __Result=0x00000000
[15:04:15.219]  </debugvars>
[15:04:15.219]  
[15:04:15.219]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:04:15.219]    <block atomic="false" info="">
[15:04:15.219]      __var SW_DP_ABORT       = 0x0;
[15:04:15.219]        // -> [SW_DP_ABORT <= 0x00000000]
[15:04:15.219]      __var DP_CTRL_STAT      = 0x4;
[15:04:15.219]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:04:15.219]      __var DP_SELECT         = 0x8;
[15:04:15.219]        // -> [DP_SELECT <= 0x00000008]
[15:04:15.219]      __var powered_down      = 0;
[15:04:15.219]        // -> [powered_down <= 0x00000000]
[15:04:15.219]      WriteDP(DP_SELECT, 0x00000000);
[15:04:15.219]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:04:15.224]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:04:15.224]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:04:15.224]        // -> [powered_down <= 0x00000001]
[15:04:15.224]    </block>
[15:04:15.224]    <control if="powered_down" while="" timeout="0" info="">
[15:04:15.224]      // if-block "powered_down"
[15:04:15.224]        // =>  TRUE
[15:04:15.224]      <block atomic="false" info="">
[15:04:15.224]        Message(0, "Debug/System power-up request sent");
[15:04:15.229]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:04:15.229]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:04:15.229]      </block>
[15:04:15.229]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:04:15.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:04:15.233]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:04:15.233]        // while-condition  =>  FALSE
[15:04:15.233]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:04:15.233]      </control>
[15:04:15.233]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:04:15.233]        // if-block "(__protocol & 0xFFFF) == 1"
[15:04:15.233]          // =>  FALSE
[15:04:15.233]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:04:15.233]      </control>
[15:04:15.233]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:04:15.233]        // if-block "(__protocol & 0xFFFF) == 2"
[15:04:15.233]          // =>  TRUE
[15:04:15.233]        <block atomic="false" info="">
[15:04:15.233]          Message(0, "executing SWD power up");
[15:04:15.233]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:04:15.238]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:04:15.238]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:04:15.244]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:04:15.244]        </block>
[15:04:15.244]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:04:15.244]      </control>
[15:04:15.244]      // end if-block "powered_down"
[15:04:15.244]    </control>
[15:04:15.244]    <block atomic="false" info="">
[15:04:15.244]      __var DEBUG_PORT_VAL    = 0;
[15:04:15.244]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:04:15.244]      __var ACCESS_POINT_VAL  = 0;
[15:04:15.244]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:04:15.244]      __ap = 1; 
[15:04:15.244]        // -> [__ap <= 0x00000001]
[15:04:15.244]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:04:15.255]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:04:15.255]      __ap = 4;
[15:04:15.255]        // -> [__ap <= 0x00000004]
[15:04:15.255]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:04:15.263]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:04:15.263]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:04:15.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:04:15.263]    </block>
[15:04:15.263]    <block atomic="false" info="">
[15:04:15.263]      __var nReset = 0x80;
[15:04:15.263]        // -> [nReset <= 0x00000080]
[15:04:15.263]      __var canReadPins = 0;
[15:04:15.263]        // -> [canReadPins <= 0x00000000]
[15:04:15.263]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:04:15.263]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:04:15.263]        // -> [canReadPins <= 0x00000001]
[15:04:15.263]    </block>
[15:04:15.263]    <control if="" while="1" timeout="200" info="">
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.263]      // while-condition  =>  TRUE
[15:04:15.263]      // while "1"  (timeout="200")
[15:04:15.274]      // while-condition  =>  TRUE
[15:04:15.274]      // while "1"  (timeout="200")
[15:04:15.274]      // while  =>  TIMEOUT
[15:04:15.274]      // end while "1"
[15:04:15.274]    </control>
[15:04:15.274]    <control if="canReadPins" while="" timeout="0" info="">
[15:04:15.274]      // if-block "canReadPins"
[15:04:15.274]        // =>  TRUE
[15:04:15.274]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:04:15.274]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:04:15.277]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:04:15.277]        // while-condition  =>  FALSE
[15:04:15.277]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:04:15.277]      </control>
[15:04:15.277]      // end if-block "canReadPins"
[15:04:15.277]    </control>
[15:04:15.277]    <control if="!canReadPins" while="" timeout="0" info="">
[15:04:15.277]      // if-block "!canReadPins"
[15:04:15.277]        // =>  FALSE
[15:04:15.277]      // skip if-block "!canReadPins"
[15:04:15.277]    </control>
[15:04:15.277]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:04:15.277]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:04:15.277]        // =>  TRUE
[15:04:15.278]      <block atomic="false" info="">
[15:04:15.278]        WriteAP(0x00, 0x190008);
[15:04:15.279]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:04:15.279]        WriteAP(0xF0, 0x01);
[15:04:15.284]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:04:15.284]      </block>
[15:04:15.284]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:04:15.284]    </control>
[15:04:15.284]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:04:15.284]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:04:15.284]        // =>  FALSE
[15:04:15.284]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:04:15.284]    </control>
[15:04:15.284]    <block atomic="false" info="">
[15:04:15.284]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:04:15.284]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:04:15.284]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:04:15.284]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:04:15.284]      __ap = 0; //lets make sure we reset the access point selection
[15:04:15.284]        // -> [__ap <= 0x00000000]
[15:04:15.284]    </block>
[15:04:15.284]  </sequence>
[15:04:15.284]  
[15:04:15.332]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:04:15.332]  
[15:04:15.332]  <debugvars>
[15:04:15.332]    // Pre-defined
[15:04:15.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:04:15.332]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:04:15.332]    __dp=0x00000000
[15:04:15.332]    __ap=0x00000000
[15:04:15.332]    __traceout=0x00000000      (Trace Disabled)
[15:04:15.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:04:15.332]    __FlashAddr=0x00000000
[15:04:15.332]    __FlashLen=0x00000000
[15:04:15.332]    __FlashArg=0x00000000
[15:04:15.334]    __FlashOp=0x00000000
[15:04:15.334]    __Result=0x00000000
[15:04:15.334]  </debugvars>
[15:04:15.334]  
[15:04:15.334]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:04:15.334]    <block atomic="false" info="">
[15:04:15.334]      __var deviceID = 0;
[15:04:15.334]        // -> [deviceID <= 0x00000000]
[15:04:15.334]      __var version = 0;
[15:04:15.334]        // -> [version <= 0x00000000]
[15:04:15.334]      __var partNum = 0;
[15:04:15.334]        // -> [partNum <= 0x00000000]
[15:04:15.334]      __var manuf = 0;
[15:04:15.334]        // -> [manuf <= 0x00000000]
[15:04:15.334]      __var isMSPM0G1X0X_G3X0X = 0;
[15:04:15.334]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:04:15.334]      __var isProduction = 0;
[15:04:15.334]        // -> [isProduction <= 0x00000000]
[15:04:15.334]      __var continueId = 0;
[15:04:15.334]        // -> [continueId <= 0x00000000]
[15:04:15.334]      deviceID =   Read32(0x41C40004);
[15:04:15.340]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:04:15.340]        // -> [deviceID <= 0x2BB8802F]
[15:04:15.340]      version = deviceID >> 28;
[15:04:15.340]        // -> [version <= 0x00000002]
[15:04:15.340]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:04:15.340]        // -> [partNum <= 0x0000BB88]
[15:04:15.340]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:04:15.340]        // -> [manuf <= 0x00000017]
[15:04:15.340]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:04:15.340]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:04:15.340]      isProduction = (version > 0);
[15:04:15.340]        // -> [isProduction <= 0x00000001]
[15:04:15.340]    </block>
[15:04:15.340]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:04:15.340]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:04:15.340]        // =>  FALSE
[15:04:15.340]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:04:15.340]    </control>
[15:04:15.340]    <control if="continueId == 4" while="" timeout="0" info="">
[15:04:15.340]      // if-block "continueId == 4"
[15:04:15.340]        // =>  FALSE
[15:04:15.340]      // skip if-block "continueId == 4"
[15:04:15.340]    </control>
[15:04:15.340]    <control if="!isProduction" while="" timeout="0" info="">
[15:04:15.343]      // if-block "!isProduction"
[15:04:15.343]        // =>  FALSE
[15:04:15.343]      // skip if-block "!isProduction"
[15:04:15.343]    </control>
[15:04:15.343]  </sequence>
[15:04:15.343]  
[15:05:02.148]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:05:02.148]  
[15:05:02.163]  <debugvars>
[15:05:02.163]    // Pre-defined
[15:05:02.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:02.163]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:02.163]    __dp=0x00000000
[15:05:02.163]    __ap=0x00000000
[15:05:02.163]    __traceout=0x00000000      (Trace Disabled)
[15:05:02.163]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:02.163]    __FlashAddr=0x00000000
[15:05:02.163]    __FlashLen=0x00000000
[15:05:02.163]    __FlashArg=0x00000000
[15:05:02.165]    __FlashOp=0x00000000
[15:05:02.165]    __Result=0x00000000
[15:05:02.165]  </debugvars>
[15:05:02.165]  
[15:05:02.165]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:02.165]    <block atomic="false" info="">
[15:05:02.165]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:02.165]        // -> [isSWJ <= 0x00000001]
[15:05:02.165]      __var hasDormant = __protocol & 0x00020000;
[15:05:02.165]        // -> [hasDormant <= 0x00000000]
[15:05:02.165]      __var protType   = __protocol & 0x0000FFFF;
[15:05:02.166]        // -> [protType <= 0x00000002]
[15:05:02.166]    </block>
[15:05:02.166]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:02.166]      // if-block "protType == 1"
[15:05:02.166]        // =>  FALSE
[15:05:02.166]      // skip if-block "protType == 1"
[15:05:02.166]    </control>
[15:05:02.166]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:02.166]      // if-block "protType == 2"
[15:05:02.166]        // =>  TRUE
[15:05:02.166]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:02.166]        // if-block "isSWJ"
[15:05:02.166]          // =>  TRUE
[15:05:02.166]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:02.166]          // if-block "hasDormant"
[15:05:02.166]            // =>  FALSE
[15:05:02.166]          // skip if-block "hasDormant"
[15:05:02.166]        </control>
[15:05:02.166]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:02.166]          // if-block "!hasDormant"
[15:05:02.166]            // =>  TRUE
[15:05:02.166]          <block atomic="false" info="">
[15:05:02.166]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:02.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:02.168]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:02.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:02.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:02.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:02.171]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:02.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:02.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:02.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:02.171]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:02.171]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:02.171]          </block>
[15:05:02.171]          // end if-block "!hasDormant"
[15:05:02.171]        </control>
[15:05:02.171]        // end if-block "isSWJ"
[15:05:02.171]      </control>
[15:05:02.171]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:02.171]        // if-block "!isSWJ"
[15:05:02.179]          // =>  FALSE
[15:05:02.179]        // skip if-block "!isSWJ"
[15:05:02.179]      </control>
[15:05:02.179]      <block atomic="false" info="">
[15:05:02.179]        ReadDP(0x0);
[15:05:02.179]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:02.179]      </block>
[15:05:02.179]      // end if-block "protType == 2"
[15:05:02.179]    </control>
[15:05:02.181]  </sequence>
[15:05:02.181]  
[15:05:02.181]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:05:02.181]  
[15:05:02.181]  <debugvars>
[15:05:02.181]    // Pre-defined
[15:05:02.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:02.181]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:02.181]    __dp=0x00000000
[15:05:02.181]    __ap=0x00000000
[15:05:02.181]    __traceout=0x00000000      (Trace Disabled)
[15:05:02.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:02.181]    __FlashAddr=0x00000000
[15:05:02.181]    __FlashLen=0x00000000
[15:05:02.181]    __FlashArg=0x00000000
[15:05:02.181]    __FlashOp=0x00000000
[15:05:02.181]    __Result=0x00000000
[15:05:02.181]  </debugvars>
[15:05:02.181]  
[15:05:02.181]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:05:02.181]    <block atomic="false" info="">
[15:05:02.181]      __var SW_DP_ABORT       = 0x0;
[15:05:02.181]        // -> [SW_DP_ABORT <= 0x00000000]
[15:05:02.181]      __var DP_CTRL_STAT      = 0x4;
[15:05:02.181]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:05:02.181]      __var DP_SELECT         = 0x8;
[15:05:02.181]        // -> [DP_SELECT <= 0x00000008]
[15:05:02.181]      __var powered_down      = 0;
[15:05:02.181]        // -> [powered_down <= 0x00000000]
[15:05:02.181]      WriteDP(DP_SELECT, 0x00000000);
[15:05:02.181]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:05:02.181]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:05:02.189]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:05:02.189]        // -> [powered_down <= 0x00000001]
[15:05:02.189]    </block>
[15:05:02.189]    <control if="powered_down" while="" timeout="0" info="">
[15:05:02.189]      // if-block "powered_down"
[15:05:02.189]        // =>  TRUE
[15:05:02.189]      <block atomic="false" info="">
[15:05:02.189]        Message(0, "Debug/System power-up request sent");
[15:05:02.193]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:05:02.193]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:05:02.193]      </block>
[15:05:02.193]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:05:02.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:05:02.193]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:05:02.193]        // while-condition  =>  FALSE
[15:05:02.193]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:05:02.193]      </control>
[15:05:02.193]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:05:02.193]        // if-block "(__protocol & 0xFFFF) == 1"
[15:05:02.193]          // =>  FALSE
[15:05:02.193]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:05:02.193]      </control>
[15:05:02.193]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:05:02.193]        // if-block "(__protocol & 0xFFFF) == 2"
[15:05:02.193]          // =>  TRUE
[15:05:02.193]        <block atomic="false" info="">
[15:05:02.193]          Message(0, "executing SWD power up");
[15:05:02.199]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:05:02.199]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:05:02.199]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:05:02.204]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:05:02.204]        </block>
[15:05:02.204]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:05:02.204]      </control>
[15:05:02.204]      // end if-block "powered_down"
[15:05:02.204]    </control>
[15:05:02.204]    <block atomic="false" info="">
[15:05:02.204]      __var DEBUG_PORT_VAL    = 0;
[15:05:02.204]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:05:02.204]      __var ACCESS_POINT_VAL  = 0;
[15:05:02.204]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:05:02.204]      __ap = 1; 
[15:05:02.204]        // -> [__ap <= 0x00000001]
[15:05:02.204]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:05:02.212]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:05:02.212]      __ap = 4;
[15:05:02.212]        // -> [__ap <= 0x00000004]
[15:05:02.212]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:05:02.212]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:05:02.212]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:05:02.212]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:05:02.212]    </block>
[15:05:02.212]    <block atomic="false" info="">
[15:05:02.212]      __var nReset = 0x80;
[15:05:02.212]        // -> [nReset <= 0x00000080]
[15:05:02.212]      __var canReadPins = 0;
[15:05:02.212]        // -> [canReadPins <= 0x00000000]
[15:05:02.212]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:05:02.221]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:05:02.221]        // -> [canReadPins <= 0x00000001]
[15:05:02.222]    </block>
[15:05:02.222]    <control if="" while="1" timeout="200" info="">
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.222]      // while "1"  (timeout="200")
[15:05:02.222]      // while-condition  =>  TRUE
[15:05:02.226]      // while "1"  (timeout="200")
[15:05:02.226]      // while  =>  TIMEOUT
[15:05:02.226]      // end while "1"
[15:05:02.226]    </control>
[15:05:02.226]    <control if="canReadPins" while="" timeout="0" info="">
[15:05:02.227]      // if-block "canReadPins"
[15:05:02.227]        // =>  TRUE
[15:05:02.227]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:05:02.227]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:05:02.227]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:05:02.227]        // while-condition  =>  FALSE
[15:05:02.227]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:05:02.227]      </control>
[15:05:02.227]      // end if-block "canReadPins"
[15:05:02.227]    </control>
[15:05:02.227]    <control if="!canReadPins" while="" timeout="0" info="">
[15:05:02.227]      // if-block "!canReadPins"
[15:05:02.227]        // =>  FALSE
[15:05:02.227]      // skip if-block "!canReadPins"
[15:05:02.231]    </control>
[15:05:02.231]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:05:02.231]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:05:02.231]        // =>  TRUE
[15:05:02.231]      <block atomic="false" info="">
[15:05:02.231]        WriteAP(0x00, 0x190008);
[15:05:02.231]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:05:02.231]        WriteAP(0xF0, 0x01);
[15:05:02.231]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:05:02.231]      </block>
[15:05:02.231]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:05:02.231]    </control>
[15:05:02.231]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:05:02.231]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:05:02.231]        // =>  FALSE
[15:05:02.231]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:05:02.231]    </control>
[15:05:02.231]    <block atomic="false" info="">
[15:05:02.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:05:02.241]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:05:02.241]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:05:02.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:05:02.243]      __ap = 0; //lets make sure we reset the access point selection
[15:05:02.243]        // -> [__ap <= 0x00000000]
[15:05:02.243]    </block>
[15:05:02.245]  </sequence>
[15:05:02.245]  
[15:05:02.283]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:05:02.283]  
[15:05:02.283]  <debugvars>
[15:05:02.283]    // Pre-defined
[15:05:02.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:02.283]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:02.283]    __dp=0x00000000
[15:05:02.283]    __ap=0x00000000
[15:05:02.283]    __traceout=0x00000000      (Trace Disabled)
[15:05:02.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:02.283]    __FlashAddr=0x00000000
[15:05:02.283]    __FlashLen=0x00000000
[15:05:02.283]    __FlashArg=0x00000000
[15:05:02.283]    __FlashOp=0x00000000
[15:05:02.283]    __Result=0x00000000
[15:05:02.283]  </debugvars>
[15:05:02.283]  
[15:05:02.283]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:05:02.283]    <block atomic="false" info="">
[15:05:02.283]      __var deviceID = 0;
[15:05:02.283]        // -> [deviceID <= 0x00000000]
[15:05:02.283]      __var version = 0;
[15:05:02.283]        // -> [version <= 0x00000000]
[15:05:02.283]      __var partNum = 0;
[15:05:02.283]        // -> [partNum <= 0x00000000]
[15:05:02.283]      __var manuf = 0;
[15:05:02.283]        // -> [manuf <= 0x00000000]
[15:05:02.283]      __var isMSPM0G1X0X_G3X0X = 0;
[15:05:02.283]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:05:02.283]      __var isProduction = 0;
[15:05:02.283]        // -> [isProduction <= 0x00000000]
[15:05:02.283]      __var continueId = 0;
[15:05:02.283]        // -> [continueId <= 0x00000000]
[15:05:02.292]      deviceID =   Read32(0x41C40004);
[15:05:02.292]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:05:02.292]        // -> [deviceID <= 0x2BB8802F]
[15:05:02.292]      version = deviceID >> 28;
[15:05:02.292]        // -> [version <= 0x00000002]
[15:05:02.292]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:05:02.292]        // -> [partNum <= 0x0000BB88]
[15:05:02.292]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:05:02.292]        // -> [manuf <= 0x00000017]
[15:05:02.292]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:05:02.292]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:05:02.292]      isProduction = (version > 0);
[15:05:02.302]        // -> [isProduction <= 0x00000001]
[15:05:02.302]    </block>
[15:05:02.302]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:05:02.302]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:05:02.302]        // =>  FALSE
[15:05:02.302]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:05:02.302]    </control>
[15:05:02.302]    <control if="continueId == 4" while="" timeout="0" info="">
[15:05:02.302]      // if-block "continueId == 4"
[15:05:02.302]        // =>  FALSE
[15:05:02.302]      // skip if-block "continueId == 4"
[15:05:02.302]    </control>
[15:05:02.302]    <control if="!isProduction" while="" timeout="0" info="">
[15:05:02.302]      // if-block "!isProduction"
[15:05:02.302]        // =>  FALSE
[15:05:02.302]      // skip if-block "!isProduction"
[15:05:02.302]    </control>
[15:05:02.302]  </sequence>
[15:05:02.302]  
[15:05:17.465]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:17.465]  
[15:05:17.474]  <debugvars>
[15:05:17.474]    // Pre-defined
[15:05:17.474]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:17.474]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:17.474]    __dp=0x00000000
[15:05:17.474]    __ap=0x00000000
[15:05:17.474]    __traceout=0x00000000      (Trace Disabled)
[15:05:17.474]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:17.474]    __FlashAddr=0x00000000
[15:05:17.475]    __FlashLen=0x00000000
[15:05:17.475]    __FlashArg=0x00000000
[15:05:17.475]    __FlashOp=0x00000000
[15:05:17.475]    __Result=0x00000000
[15:05:17.475]  </debugvars>
[15:05:17.475]  
[15:05:17.475]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:17.475]    <block atomic="false" info="">
[15:05:17.475]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:17.475]        // -> [isSWJ <= 0x00000001]
[15:05:17.475]      __var hasDormant = __protocol & 0x00020000;
[15:05:17.475]        // -> [hasDormant <= 0x00000000]
[15:05:17.475]      __var protType   = __protocol & 0x0000FFFF;
[15:05:17.475]        // -> [protType <= 0x00000002]
[15:05:17.475]    </block>
[15:05:17.477]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:17.477]      // if-block "protType == 1"
[15:05:17.477]        // =>  FALSE
[15:05:17.477]      // skip if-block "protType == 1"
[15:05:17.477]    </control>
[15:05:17.477]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:17.477]      // if-block "protType == 2"
[15:05:17.477]        // =>  TRUE
[15:05:17.477]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:17.477]        // if-block "isSWJ"
[15:05:17.477]          // =>  TRUE
[15:05:17.477]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:17.477]          // if-block "hasDormant"
[15:05:17.477]            // =>  FALSE
[15:05:17.477]          // skip if-block "hasDormant"
[15:05:17.477]        </control>
[15:05:17.477]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:17.477]          // if-block "!hasDormant"
[15:05:17.477]            // =>  TRUE
[15:05:17.477]          <block atomic="false" info="">
[15:05:17.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:17.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:17.477]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:17.477]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:17.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:17.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:17.477]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:17.477]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:17.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:17.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:17.485]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:17.485]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:17.485]          </block>
[15:05:17.485]          // end if-block "!hasDormant"
[15:05:17.485]        </control>
[15:05:17.485]        // end if-block "isSWJ"
[15:05:17.485]      </control>
[15:05:17.485]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:17.485]        // if-block "!isSWJ"
[15:05:17.485]          // =>  FALSE
[15:05:17.485]        // skip if-block "!isSWJ"
[15:05:17.485]      </control>
[15:05:17.485]      <block atomic="false" info="">
[15:05:17.485]        ReadDP(0x0);
[15:05:17.485]  
[15:05:17.485]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:17.485]  
[15:05:17.485]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:17.485]      </block>
[15:05:17.485]      // end if-block "protType == 2"
[15:05:17.485]    </control>
[15:05:17.485]  </sequence>
[15:05:17.485]  
[15:05:17.745]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:17.745]  
[15:05:17.755]  <debugvars>
[15:05:17.755]    // Pre-defined
[15:05:17.755]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:17.755]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:17.755]    __dp=0x00000000
[15:05:17.755]    __ap=0x00000000
[15:05:17.755]    __traceout=0x00000000      (Trace Disabled)
[15:05:17.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:17.755]    __FlashAddr=0x00000000
[15:05:17.755]    __FlashLen=0x00000000
[15:05:17.755]    __FlashArg=0x00000000
[15:05:17.755]    __FlashOp=0x00000000
[15:05:17.755]    __Result=0x00000000
[15:05:17.755]  </debugvars>
[15:05:17.755]  
[15:05:17.755]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:17.755]    <block atomic="false" info="">
[15:05:17.755]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:17.755]        // -> [isSWJ <= 0x00000001]
[15:05:17.755]      __var hasDormant = __protocol & 0x00020000;
[15:05:17.755]        // -> [hasDormant <= 0x00000000]
[15:05:17.755]      __var protType   = __protocol & 0x0000FFFF;
[15:05:17.755]        // -> [protType <= 0x00000002]
[15:05:17.755]    </block>
[15:05:17.755]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:17.755]      // if-block "protType == 1"
[15:05:17.755]        // =>  FALSE
[15:05:17.755]      // skip if-block "protType == 1"
[15:05:17.755]    </control>
[15:05:17.755]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:17.755]      // if-block "protType == 2"
[15:05:17.755]        // =>  TRUE
[15:05:17.755]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:17.755]        // if-block "isSWJ"
[15:05:17.755]          // =>  TRUE
[15:05:17.755]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:17.755]          // if-block "hasDormant"
[15:05:17.755]            // =>  FALSE
[15:05:17.755]          // skip if-block "hasDormant"
[15:05:17.755]        </control>
[15:05:17.755]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:17.755]          // if-block "!hasDormant"
[15:05:17.755]            // =>  TRUE
[15:05:17.755]          <block atomic="false" info="">
[15:05:17.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:17.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:17.765]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:17.766]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:17.766]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:17.768]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:17.768]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:17.770]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:17.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:17.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:17.775]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:17.775]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:17.775]          </block>
[15:05:17.775]          // end if-block "!hasDormant"
[15:05:17.775]        </control>
[15:05:17.775]        // end if-block "isSWJ"
[15:05:17.775]      </control>
[15:05:17.775]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:17.775]        // if-block "!isSWJ"
[15:05:17.775]          // =>  FALSE
[15:05:17.775]        // skip if-block "!isSWJ"
[15:05:17.775]      </control>
[15:05:17.775]      <block atomic="false" info="">
[15:05:17.775]        ReadDP(0x0);
[15:05:17.775]  
[15:05:17.775]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:17.775]  
[15:05:17.775]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:17.775]      </block>
[15:05:17.775]      // end if-block "protType == 2"
[15:05:17.775]    </control>
[15:05:17.775]  </sequence>
[15:05:17.775]  
[15:05:18.029]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:18.029]  
[15:05:18.029]  <debugvars>
[15:05:18.029]    // Pre-defined
[15:05:18.029]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:18.029]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:18.029]    __dp=0x00000000
[15:05:18.029]    __ap=0x00000000
[15:05:18.029]    __traceout=0x00000000      (Trace Disabled)
[15:05:18.029]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:18.029]    __FlashAddr=0x00000000
[15:05:18.029]    __FlashLen=0x00000000
[15:05:18.029]    __FlashArg=0x00000000
[15:05:18.030]    __FlashOp=0x00000000
[15:05:18.030]    __Result=0x00000000
[15:05:18.030]  </debugvars>
[15:05:18.030]  
[15:05:18.030]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:18.030]    <block atomic="false" info="">
[15:05:18.031]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:18.031]        // -> [isSWJ <= 0x00000001]
[15:05:18.031]      __var hasDormant = __protocol & 0x00020000;
[15:05:18.031]        // -> [hasDormant <= 0x00000000]
[15:05:18.031]      __var protType   = __protocol & 0x0000FFFF;
[15:05:18.031]        // -> [protType <= 0x00000002]
[15:05:18.031]    </block>
[15:05:18.031]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:18.031]      // if-block "protType == 1"
[15:05:18.031]        // =>  FALSE
[15:05:18.031]      // skip if-block "protType == 1"
[15:05:18.033]    </control>
[15:05:18.033]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:18.033]      // if-block "protType == 2"
[15:05:18.033]        // =>  TRUE
[15:05:18.033]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:18.033]        // if-block "isSWJ"
[15:05:18.033]          // =>  TRUE
[15:05:18.033]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:18.033]          // if-block "hasDormant"
[15:05:18.033]            // =>  FALSE
[15:05:18.033]          // skip if-block "hasDormant"
[15:05:18.033]        </control>
[15:05:18.033]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:18.033]          // if-block "!hasDormant"
[15:05:18.034]            // =>  TRUE
[15:05:18.034]          <block atomic="false" info="">
[15:05:18.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:18.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.034]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:18.037]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:18.038]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:18.040]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.040]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:18.041]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:18.041]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:18.046]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.046]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:18.047]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:18.047]          </block>
[15:05:18.047]          // end if-block "!hasDormant"
[15:05:18.047]        </control>
[15:05:18.047]        // end if-block "isSWJ"
[15:05:18.047]      </control>
[15:05:18.047]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:18.047]        // if-block "!isSWJ"
[15:05:18.047]          // =>  FALSE
[15:05:18.047]        // skip if-block "!isSWJ"
[15:05:18.047]      </control>
[15:05:18.047]      <block atomic="false" info="">
[15:05:18.053]        ReadDP(0x0);
[15:05:18.054]  
[15:05:18.054]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:18.054]  
[15:05:18.054]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:18.054]      </block>
[15:05:18.054]      // end if-block "protType == 2"
[15:05:18.054]    </control>
[15:05:18.054]  </sequence>
[15:05:18.054]  
[15:05:18.313]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:18.313]  
[15:05:18.321]  <debugvars>
[15:05:18.321]    // Pre-defined
[15:05:18.321]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:18.321]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:18.321]    __dp=0x00000000
[15:05:18.321]    __ap=0x00000000
[15:05:18.323]    __traceout=0x00000000      (Trace Disabled)
[15:05:18.323]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:18.323]    __FlashAddr=0x00000000
[15:05:18.323]    __FlashLen=0x00000000
[15:05:18.323]    __FlashArg=0x00000000
[15:05:18.323]    __FlashOp=0x00000000
[15:05:18.323]    __Result=0x00000000
[15:05:18.323]  </debugvars>
[15:05:18.323]  
[15:05:18.323]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:18.323]    <block atomic="false" info="">
[15:05:18.324]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:18.324]        // -> [isSWJ <= 0x00000001]
[15:05:18.324]      __var hasDormant = __protocol & 0x00020000;
[15:05:18.324]        // -> [hasDormant <= 0x00000000]
[15:05:18.324]      __var protType   = __protocol & 0x0000FFFF;
[15:05:18.324]        // -> [protType <= 0x00000002]
[15:05:18.324]    </block>
[15:05:18.324]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:18.324]      // if-block "protType == 1"
[15:05:18.324]        // =>  FALSE
[15:05:18.324]      // skip if-block "protType == 1"
[15:05:18.325]    </control>
[15:05:18.325]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:18.325]      // if-block "protType == 2"
[15:05:18.325]        // =>  TRUE
[15:05:18.325]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:18.325]        // if-block "isSWJ"
[15:05:18.325]          // =>  TRUE
[15:05:18.325]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:18.325]          // if-block "hasDormant"
[15:05:18.325]            // =>  FALSE
[15:05:18.325]          // skip if-block "hasDormant"
[15:05:18.325]        </control>
[15:05:18.325]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:18.325]          // if-block "!hasDormant"
[15:05:18.325]            // =>  TRUE
[15:05:18.325]          <block atomic="false" info="">
[15:05:18.325]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:18.327]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.327]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:18.333]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:18.333]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:18.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.335]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:18.343]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:18.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:18.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.344]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:18.345]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:18.345]          </block>
[15:05:18.345]          // end if-block "!hasDormant"
[15:05:18.345]        </control>
[15:05:18.345]        // end if-block "isSWJ"
[15:05:18.345]      </control>
[15:05:18.345]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:18.345]        // if-block "!isSWJ"
[15:05:18.345]          // =>  FALSE
[15:05:18.345]        // skip if-block "!isSWJ"
[15:05:18.345]      </control>
[15:05:18.345]      <block atomic="false" info="">
[15:05:18.345]        ReadDP(0x0);
[15:05:18.345]  
[15:05:18.345]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:18.345]  
[15:05:18.345]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:18.345]      </block>
[15:05:18.345]      // end if-block "protType == 2"
[15:05:18.345]    </control>
[15:05:18.345]  </sequence>
[15:05:18.345]  
[15:05:18.596]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:18.596]  
[15:05:18.596]  <debugvars>
[15:05:18.596]    // Pre-defined
[15:05:18.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:18.597]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:18.597]    __dp=0x00000000
[15:05:18.597]    __ap=0x00000000
[15:05:18.597]    __traceout=0x00000000      (Trace Disabled)
[15:05:18.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:18.597]    __FlashAddr=0x00000000
[15:05:18.597]    __FlashLen=0x00000000
[15:05:18.597]    __FlashArg=0x00000000
[15:05:18.597]    __FlashOp=0x00000000
[15:05:18.597]    __Result=0x00000000
[15:05:18.597]  </debugvars>
[15:05:18.597]  
[15:05:18.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:18.597]    <block atomic="false" info="">
[15:05:18.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:18.597]        // -> [isSWJ <= 0x00000001]
[15:05:18.597]      __var hasDormant = __protocol & 0x00020000;
[15:05:18.597]        // -> [hasDormant <= 0x00000000]
[15:05:18.597]      __var protType   = __protocol & 0x0000FFFF;
[15:05:18.597]        // -> [protType <= 0x00000002]
[15:05:18.597]    </block>
[15:05:18.597]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:18.597]      // if-block "protType == 1"
[15:05:18.597]        // =>  FALSE
[15:05:18.597]      // skip if-block "protType == 1"
[15:05:18.597]    </control>
[15:05:18.597]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:18.597]      // if-block "protType == 2"
[15:05:18.597]        // =>  TRUE
[15:05:18.597]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:18.597]        // if-block "isSWJ"
[15:05:18.597]          // =>  TRUE
[15:05:18.597]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:18.597]          // if-block "hasDormant"
[15:05:18.597]            // =>  FALSE
[15:05:18.597]          // skip if-block "hasDormant"
[15:05:18.597]        </control>
[15:05:18.597]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:18.597]          // if-block "!hasDormant"
[15:05:18.597]            // =>  TRUE
[15:05:18.597]          <block atomic="false" info="">
[15:05:18.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:18.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.608]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:18.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:18.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:18.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.618]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:18.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:18.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:18.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.618]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:18.627]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:18.627]          </block>
[15:05:18.627]          // end if-block "!hasDormant"
[15:05:18.627]        </control>
[15:05:18.627]        // end if-block "isSWJ"
[15:05:18.627]      </control>
[15:05:18.627]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:18.627]        // if-block "!isSWJ"
[15:05:18.627]          // =>  FALSE
[15:05:18.627]        // skip if-block "!isSWJ"
[15:05:18.627]      </control>
[15:05:18.627]      <block atomic="false" info="">
[15:05:18.627]        ReadDP(0x0);
[15:05:18.627]  
[15:05:18.627]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:18.627]  
[15:05:18.627]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:18.627]      </block>
[15:05:18.627]      // end if-block "protType == 2"
[15:05:18.627]    </control>
[15:05:18.627]  </sequence>
[15:05:18.627]  
[15:05:18.877]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:18.877]  
[15:05:18.886]  <debugvars>
[15:05:18.886]    // Pre-defined
[15:05:18.886]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:18.886]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:18.886]    __dp=0x00000000
[15:05:18.888]    __ap=0x00000000
[15:05:18.888]    __traceout=0x00000000      (Trace Disabled)
[15:05:18.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:18.888]    __FlashAddr=0x00000000
[15:05:18.888]    __FlashLen=0x00000000
[15:05:18.888]    __FlashArg=0x00000000
[15:05:18.888]    __FlashOp=0x00000000
[15:05:18.888]    __Result=0x00000000
[15:05:18.888]  </debugvars>
[15:05:18.888]  
[15:05:18.888]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:18.888]    <block atomic="false" info="">
[15:05:18.888]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:18.888]        // -> [isSWJ <= 0x00000001]
[15:05:18.888]      __var hasDormant = __protocol & 0x00020000;
[15:05:18.888]        // -> [hasDormant <= 0x00000000]
[15:05:18.888]      __var protType   = __protocol & 0x0000FFFF;
[15:05:18.888]        // -> [protType <= 0x00000002]
[15:05:18.888]    </block>
[15:05:18.888]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:18.888]      // if-block "protType == 1"
[15:05:18.888]        // =>  FALSE
[15:05:18.888]      // skip if-block "protType == 1"
[15:05:18.888]    </control>
[15:05:18.888]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:18.888]      // if-block "protType == 2"
[15:05:18.888]        // =>  TRUE
[15:05:18.888]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:18.888]        // if-block "isSWJ"
[15:05:18.888]          // =>  TRUE
[15:05:18.888]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:18.888]          // if-block "hasDormant"
[15:05:18.888]            // =>  FALSE
[15:05:18.888]          // skip if-block "hasDormant"
[15:05:18.888]        </control>
[15:05:18.888]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:18.888]          // if-block "!hasDormant"
[15:05:18.888]            // =>  TRUE
[15:05:18.888]          <block atomic="false" info="">
[15:05:18.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:18.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.888]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:18.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:18.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:18.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.888]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:18.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:18.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:18.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:18.897]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:18.897]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:18.897]          </block>
[15:05:18.897]          // end if-block "!hasDormant"
[15:05:18.897]        </control>
[15:05:18.897]        // end if-block "isSWJ"
[15:05:18.897]      </control>
[15:05:18.897]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:18.897]        // if-block "!isSWJ"
[15:05:18.897]          // =>  FALSE
[15:05:18.897]        // skip if-block "!isSWJ"
[15:05:18.897]      </control>
[15:05:18.897]      <block atomic="false" info="">
[15:05:18.897]        ReadDP(0x0);
[15:05:18.897]  
[15:05:18.897]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:18.897]  
[15:05:18.897]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:18.897]      </block>
[15:05:18.897]      // end if-block "protType == 2"
[15:05:18.897]    </control>
[15:05:18.897]  </sequence>
[15:05:18.897]  
[15:05:19.148]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:19.148]  
[15:05:19.157]  <debugvars>
[15:05:19.157]    // Pre-defined
[15:05:19.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:19.157]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:19.158]    __dp=0x00000000
[15:05:19.158]    __ap=0x00000000
[15:05:19.158]    __traceout=0x00000000      (Trace Disabled)
[15:05:19.158]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:19.158]    __FlashAddr=0x00000000
[15:05:19.158]    __FlashLen=0x00000000
[15:05:19.158]    __FlashArg=0x00000000
[15:05:19.158]    __FlashOp=0x00000000
[15:05:19.158]    __Result=0x00000000
[15:05:19.158]  </debugvars>
[15:05:19.158]  
[15:05:19.158]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:19.158]    <block atomic="false" info="">
[15:05:19.158]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:19.158]        // -> [isSWJ <= 0x00000001]
[15:05:19.158]      __var hasDormant = __protocol & 0x00020000;
[15:05:19.158]        // -> [hasDormant <= 0x00000000]
[15:05:19.158]      __var protType   = __protocol & 0x0000FFFF;
[15:05:19.158]        // -> [protType <= 0x00000002]
[15:05:19.158]    </block>
[15:05:19.158]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:19.158]      // if-block "protType == 1"
[15:05:19.158]        // =>  FALSE
[15:05:19.158]      // skip if-block "protType == 1"
[15:05:19.158]    </control>
[15:05:19.158]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:19.158]      // if-block "protType == 2"
[15:05:19.158]        // =>  TRUE
[15:05:19.158]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:19.158]        // if-block "isSWJ"
[15:05:19.158]          // =>  TRUE
[15:05:19.158]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:19.158]          // if-block "hasDormant"
[15:05:19.158]            // =>  FALSE
[15:05:19.158]          // skip if-block "hasDormant"
[15:05:19.158]        </control>
[15:05:19.158]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:19.158]          // if-block "!hasDormant"
[15:05:19.158]            // =>  TRUE
[15:05:19.158]          <block atomic="false" info="">
[15:05:19.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:19.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.158]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:19.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:19.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:19.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.168]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:19.168]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:19.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:19.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.168]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:19.168]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:19.168]          </block>
[15:05:19.168]          // end if-block "!hasDormant"
[15:05:19.168]        </control>
[15:05:19.168]        // end if-block "isSWJ"
[15:05:19.168]      </control>
[15:05:19.168]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:19.168]        // if-block "!isSWJ"
[15:05:19.168]          // =>  FALSE
[15:05:19.168]        // skip if-block "!isSWJ"
[15:05:19.168]      </control>
[15:05:19.168]      <block atomic="false" info="">
[15:05:19.168]        ReadDP(0x0);
[15:05:19.168]  
[15:05:19.168]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:19.168]  
[15:05:19.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:19.168]      </block>
[15:05:19.168]      // end if-block "protType == 2"
[15:05:19.168]    </control>
[15:05:19.168]  </sequence>
[15:05:19.168]  
[15:05:19.427]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:19.427]  
[15:05:19.435]  <debugvars>
[15:05:19.435]    // Pre-defined
[15:05:19.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:19.435]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:19.435]    __dp=0x00000000
[15:05:19.435]    __ap=0x00000000
[15:05:19.435]    __traceout=0x00000000      (Trace Disabled)
[15:05:19.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:19.435]    __FlashAddr=0x00000000
[15:05:19.435]    __FlashLen=0x00000000
[15:05:19.435]    __FlashArg=0x00000000
[15:05:19.435]    __FlashOp=0x00000000
[15:05:19.435]    __Result=0x00000000
[15:05:19.435]  </debugvars>
[15:05:19.435]  
[15:05:19.435]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:19.435]    <block atomic="false" info="">
[15:05:19.435]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:19.438]        // -> [isSWJ <= 0x00000001]
[15:05:19.438]      __var hasDormant = __protocol & 0x00020000;
[15:05:19.438]        // -> [hasDormant <= 0x00000000]
[15:05:19.438]      __var protType   = __protocol & 0x0000FFFF;
[15:05:19.438]        // -> [protType <= 0x00000002]
[15:05:19.438]    </block>
[15:05:19.438]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:19.438]      // if-block "protType == 1"
[15:05:19.438]        // =>  FALSE
[15:05:19.438]      // skip if-block "protType == 1"
[15:05:19.438]    </control>
[15:05:19.438]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:19.438]      // if-block "protType == 2"
[15:05:19.438]        // =>  TRUE
[15:05:19.438]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:19.438]        // if-block "isSWJ"
[15:05:19.438]          // =>  TRUE
[15:05:19.438]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:19.438]          // if-block "hasDormant"
[15:05:19.438]            // =>  FALSE
[15:05:19.438]          // skip if-block "hasDormant"
[15:05:19.438]        </control>
[15:05:19.438]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:19.438]          // if-block "!hasDormant"
[15:05:19.438]            // =>  TRUE
[15:05:19.438]          <block atomic="false" info="">
[15:05:19.438]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:19.443]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.443]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:19.443]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:19.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:19.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.447]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:19.447]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:19.447]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:19.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.447]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:19.447]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:19.453]          </block>
[15:05:19.453]          // end if-block "!hasDormant"
[15:05:19.453]        </control>
[15:05:19.453]        // end if-block "isSWJ"
[15:05:19.453]      </control>
[15:05:19.453]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:19.453]        // if-block "!isSWJ"
[15:05:19.453]          // =>  FALSE
[15:05:19.453]        // skip if-block "!isSWJ"
[15:05:19.453]      </control>
[15:05:19.453]      <block atomic="false" info="">
[15:05:19.453]        ReadDP(0x0);
[15:05:19.453]  
[15:05:19.453]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:19.453]  
[15:05:19.453]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:19.453]      </block>
[15:05:19.453]      // end if-block "protType == 2"
[15:05:19.453]    </control>
[15:05:19.453]  </sequence>
[15:05:19.453]  
[15:05:19.708]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:19.708]  
[15:05:19.708]  <debugvars>
[15:05:19.708]    // Pre-defined
[15:05:19.708]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:19.708]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:19.708]    __dp=0x00000000
[15:05:19.708]    __ap=0x00000000
[15:05:19.708]    __traceout=0x00000000      (Trace Disabled)
[15:05:19.708]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:19.708]    __FlashAddr=0x00000000
[15:05:19.708]    __FlashLen=0x00000000
[15:05:19.708]    __FlashArg=0x00000000
[15:05:19.708]    __FlashOp=0x00000000
[15:05:19.708]    __Result=0x00000000
[15:05:19.708]  </debugvars>
[15:05:19.708]  
[15:05:19.708]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:19.708]    <block atomic="false" info="">
[15:05:19.708]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:19.708]        // -> [isSWJ <= 0x00000001]
[15:05:19.708]      __var hasDormant = __protocol & 0x00020000;
[15:05:19.708]        // -> [hasDormant <= 0x00000000]
[15:05:19.708]      __var protType   = __protocol & 0x0000FFFF;
[15:05:19.708]        // -> [protType <= 0x00000002]
[15:05:19.708]    </block>
[15:05:19.708]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:19.708]      // if-block "protType == 1"
[15:05:19.708]        // =>  FALSE
[15:05:19.708]      // skip if-block "protType == 1"
[15:05:19.708]    </control>
[15:05:19.708]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:19.708]      // if-block "protType == 2"
[15:05:19.708]        // =>  TRUE
[15:05:19.708]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:19.708]        // if-block "isSWJ"
[15:05:19.708]          // =>  TRUE
[15:05:19.708]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:19.708]          // if-block "hasDormant"
[15:05:19.708]            // =>  FALSE
[15:05:19.708]          // skip if-block "hasDormant"
[15:05:19.708]        </control>
[15:05:19.708]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:19.708]          // if-block "!hasDormant"
[15:05:19.708]            // =>  TRUE
[15:05:19.708]          <block atomic="false" info="">
[15:05:19.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:19.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.718]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:19.718]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:19.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:19.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.718]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:19.718]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:19.718]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:19.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.728]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:19.728]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:19.728]          </block>
[15:05:19.728]          // end if-block "!hasDormant"
[15:05:19.728]        </control>
[15:05:19.728]        // end if-block "isSWJ"
[15:05:19.728]      </control>
[15:05:19.728]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:19.728]        // if-block "!isSWJ"
[15:05:19.728]          // =>  FALSE
[15:05:19.728]        // skip if-block "!isSWJ"
[15:05:19.728]      </control>
[15:05:19.728]      <block atomic="false" info="">
[15:05:19.728]        ReadDP(0x0);
[15:05:19.728]  
[15:05:19.728]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:19.728]  
[15:05:19.728]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:19.728]      </block>
[15:05:19.728]      // end if-block "protType == 2"
[15:05:19.728]    </control>
[15:05:19.728]  </sequence>
[15:05:19.728]  
[15:05:19.988]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:19.988]  
[15:05:19.988]  <debugvars>
[15:05:19.988]    // Pre-defined
[15:05:19.988]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:19.988]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:19.988]    __dp=0x00000000
[15:05:19.988]    __ap=0x00000000
[15:05:19.988]    __traceout=0x00000000      (Trace Disabled)
[15:05:19.988]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:19.988]    __FlashAddr=0x00000000
[15:05:19.988]    __FlashLen=0x00000000
[15:05:19.988]    __FlashArg=0x00000000
[15:05:19.988]    __FlashOp=0x00000000
[15:05:19.988]    __Result=0x00000000
[15:05:19.988]  </debugvars>
[15:05:19.988]  
[15:05:19.988]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:19.988]    <block atomic="false" info="">
[15:05:19.988]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:19.988]        // -> [isSWJ <= 0x00000001]
[15:05:19.988]      __var hasDormant = __protocol & 0x00020000;
[15:05:19.988]        // -> [hasDormant <= 0x00000000]
[15:05:19.988]      __var protType   = __protocol & 0x0000FFFF;
[15:05:19.988]        // -> [protType <= 0x00000002]
[15:05:19.988]    </block>
[15:05:19.988]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:19.988]      // if-block "protType == 1"
[15:05:19.988]        // =>  FALSE
[15:05:19.988]      // skip if-block "protType == 1"
[15:05:19.988]    </control>
[15:05:19.988]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:19.988]      // if-block "protType == 2"
[15:05:19.988]        // =>  TRUE
[15:05:19.988]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:19.988]        // if-block "isSWJ"
[15:05:19.988]          // =>  TRUE
[15:05:19.988]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:19.988]          // if-block "hasDormant"
[15:05:19.988]            // =>  FALSE
[15:05:19.988]          // skip if-block "hasDormant"
[15:05:19.988]        </control>
[15:05:19.988]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:19.988]          // if-block "!hasDormant"
[15:05:19.988]            // =>  TRUE
[15:05:19.988]          <block atomic="false" info="">
[15:05:19.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:19.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.988]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:19.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:19.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:19.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.998]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:19.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:19.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:19.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:19.998]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:19.998]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:19.998]          </block>
[15:05:19.998]          // end if-block "!hasDormant"
[15:05:19.998]        </control>
[15:05:19.998]        // end if-block "isSWJ"
[15:05:19.998]      </control>
[15:05:19.998]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:19.998]        // if-block "!isSWJ"
[15:05:19.998]          // =>  FALSE
[15:05:19.998]        // skip if-block "!isSWJ"
[15:05:19.998]      </control>
[15:05:19.998]      <block atomic="false" info="">
[15:05:19.998]        ReadDP(0x0);
[15:05:19.998]  
[15:05:19.998]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:19.998]  
[15:05:19.998]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:19.998]      </block>
[15:05:19.998]      // end if-block "protType == 2"
[15:05:19.998]    </control>
[15:05:19.998]  </sequence>
[15:05:19.998]  
[15:05:20.249]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:20.249]  
[15:05:20.259]  <debugvars>
[15:05:20.259]    // Pre-defined
[15:05:20.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:20.259]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:20.259]    __dp=0x00000000
[15:05:20.259]    __ap=0x00000000
[15:05:20.259]    __traceout=0x00000000      (Trace Disabled)
[15:05:20.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:20.259]    __FlashAddr=0x00000000
[15:05:20.259]    __FlashLen=0x00000000
[15:05:20.259]    __FlashArg=0x00000000
[15:05:20.259]    __FlashOp=0x00000000
[15:05:20.259]    __Result=0x00000000
[15:05:20.259]  </debugvars>
[15:05:20.259]  
[15:05:20.259]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:20.259]    <block atomic="false" info="">
[15:05:20.259]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:20.259]        // -> [isSWJ <= 0x00000001]
[15:05:20.259]      __var hasDormant = __protocol & 0x00020000;
[15:05:20.259]        // -> [hasDormant <= 0x00000000]
[15:05:20.259]      __var protType   = __protocol & 0x0000FFFF;
[15:05:20.259]        // -> [protType <= 0x00000002]
[15:05:20.263]    </block>
[15:05:20.263]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:20.263]      // if-block "protType == 1"
[15:05:20.263]        // =>  FALSE
[15:05:20.263]      // skip if-block "protType == 1"
[15:05:20.263]    </control>
[15:05:20.263]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:20.263]      // if-block "protType == 2"
[15:05:20.263]        // =>  TRUE
[15:05:20.263]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:20.263]        // if-block "isSWJ"
[15:05:20.263]          // =>  TRUE
[15:05:20.263]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:20.263]          // if-block "hasDormant"
[15:05:20.263]            // =>  FALSE
[15:05:20.263]          // skip if-block "hasDormant"
[15:05:20.263]        </control>
[15:05:20.263]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:20.263]          // if-block "!hasDormant"
[15:05:20.263]            // =>  TRUE
[15:05:20.265]          <block atomic="false" info="">
[15:05:20.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:20.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.267]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:20.271]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:20.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:20.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.277]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:20.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:20.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:20.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.280]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:20.281]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:20.281]          </block>
[15:05:20.281]          // end if-block "!hasDormant"
[15:05:20.281]        </control>
[15:05:20.281]        // end if-block "isSWJ"
[15:05:20.281]      </control>
[15:05:20.281]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:20.281]        // if-block "!isSWJ"
[15:05:20.281]          // =>  FALSE
[15:05:20.281]        // skip if-block "!isSWJ"
[15:05:20.281]      </control>
[15:05:20.281]      <block atomic="false" info="">
[15:05:20.281]        ReadDP(0x0);
[15:05:20.281]  
[15:05:20.281]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:20.281]  
[15:05:20.281]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:20.281]      </block>
[15:05:20.281]      // end if-block "protType == 2"
[15:05:20.281]    </control>
[15:05:20.281]  </sequence>
[15:05:20.281]  
[15:05:20.541]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:20.541]  
[15:05:20.542]  <debugvars>
[15:05:20.542]    // Pre-defined
[15:05:20.542]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:20.542]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:20.542]    __dp=0x00000000
[15:05:20.542]    __ap=0x00000000
[15:05:20.542]    __traceout=0x00000000      (Trace Disabled)
[15:05:20.542]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:20.542]    __FlashAddr=0x00000000
[15:05:20.542]    __FlashLen=0x00000000
[15:05:20.542]    __FlashArg=0x00000000
[15:05:20.542]    __FlashOp=0x00000000
[15:05:20.542]    __Result=0x00000000
[15:05:20.542]  </debugvars>
[15:05:20.542]  
[15:05:20.542]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:20.542]    <block atomic="false" info="">
[15:05:20.542]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:20.542]        // -> [isSWJ <= 0x00000001]
[15:05:20.542]      __var hasDormant = __protocol & 0x00020000;
[15:05:20.542]        // -> [hasDormant <= 0x00000000]
[15:05:20.542]      __var protType   = __protocol & 0x0000FFFF;
[15:05:20.542]        // -> [protType <= 0x00000002]
[15:05:20.542]    </block>
[15:05:20.542]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:20.542]      // if-block "protType == 1"
[15:05:20.542]        // =>  FALSE
[15:05:20.542]      // skip if-block "protType == 1"
[15:05:20.542]    </control>
[15:05:20.542]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:20.542]      // if-block "protType == 2"
[15:05:20.542]        // =>  TRUE
[15:05:20.542]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:20.542]        // if-block "isSWJ"
[15:05:20.542]          // =>  TRUE
[15:05:20.542]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:20.542]          // if-block "hasDormant"
[15:05:20.542]            // =>  FALSE
[15:05:20.542]          // skip if-block "hasDormant"
[15:05:20.542]        </control>
[15:05:20.542]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:20.542]          // if-block "!hasDormant"
[15:05:20.542]            // =>  TRUE
[15:05:20.542]          <block atomic="false" info="">
[15:05:20.542]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:20.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.548]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:20.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:20.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:20.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.551]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:20.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:20.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:20.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.551]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:20.561]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:20.561]          </block>
[15:05:20.561]          // end if-block "!hasDormant"
[15:05:20.561]        </control>
[15:05:20.561]        // end if-block "isSWJ"
[15:05:20.561]      </control>
[15:05:20.561]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:20.561]        // if-block "!isSWJ"
[15:05:20.561]          // =>  FALSE
[15:05:20.561]        // skip if-block "!isSWJ"
[15:05:20.561]      </control>
[15:05:20.561]      <block atomic="false" info="">
[15:05:20.561]        ReadDP(0x0);
[15:05:20.564]  
[15:05:20.564]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:20.564]  
[15:05:20.564]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:20.564]      </block>
[15:05:20.564]      // end if-block "protType == 2"
[15:05:20.564]    </control>
[15:05:20.564]  </sequence>
[15:05:20.564]  
[15:05:20.814]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:20.814]  
[15:05:20.816]  <debugvars>
[15:05:20.816]    // Pre-defined
[15:05:20.816]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:20.816]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:20.816]    __dp=0x00000000
[15:05:20.816]    __ap=0x00000000
[15:05:20.816]    __traceout=0x00000000      (Trace Disabled)
[15:05:20.816]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:20.816]    __FlashAddr=0x00000000
[15:05:20.816]    __FlashLen=0x00000000
[15:05:20.816]    __FlashArg=0x00000000
[15:05:20.816]    __FlashOp=0x00000000
[15:05:20.816]    __Result=0x00000000
[15:05:20.816]  </debugvars>
[15:05:20.816]  
[15:05:20.816]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:20.816]    <block atomic="false" info="">
[15:05:20.816]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:20.816]        // -> [isSWJ <= 0x00000001]
[15:05:20.816]      __var hasDormant = __protocol & 0x00020000;
[15:05:20.816]        // -> [hasDormant <= 0x00000000]
[15:05:20.816]      __var protType   = __protocol & 0x0000FFFF;
[15:05:20.816]        // -> [protType <= 0x00000002]
[15:05:20.816]    </block>
[15:05:20.816]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:20.816]      // if-block "protType == 1"
[15:05:20.816]        // =>  FALSE
[15:05:20.816]      // skip if-block "protType == 1"
[15:05:20.816]    </control>
[15:05:20.816]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:20.816]      // if-block "protType == 2"
[15:05:20.816]        // =>  TRUE
[15:05:20.816]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:20.816]        // if-block "isSWJ"
[15:05:20.816]          // =>  TRUE
[15:05:20.816]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:20.816]          // if-block "hasDormant"
[15:05:20.816]            // =>  FALSE
[15:05:20.816]          // skip if-block "hasDormant"
[15:05:20.816]        </control>
[15:05:20.816]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:20.816]          // if-block "!hasDormant"
[15:05:20.816]            // =>  TRUE
[15:05:20.816]          <block atomic="false" info="">
[15:05:20.816]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:20.816]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.816]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:20.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:20.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:20.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.826]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:20.826]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:20.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:20.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:20.826]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:20.835]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:20.835]          </block>
[15:05:20.835]          // end if-block "!hasDormant"
[15:05:20.835]        </control>
[15:05:20.835]        // end if-block "isSWJ"
[15:05:20.835]      </control>
[15:05:20.835]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:20.835]        // if-block "!isSWJ"
[15:05:20.835]          // =>  FALSE
[15:05:20.835]        // skip if-block "!isSWJ"
[15:05:20.835]      </control>
[15:05:20.835]      <block atomic="false" info="">
[15:05:20.835]        ReadDP(0x0);
[15:05:20.835]  
[15:05:20.835]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:20.835]  
[15:05:20.835]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:20.835]      </block>
[15:05:20.835]      // end if-block "protType == 2"
[15:05:20.835]    </control>
[15:05:20.835]  </sequence>
[15:05:20.835]  
[15:05:21.089]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:21.089]  
[15:05:21.090]  <debugvars>
[15:05:21.090]    // Pre-defined
[15:05:21.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:21.090]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:21.090]    __dp=0x00000000
[15:05:21.090]    __ap=0x00000000
[15:05:21.090]    __traceout=0x00000000      (Trace Disabled)
[15:05:21.090]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:21.090]    __FlashAddr=0x00000000
[15:05:21.090]    __FlashLen=0x00000000
[15:05:21.090]    __FlashArg=0x00000000
[15:05:21.090]    __FlashOp=0x00000000
[15:05:21.090]    __Result=0x00000000
[15:05:21.090]  </debugvars>
[15:05:21.090]  
[15:05:21.092]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:21.092]    <block atomic="false" info="">
[15:05:21.092]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:21.092]        // -> [isSWJ <= 0x00000001]
[15:05:21.092]      __var hasDormant = __protocol & 0x00020000;
[15:05:21.092]        // -> [hasDormant <= 0x00000000]
[15:05:21.092]      __var protType   = __protocol & 0x0000FFFF;
[15:05:21.092]        // -> [protType <= 0x00000002]
[15:05:21.092]    </block>
[15:05:21.092]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:21.092]      // if-block "protType == 1"
[15:05:21.092]        // =>  FALSE
[15:05:21.092]      // skip if-block "protType == 1"
[15:05:21.092]    </control>
[15:05:21.092]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:21.092]      // if-block "protType == 2"
[15:05:21.092]        // =>  TRUE
[15:05:21.092]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:21.092]        // if-block "isSWJ"
[15:05:21.094]          // =>  TRUE
[15:05:21.094]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:21.094]          // if-block "hasDormant"
[15:05:21.094]            // =>  FALSE
[15:05:21.094]          // skip if-block "hasDormant"
[15:05:21.094]        </control>
[15:05:21.094]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:21.094]          // if-block "!hasDormant"
[15:05:21.094]            // =>  TRUE
[15:05:21.094]          <block atomic="false" info="">
[15:05:21.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:21.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.096]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:21.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:21.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:21.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.100]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:21.102]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:21.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:21.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.105]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:21.105]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:21.105]          </block>
[15:05:21.105]          // end if-block "!hasDormant"
[15:05:21.105]        </control>
[15:05:21.105]        // end if-block "isSWJ"
[15:05:21.105]      </control>
[15:05:21.105]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:21.105]        // if-block "!isSWJ"
[15:05:21.105]          // =>  FALSE
[15:05:21.105]        // skip if-block "!isSWJ"
[15:05:21.105]      </control>
[15:05:21.105]      <block atomic="false" info="">
[15:05:21.105]        ReadDP(0x0);
[15:05:21.110]  
[15:05:21.110]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:21.110]  
[15:05:21.110]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:21.110]      </block>
[15:05:21.110]      // end if-block "protType == 2"
[15:05:21.110]    </control>
[15:05:21.110]  </sequence>
[15:05:21.110]  
[15:05:21.365]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:21.365]  
[15:05:21.365]  <debugvars>
[15:05:21.365]    // Pre-defined
[15:05:21.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:21.365]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:21.365]    __dp=0x00000000
[15:05:21.365]    __ap=0x00000000
[15:05:21.365]    __traceout=0x00000000      (Trace Disabled)
[15:05:21.365]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:21.365]    __FlashAddr=0x00000000
[15:05:21.365]    __FlashLen=0x00000000
[15:05:21.365]    __FlashArg=0x00000000
[15:05:21.365]    __FlashOp=0x00000000
[15:05:21.365]    __Result=0x00000000
[15:05:21.365]  </debugvars>
[15:05:21.365]  
[15:05:21.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:21.365]    <block atomic="false" info="">
[15:05:21.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:21.365]        // -> [isSWJ <= 0x00000001]
[15:05:21.365]      __var hasDormant = __protocol & 0x00020000;
[15:05:21.365]        // -> [hasDormant <= 0x00000000]
[15:05:21.365]      __var protType   = __protocol & 0x0000FFFF;
[15:05:21.365]        // -> [protType <= 0x00000002]
[15:05:21.368]    </block>
[15:05:21.368]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:21.368]      // if-block "protType == 1"
[15:05:21.368]        // =>  FALSE
[15:05:21.368]      // skip if-block "protType == 1"
[15:05:21.368]    </control>
[15:05:21.369]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:21.369]      // if-block "protType == 2"
[15:05:21.369]        // =>  TRUE
[15:05:21.369]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:21.369]        // if-block "isSWJ"
[15:05:21.369]          // =>  TRUE
[15:05:21.369]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:21.369]          // if-block "hasDormant"
[15:05:21.369]            // =>  FALSE
[15:05:21.369]          // skip if-block "hasDormant"
[15:05:21.369]        </control>
[15:05:21.369]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:21.369]          // if-block "!hasDormant"
[15:05:21.369]            // =>  TRUE
[15:05:21.369]          <block atomic="false" info="">
[15:05:21.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:21.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.372]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:21.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:21.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:21.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.375]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:21.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:21.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:21.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.375]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:21.375]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:21.375]          </block>
[15:05:21.375]          // end if-block "!hasDormant"
[15:05:21.375]        </control>
[15:05:21.386]        // end if-block "isSWJ"
[15:05:21.386]      </control>
[15:05:21.386]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:21.386]        // if-block "!isSWJ"
[15:05:21.386]          // =>  FALSE
[15:05:21.386]        // skip if-block "!isSWJ"
[15:05:21.386]      </control>
[15:05:21.386]      <block atomic="false" info="">
[15:05:21.386]        ReadDP(0x0);
[15:05:21.396]  
[15:05:21.396]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:21.396]  
[15:05:21.396]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:21.396]      </block>
[15:05:21.396]      // end if-block "protType == 2"
[15:05:21.396]    </control>
[15:05:21.396]  </sequence>
[15:05:21.396]  
[15:05:21.652]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:21.652]  
[15:05:21.654]  <debugvars>
[15:05:21.654]    // Pre-defined
[15:05:21.654]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:21.654]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:21.654]    __dp=0x00000000
[15:05:21.654]    __ap=0x00000000
[15:05:21.654]    __traceout=0x00000000      (Trace Disabled)
[15:05:21.654]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:21.654]    __FlashAddr=0x00000000
[15:05:21.654]    __FlashLen=0x00000000
[15:05:21.654]    __FlashArg=0x00000000
[15:05:21.654]    __FlashOp=0x00000000
[15:05:21.654]    __Result=0x00000000
[15:05:21.654]  </debugvars>
[15:05:21.654]  
[15:05:21.654]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:21.654]    <block atomic="false" info="">
[15:05:21.654]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:21.654]        // -> [isSWJ <= 0x00000001]
[15:05:21.654]      __var hasDormant = __protocol & 0x00020000;
[15:05:21.654]        // -> [hasDormant <= 0x00000000]
[15:05:21.654]      __var protType   = __protocol & 0x0000FFFF;
[15:05:21.654]        // -> [protType <= 0x00000002]
[15:05:21.654]    </block>
[15:05:21.654]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:21.654]      // if-block "protType == 1"
[15:05:21.654]        // =>  FALSE
[15:05:21.654]      // skip if-block "protType == 1"
[15:05:21.654]    </control>
[15:05:21.654]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:21.654]      // if-block "protType == 2"
[15:05:21.654]        // =>  TRUE
[15:05:21.654]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:21.654]        // if-block "isSWJ"
[15:05:21.654]          // =>  TRUE
[15:05:21.654]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:21.654]          // if-block "hasDormant"
[15:05:21.654]            // =>  FALSE
[15:05:21.654]          // skip if-block "hasDormant"
[15:05:21.654]        </control>
[15:05:21.654]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:21.654]          // if-block "!hasDormant"
[15:05:21.654]            // =>  TRUE
[15:05:21.654]          <block atomic="false" info="">
[15:05:21.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:21.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.654]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:21.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:21.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:21.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.662]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:21.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:21.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:21.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.662]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:21.662]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:21.662]          </block>
[15:05:21.662]          // end if-block "!hasDormant"
[15:05:21.662]        </control>
[15:05:21.662]        // end if-block "isSWJ"
[15:05:21.662]      </control>
[15:05:21.662]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:21.662]        // if-block "!isSWJ"
[15:05:21.662]          // =>  FALSE
[15:05:21.662]        // skip if-block "!isSWJ"
[15:05:21.662]      </control>
[15:05:21.662]      <block atomic="false" info="">
[15:05:21.662]        ReadDP(0x0);
[15:05:21.662]  
[15:05:21.662]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:21.662]  
[15:05:21.672]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:21.672]      </block>
[15:05:21.672]      // end if-block "protType == 2"
[15:05:21.672]    </control>
[15:05:21.672]  </sequence>
[15:05:21.672]  
[15:05:21.926]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:21.926]  
[15:05:21.927]  <debugvars>
[15:05:21.927]    // Pre-defined
[15:05:21.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:21.927]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:21.927]    __dp=0x00000000
[15:05:21.927]    __ap=0x00000000
[15:05:21.927]    __traceout=0x00000000      (Trace Disabled)
[15:05:21.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:21.927]    __FlashAddr=0x00000000
[15:05:21.927]    __FlashLen=0x00000000
[15:05:21.927]    __FlashArg=0x00000000
[15:05:21.927]    __FlashOp=0x00000000
[15:05:21.927]    __Result=0x00000000
[15:05:21.927]  </debugvars>
[15:05:21.927]  
[15:05:21.927]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:21.927]    <block atomic="false" info="">
[15:05:21.927]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:21.927]        // -> [isSWJ <= 0x00000001]
[15:05:21.927]      __var hasDormant = __protocol & 0x00020000;
[15:05:21.927]        // -> [hasDormant <= 0x00000000]
[15:05:21.927]      __var protType   = __protocol & 0x0000FFFF;
[15:05:21.927]        // -> [protType <= 0x00000002]
[15:05:21.927]    </block>
[15:05:21.927]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:21.927]      // if-block "protType == 1"
[15:05:21.927]        // =>  FALSE
[15:05:21.927]      // skip if-block "protType == 1"
[15:05:21.927]    </control>
[15:05:21.927]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:21.927]      // if-block "protType == 2"
[15:05:21.927]        // =>  TRUE
[15:05:21.927]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:21.927]        // if-block "isSWJ"
[15:05:21.927]          // =>  TRUE
[15:05:21.927]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:21.927]          // if-block "hasDormant"
[15:05:21.927]            // =>  FALSE
[15:05:21.927]          // skip if-block "hasDormant"
[15:05:21.927]        </control>
[15:05:21.927]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:21.927]          // if-block "!hasDormant"
[15:05:21.927]            // =>  TRUE
[15:05:21.927]          <block atomic="false" info="">
[15:05:21.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:21.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.927]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:21.938]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:21.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:21.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.938]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:21.938]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:21.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:21.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:21.947]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:21.947]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:21.947]          </block>
[15:05:21.947]          // end if-block "!hasDormant"
[15:05:21.947]        </control>
[15:05:21.947]        // end if-block "isSWJ"
[15:05:21.947]      </control>
[15:05:21.947]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:21.947]        // if-block "!isSWJ"
[15:05:21.957]          // =>  FALSE
[15:05:21.957]        // skip if-block "!isSWJ"
[15:05:21.957]      </control>
[15:05:21.957]      <block atomic="false" info="">
[15:05:21.957]        ReadDP(0x0);
[15:05:21.957]  
[15:05:21.957]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:21.957]  
[15:05:21.957]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:21.957]      </block>
[15:05:21.957]      // end if-block "protType == 2"
[15:05:21.957]    </control>
[15:05:21.957]  </sequence>
[15:05:21.957]  
[15:05:22.210]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:22.210]  
[15:05:22.213]  <debugvars>
[15:05:22.213]    // Pre-defined
[15:05:22.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:22.213]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:22.213]    __dp=0x00000000
[15:05:22.213]    __ap=0x00000000
[15:05:22.213]    __traceout=0x00000000      (Trace Disabled)
[15:05:22.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:22.213]    __FlashAddr=0x00000000
[15:05:22.213]    __FlashLen=0x00000000
[15:05:22.213]    __FlashArg=0x00000000
[15:05:22.213]    __FlashOp=0x00000000
[15:05:22.213]    __Result=0x00000000
[15:05:22.213]  </debugvars>
[15:05:22.213]  
[15:05:22.213]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:22.213]    <block atomic="false" info="">
[15:05:22.213]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:22.213]        // -> [isSWJ <= 0x00000001]
[15:05:22.213]      __var hasDormant = __protocol & 0x00020000;
[15:05:22.213]        // -> [hasDormant <= 0x00000000]
[15:05:22.213]      __var protType   = __protocol & 0x0000FFFF;
[15:05:22.216]        // -> [protType <= 0x00000002]
[15:05:22.216]    </block>
[15:05:22.216]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:22.216]      // if-block "protType == 1"
[15:05:22.216]        // =>  FALSE
[15:05:22.216]      // skip if-block "protType == 1"
[15:05:22.216]    </control>
[15:05:22.216]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:22.216]      // if-block "protType == 2"
[15:05:22.217]        // =>  TRUE
[15:05:22.217]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:22.217]        // if-block "isSWJ"
[15:05:22.217]          // =>  TRUE
[15:05:22.217]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:22.217]          // if-block "hasDormant"
[15:05:22.217]            // =>  FALSE
[15:05:22.217]          // skip if-block "hasDormant"
[15:05:22.217]        </control>
[15:05:22.217]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:22.217]          // if-block "!hasDormant"
[15:05:22.217]            // =>  TRUE
[15:05:22.217]          <block atomic="false" info="">
[15:05:22.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:22.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:22.226]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:22.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:22.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:22.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:22.231]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:22.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:22.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:22.239]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:22.239]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:22.240]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:22.240]          </block>
[15:05:22.241]          // end if-block "!hasDormant"
[15:05:22.241]        </control>
[15:05:22.241]        // end if-block "isSWJ"
[15:05:22.241]      </control>
[15:05:22.241]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:22.241]        // if-block "!isSWJ"
[15:05:22.241]          // =>  FALSE
[15:05:22.241]        // skip if-block "!isSWJ"
[15:05:22.241]      </control>
[15:05:22.241]      <block atomic="false" info="">
[15:05:22.241]        ReadDP(0x0);
[15:05:22.243]  
[15:05:22.243]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:22.243]  
[15:05:22.243]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:22.243]      </block>
[15:05:22.244]      // end if-block "protType == 2"
[15:05:22.244]    </control>
[15:05:22.244]  </sequence>
[15:05:22.244]  
[15:05:22.505]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[15:05:22.505]  
[15:05:22.506]  <debugvars>
[15:05:22.506]    // Pre-defined
[15:05:22.506]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:22.506]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:22.506]    __dp=0x00000000
[15:05:22.506]    __ap=0x00000000
[15:05:22.506]    __traceout=0x00000000      (Trace Disabled)
[15:05:22.506]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:22.506]    __FlashAddr=0x00000000
[15:05:22.506]    __FlashLen=0x00000000
[15:05:22.506]    __FlashArg=0x00000000
[15:05:22.506]    __FlashOp=0x00000000
[15:05:22.506]    __Result=0x00000000
[15:05:22.506]  </debugvars>
[15:05:22.506]  
[15:05:22.506]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:22.506]    <block atomic="false" info="">
[15:05:22.506]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:22.506]        // -> [isSWJ <= 0x00000001]
[15:05:22.506]      __var hasDormant = __protocol & 0x00020000;
[15:05:22.506]        // -> [hasDormant <= 0x00000000]
[15:05:22.506]      __var protType   = __protocol & 0x0000FFFF;
[15:05:22.506]        // -> [protType <= 0x00000002]
[15:05:22.506]    </block>
[15:05:22.506]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:22.506]      // if-block "protType == 1"
[15:05:22.506]        // =>  FALSE
[15:05:22.506]      // skip if-block "protType == 1"
[15:05:22.506]    </control>
[15:05:22.506]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:22.506]      // if-block "protType == 2"
[15:05:22.506]        // =>  TRUE
[15:05:22.506]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:22.506]        // if-block "isSWJ"
[15:05:22.506]          // =>  TRUE
[15:05:22.506]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:22.506]          // if-block "hasDormant"
[15:05:22.506]            // =>  FALSE
[15:05:22.506]          // skip if-block "hasDormant"
[15:05:22.506]        </control>
[15:05:22.506]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:22.506]          // if-block "!hasDormant"
[15:05:22.506]            // =>  TRUE
[15:05:22.506]          <block atomic="false" info="">
[15:05:22.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:22.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:22.506]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:22.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:22.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:22.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:22.528]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:22.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:22.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:22.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:22.528]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:22.535]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:22.535]          </block>
[15:05:22.535]          // end if-block "!hasDormant"
[15:05:22.535]        </control>
[15:05:22.535]        // end if-block "isSWJ"
[15:05:22.535]      </control>
[15:05:22.535]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:22.535]        // if-block "!isSWJ"
[15:05:22.535]          // =>  FALSE
[15:05:22.535]        // skip if-block "!isSWJ"
[15:05:22.535]      </control>
[15:05:22.535]      <block atomic="false" info="">
[15:05:22.535]        ReadDP(0x0);
[15:05:22.545]  
[15:05:22.545]  !!! E310 : Debug access failed - cannot read DP register 0x00
[15:05:22.545]  
[15:05:22.545]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:22.545]      </block>
[15:05:22.545]      // end if-block "protType == 2"
[15:05:22.545]    </control>
[15:05:22.545]  </sequence>
[15:05:22.545]  
[15:05:27.523]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:05:27.523]  
[15:05:27.537]  <debugvars>
[15:05:27.537]    // Pre-defined
[15:05:27.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:27.537]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:27.537]    __dp=0x00000000
[15:05:27.537]    __ap=0x00000000
[15:05:27.537]    __traceout=0x00000000      (Trace Disabled)
[15:05:27.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:27.537]    __FlashAddr=0x00000000
[15:05:27.537]    __FlashLen=0x00000000
[15:05:27.537]    __FlashArg=0x00000000
[15:05:27.537]    __FlashOp=0x00000000
[15:05:27.537]    __Result=0x00000000
[15:05:27.537]  </debugvars>
[15:05:27.537]  
[15:05:27.537]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:05:27.537]    <block atomic="false" info="">
[15:05:27.537]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:05:27.537]        // -> [isSWJ <= 0x00000001]
[15:05:27.537]      __var hasDormant = __protocol & 0x00020000;
[15:05:27.537]        // -> [hasDormant <= 0x00000000]
[15:05:27.537]      __var protType   = __protocol & 0x0000FFFF;
[15:05:27.537]        // -> [protType <= 0x00000002]
[15:05:27.537]    </block>
[15:05:27.537]    <control if="protType == 1" while="" timeout="0" info="">
[15:05:27.537]      // if-block "protType == 1"
[15:05:27.537]        // =>  FALSE
[15:05:27.537]      // skip if-block "protType == 1"
[15:05:27.537]    </control>
[15:05:27.537]    <control if="protType == 2" while="" timeout="0" info="">
[15:05:27.537]      // if-block "protType == 2"
[15:05:27.537]        // =>  TRUE
[15:05:27.537]      <control if="isSWJ" while="" timeout="0" info="">
[15:05:27.537]        // if-block "isSWJ"
[15:05:27.537]          // =>  TRUE
[15:05:27.537]        <control if="hasDormant" while="" timeout="0" info="">
[15:05:27.537]          // if-block "hasDormant"
[15:05:27.537]            // =>  FALSE
[15:05:27.537]          // skip if-block "hasDormant"
[15:05:27.537]        </control>
[15:05:27.537]        <control if="!hasDormant" while="" timeout="0" info="">
[15:05:27.537]          // if-block "!hasDormant"
[15:05:27.537]            // =>  TRUE
[15:05:27.537]          <block atomic="false" info="">
[15:05:27.537]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:05:27.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:27.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:05:27.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:05:27.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:05:27.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:27.543]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:05:27.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:05:27.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:05:27.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:05:27.543]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:05:27.543]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:05:27.543]          </block>
[15:05:27.543]          // end if-block "!hasDormant"
[15:05:27.543]        </control>
[15:05:27.543]        // end if-block "isSWJ"
[15:05:27.543]      </control>
[15:05:27.543]      <control if="!isSWJ" while="" timeout="0" info="">
[15:05:27.543]        // if-block "!isSWJ"
[15:05:27.543]          // =>  FALSE
[15:05:27.543]        // skip if-block "!isSWJ"
[15:05:27.543]      </control>
[15:05:27.543]      <block atomic="false" info="">
[15:05:27.553]        ReadDP(0x0);
[15:05:27.553]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:05:27.563]      </block>
[15:05:27.563]      // end if-block "protType == 2"
[15:05:27.563]    </control>
[15:05:27.563]  </sequence>
[15:05:27.563]  
[15:05:27.563]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:05:27.563]  
[15:05:27.563]  <debugvars>
[15:05:27.563]    // Pre-defined
[15:05:27.563]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:27.563]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:27.563]    __dp=0x00000000
[15:05:27.563]    __ap=0x00000000
[15:05:27.563]    __traceout=0x00000000      (Trace Disabled)
[15:05:27.563]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:27.563]    __FlashAddr=0x00000000
[15:05:27.563]    __FlashLen=0x00000000
[15:05:27.563]    __FlashArg=0x00000000
[15:05:27.563]    __FlashOp=0x00000000
[15:05:27.563]    __Result=0x00000000
[15:05:27.563]  </debugvars>
[15:05:27.563]  
[15:05:27.563]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:05:27.563]    <block atomic="false" info="">
[15:05:27.563]      __var SW_DP_ABORT       = 0x0;
[15:05:27.563]        // -> [SW_DP_ABORT <= 0x00000000]
[15:05:27.563]      __var DP_CTRL_STAT      = 0x4;
[15:05:27.563]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:05:27.563]      __var DP_SELECT         = 0x8;
[15:05:27.563]        // -> [DP_SELECT <= 0x00000008]
[15:05:27.563]      __var powered_down      = 0;
[15:05:27.563]        // -> [powered_down <= 0x00000000]
[15:05:27.563]      WriteDP(DP_SELECT, 0x00000000);
[15:05:27.563]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:05:27.573]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:05:27.573]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:05:27.573]        // -> [powered_down <= 0x00000001]
[15:05:27.573]    </block>
[15:05:27.573]    <control if="powered_down" while="" timeout="0" info="">
[15:05:27.573]      // if-block "powered_down"
[15:05:27.573]        // =>  TRUE
[15:05:27.573]      <block atomic="false" info="">
[15:05:27.573]        Message(0, "Debug/System power-up request sent");
[15:05:27.573]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:05:27.573]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:05:27.573]      </block>
[15:05:27.573]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:05:27.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:05:27.573]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:05:27.573]        // while-condition  =>  FALSE
[15:05:27.573]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:05:27.573]      </control>
[15:05:27.573]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:05:27.573]        // if-block "(__protocol & 0xFFFF) == 1"
[15:05:27.573]          // =>  FALSE
[15:05:27.573]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:05:27.573]      </control>
[15:05:27.573]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:05:27.583]        // if-block "(__protocol & 0xFFFF) == 2"
[15:05:27.583]          // =>  TRUE
[15:05:27.583]        <block atomic="false" info="">
[15:05:27.583]          Message(0, "executing SWD power up");
[15:05:27.583]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:05:27.583]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:05:27.583]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:05:27.583]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:05:27.583]        </block>
[15:05:27.583]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:05:27.583]      </control>
[15:05:27.583]      // end if-block "powered_down"
[15:05:27.583]    </control>
[15:05:27.583]    <block atomic="false" info="">
[15:05:27.583]      __var DEBUG_PORT_VAL    = 0;
[15:05:27.583]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:05:27.583]      __var ACCESS_POINT_VAL  = 0;
[15:05:27.583]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:05:27.583]      __ap = 1; 
[15:05:27.583]        // -> [__ap <= 0x00000001]
[15:05:27.583]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:05:27.583]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:05:27.583]      __ap = 4;
[15:05:27.593]        // -> [__ap <= 0x00000004]
[15:05:27.593]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:05:27.593]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:05:27.593]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:05:27.593]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:05:27.593]    </block>
[15:05:27.593]    <block atomic="false" info="">
[15:05:27.593]      __var nReset = 0x80;
[15:05:27.593]        // -> [nReset <= 0x00000080]
[15:05:27.593]      __var canReadPins = 0;
[15:05:27.593]        // -> [canReadPins <= 0x00000000]
[15:05:27.593]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:05:27.593]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:05:27.593]        // -> [canReadPins <= 0x00000001]
[15:05:27.593]    </block>
[15:05:27.593]    <control if="" while="1" timeout="200" info="">
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.603]      // while "1"  (timeout="200")
[15:05:27.603]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.614]      // while-condition  =>  TRUE
[15:05:27.614]      // while "1"  (timeout="200")
[15:05:27.624]      // while-condition  =>  TRUE
[15:05:27.624]      // while "1"  (timeout="200")
[15:05:27.624]      // while  =>  TIMEOUT
[15:05:27.624]      // end while "1"
[15:05:27.624]    </control>
[15:05:27.624]    <control if="canReadPins" while="" timeout="0" info="">
[15:05:27.624]      // if-block "canReadPins"
[15:05:27.624]        // =>  TRUE
[15:05:27.624]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:05:27.624]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:05:27.624]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:05:27.624]        // while-condition  =>  FALSE
[15:05:27.624]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:05:27.624]      </control>
[15:05:27.624]      // end if-block "canReadPins"
[15:05:27.624]    </control>
[15:05:27.624]    <control if="!canReadPins" while="" timeout="0" info="">
[15:05:27.624]      // if-block "!canReadPins"
[15:05:27.624]        // =>  FALSE
[15:05:27.624]      // skip if-block "!canReadPins"
[15:05:27.624]    </control>
[15:05:27.624]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:05:27.624]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:05:27.624]        // =>  TRUE
[15:05:27.624]      <block atomic="false" info="">
[15:05:27.624]        WriteAP(0x00, 0x190008);
[15:05:27.624]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:05:27.624]        WriteAP(0xF0, 0x01);
[15:05:27.634]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:05:27.634]      </block>
[15:05:27.634]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:05:27.634]    </control>
[15:05:27.634]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:05:27.634]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:05:27.634]        // =>  FALSE
[15:05:27.634]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:05:27.634]    </control>
[15:05:27.634]    <block atomic="false" info="">
[15:05:27.634]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:05:27.634]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:05:27.634]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:05:27.634]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:05:27.634]      __ap = 0; //lets make sure we reset the access point selection
[15:05:27.634]        // -> [__ap <= 0x00000000]
[15:05:27.644]    </block>
[15:05:27.644]  </sequence>
[15:05:27.644]  
[15:05:27.664]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:05:27.664]  
[15:05:27.664]  <debugvars>
[15:05:27.664]    // Pre-defined
[15:05:27.664]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:05:27.664]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:05:27.664]    __dp=0x00000000
[15:05:27.664]    __ap=0x00000000
[15:05:27.664]    __traceout=0x00000000      (Trace Disabled)
[15:05:27.664]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:05:27.664]    __FlashAddr=0x00000000
[15:05:27.664]    __FlashLen=0x00000000
[15:05:27.664]    __FlashArg=0x00000000
[15:05:27.664]    __FlashOp=0x00000000
[15:05:27.664]    __Result=0x00000000
[15:05:27.664]  </debugvars>
[15:05:27.664]  
[15:05:27.664]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:05:27.664]    <block atomic="false" info="">
[15:05:27.664]      __var deviceID = 0;
[15:05:27.664]        // -> [deviceID <= 0x00000000]
[15:05:27.664]      __var version = 0;
[15:05:27.664]        // -> [version <= 0x00000000]
[15:05:27.664]      __var partNum = 0;
[15:05:27.664]        // -> [partNum <= 0x00000000]
[15:05:27.664]      __var manuf = 0;
[15:05:27.664]        // -> [manuf <= 0x00000000]
[15:05:27.664]      __var isMSPM0G1X0X_G3X0X = 0;
[15:05:27.664]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:05:27.664]      __var isProduction = 0;
[15:05:27.664]        // -> [isProduction <= 0x00000000]
[15:05:27.664]      __var continueId = 0;
[15:05:27.664]        // -> [continueId <= 0x00000000]
[15:05:27.664]      deviceID =   Read32(0x41C40004);
[15:05:27.674]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:05:27.674]        // -> [deviceID <= 0x2BB8802F]
[15:05:27.674]      version = deviceID >> 28;
[15:05:27.674]        // -> [version <= 0x00000002]
[15:05:27.674]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:05:27.674]        // -> [partNum <= 0x0000BB88]
[15:05:27.674]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:05:27.674]        // -> [manuf <= 0x00000017]
[15:05:27.674]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:05:27.674]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:05:27.674]      isProduction = (version > 0);
[15:05:27.674]        // -> [isProduction <= 0x00000001]
[15:05:27.674]    </block>
[15:05:27.674]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:05:27.674]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:05:27.674]        // =>  FALSE
[15:05:27.674]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:05:27.674]    </control>
[15:05:27.674]    <control if="continueId == 4" while="" timeout="0" info="">
[15:05:27.674]      // if-block "continueId == 4"
[15:05:27.674]        // =>  FALSE
[15:05:27.674]      // skip if-block "continueId == 4"
[15:05:27.674]    </control>
[15:05:27.674]    <control if="!isProduction" while="" timeout="0" info="">
[15:05:27.674]      // if-block "!isProduction"
[15:05:27.674]        // =>  FALSE
[15:05:27.674]      // skip if-block "!isProduction"
[15:05:27.674]    </control>
[15:05:27.674]  </sequence>
[15:05:27.674]  
[15:08:51.801]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:08:51.801]  
[15:08:51.815]  <debugvars>
[15:08:51.815]    // Pre-defined
[15:08:51.815]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:08:51.815]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:08:51.815]    __dp=0x00000000
[15:08:51.815]    __ap=0x00000000
[15:08:51.815]    __traceout=0x00000000      (Trace Disabled)
[15:08:51.815]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:08:51.815]    __FlashAddr=0x00000000
[15:08:51.815]    __FlashLen=0x00000000
[15:08:51.815]    __FlashArg=0x00000000
[15:08:51.815]    __FlashOp=0x00000000
[15:08:51.815]    __Result=0x00000000
[15:08:51.815]  </debugvars>
[15:08:51.815]  
[15:08:51.815]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:08:51.815]    <block atomic="false" info="">
[15:08:51.815]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:08:51.815]        // -> [isSWJ <= 0x00000001]
[15:08:51.815]      __var hasDormant = __protocol & 0x00020000;
[15:08:51.815]        // -> [hasDormant <= 0x00000000]
[15:08:51.815]      __var protType   = __protocol & 0x0000FFFF;
[15:08:51.815]        // -> [protType <= 0x00000002]
[15:08:51.815]    </block>
[15:08:51.815]    <control if="protType == 1" while="" timeout="0" info="">
[15:08:51.815]      // if-block "protType == 1"
[15:08:51.815]        // =>  FALSE
[15:08:51.815]      // skip if-block "protType == 1"
[15:08:51.815]    </control>
[15:08:51.815]    <control if="protType == 2" while="" timeout="0" info="">
[15:08:51.815]      // if-block "protType == 2"
[15:08:51.815]        // =>  TRUE
[15:08:51.815]      <control if="isSWJ" while="" timeout="0" info="">
[15:08:51.815]        // if-block "isSWJ"
[15:08:51.815]          // =>  TRUE
[15:08:51.815]        <control if="hasDormant" while="" timeout="0" info="">
[15:08:51.815]          // if-block "hasDormant"
[15:08:51.815]            // =>  FALSE
[15:08:51.815]          // skip if-block "hasDormant"
[15:08:51.815]        </control>
[15:08:51.815]        <control if="!hasDormant" while="" timeout="0" info="">
[15:08:51.815]          // if-block "!hasDormant"
[15:08:51.815]            // =>  TRUE
[15:08:51.815]          <block atomic="false" info="">
[15:08:51.815]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:08:51.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:08:51.821]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:08:51.821]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:08:51.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:08:51.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:08:51.821]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:08:51.821]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:08:51.821]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:08:51.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:08:51.831]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:08:51.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:08:51.831]          </block>
[15:08:51.831]          // end if-block "!hasDormant"
[15:08:51.831]        </control>
[15:08:51.831]        // end if-block "isSWJ"
[15:08:51.831]      </control>
[15:08:51.831]      <control if="!isSWJ" while="" timeout="0" info="">
[15:08:51.831]        // if-block "!isSWJ"
[15:08:51.831]          // =>  FALSE
[15:08:51.831]        // skip if-block "!isSWJ"
[15:08:51.831]      </control>
[15:08:51.831]      <block atomic="false" info="">
[15:08:51.831]        ReadDP(0x0);
[15:08:51.831]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:08:51.831]      </block>
[15:08:51.831]      // end if-block "protType == 2"
[15:08:51.831]    </control>
[15:08:51.831]  </sequence>
[15:08:51.831]  
[15:08:51.831]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:08:51.831]  
[15:08:51.831]  <debugvars>
[15:08:51.831]    // Pre-defined
[15:08:51.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:08:51.831]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:08:51.831]    __dp=0x00000000
[15:08:51.831]    __ap=0x00000000
[15:08:51.831]    __traceout=0x00000000      (Trace Disabled)
[15:08:51.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:08:51.841]    __FlashAddr=0x00000000
[15:08:51.841]    __FlashLen=0x00000000
[15:08:51.841]    __FlashArg=0x00000000
[15:08:51.841]    __FlashOp=0x00000000
[15:08:51.841]    __Result=0x00000000
[15:08:51.841]  </debugvars>
[15:08:51.841]  
[15:08:51.842]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:08:51.842]    <block atomic="false" info="">
[15:08:51.842]      __var SW_DP_ABORT       = 0x0;
[15:08:51.842]        // -> [SW_DP_ABORT <= 0x00000000]
[15:08:51.842]      __var DP_CTRL_STAT      = 0x4;
[15:08:51.842]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:08:51.842]      __var DP_SELECT         = 0x8;
[15:08:51.842]        // -> [DP_SELECT <= 0x00000008]
[15:08:51.842]      __var powered_down      = 0;
[15:08:51.842]        // -> [powered_down <= 0x00000000]
[15:08:51.842]      WriteDP(DP_SELECT, 0x00000000);
[15:08:51.844]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:08:51.844]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:08:51.853]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:08:51.853]        // -> [powered_down <= 0x00000001]
[15:08:51.853]    </block>
[15:08:51.853]    <control if="powered_down" while="" timeout="0" info="">
[15:08:51.853]      // if-block "powered_down"
[15:08:51.853]        // =>  TRUE
[15:08:51.853]      <block atomic="false" info="">
[15:08:51.857]        Message(0, "Debug/System power-up request sent");
[15:08:51.858]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:08:51.863]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:08:51.863]      </block>
[15:08:51.863]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:08:51.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:08:51.869]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:08:51.869]        // while-condition  =>  FALSE
[15:08:51.870]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:08:51.870]      </control>
[15:08:51.870]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:08:51.870]        // if-block "(__protocol & 0xFFFF) == 1"
[15:08:51.870]          // =>  FALSE
[15:08:51.870]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:08:51.870]      </control>
[15:08:51.870]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:08:51.870]        // if-block "(__protocol & 0xFFFF) == 2"
[15:08:51.870]          // =>  TRUE
[15:08:51.870]        <block atomic="false" info="">
[15:08:51.870]          Message(0, "executing SWD power up");
[15:08:51.872]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:08:51.872]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:08:51.872]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:08:51.872]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:08:51.872]        </block>
[15:08:51.872]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:08:51.872]      </control>
[15:08:51.872]      // end if-block "powered_down"
[15:08:51.872]    </control>
[15:08:51.872]    <block atomic="false" info="">
[15:08:51.872]      __var DEBUG_PORT_VAL    = 0;
[15:08:51.872]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:08:51.872]      __var ACCESS_POINT_VAL  = 0;
[15:08:51.879]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:08:51.879]      __ap = 1; 
[15:08:51.879]        // -> [__ap <= 0x00000001]
[15:08:51.879]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:08:51.881]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:08:51.881]      __ap = 4;
[15:08:51.881]        // -> [__ap <= 0x00000004]
[15:08:51.881]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:08:51.885]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:08:51.885]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:08:51.887]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:08:51.888]    </block>
[15:08:51.888]    <block atomic="false" info="">
[15:08:51.888]      __var nReset = 0x80;
[15:08:51.888]        // -> [nReset <= 0x00000080]
[15:08:51.888]      __var canReadPins = 0;
[15:08:51.888]        // -> [canReadPins <= 0x00000000]
[15:08:51.888]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:08:51.890]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:08:51.890]        // -> [canReadPins <= 0x00000001]
[15:08:51.890]    </block>
[15:08:51.890]    <control if="" while="1" timeout="200" info="">
[15:08:51.890]      // while "1"  (timeout="200")
[15:08:51.890]      // while-condition  =>  TRUE
[15:08:51.890]      // while "1"  (timeout="200")
[15:08:51.890]      // while-condition  =>  TRUE
[15:08:51.890]      // while "1"  (timeout="200")
[15:08:51.890]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.892]      // while-condition  =>  TRUE
[15:08:51.892]      // while "1"  (timeout="200")
[15:08:51.895]      // while-condition  =>  TRUE
[15:08:51.895]      // while "1"  (timeout="200")
[15:08:51.895]      // while-condition  =>  TRUE
[15:08:51.896]      // while "1"  (timeout="200")
[15:08:51.896]      // while-condition  =>  TRUE
[15:08:51.896]      // while "1"  (timeout="200")
[15:08:51.896]      // while-condition  =>  TRUE
[15:08:51.896]      // while "1"  (timeout="200")
[15:08:51.896]      // while-condition  =>  TRUE
[15:08:51.896]      // while "1"  (timeout="200")
[15:08:51.896]      // while-condition  =>  TRUE
[15:08:51.896]      // while "1"  (timeout="200")
[15:08:51.896]      // while-condition  =>  TRUE
[15:08:51.897]      // while "1"  (timeout="200")
[15:08:51.897]      // while  =>  TIMEOUT
[15:08:51.897]      // end while "1"
[15:08:51.897]    </control>
[15:08:51.897]    <control if="canReadPins" while="" timeout="0" info="">
[15:08:51.897]      // if-block "canReadPins"
[15:08:51.897]        // =>  TRUE
[15:08:51.897]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:08:51.897]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:08:51.899]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:08:51.899]        // while-condition  =>  FALSE
[15:08:51.901]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:08:51.901]      </control>
[15:08:51.901]      // end if-block "canReadPins"
[15:08:51.901]    </control>
[15:08:51.901]    <control if="!canReadPins" while="" timeout="0" info="">
[15:08:51.901]      // if-block "!canReadPins"
[15:08:51.901]        // =>  FALSE
[15:08:51.901]      // skip if-block "!canReadPins"
[15:08:51.901]    </control>
[15:08:51.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:08:51.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:08:51.901]        // =>  TRUE
[15:08:51.901]      <block atomic="false" info="">
[15:08:51.901]        WriteAP(0x00, 0x190008);
[15:08:51.902]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:08:51.902]        WriteAP(0xF0, 0x01);
[15:08:51.912]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:08:51.912]      </block>
[15:08:51.912]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:08:51.912]    </control>
[15:08:51.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:08:51.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:08:51.912]        // =>  FALSE
[15:08:51.912]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:08:51.912]    </control>
[15:08:51.912]    <block atomic="false" info="">
[15:08:51.912]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:08:51.912]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:08:51.912]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:08:51.912]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:08:51.912]      __ap = 0; //lets make sure we reset the access point selection
[15:08:51.912]        // -> [__ap <= 0x00000000]
[15:08:51.912]    </block>
[15:08:51.912]  </sequence>
[15:08:51.912]  
[15:08:51.942]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:08:51.942]  
[15:08:51.942]  <debugvars>
[15:08:51.942]    // Pre-defined
[15:08:51.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:08:51.942]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:08:51.942]    __dp=0x00000000
[15:08:51.942]    __ap=0x00000000
[15:08:51.942]    __traceout=0x00000000      (Trace Disabled)
[15:08:51.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:08:51.942]    __FlashAddr=0x00000000
[15:08:51.942]    __FlashLen=0x00000000
[15:08:51.942]    __FlashArg=0x00000000
[15:08:51.942]    __FlashOp=0x00000000
[15:08:51.942]    __Result=0x00000000
[15:08:51.942]  </debugvars>
[15:08:51.942]  
[15:08:51.942]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:08:51.942]    <block atomic="false" info="">
[15:08:51.952]      __var deviceID = 0;
[15:08:51.952]        // -> [deviceID <= 0x00000000]
[15:08:51.952]      __var version = 0;
[15:08:51.952]        // -> [version <= 0x00000000]
[15:08:51.952]      __var partNum = 0;
[15:08:51.952]        // -> [partNum <= 0x00000000]
[15:08:51.952]      __var manuf = 0;
[15:08:51.952]        // -> [manuf <= 0x00000000]
[15:08:51.952]      __var isMSPM0G1X0X_G3X0X = 0;
[15:08:51.952]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:08:51.954]      __var isProduction = 0;
[15:08:51.954]        // -> [isProduction <= 0x00000000]
[15:08:51.954]      __var continueId = 0;
[15:08:51.954]        // -> [continueId <= 0x00000000]
[15:08:51.954]      deviceID =   Read32(0x41C40004);
[15:08:51.961]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:08:51.963]        // -> [deviceID <= 0x2BB8802F]
[15:08:51.963]      version = deviceID >> 28;
[15:08:51.963]        // -> [version <= 0x00000002]
[15:08:51.963]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:08:51.963]        // -> [partNum <= 0x0000BB88]
[15:08:51.963]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:08:51.963]        // -> [manuf <= 0x00000017]
[15:08:51.963]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:08:51.963]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:08:51.963]      isProduction = (version > 0);
[15:08:51.963]        // -> [isProduction <= 0x00000001]
[15:08:51.963]    </block>
[15:08:51.963]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:08:51.963]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:08:51.963]        // =>  FALSE
[15:08:51.963]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:08:51.965]    </control>
[15:08:51.965]    <control if="continueId == 4" while="" timeout="0" info="">
[15:08:51.965]      // if-block "continueId == 4"
[15:08:51.965]        // =>  FALSE
[15:08:51.965]      // skip if-block "continueId == 4"
[15:08:51.965]    </control>
[15:08:51.965]    <control if="!isProduction" while="" timeout="0" info="">
[15:08:51.965]      // if-block "!isProduction"
[15:08:51.965]        // =>  FALSE
[15:08:51.965]      // skip if-block "!isProduction"
[15:08:51.966]    </control>
[15:08:51.966]  </sequence>
[15:08:51.966]  
[15:14:18.302]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:14:18.302]  
[15:14:18.302]  <debugvars>
[15:14:18.302]    // Pre-defined
[15:14:18.302]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:14:18.302]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:14:18.302]    __dp=0x00000000
[15:14:18.302]    __ap=0x00000000
[15:14:18.302]    __traceout=0x00000000      (Trace Disabled)
[15:14:18.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:14:18.302]    __FlashAddr=0x00000000
[15:14:18.302]    __FlashLen=0x00000000
[15:14:18.302]    __FlashArg=0x00000000
[15:14:18.302]    __FlashOp=0x00000000
[15:14:18.302]    __Result=0x00000000
[15:14:18.302]  </debugvars>
[15:14:18.302]  
[15:14:18.302]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:14:18.302]    <block atomic="false" info="">
[15:14:18.302]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:14:18.302]        // -> [isSWJ <= 0x00000001]
[15:14:18.302]      __var hasDormant = __protocol & 0x00020000;
[15:14:18.302]        // -> [hasDormant <= 0x00000000]
[15:14:18.308]      __var protType   = __protocol & 0x0000FFFF;
[15:14:18.308]        // -> [protType <= 0x00000002]
[15:14:18.308]    </block>
[15:14:18.308]    <control if="protType == 1" while="" timeout="0" info="">
[15:14:18.308]      // if-block "protType == 1"
[15:14:18.308]        // =>  FALSE
[15:14:18.308]      // skip if-block "protType == 1"
[15:14:18.308]    </control>
[15:14:18.308]    <control if="protType == 2" while="" timeout="0" info="">
[15:14:18.308]      // if-block "protType == 2"
[15:14:18.308]        // =>  TRUE
[15:14:18.308]      <control if="isSWJ" while="" timeout="0" info="">
[15:14:18.308]        // if-block "isSWJ"
[15:14:18.308]          // =>  TRUE
[15:14:18.308]        <control if="hasDormant" while="" timeout="0" info="">
[15:14:18.308]          // if-block "hasDormant"
[15:14:18.308]            // =>  FALSE
[15:14:18.308]          // skip if-block "hasDormant"
[15:14:18.308]        </control>
[15:14:18.308]        <control if="!hasDormant" while="" timeout="0" info="">
[15:14:18.308]          // if-block "!hasDormant"
[15:14:18.308]            // =>  TRUE
[15:14:18.308]          <block atomic="false" info="">
[15:14:18.308]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:14:18.312]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:14:18.312]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:14:18.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:14:18.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:14:18.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:14:18.318]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:14:18.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:14:18.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:14:18.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:14:18.324]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:14:18.325]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:14:18.328]          </block>
[15:14:18.328]          // end if-block "!hasDormant"
[15:14:18.328]        </control>
[15:14:18.328]        // end if-block "isSWJ"
[15:14:18.328]      </control>
[15:14:18.328]      <control if="!isSWJ" while="" timeout="0" info="">
[15:14:18.328]        // if-block "!isSWJ"
[15:14:18.328]          // =>  FALSE
[15:14:18.328]        // skip if-block "!isSWJ"
[15:14:18.328]      </control>
[15:14:18.328]      <block atomic="false" info="">
[15:14:18.328]        ReadDP(0x0);
[15:14:18.328]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:14:18.328]      </block>
[15:14:18.328]      // end if-block "protType == 2"
[15:14:18.328]    </control>
[15:14:18.328]  </sequence>
[15:14:18.332]  
[15:14:18.332]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:14:18.332]  
[15:14:18.332]  <debugvars>
[15:14:18.332]    // Pre-defined
[15:14:18.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:14:18.332]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:14:18.332]    __dp=0x00000000
[15:14:18.332]    __ap=0x00000000
[15:14:18.332]    __traceout=0x00000000      (Trace Disabled)
[15:14:18.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:14:18.332]    __FlashAddr=0x00000000
[15:14:18.332]    __FlashLen=0x00000000
[15:14:18.332]    __FlashArg=0x00000000
[15:14:18.332]    __FlashOp=0x00000000
[15:14:18.332]    __Result=0x00000000
[15:14:18.332]  </debugvars>
[15:14:18.332]  
[15:14:18.332]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:14:18.332]    <block atomic="false" info="">
[15:14:18.332]      __var SW_DP_ABORT       = 0x0;
[15:14:18.332]        // -> [SW_DP_ABORT <= 0x00000000]
[15:14:18.332]      __var DP_CTRL_STAT      = 0x4;
[15:14:18.332]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:14:18.332]      __var DP_SELECT         = 0x8;
[15:14:18.332]        // -> [DP_SELECT <= 0x00000008]
[15:14:18.332]      __var powered_down      = 0;
[15:14:18.332]        // -> [powered_down <= 0x00000000]
[15:14:18.332]      WriteDP(DP_SELECT, 0x00000000);
[15:14:18.342]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:14:18.342]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:14:18.344]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:14:18.344]        // -> [powered_down <= 0x00000001]
[15:14:18.344]    </block>
[15:14:18.344]    <control if="powered_down" while="" timeout="0" info="">
[15:14:18.344]      // if-block "powered_down"
[15:14:18.344]        // =>  TRUE
[15:14:18.344]      <block atomic="false" info="">
[15:14:18.344]        Message(0, "Debug/System power-up request sent");
[15:14:18.344]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:14:18.348]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:14:18.348]      </block>
[15:14:18.348]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:14:18.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:14:18.348]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:14:18.348]        // while-condition  =>  FALSE
[15:14:18.348]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:14:18.348]      </control>
[15:14:18.348]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:14:18.348]        // if-block "(__protocol & 0xFFFF) == 1"
[15:14:18.348]          // =>  FALSE
[15:14:18.348]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:14:18.348]      </control>
[15:14:18.348]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:14:18.348]        // if-block "(__protocol & 0xFFFF) == 2"
[15:14:18.353]          // =>  TRUE
[15:14:18.353]        <block atomic="false" info="">
[15:14:18.353]          Message(0, "executing SWD power up");
[15:14:18.355]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:14:18.355]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:14:18.355]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:14:18.355]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:14:18.355]        </block>
[15:14:18.355]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:14:18.355]      </control>
[15:14:18.355]      // end if-block "powered_down"
[15:14:18.355]    </control>
[15:14:18.355]    <block atomic="false" info="">
[15:14:18.355]      __var DEBUG_PORT_VAL    = 0;
[15:14:18.355]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:14:18.355]      __var ACCESS_POINT_VAL  = 0;
[15:14:18.355]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:14:18.355]      __ap = 1; 
[15:14:18.355]        // -> [__ap <= 0x00000001]
[15:14:18.355]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:14:18.363]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:14:18.363]      __ap = 4;
[15:14:18.363]        // -> [__ap <= 0x00000004]
[15:14:18.363]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:14:18.374]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:14:18.374]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:14:18.374]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:14:18.378]    </block>
[15:14:18.378]    <block atomic="false" info="">
[15:14:18.378]      __var nReset = 0x80;
[15:14:18.379]        // -> [nReset <= 0x00000080]
[15:14:18.379]      __var canReadPins = 0;
[15:14:18.379]        // -> [canReadPins <= 0x00000000]
[15:14:18.379]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:14:18.380]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:14:18.380]        // -> [canReadPins <= 0x00000001]
[15:14:18.380]    </block>
[15:14:18.380]    <control if="" while="1" timeout="200" info="">
[15:14:18.380]      // while "1"  (timeout="200")
[15:14:18.382]      // while-condition  =>  TRUE
[15:14:18.382]      // while "1"  (timeout="200")
[15:14:18.382]      // while  =>  TIMEOUT
[15:14:18.382]      // end while "1"
[15:14:18.382]    </control>
[15:14:18.382]    <control if="canReadPins" while="" timeout="0" info="">
[15:14:18.382]      // if-block "canReadPins"
[15:14:18.382]        // =>  TRUE
[15:14:18.382]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:14:18.382]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:14:18.385]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:14:18.385]        // while-condition  =>  FALSE
[15:14:18.385]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:14:18.385]      </control>
[15:14:18.385]      // end if-block "canReadPins"
[15:14:18.385]    </control>
[15:14:18.385]    <control if="!canReadPins" while="" timeout="0" info="">
[15:14:18.385]      // if-block "!canReadPins"
[15:14:18.385]        // =>  FALSE
[15:14:18.385]      // skip if-block "!canReadPins"
[15:14:18.385]    </control>
[15:14:18.385]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:14:18.385]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:14:18.385]        // =>  TRUE
[15:14:18.385]      <block atomic="false" info="">
[15:14:18.385]        WriteAP(0x00, 0x190008);
[15:14:18.385]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:14:18.385]        WriteAP(0xF0, 0x01);
[15:14:18.393]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:14:18.393]      </block>
[15:14:18.393]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:14:18.393]    </control>
[15:14:18.393]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:14:18.393]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:14:18.393]        // =>  FALSE
[15:14:18.393]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:14:18.393]    </control>
[15:14:18.393]    <block atomic="false" info="">
[15:14:18.393]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:14:18.393]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:14:18.393]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:14:18.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:14:18.393]      __ap = 0; //lets make sure we reset the access point selection
[15:14:18.393]        // -> [__ap <= 0x00000000]
[15:14:18.393]    </block>
[15:14:18.393]  </sequence>
[15:14:18.393]  
[15:14:18.435]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:14:18.435]  
[15:14:18.435]  <debugvars>
[15:14:18.435]    // Pre-defined
[15:14:18.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:14:18.435]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:14:18.435]    __dp=0x00000000
[15:14:18.435]    __ap=0x00000000
[15:14:18.435]    __traceout=0x00000000      (Trace Disabled)
[15:14:18.435]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:14:18.435]    __FlashAddr=0x00000000
[15:14:18.435]    __FlashLen=0x00000000
[15:14:18.435]    __FlashArg=0x00000000
[15:14:18.435]    __FlashOp=0x00000000
[15:14:18.435]    __Result=0x00000000
[15:14:18.435]  </debugvars>
[15:14:18.435]  
[15:14:18.435]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:14:18.435]    <block atomic="false" info="">
[15:14:18.435]      __var deviceID = 0;
[15:14:18.435]        // -> [deviceID <= 0x00000000]
[15:14:18.435]      __var version = 0;
[15:14:18.435]        // -> [version <= 0x00000000]
[15:14:18.435]      __var partNum = 0;
[15:14:18.441]        // -> [partNum <= 0x00000000]
[15:14:18.441]      __var manuf = 0;
[15:14:18.441]        // -> [manuf <= 0x00000000]
[15:14:18.441]      __var isMSPM0G1X0X_G3X0X = 0;
[15:14:18.441]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:14:18.441]      __var isProduction = 0;
[15:14:18.441]        // -> [isProduction <= 0x00000000]
[15:14:18.441]      __var continueId = 0;
[15:14:18.441]        // -> [continueId <= 0x00000000]
[15:14:18.441]      deviceID =   Read32(0x41C40004);
[15:14:18.443]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:14:18.443]        // -> [deviceID <= 0x2BB8802F]
[15:14:18.443]      version = deviceID >> 28;
[15:14:18.443]        // -> [version <= 0x00000002]
[15:14:18.443]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:14:18.443]        // -> [partNum <= 0x0000BB88]
[15:14:18.443]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:14:18.443]        // -> [manuf <= 0x00000017]
[15:14:18.443]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:14:18.443]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:14:18.443]      isProduction = (version > 0);
[15:14:18.443]        // -> [isProduction <= 0x00000001]
[15:14:18.443]    </block>
[15:14:18.443]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:14:18.443]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:14:18.443]        // =>  FALSE
[15:14:18.443]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:14:18.443]    </control>
[15:14:18.443]    <control if="continueId == 4" while="" timeout="0" info="">
[15:14:18.443]      // if-block "continueId == 4"
[15:14:18.443]        // =>  FALSE
[15:14:18.443]      // skip if-block "continueId == 4"
[15:14:18.443]    </control>
[15:14:18.443]    <control if="!isProduction" while="" timeout="0" info="">
[15:14:18.443]      // if-block "!isProduction"
[15:14:18.443]        // =>  FALSE
[15:14:18.443]      // skip if-block "!isProduction"
[15:14:18.443]    </control>
[15:14:18.443]  </sequence>
[15:14:18.449]  
[15:14:24.181]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:14:24.181]  
[15:14:24.181]  <debugvars>
[15:14:24.181]    // Pre-defined
[15:14:24.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:14:24.181]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:14:24.181]    __dp=0x00000000
[15:14:24.181]    __ap=0x00000000
[15:14:24.181]    __traceout=0x00000000      (Trace Disabled)
[15:14:24.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:14:24.181]    __FlashAddr=0x00000000
[15:14:24.181]    __FlashLen=0x00000000
[15:14:24.181]    __FlashArg=0x00000000
[15:14:24.181]    __FlashOp=0x00000000
[15:14:24.181]    __Result=0x00000000
[15:14:24.181]  </debugvars>
[15:14:24.181]  
[15:14:24.181]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:14:24.181]    <block atomic="false" info="">
[15:14:24.181]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:14:24.181]        // -> [isSWJ <= 0x00000001]
[15:14:24.181]      __var hasDormant = __protocol & 0x00020000;
[15:14:24.181]        // -> [hasDormant <= 0x00000000]
[15:14:24.181]      __var protType   = __protocol & 0x0000FFFF;
[15:14:24.181]        // -> [protType <= 0x00000002]
[15:14:24.181]    </block>
[15:14:24.181]    <control if="protType == 1" while="" timeout="0" info="">
[15:14:24.181]      // if-block "protType == 1"
[15:14:24.181]        // =>  FALSE
[15:14:24.181]      // skip if-block "protType == 1"
[15:14:24.181]    </control>
[15:14:24.181]    <control if="protType == 2" while="" timeout="0" info="">
[15:14:24.181]      // if-block "protType == 2"
[15:14:24.181]        // =>  TRUE
[15:14:24.181]      <control if="isSWJ" while="" timeout="0" info="">
[15:14:24.181]        // if-block "isSWJ"
[15:14:24.181]          // =>  TRUE
[15:14:24.181]        <control if="hasDormant" while="" timeout="0" info="">
[15:14:24.181]          // if-block "hasDormant"
[15:14:24.181]            // =>  FALSE
[15:14:24.181]          // skip if-block "hasDormant"
[15:14:24.181]        </control>
[15:14:24.181]        <control if="!hasDormant" while="" timeout="0" info="">
[15:14:24.181]          // if-block "!hasDormant"
[15:14:24.181]            // =>  TRUE
[15:14:24.181]          <block atomic="false" info="">
[15:14:24.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:14:24.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:14:24.181]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:14:24.191]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:14:24.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:14:24.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:14:24.191]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:14:24.191]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:14:24.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:14:24.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:14:24.191]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:14:24.201]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:14:24.201]          </block>
[15:14:24.201]          // end if-block "!hasDormant"
[15:14:24.202]        </control>
[15:14:24.202]        // end if-block "isSWJ"
[15:14:24.202]      </control>
[15:14:24.202]      <control if="!isSWJ" while="" timeout="0" info="">
[15:14:24.202]        // if-block "!isSWJ"
[15:14:24.202]          // =>  FALSE
[15:14:24.202]        // skip if-block "!isSWJ"
[15:14:24.202]      </control>
[15:14:24.202]      <block atomic="false" info="">
[15:14:24.202]        ReadDP(0x0);
[15:14:24.202]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:14:24.202]      </block>
[15:14:24.202]      // end if-block "protType == 2"
[15:14:24.202]    </control>
[15:14:24.202]  </sequence>
[15:14:24.202]  
[15:14:24.202]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:14:24.202]  
[15:14:24.202]  <debugvars>
[15:14:24.202]    // Pre-defined
[15:14:24.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:14:24.202]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:14:24.202]    __dp=0x00000000
[15:14:24.202]    __ap=0x00000000
[15:14:24.202]    __traceout=0x00000000      (Trace Disabled)
[15:14:24.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:14:24.202]    __FlashAddr=0x00000000
[15:14:24.202]    __FlashLen=0x00000000
[15:14:24.202]    __FlashArg=0x00000000
[15:14:24.202]    __FlashOp=0x00000000
[15:14:24.202]    __Result=0x00000000
[15:14:24.202]  </debugvars>
[15:14:24.202]  
[15:14:24.202]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:14:24.202]    <block atomic="false" info="">
[15:14:24.202]      __var SW_DP_ABORT       = 0x0;
[15:14:24.202]        // -> [SW_DP_ABORT <= 0x00000000]
[15:14:24.202]      __var DP_CTRL_STAT      = 0x4;
[15:14:24.202]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:14:24.202]      __var DP_SELECT         = 0x8;
[15:14:24.202]        // -> [DP_SELECT <= 0x00000008]
[15:14:24.202]      __var powered_down      = 0;
[15:14:24.202]        // -> [powered_down <= 0x00000000]
[15:14:24.202]      WriteDP(DP_SELECT, 0x00000000);
[15:14:24.211]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:14:24.211]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:14:24.213]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:14:24.213]        // -> [powered_down <= 0x00000001]
[15:14:24.213]    </block>
[15:14:24.213]    <control if="powered_down" while="" timeout="0" info="">
[15:14:24.213]      // if-block "powered_down"
[15:14:24.213]        // =>  TRUE
[15:14:24.213]      <block atomic="false" info="">
[15:14:24.213]        Message(0, "Debug/System power-up request sent");
[15:14:24.213]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:14:24.213]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:14:24.213]      </block>
[15:14:24.213]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:14:24.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:14:24.213]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:14:24.213]        // while-condition  =>  FALSE
[15:14:24.213]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:14:24.213]      </control>
[15:14:24.213]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:14:24.213]        // if-block "(__protocol & 0xFFFF) == 1"
[15:14:24.213]          // =>  FALSE
[15:14:24.213]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:14:24.213]      </control>
[15:14:24.213]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:14:24.213]        // if-block "(__protocol & 0xFFFF) == 2"
[15:14:24.213]          // =>  TRUE
[15:14:24.213]        <block atomic="false" info="">
[15:14:24.213]          Message(0, "executing SWD power up");
[15:14:24.221]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:14:24.221]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:14:24.221]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:14:24.221]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:14:24.221]        </block>
[15:14:24.221]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:14:24.221]      </control>
[15:14:24.221]      // end if-block "powered_down"
[15:14:24.221]    </control>
[15:14:24.221]    <block atomic="false" info="">
[15:14:24.221]      __var DEBUG_PORT_VAL    = 0;
[15:14:24.221]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:14:24.221]      __var ACCESS_POINT_VAL  = 0;
[15:14:24.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:14:24.221]      __ap = 1; 
[15:14:24.221]        // -> [__ap <= 0x00000001]
[15:14:24.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:14:24.221]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:14:24.221]      __ap = 4;
[15:14:24.221]        // -> [__ap <= 0x00000004]
[15:14:24.221]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:14:24.233]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:14:24.233]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:14:24.233]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:14:24.233]    </block>
[15:14:24.233]    <block atomic="false" info="">
[15:14:24.233]      __var nReset = 0x80;
[15:14:24.233]        // -> [nReset <= 0x00000080]
[15:14:24.233]      __var canReadPins = 0;
[15:14:24.233]        // -> [canReadPins <= 0x00000000]
[15:14:24.233]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:14:24.233]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:14:24.233]        // -> [canReadPins <= 0x00000001]
[15:14:24.233]    </block>
[15:14:24.233]    <control if="" while="1" timeout="200" info="">
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.233]      // while "1"  (timeout="200")
[15:14:24.233]      // while-condition  =>  TRUE
[15:14:24.242]      // while "1"  (timeout="200")
[15:14:24.242]      // while  =>  TIMEOUT
[15:14:24.242]      // end while "1"
[15:14:24.242]    </control>
[15:14:24.242]    <control if="canReadPins" while="" timeout="0" info="">
[15:14:24.242]      // if-block "canReadPins"
[15:14:24.242]        // =>  TRUE
[15:14:24.242]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:14:24.242]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:14:24.244]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:14:24.244]        // while-condition  =>  FALSE
[15:14:24.244]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:14:24.244]      </control>
[15:14:24.244]      // end if-block "canReadPins"
[15:14:24.244]    </control>
[15:14:24.244]    <control if="!canReadPins" while="" timeout="0" info="">
[15:14:24.244]      // if-block "!canReadPins"
[15:14:24.244]        // =>  FALSE
[15:14:24.244]      // skip if-block "!canReadPins"
[15:14:24.244]    </control>
[15:14:24.244]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:14:24.244]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:14:24.244]        // =>  TRUE
[15:14:24.244]      <block atomic="false" info="">
[15:14:24.244]        WriteAP(0x00, 0x190008);
[15:14:24.244]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:14:24.244]        WriteAP(0xF0, 0x01);
[15:14:24.252]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:14:24.252]      </block>
[15:14:24.252]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:14:24.252]    </control>
[15:14:24.252]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:14:24.252]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:14:24.252]        // =>  FALSE
[15:14:24.252]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:14:24.252]    </control>
[15:14:24.252]    <block atomic="false" info="">
[15:14:24.252]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:14:24.252]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:14:24.252]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:14:24.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:14:24.252]      __ap = 0; //lets make sure we reset the access point selection
[15:14:24.252]        // -> [__ap <= 0x00000000]
[15:14:24.252]    </block>
[15:14:24.252]  </sequence>
[15:14:24.252]  
[15:14:24.283]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:14:24.283]  
[15:14:24.283]  <debugvars>
[15:14:24.283]    // Pre-defined
[15:14:24.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:14:24.283]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:14:24.283]    __dp=0x00000000
[15:14:24.283]    __ap=0x00000000
[15:14:24.283]    __traceout=0x00000000      (Trace Disabled)
[15:14:24.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:14:24.283]    __FlashAddr=0x00000000
[15:14:24.283]    __FlashLen=0x00000000
[15:14:24.283]    __FlashArg=0x00000000
[15:14:24.283]    __FlashOp=0x00000000
[15:14:24.283]    __Result=0x00000000
[15:14:24.283]  </debugvars>
[15:14:24.283]  
[15:14:24.283]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:14:24.283]    <block atomic="false" info="">
[15:14:24.283]      __var deviceID = 0;
[15:14:24.283]        // -> [deviceID <= 0x00000000]
[15:14:24.283]      __var version = 0;
[15:14:24.283]        // -> [version <= 0x00000000]
[15:14:24.283]      __var partNum = 0;
[15:14:24.293]        // -> [partNum <= 0x00000000]
[15:14:24.293]      __var manuf = 0;
[15:14:24.293]        // -> [manuf <= 0x00000000]
[15:14:24.293]      __var isMSPM0G1X0X_G3X0X = 0;
[15:14:24.293]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:14:24.293]      __var isProduction = 0;
[15:14:24.293]        // -> [isProduction <= 0x00000000]
[15:14:24.293]      __var continueId = 0;
[15:14:24.293]        // -> [continueId <= 0x00000000]
[15:14:24.293]      deviceID =   Read32(0x41C40004);
[15:14:24.295]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:14:24.295]        // -> [deviceID <= 0x2BB8802F]
[15:14:24.295]      version = deviceID >> 28;
[15:14:24.295]        // -> [version <= 0x00000002]
[15:14:24.295]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:14:24.295]        // -> [partNum <= 0x0000BB88]
[15:14:24.295]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:14:24.295]        // -> [manuf <= 0x00000017]
[15:14:24.295]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:14:24.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:14:24.295]      isProduction = (version > 0);
[15:14:24.295]        // -> [isProduction <= 0x00000001]
[15:14:24.295]    </block>
[15:14:24.295]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:14:24.295]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:14:24.295]        // =>  FALSE
[15:14:24.295]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:14:24.295]    </control>
[15:14:24.295]    <control if="continueId == 4" while="" timeout="0" info="">
[15:14:24.295]      // if-block "continueId == 4"
[15:14:24.295]        // =>  FALSE
[15:14:24.295]      // skip if-block "continueId == 4"
[15:14:24.295]    </control>
[15:14:24.295]    <control if="!isProduction" while="" timeout="0" info="">
[15:14:24.295]      // if-block "!isProduction"
[15:14:24.295]        // =>  FALSE
[15:14:24.295]      // skip if-block "!isProduction"
[15:14:24.295]    </control>
[15:14:24.295]  </sequence>
[15:14:24.295]  
[15:15:47.986]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:15:47.986]  
[15:15:47.994]  <debugvars>
[15:15:47.994]    // Pre-defined
[15:15:47.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:47.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:15:47.994]    __dp=0x00000000
[15:15:47.994]    __ap=0x00000000
[15:15:47.994]    __traceout=0x00000000      (Trace Disabled)
[15:15:47.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:47.994]    __FlashAddr=0x00000000
[15:15:47.994]    __FlashLen=0x00000000
[15:15:47.994]    __FlashArg=0x00000000
[15:15:47.994]    __FlashOp=0x00000000
[15:15:47.994]    __Result=0x00000000
[15:15:47.994]  </debugvars>
[15:15:47.994]  
[15:15:47.994]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:15:47.994]    <block atomic="false" info="">
[15:15:47.994]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:15:47.994]        // -> [isSWJ <= 0x00000001]
[15:15:47.994]      __var hasDormant = __protocol & 0x00020000;
[15:15:47.994]        // -> [hasDormant <= 0x00000000]
[15:15:47.994]      __var protType   = __protocol & 0x0000FFFF;
[15:15:47.994]        // -> [protType <= 0x00000002]
[15:15:47.994]    </block>
[15:15:47.994]    <control if="protType == 1" while="" timeout="0" info="">
[15:15:47.994]      // if-block "protType == 1"
[15:15:47.994]        // =>  FALSE
[15:15:47.994]      // skip if-block "protType == 1"
[15:15:47.994]    </control>
[15:15:47.994]    <control if="protType == 2" while="" timeout="0" info="">
[15:15:47.994]      // if-block "protType == 2"
[15:15:47.994]        // =>  TRUE
[15:15:47.994]      <control if="isSWJ" while="" timeout="0" info="">
[15:15:47.994]        // if-block "isSWJ"
[15:15:47.994]          // =>  TRUE
[15:15:47.994]        <control if="hasDormant" while="" timeout="0" info="">
[15:15:47.994]          // if-block "hasDormant"
[15:15:47.994]            // =>  FALSE
[15:15:47.994]          // skip if-block "hasDormant"
[15:15:47.994]        </control>
[15:15:47.994]        <control if="!hasDormant" while="" timeout="0" info="">
[15:15:47.994]          // if-block "!hasDormant"
[15:15:47.994]            // =>  TRUE
[15:15:47.994]          <block atomic="false" info="">
[15:15:47.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:15:47.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:48.000]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:15:48.003]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:15:48.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:15:48.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:48.003]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:15:48.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:15:48.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:15:48.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:48.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:15:48.006]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:15:48.006]          </block>
[15:15:48.006]          // end if-block "!hasDormant"
[15:15:48.006]        </control>
[15:15:48.006]        // end if-block "isSWJ"
[15:15:48.006]      </control>
[15:15:48.006]      <control if="!isSWJ" while="" timeout="0" info="">
[15:15:48.006]        // if-block "!isSWJ"
[15:15:48.006]          // =>  FALSE
[15:15:48.006]        // skip if-block "!isSWJ"
[15:15:48.006]      </control>
[15:15:48.006]      <block atomic="false" info="">
[15:15:48.006]        ReadDP(0x0);
[15:15:48.011]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:15:48.011]      </block>
[15:15:48.011]      // end if-block "protType == 2"
[15:15:48.011]    </control>
[15:15:48.011]  </sequence>
[15:15:48.011]  
[15:15:48.011]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:15:48.011]  
[15:15:48.011]  <debugvars>
[15:15:48.011]    // Pre-defined
[15:15:48.011]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:48.011]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:15:48.011]    __dp=0x00000000
[15:15:48.011]    __ap=0x00000000
[15:15:48.011]    __traceout=0x00000000      (Trace Disabled)
[15:15:48.011]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:48.011]    __FlashAddr=0x00000000
[15:15:48.011]    __FlashLen=0x00000000
[15:15:48.011]    __FlashArg=0x00000000
[15:15:48.011]    __FlashOp=0x00000000
[15:15:48.011]    __Result=0x00000000
[15:15:48.011]  </debugvars>
[15:15:48.011]  
[15:15:48.011]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:15:48.011]    <block atomic="false" info="">
[15:15:48.011]      __var SW_DP_ABORT       = 0x0;
[15:15:48.011]        // -> [SW_DP_ABORT <= 0x00000000]
[15:15:48.011]      __var DP_CTRL_STAT      = 0x4;
[15:15:48.011]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:15:48.011]      __var DP_SELECT         = 0x8;
[15:15:48.011]        // -> [DP_SELECT <= 0x00000008]
[15:15:48.011]      __var powered_down      = 0;
[15:15:48.011]        // -> [powered_down <= 0x00000000]
[15:15:48.011]      WriteDP(DP_SELECT, 0x00000000);
[15:15:48.018]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:15:48.018]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:15:48.018]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:15:48.018]        // -> [powered_down <= 0x00000001]
[15:15:48.018]    </block>
[15:15:48.018]    <control if="powered_down" while="" timeout="0" info="">
[15:15:48.018]      // if-block "powered_down"
[15:15:48.018]        // =>  TRUE
[15:15:48.018]      <block atomic="false" info="">
[15:15:48.018]        Message(0, "Debug/System power-up request sent");
[15:15:48.022]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:15:48.023]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:15:48.023]      </block>
[15:15:48.023]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:15:48.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:15:48.023]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:15:48.023]        // while-condition  =>  FALSE
[15:15:48.023]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:15:48.023]      </control>
[15:15:48.023]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:15:48.023]        // if-block "(__protocol & 0xFFFF) == 1"
[15:15:48.023]          // =>  FALSE
[15:15:48.023]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:15:48.023]      </control>
[15:15:48.023]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:15:48.023]        // if-block "(__protocol & 0xFFFF) == 2"
[15:15:48.023]          // =>  TRUE
[15:15:48.023]        <block atomic="false" info="">
[15:15:48.023]          Message(0, "executing SWD power up");
[15:15:48.023]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:15:48.031]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:15:48.031]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:15:48.031]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:15:48.031]        </block>
[15:15:48.031]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:15:48.031]      </control>
[15:15:48.031]      // end if-block "powered_down"
[15:15:48.031]    </control>
[15:15:48.031]    <block atomic="false" info="">
[15:15:48.031]      __var DEBUG_PORT_VAL    = 0;
[15:15:48.031]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:15:48.031]      __var ACCESS_POINT_VAL  = 0;
[15:15:48.031]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:15:48.031]      __ap = 1; 
[15:15:48.031]        // -> [__ap <= 0x00000001]
[15:15:48.031]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:15:48.044]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:15:48.044]      __ap = 4;
[15:15:48.044]        // -> [__ap <= 0x00000004]
[15:15:48.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:15:48.044]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:15:48.052]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:15:48.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:15:48.052]    </block>
[15:15:48.052]    <block atomic="false" info="">
[15:15:48.052]      __var nReset = 0x80;
[15:15:48.052]        // -> [nReset <= 0x00000080]
[15:15:48.052]      __var canReadPins = 0;
[15:15:48.052]        // -> [canReadPins <= 0x00000000]
[15:15:48.052]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:15:48.052]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:15:48.052]        // -> [canReadPins <= 0x00000001]
[15:15:48.052]    </block>
[15:15:48.052]    <control if="" while="1" timeout="200" info="">
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.052]      // while-condition  =>  TRUE
[15:15:48.052]      // while "1"  (timeout="200")
[15:15:48.062]      // while-condition  =>  TRUE
[15:15:48.062]      // while "1"  (timeout="200")
[15:15:48.062]      // while  =>  TIMEOUT
[15:15:48.062]      // end while "1"
[15:15:48.062]    </control>
[15:15:48.062]    <control if="canReadPins" while="" timeout="0" info="">
[15:15:48.062]      // if-block "canReadPins"
[15:15:48.062]        // =>  TRUE
[15:15:48.062]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:15:48.062]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:15:48.066]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:15:48.067]        // while-condition  =>  FALSE
[15:15:48.067]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:15:48.067]      </control>
[15:15:48.067]      // end if-block "canReadPins"
[15:15:48.067]    </control>
[15:15:48.067]    <control if="!canReadPins" while="" timeout="0" info="">
[15:15:48.067]      // if-block "!canReadPins"
[15:15:48.067]        // =>  FALSE
[15:15:48.067]      // skip if-block "!canReadPins"
[15:15:48.067]    </control>
[15:15:48.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:15:48.068]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:15:48.068]        // =>  TRUE
[15:15:48.068]      <block atomic="false" info="">
[15:15:48.068]        WriteAP(0x00, 0x190008);
[15:15:48.069]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:15:48.069]        WriteAP(0xF0, 0x01);
[15:15:48.072]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:15:48.072]      </block>
[15:15:48.073]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:15:48.073]    </control>
[15:15:48.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:15:48.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:15:48.073]        // =>  FALSE
[15:15:48.073]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:15:48.073]    </control>
[15:15:48.073]    <block atomic="false" info="">
[15:15:48.073]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:15:48.076]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:15:48.076]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:15:48.076]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:15:48.078]      __ap = 0; //lets make sure we reset the access point selection
[15:15:48.078]        // -> [__ap <= 0x00000000]
[15:15:48.078]    </block>
[15:15:48.078]  </sequence>
[15:15:48.078]  
[15:15:48.109]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:15:48.109]  
[15:15:48.109]  <debugvars>
[15:15:48.109]    // Pre-defined
[15:15:48.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:48.109]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:15:48.109]    __dp=0x00000000
[15:15:48.109]    __ap=0x00000000
[15:15:48.109]    __traceout=0x00000000      (Trace Disabled)
[15:15:48.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:48.109]    __FlashAddr=0x00000000
[15:15:48.109]    __FlashLen=0x00000000
[15:15:48.109]    __FlashArg=0x00000000
[15:15:48.109]    __FlashOp=0x00000000
[15:15:48.109]    __Result=0x00000000
[15:15:48.114]  </debugvars>
[15:15:48.114]  
[15:15:48.114]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:15:48.114]    <block atomic="false" info="">
[15:15:48.114]      __var deviceID = 0;
[15:15:48.114]        // -> [deviceID <= 0x00000000]
[15:15:48.114]      __var version = 0;
[15:15:48.114]        // -> [version <= 0x00000000]
[15:15:48.114]      __var partNum = 0;
[15:15:48.114]        // -> [partNum <= 0x00000000]
[15:15:48.114]      __var manuf = 0;
[15:15:48.114]        // -> [manuf <= 0x00000000]
[15:15:48.114]      __var isMSPM0G1X0X_G3X0X = 0;
[15:15:48.114]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:15:48.114]      __var isProduction = 0;
[15:15:48.114]        // -> [isProduction <= 0x00000000]
[15:15:48.114]      __var continueId = 0;
[15:15:48.114]        // -> [continueId <= 0x00000000]
[15:15:48.114]      deviceID =   Read32(0x41C40004);
[15:15:48.120]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:15:48.120]        // -> [deviceID <= 0x2BB8802F]
[15:15:48.120]      version = deviceID >> 28;
[15:15:48.120]        // -> [version <= 0x00000002]
[15:15:48.120]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:15:48.120]        // -> [partNum <= 0x0000BB88]
[15:15:48.120]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:15:48.120]        // -> [manuf <= 0x00000017]
[15:15:48.120]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:15:48.120]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:15:48.120]      isProduction = (version > 0);
[15:15:48.120]        // -> [isProduction <= 0x00000001]
[15:15:48.120]    </block>
[15:15:48.120]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:15:48.120]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:15:48.120]        // =>  FALSE
[15:15:48.120]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:15:48.120]    </control>
[15:15:48.120]    <control if="continueId == 4" while="" timeout="0" info="">
[15:15:48.120]      // if-block "continueId == 4"
[15:15:48.120]        // =>  FALSE
[15:15:48.120]      // skip if-block "continueId == 4"
[15:15:48.120]    </control>
[15:15:48.120]    <control if="!isProduction" while="" timeout="0" info="">
[15:15:48.122]      // if-block "!isProduction"
[15:15:48.122]        // =>  FALSE
[15:15:48.122]      // skip if-block "!isProduction"
[15:15:48.122]    </control>
[15:15:48.122]  </sequence>
[15:15:48.122]  
[15:15:53.941]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:15:53.941]  
[15:15:53.941]  <debugvars>
[15:15:53.941]    // Pre-defined
[15:15:53.941]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:53.941]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:15:53.941]    __dp=0x00000000
[15:15:53.941]    __ap=0x00000000
[15:15:53.941]    __traceout=0x00000000      (Trace Disabled)
[15:15:53.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:53.941]    __FlashAddr=0x00000000
[15:15:53.941]    __FlashLen=0x00000000
[15:15:53.941]    __FlashArg=0x00000000
[15:15:53.941]    __FlashOp=0x00000000
[15:15:53.941]    __Result=0x00000000
[15:15:53.941]  </debugvars>
[15:15:53.941]  
[15:15:53.941]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:15:53.941]    <block atomic="false" info="">
[15:15:53.941]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:15:53.941]        // -> [isSWJ <= 0x00000001]
[15:15:53.941]      __var hasDormant = __protocol & 0x00020000;
[15:15:53.941]        // -> [hasDormant <= 0x00000000]
[15:15:53.941]      __var protType   = __protocol & 0x0000FFFF;
[15:15:53.941]        // -> [protType <= 0x00000002]
[15:15:53.941]    </block>
[15:15:53.941]    <control if="protType == 1" while="" timeout="0" info="">
[15:15:53.941]      // if-block "protType == 1"
[15:15:53.941]        // =>  FALSE
[15:15:53.941]      // skip if-block "protType == 1"
[15:15:53.941]    </control>
[15:15:53.941]    <control if="protType == 2" while="" timeout="0" info="">
[15:15:53.941]      // if-block "protType == 2"
[15:15:53.941]        // =>  TRUE
[15:15:53.941]      <control if="isSWJ" while="" timeout="0" info="">
[15:15:53.941]        // if-block "isSWJ"
[15:15:53.941]          // =>  TRUE
[15:15:53.941]        <control if="hasDormant" while="" timeout="0" info="">
[15:15:53.941]          // if-block "hasDormant"
[15:15:53.941]            // =>  FALSE
[15:15:53.941]          // skip if-block "hasDormant"
[15:15:53.941]        </control>
[15:15:53.941]        <control if="!hasDormant" while="" timeout="0" info="">
[15:15:53.941]          // if-block "!hasDormant"
[15:15:53.941]            // =>  TRUE
[15:15:53.941]          <block atomic="false" info="">
[15:15:53.941]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:15:53.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:53.951]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:15:53.951]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:15:53.951]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:15:53.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:53.951]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:15:53.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:15:53.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:15:53.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:15:53.961]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:15:53.971]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:15:53.971]          </block>
[15:15:53.971]          // end if-block "!hasDormant"
[15:15:53.971]        </control>
[15:15:53.971]        // end if-block "isSWJ"
[15:15:53.971]      </control>
[15:15:53.971]      <control if="!isSWJ" while="" timeout="0" info="">
[15:15:53.971]        // if-block "!isSWJ"
[15:15:53.971]          // =>  FALSE
[15:15:53.971]        // skip if-block "!isSWJ"
[15:15:53.971]      </control>
[15:15:53.971]      <block atomic="false" info="">
[15:15:53.971]        ReadDP(0x0);
[15:15:53.971]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:15:53.981]      </block>
[15:15:53.981]      // end if-block "protType == 2"
[15:15:53.981]    </control>
[15:15:53.981]  </sequence>
[15:15:53.981]  
[15:15:53.981]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:15:53.981]  
[15:15:53.981]  <debugvars>
[15:15:53.981]    // Pre-defined
[15:15:53.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:53.981]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:15:53.981]    __dp=0x00000000
[15:15:53.981]    __ap=0x00000000
[15:15:53.981]    __traceout=0x00000000      (Trace Disabled)
[15:15:53.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:53.981]    __FlashAddr=0x00000000
[15:15:53.981]    __FlashLen=0x00000000
[15:15:53.981]    __FlashArg=0x00000000
[15:15:53.981]    __FlashOp=0x00000000
[15:15:53.981]    __Result=0x00000000
[15:15:53.981]  </debugvars>
[15:15:53.991]  
[15:15:53.991]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:15:53.991]    <block atomic="false" info="">
[15:15:53.991]      __var SW_DP_ABORT       = 0x0;
[15:15:53.991]        // -> [SW_DP_ABORT <= 0x00000000]
[15:15:53.991]      __var DP_CTRL_STAT      = 0x4;
[15:15:53.991]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:15:53.992]      __var DP_SELECT         = 0x8;
[15:15:53.993]        // -> [DP_SELECT <= 0x00000008]
[15:15:53.993]      __var powered_down      = 0;
[15:15:53.993]        // -> [powered_down <= 0x00000000]
[15:15:53.993]      WriteDP(DP_SELECT, 0x00000000);
[15:15:53.993]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:15:53.993]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:15:53.998]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:15:53.998]        // -> [powered_down <= 0x00000001]
[15:15:53.998]    </block>
[15:15:53.998]    <control if="powered_down" while="" timeout="0" info="">
[15:15:53.998]      // if-block "powered_down"
[15:15:53.998]        // =>  TRUE
[15:15:53.998]      <block atomic="false" info="">
[15:15:53.998]        Message(0, "Debug/System power-up request sent");
[15:15:54.000]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:15:54.002]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:15:54.002]      </block>
[15:15:54.002]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:15:54.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:15:54.004]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:15:54.004]        // while-condition  =>  FALSE
[15:15:54.004]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:15:54.004]      </control>
[15:15:54.004]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:15:54.004]        // if-block "(__protocol & 0xFFFF) == 1"
[15:15:54.004]          // =>  FALSE
[15:15:54.004]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:15:54.006]      </control>
[15:15:54.006]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:15:54.006]        // if-block "(__protocol & 0xFFFF) == 2"
[15:15:54.006]          // =>  TRUE
[15:15:54.006]        <block atomic="false" info="">
[15:15:54.006]          Message(0, "executing SWD power up");
[15:15:54.007]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:15:54.009]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:15:54.009]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:15:54.012]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:15:54.012]        </block>
[15:15:54.012]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:15:54.012]      </control>
[15:15:54.012]      // end if-block "powered_down"
[15:15:54.012]    </control>
[15:15:54.013]    <block atomic="false" info="">
[15:15:54.013]      __var DEBUG_PORT_VAL    = 0;
[15:15:54.013]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:15:54.013]      __var ACCESS_POINT_VAL  = 0;
[15:15:54.013]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:15:54.013]      __ap = 1; 
[15:15:54.013]        // -> [__ap <= 0x00000001]
[15:15:54.013]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:15:54.016]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:15:54.016]      __ap = 4;
[15:15:54.016]        // -> [__ap <= 0x00000004]
[15:15:54.016]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:15:54.020]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:15:54.020]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:15:54.020]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:15:54.021]    </block>
[15:15:54.021]    <block atomic="false" info="">
[15:15:54.021]      __var nReset = 0x80;
[15:15:54.021]        // -> [nReset <= 0x00000080]
[15:15:54.021]      __var canReadPins = 0;
[15:15:54.021]        // -> [canReadPins <= 0x00000000]
[15:15:54.021]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:15:54.024]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:15:54.024]        // -> [canReadPins <= 0x00000001]
[15:15:54.024]    </block>
[15:15:54.024]    <control if="" while="1" timeout="200" info="">
[15:15:54.024]      // while "1"  (timeout="200")
[15:15:54.024]      // while-condition  =>  TRUE
[15:15:54.024]      // while "1"  (timeout="200")
[15:15:54.024]      // while-condition  =>  TRUE
[15:15:54.024]      // while "1"  (timeout="200")
[15:15:54.024]      // while-condition  =>  TRUE
[15:15:54.024]      // while "1"  (timeout="200")
[15:15:54.024]      // while-condition  =>  TRUE
[15:15:54.024]      // while "1"  (timeout="200")
[15:15:54.024]      // while-condition  =>  TRUE
[15:15:54.026]      // while "1"  (timeout="200")
[15:15:54.026]      // while-condition  =>  TRUE
[15:15:54.026]      // while "1"  (timeout="200")
[15:15:54.026]      // while-condition  =>  TRUE
[15:15:54.026]      // while "1"  (timeout="200")
[15:15:54.026]      // while-condition  =>  TRUE
[15:15:54.026]      // while "1"  (timeout="200")
[15:15:54.026]      // while-condition  =>  TRUE
[15:15:54.026]      // while "1"  (timeout="200")
[15:15:54.026]      // while-condition  =>  TRUE
[15:15:54.027]      // while "1"  (timeout="200")
[15:15:54.027]      // while-condition  =>  TRUE
[15:15:54.027]      // while "1"  (timeout="200")
[15:15:54.027]      // while-condition  =>  TRUE
[15:15:54.027]      // while "1"  (timeout="200")
[15:15:54.027]      // while-condition  =>  TRUE
[15:15:54.027]      // while "1"  (timeout="200")
[15:15:54.027]      // while-condition  =>  TRUE
[15:15:54.027]      // while "1"  (timeout="200")
[15:15:54.027]      // while-condition  =>  TRUE
[15:15:54.027]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.028]      // while-condition  =>  TRUE
[15:15:54.028]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.030]      // while "1"  (timeout="200")
[15:15:54.030]      // while-condition  =>  TRUE
[15:15:54.031]      // while "1"  (timeout="200")
[15:15:54.031]      // while-condition  =>  TRUE
[15:15:54.031]      // while "1"  (timeout="200")
[15:15:54.031]      // while-condition  =>  TRUE
[15:15:54.031]      // while "1"  (timeout="200")
[15:15:54.031]      // while-condition  =>  TRUE
[15:15:54.031]      // while "1"  (timeout="200")
[15:15:54.031]      // while-condition  =>  TRUE
[15:15:54.031]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.033]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.033]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.033]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.033]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.033]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.033]      // while "1"  (timeout="200")
[15:15:54.033]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.034]      // while-condition  =>  TRUE
[15:15:54.034]      // while "1"  (timeout="200")
[15:15:54.036]      // while-condition  =>  TRUE
[15:15:54.036]      // while "1"  (timeout="200")
[15:15:54.036]      // while-condition  =>  TRUE
[15:15:54.036]      // while "1"  (timeout="200")
[15:15:54.036]      // while-condition  =>  TRUE
[15:15:54.036]      // while "1"  (timeout="200")
[15:15:54.036]      // while-condition  =>  TRUE
[15:15:54.036]      // while "1"  (timeout="200")
[15:15:54.036]      // while-condition  =>  TRUE
[15:15:54.036]      // while "1"  (timeout="200")
[15:15:54.037]      // while-condition  =>  TRUE
[15:15:54.037]      // while "1"  (timeout="200")
[15:15:54.037]      // while-condition  =>  TRUE
[15:15:54.037]      // while "1"  (timeout="200")
[15:15:54.037]      // while-condition  =>  TRUE
[15:15:54.037]      // while "1"  (timeout="200")
[15:15:54.037]      // while-condition  =>  TRUE
[15:15:54.037]      // while "1"  (timeout="200")
[15:15:54.037]      // while-condition  =>  TRUE
[15:15:54.037]      // while "1"  (timeout="200")
[15:15:54.037]      // while-condition  =>  TRUE
[15:15:54.038]      // while "1"  (timeout="200")
[15:15:54.038]      // while  =>  TIMEOUT
[15:15:54.038]      // end while "1"
[15:15:54.038]    </control>
[15:15:54.038]    <control if="canReadPins" while="" timeout="0" info="">
[15:15:54.038]      // if-block "canReadPins"
[15:15:54.038]        // =>  TRUE
[15:15:54.038]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:15:54.038]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:15:54.040]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:15:54.040]        // while-condition  =>  FALSE
[15:15:54.041]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:15:54.041]      </control>
[15:15:54.041]      // end if-block "canReadPins"
[15:15:54.041]    </control>
[15:15:54.041]    <control if="!canReadPins" while="" timeout="0" info="">
[15:15:54.041]      // if-block "!canReadPins"
[15:15:54.041]        // =>  FALSE
[15:15:54.041]      // skip if-block "!canReadPins"
[15:15:54.041]    </control>
[15:15:54.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:15:54.041]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:15:54.041]        // =>  TRUE
[15:15:54.041]      <block atomic="false" info="">
[15:15:54.043]        WriteAP(0x00, 0x190008);
[15:15:54.045]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:15:54.045]        WriteAP(0xF0, 0x01);
[15:15:54.048]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:15:54.048]      </block>
[15:15:54.048]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:15:54.048]    </control>
[15:15:54.048]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:15:54.048]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:15:54.048]        // =>  FALSE
[15:15:54.048]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:15:54.048]    </control>
[15:15:54.048]    <block atomic="false" info="">
[15:15:54.048]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:15:54.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:15:54.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:15:54.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:15:54.056]      __ap = 0; //lets make sure we reset the access point selection
[15:15:54.056]        // -> [__ap <= 0x00000000]
[15:15:54.056]    </block>
[15:15:54.056]  </sequence>
[15:15:54.056]  
[15:15:54.073]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:15:54.073]  
[15:15:54.073]  <debugvars>
[15:15:54.073]    // Pre-defined
[15:15:54.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:15:54.073]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:15:54.073]    __dp=0x00000000
[15:15:54.073]    __ap=0x00000000
[15:15:54.073]    __traceout=0x00000000      (Trace Disabled)
[15:15:54.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:15:54.073]    __FlashAddr=0x00000000
[15:15:54.073]    __FlashLen=0x00000000
[15:15:54.073]    __FlashArg=0x00000000
[15:15:54.073]    __FlashOp=0x00000000
[15:15:54.073]    __Result=0x00000000
[15:15:54.073]  </debugvars>
[15:15:54.073]  
[15:15:54.073]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:15:54.073]    <block atomic="false" info="">
[15:15:54.073]      __var deviceID = 0;
[15:15:54.073]        // -> [deviceID <= 0x00000000]
[15:15:54.073]      __var version = 0;
[15:15:54.073]        // -> [version <= 0x00000000]
[15:15:54.073]      __var partNum = 0;
[15:15:54.073]        // -> [partNum <= 0x00000000]
[15:15:54.073]      __var manuf = 0;
[15:15:54.073]        // -> [manuf <= 0x00000000]
[15:15:54.073]      __var isMSPM0G1X0X_G3X0X = 0;
[15:15:54.073]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:15:54.082]      __var isProduction = 0;
[15:15:54.082]        // -> [isProduction <= 0x00000000]
[15:15:54.082]      __var continueId = 0;
[15:15:54.082]        // -> [continueId <= 0x00000000]
[15:15:54.082]      deviceID =   Read32(0x41C40004);
[15:15:54.082]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:15:54.092]        // -> [deviceID <= 0x2BB8802F]
[15:15:54.092]      version = deviceID >> 28;
[15:15:54.092]        // -> [version <= 0x00000002]
[15:15:54.092]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:15:54.092]        // -> [partNum <= 0x0000BB88]
[15:15:54.092]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:15:54.092]        // -> [manuf <= 0x00000017]
[15:15:54.092]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:15:54.092]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:15:54.092]      isProduction = (version > 0);
[15:15:54.092]        // -> [isProduction <= 0x00000001]
[15:15:54.092]    </block>
[15:15:54.092]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:15:54.092]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:15:54.092]        // =>  FALSE
[15:15:54.092]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:15:54.092]    </control>
[15:15:54.092]    <control if="continueId == 4" while="" timeout="0" info="">
[15:15:54.092]      // if-block "continueId == 4"
[15:15:54.092]        // =>  FALSE
[15:15:54.092]      // skip if-block "continueId == 4"
[15:15:54.092]    </control>
[15:15:54.092]    <control if="!isProduction" while="" timeout="0" info="">
[15:15:54.092]      // if-block "!isProduction"
[15:15:54.092]        // =>  FALSE
[15:15:54.092]      // skip if-block "!isProduction"
[15:15:54.092]    </control>
[15:15:54.092]  </sequence>
[15:15:54.092]  
[15:18:01.188]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:18:01.188]  
[15:18:01.198]  <debugvars>
[15:18:01.198]    // Pre-defined
[15:18:01.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:18:01.198]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:18:01.198]    __dp=0x00000000
[15:18:01.198]    __ap=0x00000000
[15:18:01.198]    __traceout=0x00000000      (Trace Disabled)
[15:18:01.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:18:01.198]    __FlashAddr=0x00000000
[15:18:01.198]    __FlashLen=0x00000000
[15:18:01.198]    __FlashArg=0x00000000
[15:18:01.198]    __FlashOp=0x00000000
[15:18:01.198]    __Result=0x00000000
[15:18:01.198]  </debugvars>
[15:18:01.198]  
[15:18:01.198]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:18:01.198]    <block atomic="false" info="">
[15:18:01.198]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:18:01.198]        // -> [isSWJ <= 0x00000001]
[15:18:01.198]      __var hasDormant = __protocol & 0x00020000;
[15:18:01.198]        // -> [hasDormant <= 0x00000000]
[15:18:01.198]      __var protType   = __protocol & 0x0000FFFF;
[15:18:01.198]        // -> [protType <= 0x00000002]
[15:18:01.198]    </block>
[15:18:01.198]    <control if="protType == 1" while="" timeout="0" info="">
[15:18:01.198]      // if-block "protType == 1"
[15:18:01.198]        // =>  FALSE
[15:18:01.198]      // skip if-block "protType == 1"
[15:18:01.198]    </control>
[15:18:01.198]    <control if="protType == 2" while="" timeout="0" info="">
[15:18:01.198]      // if-block "protType == 2"
[15:18:01.198]        // =>  TRUE
[15:18:01.198]      <control if="isSWJ" while="" timeout="0" info="">
[15:18:01.198]        // if-block "isSWJ"
[15:18:01.198]          // =>  TRUE
[15:18:01.198]        <control if="hasDormant" while="" timeout="0" info="">
[15:18:01.198]          // if-block "hasDormant"
[15:18:01.198]            // =>  FALSE
[15:18:01.198]          // skip if-block "hasDormant"
[15:18:01.198]        </control>
[15:18:01.198]        <control if="!hasDormant" while="" timeout="0" info="">
[15:18:01.198]          // if-block "!hasDormant"
[15:18:01.198]            // =>  TRUE
[15:18:01.198]          <block atomic="false" info="">
[15:18:01.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:18:01.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:18:01.198]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:18:01.198]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:18:01.198]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:18:01.208]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:18:01.208]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:18:01.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:18:01.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:18:01.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:18:01.218]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:18:01.228]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:18:01.228]          </block>
[15:18:01.228]          // end if-block "!hasDormant"
[15:18:01.228]        </control>
[15:18:01.228]        // end if-block "isSWJ"
[15:18:01.228]      </control>
[15:18:01.228]      <control if="!isSWJ" while="" timeout="0" info="">
[15:18:01.228]        // if-block "!isSWJ"
[15:18:01.228]          // =>  FALSE
[15:18:01.228]        // skip if-block "!isSWJ"
[15:18:01.228]      </control>
[15:18:01.228]      <block atomic="false" info="">
[15:18:01.228]        ReadDP(0x0);
[15:18:01.228]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:18:01.228]      </block>
[15:18:01.228]      // end if-block "protType == 2"
[15:18:01.228]    </control>
[15:18:01.228]  </sequence>
[15:18:01.228]  
[15:18:01.238]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:18:01.238]  
[15:18:01.238]  <debugvars>
[15:18:01.238]    // Pre-defined
[15:18:01.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:18:01.238]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:18:01.238]    __dp=0x00000000
[15:18:01.238]    __ap=0x00000000
[15:18:01.238]    __traceout=0x00000000      (Trace Disabled)
[15:18:01.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:18:01.238]    __FlashAddr=0x00000000
[15:18:01.238]    __FlashLen=0x00000000
[15:18:01.238]    __FlashArg=0x00000000
[15:18:01.238]    __FlashOp=0x00000000
[15:18:01.238]    __Result=0x00000000
[15:18:01.238]  </debugvars>
[15:18:01.238]  
[15:18:01.238]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:18:01.238]    <block atomic="false" info="">
[15:18:01.238]      __var SW_DP_ABORT       = 0x0;
[15:18:01.238]        // -> [SW_DP_ABORT <= 0x00000000]
[15:18:01.238]      __var DP_CTRL_STAT      = 0x4;
[15:18:01.238]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:18:01.238]      __var DP_SELECT         = 0x8;
[15:18:01.238]        // -> [DP_SELECT <= 0x00000008]
[15:18:01.238]      __var powered_down      = 0;
[15:18:01.238]        // -> [powered_down <= 0x00000000]
[15:18:01.238]      WriteDP(DP_SELECT, 0x00000000);
[15:18:01.238]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:18:01.238]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:18:01.248]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:18:01.248]        // -> [powered_down <= 0x00000001]
[15:18:01.248]    </block>
[15:18:01.248]    <control if="powered_down" while="" timeout="0" info="">
[15:18:01.248]      // if-block "powered_down"
[15:18:01.248]        // =>  TRUE
[15:18:01.248]      <block atomic="false" info="">
[15:18:01.248]        Message(0, "Debug/System power-up request sent");
[15:18:01.248]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:18:01.248]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:18:01.248]      </block>
[15:18:01.248]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:18:01.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:18:01.248]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:18:01.248]        // while-condition  =>  FALSE
[15:18:01.248]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:18:01.248]      </control>
[15:18:01.248]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:18:01.248]        // if-block "(__protocol & 0xFFFF) == 1"
[15:18:01.248]          // =>  FALSE
[15:18:01.248]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:18:01.248]      </control>
[15:18:01.248]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:18:01.248]        // if-block "(__protocol & 0xFFFF) == 2"
[15:18:01.248]          // =>  TRUE
[15:18:01.248]        <block atomic="false" info="">
[15:18:01.248]          Message(0, "executing SWD power up");
[15:18:01.258]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:18:01.258]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:18:01.258]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:18:01.268]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:18:01.268]        </block>
[15:18:01.268]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:18:01.268]      </control>
[15:18:01.268]      // end if-block "powered_down"
[15:18:01.268]    </control>
[15:18:01.268]    <block atomic="false" info="">
[15:18:01.268]      __var DEBUG_PORT_VAL    = 0;
[15:18:01.268]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:18:01.268]      __var ACCESS_POINT_VAL  = 0;
[15:18:01.268]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:18:01.268]      __ap = 1; 
[15:18:01.268]        // -> [__ap <= 0x00000001]
[15:18:01.268]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:18:01.278]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:18:01.278]      __ap = 4;
[15:18:01.278]        // -> [__ap <= 0x00000004]
[15:18:01.278]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:18:01.278]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:18:01.278]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:18:01.278]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:18:01.288]    </block>
[15:18:01.288]    <block atomic="false" info="">
[15:18:01.288]      __var nReset = 0x80;
[15:18:01.288]        // -> [nReset <= 0x00000080]
[15:18:01.288]      __var canReadPins = 0;
[15:18:01.288]        // -> [canReadPins <= 0x00000000]
[15:18:01.288]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:18:01.288]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:18:01.288]        // -> [canReadPins <= 0x00000001]
[15:18:01.288]    </block>
[15:18:01.288]    <control if="" while="1" timeout="200" info="">
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.288]      // while-condition  =>  TRUE
[15:18:01.288]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.298]      // while "1"  (timeout="200")
[15:18:01.298]      // while-condition  =>  TRUE
[15:18:01.308]      // while "1"  (timeout="200")
[15:18:01.308]      // while  =>  TIMEOUT
[15:18:01.308]      // end while "1"
[15:18:01.308]    </control>
[15:18:01.308]    <control if="canReadPins" while="" timeout="0" info="">
[15:18:01.308]      // if-block "canReadPins"
[15:18:01.308]        // =>  TRUE
[15:18:01.308]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:18:01.308]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:18:01.308]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:18:01.308]        // while-condition  =>  FALSE
[15:18:01.308]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:18:01.308]      </control>
[15:18:01.308]      // end if-block "canReadPins"
[15:18:01.308]    </control>
[15:18:01.308]    <control if="!canReadPins" while="" timeout="0" info="">
[15:18:01.308]      // if-block "!canReadPins"
[15:18:01.308]        // =>  FALSE
[15:18:01.308]      // skip if-block "!canReadPins"
[15:18:01.308]    </control>
[15:18:01.308]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:18:01.308]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:18:01.308]        // =>  TRUE
[15:18:01.308]      <block atomic="false" info="">
[15:18:01.308]        WriteAP(0x00, 0x190008);
[15:18:01.308]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:18:01.308]        WriteAP(0xF0, 0x01);
[15:18:01.328]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:18:01.328]      </block>
[15:18:01.328]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:18:01.328]    </control>
[15:18:01.328]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:18:01.328]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:18:01.328]        // =>  FALSE
[15:18:01.328]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:18:01.328]    </control>
[15:18:01.328]    <block atomic="false" info="">
[15:18:01.328]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:18:01.338]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:18:01.339]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:18:01.339]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:18:01.339]      __ap = 0; //lets make sure we reset the access point selection
[15:18:01.339]        // -> [__ap <= 0x00000000]
[15:18:01.339]    </block>
[15:18:01.339]  </sequence>
[15:18:01.339]  
[15:18:01.358]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:18:01.358]  
[15:18:01.358]  <debugvars>
[15:18:01.358]    // Pre-defined
[15:18:01.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:18:01.358]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:18:01.358]    __dp=0x00000000
[15:18:01.358]    __ap=0x00000000
[15:18:01.358]    __traceout=0x00000000      (Trace Disabled)
[15:18:01.358]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:18:01.358]    __FlashAddr=0x00000000
[15:18:01.358]    __FlashLen=0x00000000
[15:18:01.358]    __FlashArg=0x00000000
[15:18:01.358]    __FlashOp=0x00000000
[15:18:01.358]    __Result=0x00000000
[15:18:01.358]  </debugvars>
[15:18:01.358]  
[15:18:01.358]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:18:01.358]    <block atomic="false" info="">
[15:18:01.358]      __var deviceID = 0;
[15:18:01.358]        // -> [deviceID <= 0x00000000]
[15:18:01.358]      __var version = 0;
[15:18:01.358]        // -> [version <= 0x00000000]
[15:18:01.368]      __var partNum = 0;
[15:18:01.368]        // -> [partNum <= 0x00000000]
[15:18:01.368]      __var manuf = 0;
[15:18:01.368]        // -> [manuf <= 0x00000000]
[15:18:01.368]      __var isMSPM0G1X0X_G3X0X = 0;
[15:18:01.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:18:01.368]      __var isProduction = 0;
[15:18:01.368]        // -> [isProduction <= 0x00000000]
[15:18:01.368]      __var continueId = 0;
[15:18:01.368]        // -> [continueId <= 0x00000000]
[15:18:01.368]      deviceID =   Read32(0x41C40004);
[15:18:01.378]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:18:01.378]        // -> [deviceID <= 0x2BB8802F]
[15:18:01.378]      version = deviceID >> 28;
[15:18:01.378]        // -> [version <= 0x00000002]
[15:18:01.378]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:18:01.378]        // -> [partNum <= 0x0000BB88]
[15:18:01.378]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:18:01.378]        // -> [manuf <= 0x00000017]
[15:18:01.378]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:18:01.378]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:18:01.378]      isProduction = (version > 0);
[15:18:01.378]        // -> [isProduction <= 0x00000001]
[15:18:01.378]    </block>
[15:18:01.378]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:18:01.378]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:18:01.378]        // =>  FALSE
[15:18:01.378]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:18:01.378]    </control>
[15:18:01.378]    <control if="continueId == 4" while="" timeout="0" info="">
[15:18:01.378]      // if-block "continueId == 4"
[15:18:01.378]        // =>  FALSE
[15:18:01.378]      // skip if-block "continueId == 4"
[15:18:01.378]    </control>
[15:18:01.378]    <control if="!isProduction" while="" timeout="0" info="">
[15:18:01.378]      // if-block "!isProduction"
[15:18:01.378]        // =>  FALSE
[15:18:01.378]      // skip if-block "!isProduction"
[15:18:01.378]    </control>
[15:18:01.378]  </sequence>
[15:18:01.378]  
[15:20:39.332]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:20:39.332]  
[15:20:39.341]  <debugvars>
[15:20:39.341]    // Pre-defined
[15:20:39.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:20:39.341]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:20:39.341]    __dp=0x00000000
[15:20:39.341]    __ap=0x00000000
[15:20:39.341]    __traceout=0x00000000      (Trace Disabled)
[15:20:39.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:20:39.341]    __FlashAddr=0x00000000
[15:20:39.341]    __FlashLen=0x00000000
[15:20:39.341]    __FlashArg=0x00000000
[15:20:39.341]    __FlashOp=0x00000000
[15:20:39.341]    __Result=0x00000000
[15:20:39.341]  </debugvars>
[15:20:39.341]  
[15:20:39.341]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:20:39.342]    <block atomic="false" info="">
[15:20:39.342]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:20:39.343]        // -> [isSWJ <= 0x00000001]
[15:20:39.343]      __var hasDormant = __protocol & 0x00020000;
[15:20:39.343]        // -> [hasDormant <= 0x00000000]
[15:20:39.343]      __var protType   = __protocol & 0x0000FFFF;
[15:20:39.343]        // -> [protType <= 0x00000002]
[15:20:39.343]    </block>
[15:20:39.344]    <control if="protType == 1" while="" timeout="0" info="">
[15:20:39.344]      // if-block "protType == 1"
[15:20:39.344]        // =>  FALSE
[15:20:39.344]      // skip if-block "protType == 1"
[15:20:39.344]    </control>
[15:20:39.344]    <control if="protType == 2" while="" timeout="0" info="">
[15:20:39.344]      // if-block "protType == 2"
[15:20:39.344]        // =>  TRUE
[15:20:39.344]      <control if="isSWJ" while="" timeout="0" info="">
[15:20:39.344]        // if-block "isSWJ"
[15:20:39.344]          // =>  TRUE
[15:20:39.344]        <control if="hasDormant" while="" timeout="0" info="">
[15:20:39.344]          // if-block "hasDormant"
[15:20:39.344]            // =>  FALSE
[15:20:39.344]          // skip if-block "hasDormant"
[15:20:39.344]        </control>
[15:20:39.344]        <control if="!hasDormant" while="" timeout="0" info="">
[15:20:39.346]          // if-block "!hasDormant"
[15:20:39.346]            // =>  TRUE
[15:20:39.346]          <block atomic="false" info="">
[15:20:39.346]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:20:39.346]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:20:39.346]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:20:39.351]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:20:39.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:20:39.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:20:39.353]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:20:39.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:20:39.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:20:39.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:20:39.361]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:20:39.365]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:20:39.365]          </block>
[15:20:39.365]          // end if-block "!hasDormant"
[15:20:39.365]        </control>
[15:20:39.365]        // end if-block "isSWJ"
[15:20:39.365]      </control>
[15:20:39.365]      <control if="!isSWJ" while="" timeout="0" info="">
[15:20:39.365]        // if-block "!isSWJ"
[15:20:39.365]          // =>  FALSE
[15:20:39.365]        // skip if-block "!isSWJ"
[15:20:39.365]      </control>
[15:20:39.365]      <block atomic="false" info="">
[15:20:39.365]        ReadDP(0x0);
[15:20:39.367]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:20:39.367]      </block>
[15:20:39.367]      // end if-block "protType == 2"
[15:20:39.367]    </control>
[15:20:39.367]  </sequence>
[15:20:39.367]  
[15:20:39.373]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:20:39.373]  
[15:20:39.373]  <debugvars>
[15:20:39.373]    // Pre-defined
[15:20:39.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:20:39.373]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:20:39.373]    __dp=0x00000000
[15:20:39.373]    __ap=0x00000000
[15:20:39.373]    __traceout=0x00000000      (Trace Disabled)
[15:20:39.373]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:20:39.373]    __FlashAddr=0x00000000
[15:20:39.373]    __FlashLen=0x00000000
[15:20:39.373]    __FlashArg=0x00000000
[15:20:39.373]    __FlashOp=0x00000000
[15:20:39.373]    __Result=0x00000000
[15:20:39.373]  </debugvars>
[15:20:39.373]  
[15:20:39.373]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:20:39.373]    <block atomic="false" info="">
[15:20:39.373]      __var SW_DP_ABORT       = 0x0;
[15:20:39.373]        // -> [SW_DP_ABORT <= 0x00000000]
[15:20:39.373]      __var DP_CTRL_STAT      = 0x4;
[15:20:39.373]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:20:39.373]      __var DP_SELECT         = 0x8;
[15:20:39.373]        // -> [DP_SELECT <= 0x00000008]
[15:20:39.373]      __var powered_down      = 0;
[15:20:39.373]        // -> [powered_down <= 0x00000000]
[15:20:39.373]      WriteDP(DP_SELECT, 0x00000000);
[15:20:39.373]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:20:39.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:20:39.373]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:20:39.373]        // -> [powered_down <= 0x00000001]
[15:20:39.383]    </block>
[15:20:39.383]    <control if="powered_down" while="" timeout="0" info="">
[15:20:39.383]      // if-block "powered_down"
[15:20:39.383]        // =>  TRUE
[15:20:39.383]      <block atomic="false" info="">
[15:20:39.383]        Message(0, "Debug/System power-up request sent");
[15:20:39.383]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:20:39.383]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:20:39.383]      </block>
[15:20:39.383]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:20:39.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:20:39.383]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:20:39.383]        // while-condition  =>  FALSE
[15:20:39.383]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:20:39.383]      </control>
[15:20:39.383]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:20:39.383]        // if-block "(__protocol & 0xFFFF) == 1"
[15:20:39.383]          // =>  FALSE
[15:20:39.383]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:20:39.383]      </control>
[15:20:39.383]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:20:39.383]        // if-block "(__protocol & 0xFFFF) == 2"
[15:20:39.383]          // =>  TRUE
[15:20:39.383]        <block atomic="false" info="">
[15:20:39.383]          Message(0, "executing SWD power up");
[15:20:39.393]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:20:39.393]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:20:39.393]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:20:39.393]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:20:39.393]        </block>
[15:20:39.393]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:20:39.393]      </control>
[15:20:39.403]      // end if-block "powered_down"
[15:20:39.403]    </control>
[15:20:39.403]    <block atomic="false" info="">
[15:20:39.404]      __var DEBUG_PORT_VAL    = 0;
[15:20:39.404]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:20:39.404]      __var ACCESS_POINT_VAL  = 0;
[15:20:39.404]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:20:39.404]      __ap = 1; 
[15:20:39.404]        // -> [__ap <= 0x00000001]
[15:20:39.404]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:20:39.414]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:20:39.414]      __ap = 4;
[15:20:39.414]        // -> [__ap <= 0x00000004]
[15:20:39.414]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:20:39.414]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:20:39.414]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:20:39.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:20:39.422]    </block>
[15:20:39.422]    <block atomic="false" info="">
[15:20:39.422]      __var nReset = 0x80;
[15:20:39.422]        // -> [nReset <= 0x00000080]
[15:20:39.423]      __var canReadPins = 0;
[15:20:39.424]        // -> [canReadPins <= 0x00000000]
[15:20:39.424]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:20:39.425]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:20:39.425]        // -> [canReadPins <= 0x00000001]
[15:20:39.425]    </block>
[15:20:39.425]    <control if="" while="1" timeout="200" info="">
[15:20:39.425]      // while "1"  (timeout="200")
[15:20:39.425]      // while-condition  =>  TRUE
[15:20:39.425]      // while "1"  (timeout="200")
[15:20:39.431]      // while-condition  =>  TRUE
[15:20:39.431]      // while "1"  (timeout="200")
[15:20:39.431]      // while  =>  TIMEOUT
[15:20:39.431]      // end while "1"
[15:20:39.431]    </control>
[15:20:39.431]    <control if="canReadPins" while="" timeout="0" info="">
[15:20:39.431]      // if-block "canReadPins"
[15:20:39.431]        // =>  TRUE
[15:20:39.431]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:20:39.431]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:20:39.432]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:20:39.434]        // while-condition  =>  FALSE
[15:20:39.434]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:20:39.434]      </control>
[15:20:39.434]      // end if-block "canReadPins"
[15:20:39.434]    </control>
[15:20:39.434]    <control if="!canReadPins" while="" timeout="0" info="">
[15:20:39.434]      // if-block "!canReadPins"
[15:20:39.434]        // =>  FALSE
[15:20:39.434]      // skip if-block "!canReadPins"
[15:20:39.434]    </control>
[15:20:39.434]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:20:39.435]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:20:39.435]        // =>  TRUE
[15:20:39.435]      <block atomic="false" info="">
[15:20:39.435]        WriteAP(0x00, 0x190008);
[15:20:39.436]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:20:39.436]        WriteAP(0xF0, 0x01);
[15:20:39.442]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:20:39.442]      </block>
[15:20:39.442]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:20:39.442]    </control>
[15:20:39.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:20:39.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:20:39.443]        // =>  FALSE
[15:20:39.443]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:20:39.443]    </control>
[15:20:39.443]    <block atomic="false" info="">
[15:20:39.443]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:20:39.448]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:20:39.448]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:20:39.448]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:20:39.451]      __ap = 0; //lets make sure we reset the access point selection
[15:20:39.451]        // -> [__ap <= 0x00000000]
[15:20:39.451]    </block>
[15:20:39.451]  </sequence>
[15:20:39.451]  
[15:20:39.476]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:20:39.476]  
[15:20:39.476]  <debugvars>
[15:20:39.476]    // Pre-defined
[15:20:39.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:20:39.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:20:39.476]    __dp=0x00000000
[15:20:39.476]    __ap=0x00000000
[15:20:39.476]    __traceout=0x00000000      (Trace Disabled)
[15:20:39.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:20:39.476]    __FlashAddr=0x00000000
[15:20:39.476]    __FlashLen=0x00000000
[15:20:39.476]    __FlashArg=0x00000000
[15:20:39.476]    __FlashOp=0x00000000
[15:20:39.476]    __Result=0x00000000
[15:20:39.476]  </debugvars>
[15:20:39.476]  
[15:20:39.484]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:20:39.484]    <block atomic="false" info="">
[15:20:39.484]      __var deviceID = 0;
[15:20:39.484]        // -> [deviceID <= 0x00000000]
[15:20:39.484]      __var version = 0;
[15:20:39.484]        // -> [version <= 0x00000000]
[15:20:39.484]      __var partNum = 0;
[15:20:39.484]        // -> [partNum <= 0x00000000]
[15:20:39.484]      __var manuf = 0;
[15:20:39.484]        // -> [manuf <= 0x00000000]
[15:20:39.484]      __var isMSPM0G1X0X_G3X0X = 0;
[15:20:39.484]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:20:39.484]      __var isProduction = 0;
[15:20:39.484]        // -> [isProduction <= 0x00000000]
[15:20:39.484]      __var continueId = 0;
[15:20:39.484]        // -> [continueId <= 0x00000000]
[15:20:39.484]      deviceID =   Read32(0x41C40004);
[15:20:39.494]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:20:39.494]        // -> [deviceID <= 0x2BB8802F]
[15:20:39.494]      version = deviceID >> 28;
[15:20:39.494]        // -> [version <= 0x00000002]
[15:20:39.494]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:20:39.494]        // -> [partNum <= 0x0000BB88]
[15:20:39.494]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:20:39.494]        // -> [manuf <= 0x00000017]
[15:20:39.494]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:20:39.494]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:20:39.494]      isProduction = (version > 0);
[15:20:39.494]        // -> [isProduction <= 0x00000001]
[15:20:39.494]    </block>
[15:20:39.494]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:20:39.494]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:20:39.494]        // =>  FALSE
[15:20:39.494]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:20:39.494]    </control>
[15:20:39.494]    <control if="continueId == 4" while="" timeout="0" info="">
[15:20:39.494]      // if-block "continueId == 4"
[15:20:39.494]        // =>  FALSE
[15:20:39.494]      // skip if-block "continueId == 4"
[15:20:39.494]    </control>
[15:20:39.494]    <control if="!isProduction" while="" timeout="0" info="">
[15:20:39.494]      // if-block "!isProduction"
[15:20:39.494]        // =>  FALSE
[15:20:39.494]      // skip if-block "!isProduction"
[15:20:39.494]    </control>
[15:20:39.494]  </sequence>
[15:20:39.494]  
[15:21:45.929]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:21:45.929]  
[15:21:45.929]  <debugvars>
[15:21:45.929]    // Pre-defined
[15:21:45.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:21:45.929]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:21:45.929]    __dp=0x00000000
[15:21:45.929]    __ap=0x00000000
[15:21:45.929]    __traceout=0x00000000      (Trace Disabled)
[15:21:45.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:21:45.929]    __FlashAddr=0x00000000
[15:21:45.929]    __FlashLen=0x00000000
[15:21:45.931]    __FlashArg=0x00000000
[15:21:45.931]    __FlashOp=0x00000000
[15:21:45.931]    __Result=0x00000000
[15:21:45.931]  </debugvars>
[15:21:45.931]  
[15:21:45.931]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:21:45.931]    <block atomic="false" info="">
[15:21:45.932]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:21:45.933]        // -> [isSWJ <= 0x00000001]
[15:21:45.933]      __var hasDormant = __protocol & 0x00020000;
[15:21:45.933]        // -> [hasDormant <= 0x00000000]
[15:21:45.933]      __var protType   = __protocol & 0x0000FFFF;
[15:21:45.933]        // -> [protType <= 0x00000002]
[15:21:45.933]    </block>
[15:21:45.933]    <control if="protType == 1" while="" timeout="0" info="">
[15:21:45.933]      // if-block "protType == 1"
[15:21:45.933]        // =>  FALSE
[15:21:45.933]      // skip if-block "protType == 1"
[15:21:45.933]    </control>
[15:21:45.933]    <control if="protType == 2" while="" timeout="0" info="">
[15:21:45.933]      // if-block "protType == 2"
[15:21:45.933]        // =>  TRUE
[15:21:45.933]      <control if="isSWJ" while="" timeout="0" info="">
[15:21:45.933]        // if-block "isSWJ"
[15:21:45.933]          // =>  TRUE
[15:21:45.933]        <control if="hasDormant" while="" timeout="0" info="">
[15:21:45.933]          // if-block "hasDormant"
[15:21:45.933]            // =>  FALSE
[15:21:45.933]          // skip if-block "hasDormant"
[15:21:45.933]        </control>
[15:21:45.935]        <control if="!hasDormant" while="" timeout="0" info="">
[15:21:45.935]          // if-block "!hasDormant"
[15:21:45.935]            // =>  TRUE
[15:21:45.935]          <block atomic="false" info="">
[15:21:45.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:21:45.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:21:45.936]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:21:45.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:21:45.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:21:45.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:21:45.942]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:21:45.944]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:21:45.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:21:45.946]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:21:45.946]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:21:45.948]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:21:45.948]          </block>
[15:21:45.948]          // end if-block "!hasDormant"
[15:21:45.948]        </control>
[15:21:45.948]        // end if-block "isSWJ"
[15:21:45.948]      </control>
[15:21:45.949]      <control if="!isSWJ" while="" timeout="0" info="">
[15:21:45.949]        // if-block "!isSWJ"
[15:21:45.949]          // =>  FALSE
[15:21:45.949]        // skip if-block "!isSWJ"
[15:21:45.949]      </control>
[15:21:45.949]      <block atomic="false" info="">
[15:21:45.949]        ReadDP(0x0);
[15:21:45.951]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:21:45.951]      </block>
[15:21:45.951]      // end if-block "protType == 2"
[15:21:45.951]    </control>
[15:21:45.951]  </sequence>
[15:21:45.951]  
[15:21:45.972]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:21:45.972]  
[15:21:45.972]  <debugvars>
[15:21:45.972]    // Pre-defined
[15:21:45.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:21:45.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:21:45.972]    __dp=0x00000000
[15:21:45.972]    __ap=0x00000000
[15:21:45.972]    __traceout=0x00000000      (Trace Disabled)
[15:21:45.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:21:45.972]    __FlashAddr=0x00000000
[15:21:45.972]    __FlashLen=0x00000000
[15:21:45.972]    __FlashArg=0x00000000
[15:21:45.972]    __FlashOp=0x00000000
[15:21:45.972]    __Result=0x00000000
[15:21:45.972]  </debugvars>
[15:21:45.972]  
[15:21:45.972]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:21:45.972]    <block atomic="false" info="">
[15:21:45.972]      __var SW_DP_ABORT       = 0x0;
[15:21:45.972]        // -> [SW_DP_ABORT <= 0x00000000]
[15:21:45.972]      __var DP_CTRL_STAT      = 0x4;
[15:21:45.972]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:21:45.972]      __var DP_SELECT         = 0x8;
[15:21:45.972]        // -> [DP_SELECT <= 0x00000008]
[15:21:45.972]      __var powered_down      = 0;
[15:21:45.979]        // -> [powered_down <= 0x00000000]
[15:21:45.979]      WriteDP(DP_SELECT, 0x00000000);
[15:21:45.982]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:21:45.982]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:21:45.984]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:21:45.984]        // -> [powered_down <= 0x00000001]
[15:21:45.984]    </block>
[15:21:45.984]    <control if="powered_down" while="" timeout="0" info="">
[15:21:45.984]      // if-block "powered_down"
[15:21:45.984]        // =>  TRUE
[15:21:45.984]      <block atomic="false" info="">
[15:21:45.984]        Message(0, "Debug/System power-up request sent");
[15:21:45.984]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:21:45.989]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:21:45.992]      </block>
[15:21:45.992]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:21:45.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:21:45.994]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:21:45.994]        // while-condition  =>  FALSE
[15:21:45.994]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:21:45.994]      </control>
[15:21:45.994]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:21:45.994]        // if-block "(__protocol & 0xFFFF) == 1"
[15:21:45.994]          // =>  FALSE
[15:21:45.994]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:21:45.994]      </control>
[15:21:45.994]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:21:45.994]        // if-block "(__protocol & 0xFFFF) == 2"
[15:21:45.994]          // =>  TRUE
[15:21:45.994]        <block atomic="false" info="">
[15:21:45.994]          Message(0, "executing SWD power up");
[15:21:45.994]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:21:46.002]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:21:46.002]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:21:46.019]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:21:46.019]        </block>
[15:21:46.019]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:21:46.019]      </control>
[15:21:46.019]      // end if-block "powered_down"
[15:21:46.019]    </control>
[15:21:46.019]    <block atomic="false" info="">
[15:21:46.019]      __var DEBUG_PORT_VAL    = 0;
[15:21:46.019]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:21:46.019]      __var ACCESS_POINT_VAL  = 0;
[15:21:46.019]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:21:46.019]      __ap = 1; 
[15:21:46.019]        // -> [__ap <= 0x00000001]
[15:21:46.019]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:21:46.024]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:21:46.024]      __ap = 4;
[15:21:46.024]        // -> [__ap <= 0x00000004]
[15:21:46.024]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:21:46.063]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:21:46.063]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:21:46.063]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:21:46.063]    </block>
[15:21:46.069]    <block atomic="false" info="">
[15:21:46.069]      __var nReset = 0x80;
[15:21:46.069]        // -> [nReset <= 0x00000080]
[15:21:46.069]      __var canReadPins = 0;
[15:21:46.069]        // -> [canReadPins <= 0x00000000]
[15:21:46.069]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:21:46.093]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:21:46.093]        // -> [canReadPins <= 0x00000001]
[15:21:46.093]    </block>
[15:21:46.093]    <control if="" while="1" timeout="200" info="">
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.093]      // while "1"  (timeout="200")
[15:21:46.093]      // while-condition  =>  TRUE
[15:21:46.099]      // while "1"  (timeout="200")
[15:21:46.099]      // while-condition  =>  TRUE
[15:21:46.099]      // while "1"  (timeout="200")
[15:21:46.099]      // while-condition  =>  TRUE
[15:21:46.099]      // while "1"  (timeout="200")
[15:21:46.099]      // while-condition  =>  TRUE
[15:21:46.099]      // while "1"  (timeout="200")
[15:21:46.099]      // while-condition  =>  TRUE
[15:21:46.099]      // while "1"  (timeout="200")
[15:21:46.101]      // while-condition  =>  TRUE
[15:21:46.101]      // while "1"  (timeout="200")
[15:21:46.101]      // while  =>  TIMEOUT
[15:21:46.101]      // end while "1"
[15:21:46.101]    </control>
[15:21:46.101]    <control if="canReadPins" while="" timeout="0" info="">
[15:21:46.101]      // if-block "canReadPins"
[15:21:46.101]        // =>  TRUE
[15:21:46.101]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:21:46.101]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:21:46.101]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:21:46.101]        // while-condition  =>  FALSE
[15:21:46.101]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:21:46.101]      </control>
[15:21:46.101]      // end if-block "canReadPins"
[15:21:46.101]    </control>
[15:21:46.101]    <control if="!canReadPins" while="" timeout="0" info="">
[15:21:46.101]      // if-block "!canReadPins"
[15:21:46.101]        // =>  FALSE
[15:21:46.101]      // skip if-block "!canReadPins"
[15:21:46.101]    </control>
[15:21:46.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:21:46.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:21:46.101]        // =>  TRUE
[15:21:46.101]      <block atomic="false" info="">
[15:21:46.101]        WriteAP(0x00, 0x190008);
[15:21:46.123]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:21:46.123]        WriteAP(0xF0, 0x01);
[15:21:46.169]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:21:46.169]      </block>
[15:21:46.169]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:21:46.169]    </control>
[15:21:46.169]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:21:46.169]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:21:46.169]        // =>  FALSE
[15:21:46.169]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:21:46.172]    </control>
[15:21:46.172]    <block atomic="false" info="">
[15:21:46.172]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:21:46.182]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:21:46.182]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:21:46.182]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:21:46.182]      __ap = 0; //lets make sure we reset the access point selection
[15:21:46.182]        // -> [__ap <= 0x00000000]
[15:21:46.182]    </block>
[15:21:46.182]  </sequence>
[15:21:46.182]  
[15:21:46.203]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:21:46.203]  
[15:21:46.203]  <debugvars>
[15:21:46.203]    // Pre-defined
[15:21:46.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:21:46.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:21:46.203]    __dp=0x00000000
[15:21:46.203]    __ap=0x00000000
[15:21:46.203]    __traceout=0x00000000      (Trace Disabled)
[15:21:46.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:21:46.203]    __FlashAddr=0x00000000
[15:21:46.203]    __FlashLen=0x00000000
[15:21:46.203]    __FlashArg=0x00000000
[15:21:46.203]    __FlashOp=0x00000000
[15:21:46.203]    __Result=0x00000000
[15:21:46.203]  </debugvars>
[15:21:46.203]  
[15:21:46.203]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:21:46.203]    <block atomic="false" info="">
[15:21:46.203]      __var deviceID = 0;
[15:21:46.203]        // -> [deviceID <= 0x00000000]
[15:21:46.203]      __var version = 0;
[15:21:46.203]        // -> [version <= 0x00000000]
[15:21:46.203]      __var partNum = 0;
[15:21:46.203]        // -> [partNum <= 0x00000000]
[15:21:46.203]      __var manuf = 0;
[15:21:46.203]        // -> [manuf <= 0x00000000]
[15:21:46.203]      __var isMSPM0G1X0X_G3X0X = 0;
[15:21:46.203]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:21:46.203]      __var isProduction = 0;
[15:21:46.203]        // -> [isProduction <= 0x00000000]
[15:21:46.203]      __var continueId = 0;
[15:21:46.203]        // -> [continueId <= 0x00000000]
[15:21:46.203]      deviceID =   Read32(0x41C40004);
[15:21:46.212]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:21:46.212]        // -> [deviceID <= 0x2BB8802F]
[15:21:46.212]      version = deviceID >> 28;
[15:21:46.212]        // -> [version <= 0x00000002]
[15:21:46.212]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:21:46.212]        // -> [partNum <= 0x0000BB88]
[15:21:46.212]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:21:46.212]        // -> [manuf <= 0x00000017]
[15:21:46.212]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:21:46.212]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:21:46.212]      isProduction = (version > 0);
[15:21:46.212]        // -> [isProduction <= 0x00000001]
[15:21:46.212]    </block>
[15:21:46.212]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:21:46.212]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:21:46.212]        // =>  FALSE
[15:21:46.212]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:21:46.212]    </control>
[15:21:46.212]    <control if="continueId == 4" while="" timeout="0" info="">
[15:21:46.212]      // if-block "continueId == 4"
[15:21:46.212]        // =>  FALSE
[15:21:46.212]      // skip if-block "continueId == 4"
[15:21:46.212]    </control>
[15:21:46.212]    <control if="!isProduction" while="" timeout="0" info="">
[15:21:46.212]      // if-block "!isProduction"
[15:21:46.212]        // =>  FALSE
[15:21:46.212]      // skip if-block "!isProduction"
[15:21:46.212]    </control>
[15:21:46.212]  </sequence>
[15:21:46.212]  
[15:22:41.801]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:22:41.801]  
[15:22:41.801]  <debugvars>
[15:22:41.801]    // Pre-defined
[15:22:41.801]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:22:41.801]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:22:41.801]    __dp=0x00000000
[15:22:41.801]    __ap=0x00000000
[15:22:41.801]    __traceout=0x00000000      (Trace Disabled)
[15:22:41.801]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:22:41.801]    __FlashAddr=0x00000000
[15:22:41.801]    __FlashLen=0x00000000
[15:22:41.801]    __FlashArg=0x00000000
[15:22:41.801]    __FlashOp=0x00000000
[15:22:41.801]    __Result=0x00000000
[15:22:41.801]  </debugvars>
[15:22:41.801]  
[15:22:41.801]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:22:41.801]    <block atomic="false" info="">
[15:22:41.801]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:22:41.801]        // -> [isSWJ <= 0x00000001]
[15:22:41.801]      __var hasDormant = __protocol & 0x00020000;
[15:22:41.801]        // -> [hasDormant <= 0x00000000]
[15:22:41.801]      __var protType   = __protocol & 0x0000FFFF;
[15:22:41.801]        // -> [protType <= 0x00000002]
[15:22:41.804]    </block>
[15:22:41.804]    <control if="protType == 1" while="" timeout="0" info="">
[15:22:41.804]      // if-block "protType == 1"
[15:22:41.804]        // =>  FALSE
[15:22:41.804]      // skip if-block "protType == 1"
[15:22:41.804]    </control>
[15:22:41.804]    <control if="protType == 2" while="" timeout="0" info="">
[15:22:41.804]      // if-block "protType == 2"
[15:22:41.804]        // =>  TRUE
[15:22:41.804]      <control if="isSWJ" while="" timeout="0" info="">
[15:22:41.804]        // if-block "isSWJ"
[15:22:41.804]          // =>  TRUE
[15:22:41.804]        <control if="hasDormant" while="" timeout="0" info="">
[15:22:41.804]          // if-block "hasDormant"
[15:22:41.804]            // =>  FALSE
[15:22:41.804]          // skip if-block "hasDormant"
[15:22:41.804]        </control>
[15:22:41.804]        <control if="!hasDormant" while="" timeout="0" info="">
[15:22:41.804]          // if-block "!hasDormant"
[15:22:41.804]            // =>  TRUE
[15:22:41.804]          <block atomic="false" info="">
[15:22:41.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:22:41.804]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:22:41.804]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:22:41.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:22:41.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:22:41.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:22:41.811]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:22:41.811]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:22:41.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:22:41.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:22:41.814]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:22:41.814]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:22:41.814]          </block>
[15:22:41.814]          // end if-block "!hasDormant"
[15:22:41.814]        </control>
[15:22:41.814]        // end if-block "isSWJ"
[15:22:41.814]      </control>
[15:22:41.814]      <control if="!isSWJ" while="" timeout="0" info="">
[15:22:41.814]        // if-block "!isSWJ"
[15:22:41.814]          // =>  FALSE
[15:22:41.814]        // skip if-block "!isSWJ"
[15:22:41.814]      </control>
[15:22:41.814]      <block atomic="false" info="">
[15:22:41.814]        ReadDP(0x0);
[15:22:41.814]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:22:41.814]      </block>
[15:22:41.814]      // end if-block "protType == 2"
[15:22:41.814]    </control>
[15:22:41.814]  </sequence>
[15:22:41.814]  
[15:22:41.824]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:22:41.824]  
[15:22:41.824]  <debugvars>
[15:22:41.824]    // Pre-defined
[15:22:41.824]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:22:41.824]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:22:41.824]    __dp=0x00000000
[15:22:41.824]    __ap=0x00000000
[15:22:41.824]    __traceout=0x00000000      (Trace Disabled)
[15:22:41.824]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:22:41.824]    __FlashAddr=0x00000000
[15:22:41.824]    __FlashLen=0x00000000
[15:22:41.824]    __FlashArg=0x00000000
[15:22:41.824]    __FlashOp=0x00000000
[15:22:41.824]    __Result=0x00000000
[15:22:41.824]  </debugvars>
[15:22:41.824]  
[15:22:41.824]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:22:41.824]    <block atomic="false" info="">
[15:22:41.824]      __var SW_DP_ABORT       = 0x0;
[15:22:41.824]        // -> [SW_DP_ABORT <= 0x00000000]
[15:22:41.824]      __var DP_CTRL_STAT      = 0x4;
[15:22:41.824]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:22:41.824]      __var DP_SELECT         = 0x8;
[15:22:41.824]        // -> [DP_SELECT <= 0x00000008]
[15:22:41.824]      __var powered_down      = 0;
[15:22:41.824]        // -> [powered_down <= 0x00000000]
[15:22:41.824]      WriteDP(DP_SELECT, 0x00000000);
[15:22:41.824]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:22:41.824]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:22:41.824]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:22:41.824]        // -> [powered_down <= 0x00000001]
[15:22:41.824]    </block>
[15:22:41.824]    <control if="powered_down" while="" timeout="0" info="">
[15:22:41.824]      // if-block "powered_down"
[15:22:41.824]        // =>  TRUE
[15:22:41.824]      <block atomic="false" info="">
[15:22:41.824]        Message(0, "Debug/System power-up request sent");
[15:22:41.832]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:22:41.832]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:22:41.832]      </block>
[15:22:41.834]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:22:41.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:22:41.834]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:22:41.834]        // while-condition  =>  FALSE
[15:22:41.834]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:22:41.834]      </control>
[15:22:41.834]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:22:41.834]        // if-block "(__protocol & 0xFFFF) == 1"
[15:22:41.834]          // =>  FALSE
[15:22:41.834]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:22:41.834]      </control>
[15:22:41.834]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:22:41.834]        // if-block "(__protocol & 0xFFFF) == 2"
[15:22:41.834]          // =>  TRUE
[15:22:41.834]        <block atomic="false" info="">
[15:22:41.834]          Message(0, "executing SWD power up");
[15:22:41.834]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:22:41.834]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:22:41.834]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:22:41.842]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:22:41.842]        </block>
[15:22:41.842]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:22:41.842]      </control>
[15:22:41.842]      // end if-block "powered_down"
[15:22:41.842]    </control>
[15:22:41.842]    <block atomic="false" info="">
[15:22:41.842]      __var DEBUG_PORT_VAL    = 0;
[15:22:41.844]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:22:41.844]      __var ACCESS_POINT_VAL  = 0;
[15:22:41.844]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:22:41.844]      __ap = 1; 
[15:22:41.844]        // -> [__ap <= 0x00000001]
[15:22:41.844]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:22:41.844]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:22:41.844]      __ap = 4;
[15:22:41.844]        // -> [__ap <= 0x00000004]
[15:22:41.844]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:22:41.854]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:22:41.854]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:22:41.854]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:22:41.854]    </block>
[15:22:41.854]    <block atomic="false" info="">
[15:22:41.854]      __var nReset = 0x80;
[15:22:41.854]        // -> [nReset <= 0x00000080]
[15:22:41.854]      __var canReadPins = 0;
[15:22:41.854]        // -> [canReadPins <= 0x00000000]
[15:22:41.854]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:22:41.854]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:22:41.854]        // -> [canReadPins <= 0x00000001]
[15:22:41.854]    </block>
[15:22:41.854]    <control if="" while="1" timeout="200" info="">
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.854]      // while "1"  (timeout="200")
[15:22:41.854]      // while-condition  =>  TRUE
[15:22:41.863]      // while "1"  (timeout="200")
[15:22:41.863]      // while-condition  =>  TRUE
[15:22:41.863]      // while "1"  (timeout="200")
[15:22:41.863]      // while-condition  =>  TRUE
[15:22:41.863]      // while "1"  (timeout="200")
[15:22:41.863]      // while-condition  =>  TRUE
[15:22:41.863]      // while "1"  (timeout="200")
[15:22:41.863]      // while-condition  =>  TRUE
[15:22:41.863]      // while "1"  (timeout="200")
[15:22:41.863]      // while-condition  =>  TRUE
[15:22:41.863]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.864]      // while "1"  (timeout="200")
[15:22:41.864]      // while-condition  =>  TRUE
[15:22:41.866]      // while "1"  (timeout="200")
[15:22:41.866]      // while  =>  TIMEOUT
[15:22:41.866]      // end while "1"
[15:22:41.866]    </control>
[15:22:41.866]    <control if="canReadPins" while="" timeout="0" info="">
[15:22:41.866]      // if-block "canReadPins"
[15:22:41.866]        // =>  TRUE
[15:22:41.866]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:22:41.866]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:22:41.866]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:22:41.866]        // while-condition  =>  FALSE
[15:22:41.866]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:22:41.866]      </control>
[15:22:41.866]      // end if-block "canReadPins"
[15:22:41.866]    </control>
[15:22:41.866]    <control if="!canReadPins" while="" timeout="0" info="">
[15:22:41.866]      // if-block "!canReadPins"
[15:22:41.866]        // =>  FALSE
[15:22:41.866]      // skip if-block "!canReadPins"
[15:22:41.866]    </control>
[15:22:41.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:22:41.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:22:41.866]        // =>  TRUE
[15:22:41.866]      <block atomic="false" info="">
[15:22:41.866]        WriteAP(0x00, 0x190008);
[15:22:41.866]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:22:41.866]        WriteAP(0xF0, 0x01);
[15:22:41.874]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:22:41.874]      </block>
[15:22:41.874]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:22:41.874]    </control>
[15:22:41.874]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:22:41.874]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:22:41.874]        // =>  FALSE
[15:22:41.874]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:22:41.874]    </control>
[15:22:41.874]    <block atomic="false" info="">
[15:22:41.874]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:22:41.874]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:22:41.874]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:22:41.874]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:22:41.874]      __ap = 0; //lets make sure we reset the access point selection
[15:22:41.874]        // -> [__ap <= 0x00000000]
[15:22:41.874]    </block>
[15:22:41.874]  </sequence>
[15:22:41.874]  
[15:22:41.899]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:22:41.899]  
[15:22:41.899]  <debugvars>
[15:22:41.899]    // Pre-defined
[15:22:41.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:22:41.904]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:22:41.904]    __dp=0x00000000
[15:22:41.904]    __ap=0x00000000
[15:22:41.904]    __traceout=0x00000000      (Trace Disabled)
[15:22:41.904]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:22:41.904]    __FlashAddr=0x00000000
[15:22:41.904]    __FlashLen=0x00000000
[15:22:41.904]    __FlashArg=0x00000000
[15:22:41.904]    __FlashOp=0x00000000
[15:22:41.904]    __Result=0x00000000
[15:22:41.904]  </debugvars>
[15:22:41.904]  
[15:22:41.904]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:22:41.904]    <block atomic="false" info="">
[15:22:41.904]      __var deviceID = 0;
[15:22:41.904]        // -> [deviceID <= 0x00000000]
[15:22:41.904]      __var version = 0;
[15:22:41.904]        // -> [version <= 0x00000000]
[15:22:41.904]      __var partNum = 0;
[15:22:41.904]        // -> [partNum <= 0x00000000]
[15:22:41.904]      __var manuf = 0;
[15:22:41.904]        // -> [manuf <= 0x00000000]
[15:22:41.904]      __var isMSPM0G1X0X_G3X0X = 0;
[15:22:41.904]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:22:41.904]      __var isProduction = 0;
[15:22:41.904]        // -> [isProduction <= 0x00000000]
[15:22:41.904]      __var continueId = 0;
[15:22:41.904]        // -> [continueId <= 0x00000000]
[15:22:41.904]      deviceID =   Read32(0x41C40004);
[15:22:41.909]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:22:41.909]        // -> [deviceID <= 0x2BB8802F]
[15:22:41.909]      version = deviceID >> 28;
[15:22:41.909]        // -> [version <= 0x00000002]
[15:22:41.909]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:22:41.909]        // -> [partNum <= 0x0000BB88]
[15:22:41.909]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:22:41.909]        // -> [manuf <= 0x00000017]
[15:22:41.909]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:22:41.909]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:22:41.909]      isProduction = (version > 0);
[15:22:41.909]        // -> [isProduction <= 0x00000001]
[15:22:41.909]    </block>
[15:22:41.914]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:22:41.914]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:22:41.914]        // =>  FALSE
[15:22:41.914]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:22:41.914]    </control>
[15:22:41.914]    <control if="continueId == 4" while="" timeout="0" info="">
[15:22:41.914]      // if-block "continueId == 4"
[15:22:41.914]        // =>  FALSE
[15:22:41.914]      // skip if-block "continueId == 4"
[15:22:41.914]    </control>
[15:22:41.914]    <control if="!isProduction" while="" timeout="0" info="">
[15:22:41.914]      // if-block "!isProduction"
[15:22:41.914]        // =>  FALSE
[15:22:41.914]      // skip if-block "!isProduction"
[15:22:41.914]    </control>
[15:22:41.914]  </sequence>
[15:22:41.914]  
[15:23:06.594]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:23:06.594]  
[15:23:06.604]  <debugvars>
[15:23:06.604]    // Pre-defined
[15:23:06.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:23:06.604]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:23:06.604]    __dp=0x00000000
[15:23:06.604]    __ap=0x00000000
[15:23:06.604]    __traceout=0x00000000      (Trace Disabled)
[15:23:06.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:23:06.604]    __FlashAddr=0x00000000
[15:23:06.604]    __FlashLen=0x00000000
[15:23:06.604]    __FlashArg=0x00000000
[15:23:06.604]    __FlashOp=0x00000000
[15:23:06.604]    __Result=0x00000000
[15:23:06.604]  </debugvars>
[15:23:06.604]  
[15:23:06.604]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:23:06.604]    <block atomic="false" info="">
[15:23:06.604]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:23:06.604]        // -> [isSWJ <= 0x00000001]
[15:23:06.604]      __var hasDormant = __protocol & 0x00020000;
[15:23:06.604]        // -> [hasDormant <= 0x00000000]
[15:23:06.604]      __var protType   = __protocol & 0x0000FFFF;
[15:23:06.604]        // -> [protType <= 0x00000002]
[15:23:06.604]    </block>
[15:23:06.604]    <control if="protType == 1" while="" timeout="0" info="">
[15:23:06.604]      // if-block "protType == 1"
[15:23:06.604]        // =>  FALSE
[15:23:06.604]      // skip if-block "protType == 1"
[15:23:06.604]    </control>
[15:23:06.604]    <control if="protType == 2" while="" timeout="0" info="">
[15:23:06.604]      // if-block "protType == 2"
[15:23:06.604]        // =>  TRUE
[15:23:06.604]      <control if="isSWJ" while="" timeout="0" info="">
[15:23:06.604]        // if-block "isSWJ"
[15:23:06.604]          // =>  TRUE
[15:23:06.604]        <control if="hasDormant" while="" timeout="0" info="">
[15:23:06.604]          // if-block "hasDormant"
[15:23:06.604]            // =>  FALSE
[15:23:06.604]          // skip if-block "hasDormant"
[15:23:06.604]        </control>
[15:23:06.604]        <control if="!hasDormant" while="" timeout="0" info="">
[15:23:06.604]          // if-block "!hasDormant"
[15:23:06.604]            // =>  TRUE
[15:23:06.604]          <block atomic="false" info="">
[15:23:06.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:23:06.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:23:06.612]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:23:06.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:23:06.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:23:06.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:23:06.614]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:23:06.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:23:06.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:23:06.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:23:06.614]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:23:06.614]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:23:06.614]          </block>
[15:23:06.614]          // end if-block "!hasDormant"
[15:23:06.614]        </control>
[15:23:06.614]        // end if-block "isSWJ"
[15:23:06.614]      </control>
[15:23:06.614]      <control if="!isSWJ" while="" timeout="0" info="">
[15:23:06.614]        // if-block "!isSWJ"
[15:23:06.614]          // =>  FALSE
[15:23:06.614]        // skip if-block "!isSWJ"
[15:23:06.622]      </control>
[15:23:06.622]      <block atomic="false" info="">
[15:23:06.622]        ReadDP(0x0);
[15:23:06.624]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:23:06.624]      </block>
[15:23:06.624]      // end if-block "protType == 2"
[15:23:06.624]    </control>
[15:23:06.624]  </sequence>
[15:23:06.624]  
[15:23:06.624]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:23:06.624]  
[15:23:06.624]  <debugvars>
[15:23:06.624]    // Pre-defined
[15:23:06.624]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:23:06.624]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:23:06.624]    __dp=0x00000000
[15:23:06.624]    __ap=0x00000000
[15:23:06.624]    __traceout=0x00000000      (Trace Disabled)
[15:23:06.624]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:23:06.624]    __FlashAddr=0x00000000
[15:23:06.624]    __FlashLen=0x00000000
[15:23:06.624]    __FlashArg=0x00000000
[15:23:06.624]    __FlashOp=0x00000000
[15:23:06.624]    __Result=0x00000000
[15:23:06.624]  </debugvars>
[15:23:06.624]  
[15:23:06.624]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:23:06.624]    <block atomic="false" info="">
[15:23:06.624]      __var SW_DP_ABORT       = 0x0;
[15:23:06.624]        // -> [SW_DP_ABORT <= 0x00000000]
[15:23:06.624]      __var DP_CTRL_STAT      = 0x4;
[15:23:06.624]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:23:06.624]      __var DP_SELECT         = 0x8;
[15:23:06.624]        // -> [DP_SELECT <= 0x00000008]
[15:23:06.624]      __var powered_down      = 0;
[15:23:06.624]        // -> [powered_down <= 0x00000000]
[15:23:06.624]      WriteDP(DP_SELECT, 0x00000000);
[15:23:06.634]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:23:06.634]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:23:06.634]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:23:06.634]        // -> [powered_down <= 0x00000001]
[15:23:06.634]    </block>
[15:23:06.634]    <control if="powered_down" while="" timeout="0" info="">
[15:23:06.634]      // if-block "powered_down"
[15:23:06.634]        // =>  TRUE
[15:23:06.634]      <block atomic="false" info="">
[15:23:06.634]        Message(0, "Debug/System power-up request sent");
[15:23:06.634]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:23:06.647]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:23:06.647]      </block>
[15:23:06.647]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:23:06.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:23:06.650]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:23:06.650]        // while-condition  =>  FALSE
[15:23:06.650]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:23:06.650]      </control>
[15:23:06.650]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:23:06.650]        // if-block "(__protocol & 0xFFFF) == 1"
[15:23:06.650]          // =>  FALSE
[15:23:06.650]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:23:06.650]      </control>
[15:23:06.650]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:23:06.650]        // if-block "(__protocol & 0xFFFF) == 2"
[15:23:06.650]          // =>  TRUE
[15:23:06.650]        <block atomic="false" info="">
[15:23:06.650]          Message(0, "executing SWD power up");
[15:23:06.654]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:23:06.657]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:23:06.657]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:23:06.657]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:23:06.657]        </block>
[15:23:06.657]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:23:06.657]      </control>
[15:23:06.657]      // end if-block "powered_down"
[15:23:06.657]    </control>
[15:23:06.657]    <block atomic="false" info="">
[15:23:06.657]      __var DEBUG_PORT_VAL    = 0;
[15:23:06.657]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:23:06.657]      __var ACCESS_POINT_VAL  = 0;
[15:23:06.657]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:23:06.657]      __ap = 1; 
[15:23:06.657]        // -> [__ap <= 0x00000001]
[15:23:06.657]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:23:06.657]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:23:06.657]      __ap = 4;
[15:23:06.657]        // -> [__ap <= 0x00000004]
[15:23:06.657]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:23:06.666]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:23:06.666]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:23:06.666]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:23:06.666]    </block>
[15:23:06.666]    <block atomic="false" info="">
[15:23:06.666]      __var nReset = 0x80;
[15:23:06.666]        // -> [nReset <= 0x00000080]
[15:23:06.666]      __var canReadPins = 0;
[15:23:06.666]        // -> [canReadPins <= 0x00000000]
[15:23:06.666]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:23:06.666]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:23:06.666]        // -> [canReadPins <= 0x00000001]
[15:23:06.666]    </block>
[15:23:06.666]    <control if="" while="1" timeout="200" info="">
[15:23:06.666]      // while "1"  (timeout="200")
[15:23:06.666]      // while-condition  =>  TRUE
[15:23:06.666]      // while "1"  (timeout="200")
[15:23:06.666]      // while-condition  =>  TRUE
[15:23:06.666]      // while "1"  (timeout="200")
[15:23:06.674]      // while-condition  =>  TRUE
[15:23:06.674]      // while "1"  (timeout="200")
[15:23:06.674]      // while-condition  =>  TRUE
[15:23:06.674]      // while "1"  (timeout="200")
[15:23:06.674]      // while-condition  =>  TRUE
[15:23:06.674]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.675]      // while "1"  (timeout="200")
[15:23:06.675]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.678]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.678]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.678]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.678]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.678]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.678]      // while-condition  =>  TRUE
[15:23:06.678]      // while "1"  (timeout="200")
[15:23:06.679]      // while-condition  =>  TRUE
[15:23:06.679]      // while "1"  (timeout="200")
[15:23:06.679]      // while  =>  TIMEOUT
[15:23:06.679]      // end while "1"
[15:23:06.679]    </control>
[15:23:06.679]    <control if="canReadPins" while="" timeout="0" info="">
[15:23:06.679]      // if-block "canReadPins"
[15:23:06.679]        // =>  TRUE
[15:23:06.679]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:23:06.679]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:23:06.680]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:23:06.680]        // while-condition  =>  FALSE
[15:23:06.680]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:23:06.680]      </control>
[15:23:06.680]      // end if-block "canReadPins"
[15:23:06.680]    </control>
[15:23:06.684]    <control if="!canReadPins" while="" timeout="0" info="">
[15:23:06.684]      // if-block "!canReadPins"
[15:23:06.684]        // =>  FALSE
[15:23:06.684]      // skip if-block "!canReadPins"
[15:23:06.684]    </control>
[15:23:06.684]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:23:06.685]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:23:06.685]        // =>  TRUE
[15:23:06.685]      <block atomic="false" info="">
[15:23:06.685]        WriteAP(0x00, 0x190008);
[15:23:06.686]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:23:06.686]        WriteAP(0xF0, 0x01);
[15:23:06.686]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:23:06.686]      </block>
[15:23:06.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:23:06.686]    </control>
[15:23:06.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:23:06.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:23:06.686]        // =>  FALSE
[15:23:06.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:23:06.686]    </control>
[15:23:06.686]    <block atomic="false" info="">
[15:23:06.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:23:06.696]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:23:06.696]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:23:06.696]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:23:06.696]      __ap = 0; //lets make sure we reset the access point selection
[15:23:06.696]        // -> [__ap <= 0x00000000]
[15:23:06.696]    </block>
[15:23:06.696]  </sequence>
[15:23:06.696]  
[15:23:06.724]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:23:06.724]  
[15:23:06.724]  <debugvars>
[15:23:06.724]    // Pre-defined
[15:23:06.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:23:06.724]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:23:06.724]    __dp=0x00000000
[15:23:06.724]    __ap=0x00000000
[15:23:06.724]    __traceout=0x00000000      (Trace Disabled)
[15:23:06.724]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:23:06.724]    __FlashAddr=0x00000000
[15:23:06.724]    __FlashLen=0x00000000
[15:23:06.724]    __FlashArg=0x00000000
[15:23:06.724]    __FlashOp=0x00000000
[15:23:06.724]    __Result=0x00000000
[15:23:06.724]  </debugvars>
[15:23:06.724]  
[15:23:06.724]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:23:06.724]    <block atomic="false" info="">
[15:23:06.724]      __var deviceID = 0;
[15:23:06.724]        // -> [deviceID <= 0x00000000]
[15:23:06.724]      __var version = 0;
[15:23:06.724]        // -> [version <= 0x00000000]
[15:23:06.724]      __var partNum = 0;
[15:23:06.724]        // -> [partNum <= 0x00000000]
[15:23:06.724]      __var manuf = 0;
[15:23:06.724]        // -> [manuf <= 0x00000000]
[15:23:06.724]      __var isMSPM0G1X0X_G3X0X = 0;
[15:23:06.724]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:23:06.724]      __var isProduction = 0;
[15:23:06.724]        // -> [isProduction <= 0x00000000]
[15:23:06.724]      __var continueId = 0;
[15:23:06.724]        // -> [continueId <= 0x00000000]
[15:23:06.724]      deviceID =   Read32(0x41C40004);
[15:23:06.734]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:23:06.734]        // -> [deviceID <= 0x2BB8802F]
[15:23:06.734]      version = deviceID >> 28;
[15:23:06.734]        // -> [version <= 0x00000002]
[15:23:06.734]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:23:06.734]        // -> [partNum <= 0x0000BB88]
[15:23:06.734]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:23:06.734]        // -> [manuf <= 0x00000017]
[15:23:06.734]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:23:06.734]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:23:06.734]      isProduction = (version > 0);
[15:23:06.734]        // -> [isProduction <= 0x00000001]
[15:23:06.734]    </block>
[15:23:06.734]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:23:06.734]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:23:06.734]        // =>  FALSE
[15:23:06.734]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:23:06.734]    </control>
[15:23:06.734]    <control if="continueId == 4" while="" timeout="0" info="">
[15:23:06.734]      // if-block "continueId == 4"
[15:23:06.734]        // =>  FALSE
[15:23:06.734]      // skip if-block "continueId == 4"
[15:23:06.734]    </control>
[15:23:06.734]    <control if="!isProduction" while="" timeout="0" info="">
[15:23:06.734]      // if-block "!isProduction"
[15:23:06.734]        // =>  FALSE
[15:23:06.734]      // skip if-block "!isProduction"
[15:23:06.734]    </control>
[15:23:06.734]  </sequence>
[15:23:06.734]  
[15:37:36.753]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:37:36.753]  
[15:37:36.767]  <debugvars>
[15:37:36.767]    // Pre-defined
[15:37:36.767]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:37:36.767]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:37:36.767]    __dp=0x00000000
[15:37:36.767]    __ap=0x00000000
[15:37:36.767]    __traceout=0x00000000      (Trace Disabled)
[15:37:36.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:37:36.767]    __FlashAddr=0x00000000
[15:37:36.767]    __FlashLen=0x00000000
[15:37:36.767]    __FlashArg=0x00000000
[15:37:36.767]    __FlashOp=0x00000000
[15:37:36.767]    __Result=0x00000000
[15:37:36.767]  </debugvars>
[15:37:36.767]  
[15:37:36.767]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:37:36.767]    <block atomic="false" info="">
[15:37:36.767]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:37:36.767]        // -> [isSWJ <= 0x00000001]
[15:37:36.767]      __var hasDormant = __protocol & 0x00020000;
[15:37:36.767]        // -> [hasDormant <= 0x00000000]
[15:37:36.767]      __var protType   = __protocol & 0x0000FFFF;
[15:37:36.767]        // -> [protType <= 0x00000002]
[15:37:36.770]    </block>
[15:37:36.770]    <control if="protType == 1" while="" timeout="0" info="">
[15:37:36.770]      // if-block "protType == 1"
[15:37:36.770]        // =>  FALSE
[15:37:36.770]      // skip if-block "protType == 1"
[15:37:36.770]    </control>
[15:37:36.770]    <control if="protType == 2" while="" timeout="0" info="">
[15:37:36.770]      // if-block "protType == 2"
[15:37:36.770]        // =>  TRUE
[15:37:36.770]      <control if="isSWJ" while="" timeout="0" info="">
[15:37:36.770]        // if-block "isSWJ"
[15:37:36.770]          // =>  TRUE
[15:37:36.772]        <control if="hasDormant" while="" timeout="0" info="">
[15:37:36.772]          // if-block "hasDormant"
[15:37:36.772]            // =>  FALSE
[15:37:36.772]          // skip if-block "hasDormant"
[15:37:36.772]        </control>
[15:37:36.772]        <control if="!hasDormant" while="" timeout="0" info="">
[15:37:36.772]          // if-block "!hasDormant"
[15:37:36.772]            // =>  TRUE
[15:37:36.772]          <block atomic="false" info="">
[15:37:36.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:37:36.774]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:37:36.774]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:37:36.775]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:37:36.775]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:37:36.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:37:36.777]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:37:36.778]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:37:36.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:37:36.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:37:36.780]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:37:36.781]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:37:36.781]          </block>
[15:37:36.781]          // end if-block "!hasDormant"
[15:37:36.781]        </control>
[15:37:36.781]        // end if-block "isSWJ"
[15:37:36.781]      </control>
[15:37:36.781]      <control if="!isSWJ" while="" timeout="0" info="">
[15:37:36.781]        // if-block "!isSWJ"
[15:37:36.781]          // =>  FALSE
[15:37:36.781]        // skip if-block "!isSWJ"
[15:37:36.781]      </control>
[15:37:36.783]      <block atomic="false" info="">
[15:37:36.783]        ReadDP(0x0);
[15:37:36.784]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:37:36.784]      </block>
[15:37:36.784]      // end if-block "protType == 2"
[15:37:36.784]    </control>
[15:37:36.784]  </sequence>
[15:37:36.784]  
[15:37:36.791]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:37:36.791]  
[15:37:36.791]  <debugvars>
[15:37:36.791]    // Pre-defined
[15:37:36.791]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:37:36.791]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:37:36.791]    __dp=0x00000000
[15:37:36.791]    __ap=0x00000000
[15:37:36.791]    __traceout=0x00000000      (Trace Disabled)
[15:37:36.791]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:37:36.791]    __FlashAddr=0x00000000
[15:37:36.791]    __FlashLen=0x00000000
[15:37:36.791]    __FlashArg=0x00000000
[15:37:36.791]    __FlashOp=0x00000000
[15:37:36.791]    __Result=0x00000000
[15:37:36.791]  </debugvars>
[15:37:36.791]  
[15:37:36.791]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:37:36.791]    <block atomic="false" info="">
[15:37:36.791]      __var SW_DP_ABORT       = 0x0;
[15:37:36.791]        // -> [SW_DP_ABORT <= 0x00000000]
[15:37:36.791]      __var DP_CTRL_STAT      = 0x4;
[15:37:36.793]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:37:36.793]      __var DP_SELECT         = 0x8;
[15:37:36.793]        // -> [DP_SELECT <= 0x00000008]
[15:37:36.793]      __var powered_down      = 0;
[15:37:36.793]        // -> [powered_down <= 0x00000000]
[15:37:36.793]      WriteDP(DP_SELECT, 0x00000000);
[15:37:36.795]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:37:36.795]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:37:36.797]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:37:36.797]        // -> [powered_down <= 0x00000001]
[15:37:36.797]    </block>
[15:37:36.797]    <control if="powered_down" while="" timeout="0" info="">
[15:37:36.797]      // if-block "powered_down"
[15:37:36.797]        // =>  TRUE
[15:37:36.797]      <block atomic="false" info="">
[15:37:36.797]        Message(0, "Debug/System power-up request sent");
[15:37:36.797]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:37:36.800]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:37:36.800]      </block>
[15:37:36.800]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:37:36.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:37:36.802]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:37:36.802]        // while-condition  =>  FALSE
[15:37:36.802]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:37:36.802]      </control>
[15:37:36.802]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:37:36.802]        // if-block "(__protocol & 0xFFFF) == 1"
[15:37:36.802]          // =>  FALSE
[15:37:36.802]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:37:36.802]      </control>
[15:37:36.802]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:37:36.802]        // if-block "(__protocol & 0xFFFF) == 2"
[15:37:36.803]          // =>  TRUE
[15:37:36.804]        <block atomic="false" info="">
[15:37:36.804]          Message(0, "executing SWD power up");
[15:37:36.804]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:37:36.806]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:37:36.806]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:37:36.806]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:37:36.806]        </block>
[15:37:36.806]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:37:36.806]      </control>
[15:37:36.806]      // end if-block "powered_down"
[15:37:36.806]    </control>
[15:37:36.806]    <block atomic="false" info="">
[15:37:36.806]      __var DEBUG_PORT_VAL    = 0;
[15:37:36.806]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:37:36.806]      __var ACCESS_POINT_VAL  = 0;
[15:37:36.806]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:37:36.806]      __ap = 1; 
[15:37:36.806]        // -> [__ap <= 0x00000001]
[15:37:36.806]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:37:36.811]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:37:36.811]      __ap = 4;
[15:37:36.811]        // -> [__ap <= 0x00000004]
[15:37:36.811]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:37:36.814]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:37:36.814]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:37:36.814]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:37:36.814]    </block>
[15:37:36.814]    <block atomic="false" info="">
[15:37:36.814]      __var nReset = 0x80;
[15:37:36.814]        // -> [nReset <= 0x00000080]
[15:37:36.814]      __var canReadPins = 0;
[15:37:36.814]        // -> [canReadPins <= 0x00000000]
[15:37:36.814]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:37:36.814]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:37:36.814]        // -> [canReadPins <= 0x00000001]
[15:37:36.814]    </block>
[15:37:36.814]    <control if="" while="1" timeout="200" info="">
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.814]      // while "1"  (timeout="200")
[15:37:36.814]      // while-condition  =>  TRUE
[15:37:36.823]      // while "1"  (timeout="200")
[15:37:36.823]      // while  =>  TIMEOUT
[15:37:36.823]      // end while "1"
[15:37:36.823]    </control>
[15:37:36.823]    <control if="canReadPins" while="" timeout="0" info="">
[15:37:36.823]      // if-block "canReadPins"
[15:37:36.823]        // =>  TRUE
[15:37:36.823]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:37:36.823]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:37:36.826]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:37:36.826]        // while-condition  =>  FALSE
[15:37:36.826]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:37:36.826]      </control>
[15:37:36.826]      // end if-block "canReadPins"
[15:37:36.826]    </control>
[15:37:36.826]    <control if="!canReadPins" while="" timeout="0" info="">
[15:37:36.826]      // if-block "!canReadPins"
[15:37:36.826]        // =>  FALSE
[15:37:36.826]      // skip if-block "!canReadPins"
[15:37:36.826]    </control>
[15:37:36.826]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:37:36.826]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:37:36.826]        // =>  TRUE
[15:37:36.826]      <block atomic="false" info="">
[15:37:36.826]        WriteAP(0x00, 0x190008);
[15:37:36.834]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:37:36.834]        WriteAP(0xF0, 0x01);
[15:37:36.834]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:37:36.834]      </block>
[15:37:36.834]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:37:36.834]    </control>
[15:37:36.834]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:37:36.834]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:37:36.834]        // =>  FALSE
[15:37:36.834]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:37:36.834]    </control>
[15:37:36.834]    <block atomic="false" info="">
[15:37:36.834]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:37:36.846]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:37:36.846]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:37:36.846]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:37:36.846]      __ap = 0; //lets make sure we reset the access point selection
[15:37:36.846]        // -> [__ap <= 0x00000000]
[15:37:36.846]    </block>
[15:37:36.846]  </sequence>
[15:37:36.846]  
[15:37:36.878]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:37:36.878]  
[15:37:36.878]  <debugvars>
[15:37:36.881]    // Pre-defined
[15:37:36.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:37:36.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:37:36.881]    __dp=0x00000000
[15:37:36.881]    __ap=0x00000000
[15:37:36.881]    __traceout=0x00000000      (Trace Disabled)
[15:37:36.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:37:36.881]    __FlashAddr=0x00000000
[15:37:36.881]    __FlashLen=0x00000000
[15:37:36.881]    __FlashArg=0x00000000
[15:37:36.881]    __FlashOp=0x00000000
[15:37:36.881]    __Result=0x00000000
[15:37:36.881]  </debugvars>
[15:37:36.881]  
[15:37:36.881]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:37:36.881]    <block atomic="false" info="">
[15:37:36.881]      __var deviceID = 0;
[15:37:36.881]        // -> [deviceID <= 0x00000000]
[15:37:36.881]      __var version = 0;
[15:37:36.881]        // -> [version <= 0x00000000]
[15:37:36.881]      __var partNum = 0;
[15:37:36.881]        // -> [partNum <= 0x00000000]
[15:37:36.881]      __var manuf = 0;
[15:37:36.881]        // -> [manuf <= 0x00000000]
[15:37:36.881]      __var isMSPM0G1X0X_G3X0X = 0;
[15:37:36.881]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:37:36.881]      __var isProduction = 0;
[15:37:36.881]        // -> [isProduction <= 0x00000000]
[15:37:36.881]      __var continueId = 0;
[15:37:36.881]        // -> [continueId <= 0x00000000]
[15:37:36.881]      deviceID =   Read32(0x41C40004);
[15:37:36.901]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:37:36.901]        // -> [deviceID <= 0x2BB8802F]
[15:37:36.901]      version = deviceID >> 28;
[15:37:36.901]        // -> [version <= 0x00000002]
[15:37:36.901]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:37:36.901]        // -> [partNum <= 0x0000BB88]
[15:37:36.901]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:37:36.901]        // -> [manuf <= 0x00000017]
[15:37:36.901]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:37:36.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:37:36.901]      isProduction = (version > 0);
[15:37:36.901]        // -> [isProduction <= 0x00000001]
[15:37:36.901]    </block>
[15:37:36.901]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:37:36.901]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:37:36.901]        // =>  FALSE
[15:37:36.901]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:37:36.901]    </control>
[15:37:36.901]    <control if="continueId == 4" while="" timeout="0" info="">
[15:37:36.901]      // if-block "continueId == 4"
[15:37:36.901]        // =>  FALSE
[15:37:36.904]      // skip if-block "continueId == 4"
[15:37:36.904]    </control>
[15:37:36.904]    <control if="!isProduction" while="" timeout="0" info="">
[15:37:36.904]      // if-block "!isProduction"
[15:37:36.904]        // =>  FALSE
[15:37:36.906]      // skip if-block "!isProduction"
[15:37:36.906]    </control>
[15:37:36.906]  </sequence>
[15:37:36.906]  
[15:45:17.916]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:45:17.916]  
[15:45:17.916]  <debugvars>
[15:45:17.916]    // Pre-defined
[15:45:17.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:17.916]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:17.916]    __dp=0x00000000
[15:45:17.916]    __ap=0x00000000
[15:45:17.916]    __traceout=0x00000000      (Trace Disabled)
[15:45:17.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:17.916]    __FlashAddr=0x00000000
[15:45:17.916]    __FlashLen=0x00000000
[15:45:17.916]    __FlashArg=0x00000000
[15:45:17.916]    __FlashOp=0x00000000
[15:45:17.916]    __Result=0x00000000
[15:45:17.916]  </debugvars>
[15:45:17.916]  
[15:45:17.916]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:45:17.916]    <block atomic="false" info="">
[15:45:17.916]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:45:17.916]        // -> [isSWJ <= 0x00000001]
[15:45:17.916]      __var hasDormant = __protocol & 0x00020000;
[15:45:17.916]        // -> [hasDormant <= 0x00000000]
[15:45:17.916]      __var protType   = __protocol & 0x0000FFFF;
[15:45:17.916]        // -> [protType <= 0x00000002]
[15:45:17.916]    </block>
[15:45:17.916]    <control if="protType == 1" while="" timeout="0" info="">
[15:45:17.916]      // if-block "protType == 1"
[15:45:17.916]        // =>  FALSE
[15:45:17.916]      // skip if-block "protType == 1"
[15:45:17.916]    </control>
[15:45:17.916]    <control if="protType == 2" while="" timeout="0" info="">
[15:45:17.916]      // if-block "protType == 2"
[15:45:17.916]        // =>  TRUE
[15:45:17.916]      <control if="isSWJ" while="" timeout="0" info="">
[15:45:17.916]        // if-block "isSWJ"
[15:45:17.916]          // =>  TRUE
[15:45:17.916]        <control if="hasDormant" while="" timeout="0" info="">
[15:45:17.916]          // if-block "hasDormant"
[15:45:17.916]            // =>  FALSE
[15:45:17.916]          // skip if-block "hasDormant"
[15:45:17.916]        </control>
[15:45:17.916]        <control if="!hasDormant" while="" timeout="0" info="">
[15:45:17.916]          // if-block "!hasDormant"
[15:45:17.916]            // =>  TRUE
[15:45:17.916]          <block atomic="false" info="">
[15:45:17.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:45:17.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:17.916]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:45:17.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:45:17.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:45:17.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:17.926]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:45:17.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:45:17.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:45:17.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:45:17.926]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:45:17.926]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:45:17.926]          </block>
[15:45:17.926]          // end if-block "!hasDormant"
[15:45:17.926]        </control>
[15:45:17.926]        // end if-block "isSWJ"
[15:45:17.926]      </control>
[15:45:17.926]      <control if="!isSWJ" while="" timeout="0" info="">
[15:45:17.926]        // if-block "!isSWJ"
[15:45:17.926]          // =>  FALSE
[15:45:17.926]        // skip if-block "!isSWJ"
[15:45:17.926]      </control>
[15:45:17.926]      <block atomic="false" info="">
[15:45:17.926]        ReadDP(0x0);
[15:45:17.936]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:45:17.936]      </block>
[15:45:17.937]      // end if-block "protType == 2"
[15:45:17.937]    </control>
[15:45:17.937]  </sequence>
[15:45:17.937]  
[15:45:17.937]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:45:17.937]  
[15:45:17.937]  <debugvars>
[15:45:17.937]    // Pre-defined
[15:45:17.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:17.937]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:17.937]    __dp=0x00000000
[15:45:17.937]    __ap=0x00000000
[15:45:17.937]    __traceout=0x00000000      (Trace Disabled)
[15:45:17.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:17.937]    __FlashAddr=0x00000000
[15:45:17.937]    __FlashLen=0x00000000
[15:45:17.937]    __FlashArg=0x00000000
[15:45:17.937]    __FlashOp=0x00000000
[15:45:17.937]    __Result=0x00000000
[15:45:17.937]  </debugvars>
[15:45:17.937]  
[15:45:17.937]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:45:17.937]    <block atomic="false" info="">
[15:45:17.937]      __var SW_DP_ABORT       = 0x0;
[15:45:17.937]        // -> [SW_DP_ABORT <= 0x00000000]
[15:45:17.937]      __var DP_CTRL_STAT      = 0x4;
[15:45:17.937]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:45:17.937]      __var DP_SELECT         = 0x8;
[15:45:17.937]        // -> [DP_SELECT <= 0x00000008]
[15:45:17.937]      __var powered_down      = 0;
[15:45:17.937]        // -> [powered_down <= 0x00000000]
[15:45:17.937]      WriteDP(DP_SELECT, 0x00000000);
[15:45:17.937]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:45:17.937]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:45:17.946]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:45:17.946]        // -> [powered_down <= 0x00000001]
[15:45:17.946]    </block>
[15:45:17.946]    <control if="powered_down" while="" timeout="0" info="">
[15:45:17.946]      // if-block "powered_down"
[15:45:17.946]        // =>  TRUE
[15:45:17.946]      <block atomic="false" info="">
[15:45:17.948]        Message(0, "Debug/System power-up request sent");
[15:45:17.948]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:45:17.948]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:45:17.948]      </block>
[15:45:17.948]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:45:17.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:45:17.948]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:45:17.948]        // while-condition  =>  FALSE
[15:45:17.948]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:45:17.948]      </control>
[15:45:17.948]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:45:17.948]        // if-block "(__protocol & 0xFFFF) == 1"
[15:45:17.948]          // =>  FALSE
[15:45:17.948]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:45:17.948]      </control>
[15:45:17.948]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:45:17.948]        // if-block "(__protocol & 0xFFFF) == 2"
[15:45:17.948]          // =>  TRUE
[15:45:17.948]        <block atomic="false" info="">
[15:45:17.948]          Message(0, "executing SWD power up");
[15:45:17.957]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:45:17.957]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:45:17.957]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:45:17.957]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:45:17.957]        </block>
[15:45:17.957]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:45:17.957]      </control>
[15:45:17.957]      // end if-block "powered_down"
[15:45:17.957]    </control>
[15:45:17.957]    <block atomic="false" info="">
[15:45:17.957]      __var DEBUG_PORT_VAL    = 0;
[15:45:17.957]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:45:17.957]      __var ACCESS_POINT_VAL  = 0;
[15:45:17.957]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:45:17.957]      __ap = 1; 
[15:45:17.957]        // -> [__ap <= 0x00000001]
[15:45:17.957]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:45:17.964]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:45:17.964]      __ap = 4;
[15:45:17.964]        // -> [__ap <= 0x00000004]
[15:45:17.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:17.967]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:45:17.967]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:45:17.967]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:17.967]    </block>
[15:45:17.967]    <block atomic="false" info="">
[15:45:17.967]      __var nReset = 0x80;
[15:45:17.967]        // -> [nReset <= 0x00000080]
[15:45:17.967]      __var canReadPins = 0;
[15:45:17.967]        // -> [canReadPins <= 0x00000000]
[15:45:17.967]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:45:17.967]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:45:17.967]        // -> [canReadPins <= 0x00000001]
[15:45:17.967]    </block>
[15:45:17.967]    <control if="" while="1" timeout="200" info="">
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.967]      // while-condition  =>  TRUE
[15:45:17.967]      // while "1"  (timeout="200")
[15:45:17.977]      // while-condition  =>  TRUE
[15:45:17.977]      // while "1"  (timeout="200")
[15:45:17.977]      // while  =>  TIMEOUT
[15:45:17.977]      // end while "1"
[15:45:17.977]    </control>
[15:45:17.977]    <control if="canReadPins" while="" timeout="0" info="">
[15:45:17.977]      // if-block "canReadPins"
[15:45:17.977]        // =>  TRUE
[15:45:17.977]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:45:17.977]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:45:17.977]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:45:17.977]        // while-condition  =>  FALSE
[15:45:17.977]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:45:17.977]      </control>
[15:45:17.977]      // end if-block "canReadPins"
[15:45:17.977]    </control>
[15:45:17.977]    <control if="!canReadPins" while="" timeout="0" info="">
[15:45:17.977]      // if-block "!canReadPins"
[15:45:17.977]        // =>  FALSE
[15:45:17.977]      // skip if-block "!canReadPins"
[15:45:17.977]    </control>
[15:45:17.977]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:45:17.977]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:17.977]        // =>  TRUE
[15:45:17.977]      <block atomic="false" info="">
[15:45:17.977]        WriteAP(0x00, 0x190008);
[15:45:17.977]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:17.977]        WriteAP(0xF0, 0x01);
[15:45:17.977]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:45:17.977]      </block>
[15:45:17.977]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:45:17.977]    </control>
[15:45:17.977]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:45:17.977]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:17.987]        // =>  FALSE
[15:45:17.987]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:45:17.987]    </control>
[15:45:17.987]    <block atomic="false" info="">
[15:45:17.987]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:45:17.987]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:45:17.987]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:45:17.987]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:45:17.987]      __ap = 0; //lets make sure we reset the access point selection
[15:45:17.987]        // -> [__ap <= 0x00000000]
[15:45:17.987]    </block>
[15:45:17.987]  </sequence>
[15:45:17.987]  
[15:45:18.010]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:45:18.010]  
[15:45:18.010]  <debugvars>
[15:45:18.010]    // Pre-defined
[15:45:18.010]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:45:18.010]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:45:18.018]    __dp=0x00000000
[15:45:18.018]    __ap=0x00000000
[15:45:18.018]    __traceout=0x00000000      (Trace Disabled)
[15:45:18.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:45:18.018]    __FlashAddr=0x00000000
[15:45:18.018]    __FlashLen=0x00000000
[15:45:18.018]    __FlashArg=0x00000000
[15:45:18.018]    __FlashOp=0x00000000
[15:45:18.018]    __Result=0x00000000
[15:45:18.018]  </debugvars>
[15:45:18.018]  
[15:45:18.018]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:45:18.018]    <block atomic="false" info="">
[15:45:18.018]      __var deviceID = 0;
[15:45:18.018]        // -> [deviceID <= 0x00000000]
[15:45:18.018]      __var version = 0;
[15:45:18.018]        // -> [version <= 0x00000000]
[15:45:18.018]      __var partNum = 0;
[15:45:18.018]        // -> [partNum <= 0x00000000]
[15:45:18.018]      __var manuf = 0;
[15:45:18.018]        // -> [manuf <= 0x00000000]
[15:45:18.018]      __var isMSPM0G1X0X_G3X0X = 0;
[15:45:18.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:45:18.018]      __var isProduction = 0;
[15:45:18.018]        // -> [isProduction <= 0x00000000]
[15:45:18.018]      __var continueId = 0;
[15:45:18.018]        // -> [continueId <= 0x00000000]
[15:45:18.018]      deviceID =   Read32(0x41C40004);
[15:45:18.018]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:45:18.018]        // -> [deviceID <= 0x2BB8802F]
[15:45:18.018]      version = deviceID >> 28;
[15:45:18.018]        // -> [version <= 0x00000002]
[15:45:18.018]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:45:18.018]        // -> [partNum <= 0x0000BB88]
[15:45:18.018]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:45:18.018]        // -> [manuf <= 0x00000017]
[15:45:18.018]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:45:18.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:45:18.018]      isProduction = (version > 0);
[15:45:18.018]        // -> [isProduction <= 0x00000001]
[15:45:18.018]    </block>
[15:45:18.018]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:45:18.018]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:45:18.028]        // =>  FALSE
[15:45:18.028]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:45:18.028]    </control>
[15:45:18.028]    <control if="continueId == 4" while="" timeout="0" info="">
[15:45:18.028]      // if-block "continueId == 4"
[15:45:18.028]        // =>  FALSE
[15:45:18.028]      // skip if-block "continueId == 4"
[15:45:18.029]    </control>
[15:45:18.029]    <control if="!isProduction" while="" timeout="0" info="">
[15:45:18.029]      // if-block "!isProduction"
[15:45:18.029]        // =>  FALSE
[15:45:18.029]      // skip if-block "!isProduction"
[15:45:18.029]    </control>
[15:45:18.029]  </sequence>
[15:45:18.029]  
[15:46:05.139]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:46:05.139]  
[15:46:05.150]  <debugvars>
[15:46:05.150]    // Pre-defined
[15:46:05.150]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:05.150]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:46:05.150]    __dp=0x00000000
[15:46:05.150]    __ap=0x00000000
[15:46:05.150]    __traceout=0x00000000      (Trace Disabled)
[15:46:05.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:05.150]    __FlashAddr=0x00000000
[15:46:05.150]    __FlashLen=0x00000000
[15:46:05.150]    __FlashArg=0x00000000
[15:46:05.150]    __FlashOp=0x00000000
[15:46:05.150]    __Result=0x00000000
[15:46:05.150]  </debugvars>
[15:46:05.150]  
[15:46:05.150]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:46:05.150]    <block atomic="false" info="">
[15:46:05.150]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:46:05.150]        // -> [isSWJ <= 0x00000001]
[15:46:05.150]      __var hasDormant = __protocol & 0x00020000;
[15:46:05.150]        // -> [hasDormant <= 0x00000000]
[15:46:05.150]      __var protType   = __protocol & 0x0000FFFF;
[15:46:05.150]        // -> [protType <= 0x00000002]
[15:46:05.150]    </block>
[15:46:05.150]    <control if="protType == 1" while="" timeout="0" info="">
[15:46:05.150]      // if-block "protType == 1"
[15:46:05.150]        // =>  FALSE
[15:46:05.150]      // skip if-block "protType == 1"
[15:46:05.150]    </control>
[15:46:05.150]    <control if="protType == 2" while="" timeout="0" info="">
[15:46:05.150]      // if-block "protType == 2"
[15:46:05.150]        // =>  TRUE
[15:46:05.150]      <control if="isSWJ" while="" timeout="0" info="">
[15:46:05.150]        // if-block "isSWJ"
[15:46:05.150]          // =>  TRUE
[15:46:05.150]        <control if="hasDormant" while="" timeout="0" info="">
[15:46:05.150]          // if-block "hasDormant"
[15:46:05.150]            // =>  FALSE
[15:46:05.150]          // skip if-block "hasDormant"
[15:46:05.150]        </control>
[15:46:05.150]        <control if="!hasDormant" while="" timeout="0" info="">
[15:46:05.150]          // if-block "!hasDormant"
[15:46:05.150]            // =>  TRUE
[15:46:05.150]          <block atomic="false" info="">
[15:46:05.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:46:05.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:05.155]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:46:05.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:46:05.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:46:05.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:05.157]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:46:05.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:46:05.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:46:05.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:46:05.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:46:05.157]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:46:05.157]          </block>
[15:46:05.157]          // end if-block "!hasDormant"
[15:46:05.157]        </control>
[15:46:05.157]        // end if-block "isSWJ"
[15:46:05.157]      </control>
[15:46:05.157]      <control if="!isSWJ" while="" timeout="0" info="">
[15:46:05.157]        // if-block "!isSWJ"
[15:46:05.157]          // =>  FALSE
[15:46:05.157]        // skip if-block "!isSWJ"
[15:46:05.157]      </control>
[15:46:05.157]      <block atomic="false" info="">
[15:46:05.157]        ReadDP(0x0);
[15:46:05.166]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:46:05.166]      </block>
[15:46:05.167]      // end if-block "protType == 2"
[15:46:05.167]    </control>
[15:46:05.167]  </sequence>
[15:46:05.167]  
[15:46:05.169]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:46:05.169]  
[15:46:05.169]  <debugvars>
[15:46:05.169]    // Pre-defined
[15:46:05.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:05.169]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:46:05.169]    __dp=0x00000000
[15:46:05.169]    __ap=0x00000000
[15:46:05.169]    __traceout=0x00000000      (Trace Disabled)
[15:46:05.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:05.169]    __FlashAddr=0x00000000
[15:46:05.169]    __FlashLen=0x00000000
[15:46:05.169]    __FlashArg=0x00000000
[15:46:05.169]    __FlashOp=0x00000000
[15:46:05.169]    __Result=0x00000000
[15:46:05.169]  </debugvars>
[15:46:05.169]  
[15:46:05.169]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:46:05.169]    <block atomic="false" info="">
[15:46:05.169]      __var SW_DP_ABORT       = 0x0;
[15:46:05.169]        // -> [SW_DP_ABORT <= 0x00000000]
[15:46:05.169]      __var DP_CTRL_STAT      = 0x4;
[15:46:05.169]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:46:05.169]      __var DP_SELECT         = 0x8;
[15:46:05.169]        // -> [DP_SELECT <= 0x00000008]
[15:46:05.169]      __var powered_down      = 0;
[15:46:05.169]        // -> [powered_down <= 0x00000000]
[15:46:05.169]      WriteDP(DP_SELECT, 0x00000000);
[15:46:05.169]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:46:05.169]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:46:05.175]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:46:05.175]        // -> [powered_down <= 0x00000001]
[15:46:05.175]    </block>
[15:46:05.175]    <control if="powered_down" while="" timeout="0" info="">
[15:46:05.175]      // if-block "powered_down"
[15:46:05.175]        // =>  TRUE
[15:46:05.175]      <block atomic="false" info="">
[15:46:05.175]        Message(0, "Debug/System power-up request sent");
[15:46:05.177]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:46:05.177]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:46:05.177]      </block>
[15:46:05.177]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:46:05.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:46:05.177]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:46:05.177]        // while-condition  =>  FALSE
[15:46:05.177]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:46:05.177]      </control>
[15:46:05.177]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:46:05.177]        // if-block "(__protocol & 0xFFFF) == 1"
[15:46:05.177]          // =>  FALSE
[15:46:05.177]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:46:05.177]      </control>
[15:46:05.177]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:46:05.177]        // if-block "(__protocol & 0xFFFF) == 2"
[15:46:05.177]          // =>  TRUE
[15:46:05.177]        <block atomic="false" info="">
[15:46:05.177]          Message(0, "executing SWD power up");
[15:46:05.185]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:46:05.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:46:05.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:46:05.189]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:46:05.190]        </block>
[15:46:05.190]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:46:05.190]      </control>
[15:46:05.190]      // end if-block "powered_down"
[15:46:05.190]    </control>
[15:46:05.190]    <block atomic="false" info="">
[15:46:05.190]      __var DEBUG_PORT_VAL    = 0;
[15:46:05.190]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:46:05.190]      __var ACCESS_POINT_VAL  = 0;
[15:46:05.190]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:46:05.190]      __ap = 1; 
[15:46:05.190]        // -> [__ap <= 0x00000001]
[15:46:05.190]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:46:05.195]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:46:05.195]      __ap = 4;
[15:46:05.195]        // -> [__ap <= 0x00000004]
[15:46:05.195]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:46:05.198]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:46:05.198]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:46:05.198]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:46:05.198]    </block>
[15:46:05.198]    <block atomic="false" info="">
[15:46:05.198]      __var nReset = 0x80;
[15:46:05.198]        // -> [nReset <= 0x00000080]
[15:46:05.198]      __var canReadPins = 0;
[15:46:05.198]        // -> [canReadPins <= 0x00000000]
[15:46:05.198]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:46:05.198]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:46:05.198]        // -> [canReadPins <= 0x00000001]
[15:46:05.198]    </block>
[15:46:05.198]    <control if="" while="1" timeout="200" info="">
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.198]      // while "1"  (timeout="200")
[15:46:05.198]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.206]      // while "1"  (timeout="200")
[15:46:05.206]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.208]      // while "1"  (timeout="200")
[15:46:05.208]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.209]      // while-condition  =>  TRUE
[15:46:05.209]      // while "1"  (timeout="200")
[15:46:05.212]      // while-condition  =>  TRUE
[15:46:05.212]      // while "1"  (timeout="200")
[15:46:05.212]      // while  =>  TIMEOUT
[15:46:05.212]      // end while "1"
[15:46:05.212]    </control>
[15:46:05.212]    <control if="canReadPins" while="" timeout="0" info="">
[15:46:05.212]      // if-block "canReadPins"
[15:46:05.212]        // =>  TRUE
[15:46:05.212]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:46:05.212]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:46:05.218]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:46:05.218]        // while-condition  =>  FALSE
[15:46:05.218]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:46:05.218]      </control>
[15:46:05.218]      // end if-block "canReadPins"
[15:46:05.220]    </control>
[15:46:05.220]    <control if="!canReadPins" while="" timeout="0" info="">
[15:46:05.220]      // if-block "!canReadPins"
[15:46:05.220]        // =>  FALSE
[15:46:05.220]      // skip if-block "!canReadPins"
[15:46:05.220]    </control>
[15:46:05.220]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:46:05.220]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:46:05.220]        // =>  TRUE
[15:46:05.220]      <block atomic="false" info="">
[15:46:05.220]        WriteAP(0x00, 0x190008);
[15:46:05.222]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:46:05.222]        WriteAP(0xF0, 0x01);
[15:46:05.226]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:46:05.226]      </block>
[15:46:05.226]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:46:05.226]    </control>
[15:46:05.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:46:05.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:46:05.226]        // =>  FALSE
[15:46:05.228]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:46:05.228]    </control>
[15:46:05.228]    <block atomic="false" info="">
[15:46:05.228]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:46:05.230]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:46:05.230]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:46:05.230]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:46:05.230]      __ap = 0; //lets make sure we reset the access point selection
[15:46:05.230]        // -> [__ap <= 0x00000000]
[15:46:05.230]    </block>
[15:46:05.230]  </sequence>
[15:46:05.230]  
[15:46:05.248]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:46:05.248]  
[15:46:05.248]  <debugvars>
[15:46:05.248]    // Pre-defined
[15:46:05.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:46:05.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:46:05.248]    __dp=0x00000000
[15:46:05.248]    __ap=0x00000000
[15:46:05.248]    __traceout=0x00000000      (Trace Disabled)
[15:46:05.248]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:46:05.248]    __FlashAddr=0x00000000
[15:46:05.248]    __FlashLen=0x00000000
[15:46:05.248]    __FlashArg=0x00000000
[15:46:05.248]    __FlashOp=0x00000000
[15:46:05.248]    __Result=0x00000000
[15:46:05.248]  </debugvars>
[15:46:05.255]  
[15:46:05.255]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:46:05.255]    <block atomic="false" info="">
[15:46:05.255]      __var deviceID = 0;
[15:46:05.255]        // -> [deviceID <= 0x00000000]
[15:46:05.255]      __var version = 0;
[15:46:05.255]        // -> [version <= 0x00000000]
[15:46:05.255]      __var partNum = 0;
[15:46:05.255]        // -> [partNum <= 0x00000000]
[15:46:05.255]      __var manuf = 0;
[15:46:05.255]        // -> [manuf <= 0x00000000]
[15:46:05.255]      __var isMSPM0G1X0X_G3X0X = 0;
[15:46:05.255]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:46:05.255]      __var isProduction = 0;
[15:46:05.255]        // -> [isProduction <= 0x00000000]
[15:46:05.255]      __var continueId = 0;
[15:46:05.255]        // -> [continueId <= 0x00000000]
[15:46:05.255]      deviceID =   Read32(0x41C40004);
[15:46:05.258]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:46:05.258]        // -> [deviceID <= 0x2BB8802F]
[15:46:05.258]      version = deviceID >> 28;
[15:46:05.258]        // -> [version <= 0x00000002]
[15:46:05.258]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:46:05.258]        // -> [partNum <= 0x0000BB88]
[15:46:05.258]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:46:05.258]        // -> [manuf <= 0x00000017]
[15:46:05.258]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:46:05.258]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:46:05.258]      isProduction = (version > 0);
[15:46:05.258]        // -> [isProduction <= 0x00000001]
[15:46:05.258]    </block>
[15:46:05.258]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:46:05.258]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:46:05.258]        // =>  FALSE
[15:46:05.258]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:46:05.258]    </control>
[15:46:05.258]    <control if="continueId == 4" while="" timeout="0" info="">
[15:46:05.258]      // if-block "continueId == 4"
[15:46:05.258]        // =>  FALSE
[15:46:05.258]      // skip if-block "continueId == 4"
[15:46:05.258]    </control>
[15:46:05.258]    <control if="!isProduction" while="" timeout="0" info="">
[15:46:05.258]      // if-block "!isProduction"
[15:46:05.258]        // =>  FALSE
[15:46:05.258]      // skip if-block "!isProduction"
[15:46:05.258]    </control>
[15:46:05.258]  </sequence>
[15:46:05.258]  
[15:47:59.648]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:47:59.648]  
[15:47:59.659]  <debugvars>
[15:47:59.659]    // Pre-defined
[15:47:59.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:59.659]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:59.659]    __dp=0x00000000
[15:47:59.659]    __ap=0x00000000
[15:47:59.659]    __traceout=0x00000000      (Trace Disabled)
[15:47:59.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:59.659]    __FlashAddr=0x00000000
[15:47:59.659]    __FlashLen=0x00000000
[15:47:59.659]    __FlashArg=0x00000000
[15:47:59.659]    __FlashOp=0x00000000
[15:47:59.659]    __Result=0x00000000
[15:47:59.659]  </debugvars>
[15:47:59.659]  
[15:47:59.659]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:47:59.659]    <block atomic="false" info="">
[15:47:59.659]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:47:59.659]        // -> [isSWJ <= 0x00000001]
[15:47:59.659]      __var hasDormant = __protocol & 0x00020000;
[15:47:59.659]        // -> [hasDormant <= 0x00000000]
[15:47:59.659]      __var protType   = __protocol & 0x0000FFFF;
[15:47:59.659]        // -> [protType <= 0x00000002]
[15:47:59.659]    </block>
[15:47:59.659]    <control if="protType == 1" while="" timeout="0" info="">
[15:47:59.659]      // if-block "protType == 1"
[15:47:59.659]        // =>  FALSE
[15:47:59.659]      // skip if-block "protType == 1"
[15:47:59.659]    </control>
[15:47:59.659]    <control if="protType == 2" while="" timeout="0" info="">
[15:47:59.659]      // if-block "protType == 2"
[15:47:59.659]        // =>  TRUE
[15:47:59.659]      <control if="isSWJ" while="" timeout="0" info="">
[15:47:59.659]        // if-block "isSWJ"
[15:47:59.664]          // =>  TRUE
[15:47:59.664]        <control if="hasDormant" while="" timeout="0" info="">
[15:47:59.664]          // if-block "hasDormant"
[15:47:59.664]            // =>  FALSE
[15:47:59.664]          // skip if-block "hasDormant"
[15:47:59.664]        </control>
[15:47:59.664]        <control if="!hasDormant" while="" timeout="0" info="">
[15:47:59.664]          // if-block "!hasDormant"
[15:47:59.665]            // =>  TRUE
[15:47:59.665]          <block atomic="false" info="">
[15:47:59.665]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:47:59.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:59.669]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:47:59.671]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:47:59.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:47:59.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:59.671]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:47:59.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:47:59.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:47:59.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:47:59.677]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:47:59.677]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:47:59.677]          </block>
[15:47:59.677]          // end if-block "!hasDormant"
[15:47:59.677]        </control>
[15:47:59.677]        // end if-block "isSWJ"
[15:47:59.677]      </control>
[15:47:59.677]      <control if="!isSWJ" while="" timeout="0" info="">
[15:47:59.677]        // if-block "!isSWJ"
[15:47:59.677]          // =>  FALSE
[15:47:59.677]        // skip if-block "!isSWJ"
[15:47:59.677]      </control>
[15:47:59.677]      <block atomic="false" info="">
[15:47:59.677]        ReadDP(0x0);
[15:47:59.677]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:47:59.677]      </block>
[15:47:59.677]      // end if-block "protType == 2"
[15:47:59.677]    </control>
[15:47:59.677]  </sequence>
[15:47:59.677]  
[15:47:59.687]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:47:59.687]  
[15:47:59.687]  <debugvars>
[15:47:59.687]    // Pre-defined
[15:47:59.687]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:59.687]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:59.687]    __dp=0x00000000
[15:47:59.687]    __ap=0x00000000
[15:47:59.687]    __traceout=0x00000000      (Trace Disabled)
[15:47:59.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:59.687]    __FlashAddr=0x00000000
[15:47:59.687]    __FlashLen=0x00000000
[15:47:59.687]    __FlashArg=0x00000000
[15:47:59.687]    __FlashOp=0x00000000
[15:47:59.687]    __Result=0x00000000
[15:47:59.687]  </debugvars>
[15:47:59.687]  
[15:47:59.687]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:47:59.687]    <block atomic="false" info="">
[15:47:59.687]      __var SW_DP_ABORT       = 0x0;
[15:47:59.687]        // -> [SW_DP_ABORT <= 0x00000000]
[15:47:59.687]      __var DP_CTRL_STAT      = 0x4;
[15:47:59.687]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:47:59.687]      __var DP_SELECT         = 0x8;
[15:47:59.687]        // -> [DP_SELECT <= 0x00000008]
[15:47:59.687]      __var powered_down      = 0;
[15:47:59.687]        // -> [powered_down <= 0x00000000]
[15:47:59.687]      WriteDP(DP_SELECT, 0x00000000);
[15:47:59.687]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:47:59.687]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:47:59.687]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:47:59.687]        // -> [powered_down <= 0x00000001]
[15:47:59.687]    </block>
[15:47:59.687]    <control if="powered_down" while="" timeout="0" info="">
[15:47:59.695]      // if-block "powered_down"
[15:47:59.695]        // =>  TRUE
[15:47:59.695]      <block atomic="false" info="">
[15:47:59.695]        Message(0, "Debug/System power-up request sent");
[15:47:59.695]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:47:59.697]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:47:59.697]      </block>
[15:47:59.697]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:47:59.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:47:59.697]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:47:59.697]        // while-condition  =>  FALSE
[15:47:59.697]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:47:59.697]      </control>
[15:47:59.697]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:47:59.697]        // if-block "(__protocol & 0xFFFF) == 1"
[15:47:59.697]          // =>  FALSE
[15:47:59.697]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:47:59.697]      </control>
[15:47:59.697]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:47:59.697]        // if-block "(__protocol & 0xFFFF) == 2"
[15:47:59.697]          // =>  TRUE
[15:47:59.697]        <block atomic="false" info="">
[15:47:59.697]          Message(0, "executing SWD power up");
[15:47:59.709]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:47:59.710]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:47:59.710]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:47:59.710]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:47:59.710]        </block>
[15:47:59.710]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:47:59.710]      </control>
[15:47:59.710]      // end if-block "powered_down"
[15:47:59.710]    </control>
[15:47:59.710]    <block atomic="false" info="">
[15:47:59.710]      __var DEBUG_PORT_VAL    = 0;
[15:47:59.710]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:47:59.710]      __var ACCESS_POINT_VAL  = 0;
[15:47:59.710]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:47:59.710]      __ap = 1; 
[15:47:59.710]        // -> [__ap <= 0x00000001]
[15:47:59.710]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:47:59.717]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:47:59.717]      __ap = 4;
[15:47:59.717]        // -> [__ap <= 0x00000004]
[15:47:59.717]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:47:59.727]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:47:59.728]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:47:59.728]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:47:59.728]    </block>
[15:47:59.728]    <block atomic="false" info="">
[15:47:59.728]      __var nReset = 0x80;
[15:47:59.728]        // -> [nReset <= 0x00000080]
[15:47:59.728]      __var canReadPins = 0;
[15:47:59.728]        // -> [canReadPins <= 0x00000000]
[15:47:59.728]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:47:59.728]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:47:59.728]        // -> [canReadPins <= 0x00000001]
[15:47:59.728]    </block>
[15:47:59.728]    <control if="" while="1" timeout="200" info="">
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.728]      // while "1"  (timeout="200")
[15:47:59.728]      // while-condition  =>  TRUE
[15:47:59.736]      // while "1"  (timeout="200")
[15:47:59.736]      // while-condition  =>  TRUE
[15:47:59.736]      // while "1"  (timeout="200")
[15:47:59.736]      // while-condition  =>  TRUE
[15:47:59.736]      // while "1"  (timeout="200")
[15:47:59.736]      // while-condition  =>  TRUE
[15:47:59.736]      // while "1"  (timeout="200")
[15:47:59.736]      // while-condition  =>  TRUE
[15:47:59.736]      // while "1"  (timeout="200")
[15:47:59.736]      // while-condition  =>  TRUE
[15:47:59.736]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.737]      // while-condition  =>  TRUE
[15:47:59.737]      // while "1"  (timeout="200")
[15:47:59.746]      // while-condition  =>  TRUE
[15:47:59.746]      // while "1"  (timeout="200")
[15:47:59.746]      // while  =>  TIMEOUT
[15:47:59.746]      // end while "1"
[15:47:59.747]    </control>
[15:47:59.747]    <control if="canReadPins" while="" timeout="0" info="">
[15:47:59.747]      // if-block "canReadPins"
[15:47:59.747]        // =>  TRUE
[15:47:59.747]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:47:59.747]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:47:59.748]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:47:59.748]        // while-condition  =>  FALSE
[15:47:59.748]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:47:59.748]      </control>
[15:47:59.748]      // end if-block "canReadPins"
[15:47:59.748]    </control>
[15:47:59.748]    <control if="!canReadPins" while="" timeout="0" info="">
[15:47:59.748]      // if-block "!canReadPins"
[15:47:59.748]        // =>  FALSE
[15:47:59.748]      // skip if-block "!canReadPins"
[15:47:59.748]    </control>
[15:47:59.748]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:47:59.748]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:47:59.748]        // =>  TRUE
[15:47:59.748]      <block atomic="false" info="">
[15:47:59.748]        WriteAP(0x00, 0x190008);
[15:47:59.748]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:47:59.748]        WriteAP(0xF0, 0x01);
[15:47:59.748]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:47:59.757]      </block>
[15:47:59.757]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:47:59.757]    </control>
[15:47:59.757]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:47:59.757]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:47:59.757]        // =>  FALSE
[15:47:59.757]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:47:59.757]    </control>
[15:47:59.757]    <block atomic="false" info="">
[15:47:59.757]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:47:59.757]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:47:59.757]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:47:59.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:47:59.767]      __ap = 0; //lets make sure we reset the access point selection
[15:47:59.768]        // -> [__ap <= 0x00000000]
[15:47:59.768]    </block>
[15:47:59.768]  </sequence>
[15:47:59.768]  
[15:47:59.807]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:47:59.807]  
[15:47:59.807]  <debugvars>
[15:47:59.807]    // Pre-defined
[15:47:59.807]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:47:59.807]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:47:59.807]    __dp=0x00000000
[15:47:59.807]    __ap=0x00000000
[15:47:59.807]    __traceout=0x00000000      (Trace Disabled)
[15:47:59.807]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:47:59.807]    __FlashAddr=0x00000000
[15:47:59.807]    __FlashLen=0x00000000
[15:47:59.807]    __FlashArg=0x00000000
[15:47:59.807]    __FlashOp=0x00000000
[15:47:59.807]    __Result=0x00000000
[15:47:59.807]  </debugvars>
[15:47:59.807]  
[15:47:59.807]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:47:59.807]    <block atomic="false" info="">
[15:47:59.807]      __var deviceID = 0;
[15:47:59.807]        // -> [deviceID <= 0x00000000]
[15:47:59.807]      __var version = 0;
[15:47:59.807]        // -> [version <= 0x00000000]
[15:47:59.807]      __var partNum = 0;
[15:47:59.807]        // -> [partNum <= 0x00000000]
[15:47:59.807]      __var manuf = 0;
[15:47:59.807]        // -> [manuf <= 0x00000000]
[15:47:59.807]      __var isMSPM0G1X0X_G3X0X = 0;
[15:47:59.807]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:47:59.807]      __var isProduction = 0;
[15:47:59.807]        // -> [isProduction <= 0x00000000]
[15:47:59.807]      __var continueId = 0;
[15:47:59.807]        // -> [continueId <= 0x00000000]
[15:47:59.807]      deviceID =   Read32(0x41C40004);
[15:47:59.819]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:47:59.819]        // -> [deviceID <= 0x2BB8802F]
[15:47:59.819]      version = deviceID >> 28;
[15:47:59.819]        // -> [version <= 0x00000002]
[15:47:59.819]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:47:59.819]        // -> [partNum <= 0x0000BB88]
[15:47:59.819]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:47:59.819]        // -> [manuf <= 0x00000017]
[15:47:59.819]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:47:59.819]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:47:59.819]      isProduction = (version > 0);
[15:47:59.819]        // -> [isProduction <= 0x00000001]
[15:47:59.819]    </block>
[15:47:59.819]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:47:59.819]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:47:59.819]        // =>  FALSE
[15:47:59.819]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:47:59.819]    </control>
[15:47:59.819]    <control if="continueId == 4" while="" timeout="0" info="">
[15:47:59.819]      // if-block "continueId == 4"
[15:47:59.819]        // =>  FALSE
[15:47:59.819]      // skip if-block "continueId == 4"
[15:47:59.819]    </control>
[15:47:59.819]    <control if="!isProduction" while="" timeout="0" info="">
[15:47:59.819]      // if-block "!isProduction"
[15:47:59.819]        // =>  FALSE
[15:47:59.819]      // skip if-block "!isProduction"
[15:47:59.819]    </control>
[15:47:59.819]  </sequence>
[15:47:59.819]  
[15:48:47.140]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:48:47.140]  
[15:48:47.150]  <debugvars>
[15:48:47.150]    // Pre-defined
[15:48:47.150]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:48:47.150]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:48:47.150]    __dp=0x00000000
[15:48:47.150]    __ap=0x00000000
[15:48:47.150]    __traceout=0x00000000      (Trace Disabled)
[15:48:47.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:48:47.150]    __FlashAddr=0x00000000
[15:48:47.150]    __FlashLen=0x00000000
[15:48:47.150]    __FlashArg=0x00000000
[15:48:47.150]    __FlashOp=0x00000000
[15:48:47.150]    __Result=0x00000000
[15:48:47.150]  </debugvars>
[15:48:47.150]  
[15:48:47.150]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:48:47.150]    <block atomic="false" info="">
[15:48:47.150]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:48:47.150]        // -> [isSWJ <= 0x00000001]
[15:48:47.150]      __var hasDormant = __protocol & 0x00020000;
[15:48:47.150]        // -> [hasDormant <= 0x00000000]
[15:48:47.150]      __var protType   = __protocol & 0x0000FFFF;
[15:48:47.150]        // -> [protType <= 0x00000002]
[15:48:47.150]    </block>
[15:48:47.150]    <control if="protType == 1" while="" timeout="0" info="">
[15:48:47.150]      // if-block "protType == 1"
[15:48:47.150]        // =>  FALSE
[15:48:47.150]      // skip if-block "protType == 1"
[15:48:47.150]    </control>
[15:48:47.150]    <control if="protType == 2" while="" timeout="0" info="">
[15:48:47.150]      // if-block "protType == 2"
[15:48:47.150]        // =>  TRUE
[15:48:47.150]      <control if="isSWJ" while="" timeout="0" info="">
[15:48:47.150]        // if-block "isSWJ"
[15:48:47.150]          // =>  TRUE
[15:48:47.150]        <control if="hasDormant" while="" timeout="0" info="">
[15:48:47.150]          // if-block "hasDormant"
[15:48:47.150]            // =>  FALSE
[15:48:47.150]          // skip if-block "hasDormant"
[15:48:47.150]        </control>
[15:48:47.150]        <control if="!hasDormant" while="" timeout="0" info="">
[15:48:47.150]          // if-block "!hasDormant"
[15:48:47.150]            // =>  TRUE
[15:48:47.150]          <block atomic="false" info="">
[15:48:47.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:48:47.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:48:47.150]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:48:47.150]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:48:47.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:48:47.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:48:47.160]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:48:47.161]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:48:47.161]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:48:47.163]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:48:47.163]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:48:47.165]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:48:47.165]          </block>
[15:48:47.165]          // end if-block "!hasDormant"
[15:48:47.165]        </control>
[15:48:47.165]        // end if-block "isSWJ"
[15:48:47.165]      </control>
[15:48:47.165]      <control if="!isSWJ" while="" timeout="0" info="">
[15:48:47.165]        // if-block "!isSWJ"
[15:48:47.165]          // =>  FALSE
[15:48:47.165]        // skip if-block "!isSWJ"
[15:48:47.165]      </control>
[15:48:47.165]      <block atomic="false" info="">
[15:48:47.165]        ReadDP(0x0);
[15:48:47.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:48:47.168]      </block>
[15:48:47.168]      // end if-block "protType == 2"
[15:48:47.168]    </control>
[15:48:47.168]  </sequence>
[15:48:47.168]  
[15:48:47.182]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:48:47.182]  
[15:48:47.182]  <debugvars>
[15:48:47.182]    // Pre-defined
[15:48:47.182]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:48:47.182]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:48:47.182]    __dp=0x00000000
[15:48:47.182]    __ap=0x00000000
[15:48:47.182]    __traceout=0x00000000      (Trace Disabled)
[15:48:47.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:48:47.182]    __FlashAddr=0x00000000
[15:48:47.182]    __FlashLen=0x00000000
[15:48:47.182]    __FlashArg=0x00000000
[15:48:47.182]    __FlashOp=0x00000000
[15:48:47.182]    __Result=0x00000000
[15:48:47.182]  </debugvars>
[15:48:47.182]  
[15:48:47.182]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:48:47.182]    <block atomic="false" info="">
[15:48:47.182]      __var SW_DP_ABORT       = 0x0;
[15:48:47.182]        // -> [SW_DP_ABORT <= 0x00000000]
[15:48:47.182]      __var DP_CTRL_STAT      = 0x4;
[15:48:47.182]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:48:47.182]      __var DP_SELECT         = 0x8;
[15:48:47.182]        // -> [DP_SELECT <= 0x00000008]
[15:48:47.182]      __var powered_down      = 0;
[15:48:47.182]        // -> [powered_down <= 0x00000000]
[15:48:47.182]      WriteDP(DP_SELECT, 0x00000000);
[15:48:47.182]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:48:47.182]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:48:47.182]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:48:47.182]        // -> [powered_down <= 0x00000001]
[15:48:47.182]    </block>
[15:48:47.182]    <control if="powered_down" while="" timeout="0" info="">
[15:48:47.182]      // if-block "powered_down"
[15:48:47.182]        // =>  TRUE
[15:48:47.182]      <block atomic="false" info="">
[15:48:47.182]        Message(0, "Debug/System power-up request sent");
[15:48:47.182]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:48:47.190]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:48:47.190]      </block>
[15:48:47.190]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:48:47.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:48:47.203]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:48:47.203]        // while-condition  =>  FALSE
[15:48:47.203]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:48:47.203]      </control>
[15:48:47.203]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:48:47.203]        // if-block "(__protocol & 0xFFFF) == 1"
[15:48:47.203]          // =>  FALSE
[15:48:47.203]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:48:47.203]      </control>
[15:48:47.203]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:48:47.203]        // if-block "(__protocol & 0xFFFF) == 2"
[15:48:47.203]          // =>  TRUE
[15:48:47.203]        <block atomic="false" info="">
[15:48:47.203]          Message(0, "executing SWD power up");
[15:48:47.203]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:48:47.211]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:48:47.211]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:48:47.211]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:48:47.211]        </block>
[15:48:47.211]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:48:47.211]      </control>
[15:48:47.211]      // end if-block "powered_down"
[15:48:47.211]    </control>
[15:48:47.211]    <block atomic="false" info="">
[15:48:47.211]      __var DEBUG_PORT_VAL    = 0;
[15:48:47.211]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:48:47.211]      __var ACCESS_POINT_VAL  = 0;
[15:48:47.211]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:48:47.211]      __ap = 1; 
[15:48:47.211]        // -> [__ap <= 0x00000001]
[15:48:47.211]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:48:47.221]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:48:47.221]      __ap = 4;
[15:48:47.221]        // -> [__ap <= 0x00000004]
[15:48:47.221]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:48:47.241]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:48:47.241]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:48:47.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:48:47.241]    </block>
[15:48:47.241]    <block atomic="false" info="">
[15:48:47.241]      __var nReset = 0x80;
[15:48:47.241]        // -> [nReset <= 0x00000080]
[15:48:47.241]      __var canReadPins = 0;
[15:48:47.241]        // -> [canReadPins <= 0x00000000]
[15:48:47.241]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:48:47.241]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:48:47.241]        // -> [canReadPins <= 0x00000001]
[15:48:47.241]    </block>
[15:48:47.241]    <control if="" while="1" timeout="200" info="">
[15:48:47.241]      // while "1"  (timeout="200")
[15:48:47.241]      // while-condition  =>  TRUE
[15:48:47.241]      // while "1"  (timeout="200")
[15:48:47.241]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.251]      // while-condition  =>  TRUE
[15:48:47.251]      // while "1"  (timeout="200")
[15:48:47.261]      // while-condition  =>  TRUE
[15:48:47.261]      // while "1"  (timeout="200")
[15:48:47.261]      // while  =>  TIMEOUT
[15:48:47.261]      // end while "1"
[15:48:47.261]    </control>
[15:48:47.261]    <control if="canReadPins" while="" timeout="0" info="">
[15:48:47.261]      // if-block "canReadPins"
[15:48:47.261]        // =>  TRUE
[15:48:47.261]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:48:47.261]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:48:47.261]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:48:47.261]        // while-condition  =>  FALSE
[15:48:47.261]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:48:47.261]      </control>
[15:48:47.261]      // end if-block "canReadPins"
[15:48:47.261]    </control>
[15:48:47.261]    <control if="!canReadPins" while="" timeout="0" info="">
[15:48:47.261]      // if-block "!canReadPins"
[15:48:47.261]        // =>  FALSE
[15:48:47.261]      // skip if-block "!canReadPins"
[15:48:47.261]    </control>
[15:48:47.261]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:48:47.261]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:48:47.261]        // =>  TRUE
[15:48:47.261]      <block atomic="false" info="">
[15:48:47.261]        WriteAP(0x00, 0x190008);
[15:48:47.271]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:48:47.271]        WriteAP(0xF0, 0x01);
[15:48:47.281]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:48:47.281]      </block>
[15:48:47.281]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:48:47.281]    </control>
[15:48:47.281]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:48:47.281]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:48:47.281]        // =>  FALSE
[15:48:47.281]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:48:47.281]    </control>
[15:48:47.281]    <block atomic="false" info="">
[15:48:47.281]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:48:47.281]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:48:47.281]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:48:47.281]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:48:47.281]      __ap = 0; //lets make sure we reset the access point selection
[15:48:47.291]        // -> [__ap <= 0x00000000]
[15:48:47.291]    </block>
[15:48:47.291]  </sequence>
[15:48:47.291]  
[15:48:47.311]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:48:47.311]  
[15:48:47.311]  <debugvars>
[15:48:47.311]    // Pre-defined
[15:48:47.311]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:48:47.311]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:48:47.311]    __dp=0x00000000
[15:48:47.311]    __ap=0x00000000
[15:48:47.311]    __traceout=0x00000000      (Trace Disabled)
[15:48:47.311]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:48:47.311]    __FlashAddr=0x00000000
[15:48:47.311]    __FlashLen=0x00000000
[15:48:47.311]    __FlashArg=0x00000000
[15:48:47.311]    __FlashOp=0x00000000
[15:48:47.311]    __Result=0x00000000
[15:48:47.311]  </debugvars>
[15:48:47.311]  
[15:48:47.311]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:48:47.311]    <block atomic="false" info="">
[15:48:47.311]      __var deviceID = 0;
[15:48:47.311]        // -> [deviceID <= 0x00000000]
[15:48:47.321]      __var version = 0;
[15:48:47.321]        // -> [version <= 0x00000000]
[15:48:47.321]      __var partNum = 0;
[15:48:47.321]        // -> [partNum <= 0x00000000]
[15:48:47.322]      __var manuf = 0;
[15:48:47.322]        // -> [manuf <= 0x00000000]
[15:48:47.322]      __var isMSPM0G1X0X_G3X0X = 0;
[15:48:47.322]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:48:47.322]      __var isProduction = 0;
[15:48:47.322]        // -> [isProduction <= 0x00000000]
[15:48:47.322]      __var continueId = 0;
[15:48:47.322]        // -> [continueId <= 0x00000000]
[15:48:47.322]      deviceID =   Read32(0x41C40004);
[15:48:47.327]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:48:47.327]        // -> [deviceID <= 0x2BB8802F]
[15:48:47.327]      version = deviceID >> 28;
[15:48:47.327]        // -> [version <= 0x00000002]
[15:48:47.327]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:48:47.327]        // -> [partNum <= 0x0000BB88]
[15:48:47.327]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:48:47.327]        // -> [manuf <= 0x00000017]
[15:48:47.327]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:48:47.327]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:48:47.327]      isProduction = (version > 0);
[15:48:47.327]        // -> [isProduction <= 0x00000001]
[15:48:47.327]    </block>
[15:48:47.327]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:48:47.327]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:48:47.327]        // =>  FALSE
[15:48:47.327]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:48:47.327]    </control>
[15:48:47.327]    <control if="continueId == 4" while="" timeout="0" info="">
[15:48:47.330]      // if-block "continueId == 4"
[15:48:47.330]        // =>  FALSE
[15:48:47.330]      // skip if-block "continueId == 4"
[15:48:47.330]    </control>
[15:48:47.330]    <control if="!isProduction" while="" timeout="0" info="">
[15:48:47.331]      // if-block "!isProduction"
[15:48:47.331]        // =>  FALSE
[15:48:47.331]      // skip if-block "!isProduction"
[15:48:47.331]    </control>
[15:48:47.331]  </sequence>
[15:48:47.331]  
[15:49:43.906]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:49:43.906]  
[15:49:43.918]  <debugvars>
[15:49:43.918]    // Pre-defined
[15:49:43.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:49:43.918]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:49:43.918]    __dp=0x00000000
[15:49:43.918]    __ap=0x00000000
[15:49:43.918]    __traceout=0x00000000      (Trace Disabled)
[15:49:43.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:49:43.919]    __FlashAddr=0x00000000
[15:49:43.919]    __FlashLen=0x00000000
[15:49:43.919]    __FlashArg=0x00000000
[15:49:43.920]    __FlashOp=0x00000000
[15:49:43.920]    __Result=0x00000000
[15:49:43.920]  </debugvars>
[15:49:43.920]  
[15:49:43.920]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:49:43.920]    <block atomic="false" info="">
[15:49:43.920]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:49:43.920]        // -> [isSWJ <= 0x00000001]
[15:49:43.920]      __var hasDormant = __protocol & 0x00020000;
[15:49:43.920]        // -> [hasDormant <= 0x00000000]
[15:49:43.920]      __var protType   = __protocol & 0x0000FFFF;
[15:49:43.920]        // -> [protType <= 0x00000002]
[15:49:43.920]    </block>
[15:49:43.920]    <control if="protType == 1" while="" timeout="0" info="">
[15:49:43.921]      // if-block "protType == 1"
[15:49:43.921]        // =>  FALSE
[15:49:43.921]      // skip if-block "protType == 1"
[15:49:43.921]    </control>
[15:49:43.921]    <control if="protType == 2" while="" timeout="0" info="">
[15:49:43.921]      // if-block "protType == 2"
[15:49:43.921]        // =>  TRUE
[15:49:43.921]      <control if="isSWJ" while="" timeout="0" info="">
[15:49:43.921]        // if-block "isSWJ"
[15:49:43.921]          // =>  TRUE
[15:49:43.921]        <control if="hasDormant" while="" timeout="0" info="">
[15:49:43.921]          // if-block "hasDormant"
[15:49:43.921]            // =>  FALSE
[15:49:43.921]          // skip if-block "hasDormant"
[15:49:43.921]        </control>
[15:49:43.921]        <control if="!hasDormant" while="" timeout="0" info="">
[15:49:43.923]          // if-block "!hasDormant"
[15:49:43.923]            // =>  TRUE
[15:49:43.923]          <block atomic="false" info="">
[15:49:43.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:49:43.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:49:43.925]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:49:43.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:49:43.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:49:43.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:49:43.928]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:49:43.930]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:49:43.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:49:43.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:49:43.935]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:49:43.936]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:49:43.936]          </block>
[15:49:43.936]          // end if-block "!hasDormant"
[15:49:43.936]        </control>
[15:49:43.936]        // end if-block "isSWJ"
[15:49:43.937]      </control>
[15:49:43.937]      <control if="!isSWJ" while="" timeout="0" info="">
[15:49:43.937]        // if-block "!isSWJ"
[15:49:43.937]          // =>  FALSE
[15:49:43.937]        // skip if-block "!isSWJ"
[15:49:43.937]      </control>
[15:49:43.937]      <block atomic="false" info="">
[15:49:43.937]        ReadDP(0x0);
[15:49:43.939]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:49:43.939]      </block>
[15:49:43.939]      // end if-block "protType == 2"
[15:49:43.939]    </control>
[15:49:43.939]  </sequence>
[15:49:43.939]  
[15:49:43.941]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:49:43.941]  
[15:49:43.941]  <debugvars>
[15:49:43.942]    // Pre-defined
[15:49:43.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:49:43.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:49:43.942]    __dp=0x00000000
[15:49:43.942]    __ap=0x00000000
[15:49:43.943]    __traceout=0x00000000      (Trace Disabled)
[15:49:43.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:49:43.943]    __FlashAddr=0x00000000
[15:49:43.943]    __FlashLen=0x00000000
[15:49:43.943]    __FlashArg=0x00000000
[15:49:43.943]    __FlashOp=0x00000000
[15:49:43.943]    __Result=0x00000000
[15:49:43.943]  </debugvars>
[15:49:43.943]  
[15:49:43.943]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:49:43.943]    <block atomic="false" info="">
[15:49:43.944]      __var SW_DP_ABORT       = 0x0;
[15:49:43.944]        // -> [SW_DP_ABORT <= 0x00000000]
[15:49:43.944]      __var DP_CTRL_STAT      = 0x4;
[15:49:43.944]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:49:43.944]      __var DP_SELECT         = 0x8;
[15:49:43.944]        // -> [DP_SELECT <= 0x00000008]
[15:49:43.944]      __var powered_down      = 0;
[15:49:43.944]        // -> [powered_down <= 0x00000000]
[15:49:43.944]      WriteDP(DP_SELECT, 0x00000000);
[15:49:43.948]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:49:43.948]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:49:43.949]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:49:43.949]        // -> [powered_down <= 0x00000001]
[15:49:43.950]    </block>
[15:49:43.950]    <control if="powered_down" while="" timeout="0" info="">
[15:49:43.950]      // if-block "powered_down"
[15:49:43.951]        // =>  TRUE
[15:49:43.951]      <block atomic="false" info="">
[15:49:43.951]        Message(0, "Debug/System power-up request sent");
[15:49:43.952]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:49:43.953]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:49:43.953]      </block>
[15:49:43.953]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:49:43.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:49:43.956]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:49:43.956]        // while-condition  =>  FALSE
[15:49:43.956]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:49:43.956]      </control>
[15:49:43.957]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:49:43.957]        // if-block "(__protocol & 0xFFFF) == 1"
[15:49:43.957]          // =>  FALSE
[15:49:43.957]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:49:43.957]      </control>
[15:49:43.957]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:49:43.957]        // if-block "(__protocol & 0xFFFF) == 2"
[15:49:43.958]          // =>  TRUE
[15:49:43.958]        <block atomic="false" info="">
[15:49:43.958]          Message(0, "executing SWD power up");
[15:49:43.962]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:49:43.965]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:49:43.966]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:49:43.968]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:49:43.968]        </block>
[15:49:43.968]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:49:43.968]      </control>
[15:49:43.968]      // end if-block "powered_down"
[15:49:43.968]    </control>
[15:49:43.969]    <block atomic="false" info="">
[15:49:43.969]      __var DEBUG_PORT_VAL    = 0;
[15:49:43.969]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:49:43.969]      __var ACCESS_POINT_VAL  = 0;
[15:49:43.969]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:49:43.970]      __ap = 1; 
[15:49:43.970]        // -> [__ap <= 0x00000001]
[15:49:43.970]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:49:43.973]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:49:43.973]      __ap = 4;
[15:49:43.973]        // -> [__ap <= 0x00000004]
[15:49:43.974]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:49:43.974]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:49:43.974]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:49:43.974]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:49:43.980]    </block>
[15:49:43.980]    <block atomic="false" info="">
[15:49:43.980]      __var nReset = 0x80;
[15:49:43.980]        // -> [nReset <= 0x00000080]
[15:49:43.982]      __var canReadPins = 0;
[15:49:43.982]        // -> [canReadPins <= 0x00000000]
[15:49:43.982]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:49:43.982]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:49:43.982]        // -> [canReadPins <= 0x00000001]
[15:49:43.982]    </block>
[15:49:43.982]    <control if="" while="1" timeout="200" info="">
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.982]      // while-condition  =>  TRUE
[15:49:43.982]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.988]      // while "1"  (timeout="200")
[15:49:43.988]      // while-condition  =>  TRUE
[15:49:43.990]      // while "1"  (timeout="200")
[15:49:43.990]      // while-condition  =>  TRUE
[15:49:43.990]      // while "1"  (timeout="200")
[15:49:43.990]      // while-condition  =>  TRUE
[15:49:43.990]      // while "1"  (timeout="200")
[15:49:43.990]      // while-condition  =>  TRUE
[15:49:43.991]      // while "1"  (timeout="200")
[15:49:43.991]      // while  =>  TIMEOUT
[15:49:43.991]      // end while "1"
[15:49:43.991]    </control>
[15:49:43.991]    <control if="canReadPins" while="" timeout="0" info="">
[15:49:43.991]      // if-block "canReadPins"
[15:49:43.991]        // =>  TRUE
[15:49:43.991]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:49:43.991]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:49:43.993]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:49:43.993]        // while-condition  =>  FALSE
[15:49:43.993]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:49:43.993]      </control>
[15:49:43.993]      // end if-block "canReadPins"
[15:49:43.993]    </control>
[15:49:43.993]    <control if="!canReadPins" while="" timeout="0" info="">
[15:49:43.993]      // if-block "!canReadPins"
[15:49:43.993]        // =>  FALSE
[15:49:43.993]      // skip if-block "!canReadPins"
[15:49:43.993]    </control>
[15:49:43.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:49:43.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:49:43.993]        // =>  TRUE
[15:49:43.993]      <block atomic="false" info="">
[15:49:43.993]        WriteAP(0x00, 0x190008);
[15:49:43.993]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:49:43.993]        WriteAP(0xF0, 0x01);
[15:49:44.003]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:49:44.003]      </block>
[15:49:44.003]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:49:44.003]    </control>
[15:49:44.003]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:49:44.003]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:49:44.003]        // =>  FALSE
[15:49:44.003]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:49:44.003]    </control>
[15:49:44.003]    <block atomic="false" info="">
[15:49:44.003]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:49:44.007]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:49:44.007]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:49:44.007]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:49:44.010]      __ap = 0; //lets make sure we reset the access point selection
[15:49:44.010]        // -> [__ap <= 0x00000000]
[15:49:44.010]    </block>
[15:49:44.010]  </sequence>
[15:49:44.010]  
[15:49:44.047]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:49:44.047]  
[15:49:44.047]  <debugvars>
[15:49:44.047]    // Pre-defined
[15:49:44.047]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:49:44.047]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:49:44.047]    __dp=0x00000000
[15:49:44.047]    __ap=0x00000000
[15:49:44.047]    __traceout=0x00000000      (Trace Disabled)
[15:49:44.047]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:49:44.047]    __FlashAddr=0x00000000
[15:49:44.049]    __FlashLen=0x00000000
[15:49:44.049]    __FlashArg=0x00000000
[15:49:44.049]    __FlashOp=0x00000000
[15:49:44.049]    __Result=0x00000000
[15:49:44.049]  </debugvars>
[15:49:44.049]  
[15:49:44.049]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:49:44.049]    <block atomic="false" info="">
[15:49:44.049]      __var deviceID = 0;
[15:49:44.049]        // -> [deviceID <= 0x00000000]
[15:49:44.049]      __var version = 0;
[15:49:44.050]        // -> [version <= 0x00000000]
[15:49:44.050]      __var partNum = 0;
[15:49:44.050]        // -> [partNum <= 0x00000000]
[15:49:44.050]      __var manuf = 0;
[15:49:44.050]        // -> [manuf <= 0x00000000]
[15:49:44.050]      __var isMSPM0G1X0X_G3X0X = 0;
[15:49:44.050]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:49:44.050]      __var isProduction = 0;
[15:49:44.050]        // -> [isProduction <= 0x00000000]
[15:49:44.051]      __var continueId = 0;
[15:49:44.051]        // -> [continueId <= 0x00000000]
[15:49:44.051]      deviceID =   Read32(0x41C40004);
[15:49:44.051]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:49:44.051]        // -> [deviceID <= 0x2BB8802F]
[15:49:44.051]      version = deviceID >> 28;
[15:49:44.051]        // -> [version <= 0x00000002]
[15:49:44.051]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:49:44.051]        // -> [partNum <= 0x0000BB88]
[15:49:44.051]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:49:44.051]        // -> [manuf <= 0x00000017]
[15:49:44.051]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:49:44.051]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:49:44.051]      isProduction = (version > 0);
[15:49:44.051]        // -> [isProduction <= 0x00000001]
[15:49:44.051]    </block>
[15:49:44.051]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:49:44.051]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:49:44.051]        // =>  FALSE
[15:49:44.051]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:49:44.051]    </control>
[15:49:44.051]    <control if="continueId == 4" while="" timeout="0" info="">
[15:49:44.051]      // if-block "continueId == 4"
[15:49:44.051]        // =>  FALSE
[15:49:44.051]      // skip if-block "continueId == 4"
[15:49:44.051]    </control>
[15:49:44.051]    <control if="!isProduction" while="" timeout="0" info="">
[15:49:44.051]      // if-block "!isProduction"
[15:49:44.051]        // =>  FALSE
[15:49:44.060]      // skip if-block "!isProduction"
[15:49:44.060]    </control>
[15:49:44.060]  </sequence>
[15:49:44.060]  
[15:50:38.596]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:50:38.596]  
[15:50:38.596]  <debugvars>
[15:50:38.596]    // Pre-defined
[15:50:38.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:50:38.596]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:50:38.596]    __dp=0x00000000
[15:50:38.597]    __ap=0x00000000
[15:50:38.597]    __traceout=0x00000000      (Trace Disabled)
[15:50:38.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:50:38.597]    __FlashAddr=0x00000000
[15:50:38.597]    __FlashLen=0x00000000
[15:50:38.597]    __FlashArg=0x00000000
[15:50:38.597]    __FlashOp=0x00000000
[15:50:38.597]    __Result=0x00000000
[15:50:38.597]  </debugvars>
[15:50:38.597]  
[15:50:38.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:50:38.597]    <block atomic="false" info="">
[15:50:38.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:50:38.597]        // -> [isSWJ <= 0x00000001]
[15:50:38.597]      __var hasDormant = __protocol & 0x00020000;
[15:50:38.597]        // -> [hasDormant <= 0x00000000]
[15:50:38.597]      __var protType   = __protocol & 0x0000FFFF;
[15:50:38.597]        // -> [protType <= 0x00000002]
[15:50:38.597]    </block>
[15:50:38.597]    <control if="protType == 1" while="" timeout="0" info="">
[15:50:38.597]      // if-block "protType == 1"
[15:50:38.597]        // =>  FALSE
[15:50:38.597]      // skip if-block "protType == 1"
[15:50:38.597]    </control>
[15:50:38.597]    <control if="protType == 2" while="" timeout="0" info="">
[15:50:38.597]      // if-block "protType == 2"
[15:50:38.597]        // =>  TRUE
[15:50:38.597]      <control if="isSWJ" while="" timeout="0" info="">
[15:50:38.597]        // if-block "isSWJ"
[15:50:38.597]          // =>  TRUE
[15:50:38.597]        <control if="hasDormant" while="" timeout="0" info="">
[15:50:38.597]          // if-block "hasDormant"
[15:50:38.597]            // =>  FALSE
[15:50:38.597]          // skip if-block "hasDormant"
[15:50:38.597]        </control>
[15:50:38.597]        <control if="!hasDormant" while="" timeout="0" info="">
[15:50:38.597]          // if-block "!hasDormant"
[15:50:38.597]            // =>  TRUE
[15:50:38.597]          <block atomic="false" info="">
[15:50:38.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:50:38.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:50:38.597]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:50:38.597]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:50:38.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:50:38.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:50:38.606]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:50:38.607]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:50:38.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:50:38.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:50:38.607]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:50:38.607]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:50:38.607]          </block>
[15:50:38.607]          // end if-block "!hasDormant"
[15:50:38.607]        </control>
[15:50:38.607]        // end if-block "isSWJ"
[15:50:38.607]      </control>
[15:50:38.607]      <control if="!isSWJ" while="" timeout="0" info="">
[15:50:38.607]        // if-block "!isSWJ"
[15:50:38.607]          // =>  FALSE
[15:50:38.607]        // skip if-block "!isSWJ"
[15:50:38.607]      </control>
[15:50:38.607]      <block atomic="false" info="">
[15:50:38.607]        ReadDP(0x0);
[15:50:38.607]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:50:38.607]      </block>
[15:50:38.607]      // end if-block "protType == 2"
[15:50:38.607]    </control>
[15:50:38.607]  </sequence>
[15:50:38.607]  
[15:50:38.617]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:50:38.617]  
[15:50:38.617]  <debugvars>
[15:50:38.617]    // Pre-defined
[15:50:38.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:50:38.617]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:50:38.617]    __dp=0x00000000
[15:50:38.617]    __ap=0x00000000
[15:50:38.617]    __traceout=0x00000000      (Trace Disabled)
[15:50:38.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:50:38.617]    __FlashAddr=0x00000000
[15:50:38.617]    __FlashLen=0x00000000
[15:50:38.617]    __FlashArg=0x00000000
[15:50:38.617]    __FlashOp=0x00000000
[15:50:38.617]    __Result=0x00000000
[15:50:38.617]  </debugvars>
[15:50:38.617]  
[15:50:38.617]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:50:38.617]    <block atomic="false" info="">
[15:50:38.617]      __var SW_DP_ABORT       = 0x0;
[15:50:38.617]        // -> [SW_DP_ABORT <= 0x00000000]
[15:50:38.617]      __var DP_CTRL_STAT      = 0x4;
[15:50:38.617]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:50:38.617]      __var DP_SELECT         = 0x8;
[15:50:38.617]        // -> [DP_SELECT <= 0x00000008]
[15:50:38.617]      __var powered_down      = 0;
[15:50:38.617]        // -> [powered_down <= 0x00000000]
[15:50:38.617]      WriteDP(DP_SELECT, 0x00000000);
[15:50:38.617]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:50:38.617]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:50:38.617]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:50:38.617]        // -> [powered_down <= 0x00000001]
[15:50:38.617]    </block>
[15:50:38.617]    <control if="powered_down" while="" timeout="0" info="">
[15:50:38.617]      // if-block "powered_down"
[15:50:38.617]        // =>  TRUE
[15:50:38.617]      <block atomic="false" info="">
[15:50:38.617]        Message(0, "Debug/System power-up request sent");
[15:50:38.617]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:50:38.617]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:50:38.617]      </block>
[15:50:38.617]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:50:38.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:50:38.627]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:50:38.627]        // while-condition  =>  FALSE
[15:50:38.627]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:50:38.627]      </control>
[15:50:38.627]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:50:38.627]        // if-block "(__protocol & 0xFFFF) == 1"
[15:50:38.627]          // =>  FALSE
[15:50:38.627]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:50:38.627]      </control>
[15:50:38.627]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:50:38.627]        // if-block "(__protocol & 0xFFFF) == 2"
[15:50:38.627]          // =>  TRUE
[15:50:38.627]        <block atomic="false" info="">
[15:50:38.627]          Message(0, "executing SWD power up");
[15:50:38.627]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:50:38.627]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:50:38.627]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:50:38.627]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:50:38.627]        </block>
[15:50:38.627]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:50:38.627]      </control>
[15:50:38.627]      // end if-block "powered_down"
[15:50:38.627]    </control>
[15:50:38.627]    <block atomic="false" info="">
[15:50:38.627]      __var DEBUG_PORT_VAL    = 0;
[15:50:38.627]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:50:38.627]      __var ACCESS_POINT_VAL  = 0;
[15:50:38.627]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:50:38.627]      __ap = 1; 
[15:50:38.627]        // -> [__ap <= 0x00000001]
[15:50:38.627]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:50:38.638]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:50:38.638]      __ap = 4;
[15:50:38.638]        // -> [__ap <= 0x00000004]
[15:50:38.638]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:50:38.649]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:50:38.649]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:50:38.649]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:50:38.649]    </block>
[15:50:38.649]    <block atomic="false" info="">
[15:50:38.649]      __var nReset = 0x80;
[15:50:38.649]        // -> [nReset <= 0x00000080]
[15:50:38.649]      __var canReadPins = 0;
[15:50:38.649]        // -> [canReadPins <= 0x00000000]
[15:50:38.649]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:50:38.649]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:50:38.649]        // -> [canReadPins <= 0x00000001]
[15:50:38.649]    </block>
[15:50:38.649]    <control if="" while="1" timeout="200" info="">
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.649]      // while "1"  (timeout="200")
[15:50:38.649]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.657]      // while "1"  (timeout="200")
[15:50:38.657]      // while-condition  =>  TRUE
[15:50:38.667]      // while "1"  (timeout="200")
[15:50:38.667]      // while  =>  TIMEOUT
[15:50:38.667]      // end while "1"
[15:50:38.667]    </control>
[15:50:38.667]    <control if="canReadPins" while="" timeout="0" info="">
[15:50:38.667]      // if-block "canReadPins"
[15:50:38.667]        // =>  TRUE
[15:50:38.667]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:50:38.667]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:50:38.669]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:50:38.669]        // while-condition  =>  FALSE
[15:50:38.669]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:50:38.672]      </control>
[15:50:38.672]      // end if-block "canReadPins"
[15:50:38.672]    </control>
[15:50:38.672]    <control if="!canReadPins" while="" timeout="0" info="">
[15:50:38.672]      // if-block "!canReadPins"
[15:50:38.672]        // =>  FALSE
[15:50:38.672]      // skip if-block "!canReadPins"
[15:50:38.672]    </control>
[15:50:38.673]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:50:38.673]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:50:38.673]        // =>  TRUE
[15:50:38.673]      <block atomic="false" info="">
[15:50:38.673]        WriteAP(0x00, 0x190008);
[15:50:38.674]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:50:38.676]        WriteAP(0xF0, 0x01);
[15:50:38.678]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:50:38.678]      </block>
[15:50:38.678]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:50:38.678]    </control>
[15:50:38.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:50:38.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:50:38.678]        // =>  FALSE
[15:50:38.678]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:50:38.678]    </control>
[15:50:38.678]    <block atomic="false" info="">
[15:50:38.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:50:38.678]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:50:38.678]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:50:38.678]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:50:38.678]      __ap = 0; //lets make sure we reset the access point selection
[15:50:38.678]        // -> [__ap <= 0x00000000]
[15:50:38.678]    </block>
[15:50:38.678]  </sequence>
[15:50:38.678]  
[15:50:38.709]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:50:38.709]  
[15:50:38.709]  <debugvars>
[15:50:38.709]    // Pre-defined
[15:50:38.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:50:38.709]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:50:38.709]    __dp=0x00000000
[15:50:38.709]    __ap=0x00000000
[15:50:38.709]    __traceout=0x00000000      (Trace Disabled)
[15:50:38.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:50:38.709]    __FlashAddr=0x00000000
[15:50:38.709]    __FlashLen=0x00000000
[15:50:38.709]    __FlashArg=0x00000000
[15:50:38.709]    __FlashOp=0x00000000
[15:50:38.709]    __Result=0x00000000
[15:50:38.709]  </debugvars>
[15:50:38.709]  
[15:50:38.709]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:50:38.709]    <block atomic="false" info="">
[15:50:38.709]      __var deviceID = 0;
[15:50:38.709]        // -> [deviceID <= 0x00000000]
[15:50:38.709]      __var version = 0;
[15:50:38.709]        // -> [version <= 0x00000000]
[15:50:38.709]      __var partNum = 0;
[15:50:38.709]        // -> [partNum <= 0x00000000]
[15:50:38.709]      __var manuf = 0;
[15:50:38.709]        // -> [manuf <= 0x00000000]
[15:50:38.709]      __var isMSPM0G1X0X_G3X0X = 0;
[15:50:38.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:50:38.709]      __var isProduction = 0;
[15:50:38.709]        // -> [isProduction <= 0x00000000]
[15:50:38.709]      __var continueId = 0;
[15:50:38.709]        // -> [continueId <= 0x00000000]
[15:50:38.709]      deviceID =   Read32(0x41C40004);
[15:50:38.717]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:50:38.717]        // -> [deviceID <= 0x2BB8802F]
[15:50:38.717]      version = deviceID >> 28;
[15:50:38.717]        // -> [version <= 0x00000002]
[15:50:38.717]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:50:38.717]        // -> [partNum <= 0x0000BB88]
[15:50:38.719]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:50:38.719]        // -> [manuf <= 0x00000017]
[15:50:38.719]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:50:38.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:50:38.719]      isProduction = (version > 0);
[15:50:38.719]        // -> [isProduction <= 0x00000001]
[15:50:38.719]    </block>
[15:50:38.719]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:50:38.719]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:50:38.719]        // =>  FALSE
[15:50:38.719]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:50:38.719]    </control>
[15:50:38.719]    <control if="continueId == 4" while="" timeout="0" info="">
[15:50:38.719]      // if-block "continueId == 4"
[15:50:38.719]        // =>  FALSE
[15:50:38.719]      // skip if-block "continueId == 4"
[15:50:38.719]    </control>
[15:50:38.719]    <control if="!isProduction" while="" timeout="0" info="">
[15:50:38.719]      // if-block "!isProduction"
[15:50:38.719]        // =>  FALSE
[15:50:38.719]      // skip if-block "!isProduction"
[15:50:38.719]    </control>
[15:50:38.719]  </sequence>
[15:50:38.719]  
[15:53:22.925]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:53:22.925]  
[15:53:22.926]  <debugvars>
[15:53:22.926]    // Pre-defined
[15:53:22.926]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:53:22.926]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:53:22.926]    __dp=0x00000000
[15:53:22.926]    __ap=0x00000000
[15:53:22.926]    __traceout=0x00000000      (Trace Disabled)
[15:53:22.926]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:53:22.926]    __FlashAddr=0x00000000
[15:53:22.926]    __FlashLen=0x00000000
[15:53:22.926]    __FlashArg=0x00000000
[15:53:22.926]    __FlashOp=0x00000000
[15:53:22.926]    __Result=0x00000000
[15:53:22.926]  </debugvars>
[15:53:22.926]  
[15:53:22.926]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:53:22.926]    <block atomic="false" info="">
[15:53:22.926]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:53:22.926]        // -> [isSWJ <= 0x00000001]
[15:53:22.926]      __var hasDormant = __protocol & 0x00020000;
[15:53:22.926]        // -> [hasDormant <= 0x00000000]
[15:53:22.926]      __var protType   = __protocol & 0x0000FFFF;
[15:53:22.926]        // -> [protType <= 0x00000002]
[15:53:22.926]    </block>
[15:53:22.926]    <control if="protType == 1" while="" timeout="0" info="">
[15:53:22.926]      // if-block "protType == 1"
[15:53:22.926]        // =>  FALSE
[15:53:22.926]      // skip if-block "protType == 1"
[15:53:22.926]    </control>
[15:53:22.926]    <control if="protType == 2" while="" timeout="0" info="">
[15:53:22.926]      // if-block "protType == 2"
[15:53:22.926]        // =>  TRUE
[15:53:22.926]      <control if="isSWJ" while="" timeout="0" info="">
[15:53:22.926]        // if-block "isSWJ"
[15:53:22.926]          // =>  TRUE
[15:53:22.926]        <control if="hasDormant" while="" timeout="0" info="">
[15:53:22.926]          // if-block "hasDormant"
[15:53:22.926]            // =>  FALSE
[15:53:22.926]          // skip if-block "hasDormant"
[15:53:22.926]        </control>
[15:53:22.926]        <control if="!hasDormant" while="" timeout="0" info="">
[15:53:22.926]          // if-block "!hasDormant"
[15:53:22.926]            // =>  TRUE
[15:53:22.926]          <block atomic="false" info="">
[15:53:22.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:53:22.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:53:22.932]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:53:22.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:53:22.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:53:22.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:53:22.934]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:53:22.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:53:22.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:53:22.942]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:53:22.942]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:53:22.942]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:53:22.942]          </block>
[15:53:22.942]          // end if-block "!hasDormant"
[15:53:22.942]        </control>
[15:53:22.942]        // end if-block "isSWJ"
[15:53:22.942]      </control>
[15:53:22.942]      <control if="!isSWJ" while="" timeout="0" info="">
[15:53:22.942]        // if-block "!isSWJ"
[15:53:22.942]          // =>  FALSE
[15:53:22.942]        // skip if-block "!isSWJ"
[15:53:22.942]      </control>
[15:53:22.942]      <block atomic="false" info="">
[15:53:22.942]        ReadDP(0x0);
[15:53:22.952]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:53:22.952]      </block>
[15:53:22.952]      // end if-block "protType == 2"
[15:53:22.952]    </control>
[15:53:22.952]  </sequence>
[15:53:22.952]  
[15:53:22.952]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:53:22.952]  
[15:53:22.952]  <debugvars>
[15:53:22.952]    // Pre-defined
[15:53:22.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:53:22.952]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:53:22.952]    __dp=0x00000000
[15:53:22.952]    __ap=0x00000000
[15:53:22.952]    __traceout=0x00000000      (Trace Disabled)
[15:53:22.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:53:22.952]    __FlashAddr=0x00000000
[15:53:22.952]    __FlashLen=0x00000000
[15:53:22.952]    __FlashArg=0x00000000
[15:53:22.952]    __FlashOp=0x00000000
[15:53:22.952]    __Result=0x00000000
[15:53:22.952]  </debugvars>
[15:53:22.952]  
[15:53:22.952]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:53:22.952]    <block atomic="false" info="">
[15:53:22.952]      __var SW_DP_ABORT       = 0x0;
[15:53:22.952]        // -> [SW_DP_ABORT <= 0x00000000]
[15:53:22.952]      __var DP_CTRL_STAT      = 0x4;
[15:53:22.952]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:53:22.952]      __var DP_SELECT         = 0x8;
[15:53:22.952]        // -> [DP_SELECT <= 0x00000008]
[15:53:22.952]      __var powered_down      = 0;
[15:53:22.952]        // -> [powered_down <= 0x00000000]
[15:53:22.952]      WriteDP(DP_SELECT, 0x00000000);
[15:53:22.964]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:53:22.964]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:53:22.964]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:53:22.964]        // -> [powered_down <= 0x00000001]
[15:53:22.964]    </block>
[15:53:22.964]    <control if="powered_down" while="" timeout="0" info="">
[15:53:22.964]      // if-block "powered_down"
[15:53:22.964]        // =>  TRUE
[15:53:22.964]      <block atomic="false" info="">
[15:53:22.964]        Message(0, "Debug/System power-up request sent");
[15:53:22.964]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:53:22.972]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:53:22.972]      </block>
[15:53:22.972]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:53:22.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:53:22.972]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:53:22.972]        // while-condition  =>  FALSE
[15:53:22.972]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:53:22.972]      </control>
[15:53:22.972]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:53:22.972]        // if-block "(__protocol & 0xFFFF) == 1"
[15:53:22.972]          // =>  FALSE
[15:53:22.972]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:53:22.972]      </control>
[15:53:22.976]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:53:22.976]        // if-block "(__protocol & 0xFFFF) == 2"
[15:53:22.976]          // =>  TRUE
[15:53:22.976]        <block atomic="false" info="">
[15:53:22.976]          Message(0, "executing SWD power up");
[15:53:22.976]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:53:22.979]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:53:22.979]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:53:22.979]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:53:22.979]        </block>
[15:53:22.979]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:53:22.979]      </control>
[15:53:22.979]      // end if-block "powered_down"
[15:53:22.979]    </control>
[15:53:22.979]    <block atomic="false" info="">
[15:53:22.979]      __var DEBUG_PORT_VAL    = 0;
[15:53:22.979]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:53:22.979]      __var ACCESS_POINT_VAL  = 0;
[15:53:22.979]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:53:22.979]      __ap = 1; 
[15:53:22.983]        // -> [__ap <= 0x00000001]
[15:53:22.983]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:53:22.984]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:53:22.984]      __ap = 4;
[15:53:22.984]        // -> [__ap <= 0x00000004]
[15:53:22.984]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:53:22.993]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:53:22.993]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:53:22.993]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:53:22.995]    </block>
[15:53:22.995]    <block atomic="false" info="">
[15:53:22.995]      __var nReset = 0x80;
[15:53:22.995]        // -> [nReset <= 0x00000080]
[15:53:22.995]      __var canReadPins = 0;
[15:53:22.995]        // -> [canReadPins <= 0x00000000]
[15:53:22.995]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:53:22.995]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:53:22.995]        // -> [canReadPins <= 0x00000001]
[15:53:22.995]    </block>
[15:53:22.995]    <control if="" while="1" timeout="200" info="">
[15:53:22.995]      // while "1"  (timeout="200")
[15:53:22.995]      // while-condition  =>  TRUE
[15:53:22.995]      // while "1"  (timeout="200")
[15:53:22.995]      // while-condition  =>  TRUE
[15:53:22.995]      // while "1"  (timeout="200")
[15:53:22.995]      // while-condition  =>  TRUE
[15:53:22.999]      // while "1"  (timeout="200")
[15:53:22.999]      // while-condition  =>  TRUE
[15:53:22.999]      // while "1"  (timeout="200")
[15:53:22.999]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.000]      // while-condition  =>  TRUE
[15:53:23.000]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.003]      // while-condition  =>  TRUE
[15:53:23.003]      // while "1"  (timeout="200")
[15:53:23.005]      // while-condition  =>  TRUE
[15:53:23.005]      // while "1"  (timeout="200")
[15:53:23.005]      // while-condition  =>  TRUE
[15:53:23.005]      // while "1"  (timeout="200")
[15:53:23.005]      // while-condition  =>  TRUE
[15:53:23.005]      // while "1"  (timeout="200")
[15:53:23.005]      // while-condition  =>  TRUE
[15:53:23.005]      // while "1"  (timeout="200")
[15:53:23.005]      // while-condition  =>  TRUE
[15:53:23.005]      // while "1"  (timeout="200")
[15:53:23.007]      // while-condition  =>  TRUE
[15:53:23.007]      // while "1"  (timeout="200")
[15:53:23.007]      // while  =>  TIMEOUT
[15:53:23.007]      // end while "1"
[15:53:23.007]    </control>
[15:53:23.007]    <control if="canReadPins" while="" timeout="0" info="">
[15:53:23.007]      // if-block "canReadPins"
[15:53:23.007]        // =>  TRUE
[15:53:23.007]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:53:23.008]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:53:23.008]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:53:23.008]        // while-condition  =>  FALSE
[15:53:23.008]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:53:23.008]      </control>
[15:53:23.008]      // end if-block "canReadPins"
[15:53:23.008]    </control>
[15:53:23.008]    <control if="!canReadPins" while="" timeout="0" info="">
[15:53:23.008]      // if-block "!canReadPins"
[15:53:23.008]        // =>  FALSE
[15:53:23.008]      // skip if-block "!canReadPins"
[15:53:23.008]    </control>
[15:53:23.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:53:23.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:53:23.008]        // =>  TRUE
[15:53:23.008]      <block atomic="false" info="">
[15:53:23.008]        WriteAP(0x00, 0x190008);
[15:53:23.013]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:53:23.013]        WriteAP(0xF0, 0x01);
[15:53:23.013]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:53:23.013]      </block>
[15:53:23.013]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:53:23.013]    </control>
[15:53:23.013]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:53:23.013]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:53:23.013]        // =>  FALSE
[15:53:23.013]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:53:23.013]    </control>
[15:53:23.013]    <block atomic="false" info="">
[15:53:23.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:53:23.023]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:53:23.023]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:53:23.023]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:53:23.023]      __ap = 0; //lets make sure we reset the access point selection
[15:53:23.023]        // -> [__ap <= 0x00000000]
[15:53:23.023]    </block>
[15:53:23.023]  </sequence>
[15:53:23.023]  
[15:53:23.045]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:53:23.045]  
[15:53:23.045]  <debugvars>
[15:53:23.045]    // Pre-defined
[15:53:23.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:53:23.045]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:53:23.045]    __dp=0x00000000
[15:53:23.045]    __ap=0x00000000
[15:53:23.045]    __traceout=0x00000000      (Trace Disabled)
[15:53:23.045]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:53:23.045]    __FlashAddr=0x00000000
[15:53:23.045]    __FlashLen=0x00000000
[15:53:23.045]    __FlashArg=0x00000000
[15:53:23.054]    __FlashOp=0x00000000
[15:53:23.054]    __Result=0x00000000
[15:53:23.054]  </debugvars>
[15:53:23.054]  
[15:53:23.054]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:53:23.054]    <block atomic="false" info="">
[15:53:23.054]      __var deviceID = 0;
[15:53:23.054]        // -> [deviceID <= 0x00000000]
[15:53:23.054]      __var version = 0;
[15:53:23.054]        // -> [version <= 0x00000000]
[15:53:23.054]      __var partNum = 0;
[15:53:23.056]        // -> [partNum <= 0x00000000]
[15:53:23.056]      __var manuf = 0;
[15:53:23.056]        // -> [manuf <= 0x00000000]
[15:53:23.056]      __var isMSPM0G1X0X_G3X0X = 0;
[15:53:23.056]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:53:23.056]      __var isProduction = 0;
[15:53:23.056]        // -> [isProduction <= 0x00000000]
[15:53:23.056]      __var continueId = 0;
[15:53:23.056]        // -> [continueId <= 0x00000000]
[15:53:23.056]      deviceID =   Read32(0x41C40004);
[15:53:23.056]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:53:23.056]        // -> [deviceID <= 0x2BB8802F]
[15:53:23.056]      version = deviceID >> 28;
[15:53:23.056]        // -> [version <= 0x00000002]
[15:53:23.056]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:53:23.056]        // -> [partNum <= 0x0000BB88]
[15:53:23.056]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:53:23.056]        // -> [manuf <= 0x00000017]
[15:53:23.056]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:53:23.056]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:53:23.056]      isProduction = (version > 0);
[15:53:23.056]        // -> [isProduction <= 0x00000001]
[15:53:23.056]    </block>
[15:53:23.064]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:53:23.064]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:53:23.064]        // =>  FALSE
[15:53:23.064]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:53:23.064]    </control>
[15:53:23.064]    <control if="continueId == 4" while="" timeout="0" info="">
[15:53:23.064]      // if-block "continueId == 4"
[15:53:23.064]        // =>  FALSE
[15:53:23.064]      // skip if-block "continueId == 4"
[15:53:23.064]    </control>
[15:53:23.064]    <control if="!isProduction" while="" timeout="0" info="">
[15:53:23.064]      // if-block "!isProduction"
[15:53:23.064]        // =>  FALSE
[15:53:23.064]      // skip if-block "!isProduction"
[15:53:23.064]    </control>
[15:53:23.064]  </sequence>
[15:53:23.064]  
[15:54:52.126]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:54:52.126]  
[15:54:52.138]  <debugvars>
[15:54:52.138]    // Pre-defined
[15:54:52.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:54:52.138]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:54:52.138]    __dp=0x00000000
[15:54:52.138]    __ap=0x00000000
[15:54:52.138]    __traceout=0x00000000      (Trace Disabled)
[15:54:52.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:54:52.138]    __FlashAddr=0x00000000
[15:54:52.138]    __FlashLen=0x00000000
[15:54:52.138]    __FlashArg=0x00000000
[15:54:52.138]    __FlashOp=0x00000000
[15:54:52.138]    __Result=0x00000000
[15:54:52.138]  </debugvars>
[15:54:52.138]  
[15:54:52.138]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:54:52.138]    <block atomic="false" info="">
[15:54:52.138]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:54:52.138]        // -> [isSWJ <= 0x00000001]
[15:54:52.138]      __var hasDormant = __protocol & 0x00020000;
[15:54:52.138]        // -> [hasDormant <= 0x00000000]
[15:54:52.138]      __var protType   = __protocol & 0x0000FFFF;
[15:54:52.138]        // -> [protType <= 0x00000002]
[15:54:52.138]    </block>
[15:54:52.138]    <control if="protType == 1" while="" timeout="0" info="">
[15:54:52.138]      // if-block "protType == 1"
[15:54:52.138]        // =>  FALSE
[15:54:52.138]      // skip if-block "protType == 1"
[15:54:52.138]    </control>
[15:54:52.138]    <control if="protType == 2" while="" timeout="0" info="">
[15:54:52.138]      // if-block "protType == 2"
[15:54:52.138]        // =>  TRUE
[15:54:52.138]      <control if="isSWJ" while="" timeout="0" info="">
[15:54:52.138]        // if-block "isSWJ"
[15:54:52.138]          // =>  TRUE
[15:54:52.138]        <control if="hasDormant" while="" timeout="0" info="">
[15:54:52.138]          // if-block "hasDormant"
[15:54:52.138]            // =>  FALSE
[15:54:52.138]          // skip if-block "hasDormant"
[15:54:52.138]        </control>
[15:54:52.138]        <control if="!hasDormant" while="" timeout="0" info="">
[15:54:52.138]          // if-block "!hasDormant"
[15:54:52.138]            // =>  TRUE
[15:54:52.138]          <block atomic="false" info="">
[15:54:52.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:54:52.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:54:52.144]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:54:52.144]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:54:52.144]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:54:52.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:54:52.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:54:52.154]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:54:52.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:54:52.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:54:52.165]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:54:52.166]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:54:52.166]          </block>
[15:54:52.166]          // end if-block "!hasDormant"
[15:54:52.166]        </control>
[15:54:52.166]        // end if-block "isSWJ"
[15:54:52.166]      </control>
[15:54:52.166]      <control if="!isSWJ" while="" timeout="0" info="">
[15:54:52.166]        // if-block "!isSWJ"
[15:54:52.166]          // =>  FALSE
[15:54:52.166]        // skip if-block "!isSWJ"
[15:54:52.166]      </control>
[15:54:52.166]      <block atomic="false" info="">
[15:54:52.166]        ReadDP(0x0);
[15:54:52.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:54:52.169]      </block>
[15:54:52.169]      // end if-block "protType == 2"
[15:54:52.169]    </control>
[15:54:52.169]  </sequence>
[15:54:52.169]  
[15:54:52.184]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:54:52.184]  
[15:54:52.184]  <debugvars>
[15:54:52.184]    // Pre-defined
[15:54:52.184]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:54:52.184]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:54:52.184]    __dp=0x00000000
[15:54:52.184]    __ap=0x00000000
[15:54:52.184]    __traceout=0x00000000      (Trace Disabled)
[15:54:52.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:54:52.184]    __FlashAddr=0x00000000
[15:54:52.184]    __FlashLen=0x00000000
[15:54:52.193]    __FlashArg=0x00000000
[15:54:52.193]    __FlashOp=0x00000000
[15:54:52.193]    __Result=0x00000000
[15:54:52.193]  </debugvars>
[15:54:52.193]  
[15:54:52.193]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:54:52.193]    <block atomic="false" info="">
[15:54:52.193]      __var SW_DP_ABORT       = 0x0;
[15:54:52.193]        // -> [SW_DP_ABORT <= 0x00000000]
[15:54:52.193]      __var DP_CTRL_STAT      = 0x4;
[15:54:52.193]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:54:52.194]      __var DP_SELECT         = 0x8;
[15:54:52.194]        // -> [DP_SELECT <= 0x00000008]
[15:54:52.194]      __var powered_down      = 0;
[15:54:52.194]        // -> [powered_down <= 0x00000000]
[15:54:52.194]      WriteDP(DP_SELECT, 0x00000000);
[15:54:52.196]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:54:52.196]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:54:52.196]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:54:52.196]        // -> [powered_down <= 0x00000001]
[15:54:52.196]    </block>
[15:54:52.196]    <control if="powered_down" while="" timeout="0" info="">
[15:54:52.196]      // if-block "powered_down"
[15:54:52.196]        // =>  TRUE
[15:54:52.196]      <block atomic="false" info="">
[15:54:52.196]        Message(0, "Debug/System power-up request sent");
[15:54:52.196]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:54:52.196]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:54:52.196]      </block>
[15:54:52.196]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:54:52.196]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:54:52.205]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:54:52.205]        // while-condition  =>  FALSE
[15:54:52.205]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:54:52.205]      </control>
[15:54:52.205]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:54:52.205]        // if-block "(__protocol & 0xFFFF) == 1"
[15:54:52.205]          // =>  FALSE
[15:54:52.205]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:54:52.205]      </control>
[15:54:52.205]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:54:52.205]        // if-block "(__protocol & 0xFFFF) == 2"
[15:54:52.205]          // =>  TRUE
[15:54:52.205]        <block atomic="false" info="">
[15:54:52.205]          Message(0, "executing SWD power up");
[15:54:52.205]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:54:52.215]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:54:52.215]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:54:52.215]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:54:52.215]        </block>
[15:54:52.215]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:54:52.215]      </control>
[15:54:52.215]      // end if-block "powered_down"
[15:54:52.215]    </control>
[15:54:52.215]    <block atomic="false" info="">
[15:54:52.215]      __var DEBUG_PORT_VAL    = 0;
[15:54:52.215]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:54:52.215]      __var ACCESS_POINT_VAL  = 0;
[15:54:52.215]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:54:52.215]      __ap = 1; 
[15:54:52.215]        // -> [__ap <= 0x00000001]
[15:54:52.215]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:54:52.225]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:54:52.225]      __ap = 4;
[15:54:52.225]        // -> [__ap <= 0x00000004]
[15:54:52.225]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:54:52.225]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:54:52.225]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:54:52.225]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:54:52.225]    </block>
[15:54:52.225]    <block atomic="false" info="">
[15:54:52.225]      __var nReset = 0x80;
[15:54:52.225]        // -> [nReset <= 0x00000080]
[15:54:52.225]      __var canReadPins = 0;
[15:54:52.225]        // -> [canReadPins <= 0x00000000]
[15:54:52.225]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:54:52.235]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:54:52.235]        // -> [canReadPins <= 0x00000001]
[15:54:52.235]    </block>
[15:54:52.235]    <control if="" while="1" timeout="200" info="">
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.235]      // while-condition  =>  TRUE
[15:54:52.235]      // while "1"  (timeout="200")
[15:54:52.245]      // while-condition  =>  TRUE
[15:54:52.245]      // while "1"  (timeout="200")
[15:54:52.245]      // while  =>  TIMEOUT
[15:54:52.245]      // end while "1"
[15:54:52.245]    </control>
[15:54:52.245]    <control if="canReadPins" while="" timeout="0" info="">
[15:54:52.245]      // if-block "canReadPins"
[15:54:52.245]        // =>  TRUE
[15:54:52.245]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:54:52.245]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:54:52.255]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:54:52.255]        // while-condition  =>  FALSE
[15:54:52.255]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:54:52.255]      </control>
[15:54:52.255]      // end if-block "canReadPins"
[15:54:52.255]    </control>
[15:54:52.255]    <control if="!canReadPins" while="" timeout="0" info="">
[15:54:52.255]      // if-block "!canReadPins"
[15:54:52.255]        // =>  FALSE
[15:54:52.255]      // skip if-block "!canReadPins"
[15:54:52.255]    </control>
[15:54:52.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:54:52.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:54:52.255]        // =>  TRUE
[15:54:52.255]      <block atomic="false" info="">
[15:54:52.255]        WriteAP(0x00, 0x190008);
[15:54:52.255]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:54:52.255]        WriteAP(0xF0, 0x01);
[15:54:52.265]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:54:52.265]      </block>
[15:54:52.265]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:54:52.265]    </control>
[15:54:52.265]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:54:52.265]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:54:52.265]        // =>  FALSE
[15:54:52.265]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:54:52.265]    </control>
[15:54:52.265]    <block atomic="false" info="">
[15:54:52.265]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:54:52.275]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:54:52.275]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:54:52.275]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:54:52.275]      __ap = 0; //lets make sure we reset the access point selection
[15:54:52.275]        // -> [__ap <= 0x00000000]
[15:54:52.275]    </block>
[15:54:52.275]  </sequence>
[15:54:52.275]  
[15:54:52.315]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:54:52.315]  
[15:54:52.315]  <debugvars>
[15:54:52.315]    // Pre-defined
[15:54:52.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:54:52.315]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:54:52.315]    __dp=0x00000000
[15:54:52.315]    __ap=0x00000000
[15:54:52.315]    __traceout=0x00000000      (Trace Disabled)
[15:54:52.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:54:52.315]    __FlashAddr=0x00000000
[15:54:52.315]    __FlashLen=0x00000000
[15:54:52.315]    __FlashArg=0x00000000
[15:54:52.315]    __FlashOp=0x00000000
[15:54:52.315]    __Result=0x00000000
[15:54:52.315]  </debugvars>
[15:54:52.315]  
[15:54:52.315]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:54:52.315]    <block atomic="false" info="">
[15:54:52.315]      __var deviceID = 0;
[15:54:52.315]        // -> [deviceID <= 0x00000000]
[15:54:52.315]      __var version = 0;
[15:54:52.315]        // -> [version <= 0x00000000]
[15:54:52.315]      __var partNum = 0;
[15:54:52.315]        // -> [partNum <= 0x00000000]
[15:54:52.315]      __var manuf = 0;
[15:54:52.315]        // -> [manuf <= 0x00000000]
[15:54:52.315]      __var isMSPM0G1X0X_G3X0X = 0;
[15:54:52.315]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:54:52.315]      __var isProduction = 0;
[15:54:52.315]        // -> [isProduction <= 0x00000000]
[15:54:52.315]      __var continueId = 0;
[15:54:52.315]        // -> [continueId <= 0x00000000]
[15:54:52.315]      deviceID =   Read32(0x41C40004);
[15:54:52.325]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:54:52.325]        // -> [deviceID <= 0x2BB8802F]
[15:54:52.325]      version = deviceID >> 28;
[15:54:52.325]        // -> [version <= 0x00000002]
[15:54:52.325]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:54:52.325]        // -> [partNum <= 0x0000BB88]
[15:54:52.325]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:54:52.325]        // -> [manuf <= 0x00000017]
[15:54:52.325]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:54:52.325]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:54:52.325]      isProduction = (version > 0);
[15:54:52.325]        // -> [isProduction <= 0x00000001]
[15:54:52.325]    </block>
[15:54:52.325]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:54:52.325]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:54:52.325]        // =>  FALSE
[15:54:52.325]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:54:52.325]    </control>
[15:54:52.325]    <control if="continueId == 4" while="" timeout="0" info="">
[15:54:52.325]      // if-block "continueId == 4"
[15:54:52.325]        // =>  FALSE
[15:54:52.325]      // skip if-block "continueId == 4"
[15:54:52.325]    </control>
[15:54:52.325]    <control if="!isProduction" while="" timeout="0" info="">
[15:54:52.325]      // if-block "!isProduction"
[15:54:52.325]        // =>  FALSE
[15:54:52.325]      // skip if-block "!isProduction"
[15:54:52.325]    </control>
[15:54:52.325]  </sequence>
[15:54:52.325]  
[15:56:24.729]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:56:24.729]  
[15:56:24.745]  <debugvars>
[15:56:24.745]    // Pre-defined
[15:56:24.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:56:24.745]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:56:24.745]    __dp=0x00000000
[15:56:24.745]    __ap=0x00000000
[15:56:24.745]    __traceout=0x00000000      (Trace Disabled)
[15:56:24.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:56:24.745]    __FlashAddr=0x00000000
[15:56:24.745]    __FlashLen=0x00000000
[15:56:24.745]    __FlashArg=0x00000000
[15:56:24.745]    __FlashOp=0x00000000
[15:56:24.745]    __Result=0x00000000
[15:56:24.745]  </debugvars>
[15:56:24.745]  
[15:56:24.745]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:56:24.745]    <block atomic="false" info="">
[15:56:24.745]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:56:24.745]        // -> [isSWJ <= 0x00000001]
[15:56:24.745]      __var hasDormant = __protocol & 0x00020000;
[15:56:24.745]        // -> [hasDormant <= 0x00000000]
[15:56:24.745]      __var protType   = __protocol & 0x0000FFFF;
[15:56:24.745]        // -> [protType <= 0x00000002]
[15:56:24.745]    </block>
[15:56:24.745]    <control if="protType == 1" while="" timeout="0" info="">
[15:56:24.745]      // if-block "protType == 1"
[15:56:24.745]        // =>  FALSE
[15:56:24.745]      // skip if-block "protType == 1"
[15:56:24.745]    </control>
[15:56:24.745]    <control if="protType == 2" while="" timeout="0" info="">
[15:56:24.745]      // if-block "protType == 2"
[15:56:24.745]        // =>  TRUE
[15:56:24.745]      <control if="isSWJ" while="" timeout="0" info="">
[15:56:24.745]        // if-block "isSWJ"
[15:56:24.745]          // =>  TRUE
[15:56:24.745]        <control if="hasDormant" while="" timeout="0" info="">
[15:56:24.745]          // if-block "hasDormant"
[15:56:24.745]            // =>  FALSE
[15:56:24.745]          // skip if-block "hasDormant"
[15:56:24.749]        </control>
[15:56:24.750]        <control if="!hasDormant" while="" timeout="0" info="">
[15:56:24.750]          // if-block "!hasDormant"
[15:56:24.750]            // =>  TRUE
[15:56:24.750]          <block atomic="false" info="">
[15:56:24.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:56:24.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:56:24.752]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:56:24.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:56:24.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:56:24.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:56:24.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:56:24.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:56:24.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:56:24.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:56:24.760]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:56:24.760]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:56:24.760]          </block>
[15:56:24.760]          // end if-block "!hasDormant"
[15:56:24.760]        </control>
[15:56:24.760]        // end if-block "isSWJ"
[15:56:24.760]      </control>
[15:56:24.760]      <control if="!isSWJ" while="" timeout="0" info="">
[15:56:24.760]        // if-block "!isSWJ"
[15:56:24.760]          // =>  FALSE
[15:56:24.760]        // skip if-block "!isSWJ"
[15:56:24.760]      </control>
[15:56:24.760]      <block atomic="false" info="">
[15:56:24.760]        ReadDP(0x0);
[15:56:24.760]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:56:24.770]      </block>
[15:56:24.770]      // end if-block "protType == 2"
[15:56:24.770]    </control>
[15:56:24.770]  </sequence>
[15:56:24.770]  
[15:56:24.780]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[15:56:24.780]  
[15:56:24.780]  <debugvars>
[15:56:24.780]    // Pre-defined
[15:56:24.780]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:56:24.780]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:56:24.780]    __dp=0x00000000
[15:56:24.780]    __ap=0x00000000
[15:56:24.780]    __traceout=0x00000000      (Trace Disabled)
[15:56:24.780]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:56:24.780]    __FlashAddr=0x00000000
[15:56:24.780]    __FlashLen=0x00000000
[15:56:24.780]    __FlashArg=0x00000000
[15:56:24.780]    __FlashOp=0x00000000
[15:56:24.780]    __Result=0x00000000
[15:56:24.780]  </debugvars>
[15:56:24.780]  
[15:56:24.780]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[15:56:24.780]    <block atomic="false" info="">
[15:56:24.780]      __var SW_DP_ABORT       = 0x0;
[15:56:24.780]        // -> [SW_DP_ABORT <= 0x00000000]
[15:56:24.780]      __var DP_CTRL_STAT      = 0x4;
[15:56:24.780]        // -> [DP_CTRL_STAT <= 0x00000004]
[15:56:24.780]      __var DP_SELECT         = 0x8;
[15:56:24.780]        // -> [DP_SELECT <= 0x00000008]
[15:56:24.780]      __var powered_down      = 0;
[15:56:24.780]        // -> [powered_down <= 0x00000000]
[15:56:24.780]      WriteDP(DP_SELECT, 0x00000000);
[15:56:24.780]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[15:56:24.780]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[15:56:24.790]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[15:56:24.790]        // -> [powered_down <= 0x00000001]
[15:56:24.790]    </block>
[15:56:24.790]    <control if="powered_down" while="" timeout="0" info="">
[15:56:24.790]      // if-block "powered_down"
[15:56:24.790]        // =>  TRUE
[15:56:24.790]      <block atomic="false" info="">
[15:56:24.790]        Message(0, "Debug/System power-up request sent");
[15:56:24.790]        WriteDP(DP_CTRL_STAT, 0x50000000);
[15:56:24.790]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[15:56:24.790]      </block>
[15:56:24.790]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[15:56:24.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[15:56:24.790]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[15:56:24.790]        // while-condition  =>  FALSE
[15:56:24.790]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[15:56:24.790]      </control>
[15:56:24.800]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[15:56:24.800]        // if-block "(__protocol & 0xFFFF) == 1"
[15:56:24.800]          // =>  FALSE
[15:56:24.800]        // skip if-block "(__protocol & 0xFFFF) == 1"
[15:56:24.800]      </control>
[15:56:24.800]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[15:56:24.800]        // if-block "(__protocol & 0xFFFF) == 2"
[15:56:24.800]          // =>  TRUE
[15:56:24.800]        <block atomic="false" info="">
[15:56:24.800]          Message(0, "executing SWD power up");
[15:56:24.801]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[15:56:24.801]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[15:56:24.801]          WriteDP(SW_DP_ABORT, 0x0000001E);
[15:56:24.801]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[15:56:24.801]        </block>
[15:56:24.801]        // end if-block "(__protocol & 0xFFFF) == 2"
[15:56:24.801]      </control>
[15:56:24.801]      // end if-block "powered_down"
[15:56:24.801]    </control>
[15:56:24.801]    <block atomic="false" info="">
[15:56:24.801]      __var DEBUG_PORT_VAL    = 0;
[15:56:24.801]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[15:56:24.801]      __var ACCESS_POINT_VAL  = 0;
[15:56:24.810]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[15:56:24.810]      __ap = 1; 
[15:56:24.810]        // -> [__ap <= 0x00000001]
[15:56:24.810]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[15:56:24.811]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[15:56:24.811]      __ap = 4;
[15:56:24.811]        // -> [__ap <= 0x00000004]
[15:56:24.811]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:56:24.820]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[15:56:24.820]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[15:56:24.820]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:56:24.820]    </block>
[15:56:24.820]    <block atomic="false" info="">
[15:56:24.820]      __var nReset = 0x80;
[15:56:24.820]        // -> [nReset <= 0x00000080]
[15:56:24.820]      __var canReadPins = 0;
[15:56:24.820]        // -> [canReadPins <= 0x00000000]
[15:56:24.820]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[15:56:24.830]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[15:56:24.830]        // -> [canReadPins <= 0x00000001]
[15:56:24.830]    </block>
[15:56:24.830]    <control if="" while="1" timeout="200" info="">
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.830]      // while "1"  (timeout="200")
[15:56:24.830]      // while-condition  =>  TRUE
[15:56:24.840]      // while "1"  (timeout="200")
[15:56:24.840]      // while  =>  TIMEOUT
[15:56:24.840]      // end while "1"
[15:56:24.840]    </control>
[15:56:24.840]    <control if="canReadPins" while="" timeout="0" info="">
[15:56:24.840]      // if-block "canReadPins"
[15:56:24.840]        // =>  TRUE
[15:56:24.840]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[15:56:24.840]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[15:56:24.840]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[15:56:24.840]        // while-condition  =>  FALSE
[15:56:24.840]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[15:56:24.840]      </control>
[15:56:24.840]      // end if-block "canReadPins"
[15:56:24.840]    </control>
[15:56:24.840]    <control if="!canReadPins" while="" timeout="0" info="">
[15:56:24.840]      // if-block "!canReadPins"
[15:56:24.840]        // =>  FALSE
[15:56:24.840]      // skip if-block "!canReadPins"
[15:56:24.840]    </control>
[15:56:24.840]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[15:56:24.840]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:56:24.840]        // =>  TRUE
[15:56:24.840]      <block atomic="false" info="">
[15:56:24.840]        WriteAP(0x00, 0x190008);
[15:56:24.840]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[15:56:24.840]        WriteAP(0xF0, 0x01);
[15:56:24.850]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[15:56:24.850]      </block>
[15:56:24.850]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[15:56:24.850]    </control>
[15:56:24.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[15:56:24.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:56:24.850]        // =>  FALSE
[15:56:24.850]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[15:56:24.850]    </control>
[15:56:24.850]    <block atomic="false" info="">
[15:56:24.850]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[15:56:24.850]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[15:56:24.850]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[15:56:24.850]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[15:56:24.850]      __ap = 0; //lets make sure we reset the access point selection
[15:56:24.850]        // -> [__ap <= 0x00000000]
[15:56:24.850]    </block>
[15:56:24.850]  </sequence>
[15:56:24.850]  
[15:56:24.890]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[15:56:24.890]  
[15:56:24.890]  <debugvars>
[15:56:24.890]    // Pre-defined
[15:56:24.890]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:56:24.890]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[15:56:24.890]    __dp=0x00000000
[15:56:24.890]    __ap=0x00000000
[15:56:24.890]    __traceout=0x00000000      (Trace Disabled)
[15:56:24.890]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:56:24.890]    __FlashAddr=0x00000000
[15:56:24.890]    __FlashLen=0x00000000
[15:56:24.890]    __FlashArg=0x00000000
[15:56:24.890]    __FlashOp=0x00000000
[15:56:24.890]    __Result=0x00000000
[15:56:24.890]  </debugvars>
[15:56:24.890]  
[15:56:24.890]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[15:56:24.890]    <block atomic="false" info="">
[15:56:24.890]      __var deviceID = 0;
[15:56:24.890]        // -> [deviceID <= 0x00000000]
[15:56:24.890]      __var version = 0;
[15:56:24.890]        // -> [version <= 0x00000000]
[15:56:24.890]      __var partNum = 0;
[15:56:24.890]        // -> [partNum <= 0x00000000]
[15:56:24.890]      __var manuf = 0;
[15:56:24.890]        // -> [manuf <= 0x00000000]
[15:56:24.890]      __var isMSPM0G1X0X_G3X0X = 0;
[15:56:24.890]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[15:56:24.890]      __var isProduction = 0;
[15:56:24.890]        // -> [isProduction <= 0x00000000]
[15:56:24.890]      __var continueId = 0;
[15:56:24.890]        // -> [continueId <= 0x00000000]
[15:56:24.890]      deviceID =   Read32(0x41C40004);
[15:56:24.900]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[15:56:24.900]        // -> [deviceID <= 0x2BB8802F]
[15:56:24.900]      version = deviceID >> 28;
[15:56:24.900]        // -> [version <= 0x00000002]
[15:56:24.900]      partNum = (deviceID & 0x0FFFF000) >> 12;
[15:56:24.900]        // -> [partNum <= 0x0000BB88]
[15:56:24.900]      manuf = (deviceID & 0x00000FFE) >> 1;
[15:56:24.900]        // -> [manuf <= 0x00000017]
[15:56:24.900]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[15:56:24.900]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[15:56:24.900]      isProduction = (version > 0);
[15:56:24.900]        // -> [isProduction <= 0x00000001]
[15:56:24.900]    </block>
[15:56:24.900]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[15:56:24.900]      // if-block "!isMSPM0G1X0X_G3X0X"
[15:56:24.900]        // =>  FALSE
[15:56:24.900]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[15:56:24.900]    </control>
[15:56:24.900]    <control if="continueId == 4" while="" timeout="0" info="">
[15:56:24.900]      // if-block "continueId == 4"
[15:56:24.900]        // =>  FALSE
[15:56:24.900]      // skip if-block "continueId == 4"
[15:56:24.900]    </control>
[15:56:24.900]    <control if="!isProduction" while="" timeout="0" info="">
[15:56:24.900]      // if-block "!isProduction"
[15:56:24.900]        // =>  FALSE
[15:56:24.900]      // skip if-block "!isProduction"
[15:56:24.900]    </control>
[15:56:24.900]  </sequence>
[15:56:24.900]  
[20:49:29.157]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:49:29.157]  
[20:49:29.166]  <debugvars>
[20:49:29.166]    // Pre-defined
[20:49:29.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:29.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:29.166]    __dp=0x00000000
[20:49:29.166]    __ap=0x00000000
[20:49:29.166]    __traceout=0x00000000      (Trace Disabled)
[20:49:29.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:29.166]    __FlashAddr=0x00000000
[20:49:29.167]    __FlashLen=0x00000000
[20:49:29.167]    __FlashArg=0x00000000
[20:49:29.167]    __FlashOp=0x00000000
[20:49:29.167]    __Result=0x00000000
[20:49:29.167]  </debugvars>
[20:49:29.167]  
[20:49:29.167]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:49:29.167]    <block atomic="false" info="">
[20:49:29.167]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:49:29.167]        // -> [isSWJ <= 0x00000001]
[20:49:29.167]      __var hasDormant = __protocol & 0x00020000;
[20:49:29.167]        // -> [hasDormant <= 0x00000000]
[20:49:29.167]      __var protType   = __protocol & 0x0000FFFF;
[20:49:29.167]        // -> [protType <= 0x00000002]
[20:49:29.167]    </block>
[20:49:29.167]    <control if="protType == 1" while="" timeout="0" info="">
[20:49:29.167]      // if-block "protType == 1"
[20:49:29.167]        // =>  FALSE
[20:49:29.167]      // skip if-block "protType == 1"
[20:49:29.167]    </control>
[20:49:29.167]    <control if="protType == 2" while="" timeout="0" info="">
[20:49:29.167]      // if-block "protType == 2"
[20:49:29.167]        // =>  TRUE
[20:49:29.167]      <control if="isSWJ" while="" timeout="0" info="">
[20:49:29.167]        // if-block "isSWJ"
[20:49:29.167]          // =>  TRUE
[20:49:29.167]        <control if="hasDormant" while="" timeout="0" info="">
[20:49:29.167]          // if-block "hasDormant"
[20:49:29.167]            // =>  FALSE
[20:49:29.167]          // skip if-block "hasDormant"
[20:49:29.167]        </control>
[20:49:29.167]        <control if="!hasDormant" while="" timeout="0" info="">
[20:49:29.167]          // if-block "!hasDormant"
[20:49:29.167]            // =>  TRUE
[20:49:29.167]          <block atomic="false" info="">
[20:49:29.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:49:29.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:29.167]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:49:29.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:49:29.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:49:29.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:29.182]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:49:29.184]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:49:29.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:49:29.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:29.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:49:29.190]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:49:29.190]          </block>
[20:49:29.191]          // end if-block "!hasDormant"
[20:49:29.191]        </control>
[20:49:29.191]        // end if-block "isSWJ"
[20:49:29.191]      </control>
[20:49:29.191]      <control if="!isSWJ" while="" timeout="0" info="">
[20:49:29.191]        // if-block "!isSWJ"
[20:49:29.191]          // =>  FALSE
[20:49:29.191]        // skip if-block "!isSWJ"
[20:49:29.191]      </control>
[20:49:29.191]      <block atomic="false" info="">
[20:49:29.192]        ReadDP(0x0);
[20:49:29.193]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:49:29.193]      </block>
[20:49:29.193]      // end if-block "protType == 2"
[20:49:29.193]    </control>
[20:49:29.193]  </sequence>
[20:49:29.194]  
[20:49:29.196]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:49:29.196]  
[20:49:29.196]  <debugvars>
[20:49:29.197]    // Pre-defined
[20:49:29.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:29.197]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:29.197]    __dp=0x00000000
[20:49:29.197]    __ap=0x00000000
[20:49:29.197]    __traceout=0x00000000      (Trace Disabled)
[20:49:29.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:29.198]    __FlashAddr=0x00000000
[20:49:29.198]    __FlashLen=0x00000000
[20:49:29.198]    __FlashArg=0x00000000
[20:49:29.198]    __FlashOp=0x00000000
[20:49:29.198]    __Result=0x00000000
[20:49:29.198]  </debugvars>
[20:49:29.198]  
[20:49:29.198]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:49:29.198]    <block atomic="false" info="">
[20:49:29.199]      __var SW_DP_ABORT       = 0x0;
[20:49:29.199]        // -> [SW_DP_ABORT <= 0x00000000]
[20:49:29.199]      __var DP_CTRL_STAT      = 0x4;
[20:49:29.199]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:49:29.199]      __var DP_SELECT         = 0x8;
[20:49:29.199]        // -> [DP_SELECT <= 0x00000008]
[20:49:29.199]      __var powered_down      = 0;
[20:49:29.199]        // -> [powered_down <= 0x00000000]
[20:49:29.199]      WriteDP(DP_SELECT, 0x00000000);
[20:49:29.201]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:49:29.201]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:49:29.202]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:49:29.202]        // -> [powered_down <= 0x00000001]
[20:49:29.202]    </block>
[20:49:29.202]    <control if="powered_down" while="" timeout="0" info="">
[20:49:29.202]      // if-block "powered_down"
[20:49:29.202]        // =>  TRUE
[20:49:29.202]      <block atomic="false" info="">
[20:49:29.202]        Message(0, "Debug/System power-up request sent");
[20:49:29.202]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:49:29.206]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:49:29.206]      </block>
[20:49:29.206]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:49:29.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:49:29.209]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:49:29.209]        // while-condition  =>  FALSE
[20:49:29.209]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:49:29.209]      </control>
[20:49:29.209]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:49:29.209]        // if-block "(__protocol & 0xFFFF) == 1"
[20:49:29.209]          // =>  FALSE
[20:49:29.209]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:49:29.209]      </control>
[20:49:29.209]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:49:29.209]        // if-block "(__protocol & 0xFFFF) == 2"
[20:49:29.209]          // =>  TRUE
[20:49:29.209]        <block atomic="false" info="">
[20:49:29.209]          Message(0, "executing SWD power up");
[20:49:29.209]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:49:29.209]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:49:29.209]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:49:29.217]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:49:29.217]        </block>
[20:49:29.217]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:49:29.217]      </control>
[20:49:29.217]      // end if-block "powered_down"
[20:49:29.217]    </control>
[20:49:29.217]    <block atomic="false" info="">
[20:49:29.217]      __var DEBUG_PORT_VAL    = 0;
[20:49:29.217]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:49:29.217]      __var ACCESS_POINT_VAL  = 0;
[20:49:29.217]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:49:29.217]      __ap = 1; 
[20:49:29.217]        // -> [__ap <= 0x00000001]
[20:49:29.217]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:49:29.222]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:49:29.222]      __ap = 4;
[20:49:29.222]        // -> [__ap <= 0x00000004]
[20:49:29.222]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:29.227]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:49:29.227]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:49:29.227]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:29.227]    </block>
[20:49:29.227]    <block atomic="false" info="">
[20:49:29.227]      __var nReset = 0x80;
[20:49:29.227]        // -> [nReset <= 0x00000080]
[20:49:29.227]      __var canReadPins = 0;
[20:49:29.227]        // -> [canReadPins <= 0x00000000]
[20:49:29.227]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:49:29.237]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:49:29.237]        // -> [canReadPins <= 0x00000001]
[20:49:29.237]    </block>
[20:49:29.237]    <control if="" while="1" timeout="200" info="">
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.237]      // while "1"  (timeout="200")
[20:49:29.237]      // while-condition  =>  TRUE
[20:49:29.243]      // while "1"  (timeout="200")
[20:49:29.243]      // while  =>  TIMEOUT
[20:49:29.243]      // end while "1"
[20:49:29.243]    </control>
[20:49:29.243]    <control if="canReadPins" while="" timeout="0" info="">
[20:49:29.243]      // if-block "canReadPins"
[20:49:29.243]        // =>  TRUE
[20:49:29.243]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:49:29.243]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:49:29.243]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:49:29.243]        // while-condition  =>  FALSE
[20:49:29.243]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:49:29.243]      </control>
[20:49:29.243]      // end if-block "canReadPins"
[20:49:29.243]    </control>
[20:49:29.243]    <control if="!canReadPins" while="" timeout="0" info="">
[20:49:29.243]      // if-block "!canReadPins"
[20:49:29.243]        // =>  FALSE
[20:49:29.243]      // skip if-block "!canReadPins"
[20:49:29.243]    </control>
[20:49:29.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:49:29.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:29.243]        // =>  TRUE
[20:49:29.243]      <block atomic="false" info="">
[20:49:29.243]        WriteAP(0x00, 0x190008);
[20:49:29.248]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:29.248]        WriteAP(0xF0, 0x01);
[20:49:29.248]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:29.248]      </block>
[20:49:29.248]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:29.248]    </control>
[20:49:29.248]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:49:29.248]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:29.248]        // =>  FALSE
[20:49:29.248]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:29.248]    </control>
[20:49:29.248]    <block atomic="false" info="">
[20:49:29.248]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:29.248]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:49:29.248]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:49:29.248]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:29.258]      __ap = 0; //lets make sure we reset the access point selection
[20:49:29.258]        // -> [__ap <= 0x00000000]
[20:49:29.258]    </block>
[20:49:29.258]  </sequence>
[20:49:29.258]  
[20:49:29.300]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:49:29.300]  
[20:49:29.300]  <debugvars>
[20:49:29.300]    // Pre-defined
[20:49:29.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:29.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:29.300]    __dp=0x00000000
[20:49:29.300]    __ap=0x00000000
[20:49:29.300]    __traceout=0x00000000      (Trace Disabled)
[20:49:29.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:29.300]    __FlashAddr=0x00000000
[20:49:29.300]    __FlashLen=0x00000000
[20:49:29.300]    __FlashArg=0x00000000
[20:49:29.300]    __FlashOp=0x00000000
[20:49:29.300]    __Result=0x00000000
[20:49:29.300]  </debugvars>
[20:49:29.300]  
[20:49:29.300]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:49:29.300]    <block atomic="false" info="">
[20:49:29.300]      __var deviceID = 0;
[20:49:29.300]        // -> [deviceID <= 0x00000000]
[20:49:29.300]      __var version = 0;
[20:49:29.300]        // -> [version <= 0x00000000]
[20:49:29.300]      __var partNum = 0;
[20:49:29.300]        // -> [partNum <= 0x00000000]
[20:49:29.300]      __var manuf = 0;
[20:49:29.300]        // -> [manuf <= 0x00000000]
[20:49:29.300]      __var isMSPM0G1X0X_G3X0X = 0;
[20:49:29.300]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:49:29.300]      __var isProduction = 0;
[20:49:29.300]        // -> [isProduction <= 0x00000000]
[20:49:29.300]      __var continueId = 0;
[20:49:29.300]        // -> [continueId <= 0x00000000]
[20:49:29.300]      deviceID =   Read32(0x41C40004);
[20:49:29.311]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:49:29.311]        // -> [deviceID <= 0x2BB8802F]
[20:49:29.311]      version = deviceID >> 28;
[20:49:29.311]        // -> [version <= 0x00000002]
[20:49:29.311]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:49:29.311]        // -> [partNum <= 0x0000BB88]
[20:49:29.311]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:49:29.311]        // -> [manuf <= 0x00000017]
[20:49:29.311]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:49:29.311]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:49:29.311]      isProduction = (version > 0);
[20:49:29.311]        // -> [isProduction <= 0x00000001]
[20:49:29.311]    </block>
[20:49:29.311]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:49:29.311]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:49:29.311]        // =>  FALSE
[20:49:29.311]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:49:29.311]    </control>
[20:49:29.311]    <control if="continueId == 4" while="" timeout="0" info="">
[20:49:29.311]      // if-block "continueId == 4"
[20:49:29.311]        // =>  FALSE
[20:49:29.311]      // skip if-block "continueId == 4"
[20:49:29.311]    </control>
[20:49:29.311]    <control if="!isProduction" while="" timeout="0" info="">
[20:49:29.311]      // if-block "!isProduction"
[20:49:29.311]        // =>  FALSE
[20:49:29.311]      // skip if-block "!isProduction"
[20:49:29.311]    </control>
[20:49:29.311]  </sequence>
[20:49:29.311]  
[20:49:55.644]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:49:55.644]  
[20:49:55.644]  <debugvars>
[20:49:55.644]    // Pre-defined
[20:49:55.644]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:55.644]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:55.644]    __dp=0x00000000
[20:49:55.644]    __ap=0x00000000
[20:49:55.644]    __traceout=0x00000000      (Trace Disabled)
[20:49:55.644]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:55.644]    __FlashAddr=0x00000000
[20:49:55.644]    __FlashLen=0x00000000
[20:49:55.644]    __FlashArg=0x00000000
[20:49:55.644]    __FlashOp=0x00000000
[20:49:55.644]    __Result=0x00000000
[20:49:55.644]  </debugvars>
[20:49:55.644]  
[20:49:55.644]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:49:55.644]    <block atomic="false" info="">
[20:49:55.644]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:49:55.644]        // -> [isSWJ <= 0x00000001]
[20:49:55.644]      __var hasDormant = __protocol & 0x00020000;
[20:49:55.644]        // -> [hasDormant <= 0x00000000]
[20:49:55.644]      __var protType   = __protocol & 0x0000FFFF;
[20:49:55.644]        // -> [protType <= 0x00000002]
[20:49:55.644]    </block>
[20:49:55.644]    <control if="protType == 1" while="" timeout="0" info="">
[20:49:55.644]      // if-block "protType == 1"
[20:49:55.644]        // =>  FALSE
[20:49:55.644]      // skip if-block "protType == 1"
[20:49:55.644]    </control>
[20:49:55.644]    <control if="protType == 2" while="" timeout="0" info="">
[20:49:55.644]      // if-block "protType == 2"
[20:49:55.644]        // =>  TRUE
[20:49:55.644]      <control if="isSWJ" while="" timeout="0" info="">
[20:49:55.644]        // if-block "isSWJ"
[20:49:55.644]          // =>  TRUE
[20:49:55.644]        <control if="hasDormant" while="" timeout="0" info="">
[20:49:55.644]          // if-block "hasDormant"
[20:49:55.644]            // =>  FALSE
[20:49:55.644]          // skip if-block "hasDormant"
[20:49:55.644]        </control>
[20:49:55.644]        <control if="!hasDormant" while="" timeout="0" info="">
[20:49:55.644]          // if-block "!hasDormant"
[20:49:55.644]            // =>  TRUE
[20:49:55.644]          <block atomic="false" info="">
[20:49:55.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:49:55.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:55.644]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:49:55.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:49:55.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:49:55.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:55.654]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:49:55.661]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:49:55.664]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:49:55.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:55.664]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:49:55.664]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:49:55.664]          </block>
[20:49:55.664]          // end if-block "!hasDormant"
[20:49:55.664]        </control>
[20:49:55.664]        // end if-block "isSWJ"
[20:49:55.664]      </control>
[20:49:55.664]      <control if="!isSWJ" while="" timeout="0" info="">
[20:49:55.664]        // if-block "!isSWJ"
[20:49:55.664]          // =>  FALSE
[20:49:55.664]        // skip if-block "!isSWJ"
[20:49:55.664]      </control>
[20:49:55.664]      <block atomic="false" info="">
[20:49:55.664]        ReadDP(0x0);
[20:49:55.671]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:49:55.671]      </block>
[20:49:55.671]      // end if-block "protType == 2"
[20:49:55.671]    </control>
[20:49:55.671]  </sequence>
[20:49:55.671]  
[20:49:55.674]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:49:55.674]  
[20:49:55.674]  <debugvars>
[20:49:55.674]    // Pre-defined
[20:49:55.674]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:55.674]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:55.674]    __dp=0x00000000
[20:49:55.674]    __ap=0x00000000
[20:49:55.674]    __traceout=0x00000000      (Trace Disabled)
[20:49:55.674]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:55.674]    __FlashAddr=0x00000000
[20:49:55.674]    __FlashLen=0x00000000
[20:49:55.674]    __FlashArg=0x00000000
[20:49:55.674]    __FlashOp=0x00000000
[20:49:55.674]    __Result=0x00000000
[20:49:55.674]  </debugvars>
[20:49:55.674]  
[20:49:55.674]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:49:55.674]    <block atomic="false" info="">
[20:49:55.674]      __var SW_DP_ABORT       = 0x0;
[20:49:55.674]        // -> [SW_DP_ABORT <= 0x00000000]
[20:49:55.674]      __var DP_CTRL_STAT      = 0x4;
[20:49:55.674]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:49:55.674]      __var DP_SELECT         = 0x8;
[20:49:55.674]        // -> [DP_SELECT <= 0x00000008]
[20:49:55.674]      __var powered_down      = 0;
[20:49:55.674]        // -> [powered_down <= 0x00000000]
[20:49:55.674]      WriteDP(DP_SELECT, 0x00000000);
[20:49:55.674]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:49:55.674]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:49:55.674]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:49:55.681]        // -> [powered_down <= 0x00000001]
[20:49:55.681]    </block>
[20:49:55.681]    <control if="powered_down" while="" timeout="0" info="">
[20:49:55.681]      // if-block "powered_down"
[20:49:55.681]        // =>  TRUE
[20:49:55.681]      <block atomic="false" info="">
[20:49:55.681]        Message(0, "Debug/System power-up request sent");
[20:49:55.681]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:49:55.681]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:49:55.681]      </block>
[20:49:55.684]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:49:55.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:49:55.684]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:49:55.684]        // while-condition  =>  FALSE
[20:49:55.684]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:49:55.684]      </control>
[20:49:55.684]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:49:55.684]        // if-block "(__protocol & 0xFFFF) == 1"
[20:49:55.684]          // =>  FALSE
[20:49:55.684]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:49:55.684]      </control>
[20:49:55.684]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:49:55.684]        // if-block "(__protocol & 0xFFFF) == 2"
[20:49:55.684]          // =>  TRUE
[20:49:55.684]        <block atomic="false" info="">
[20:49:55.684]          Message(0, "executing SWD power up");
[20:49:55.684]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:49:55.691]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:49:55.691]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:49:55.691]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:49:55.691]        </block>
[20:49:55.691]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:49:55.691]      </control>
[20:49:55.691]      // end if-block "powered_down"
[20:49:55.691]    </control>
[20:49:55.694]    <block atomic="false" info="">
[20:49:55.694]      __var DEBUG_PORT_VAL    = 0;
[20:49:55.694]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:49:55.694]      __var ACCESS_POINT_VAL  = 0;
[20:49:55.694]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:49:55.694]      __ap = 1; 
[20:49:55.694]        // -> [__ap <= 0x00000001]
[20:49:55.694]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:49:55.694]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:49:55.694]      __ap = 4;
[20:49:55.694]        // -> [__ap <= 0x00000004]
[20:49:55.694]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:55.701]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:49:55.701]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:49:55.701]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:55.704]    </block>
[20:49:55.704]    <block atomic="false" info="">
[20:49:55.704]      __var nReset = 0x80;
[20:49:55.704]        // -> [nReset <= 0x00000080]
[20:49:55.704]      __var canReadPins = 0;
[20:49:55.704]        // -> [canReadPins <= 0x00000000]
[20:49:55.704]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:49:55.704]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:49:55.704]        // -> [canReadPins <= 0x00000001]
[20:49:55.704]    </block>
[20:49:55.704]    <control if="" while="1" timeout="200" info="">
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.704]      // while-condition  =>  TRUE
[20:49:55.704]      // while "1"  (timeout="200")
[20:49:55.711]      // while-condition  =>  TRUE
[20:49:55.711]      // while "1"  (timeout="200")
[20:49:55.711]      // while  =>  TIMEOUT
[20:49:55.711]      // end while "1"
[20:49:55.711]    </control>
[20:49:55.711]    <control if="canReadPins" while="" timeout="0" info="">
[20:49:55.711]      // if-block "canReadPins"
[20:49:55.711]        // =>  TRUE
[20:49:55.711]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:49:55.711]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:49:55.713]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:49:55.713]        // while-condition  =>  FALSE
[20:49:55.713]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:49:55.713]      </control>
[20:49:55.713]      // end if-block "canReadPins"
[20:49:55.715]    </control>
[20:49:55.715]    <control if="!canReadPins" while="" timeout="0" info="">
[20:49:55.715]      // if-block "!canReadPins"
[20:49:55.715]        // =>  FALSE
[20:49:55.715]      // skip if-block "!canReadPins"
[20:49:55.715]    </control>
[20:49:55.715]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:49:55.715]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:55.715]        // =>  TRUE
[20:49:55.715]      <block atomic="false" info="">
[20:49:55.715]        WriteAP(0x00, 0x190008);
[20:49:55.715]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:55.715]        WriteAP(0xF0, 0x01);
[20:49:55.715]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:55.715]      </block>
[20:49:55.715]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:55.715]    </control>
[20:49:55.722]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:49:55.722]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:55.722]        // =>  FALSE
[20:49:55.722]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:55.722]    </control>
[20:49:55.722]    <block atomic="false" info="">
[20:49:55.722]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:55.725]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:49:55.725]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:49:55.725]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:55.725]      __ap = 0; //lets make sure we reset the access point selection
[20:49:55.725]        // -> [__ap <= 0x00000000]
[20:49:55.725]    </block>
[20:49:55.725]  </sequence>
[20:49:55.725]  
[20:49:55.761]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:49:55.761]  
[20:49:55.761]  <debugvars>
[20:49:55.761]    // Pre-defined
[20:49:55.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:55.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:55.761]    __dp=0x00000000
[20:49:55.761]    __ap=0x00000000
[20:49:55.761]    __traceout=0x00000000      (Trace Disabled)
[20:49:55.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:55.761]    __FlashAddr=0x00000000
[20:49:55.761]    __FlashLen=0x00000000
[20:49:55.761]    __FlashArg=0x00000000
[20:49:55.761]    __FlashOp=0x00000000
[20:49:55.761]    __Result=0x00000000
[20:49:55.761]  </debugvars>
[20:49:55.761]  
[20:49:55.761]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:49:55.761]    <block atomic="false" info="">
[20:49:55.761]      __var deviceID = 0;
[20:49:55.761]        // -> [deviceID <= 0x00000000]
[20:49:55.761]      __var version = 0;
[20:49:55.765]        // -> [version <= 0x00000000]
[20:49:55.765]      __var partNum = 0;
[20:49:55.765]        // -> [partNum <= 0x00000000]
[20:49:55.765]      __var manuf = 0;
[20:49:55.765]        // -> [manuf <= 0x00000000]
[20:49:55.765]      __var isMSPM0G1X0X_G3X0X = 0;
[20:49:55.765]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:49:55.765]      __var isProduction = 0;
[20:49:55.765]        // -> [isProduction <= 0x00000000]
[20:49:55.765]      __var continueId = 0;
[20:49:55.765]        // -> [continueId <= 0x00000000]
[20:49:55.765]      deviceID =   Read32(0x41C40004);
[20:49:55.770]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:49:55.770]        // -> [deviceID <= 0x2BB8802F]
[20:49:55.770]      version = deviceID >> 28;
[20:49:55.770]        // -> [version <= 0x00000002]
[20:49:55.770]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:49:55.771]        // -> [partNum <= 0x0000BB88]
[20:49:55.771]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:49:55.771]        // -> [manuf <= 0x00000017]
[20:49:55.771]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:49:55.771]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:49:55.771]      isProduction = (version > 0);
[20:49:55.771]        // -> [isProduction <= 0x00000001]
[20:49:55.771]    </block>
[20:49:55.771]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:49:55.771]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:49:55.771]        // =>  FALSE
[20:49:55.771]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:49:55.771]    </control>
[20:49:55.771]    <control if="continueId == 4" while="" timeout="0" info="">
[20:49:55.773]      // if-block "continueId == 4"
[20:49:55.773]        // =>  FALSE
[20:49:55.773]      // skip if-block "continueId == 4"
[20:49:55.773]    </control>
[20:49:55.773]    <control if="!isProduction" while="" timeout="0" info="">
[20:49:55.773]      // if-block "!isProduction"
[20:49:55.773]        // =>  FALSE
[20:49:55.773]      // skip if-block "!isProduction"
[20:49:55.773]    </control>
[20:49:55.773]  </sequence>
[20:49:55.773]  
[20:51:16.546]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:51:16.546]  
[20:51:16.546]  <debugvars>
[20:51:16.546]    // Pre-defined
[20:51:16.546]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:16.546]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:16.546]    __dp=0x00000000
[20:51:16.546]    __ap=0x00000000
[20:51:16.546]    __traceout=0x00000000      (Trace Disabled)
[20:51:16.546]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:16.546]    __FlashAddr=0x00000000
[20:51:16.546]    __FlashLen=0x00000000
[20:51:16.546]    __FlashArg=0x00000000
[20:51:16.550]    __FlashOp=0x00000000
[20:51:16.550]    __Result=0x00000000
[20:51:16.550]  </debugvars>
[20:51:16.550]  
[20:51:16.550]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:51:16.550]    <block atomic="false" info="">
[20:51:16.550]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:51:16.550]        // -> [isSWJ <= 0x00000001]
[20:51:16.550]      __var hasDormant = __protocol & 0x00020000;
[20:51:16.550]        // -> [hasDormant <= 0x00000000]
[20:51:16.550]      __var protType   = __protocol & 0x0000FFFF;
[20:51:16.550]        // -> [protType <= 0x00000002]
[20:51:16.550]    </block>
[20:51:16.550]    <control if="protType == 1" while="" timeout="0" info="">
[20:51:16.550]      // if-block "protType == 1"
[20:51:16.550]        // =>  FALSE
[20:51:16.550]      // skip if-block "protType == 1"
[20:51:16.550]    </control>
[20:51:16.550]    <control if="protType == 2" while="" timeout="0" info="">
[20:51:16.550]      // if-block "protType == 2"
[20:51:16.550]        // =>  TRUE
[20:51:16.550]      <control if="isSWJ" while="" timeout="0" info="">
[20:51:16.550]        // if-block "isSWJ"
[20:51:16.553]          // =>  TRUE
[20:51:16.553]        <control if="hasDormant" while="" timeout="0" info="">
[20:51:16.553]          // if-block "hasDormant"
[20:51:16.553]            // =>  FALSE
[20:51:16.553]          // skip if-block "hasDormant"
[20:51:16.553]        </control>
[20:51:16.553]        <control if="!hasDormant" while="" timeout="0" info="">
[20:51:16.553]          // if-block "!hasDormant"
[20:51:16.553]            // =>  TRUE
[20:51:16.553]          <block atomic="false" info="">
[20:51:16.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:51:16.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:16.556]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:51:16.556]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:51:16.556]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:51:16.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:16.556]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:51:16.556]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:51:16.556]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:51:16.556]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:16.556]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:51:16.563]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:51:16.563]          </block>
[20:51:16.563]          // end if-block "!hasDormant"
[20:51:16.563]        </control>
[20:51:16.563]        // end if-block "isSWJ"
[20:51:16.563]      </control>
[20:51:16.563]      <control if="!isSWJ" while="" timeout="0" info="">
[20:51:16.563]        // if-block "!isSWJ"
[20:51:16.563]          // =>  FALSE
[20:51:16.563]        // skip if-block "!isSWJ"
[20:51:16.563]      </control>
[20:51:16.563]      <block atomic="false" info="">
[20:51:16.563]        ReadDP(0x0);
[20:51:16.563]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:51:16.563]      </block>
[20:51:16.563]      // end if-block "protType == 2"
[20:51:16.563]    </control>
[20:51:16.563]  </sequence>
[20:51:16.566]  
[20:51:16.566]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:51:16.566]  
[20:51:16.566]  <debugvars>
[20:51:16.566]    // Pre-defined
[20:51:16.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:16.566]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:16.566]    __dp=0x00000000
[20:51:16.566]    __ap=0x00000000
[20:51:16.566]    __traceout=0x00000000      (Trace Disabled)
[20:51:16.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:16.566]    __FlashAddr=0x00000000
[20:51:16.566]    __FlashLen=0x00000000
[20:51:16.566]    __FlashArg=0x00000000
[20:51:16.566]    __FlashOp=0x00000000
[20:51:16.566]    __Result=0x00000000
[20:51:16.566]  </debugvars>
[20:51:16.566]  
[20:51:16.566]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:51:16.566]    <block atomic="false" info="">
[20:51:16.566]      __var SW_DP_ABORT       = 0x0;
[20:51:16.566]        // -> [SW_DP_ABORT <= 0x00000000]
[20:51:16.571]      __var DP_CTRL_STAT      = 0x4;
[20:51:16.571]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:51:16.571]      __var DP_SELECT         = 0x8;
[20:51:16.571]        // -> [DP_SELECT <= 0x00000008]
[20:51:16.571]      __var powered_down      = 0;
[20:51:16.571]        // -> [powered_down <= 0x00000000]
[20:51:16.571]      WriteDP(DP_SELECT, 0x00000000);
[20:51:16.576]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:51:16.576]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:51:16.578]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:51:16.578]        // -> [powered_down <= 0x00000001]
[20:51:16.578]    </block>
[20:51:16.578]    <control if="powered_down" while="" timeout="0" info="">
[20:51:16.578]      // if-block "powered_down"
[20:51:16.578]        // =>  TRUE
[20:51:16.578]      <block atomic="false" info="">
[20:51:16.578]        Message(0, "Debug/System power-up request sent");
[20:51:16.578]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:51:16.578]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:51:16.578]      </block>
[20:51:16.578]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:51:16.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:51:16.578]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:51:16.578]        // while-condition  =>  FALSE
[20:51:16.578]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:51:16.578]      </control>
[20:51:16.578]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:51:16.584]        // if-block "(__protocol & 0xFFFF) == 1"
[20:51:16.584]          // =>  FALSE
[20:51:16.584]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:51:16.584]      </control>
[20:51:16.584]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:51:16.584]        // if-block "(__protocol & 0xFFFF) == 2"
[20:51:16.584]          // =>  TRUE
[20:51:16.584]        <block atomic="false" info="">
[20:51:16.584]          Message(0, "executing SWD power up");
[20:51:16.587]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:51:16.587]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:51:16.587]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:51:16.587]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:51:16.587]        </block>
[20:51:16.587]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:51:16.587]      </control>
[20:51:16.587]      // end if-block "powered_down"
[20:51:16.587]    </control>
[20:51:16.587]    <block atomic="false" info="">
[20:51:16.592]      __var DEBUG_PORT_VAL    = 0;
[20:51:16.592]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:51:16.592]      __var ACCESS_POINT_VAL  = 0;
[20:51:16.592]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:51:16.592]      __ap = 1; 
[20:51:16.592]        // -> [__ap <= 0x00000001]
[20:51:16.592]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:51:16.596]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:51:16.596]      __ap = 4;
[20:51:16.596]        // -> [__ap <= 0x00000004]
[20:51:16.596]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:16.599]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:51:16.599]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:51:16.599]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:16.599]    </block>
[20:51:16.599]    <block atomic="false" info="">
[20:51:16.599]      __var nReset = 0x80;
[20:51:16.599]        // -> [nReset <= 0x00000080]
[20:51:16.599]      __var canReadPins = 0;
[20:51:16.599]        // -> [canReadPins <= 0x00000000]
[20:51:16.599]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:51:16.604]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:51:16.604]        // -> [canReadPins <= 0x00000001]
[20:51:16.604]    </block>
[20:51:16.604]    <control if="" while="1" timeout="200" info="">
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.604]      // while "1"  (timeout="200")
[20:51:16.604]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.606]      // while "1"  (timeout="200")
[20:51:16.606]      // while-condition  =>  TRUE
[20:51:16.613]      // while "1"  (timeout="200")
[20:51:16.613]      // while-condition  =>  TRUE
[20:51:16.613]      // while "1"  (timeout="200")
[20:51:16.613]      // while-condition  =>  TRUE
[20:51:16.613]      // while "1"  (timeout="200")
[20:51:16.613]      // while-condition  =>  TRUE
[20:51:16.613]      // while "1"  (timeout="200")
[20:51:16.613]      // while-condition  =>  TRUE
[20:51:16.613]      // while "1"  (timeout="200")
[20:51:16.613]      // while-condition  =>  TRUE
[20:51:16.613]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.614]      // while "1"  (timeout="200")
[20:51:16.614]      // while-condition  =>  TRUE
[20:51:16.616]      // while "1"  (timeout="200")
[20:51:16.616]      // while  =>  TIMEOUT
[20:51:16.616]      // end while "1"
[20:51:16.616]    </control>
[20:51:16.616]    <control if="canReadPins" while="" timeout="0" info="">
[20:51:16.616]      // if-block "canReadPins"
[20:51:16.616]        // =>  TRUE
[20:51:16.616]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:51:16.616]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:51:16.616]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:51:16.616]        // while-condition  =>  FALSE
[20:51:16.616]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:51:16.616]      </control>
[20:51:16.616]      // end if-block "canReadPins"
[20:51:16.616]    </control>
[20:51:16.616]    <control if="!canReadPins" while="" timeout="0" info="">
[20:51:16.616]      // if-block "!canReadPins"
[20:51:16.616]        // =>  FALSE
[20:51:16.616]      // skip if-block "!canReadPins"
[20:51:16.616]    </control>
[20:51:16.616]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:51:16.616]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:16.616]        // =>  TRUE
[20:51:16.616]      <block atomic="false" info="">
[20:51:16.620]        WriteAP(0x00, 0x190008);
[20:51:16.620]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:16.620]        WriteAP(0xF0, 0x01);
[20:51:16.620]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:16.620]      </block>
[20:51:16.625]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:16.625]    </control>
[20:51:16.625]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:51:16.625]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:16.625]        // =>  FALSE
[20:51:16.625]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:16.625]    </control>
[20:51:16.625]    <block atomic="false" info="">
[20:51:16.625]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:16.626]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:51:16.626]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:51:16.626]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:16.626]      __ap = 0; //lets make sure we reset the access point selection
[20:51:16.626]        // -> [__ap <= 0x00000000]
[20:51:16.626]    </block>
[20:51:16.626]  </sequence>
[20:51:16.626]  
[20:51:16.656]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:51:16.656]  
[20:51:16.656]  <debugvars>
[20:51:16.656]    // Pre-defined
[20:51:16.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:16.656]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:16.656]    __dp=0x00000000
[20:51:16.656]    __ap=0x00000000
[20:51:16.656]    __traceout=0x00000000      (Trace Disabled)
[20:51:16.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:16.656]    __FlashAddr=0x00000000
[20:51:16.656]    __FlashLen=0x00000000
[20:51:16.656]    __FlashArg=0x00000000
[20:51:16.656]    __FlashOp=0x00000000
[20:51:16.656]    __Result=0x00000000
[20:51:16.656]  </debugvars>
[20:51:16.656]  
[20:51:16.656]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:51:16.656]    <block atomic="false" info="">
[20:51:16.656]      __var deviceID = 0;
[20:51:16.656]        // -> [deviceID <= 0x00000000]
[20:51:16.656]      __var version = 0;
[20:51:16.656]        // -> [version <= 0x00000000]
[20:51:16.656]      __var partNum = 0;
[20:51:16.656]        // -> [partNum <= 0x00000000]
[20:51:16.656]      __var manuf = 0;
[20:51:16.656]        // -> [manuf <= 0x00000000]
[20:51:16.656]      __var isMSPM0G1X0X_G3X0X = 0;
[20:51:16.656]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:51:16.656]      __var isProduction = 0;
[20:51:16.656]        // -> [isProduction <= 0x00000000]
[20:51:16.656]      __var continueId = 0;
[20:51:16.656]        // -> [continueId <= 0x00000000]
[20:51:16.656]      deviceID =   Read32(0x41C40004);
[20:51:16.666]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:51:16.666]        // -> [deviceID <= 0x2BB8802F]
[20:51:16.666]      version = deviceID >> 28;
[20:51:16.666]        // -> [version <= 0x00000002]
[20:51:16.666]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:51:16.666]        // -> [partNum <= 0x0000BB88]
[20:51:16.666]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:51:16.666]        // -> [manuf <= 0x00000017]
[20:51:16.666]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:51:16.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:51:16.666]      isProduction = (version > 0);
[20:51:16.666]        // -> [isProduction <= 0x00000001]
[20:51:16.666]    </block>
[20:51:16.666]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:51:16.666]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:51:16.666]        // =>  FALSE
[20:51:16.666]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:51:16.666]    </control>
[20:51:16.666]    <control if="continueId == 4" while="" timeout="0" info="">
[20:51:16.666]      // if-block "continueId == 4"
[20:51:16.666]        // =>  FALSE
[20:51:16.666]      // skip if-block "continueId == 4"
[20:51:16.666]    </control>
[20:51:16.666]    <control if="!isProduction" while="" timeout="0" info="">
[20:51:16.666]      // if-block "!isProduction"
[20:51:16.666]        // =>  FALSE
[20:51:16.666]      // skip if-block "!isProduction"
[20:51:16.666]    </control>
[20:51:16.666]  </sequence>
[20:51:16.666]  
[20:55:26.826]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:55:26.826]  
[20:55:26.835]  <debugvars>
[20:55:26.835]    // Pre-defined
[20:55:26.835]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:26.835]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:26.835]    __dp=0x00000000
[20:55:26.835]    __ap=0x00000000
[20:55:26.835]    __traceout=0x00000000      (Trace Disabled)
[20:55:26.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:26.836]    __FlashAddr=0x00000000
[20:55:26.836]    __FlashLen=0x00000000
[20:55:26.836]    __FlashArg=0x00000000
[20:55:26.836]    __FlashOp=0x00000000
[20:55:26.836]    __Result=0x00000000
[20:55:26.836]  </debugvars>
[20:55:26.836]  
[20:55:26.836]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:55:26.837]    <block atomic="false" info="">
[20:55:26.837]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:55:26.837]        // -> [isSWJ <= 0x00000001]
[20:55:26.837]      __var hasDormant = __protocol & 0x00020000;
[20:55:26.837]        // -> [hasDormant <= 0x00000000]
[20:55:26.837]      __var protType   = __protocol & 0x0000FFFF;
[20:55:26.838]        // -> [protType <= 0x00000002]
[20:55:26.838]    </block>
[20:55:26.838]    <control if="protType == 1" while="" timeout="0" info="">
[20:55:26.838]      // if-block "protType == 1"
[20:55:26.838]        // =>  FALSE
[20:55:26.838]      // skip if-block "protType == 1"
[20:55:26.838]    </control>
[20:55:26.838]    <control if="protType == 2" while="" timeout="0" info="">
[20:55:26.838]      // if-block "protType == 2"
[20:55:26.839]        // =>  TRUE
[20:55:26.839]      <control if="isSWJ" while="" timeout="0" info="">
[20:55:26.839]        // if-block "isSWJ"
[20:55:26.839]          // =>  TRUE
[20:55:26.839]        <control if="hasDormant" while="" timeout="0" info="">
[20:55:26.839]          // if-block "hasDormant"
[20:55:26.839]            // =>  FALSE
[20:55:26.839]          // skip if-block "hasDormant"
[20:55:26.839]        </control>
[20:55:26.839]        <control if="!hasDormant" while="" timeout="0" info="">
[20:55:26.839]          // if-block "!hasDormant"
[20:55:26.840]            // =>  TRUE
[20:55:26.840]          <block atomic="false" info="">
[20:55:26.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:55:26.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:26.842]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:55:26.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:55:26.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:55:26.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:26.845]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:55:26.846]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:55:26.846]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:55:26.847]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:26.848]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:55:26.849]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:55:26.849]          </block>
[20:55:26.849]          // end if-block "!hasDormant"
[20:55:26.849]        </control>
[20:55:26.849]        // end if-block "isSWJ"
[20:55:26.849]      </control>
[20:55:26.849]      <control if="!isSWJ" while="" timeout="0" info="">
[20:55:26.849]        // if-block "!isSWJ"
[20:55:26.849]          // =>  FALSE
[20:55:26.849]        // skip if-block "!isSWJ"
[20:55:26.849]      </control>
[20:55:26.849]      <block atomic="false" info="">
[20:55:26.849]        ReadDP(0x0);
[20:55:26.854]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:55:26.854]      </block>
[20:55:26.854]      // end if-block "protType == 2"
[20:55:26.854]    </control>
[20:55:26.854]  </sequence>
[20:55:26.854]  
[20:55:26.857]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:55:26.857]  
[20:55:26.857]  <debugvars>
[20:55:26.857]    // Pre-defined
[20:55:26.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:26.857]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:26.857]    __dp=0x00000000
[20:55:26.857]    __ap=0x00000000
[20:55:26.857]    __traceout=0x00000000      (Trace Disabled)
[20:55:26.857]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:26.857]    __FlashAddr=0x00000000
[20:55:26.857]    __FlashLen=0x00000000
[20:55:26.857]    __FlashArg=0x00000000
[20:55:26.857]    __FlashOp=0x00000000
[20:55:26.857]    __Result=0x00000000
[20:55:26.857]  </debugvars>
[20:55:26.857]  
[20:55:26.857]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:55:26.857]    <block atomic="false" info="">
[20:55:26.857]      __var SW_DP_ABORT       = 0x0;
[20:55:26.857]        // -> [SW_DP_ABORT <= 0x00000000]
[20:55:26.857]      __var DP_CTRL_STAT      = 0x4;
[20:55:26.857]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:55:26.857]      __var DP_SELECT         = 0x8;
[20:55:26.857]        // -> [DP_SELECT <= 0x00000008]
[20:55:26.857]      __var powered_down      = 0;
[20:55:26.857]        // -> [powered_down <= 0x00000000]
[20:55:26.857]      WriteDP(DP_SELECT, 0x00000000);
[20:55:26.857]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:55:26.857]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:55:26.867]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:55:26.867]        // -> [powered_down <= 0x00000001]
[20:55:26.867]    </block>
[20:55:26.867]    <control if="powered_down" while="" timeout="0" info="">
[20:55:26.867]      // if-block "powered_down"
[20:55:26.867]        // =>  TRUE
[20:55:26.867]      <block atomic="false" info="">
[20:55:26.867]        Message(0, "Debug/System power-up request sent");
[20:55:26.867]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:55:26.874]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:55:26.874]      </block>
[20:55:26.874]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:55:26.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:55:26.879]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:55:26.879]        // while-condition  =>  FALSE
[20:55:26.879]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:55:26.879]      </control>
[20:55:26.879]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:55:26.879]        // if-block "(__protocol & 0xFFFF) == 1"
[20:55:26.879]          // =>  FALSE
[20:55:26.879]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:55:26.879]      </control>
[20:55:26.879]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:55:26.879]        // if-block "(__protocol & 0xFFFF) == 2"
[20:55:26.879]          // =>  TRUE
[20:55:26.879]        <block atomic="false" info="">
[20:55:26.879]          Message(0, "executing SWD power up");
[20:55:26.879]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:55:26.879]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:55:26.879]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:55:26.888]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:55:26.888]        </block>
[20:55:26.888]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:55:26.888]      </control>
[20:55:26.888]      // end if-block "powered_down"
[20:55:26.888]    </control>
[20:55:26.888]    <block atomic="false" info="">
[20:55:26.888]      __var DEBUG_PORT_VAL    = 0;
[20:55:26.888]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:55:26.888]      __var ACCESS_POINT_VAL  = 0;
[20:55:26.888]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:55:26.888]      __ap = 1; 
[20:55:26.888]        // -> [__ap <= 0x00000001]
[20:55:26.888]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:55:26.888]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:55:26.888]      __ap = 4;
[20:55:26.888]        // -> [__ap <= 0x00000004]
[20:55:26.888]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:26.888]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:55:26.888]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:55:26.888]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:26.898]    </block>
[20:55:26.898]    <block atomic="false" info="">
[20:55:26.898]      __var nReset = 0x80;
[20:55:26.898]        // -> [nReset <= 0x00000080]
[20:55:26.898]      __var canReadPins = 0;
[20:55:26.898]        // -> [canReadPins <= 0x00000000]
[20:55:26.898]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:55:26.898]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:55:26.898]        // -> [canReadPins <= 0x00000001]
[20:55:26.898]    </block>
[20:55:26.898]    <control if="" while="1" timeout="200" info="">
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.898]      // while-condition  =>  TRUE
[20:55:26.898]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.908]      // while-condition  =>  TRUE
[20:55:26.908]      // while "1"  (timeout="200")
[20:55:26.918]      // while-condition  =>  TRUE
[20:55:26.918]      // while "1"  (timeout="200")
[20:55:26.918]      // while  =>  TIMEOUT
[20:55:26.918]      // end while "1"
[20:55:26.918]    </control>
[20:55:26.918]    <control if="canReadPins" while="" timeout="0" info="">
[20:55:26.918]      // if-block "canReadPins"
[20:55:26.918]        // =>  TRUE
[20:55:26.918]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:55:26.918]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:55:26.918]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:55:26.918]        // while-condition  =>  FALSE
[20:55:26.918]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:55:26.918]      </control>
[20:55:26.918]      // end if-block "canReadPins"
[20:55:26.918]    </control>
[20:55:26.918]    <control if="!canReadPins" while="" timeout="0" info="">
[20:55:26.918]      // if-block "!canReadPins"
[20:55:26.918]        // =>  FALSE
[20:55:26.918]      // skip if-block "!canReadPins"
[20:55:26.918]    </control>
[20:55:26.918]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:55:26.918]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:26.918]        // =>  TRUE
[20:55:26.918]      <block atomic="false" info="">
[20:55:26.918]        WriteAP(0x00, 0x190008);
[20:55:26.930]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:26.930]        WriteAP(0xF0, 0x01);
[20:55:26.938]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:26.938]      </block>
[20:55:26.938]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:26.938]    </control>
[20:55:26.938]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:55:26.938]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:26.938]        // =>  FALSE
[20:55:26.938]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:26.938]    </control>
[20:55:26.938]    <block atomic="false" info="">
[20:55:26.938]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:26.958]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:55:26.958]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:55:26.958]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:26.958]      __ap = 0; //lets make sure we reset the access point selection
[20:55:26.958]        // -> [__ap <= 0x00000000]
[20:55:26.958]    </block>
[20:55:26.958]  </sequence>
[20:55:26.958]  
[20:55:26.988]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:55:26.988]  
[20:55:26.988]  <debugvars>
[20:55:26.988]    // Pre-defined
[20:55:26.988]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:26.988]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:26.988]    __dp=0x00000000
[20:55:26.988]    __ap=0x00000000
[20:55:26.988]    __traceout=0x00000000      (Trace Disabled)
[20:55:26.988]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:26.988]    __FlashAddr=0x00000000
[20:55:26.988]    __FlashLen=0x00000000
[20:55:26.988]    __FlashArg=0x00000000
[20:55:26.988]    __FlashOp=0x00000000
[20:55:26.988]    __Result=0x00000000
[20:55:26.988]  </debugvars>
[20:55:26.988]  
[20:55:26.998]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:55:26.998]    <block atomic="false" info="">
[20:55:26.998]      __var deviceID = 0;
[20:55:26.998]        // -> [deviceID <= 0x00000000]
[20:55:26.998]      __var version = 0;
[20:55:26.998]        // -> [version <= 0x00000000]
[20:55:26.998]      __var partNum = 0;
[20:55:26.998]        // -> [partNum <= 0x00000000]
[20:55:26.998]      __var manuf = 0;
[20:55:26.998]        // -> [manuf <= 0x00000000]
[20:55:26.998]      __var isMSPM0G1X0X_G3X0X = 0;
[20:55:26.998]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:55:26.998]      __var isProduction = 0;
[20:55:26.998]        // -> [isProduction <= 0x00000000]
[20:55:26.998]      __var continueId = 0;
[20:55:26.998]        // -> [continueId <= 0x00000000]
[20:55:26.998]      deviceID =   Read32(0x41C40004);
[20:55:27.017]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:55:27.017]        // -> [deviceID <= 0x2BB8802F]
[20:55:27.017]      version = deviceID >> 28;
[20:55:27.017]        // -> [version <= 0x00000002]
[20:55:27.017]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:55:27.017]        // -> [partNum <= 0x0000BB88]
[20:55:27.017]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:55:27.017]        // -> [manuf <= 0x00000017]
[20:55:27.017]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:55:27.017]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:55:27.017]      isProduction = (version > 0);
[20:55:27.017]        // -> [isProduction <= 0x00000001]
[20:55:27.017]    </block>
[20:55:27.017]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:55:27.019]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:55:27.019]        // =>  FALSE
[20:55:27.019]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:55:27.019]    </control>
[20:55:27.019]    <control if="continueId == 4" while="" timeout="0" info="">
[20:55:27.019]      // if-block "continueId == 4"
[20:55:27.019]        // =>  FALSE
[20:55:27.019]      // skip if-block "continueId == 4"
[20:55:27.019]    </control>
[20:55:27.019]    <control if="!isProduction" while="" timeout="0" info="">
[20:55:27.019]      // if-block "!isProduction"
[20:55:27.019]        // =>  FALSE
[20:55:27.021]      // skip if-block "!isProduction"
[20:55:27.021]    </control>
[20:55:27.021]  </sequence>
[20:55:27.021]  
[20:56:10.147]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:56:10.147]  
[20:56:10.161]  <debugvars>
[20:56:10.161]    // Pre-defined
[20:56:10.161]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:10.161]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:56:10.161]    __dp=0x00000000
[20:56:10.161]    __ap=0x00000000
[20:56:10.161]    __traceout=0x00000000      (Trace Disabled)
[20:56:10.161]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:10.161]    __FlashAddr=0x00000000
[20:56:10.161]    __FlashLen=0x00000000
[20:56:10.161]    __FlashArg=0x00000000
[20:56:10.161]    __FlashOp=0x00000000
[20:56:10.161]    __Result=0x00000000
[20:56:10.161]  </debugvars>
[20:56:10.161]  
[20:56:10.161]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:56:10.161]    <block atomic="false" info="">
[20:56:10.161]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:56:10.161]        // -> [isSWJ <= 0x00000001]
[20:56:10.161]      __var hasDormant = __protocol & 0x00020000;
[20:56:10.161]        // -> [hasDormant <= 0x00000000]
[20:56:10.161]      __var protType   = __protocol & 0x0000FFFF;
[20:56:10.161]        // -> [protType <= 0x00000002]
[20:56:10.161]    </block>
[20:56:10.161]    <control if="protType == 1" while="" timeout="0" info="">
[20:56:10.161]      // if-block "protType == 1"
[20:56:10.161]        // =>  FALSE
[20:56:10.161]      // skip if-block "protType == 1"
[20:56:10.161]    </control>
[20:56:10.161]    <control if="protType == 2" while="" timeout="0" info="">
[20:56:10.161]      // if-block "protType == 2"
[20:56:10.161]        // =>  TRUE
[20:56:10.161]      <control if="isSWJ" while="" timeout="0" info="">
[20:56:10.161]        // if-block "isSWJ"
[20:56:10.161]          // =>  TRUE
[20:56:10.161]        <control if="hasDormant" while="" timeout="0" info="">
[20:56:10.161]          // if-block "hasDormant"
[20:56:10.161]            // =>  FALSE
[20:56:10.161]          // skip if-block "hasDormant"
[20:56:10.161]        </control>
[20:56:10.161]        <control if="!hasDormant" while="" timeout="0" info="">
[20:56:10.161]          // if-block "!hasDormant"
[20:56:10.161]            // =>  TRUE
[20:56:10.161]          <block atomic="false" info="">
[20:56:10.161]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:56:10.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:10.168]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:56:10.177]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:56:10.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:56:10.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:10.177]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:56:10.177]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:56:10.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:56:10.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:56:10.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:56:10.187]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:56:10.187]          </block>
[20:56:10.187]          // end if-block "!hasDormant"
[20:56:10.187]        </control>
[20:56:10.187]        // end if-block "isSWJ"
[20:56:10.187]      </control>
[20:56:10.187]      <control if="!isSWJ" while="" timeout="0" info="">
[20:56:10.187]        // if-block "!isSWJ"
[20:56:10.187]          // =>  FALSE
[20:56:10.187]        // skip if-block "!isSWJ"
[20:56:10.187]      </control>
[20:56:10.187]      <block atomic="false" info="">
[20:56:10.187]        ReadDP(0x0);
[20:56:10.187]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:56:10.187]      </block>
[20:56:10.187]      // end if-block "protType == 2"
[20:56:10.187]    </control>
[20:56:10.187]  </sequence>
[20:56:10.187]  
[20:56:10.197]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:56:10.197]  
[20:56:10.197]  <debugvars>
[20:56:10.197]    // Pre-defined
[20:56:10.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:10.197]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:56:10.197]    __dp=0x00000000
[20:56:10.197]    __ap=0x00000000
[20:56:10.197]    __traceout=0x00000000      (Trace Disabled)
[20:56:10.197]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:10.197]    __FlashAddr=0x00000000
[20:56:10.197]    __FlashLen=0x00000000
[20:56:10.197]    __FlashArg=0x00000000
[20:56:10.197]    __FlashOp=0x00000000
[20:56:10.197]    __Result=0x00000000
[20:56:10.197]  </debugvars>
[20:56:10.197]  
[20:56:10.197]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:56:10.197]    <block atomic="false" info="">
[20:56:10.197]      __var SW_DP_ABORT       = 0x0;
[20:56:10.197]        // -> [SW_DP_ABORT <= 0x00000000]
[20:56:10.197]      __var DP_CTRL_STAT      = 0x4;
[20:56:10.207]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:56:10.207]      __var DP_SELECT         = 0x8;
[20:56:10.207]        // -> [DP_SELECT <= 0x00000008]
[20:56:10.207]      __var powered_down      = 0;
[20:56:10.207]        // -> [powered_down <= 0x00000000]
[20:56:10.207]      WriteDP(DP_SELECT, 0x00000000);
[20:56:10.209]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:56:10.209]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:56:10.209]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:56:10.209]        // -> [powered_down <= 0x00000001]
[20:56:10.209]    </block>
[20:56:10.209]    <control if="powered_down" while="" timeout="0" info="">
[20:56:10.209]      // if-block "powered_down"
[20:56:10.209]        // =>  TRUE
[20:56:10.209]      <block atomic="false" info="">
[20:56:10.209]        Message(0, "Debug/System power-up request sent");
[20:56:10.209]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:56:10.217]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:56:10.217]      </block>
[20:56:10.217]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:56:10.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:56:10.227]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:56:10.227]        // while-condition  =>  FALSE
[20:56:10.227]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:56:10.227]      </control>
[20:56:10.227]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:56:10.227]        // if-block "(__protocol & 0xFFFF) == 1"
[20:56:10.227]          // =>  FALSE
[20:56:10.227]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:56:10.227]      </control>
[20:56:10.227]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:56:10.227]        // if-block "(__protocol & 0xFFFF) == 2"
[20:56:10.227]          // =>  TRUE
[20:56:10.227]        <block atomic="false" info="">
[20:56:10.227]          Message(0, "executing SWD power up");
[20:56:10.227]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:56:10.238]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:56:10.238]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:56:10.247]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:56:10.247]        </block>
[20:56:10.247]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:56:10.247]      </control>
[20:56:10.247]      // end if-block "powered_down"
[20:56:10.247]    </control>
[20:56:10.247]    <block atomic="false" info="">
[20:56:10.247]      __var DEBUG_PORT_VAL    = 0;
[20:56:10.247]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:56:10.247]      __var ACCESS_POINT_VAL  = 0;
[20:56:10.247]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:56:10.247]      __ap = 1; 
[20:56:10.247]        // -> [__ap <= 0x00000001]
[20:56:10.247]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:56:10.247]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:56:10.247]      __ap = 4;
[20:56:10.247]        // -> [__ap <= 0x00000004]
[20:56:10.247]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:56:10.257]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:56:10.257]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:56:10.257]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:56:10.257]    </block>
[20:56:10.257]    <block atomic="false" info="">
[20:56:10.257]      __var nReset = 0x80;
[20:56:10.257]        // -> [nReset <= 0x00000080]
[20:56:10.257]      __var canReadPins = 0;
[20:56:10.257]        // -> [canReadPins <= 0x00000000]
[20:56:10.257]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:56:10.257]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:56:10.257]        // -> [canReadPins <= 0x00000001]
[20:56:10.257]    </block>
[20:56:10.257]    <control if="" while="1" timeout="200" info="">
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.257]      // while-condition  =>  TRUE
[20:56:10.257]      // while "1"  (timeout="200")
[20:56:10.267]      // while-condition  =>  TRUE
[20:56:10.267]      // while "1"  (timeout="200")
[20:56:10.267]      // while-condition  =>  TRUE
[20:56:10.267]      // while "1"  (timeout="200")
[20:56:10.267]      // while-condition  =>  TRUE
[20:56:10.267]      // while "1"  (timeout="200")
[20:56:10.267]      // while-condition  =>  TRUE
[20:56:10.267]      // while "1"  (timeout="200")
[20:56:10.267]      // while-condition  =>  TRUE
[20:56:10.267]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.268]      // while-condition  =>  TRUE
[20:56:10.268]      // while "1"  (timeout="200")
[20:56:10.277]      // while-condition  =>  TRUE
[20:56:10.277]      // while "1"  (timeout="200")
[20:56:10.277]      // while  =>  TIMEOUT
[20:56:10.277]      // end while "1"
[20:56:10.277]    </control>
[20:56:10.277]    <control if="canReadPins" while="" timeout="0" info="">
[20:56:10.277]      // if-block "canReadPins"
[20:56:10.277]        // =>  TRUE
[20:56:10.277]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:56:10.278]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:56:10.281]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:56:10.281]        // while-condition  =>  FALSE
[20:56:10.281]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:56:10.281]      </control>
[20:56:10.281]      // end if-block "canReadPins"
[20:56:10.281]    </control>
[20:56:10.281]    <control if="!canReadPins" while="" timeout="0" info="">
[20:56:10.281]      // if-block "!canReadPins"
[20:56:10.281]        // =>  FALSE
[20:56:10.281]      // skip if-block "!canReadPins"
[20:56:10.281]    </control>
[20:56:10.281]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:56:10.281]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:56:10.281]        // =>  TRUE
[20:56:10.281]      <block atomic="false" info="">
[20:56:10.281]        WriteAP(0x00, 0x190008);
[20:56:10.287]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:56:10.287]        WriteAP(0xF0, 0x01);
[20:56:10.287]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:56:10.287]      </block>
[20:56:10.287]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:56:10.287]    </control>
[20:56:10.287]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:56:10.287]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:56:10.287]        // =>  FALSE
[20:56:10.287]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:56:10.287]    </control>
[20:56:10.287]    <block atomic="false" info="">
[20:56:10.287]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:56:10.297]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:56:10.297]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:56:10.297]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:56:10.302]      __ap = 0; //lets make sure we reset the access point selection
[20:56:10.302]        // -> [__ap <= 0x00000000]
[20:56:10.302]    </block>
[20:56:10.302]  </sequence>
[20:56:10.302]  
[20:56:10.327]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:56:10.327]  
[20:56:10.327]  <debugvars>
[20:56:10.327]    // Pre-defined
[20:56:10.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:56:10.327]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:56:10.327]    __dp=0x00000000
[20:56:10.327]    __ap=0x00000000
[20:56:10.327]    __traceout=0x00000000      (Trace Disabled)
[20:56:10.327]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:56:10.327]    __FlashAddr=0x00000000
[20:56:10.327]    __FlashLen=0x00000000
[20:56:10.327]    __FlashArg=0x00000000
[20:56:10.327]    __FlashOp=0x00000000
[20:56:10.327]    __Result=0x00000000
[20:56:10.327]  </debugvars>
[20:56:10.327]  
[20:56:10.327]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:56:10.327]    <block atomic="false" info="">
[20:56:10.327]      __var deviceID = 0;
[20:56:10.327]        // -> [deviceID <= 0x00000000]
[20:56:10.327]      __var version = 0;
[20:56:10.327]        // -> [version <= 0x00000000]
[20:56:10.327]      __var partNum = 0;
[20:56:10.327]        // -> [partNum <= 0x00000000]
[20:56:10.327]      __var manuf = 0;
[20:56:10.327]        // -> [manuf <= 0x00000000]
[20:56:10.327]      __var isMSPM0G1X0X_G3X0X = 0;
[20:56:10.327]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:56:10.327]      __var isProduction = 0;
[20:56:10.327]        // -> [isProduction <= 0x00000000]
[20:56:10.327]      __var continueId = 0;
[20:56:10.327]        // -> [continueId <= 0x00000000]
[20:56:10.327]      deviceID =   Read32(0x41C40004);
[20:56:10.338]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:56:10.338]        // -> [deviceID <= 0x2BB8802F]
[20:56:10.338]      version = deviceID >> 28;
[20:56:10.338]        // -> [version <= 0x00000002]
[20:56:10.338]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:56:10.338]        // -> [partNum <= 0x0000BB88]
[20:56:10.338]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:56:10.338]        // -> [manuf <= 0x00000017]
[20:56:10.338]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:56:10.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:56:10.338]      isProduction = (version > 0);
[20:56:10.338]        // -> [isProduction <= 0x00000001]
[20:56:10.338]    </block>
[20:56:10.338]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:56:10.338]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:56:10.338]        // =>  FALSE
[20:56:10.338]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:56:10.338]    </control>
[20:56:10.338]    <control if="continueId == 4" while="" timeout="0" info="">
[20:56:10.338]      // if-block "continueId == 4"
[20:56:10.338]        // =>  FALSE
[20:56:10.338]      // skip if-block "continueId == 4"
[20:56:10.338]    </control>
[20:56:10.338]    <control if="!isProduction" while="" timeout="0" info="">
[20:56:10.338]      // if-block "!isProduction"
[20:56:10.338]        // =>  FALSE
[20:56:10.347]      // skip if-block "!isProduction"
[20:56:10.347]    </control>
[20:56:10.347]  </sequence>
[20:56:10.347]  
[20:57:11.298]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:57:11.298]  
[20:57:11.298]  <debugvars>
[20:57:11.299]    // Pre-defined
[20:57:11.299]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:57:11.299]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:57:11.299]    __dp=0x00000000
[20:57:11.299]    __ap=0x00000000
[20:57:11.299]    __traceout=0x00000000      (Trace Disabled)
[20:57:11.299]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:57:11.300]    __FlashAddr=0x00000000
[20:57:11.300]    __FlashLen=0x00000000
[20:57:11.301]    __FlashArg=0x00000000
[20:57:11.301]    __FlashOp=0x00000000
[20:57:11.301]    __Result=0x00000000
[20:57:11.301]  </debugvars>
[20:57:11.301]  
[20:57:11.301]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:57:11.301]    <block atomic="false" info="">
[20:57:11.301]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:57:11.301]        // -> [isSWJ <= 0x00000001]
[20:57:11.301]      __var hasDormant = __protocol & 0x00020000;
[20:57:11.301]        // -> [hasDormant <= 0x00000000]
[20:57:11.301]      __var protType   = __protocol & 0x0000FFFF;
[20:57:11.301]        // -> [protType <= 0x00000002]
[20:57:11.301]    </block>
[20:57:11.301]    <control if="protType == 1" while="" timeout="0" info="">
[20:57:11.302]      // if-block "protType == 1"
[20:57:11.302]        // =>  FALSE
[20:57:11.302]      // skip if-block "protType == 1"
[20:57:11.302]    </control>
[20:57:11.302]    <control if="protType == 2" while="" timeout="0" info="">
[20:57:11.302]      // if-block "protType == 2"
[20:57:11.302]        // =>  TRUE
[20:57:11.302]      <control if="isSWJ" while="" timeout="0" info="">
[20:57:11.302]        // if-block "isSWJ"
[20:57:11.302]          // =>  TRUE
[20:57:11.303]        <control if="hasDormant" while="" timeout="0" info="">
[20:57:11.303]          // if-block "hasDormant"
[20:57:11.303]            // =>  FALSE
[20:57:11.303]          // skip if-block "hasDormant"
[20:57:11.303]        </control>
[20:57:11.303]        <control if="!hasDormant" while="" timeout="0" info="">
[20:57:11.303]          // if-block "!hasDormant"
[20:57:11.303]            // =>  TRUE
[20:57:11.303]          <block atomic="false" info="">
[20:57:11.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:57:11.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:57:11.306]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:57:11.307]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:57:11.307]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:57:11.309]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:57:11.309]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:57:11.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:57:11.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:57:11.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:57:11.317]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:57:11.320]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:57:11.320]          </block>
[20:57:11.320]          // end if-block "!hasDormant"
[20:57:11.320]        </control>
[20:57:11.320]        // end if-block "isSWJ"
[20:57:11.320]      </control>
[20:57:11.321]      <control if="!isSWJ" while="" timeout="0" info="">
[20:57:11.321]        // if-block "!isSWJ"
[20:57:11.321]          // =>  FALSE
[20:57:11.321]        // skip if-block "!isSWJ"
[20:57:11.321]      </control>
[20:57:11.321]      <block atomic="false" info="">
[20:57:11.321]        ReadDP(0x0);
[20:57:11.325]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:57:11.325]      </block>
[20:57:11.325]      // end if-block "protType == 2"
[20:57:11.325]    </control>
[20:57:11.327]  </sequence>
[20:57:11.327]  
[20:57:11.330]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:57:11.330]  
[20:57:11.330]  <debugvars>
[20:57:11.330]    // Pre-defined
[20:57:11.330]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:57:11.330]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:57:11.330]    __dp=0x00000000
[20:57:11.330]    __ap=0x00000000
[20:57:11.330]    __traceout=0x00000000      (Trace Disabled)
[20:57:11.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:57:11.330]    __FlashAddr=0x00000000
[20:57:11.330]    __FlashLen=0x00000000
[20:57:11.330]    __FlashArg=0x00000000
[20:57:11.330]    __FlashOp=0x00000000
[20:57:11.330]    __Result=0x00000000
[20:57:11.330]  </debugvars>
[20:57:11.330]  
[20:57:11.330]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:57:11.330]    <block atomic="false" info="">
[20:57:11.330]      __var SW_DP_ABORT       = 0x0;
[20:57:11.330]        // -> [SW_DP_ABORT <= 0x00000000]
[20:57:11.330]      __var DP_CTRL_STAT      = 0x4;
[20:57:11.330]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:57:11.330]      __var DP_SELECT         = 0x8;
[20:57:11.330]        // -> [DP_SELECT <= 0x00000008]
[20:57:11.330]      __var powered_down      = 0;
[20:57:11.332]        // -> [powered_down <= 0x00000000]
[20:57:11.332]      WriteDP(DP_SELECT, 0x00000000);
[20:57:11.335]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:57:11.335]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:57:11.335]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:57:11.335]        // -> [powered_down <= 0x00000001]
[20:57:11.335]    </block>
[20:57:11.335]    <control if="powered_down" while="" timeout="0" info="">
[20:57:11.335]      // if-block "powered_down"
[20:57:11.335]        // =>  TRUE
[20:57:11.335]      <block atomic="false" info="">
[20:57:11.335]        Message(0, "Debug/System power-up request sent");
[20:57:11.335]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:57:11.340]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:57:11.340]      </block>
[20:57:11.340]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:57:11.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:57:11.340]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:57:11.340]        // while-condition  =>  FALSE
[20:57:11.340]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:57:11.340]      </control>
[20:57:11.340]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:57:11.340]        // if-block "(__protocol & 0xFFFF) == 1"
[20:57:11.340]          // =>  FALSE
[20:57:11.343]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:57:11.343]      </control>
[20:57:11.343]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:57:11.343]        // if-block "(__protocol & 0xFFFF) == 2"
[20:57:11.343]          // =>  TRUE
[20:57:11.343]        <block atomic="false" info="">
[20:57:11.343]          Message(0, "executing SWD power up");
[20:57:11.346]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:57:11.348]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:57:11.348]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:57:11.351]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:57:11.351]        </block>
[20:57:11.351]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:57:11.351]      </control>
[20:57:11.351]      // end if-block "powered_down"
[20:57:11.351]    </control>
[20:57:11.351]    <block atomic="false" info="">
[20:57:11.351]      __var DEBUG_PORT_VAL    = 0;
[20:57:11.351]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:57:11.351]      __var ACCESS_POINT_VAL  = 0;
[20:57:11.351]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:57:11.351]      __ap = 1; 
[20:57:11.351]        // -> [__ap <= 0x00000001]
[20:57:11.351]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:57:11.356]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:57:11.356]      __ap = 4;
[20:57:11.356]        // -> [__ap <= 0x00000004]
[20:57:11.356]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:57:11.365]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:57:11.365]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:57:11.365]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:57:11.365]    </block>
[20:57:11.365]    <block atomic="false" info="">
[20:57:11.365]      __var nReset = 0x80;
[20:57:11.365]        // -> [nReset <= 0x00000080]
[20:57:11.365]      __var canReadPins = 0;
[20:57:11.365]        // -> [canReadPins <= 0x00000000]
[20:57:11.365]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:57:11.365]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:57:11.365]        // -> [canReadPins <= 0x00000001]
[20:57:11.371]    </block>
[20:57:11.371]    <control if="" while="1" timeout="200" info="">
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.371]      // while "1"  (timeout="200")
[20:57:11.371]      // while-condition  =>  TRUE
[20:57:11.373]      // while "1"  (timeout="200")
[20:57:11.373]      // while-condition  =>  TRUE
[20:57:11.373]      // while "1"  (timeout="200")
[20:57:11.373]      // while-condition  =>  TRUE
[20:57:11.373]      // while "1"  (timeout="200")
[20:57:11.373]      // while-condition  =>  TRUE
[20:57:11.373]      // while "1"  (timeout="200")
[20:57:11.373]      // while-condition  =>  TRUE
[20:57:11.373]      // while "1"  (timeout="200")
[20:57:11.373]      // while-condition  =>  TRUE
[20:57:11.373]      // while "1"  (timeout="200")
[20:57:11.373]      // while-condition  =>  TRUE
[20:57:11.374]      // while "1"  (timeout="200")
[20:57:11.374]      // while-condition  =>  TRUE
[20:57:11.374]      // while "1"  (timeout="200")
[20:57:11.374]      // while-condition  =>  TRUE
[20:57:11.374]      // while "1"  (timeout="200")
[20:57:11.374]      // while-condition  =>  TRUE
[20:57:11.374]      // while "1"  (timeout="200")
[20:57:11.374]      // while-condition  =>  TRUE
[20:57:11.374]      // while "1"  (timeout="200")
[20:57:11.374]      // while-condition  =>  TRUE
[20:57:11.374]      // while "1"  (timeout="200")
[20:57:11.374]      // while-condition  =>  TRUE
[20:57:11.375]      // while "1"  (timeout="200")
[20:57:11.375]      // while-condition  =>  TRUE
[20:57:11.375]      // while "1"  (timeout="200")
[20:57:11.375]      // while-condition  =>  TRUE
[20:57:11.375]      // while "1"  (timeout="200")
[20:57:11.375]      // while-condition  =>  TRUE
[20:57:11.375]      // while "1"  (timeout="200")
[20:57:11.375]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.376]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.376]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.376]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.376]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.376]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.376]      // while-condition  =>  TRUE
[20:57:11.376]      // while "1"  (timeout="200")
[20:57:11.377]      // while-condition  =>  TRUE
[20:57:11.377]      // while "1"  (timeout="200")
[20:57:11.377]      // while-condition  =>  TRUE
[20:57:11.377]      // while "1"  (timeout="200")
[20:57:11.377]      // while-condition  =>  TRUE
[20:57:11.377]      // while "1"  (timeout="200")
[20:57:11.377]      // while-condition  =>  TRUE
[20:57:11.377]      // while "1"  (timeout="200")
[20:57:11.377]      // while-condition  =>  TRUE
[20:57:11.377]      // while "1"  (timeout="200")
[20:57:11.377]      // while-condition  =>  TRUE
[20:57:11.377]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.378]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.378]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.378]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.378]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.378]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.378]      // while "1"  (timeout="200")
[20:57:11.378]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.379]      // while "1"  (timeout="200")
[20:57:11.379]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.381]      // while-condition  =>  TRUE
[20:57:11.381]      // while "1"  (timeout="200")
[20:57:11.385]      // while-condition  =>  TRUE
[20:57:11.385]      // while "1"  (timeout="200")
[20:57:11.385]      // while  =>  TIMEOUT
[20:57:11.385]      // end while "1"
[20:57:11.385]    </control>
[20:57:11.386]    <control if="canReadPins" while="" timeout="0" info="">
[20:57:11.386]      // if-block "canReadPins"
[20:57:11.386]        // =>  TRUE
[20:57:11.386]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:57:11.386]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:57:11.388]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:57:11.388]        // while-condition  =>  FALSE
[20:57:11.388]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:57:11.388]      </control>
[20:57:11.388]      // end if-block "canReadPins"
[20:57:11.388]    </control>
[20:57:11.388]    <control if="!canReadPins" while="" timeout="0" info="">
[20:57:11.388]      // if-block "!canReadPins"
[20:57:11.389]        // =>  FALSE
[20:57:11.389]      // skip if-block "!canReadPins"
[20:57:11.389]    </control>
[20:57:11.389]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:57:11.389]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:57:11.389]        // =>  TRUE
[20:57:11.389]      <block atomic="false" info="">
[20:57:11.389]        WriteAP(0x00, 0x190008);
[20:57:11.391]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:57:11.391]        WriteAP(0xF0, 0x01);
[20:57:11.395]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:57:11.395]      </block>
[20:57:11.395]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:57:11.395]    </control>
[20:57:11.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:57:11.395]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:57:11.395]        // =>  FALSE
[20:57:11.395]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:57:11.395]    </control>
[20:57:11.397]    <block atomic="false" info="">
[20:57:11.397]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:57:11.401]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:57:11.401]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:57:11.401]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:57:11.401]      __ap = 0; //lets make sure we reset the access point selection
[20:57:11.401]        // -> [__ap <= 0x00000000]
[20:57:11.401]    </block>
[20:57:11.401]  </sequence>
[20:57:11.401]  
[20:57:11.433]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:57:11.433]  
[20:57:11.433]  <debugvars>
[20:57:11.433]    // Pre-defined
[20:57:11.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:57:11.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:57:11.433]    __dp=0x00000000
[20:57:11.433]    __ap=0x00000000
[20:57:11.433]    __traceout=0x00000000      (Trace Disabled)
[20:57:11.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:57:11.433]    __FlashAddr=0x00000000
[20:57:11.433]    __FlashLen=0x00000000
[20:57:11.433]    __FlashArg=0x00000000
[20:57:11.435]    __FlashOp=0x00000000
[20:57:11.435]    __Result=0x00000000
[20:57:11.435]  </debugvars>
[20:57:11.435]  
[20:57:11.435]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:57:11.435]    <block atomic="false" info="">
[20:57:11.435]      __var deviceID = 0;
[20:57:11.435]        // -> [deviceID <= 0x00000000]
[20:57:11.435]      __var version = 0;
[20:57:11.435]        // -> [version <= 0x00000000]
[20:57:11.436]      __var partNum = 0;
[20:57:11.436]        // -> [partNum <= 0x00000000]
[20:57:11.436]      __var manuf = 0;
[20:57:11.436]        // -> [manuf <= 0x00000000]
[20:57:11.436]      __var isMSPM0G1X0X_G3X0X = 0;
[20:57:11.436]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:57:11.436]      __var isProduction = 0;
[20:57:11.436]        // -> [isProduction <= 0x00000000]
[20:57:11.436]      __var continueId = 0;
[20:57:11.436]        // -> [continueId <= 0x00000000]
[20:57:11.436]      deviceID =   Read32(0x41C40004);
[20:57:11.443]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:57:11.443]        // -> [deviceID <= 0x2BB8802F]
[20:57:11.443]      version = deviceID >> 28;
[20:57:11.443]        // -> [version <= 0x00000002]
[20:57:11.443]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:57:11.443]        // -> [partNum <= 0x0000BB88]
[20:57:11.444]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:57:11.444]        // -> [manuf <= 0x00000017]
[20:57:11.444]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:57:11.444]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:57:11.444]      isProduction = (version > 0);
[20:57:11.444]        // -> [isProduction <= 0x00000001]
[20:57:11.444]    </block>
[20:57:11.444]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:57:11.444]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:57:11.444]        // =>  FALSE
[20:57:11.444]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:57:11.444]    </control>
[20:57:11.445]    <control if="continueId == 4" while="" timeout="0" info="">
[20:57:11.445]      // if-block "continueId == 4"
[20:57:11.445]        // =>  FALSE
[20:57:11.445]      // skip if-block "continueId == 4"
[20:57:11.445]    </control>
[20:57:11.445]    <control if="!isProduction" while="" timeout="0" info="">
[20:57:11.446]      // if-block "!isProduction"
[20:57:11.446]        // =>  FALSE
[20:57:11.446]      // skip if-block "!isProduction"
[20:57:11.446]    </control>
[20:57:11.446]  </sequence>
[20:57:11.446]  
[21:00:15.804]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:00:15.804]  
[21:00:15.804]  <debugvars>
[21:00:15.804]    // Pre-defined
[21:00:15.804]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:15.804]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:15.804]    __dp=0x00000000
[21:00:15.814]    __ap=0x00000000
[21:00:15.814]    __traceout=0x00000000      (Trace Disabled)
[21:00:15.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:15.814]    __FlashAddr=0x00000000
[21:00:15.814]    __FlashLen=0x00000000
[21:00:15.814]    __FlashArg=0x00000000
[21:00:15.814]    __FlashOp=0x00000000
[21:00:15.814]    __Result=0x00000000
[21:00:15.814]  </debugvars>
[21:00:15.814]  
[21:00:15.814]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:00:15.814]    <block atomic="false" info="">
[21:00:15.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:00:15.814]        // -> [isSWJ <= 0x00000001]
[21:00:15.814]      __var hasDormant = __protocol & 0x00020000;
[21:00:15.814]        // -> [hasDormant <= 0x00000000]
[21:00:15.814]      __var protType   = __protocol & 0x0000FFFF;
[21:00:15.814]        // -> [protType <= 0x00000002]
[21:00:15.814]    </block>
[21:00:15.814]    <control if="protType == 1" while="" timeout="0" info="">
[21:00:15.814]      // if-block "protType == 1"
[21:00:15.814]        // =>  FALSE
[21:00:15.814]      // skip if-block "protType == 1"
[21:00:15.814]    </control>
[21:00:15.814]    <control if="protType == 2" while="" timeout="0" info="">
[21:00:15.814]      // if-block "protType == 2"
[21:00:15.814]        // =>  TRUE
[21:00:15.814]      <control if="isSWJ" while="" timeout="0" info="">
[21:00:15.814]        // if-block "isSWJ"
[21:00:15.814]          // =>  TRUE
[21:00:15.814]        <control if="hasDormant" while="" timeout="0" info="">
[21:00:15.814]          // if-block "hasDormant"
[21:00:15.814]            // =>  FALSE
[21:00:15.814]          // skip if-block "hasDormant"
[21:00:15.814]        </control>
[21:00:15.814]        <control if="!hasDormant" while="" timeout="0" info="">
[21:00:15.814]          // if-block "!hasDormant"
[21:00:15.814]            // =>  TRUE
[21:00:15.814]          <block atomic="false" info="">
[21:00:15.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:00:15.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:15.814]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:00:15.814]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:00:15.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:00:15.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:15.824]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:00:15.824]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:00:15.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:00:15.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:15.824]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:00:15.824]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:00:15.824]          </block>
[21:00:15.824]          // end if-block "!hasDormant"
[21:00:15.824]        </control>
[21:00:15.824]        // end if-block "isSWJ"
[21:00:15.824]      </control>
[21:00:15.824]      <control if="!isSWJ" while="" timeout="0" info="">
[21:00:15.824]        // if-block "!isSWJ"
[21:00:15.824]          // =>  FALSE
[21:00:15.824]        // skip if-block "!isSWJ"
[21:00:15.824]      </control>
[21:00:15.824]      <block atomic="false" info="">
[21:00:15.824]        ReadDP(0x0);
[21:00:15.834]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:00:15.834]      </block>
[21:00:15.834]      // end if-block "protType == 2"
[21:00:15.834]    </control>
[21:00:15.834]  </sequence>
[21:00:15.834]  
[21:00:15.834]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:00:15.834]  
[21:00:15.834]  <debugvars>
[21:00:15.834]    // Pre-defined
[21:00:15.834]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:15.834]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:15.834]    __dp=0x00000000
[21:00:15.834]    __ap=0x00000000
[21:00:15.834]    __traceout=0x00000000      (Trace Disabled)
[21:00:15.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:15.834]    __FlashAddr=0x00000000
[21:00:15.834]    __FlashLen=0x00000000
[21:00:15.834]    __FlashArg=0x00000000
[21:00:15.834]    __FlashOp=0x00000000
[21:00:15.834]    __Result=0x00000000
[21:00:15.834]  </debugvars>
[21:00:15.834]  
[21:00:15.834]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:00:15.834]    <block atomic="false" info="">
[21:00:15.834]      __var SW_DP_ABORT       = 0x0;
[21:00:15.834]        // -> [SW_DP_ABORT <= 0x00000000]
[21:00:15.834]      __var DP_CTRL_STAT      = 0x4;
[21:00:15.834]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:00:15.834]      __var DP_SELECT         = 0x8;
[21:00:15.834]        // -> [DP_SELECT <= 0x00000008]
[21:00:15.834]      __var powered_down      = 0;
[21:00:15.834]        // -> [powered_down <= 0x00000000]
[21:00:15.834]      WriteDP(DP_SELECT, 0x00000000);
[21:00:15.834]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:00:15.834]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:00:15.846]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:00:15.846]        // -> [powered_down <= 0x00000001]
[21:00:15.846]    </block>
[21:00:15.846]    <control if="powered_down" while="" timeout="0" info="">
[21:00:15.846]      // if-block "powered_down"
[21:00:15.846]        // =>  TRUE
[21:00:15.846]      <block atomic="false" info="">
[21:00:15.846]        Message(0, "Debug/System power-up request sent");
[21:00:15.846]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:00:15.846]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:00:15.846]      </block>
[21:00:15.846]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:00:15.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:00:15.854]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:00:15.854]        // while-condition  =>  FALSE
[21:00:15.854]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:00:15.854]      </control>
[21:00:15.854]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:00:15.854]        // if-block "(__protocol & 0xFFFF) == 1"
[21:00:15.854]          // =>  FALSE
[21:00:15.854]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:00:15.854]      </control>
[21:00:15.854]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:00:15.854]        // if-block "(__protocol & 0xFFFF) == 2"
[21:00:15.854]          // =>  TRUE
[21:00:15.854]        <block atomic="false" info="">
[21:00:15.854]          Message(0, "executing SWD power up");
[21:00:15.854]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:00:15.854]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:00:15.854]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:00:15.864]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:00:15.864]        </block>
[21:00:15.864]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:00:15.864]      </control>
[21:00:15.864]      // end if-block "powered_down"
[21:00:15.864]    </control>
[21:00:15.864]    <block atomic="false" info="">
[21:00:15.864]      __var DEBUG_PORT_VAL    = 0;
[21:00:15.864]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:00:15.864]      __var ACCESS_POINT_VAL  = 0;
[21:00:15.864]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:00:15.864]      __ap = 1; 
[21:00:15.864]        // -> [__ap <= 0x00000001]
[21:00:15.864]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:00:15.864]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:00:15.864]      __ap = 4;
[21:00:15.864]        // -> [__ap <= 0x00000004]
[21:00:15.864]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:00:15.874]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:00:15.874]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:00:15.874]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:00:15.884]    </block>
[21:00:15.884]    <block atomic="false" info="">
[21:00:15.884]      __var nReset = 0x80;
[21:00:15.884]        // -> [nReset <= 0x00000080]
[21:00:15.884]      __var canReadPins = 0;
[21:00:15.884]        // -> [canReadPins <= 0x00000000]
[21:00:15.884]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:00:15.886]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:00:15.886]        // -> [canReadPins <= 0x00000001]
[21:00:15.886]    </block>
[21:00:15.886]    <control if="" while="1" timeout="200" info="">
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.886]      // while "1"  (timeout="200")
[21:00:15.886]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.895]      // while-condition  =>  TRUE
[21:00:15.895]      // while "1"  (timeout="200")
[21:00:15.905]      // while-condition  =>  TRUE
[21:00:15.905]      // while "1"  (timeout="200")
[21:00:15.905]      // while  =>  TIMEOUT
[21:00:15.905]      // end while "1"
[21:00:15.905]    </control>
[21:00:15.905]    <control if="canReadPins" while="" timeout="0" info="">
[21:00:15.905]      // if-block "canReadPins"
[21:00:15.905]        // =>  TRUE
[21:00:15.905]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:00:15.905]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:00:15.907]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:00:15.907]        // while-condition  =>  FALSE
[21:00:15.907]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:00:15.907]      </control>
[21:00:15.907]      // end if-block "canReadPins"
[21:00:15.907]    </control>
[21:00:15.907]    <control if="!canReadPins" while="" timeout="0" info="">
[21:00:15.907]      // if-block "!canReadPins"
[21:00:15.907]        // =>  FALSE
[21:00:15.907]      // skip if-block "!canReadPins"
[21:00:15.907]    </control>
[21:00:15.907]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:00:15.907]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:00:15.907]        // =>  TRUE
[21:00:15.907]      <block atomic="false" info="">
[21:00:15.907]        WriteAP(0x00, 0x190008);
[21:00:15.925]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:00:15.925]        WriteAP(0xF0, 0x01);
[21:00:15.935]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:00:15.935]      </block>
[21:00:15.935]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:00:15.935]    </control>
[21:00:15.935]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:00:15.935]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:00:15.935]        // =>  FALSE
[21:00:15.935]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:00:15.935]    </control>
[21:00:15.935]    <block atomic="false" info="">
[21:00:15.935]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:00:15.955]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:00:15.955]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:00:15.955]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:00:15.955]      __ap = 0; //lets make sure we reset the access point selection
[21:00:15.955]        // -> [__ap <= 0x00000000]
[21:00:15.955]    </block>
[21:00:15.955]  </sequence>
[21:00:15.955]  
[21:00:15.995]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:00:15.995]  
[21:00:15.995]  <debugvars>
[21:00:15.995]    // Pre-defined
[21:00:15.995]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:15.995]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:15.995]    __dp=0x00000000
[21:00:15.995]    __ap=0x00000000
[21:00:15.995]    __traceout=0x00000000      (Trace Disabled)
[21:00:15.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:15.995]    __FlashAddr=0x00000000
[21:00:15.995]    __FlashLen=0x00000000
[21:00:15.995]    __FlashArg=0x00000000
[21:00:15.995]    __FlashOp=0x00000000
[21:00:15.995]    __Result=0x00000000
[21:00:15.995]  </debugvars>
[21:00:15.995]  
[21:00:15.995]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:00:15.995]    <block atomic="false" info="">
[21:00:15.995]      __var deviceID = 0;
[21:00:15.995]        // -> [deviceID <= 0x00000000]
[21:00:15.995]      __var version = 0;
[21:00:15.995]        // -> [version <= 0x00000000]
[21:00:15.995]      __var partNum = 0;
[21:00:15.995]        // -> [partNum <= 0x00000000]
[21:00:15.995]      __var manuf = 0;
[21:00:15.995]        // -> [manuf <= 0x00000000]
[21:00:15.995]      __var isMSPM0G1X0X_G3X0X = 0;
[21:00:15.995]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:00:15.995]      __var isProduction = 0;
[21:00:15.995]        // -> [isProduction <= 0x00000000]
[21:00:15.995]      __var continueId = 0;
[21:00:15.995]        // -> [continueId <= 0x00000000]
[21:00:15.995]      deviceID =   Read32(0x41C40004);
[21:00:16.015]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:00:16.015]        // -> [deviceID <= 0x2BB8802F]
[21:00:16.015]      version = deviceID >> 28;
[21:00:16.015]        // -> [version <= 0x00000002]
[21:00:16.015]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:00:16.015]        // -> [partNum <= 0x0000BB88]
[21:00:16.015]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:00:16.015]        // -> [manuf <= 0x00000017]
[21:00:16.015]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:00:16.015]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:00:16.015]      isProduction = (version > 0);
[21:00:16.015]        // -> [isProduction <= 0x00000001]
[21:00:16.015]    </block>
[21:00:16.015]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:00:16.015]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:00:16.015]        // =>  FALSE
[21:00:16.015]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:00:16.015]    </control>
[21:00:16.015]    <control if="continueId == 4" while="" timeout="0" info="">
[21:00:16.015]      // if-block "continueId == 4"
[21:00:16.015]        // =>  FALSE
[21:00:16.015]      // skip if-block "continueId == 4"
[21:00:16.015]    </control>
[21:00:16.015]    <control if="!isProduction" while="" timeout="0" info="">
[21:00:16.015]      // if-block "!isProduction"
[21:00:16.015]        // =>  FALSE
[21:00:16.015]      // skip if-block "!isProduction"
[21:00:16.015]    </control>
[21:00:16.015]  </sequence>
[21:00:16.015]  
[21:06:39.765]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:06:39.765]  
[21:06:39.777]  <debugvars>
[21:06:39.777]    // Pre-defined
[21:06:39.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:39.777]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:39.777]    __dp=0x00000000
[21:06:39.777]    __ap=0x00000000
[21:06:39.777]    __traceout=0x00000000      (Trace Disabled)
[21:06:39.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:39.777]    __FlashAddr=0x00000000
[21:06:39.777]    __FlashLen=0x00000000
[21:06:39.777]    __FlashArg=0x00000000
[21:06:39.777]    __FlashOp=0x00000000
[21:06:39.777]    __Result=0x00000000
[21:06:39.777]  </debugvars>
[21:06:39.777]  
[21:06:39.777]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:06:39.777]    <block atomic="false" info="">
[21:06:39.777]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:06:39.777]        // -> [isSWJ <= 0x00000001]
[21:06:39.777]      __var hasDormant = __protocol & 0x00020000;
[21:06:39.777]        // -> [hasDormant <= 0x00000000]
[21:06:39.777]      __var protType   = __protocol & 0x0000FFFF;
[21:06:39.777]        // -> [protType <= 0x00000002]
[21:06:39.777]    </block>
[21:06:39.777]    <control if="protType == 1" while="" timeout="0" info="">
[21:06:39.777]      // if-block "protType == 1"
[21:06:39.777]        // =>  FALSE
[21:06:39.780]      // skip if-block "protType == 1"
[21:06:39.780]    </control>
[21:06:39.780]    <control if="protType == 2" while="" timeout="0" info="">
[21:06:39.780]      // if-block "protType == 2"
[21:06:39.780]        // =>  TRUE
[21:06:39.780]      <control if="isSWJ" while="" timeout="0" info="">
[21:06:39.780]        // if-block "isSWJ"
[21:06:39.780]          // =>  TRUE
[21:06:39.780]        <control if="hasDormant" while="" timeout="0" info="">
[21:06:39.780]          // if-block "hasDormant"
[21:06:39.780]            // =>  FALSE
[21:06:39.780]          // skip if-block "hasDormant"
[21:06:39.780]        </control>
[21:06:39.781]        <control if="!hasDormant" while="" timeout="0" info="">
[21:06:39.781]          // if-block "!hasDormant"
[21:06:39.781]            // =>  TRUE
[21:06:39.781]          <block atomic="false" info="">
[21:06:39.781]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:06:39.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:39.784]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:06:39.784]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:06:39.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:06:39.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:39.784]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:06:39.793]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:06:39.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:06:39.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:06:39.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:06:39.794]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:06:39.794]          </block>
[21:06:39.794]          // end if-block "!hasDormant"
[21:06:39.794]        </control>
[21:06:39.794]        // end if-block "isSWJ"
[21:06:39.794]      </control>
[21:06:39.794]      <control if="!isSWJ" while="" timeout="0" info="">
[21:06:39.794]        // if-block "!isSWJ"
[21:06:39.794]          // =>  FALSE
[21:06:39.794]        // skip if-block "!isSWJ"
[21:06:39.794]      </control>
[21:06:39.794]      <block atomic="false" info="">
[21:06:39.794]        ReadDP(0x0);
[21:06:39.794]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:06:39.803]      </block>
[21:06:39.803]      // end if-block "protType == 2"
[21:06:39.803]    </control>
[21:06:39.803]  </sequence>
[21:06:39.803]  
[21:06:39.806]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:06:39.806]  
[21:06:39.806]  <debugvars>
[21:06:39.806]    // Pre-defined
[21:06:39.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:39.806]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:39.806]    __dp=0x00000000
[21:06:39.806]    __ap=0x00000000
[21:06:39.806]    __traceout=0x00000000      (Trace Disabled)
[21:06:39.806]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:39.806]    __FlashAddr=0x00000000
[21:06:39.806]    __FlashLen=0x00000000
[21:06:39.806]    __FlashArg=0x00000000
[21:06:39.806]    __FlashOp=0x00000000
[21:06:39.806]    __Result=0x00000000
[21:06:39.806]  </debugvars>
[21:06:39.806]  
[21:06:39.806]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:06:39.806]    <block atomic="false" info="">
[21:06:39.806]      __var SW_DP_ABORT       = 0x0;
[21:06:39.806]        // -> [SW_DP_ABORT <= 0x00000000]
[21:06:39.806]      __var DP_CTRL_STAT      = 0x4;
[21:06:39.806]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:06:39.806]      __var DP_SELECT         = 0x8;
[21:06:39.806]        // -> [DP_SELECT <= 0x00000008]
[21:06:39.806]      __var powered_down      = 0;
[21:06:39.806]        // -> [powered_down <= 0x00000000]
[21:06:39.806]      WriteDP(DP_SELECT, 0x00000000);
[21:06:39.806]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:06:39.806]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:06:39.806]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:06:39.806]        // -> [powered_down <= 0x00000001]
[21:06:39.806]    </block>
[21:06:39.806]    <control if="powered_down" while="" timeout="0" info="">
[21:06:39.806]      // if-block "powered_down"
[21:06:39.813]        // =>  TRUE
[21:06:39.813]      <block atomic="false" info="">
[21:06:39.813]        Message(0, "Debug/System power-up request sent");
[21:06:39.813]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:06:39.813]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:06:39.813]      </block>
[21:06:39.813]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:06:39.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:06:39.813]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:06:39.813]        // while-condition  =>  FALSE
[21:06:39.813]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:06:39.813]      </control>
[21:06:39.813]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:06:39.813]        // if-block "(__protocol & 0xFFFF) == 1"
[21:06:39.813]          // =>  FALSE
[21:06:39.813]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:06:39.813]      </control>
[21:06:39.813]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:06:39.813]        // if-block "(__protocol & 0xFFFF) == 2"
[21:06:39.813]          // =>  TRUE
[21:06:39.813]        <block atomic="false" info="">
[21:06:39.813]          Message(0, "executing SWD power up");
[21:06:39.813]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:06:39.823]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:06:39.823]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:06:39.823]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:06:39.823]        </block>
[21:06:39.823]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:06:39.823]      </control>
[21:06:39.823]      // end if-block "powered_down"
[21:06:39.823]    </control>
[21:06:39.823]    <block atomic="false" info="">
[21:06:39.823]      __var DEBUG_PORT_VAL    = 0;
[21:06:39.823]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:06:39.823]      __var ACCESS_POINT_VAL  = 0;
[21:06:39.823]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:06:39.823]      __ap = 1; 
[21:06:39.823]        // -> [__ap <= 0x00000001]
[21:06:39.823]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:06:39.823]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:06:39.833]      __ap = 4;
[21:06:39.833]        // -> [__ap <= 0x00000004]
[21:06:39.833]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:06:39.833]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:06:39.833]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:06:39.833]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:06:39.833]    </block>
[21:06:39.833]    <block atomic="false" info="">
[21:06:39.833]      __var nReset = 0x80;
[21:06:39.833]        // -> [nReset <= 0x00000080]
[21:06:39.833]      __var canReadPins = 0;
[21:06:39.833]        // -> [canReadPins <= 0x00000000]
[21:06:39.833]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:06:39.833]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:06:39.833]        // -> [canReadPins <= 0x00000001]
[21:06:39.833]    </block>
[21:06:39.833]    <control if="" while="1" timeout="200" info="">
[21:06:39.833]      // while "1"  (timeout="200")
[21:06:39.833]      // while-condition  =>  TRUE
[21:06:39.833]      // while "1"  (timeout="200")
[21:06:39.833]      // while-condition  =>  TRUE
[21:06:39.833]      // while "1"  (timeout="200")
[21:06:39.833]      // while-condition  =>  TRUE
[21:06:39.833]      // while "1"  (timeout="200")
[21:06:39.833]      // while-condition  =>  TRUE
[21:06:39.843]      // while "1"  (timeout="200")
[21:06:39.843]      // while  =>  TIMEOUT
[21:06:39.843]      // end while "1"
[21:06:39.843]    </control>
[21:06:39.843]    <control if="canReadPins" while="" timeout="0" info="">
[21:06:39.843]      // if-block "canReadPins"
[21:06:39.843]        // =>  TRUE
[21:06:39.843]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:06:39.843]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:06:39.853]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:06:39.853]        // while-condition  =>  FALSE
[21:06:39.853]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:06:39.853]      </control>
[21:06:39.853]      // end if-block "canReadPins"
[21:06:39.853]    </control>
[21:06:39.853]    <control if="!canReadPins" while="" timeout="0" info="">
[21:06:39.853]      // if-block "!canReadPins"
[21:06:39.853]        // =>  FALSE
[21:06:39.853]      // skip if-block "!canReadPins"
[21:06:39.853]    </control>
[21:06:39.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:06:39.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:06:39.853]        // =>  TRUE
[21:06:39.853]      <block atomic="false" info="">
[21:06:39.853]        WriteAP(0x00, 0x190008);
[21:06:39.853]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:06:39.853]        WriteAP(0xF0, 0x01);
[21:06:39.853]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:06:39.853]      </block>
[21:06:39.853]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:06:39.853]    </control>
[21:06:39.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:06:39.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:06:39.853]        // =>  FALSE
[21:06:39.853]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:06:39.853]    </control>
[21:06:39.853]    <block atomic="false" info="">
[21:06:39.853]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:06:39.863]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:06:39.863]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:06:39.863]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:06:39.863]      __ap = 0; //lets make sure we reset the access point selection
[21:06:39.863]        // -> [__ap <= 0x00000000]
[21:06:39.863]    </block>
[21:06:39.863]  </sequence>
[21:06:39.863]  
[21:06:39.894]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:06:39.894]  
[21:06:39.895]  <debugvars>
[21:06:39.895]    // Pre-defined
[21:06:39.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:06:39.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:06:39.895]    __dp=0x00000000
[21:06:39.895]    __ap=0x00000000
[21:06:39.895]    __traceout=0x00000000      (Trace Disabled)
[21:06:39.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:06:39.895]    __FlashAddr=0x00000000
[21:06:39.895]    __FlashLen=0x00000000
[21:06:39.895]    __FlashArg=0x00000000
[21:06:39.895]    __FlashOp=0x00000000
[21:06:39.895]    __Result=0x00000000
[21:06:39.895]  </debugvars>
[21:06:39.895]  
[21:06:39.895]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:06:39.895]    <block atomic="false" info="">
[21:06:39.895]      __var deviceID = 0;
[21:06:39.895]        // -> [deviceID <= 0x00000000]
[21:06:39.895]      __var version = 0;
[21:06:39.895]        // -> [version <= 0x00000000]
[21:06:39.895]      __var partNum = 0;
[21:06:39.895]        // -> [partNum <= 0x00000000]
[21:06:39.895]      __var manuf = 0;
[21:06:39.895]        // -> [manuf <= 0x00000000]
[21:06:39.895]      __var isMSPM0G1X0X_G3X0X = 0;
[21:06:39.895]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:06:39.895]      __var isProduction = 0;
[21:06:39.895]        // -> [isProduction <= 0x00000000]
[21:06:39.895]      __var continueId = 0;
[21:06:39.895]        // -> [continueId <= 0x00000000]
[21:06:39.895]      deviceID =   Read32(0x41C40004);
[21:06:39.903]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:06:39.903]        // -> [deviceID <= 0x2BB8802F]
[21:06:39.903]      version = deviceID >> 28;
[21:06:39.903]        // -> [version <= 0x00000002]
[21:06:39.903]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:06:39.903]        // -> [partNum <= 0x0000BB88]
[21:06:39.903]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:06:39.903]        // -> [manuf <= 0x00000017]
[21:06:39.903]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:06:39.903]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:06:39.903]      isProduction = (version > 0);
[21:06:39.903]        // -> [isProduction <= 0x00000001]
[21:06:39.903]    </block>
[21:06:39.903]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:06:39.903]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:06:39.903]        // =>  FALSE
[21:06:39.903]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:06:39.903]    </control>
[21:06:39.903]    <control if="continueId == 4" while="" timeout="0" info="">
[21:06:39.903]      // if-block "continueId == 4"
[21:06:39.903]        // =>  FALSE
[21:06:39.903]      // skip if-block "continueId == 4"
[21:06:39.903]    </control>
[21:06:39.903]    <control if="!isProduction" while="" timeout="0" info="">
[21:06:39.903]      // if-block "!isProduction"
[21:06:39.903]        // =>  FALSE
[21:06:39.903]      // skip if-block "!isProduction"
[21:06:39.903]    </control>
[21:06:39.903]  </sequence>
[21:06:39.903]  
[21:21:46.675]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:21:46.675]  
[21:21:46.687]  <debugvars>
[21:21:46.687]    // Pre-defined
[21:21:46.687]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:46.687]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:46.687]    __dp=0x00000000
[21:21:46.687]    __ap=0x00000000
[21:21:46.687]    __traceout=0x00000000      (Trace Disabled)
[21:21:46.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:46.687]    __FlashAddr=0x00000000
[21:21:46.687]    __FlashLen=0x00000000
[21:21:46.687]    __FlashArg=0x00000000
[21:21:46.687]    __FlashOp=0x00000000
[21:21:46.687]    __Result=0x00000000
[21:21:46.687]  </debugvars>
[21:21:46.687]  
[21:21:46.687]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:21:46.687]    <block atomic="false" info="">
[21:21:46.687]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:21:46.687]        // -> [isSWJ <= 0x00000001]
[21:21:46.687]      __var hasDormant = __protocol & 0x00020000;
[21:21:46.687]        // -> [hasDormant <= 0x00000000]
[21:21:46.687]      __var protType   = __protocol & 0x0000FFFF;
[21:21:46.687]        // -> [protType <= 0x00000002]
[21:21:46.687]    </block>
[21:21:46.687]    <control if="protType == 1" while="" timeout="0" info="">
[21:21:46.687]      // if-block "protType == 1"
[21:21:46.687]        // =>  FALSE
[21:21:46.687]      // skip if-block "protType == 1"
[21:21:46.687]    </control>
[21:21:46.687]    <control if="protType == 2" while="" timeout="0" info="">
[21:21:46.687]      // if-block "protType == 2"
[21:21:46.687]        // =>  TRUE
[21:21:46.687]      <control if="isSWJ" while="" timeout="0" info="">
[21:21:46.687]        // if-block "isSWJ"
[21:21:46.687]          // =>  TRUE
[21:21:46.687]        <control if="hasDormant" while="" timeout="0" info="">
[21:21:46.687]          // if-block "hasDormant"
[21:21:46.687]            // =>  FALSE
[21:21:46.687]          // skip if-block "hasDormant"
[21:21:46.687]        </control>
[21:21:46.687]        <control if="!hasDormant" while="" timeout="0" info="">
[21:21:46.687]          // if-block "!hasDormant"
[21:21:46.687]            // =>  TRUE
[21:21:46.687]          <block atomic="false" info="">
[21:21:46.687]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:21:46.687]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:46.687]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:21:46.695]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:21:46.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:21:46.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:46.697]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:21:46.697]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:21:46.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:21:46.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:46.697]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:21:46.697]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:21:46.697]          </block>
[21:21:46.697]          // end if-block "!hasDormant"
[21:21:46.697]        </control>
[21:21:46.697]        // end if-block "isSWJ"
[21:21:46.697]      </control>
[21:21:46.697]      <control if="!isSWJ" while="" timeout="0" info="">
[21:21:46.697]        // if-block "!isSWJ"
[21:21:46.697]          // =>  FALSE
[21:21:46.697]        // skip if-block "!isSWJ"
[21:21:46.697]      </control>
[21:21:46.697]      <block atomic="false" info="">
[21:21:46.697]        ReadDP(0x0);
[21:21:46.705]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:21:46.705]      </block>
[21:21:46.705]      // end if-block "protType == 2"
[21:21:46.705]    </control>
[21:21:46.705]  </sequence>
[21:21:46.705]  
[21:21:46.705]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:21:46.705]  
[21:21:46.705]  <debugvars>
[21:21:46.705]    // Pre-defined
[21:21:46.705]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:46.705]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:46.705]    __dp=0x00000000
[21:21:46.705]    __ap=0x00000000
[21:21:46.705]    __traceout=0x00000000      (Trace Disabled)
[21:21:46.705]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:46.705]    __FlashAddr=0x00000000
[21:21:46.705]    __FlashLen=0x00000000
[21:21:46.705]    __FlashArg=0x00000000
[21:21:46.705]    __FlashOp=0x00000000
[21:21:46.705]    __Result=0x00000000
[21:21:46.705]  </debugvars>
[21:21:46.705]  
[21:21:46.705]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:21:46.705]    <block atomic="false" info="">
[21:21:46.705]      __var SW_DP_ABORT       = 0x0;
[21:21:46.705]        // -> [SW_DP_ABORT <= 0x00000000]
[21:21:46.705]      __var DP_CTRL_STAT      = 0x4;
[21:21:46.705]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:21:46.705]      __var DP_SELECT         = 0x8;
[21:21:46.705]        // -> [DP_SELECT <= 0x00000008]
[21:21:46.705]      __var powered_down      = 0;
[21:21:46.705]        // -> [powered_down <= 0x00000000]
[21:21:46.705]      WriteDP(DP_SELECT, 0x00000000);
[21:21:46.705]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:21:46.705]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:21:46.705]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:21:46.715]        // -> [powered_down <= 0x00000001]
[21:21:46.715]    </block>
[21:21:46.715]    <control if="powered_down" while="" timeout="0" info="">
[21:21:46.715]      // if-block "powered_down"
[21:21:46.715]        // =>  TRUE
[21:21:46.715]      <block atomic="false" info="">
[21:21:46.715]        Message(0, "Debug/System power-up request sent");
[21:21:46.719]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:21:46.719]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:21:46.719]      </block>
[21:21:46.719]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:21:46.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:21:46.719]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:21:46.719]        // while-condition  =>  FALSE
[21:21:46.719]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:21:46.719]      </control>
[21:21:46.719]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:21:46.719]        // if-block "(__protocol & 0xFFFF) == 1"
[21:21:46.719]          // =>  FALSE
[21:21:46.719]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:21:46.719]      </control>
[21:21:46.719]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:21:46.719]        // if-block "(__protocol & 0xFFFF) == 2"
[21:21:46.719]          // =>  TRUE
[21:21:46.719]        <block atomic="false" info="">
[21:21:46.719]          Message(0, "executing SWD power up");
[21:21:46.728]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:21:46.728]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:21:46.728]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:21:46.736]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:21:46.736]        </block>
[21:21:46.736]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:21:46.736]      </control>
[21:21:46.736]      // end if-block "powered_down"
[21:21:46.736]    </control>
[21:21:46.736]    <block atomic="false" info="">
[21:21:46.736]      __var DEBUG_PORT_VAL    = 0;
[21:21:46.736]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:21:46.736]      __var ACCESS_POINT_VAL  = 0;
[21:21:46.736]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:21:46.736]      __ap = 1; 
[21:21:46.736]        // -> [__ap <= 0x00000001]
[21:21:46.736]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:21:46.736]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:21:46.736]      __ap = 4;
[21:21:46.736]        // -> [__ap <= 0x00000004]
[21:21:46.736]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:21:46.736]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:21:46.736]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:21:46.746]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:21:46.748]    </block>
[21:21:46.748]    <block atomic="false" info="">
[21:21:46.748]      __var nReset = 0x80;
[21:21:46.748]        // -> [nReset <= 0x00000080]
[21:21:46.748]      __var canReadPins = 0;
[21:21:46.749]        // -> [canReadPins <= 0x00000000]
[21:21:46.749]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:21:46.749]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:21:46.749]        // -> [canReadPins <= 0x00000001]
[21:21:46.749]    </block>
[21:21:46.749]    <control if="" while="1" timeout="200" info="">
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.749]      // while "1"  (timeout="200")
[21:21:46.749]      // while-condition  =>  TRUE
[21:21:46.756]      // while "1"  (timeout="200")
[21:21:46.756]      // while  =>  TIMEOUT
[21:21:46.756]      // end while "1"
[21:21:46.756]    </control>
[21:21:46.756]    <control if="canReadPins" while="" timeout="0" info="">
[21:21:46.756]      // if-block "canReadPins"
[21:21:46.756]        // =>  TRUE
[21:21:46.756]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:21:46.756]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:21:46.767]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:21:46.767]        // while-condition  =>  FALSE
[21:21:46.767]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:21:46.767]      </control>
[21:21:46.767]      // end if-block "canReadPins"
[21:21:46.767]    </control>
[21:21:46.767]    <control if="!canReadPins" while="" timeout="0" info="">
[21:21:46.767]      // if-block "!canReadPins"
[21:21:46.767]        // =>  FALSE
[21:21:46.767]      // skip if-block "!canReadPins"
[21:21:46.767]    </control>
[21:21:46.767]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:21:46.767]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:21:46.769]        // =>  TRUE
[21:21:46.769]      <block atomic="false" info="">
[21:21:46.769]        WriteAP(0x00, 0x190008);
[21:21:46.769]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:21:46.769]        WriteAP(0xF0, 0x01);
[21:21:46.769]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:21:46.769]      </block>
[21:21:46.769]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:21:46.769]    </control>
[21:21:46.777]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:21:46.777]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:21:46.777]        // =>  FALSE
[21:21:46.777]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:21:46.777]    </control>
[21:21:46.777]    <block atomic="false" info="">
[21:21:46.777]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:21:46.778]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:21:46.778]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:21:46.778]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:21:46.784]      __ap = 0; //lets make sure we reset the access point selection
[21:21:46.784]        // -> [__ap <= 0x00000000]
[21:21:46.784]    </block>
[21:21:46.784]  </sequence>
[21:21:46.784]  
[21:21:46.810]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:21:46.810]  
[21:21:46.810]  <debugvars>
[21:21:46.810]    // Pre-defined
[21:21:46.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:46.810]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:46.810]    __dp=0x00000000
[21:21:46.810]    __ap=0x00000000
[21:21:46.810]    __traceout=0x00000000      (Trace Disabled)
[21:21:46.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:46.810]    __FlashAddr=0x00000000
[21:21:46.810]    __FlashLen=0x00000000
[21:21:46.810]    __FlashArg=0x00000000
[21:21:46.810]    __FlashOp=0x00000000
[21:21:46.810]    __Result=0x00000000
[21:21:46.810]  </debugvars>
[21:21:46.810]  
[21:21:46.810]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:21:46.810]    <block atomic="false" info="">
[21:21:46.810]      __var deviceID = 0;
[21:21:46.810]        // -> [deviceID <= 0x00000000]
[21:21:46.810]      __var version = 0;
[21:21:46.810]        // -> [version <= 0x00000000]
[21:21:46.810]      __var partNum = 0;
[21:21:46.810]        // -> [partNum <= 0x00000000]
[21:21:46.810]      __var manuf = 0;
[21:21:46.810]        // -> [manuf <= 0x00000000]
[21:21:46.810]      __var isMSPM0G1X0X_G3X0X = 0;
[21:21:46.810]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:21:46.810]      __var isProduction = 0;
[21:21:46.810]        // -> [isProduction <= 0x00000000]
[21:21:46.815]      __var continueId = 0;
[21:21:46.815]        // -> [continueId <= 0x00000000]
[21:21:46.815]      deviceID =   Read32(0x41C40004);
[21:21:46.822]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:21:46.822]        // -> [deviceID <= 0x2BB8802F]
[21:21:46.822]      version = deviceID >> 28;
[21:21:46.822]        // -> [version <= 0x00000002]
[21:21:46.822]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:21:46.822]        // -> [partNum <= 0x0000BB88]
[21:21:46.822]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:21:46.822]        // -> [manuf <= 0x00000017]
[21:21:46.822]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:21:46.822]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:21:46.822]      isProduction = (version > 0);
[21:21:46.822]        // -> [isProduction <= 0x00000001]
[21:21:46.822]    </block>
[21:21:46.822]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:21:46.822]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:21:46.822]        // =>  FALSE
[21:21:46.822]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:21:46.822]    </control>
[21:21:46.822]    <control if="continueId == 4" while="" timeout="0" info="">
[21:21:46.822]      // if-block "continueId == 4"
[21:21:46.822]        // =>  FALSE
[21:21:46.822]      // skip if-block "continueId == 4"
[21:21:46.822]    </control>
[21:21:46.822]    <control if="!isProduction" while="" timeout="0" info="">
[21:21:46.822]      // if-block "!isProduction"
[21:21:46.822]        // =>  FALSE
[21:21:46.822]      // skip if-block "!isProduction"
[21:21:46.822]    </control>
[21:21:46.822]  </sequence>
[21:21:46.822]  
[21:32:06.420]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:32:06.420]  
[21:32:06.420]  <debugvars>
[21:32:06.420]    // Pre-defined
[21:32:06.420]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:06.420]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:06.427]    __dp=0x00000000
[21:32:06.427]    __ap=0x00000000
[21:32:06.427]    __traceout=0x00000000      (Trace Disabled)
[21:32:06.427]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:06.427]    __FlashAddr=0x00000000
[21:32:06.427]    __FlashLen=0x00000000
[21:32:06.427]    __FlashArg=0x00000000
[21:32:06.427]    __FlashOp=0x00000000
[21:32:06.427]    __Result=0x00000000
[21:32:06.427]  </debugvars>
[21:32:06.427]  
[21:32:06.427]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:32:06.427]    <block atomic="false" info="">
[21:32:06.427]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:32:06.427]        // -> [isSWJ <= 0x00000001]
[21:32:06.427]      __var hasDormant = __protocol & 0x00020000;
[21:32:06.427]        // -> [hasDormant <= 0x00000000]
[21:32:06.427]      __var protType   = __protocol & 0x0000FFFF;
[21:32:06.427]        // -> [protType <= 0x00000002]
[21:32:06.427]    </block>
[21:32:06.427]    <control if="protType == 1" while="" timeout="0" info="">
[21:32:06.427]      // if-block "protType == 1"
[21:32:06.427]        // =>  FALSE
[21:32:06.427]      // skip if-block "protType == 1"
[21:32:06.427]    </control>
[21:32:06.427]    <control if="protType == 2" while="" timeout="0" info="">
[21:32:06.427]      // if-block "protType == 2"
[21:32:06.427]        // =>  TRUE
[21:32:06.427]      <control if="isSWJ" while="" timeout="0" info="">
[21:32:06.427]        // if-block "isSWJ"
[21:32:06.427]          // =>  TRUE
[21:32:06.427]        <control if="hasDormant" while="" timeout="0" info="">
[21:32:06.427]          // if-block "hasDormant"
[21:32:06.427]            // =>  FALSE
[21:32:06.427]          // skip if-block "hasDormant"
[21:32:06.427]        </control>
[21:32:06.427]        <control if="!hasDormant" while="" timeout="0" info="">
[21:32:06.427]          // if-block "!hasDormant"
[21:32:06.427]            // =>  TRUE
[21:32:06.427]          <block atomic="false" info="">
[21:32:06.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:32:06.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:06.427]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:32:06.427]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:32:06.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:32:06.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:06.427]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:32:06.437]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:32:06.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:32:06.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:06.437]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:32:06.437]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:32:06.437]          </block>
[21:32:06.437]          // end if-block "!hasDormant"
[21:32:06.437]        </control>
[21:32:06.437]        // end if-block "isSWJ"
[21:32:06.437]      </control>
[21:32:06.437]      <control if="!isSWJ" while="" timeout="0" info="">
[21:32:06.437]        // if-block "!isSWJ"
[21:32:06.437]          // =>  FALSE
[21:32:06.437]        // skip if-block "!isSWJ"
[21:32:06.437]      </control>
[21:32:06.437]      <block atomic="false" info="">
[21:32:06.437]        ReadDP(0x0);
[21:32:06.447]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:32:06.447]      </block>
[21:32:06.447]      // end if-block "protType == 2"
[21:32:06.447]    </control>
[21:32:06.447]  </sequence>
[21:32:06.447]  
[21:32:06.447]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:32:06.447]  
[21:32:06.447]  <debugvars>
[21:32:06.447]    // Pre-defined
[21:32:06.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:06.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:06.457]    __dp=0x00000000
[21:32:06.457]    __ap=0x00000000
[21:32:06.457]    __traceout=0x00000000      (Trace Disabled)
[21:32:06.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:06.457]    __FlashAddr=0x00000000
[21:32:06.457]    __FlashLen=0x00000000
[21:32:06.457]    __FlashArg=0x00000000
[21:32:06.457]    __FlashOp=0x00000000
[21:32:06.457]    __Result=0x00000000
[21:32:06.457]  </debugvars>
[21:32:06.457]  
[21:32:06.457]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:32:06.457]    <block atomic="false" info="">
[21:32:06.457]      __var SW_DP_ABORT       = 0x0;
[21:32:06.457]        // -> [SW_DP_ABORT <= 0x00000000]
[21:32:06.457]      __var DP_CTRL_STAT      = 0x4;
[21:32:06.457]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:32:06.457]      __var DP_SELECT         = 0x8;
[21:32:06.457]        // -> [DP_SELECT <= 0x00000008]
[21:32:06.457]      __var powered_down      = 0;
[21:32:06.457]        // -> [powered_down <= 0x00000000]
[21:32:06.457]      WriteDP(DP_SELECT, 0x00000000);
[21:32:06.457]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:32:06.457]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:32:06.457]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:32:06.457]        // -> [powered_down <= 0x00000001]
[21:32:06.457]    </block>
[21:32:06.457]    <control if="powered_down" while="" timeout="0" info="">
[21:32:06.457]      // if-block "powered_down"
[21:32:06.457]        // =>  TRUE
[21:32:06.457]      <block atomic="false" info="">
[21:32:06.457]        Message(0, "Debug/System power-up request sent");
[21:32:06.467]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:32:06.467]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:32:06.467]      </block>
[21:32:06.467]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:32:06.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:32:06.477]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:32:06.477]        // while-condition  =>  FALSE
[21:32:06.477]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:32:06.477]      </control>
[21:32:06.477]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:32:06.477]        // if-block "(__protocol & 0xFFFF) == 1"
[21:32:06.477]          // =>  FALSE
[21:32:06.477]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:32:06.477]      </control>
[21:32:06.477]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:32:06.477]        // if-block "(__protocol & 0xFFFF) == 2"
[21:32:06.477]          // =>  TRUE
[21:32:06.477]        <block atomic="false" info="">
[21:32:06.477]          Message(0, "executing SWD power up");
[21:32:06.477]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:32:06.477]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:32:06.477]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:32:06.477]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:32:06.477]        </block>
[21:32:06.477]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:32:06.477]      </control>
[21:32:06.477]      // end if-block "powered_down"
[21:32:06.477]    </control>
[21:32:06.477]    <block atomic="false" info="">
[21:32:06.477]      __var DEBUG_PORT_VAL    = 0;
[21:32:06.477]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:32:06.477]      __var ACCESS_POINT_VAL  = 0;
[21:32:06.477]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:32:06.477]      __ap = 1; 
[21:32:06.487]        // -> [__ap <= 0x00000001]
[21:32:06.487]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:32:06.487]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:32:06.487]      __ap = 4;
[21:32:06.487]        // -> [__ap <= 0x00000004]
[21:32:06.487]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:06.497]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:32:06.497]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:32:06.497]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:06.497]    </block>
[21:32:06.497]    <block atomic="false" info="">
[21:32:06.497]      __var nReset = 0x80;
[21:32:06.497]        // -> [nReset <= 0x00000080]
[21:32:06.497]      __var canReadPins = 0;
[21:32:06.497]        // -> [canReadPins <= 0x00000000]
[21:32:06.497]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:32:06.497]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:32:06.497]        // -> [canReadPins <= 0x00000001]
[21:32:06.497]    </block>
[21:32:06.497]    <control if="" while="1" timeout="200" info="">
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.497]      // while "1"  (timeout="200")
[21:32:06.497]      // while-condition  =>  TRUE
[21:32:06.507]      // while "1"  (timeout="200")
[21:32:06.507]      // while  =>  TIMEOUT
[21:32:06.507]      // end while "1"
[21:32:06.507]    </control>
[21:32:06.507]    <control if="canReadPins" while="" timeout="0" info="">
[21:32:06.507]      // if-block "canReadPins"
[21:32:06.507]        // =>  TRUE
[21:32:06.507]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:32:06.507]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:32:06.507]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:32:06.507]        // while-condition  =>  FALSE
[21:32:06.507]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:32:06.507]      </control>
[21:32:06.507]      // end if-block "canReadPins"
[21:32:06.507]    </control>
[21:32:06.507]    <control if="!canReadPins" while="" timeout="0" info="">
[21:32:06.507]      // if-block "!canReadPins"
[21:32:06.507]        // =>  FALSE
[21:32:06.507]      // skip if-block "!canReadPins"
[21:32:06.507]    </control>
[21:32:06.507]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:32:06.507]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:06.507]        // =>  TRUE
[21:32:06.507]      <block atomic="false" info="">
[21:32:06.507]        WriteAP(0x00, 0x190008);
[21:32:06.507]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:06.507]        WriteAP(0xF0, 0x01);
[21:32:06.517]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:06.517]      </block>
[21:32:06.517]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:06.517]    </control>
[21:32:06.517]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:32:06.517]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:06.517]        // =>  FALSE
[21:32:06.517]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:06.517]    </control>
[21:32:06.517]    <block atomic="false" info="">
[21:32:06.517]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:06.517]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:32:06.517]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:32:06.517]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:06.517]      __ap = 0; //lets make sure we reset the access point selection
[21:32:06.517]        // -> [__ap <= 0x00000000]
[21:32:06.517]    </block>
[21:32:06.517]  </sequence>
[21:32:06.517]  
[21:32:06.547]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:32:06.547]  
[21:32:06.547]  <debugvars>
[21:32:06.547]    // Pre-defined
[21:32:06.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:06.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:32:06.547]    __dp=0x00000000
[21:32:06.547]    __ap=0x00000000
[21:32:06.547]    __traceout=0x00000000      (Trace Disabled)
[21:32:06.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:06.547]    __FlashAddr=0x00000000
[21:32:06.547]    __FlashLen=0x00000000
[21:32:06.547]    __FlashArg=0x00000000
[21:32:06.547]    __FlashOp=0x00000000
[21:32:06.547]    __Result=0x00000000
[21:32:06.547]  </debugvars>
[21:32:06.547]  
[21:32:06.547]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:32:06.547]    <block atomic="false" info="">
[21:32:06.547]      __var deviceID = 0;
[21:32:06.547]        // -> [deviceID <= 0x00000000]
[21:32:06.547]      __var version = 0;
[21:32:06.547]        // -> [version <= 0x00000000]
[21:32:06.547]      __var partNum = 0;
[21:32:06.557]        // -> [partNum <= 0x00000000]
[21:32:06.558]      __var manuf = 0;
[21:32:06.558]        // -> [manuf <= 0x00000000]
[21:32:06.558]      __var isMSPM0G1X0X_G3X0X = 0;
[21:32:06.558]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:32:06.558]      __var isProduction = 0;
[21:32:06.558]        // -> [isProduction <= 0x00000000]
[21:32:06.558]      __var continueId = 0;
[21:32:06.558]        // -> [continueId <= 0x00000000]
[21:32:06.558]      deviceID =   Read32(0x41C40004);
[21:32:06.567]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:32:06.567]        // -> [deviceID <= 0x2BB8802F]
[21:32:06.567]      version = deviceID >> 28;
[21:32:06.567]        // -> [version <= 0x00000002]
[21:32:06.567]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:32:06.567]        // -> [partNum <= 0x0000BB88]
[21:32:06.567]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:32:06.568]        // -> [manuf <= 0x00000017]
[21:32:06.568]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:32:06.568]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:32:06.568]      isProduction = (version > 0);
[21:32:06.568]        // -> [isProduction <= 0x00000001]
[21:32:06.568]    </block>
[21:32:06.568]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:32:06.568]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:32:06.568]        // =>  FALSE
[21:32:06.568]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:32:06.568]    </control>
[21:32:06.568]    <control if="continueId == 4" while="" timeout="0" info="">
[21:32:06.568]      // if-block "continueId == 4"
[21:32:06.568]        // =>  FALSE
[21:32:06.568]      // skip if-block "continueId == 4"
[21:32:06.568]    </control>
[21:32:06.568]    <control if="!isProduction" while="" timeout="0" info="">
[21:32:06.568]      // if-block "!isProduction"
[21:32:06.570]        // =>  FALSE
[21:32:06.570]      // skip if-block "!isProduction"
[21:32:06.570]    </control>
[21:32:06.570]  </sequence>
[21:32:06.570]  
[22:46:29.416]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:46:29.416]  
[22:46:29.416]  <debugvars>
[22:46:29.416]    // Pre-defined
[22:46:29.416]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:29.416]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:29.416]    __dp=0x00000000
[22:46:29.416]    __ap=0x00000000
[22:46:29.416]    __traceout=0x00000000      (Trace Disabled)
[22:46:29.416]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:29.416]    __FlashAddr=0x00000000
[22:46:29.416]    __FlashLen=0x00000000
[22:46:29.419]    __FlashArg=0x00000000
[22:46:29.419]    __FlashOp=0x00000000
[22:46:29.419]    __Result=0x00000000
[22:46:29.419]  </debugvars>
[22:46:29.419]  
[22:46:29.419]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:46:29.419]    <block atomic="false" info="">
[22:46:29.419]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:46:29.419]        // -> [isSWJ <= 0x00000001]
[22:46:29.420]      __var hasDormant = __protocol & 0x00020000;
[22:46:29.420]        // -> [hasDormant <= 0x00000000]
[22:46:29.420]      __var protType   = __protocol & 0x0000FFFF;
[22:46:29.420]        // -> [protType <= 0x00000002]
[22:46:29.420]    </block>
[22:46:29.420]    <control if="protType == 1" while="" timeout="0" info="">
[22:46:29.420]      // if-block "protType == 1"
[22:46:29.420]        // =>  FALSE
[22:46:29.420]      // skip if-block "protType == 1"
[22:46:29.420]    </control>
[22:46:29.420]    <control if="protType == 2" while="" timeout="0" info="">
[22:46:29.420]      // if-block "protType == 2"
[22:46:29.420]        // =>  TRUE
[22:46:29.420]      <control if="isSWJ" while="" timeout="0" info="">
[22:46:29.420]        // if-block "isSWJ"
[22:46:29.420]          // =>  TRUE
[22:46:29.420]        <control if="hasDormant" while="" timeout="0" info="">
[22:46:29.420]          // if-block "hasDormant"
[22:46:29.420]            // =>  FALSE
[22:46:29.420]          // skip if-block "hasDormant"
[22:46:29.420]        </control>
[22:46:29.420]        <control if="!hasDormant" while="" timeout="0" info="">
[22:46:29.420]          // if-block "!hasDormant"
[22:46:29.420]            // =>  TRUE
[22:46:29.420]          <block atomic="false" info="">
[22:46:29.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:46:29.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:29.425]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:46:29.427]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:46:29.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:46:29.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:29.427]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:46:29.430]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:46:29.430]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:46:29.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:29.430]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:46:29.438]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:46:29.438]          </block>
[22:46:29.438]          // end if-block "!hasDormant"
[22:46:29.438]        </control>
[22:46:29.438]        // end if-block "isSWJ"
[22:46:29.438]      </control>
[22:46:29.438]      <control if="!isSWJ" while="" timeout="0" info="">
[22:46:29.438]        // if-block "!isSWJ"
[22:46:29.438]          // =>  FALSE
[22:46:29.438]        // skip if-block "!isSWJ"
[22:46:29.440]      </control>
[22:46:29.440]      <block atomic="false" info="">
[22:46:29.440]        ReadDP(0x0);
[22:46:29.441]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:46:29.441]      </block>
[22:46:29.441]      // end if-block "protType == 2"
[22:46:29.441]    </control>
[22:46:29.441]  </sequence>
[22:46:29.441]  
[22:46:29.443]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:46:29.443]  
[22:46:29.443]  <debugvars>
[22:46:29.443]    // Pre-defined
[22:46:29.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:29.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:29.443]    __dp=0x00000000
[22:46:29.445]    __ap=0x00000000
[22:46:29.445]    __traceout=0x00000000      (Trace Disabled)
[22:46:29.445]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:29.445]    __FlashAddr=0x00000000
[22:46:29.445]    __FlashLen=0x00000000
[22:46:29.445]    __FlashArg=0x00000000
[22:46:29.445]    __FlashOp=0x00000000
[22:46:29.445]    __Result=0x00000000
[22:46:29.445]  </debugvars>
[22:46:29.445]  
[22:46:29.445]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:46:29.447]    <block atomic="false" info="">
[22:46:29.447]      __var SW_DP_ABORT       = 0x0;
[22:46:29.447]        // -> [SW_DP_ABORT <= 0x00000000]
[22:46:29.447]      __var DP_CTRL_STAT      = 0x4;
[22:46:29.447]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:46:29.447]      __var DP_SELECT         = 0x8;
[22:46:29.447]        // -> [DP_SELECT <= 0x00000008]
[22:46:29.447]      __var powered_down      = 0;
[22:46:29.447]        // -> [powered_down <= 0x00000000]
[22:46:29.447]      WriteDP(DP_SELECT, 0x00000000);
[22:46:29.451]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:46:29.451]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:46:29.452]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:46:29.452]        // -> [powered_down <= 0x00000001]
[22:46:29.452]    </block>
[22:46:29.452]    <control if="powered_down" while="" timeout="0" info="">
[22:46:29.452]      // if-block "powered_down"
[22:46:29.452]        // =>  TRUE
[22:46:29.452]      <block atomic="false" info="">
[22:46:29.452]        Message(0, "Debug/System power-up request sent");
[22:46:29.456]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:46:29.459]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:46:29.459]      </block>
[22:46:29.459]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:46:29.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.461]        // while-condition  =>  TRUE
[22:46:29.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.462]        // while-condition  =>  TRUE
[22:46:29.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.462]        // while-condition  =>  TRUE
[22:46:29.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.462]        // while-condition  =>  TRUE
[22:46:29.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.462]        // while-condition  =>  TRUE
[22:46:29.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.471]        // while-condition  =>  TRUE
[22:46:29.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.471]        // while-condition  =>  TRUE
[22:46:29.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.471]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.471]        // while-condition  =>  TRUE
[22:46:29.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.481]        // while-condition  =>  TRUE
[22:46:29.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.483]        // while-condition  =>  TRUE
[22:46:29.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.483]        // while-condition  =>  TRUE
[22:46:29.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.494]        // while-condition  =>  TRUE
[22:46:29.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.494]        // while-condition  =>  TRUE
[22:46:29.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.494]        // while-condition  =>  TRUE
[22:46:29.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.502]        // while-condition  =>  TRUE
[22:46:29.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.502]        // while-condition  =>  TRUE
[22:46:29.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.502]        // while-condition  =>  TRUE
[22:46:29.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.502]        // while-condition  =>  TRUE
[22:46:29.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.512]        // while-condition  =>  TRUE
[22:46:29.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.512]        // while-condition  =>  TRUE
[22:46:29.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.512]        // while-condition  =>  TRUE
[22:46:29.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.512]        // while-condition  =>  TRUE
[22:46:29.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.512]        // while-condition  =>  TRUE
[22:46:29.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.522]        // while-condition  =>  TRUE
[22:46:29.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.522]        // while-condition  =>  TRUE
[22:46:29.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.522]        // while-condition  =>  TRUE
[22:46:29.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.522]        // while-condition  =>  TRUE
[22:46:29.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.532]        // while-condition  =>  TRUE
[22:46:29.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.534]        // while-condition  =>  TRUE
[22:46:29.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.534]        // while-condition  =>  TRUE
[22:46:29.534]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.544]        // while-condition  =>  TRUE
[22:46:29.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.544]        // while-condition  =>  TRUE
[22:46:29.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.544]        // while-condition  =>  TRUE
[22:46:29.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.544]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.544]        // while-condition  =>  TRUE
[22:46:29.544]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.552]        // while-condition  =>  TRUE
[22:46:29.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.552]        // while-condition  =>  TRUE
[22:46:29.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.562]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.564]        // while-condition  =>  TRUE
[22:46:29.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.564]        // while-condition  =>  TRUE
[22:46:29.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.572]        // while-condition  =>  TRUE
[22:46:29.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.574]        // while-condition  =>  TRUE
[22:46:29.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.574]        // while-condition  =>  TRUE
[22:46:29.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.574]        // while-condition  =>  TRUE
[22:46:29.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.574]        // while-condition  =>  TRUE
[22:46:29.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.574]        // while-condition  =>  TRUE
[22:46:29.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.584]        // while-condition  =>  TRUE
[22:46:29.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.584]        // while-condition  =>  TRUE
[22:46:29.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.584]        // while-condition  =>  TRUE
[22:46:29.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.584]        // while-condition  =>  TRUE
[22:46:29.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.593]        // while-condition  =>  TRUE
[22:46:29.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.593]        // while-condition  =>  TRUE
[22:46:29.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.603]        // while-condition  =>  TRUE
[22:46:29.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.603]        // while-condition  =>  TRUE
[22:46:29.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.603]        // while-condition  =>  TRUE
[22:46:29.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.613]        // while-condition  =>  TRUE
[22:46:29.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.613]        // while-condition  =>  TRUE
[22:46:29.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.613]        // while-condition  =>  TRUE
[22:46:29.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.613]        // while-condition  =>  TRUE
[22:46:29.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.623]        // while-condition  =>  TRUE
[22:46:29.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.623]        // while-condition  =>  TRUE
[22:46:29.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.634]        // while-condition  =>  TRUE
[22:46:29.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.643]        // while-condition  =>  TRUE
[22:46:29.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.643]        // while-condition  =>  TRUE
[22:46:29.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.655]        // while-condition  =>  TRUE
[22:46:29.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.655]        // while-condition  =>  TRUE
[22:46:29.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.655]        // while-condition  =>  TRUE
[22:46:29.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.664]        // while-condition  =>  TRUE
[22:46:29.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.664]        // while-condition  =>  TRUE
[22:46:29.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.664]        // while-condition  =>  TRUE
[22:46:29.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.674]        // while-condition  =>  TRUE
[22:46:29.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.674]        // while-condition  =>  TRUE
[22:46:29.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.674]        // while-condition  =>  TRUE
[22:46:29.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.674]        // while-condition  =>  TRUE
[22:46:29.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.684]        // while-condition  =>  TRUE
[22:46:29.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.684]        // while-condition  =>  TRUE
[22:46:29.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.684]        // while-condition  =>  TRUE
[22:46:29.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.694]        // while-condition  =>  TRUE
[22:46:29.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.696]        // while-condition  =>  TRUE
[22:46:29.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.698]        // while-condition  =>  TRUE
[22:46:29.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.698]        // while-condition  =>  TRUE
[22:46:29.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.704]        // while-condition  =>  TRUE
[22:46:29.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.704]        // while-condition  =>  TRUE
[22:46:29.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.704]        // while-condition  =>  TRUE
[22:46:29.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.704]        // while-condition  =>  TRUE
[22:46:29.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.704]        // while-condition  =>  TRUE
[22:46:29.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.714]        // while-condition  =>  TRUE
[22:46:29.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.714]        // while-condition  =>  TRUE
[22:46:29.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.724]        // while-condition  =>  TRUE
[22:46:29.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.724]        // while-condition  =>  TRUE
[22:46:29.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.724]        // while-condition  =>  TRUE
[22:46:29.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.724]        // while-condition  =>  TRUE
[22:46:29.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.734]        // while-condition  =>  TRUE
[22:46:29.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.734]        // while-condition  =>  TRUE
[22:46:29.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.734]        // while-condition  =>  TRUE
[22:46:29.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.744]        // while-condition  =>  TRUE
[22:46:29.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.744]        // while-condition  =>  TRUE
[22:46:29.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.754]        // while-condition  =>  TRUE
[22:46:29.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.754]        // while-condition  =>  TRUE
[22:46:29.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.754]        // while-condition  =>  TRUE
[22:46:29.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.764]        // while-condition  =>  TRUE
[22:46:29.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.764]        // while-condition  =>  TRUE
[22:46:29.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.764]        // while-condition  =>  TRUE
[22:46:29.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.764]        // while-condition  =>  TRUE
[22:46:29.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.764]        // while-condition  =>  TRUE
[22:46:29.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.774]        // while-condition  =>  TRUE
[22:46:29.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.774]        // while-condition  =>  TRUE
[22:46:29.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.774]        // while-condition  =>  TRUE
[22:46:29.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.774]        // while-condition  =>  TRUE
[22:46:29.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.784]        // while-condition  =>  TRUE
[22:46:29.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.784]        // while-condition  =>  TRUE
[22:46:29.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.784]        // while-condition  =>  TRUE
[22:46:29.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.794]        // while-condition  =>  TRUE
[22:46:29.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.794]        // while-condition  =>  TRUE
[22:46:29.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.794]        // while-condition  =>  TRUE
[22:46:29.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.804]        // while-condition  =>  TRUE
[22:46:29.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.804]        // while-condition  =>  TRUE
[22:46:29.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.804]        // while-condition  =>  TRUE
[22:46:29.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.814]        // while-condition  =>  TRUE
[22:46:29.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.814]        // while-condition  =>  TRUE
[22:46:29.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.814]        // while-condition  =>  TRUE
[22:46:29.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.814]        // while-condition  =>  TRUE
[22:46:29.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.824]        // while-condition  =>  TRUE
[22:46:29.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.824]        // while-condition  =>  TRUE
[22:46:29.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.834]        // while-condition  =>  TRUE
[22:46:29.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.845]        // while-condition  =>  TRUE
[22:46:29.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.854]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.854]        // while-condition  =>  TRUE
[22:46:29.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.857]        // while-condition  =>  TRUE
[22:46:29.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.857]        // while-condition  =>  TRUE
[22:46:29.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.857]        // while-condition  =>  TRUE
[22:46:29.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.864]        // while-condition  =>  TRUE
[22:46:29.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.864]        // while-condition  =>  TRUE
[22:46:29.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.864]        // while-condition  =>  TRUE
[22:46:29.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.874]        // while-condition  =>  TRUE
[22:46:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.874]        // while-condition  =>  TRUE
[22:46:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.874]        // while-condition  =>  TRUE
[22:46:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.874]        // while-condition  =>  TRUE
[22:46:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.884]        // while-condition  =>  TRUE
[22:46:29.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.884]        // while-condition  =>  TRUE
[22:46:29.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.884]        // while-condition  =>  TRUE
[22:46:29.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.884]        // while-condition  =>  TRUE
[22:46:29.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.884]        // while-condition  =>  TRUE
[22:46:29.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.894]        // while-condition  =>  TRUE
[22:46:29.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.894]        // while-condition  =>  TRUE
[22:46:29.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.894]        // while-condition  =>  TRUE
[22:46:29.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.904]        // while-condition  =>  TRUE
[22:46:29.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.904]        // while-condition  =>  TRUE
[22:46:29.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.904]        // while-condition  =>  TRUE
[22:46:29.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.916]        // while-condition  =>  TRUE
[22:46:29.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.916]        // while-condition  =>  TRUE
[22:46:29.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.916]        // while-condition  =>  TRUE
[22:46:29.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.916]        // while-condition  =>  TRUE
[22:46:29.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.924]        // while-condition  =>  TRUE
[22:46:29.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.924]        // while-condition  =>  TRUE
[22:46:29.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.924]        // while-condition  =>  TRUE
[22:46:29.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.924]        // while-condition  =>  TRUE
[22:46:29.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.936]        // while-condition  =>  TRUE
[22:46:29.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.936]        // while-condition  =>  TRUE
[22:46:29.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.936]        // while-condition  =>  TRUE
[22:46:29.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.936]        // while-condition  =>  TRUE
[22:46:29.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.946]        // while-condition  =>  TRUE
[22:46:29.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.946]        // while-condition  =>  TRUE
[22:46:29.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.946]        // while-condition  =>  TRUE
[22:46:29.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.946]        // while-condition  =>  TRUE
[22:46:29.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.955]        // while-condition  =>  TRUE
[22:46:29.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.955]        // while-condition  =>  TRUE
[22:46:29.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.965]        // while-condition  =>  TRUE
[22:46:29.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.966]        // while-condition  =>  TRUE
[22:46:29.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.966]        // while-condition  =>  TRUE
[22:46:29.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.976]        // while-condition  =>  TRUE
[22:46:29.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.976]        // while-condition  =>  TRUE
[22:46:29.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.976]        // while-condition  =>  TRUE
[22:46:29.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.976]        // while-condition  =>  TRUE
[22:46:29.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.985]        // while-condition  =>  TRUE
[22:46:29.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.985]        // while-condition  =>  TRUE
[22:46:29.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.985]        // while-condition  =>  TRUE
[22:46:29.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.985]        // while-condition  =>  TRUE
[22:46:29.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.985]        // while-condition  =>  TRUE
[22:46:29.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.995]        // while-condition  =>  TRUE
[22:46:29.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.997]        // while-condition  =>  TRUE
[22:46:29.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:29.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:29.997]        // while-condition  =>  TRUE
[22:46:29.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.007]        // while-condition  =>  TRUE
[22:46:30.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.007]        // while-condition  =>  TRUE
[22:46:30.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.007]        // while-condition  =>  TRUE
[22:46:30.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.007]        // while-condition  =>  TRUE
[22:46:30.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.007]        // while-condition  =>  TRUE
[22:46:30.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.016]        // while-condition  =>  TRUE
[22:46:30.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.017]        // while-condition  =>  TRUE
[22:46:30.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.017]        // while-condition  =>  TRUE
[22:46:30.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.017]        // while-condition  =>  TRUE
[22:46:30.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.017]        // while-condition  =>  TRUE
[22:46:30.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.026]        // while-condition  =>  TRUE
[22:46:30.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.026]        // while-condition  =>  TRUE
[22:46:30.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.026]        // while-condition  =>  TRUE
[22:46:30.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.026]        // while-condition  =>  TRUE
[22:46:30.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.036]        // while-condition  =>  TRUE
[22:46:30.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.036]        // while-condition  =>  TRUE
[22:46:30.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.036]        // while-condition  =>  TRUE
[22:46:30.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.046]        // while-condition  =>  TRUE
[22:46:30.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.048]        // while-condition  =>  TRUE
[22:46:30.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.048]        // while-condition  =>  TRUE
[22:46:30.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.048]        // while-condition  =>  TRUE
[22:46:30.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.048]        // while-condition  =>  TRUE
[22:46:30.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.048]        // while-condition  =>  TRUE
[22:46:30.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.056]        // while-condition  =>  TRUE
[22:46:30.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.058]        // while-condition  =>  TRUE
[22:46:30.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.058]        // while-condition  =>  TRUE
[22:46:30.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.058]        // while-condition  =>  TRUE
[22:46:30.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.058]        // while-condition  =>  TRUE
[22:46:30.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.066]        // while-condition  =>  TRUE
[22:46:30.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.066]        // while-condition  =>  TRUE
[22:46:30.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.066]        // while-condition  =>  TRUE
[22:46:30.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.066]        // while-condition  =>  TRUE
[22:46:30.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.078]        // while-condition  =>  TRUE
[22:46:30.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.078]        // while-condition  =>  TRUE
[22:46:30.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.078]        // while-condition  =>  TRUE
[22:46:30.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.078]        // while-condition  =>  TRUE
[22:46:30.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.087]        // while-condition  =>  TRUE
[22:46:30.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.089]        // while-condition  =>  TRUE
[22:46:30.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.089]        // while-condition  =>  TRUE
[22:46:30.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.089]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.089]        // while-condition  =>  TRUE
[22:46:30.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.097]        // while-condition  =>  TRUE
[22:46:30.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.097]        // while-condition  =>  TRUE
[22:46:30.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.097]        // while-condition  =>  TRUE
[22:46:30.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.097]        // while-condition  =>  TRUE
[22:46:30.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.107]        // while-condition  =>  TRUE
[22:46:30.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.109]        // while-condition  =>  TRUE
[22:46:30.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.117]        // while-condition  =>  TRUE
[22:46:30.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.119]        // while-condition  =>  TRUE
[22:46:30.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.119]        // while-condition  =>  TRUE
[22:46:30.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.119]        // while-condition  =>  TRUE
[22:46:30.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.127]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.127]        // while-condition  =>  TRUE
[22:46:30.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.129]        // while-condition  =>  TRUE
[22:46:30.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.129]        // while-condition  =>  TRUE
[22:46:30.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.129]        // while-condition  =>  TRUE
[22:46:30.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.129]        // while-condition  =>  TRUE
[22:46:30.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.137]        // while-condition  =>  TRUE
[22:46:30.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.139]        // while-condition  =>  TRUE
[22:46:30.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.139]        // while-condition  =>  TRUE
[22:46:30.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.139]        // while-condition  =>  TRUE
[22:46:30.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.148]        // while-condition  =>  TRUE
[22:46:30.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.149]        // while-condition  =>  TRUE
[22:46:30.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.149]        // while-condition  =>  TRUE
[22:46:30.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.149]        // while-condition  =>  TRUE
[22:46:30.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.149]        // while-condition  =>  TRUE
[22:46:30.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.158]        // while-condition  =>  TRUE
[22:46:30.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.158]        // while-condition  =>  TRUE
[22:46:30.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.158]        // while-condition  =>  TRUE
[22:46:30.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.158]        // while-condition  =>  TRUE
[22:46:30.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.169]        // while-condition  =>  TRUE
[22:46:30.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.170]        // while-condition  =>  TRUE
[22:46:30.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.170]        // while-condition  =>  TRUE
[22:46:30.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.170]        // while-condition  =>  TRUE
[22:46:30.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.180]        // while-condition  =>  TRUE
[22:46:30.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.180]        // while-condition  =>  TRUE
[22:46:30.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.188]        // while-condition  =>  TRUE
[22:46:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.188]        // while-condition  =>  TRUE
[22:46:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.188]        // while-condition  =>  TRUE
[22:46:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.188]        // while-condition  =>  TRUE
[22:46:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.188]        // while-condition  =>  TRUE
[22:46:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.199]        // while-condition  =>  TRUE
[22:46:30.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.199]        // while-condition  =>  TRUE
[22:46:30.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.199]        // while-condition  =>  TRUE
[22:46:30.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.208]        // while-condition  =>  TRUE
[22:46:30.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.208]        // while-condition  =>  TRUE
[22:46:30.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.218]        // while-condition  =>  TRUE
[22:46:30.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.218]        // while-condition  =>  TRUE
[22:46:30.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.218]        // while-condition  =>  TRUE
[22:46:30.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.218]        // while-condition  =>  TRUE
[22:46:30.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.218]        // while-condition  =>  TRUE
[22:46:30.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.228]        // while-condition  =>  TRUE
[22:46:30.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.228]        // while-condition  =>  TRUE
[22:46:30.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.228]        // while-condition  =>  TRUE
[22:46:30.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.228]        // while-condition  =>  TRUE
[22:46:30.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.239]        // while-condition  =>  TRUE
[22:46:30.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.240]        // while-condition  =>  TRUE
[22:46:30.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.243]        // while-condition  =>  TRUE
[22:46:30.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.245]        // while-condition  =>  TRUE
[22:46:30.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.248]        // while-condition  =>  TRUE
[22:46:30.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.254]        // while-condition  =>  TRUE
[22:46:30.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.258]        // while-condition  =>  TRUE
[22:46:30.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.262]        // while-condition  =>  TRUE
[22:46:30.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.262]        // while-condition  =>  TRUE
[22:46:30.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.268]        // while-condition  =>  TRUE
[22:46:30.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.268]        // while-condition  =>  TRUE
[22:46:30.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.281]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.281]        // while-condition  =>  TRUE
[22:46:30.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.282]        // while-condition  =>  TRUE
[22:46:30.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.284]        // while-condition  =>  TRUE
[22:46:30.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.288]        // while-condition  =>  TRUE
[22:46:30.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.289]        // while-condition  =>  TRUE
[22:46:30.289]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.291]        // while-condition  =>  TRUE
[22:46:30.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.293]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.293]        // while-condition  =>  TRUE
[22:46:30.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.295]        // while-condition  =>  TRUE
[22:46:30.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.298]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.298]        // while-condition  =>  TRUE
[22:46:30.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.300]        // while-condition  =>  TRUE
[22:46:30.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.302]        // while-condition  =>  TRUE
[22:46:30.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.306]        // while-condition  =>  TRUE
[22:46:30.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.308]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.308]        // while-condition  =>  TRUE
[22:46:30.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.310]        // while-condition  =>  TRUE
[22:46:30.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.310]        // while-condition  =>  TRUE
[22:46:30.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.310]        // while-condition  =>  TRUE
[22:46:30.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.310]        // while-condition  =>  TRUE
[22:46:30.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.310]        // while-condition  =>  TRUE
[22:46:30.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.321]        // while-condition  =>  TRUE
[22:46:30.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.321]        // while-condition  =>  TRUE
[22:46:30.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.329]        // while-condition  =>  TRUE
[22:46:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.329]        // while-condition  =>  TRUE
[22:46:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.329]        // while-condition  =>  TRUE
[22:46:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.329]        // while-condition  =>  TRUE
[22:46:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.329]        // while-condition  =>  TRUE
[22:46:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.340]        // while-condition  =>  TRUE
[22:46:30.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.341]        // while-condition  =>  TRUE
[22:46:30.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.341]        // while-condition  =>  TRUE
[22:46:30.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.349]        // while-condition  =>  TRUE
[22:46:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.349]        // while-condition  =>  TRUE
[22:46:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.349]        // while-condition  =>  TRUE
[22:46:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.349]        // while-condition  =>  TRUE
[22:46:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.349]        // while-condition  =>  TRUE
[22:46:30.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.360]        // while-condition  =>  TRUE
[22:46:30.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.361]        // while-condition  =>  TRUE
[22:46:30.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.363]        // while-condition  =>  TRUE
[22:46:30.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.363]        // while-condition  =>  TRUE
[22:46:30.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.370]        // while-condition  =>  TRUE
[22:46:30.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.374]        // while-condition  =>  TRUE
[22:46:30.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.376]        // while-condition  =>  TRUE
[22:46:30.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.376]        // while-condition  =>  TRUE
[22:46:30.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.380]        // while-condition  =>  TRUE
[22:46:30.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.380]        // while-condition  =>  TRUE
[22:46:30.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.385]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.385]        // while-condition  =>  TRUE
[22:46:30.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.387]        // while-condition  =>  TRUE
[22:46:30.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.391]        // while-condition  =>  TRUE
[22:46:30.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.392]        // while-condition  =>  TRUE
[22:46:30.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.392]        // while-condition  =>  TRUE
[22:46:30.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.401]        // while-condition  =>  TRUE
[22:46:30.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.402]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.402]        // while-condition  =>  TRUE
[22:46:30.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.411]        // while-condition  =>  TRUE
[22:46:30.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.411]        // while-condition  =>  TRUE
[22:46:30.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.411]        // while-condition  =>  TRUE
[22:46:30.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.411]        // while-condition  =>  TRUE
[22:46:30.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.421]        // while-condition  =>  TRUE
[22:46:30.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.423]        // while-condition  =>  TRUE
[22:46:30.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.423]        // while-condition  =>  TRUE
[22:46:30.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.423]        // while-condition  =>  TRUE
[22:46:30.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.429]        // while-condition  =>  TRUE
[22:46:30.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.431]        // while-condition  =>  TRUE
[22:46:30.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.435]        // while-condition  =>  TRUE
[22:46:30.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.439]        // while-condition  =>  TRUE
[22:46:30.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.440]        // while-condition  =>  TRUE
[22:46:30.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.441]        // while-condition  =>  TRUE
[22:46:30.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:46:30.444]        // while-condition  =>  TRUE
[22:46:30.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:30.444]        // while  =>  TIMEOUT
[22:46:30.444]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:46:30.444]      </control>
[22:46:30.444]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:46:30.444]        // if-block "(__protocol & 0xFFFF) == 1"
[22:46:30.444]          // =>  FALSE
[22:46:30.444]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:46:30.444]      </control>
[22:46:30.444]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:46:30.444]        // if-block "(__protocol & 0xFFFF) == 2"
[22:46:30.444]          // =>  TRUE
[22:46:30.444]        <block atomic="false" info="">
[22:46:30.444]          Message(0, "executing SWD power up");
[22:46:30.444]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:46:30.451]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:46:30.451]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:46:30.453]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:46:30.453]        </block>
[22:46:30.453]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:46:30.453]      </control>
[22:46:30.453]      // end if-block "powered_down"
[22:46:30.453]    </control>
[22:46:30.453]    <block atomic="false" info="">
[22:46:30.453]      __var DEBUG_PORT_VAL    = 0;
[22:46:30.453]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:46:30.453]      __var ACCESS_POINT_VAL  = 0;
[22:46:30.453]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:46:30.453]      __ap = 1; 
[22:46:30.453]        // -> [__ap <= 0x00000001]
[22:46:30.455]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:46:30.480]  
[22:46:30.480]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[22:46:30.480]  
[22:46:30.482]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:46:30.482]    </block>
[22:46:30.482]  </sequence>
[22:46:30.482]  
[22:46:37.221]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:46:37.221]  
[22:46:37.238]  <debugvars>
[22:46:37.238]    // Pre-defined
[22:46:37.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:37.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:37.238]    __dp=0x00000000
[22:46:37.238]    __ap=0x00000000
[22:46:37.238]    __traceout=0x00000000      (Trace Disabled)
[22:46:37.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:37.238]    __FlashAddr=0x00000000
[22:46:37.238]    __FlashLen=0x00000000
[22:46:37.238]    __FlashArg=0x00000000
[22:46:37.238]    __FlashOp=0x00000000
[22:46:37.238]    __Result=0x00000000
[22:46:37.238]  </debugvars>
[22:46:37.238]  
[22:46:37.238]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:46:37.238]    <block atomic="false" info="">
[22:46:37.238]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:46:37.238]        // -> [isSWJ <= 0x00000001]
[22:46:37.240]      __var hasDormant = __protocol & 0x00020000;
[22:46:37.240]        // -> [hasDormant <= 0x00000000]
[22:46:37.240]      __var protType   = __protocol & 0x0000FFFF;
[22:46:37.240]        // -> [protType <= 0x00000002]
[22:46:37.240]    </block>
[22:46:37.240]    <control if="protType == 1" while="" timeout="0" info="">
[22:46:37.240]      // if-block "protType == 1"
[22:46:37.240]        // =>  FALSE
[22:46:37.240]      // skip if-block "protType == 1"
[22:46:37.240]    </control>
[22:46:37.240]    <control if="protType == 2" while="" timeout="0" info="">
[22:46:37.240]      // if-block "protType == 2"
[22:46:37.240]        // =>  TRUE
[22:46:37.240]      <control if="isSWJ" while="" timeout="0" info="">
[22:46:37.240]        // if-block "isSWJ"
[22:46:37.240]          // =>  TRUE
[22:46:37.240]        <control if="hasDormant" while="" timeout="0" info="">
[22:46:37.240]          // if-block "hasDormant"
[22:46:37.240]            // =>  FALSE
[22:46:37.240]          // skip if-block "hasDormant"
[22:46:37.242]        </control>
[22:46:37.242]        <control if="!hasDormant" while="" timeout="0" info="">
[22:46:37.242]          // if-block "!hasDormant"
[22:46:37.242]            // =>  TRUE
[22:46:37.242]          <block atomic="false" info="">
[22:46:37.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:46:37.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:37.244]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:46:37.246]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:46:37.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:46:37.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:37.248]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:46:37.249]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:46:37.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:46:37.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:37.251]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:46:37.252]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:46:37.252]          </block>
[22:46:37.252]          // end if-block "!hasDormant"
[22:46:37.252]        </control>
[22:46:37.252]        // end if-block "isSWJ"
[22:46:37.252]      </control>
[22:46:37.252]      <control if="!isSWJ" while="" timeout="0" info="">
[22:46:37.259]        // if-block "!isSWJ"
[22:46:37.259]          // =>  FALSE
[22:46:37.259]        // skip if-block "!isSWJ"
[22:46:37.259]      </control>
[22:46:37.259]      <block atomic="false" info="">
[22:46:37.259]        ReadDP(0x0);
[22:46:37.263]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:46:37.263]      </block>
[22:46:37.263]      // end if-block "protType == 2"
[22:46:37.263]    </control>
[22:46:37.263]  </sequence>
[22:46:37.263]  
[22:46:37.273]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:46:37.273]  
[22:46:37.273]  <debugvars>
[22:46:37.273]    // Pre-defined
[22:46:37.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:37.273]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:37.273]    __dp=0x00000000
[22:46:37.281]    __ap=0x00000000
[22:46:37.281]    __traceout=0x00000000      (Trace Disabled)
[22:46:37.281]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:37.281]    __FlashAddr=0x00000000
[22:46:37.281]    __FlashLen=0x00000000
[22:46:37.281]    __FlashArg=0x00000000
[22:46:37.281]    __FlashOp=0x00000000
[22:46:37.281]    __Result=0x00000000
[22:46:37.281]  </debugvars>
[22:46:37.281]  
[22:46:37.281]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:46:37.281]    <block atomic="false" info="">
[22:46:37.281]      __var SW_DP_ABORT       = 0x0;
[22:46:37.281]        // -> [SW_DP_ABORT <= 0x00000000]
[22:46:37.281]      __var DP_CTRL_STAT      = 0x4;
[22:46:37.281]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:46:37.281]      __var DP_SELECT         = 0x8;
[22:46:37.281]        // -> [DP_SELECT <= 0x00000008]
[22:46:37.281]      __var powered_down      = 0;
[22:46:37.281]        // -> [powered_down <= 0x00000000]
[22:46:37.281]      WriteDP(DP_SELECT, 0x00000000);
[22:46:37.281]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:46:37.281]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:46:37.281]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:46:37.281]        // -> [powered_down <= 0x00000001]
[22:46:37.281]    </block>
[22:46:37.281]    <control if="powered_down" while="" timeout="0" info="">
[22:46:37.281]      // if-block "powered_down"
[22:46:37.281]        // =>  TRUE
[22:46:37.281]      <block atomic="false" info="">
[22:46:37.281]        Message(0, "Debug/System power-up request sent");
[22:46:37.291]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:46:37.293]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:46:37.293]      </block>
[22:46:37.293]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:46:37.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:37.293]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:46:37.293]        // while-condition  =>  FALSE
[22:46:37.293]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:46:37.293]      </control>
[22:46:37.293]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:46:37.293]        // if-block "(__protocol & 0xFFFF) == 1"
[22:46:37.293]          // =>  FALSE
[22:46:37.293]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:46:37.293]      </control>
[22:46:37.293]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:46:37.293]        // if-block "(__protocol & 0xFFFF) == 2"
[22:46:37.293]          // =>  TRUE
[22:46:37.293]        <block atomic="false" info="">
[22:46:37.293]          Message(0, "executing SWD power up");
[22:46:37.301]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:46:37.301]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:46:37.301]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:46:37.313]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:46:37.313]        </block>
[22:46:37.313]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:46:37.313]      </control>
[22:46:37.313]      // end if-block "powered_down"
[22:46:37.313]    </control>
[22:46:37.313]    <block atomic="false" info="">
[22:46:37.313]      __var DEBUG_PORT_VAL    = 0;
[22:46:37.313]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:46:37.313]      __var ACCESS_POINT_VAL  = 0;
[22:46:37.313]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:46:37.313]      __ap = 1; 
[22:46:37.313]        // -> [__ap <= 0x00000001]
[22:46:37.313]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:46:37.321]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:46:37.323]      __ap = 4;
[22:46:37.323]        // -> [__ap <= 0x00000004]
[22:46:37.323]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:46:37.323]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:46:37.323]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:46:37.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:46:37.323]    </block>
[22:46:37.323]    <block atomic="false" info="">
[22:46:37.323]      __var nReset = 0x80;
[22:46:37.323]        // -> [nReset <= 0x00000080]
[22:46:37.323]      __var canReadPins = 0;
[22:46:37.323]        // -> [canReadPins <= 0x00000000]
[22:46:37.323]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:46:37.332]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:46:37.332]        // -> [canReadPins <= 0x00000001]
[22:46:37.332]    </block>
[22:46:37.332]    <control if="" while="1" timeout="200" info="">
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.332]      // while-condition  =>  TRUE
[22:46:37.332]      // while "1"  (timeout="200")
[22:46:37.342]      // while-condition  =>  TRUE
[22:46:37.342]      // while "1"  (timeout="200")
[22:46:37.342]      // while  =>  TIMEOUT
[22:46:37.342]      // end while "1"
[22:46:37.342]    </control>
[22:46:37.343]    <control if="canReadPins" while="" timeout="0" info="">
[22:46:37.343]      // if-block "canReadPins"
[22:46:37.343]        // =>  TRUE
[22:46:37.343]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:46:37.343]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:46:37.344]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:46:37.344]        // while-condition  =>  FALSE
[22:46:37.344]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:46:37.344]      </control>
[22:46:37.344]      // end if-block "canReadPins"
[22:46:37.344]    </control>
[22:46:37.344]    <control if="!canReadPins" while="" timeout="0" info="">
[22:46:37.344]      // if-block "!canReadPins"
[22:46:37.344]        // =>  FALSE
[22:46:37.344]      // skip if-block "!canReadPins"
[22:46:37.344]    </control>
[22:46:37.344]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:46:37.344]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:46:37.344]        // =>  TRUE
[22:46:37.344]      <block atomic="false" info="">
[22:46:37.344]        WriteAP(0x00, 0x190008);
[22:46:37.344]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:46:37.344]        WriteAP(0xF0, 0x01);
[22:46:37.354]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:46:37.354]      </block>
[22:46:37.354]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:46:37.354]    </control>
[22:46:37.354]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:46:37.354]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:46:37.354]        // =>  FALSE
[22:46:37.354]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:46:37.354]    </control>
[22:46:37.354]    <block atomic="false" info="">
[22:46:37.354]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:46:37.363]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:46:37.363]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:46:37.363]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:46:37.363]      __ap = 0; //lets make sure we reset the access point selection
[22:46:37.363]        // -> [__ap <= 0x00000000]
[22:46:37.363]    </block>
[22:46:37.363]  </sequence>
[22:46:37.363]  
[22:46:37.393]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:46:37.393]  
[22:46:37.393]  <debugvars>
[22:46:37.393]    // Pre-defined
[22:46:37.393]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:37.393]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:37.393]    __dp=0x00000000
[22:46:37.393]    __ap=0x00000000
[22:46:37.393]    __traceout=0x00000000      (Trace Disabled)
[22:46:37.393]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:37.393]    __FlashAddr=0x00000000
[22:46:37.393]    __FlashLen=0x00000000
[22:46:37.393]    __FlashArg=0x00000000
[22:46:37.393]    __FlashOp=0x00000000
[22:46:37.393]    __Result=0x00000000
[22:46:37.393]  </debugvars>
[22:46:37.393]  
[22:46:37.393]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:46:37.393]    <block atomic="false" info="">
[22:46:37.393]      __var deviceID = 0;
[22:46:37.393]        // -> [deviceID <= 0x00000000]
[22:46:37.393]      __var version = 0;
[22:46:37.393]        // -> [version <= 0x00000000]
[22:46:37.393]      __var partNum = 0;
[22:46:37.393]        // -> [partNum <= 0x00000000]
[22:46:37.403]      __var manuf = 0;
[22:46:37.403]        // -> [manuf <= 0x00000000]
[22:46:37.403]      __var isMSPM0G1X0X_G3X0X = 0;
[22:46:37.403]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:46:37.403]      __var isProduction = 0;
[22:46:37.403]        // -> [isProduction <= 0x00000000]
[22:46:37.403]      __var continueId = 0;
[22:46:37.404]        // -> [continueId <= 0x00000000]
[22:46:37.404]      deviceID =   Read32(0x41C40004);
[22:46:37.409]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:46:37.409]        // -> [deviceID <= 0x2BB8802F]
[22:46:37.409]      version = deviceID >> 28;
[22:46:37.409]        // -> [version <= 0x00000002]
[22:46:37.409]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:46:37.409]        // -> [partNum <= 0x0000BB88]
[22:46:37.409]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:46:37.409]        // -> [manuf <= 0x00000017]
[22:46:37.409]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:46:37.409]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:46:37.409]      isProduction = (version > 0);
[22:46:37.409]        // -> [isProduction <= 0x00000001]
[22:46:37.409]    </block>
[22:46:37.409]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:46:37.409]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:46:37.409]        // =>  FALSE
[22:46:37.409]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:46:37.409]    </control>
[22:46:37.411]    <control if="continueId == 4" while="" timeout="0" info="">
[22:46:37.411]      // if-block "continueId == 4"
[22:46:37.411]        // =>  FALSE
[22:46:37.411]      // skip if-block "continueId == 4"
[22:46:37.411]    </control>
[22:46:37.411]    <control if="!isProduction" while="" timeout="0" info="">
[22:46:37.411]      // if-block "!isProduction"
[22:46:37.411]        // =>  FALSE
[22:46:37.411]      // skip if-block "!isProduction"
[22:46:37.413]    </control>
[22:46:37.413]  </sequence>
[22:46:37.413]  
