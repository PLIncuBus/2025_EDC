/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC_FUBEN\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0027.log
 *  Created     : 00:36:15 (28/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[00:36:15.697]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:36:15.697]  
[00:36:15.697]  <debugvars>
[00:36:15.699]    // Pre-defined
[00:36:15.699]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:15.699]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:36:15.699]    __dp=0x00000000
[00:36:15.699]    __ap=0x00000000
[00:36:15.699]    __traceout=0x00000000      (Trace Disabled)
[00:36:15.700]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:15.700]    __FlashAddr=0x00000000
[00:36:15.700]    __FlashLen=0x00000000
[00:36:15.700]    __FlashArg=0x00000000
[00:36:15.700]    __FlashOp=0x00000000
[00:36:15.700]    __Result=0x00000000
[00:36:15.700]  </debugvars>
[00:36:15.700]  
[00:36:15.700]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:36:15.700]    <block atomic="false" info="">
[00:36:15.700]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:36:15.700]        // -> [isSWJ <= 0x00000001]
[00:36:15.701]      __var hasDormant = __protocol & 0x00020000;
[00:36:15.701]        // -> [hasDormant <= 0x00000000]
[00:36:15.701]      __var protType   = __protocol & 0x0000FFFF;
[00:36:15.701]        // -> [protType <= 0x00000002]
[00:36:15.701]    </block>
[00:36:15.701]    <control if="protType == 1" while="" timeout="0" info="">
[00:36:15.701]      // if-block "protType == 1"
[00:36:15.702]        // =>  FALSE
[00:36:15.702]      // skip if-block "protType == 1"
[00:36:15.702]    </control>
[00:36:15.702]    <control if="protType == 2" while="" timeout="0" info="">
[00:36:15.702]      // if-block "protType == 2"
[00:36:15.702]        // =>  TRUE
[00:36:15.702]      <control if="isSWJ" while="" timeout="0" info="">
[00:36:15.702]        // if-block "isSWJ"
[00:36:15.702]          // =>  TRUE
[00:36:15.702]        <control if="hasDormant" while="" timeout="0" info="">
[00:36:15.702]          // if-block "hasDormant"
[00:36:15.702]            // =>  FALSE
[00:36:15.703]          // skip if-block "hasDormant"
[00:36:15.703]        </control>
[00:36:15.703]        <control if="!hasDormant" while="" timeout="0" info="">
[00:36:15.703]          // if-block "!hasDormant"
[00:36:15.703]            // =>  TRUE
[00:36:15.703]          <block atomic="false" info="">
[00:36:15.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:36:15.710]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:15.710]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:36:15.713]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:36:15.713]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:36:15.717]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:15.717]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:36:15.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:36:15.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:36:15.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:15.723]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:36:15.727]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:36:15.727]          </block>
[00:36:15.728]          // end if-block "!hasDormant"
[00:36:15.728]        </control>
[00:36:15.728]        // end if-block "isSWJ"
[00:36:15.728]      </control>
[00:36:15.728]      <control if="!isSWJ" while="" timeout="0" info="">
[00:36:15.728]        // if-block "!isSWJ"
[00:36:15.728]          // =>  FALSE
[00:36:15.728]        // skip if-block "!isSWJ"
[00:36:15.729]      </control>
[00:36:15.729]      <block atomic="false" info="">
[00:36:15.729]        ReadDP(0x0);
[00:36:15.732]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:36:15.732]      </block>
[00:36:15.732]      // end if-block "protType == 2"
[00:36:15.732]    </control>
[00:36:15.733]  </sequence>
[00:36:15.733]  
[00:36:15.740]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:36:15.740]  
[00:36:15.740]  <debugvars>
[00:36:15.740]    // Pre-defined
[00:36:15.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:15.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:36:15.740]    __dp=0x00000000
[00:36:15.740]    __ap=0x00000000
[00:36:15.740]    __traceout=0x00000000      (Trace Disabled)
[00:36:15.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:15.741]    __FlashAddr=0x00000000
[00:36:15.741]    __FlashLen=0x00000000
[00:36:15.741]    __FlashArg=0x00000000
[00:36:15.741]    __FlashOp=0x00000000
[00:36:15.741]    __Result=0x00000000
[00:36:15.741]  </debugvars>
[00:36:15.741]  
[00:36:15.741]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:36:15.741]    <block atomic="false" info="">
[00:36:15.742]      __var SW_DP_ABORT       = 0x0;
[00:36:15.742]        // -> [SW_DP_ABORT <= 0x00000000]
[00:36:15.742]      __var DP_CTRL_STAT      = 0x4;
[00:36:15.742]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:36:15.742]      __var DP_SELECT         = 0x8;
[00:36:15.742]        // -> [DP_SELECT <= 0x00000008]
[00:36:15.742]      __var powered_down      = 0;
[00:36:15.742]        // -> [powered_down <= 0x00000000]
[00:36:15.742]      WriteDP(DP_SELECT, 0x00000000);
[00:36:15.746]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:36:15.746]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:36:15.749]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:36:15.749]        // -> [powered_down <= 0x00000001]
[00:36:15.749]    </block>
[00:36:15.749]    <control if="powered_down" while="" timeout="0" info="">
[00:36:15.749]      // if-block "powered_down"
[00:36:15.750]        // =>  TRUE
[00:36:15.750]      <block atomic="false" info="">
[00:36:15.750]        Message(0, "Debug/System power-up request sent");
[00:36:15.756]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:36:15.760]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:36:15.760]      </block>
[00:36:15.760]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:36:15.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:36:15.763]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:36:15.764]        // while-condition  =>  FALSE
[00:36:15.764]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:36:15.764]      </control>
[00:36:15.764]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:36:15.764]        // if-block "(__protocol & 0xFFFF) == 1"
[00:36:15.764]          // =>  FALSE
[00:36:15.764]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:36:15.764]      </control>
[00:36:15.765]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:36:15.765]        // if-block "(__protocol & 0xFFFF) == 2"
[00:36:15.765]          // =>  TRUE
[00:36:15.765]        <block atomic="false" info="">
[00:36:15.765]          Message(0, "executing SWD power up");
[00:36:15.767]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:36:15.769]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:36:15.769]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:36:15.772]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:36:15.772]        </block>
[00:36:15.772]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:36:15.772]      </control>
[00:36:15.772]      // end if-block "powered_down"
[00:36:15.773]    </control>
[00:36:15.773]    <block atomic="false" info="">
[00:36:15.773]      __var DEBUG_PORT_VAL    = 0;
[00:36:15.773]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:36:15.773]      __var ACCESS_POINT_VAL  = 0;
[00:36:15.773]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:36:15.773]      __ap = 1; 
[00:36:15.773]        // -> [__ap <= 0x00000001]
[00:36:15.773]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:36:15.780]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:36:15.780]      __ap = 4;
[00:36:15.780]        // -> [__ap <= 0x00000004]
[00:36:15.780]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:15.790]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:36:15.790]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:36:15.791]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:15.793]    </block>
[00:36:15.793]    <block atomic="false" info="">
[00:36:15.793]      __var nReset = 0x80;
[00:36:15.793]        // -> [nReset <= 0x00000080]
[00:36:15.794]      __var canReadPins = 0;
[00:36:15.794]        // -> [canReadPins <= 0x00000000]
[00:36:15.794]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:36:15.796]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:36:15.796]        // -> [canReadPins <= 0x00000001]
[00:36:15.796]    </block>
[00:36:15.796]    <control if="" while="1" timeout="200" info="">
[00:36:15.797]      // while "1"  (timeout="200")
[00:36:15.797]      // while-condition  =>  TRUE
[00:36:15.798]      // while "1"  (timeout="200")
[00:36:15.798]      // while-condition  =>  TRUE
[00:36:15.798]      // while "1"  (timeout="200")
[00:36:15.798]      // while-condition  =>  TRUE
[00:36:15.798]      // while "1"  (timeout="200")
[00:36:15.798]      // while-condition  =>  TRUE
[00:36:15.799]      // while "1"  (timeout="200")
[00:36:15.799]      // while-condition  =>  TRUE
[00:36:15.799]      // while "1"  (timeout="200")
[00:36:15.799]      // while-condition  =>  TRUE
[00:36:15.799]      // while "1"  (timeout="200")
[00:36:15.799]      // while-condition  =>  TRUE
[00:36:15.799]      // while "1"  (timeout="200")
[00:36:15.799]      // while-condition  =>  TRUE
[00:36:15.799]      // while "1"  (timeout="200")
[00:36:15.799]      // while-condition  =>  TRUE
[00:36:15.800]      // while "1"  (timeout="200")
[00:36:15.800]      // while-condition  =>  TRUE
[00:36:15.800]      // while "1"  (timeout="200")
[00:36:15.800]      // while-condition  =>  TRUE
[00:36:15.800]      // while "1"  (timeout="200")
[00:36:15.800]      // while-condition  =>  TRUE
[00:36:15.800]      // while "1"  (timeout="200")
[00:36:15.800]      // while-condition  =>  TRUE
[00:36:15.800]      // while "1"  (timeout="200")
[00:36:15.800]      // while-condition  =>  TRUE
[00:36:15.801]      // while "1"  (timeout="200")
[00:36:15.801]      // while-condition  =>  TRUE
[00:36:15.801]      // while "1"  (timeout="200")
[00:36:15.801]      // while-condition  =>  TRUE
[00:36:15.801]      // while "1"  (timeout="200")
[00:36:15.801]      // while-condition  =>  TRUE
[00:36:15.801]      // while "1"  (timeout="200")
[00:36:15.801]      // while-condition  =>  TRUE
[00:36:15.801]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.802]      // while-condition  =>  TRUE
[00:36:15.802]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.803]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.803]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.803]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.803]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.803]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.803]      // while "1"  (timeout="200")
[00:36:15.803]      // while-condition  =>  TRUE
[00:36:15.804]      // while "1"  (timeout="200")
[00:36:15.804]      // while-condition  =>  TRUE
[00:36:15.804]      // while "1"  (timeout="200")
[00:36:15.804]      // while-condition  =>  TRUE
[00:36:15.804]      // while "1"  (timeout="200")
[00:36:15.804]      // while-condition  =>  TRUE
[00:36:15.804]      // while "1"  (timeout="200")
[00:36:15.804]      // while-condition  =>  TRUE
[00:36:15.804]      // while "1"  (timeout="200")
[00:36:15.805]      // while-condition  =>  TRUE
[00:36:15.805]      // while "1"  (timeout="200")
[00:36:15.805]      // while-condition  =>  TRUE
[00:36:15.805]      // while "1"  (timeout="200")
[00:36:15.805]      // while-condition  =>  TRUE
[00:36:15.805]      // while "1"  (timeout="200")
[00:36:15.805]      // while-condition  =>  TRUE
[00:36:15.805]      // while "1"  (timeout="200")
[00:36:15.805]      // while-condition  =>  TRUE
[00:36:15.805]      // while "1"  (timeout="200")
[00:36:15.806]      // while-condition  =>  TRUE
[00:36:15.806]      // while "1"  (timeout="200")
[00:36:15.806]      // while-condition  =>  TRUE
[00:36:15.806]      // while "1"  (timeout="200")
[00:36:15.806]      // while-condition  =>  TRUE
[00:36:15.806]      // while "1"  (timeout="200")
[00:36:15.806]      // while-condition  =>  TRUE
[00:36:15.806]      // while "1"  (timeout="200")
[00:36:15.806]      // while-condition  =>  TRUE
[00:36:15.806]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.807]      // while-condition  =>  TRUE
[00:36:15.807]      // while "1"  (timeout="200")
[00:36:15.808]      // while-condition  =>  TRUE
[00:36:15.808]      // while "1"  (timeout="200")
[00:36:15.808]      // while-condition  =>  TRUE
[00:36:15.808]      // while "1"  (timeout="200")
[00:36:15.808]      // while-condition  =>  TRUE
[00:36:15.808]      // while "1"  (timeout="200")
[00:36:15.808]      // while-condition  =>  TRUE
[00:36:15.809]      // while "1"  (timeout="200")
[00:36:15.809]      // while-condition  =>  TRUE
[00:36:15.809]      // while "1"  (timeout="200")
[00:36:15.809]      // while-condition  =>  TRUE
[00:36:15.809]      // while "1"  (timeout="200")
[00:36:15.809]      // while-condition  =>  TRUE
[00:36:15.809]      // while "1"  (timeout="200")
[00:36:15.809]      // while-condition  =>  TRUE
[00:36:15.809]      // while "1"  (timeout="200")
[00:36:15.810]      // while-condition  =>  TRUE
[00:36:15.810]      // while "1"  (timeout="200")
[00:36:15.810]      // while-condition  =>  TRUE
[00:36:15.810]      // while "1"  (timeout="200")
[00:36:15.810]      // while-condition  =>  TRUE
[00:36:15.810]      // while "1"  (timeout="200")
[00:36:15.810]      // while-condition  =>  TRUE
[00:36:15.810]      // while "1"  (timeout="200")
[00:36:15.811]      // while-condition  =>  TRUE
[00:36:15.811]      // while "1"  (timeout="200")
[00:36:15.811]      // while-condition  =>  TRUE
[00:36:15.811]      // while "1"  (timeout="200")
[00:36:15.811]      // while-condition  =>  TRUE
[00:36:15.811]      // while "1"  (timeout="200")
[00:36:15.811]      // while-condition  =>  TRUE
[00:36:15.812]      // while "1"  (timeout="200")
[00:36:15.812]      // while  =>  TIMEOUT
[00:36:15.812]      // end while "1"
[00:36:15.812]    </control>
[00:36:15.812]    <control if="canReadPins" while="" timeout="0" info="">
[00:36:15.812]      // if-block "canReadPins"
[00:36:15.812]        // =>  TRUE
[00:36:15.812]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:36:15.812]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:36:15.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:36:15.816]        // while-condition  =>  FALSE
[00:36:15.817]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:36:15.817]      </control>
[00:36:15.817]      // end if-block "canReadPins"
[00:36:15.817]    </control>
[00:36:15.817]    <control if="!canReadPins" while="" timeout="0" info="">
[00:36:15.817]      // if-block "!canReadPins"
[00:36:15.817]        // =>  FALSE
[00:36:15.817]      // skip if-block "!canReadPins"
[00:36:15.817]    </control>
[00:36:15.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:36:15.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:15.818]        // =>  TRUE
[00:36:15.818]      <block atomic="false" info="">
[00:36:15.818]        WriteAP(0x00, 0x190008);
[00:36:15.821]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:15.821]        WriteAP(0xF0, 0x01);
[00:36:15.828]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:15.828]      </block>
[00:36:15.828]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:15.828]    </control>
[00:36:15.828]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:36:15.828]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:15.829]        // =>  FALSE
[00:36:15.829]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:15.829]    </control>
[00:36:15.829]    <block atomic="false" info="">
[00:36:15.829]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:15.837]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:36:15.837]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:36:15.838]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:15.839]      __ap = 0; //lets make sure we reset the access point selection
[00:36:15.839]        // -> [__ap <= 0x00000000]
[00:36:15.840]    </block>
[00:36:15.840]  </sequence>
[00:36:15.840]  
[00:36:15.877]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:36:15.877]  
[00:36:15.877]  <debugvars>
[00:36:15.877]    // Pre-defined
[00:36:15.877]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:15.877]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:36:15.877]    __dp=0x00000000
[00:36:15.877]    __ap=0x00000000
[00:36:15.877]    __traceout=0x00000000      (Trace Disabled)
[00:36:15.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:15.877]    __FlashAddr=0x00000000
[00:36:15.877]    __FlashLen=0x00000000
[00:36:15.877]    __FlashArg=0x00000000
[00:36:15.878]    __FlashOp=0x00000000
[00:36:15.878]    __Result=0x00000000
[00:36:15.878]  </debugvars>
[00:36:15.878]  
[00:36:15.878]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:36:15.879]    <block atomic="false" info="">
[00:36:15.879]      __var deviceID = 0;
[00:36:15.879]        // -> [deviceID <= 0x00000000]
[00:36:15.879]      __var version = 0;
[00:36:15.879]        // -> [version <= 0x00000000]
[00:36:15.879]      __var partNum = 0;
[00:36:15.879]        // -> [partNum <= 0x00000000]
[00:36:15.880]      __var manuf = 0;
[00:36:15.880]        // -> [manuf <= 0x00000000]
[00:36:15.880]      __var isMSPM0G1X0X_G3X0X = 0;
[00:36:15.880]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:36:15.880]      __var isProduction = 0;
[00:36:15.880]        // -> [isProduction <= 0x00000000]
[00:36:15.880]      __var continueId = 0;
[00:36:15.880]        // -> [continueId <= 0x00000000]
[00:36:15.880]      deviceID =   Read32(0x41C40004);
[00:36:15.889]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:36:15.889]        // -> [deviceID <= 0x2BB8802F]
[00:36:15.889]      version = deviceID >> 28;
[00:36:15.890]        // -> [version <= 0x00000002]
[00:36:15.891]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:36:15.891]        // -> [partNum <= 0x0000BB88]
[00:36:15.891]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:36:15.891]        // -> [manuf <= 0x00000017]
[00:36:15.891]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:36:15.891]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:36:15.892]      isProduction = (version > 0);
[00:36:15.892]        // -> [isProduction <= 0x00000001]
[00:36:15.892]    </block>
[00:36:15.892]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:36:15.892]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:36:15.892]        // =>  FALSE
[00:36:15.892]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:36:15.893]    </control>
[00:36:15.893]    <control if="continueId == 4" while="" timeout="0" info="">
[00:36:15.893]      // if-block "continueId == 4"
[00:36:15.893]        // =>  FALSE
[00:36:15.893]      // skip if-block "continueId == 4"
[00:36:15.893]    </control>
[00:36:15.893]    <control if="!isProduction" while="" timeout="0" info="">
[00:36:15.893]      // if-block "!isProduction"
[00:36:15.893]        // =>  FALSE
[00:36:15.893]      // skip if-block "!isProduction"
[00:36:15.893]    </control>
[00:36:15.894]  </sequence>
[00:36:15.894]  
[00:36:22.765]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:36:22.765]  
[00:36:22.773]  <debugvars>
[00:36:22.773]    // Pre-defined
[00:36:22.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:22.773]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:36:22.773]    __dp=0x00000000
[00:36:22.773]    __ap=0x00000000
[00:36:22.773]    __traceout=0x00000000      (Trace Disabled)
[00:36:22.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:22.773]    __FlashAddr=0x00000000
[00:36:22.773]    __FlashLen=0x00000000
[00:36:22.774]    __FlashArg=0x00000000
[00:36:22.774]    __FlashOp=0x00000000
[00:36:22.774]    __Result=0x00000000
[00:36:22.774]  </debugvars>
[00:36:22.774]  
[00:36:22.774]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:36:22.775]    <block atomic="false" info="">
[00:36:22.775]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:36:22.775]        // -> [isSWJ <= 0x00000001]
[00:36:22.775]      __var hasDormant = __protocol & 0x00020000;
[00:36:22.775]        // -> [hasDormant <= 0x00000000]
[00:36:22.775]      __var protType   = __protocol & 0x0000FFFF;
[00:36:22.775]        // -> [protType <= 0x00000002]
[00:36:22.776]    </block>
[00:36:22.776]    <control if="protType == 1" while="" timeout="0" info="">
[00:36:22.776]      // if-block "protType == 1"
[00:36:22.776]        // =>  FALSE
[00:36:22.776]      // skip if-block "protType == 1"
[00:36:22.776]    </control>
[00:36:22.776]    <control if="protType == 2" while="" timeout="0" info="">
[00:36:22.777]      // if-block "protType == 2"
[00:36:22.777]        // =>  TRUE
[00:36:22.777]      <control if="isSWJ" while="" timeout="0" info="">
[00:36:22.777]        // if-block "isSWJ"
[00:36:22.777]          // =>  TRUE
[00:36:22.777]        <control if="hasDormant" while="" timeout="0" info="">
[00:36:22.777]          // if-block "hasDormant"
[00:36:22.777]            // =>  FALSE
[00:36:22.777]          // skip if-block "hasDormant"
[00:36:22.777]        </control>
[00:36:22.777]        <control if="!hasDormant" while="" timeout="0" info="">
[00:36:22.777]          // if-block "!hasDormant"
[00:36:22.777]            // =>  TRUE
[00:36:22.777]          <block atomic="false" info="">
[00:36:22.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:36:22.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:22.781]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:36:22.784]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:36:22.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:36:22.786]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:22.787]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:36:22.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:36:22.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:36:22.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:36:22.793]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:36:22.795]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:36:22.796]          </block>
[00:36:22.796]          // end if-block "!hasDormant"
[00:36:22.796]        </control>
[00:36:22.796]        // end if-block "isSWJ"
[00:36:22.796]      </control>
[00:36:22.797]      <control if="!isSWJ" while="" timeout="0" info="">
[00:36:22.797]        // if-block "!isSWJ"
[00:36:22.797]          // =>  FALSE
[00:36:22.797]        // skip if-block "!isSWJ"
[00:36:22.797]      </control>
[00:36:22.797]      <block atomic="false" info="">
[00:36:22.797]        ReadDP(0x0);
[00:36:22.800]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:36:22.800]      </block>
[00:36:22.801]      // end if-block "protType == 2"
[00:36:22.801]    </control>
[00:36:22.801]  </sequence>
[00:36:22.801]  
[00:36:22.808]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:36:22.808]  
[00:36:22.808]  <debugvars>
[00:36:22.808]    // Pre-defined
[00:36:22.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:22.808]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:36:22.808]    __dp=0x00000000
[00:36:22.808]    __ap=0x00000000
[00:36:22.808]    __traceout=0x00000000      (Trace Disabled)
[00:36:22.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:22.810]    __FlashAddr=0x00000000
[00:36:22.810]    __FlashLen=0x00000000
[00:36:22.810]    __FlashArg=0x00000000
[00:36:22.810]    __FlashOp=0x00000000
[00:36:22.810]    __Result=0x00000000
[00:36:22.810]  </debugvars>
[00:36:22.810]  
[00:36:22.810]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:36:22.810]    <block atomic="false" info="">
[00:36:22.810]      __var SW_DP_ABORT       = 0x0;
[00:36:22.810]        // -> [SW_DP_ABORT <= 0x00000000]
[00:36:22.810]      __var DP_CTRL_STAT      = 0x4;
[00:36:22.810]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:36:22.810]      __var DP_SELECT         = 0x8;
[00:36:22.812]        // -> [DP_SELECT <= 0x00000008]
[00:36:22.812]      __var powered_down      = 0;
[00:36:22.812]        // -> [powered_down <= 0x00000000]
[00:36:22.812]      WriteDP(DP_SELECT, 0x00000000);
[00:36:22.815]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:36:22.815]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:36:22.821]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:36:22.821]        // -> [powered_down <= 0x00000001]
[00:36:22.821]    </block>
[00:36:22.821]    <control if="powered_down" while="" timeout="0" info="">
[00:36:22.821]      // if-block "powered_down"
[00:36:22.821]        // =>  TRUE
[00:36:22.821]      <block atomic="false" info="">
[00:36:22.821]        Message(0, "Debug/System power-up request sent");
[00:36:22.823]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:36:22.826]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:36:22.826]      </block>
[00:36:22.827]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:36:22.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:36:22.829]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:36:22.829]        // while-condition  =>  FALSE
[00:36:22.830]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:36:22.830]      </control>
[00:36:22.830]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:36:22.830]        // if-block "(__protocol & 0xFFFF) == 1"
[00:36:22.830]          // =>  FALSE
[00:36:22.830]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:36:22.830]      </control>
[00:36:22.831]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:36:22.831]        // if-block "(__protocol & 0xFFFF) == 2"
[00:36:22.831]          // =>  TRUE
[00:36:22.831]        <block atomic="false" info="">
[00:36:22.831]          Message(0, "executing SWD power up");
[00:36:22.833]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:36:22.836]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:36:22.836]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:36:22.839]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:36:22.839]        </block>
[00:36:22.840]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:36:22.840]      </control>
[00:36:22.840]      // end if-block "powered_down"
[00:36:22.840]    </control>
[00:36:22.840]    <block atomic="false" info="">
[00:36:22.840]      __var DEBUG_PORT_VAL    = 0;
[00:36:22.840]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:36:22.840]      __var ACCESS_POINT_VAL  = 0;
[00:36:22.840]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:36:22.840]      __ap = 1; 
[00:36:22.841]        // -> [__ap <= 0x00000001]
[00:36:22.841]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:36:22.848]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:36:22.848]      __ap = 4;
[00:36:22.848]        // -> [__ap <= 0x00000004]
[00:36:22.849]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:22.854]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:36:22.854]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:36:22.854]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:22.856]    </block>
[00:36:22.856]    <block atomic="false" info="">
[00:36:22.856]      __var nReset = 0x80;
[00:36:22.857]        // -> [nReset <= 0x00000080]
[00:36:22.857]      __var canReadPins = 0;
[00:36:22.857]        // -> [canReadPins <= 0x00000000]
[00:36:22.857]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:36:22.860]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:36:22.860]        // -> [canReadPins <= 0x00000001]
[00:36:22.860]    </block>
[00:36:22.860]    <control if="" while="1" timeout="200" info="">
[00:36:22.860]      // while "1"  (timeout="200")
[00:36:22.861]      // while-condition  =>  TRUE
[00:36:22.861]      // while "1"  (timeout="200")
[00:36:22.861]      // while-condition  =>  TRUE
[00:36:22.861]      // while "1"  (timeout="200")
[00:36:22.861]      // while-condition  =>  TRUE
[00:36:22.861]      // while "1"  (timeout="200")
[00:36:22.861]      // while-condition  =>  TRUE
[00:36:22.861]      // while "1"  (timeout="200")
[00:36:22.861]      // while-condition  =>  TRUE
[00:36:22.861]      // while "1"  (timeout="200")
[00:36:22.861]      // while-condition  =>  TRUE
[00:36:22.862]      // while "1"  (timeout="200")
[00:36:22.862]      // while-condition  =>  TRUE
[00:36:22.862]      // while "1"  (timeout="200")
[00:36:22.862]      // while-condition  =>  TRUE
[00:36:22.862]      // while "1"  (timeout="200")
[00:36:22.862]      // while-condition  =>  TRUE
[00:36:22.862]      // while "1"  (timeout="200")
[00:36:22.862]      // while-condition  =>  TRUE
[00:36:22.863]      // while "1"  (timeout="200")
[00:36:22.863]      // while-condition  =>  TRUE
[00:36:22.863]      // while "1"  (timeout="200")
[00:36:22.863]      // while-condition  =>  TRUE
[00:36:22.863]      // while "1"  (timeout="200")
[00:36:22.863]      // while-condition  =>  TRUE
[00:36:22.863]      // while "1"  (timeout="200")
[00:36:22.863]      // while-condition  =>  TRUE
[00:36:22.863]      // while "1"  (timeout="200")
[00:36:22.863]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.864]      // while "1"  (timeout="200")
[00:36:22.864]      // while-condition  =>  TRUE
[00:36:22.866]      // while "1"  (timeout="200")
[00:36:22.866]      // while-condition  =>  TRUE
[00:36:22.866]      // while "1"  (timeout="200")
[00:36:22.866]      // while-condition  =>  TRUE
[00:36:22.866]      // while "1"  (timeout="200")
[00:36:22.866]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.867]      // while-condition  =>  TRUE
[00:36:22.867]      // while "1"  (timeout="200")
[00:36:22.868]      // while-condition  =>  TRUE
[00:36:22.868]      // while "1"  (timeout="200")
[00:36:22.868]      // while-condition  =>  TRUE
[00:36:22.868]      // while "1"  (timeout="200")
[00:36:22.868]      // while-condition  =>  TRUE
[00:36:22.868]      // while "1"  (timeout="200")
[00:36:22.868]      // while-condition  =>  TRUE
[00:36:22.868]      // while "1"  (timeout="200")
[00:36:22.868]      // while-condition  =>  TRUE
[00:36:22.868]      // while "1"  (timeout="200")
[00:36:22.868]      // while-condition  =>  TRUE
[00:36:22.870]      // while "1"  (timeout="200")
[00:36:22.870]      // while-condition  =>  TRUE
[00:36:22.870]      // while "1"  (timeout="200")
[00:36:22.870]      // while-condition  =>  TRUE
[00:36:22.870]      // while "1"  (timeout="200")
[00:36:22.870]      // while-condition  =>  TRUE
[00:36:22.870]      // while "1"  (timeout="200")
[00:36:22.870]      // while-condition  =>  TRUE
[00:36:22.870]      // while "1"  (timeout="200")
[00:36:22.870]      // while-condition  =>  TRUE
[00:36:22.870]      // while "1"  (timeout="200")
[00:36:22.870]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.871]      // while "1"  (timeout="200")
[00:36:22.871]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.873]      // while "1"  (timeout="200")
[00:36:22.873]      // while-condition  =>  TRUE
[00:36:22.874]      // while "1"  (timeout="200")
[00:36:22.874]      // while-condition  =>  TRUE
[00:36:22.874]      // while "1"  (timeout="200")
[00:36:22.874]      // while-condition  =>  TRUE
[00:36:22.874]      // while "1"  (timeout="200")
[00:36:22.874]      // while-condition  =>  TRUE
[00:36:22.874]      // while "1"  (timeout="200")
[00:36:22.874]      // while-condition  =>  TRUE
[00:36:22.874]      // while "1"  (timeout="200")
[00:36:22.874]      // while-condition  =>  TRUE
[00:36:22.874]      // while "1"  (timeout="200")
[00:36:22.876]      // while-condition  =>  TRUE
[00:36:22.876]      // while "1"  (timeout="200")
[00:36:22.876]      // while  =>  TIMEOUT
[00:36:22.876]      // end while "1"
[00:36:22.876]    </control>
[00:36:22.876]    <control if="canReadPins" while="" timeout="0" info="">
[00:36:22.876]      // if-block "canReadPins"
[00:36:22.876]        // =>  TRUE
[00:36:22.876]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:36:22.876]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:36:22.879]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:36:22.879]        // while-condition  =>  FALSE
[00:36:22.879]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:36:22.879]      </control>
[00:36:22.880]      // end if-block "canReadPins"
[00:36:22.880]    </control>
[00:36:22.880]    <control if="!canReadPins" while="" timeout="0" info="">
[00:36:22.880]      // if-block "!canReadPins"
[00:36:22.880]        // =>  FALSE
[00:36:22.880]      // skip if-block "!canReadPins"
[00:36:22.880]    </control>
[00:36:22.880]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:36:22.880]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:22.880]        // =>  TRUE
[00:36:22.880]      <block atomic="false" info="">
[00:36:22.882]        WriteAP(0x00, 0x190008);
[00:36:22.885]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:22.885]        WriteAP(0xF0, 0x01);
[00:36:22.890]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:36:22.891]      </block>
[00:36:22.891]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:36:22.891]    </control>
[00:36:22.891]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:36:22.891]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:22.891]        // =>  FALSE
[00:36:22.891]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:36:22.891]    </control>
[00:36:22.891]    <block atomic="false" info="">
[00:36:22.891]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:36:22.897]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:36:22.898]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:36:22.898]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:36:22.900]      __ap = 0; //lets make sure we reset the access point selection
[00:36:22.900]        // -> [__ap <= 0x00000000]
[00:36:22.900]    </block>
[00:36:22.900]  </sequence>
[00:36:22.900]  
[00:36:22.937]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:36:22.937]  
[00:36:22.938]  <debugvars>
[00:36:22.938]    // Pre-defined
[00:36:22.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:36:22.938]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:36:22.938]    __dp=0x00000000
[00:36:22.938]    __ap=0x00000000
[00:36:22.938]    __traceout=0x00000000      (Trace Disabled)
[00:36:22.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:36:22.938]    __FlashAddr=0x00000000
[00:36:22.938]    __FlashLen=0x00000000
[00:36:22.939]    __FlashArg=0x00000000
[00:36:22.939]    __FlashOp=0x00000000
[00:36:22.939]    __Result=0x00000000
[00:36:22.939]  </debugvars>
[00:36:22.939]  
[00:36:22.939]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:36:22.939]    <block atomic="false" info="">
[00:36:22.939]      __var deviceID = 0;
[00:36:22.939]        // -> [deviceID <= 0x00000000]
[00:36:22.939]      __var version = 0;
[00:36:22.939]        // -> [version <= 0x00000000]
[00:36:22.940]      __var partNum = 0;
[00:36:22.940]        // -> [partNum <= 0x00000000]
[00:36:22.940]      __var manuf = 0;
[00:36:22.940]        // -> [manuf <= 0x00000000]
[00:36:22.940]      __var isMSPM0G1X0X_G3X0X = 0;
[00:36:22.940]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:36:22.940]      __var isProduction = 0;
[00:36:22.940]        // -> [isProduction <= 0x00000000]
[00:36:22.940]      __var continueId = 0;
[00:36:22.940]        // -> [continueId <= 0x00000000]
[00:36:22.940]      deviceID =   Read32(0x41C40004);
[00:36:22.951]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:36:22.951]        // -> [deviceID <= 0x2BB8802F]
[00:36:22.952]      version = deviceID >> 28;
[00:36:22.952]        // -> [version <= 0x00000002]
[00:36:22.952]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:36:22.952]        // -> [partNum <= 0x0000BB88]
[00:36:22.952]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:36:22.952]        // -> [manuf <= 0x00000017]
[00:36:22.952]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:36:22.952]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:36:22.952]      isProduction = (version > 0);
[00:36:22.952]        // -> [isProduction <= 0x00000001]
[00:36:22.952]    </block>
[00:36:22.953]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:36:22.953]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:36:22.953]        // =>  FALSE
[00:36:22.953]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:36:22.953]    </control>
[00:36:22.953]    <control if="continueId == 4" while="" timeout="0" info="">
[00:36:22.953]      // if-block "continueId == 4"
[00:36:22.953]        // =>  FALSE
[00:36:22.953]      // skip if-block "continueId == 4"
[00:36:22.953]    </control>
[00:36:22.953]    <control if="!isProduction" while="" timeout="0" info="">
[00:36:22.953]      // if-block "!isProduction"
[00:36:22.954]        // =>  FALSE
[00:36:22.954]      // skip if-block "!isProduction"
[00:36:22.954]    </control>
[00:36:22.954]  </sequence>
[00:36:22.954]  
[00:38:28.500]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:38:28.500]  
[00:38:28.508]  <debugvars>
[00:38:28.508]    // Pre-defined
[00:38:28.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:28.508]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:28.508]    __dp=0x00000000
[00:38:28.508]    __ap=0x00000000
[00:38:28.508]    __traceout=0x00000000      (Trace Disabled)
[00:38:28.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:28.508]    __FlashAddr=0x00000000
[00:38:28.508]    __FlashLen=0x00000000
[00:38:28.508]    __FlashArg=0x00000000
[00:38:28.508]    __FlashOp=0x00000000
[00:38:28.508]    __Result=0x00000000
[00:38:28.508]  </debugvars>
[00:38:28.508]  
[00:38:28.508]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:38:28.508]    <block atomic="false" info="">
[00:38:28.508]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:38:28.508]        // -> [isSWJ <= 0x00000001]
[00:38:28.508]      __var hasDormant = __protocol & 0x00020000;
[00:38:28.508]        // -> [hasDormant <= 0x00000000]
[00:38:28.508]      __var protType   = __protocol & 0x0000FFFF;
[00:38:28.508]        // -> [protType <= 0x00000002]
[00:38:28.508]    </block>
[00:38:28.508]    <control if="protType == 1" while="" timeout="0" info="">
[00:38:28.508]      // if-block "protType == 1"
[00:38:28.508]        // =>  FALSE
[00:38:28.508]      // skip if-block "protType == 1"
[00:38:28.508]    </control>
[00:38:28.508]    <control if="protType == 2" while="" timeout="0" info="">
[00:38:28.508]      // if-block "protType == 2"
[00:38:28.511]        // =>  TRUE
[00:38:28.511]      <control if="isSWJ" while="" timeout="0" info="">
[00:38:28.511]        // if-block "isSWJ"
[00:38:28.511]          // =>  TRUE
[00:38:28.511]        <control if="hasDormant" while="" timeout="0" info="">
[00:38:28.511]          // if-block "hasDormant"
[00:38:28.511]            // =>  FALSE
[00:38:28.511]          // skip if-block "hasDormant"
[00:38:28.511]        </control>
[00:38:28.512]        <control if="!hasDormant" while="" timeout="0" info="">
[00:38:28.512]          // if-block "!hasDormant"
[00:38:28.512]            // =>  TRUE
[00:38:28.512]          <block atomic="false" info="">
[00:38:28.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:38:28.515]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:28.515]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:38:28.518]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:38:28.518]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:38:28.521]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:28.521]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:38:28.524]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:38:28.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:38:28.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:28.528]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:38:28.531]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:38:28.531]          </block>
[00:38:28.531]          // end if-block "!hasDormant"
[00:38:28.531]        </control>
[00:38:28.531]        // end if-block "isSWJ"
[00:38:28.531]      </control>
[00:38:28.531]      <control if="!isSWJ" while="" timeout="0" info="">
[00:38:28.531]        // if-block "!isSWJ"
[00:38:28.531]          // =>  FALSE
[00:38:28.531]        // skip if-block "!isSWJ"
[00:38:28.531]      </control>
[00:38:28.531]      <block atomic="false" info="">
[00:38:28.531]        ReadDP(0x0);
[00:38:28.534]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:38:28.534]      </block>
[00:38:28.534]      // end if-block "protType == 2"
[00:38:28.534]    </control>
[00:38:28.534]  </sequence>
[00:38:28.534]  
[00:38:28.541]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:38:28.541]  
[00:38:28.541]  <debugvars>
[00:38:28.541]    // Pre-defined
[00:38:28.541]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:28.541]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:28.541]    __dp=0x00000000
[00:38:28.542]    __ap=0x00000000
[00:38:28.542]    __traceout=0x00000000      (Trace Disabled)
[00:38:28.543]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:28.543]    __FlashAddr=0x00000000
[00:38:28.543]    __FlashLen=0x00000000
[00:38:28.543]    __FlashArg=0x00000000
[00:38:28.543]    __FlashOp=0x00000000
[00:38:28.543]    __Result=0x00000000
[00:38:28.543]  </debugvars>
[00:38:28.543]  
[00:38:28.543]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:38:28.543]    <block atomic="false" info="">
[00:38:28.543]      __var SW_DP_ABORT       = 0x0;
[00:38:28.543]        // -> [SW_DP_ABORT <= 0x00000000]
[00:38:28.543]      __var DP_CTRL_STAT      = 0x4;
[00:38:28.544]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:38:28.544]      __var DP_SELECT         = 0x8;
[00:38:28.544]        // -> [DP_SELECT <= 0x00000008]
[00:38:28.544]      __var powered_down      = 0;
[00:38:28.544]        // -> [powered_down <= 0x00000000]
[00:38:28.544]      WriteDP(DP_SELECT, 0x00000000);
[00:38:28.547]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:38:28.547]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:38:28.550]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:38:28.550]        // -> [powered_down <= 0x00000001]
[00:38:28.550]    </block>
[00:38:28.550]    <control if="powered_down" while="" timeout="0" info="">
[00:38:28.550]      // if-block "powered_down"
[00:38:28.550]        // =>  TRUE
[00:38:28.550]      <block atomic="false" info="">
[00:38:28.551]        Message(0, "Debug/System power-up request sent");
[00:38:28.555]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:38:28.559]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:38:28.560]      </block>
[00:38:28.560]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:38:28.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:38:28.562]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:38:28.562]        // while-condition  =>  FALSE
[00:38:28.562]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:38:28.562]      </control>
[00:38:28.563]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:38:28.563]        // if-block "(__protocol & 0xFFFF) == 1"
[00:38:28.564]          // =>  FALSE
[00:38:28.564]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:38:28.564]      </control>
[00:38:28.564]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:38:28.564]        // if-block "(__protocol & 0xFFFF) == 2"
[00:38:28.564]          // =>  TRUE
[00:38:28.564]        <block atomic="false" info="">
[00:38:28.564]          Message(0, "executing SWD power up");
[00:38:28.567]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:38:28.571]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:38:28.571]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:38:28.574]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:38:28.574]        </block>
[00:38:28.574]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:38:28.575]      </control>
[00:38:28.575]      // end if-block "powered_down"
[00:38:28.575]    </control>
[00:38:28.575]    <block atomic="false" info="">
[00:38:28.575]      __var DEBUG_PORT_VAL    = 0;
[00:38:28.575]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:38:28.575]      __var ACCESS_POINT_VAL  = 0;
[00:38:28.575]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:38:28.575]      __ap = 1; 
[00:38:28.575]        // -> [__ap <= 0x00000001]
[00:38:28.575]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:38:28.581]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:38:28.581]      __ap = 4;
[00:38:28.581]        // -> [__ap <= 0x00000004]
[00:38:28.581]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:28.590]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:38:28.590]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:38:28.590]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:28.594]    </block>
[00:38:28.594]    <block atomic="false" info="">
[00:38:28.594]      __var nReset = 0x80;
[00:38:28.594]        // -> [nReset <= 0x00000080]
[00:38:28.594]      __var canReadPins = 0;
[00:38:28.594]        // -> [canReadPins <= 0x00000000]
[00:38:28.594]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:38:28.598]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:38:28.598]        // -> [canReadPins <= 0x00000001]
[00:38:28.598]    </block>
[00:38:28.598]    <control if="" while="1" timeout="200" info="">
[00:38:28.598]      // while "1"  (timeout="200")
[00:38:28.598]      // while-condition  =>  TRUE
[00:38:28.598]      // while "1"  (timeout="200")
[00:38:28.599]      // while-condition  =>  TRUE
[00:38:28.599]      // while "1"  (timeout="200")
[00:38:28.599]      // while-condition  =>  TRUE
[00:38:28.599]      // while "1"  (timeout="200")
[00:38:28.599]      // while-condition  =>  TRUE
[00:38:28.599]      // while "1"  (timeout="200")
[00:38:28.599]      // while-condition  =>  TRUE
[00:38:28.599]      // while "1"  (timeout="200")
[00:38:28.599]      // while-condition  =>  TRUE
[00:38:28.599]      // while "1"  (timeout="200")
[00:38:28.600]      // while-condition  =>  TRUE
[00:38:28.600]      // while "1"  (timeout="200")
[00:38:28.600]      // while-condition  =>  TRUE
[00:38:28.600]      // while "1"  (timeout="200")
[00:38:28.600]      // while-condition  =>  TRUE
[00:38:28.600]      // while "1"  (timeout="200")
[00:38:28.600]      // while-condition  =>  TRUE
[00:38:28.600]      // while "1"  (timeout="200")
[00:38:28.600]      // while-condition  =>  TRUE
[00:38:28.601]      // while "1"  (timeout="200")
[00:38:28.601]      // while-condition  =>  TRUE
[00:38:28.601]      // while "1"  (timeout="200")
[00:38:28.601]      // while-condition  =>  TRUE
[00:38:28.601]      // while "1"  (timeout="200")
[00:38:28.601]      // while-condition  =>  TRUE
[00:38:28.601]      // while "1"  (timeout="200")
[00:38:28.601]      // while-condition  =>  TRUE
[00:38:28.601]      // while "1"  (timeout="200")
[00:38:28.602]      // while-condition  =>  TRUE
[00:38:28.602]      // while "1"  (timeout="200")
[00:38:28.602]      // while-condition  =>  TRUE
[00:38:28.602]      // while "1"  (timeout="200")
[00:38:28.602]      // while-condition  =>  TRUE
[00:38:28.602]      // while "1"  (timeout="200")
[00:38:28.602]      // while-condition  =>  TRUE
[00:38:28.602]      // while "1"  (timeout="200")
[00:38:28.602]      // while-condition  =>  TRUE
[00:38:28.602]      // while "1"  (timeout="200")
[00:38:28.602]      // while-condition  =>  TRUE
[00:38:28.603]      // while "1"  (timeout="200")
[00:38:28.603]      // while-condition  =>  TRUE
[00:38:28.603]      // while "1"  (timeout="200")
[00:38:28.603]      // while-condition  =>  TRUE
[00:38:28.603]      // while "1"  (timeout="200")
[00:38:28.604]      // while-condition  =>  TRUE
[00:38:28.604]      // while "1"  (timeout="200")
[00:38:28.604]      // while-condition  =>  TRUE
[00:38:28.604]      // while "1"  (timeout="200")
[00:38:28.604]      // while-condition  =>  TRUE
[00:38:28.604]      // while "1"  (timeout="200")
[00:38:28.604]      // while-condition  =>  TRUE
[00:38:28.604]      // while "1"  (timeout="200")
[00:38:28.604]      // while-condition  =>  TRUE
[00:38:28.604]      // while "1"  (timeout="200")
[00:38:28.604]      // while-condition  =>  TRUE
[00:38:28.604]      // while "1"  (timeout="200")
[00:38:28.605]      // while-condition  =>  TRUE
[00:38:28.605]      // while "1"  (timeout="200")
[00:38:28.605]      // while-condition  =>  TRUE
[00:38:28.605]      // while "1"  (timeout="200")
[00:38:28.605]      // while-condition  =>  TRUE
[00:38:28.605]      // while "1"  (timeout="200")
[00:38:28.605]      // while-condition  =>  TRUE
[00:38:28.605]      // while "1"  (timeout="200")
[00:38:28.605]      // while-condition  =>  TRUE
[00:38:28.606]      // while "1"  (timeout="200")
[00:38:28.606]      // while-condition  =>  TRUE
[00:38:28.606]      // while "1"  (timeout="200")
[00:38:28.606]      // while-condition  =>  TRUE
[00:38:28.606]      // while "1"  (timeout="200")
[00:38:28.606]      // while-condition  =>  TRUE
[00:38:28.606]      // while "1"  (timeout="200")
[00:38:28.606]      // while-condition  =>  TRUE
[00:38:28.606]      // while "1"  (timeout="200")
[00:38:28.607]      // while-condition  =>  TRUE
[00:38:28.607]      // while "1"  (timeout="200")
[00:38:28.607]      // while-condition  =>  TRUE
[00:38:28.607]      // while "1"  (timeout="200")
[00:38:28.607]      // while-condition  =>  TRUE
[00:38:28.607]      // while "1"  (timeout="200")
[00:38:28.607]      // while-condition  =>  TRUE
[00:38:28.607]      // while "1"  (timeout="200")
[00:38:28.607]      // while-condition  =>  TRUE
[00:38:28.608]      // while "1"  (timeout="200")
[00:38:28.608]      // while-condition  =>  TRUE
[00:38:28.608]      // while "1"  (timeout="200")
[00:38:28.608]      // while-condition  =>  TRUE
[00:38:28.608]      // while "1"  (timeout="200")
[00:38:28.608]      // while-condition  =>  TRUE
[00:38:28.608]      // while "1"  (timeout="200")
[00:38:28.608]      // while-condition  =>  TRUE
[00:38:28.608]      // while "1"  (timeout="200")
[00:38:28.608]      // while-condition  =>  TRUE
[00:38:28.608]      // while "1"  (timeout="200")
[00:38:28.610]      // while-condition  =>  TRUE
[00:38:28.610]      // while "1"  (timeout="200")
[00:38:28.610]      // while  =>  TIMEOUT
[00:38:28.610]      // end while "1"
[00:38:28.610]    </control>
[00:38:28.610]    <control if="canReadPins" while="" timeout="0" info="">
[00:38:28.610]      // if-block "canReadPins"
[00:38:28.610]        // =>  TRUE
[00:38:28.610]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:38:28.610]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:38:28.613]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:38:28.613]        // while-condition  =>  FALSE
[00:38:28.613]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:38:28.613]      </control>
[00:38:28.613]      // end if-block "canReadPins"
[00:38:28.613]    </control>
[00:38:28.614]    <control if="!canReadPins" while="" timeout="0" info="">
[00:38:28.614]      // if-block "!canReadPins"
[00:38:28.614]        // =>  FALSE
[00:38:28.614]      // skip if-block "!canReadPins"
[00:38:28.614]    </control>
[00:38:28.614]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:38:28.614]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:28.614]        // =>  TRUE
[00:38:28.614]      <block atomic="false" info="">
[00:38:28.614]        WriteAP(0x00, 0x190008);
[00:38:28.618]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:28.618]        WriteAP(0xF0, 0x01);
[00:38:28.624]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:28.624]      </block>
[00:38:28.625]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:28.625]    </control>
[00:38:28.625]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:38:28.625]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:28.625]        // =>  FALSE
[00:38:28.625]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:28.625]    </control>
[00:38:28.625]    <block atomic="false" info="">
[00:38:28.625]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:28.633]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:38:28.633]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:38:28.633]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:28.635]      __ap = 0; //lets make sure we reset the access point selection
[00:38:28.635]        // -> [__ap <= 0x00000000]
[00:38:28.635]    </block>
[00:38:28.635]  </sequence>
[00:38:28.635]  
[00:38:28.678]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:38:28.678]  
[00:38:28.679]  <debugvars>
[00:38:28.679]    // Pre-defined
[00:38:28.679]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:28.679]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:28.679]    __dp=0x00000000
[00:38:28.679]    __ap=0x00000000
[00:38:28.679]    __traceout=0x00000000      (Trace Disabled)
[00:38:28.680]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:28.680]    __FlashAddr=0x00000000
[00:38:28.680]    __FlashLen=0x00000000
[00:38:28.680]    __FlashArg=0x00000000
[00:38:28.680]    __FlashOp=0x00000000
[00:38:28.680]    __Result=0x00000000
[00:38:28.680]  </debugvars>
[00:38:28.680]  
[00:38:28.680]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:38:28.680]    <block atomic="false" info="">
[00:38:28.680]      __var deviceID = 0;
[00:38:28.680]        // -> [deviceID <= 0x00000000]
[00:38:28.681]      __var version = 0;
[00:38:28.681]        // -> [version <= 0x00000000]
[00:38:28.681]      __var partNum = 0;
[00:38:28.681]        // -> [partNum <= 0x00000000]
[00:38:28.682]      __var manuf = 0;
[00:38:28.682]        // -> [manuf <= 0x00000000]
[00:38:28.682]      __var isMSPM0G1X0X_G3X0X = 0;
[00:38:28.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:38:28.682]      __var isProduction = 0;
[00:38:28.682]        // -> [isProduction <= 0x00000000]
[00:38:28.682]      __var continueId = 0;
[00:38:28.682]        // -> [continueId <= 0x00000000]
[00:38:28.682]      deviceID =   Read32(0x41C40004);
[00:38:28.691]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:38:28.691]        // -> [deviceID <= 0x2BB8802F]
[00:38:28.691]      version = deviceID >> 28;
[00:38:28.691]        // -> [version <= 0x00000002]
[00:38:28.691]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:38:28.692]        // -> [partNum <= 0x0000BB88]
[00:38:28.692]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:38:28.692]        // -> [manuf <= 0x00000017]
[00:38:28.692]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:38:28.692]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:38:28.692]      isProduction = (version > 0);
[00:38:28.692]        // -> [isProduction <= 0x00000001]
[00:38:28.692]    </block>
[00:38:28.692]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:38:28.693]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:38:28.693]        // =>  FALSE
[00:38:28.693]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:38:28.693]    </control>
[00:38:28.693]    <control if="continueId == 4" while="" timeout="0" info="">
[00:38:28.693]      // if-block "continueId == 4"
[00:38:28.693]        // =>  FALSE
[00:38:28.693]      // skip if-block "continueId == 4"
[00:38:28.693]    </control>
[00:38:28.694]    <control if="!isProduction" while="" timeout="0" info="">
[00:38:28.694]      // if-block "!isProduction"
[00:38:28.694]        // =>  FALSE
[00:38:28.694]      // skip if-block "!isProduction"
[00:38:28.694]    </control>
[00:38:28.694]  </sequence>
[00:38:28.694]  
[00:38:35.595]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:38:35.595]  
[00:38:35.595]  <debugvars>
[00:38:35.595]    // Pre-defined
[00:38:35.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:35.595]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:38:35.595]    __dp=0x00000000
[00:38:35.595]    __ap=0x00000000
[00:38:35.595]    __traceout=0x00000000      (Trace Disabled)
[00:38:35.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:35.595]    __FlashAddr=0x00000000
[00:38:35.595]    __FlashLen=0x00000000
[00:38:35.595]    __FlashArg=0x00000000
[00:38:35.596]    __FlashOp=0x00000000
[00:38:35.596]    __Result=0x00000000
[00:38:35.596]  </debugvars>
[00:38:35.596]  
[00:38:35.596]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:38:35.596]    <block atomic="false" info="">
[00:38:35.596]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:38:35.596]        // -> [isSWJ <= 0x00000001]
[00:38:35.596]      __var hasDormant = __protocol & 0x00020000;
[00:38:35.597]        // -> [hasDormant <= 0x00000000]
[00:38:35.597]      __var protType   = __protocol & 0x0000FFFF;
[00:38:35.597]        // -> [protType <= 0x00000002]
[00:38:35.597]    </block>
[00:38:35.597]    <control if="protType == 1" while="" timeout="0" info="">
[00:38:35.597]      // if-block "protType == 1"
[00:38:35.597]        // =>  FALSE
[00:38:35.597]      // skip if-block "protType == 1"
[00:38:35.597]    </control>
[00:38:35.597]    <control if="protType == 2" while="" timeout="0" info="">
[00:38:35.597]      // if-block "protType == 2"
[00:38:35.598]        // =>  TRUE
[00:38:35.598]      <control if="isSWJ" while="" timeout="0" info="">
[00:38:35.598]        // if-block "isSWJ"
[00:38:35.598]          // =>  TRUE
[00:38:35.598]        <control if="hasDormant" while="" timeout="0" info="">
[00:38:35.598]          // if-block "hasDormant"
[00:38:35.598]            // =>  FALSE
[00:38:35.600]          // skip if-block "hasDormant"
[00:38:35.600]        </control>
[00:38:35.600]        <control if="!hasDormant" while="" timeout="0" info="">
[00:38:35.600]          // if-block "!hasDormant"
[00:38:35.600]            // =>  TRUE
[00:38:35.600]          <block atomic="false" info="">
[00:38:35.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:38:35.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:35.603]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:38:35.606]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:38:35.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:38:35.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:35.609]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:38:35.612]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:38:35.612]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:38:35.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:35.617]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:38:35.620]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:38:35.620]          </block>
[00:38:35.620]          // end if-block "!hasDormant"
[00:38:35.620]        </control>
[00:38:35.620]        // end if-block "isSWJ"
[00:38:35.620]      </control>
[00:38:35.620]      <control if="!isSWJ" while="" timeout="0" info="">
[00:38:35.620]        // if-block "!isSWJ"
[00:38:35.621]          // =>  FALSE
[00:38:35.621]        // skip if-block "!isSWJ"
[00:38:35.621]      </control>
[00:38:35.621]      <block atomic="false" info="">
[00:38:35.621]        ReadDP(0x0);
[00:38:35.626]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:38:35.626]      </block>
[00:38:35.626]      // end if-block "protType == 2"
[00:38:35.627]    </control>
[00:38:35.627]  </sequence>
[00:38:35.627]  
[00:38:35.634]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:38:35.634]  
[00:38:35.635]  <debugvars>
[00:38:35.635]    // Pre-defined
[00:38:35.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:35.635]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:38:35.635]    __dp=0x00000000
[00:38:35.635]    __ap=0x00000000
[00:38:35.635]    __traceout=0x00000000      (Trace Disabled)
[00:38:35.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:35.635]    __FlashAddr=0x00000000
[00:38:35.635]    __FlashLen=0x00000000
[00:38:35.635]    __FlashArg=0x00000000
[00:38:35.635]    __FlashOp=0x00000000
[00:38:35.636]    __Result=0x00000000
[00:38:35.636]  </debugvars>
[00:38:35.636]  
[00:38:35.636]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:38:35.636]    <block atomic="false" info="">
[00:38:35.636]      __var SW_DP_ABORT       = 0x0;
[00:38:35.636]        // -> [SW_DP_ABORT <= 0x00000000]
[00:38:35.636]      __var DP_CTRL_STAT      = 0x4;
[00:38:35.636]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:38:35.637]      __var DP_SELECT         = 0x8;
[00:38:35.637]        // -> [DP_SELECT <= 0x00000008]
[00:38:35.637]      __var powered_down      = 0;
[00:38:35.637]        // -> [powered_down <= 0x00000000]
[00:38:35.637]      WriteDP(DP_SELECT, 0x00000000);
[00:38:35.640]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:38:35.641]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:38:35.643]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:38:35.643]        // -> [powered_down <= 0x00000001]
[00:38:35.643]    </block>
[00:38:35.643]    <control if="powered_down" while="" timeout="0" info="">
[00:38:35.643]      // if-block "powered_down"
[00:38:35.643]        // =>  TRUE
[00:38:35.644]      <block atomic="false" info="">
[00:38:35.644]        Message(0, "Debug/System power-up request sent");
[00:38:35.646]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:38:35.649]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:38:35.649]      </block>
[00:38:35.650]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:38:35.650]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:38:35.652]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:38:35.652]        // while-condition  =>  FALSE
[00:38:35.652]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:38:35.652]      </control>
[00:38:35.652]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:38:35.652]        // if-block "(__protocol & 0xFFFF) == 1"
[00:38:35.653]          // =>  FALSE
[00:38:35.653]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:38:35.653]      </control>
[00:38:35.653]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:38:35.653]        // if-block "(__protocol & 0xFFFF) == 2"
[00:38:35.653]          // =>  TRUE
[00:38:35.653]        <block atomic="false" info="">
[00:38:35.653]          Message(0, "executing SWD power up");
[00:38:35.655]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:38:35.659]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:38:35.659]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:38:35.662]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:38:35.662]        </block>
[00:38:35.662]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:38:35.662]      </control>
[00:38:35.662]      // end if-block "powered_down"
[00:38:35.663]    </control>
[00:38:35.663]    <block atomic="false" info="">
[00:38:35.664]      __var DEBUG_PORT_VAL    = 0;
[00:38:35.664]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:38:35.664]      __var ACCESS_POINT_VAL  = 0;
[00:38:35.664]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:38:35.664]      __ap = 1; 
[00:38:35.664]        // -> [__ap <= 0x00000001]
[00:38:35.664]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:38:35.670]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:38:35.670]      __ap = 4;
[00:38:35.670]        // -> [__ap <= 0x00000004]
[00:38:35.670]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:35.676]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:38:35.676]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:38:35.677]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:35.679]    </block>
[00:38:35.679]    <block atomic="false" info="">
[00:38:35.679]      __var nReset = 0x80;
[00:38:35.679]        // -> [nReset <= 0x00000080]
[00:38:35.679]      __var canReadPins = 0;
[00:38:35.679]        // -> [canReadPins <= 0x00000000]
[00:38:35.679]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:38:35.682]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:38:35.682]        // -> [canReadPins <= 0x00000001]
[00:38:35.682]    </block>
[00:38:35.682]    <control if="" while="1" timeout="200" info="">
[00:38:35.682]      // while "1"  (timeout="200")
[00:38:35.683]      // while-condition  =>  TRUE
[00:38:35.683]      // while "1"  (timeout="200")
[00:38:35.684]      // while-condition  =>  TRUE
[00:38:35.684]      // while "1"  (timeout="200")
[00:38:35.684]      // while-condition  =>  TRUE
[00:38:35.684]      // while "1"  (timeout="200")
[00:38:35.684]      // while-condition  =>  TRUE
[00:38:35.684]      // while "1"  (timeout="200")
[00:38:35.684]      // while-condition  =>  TRUE
[00:38:35.684]      // while "1"  (timeout="200")
[00:38:35.684]      // while-condition  =>  TRUE
[00:38:35.684]      // while "1"  (timeout="200")
[00:38:35.684]      // while-condition  =>  TRUE
[00:38:35.684]      // while "1"  (timeout="200")
[00:38:35.685]      // while-condition  =>  TRUE
[00:38:35.685]      // while "1"  (timeout="200")
[00:38:35.685]      // while-condition  =>  TRUE
[00:38:35.685]      // while "1"  (timeout="200")
[00:38:35.685]      // while-condition  =>  TRUE
[00:38:35.685]      // while "1"  (timeout="200")
[00:38:35.685]      // while-condition  =>  TRUE
[00:38:35.685]      // while "1"  (timeout="200")
[00:38:35.685]      // while-condition  =>  TRUE
[00:38:35.686]      // while "1"  (timeout="200")
[00:38:35.686]      // while-condition  =>  TRUE
[00:38:35.686]      // while "1"  (timeout="200")
[00:38:35.686]      // while-condition  =>  TRUE
[00:38:35.686]      // while "1"  (timeout="200")
[00:38:35.686]      // while-condition  =>  TRUE
[00:38:35.686]      // while "1"  (timeout="200")
[00:38:35.686]      // while-condition  =>  TRUE
[00:38:35.686]      // while "1"  (timeout="200")
[00:38:35.686]      // while-condition  =>  TRUE
[00:38:35.687]      // while "1"  (timeout="200")
[00:38:35.687]      // while  =>  TIMEOUT
[00:38:35.687]      // end while "1"
[00:38:35.687]    </control>
[00:38:35.687]    <control if="canReadPins" while="" timeout="0" info="">
[00:38:35.687]      // if-block "canReadPins"
[00:38:35.687]        // =>  TRUE
[00:38:35.687]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:38:35.687]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:38:35.692]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:38:35.692]        // while-condition  =>  FALSE
[00:38:35.692]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:38:35.692]      </control>
[00:38:35.692]      // end if-block "canReadPins"
[00:38:35.692]    </control>
[00:38:35.692]    <control if="!canReadPins" while="" timeout="0" info="">
[00:38:35.692]      // if-block "!canReadPins"
[00:38:35.692]        // =>  FALSE
[00:38:35.692]      // skip if-block "!canReadPins"
[00:38:35.692]    </control>
[00:38:35.692]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:38:35.692]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:35.692]        // =>  TRUE
[00:38:35.692]      <block atomic="false" info="">
[00:38:35.693]        WriteAP(0x00, 0x190008);
[00:38:35.696]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:35.696]        WriteAP(0xF0, 0x01);
[00:38:35.702]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:35.702]      </block>
[00:38:35.703]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:35.703]    </control>
[00:38:35.703]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:38:35.703]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:35.704]        // =>  FALSE
[00:38:35.704]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:35.704]    </control>
[00:38:35.704]    <block atomic="false" info="">
[00:38:35.704]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:35.714]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:38:35.714]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:38:35.714]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:35.716]      __ap = 0; //lets make sure we reset the access point selection
[00:38:35.716]        // -> [__ap <= 0x00000000]
[00:38:35.716]    </block>
[00:38:35.716]  </sequence>
[00:38:35.716]  
[00:38:35.758]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:38:35.758]  
[00:38:35.758]  <debugvars>
[00:38:35.758]    // Pre-defined
[00:38:35.758]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:35.758]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:38:35.759]    __dp=0x00000000
[00:38:35.759]    __ap=0x00000000
[00:38:35.759]    __traceout=0x00000000      (Trace Disabled)
[00:38:35.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:35.759]    __FlashAddr=0x00000000
[00:38:35.759]    __FlashLen=0x00000000
[00:38:35.759]    __FlashArg=0x00000000
[00:38:35.759]    __FlashOp=0x00000000
[00:38:35.759]    __Result=0x00000000
[00:38:35.759]  </debugvars>
[00:38:35.759]  
[00:38:35.760]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:38:35.760]    <block atomic="false" info="">
[00:38:35.760]      __var deviceID = 0;
[00:38:35.760]        // -> [deviceID <= 0x00000000]
[00:38:35.760]      __var version = 0;
[00:38:35.760]        // -> [version <= 0x00000000]
[00:38:35.761]      __var partNum = 0;
[00:38:35.761]        // -> [partNum <= 0x00000000]
[00:38:35.761]      __var manuf = 0;
[00:38:35.761]        // -> [manuf <= 0x00000000]
[00:38:35.761]      __var isMSPM0G1X0X_G3X0X = 0;
[00:38:35.761]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:38:35.761]      __var isProduction = 0;
[00:38:35.761]        // -> [isProduction <= 0x00000000]
[00:38:35.761]      __var continueId = 0;
[00:38:35.761]        // -> [continueId <= 0x00000000]
[00:38:35.761]      deviceID =   Read32(0x41C40004);
[00:38:35.771]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:38:35.771]        // -> [deviceID <= 0x2BB8802F]
[00:38:35.771]      version = deviceID >> 28;
[00:38:35.771]        // -> [version <= 0x00000002]
[00:38:35.772]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:38:35.772]        // -> [partNum <= 0x0000BB88]
[00:38:35.772]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:38:35.772]        // -> [manuf <= 0x00000017]
[00:38:35.772]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:38:35.772]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:38:35.772]      isProduction = (version > 0);
[00:38:35.773]        // -> [isProduction <= 0x00000001]
[00:38:35.773]    </block>
[00:38:35.773]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:38:35.773]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:38:35.773]        // =>  FALSE
[00:38:35.773]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:38:35.773]    </control>
[00:38:35.773]    <control if="continueId == 4" while="" timeout="0" info="">
[00:38:35.773]      // if-block "continueId == 4"
[00:38:35.773]        // =>  FALSE
[00:38:35.773]      // skip if-block "continueId == 4"
[00:38:35.773]    </control>
[00:38:35.773]    <control if="!isProduction" while="" timeout="0" info="">
[00:38:35.773]      // if-block "!isProduction"
[00:38:35.773]        // =>  FALSE
[00:38:35.775]      // skip if-block "!isProduction"
[00:38:35.775]    </control>
[00:38:35.775]  </sequence>
[00:38:35.775]  
