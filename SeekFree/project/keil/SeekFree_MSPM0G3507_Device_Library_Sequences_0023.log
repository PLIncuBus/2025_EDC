/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\CAO\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0023.log
 *  Created     : 22:29:24 (02/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[22:29:24.807]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:29:24.807]  
[22:29:24.807]  <debugvars>
[22:29:24.808]    // Pre-defined
[22:29:24.808]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:24.808]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:29:24.808]    __dp=0x00000000
[22:29:24.808]    __ap=0x00000000
[22:29:24.808]    __traceout=0x00000000      (Trace Disabled)
[22:29:24.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:24.808]    __FlashAddr=0x00000000
[22:29:24.809]    __FlashLen=0x00000000
[22:29:24.809]    __FlashArg=0x00000000
[22:29:24.809]    __FlashOp=0x00000000
[22:29:24.809]    __Result=0x00000000
[22:29:24.809]  </debugvars>
[22:29:24.809]  
[22:29:24.809]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:29:24.809]    <block atomic="false" info="">
[22:29:24.809]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:29:24.809]        // -> [isSWJ <= 0x00000001]
[22:29:24.809]      __var hasDormant = __protocol & 0x00020000;
[22:29:24.809]        // -> [hasDormant <= 0x00000000]
[22:29:24.810]      __var protType   = __protocol & 0x0000FFFF;
[22:29:24.810]        // -> [protType <= 0x00000002]
[22:29:24.810]    </block>
[22:29:24.810]    <control if="protType == 1" while="" timeout="0" info="">
[22:29:24.810]      // if-block "protType == 1"
[22:29:24.810]        // =>  FALSE
[22:29:24.810]      // skip if-block "protType == 1"
[22:29:24.810]    </control>
[22:29:24.810]    <control if="protType == 2" while="" timeout="0" info="">
[22:29:24.810]      // if-block "protType == 2"
[22:29:24.810]        // =>  TRUE
[22:29:24.811]      <control if="isSWJ" while="" timeout="0" info="">
[22:29:24.811]        // if-block "isSWJ"
[22:29:24.811]          // =>  TRUE
[22:29:24.811]        <control if="hasDormant" while="" timeout="0" info="">
[22:29:24.811]          // if-block "hasDormant"
[22:29:24.811]            // =>  FALSE
[22:29:24.811]          // skip if-block "hasDormant"
[22:29:24.811]        </control>
[22:29:24.811]        <control if="!hasDormant" while="" timeout="0" info="">
[22:29:24.811]          // if-block "!hasDormant"
[22:29:24.811]            // =>  TRUE
[22:29:24.811]          <block atomic="false" info="">
[22:29:24.811]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:29:24.815]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:24.815]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:29:24.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:29:24.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:29:24.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:24.822]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:29:24.824]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:29:24.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:29:24.828]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:24.828]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:29:24.831]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:29:24.831]          </block>
[22:29:24.831]          // end if-block "!hasDormant"
[22:29:24.832]        </control>
[22:29:24.832]        // end if-block "isSWJ"
[22:29:24.832]      </control>
[22:29:24.832]      <control if="!isSWJ" while="" timeout="0" info="">
[22:29:24.832]        // if-block "!isSWJ"
[22:29:24.832]          // =>  FALSE
[22:29:24.832]        // skip if-block "!isSWJ"
[22:29:24.832]      </control>
[22:29:24.832]      <block atomic="false" info="">
[22:29:24.832]        ReadDP(0x0);
[22:29:24.835]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:29:24.835]      </block>
[22:29:24.835]      // end if-block "protType == 2"
[22:29:24.836]    </control>
[22:29:24.836]  </sequence>
[22:29:24.836]  
[22:29:27.323]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:29:27.323]  
[22:29:27.324]  <debugvars>
[22:29:27.324]    // Pre-defined
[22:29:27.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:27.324]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:29:27.324]    __dp=0x00000000
[22:29:27.324]    __ap=0x00000000
[22:29:27.324]    __traceout=0x00000000      (Trace Disabled)
[22:29:27.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:27.325]    __FlashAddr=0x00000000
[22:29:27.325]    __FlashLen=0x00000000
[22:29:27.325]    __FlashArg=0x00000000
[22:29:27.325]    __FlashOp=0x00000000
[22:29:27.325]    __Result=0x00000000
[22:29:27.325]  </debugvars>
[22:29:27.325]  
[22:29:27.325]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:29:27.325]    <block atomic="false" info="">
[22:29:27.325]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:29:27.325]        // -> [isSWJ <= 0x00000001]
[22:29:27.325]      __var hasDormant = __protocol & 0x00020000;
[22:29:27.326]        // -> [hasDormant <= 0x00000000]
[22:29:27.326]      __var protType   = __protocol & 0x0000FFFF;
[22:29:27.326]        // -> [protType <= 0x00000002]
[22:29:27.326]    </block>
[22:29:27.326]    <control if="protType == 1" while="" timeout="0" info="">
[22:29:27.326]      // if-block "protType == 1"
[22:29:27.326]        // =>  FALSE
[22:29:27.326]      // skip if-block "protType == 1"
[22:29:27.326]    </control>
[22:29:27.326]    <control if="protType == 2" while="" timeout="0" info="">
[22:29:27.326]      // if-block "protType == 2"
[22:29:27.326]        // =>  TRUE
[22:29:27.327]      <control if="isSWJ" while="" timeout="0" info="">
[22:29:27.327]        // if-block "isSWJ"
[22:29:27.327]          // =>  TRUE
[22:29:27.327]        <control if="hasDormant" while="" timeout="0" info="">
[22:29:27.327]          // if-block "hasDormant"
[22:29:27.327]            // =>  FALSE
[22:29:27.327]          // skip if-block "hasDormant"
[22:29:27.327]        </control>
[22:29:27.327]        <control if="!hasDormant" while="" timeout="0" info="">
[22:29:27.327]          // if-block "!hasDormant"
[22:29:27.327]            // =>  TRUE
[22:29:27.327]          <block atomic="false" info="">
[22:29:27.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:29:27.331]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:27.331]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:29:27.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:29:27.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:29:27.342]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:27.343]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:29:27.348]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:29:27.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:29:27.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:27.355]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:29:27.358]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:29:27.358]          </block>
[22:29:27.358]          // end if-block "!hasDormant"
[22:29:27.358]        </control>
[22:29:27.358]        // end if-block "isSWJ"
[22:29:27.358]      </control>
[22:29:27.358]      <control if="!isSWJ" while="" timeout="0" info="">
[22:29:27.358]        // if-block "!isSWJ"
[22:29:27.358]          // =>  FALSE
[22:29:27.359]        // skip if-block "!isSWJ"
[22:29:27.359]      </control>
[22:29:27.359]      <block atomic="false" info="">
[22:29:27.359]        ReadDP(0x0);
[22:29:27.362]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:29:27.362]      </block>
[22:29:27.362]      // end if-block "protType == 2"
[22:29:27.362]    </control>
[22:29:27.362]  </sequence>
[22:29:27.362]  
[22:29:28.933]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:29:28.933]  
[22:29:28.934]  <debugvars>
[22:29:28.934]    // Pre-defined
[22:29:28.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:28.934]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:29:28.934]    __dp=0x00000000
[22:29:28.935]    __ap=0x00000000
[22:29:28.935]    __traceout=0x00000000      (Trace Disabled)
[22:29:28.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:28.935]    __FlashAddr=0x00000000
[22:29:28.935]    __FlashLen=0x00000000
[22:29:28.935]    __FlashArg=0x00000000
[22:29:28.935]    __FlashOp=0x00000000
[22:29:28.935]    __Result=0x00000000
[22:29:28.935]  </debugvars>
[22:29:28.935]  
[22:29:28.935]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:29:28.936]    <block atomic="false" info="">
[22:29:28.936]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:29:28.936]        // -> [isSWJ <= 0x00000001]
[22:29:28.936]      __var hasDormant = __protocol & 0x00020000;
[22:29:28.936]        // -> [hasDormant <= 0x00000000]
[22:29:28.936]      __var protType   = __protocol & 0x0000FFFF;
[22:29:28.936]        // -> [protType <= 0x00000002]
[22:29:28.936]    </block>
[22:29:28.936]    <control if="protType == 1" while="" timeout="0" info="">
[22:29:28.936]      // if-block "protType == 1"
[22:29:28.936]        // =>  FALSE
[22:29:28.937]      // skip if-block "protType == 1"
[22:29:28.937]    </control>
[22:29:28.937]    <control if="protType == 2" while="" timeout="0" info="">
[22:29:28.937]      // if-block "protType == 2"
[22:29:28.937]        // =>  TRUE
[22:29:28.937]      <control if="isSWJ" while="" timeout="0" info="">
[22:29:28.937]        // if-block "isSWJ"
[22:29:28.937]          // =>  TRUE
[22:29:28.937]        <control if="hasDormant" while="" timeout="0" info="">
[22:29:28.937]          // if-block "hasDormant"
[22:29:28.937]            // =>  FALSE
[22:29:28.938]          // skip if-block "hasDormant"
[22:29:28.938]        </control>
[22:29:28.938]        <control if="!hasDormant" while="" timeout="0" info="">
[22:29:28.938]          // if-block "!hasDormant"
[22:29:28.938]            // =>  TRUE
[22:29:28.938]          <block atomic="false" info="">
[22:29:28.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:29:28.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:28.940]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:29:28.941]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:29:28.941]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:29:28.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:28.945]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:29:28.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:29:28.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:29:28.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:28.949]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:29:28.950]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:29:28.950]          </block>
[22:29:28.950]          // end if-block "!hasDormant"
[22:29:28.950]        </control>
[22:29:28.951]        // end if-block "isSWJ"
[22:29:28.951]      </control>
[22:29:28.951]      <control if="!isSWJ" while="" timeout="0" info="">
[22:29:28.951]        // if-block "!isSWJ"
[22:29:28.951]          // =>  FALSE
[22:29:28.951]        // skip if-block "!isSWJ"
[22:29:28.951]      </control>
[22:29:28.951]      <block atomic="false" info="">
[22:29:28.951]        ReadDP(0x0);
[22:29:28.953]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:29:28.953]      </block>
[22:29:28.954]      // end if-block "protType == 2"
[22:29:28.954]    </control>
[22:29:28.954]  </sequence>
[22:29:28.954]  
[22:29:32.432]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:29:32.432]  
[22:29:32.440]  <debugvars>
[22:29:32.440]    // Pre-defined
[22:29:32.440]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:32.440]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:29:32.440]    __dp=0x00000000
[22:29:32.440]    __ap=0x00000000
[22:29:32.440]    __traceout=0x00000000      (Trace Disabled)
[22:29:32.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:32.441]    __FlashAddr=0x00000000
[22:29:32.441]    __FlashLen=0x00000000
[22:29:32.441]    __FlashArg=0x00000000
[22:29:32.441]    __FlashOp=0x00000000
[22:29:32.441]    __Result=0x00000000
[22:29:32.441]  </debugvars>
[22:29:32.441]  
[22:29:32.441]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:29:32.441]    <block atomic="false" info="">
[22:29:32.441]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:29:32.441]        // -> [isSWJ <= 0x00000001]
[22:29:32.442]      __var hasDormant = __protocol & 0x00020000;
[22:29:32.442]        // -> [hasDormant <= 0x00000000]
[22:29:32.442]      __var protType   = __protocol & 0x0000FFFF;
[22:29:32.442]        // -> [protType <= 0x00000002]
[22:29:32.442]    </block>
[22:29:32.442]    <control if="protType == 1" while="" timeout="0" info="">
[22:29:32.442]      // if-block "protType == 1"
[22:29:32.442]        // =>  FALSE
[22:29:32.442]      // skip if-block "protType == 1"
[22:29:32.442]    </control>
[22:29:32.443]    <control if="protType == 2" while="" timeout="0" info="">
[22:29:32.443]      // if-block "protType == 2"
[22:29:32.443]        // =>  TRUE
[22:29:32.443]      <control if="isSWJ" while="" timeout="0" info="">
[22:29:32.443]        // if-block "isSWJ"
[22:29:32.443]          // =>  TRUE
[22:29:32.443]        <control if="hasDormant" while="" timeout="0" info="">
[22:29:32.443]          // if-block "hasDormant"
[22:29:32.443]            // =>  FALSE
[22:29:32.443]          // skip if-block "hasDormant"
[22:29:32.443]        </control>
[22:29:32.443]        <control if="!hasDormant" while="" timeout="0" info="">
[22:29:32.444]          // if-block "!hasDormant"
[22:29:32.444]            // =>  TRUE
[22:29:32.444]          <block atomic="false" info="">
[22:29:32.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:29:32.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:32.445]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:29:32.447]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:29:32.447]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:29:32.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:32.448]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:29:32.450]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:29:32.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:29:32.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:32.453]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:29:32.455]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:29:32.455]          </block>
[22:29:32.455]          // end if-block "!hasDormant"
[22:29:32.455]        </control>
[22:29:32.455]        // end if-block "isSWJ"
[22:29:32.455]      </control>
[22:29:32.455]      <control if="!isSWJ" while="" timeout="0" info="">
[22:29:32.455]        // if-block "!isSWJ"
[22:29:32.455]          // =>  FALSE
[22:29:32.456]        // skip if-block "!isSWJ"
[22:29:32.456]      </control>
[22:29:32.456]      <block atomic="false" info="">
[22:29:32.456]        ReadDP(0x0);
[22:29:32.457]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:29:32.457]      </block>
[22:29:32.457]      // end if-block "protType == 2"
[22:29:32.457]    </control>
[22:29:32.457]  </sequence>
[22:29:32.458]  
[22:29:32.461]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:29:32.461]  
[22:29:32.461]  <debugvars>
[22:29:32.461]    // Pre-defined
[22:29:32.461]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:32.461]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:29:32.461]    __dp=0x00000000
[22:29:32.462]    __ap=0x00000000
[22:29:32.462]    __traceout=0x00000000      (Trace Disabled)
[22:29:32.462]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:32.462]    __FlashAddr=0x00000000
[22:29:32.462]    __FlashLen=0x00000000
[22:29:32.462]    __FlashArg=0x00000000
[22:29:32.462]    __FlashOp=0x00000000
[22:29:32.462]    __Result=0x00000000
[22:29:32.462]  </debugvars>
[22:29:32.462]  
[22:29:32.462]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:29:32.463]    <block atomic="false" info="">
[22:29:32.463]      __var SW_DP_ABORT       = 0x0;
[22:29:32.463]        // -> [SW_DP_ABORT <= 0x00000000]
[22:29:32.463]      __var DP_CTRL_STAT      = 0x4;
[22:29:32.463]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:29:32.463]      __var DP_SELECT         = 0x8;
[22:29:32.463]        // -> [DP_SELECT <= 0x00000008]
[22:29:32.463]      __var powered_down      = 0;
[22:29:32.463]        // -> [powered_down <= 0x00000000]
[22:29:32.464]      WriteDP(DP_SELECT, 0x00000000);
[22:29:32.467]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:29:32.467]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:29:32.469]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:29:32.469]        // -> [powered_down <= 0x00000001]
[22:29:32.469]    </block>
[22:29:32.469]    <control if="powered_down" while="" timeout="0" info="">
[22:29:32.469]      // if-block "powered_down"
[22:29:32.469]        // =>  TRUE
[22:29:32.469]      <block atomic="false" info="">
[22:29:32.469]        Message(0, "Debug/System power-up request sent");
[22:29:32.472]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:29:32.474]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:29:32.474]      </block>
[22:29:32.474]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:29:32.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:29:32.475]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:29:32.475]        // while-condition  =>  FALSE
[22:29:32.475]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:29:32.475]      </control>
[22:29:32.475]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:29:32.475]        // if-block "(__protocol & 0xFFFF) == 1"
[22:29:32.476]          // =>  FALSE
[22:29:32.476]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:29:32.476]      </control>
[22:29:32.476]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:29:32.476]        // if-block "(__protocol & 0xFFFF) == 2"
[22:29:32.476]          // =>  TRUE
[22:29:32.476]        <block atomic="false" info="">
[22:29:32.476]          Message(0, "executing SWD power up");
[22:29:32.479]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:29:32.480]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:29:32.480]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:29:32.482]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:29:32.482]        </block>
[22:29:32.482]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:29:32.482]      </control>
[22:29:32.482]      // end if-block "powered_down"
[22:29:32.482]    </control>
[22:29:32.482]    <block atomic="false" info="">
[22:29:32.482]      __var DEBUG_PORT_VAL    = 0;
[22:29:32.482]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:29:32.483]      __var ACCESS_POINT_VAL  = 0;
[22:29:32.483]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:29:32.483]      __ap = 1; 
[22:29:32.483]        // -> [__ap <= 0x00000001]
[22:29:32.483]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:29:32.486]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:29:32.486]      __ap = 4;
[22:29:32.486]        // -> [__ap <= 0x00000004]
[22:29:32.486]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:29:32.489]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:29:32.489]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:29:32.490]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:29:32.492]    </block>
[22:29:32.492]    <block atomic="false" info="">
[22:29:32.492]      __var nReset = 0x80;
[22:29:32.492]        // -> [nReset <= 0x00000080]
[22:29:32.492]      __var canReadPins = 0;
[22:29:32.492]        // -> [canReadPins <= 0x00000000]
[22:29:32.492]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:29:32.494]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:29:32.494]        // -> [canReadPins <= 0x00000001]
[22:29:32.494]    </block>
[22:29:32.494]    <control if="" while="1" timeout="200" info="">
[22:29:32.494]      // while "1"  (timeout="200")
[22:29:32.494]      // while-condition  =>  TRUE
[22:29:32.494]      // while "1"  (timeout="200")
[22:29:32.494]      // while-condition  =>  TRUE
[22:29:32.494]      // while "1"  (timeout="200")
[22:29:32.495]      // while-condition  =>  TRUE
[22:29:32.495]      // while "1"  (timeout="200")
[22:29:32.495]      // while-condition  =>  TRUE
[22:29:32.495]      // while "1"  (timeout="200")
[22:29:32.495]      // while-condition  =>  TRUE
[22:29:32.495]      // while "1"  (timeout="200")
[22:29:32.495]      // while-condition  =>  TRUE
[22:29:32.495]      // while "1"  (timeout="200")
[22:29:32.495]      // while-condition  =>  TRUE
[22:29:32.495]      // while "1"  (timeout="200")
[22:29:32.495]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.496]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.496]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.496]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.496]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.496]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.496]      // while-condition  =>  TRUE
[22:29:32.496]      // while "1"  (timeout="200")
[22:29:32.497]      // while-condition  =>  TRUE
[22:29:32.497]      // while "1"  (timeout="200")
[22:29:32.497]      // while-condition  =>  TRUE
[22:29:32.497]      // while "1"  (timeout="200")
[22:29:32.497]      // while-condition  =>  TRUE
[22:29:32.497]      // while "1"  (timeout="200")
[22:29:32.497]      // while-condition  =>  TRUE
[22:29:32.497]      // while "1"  (timeout="200")
[22:29:32.497]      // while-condition  =>  TRUE
[22:29:32.497]      // while "1"  (timeout="200")
[22:29:32.497]      // while-condition  =>  TRUE
[22:29:32.498]      // while "1"  (timeout="200")
[22:29:32.498]      // while-condition  =>  TRUE
[22:29:32.498]      // while "1"  (timeout="200")
[22:29:32.498]      // while-condition  =>  TRUE
[22:29:32.498]      // while "1"  (timeout="200")
[22:29:32.498]      // while-condition  =>  TRUE
[22:29:32.498]      // while "1"  (timeout="200")
[22:29:32.498]      // while-condition  =>  TRUE
[22:29:32.498]      // while "1"  (timeout="200")
[22:29:32.498]      // while-condition  =>  TRUE
[22:29:32.498]      // while "1"  (timeout="200")
[22:29:32.498]      // while-condition  =>  TRUE
[22:29:32.499]      // while "1"  (timeout="200")
[22:29:32.499]      // while-condition  =>  TRUE
[22:29:32.499]      // while "1"  (timeout="200")
[22:29:32.499]      // while-condition  =>  TRUE
[22:29:32.499]      // while "1"  (timeout="200")
[22:29:32.499]      // while-condition  =>  TRUE
[22:29:32.499]      // while "1"  (timeout="200")
[22:29:32.499]      // while-condition  =>  TRUE
[22:29:32.499]      // while "1"  (timeout="200")
[22:29:32.499]      // while-condition  =>  TRUE
[22:29:32.499]      // while "1"  (timeout="200")
[22:29:32.500]      // while-condition  =>  TRUE
[22:29:32.500]      // while "1"  (timeout="200")
[22:29:32.500]      // while-condition  =>  TRUE
[22:29:32.500]      // while "1"  (timeout="200")
[22:29:32.500]      // while-condition  =>  TRUE
[22:29:32.500]      // while "1"  (timeout="200")
[22:29:32.500]      // while-condition  =>  TRUE
[22:29:32.500]      // while "1"  (timeout="200")
[22:29:32.500]      // while-condition  =>  TRUE
[22:29:32.500]      // while "1"  (timeout="200")
[22:29:32.500]      // while-condition  =>  TRUE
[22:29:32.501]      // while "1"  (timeout="200")
[22:29:32.501]      // while  =>  TIMEOUT
[22:29:32.501]      // end while "1"
[22:29:32.501]    </control>
[22:29:32.501]    <control if="canReadPins" while="" timeout="0" info="">
[22:29:32.501]      // if-block "canReadPins"
[22:29:32.501]        // =>  TRUE
[22:29:32.501]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:29:32.501]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:29:32.502]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:29:32.503]        // while-condition  =>  FALSE
[22:29:32.503]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:29:32.503]      </control>
[22:29:32.503]      // end if-block "canReadPins"
[22:29:32.503]    </control>
[22:29:32.503]    <control if="!canReadPins" while="" timeout="0" info="">
[22:29:32.503]      // if-block "!canReadPins"
[22:29:32.503]        // =>  FALSE
[22:29:32.503]      // skip if-block "!canReadPins"
[22:29:32.503]    </control>
[22:29:32.503]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:29:32.504]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:29:32.504]        // =>  TRUE
[22:29:32.504]      <block atomic="false" info="">
[22:29:32.504]        WriteAP(0x00, 0x190008);
[22:29:32.507]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:29:32.507]        WriteAP(0xF0, 0x01);
[22:29:32.514]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:29:32.514]      </block>
[22:29:32.514]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:29:32.514]    </control>
[22:29:32.514]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:29:32.514]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:29:32.514]        // =>  FALSE
[22:29:32.515]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:29:32.515]    </control>
[22:29:32.515]    <block atomic="false" info="">
[22:29:32.515]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:29:32.518]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:29:32.518]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:29:32.518]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:29:32.520]      __ap = 0; //lets make sure we reset the access point selection
[22:29:32.520]        // -> [__ap <= 0x00000000]
[22:29:32.520]    </block>
[22:29:32.522]  </sequence>
[22:29:32.522]  
[22:29:32.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:29:32.553]  
[22:29:32.553]  <debugvars>
[22:29:32.553]    // Pre-defined
[22:29:32.553]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:32.553]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:29:32.553]    __dp=0x00000000
[22:29:32.553]    __ap=0x00000000
[22:29:32.553]    __traceout=0x00000000      (Trace Disabled)
[22:29:32.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:32.553]    __FlashAddr=0x00000000
[22:29:32.553]    __FlashLen=0x00000000
[22:29:32.554]    __FlashArg=0x00000000
[22:29:32.554]    __FlashOp=0x00000000
[22:29:32.554]    __Result=0x00000000
[22:29:32.554]  </debugvars>
[22:29:32.554]  
[22:29:32.554]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:29:32.554]    <block atomic="false" info="">
[22:29:32.554]      __var deviceID = 0;
[22:29:32.554]        // -> [deviceID <= 0x00000000]
[22:29:32.554]      __var version = 0;
[22:29:32.554]        // -> [version <= 0x00000000]
[22:29:32.554]      __var partNum = 0;
[22:29:32.554]        // -> [partNum <= 0x00000000]
[22:29:32.555]      __var manuf = 0;
[22:29:32.555]        // -> [manuf <= 0x00000000]
[22:29:32.555]      __var isMSPM0G1X0X_G3X0X = 0;
[22:29:32.555]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:29:32.555]      __var isProduction = 0;
[22:29:32.555]        // -> [isProduction <= 0x00000000]
[22:29:32.555]      __var continueId = 0;
[22:29:32.555]        // -> [continueId <= 0x00000000]
[22:29:32.555]      deviceID =   Read32(0x41C40004);
[22:29:32.563]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:29:32.563]        // -> [deviceID <= 0x2BB8802F]
[22:29:32.563]      version = deviceID >> 28;
[22:29:32.563]        // -> [version <= 0x00000002]
[22:29:32.563]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:29:32.563]        // -> [partNum <= 0x0000BB88]
[22:29:32.563]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:29:32.563]        // -> [manuf <= 0x00000017]
[22:29:32.563]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:29:32.563]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:29:32.564]      isProduction = (version > 0);
[22:29:32.564]        // -> [isProduction <= 0x00000001]
[22:29:32.564]    </block>
[22:29:32.564]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:29:32.564]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:29:32.564]        // =>  FALSE
[22:29:32.564]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:29:32.564]    </control>
[22:29:32.564]    <control if="continueId == 4" while="" timeout="0" info="">
[22:29:32.564]      // if-block "continueId == 4"
[22:29:32.564]        // =>  FALSE
[22:29:32.565]      // skip if-block "continueId == 4"
[22:29:32.565]    </control>
[22:29:32.565]    <control if="!isProduction" while="" timeout="0" info="">
[22:29:32.565]      // if-block "!isProduction"
[22:29:32.565]        // =>  FALSE
[22:29:32.565]      // skip if-block "!isProduction"
[22:29:32.565]    </control>
[22:29:32.565]  </sequence>
[22:29:32.565]  
[22:29:38.266]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:29:38.266]  
[22:29:38.266]  <debugvars>
[22:29:38.266]    // Pre-defined
[22:29:38.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:38.266]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:29:38.266]    __dp=0x00000000
[22:29:38.266]    __ap=0x00000000
[22:29:38.266]    __traceout=0x00000000      (Trace Disabled)
[22:29:38.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:38.266]    __FlashAddr=0x00000000
[22:29:38.267]    __FlashLen=0x00000000
[22:29:38.267]    __FlashArg=0x00000000
[22:29:38.267]    __FlashOp=0x00000000
[22:29:38.267]    __Result=0x00000000
[22:29:38.267]  </debugvars>
[22:29:38.267]  
[22:29:38.267]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:29:38.267]    <block atomic="false" info="">
[22:29:38.267]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:29:38.267]        // -> [isSWJ <= 0x00000001]
[22:29:38.267]      __var hasDormant = __protocol & 0x00020000;
[22:29:38.268]        // -> [hasDormant <= 0x00000000]
[22:29:38.268]      __var protType   = __protocol & 0x0000FFFF;
[22:29:38.268]        // -> [protType <= 0x00000002]
[22:29:38.268]    </block>
[22:29:38.268]    <control if="protType == 1" while="" timeout="0" info="">
[22:29:38.268]      // if-block "protType == 1"
[22:29:38.268]        // =>  FALSE
[22:29:38.268]      // skip if-block "protType == 1"
[22:29:38.268]    </control>
[22:29:38.268]    <control if="protType == 2" while="" timeout="0" info="">
[22:29:38.268]      // if-block "protType == 2"
[22:29:38.268]        // =>  TRUE
[22:29:38.269]      <control if="isSWJ" while="" timeout="0" info="">
[22:29:38.269]        // if-block "isSWJ"
[22:29:38.269]          // =>  TRUE
[22:29:38.269]        <control if="hasDormant" while="" timeout="0" info="">
[22:29:38.269]          // if-block "hasDormant"
[22:29:38.269]            // =>  FALSE
[22:29:38.269]          // skip if-block "hasDormant"
[22:29:38.269]        </control>
[22:29:38.269]        <control if="!hasDormant" while="" timeout="0" info="">
[22:29:38.269]          // if-block "!hasDormant"
[22:29:38.269]            // =>  TRUE
[22:29:38.269]          <block atomic="false" info="">
[22:29:38.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:29:38.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:38.271]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:29:38.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:29:38.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:29:38.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:38.275]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:29:38.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:29:38.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:29:38.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:29:38.277]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:29:38.278]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:29:38.279]          </block>
[22:29:38.279]          // end if-block "!hasDormant"
[22:29:38.279]        </control>
[22:29:38.279]        // end if-block "isSWJ"
[22:29:38.279]      </control>
[22:29:38.279]      <control if="!isSWJ" while="" timeout="0" info="">
[22:29:38.279]        // if-block "!isSWJ"
[22:29:38.279]          // =>  FALSE
[22:29:38.279]        // skip if-block "!isSWJ"
[22:29:38.279]      </control>
[22:29:38.280]      <block atomic="false" info="">
[22:29:38.280]        ReadDP(0x0);
[22:29:38.281]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:29:38.281]      </block>
[22:29:38.281]      // end if-block "protType == 2"
[22:29:38.281]    </control>
[22:29:38.281]  </sequence>
[22:29:38.281]  
[22:29:38.285]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:29:38.285]  
[22:29:38.285]  <debugvars>
[22:29:38.285]    // Pre-defined
[22:29:38.285]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:38.285]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:29:38.285]    __dp=0x00000000
[22:29:38.285]    __ap=0x00000000
[22:29:38.286]    __traceout=0x00000000      (Trace Disabled)
[22:29:38.286]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:38.286]    __FlashAddr=0x00000000
[22:29:38.286]    __FlashLen=0x00000000
[22:29:38.286]    __FlashArg=0x00000000
[22:29:38.286]    __FlashOp=0x00000000
[22:29:38.286]    __Result=0x00000000
[22:29:38.286]  </debugvars>
[22:29:38.286]  
[22:29:38.286]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:29:38.287]    <block atomic="false" info="">
[22:29:38.287]      __var SW_DP_ABORT       = 0x0;
[22:29:38.287]        // -> [SW_DP_ABORT <= 0x00000000]
[22:29:38.287]      __var DP_CTRL_STAT      = 0x4;
[22:29:38.287]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:29:38.287]      __var DP_SELECT         = 0x8;
[22:29:38.287]        // -> [DP_SELECT <= 0x00000008]
[22:29:38.287]      __var powered_down      = 0;
[22:29:38.287]        // -> [powered_down <= 0x00000000]
[22:29:38.287]      WriteDP(DP_SELECT, 0x00000000);
[22:29:38.289]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:29:38.289]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:29:38.290]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:29:38.291]        // -> [powered_down <= 0x00000001]
[22:29:38.291]    </block>
[22:29:38.291]    <control if="powered_down" while="" timeout="0" info="">
[22:29:38.291]      // if-block "powered_down"
[22:29:38.291]        // =>  TRUE
[22:29:38.291]      <block atomic="false" info="">
[22:29:38.291]        Message(0, "Debug/System power-up request sent");
[22:29:38.293]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:29:38.295]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:29:38.295]      </block>
[22:29:38.295]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:29:38.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:29:38.297]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:29:38.297]        // while-condition  =>  FALSE
[22:29:38.297]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:29:38.297]      </control>
[22:29:38.297]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:29:38.297]        // if-block "(__protocol & 0xFFFF) == 1"
[22:29:38.297]          // =>  FALSE
[22:29:38.298]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:29:38.298]      </control>
[22:29:38.298]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:29:38.298]        // if-block "(__protocol & 0xFFFF) == 2"
[22:29:38.298]          // =>  TRUE
[22:29:38.298]        <block atomic="false" info="">
[22:29:38.298]          Message(0, "executing SWD power up");
[22:29:38.300]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:29:38.304]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:29:38.304]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:29:38.310]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:29:38.310]        </block>
[22:29:38.310]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:29:38.310]      </control>
[22:29:38.310]      // end if-block "powered_down"
[22:29:38.310]    </control>
[22:29:38.310]    <block atomic="false" info="">
[22:29:38.310]      __var DEBUG_PORT_VAL    = 0;
[22:29:38.310]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:29:38.310]      __var ACCESS_POINT_VAL  = 0;
[22:29:38.310]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:29:38.310]      __ap = 1; 
[22:29:38.310]        // -> [__ap <= 0x00000001]
[22:29:38.310]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:29:38.316]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:29:38.316]      __ap = 4;
[22:29:38.316]        // -> [__ap <= 0x00000004]
[22:29:38.316]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:29:38.319]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:29:38.319]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:29:38.319]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:29:38.321]    </block>
[22:29:38.321]    <block atomic="false" info="">
[22:29:38.321]      __var nReset = 0x80;
[22:29:38.321]        // -> [nReset <= 0x00000080]
[22:29:38.322]      __var canReadPins = 0;
[22:29:38.322]        // -> [canReadPins <= 0x00000000]
[22:29:38.322]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:29:38.323]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:29:38.323]        // -> [canReadPins <= 0x00000001]
[22:29:38.325]    </block>
[22:29:38.325]    <control if="" while="1" timeout="200" info="">
[22:29:38.325]      // while "1"  (timeout="200")
[22:29:38.325]      // while-condition  =>  TRUE
[22:29:38.325]      // while "1"  (timeout="200")
[22:29:38.325]      // while-condition  =>  TRUE
[22:29:38.325]      // while "1"  (timeout="200")
[22:29:38.325]      // while-condition  =>  TRUE
[22:29:38.325]      // while "1"  (timeout="200")
[22:29:38.325]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.326]      // while "1"  (timeout="200")
[22:29:38.326]      // while-condition  =>  TRUE
[22:29:38.327]      // while "1"  (timeout="200")
[22:29:38.327]      // while-condition  =>  TRUE
[22:29:38.327]      // while "1"  (timeout="200")
[22:29:38.327]      // while-condition  =>  TRUE
[22:29:38.327]      // while "1"  (timeout="200")
[22:29:38.327]      // while-condition  =>  TRUE
[22:29:38.327]      // while "1"  (timeout="200")
[22:29:38.327]      // while-condition  =>  TRUE
[22:29:38.327]      // while "1"  (timeout="200")
[22:29:38.327]      // while-condition  =>  TRUE
[22:29:38.327]      // while "1"  (timeout="200")
[22:29:38.327]      // while-condition  =>  TRUE
[22:29:38.328]      // while "1"  (timeout="200")
[22:29:38.328]      // while-condition  =>  TRUE
[22:29:38.328]      // while "1"  (timeout="200")
[22:29:38.328]      // while-condition  =>  TRUE
[22:29:38.328]      // while "1"  (timeout="200")
[22:29:38.328]      // while-condition  =>  TRUE
[22:29:38.328]      // while "1"  (timeout="200")
[22:29:38.328]      // while-condition  =>  TRUE
[22:29:38.328]      // while "1"  (timeout="200")
[22:29:38.328]      // while-condition  =>  TRUE
[22:29:38.328]      // while "1"  (timeout="200")
[22:29:38.328]      // while-condition  =>  TRUE
[22:29:38.329]      // while "1"  (timeout="200")
[22:29:38.329]      // while  =>  TIMEOUT
[22:29:38.329]      // end while "1"
[22:29:38.329]    </control>
[22:29:38.329]    <control if="canReadPins" while="" timeout="0" info="">
[22:29:38.329]      // if-block "canReadPins"
[22:29:38.329]        // =>  TRUE
[22:29:38.329]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:29:38.329]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:29:38.331]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:29:38.331]        // while-condition  =>  FALSE
[22:29:38.331]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:29:38.331]      </control>
[22:29:38.331]      // end if-block "canReadPins"
[22:29:38.331]    </control>
[22:29:38.331]    <control if="!canReadPins" while="" timeout="0" info="">
[22:29:38.331]      // if-block "!canReadPins"
[22:29:38.331]        // =>  FALSE
[22:29:38.331]      // skip if-block "!canReadPins"
[22:29:38.332]    </control>
[22:29:38.332]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:29:38.332]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:29:38.332]        // =>  TRUE
[22:29:38.332]      <block atomic="false" info="">
[22:29:38.332]        WriteAP(0x00, 0x190008);
[22:29:38.334]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:29:38.334]        WriteAP(0xF0, 0x01);
[22:29:38.337]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:29:38.337]      </block>
[22:29:38.337]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:29:38.337]    </control>
[22:29:38.337]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:29:38.337]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:29:38.337]        // =>  FALSE
[22:29:38.338]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:29:38.338]    </control>
[22:29:38.338]    <block atomic="false" info="">
[22:29:38.338]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:29:38.341]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:29:38.341]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:29:38.341]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:29:38.343]      __ap = 0; //lets make sure we reset the access point selection
[22:29:38.343]        // -> [__ap <= 0x00000000]
[22:29:38.343]    </block>
[22:29:38.343]  </sequence>
[22:29:38.343]  
[22:29:38.371]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:29:38.371]  
[22:29:38.371]  <debugvars>
[22:29:38.371]    // Pre-defined
[22:29:38.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:29:38.371]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:29:38.371]    __dp=0x00000000
[22:29:38.372]    __ap=0x00000000
[22:29:38.372]    __traceout=0x00000000      (Trace Disabled)
[22:29:38.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:29:38.372]    __FlashAddr=0x00000000
[22:29:38.372]    __FlashLen=0x00000000
[22:29:38.372]    __FlashArg=0x00000000
[22:29:38.372]    __FlashOp=0x00000000
[22:29:38.372]    __Result=0x00000000
[22:29:38.372]  </debugvars>
[22:29:38.372]  
[22:29:38.372]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:29:38.373]    <block atomic="false" info="">
[22:29:38.373]      __var deviceID = 0;
[22:29:38.373]        // -> [deviceID <= 0x00000000]
[22:29:38.373]      __var version = 0;
[22:29:38.373]        // -> [version <= 0x00000000]
[22:29:38.373]      __var partNum = 0;
[22:29:38.373]        // -> [partNum <= 0x00000000]
[22:29:38.373]      __var manuf = 0;
[22:29:38.373]        // -> [manuf <= 0x00000000]
[22:29:38.373]      __var isMSPM0G1X0X_G3X0X = 0;
[22:29:38.373]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:29:38.374]      __var isProduction = 0;
[22:29:38.374]        // -> [isProduction <= 0x00000000]
[22:29:38.374]      __var continueId = 0;
[22:29:38.374]        // -> [continueId <= 0x00000000]
[22:29:38.374]      deviceID =   Read32(0x41C40004);
[22:29:38.383]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:29:38.383]        // -> [deviceID <= 0x2BB8802F]
[22:29:38.384]      version = deviceID >> 28;
[22:29:38.384]        // -> [version <= 0x00000002]
[22:29:38.384]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:29:38.384]        // -> [partNum <= 0x0000BB88]
[22:29:38.384]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:29:38.384]        // -> [manuf <= 0x00000017]
[22:29:38.384]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:29:38.384]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:29:38.384]      isProduction = (version > 0);
[22:29:38.384]        // -> [isProduction <= 0x00000001]
[22:29:38.384]    </block>
[22:29:38.384]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:29:38.385]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:29:38.385]        // =>  FALSE
[22:29:38.385]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:29:38.385]    </control>
[22:29:38.385]    <control if="continueId == 4" while="" timeout="0" info="">
[22:29:38.385]      // if-block "continueId == 4"
[22:29:38.385]        // =>  FALSE
[22:29:38.385]      // skip if-block "continueId == 4"
[22:29:38.385]    </control>
[22:29:38.385]    <control if="!isProduction" while="" timeout="0" info="">
[22:29:38.385]      // if-block "!isProduction"
[22:29:38.386]        // =>  FALSE
[22:29:38.386]      // skip if-block "!isProduction"
[22:29:38.386]    </control>
[22:29:38.386]  </sequence>
[22:29:38.386]  
[22:30:42.363]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:30:42.363]  
[22:30:42.363]  <debugvars>
[22:30:42.363]    // Pre-defined
[22:30:42.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:42.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:30:42.363]    __dp=0x00000000
[22:30:42.364]    __ap=0x00000000
[22:30:42.364]    __traceout=0x00000000      (Trace Disabled)
[22:30:42.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:42.364]    __FlashAddr=0x00000000
[22:30:42.364]    __FlashLen=0x00000000
[22:30:42.364]    __FlashArg=0x00000000
[22:30:42.364]    __FlashOp=0x00000000
[22:30:42.364]    __Result=0x00000000
[22:30:42.364]  </debugvars>
[22:30:42.364]  
[22:30:42.364]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:30:42.365]    <block atomic="false" info="">
[22:30:42.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:30:42.365]        // -> [isSWJ <= 0x00000001]
[22:30:42.365]      __var hasDormant = __protocol & 0x00020000;
[22:30:42.365]        // -> [hasDormant <= 0x00000000]
[22:30:42.365]      __var protType   = __protocol & 0x0000FFFF;
[22:30:42.365]        // -> [protType <= 0x00000002]
[22:30:42.365]    </block>
[22:30:42.365]    <control if="protType == 1" while="" timeout="0" info="">
[22:30:42.365]      // if-block "protType == 1"
[22:30:42.365]        // =>  FALSE
[22:30:42.365]      // skip if-block "protType == 1"
[22:30:42.366]    </control>
[22:30:42.366]    <control if="protType == 2" while="" timeout="0" info="">
[22:30:42.366]      // if-block "protType == 2"
[22:30:42.366]        // =>  TRUE
[22:30:42.366]      <control if="isSWJ" while="" timeout="0" info="">
[22:30:42.366]        // if-block "isSWJ"
[22:30:42.366]          // =>  TRUE
[22:30:42.366]        <control if="hasDormant" while="" timeout="0" info="">
[22:30:42.366]          // if-block "hasDormant"
[22:30:42.366]            // =>  FALSE
[22:30:42.366]          // skip if-block "hasDormant"
[22:30:42.366]        </control>
[22:30:42.367]        <control if="!hasDormant" while="" timeout="0" info="">
[22:30:42.367]          // if-block "!hasDormant"
[22:30:42.367]            // =>  TRUE
[22:30:42.367]          <block atomic="false" info="">
[22:30:42.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:30:42.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:42.373]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:30:42.376]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:30:42.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:30:42.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:42.380]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:30:42.381]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:30:42.382]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:30:42.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:42.383]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:30:42.385]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:30:42.385]          </block>
[22:30:42.385]          // end if-block "!hasDormant"
[22:30:42.385]        </control>
[22:30:42.385]        // end if-block "isSWJ"
[22:30:42.385]      </control>
[22:30:42.385]      <control if="!isSWJ" while="" timeout="0" info="">
[22:30:42.385]        // if-block "!isSWJ"
[22:30:42.385]          // =>  FALSE
[22:30:42.385]        // skip if-block "!isSWJ"
[22:30:42.385]      </control>
[22:30:42.385]      <block atomic="false" info="">
[22:30:42.385]        ReadDP(0x0);
[22:30:42.388]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:30:42.388]      </block>
[22:30:42.388]      // end if-block "protType == 2"
[22:30:42.388]    </control>
[22:30:42.388]  </sequence>
[22:30:42.388]  
[22:30:42.391]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:30:42.391]  
[22:30:42.391]  <debugvars>
[22:30:42.391]    // Pre-defined
[22:30:42.391]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:42.391]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:30:42.391]    __dp=0x00000000
[22:30:42.391]    __ap=0x00000000
[22:30:42.391]    __traceout=0x00000000      (Trace Disabled)
[22:30:42.391]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:42.391]    __FlashAddr=0x00000000
[22:30:42.391]    __FlashLen=0x00000000
[22:30:42.391]    __FlashArg=0x00000000
[22:30:42.391]    __FlashOp=0x00000000
[22:30:42.392]    __Result=0x00000000
[22:30:42.392]  </debugvars>
[22:30:42.392]  
[22:30:42.392]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:30:42.392]    <block atomic="false" info="">
[22:30:42.392]      __var SW_DP_ABORT       = 0x0;
[22:30:42.392]        // -> [SW_DP_ABORT <= 0x00000000]
[22:30:42.393]      __var DP_CTRL_STAT      = 0x4;
[22:30:42.393]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:30:42.393]      __var DP_SELECT         = 0x8;
[22:30:42.393]        // -> [DP_SELECT <= 0x00000008]
[22:30:42.393]      __var powered_down      = 0;
[22:30:42.393]        // -> [powered_down <= 0x00000000]
[22:30:42.393]      WriteDP(DP_SELECT, 0x00000000);
[22:30:42.395]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:30:42.395]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:30:42.397]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:30:42.397]        // -> [powered_down <= 0x00000001]
[22:30:42.397]    </block>
[22:30:42.397]    <control if="powered_down" while="" timeout="0" info="">
[22:30:42.397]      // if-block "powered_down"
[22:30:42.398]        // =>  TRUE
[22:30:42.398]      <block atomic="false" info="">
[22:30:42.398]        Message(0, "Debug/System power-up request sent");
[22:30:42.399]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:30:42.401]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:30:42.401]      </block>
[22:30:42.401]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:30:42.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:30:42.404]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:30:42.404]        // while-condition  =>  FALSE
[22:30:42.404]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:30:42.404]      </control>
[22:30:42.404]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:30:42.404]        // if-block "(__protocol & 0xFFFF) == 1"
[22:30:42.404]          // =>  FALSE
[22:30:42.404]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:30:42.404]      </control>
[22:30:42.404]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:30:42.404]        // if-block "(__protocol & 0xFFFF) == 2"
[22:30:42.405]          // =>  TRUE
[22:30:42.405]        <block atomic="false" info="">
[22:30:42.405]          Message(0, "executing SWD power up");
[22:30:42.405]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:30:42.407]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:30:42.408]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:30:42.409]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:30:42.409]        </block>
[22:30:42.409]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:30:42.409]      </control>
[22:30:42.409]      // end if-block "powered_down"
[22:30:42.410]    </control>
[22:30:42.410]    <block atomic="false" info="">
[22:30:42.410]      __var DEBUG_PORT_VAL    = 0;
[22:30:42.410]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:30:42.410]      __var ACCESS_POINT_VAL  = 0;
[22:30:42.410]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:30:42.410]      __ap = 1; 
[22:30:42.410]        // -> [__ap <= 0x00000001]
[22:30:42.410]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:30:42.413]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:30:42.413]      __ap = 4;
[22:30:42.413]        // -> [__ap <= 0x00000004]
[22:30:42.414]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:30:42.417]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:30:42.417]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:30:42.417]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:30:42.417]    </block>
[22:30:42.417]    <block atomic="false" info="">
[22:30:42.417]      __var nReset = 0x80;
[22:30:42.417]        // -> [nReset <= 0x00000080]
[22:30:42.418]      __var canReadPins = 0;
[22:30:42.418]        // -> [canReadPins <= 0x00000000]
[22:30:42.418]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:30:42.420]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:30:42.420]        // -> [canReadPins <= 0x00000001]
[22:30:42.420]    </block>
[22:30:42.420]    <control if="" while="1" timeout="200" info="">
[22:30:42.420]      // while "1"  (timeout="200")
[22:30:42.420]      // while-condition  =>  TRUE
[22:30:42.420]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.421]      // while-condition  =>  TRUE
[22:30:42.421]      // while "1"  (timeout="200")
[22:30:42.422]      // while-condition  =>  TRUE
[22:30:42.422]      // while "1"  (timeout="200")
[22:30:42.422]      // while-condition  =>  TRUE
[22:30:42.422]      // while "1"  (timeout="200")
[22:30:42.422]      // while-condition  =>  TRUE
[22:30:42.422]      // while "1"  (timeout="200")
[22:30:42.422]      // while-condition  =>  TRUE
[22:30:42.422]      // while "1"  (timeout="200")
[22:30:42.422]      // while-condition  =>  TRUE
[22:30:42.422]      // while "1"  (timeout="200")
[22:30:42.422]      // while-condition  =>  TRUE
[22:30:42.422]      // while "1"  (timeout="200")
[22:30:42.423]      // while-condition  =>  TRUE
[22:30:42.423]      // while "1"  (timeout="200")
[22:30:42.423]      // while  =>  TIMEOUT
[22:30:42.423]      // end while "1"
[22:30:42.423]    </control>
[22:30:42.423]    <control if="canReadPins" while="" timeout="0" info="">
[22:30:42.423]      // if-block "canReadPins"
[22:30:42.423]        // =>  TRUE
[22:30:42.423]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:30:42.423]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:30:42.425]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:30:42.425]        // while-condition  =>  FALSE
[22:30:42.425]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:30:42.425]      </control>
[22:30:42.425]      // end if-block "canReadPins"
[22:30:42.425]    </control>
[22:30:42.425]    <control if="!canReadPins" while="" timeout="0" info="">
[22:30:42.425]      // if-block "!canReadPins"
[22:30:42.425]        // =>  FALSE
[22:30:42.426]      // skip if-block "!canReadPins"
[22:30:42.426]    </control>
[22:30:42.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:30:42.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:30:42.426]        // =>  TRUE
[22:30:42.426]      <block atomic="false" info="">
[22:30:42.426]        WriteAP(0x00, 0x190008);
[22:30:42.429]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:30:42.429]        WriteAP(0xF0, 0x01);
[22:30:42.432]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:30:42.432]      </block>
[22:30:42.432]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:30:42.432]    </control>
[22:30:42.432]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:30:42.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:30:42.433]        // =>  FALSE
[22:30:42.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:30:42.433]    </control>
[22:30:42.433]    <block atomic="false" info="">
[22:30:42.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:30:42.438]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:30:42.438]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:30:42.438]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:30:42.438]      __ap = 0; //lets make sure we reset the access point selection
[22:30:42.438]        // -> [__ap <= 0x00000000]
[22:30:42.438]    </block>
[22:30:42.438]  </sequence>
[22:30:42.438]  
[22:30:42.469]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:30:42.469]  
[22:30:42.469]  <debugvars>
[22:30:42.470]    // Pre-defined
[22:30:42.470]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:42.470]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:30:42.470]    __dp=0x00000000
[22:30:42.470]    __ap=0x00000000
[22:30:42.470]    __traceout=0x00000000      (Trace Disabled)
[22:30:42.470]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:42.471]    __FlashAddr=0x00000000
[22:30:42.471]    __FlashLen=0x00000000
[22:30:42.471]    __FlashArg=0x00000000
[22:30:42.471]    __FlashOp=0x00000000
[22:30:42.471]    __Result=0x00000000
[22:30:42.471]  </debugvars>
[22:30:42.471]  
[22:30:42.472]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:30:42.472]    <block atomic="false" info="">
[22:30:42.472]      __var deviceID = 0;
[22:30:42.472]        // -> [deviceID <= 0x00000000]
[22:30:42.472]      __var version = 0;
[22:30:42.472]        // -> [version <= 0x00000000]
[22:30:42.472]      __var partNum = 0;
[22:30:42.472]        // -> [partNum <= 0x00000000]
[22:30:42.472]      __var manuf = 0;
[22:30:42.473]        // -> [manuf <= 0x00000000]
[22:30:42.473]      __var isMSPM0G1X0X_G3X0X = 0;
[22:30:42.473]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:30:42.473]      __var isProduction = 0;
[22:30:42.473]        // -> [isProduction <= 0x00000000]
[22:30:42.473]      __var continueId = 0;
[22:30:42.473]        // -> [continueId <= 0x00000000]
[22:30:42.473]      deviceID =   Read32(0x41C40004);
[22:30:42.482]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:30:42.482]        // -> [deviceID <= 0x2BB8802F]
[22:30:42.482]      version = deviceID >> 28;
[22:30:42.482]        // -> [version <= 0x00000002]
[22:30:42.482]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:30:42.482]        // -> [partNum <= 0x0000BB88]
[22:30:42.482]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:30:42.482]        // -> [manuf <= 0x00000017]
[22:30:42.483]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:30:42.483]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:30:42.483]      isProduction = (version > 0);
[22:30:42.483]        // -> [isProduction <= 0x00000001]
[22:30:42.483]    </block>
[22:30:42.483]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:30:42.483]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:30:42.483]        // =>  FALSE
[22:30:42.483]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:30:42.484]    </control>
[22:30:42.484]    <control if="continueId == 4" while="" timeout="0" info="">
[22:30:42.484]      // if-block "continueId == 4"
[22:30:42.484]        // =>  FALSE
[22:30:42.484]      // skip if-block "continueId == 4"
[22:30:42.484]    </control>
[22:30:42.484]    <control if="!isProduction" while="" timeout="0" info="">
[22:30:42.484]      // if-block "!isProduction"
[22:30:42.484]        // =>  FALSE
[22:30:42.485]      // skip if-block "!isProduction"
[22:30:42.485]    </control>
[22:30:42.485]  </sequence>
[22:30:42.485]  
[22:30:48.295]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:30:48.295]  
[22:30:48.296]  <debugvars>
[22:30:48.296]    // Pre-defined
[22:30:48.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:48.296]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:30:48.297]    __dp=0x00000000
[22:30:48.297]    __ap=0x00000000
[22:30:48.297]    __traceout=0x00000000      (Trace Disabled)
[22:30:48.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:48.297]    __FlashAddr=0x00000000
[22:30:48.297]    __FlashLen=0x00000000
[22:30:48.297]    __FlashArg=0x00000000
[22:30:48.297]    __FlashOp=0x00000000
[22:30:48.297]    __Result=0x00000000
[22:30:48.298]  </debugvars>
[22:30:48.298]  
[22:30:48.298]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:30:48.298]    <block atomic="false" info="">
[22:30:48.298]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:30:48.298]        // -> [isSWJ <= 0x00000001]
[22:30:48.298]      __var hasDormant = __protocol & 0x00020000;
[22:30:48.298]        // -> [hasDormant <= 0x00000000]
[22:30:48.299]      __var protType   = __protocol & 0x0000FFFF;
[22:30:48.299]        // -> [protType <= 0x00000002]
[22:30:48.299]    </block>
[22:30:48.299]    <control if="protType == 1" while="" timeout="0" info="">
[22:30:48.299]      // if-block "protType == 1"
[22:30:48.299]        // =>  FALSE
[22:30:48.300]      // skip if-block "protType == 1"
[22:30:48.300]    </control>
[22:30:48.300]    <control if="protType == 2" while="" timeout="0" info="">
[22:30:48.300]      // if-block "protType == 2"
[22:30:48.300]        // =>  TRUE
[22:30:48.300]      <control if="isSWJ" while="" timeout="0" info="">
[22:30:48.300]        // if-block "isSWJ"
[22:30:48.300]          // =>  TRUE
[22:30:48.300]        <control if="hasDormant" while="" timeout="0" info="">
[22:30:48.301]          // if-block "hasDormant"
[22:30:48.301]            // =>  FALSE
[22:30:48.301]          // skip if-block "hasDormant"
[22:30:48.301]        </control>
[22:30:48.301]        <control if="!hasDormant" while="" timeout="0" info="">
[22:30:48.301]          // if-block "!hasDormant"
[22:30:48.301]            // =>  TRUE
[22:30:48.302]          <block atomic="false" info="">
[22:30:48.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:30:48.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:48.308]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:30:48.309]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:30:48.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:30:48.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:48.311]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:30:48.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:30:48.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:30:48.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:30:48.314]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:30:48.315]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:30:48.316]          </block>
[22:30:48.316]          // end if-block "!hasDormant"
[22:30:48.316]        </control>
[22:30:48.316]        // end if-block "isSWJ"
[22:30:48.316]      </control>
[22:30:48.316]      <control if="!isSWJ" while="" timeout="0" info="">
[22:30:48.316]        // if-block "!isSWJ"
[22:30:48.316]          // =>  FALSE
[22:30:48.316]        // skip if-block "!isSWJ"
[22:30:48.316]      </control>
[22:30:48.316]      <block atomic="false" info="">
[22:30:48.317]        ReadDP(0x0);
[22:30:48.319]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:30:48.319]      </block>
[22:30:48.319]      // end if-block "protType == 2"
[22:30:48.319]    </control>
[22:30:48.319]  </sequence>
[22:30:48.319]  
[22:30:48.321]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:30:48.321]  
[22:30:48.322]  <debugvars>
[22:30:48.322]    // Pre-defined
[22:30:48.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:48.322]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:30:48.322]    __dp=0x00000000
[22:30:48.322]    __ap=0x00000000
[22:30:48.323]    __traceout=0x00000000      (Trace Disabled)
[22:30:48.323]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:48.323]    __FlashAddr=0x00000000
[22:30:48.323]    __FlashLen=0x00000000
[22:30:48.323]    __FlashArg=0x00000000
[22:30:48.323]    __FlashOp=0x00000000
[22:30:48.323]    __Result=0x00000000
[22:30:48.323]  </debugvars>
[22:30:48.323]  
[22:30:48.323]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:30:48.324]    <block atomic="false" info="">
[22:30:48.324]      __var SW_DP_ABORT       = 0x0;
[22:30:48.324]        // -> [SW_DP_ABORT <= 0x00000000]
[22:30:48.324]      __var DP_CTRL_STAT      = 0x4;
[22:30:48.324]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:30:48.324]      __var DP_SELECT         = 0x8;
[22:30:48.324]        // -> [DP_SELECT <= 0x00000008]
[22:30:48.324]      __var powered_down      = 0;
[22:30:48.324]        // -> [powered_down <= 0x00000000]
[22:30:48.324]      WriteDP(DP_SELECT, 0x00000000);
[22:30:48.328]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:30:48.328]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:30:48.330]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:30:48.331]        // -> [powered_down <= 0x00000001]
[22:30:48.331]    </block>
[22:30:48.331]    <control if="powered_down" while="" timeout="0" info="">
[22:30:48.331]      // if-block "powered_down"
[22:30:48.331]        // =>  TRUE
[22:30:48.331]      <block atomic="false" info="">
[22:30:48.331]        Message(0, "Debug/System power-up request sent");
[22:30:48.334]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:30:48.335]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:30:48.335]      </block>
[22:30:48.335]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:30:48.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:30:48.337]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:30:48.337]        // while-condition  =>  FALSE
[22:30:48.337]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:30:48.338]      </control>
[22:30:48.338]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:30:48.338]        // if-block "(__protocol & 0xFFFF) == 1"
[22:30:48.338]          // =>  FALSE
[22:30:48.338]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:30:48.338]      </control>
[22:30:48.338]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:30:48.338]        // if-block "(__protocol & 0xFFFF) == 2"
[22:30:48.338]          // =>  TRUE
[22:30:48.338]        <block atomic="false" info="">
[22:30:48.338]          Message(0, "executing SWD power up");
[22:30:48.341]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:30:48.343]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:30:48.343]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:30:48.347]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:30:48.347]        </block>
[22:30:48.347]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:30:48.347]      </control>
[22:30:48.347]      // end if-block "powered_down"
[22:30:48.347]    </control>
[22:30:48.347]    <block atomic="false" info="">
[22:30:48.348]      __var DEBUG_PORT_VAL    = 0;
[22:30:48.348]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:30:48.348]      __var ACCESS_POINT_VAL  = 0;
[22:30:48.348]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:30:48.348]      __ap = 1; 
[22:30:48.348]        // -> [__ap <= 0x00000001]
[22:30:48.349]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:30:48.354]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:30:48.355]      __ap = 4;
[22:30:48.355]        // -> [__ap <= 0x00000004]
[22:30:48.355]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:30:48.358]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:30:48.358]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:30:48.358]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:30:48.362]    </block>
[22:30:48.362]    <block atomic="false" info="">
[22:30:48.362]      __var nReset = 0x80;
[22:30:48.362]        // -> [nReset <= 0x00000080]
[22:30:48.362]      __var canReadPins = 0;
[22:30:48.362]        // -> [canReadPins <= 0x00000000]
[22:30:48.363]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:30:48.364]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:30:48.364]        // -> [canReadPins <= 0x00000001]
[22:30:48.364]    </block>
[22:30:48.364]    <control if="" while="1" timeout="200" info="">
[22:30:48.364]      // while "1"  (timeout="200")
[22:30:48.364]      // while-condition  =>  TRUE
[22:30:48.364]      // while "1"  (timeout="200")
[22:30:48.364]      // while-condition  =>  TRUE
[22:30:48.364]      // while "1"  (timeout="200")
[22:30:48.364]      // while-condition  =>  TRUE
[22:30:48.364]      // while "1"  (timeout="200")
[22:30:48.365]      // while-condition  =>  TRUE
[22:30:48.365]      // while "1"  (timeout="200")
[22:30:48.365]      // while-condition  =>  TRUE
[22:30:48.365]      // while "1"  (timeout="200")
[22:30:48.365]      // while-condition  =>  TRUE
[22:30:48.365]      // while "1"  (timeout="200")
[22:30:48.365]      // while-condition  =>  TRUE
[22:30:48.365]      // while "1"  (timeout="200")
[22:30:48.365]      // while-condition  =>  TRUE
[22:30:48.365]      // while "1"  (timeout="200")
[22:30:48.366]      // while-condition  =>  TRUE
[22:30:48.366]      // while "1"  (timeout="200")
[22:30:48.366]      // while-condition  =>  TRUE
[22:30:48.366]      // while "1"  (timeout="200")
[22:30:48.366]      // while-condition  =>  TRUE
[22:30:48.366]      // while "1"  (timeout="200")
[22:30:48.366]      // while-condition  =>  TRUE
[22:30:48.366]      // while "1"  (timeout="200")
[22:30:48.366]      // while-condition  =>  TRUE
[22:30:48.366]      // while "1"  (timeout="200")
[22:30:48.368]      // while-condition  =>  TRUE
[22:30:48.368]      // while "1"  (timeout="200")
[22:30:48.368]      // while-condition  =>  TRUE
[22:30:48.368]      // while "1"  (timeout="200")
[22:30:48.368]      // while-condition  =>  TRUE
[22:30:48.368]      // while "1"  (timeout="200")
[22:30:48.368]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.369]      // while "1"  (timeout="200")
[22:30:48.369]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.370]      // while "1"  (timeout="200")
[22:30:48.370]      // while-condition  =>  TRUE
[22:30:48.371]      // while "1"  (timeout="200")
[22:30:48.371]      // while-condition  =>  TRUE
[22:30:48.371]      // while "1"  (timeout="200")
[22:30:48.371]      // while-condition  =>  TRUE
[22:30:48.371]      // while "1"  (timeout="200")
[22:30:48.371]      // while-condition  =>  TRUE
[22:30:48.371]      // while "1"  (timeout="200")
[22:30:48.371]      // while-condition  =>  TRUE
[22:30:48.371]      // while "1"  (timeout="200")
[22:30:48.372]      // while-condition  =>  TRUE
[22:30:48.372]      // while "1"  (timeout="200")
[22:30:48.372]      // while-condition  =>  TRUE
[22:30:48.372]      // while "1"  (timeout="200")
[22:30:48.372]      // while-condition  =>  TRUE
[22:30:48.372]      // while "1"  (timeout="200")
[22:30:48.373]      // while-condition  =>  TRUE
[22:30:48.373]      // while "1"  (timeout="200")
[22:30:48.373]      // while-condition  =>  TRUE
[22:30:48.373]      // while "1"  (timeout="200")
[22:30:48.373]      // while-condition  =>  TRUE
[22:30:48.375]      // while "1"  (timeout="200")
[22:30:48.375]      // while-condition  =>  TRUE
[22:30:48.375]      // while "1"  (timeout="200")
[22:30:48.375]      // while-condition  =>  TRUE
[22:30:48.375]      // while "1"  (timeout="200")
[22:30:48.375]      // while-condition  =>  TRUE
[22:30:48.375]      // while "1"  (timeout="200")
[22:30:48.375]      // while-condition  =>  TRUE
[22:30:48.375]      // while "1"  (timeout="200")
[22:30:48.375]      // while-condition  =>  TRUE
[22:30:48.376]      // while "1"  (timeout="200")
[22:30:48.376]      // while-condition  =>  TRUE
[22:30:48.376]      // while "1"  (timeout="200")
[22:30:48.376]      // while-condition  =>  TRUE
[22:30:48.376]      // while "1"  (timeout="200")
[22:30:48.376]      // while-condition  =>  TRUE
[22:30:48.376]      // while "1"  (timeout="200")
[22:30:48.376]      // while-condition  =>  TRUE
[22:30:48.376]      // while "1"  (timeout="200")
[22:30:48.376]      // while-condition  =>  TRUE
[22:30:48.376]      // while "1"  (timeout="200")
[22:30:48.377]      // while-condition  =>  TRUE
[22:30:48.377]      // while "1"  (timeout="200")
[22:30:48.377]      // while  =>  TIMEOUT
[22:30:48.377]      // end while "1"
[22:30:48.377]    </control>
[22:30:48.377]    <control if="canReadPins" while="" timeout="0" info="">
[22:30:48.377]      // if-block "canReadPins"
[22:30:48.378]        // =>  TRUE
[22:30:48.378]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:30:48.378]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:30:48.379]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:30:48.379]        // while-condition  =>  FALSE
[22:30:48.379]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:30:48.379]      </control>
[22:30:48.379]      // end if-block "canReadPins"
[22:30:48.379]    </control>
[22:30:48.379]    <control if="!canReadPins" while="" timeout="0" info="">
[22:30:48.379]      // if-block "!canReadPins"
[22:30:48.380]        // =>  FALSE
[22:30:48.380]      // skip if-block "!canReadPins"
[22:30:48.380]    </control>
[22:30:48.380]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:30:48.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:30:48.380]        // =>  TRUE
[22:30:48.380]      <block atomic="false" info="">
[22:30:48.380]        WriteAP(0x00, 0x190008);
[22:30:48.383]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:30:48.383]        WriteAP(0xF0, 0x01);
[22:30:48.388]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:30:48.388]      </block>
[22:30:48.388]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:30:48.388]    </control>
[22:30:48.388]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:30:48.388]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:30:48.388]        // =>  FALSE
[22:30:48.388]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:30:48.388]    </control>
[22:30:48.388]    <block atomic="false" info="">
[22:30:48.388]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:30:48.391]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:30:48.391]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:30:48.391]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:30:48.394]      __ap = 0; //lets make sure we reset the access point selection
[22:30:48.394]        // -> [__ap <= 0x00000000]
[22:30:48.394]    </block>
[22:30:48.394]  </sequence>
[22:30:48.394]  
[22:30:48.421]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:30:48.421]  
[22:30:48.421]  <debugvars>
[22:30:48.421]    // Pre-defined
[22:30:48.421]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:30:48.421]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:30:48.422]    __dp=0x00000000
[22:30:48.422]    __ap=0x00000000
[22:30:48.422]    __traceout=0x00000000      (Trace Disabled)
[22:30:48.422]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:30:48.422]    __FlashAddr=0x00000000
[22:30:48.422]    __FlashLen=0x00000000
[22:30:48.422]    __FlashArg=0x00000000
[22:30:48.422]    __FlashOp=0x00000000
[22:30:48.423]    __Result=0x00000000
[22:30:48.423]  </debugvars>
[22:30:48.423]  
[22:30:48.423]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:30:48.423]    <block atomic="false" info="">
[22:30:48.423]      __var deviceID = 0;
[22:30:48.424]        // -> [deviceID <= 0x00000000]
[22:30:48.424]      __var version = 0;
[22:30:48.424]        // -> [version <= 0x00000000]
[22:30:48.424]      __var partNum = 0;
[22:30:48.424]        // -> [partNum <= 0x00000000]
[22:30:48.424]      __var manuf = 0;
[22:30:48.424]        // -> [manuf <= 0x00000000]
[22:30:48.424]      __var isMSPM0G1X0X_G3X0X = 0;
[22:30:48.425]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:30:48.425]      __var isProduction = 0;
[22:30:48.425]        // -> [isProduction <= 0x00000000]
[22:30:48.425]      __var continueId = 0;
[22:30:48.425]        // -> [continueId <= 0x00000000]
[22:30:48.425]      deviceID =   Read32(0x41C40004);
[22:30:48.430]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:30:48.430]        // -> [deviceID <= 0x2BB8802F]
[22:30:48.430]      version = deviceID >> 28;
[22:30:48.430]        // -> [version <= 0x00000002]
[22:30:48.430]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:30:48.430]        // -> [partNum <= 0x0000BB88]
[22:30:48.430]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:30:48.430]        // -> [manuf <= 0x00000017]
[22:30:48.430]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:30:48.430]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:30:48.431]      isProduction = (version > 0);
[22:30:48.431]        // -> [isProduction <= 0x00000001]
[22:30:48.431]    </block>
[22:30:48.431]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:30:48.431]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:30:48.431]        // =>  FALSE
[22:30:48.431]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:30:48.431]    </control>
[22:30:48.431]    <control if="continueId == 4" while="" timeout="0" info="">
[22:30:48.431]      // if-block "continueId == 4"
[22:30:48.432]        // =>  FALSE
[22:30:48.432]      // skip if-block "continueId == 4"
[22:30:48.432]    </control>
[22:30:48.432]    <control if="!isProduction" while="" timeout="0" info="">
[22:30:48.432]      // if-block "!isProduction"
[22:30:48.432]        // =>  FALSE
[22:30:48.432]      // skip if-block "!isProduction"
[22:30:48.432]    </control>
[22:30:48.432]  </sequence>
[22:30:48.432]  
[22:33:09.044]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:33:09.044]  
[22:33:09.052]  <debugvars>
[22:33:09.052]    // Pre-defined
[22:33:09.052]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:09.052]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:33:09.052]    __dp=0x00000000
[22:33:09.052]    __ap=0x00000000
[22:33:09.053]    __traceout=0x00000000      (Trace Disabled)
[22:33:09.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:09.053]    __FlashAddr=0x00000000
[22:33:09.053]    __FlashLen=0x00000000
[22:33:09.054]    __FlashArg=0x00000000
[22:33:09.054]    __FlashOp=0x00000000
[22:33:09.054]    __Result=0x00000000
[22:33:09.054]  </debugvars>
[22:33:09.054]  
[22:33:09.054]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:33:09.054]    <block atomic="false" info="">
[22:33:09.054]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:33:09.055]        // -> [isSWJ <= 0x00000001]
[22:33:09.055]      __var hasDormant = __protocol & 0x00020000;
[22:33:09.055]        // -> [hasDormant <= 0x00000000]
[22:33:09.055]      __var protType   = __protocol & 0x0000FFFF;
[22:33:09.055]        // -> [protType <= 0x00000002]
[22:33:09.055]    </block>
[22:33:09.055]    <control if="protType == 1" while="" timeout="0" info="">
[22:33:09.055]      // if-block "protType == 1"
[22:33:09.055]        // =>  FALSE
[22:33:09.055]      // skip if-block "protType == 1"
[22:33:09.055]    </control>
[22:33:09.056]    <control if="protType == 2" while="" timeout="0" info="">
[22:33:09.056]      // if-block "protType == 2"
[22:33:09.056]        // =>  TRUE
[22:33:09.056]      <control if="isSWJ" while="" timeout="0" info="">
[22:33:09.056]        // if-block "isSWJ"
[22:33:09.056]          // =>  TRUE
[22:33:09.056]        <control if="hasDormant" while="" timeout="0" info="">
[22:33:09.056]          // if-block "hasDormant"
[22:33:09.056]            // =>  FALSE
[22:33:09.056]          // skip if-block "hasDormant"
[22:33:09.056]        </control>
[22:33:09.056]        <control if="!hasDormant" while="" timeout="0" info="">
[22:33:09.056]          // if-block "!hasDormant"
[22:33:09.056]            // =>  TRUE
[22:33:09.056]          <block atomic="false" info="">
[22:33:09.056]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:33:09.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:09.060]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:33:09.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:33:09.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:33:09.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:09.065]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:33:09.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:33:09.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:33:09.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:33:09.072]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:33:09.074]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:33:09.074]          </block>
[22:33:09.074]          // end if-block "!hasDormant"
[22:33:09.074]        </control>
[22:33:09.074]        // end if-block "isSWJ"
[22:33:09.074]      </control>
[22:33:09.074]      <control if="!isSWJ" while="" timeout="0" info="">
[22:33:09.074]        // if-block "!isSWJ"
[22:33:09.074]          // =>  FALSE
[22:33:09.074]        // skip if-block "!isSWJ"
[22:33:09.074]      </control>
[22:33:09.074]      <block atomic="false" info="">
[22:33:09.075]        ReadDP(0x0);
[22:33:09.077]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:33:09.077]      </block>
[22:33:09.077]      // end if-block "protType == 2"
[22:33:09.077]    </control>
[22:33:09.077]  </sequence>
[22:33:09.077]  
[22:33:09.080]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:33:09.080]  
[22:33:09.080]  <debugvars>
[22:33:09.080]    // Pre-defined
[22:33:09.080]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:09.080]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:33:09.080]    __dp=0x00000000
[22:33:09.080]    __ap=0x00000000
[22:33:09.080]    __traceout=0x00000000      (Trace Disabled)
[22:33:09.080]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:09.081]    __FlashAddr=0x00000000
[22:33:09.081]    __FlashLen=0x00000000
[22:33:09.081]    __FlashArg=0x00000000
[22:33:09.081]    __FlashOp=0x00000000
[22:33:09.081]    __Result=0x00000000
[22:33:09.081]  </debugvars>
[22:33:09.081]  
[22:33:09.081]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:33:09.081]    <block atomic="false" info="">
[22:33:09.081]      __var SW_DP_ABORT       = 0x0;
[22:33:09.081]        // -> [SW_DP_ABORT <= 0x00000000]
[22:33:09.082]      __var DP_CTRL_STAT      = 0x4;
[22:33:09.082]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:33:09.082]      __var DP_SELECT         = 0x8;
[22:33:09.082]        // -> [DP_SELECT <= 0x00000008]
[22:33:09.082]      __var powered_down      = 0;
[22:33:09.082]        // -> [powered_down <= 0x00000000]
[22:33:09.082]      WriteDP(DP_SELECT, 0x00000000);
[22:33:09.084]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:33:09.085]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:33:09.086]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:33:09.087]        // -> [powered_down <= 0x00000001]
[22:33:09.087]    </block>
[22:33:09.087]    <control if="powered_down" while="" timeout="0" info="">
[22:33:09.087]      // if-block "powered_down"
[22:33:09.087]        // =>  TRUE
[22:33:09.087]      <block atomic="false" info="">
[22:33:09.087]        Message(0, "Debug/System power-up request sent");
[22:33:09.087]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:33:09.090]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:33:09.091]      </block>
[22:33:09.091]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:33:09.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:33:09.093]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:33:09.093]        // while-condition  =>  FALSE
[22:33:09.093]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:33:09.093]      </control>
[22:33:09.093]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:33:09.093]        // if-block "(__protocol & 0xFFFF) == 1"
[22:33:09.094]          // =>  FALSE
[22:33:09.094]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:33:09.094]      </control>
[22:33:09.094]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:33:09.094]        // if-block "(__protocol & 0xFFFF) == 2"
[22:33:09.094]          // =>  TRUE
[22:33:09.094]        <block atomic="false" info="">
[22:33:09.094]          Message(0, "executing SWD power up");
[22:33:09.094]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:33:09.096]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:33:09.096]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:33:09.102]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:33:09.102]        </block>
[22:33:09.102]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:33:09.102]      </control>
[22:33:09.102]      // end if-block "powered_down"
[22:33:09.103]    </control>
[22:33:09.103]    <block atomic="false" info="">
[22:33:09.103]      __var DEBUG_PORT_VAL    = 0;
[22:33:09.103]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:33:09.103]      __var ACCESS_POINT_VAL  = 0;
[22:33:09.103]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:33:09.103]      __ap = 1; 
[22:33:09.103]        // -> [__ap <= 0x00000001]
[22:33:09.103]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:33:09.106]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:33:09.106]      __ap = 4;
[22:33:09.106]        // -> [__ap <= 0x00000004]
[22:33:09.106]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:33:09.111]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:33:09.111]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:33:09.111]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:33:09.112]    </block>
[22:33:09.112]    <block atomic="false" info="">
[22:33:09.112]      __var nReset = 0x80;
[22:33:09.112]        // -> [nReset <= 0x00000080]
[22:33:09.112]      __var canReadPins = 0;
[22:33:09.112]        // -> [canReadPins <= 0x00000000]
[22:33:09.112]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:33:09.114]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:33:09.114]        // -> [canReadPins <= 0x00000001]
[22:33:09.114]    </block>
[22:33:09.114]    <control if="" while="1" timeout="200" info="">
[22:33:09.114]      // while "1"  (timeout="200")
[22:33:09.114]      // while-condition  =>  TRUE
[22:33:09.114]      // while "1"  (timeout="200")
[22:33:09.114]      // while-condition  =>  TRUE
[22:33:09.114]      // while "1"  (timeout="200")
[22:33:09.114]      // while-condition  =>  TRUE
[22:33:09.115]      // while "1"  (timeout="200")
[22:33:09.115]      // while-condition  =>  TRUE
[22:33:09.115]      // while "1"  (timeout="200")
[22:33:09.115]      // while-condition  =>  TRUE
[22:33:09.115]      // while "1"  (timeout="200")
[22:33:09.115]      // while-condition  =>  TRUE
[22:33:09.115]      // while "1"  (timeout="200")
[22:33:09.115]      // while-condition  =>  TRUE
[22:33:09.115]      // while "1"  (timeout="200")
[22:33:09.115]      // while-condition  =>  TRUE
[22:33:09.115]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.116]      // while "1"  (timeout="200")
[22:33:09.116]      // while-condition  =>  TRUE
[22:33:09.117]      // while "1"  (timeout="200")
[22:33:09.117]      // while-condition  =>  TRUE
[22:33:09.117]      // while "1"  (timeout="200")
[22:33:09.117]      // while-condition  =>  TRUE
[22:33:09.117]      // while "1"  (timeout="200")
[22:33:09.117]      // while-condition  =>  TRUE
[22:33:09.117]      // while "1"  (timeout="200")
[22:33:09.117]      // while-condition  =>  TRUE
[22:33:09.117]      // while "1"  (timeout="200")
[22:33:09.117]      // while-condition  =>  TRUE
[22:33:09.118]      // while "1"  (timeout="200")
[22:33:09.118]      // while-condition  =>  TRUE
[22:33:09.118]      // while "1"  (timeout="200")
[22:33:09.118]      // while-condition  =>  TRUE
[22:33:09.118]      // while "1"  (timeout="200")
[22:33:09.118]      // while-condition  =>  TRUE
[22:33:09.118]      // while "1"  (timeout="200")
[22:33:09.118]      // while-condition  =>  TRUE
[22:33:09.118]      // while "1"  (timeout="200")
[22:33:09.119]      // while-condition  =>  TRUE
[22:33:09.119]      // while "1"  (timeout="200")
[22:33:09.119]      // while-condition  =>  TRUE
[22:33:09.119]      // while "1"  (timeout="200")
[22:33:09.119]      // while-condition  =>  TRUE
[22:33:09.119]      // while "1"  (timeout="200")
[22:33:09.119]      // while-condition  =>  TRUE
[22:33:09.119]      // while "1"  (timeout="200")
[22:33:09.119]      // while-condition  =>  TRUE
[22:33:09.119]      // while "1"  (timeout="200")
[22:33:09.120]      // while-condition  =>  TRUE
[22:33:09.120]      // while "1"  (timeout="200")
[22:33:09.120]      // while-condition  =>  TRUE
[22:33:09.120]      // while "1"  (timeout="200")
[22:33:09.120]      // while-condition  =>  TRUE
[22:33:09.120]      // while "1"  (timeout="200")
[22:33:09.120]      // while-condition  =>  TRUE
[22:33:09.120]      // while "1"  (timeout="200")
[22:33:09.121]      // while-condition  =>  TRUE
[22:33:09.121]      // while "1"  (timeout="200")
[22:33:09.121]      // while-condition  =>  TRUE
[22:33:09.121]      // while "1"  (timeout="200")
[22:33:09.121]      // while-condition  =>  TRUE
[22:33:09.121]      // while "1"  (timeout="200")
[22:33:09.121]      // while-condition  =>  TRUE
[22:33:09.121]      // while "1"  (timeout="200")
[22:33:09.121]      // while-condition  =>  TRUE
[22:33:09.122]      // while "1"  (timeout="200")
[22:33:09.122]      // while-condition  =>  TRUE
[22:33:09.122]      // while "1"  (timeout="200")
[22:33:09.122]      // while-condition  =>  TRUE
[22:33:09.122]      // while "1"  (timeout="200")
[22:33:09.122]      // while-condition  =>  TRUE
[22:33:09.122]      // while "1"  (timeout="200")
[22:33:09.122]      // while-condition  =>  TRUE
[22:33:09.122]      // while "1"  (timeout="200")
[22:33:09.122]      // while-condition  =>  TRUE
[22:33:09.122]      // while "1"  (timeout="200")
[22:33:09.123]      // while-condition  =>  TRUE
[22:33:09.123]      // while "1"  (timeout="200")
[22:33:09.123]      // while-condition  =>  TRUE
[22:33:09.123]      // while "1"  (timeout="200")
[22:33:09.123]      // while-condition  =>  TRUE
[22:33:09.123]      // while "1"  (timeout="200")
[22:33:09.123]      // while-condition  =>  TRUE
[22:33:09.123]      // while "1"  (timeout="200")
[22:33:09.123]      // while-condition  =>  TRUE
[22:33:09.123]      // while "1"  (timeout="200")
[22:33:09.124]      // while-condition  =>  TRUE
[22:33:09.124]      // while "1"  (timeout="200")
[22:33:09.124]      // while-condition  =>  TRUE
[22:33:09.124]      // while "1"  (timeout="200")
[22:33:09.124]      // while-condition  =>  TRUE
[22:33:09.124]      // while "1"  (timeout="200")
[22:33:09.124]      // while-condition  =>  TRUE
[22:33:09.124]      // while "1"  (timeout="200")
[22:33:09.124]      // while-condition  =>  TRUE
[22:33:09.125]      // while "1"  (timeout="200")
[22:33:09.125]      // while-condition  =>  TRUE
[22:33:09.125]      // while "1"  (timeout="200")
[22:33:09.125]      // while-condition  =>  TRUE
[22:33:09.125]      // while "1"  (timeout="200")
[22:33:09.125]      // while-condition  =>  TRUE
[22:33:09.125]      // while "1"  (timeout="200")
[22:33:09.125]      // while-condition  =>  TRUE
[22:33:09.125]      // while "1"  (timeout="200")
[22:33:09.125]      // while-condition  =>  TRUE
[22:33:09.125]      // while "1"  (timeout="200")
[22:33:09.125]      // while-condition  =>  TRUE
[22:33:09.126]      // while "1"  (timeout="200")
[22:33:09.126]      // while  =>  TIMEOUT
[22:33:09.126]      // end while "1"
[22:33:09.126]    </control>
[22:33:09.126]    <control if="canReadPins" while="" timeout="0" info="">
[22:33:09.126]      // if-block "canReadPins"
[22:33:09.126]        // =>  TRUE
[22:33:09.126]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:33:09.126]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:33:09.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:33:09.131]        // while-condition  =>  FALSE
[22:33:09.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:33:09.131]      </control>
[22:33:09.132]      // end if-block "canReadPins"
[22:33:09.132]    </control>
[22:33:09.132]    <control if="!canReadPins" while="" timeout="0" info="">
[22:33:09.132]      // if-block "!canReadPins"
[22:33:09.132]        // =>  FALSE
[22:33:09.132]      // skip if-block "!canReadPins"
[22:33:09.133]    </control>
[22:33:09.133]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:33:09.133]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:33:09.133]        // =>  TRUE
[22:33:09.133]      <block atomic="false" info="">
[22:33:09.133]        WriteAP(0x00, 0x190008);
[22:33:09.135]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:33:09.135]        WriteAP(0xF0, 0x01);
[22:33:09.139]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:33:09.139]      </block>
[22:33:09.140]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:33:09.140]    </control>
[22:33:09.140]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:33:09.140]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:33:09.140]        // =>  FALSE
[22:33:09.140]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:33:09.140]    </control>
[22:33:09.140]    <block atomic="false" info="">
[22:33:09.141]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:33:09.145]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:33:09.146]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:33:09.146]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:33:09.146]      __ap = 0; //lets make sure we reset the access point selection
[22:33:09.146]        // -> [__ap <= 0x00000000]
[22:33:09.146]    </block>
[22:33:09.146]  </sequence>
[22:33:09.147]  
[22:33:09.170]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:33:09.170]  
[22:33:09.170]  <debugvars>
[22:33:09.170]    // Pre-defined
[22:33:09.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:33:09.170]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:33:09.170]    __dp=0x00000000
[22:33:09.170]    __ap=0x00000000
[22:33:09.170]    __traceout=0x00000000      (Trace Disabled)
[22:33:09.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:33:09.170]    __FlashAddr=0x00000000
[22:33:09.170]    __FlashLen=0x00000000
[22:33:09.171]    __FlashArg=0x00000000
[22:33:09.171]    __FlashOp=0x00000000
[22:33:09.171]    __Result=0x00000000
[22:33:09.171]  </debugvars>
[22:33:09.171]  
[22:33:09.171]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:33:09.171]    <block atomic="false" info="">
[22:33:09.171]      __var deviceID = 0;
[22:33:09.171]        // -> [deviceID <= 0x00000000]
[22:33:09.172]      __var version = 0;
[22:33:09.172]        // -> [version <= 0x00000000]
[22:33:09.172]      __var partNum = 0;
[22:33:09.172]        // -> [partNum <= 0x00000000]
[22:33:09.172]      __var manuf = 0;
[22:33:09.172]        // -> [manuf <= 0x00000000]
[22:33:09.172]      __var isMSPM0G1X0X_G3X0X = 0;
[22:33:09.172]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:33:09.172]      __var isProduction = 0;
[22:33:09.172]        // -> [isProduction <= 0x00000000]
[22:33:09.172]      __var continueId = 0;
[22:33:09.173]        // -> [continueId <= 0x00000000]
[22:33:09.173]      deviceID =   Read32(0x41C40004);
[22:33:09.178]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:33:09.178]        // -> [deviceID <= 0x2BB8802F]
[22:33:09.179]      version = deviceID >> 28;
[22:33:09.179]        // -> [version <= 0x00000002]
[22:33:09.179]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:33:09.179]        // -> [partNum <= 0x0000BB88]
[22:33:09.179]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:33:09.179]        // -> [manuf <= 0x00000017]
[22:33:09.179]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:33:09.179]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:33:09.179]      isProduction = (version > 0);
[22:33:09.179]        // -> [isProduction <= 0x00000001]
[22:33:09.179]    </block>
[22:33:09.180]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:33:09.180]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:33:09.180]        // =>  FALSE
[22:33:09.180]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:33:09.180]    </control>
[22:33:09.180]    <control if="continueId == 4" while="" timeout="0" info="">
[22:33:09.180]      // if-block "continueId == 4"
[22:33:09.180]        // =>  FALSE
[22:33:09.180]      // skip if-block "continueId == 4"
[22:33:09.180]    </control>
[22:33:09.180]    <control if="!isProduction" while="" timeout="0" info="">
[22:33:09.180]      // if-block "!isProduction"
[22:33:09.181]        // =>  FALSE
[22:33:09.181]      // skip if-block "!isProduction"
[22:33:09.181]    </control>
[22:33:09.181]  </sequence>
[22:33:09.181]  
[22:38:57.389]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:38:57.389]  
[22:38:57.389]  <debugvars>
[22:38:57.389]    // Pre-defined
[22:38:57.389]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:57.390]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:57.390]    __dp=0x00000000
[22:38:57.390]    __ap=0x00000000
[22:38:57.390]    __traceout=0x00000000      (Trace Disabled)
[22:38:57.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:57.390]    __FlashAddr=0x00000000
[22:38:57.391]    __FlashLen=0x00000000
[22:38:57.391]    __FlashArg=0x00000000
[22:38:57.391]    __FlashOp=0x00000000
[22:38:57.391]    __Result=0x00000000
[22:38:57.391]  </debugvars>
[22:38:57.391]  
[22:38:57.391]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:38:57.391]    <block atomic="false" info="">
[22:38:57.392]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:38:57.392]        // -> [isSWJ <= 0x00000001]
[22:38:57.392]      __var hasDormant = __protocol & 0x00020000;
[22:38:57.392]        // -> [hasDormant <= 0x00000000]
[22:38:57.392]      __var protType   = __protocol & 0x0000FFFF;
[22:38:57.392]        // -> [protType <= 0x00000002]
[22:38:57.392]    </block>
[22:38:57.392]    <control if="protType == 1" while="" timeout="0" info="">
[22:38:57.392]      // if-block "protType == 1"
[22:38:57.393]        // =>  FALSE
[22:38:57.393]      // skip if-block "protType == 1"
[22:38:57.393]    </control>
[22:38:57.393]    <control if="protType == 2" while="" timeout="0" info="">
[22:38:57.393]      // if-block "protType == 2"
[22:38:57.393]        // =>  TRUE
[22:38:57.393]      <control if="isSWJ" while="" timeout="0" info="">
[22:38:57.393]        // if-block "isSWJ"
[22:38:57.393]          // =>  TRUE
[22:38:57.394]        <control if="hasDormant" while="" timeout="0" info="">
[22:38:57.394]          // if-block "hasDormant"
[22:38:57.394]            // =>  FALSE
[22:38:57.394]          // skip if-block "hasDormant"
[22:38:57.394]        </control>
[22:38:57.394]        <control if="!hasDormant" while="" timeout="0" info="">
[22:38:57.395]          // if-block "!hasDormant"
[22:38:57.395]            // =>  TRUE
[22:38:57.395]          <block atomic="false" info="">
[22:38:57.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:38:57.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:57.397]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:38:57.400]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:38:57.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:38:57.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:57.402]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:38:57.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:38:57.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:38:57.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:57.407]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:38:57.417]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:38:57.417]          </block>
[22:38:57.417]          // end if-block "!hasDormant"
[22:38:57.418]        </control>
[22:38:57.418]        // end if-block "isSWJ"
[22:38:57.418]      </control>
[22:38:57.418]      <control if="!isSWJ" while="" timeout="0" info="">
[22:38:57.418]        // if-block "!isSWJ"
[22:38:57.418]          // =>  FALSE
[22:38:57.418]        // skip if-block "!isSWJ"
[22:38:57.418]      </control>
[22:38:57.420]      <block atomic="false" info="">
[22:38:57.420]        ReadDP(0x0);
[22:38:57.422]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:38:57.422]      </block>
[22:38:57.423]      // end if-block "protType == 2"
[22:38:57.423]    </control>
[22:38:57.423]  </sequence>
[22:38:57.423]  
[22:38:57.427]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:38:57.427]  
[22:38:57.427]  <debugvars>
[22:38:57.427]    // Pre-defined
[22:38:57.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:57.427]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:57.427]    __dp=0x00000000
[22:38:57.427]    __ap=0x00000000
[22:38:57.427]    __traceout=0x00000000      (Trace Disabled)
[22:38:57.427]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:57.427]    __FlashAddr=0x00000000
[22:38:57.427]    __FlashLen=0x00000000
[22:38:57.428]    __FlashArg=0x00000000
[22:38:57.428]    __FlashOp=0x00000000
[22:38:57.428]    __Result=0x00000000
[22:38:57.428]  </debugvars>
[22:38:57.428]  
[22:38:57.428]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:38:57.428]    <block atomic="false" info="">
[22:38:57.428]      __var SW_DP_ABORT       = 0x0;
[22:38:57.428]        // -> [SW_DP_ABORT <= 0x00000000]
[22:38:57.428]      __var DP_CTRL_STAT      = 0x4;
[22:38:57.429]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:38:57.429]      __var DP_SELECT         = 0x8;
[22:38:57.429]        // -> [DP_SELECT <= 0x00000008]
[22:38:57.429]      __var powered_down      = 0;
[22:38:57.429]        // -> [powered_down <= 0x00000000]
[22:38:57.429]      WriteDP(DP_SELECT, 0x00000000);
[22:38:57.433]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:38:57.434]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:38:57.437]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:38:57.437]        // -> [powered_down <= 0x00000001]
[22:38:57.437]    </block>
[22:38:57.438]    <control if="powered_down" while="" timeout="0" info="">
[22:38:57.438]      // if-block "powered_down"
[22:38:57.438]        // =>  TRUE
[22:38:57.438]      <block atomic="false" info="">
[22:38:57.438]        Message(0, "Debug/System power-up request sent");
[22:38:57.438]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:38:57.441]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:38:57.442]      </block>
[22:38:57.442]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:38:57.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:38:57.443]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:38:57.444]        // while-condition  =>  FALSE
[22:38:57.444]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:38:57.444]      </control>
[22:38:57.444]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:38:57.444]        // if-block "(__protocol & 0xFFFF) == 1"
[22:38:57.444]          // =>  FALSE
[22:38:57.444]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:38:57.444]      </control>
[22:38:57.444]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:38:57.445]        // if-block "(__protocol & 0xFFFF) == 2"
[22:38:57.445]          // =>  TRUE
[22:38:57.445]        <block atomic="false" info="">
[22:38:57.445]          Message(0, "executing SWD power up");
[22:38:57.445]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:38:57.450]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:38:57.451]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:38:57.453]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:38:57.453]        </block>
[22:38:57.453]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:38:57.453]      </control>
[22:38:57.453]      // end if-block "powered_down"
[22:38:57.454]    </control>
[22:38:57.454]    <block atomic="false" info="">
[22:38:57.454]      __var DEBUG_PORT_VAL    = 0;
[22:38:57.454]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:38:57.454]      __var ACCESS_POINT_VAL  = 0;
[22:38:57.454]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:38:57.454]      __ap = 1; 
[22:38:57.454]        // -> [__ap <= 0x00000001]
[22:38:57.455]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:38:57.462]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:38:57.463]      __ap = 4;
[22:38:57.463]        // -> [__ap <= 0x00000004]
[22:38:57.463]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:38:57.466]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:38:57.466]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:38:57.466]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:38:57.467]    </block>
[22:38:57.467]    <block atomic="false" info="">
[22:38:57.467]      __var nReset = 0x80;
[22:38:57.467]        // -> [nReset <= 0x00000080]
[22:38:57.468]      __var canReadPins = 0;
[22:38:57.468]        // -> [canReadPins <= 0x00000000]
[22:38:57.468]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:38:57.469]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:38:57.469]        // -> [canReadPins <= 0x00000001]
[22:38:57.470]    </block>
[22:38:57.470]    <control if="" while="1" timeout="200" info="">
[22:38:57.470]      // while "1"  (timeout="200")
[22:38:57.470]      // while-condition  =>  TRUE
[22:38:57.470]      // while "1"  (timeout="200")
[22:38:57.470]      // while-condition  =>  TRUE
[22:38:57.470]      // while "1"  (timeout="200")
[22:38:57.471]      // while-condition  =>  TRUE
[22:38:57.471]      // while "1"  (timeout="200")
[22:38:57.471]      // while-condition  =>  TRUE
[22:38:57.471]      // while "1"  (timeout="200")
[22:38:57.471]      // while-condition  =>  TRUE
[22:38:57.471]      // while "1"  (timeout="200")
[22:38:57.471]      // while-condition  =>  TRUE
[22:38:57.471]      // while "1"  (timeout="200")
[22:38:57.471]      // while-condition  =>  TRUE
[22:38:57.471]      // while "1"  (timeout="200")
[22:38:57.472]      // while-condition  =>  TRUE
[22:38:57.472]      // while "1"  (timeout="200")
[22:38:57.472]      // while-condition  =>  TRUE
[22:38:57.472]      // while "1"  (timeout="200")
[22:38:57.472]      // while-condition  =>  TRUE
[22:38:57.472]      // while "1"  (timeout="200")
[22:38:57.472]      // while-condition  =>  TRUE
[22:38:57.473]      // while "1"  (timeout="200")
[22:38:57.473]      // while-condition  =>  TRUE
[22:38:57.473]      // while "1"  (timeout="200")
[22:38:57.473]      // while-condition  =>  TRUE
[22:38:57.473]      // while "1"  (timeout="200")
[22:38:57.473]      // while-condition  =>  TRUE
[22:38:57.473]      // while "1"  (timeout="200")
[22:38:57.473]      // while-condition  =>  TRUE
[22:38:57.473]      // while "1"  (timeout="200")
[22:38:57.473]      // while-condition  =>  TRUE
[22:38:57.474]      // while "1"  (timeout="200")
[22:38:57.474]      // while-condition  =>  TRUE
[22:38:57.474]      // while "1"  (timeout="200")
[22:38:57.474]      // while-condition  =>  TRUE
[22:38:57.474]      // while "1"  (timeout="200")
[22:38:57.474]      // while-condition  =>  TRUE
[22:38:57.474]      // while "1"  (timeout="200")
[22:38:57.474]      // while-condition  =>  TRUE
[22:38:57.474]      // while "1"  (timeout="200")
[22:38:57.474]      // while-condition  =>  TRUE
[22:38:57.475]      // while "1"  (timeout="200")
[22:38:57.475]      // while-condition  =>  TRUE
[22:38:57.475]      // while "1"  (timeout="200")
[22:38:57.475]      // while-condition  =>  TRUE
[22:38:57.475]      // while "1"  (timeout="200")
[22:38:57.475]      // while-condition  =>  TRUE
[22:38:57.475]      // while "1"  (timeout="200")
[22:38:57.475]      // while-condition  =>  TRUE
[22:38:57.476]      // while "1"  (timeout="200")
[22:38:57.476]      // while-condition  =>  TRUE
[22:38:57.476]      // while "1"  (timeout="200")
[22:38:57.476]      // while-condition  =>  TRUE
[22:38:57.476]      // while "1"  (timeout="200")
[22:38:57.476]      // while-condition  =>  TRUE
[22:38:57.476]      // while "1"  (timeout="200")
[22:38:57.476]      // while-condition  =>  TRUE
[22:38:57.477]      // while "1"  (timeout="200")
[22:38:57.477]      // while-condition  =>  TRUE
[22:38:57.477]      // while "1"  (timeout="200")
[22:38:57.477]      // while-condition  =>  TRUE
[22:38:57.477]      // while "1"  (timeout="200")
[22:38:57.477]      // while-condition  =>  TRUE
[22:38:57.477]      // while "1"  (timeout="200")
[22:38:57.477]      // while-condition  =>  TRUE
[22:38:57.477]      // while "1"  (timeout="200")
[22:38:57.477]      // while-condition  =>  TRUE
[22:38:57.478]      // while "1"  (timeout="200")
[22:38:57.478]      // while-condition  =>  TRUE
[22:38:57.478]      // while "1"  (timeout="200")
[22:38:57.478]      // while-condition  =>  TRUE
[22:38:57.478]      // while "1"  (timeout="200")
[22:38:57.478]      // while-condition  =>  TRUE
[22:38:57.479]      // while "1"  (timeout="200")
[22:38:57.479]      // while-condition  =>  TRUE
[22:38:57.479]      // while "1"  (timeout="200")
[22:38:57.479]      // while-condition  =>  TRUE
[22:38:57.479]      // while "1"  (timeout="200")
[22:38:57.479]      // while-condition  =>  TRUE
[22:38:57.479]      // while "1"  (timeout="200")
[22:38:57.479]      // while-condition  =>  TRUE
[22:38:57.479]      // while "1"  (timeout="200")
[22:38:57.479]      // while-condition  =>  TRUE
[22:38:57.480]      // while "1"  (timeout="200")
[22:38:57.480]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.481]      // while-condition  =>  TRUE
[22:38:57.481]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.482]      // while-condition  =>  TRUE
[22:38:57.482]      // while "1"  (timeout="200")
[22:38:57.484]      // while-condition  =>  TRUE
[22:38:57.484]      // while "1"  (timeout="200")
[22:38:57.484]      // while-condition  =>  TRUE
[22:38:57.484]      // while "1"  (timeout="200")
[22:38:57.484]      // while-condition  =>  TRUE
[22:38:57.484]      // while "1"  (timeout="200")
[22:38:57.485]      // while-condition  =>  TRUE
[22:38:57.485]      // while "1"  (timeout="200")
[22:38:57.485]      // while-condition  =>  TRUE
[22:38:57.485]      // while "1"  (timeout="200")
[22:38:57.485]      // while-condition  =>  TRUE
[22:38:57.485]      // while "1"  (timeout="200")
[22:38:57.485]      // while-condition  =>  TRUE
[22:38:57.485]      // while "1"  (timeout="200")
[22:38:57.486]      // while-condition  =>  TRUE
[22:38:57.486]      // while "1"  (timeout="200")
[22:38:57.486]      // while  =>  TIMEOUT
[22:38:57.486]      // end while "1"
[22:38:57.486]    </control>
[22:38:57.486]    <control if="canReadPins" while="" timeout="0" info="">
[22:38:57.486]      // if-block "canReadPins"
[22:38:57.486]        // =>  TRUE
[22:38:57.486]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:38:57.486]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:38:57.488]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:38:57.488]        // while-condition  =>  FALSE
[22:38:57.488]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:38:57.488]      </control>
[22:38:57.488]      // end if-block "canReadPins"
[22:38:57.488]    </control>
[22:38:57.488]    <control if="!canReadPins" while="" timeout="0" info="">
[22:38:57.488]      // if-block "!canReadPins"
[22:38:57.488]        // =>  FALSE
[22:38:57.488]      // skip if-block "!canReadPins"
[22:38:57.488]    </control>
[22:38:57.489]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:38:57.489]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:38:57.489]        // =>  TRUE
[22:38:57.489]      <block atomic="false" info="">
[22:38:57.489]        WriteAP(0x00, 0x190008);
[22:38:57.495]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:38:57.495]        WriteAP(0xF0, 0x01);
[22:38:57.505]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:38:57.505]      </block>
[22:38:57.505]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:38:57.505]    </control>
[22:38:57.505]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:38:57.505]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:38:57.506]        // =>  FALSE
[22:38:57.506]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:38:57.506]    </control>
[22:38:57.506]    <block atomic="false" info="">
[22:38:57.506]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:38:57.508]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:38:57.509]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:38:57.509]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:38:57.509]      __ap = 0; //lets make sure we reset the access point selection
[22:38:57.509]        // -> [__ap <= 0x00000000]
[22:38:57.509]    </block>
[22:38:57.509]  </sequence>
[22:38:57.509]  
[22:38:57.554]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:38:57.554]  
[22:38:57.554]  <debugvars>
[22:38:57.554]    // Pre-defined
[22:38:57.555]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:57.555]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:57.555]    __dp=0x00000000
[22:38:57.556]    __ap=0x00000000
[22:38:57.556]    __traceout=0x00000000      (Trace Disabled)
[22:38:57.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:57.556]    __FlashAddr=0x00000000
[22:38:57.556]    __FlashLen=0x00000000
[22:38:57.556]    __FlashArg=0x00000000
[22:38:57.556]    __FlashOp=0x00000000
[22:38:57.556]    __Result=0x00000000
[22:38:57.557]  </debugvars>
[22:38:57.557]  
[22:38:57.557]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:38:57.557]    <block atomic="false" info="">
[22:38:57.557]      __var deviceID = 0;
[22:38:57.557]        // -> [deviceID <= 0x00000000]
[22:38:57.557]      __var version = 0;
[22:38:57.557]        // -> [version <= 0x00000000]
[22:38:57.557]      __var partNum = 0;
[22:38:57.557]        // -> [partNum <= 0x00000000]
[22:38:57.558]      __var manuf = 0;
[22:38:57.558]        // -> [manuf <= 0x00000000]
[22:38:57.558]      __var isMSPM0G1X0X_G3X0X = 0;
[22:38:57.558]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:38:57.558]      __var isProduction = 0;
[22:38:57.558]        // -> [isProduction <= 0x00000000]
[22:38:57.558]      __var continueId = 0;
[22:38:57.558]        // -> [continueId <= 0x00000000]
[22:38:57.559]      deviceID =   Read32(0x41C40004);
[22:38:57.568]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:38:57.568]        // -> [deviceID <= 0x2BB8802F]
[22:38:57.568]      version = deviceID >> 28;
[22:38:57.568]        // -> [version <= 0x00000002]
[22:38:57.569]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:38:57.569]        // -> [partNum <= 0x0000BB88]
[22:38:57.569]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:38:57.569]        // -> [manuf <= 0x00000017]
[22:38:57.569]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:38:57.569]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:38:57.569]      isProduction = (version > 0);
[22:38:57.569]        // -> [isProduction <= 0x00000001]
[22:38:57.570]    </block>
[22:38:57.570]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:38:57.570]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:38:57.570]        // =>  FALSE
[22:38:57.570]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:38:57.570]    </control>
[22:38:57.570]    <control if="continueId == 4" while="" timeout="0" info="">
[22:38:57.570]      // if-block "continueId == 4"
[22:38:57.570]        // =>  FALSE
[22:38:57.572]      // skip if-block "continueId == 4"
[22:38:57.572]    </control>
[22:38:57.572]    <control if="!isProduction" while="" timeout="0" info="">
[22:38:57.572]      // if-block "!isProduction"
[22:38:57.572]        // =>  FALSE
[22:38:57.572]      // skip if-block "!isProduction"
[22:38:57.572]    </control>
[22:38:57.572]  </sequence>
[22:38:57.572]  
[22:40:29.531]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:40:29.531]  
[22:40:29.532]  <debugvars>
[22:40:29.532]    // Pre-defined
[22:40:29.532]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:29.532]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:29.532]    __dp=0x00000000
[22:40:29.532]    __ap=0x00000000
[22:40:29.532]    __traceout=0x00000000      (Trace Disabled)
[22:40:29.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:29.532]    __FlashAddr=0x00000000
[22:40:29.533]    __FlashLen=0x00000000
[22:40:29.533]    __FlashArg=0x00000000
[22:40:29.533]    __FlashOp=0x00000000
[22:40:29.533]    __Result=0x00000000
[22:40:29.533]  </debugvars>
[22:40:29.533]  
[22:40:29.533]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:40:29.533]    <block atomic="false" info="">
[22:40:29.533]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:40:29.533]        // -> [isSWJ <= 0x00000001]
[22:40:29.534]      __var hasDormant = __protocol & 0x00020000;
[22:40:29.534]        // -> [hasDormant <= 0x00000000]
[22:40:29.534]      __var protType   = __protocol & 0x0000FFFF;
[22:40:29.534]        // -> [protType <= 0x00000002]
[22:40:29.534]    </block>
[22:40:29.534]    <control if="protType == 1" while="" timeout="0" info="">
[22:40:29.534]      // if-block "protType == 1"
[22:40:29.534]        // =>  FALSE
[22:40:29.534]      // skip if-block "protType == 1"
[22:40:29.534]    </control>
[22:40:29.535]    <control if="protType == 2" while="" timeout="0" info="">
[22:40:29.535]      // if-block "protType == 2"
[22:40:29.535]        // =>  TRUE
[22:40:29.535]      <control if="isSWJ" while="" timeout="0" info="">
[22:40:29.536]        // if-block "isSWJ"
[22:40:29.536]          // =>  TRUE
[22:40:29.536]        <control if="hasDormant" while="" timeout="0" info="">
[22:40:29.536]          // if-block "hasDormant"
[22:40:29.536]            // =>  FALSE
[22:40:29.536]          // skip if-block "hasDormant"
[22:40:29.536]        </control>
[22:40:29.536]        <control if="!hasDormant" while="" timeout="0" info="">
[22:40:29.536]          // if-block "!hasDormant"
[22:40:29.536]            // =>  TRUE
[22:40:29.536]          <block atomic="false" info="">
[22:40:29.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:40:29.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:29.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:40:29.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:40:29.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:40:29.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:29.542]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:40:29.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:40:29.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:40:29.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:29.545]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:40:29.547]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:40:29.547]          </block>
[22:40:29.547]          // end if-block "!hasDormant"
[22:40:29.547]        </control>
[22:40:29.547]        // end if-block "isSWJ"
[22:40:29.547]      </control>
[22:40:29.547]      <control if="!isSWJ" while="" timeout="0" info="">
[22:40:29.547]        // if-block "!isSWJ"
[22:40:29.547]          // =>  FALSE
[22:40:29.547]        // skip if-block "!isSWJ"
[22:40:29.547]      </control>
[22:40:29.547]      <block atomic="false" info="">
[22:40:29.547]        ReadDP(0x0);
[22:40:29.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:40:29.549]      </block>
[22:40:29.549]      // end if-block "protType == 2"
[22:40:29.550]    </control>
[22:40:29.550]  </sequence>
[22:40:29.550]  
[22:40:29.552]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:40:29.552]  
[22:40:29.552]  <debugvars>
[22:40:29.552]    // Pre-defined
[22:40:29.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:29.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:29.552]    __dp=0x00000000
[22:40:29.552]    __ap=0x00000000
[22:40:29.553]    __traceout=0x00000000      (Trace Disabled)
[22:40:29.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:29.553]    __FlashAddr=0x00000000
[22:40:29.553]    __FlashLen=0x00000000
[22:40:29.553]    __FlashArg=0x00000000
[22:40:29.553]    __FlashOp=0x00000000
[22:40:29.553]    __Result=0x00000000
[22:40:29.553]  </debugvars>
[22:40:29.553]  
[22:40:29.554]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:40:29.554]    <block atomic="false" info="">
[22:40:29.554]      __var SW_DP_ABORT       = 0x0;
[22:40:29.554]        // -> [SW_DP_ABORT <= 0x00000000]
[22:40:29.554]      __var DP_CTRL_STAT      = 0x4;
[22:40:29.554]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:40:29.555]      __var DP_SELECT         = 0x8;
[22:40:29.555]        // -> [DP_SELECT <= 0x00000008]
[22:40:29.555]      __var powered_down      = 0;
[22:40:29.555]        // -> [powered_down <= 0x00000000]
[22:40:29.555]      WriteDP(DP_SELECT, 0x00000000);
[22:40:29.557]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:40:29.557]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:40:29.559]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:40:29.559]        // -> [powered_down <= 0x00000001]
[22:40:29.559]    </block>
[22:40:29.560]    <control if="powered_down" while="" timeout="0" info="">
[22:40:29.560]      // if-block "powered_down"
[22:40:29.560]        // =>  TRUE
[22:40:29.560]      <block atomic="false" info="">
[22:40:29.560]        Message(0, "Debug/System power-up request sent");
[22:40:29.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:40:29.562]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:40:29.562]      </block>
[22:40:29.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:40:29.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.565]        // while-condition  =>  TRUE
[22:40:29.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.566]        // while-condition  =>  TRUE
[22:40:29.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.569]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.569]        // while-condition  =>  TRUE
[22:40:29.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.571]        // while-condition  =>  TRUE
[22:40:29.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.578]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.578]        // while-condition  =>  TRUE
[22:40:29.578]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.582]        // while-condition  =>  TRUE
[22:40:29.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.584]        // while-condition  =>  TRUE
[22:40:29.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.586]        // while-condition  =>  TRUE
[22:40:29.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.588]        // while-condition  =>  TRUE
[22:40:29.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.590]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.590]        // while-condition  =>  TRUE
[22:40:29.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.591]        // while-condition  =>  TRUE
[22:40:29.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.593]        // while-condition  =>  TRUE
[22:40:29.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.595]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.595]        // while-condition  =>  TRUE
[22:40:29.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.596]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.597]        // while-condition  =>  TRUE
[22:40:29.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.599]        // while-condition  =>  TRUE
[22:40:29.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.600]        // while-condition  =>  TRUE
[22:40:29.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.602]        // while-condition  =>  TRUE
[22:40:29.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.603]        // while-condition  =>  TRUE
[22:40:29.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.605]        // while-condition  =>  TRUE
[22:40:29.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.607]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.607]        // while-condition  =>  TRUE
[22:40:29.607]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.609]        // while-condition  =>  TRUE
[22:40:29.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.611]        // while-condition  =>  TRUE
[22:40:29.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.612]        // while-condition  =>  TRUE
[22:40:29.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.615]        // while-condition  =>  TRUE
[22:40:29.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.616]        // while-condition  =>  TRUE
[22:40:29.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.618]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.618]        // while-condition  =>  TRUE
[22:40:29.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.620]        // while-condition  =>  TRUE
[22:40:29.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.622]        // while-condition  =>  TRUE
[22:40:29.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.623]        // while-condition  =>  TRUE
[22:40:29.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.625]        // while-condition  =>  TRUE
[22:40:29.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.627]        // while-condition  =>  TRUE
[22:40:29.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.630]        // while-condition  =>  TRUE
[22:40:29.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.632]        // while-condition  =>  TRUE
[22:40:29.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.633]        // while-condition  =>  TRUE
[22:40:29.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.641]        // while-condition  =>  TRUE
[22:40:29.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.642]        // while-condition  =>  TRUE
[22:40:29.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.644]        // while-condition  =>  TRUE
[22:40:29.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.646]        // while-condition  =>  TRUE
[22:40:29.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.648]        // while-condition  =>  TRUE
[22:40:29.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.649]        // while-condition  =>  TRUE
[22:40:29.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.651]        // while-condition  =>  TRUE
[22:40:29.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.653]        // while-condition  =>  TRUE
[22:40:29.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.654]        // while-condition  =>  TRUE
[22:40:29.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.657]        // while-condition  =>  TRUE
[22:40:29.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.661]        // while-condition  =>  TRUE
[22:40:29.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.663]        // while-condition  =>  TRUE
[22:40:29.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.666]        // while-condition  =>  TRUE
[22:40:29.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.667]        // while-condition  =>  TRUE
[22:40:29.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.674]        // while-condition  =>  TRUE
[22:40:29.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.677]        // while-condition  =>  TRUE
[22:40:29.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.681]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.681]        // while-condition  =>  TRUE
[22:40:29.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.684]        // while-condition  =>  TRUE
[22:40:29.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.686]        // while-condition  =>  TRUE
[22:40:29.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.688]        // while-condition  =>  TRUE
[22:40:29.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.689]        // while-condition  =>  TRUE
[22:40:29.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.691]        // while-condition  =>  TRUE
[22:40:29.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.693]        // while-condition  =>  TRUE
[22:40:29.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.694]        // while-condition  =>  TRUE
[22:40:29.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.696]        // while-condition  =>  TRUE
[22:40:29.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.698]        // while-condition  =>  TRUE
[22:40:29.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.699]        // while-condition  =>  TRUE
[22:40:29.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.704]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.704]        // while-condition  =>  TRUE
[22:40:29.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.706]        // while-condition  =>  TRUE
[22:40:29.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.708]        // while-condition  =>  TRUE
[22:40:29.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.710]        // while-condition  =>  TRUE
[22:40:29.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.711]        // while-condition  =>  TRUE
[22:40:29.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.713]        // while-condition  =>  TRUE
[22:40:29.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.715]        // while-condition  =>  TRUE
[22:40:29.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.717]        // while-condition  =>  TRUE
[22:40:29.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.720]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.720]        // while-condition  =>  TRUE
[22:40:29.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.723]        // while-condition  =>  TRUE
[22:40:29.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.724]        // while-condition  =>  TRUE
[22:40:29.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.726]        // while-condition  =>  TRUE
[22:40:29.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.728]        // while-condition  =>  TRUE
[22:40:29.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.730]        // while-condition  =>  TRUE
[22:40:29.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.732]        // while-condition  =>  TRUE
[22:40:29.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.733]        // while-condition  =>  TRUE
[22:40:29.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.735]        // while-condition  =>  TRUE
[22:40:29.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.743]        // while-condition  =>  TRUE
[22:40:29.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.745]        // while-condition  =>  TRUE
[22:40:29.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.748]        // while-condition  =>  TRUE
[22:40:29.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.750]        // while-condition  =>  TRUE
[22:40:29.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.753]        // while-condition  =>  TRUE
[22:40:29.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.755]        // while-condition  =>  TRUE
[22:40:29.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.756]        // while-condition  =>  TRUE
[22:40:29.756]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.758]        // while-condition  =>  TRUE
[22:40:29.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.759]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.759]        // while-condition  =>  TRUE
[22:40:29.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.761]        // while-condition  =>  TRUE
[22:40:29.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.763]        // while-condition  =>  TRUE
[22:40:29.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.764]        // while-condition  =>  TRUE
[22:40:29.765]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.766]        // while-condition  =>  TRUE
[22:40:29.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.768]        // while-condition  =>  TRUE
[22:40:29.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.770]        // while-condition  =>  TRUE
[22:40:29.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.772]        // while-condition  =>  TRUE
[22:40:29.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.774]        // while-condition  =>  TRUE
[22:40:29.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.779]        // while-condition  =>  TRUE
[22:40:29.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.786]        // while-condition  =>  TRUE
[22:40:29.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.788]        // while-condition  =>  TRUE
[22:40:29.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.790]        // while-condition  =>  TRUE
[22:40:29.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.792]        // while-condition  =>  TRUE
[22:40:29.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.794]        // while-condition  =>  TRUE
[22:40:29.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.800]        // while-condition  =>  TRUE
[22:40:29.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.802]        // while-condition  =>  TRUE
[22:40:29.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.803]        // while-condition  =>  TRUE
[22:40:29.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.805]        // while-condition  =>  TRUE
[22:40:29.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.806]        // while-condition  =>  TRUE
[22:40:29.807]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.808]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.808]        // while-condition  =>  TRUE
[22:40:29.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.810]        // while-condition  =>  TRUE
[22:40:29.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.812]        // while-condition  =>  TRUE
[22:40:29.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.814]        // while-condition  =>  TRUE
[22:40:29.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.815]        // while-condition  =>  TRUE
[22:40:29.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.817]        // while-condition  =>  TRUE
[22:40:29.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.819]        // while-condition  =>  TRUE
[22:40:29.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.822]        // while-condition  =>  TRUE
[22:40:29.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.824]        // while-condition  =>  TRUE
[22:40:29.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.826]        // while-condition  =>  TRUE
[22:40:29.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.828]        // while-condition  =>  TRUE
[22:40:29.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.829]        // while-condition  =>  TRUE
[22:40:29.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.831]        // while-condition  =>  TRUE
[22:40:29.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.833]        // while-condition  =>  TRUE
[22:40:29.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.836]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.837]        // while-condition  =>  TRUE
[22:40:29.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.846]        // while-condition  =>  TRUE
[22:40:29.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.848]        // while-condition  =>  TRUE
[22:40:29.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.850]        // while-condition  =>  TRUE
[22:40:29.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.852]        // while-condition  =>  TRUE
[22:40:29.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.853]        // while-condition  =>  TRUE
[22:40:29.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.855]        // while-condition  =>  TRUE
[22:40:29.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.856]        // while-condition  =>  TRUE
[22:40:29.858]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.859]        // while-condition  =>  TRUE
[22:40:29.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.861]        // while-condition  =>  TRUE
[22:40:29.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.863]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.863]        // while-condition  =>  TRUE
[22:40:29.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.865]        // while-condition  =>  TRUE
[22:40:29.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.866]        // while-condition  =>  TRUE
[22:40:29.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.868]        // while-condition  =>  TRUE
[22:40:29.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.870]        // while-condition  =>  TRUE
[22:40:29.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.872]        // while-condition  =>  TRUE
[22:40:29.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.874]        // while-condition  =>  TRUE
[22:40:29.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.880]        // while-condition  =>  TRUE
[22:40:29.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.885]        // while-condition  =>  TRUE
[22:40:29.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.890]        // while-condition  =>  TRUE
[22:40:29.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.892]        // while-condition  =>  TRUE
[22:40:29.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.897]        // while-condition  =>  TRUE
[22:40:29.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.901]        // while-condition  =>  TRUE
[22:40:29.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.904]        // while-condition  =>  TRUE
[22:40:29.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.906]        // while-condition  =>  TRUE
[22:40:29.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.908]        // while-condition  =>  TRUE
[22:40:29.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.910]        // while-condition  =>  TRUE
[22:40:29.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.912]        // while-condition  =>  TRUE
[22:40:29.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.914]        // while-condition  =>  TRUE
[22:40:29.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.915]        // while-condition  =>  TRUE
[22:40:29.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.917]        // while-condition  =>  TRUE
[22:40:29.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.919]        // while-condition  =>  TRUE
[22:40:29.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.920]        // while-condition  =>  TRUE
[22:40:29.920]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.922]        // while-condition  =>  TRUE
[22:40:29.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.927]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.928]        // while-condition  =>  TRUE
[22:40:29.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.930]        // while-condition  =>  TRUE
[22:40:29.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.932]        // while-condition  =>  TRUE
[22:40:29.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.934]        // while-condition  =>  TRUE
[22:40:29.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.936]        // while-condition  =>  TRUE
[22:40:29.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.938]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.938]        // while-condition  =>  TRUE
[22:40:29.939]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.940]        // while-condition  =>  TRUE
[22:40:29.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.947]        // while-condition  =>  TRUE
[22:40:29.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.949]        // while-condition  =>  TRUE
[22:40:29.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.951]        // while-condition  =>  TRUE
[22:40:29.951]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.952]        // while-condition  =>  TRUE
[22:40:29.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.954]        // while-condition  =>  TRUE
[22:40:29.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.956]        // while-condition  =>  TRUE
[22:40:29.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.957]        // while-condition  =>  TRUE
[22:40:29.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.959]        // while-condition  =>  TRUE
[22:40:29.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.962]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.962]        // while-condition  =>  TRUE
[22:40:29.962]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.963]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.963]        // while-condition  =>  TRUE
[22:40:29.963]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.965]        // while-condition  =>  TRUE
[22:40:29.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.967]        // while-condition  =>  TRUE
[22:40:29.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.968]        // while-condition  =>  TRUE
[22:40:29.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.970]        // while-condition  =>  TRUE
[22:40:29.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.973]        // while-condition  =>  TRUE
[22:40:29.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.974]        // while-condition  =>  TRUE
[22:40:29.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.975]        // while-condition  =>  TRUE
[22:40:29.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.978]        // while-condition  =>  TRUE
[22:40:29.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.979]        // while-condition  =>  TRUE
[22:40:29.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.982]        // while-condition  =>  TRUE
[22:40:29.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.988]        // while-condition  =>  TRUE
[22:40:29.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.991]        // while-condition  =>  TRUE
[22:40:29.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.993]        // while-condition  =>  TRUE
[22:40:29.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.996]        // while-condition  =>  TRUE
[22:40:29.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.997]        // while-condition  =>  TRUE
[22:40:29.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:29.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:29.999]        // while-condition  =>  TRUE
[22:40:29.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.000]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.000]        // while-condition  =>  TRUE
[22:40:30.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.002]        // while-condition  =>  TRUE
[22:40:30.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.004]        // while-condition  =>  TRUE
[22:40:30.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.005]        // while-condition  =>  TRUE
[22:40:30.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.007]        // while-condition  =>  TRUE
[22:40:30.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.009]        // while-condition  =>  TRUE
[22:40:30.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.010]        // while-condition  =>  TRUE
[22:40:30.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.013]        // while-condition  =>  TRUE
[22:40:30.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.015]        // while-condition  =>  TRUE
[22:40:30.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.016]        // while-condition  =>  TRUE
[22:40:30.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.018]        // while-condition  =>  TRUE
[22:40:30.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.020]        // while-condition  =>  TRUE
[22:40:30.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.021]        // while-condition  =>  TRUE
[22:40:30.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.024]        // while-condition  =>  TRUE
[22:40:30.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.025]        // while-condition  =>  TRUE
[22:40:30.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.027]        // while-condition  =>  TRUE
[22:40:30.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.030]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.030]        // while-condition  =>  TRUE
[22:40:30.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.032]        // while-condition  =>  TRUE
[22:40:30.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.033]        // while-condition  =>  TRUE
[22:40:30.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.034]        // while-condition  =>  TRUE
[22:40:30.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.037]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.037]        // while-condition  =>  TRUE
[22:40:30.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.038]        // while-condition  =>  TRUE
[22:40:30.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.040]        // while-condition  =>  TRUE
[22:40:30.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.041]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.042]        // while-condition  =>  TRUE
[22:40:30.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.043]        // while-condition  =>  TRUE
[22:40:30.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.051]        // while-condition  =>  TRUE
[22:40:30.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.052]        // while-condition  =>  TRUE
[22:40:30.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.053]        // while-condition  =>  TRUE
[22:40:30.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.055]        // while-condition  =>  TRUE
[22:40:30.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.057]        // while-condition  =>  TRUE
[22:40:30.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.059]        // while-condition  =>  TRUE
[22:40:30.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.061]        // while-condition  =>  TRUE
[22:40:30.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.063]        // while-condition  =>  TRUE
[22:40:30.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.065]        // while-condition  =>  TRUE
[22:40:30.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.066]        // while-condition  =>  TRUE
[22:40:30.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.068]        // while-condition  =>  TRUE
[22:40:30.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.069]        // while-condition  =>  TRUE
[22:40:30.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.071]        // while-condition  =>  TRUE
[22:40:30.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.073]        // while-condition  =>  TRUE
[22:40:30.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.075]        // while-condition  =>  TRUE
[22:40:30.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.077]        // while-condition  =>  TRUE
[22:40:30.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.079]        // while-condition  =>  TRUE
[22:40:30.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.080]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.080]        // while-condition  =>  TRUE
[22:40:30.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.082]        // while-condition  =>  TRUE
[22:40:30.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.084]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.084]        // while-condition  =>  TRUE
[22:40:30.084]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.090]        // while-condition  =>  TRUE
[22:40:30.090]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.093]        // while-condition  =>  TRUE
[22:40:30.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.095]        // while-condition  =>  TRUE
[22:40:30.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.097]        // while-condition  =>  TRUE
[22:40:30.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.099]        // while-condition  =>  TRUE
[22:40:30.099]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.106]        // while-condition  =>  TRUE
[22:40:30.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.108]        // while-condition  =>  TRUE
[22:40:30.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.111]        // while-condition  =>  TRUE
[22:40:30.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.112]        // while-condition  =>  TRUE
[22:40:30.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.114]        // while-condition  =>  TRUE
[22:40:30.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.116]        // while-condition  =>  TRUE
[22:40:30.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.118]        // while-condition  =>  TRUE
[22:40:30.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.120]        // while-condition  =>  TRUE
[22:40:30.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.122]        // while-condition  =>  TRUE
[22:40:30.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.125]        // while-condition  =>  TRUE
[22:40:30.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.128]        // while-condition  =>  TRUE
[22:40:30.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.129]        // while-condition  =>  TRUE
[22:40:30.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.132]        // while-condition  =>  TRUE
[22:40:30.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.133]        // while-condition  =>  TRUE
[22:40:30.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.136]        // while-condition  =>  TRUE
[22:40:30.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.137]        // while-condition  =>  TRUE
[22:40:30.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.139]        // while-condition  =>  TRUE
[22:40:30.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.140]        // while-condition  =>  TRUE
[22:40:30.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.142]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.142]        // while-condition  =>  TRUE
[22:40:30.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.146]        // while-condition  =>  TRUE
[22:40:30.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.152]        // while-condition  =>  TRUE
[22:40:30.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.154]        // while-condition  =>  TRUE
[22:40:30.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.157]        // while-condition  =>  TRUE
[22:40:30.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.158]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.158]        // while-condition  =>  TRUE
[22:40:30.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.160]        // while-condition  =>  TRUE
[22:40:30.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.163]        // while-condition  =>  TRUE
[22:40:30.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.164]        // while-condition  =>  TRUE
[22:40:30.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.166]        // while-condition  =>  TRUE
[22:40:30.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.168]        // while-condition  =>  TRUE
[22:40:30.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.170]        // while-condition  =>  TRUE
[22:40:30.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.172]        // while-condition  =>  TRUE
[22:40:30.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.174]        // while-condition  =>  TRUE
[22:40:30.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.176]        // while-condition  =>  TRUE
[22:40:30.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.178]        // while-condition  =>  TRUE
[22:40:30.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.180]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.180]        // while-condition  =>  TRUE
[22:40:30.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.182]        // while-condition  =>  TRUE
[22:40:30.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.184]        // while-condition  =>  TRUE
[22:40:30.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.188]        // while-condition  =>  TRUE
[22:40:30.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.195]        // while-condition  =>  TRUE
[22:40:30.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.197]        // while-condition  =>  TRUE
[22:40:30.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.199]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.199]        // while-condition  =>  TRUE
[22:40:30.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.200]        // while-condition  =>  TRUE
[22:40:30.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.203]        // while-condition  =>  TRUE
[22:40:30.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.204]        // while-condition  =>  TRUE
[22:40:30.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.206]        // while-condition  =>  TRUE
[22:40:30.206]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.208]        // while-condition  =>  TRUE
[22:40:30.208]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.210]        // while-condition  =>  TRUE
[22:40:30.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.211]        // while-condition  =>  TRUE
[22:40:30.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.212]        // while-condition  =>  TRUE
[22:40:30.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.214]        // while-condition  =>  TRUE
[22:40:30.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.217]        // while-condition  =>  TRUE
[22:40:30.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.219]        // while-condition  =>  TRUE
[22:40:30.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.221]        // while-condition  =>  TRUE
[22:40:30.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.223]        // while-condition  =>  TRUE
[22:40:30.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.225]        // while-condition  =>  TRUE
[22:40:30.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.228]        // while-condition  =>  TRUE
[22:40:30.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.229]        // while-condition  =>  TRUE
[22:40:30.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.231]        // while-condition  =>  TRUE
[22:40:30.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.234]        // while-condition  =>  TRUE
[22:40:30.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.235]        // while-condition  =>  TRUE
[22:40:30.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.237]        // while-condition  =>  TRUE
[22:40:30.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.239]        // while-condition  =>  TRUE
[22:40:30.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.241]        // while-condition  =>  TRUE
[22:40:30.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.243]        // while-condition  =>  TRUE
[22:40:30.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.245]        // while-condition  =>  TRUE
[22:40:30.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.247]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.247]        // while-condition  =>  TRUE
[22:40:30.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.253]        // while-condition  =>  TRUE
[22:40:30.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.255]        // while-condition  =>  TRUE
[22:40:30.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.258]        // while-condition  =>  TRUE
[22:40:30.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.259]        // while-condition  =>  TRUE
[22:40:30.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.261]        // while-condition  =>  TRUE
[22:40:30.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.262]        // while-condition  =>  TRUE
[22:40:30.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.264]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.264]        // while-condition  =>  TRUE
[22:40:30.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.266]        // while-condition  =>  TRUE
[22:40:30.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.268]        // while-condition  =>  TRUE
[22:40:30.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.270]        // while-condition  =>  TRUE
[22:40:30.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.274]        // while-condition  =>  TRUE
[22:40:30.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.277]        // while-condition  =>  TRUE
[22:40:30.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.279]        // while-condition  =>  TRUE
[22:40:30.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.280]        // while-condition  =>  TRUE
[22:40:30.281]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.283]        // while-condition  =>  TRUE
[22:40:30.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.284]        // while-condition  =>  TRUE
[22:40:30.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.286]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.286]        // while-condition  =>  TRUE
[22:40:30.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.288]        // while-condition  =>  TRUE
[22:40:30.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.296]        // while-condition  =>  TRUE
[22:40:30.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.300]        // while-condition  =>  TRUE
[22:40:30.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.302]        // while-condition  =>  TRUE
[22:40:30.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.306]        // while-condition  =>  TRUE
[22:40:30.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.309]        // while-condition  =>  TRUE
[22:40:30.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.310]        // while-condition  =>  TRUE
[22:40:30.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.313]        // while-condition  =>  TRUE
[22:40:30.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.315]        // while-condition  =>  TRUE
[22:40:30.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.316]        // while-condition  =>  TRUE
[22:40:30.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.318]        // while-condition  =>  TRUE
[22:40:30.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.319]        // while-condition  =>  TRUE
[22:40:30.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.322]        // while-condition  =>  TRUE
[22:40:30.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.324]        // while-condition  =>  TRUE
[22:40:30.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.325]        // while-condition  =>  TRUE
[22:40:30.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.327]        // while-condition  =>  TRUE
[22:40:30.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.329]        // while-condition  =>  TRUE
[22:40:30.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.331]        // while-condition  =>  TRUE
[22:40:30.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.333]        // while-condition  =>  TRUE
[22:40:30.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.337]        // while-condition  =>  TRUE
[22:40:30.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.339]        // while-condition  =>  TRUE
[22:40:30.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.341]        // while-condition  =>  TRUE
[22:40:30.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.343]        // while-condition  =>  TRUE
[22:40:30.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.346]        // while-condition  =>  TRUE
[22:40:30.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.348]        // while-condition  =>  TRUE
[22:40:30.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.353]        // while-condition  =>  TRUE
[22:40:30.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.356]        // while-condition  =>  TRUE
[22:40:30.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.358]        // while-condition  =>  TRUE
[22:40:30.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.360]        // while-condition  =>  TRUE
[22:40:30.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.362]        // while-condition  =>  TRUE
[22:40:30.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.363]        // while-condition  =>  TRUE
[22:40:30.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.366]        // while-condition  =>  TRUE
[22:40:30.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.368]        // while-condition  =>  TRUE
[22:40:30.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.369]        // while-condition  =>  TRUE
[22:40:30.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.371]        // while-condition  =>  TRUE
[22:40:30.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.373]        // while-condition  =>  TRUE
[22:40:30.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.375]        // while-condition  =>  TRUE
[22:40:30.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.376]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.376]        // while-condition  =>  TRUE
[22:40:30.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.379]        // while-condition  =>  TRUE
[22:40:30.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.381]        // while-condition  =>  TRUE
[22:40:30.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.382]        // while-condition  =>  TRUE
[22:40:30.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.384]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.384]        // while-condition  =>  TRUE
[22:40:30.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.386]        // while-condition  =>  TRUE
[22:40:30.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.387]        // while-condition  =>  TRUE
[22:40:30.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.389]        // while-condition  =>  TRUE
[22:40:30.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.393]        // while-condition  =>  TRUE
[22:40:30.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.398]        // while-condition  =>  TRUE
[22:40:30.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.401]        // while-condition  =>  TRUE
[22:40:30.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.403]        // while-condition  =>  TRUE
[22:40:30.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.404]        // while-condition  =>  TRUE
[22:40:30.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.407]        // while-condition  =>  TRUE
[22:40:30.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.408]        // while-condition  =>  TRUE
[22:40:30.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.410]        // while-condition  =>  TRUE
[22:40:30.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.412]        // while-condition  =>  TRUE
[22:40:30.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.414]        // while-condition  =>  TRUE
[22:40:30.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.416]        // while-condition  =>  TRUE
[22:40:30.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.418]        // while-condition  =>  TRUE
[22:40:30.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.419]        // while-condition  =>  TRUE
[22:40:30.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.421]        // while-condition  =>  TRUE
[22:40:30.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.423]        // while-condition  =>  TRUE
[22:40:30.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.424]        // while-condition  =>  TRUE
[22:40:30.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.427]        // while-condition  =>  TRUE
[22:40:30.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.428]        // while-condition  =>  TRUE
[22:40:30.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.431]        // while-condition  =>  TRUE
[22:40:30.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.433]        // while-condition  =>  TRUE
[22:40:30.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.434]        // while-condition  =>  TRUE
[22:40:30.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.436]        // while-condition  =>  TRUE
[22:40:30.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.439]        // while-condition  =>  TRUE
[22:40:30.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.441]        // while-condition  =>  TRUE
[22:40:30.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.442]        // while-condition  =>  TRUE
[22:40:30.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.444]        // while-condition  =>  TRUE
[22:40:30.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.446]        // while-condition  =>  TRUE
[22:40:30.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.449]        // while-condition  =>  TRUE
[22:40:30.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.452]        // while-condition  =>  TRUE
[22:40:30.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.453]        // while-condition  =>  TRUE
[22:40:30.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.459]        // while-condition  =>  TRUE
[22:40:30.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.461]        // while-condition  =>  TRUE
[22:40:30.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.463]        // while-condition  =>  TRUE
[22:40:30.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.464]        // while-condition  =>  TRUE
[22:40:30.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.466]        // while-condition  =>  TRUE
[22:40:30.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.469]        // while-condition  =>  TRUE
[22:40:30.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.470]        // while-condition  =>  TRUE
[22:40:30.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.472]        // while-condition  =>  TRUE
[22:40:30.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.474]        // while-condition  =>  TRUE
[22:40:30.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.475]        // while-condition  =>  TRUE
[22:40:30.476]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.477]        // while-condition  =>  TRUE
[22:40:30.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.479]        // while-condition  =>  TRUE
[22:40:30.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.481]        // while-condition  =>  TRUE
[22:40:30.481]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.482]        // while-condition  =>  TRUE
[22:40:30.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.484]        // while-condition  =>  TRUE
[22:40:30.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.486]        // while-condition  =>  TRUE
[22:40:30.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.488]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.488]        // while-condition  =>  TRUE
[22:40:30.488]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.490]        // while-condition  =>  TRUE
[22:40:30.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.492]        // while-condition  =>  TRUE
[22:40:30.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.494]        // while-condition  =>  TRUE
[22:40:30.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.497]        // while-condition  =>  TRUE
[22:40:30.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.500]        // while-condition  =>  TRUE
[22:40:30.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.504]        // while-condition  =>  TRUE
[22:40:30.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.506]        // while-condition  =>  TRUE
[22:40:30.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.507]        // while-condition  =>  TRUE
[22:40:30.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.509]        // while-condition  =>  TRUE
[22:40:30.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.510]        // while-condition  =>  TRUE
[22:40:30.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.513]        // while-condition  =>  TRUE
[22:40:30.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.514]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.515]        // while-condition  =>  TRUE
[22:40:30.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.517]        // while-condition  =>  TRUE
[22:40:30.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.519]        // while-condition  =>  TRUE
[22:40:30.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.521]        // while-condition  =>  TRUE
[22:40:30.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.523]        // while-condition  =>  TRUE
[22:40:30.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.524]        // while-condition  =>  TRUE
[22:40:30.524]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.527]        // while-condition  =>  TRUE
[22:40:30.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.529]        // while-condition  =>  TRUE
[22:40:30.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.530]        // while-condition  =>  TRUE
[22:40:30.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.531]        // while-condition  =>  TRUE
[22:40:30.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.533]        // while-condition  =>  TRUE
[22:40:30.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.535]        // while-condition  =>  TRUE
[22:40:30.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.537]        // while-condition  =>  TRUE
[22:40:30.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.538]        // while-condition  =>  TRUE
[22:40:30.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.540]        // while-condition  =>  TRUE
[22:40:30.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.542]        // while-condition  =>  TRUE
[22:40:30.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.546]        // while-condition  =>  TRUE
[22:40:30.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[22:40:30.553]        // while-condition  =>  TRUE
[22:40:30.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:30.553]        // while  =>  TIMEOUT
[22:40:30.553]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:40:30.553]      </control>
[22:40:30.553]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:40:30.553]        // if-block "(__protocol & 0xFFFF) == 1"
[22:40:30.554]          // =>  FALSE
[22:40:30.555]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:40:30.555]      </control>
[22:40:30.555]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:40:30.555]        // if-block "(__protocol & 0xFFFF) == 2"
[22:40:30.555]          // =>  TRUE
[22:40:30.555]        <block atomic="false" info="">
[22:40:30.555]          Message(0, "executing SWD power up");
[22:40:30.556]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:40:30.561]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:40:30.561]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:40:30.563]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:40:30.563]        </block>
[22:40:30.563]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:40:30.563]      </control>
[22:40:30.564]      // end if-block "powered_down"
[22:40:30.564]    </control>
[22:40:30.564]    <block atomic="false" info="">
[22:40:30.564]      __var DEBUG_PORT_VAL    = 0;
[22:40:30.564]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:40:30.564]      __var ACCESS_POINT_VAL  = 0;
[22:40:30.564]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:40:30.564]      __ap = 1; 
[22:40:30.564]        // -> [__ap <= 0x00000001]
[22:40:30.564]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:40:30.579]  
[22:40:30.579]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[22:40:30.579]  
[22:40:30.581]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:40:30.582]    </block>
[22:40:30.582]  </sequence>
[22:40:30.582]  
[22:40:38.928]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:40:38.928]  
[22:40:38.936]  <debugvars>
[22:40:38.936]    // Pre-defined
[22:40:38.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:38.936]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:38.936]    __dp=0x00000000
[22:40:38.936]    __ap=0x00000000
[22:40:38.937]    __traceout=0x00000000      (Trace Disabled)
[22:40:38.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:38.937]    __FlashAddr=0x00000000
[22:40:38.937]    __FlashLen=0x00000000
[22:40:38.937]    __FlashArg=0x00000000
[22:40:38.937]    __FlashOp=0x00000000
[22:40:38.937]    __Result=0x00000000
[22:40:38.938]  </debugvars>
[22:40:38.938]  
[22:40:38.938]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:40:38.938]    <block atomic="false" info="">
[22:40:38.938]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:40:38.938]        // -> [isSWJ <= 0x00000001]
[22:40:38.939]      __var hasDormant = __protocol & 0x00020000;
[22:40:38.939]        // -> [hasDormant <= 0x00000000]
[22:40:38.939]      __var protType   = __protocol & 0x0000FFFF;
[22:40:38.939]        // -> [protType <= 0x00000002]
[22:40:38.939]    </block>
[22:40:38.939]    <control if="protType == 1" while="" timeout="0" info="">
[22:40:38.939]      // if-block "protType == 1"
[22:40:38.939]        // =>  FALSE
[22:40:38.939]      // skip if-block "protType == 1"
[22:40:38.940]    </control>
[22:40:38.940]    <control if="protType == 2" while="" timeout="0" info="">
[22:40:38.940]      // if-block "protType == 2"
[22:40:38.940]        // =>  TRUE
[22:40:38.940]      <control if="isSWJ" while="" timeout="0" info="">
[22:40:38.940]        // if-block "isSWJ"
[22:40:38.940]          // =>  TRUE
[22:40:38.940]        <control if="hasDormant" while="" timeout="0" info="">
[22:40:38.940]          // if-block "hasDormant"
[22:40:38.941]            // =>  FALSE
[22:40:38.941]          // skip if-block "hasDormant"
[22:40:38.941]        </control>
[22:40:38.941]        <control if="!hasDormant" while="" timeout="0" info="">
[22:40:38.941]          // if-block "!hasDormant"
[22:40:38.942]            // =>  TRUE
[22:40:38.942]          <block atomic="false" info="">
[22:40:38.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:40:38.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:38.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:40:38.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:40:38.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:40:38.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:38.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:40:38.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:40:38.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:40:38.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:40:38.951]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:40:38.953]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:40:38.953]          </block>
[22:40:38.953]          // end if-block "!hasDormant"
[22:40:38.953]        </control>
[22:40:38.953]        // end if-block "isSWJ"
[22:40:38.953]      </control>
[22:40:38.953]      <control if="!isSWJ" while="" timeout="0" info="">
[22:40:38.953]        // if-block "!isSWJ"
[22:40:38.954]          // =>  FALSE
[22:40:38.954]        // skip if-block "!isSWJ"
[22:40:38.954]      </control>
[22:40:38.954]      <block atomic="false" info="">
[22:40:38.954]        ReadDP(0x0);
[22:40:38.958]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:40:38.959]      </block>
[22:40:38.959]      // end if-block "protType == 2"
[22:40:38.959]    </control>
[22:40:38.959]  </sequence>
[22:40:38.959]  
[22:40:38.962]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:40:38.962]  
[22:40:38.962]  <debugvars>
[22:40:38.962]    // Pre-defined
[22:40:38.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:38.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:38.962]    __dp=0x00000000
[22:40:38.962]    __ap=0x00000000
[22:40:38.962]    __traceout=0x00000000      (Trace Disabled)
[22:40:38.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:38.962]    __FlashAddr=0x00000000
[22:40:38.962]    __FlashLen=0x00000000
[22:40:38.963]    __FlashArg=0x00000000
[22:40:38.963]    __FlashOp=0x00000000
[22:40:38.963]    __Result=0x00000000
[22:40:38.963]  </debugvars>
[22:40:38.963]  
[22:40:38.963]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:40:38.963]    <block atomic="false" info="">
[22:40:38.963]      __var SW_DP_ABORT       = 0x0;
[22:40:38.963]        // -> [SW_DP_ABORT <= 0x00000000]
[22:40:38.964]      __var DP_CTRL_STAT      = 0x4;
[22:40:38.964]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:40:38.964]      __var DP_SELECT         = 0x8;
[22:40:38.964]        // -> [DP_SELECT <= 0x00000008]
[22:40:38.964]      __var powered_down      = 0;
[22:40:38.964]        // -> [powered_down <= 0x00000000]
[22:40:38.964]      WriteDP(DP_SELECT, 0x00000000);
[22:40:38.966]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:40:38.966]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:40:38.967]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:40:38.967]        // -> [powered_down <= 0x00000001]
[22:40:38.967]    </block>
[22:40:38.968]    <control if="powered_down" while="" timeout="0" info="">
[22:40:38.968]      // if-block "powered_down"
[22:40:38.968]        // =>  TRUE
[22:40:38.968]      <block atomic="false" info="">
[22:40:38.968]        Message(0, "Debug/System power-up request sent");
[22:40:38.972]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:40:38.974]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:40:38.974]      </block>
[22:40:38.974]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:40:38.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:40:38.976]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:40:38.976]        // while-condition  =>  FALSE
[22:40:38.976]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:40:38.977]      </control>
[22:40:38.977]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:40:38.977]        // if-block "(__protocol & 0xFFFF) == 1"
[22:40:38.977]          // =>  FALSE
[22:40:38.977]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:40:38.977]      </control>
[22:40:38.977]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:40:38.977]        // if-block "(__protocol & 0xFFFF) == 2"
[22:40:38.978]          // =>  TRUE
[22:40:38.978]        <block atomic="false" info="">
[22:40:38.978]          Message(0, "executing SWD power up");
[22:40:38.980]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:40:38.982]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:40:38.982]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:40:38.984]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:40:38.984]        </block>
[22:40:38.984]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:40:38.984]      </control>
[22:40:38.984]      // end if-block "powered_down"
[22:40:38.984]    </control>
[22:40:38.984]    <block atomic="false" info="">
[22:40:38.984]      __var DEBUG_PORT_VAL    = 0;
[22:40:38.984]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:40:38.984]      __var ACCESS_POINT_VAL  = 0;
[22:40:38.985]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:40:38.985]      __ap = 1; 
[22:40:38.985]        // -> [__ap <= 0x00000001]
[22:40:38.985]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:40:38.989]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:40:38.989]      __ap = 4;
[22:40:38.989]        // -> [__ap <= 0x00000004]
[22:40:38.989]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:40:38.992]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:40:38.992]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:40:38.992]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:40:38.995]    </block>
[22:40:38.996]    <block atomic="false" info="">
[22:40:38.996]      __var nReset = 0x80;
[22:40:38.996]        // -> [nReset <= 0x00000080]
[22:40:38.996]      __var canReadPins = 0;
[22:40:38.996]        // -> [canReadPins <= 0x00000000]
[22:40:38.997]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:40:38.999]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:40:38.999]        // -> [canReadPins <= 0x00000001]
[22:40:38.999]    </block>
[22:40:38.999]    <control if="" while="1" timeout="200" info="">
[22:40:38.999]      // while "1"  (timeout="200")
[22:40:38.999]      // while-condition  =>  TRUE
[22:40:38.999]      // while "1"  (timeout="200")
[22:40:38.999]      // while-condition  =>  TRUE
[22:40:38.999]      // while "1"  (timeout="200")
[22:40:38.999]      // while-condition  =>  TRUE
[22:40:38.999]      // while "1"  (timeout="200")
[22:40:39.001]      // while-condition  =>  TRUE
[22:40:39.001]      // while "1"  (timeout="200")
[22:40:39.001]      // while  =>  TIMEOUT
[22:40:39.001]      // end while "1"
[22:40:39.001]    </control>
[22:40:39.001]    <control if="canReadPins" while="" timeout="0" info="">
[22:40:39.001]      // if-block "canReadPins"
[22:40:39.001]        // =>  TRUE
[22:40:39.001]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:40:39.002]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:40:39.003]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:40:39.004]        // while-condition  =>  FALSE
[22:40:39.004]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:40:39.004]      </control>
[22:40:39.004]      // end if-block "canReadPins"
[22:40:39.004]    </control>
[22:40:39.004]    <control if="!canReadPins" while="" timeout="0" info="">
[22:40:39.004]      // if-block "!canReadPins"
[22:40:39.004]        // =>  FALSE
[22:40:39.005]      // skip if-block "!canReadPins"
[22:40:39.005]    </control>
[22:40:39.005]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:40:39.005]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:40:39.005]        // =>  TRUE
[22:40:39.005]      <block atomic="false" info="">
[22:40:39.005]        WriteAP(0x00, 0x190008);
[22:40:39.008]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:40:39.008]        WriteAP(0xF0, 0x01);
[22:40:39.012]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:40:39.012]      </block>
[22:40:39.012]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:40:39.012]    </control>
[22:40:39.012]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:40:39.012]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:40:39.012]        // =>  FALSE
[22:40:39.012]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:40:39.012]    </control>
[22:40:39.013]    <block atomic="false" info="">
[22:40:39.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:40:39.016]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:40:39.017]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:40:39.017]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:40:39.019]      __ap = 0; //lets make sure we reset the access point selection
[22:40:39.019]        // -> [__ap <= 0x00000000]
[22:40:39.020]    </block>
[22:40:39.020]  </sequence>
[22:40:39.020]  
[22:40:39.040]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:40:39.040]  
[22:40:39.040]  <debugvars>
[22:40:39.040]    // Pre-defined
[22:40:39.040]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:40:39.041]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:40:39.041]    __dp=0x00000000
[22:40:39.041]    __ap=0x00000000
[22:40:39.041]    __traceout=0x00000000      (Trace Disabled)
[22:40:39.041]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:40:39.041]    __FlashAddr=0x00000000
[22:40:39.041]    __FlashLen=0x00000000
[22:40:39.041]    __FlashArg=0x00000000
[22:40:39.041]    __FlashOp=0x00000000
[22:40:39.041]    __Result=0x00000000
[22:40:39.042]  </debugvars>
[22:40:39.042]  
[22:40:39.042]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:40:39.042]    <block atomic="false" info="">
[22:40:39.042]      __var deviceID = 0;
[22:40:39.042]        // -> [deviceID <= 0x00000000]
[22:40:39.044]      __var version = 0;
[22:40:39.044]        // -> [version <= 0x00000000]
[22:40:39.044]      __var partNum = 0;
[22:40:39.044]        // -> [partNum <= 0x00000000]
[22:40:39.044]      __var manuf = 0;
[22:40:39.044]        // -> [manuf <= 0x00000000]
[22:40:39.044]      __var isMSPM0G1X0X_G3X0X = 0;
[22:40:39.044]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:40:39.044]      __var isProduction = 0;
[22:40:39.044]        // -> [isProduction <= 0x00000000]
[22:40:39.044]      __var continueId = 0;
[22:40:39.044]        // -> [continueId <= 0x00000000]
[22:40:39.045]      deviceID =   Read32(0x41C40004);
[22:40:39.049]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:40:39.049]        // -> [deviceID <= 0x2BB8802F]
[22:40:39.049]      version = deviceID >> 28;
[22:40:39.050]        // -> [version <= 0x00000002]
[22:40:39.050]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:40:39.050]        // -> [partNum <= 0x0000BB88]
[22:40:39.050]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:40:39.051]        // -> [manuf <= 0x00000017]
[22:40:39.051]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:40:39.051]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:40:39.051]      isProduction = (version > 0);
[22:40:39.051]        // -> [isProduction <= 0x00000001]
[22:40:39.051]    </block>
[22:40:39.051]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:40:39.051]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:40:39.051]        // =>  FALSE
[22:40:39.051]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:40:39.052]    </control>
[22:40:39.052]    <control if="continueId == 4" while="" timeout="0" info="">
[22:40:39.052]      // if-block "continueId == 4"
[22:40:39.052]        // =>  FALSE
[22:40:39.052]      // skip if-block "continueId == 4"
[22:40:39.052]    </control>
[22:40:39.052]    <control if="!isProduction" while="" timeout="0" info="">
[22:40:39.052]      // if-block "!isProduction"
[22:40:39.053]        // =>  FALSE
[22:40:39.053]      // skip if-block "!isProduction"
[22:40:39.053]    </control>
[22:40:39.053]  </sequence>
[22:40:39.053]  
[22:46:09.564]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:46:09.564]  
[22:46:09.573]  <debugvars>
[22:46:09.573]    // Pre-defined
[22:46:09.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:09.573]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:09.573]    __dp=0x00000000
[22:46:09.573]    __ap=0x00000000
[22:46:09.573]    __traceout=0x00000000      (Trace Disabled)
[22:46:09.573]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:09.573]    __FlashAddr=0x00000000
[22:46:09.574]    __FlashLen=0x00000000
[22:46:09.574]    __FlashArg=0x00000000
[22:46:09.574]    __FlashOp=0x00000000
[22:46:09.574]    __Result=0x00000000
[22:46:09.574]  </debugvars>
[22:46:09.574]  
[22:46:09.574]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:46:09.574]    <block atomic="false" info="">
[22:46:09.574]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:46:09.574]        // -> [isSWJ <= 0x00000001]
[22:46:09.574]      __var hasDormant = __protocol & 0x00020000;
[22:46:09.574]        // -> [hasDormant <= 0x00000000]
[22:46:09.574]      __var protType   = __protocol & 0x0000FFFF;
[22:46:09.575]        // -> [protType <= 0x00000002]
[22:46:09.575]    </block>
[22:46:09.575]    <control if="protType == 1" while="" timeout="0" info="">
[22:46:09.575]      // if-block "protType == 1"
[22:46:09.575]        // =>  FALSE
[22:46:09.575]      // skip if-block "protType == 1"
[22:46:09.575]    </control>
[22:46:09.576]    <control if="protType == 2" while="" timeout="0" info="">
[22:46:09.576]      // if-block "protType == 2"
[22:46:09.576]        // =>  TRUE
[22:46:09.576]      <control if="isSWJ" while="" timeout="0" info="">
[22:46:09.576]        // if-block "isSWJ"
[22:46:09.576]          // =>  TRUE
[22:46:09.576]        <control if="hasDormant" while="" timeout="0" info="">
[22:46:09.576]          // if-block "hasDormant"
[22:46:09.576]            // =>  FALSE
[22:46:09.576]          // skip if-block "hasDormant"
[22:46:09.576]        </control>
[22:46:09.576]        <control if="!hasDormant" while="" timeout="0" info="">
[22:46:09.576]          // if-block "!hasDormant"
[22:46:09.577]            // =>  TRUE
[22:46:09.577]          <block atomic="false" info="">
[22:46:09.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:46:09.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:09.579]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:46:09.580]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:46:09.581]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:46:09.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:09.583]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:46:09.584]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:46:09.584]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:46:09.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:09.586]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:46:09.587]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:46:09.587]          </block>
[22:46:09.587]          // end if-block "!hasDormant"
[22:46:09.587]        </control>
[22:46:09.587]        // end if-block "isSWJ"
[22:46:09.587]      </control>
[22:46:09.587]      <control if="!isSWJ" while="" timeout="0" info="">
[22:46:09.587]        // if-block "!isSWJ"
[22:46:09.587]          // =>  FALSE
[22:46:09.587]        // skip if-block "!isSWJ"
[22:46:09.587]      </control>
[22:46:09.589]      <block atomic="false" info="">
[22:46:09.589]        ReadDP(0x0);
[22:46:09.590]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:46:09.590]      </block>
[22:46:09.590]      // end if-block "protType == 2"
[22:46:09.590]    </control>
[22:46:09.590]  </sequence>
[22:46:09.591]  
[22:46:09.595]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:46:09.595]  
[22:46:09.595]  <debugvars>
[22:46:09.595]    // Pre-defined
[22:46:09.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:09.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:09.595]    __dp=0x00000000
[22:46:09.595]    __ap=0x00000000
[22:46:09.596]    __traceout=0x00000000      (Trace Disabled)
[22:46:09.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:09.596]    __FlashAddr=0x00000000
[22:46:09.596]    __FlashLen=0x00000000
[22:46:09.596]    __FlashArg=0x00000000
[22:46:09.596]    __FlashOp=0x00000000
[22:46:09.596]    __Result=0x00000000
[22:46:09.596]  </debugvars>
[22:46:09.596]  
[22:46:09.596]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:46:09.596]    <block atomic="false" info="">
[22:46:09.596]      __var SW_DP_ABORT       = 0x0;
[22:46:09.596]        // -> [SW_DP_ABORT <= 0x00000000]
[22:46:09.596]      __var DP_CTRL_STAT      = 0x4;
[22:46:09.596]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:46:09.596]      __var DP_SELECT         = 0x8;
[22:46:09.596]        // -> [DP_SELECT <= 0x00000008]
[22:46:09.597]      __var powered_down      = 0;
[22:46:09.597]        // -> [powered_down <= 0x00000000]
[22:46:09.597]      WriteDP(DP_SELECT, 0x00000000);
[22:46:09.598]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:46:09.599]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:46:09.600]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:46:09.600]        // -> [powered_down <= 0x00000001]
[22:46:09.600]    </block>
[22:46:09.600]    <control if="powered_down" while="" timeout="0" info="">
[22:46:09.600]      // if-block "powered_down"
[22:46:09.600]        // =>  TRUE
[22:46:09.600]      <block atomic="false" info="">
[22:46:09.602]        Message(0, "Debug/System power-up request sent");
[22:46:09.602]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:46:09.603]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:46:09.604]      </block>
[22:46:09.604]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:46:09.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:09.605]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:46:09.605]        // while-condition  =>  FALSE
[22:46:09.605]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:46:09.605]      </control>
[22:46:09.605]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:46:09.605]        // if-block "(__protocol & 0xFFFF) == 1"
[22:46:09.605]          // =>  FALSE
[22:46:09.605]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:46:09.605]      </control>
[22:46:09.605]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:46:09.605]        // if-block "(__protocol & 0xFFFF) == 2"
[22:46:09.605]          // =>  TRUE
[22:46:09.605]        <block atomic="false" info="">
[22:46:09.606]          Message(0, "executing SWD power up");
[22:46:09.606]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:46:09.611]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:46:09.611]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:46:09.614]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:46:09.614]        </block>
[22:46:09.614]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:46:09.614]      </control>
[22:46:09.614]      // end if-block "powered_down"
[22:46:09.615]    </control>
[22:46:09.615]    <block atomic="false" info="">
[22:46:09.615]      __var DEBUG_PORT_VAL    = 0;
[22:46:09.615]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:46:09.615]      __var ACCESS_POINT_VAL  = 0;
[22:46:09.615]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:46:09.615]      __ap = 1; 
[22:46:09.615]        // -> [__ap <= 0x00000001]
[22:46:09.615]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:46:09.618]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:46:09.618]      __ap = 4;
[22:46:09.619]        // -> [__ap <= 0x00000004]
[22:46:09.619]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:46:09.625]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:46:09.625]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:46:09.625]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:46:09.625]    </block>
[22:46:09.625]    <block atomic="false" info="">
[22:46:09.625]      __var nReset = 0x80;
[22:46:09.625]        // -> [nReset <= 0x00000080]
[22:46:09.625]      __var canReadPins = 0;
[22:46:09.625]        // -> [canReadPins <= 0x00000000]
[22:46:09.626]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:46:09.628]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:46:09.628]        // -> [canReadPins <= 0x00000001]
[22:46:09.628]    </block>
[22:46:09.628]    <control if="" while="1" timeout="200" info="">
[22:46:09.628]      // while "1"  (timeout="200")
[22:46:09.628]      // while-condition  =>  TRUE
[22:46:09.628]      // while "1"  (timeout="200")
[22:46:09.629]      // while-condition  =>  TRUE
[22:46:09.629]      // while "1"  (timeout="200")
[22:46:09.629]      // while-condition  =>  TRUE
[22:46:09.629]      // while "1"  (timeout="200")
[22:46:09.629]      // while-condition  =>  TRUE
[22:46:09.629]      // while "1"  (timeout="200")
[22:46:09.629]      // while-condition  =>  TRUE
[22:46:09.629]      // while "1"  (timeout="200")
[22:46:09.629]      // while-condition  =>  TRUE
[22:46:09.629]      // while "1"  (timeout="200")
[22:46:09.629]      // while-condition  =>  TRUE
[22:46:09.630]      // while "1"  (timeout="200")
[22:46:09.630]      // while-condition  =>  TRUE
[22:46:09.630]      // while "1"  (timeout="200")
[22:46:09.630]      // while-condition  =>  TRUE
[22:46:09.630]      // while "1"  (timeout="200")
[22:46:09.630]      // while-condition  =>  TRUE
[22:46:09.630]      // while "1"  (timeout="200")
[22:46:09.630]      // while-condition  =>  TRUE
[22:46:09.630]      // while "1"  (timeout="200")
[22:46:09.630]      // while-condition  =>  TRUE
[22:46:09.630]      // while "1"  (timeout="200")
[22:46:09.631]      // while-condition  =>  TRUE
[22:46:09.631]      // while "1"  (timeout="200")
[22:46:09.631]      // while-condition  =>  TRUE
[22:46:09.631]      // while "1"  (timeout="200")
[22:46:09.631]      // while-condition  =>  TRUE
[22:46:09.631]      // while "1"  (timeout="200")
[22:46:09.631]      // while-condition  =>  TRUE
[22:46:09.631]      // while "1"  (timeout="200")
[22:46:09.631]      // while-condition  =>  TRUE
[22:46:09.631]      // while "1"  (timeout="200")
[22:46:09.631]      // while-condition  =>  TRUE
[22:46:09.632]      // while "1"  (timeout="200")
[22:46:09.632]      // while-condition  =>  TRUE
[22:46:09.632]      // while "1"  (timeout="200")
[22:46:09.632]      // while-condition  =>  TRUE
[22:46:09.632]      // while "1"  (timeout="200")
[22:46:09.632]      // while-condition  =>  TRUE
[22:46:09.632]      // while "1"  (timeout="200")
[22:46:09.633]      // while-condition  =>  TRUE
[22:46:09.633]      // while "1"  (timeout="200")
[22:46:09.633]      // while-condition  =>  TRUE
[22:46:09.633]      // while "1"  (timeout="200")
[22:46:09.633]      // while-condition  =>  TRUE
[22:46:09.633]      // while "1"  (timeout="200")
[22:46:09.633]      // while-condition  =>  TRUE
[22:46:09.633]      // while "1"  (timeout="200")
[22:46:09.633]      // while-condition  =>  TRUE
[22:46:09.633]      // while "1"  (timeout="200")
[22:46:09.633]      // while-condition  =>  TRUE
[22:46:09.633]      // while "1"  (timeout="200")
[22:46:09.634]      // while-condition  =>  TRUE
[22:46:09.634]      // while "1"  (timeout="200")
[22:46:09.634]      // while-condition  =>  TRUE
[22:46:09.634]      // while "1"  (timeout="200")
[22:46:09.634]      // while-condition  =>  TRUE
[22:46:09.634]      // while "1"  (timeout="200")
[22:46:09.634]      // while-condition  =>  TRUE
[22:46:09.634]      // while "1"  (timeout="200")
[22:46:09.634]      // while-condition  =>  TRUE
[22:46:09.634]      // while "1"  (timeout="200")
[22:46:09.634]      // while-condition  =>  TRUE
[22:46:09.634]      // while "1"  (timeout="200")
[22:46:09.635]      // while-condition  =>  TRUE
[22:46:09.635]      // while "1"  (timeout="200")
[22:46:09.635]      // while-condition  =>  TRUE
[22:46:09.635]      // while "1"  (timeout="200")
[22:46:09.635]      // while-condition  =>  TRUE
[22:46:09.635]      // while "1"  (timeout="200")
[22:46:09.635]      // while-condition  =>  TRUE
[22:46:09.635]      // while "1"  (timeout="200")
[22:46:09.636]      // while-condition  =>  TRUE
[22:46:09.636]      // while "1"  (timeout="200")
[22:46:09.636]      // while-condition  =>  TRUE
[22:46:09.636]      // while "1"  (timeout="200")
[22:46:09.636]      // while-condition  =>  TRUE
[22:46:09.636]      // while "1"  (timeout="200")
[22:46:09.636]      // while-condition  =>  TRUE
[22:46:09.636]      // while "1"  (timeout="200")
[22:46:09.636]      // while-condition  =>  TRUE
[22:46:09.637]      // while "1"  (timeout="200")
[22:46:09.637]      // while-condition  =>  TRUE
[22:46:09.637]      // while "1"  (timeout="200")
[22:46:09.637]      // while-condition  =>  TRUE
[22:46:09.637]      // while "1"  (timeout="200")
[22:46:09.637]      // while-condition  =>  TRUE
[22:46:09.637]      // while "1"  (timeout="200")
[22:46:09.637]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.638]      // while-condition  =>  TRUE
[22:46:09.638]      // while "1"  (timeout="200")
[22:46:09.639]      // while-condition  =>  TRUE
[22:46:09.639]      // while "1"  (timeout="200")
[22:46:09.639]      // while-condition  =>  TRUE
[22:46:09.639]      // while "1"  (timeout="200")
[22:46:09.639]      // while-condition  =>  TRUE
[22:46:09.639]      // while "1"  (timeout="200")
[22:46:09.639]      // while-condition  =>  TRUE
[22:46:09.639]      // while "1"  (timeout="200")
[22:46:09.639]      // while-condition  =>  TRUE
[22:46:09.639]      // while "1"  (timeout="200")
[22:46:09.639]      // while-condition  =>  TRUE
[22:46:09.639]      // while "1"  (timeout="200")
[22:46:09.641]      // while-condition  =>  TRUE
[22:46:09.641]      // while "1"  (timeout="200")
[22:46:09.641]      // while-condition  =>  TRUE
[22:46:09.641]      // while "1"  (timeout="200")
[22:46:09.641]      // while-condition  =>  TRUE
[22:46:09.641]      // while "1"  (timeout="200")
[22:46:09.641]      // while-condition  =>  TRUE
[22:46:09.641]      // while "1"  (timeout="200")
[22:46:09.641]      // while-condition  =>  TRUE
[22:46:09.641]      // while "1"  (timeout="200")
[22:46:09.642]      // while-condition  =>  TRUE
[22:46:09.642]      // while "1"  (timeout="200")
[22:46:09.642]      // while  =>  TIMEOUT
[22:46:09.642]      // end while "1"
[22:46:09.642]    </control>
[22:46:09.642]    <control if="canReadPins" while="" timeout="0" info="">
[22:46:09.642]      // if-block "canReadPins"
[22:46:09.642]        // =>  TRUE
[22:46:09.642]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:46:09.642]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:46:09.643]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:46:09.643]        // while-condition  =>  FALSE
[22:46:09.644]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:46:09.644]      </control>
[22:46:09.644]      // end if-block "canReadPins"
[22:46:09.644]    </control>
[22:46:09.644]    <control if="!canReadPins" while="" timeout="0" info="">
[22:46:09.644]      // if-block "!canReadPins"
[22:46:09.644]        // =>  FALSE
[22:46:09.644]      // skip if-block "!canReadPins"
[22:46:09.644]    </control>
[22:46:09.644]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:46:09.645]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:46:09.645]        // =>  TRUE
[22:46:09.645]      <block atomic="false" info="">
[22:46:09.645]        WriteAP(0x00, 0x190008);
[22:46:09.647]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:46:09.647]        WriteAP(0xF0, 0x01);
[22:46:09.660]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:46:09.660]      </block>
[22:46:09.660]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:46:09.661]    </control>
[22:46:09.661]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:46:09.661]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:46:09.661]        // =>  FALSE
[22:46:09.661]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:46:09.661]    </control>
[22:46:09.661]    <block atomic="false" info="">
[22:46:09.661]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:46:09.665]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:46:09.665]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:46:09.665]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:46:09.665]      __ap = 0; //lets make sure we reset the access point selection
[22:46:09.665]        // -> [__ap <= 0x00000000]
[22:46:09.666]    </block>
[22:46:09.666]  </sequence>
[22:46:09.666]  
[22:46:09.688]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:46:09.688]  
[22:46:09.688]  <debugvars>
[22:46:09.688]    // Pre-defined
[22:46:09.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:09.688]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:09.689]    __dp=0x00000000
[22:46:09.689]    __ap=0x00000000
[22:46:09.689]    __traceout=0x00000000      (Trace Disabled)
[22:46:09.689]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:09.689]    __FlashAddr=0x00000000
[22:46:09.689]    __FlashLen=0x00000000
[22:46:09.689]    __FlashArg=0x00000000
[22:46:09.690]    __FlashOp=0x00000000
[22:46:09.690]    __Result=0x00000000
[22:46:09.690]  </debugvars>
[22:46:09.690]  
[22:46:09.690]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:46:09.690]    <block atomic="false" info="">
[22:46:09.691]      __var deviceID = 0;
[22:46:09.691]        // -> [deviceID <= 0x00000000]
[22:46:09.691]      __var version = 0;
[22:46:09.691]        // -> [version <= 0x00000000]
[22:46:09.691]      __var partNum = 0;
[22:46:09.691]        // -> [partNum <= 0x00000000]
[22:46:09.692]      __var manuf = 0;
[22:46:09.692]        // -> [manuf <= 0x00000000]
[22:46:09.692]      __var isMSPM0G1X0X_G3X0X = 0;
[22:46:09.692]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:46:09.692]      __var isProduction = 0;
[22:46:09.692]        // -> [isProduction <= 0x00000000]
[22:46:09.692]      __var continueId = 0;
[22:46:09.693]        // -> [continueId <= 0x00000000]
[22:46:09.693]      deviceID =   Read32(0x41C40004);
[22:46:09.699]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:46:09.699]        // -> [deviceID <= 0x2BB8802F]
[22:46:09.699]      version = deviceID >> 28;
[22:46:09.699]        // -> [version <= 0x00000002]
[22:46:09.699]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:46:09.699]        // -> [partNum <= 0x0000BB88]
[22:46:09.699]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:46:09.699]        // -> [manuf <= 0x00000017]
[22:46:09.699]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:46:09.699]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:46:09.700]      isProduction = (version > 0);
[22:46:09.700]        // -> [isProduction <= 0x00000001]
[22:46:09.700]    </block>
[22:46:09.700]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:46:09.700]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:46:09.700]        // =>  FALSE
[22:46:09.700]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:46:09.700]    </control>
[22:46:09.700]    <control if="continueId == 4" while="" timeout="0" info="">
[22:46:09.702]      // if-block "continueId == 4"
[22:46:09.702]        // =>  FALSE
[22:46:09.702]      // skip if-block "continueId == 4"
[22:46:09.702]    </control>
[22:46:09.702]    <control if="!isProduction" while="" timeout="0" info="">
[22:46:09.702]      // if-block "!isProduction"
[22:46:09.702]        // =>  FALSE
[22:46:09.702]      // skip if-block "!isProduction"
[22:46:09.702]    </control>
[22:46:09.702]  </sequence>
[22:46:09.702]  
[22:53:26.895]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:53:26.895]  
[22:53:26.895]  <debugvars>
[22:53:26.895]    // Pre-defined
[22:53:26.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:53:26.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:53:26.896]    __dp=0x00000000
[22:53:26.896]    __ap=0x00000000
[22:53:26.896]    __traceout=0x00000000      (Trace Disabled)
[22:53:26.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:53:26.896]    __FlashAddr=0x00000000
[22:53:26.897]    __FlashLen=0x00000000
[22:53:26.897]    __FlashArg=0x00000000
[22:53:26.897]    __FlashOp=0x00000000
[22:53:26.897]    __Result=0x00000000
[22:53:26.897]  </debugvars>
[22:53:26.897]  
[22:53:26.897]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:53:26.897]    <block atomic="false" info="">
[22:53:26.897]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:53:26.897]        // -> [isSWJ <= 0x00000001]
[22:53:26.897]      __var hasDormant = __protocol & 0x00020000;
[22:53:26.897]        // -> [hasDormant <= 0x00000000]
[22:53:26.898]      __var protType   = __protocol & 0x0000FFFF;
[22:53:26.898]        // -> [protType <= 0x00000002]
[22:53:26.898]    </block>
[22:53:26.898]    <control if="protType == 1" while="" timeout="0" info="">
[22:53:26.898]      // if-block "protType == 1"
[22:53:26.898]        // =>  FALSE
[22:53:26.898]      // skip if-block "protType == 1"
[22:53:26.898]    </control>
[22:53:26.898]    <control if="protType == 2" while="" timeout="0" info="">
[22:53:26.898]      // if-block "protType == 2"
[22:53:26.898]        // =>  TRUE
[22:53:26.898]      <control if="isSWJ" while="" timeout="0" info="">
[22:53:26.899]        // if-block "isSWJ"
[22:53:26.899]          // =>  TRUE
[22:53:26.899]        <control if="hasDormant" while="" timeout="0" info="">
[22:53:26.899]          // if-block "hasDormant"
[22:53:26.899]            // =>  FALSE
[22:53:26.899]          // skip if-block "hasDormant"
[22:53:26.899]        </control>
[22:53:26.899]        <control if="!hasDormant" while="" timeout="0" info="">
[22:53:26.899]          // if-block "!hasDormant"
[22:53:26.900]            // =>  TRUE
[22:53:26.900]          <block atomic="false" info="">
[22:53:26.900]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:53:26.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:53:26.903]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:53:26.905]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:53:26.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:53:26.907]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:53:26.907]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:53:26.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:53:26.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:53:26.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:53:26.912]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:53:26.914]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:53:26.915]          </block>
[22:53:26.915]          // end if-block "!hasDormant"
[22:53:26.915]        </control>
[22:53:26.915]        // end if-block "isSWJ"
[22:53:26.915]      </control>
[22:53:26.915]      <control if="!isSWJ" while="" timeout="0" info="">
[22:53:26.915]        // if-block "!isSWJ"
[22:53:26.915]          // =>  FALSE
[22:53:26.915]        // skip if-block "!isSWJ"
[22:53:26.915]      </control>
[22:53:26.915]      <block atomic="false" info="">
[22:53:26.915]        ReadDP(0x0);
[22:53:26.916]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:53:26.916]      </block>
[22:53:26.918]      // end if-block "protType == 2"
[22:53:26.918]    </control>
[22:53:26.918]  </sequence>
[22:53:26.918]  
[22:53:26.920]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:53:26.920]  
[22:53:26.920]  <debugvars>
[22:53:26.920]    // Pre-defined
[22:53:26.920]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:53:26.920]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:53:26.920]    __dp=0x00000000
[22:53:26.920]    __ap=0x00000000
[22:53:26.920]    __traceout=0x00000000      (Trace Disabled)
[22:53:26.921]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:53:26.921]    __FlashAddr=0x00000000
[22:53:26.921]    __FlashLen=0x00000000
[22:53:26.921]    __FlashArg=0x00000000
[22:53:26.921]    __FlashOp=0x00000000
[22:53:26.921]    __Result=0x00000000
[22:53:26.921]  </debugvars>
[22:53:26.921]  
[22:53:26.921]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:53:26.921]    <block atomic="false" info="">
[22:53:26.921]      __var SW_DP_ABORT       = 0x0;
[22:53:26.921]        // -> [SW_DP_ABORT <= 0x00000000]
[22:53:26.922]      __var DP_CTRL_STAT      = 0x4;
[22:53:26.922]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:53:26.922]      __var DP_SELECT         = 0x8;
[22:53:26.922]        // -> [DP_SELECT <= 0x00000008]
[22:53:26.922]      __var powered_down      = 0;
[22:53:26.922]        // -> [powered_down <= 0x00000000]
[22:53:26.922]      WriteDP(DP_SELECT, 0x00000000);
[22:53:26.924]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:53:26.924]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:53:26.926]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:53:26.926]        // -> [powered_down <= 0x00000001]
[22:53:26.926]    </block>
[22:53:26.926]    <control if="powered_down" while="" timeout="0" info="">
[22:53:26.926]      // if-block "powered_down"
[22:53:26.926]        // =>  TRUE
[22:53:26.926]      <block atomic="false" info="">
[22:53:26.926]        Message(0, "Debug/System power-up request sent");
[22:53:26.927]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:53:26.928]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:53:26.928]      </block>
[22:53:26.929]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:53:26.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:53:26.930]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:53:26.930]        // while-condition  =>  FALSE
[22:53:26.931]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:53:26.931]      </control>
[22:53:26.931]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:53:26.931]        // if-block "(__protocol & 0xFFFF) == 1"
[22:53:26.931]          // =>  FALSE
[22:53:26.931]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:53:26.931]      </control>
[22:53:26.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:53:26.931]        // if-block "(__protocol & 0xFFFF) == 2"
[22:53:26.932]          // =>  TRUE
[22:53:26.932]        <block atomic="false" info="">
[22:53:26.932]          Message(0, "executing SWD power up");
[22:53:26.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:53:26.934]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:53:26.934]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:53:26.935]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:53:26.935]        </block>
[22:53:26.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:53:26.936]      </control>
[22:53:26.936]      // end if-block "powered_down"
[22:53:26.936]    </control>
[22:53:26.936]    <block atomic="false" info="">
[22:53:26.936]      __var DEBUG_PORT_VAL    = 0;
[22:53:26.936]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:53:26.936]      __var ACCESS_POINT_VAL  = 0;
[22:53:26.937]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:53:26.937]      __ap = 1; 
[22:53:26.937]        // -> [__ap <= 0x00000001]
[22:53:26.937]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:53:26.940]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:53:26.940]      __ap = 4;
[22:53:26.940]        // -> [__ap <= 0x00000004]
[22:53:26.940]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:53:26.943]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:53:26.943]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:53:26.943]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:53:26.945]    </block>
[22:53:26.945]    <block atomic="false" info="">
[22:53:26.945]      __var nReset = 0x80;
[22:53:26.945]        // -> [nReset <= 0x00000080]
[22:53:26.945]      __var canReadPins = 0;
[22:53:26.945]        // -> [canReadPins <= 0x00000000]
[22:53:26.945]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:53:26.947]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:53:26.947]        // -> [canReadPins <= 0x00000001]
[22:53:26.947]    </block>
[22:53:26.947]    <control if="" while="1" timeout="200" info="">
[22:53:26.947]      // while "1"  (timeout="200")
[22:53:26.948]      // while-condition  =>  TRUE
[22:53:26.948]      // while "1"  (timeout="200")
[22:53:26.948]      // while-condition  =>  TRUE
[22:53:26.948]      // while "1"  (timeout="200")
[22:53:26.948]      // while-condition  =>  TRUE
[22:53:26.948]      // while "1"  (timeout="200")
[22:53:26.948]      // while-condition  =>  TRUE
[22:53:26.948]      // while "1"  (timeout="200")
[22:53:26.948]      // while-condition  =>  TRUE
[22:53:26.948]      // while "1"  (timeout="200")
[22:53:26.949]      // while-condition  =>  TRUE
[22:53:26.949]      // while "1"  (timeout="200")
[22:53:26.949]      // while-condition  =>  TRUE
[22:53:26.949]      // while "1"  (timeout="200")
[22:53:26.949]      // while-condition  =>  TRUE
[22:53:26.949]      // while "1"  (timeout="200")
[22:53:26.949]      // while-condition  =>  TRUE
[22:53:26.949]      // while "1"  (timeout="200")
[22:53:26.949]      // while-condition  =>  TRUE
[22:53:26.949]      // while "1"  (timeout="200")
[22:53:26.949]      // while-condition  =>  TRUE
[22:53:26.950]      // while "1"  (timeout="200")
[22:53:26.950]      // while-condition  =>  TRUE
[22:53:26.950]      // while "1"  (timeout="200")
[22:53:26.950]      // while-condition  =>  TRUE
[22:53:26.950]      // while "1"  (timeout="200")
[22:53:26.950]      // while-condition  =>  TRUE
[22:53:26.950]      // while "1"  (timeout="200")
[22:53:26.950]      // while-condition  =>  TRUE
[22:53:26.950]      // while "1"  (timeout="200")
[22:53:26.950]      // while-condition  =>  TRUE
[22:53:26.950]      // while "1"  (timeout="200")
[22:53:26.951]      // while-condition  =>  TRUE
[22:53:26.951]      // while "1"  (timeout="200")
[22:53:26.951]      // while-condition  =>  TRUE
[22:53:26.951]      // while "1"  (timeout="200")
[22:53:26.951]      // while-condition  =>  TRUE
[22:53:26.951]      // while "1"  (timeout="200")
[22:53:26.951]      // while-condition  =>  TRUE
[22:53:26.951]      // while "1"  (timeout="200")
[22:53:26.951]      // while-condition  =>  TRUE
[22:53:26.951]      // while "1"  (timeout="200")
[22:53:26.951]      // while-condition  =>  TRUE
[22:53:26.951]      // while "1"  (timeout="200")
[22:53:26.952]      // while-condition  =>  TRUE
[22:53:26.952]      // while "1"  (timeout="200")
[22:53:26.952]      // while-condition  =>  TRUE
[22:53:26.952]      // while "1"  (timeout="200")
[22:53:26.952]      // while-condition  =>  TRUE
[22:53:26.952]      // while "1"  (timeout="200")
[22:53:26.952]      // while-condition  =>  TRUE
[22:53:26.952]      // while "1"  (timeout="200")
[22:53:26.952]      // while-condition  =>  TRUE
[22:53:26.952]      // while "1"  (timeout="200")
[22:53:26.953]      // while-condition  =>  TRUE
[22:53:26.953]      // while "1"  (timeout="200")
[22:53:26.953]      // while-condition  =>  TRUE
[22:53:26.953]      // while "1"  (timeout="200")
[22:53:26.953]      // while-condition  =>  TRUE
[22:53:26.953]      // while "1"  (timeout="200")
[22:53:26.953]      // while-condition  =>  TRUE
[22:53:26.953]      // while "1"  (timeout="200")
[22:53:26.953]      // while-condition  =>  TRUE
[22:53:26.953]      // while "1"  (timeout="200")
[22:53:26.953]      // while-condition  =>  TRUE
[22:53:26.954]      // while "1"  (timeout="200")
[22:53:26.954]      // while-condition  =>  TRUE
[22:53:26.954]      // while "1"  (timeout="200")
[22:53:26.954]      // while-condition  =>  TRUE
[22:53:26.954]      // while "1"  (timeout="200")
[22:53:26.954]      // while-condition  =>  TRUE
[22:53:26.954]      // while "1"  (timeout="200")
[22:53:26.954]      // while-condition  =>  TRUE
[22:53:26.954]      // while "1"  (timeout="200")
[22:53:26.954]      // while-condition  =>  TRUE
[22:53:26.954]      // while "1"  (timeout="200")
[22:53:26.955]      // while-condition  =>  TRUE
[22:53:26.955]      // while "1"  (timeout="200")
[22:53:26.955]      // while  =>  TIMEOUT
[22:53:26.955]      // end while "1"
[22:53:26.955]    </control>
[22:53:26.955]    <control if="canReadPins" while="" timeout="0" info="">
[22:53:26.955]      // if-block "canReadPins"
[22:53:26.955]        // =>  TRUE
[22:53:26.955]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:53:26.955]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:53:26.957]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:53:26.957]        // while-condition  =>  FALSE
[22:53:26.957]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:53:26.957]      </control>
[22:53:26.957]      // end if-block "canReadPins"
[22:53:26.957]    </control>
[22:53:26.957]    <control if="!canReadPins" while="" timeout="0" info="">
[22:53:26.957]      // if-block "!canReadPins"
[22:53:26.958]        // =>  FALSE
[22:53:26.958]      // skip if-block "!canReadPins"
[22:53:26.958]    </control>
[22:53:26.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:53:26.958]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:53:26.958]        // =>  TRUE
[22:53:26.958]      <block atomic="false" info="">
[22:53:26.958]        WriteAP(0x00, 0x190008);
[22:53:26.962]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:53:26.962]        WriteAP(0xF0, 0x01);
[22:53:26.970]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:53:26.970]      </block>
[22:53:26.970]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:53:26.970]    </control>
[22:53:26.970]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:53:26.970]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:53:26.970]        // =>  FALSE
[22:53:26.970]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:53:26.970]    </control>
[22:53:26.970]    <block atomic="false" info="">
[22:53:26.970]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:53:26.974]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:53:26.975]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:53:26.975]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:53:26.975]      __ap = 0; //lets make sure we reset the access point selection
[22:53:26.975]        // -> [__ap <= 0x00000000]
[22:53:26.976]    </block>
[22:53:26.976]  </sequence>
[22:53:26.976]  
[22:53:26.996]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:53:26.996]  
[22:53:26.996]  <debugvars>
[22:53:26.997]    // Pre-defined
[22:53:26.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:53:26.997]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:53:26.997]    __dp=0x00000000
[22:53:26.997]    __ap=0x00000000
[22:53:26.997]    __traceout=0x00000000      (Trace Disabled)
[22:53:26.997]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:53:26.997]    __FlashAddr=0x00000000
[22:53:26.997]    __FlashLen=0x00000000
[22:53:26.998]    __FlashArg=0x00000000
[22:53:26.998]    __FlashOp=0x00000000
[22:53:26.998]    __Result=0x00000000
[22:53:26.998]  </debugvars>
[22:53:26.998]  
[22:53:26.998]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:53:26.998]    <block atomic="false" info="">
[22:53:26.998]      __var deviceID = 0;
[22:53:26.998]        // -> [deviceID <= 0x00000000]
[22:53:26.998]      __var version = 0;
[22:53:26.998]        // -> [version <= 0x00000000]
[22:53:26.998]      __var partNum = 0;
[22:53:26.998]        // -> [partNum <= 0x00000000]
[22:53:26.998]      __var manuf = 0;
[22:53:26.998]        // -> [manuf <= 0x00000000]
[22:53:26.998]      __var isMSPM0G1X0X_G3X0X = 0;
[22:53:26.998]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:53:26.998]      __var isProduction = 0;
[22:53:26.998]        // -> [isProduction <= 0x00000000]
[22:53:27.000]      __var continueId = 0;
[22:53:27.000]        // -> [continueId <= 0x00000000]
[22:53:27.000]      deviceID =   Read32(0x41C40004);
[22:53:27.009]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:53:27.009]        // -> [deviceID <= 0x2BB8802F]
[22:53:27.009]      version = deviceID >> 28;
[22:53:27.009]        // -> [version <= 0x00000002]
[22:53:27.009]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:53:27.009]        // -> [partNum <= 0x0000BB88]
[22:53:27.009]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:53:27.010]        // -> [manuf <= 0x00000017]
[22:53:27.010]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:53:27.010]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:53:27.010]      isProduction = (version > 0);
[22:53:27.010]        // -> [isProduction <= 0x00000001]
[22:53:27.010]    </block>
[22:53:27.010]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:53:27.010]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:53:27.010]        // =>  FALSE
[22:53:27.010]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:53:27.010]    </control>
[22:53:27.011]    <control if="continueId == 4" while="" timeout="0" info="">
[22:53:27.011]      // if-block "continueId == 4"
[22:53:27.011]        // =>  FALSE
[22:53:27.011]      // skip if-block "continueId == 4"
[22:53:27.011]    </control>
[22:53:27.011]    <control if="!isProduction" while="" timeout="0" info="">
[22:53:27.011]      // if-block "!isProduction"
[22:53:27.012]        // =>  FALSE
[22:53:27.012]      // skip if-block "!isProduction"
[22:53:27.012]    </control>
[22:53:27.012]  </sequence>
[22:53:27.012]  
[23:00:18.252]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:00:18.252]  
[23:00:18.261]  <debugvars>
[23:00:18.261]    // Pre-defined
[23:00:18.261]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:18.261]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:18.261]    __dp=0x00000000
[23:00:18.262]    __ap=0x00000000
[23:00:18.262]    __traceout=0x00000000      (Trace Disabled)
[23:00:18.262]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:18.262]    __FlashAddr=0x00000000
[23:00:18.262]    __FlashLen=0x00000000
[23:00:18.262]    __FlashArg=0x00000000
[23:00:18.262]    __FlashOp=0x00000000
[23:00:18.262]    __Result=0x00000000
[23:00:18.262]  </debugvars>
[23:00:18.263]  
[23:00:18.263]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:00:18.263]    <block atomic="false" info="">
[23:00:18.263]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:00:18.263]        // -> [isSWJ <= 0x00000001]
[23:00:18.263]      __var hasDormant = __protocol & 0x00020000;
[23:00:18.263]        // -> [hasDormant <= 0x00000000]
[23:00:18.263]      __var protType   = __protocol & 0x0000FFFF;
[23:00:18.263]        // -> [protType <= 0x00000002]
[23:00:18.264]    </block>
[23:00:18.264]    <control if="protType == 1" while="" timeout="0" info="">
[23:00:18.264]      // if-block "protType == 1"
[23:00:18.264]        // =>  FALSE
[23:00:18.264]      // skip if-block "protType == 1"
[23:00:18.264]    </control>
[23:00:18.265]    <control if="protType == 2" while="" timeout="0" info="">
[23:00:18.265]      // if-block "protType == 2"
[23:00:18.265]        // =>  TRUE
[23:00:18.265]      <control if="isSWJ" while="" timeout="0" info="">
[23:00:18.265]        // if-block "isSWJ"
[23:00:18.265]          // =>  TRUE
[23:00:18.265]        <control if="hasDormant" while="" timeout="0" info="">
[23:00:18.265]          // if-block "hasDormant"
[23:00:18.265]            // =>  FALSE
[23:00:18.265]          // skip if-block "hasDormant"
[23:00:18.265]        </control>
[23:00:18.265]        <control if="!hasDormant" while="" timeout="0" info="">
[23:00:18.266]          // if-block "!hasDormant"
[23:00:18.266]            // =>  TRUE
[23:00:18.266]          <block atomic="false" info="">
[23:00:18.266]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:00:18.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:18.268]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:00:18.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:00:18.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:00:18.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:18.271]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:00:18.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:00:18.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:00:18.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:18.274]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:00:18.276]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:00:18.276]          </block>
[23:00:18.276]          // end if-block "!hasDormant"
[23:00:18.276]        </control>
[23:00:18.276]        // end if-block "isSWJ"
[23:00:18.277]      </control>
[23:00:18.277]      <control if="!isSWJ" while="" timeout="0" info="">
[23:00:18.277]        // if-block "!isSWJ"
[23:00:18.277]          // =>  FALSE
[23:00:18.277]        // skip if-block "!isSWJ"
[23:00:18.277]      </control>
[23:00:18.277]      <block atomic="false" info="">
[23:00:18.277]        ReadDP(0x0);
[23:00:18.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:00:18.279]      </block>
[23:00:18.279]      // end if-block "protType == 2"
[23:00:18.279]    </control>
[23:00:18.279]  </sequence>
[23:00:18.279]  
[23:00:18.283]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:00:18.283]  
[23:00:18.283]  <debugvars>
[23:00:18.283]    // Pre-defined
[23:00:18.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:18.283]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:18.283]    __dp=0x00000000
[23:00:18.284]    __ap=0x00000000
[23:00:18.284]    __traceout=0x00000000      (Trace Disabled)
[23:00:18.284]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:18.284]    __FlashAddr=0x00000000
[23:00:18.284]    __FlashLen=0x00000000
[23:00:18.284]    __FlashArg=0x00000000
[23:00:18.284]    __FlashOp=0x00000000
[23:00:18.284]    __Result=0x00000000
[23:00:18.284]  </debugvars>
[23:00:18.284]  
[23:00:18.284]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:00:18.285]    <block atomic="false" info="">
[23:00:18.285]      __var SW_DP_ABORT       = 0x0;
[23:00:18.285]        // -> [SW_DP_ABORT <= 0x00000000]
[23:00:18.285]      __var DP_CTRL_STAT      = 0x4;
[23:00:18.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:00:18.285]      __var DP_SELECT         = 0x8;
[23:00:18.285]        // -> [DP_SELECT <= 0x00000008]
[23:00:18.285]      __var powered_down      = 0;
[23:00:18.285]        // -> [powered_down <= 0x00000000]
[23:00:18.285]      WriteDP(DP_SELECT, 0x00000000);
[23:00:18.288]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:00:18.288]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:00:18.289]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:00:18.289]        // -> [powered_down <= 0x00000001]
[23:00:18.289]    </block>
[23:00:18.290]    <control if="powered_down" while="" timeout="0" info="">
[23:00:18.290]      // if-block "powered_down"
[23:00:18.290]        // =>  TRUE
[23:00:18.290]      <block atomic="false" info="">
[23:00:18.290]        Message(0, "Debug/System power-up request sent");
[23:00:18.290]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:00:18.292]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:00:18.292]      </block>
[23:00:18.292]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:00:18.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:00:18.294]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:00:18.294]        // while-condition  =>  FALSE
[23:00:18.295]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:00:18.295]      </control>
[23:00:18.295]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:00:18.295]        // if-block "(__protocol & 0xFFFF) == 1"
[23:00:18.295]          // =>  FALSE
[23:00:18.295]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:00:18.295]      </control>
[23:00:18.295]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:00:18.295]        // if-block "(__protocol & 0xFFFF) == 2"
[23:00:18.295]          // =>  TRUE
[23:00:18.295]        <block atomic="false" info="">
[23:00:18.296]          Message(0, "executing SWD power up");
[23:00:18.296]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:00:18.298]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:00:18.298]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:00:18.301]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:00:18.301]        </block>
[23:00:18.301]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:00:18.301]      </control>
[23:00:18.301]      // end if-block "powered_down"
[23:00:18.301]    </control>
[23:00:18.301]    <block atomic="false" info="">
[23:00:18.302]      __var DEBUG_PORT_VAL    = 0;
[23:00:18.302]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:00:18.302]      __var ACCESS_POINT_VAL  = 0;
[23:00:18.302]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:00:18.302]      __ap = 1; 
[23:00:18.302]        // -> [__ap <= 0x00000001]
[23:00:18.302]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:00:18.305]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:00:18.306]      __ap = 4;
[23:00:18.306]        // -> [__ap <= 0x00000004]
[23:00:18.306]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:18.316]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:00:18.316]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:00:18.316]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:18.316]    </block>
[23:00:18.318]    <block atomic="false" info="">
[23:00:18.318]      __var nReset = 0x80;
[23:00:18.318]        // -> [nReset <= 0x00000080]
[23:00:18.318]      __var canReadPins = 0;
[23:00:18.318]        // -> [canReadPins <= 0x00000000]
[23:00:18.318]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:00:18.319]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:00:18.319]        // -> [canReadPins <= 0x00000001]
[23:00:18.320]    </block>
[23:00:18.320]    <control if="" while="1" timeout="200" info="">
[23:00:18.320]      // while "1"  (timeout="200")
[23:00:18.320]      // while-condition  =>  TRUE
[23:00:18.320]      // while "1"  (timeout="200")
[23:00:18.320]      // while-condition  =>  TRUE
[23:00:18.320]      // while "1"  (timeout="200")
[23:00:18.320]      // while-condition  =>  TRUE
[23:00:18.322]      // while "1"  (timeout="200")
[23:00:18.322]      // while-condition  =>  TRUE
[23:00:18.322]      // while "1"  (timeout="200")
[23:00:18.322]      // while-condition  =>  TRUE
[23:00:18.322]      // while "1"  (timeout="200")
[23:00:18.322]      // while-condition  =>  TRUE
[23:00:18.322]      // while "1"  (timeout="200")
[23:00:18.322]      // while-condition  =>  TRUE
[23:00:18.322]      // while "1"  (timeout="200")
[23:00:18.322]      // while-condition  =>  TRUE
[23:00:18.322]      // while "1"  (timeout="200")
[23:00:18.322]      // while-condition  =>  TRUE
[23:00:18.323]      // while "1"  (timeout="200")
[23:00:18.323]      // while-condition  =>  TRUE
[23:00:18.323]      // while "1"  (timeout="200")
[23:00:18.323]      // while-condition  =>  TRUE
[23:00:18.323]      // while "1"  (timeout="200")
[23:00:18.323]      // while-condition  =>  TRUE
[23:00:18.323]      // while "1"  (timeout="200")
[23:00:18.323]      // while-condition  =>  TRUE
[23:00:18.323]      // while "1"  (timeout="200")
[23:00:18.324]      // while-condition  =>  TRUE
[23:00:18.324]      // while "1"  (timeout="200")
[23:00:18.324]      // while-condition  =>  TRUE
[23:00:18.324]      // while "1"  (timeout="200")
[23:00:18.324]      // while-condition  =>  TRUE
[23:00:18.324]      // while "1"  (timeout="200")
[23:00:18.324]      // while-condition  =>  TRUE
[23:00:18.324]      // while "1"  (timeout="200")
[23:00:18.324]      // while-condition  =>  TRUE
[23:00:18.324]      // while "1"  (timeout="200")
[23:00:18.325]      // while-condition  =>  TRUE
[23:00:18.325]      // while "1"  (timeout="200")
[23:00:18.325]      // while-condition  =>  TRUE
[23:00:18.325]      // while "1"  (timeout="200")
[23:00:18.325]      // while-condition  =>  TRUE
[23:00:18.325]      // while "1"  (timeout="200")
[23:00:18.325]      // while-condition  =>  TRUE
[23:00:18.325]      // while "1"  (timeout="200")
[23:00:18.325]      // while-condition  =>  TRUE
[23:00:18.325]      // while "1"  (timeout="200")
[23:00:18.325]      // while-condition  =>  TRUE
[23:00:18.326]      // while "1"  (timeout="200")
[23:00:18.326]      // while-condition  =>  TRUE
[23:00:18.326]      // while "1"  (timeout="200")
[23:00:18.326]      // while-condition  =>  TRUE
[23:00:18.326]      // while "1"  (timeout="200")
[23:00:18.326]      // while-condition  =>  TRUE
[23:00:18.326]      // while "1"  (timeout="200")
[23:00:18.326]      // while-condition  =>  TRUE
[23:00:18.326]      // while "1"  (timeout="200")
[23:00:18.326]      // while-condition  =>  TRUE
[23:00:18.326]      // while "1"  (timeout="200")
[23:00:18.326]      // while-condition  =>  TRUE
[23:00:18.327]      // while "1"  (timeout="200")
[23:00:18.327]      // while-condition  =>  TRUE
[23:00:18.327]      // while "1"  (timeout="200")
[23:00:18.327]      // while-condition  =>  TRUE
[23:00:18.327]      // while "1"  (timeout="200")
[23:00:18.327]      // while-condition  =>  TRUE
[23:00:18.327]      // while "1"  (timeout="200")
[23:00:18.327]      // while-condition  =>  TRUE
[23:00:18.328]      // while "1"  (timeout="200")
[23:00:18.328]      // while-condition  =>  TRUE
[23:00:18.328]      // while "1"  (timeout="200")
[23:00:18.328]      // while-condition  =>  TRUE
[23:00:18.328]      // while "1"  (timeout="200")
[23:00:18.328]      // while-condition  =>  TRUE
[23:00:18.328]      // while "1"  (timeout="200")
[23:00:18.328]      // while-condition  =>  TRUE
[23:00:18.328]      // while "1"  (timeout="200")
[23:00:18.328]      // while-condition  =>  TRUE
[23:00:18.328]      // while "1"  (timeout="200")
[23:00:18.328]      // while-condition  =>  TRUE
[23:00:18.329]      // while "1"  (timeout="200")
[23:00:18.329]      // while-condition  =>  TRUE
[23:00:18.329]      // while "1"  (timeout="200")
[23:00:18.329]      // while  =>  TIMEOUT
[23:00:18.329]      // end while "1"
[23:00:18.329]    </control>
[23:00:18.329]    <control if="canReadPins" while="" timeout="0" info="">
[23:00:18.329]      // if-block "canReadPins"
[23:00:18.329]        // =>  TRUE
[23:00:18.329]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:00:18.329]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:00:18.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:00:18.332]        // while-condition  =>  FALSE
[23:00:18.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:00:18.332]      </control>
[23:00:18.332]      // end if-block "canReadPins"
[23:00:18.332]    </control>
[23:00:18.332]    <control if="!canReadPins" while="" timeout="0" info="">
[23:00:18.332]      // if-block "!canReadPins"
[23:00:18.332]        // =>  FALSE
[23:00:18.332]      // skip if-block "!canReadPins"
[23:00:18.332]    </control>
[23:00:18.332]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:00:18.332]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:18.332]        // =>  TRUE
[23:00:18.332]      <block atomic="false" info="">
[23:00:18.332]        WriteAP(0x00, 0x190008);
[23:00:18.334]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:18.334]        WriteAP(0xF0, 0x01);
[23:00:18.338]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:18.338]      </block>
[23:00:18.338]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:18.338]    </control>
[23:00:18.338]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:00:18.338]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:18.338]        // =>  FALSE
[23:00:18.338]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:18.338]    </control>
[23:00:18.339]    <block atomic="false" info="">
[23:00:18.339]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:18.342]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:00:18.343]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:00:18.343]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:18.343]      __ap = 0; //lets make sure we reset the access point selection
[23:00:18.343]        // -> [__ap <= 0x00000000]
[23:00:18.343]    </block>
[23:00:18.343]  </sequence>
[23:00:18.343]  
[23:00:18.368]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:00:18.368]  
[23:00:18.369]  <debugvars>
[23:00:18.369]    // Pre-defined
[23:00:18.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:18.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:18.369]    __dp=0x00000000
[23:00:18.369]    __ap=0x00000000
[23:00:18.369]    __traceout=0x00000000      (Trace Disabled)
[23:00:18.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:18.370]    __FlashAddr=0x00000000
[23:00:18.370]    __FlashLen=0x00000000
[23:00:18.370]    __FlashArg=0x00000000
[23:00:18.370]    __FlashOp=0x00000000
[23:00:18.370]    __Result=0x00000000
[23:00:18.370]  </debugvars>
[23:00:18.370]  
[23:00:18.370]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:00:18.370]    <block atomic="false" info="">
[23:00:18.370]      __var deviceID = 0;
[23:00:18.371]        // -> [deviceID <= 0x00000000]
[23:00:18.371]      __var version = 0;
[23:00:18.371]        // -> [version <= 0x00000000]
[23:00:18.371]      __var partNum = 0;
[23:00:18.371]        // -> [partNum <= 0x00000000]
[23:00:18.371]      __var manuf = 0;
[23:00:18.371]        // -> [manuf <= 0x00000000]
[23:00:18.371]      __var isMSPM0G1X0X_G3X0X = 0;
[23:00:18.371]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:00:18.371]      __var isProduction = 0;
[23:00:18.371]        // -> [isProduction <= 0x00000000]
[23:00:18.371]      __var continueId = 0;
[23:00:18.372]        // -> [continueId <= 0x00000000]
[23:00:18.372]      deviceID =   Read32(0x41C40004);
[23:00:18.377]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:00:18.377]        // -> [deviceID <= 0x2BB8802F]
[23:00:18.377]      version = deviceID >> 28;
[23:00:18.377]        // -> [version <= 0x00000002]
[23:00:18.377]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:00:18.377]        // -> [partNum <= 0x0000BB88]
[23:00:18.377]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:00:18.377]        // -> [manuf <= 0x00000017]
[23:00:18.377]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:00:18.377]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:00:18.378]      isProduction = (version > 0);
[23:00:18.378]        // -> [isProduction <= 0x00000001]
[23:00:18.378]    </block>
[23:00:18.378]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:00:18.378]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:00:18.379]        // =>  FALSE
[23:00:18.379]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:00:18.379]    </control>
[23:00:18.379]    <control if="continueId == 4" while="" timeout="0" info="">
[23:00:18.379]      // if-block "continueId == 4"
[23:00:18.379]        // =>  FALSE
[23:00:18.379]      // skip if-block "continueId == 4"
[23:00:18.379]    </control>
[23:00:18.379]    <control if="!isProduction" while="" timeout="0" info="">
[23:00:18.379]      // if-block "!isProduction"
[23:00:18.379]        // =>  FALSE
[23:00:18.379]      // skip if-block "!isProduction"
[23:00:18.380]    </control>
[23:00:18.380]  </sequence>
[23:00:18.380]  
[23:05:33.163]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:05:33.163]  
[23:05:33.163]  <debugvars>
[23:05:33.163]    // Pre-defined
[23:05:33.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:05:33.163]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:05:33.163]    __dp=0x00000000
[23:05:33.163]    __ap=0x00000000
[23:05:33.163]    __traceout=0x00000000      (Trace Disabled)
[23:05:33.165]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:05:33.165]    __FlashAddr=0x00000000
[23:05:33.165]    __FlashLen=0x00000000
[23:05:33.165]    __FlashArg=0x00000000
[23:05:33.165]    __FlashOp=0x00000000
[23:05:33.165]    __Result=0x00000000
[23:05:33.165]  </debugvars>
[23:05:33.165]  
[23:05:33.165]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:05:33.165]    <block atomic="false" info="">
[23:05:33.165]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:05:33.166]        // -> [isSWJ <= 0x00000001]
[23:05:33.166]      __var hasDormant = __protocol & 0x00020000;
[23:05:33.166]        // -> [hasDormant <= 0x00000000]
[23:05:33.166]      __var protType   = __protocol & 0x0000FFFF;
[23:05:33.166]        // -> [protType <= 0x00000002]
[23:05:33.166]    </block>
[23:05:33.166]    <control if="protType == 1" while="" timeout="0" info="">
[23:05:33.166]      // if-block "protType == 1"
[23:05:33.167]        // =>  FALSE
[23:05:33.167]      // skip if-block "protType == 1"
[23:05:33.167]    </control>
[23:05:33.167]    <control if="protType == 2" while="" timeout="0" info="">
[23:05:33.167]      // if-block "protType == 2"
[23:05:33.167]        // =>  TRUE
[23:05:33.167]      <control if="isSWJ" while="" timeout="0" info="">
[23:05:33.167]        // if-block "isSWJ"
[23:05:33.168]          // =>  TRUE
[23:05:33.168]        <control if="hasDormant" while="" timeout="0" info="">
[23:05:33.168]          // if-block "hasDormant"
[23:05:33.168]            // =>  FALSE
[23:05:33.168]          // skip if-block "hasDormant"
[23:05:33.168]        </control>
[23:05:33.168]        <control if="!hasDormant" while="" timeout="0" info="">
[23:05:33.168]          // if-block "!hasDormant"
[23:05:33.168]            // =>  TRUE
[23:05:33.168]          <block atomic="false" info="">
[23:05:33.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:05:33.170]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:05:33.170]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:05:33.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:05:33.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:05:33.173]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:05:33.174]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:05:33.175]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:05:33.175]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:05:33.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:05:33.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:05:33.178]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:05:33.178]          </block>
[23:05:33.178]          // end if-block "!hasDormant"
[23:05:33.178]        </control>
[23:05:33.178]        // end if-block "isSWJ"
[23:05:33.178]      </control>
[23:05:33.179]      <control if="!isSWJ" while="" timeout="0" info="">
[23:05:33.179]        // if-block "!isSWJ"
[23:05:33.179]          // =>  FALSE
[23:05:33.179]        // skip if-block "!isSWJ"
[23:05:33.179]      </control>
[23:05:33.179]      <block atomic="false" info="">
[23:05:33.179]        ReadDP(0x0);
[23:05:33.182]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:05:33.182]      </block>
[23:05:33.182]      // end if-block "protType == 2"
[23:05:33.182]    </control>
[23:05:33.182]  </sequence>
[23:05:33.182]  
[23:05:33.185]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:05:33.185]  
[23:05:33.185]  <debugvars>
[23:05:33.185]    // Pre-defined
[23:05:33.185]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:05:33.185]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:05:33.185]    __dp=0x00000000
[23:05:33.185]    __ap=0x00000000
[23:05:33.185]    __traceout=0x00000000      (Trace Disabled)
[23:05:33.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:05:33.186]    __FlashAddr=0x00000000
[23:05:33.186]    __FlashLen=0x00000000
[23:05:33.186]    __FlashArg=0x00000000
[23:05:33.186]    __FlashOp=0x00000000
[23:05:33.186]    __Result=0x00000000
[23:05:33.186]  </debugvars>
[23:05:33.186]  
[23:05:33.186]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:05:33.186]    <block atomic="false" info="">
[23:05:33.186]      __var SW_DP_ABORT       = 0x0;
[23:05:33.186]        // -> [SW_DP_ABORT <= 0x00000000]
[23:05:33.187]      __var DP_CTRL_STAT      = 0x4;
[23:05:33.187]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:05:33.187]      __var DP_SELECT         = 0x8;
[23:05:33.187]        // -> [DP_SELECT <= 0x00000008]
[23:05:33.187]      __var powered_down      = 0;
[23:05:33.187]        // -> [powered_down <= 0x00000000]
[23:05:33.187]      WriteDP(DP_SELECT, 0x00000000);
[23:05:33.189]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:05:33.189]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:05:33.191]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:05:33.191]        // -> [powered_down <= 0x00000001]
[23:05:33.191]    </block>
[23:05:33.191]    <control if="powered_down" while="" timeout="0" info="">
[23:05:33.191]      // if-block "powered_down"
[23:05:33.191]        // =>  TRUE
[23:05:33.192]      <block atomic="false" info="">
[23:05:33.192]        Message(0, "Debug/System power-up request sent");
[23:05:33.192]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:05:33.196]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:05:33.196]      </block>
[23:05:33.197]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:05:33.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:05:33.198]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:05:33.198]        // while-condition  =>  FALSE
[23:05:33.198]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:05:33.198]      </control>
[23:05:33.199]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:05:33.199]        // if-block "(__protocol & 0xFFFF) == 1"
[23:05:33.199]          // =>  FALSE
[23:05:33.199]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:05:33.199]      </control>
[23:05:33.199]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:05:33.199]        // if-block "(__protocol & 0xFFFF) == 2"
[23:05:33.199]          // =>  TRUE
[23:05:33.200]        <block atomic="false" info="">
[23:05:33.200]          Message(0, "executing SWD power up");
[23:05:33.200]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:05:33.201]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:05:33.201]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:05:33.205]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:05:33.205]        </block>
[23:05:33.205]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:05:33.205]      </control>
[23:05:33.205]      // end if-block "powered_down"
[23:05:33.205]    </control>
[23:05:33.205]    <block atomic="false" info="">
[23:05:33.205]      __var DEBUG_PORT_VAL    = 0;
[23:05:33.205]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:05:33.205]      __var ACCESS_POINT_VAL  = 0;
[23:05:33.205]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:05:33.205]      __ap = 1; 
[23:05:33.206]        // -> [__ap <= 0x00000001]
[23:05:33.206]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:05:33.210]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:05:33.210]      __ap = 4;
[23:05:33.210]        // -> [__ap <= 0x00000004]
[23:05:33.210]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:05:33.213]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:05:33.213]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:05:33.213]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:05:33.214]    </block>
[23:05:33.214]    <block atomic="false" info="">
[23:05:33.214]      __var nReset = 0x80;
[23:05:33.214]        // -> [nReset <= 0x00000080]
[23:05:33.214]      __var canReadPins = 0;
[23:05:33.214]        // -> [canReadPins <= 0x00000000]
[23:05:33.214]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:05:33.216]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:05:33.216]        // -> [canReadPins <= 0x00000001]
[23:05:33.216]    </block>
[23:05:33.216]    <control if="" while="1" timeout="200" info="">
[23:05:33.216]      // while "1"  (timeout="200")
[23:05:33.217]      // while-condition  =>  TRUE
[23:05:33.217]      // while "1"  (timeout="200")
[23:05:33.217]      // while-condition  =>  TRUE
[23:05:33.217]      // while "1"  (timeout="200")
[23:05:33.217]      // while-condition  =>  TRUE
[23:05:33.217]      // while "1"  (timeout="200")
[23:05:33.217]      // while-condition  =>  TRUE
[23:05:33.217]      // while "1"  (timeout="200")
[23:05:33.217]      // while-condition  =>  TRUE
[23:05:33.217]      // while "1"  (timeout="200")
[23:05:33.217]      // while-condition  =>  TRUE
[23:05:33.217]      // while "1"  (timeout="200")
[23:05:33.218]      // while-condition  =>  TRUE
[23:05:33.218]      // while "1"  (timeout="200")
[23:05:33.218]      // while-condition  =>  TRUE
[23:05:33.218]      // while "1"  (timeout="200")
[23:05:33.218]      // while-condition  =>  TRUE
[23:05:33.218]      // while "1"  (timeout="200")
[23:05:33.218]      // while-condition  =>  TRUE
[23:05:33.218]      // while "1"  (timeout="200")
[23:05:33.218]      // while-condition  =>  TRUE
[23:05:33.218]      // while "1"  (timeout="200")
[23:05:33.218]      // while-condition  =>  TRUE
[23:05:33.219]      // while "1"  (timeout="200")
[23:05:33.219]      // while-condition  =>  TRUE
[23:05:33.219]      // while "1"  (timeout="200")
[23:05:33.219]      // while-condition  =>  TRUE
[23:05:33.219]      // while "1"  (timeout="200")
[23:05:33.219]      // while-condition  =>  TRUE
[23:05:33.220]      // while "1"  (timeout="200")
[23:05:33.220]      // while  =>  TIMEOUT
[23:05:33.220]      // end while "1"
[23:05:33.220]    </control>
[23:05:33.220]    <control if="canReadPins" while="" timeout="0" info="">
[23:05:33.220]      // if-block "canReadPins"
[23:05:33.220]        // =>  TRUE
[23:05:33.220]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:05:33.221]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:05:33.222]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:05:33.223]        // while-condition  =>  FALSE
[23:05:33.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:05:33.223]      </control>
[23:05:33.223]      // end if-block "canReadPins"
[23:05:33.223]    </control>
[23:05:33.223]    <control if="!canReadPins" while="" timeout="0" info="">
[23:05:33.223]      // if-block "!canReadPins"
[23:05:33.223]        // =>  FALSE
[23:05:33.223]      // skip if-block "!canReadPins"
[23:05:33.223]    </control>
[23:05:33.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:05:33.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:05:33.224]        // =>  TRUE
[23:05:33.224]      <block atomic="false" info="">
[23:05:33.224]        WriteAP(0x00, 0x190008);
[23:05:33.225]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:05:33.226]        WriteAP(0xF0, 0x01);
[23:05:33.233]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:05:33.233]      </block>
[23:05:33.233]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:05:33.233]    </control>
[23:05:33.234]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:05:33.234]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:05:33.234]        // =>  FALSE
[23:05:33.234]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:05:33.234]    </control>
[23:05:33.234]    <block atomic="false" info="">
[23:05:33.234]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:05:33.237]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:05:33.237]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:05:33.237]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:05:33.238]      __ap = 0; //lets make sure we reset the access point selection
[23:05:33.238]        // -> [__ap <= 0x00000000]
[23:05:33.238]    </block>
[23:05:33.238]  </sequence>
[23:05:33.238]  
[23:05:33.262]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:05:33.262]  
[23:05:33.263]  <debugvars>
[23:05:33.263]    // Pre-defined
[23:05:33.263]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:05:33.263]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:05:33.263]    __dp=0x00000000
[23:05:33.263]    __ap=0x00000000
[23:05:33.263]    __traceout=0x00000000      (Trace Disabled)
[23:05:33.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:05:33.264]    __FlashAddr=0x00000000
[23:05:33.264]    __FlashLen=0x00000000
[23:05:33.264]    __FlashArg=0x00000000
[23:05:33.264]    __FlashOp=0x00000000
[23:05:33.264]    __Result=0x00000000
[23:05:33.264]  </debugvars>
[23:05:33.264]  
[23:05:33.264]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:05:33.265]    <block atomic="false" info="">
[23:05:33.265]      __var deviceID = 0;
[23:05:33.265]        // -> [deviceID <= 0x00000000]
[23:05:33.265]      __var version = 0;
[23:05:33.265]        // -> [version <= 0x00000000]
[23:05:33.265]      __var partNum = 0;
[23:05:33.265]        // -> [partNum <= 0x00000000]
[23:05:33.265]      __var manuf = 0;
[23:05:33.266]        // -> [manuf <= 0x00000000]
[23:05:33.266]      __var isMSPM0G1X0X_G3X0X = 0;
[23:05:33.266]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:05:33.266]      __var isProduction = 0;
[23:05:33.266]        // -> [isProduction <= 0x00000000]
[23:05:33.266]      __var continueId = 0;
[23:05:33.266]        // -> [continueId <= 0x00000000]
[23:05:33.266]      deviceID =   Read32(0x41C40004);
[23:05:33.271]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:05:33.271]        // -> [deviceID <= 0x2BB8802F]
[23:05:33.271]      version = deviceID >> 28;
[23:05:33.271]        // -> [version <= 0x00000002]
[23:05:33.271]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:05:33.271]        // -> [partNum <= 0x0000BB88]
[23:05:33.271]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:05:33.271]        // -> [manuf <= 0x00000017]
[23:05:33.272]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:05:33.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:05:33.272]      isProduction = (version > 0);
[23:05:33.272]        // -> [isProduction <= 0x00000001]
[23:05:33.272]    </block>
[23:05:33.272]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:05:33.272]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:05:33.272]        // =>  FALSE
[23:05:33.272]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:05:33.272]    </control>
[23:05:33.272]    <control if="continueId == 4" while="" timeout="0" info="">
[23:05:33.272]      // if-block "continueId == 4"
[23:05:33.273]        // =>  FALSE
[23:05:33.273]      // skip if-block "continueId == 4"
[23:05:33.273]    </control>
[23:05:33.273]    <control if="!isProduction" while="" timeout="0" info="">
[23:05:33.273]      // if-block "!isProduction"
[23:05:33.273]        // =>  FALSE
[23:05:33.273]      // skip if-block "!isProduction"
[23:05:33.274]    </control>
[23:05:33.274]  </sequence>
[23:05:33.274]  
[23:08:40.607]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:08:40.607]  
[23:08:40.608]  <debugvars>
[23:08:40.608]    // Pre-defined
[23:08:40.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:08:40.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:08:40.608]    __dp=0x00000000
[23:08:40.608]    __ap=0x00000000
[23:08:40.608]    __traceout=0x00000000      (Trace Disabled)
[23:08:40.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:08:40.608]    __FlashAddr=0x00000000
[23:08:40.608]    __FlashLen=0x00000000
[23:08:40.608]    __FlashArg=0x00000000
[23:08:40.609]    __FlashOp=0x00000000
[23:08:40.609]    __Result=0x00000000
[23:08:40.609]  </debugvars>
[23:08:40.609]  
[23:08:40.609]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:08:40.609]    <block atomic="false" info="">
[23:08:40.609]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:08:40.609]        // -> [isSWJ <= 0x00000001]
[23:08:40.609]      __var hasDormant = __protocol & 0x00020000;
[23:08:40.609]        // -> [hasDormant <= 0x00000000]
[23:08:40.610]      __var protType   = __protocol & 0x0000FFFF;
[23:08:40.610]        // -> [protType <= 0x00000002]
[23:08:40.610]    </block>
[23:08:40.610]    <control if="protType == 1" while="" timeout="0" info="">
[23:08:40.610]      // if-block "protType == 1"
[23:08:40.610]        // =>  FALSE
[23:08:40.610]      // skip if-block "protType == 1"
[23:08:40.610]    </control>
[23:08:40.610]    <control if="protType == 2" while="" timeout="0" info="">
[23:08:40.610]      // if-block "protType == 2"
[23:08:40.610]        // =>  TRUE
[23:08:40.611]      <control if="isSWJ" while="" timeout="0" info="">
[23:08:40.611]        // if-block "isSWJ"
[23:08:40.611]          // =>  TRUE
[23:08:40.611]        <control if="hasDormant" while="" timeout="0" info="">
[23:08:40.611]          // if-block "hasDormant"
[23:08:40.611]            // =>  FALSE
[23:08:40.611]          // skip if-block "hasDormant"
[23:08:40.611]        </control>
[23:08:40.611]        <control if="!hasDormant" while="" timeout="0" info="">
[23:08:40.611]          // if-block "!hasDormant"
[23:08:40.611]            // =>  TRUE
[23:08:40.611]          <block atomic="false" info="">
[23:08:40.612]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:08:40.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:08:40.613]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:08:40.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:08:40.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:08:40.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:08:40.620]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:08:40.627]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:08:40.627]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:08:40.629]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:08:40.629]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:08:40.630]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:08:40.630]          </block>
[23:08:40.630]          // end if-block "!hasDormant"
[23:08:40.630]        </control>
[23:08:40.630]        // end if-block "isSWJ"
[23:08:40.630]      </control>
[23:08:40.630]      <control if="!isSWJ" while="" timeout="0" info="">
[23:08:40.630]        // if-block "!isSWJ"
[23:08:40.631]          // =>  FALSE
[23:08:40.631]        // skip if-block "!isSWJ"
[23:08:40.631]      </control>
[23:08:40.631]      <block atomic="false" info="">
[23:08:40.631]        ReadDP(0x0);
[23:08:40.633]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:08:40.633]      </block>
[23:08:40.633]      // end if-block "protType == 2"
[23:08:40.633]    </control>
[23:08:40.633]  </sequence>
[23:08:40.633]  
[23:08:40.638]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:08:40.638]  
[23:08:40.638]  <debugvars>
[23:08:40.638]    // Pre-defined
[23:08:40.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:08:40.638]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:08:40.638]    __dp=0x00000000
[23:08:40.638]    __ap=0x00000000
[23:08:40.638]    __traceout=0x00000000      (Trace Disabled)
[23:08:40.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:08:40.639]    __FlashAddr=0x00000000
[23:08:40.639]    __FlashLen=0x00000000
[23:08:40.639]    __FlashArg=0x00000000
[23:08:40.639]    __FlashOp=0x00000000
[23:08:40.639]    __Result=0x00000000
[23:08:40.639]  </debugvars>
[23:08:40.639]  
[23:08:40.639]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:08:40.639]    <block atomic="false" info="">
[23:08:40.639]      __var SW_DP_ABORT       = 0x0;
[23:08:40.639]        // -> [SW_DP_ABORT <= 0x00000000]
[23:08:40.640]      __var DP_CTRL_STAT      = 0x4;
[23:08:40.640]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:08:40.640]      __var DP_SELECT         = 0x8;
[23:08:40.640]        // -> [DP_SELECT <= 0x00000008]
[23:08:40.640]      __var powered_down      = 0;
[23:08:40.640]        // -> [powered_down <= 0x00000000]
[23:08:40.640]      WriteDP(DP_SELECT, 0x00000000);
[23:08:40.642]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:08:40.642]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:08:40.644]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:08:40.644]        // -> [powered_down <= 0x00000001]
[23:08:40.644]    </block>
[23:08:40.644]    <control if="powered_down" while="" timeout="0" info="">
[23:08:40.644]      // if-block "powered_down"
[23:08:40.644]        // =>  TRUE
[23:08:40.644]      <block atomic="false" info="">
[23:08:40.644]        Message(0, "Debug/System power-up request sent");
[23:08:40.647]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:08:40.649]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:08:40.649]      </block>
[23:08:40.649]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:08:40.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:08:40.651]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:08:40.651]        // while-condition  =>  FALSE
[23:08:40.651]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:08:40.651]      </control>
[23:08:40.651]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:08:40.651]        // if-block "(__protocol & 0xFFFF) == 1"
[23:08:40.651]          // =>  FALSE
[23:08:40.651]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:08:40.651]      </control>
[23:08:40.652]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:08:40.652]        // if-block "(__protocol & 0xFFFF) == 2"
[23:08:40.652]          // =>  TRUE
[23:08:40.652]        <block atomic="false" info="">
[23:08:40.652]          Message(0, "executing SWD power up");
[23:08:40.654]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:08:40.655]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:08:40.656]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:08:40.658]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:08:40.658]        </block>
[23:08:40.658]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:08:40.658]      </control>
[23:08:40.658]      // end if-block "powered_down"
[23:08:40.659]    </control>
[23:08:40.659]    <block atomic="false" info="">
[23:08:40.659]      __var DEBUG_PORT_VAL    = 0;
[23:08:40.659]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:08:40.659]      __var ACCESS_POINT_VAL  = 0;
[23:08:40.659]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:08:40.659]      __ap = 1; 
[23:08:40.659]        // -> [__ap <= 0x00000001]
[23:08:40.659]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:08:40.667]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:08:40.667]      __ap = 4;
[23:08:40.667]        // -> [__ap <= 0x00000004]
[23:08:40.667]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:08:40.671]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:08:40.671]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:08:40.671]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:08:40.673]    </block>
[23:08:40.674]    <block atomic="false" info="">
[23:08:40.674]      __var nReset = 0x80;
[23:08:40.674]        // -> [nReset <= 0x00000080]
[23:08:40.674]      __var canReadPins = 0;
[23:08:40.674]        // -> [canReadPins <= 0x00000000]
[23:08:40.674]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:08:40.682]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:08:40.682]        // -> [canReadPins <= 0x00000001]
[23:08:40.682]    </block>
[23:08:40.682]    <control if="" while="1" timeout="200" info="">
[23:08:40.682]      // while "1"  (timeout="200")
[23:08:40.682]      // while-condition  =>  TRUE
[23:08:40.682]      // while "1"  (timeout="200")
[23:08:40.682]      // while-condition  =>  TRUE
[23:08:40.682]      // while "1"  (timeout="200")
[23:08:40.682]      // while-condition  =>  TRUE
[23:08:40.682]      // while "1"  (timeout="200")
[23:08:40.683]      // while-condition  =>  TRUE
[23:08:40.683]      // while "1"  (timeout="200")
[23:08:40.683]      // while-condition  =>  TRUE
[23:08:40.683]      // while "1"  (timeout="200")
[23:08:40.683]      // while-condition  =>  TRUE
[23:08:40.683]      // while "1"  (timeout="200")
[23:08:40.683]      // while-condition  =>  TRUE
[23:08:40.683]      // while "1"  (timeout="200")
[23:08:40.683]      // while-condition  =>  TRUE
[23:08:40.683]      // while "1"  (timeout="200")
[23:08:40.683]      // while-condition  =>  TRUE
[23:08:40.683]      // while "1"  (timeout="200")
[23:08:40.684]      // while-condition  =>  TRUE
[23:08:40.684]      // while "1"  (timeout="200")
[23:08:40.684]      // while-condition  =>  TRUE
[23:08:40.684]      // while "1"  (timeout="200")
[23:08:40.684]      // while-condition  =>  TRUE
[23:08:40.684]      // while "1"  (timeout="200")
[23:08:40.684]      // while-condition  =>  TRUE
[23:08:40.685]      // while "1"  (timeout="200")
[23:08:40.685]      // while-condition  =>  TRUE
[23:08:40.685]      // while "1"  (timeout="200")
[23:08:40.685]      // while-condition  =>  TRUE
[23:08:40.685]      // while "1"  (timeout="200")
[23:08:40.685]      // while-condition  =>  TRUE
[23:08:40.685]      // while "1"  (timeout="200")
[23:08:40.685]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.686]      // while-condition  =>  TRUE
[23:08:40.686]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.687]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.687]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.687]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.687]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.687]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.687]      // while "1"  (timeout="200")
[23:08:40.687]      // while-condition  =>  TRUE
[23:08:40.689]      // while "1"  (timeout="200")
[23:08:40.689]      // while  =>  TIMEOUT
[23:08:40.689]      // end while "1"
[23:08:40.689]    </control>
[23:08:40.689]    <control if="canReadPins" while="" timeout="0" info="">
[23:08:40.689]      // if-block "canReadPins"
[23:08:40.689]        // =>  TRUE
[23:08:40.689]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:08:40.690]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:08:40.693]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:08:40.694]        // while-condition  =>  FALSE
[23:08:40.694]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:08:40.694]      </control>
[23:08:40.694]      // end if-block "canReadPins"
[23:08:40.694]    </control>
[23:08:40.694]    <control if="!canReadPins" while="" timeout="0" info="">
[23:08:40.694]      // if-block "!canReadPins"
[23:08:40.694]        // =>  FALSE
[23:08:40.694]      // skip if-block "!canReadPins"
[23:08:40.694]    </control>
[23:08:40.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:08:40.695]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:08:40.695]        // =>  TRUE
[23:08:40.695]      <block atomic="false" info="">
[23:08:40.695]        WriteAP(0x00, 0x190008);
[23:08:40.696]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:08:40.697]        WriteAP(0xF0, 0x01);
[23:08:40.702]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:08:40.702]      </block>
[23:08:40.702]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:08:40.702]    </control>
[23:08:40.702]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:08:40.702]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:08:40.702]        // =>  FALSE
[23:08:40.702]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:08:40.702]    </control>
[23:08:40.702]    <block atomic="false" info="">
[23:08:40.702]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:08:40.705]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:08:40.705]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:08:40.705]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:08:40.708]      __ap = 0; //lets make sure we reset the access point selection
[23:08:40.709]        // -> [__ap <= 0x00000000]
[23:08:40.709]    </block>
[23:08:40.709]  </sequence>
[23:08:40.709]  
[23:08:40.734]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:08:40.734]  
[23:08:40.734]  <debugvars>
[23:08:40.734]    // Pre-defined
[23:08:40.734]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:08:40.734]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:08:40.734]    __dp=0x00000000
[23:08:40.735]    __ap=0x00000000
[23:08:40.735]    __traceout=0x00000000      (Trace Disabled)
[23:08:40.735]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:08:40.735]    __FlashAddr=0x00000000
[23:08:40.735]    __FlashLen=0x00000000
[23:08:40.735]    __FlashArg=0x00000000
[23:08:40.735]    __FlashOp=0x00000000
[23:08:40.735]    __Result=0x00000000
[23:08:40.736]  </debugvars>
[23:08:40.736]  
[23:08:40.736]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:08:40.736]    <block atomic="false" info="">
[23:08:40.736]      __var deviceID = 0;
[23:08:40.736]        // -> [deviceID <= 0x00000000]
[23:08:40.736]      __var version = 0;
[23:08:40.736]        // -> [version <= 0x00000000]
[23:08:40.736]      __var partNum = 0;
[23:08:40.736]        // -> [partNum <= 0x00000000]
[23:08:40.736]      __var manuf = 0;
[23:08:40.736]        // -> [manuf <= 0x00000000]
[23:08:40.737]      __var isMSPM0G1X0X_G3X0X = 0;
[23:08:40.737]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:08:40.737]      __var isProduction = 0;
[23:08:40.737]        // -> [isProduction <= 0x00000000]
[23:08:40.737]      __var continueId = 0;
[23:08:40.737]        // -> [continueId <= 0x00000000]
[23:08:40.738]      deviceID =   Read32(0x41C40004);
[23:08:40.744]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:08:40.744]        // -> [deviceID <= 0x2BB8802F]
[23:08:40.744]      version = deviceID >> 28;
[23:08:40.744]        // -> [version <= 0x00000002]
[23:08:40.744]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:08:40.744]        // -> [partNum <= 0x0000BB88]
[23:08:40.744]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:08:40.744]        // -> [manuf <= 0x00000017]
[23:08:40.744]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:08:40.744]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:08:40.744]      isProduction = (version > 0);
[23:08:40.745]        // -> [isProduction <= 0x00000001]
[23:08:40.745]    </block>
[23:08:40.745]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:08:40.745]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:08:40.745]        // =>  FALSE
[23:08:40.745]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:08:40.745]    </control>
[23:08:40.745]    <control if="continueId == 4" while="" timeout="0" info="">
[23:08:40.745]      // if-block "continueId == 4"
[23:08:40.745]        // =>  FALSE
[23:08:40.745]      // skip if-block "continueId == 4"
[23:08:40.745]    </control>
[23:08:40.745]    <control if="!isProduction" while="" timeout="0" info="">
[23:08:40.745]      // if-block "!isProduction"
[23:08:40.745]        // =>  FALSE
[23:08:40.746]      // skip if-block "!isProduction"
[23:08:40.746]    </control>
[23:08:40.746]  </sequence>
[23:08:40.746]  
[23:10:17.330]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:10:17.330]  
[23:10:17.331]  <debugvars>
[23:10:17.331]    // Pre-defined
[23:10:17.331]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:17.331]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:17.331]    __dp=0x00000000
[23:10:17.331]    __ap=0x00000000
[23:10:17.331]    __traceout=0x00000000      (Trace Disabled)
[23:10:17.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:17.332]    __FlashAddr=0x00000000
[23:10:17.332]    __FlashLen=0x00000000
[23:10:17.332]    __FlashArg=0x00000000
[23:10:17.332]    __FlashOp=0x00000000
[23:10:17.332]    __Result=0x00000000
[23:10:17.332]  </debugvars>
[23:10:17.333]  
[23:10:17.333]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:10:17.333]    <block atomic="false" info="">
[23:10:17.333]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:10:17.333]        // -> [isSWJ <= 0x00000001]
[23:10:17.333]      __var hasDormant = __protocol & 0x00020000;
[23:10:17.333]        // -> [hasDormant <= 0x00000000]
[23:10:17.334]      __var protType   = __protocol & 0x0000FFFF;
[23:10:17.334]        // -> [protType <= 0x00000002]
[23:10:17.334]    </block>
[23:10:17.334]    <control if="protType == 1" while="" timeout="0" info="">
[23:10:17.334]      // if-block "protType == 1"
[23:10:17.335]        // =>  FALSE
[23:10:17.335]      // skip if-block "protType == 1"
[23:10:17.335]    </control>
[23:10:17.335]    <control if="protType == 2" while="" timeout="0" info="">
[23:10:17.335]      // if-block "protType == 2"
[23:10:17.335]        // =>  TRUE
[23:10:17.335]      <control if="isSWJ" while="" timeout="0" info="">
[23:10:17.335]        // if-block "isSWJ"
[23:10:17.335]          // =>  TRUE
[23:10:17.335]        <control if="hasDormant" while="" timeout="0" info="">
[23:10:17.335]          // if-block "hasDormant"
[23:10:17.335]            // =>  FALSE
[23:10:17.336]          // skip if-block "hasDormant"
[23:10:17.336]        </control>
[23:10:17.336]        <control if="!hasDormant" while="" timeout="0" info="">
[23:10:17.336]          // if-block "!hasDormant"
[23:10:17.336]            // =>  TRUE
[23:10:17.336]          <block atomic="false" info="">
[23:10:17.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:10:17.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:17.339]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:10:17.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:10:17.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:10:17.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:17.343]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:10:17.352]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:10:17.352]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:10:17.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:17.365]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:10:17.369]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:10:17.369]          </block>
[23:10:17.369]          // end if-block "!hasDormant"
[23:10:17.369]        </control>
[23:10:17.369]        // end if-block "isSWJ"
[23:10:17.370]      </control>
[23:10:17.370]      <control if="!isSWJ" while="" timeout="0" info="">
[23:10:17.370]        // if-block "!isSWJ"
[23:10:17.370]          // =>  FALSE
[23:10:17.370]        // skip if-block "!isSWJ"
[23:10:17.370]      </control>
[23:10:17.370]      <block atomic="false" info="">
[23:10:17.370]        ReadDP(0x0);
[23:10:17.376]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:10:17.377]      </block>
[23:10:17.377]      // end if-block "protType == 2"
[23:10:17.377]    </control>
[23:10:17.377]  </sequence>
[23:10:17.377]  
[23:10:17.383]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:10:17.383]  
[23:10:17.383]  <debugvars>
[23:10:17.383]    // Pre-defined
[23:10:17.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:17.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:17.383]    __dp=0x00000000
[23:10:17.383]    __ap=0x00000000
[23:10:17.384]    __traceout=0x00000000      (Trace Disabled)
[23:10:17.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:17.384]    __FlashAddr=0x00000000
[23:10:17.384]    __FlashLen=0x00000000
[23:10:17.385]    __FlashArg=0x00000000
[23:10:17.385]    __FlashOp=0x00000000
[23:10:17.385]    __Result=0x00000000
[23:10:17.385]  </debugvars>
[23:10:17.385]  
[23:10:17.385]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:10:17.385]    <block atomic="false" info="">
[23:10:17.385]      __var SW_DP_ABORT       = 0x0;
[23:10:17.385]        // -> [SW_DP_ABORT <= 0x00000000]
[23:10:17.385]      __var DP_CTRL_STAT      = 0x4;
[23:10:17.385]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:10:17.385]      __var DP_SELECT         = 0x8;
[23:10:17.385]        // -> [DP_SELECT <= 0x00000008]
[23:10:17.385]      __var powered_down      = 0;
[23:10:17.385]        // -> [powered_down <= 0x00000000]
[23:10:17.387]      WriteDP(DP_SELECT, 0x00000000);
[23:10:17.390]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:10:17.390]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:10:17.396]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:10:17.396]        // -> [powered_down <= 0x00000001]
[23:10:17.396]    </block>
[23:10:17.396]    <control if="powered_down" while="" timeout="0" info="">
[23:10:17.396]      // if-block "powered_down"
[23:10:17.396]        // =>  TRUE
[23:10:17.396]      <block atomic="false" info="">
[23:10:17.396]        Message(0, "Debug/System power-up request sent");
[23:10:17.396]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:10:17.398]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:10:17.398]      </block>
[23:10:17.398]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:10:17.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:10:17.401]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:10:17.401]        // while-condition  =>  FALSE
[23:10:17.401]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:10:17.401]      </control>
[23:10:17.401]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:10:17.401]        // if-block "(__protocol & 0xFFFF) == 1"
[23:10:17.401]          // =>  FALSE
[23:10:17.402]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:10:17.402]      </control>
[23:10:17.402]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:10:17.402]        // if-block "(__protocol & 0xFFFF) == 2"
[23:10:17.402]          // =>  TRUE
[23:10:17.402]        <block atomic="false" info="">
[23:10:17.402]          Message(0, "executing SWD power up");
[23:10:17.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:10:17.406]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:10:17.406]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:10:17.408]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:10:17.408]        </block>
[23:10:17.408]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:10:17.408]      </control>
[23:10:17.408]      // end if-block "powered_down"
[23:10:17.408]    </control>
[23:10:17.409]    <block atomic="false" info="">
[23:10:17.409]      __var DEBUG_PORT_VAL    = 0;
[23:10:17.409]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:10:17.409]      __var ACCESS_POINT_VAL  = 0;
[23:10:17.409]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:10:17.410]      __ap = 1; 
[23:10:17.410]        // -> [__ap <= 0x00000001]
[23:10:17.410]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:10:17.415]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:10:17.415]      __ap = 4;
[23:10:17.416]        // -> [__ap <= 0x00000004]
[23:10:17.416]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:17.422]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:10:17.422]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:10:17.423]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:17.423]    </block>
[23:10:17.423]    <block atomic="false" info="">
[23:10:17.423]      __var nReset = 0x80;
[23:10:17.423]        // -> [nReset <= 0x00000080]
[23:10:17.423]      __var canReadPins = 0;
[23:10:17.423]        // -> [canReadPins <= 0x00000000]
[23:10:17.424]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:10:17.429]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:10:17.430]        // -> [canReadPins <= 0x00000001]
[23:10:17.430]    </block>
[23:10:17.430]    <control if="" while="1" timeout="200" info="">
[23:10:17.430]      // while "1"  (timeout="200")
[23:10:17.430]      // while-condition  =>  TRUE
[23:10:17.430]      // while "1"  (timeout="200")
[23:10:17.430]      // while-condition  =>  TRUE
[23:10:17.431]      // while "1"  (timeout="200")
[23:10:17.431]      // while-condition  =>  TRUE
[23:10:17.431]      // while "1"  (timeout="200")
[23:10:17.432]      // while-condition  =>  TRUE
[23:10:17.432]      // while "1"  (timeout="200")
[23:10:17.432]      // while-condition  =>  TRUE
[23:10:17.432]      // while "1"  (timeout="200")
[23:10:17.432]      // while-condition  =>  TRUE
[23:10:17.432]      // while "1"  (timeout="200")
[23:10:17.432]      // while-condition  =>  TRUE
[23:10:17.432]      // while "1"  (timeout="200")
[23:10:17.433]      // while-condition  =>  TRUE
[23:10:17.433]      // while "1"  (timeout="200")
[23:10:17.433]      // while-condition  =>  TRUE
[23:10:17.433]      // while "1"  (timeout="200")
[23:10:17.433]      // while-condition  =>  TRUE
[23:10:17.433]      // while "1"  (timeout="200")
[23:10:17.433]      // while-condition  =>  TRUE
[23:10:17.433]      // while "1"  (timeout="200")
[23:10:17.433]      // while-condition  =>  TRUE
[23:10:17.434]      // while "1"  (timeout="200")
[23:10:17.434]      // while-condition  =>  TRUE
[23:10:17.434]      // while "1"  (timeout="200")
[23:10:17.434]      // while-condition  =>  TRUE
[23:10:17.434]      // while "1"  (timeout="200")
[23:10:17.434]      // while-condition  =>  TRUE
[23:10:17.434]      // while "1"  (timeout="200")
[23:10:17.434]      // while-condition  =>  TRUE
[23:10:17.434]      // while "1"  (timeout="200")
[23:10:17.434]      // while-condition  =>  TRUE
[23:10:17.434]      // while "1"  (timeout="200")
[23:10:17.435]      // while-condition  =>  TRUE
[23:10:17.435]      // while "1"  (timeout="200")
[23:10:17.435]      // while-condition  =>  TRUE
[23:10:17.435]      // while "1"  (timeout="200")
[23:10:17.435]      // while-condition  =>  TRUE
[23:10:17.435]      // while "1"  (timeout="200")
[23:10:17.435]      // while-condition  =>  TRUE
[23:10:17.435]      // while "1"  (timeout="200")
[23:10:17.435]      // while-condition  =>  TRUE
[23:10:17.435]      // while "1"  (timeout="200")
[23:10:17.435]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.436]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.436]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.436]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.436]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.436]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.436]      // while-condition  =>  TRUE
[23:10:17.436]      // while "1"  (timeout="200")
[23:10:17.437]      // while-condition  =>  TRUE
[23:10:17.437]      // while "1"  (timeout="200")
[23:10:17.437]      // while-condition  =>  TRUE
[23:10:17.437]      // while "1"  (timeout="200")
[23:10:17.437]      // while-condition  =>  TRUE
[23:10:17.437]      // while "1"  (timeout="200")
[23:10:17.437]      // while-condition  =>  TRUE
[23:10:17.437]      // while "1"  (timeout="200")
[23:10:17.437]      // while-condition  =>  TRUE
[23:10:17.437]      // while "1"  (timeout="200")
[23:10:17.438]      // while-condition  =>  TRUE
[23:10:17.438]      // while "1"  (timeout="200")
[23:10:17.438]      // while  =>  TIMEOUT
[23:10:17.438]      // end while "1"
[23:10:17.438]    </control>
[23:10:17.438]    <control if="canReadPins" while="" timeout="0" info="">
[23:10:17.438]      // if-block "canReadPins"
[23:10:17.438]        // =>  TRUE
[23:10:17.439]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:10:17.439]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:10:17.440]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:10:17.440]        // while-condition  =>  FALSE
[23:10:17.440]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:10:17.441]      </control>
[23:10:17.441]      // end if-block "canReadPins"
[23:10:17.441]    </control>
[23:10:17.441]    <control if="!canReadPins" while="" timeout="0" info="">
[23:10:17.441]      // if-block "!canReadPins"
[23:10:17.441]        // =>  FALSE
[23:10:17.441]      // skip if-block "!canReadPins"
[23:10:17.443]    </control>
[23:10:17.443]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:10:17.443]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:17.443]        // =>  TRUE
[23:10:17.443]      <block atomic="false" info="">
[23:10:17.443]        WriteAP(0x00, 0x190008);
[23:10:17.450]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:17.450]        WriteAP(0xF0, 0x01);
[23:10:17.466]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:17.466]      </block>
[23:10:17.466]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:17.466]    </control>
[23:10:17.466]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:10:17.466]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:17.467]        // =>  FALSE
[23:10:17.467]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:17.467]    </control>
[23:10:17.467]    <block atomic="false" info="">
[23:10:17.467]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:17.471]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:10:17.471]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:10:17.471]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:17.471]      __ap = 0; //lets make sure we reset the access point selection
[23:10:17.471]        // -> [__ap <= 0x00000000]
[23:10:17.471]    </block>
[23:10:17.471]  </sequence>
[23:10:17.471]  
[23:10:17.510]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:10:17.510]  
[23:10:17.510]  <debugvars>
[23:10:17.510]    // Pre-defined
[23:10:17.510]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:17.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:17.510]    __dp=0x00000000
[23:10:17.510]    __ap=0x00000000
[23:10:17.510]    __traceout=0x00000000      (Trace Disabled)
[23:10:17.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:17.510]    __FlashAddr=0x00000000
[23:10:17.511]    __FlashLen=0x00000000
[23:10:17.511]    __FlashArg=0x00000000
[23:10:17.511]    __FlashOp=0x00000000
[23:10:17.511]    __Result=0x00000000
[23:10:17.511]  </debugvars>
[23:10:17.511]  
[23:10:17.511]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:10:17.511]    <block atomic="false" info="">
[23:10:17.511]      __var deviceID = 0;
[23:10:17.511]        // -> [deviceID <= 0x00000000]
[23:10:17.511]      __var version = 0;
[23:10:17.512]        // -> [version <= 0x00000000]
[23:10:17.512]      __var partNum = 0;
[23:10:17.512]        // -> [partNum <= 0x00000000]
[23:10:17.512]      __var manuf = 0;
[23:10:17.512]        // -> [manuf <= 0x00000000]
[23:10:17.512]      __var isMSPM0G1X0X_G3X0X = 0;
[23:10:17.512]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:10:17.512]      __var isProduction = 0;
[23:10:17.512]        // -> [isProduction <= 0x00000000]
[23:10:17.512]      __var continueId = 0;
[23:10:17.513]        // -> [continueId <= 0x00000000]
[23:10:17.513]      deviceID =   Read32(0x41C40004);
[23:10:17.521]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:10:17.521]        // -> [deviceID <= 0x2BB8802F]
[23:10:17.521]      version = deviceID >> 28;
[23:10:17.521]        // -> [version <= 0x00000002]
[23:10:17.521]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:10:17.521]        // -> [partNum <= 0x0000BB88]
[23:10:17.521]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:10:17.522]        // -> [manuf <= 0x00000017]
[23:10:17.522]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:10:17.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:10:17.522]      isProduction = (version > 0);
[23:10:17.522]        // -> [isProduction <= 0x00000001]
[23:10:17.522]    </block>
[23:10:17.522]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:10:17.522]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:10:17.522]        // =>  FALSE
[23:10:17.523]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:10:17.523]    </control>
[23:10:17.523]    <control if="continueId == 4" while="" timeout="0" info="">
[23:10:17.523]      // if-block "continueId == 4"
[23:10:17.523]        // =>  FALSE
[23:10:17.524]      // skip if-block "continueId == 4"
[23:10:17.524]    </control>
[23:10:17.524]    <control if="!isProduction" while="" timeout="0" info="">
[23:10:17.524]      // if-block "!isProduction"
[23:10:17.524]        // =>  FALSE
[23:10:17.524]      // skip if-block "!isProduction"
[23:10:17.524]    </control>
[23:10:17.524]  </sequence>
[23:10:17.524]  
[23:13:42.046]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:13:42.046]  
[23:13:42.054]  <debugvars>
[23:13:42.054]    // Pre-defined
[23:13:42.054]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:42.054]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:42.054]    __dp=0x00000000
[23:13:42.054]    __ap=0x00000000
[23:13:42.054]    __traceout=0x00000000      (Trace Disabled)
[23:13:42.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:42.054]    __FlashAddr=0x00000000
[23:13:42.055]    __FlashLen=0x00000000
[23:13:42.055]    __FlashArg=0x00000000
[23:13:42.055]    __FlashOp=0x00000000
[23:13:42.055]    __Result=0x00000000
[23:13:42.055]  </debugvars>
[23:13:42.055]  
[23:13:42.055]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:13:42.055]    <block atomic="false" info="">
[23:13:42.055]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:13:42.056]        // -> [isSWJ <= 0x00000001]
[23:13:42.057]      __var hasDormant = __protocol & 0x00020000;
[23:13:42.057]        // -> [hasDormant <= 0x00000000]
[23:13:42.057]      __var protType   = __protocol & 0x0000FFFF;
[23:13:42.057]        // -> [protType <= 0x00000002]
[23:13:42.057]    </block>
[23:13:42.057]    <control if="protType == 1" while="" timeout="0" info="">
[23:13:42.057]      // if-block "protType == 1"
[23:13:42.057]        // =>  FALSE
[23:13:42.057]      // skip if-block "protType == 1"
[23:13:42.057]    </control>
[23:13:42.057]    <control if="protType == 2" while="" timeout="0" info="">
[23:13:42.058]      // if-block "protType == 2"
[23:13:42.058]        // =>  TRUE
[23:13:42.058]      <control if="isSWJ" while="" timeout="0" info="">
[23:13:42.058]        // if-block "isSWJ"
[23:13:42.058]          // =>  TRUE
[23:13:42.058]        <control if="hasDormant" while="" timeout="0" info="">
[23:13:42.058]          // if-block "hasDormant"
[23:13:42.058]            // =>  FALSE
[23:13:42.058]          // skip if-block "hasDormant"
[23:13:42.058]        </control>
[23:13:42.058]        <control if="!hasDormant" while="" timeout="0" info="">
[23:13:42.059]          // if-block "!hasDormant"
[23:13:42.059]            // =>  TRUE
[23:13:42.059]          <block atomic="false" info="">
[23:13:42.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:13:42.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:42.060]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:13:42.062]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:13:42.062]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:13:42.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:42.063]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:13:42.065]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:13:42.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:13:42.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:42.066]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:13:42.069]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:13:42.070]          </block>
[23:13:42.070]          // end if-block "!hasDormant"
[23:13:42.070]        </control>
[23:13:42.070]        // end if-block "isSWJ"
[23:13:42.070]      </control>
[23:13:42.070]      <control if="!isSWJ" while="" timeout="0" info="">
[23:13:42.070]        // if-block "!isSWJ"
[23:13:42.071]          // =>  FALSE
[23:13:42.071]        // skip if-block "!isSWJ"
[23:13:42.071]      </control>
[23:13:42.071]      <block atomic="false" info="">
[23:13:42.071]        ReadDP(0x0);
[23:13:42.073]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:13:42.073]      </block>
[23:13:42.073]      // end if-block "protType == 2"
[23:13:42.074]    </control>
[23:13:42.074]  </sequence>
[23:13:42.074]  
[23:13:42.076]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:13:42.076]  
[23:13:42.076]  <debugvars>
[23:13:42.076]    // Pre-defined
[23:13:42.076]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:42.076]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:42.076]    __dp=0x00000000
[23:13:42.076]    __ap=0x00000000
[23:13:42.076]    __traceout=0x00000000      (Trace Disabled)
[23:13:42.076]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:42.076]    __FlashAddr=0x00000000
[23:13:42.076]    __FlashLen=0x00000000
[23:13:42.078]    __FlashArg=0x00000000
[23:13:42.078]    __FlashOp=0x00000000
[23:13:42.078]    __Result=0x00000000
[23:13:42.078]  </debugvars>
[23:13:42.078]  
[23:13:42.078]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:13:42.079]    <block atomic="false" info="">
[23:13:42.079]      __var SW_DP_ABORT       = 0x0;
[23:13:42.079]        // -> [SW_DP_ABORT <= 0x00000000]
[23:13:42.079]      __var DP_CTRL_STAT      = 0x4;
[23:13:42.079]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:13:42.080]      __var DP_SELECT         = 0x8;
[23:13:42.080]        // -> [DP_SELECT <= 0x00000008]
[23:13:42.080]      __var powered_down      = 0;
[23:13:42.080]        // -> [powered_down <= 0x00000000]
[23:13:42.080]      WriteDP(DP_SELECT, 0x00000000);
[23:13:42.082]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:13:42.082]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:13:42.083]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:13:42.083]        // -> [powered_down <= 0x00000001]
[23:13:42.083]    </block>
[23:13:42.083]    <control if="powered_down" while="" timeout="0" info="">
[23:13:42.083]      // if-block "powered_down"
[23:13:42.083]        // =>  TRUE
[23:13:42.083]      <block atomic="false" info="">
[23:13:42.083]        Message(0, "Debug/System power-up request sent");
[23:13:42.086]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:13:42.087]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:13:42.087]      </block>
[23:13:42.087]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:13:42.087]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.091]        // while-condition  =>  TRUE
[23:13:42.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.095]        // while-condition  =>  TRUE
[23:13:42.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.098]        // while-condition  =>  TRUE
[23:13:42.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.099]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.100]        // while-condition  =>  TRUE
[23:13:42.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.105]        // while-condition  =>  TRUE
[23:13:42.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.109]        // while-condition  =>  TRUE
[23:13:42.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.111]        // while-condition  =>  TRUE
[23:13:42.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.114]        // while-condition  =>  TRUE
[23:13:42.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.117]        // while-condition  =>  TRUE
[23:13:42.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.120]        // while-condition  =>  TRUE
[23:13:42.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.122]        // while-condition  =>  TRUE
[23:13:42.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.124]        // while-condition  =>  TRUE
[23:13:42.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.126]        // while-condition  =>  TRUE
[23:13:42.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.128]        // while-condition  =>  TRUE
[23:13:42.128]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.130]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.130]        // while-condition  =>  TRUE
[23:13:42.130]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.132]        // while-condition  =>  TRUE
[23:13:42.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.134]        // while-condition  =>  TRUE
[23:13:42.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.135]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.135]        // while-condition  =>  TRUE
[23:13:42.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.137]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.137]        // while-condition  =>  TRUE
[23:13:42.137]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.143]        // while-condition  =>  TRUE
[23:13:42.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.145]        // while-condition  =>  TRUE
[23:13:42.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.147]        // while-condition  =>  TRUE
[23:13:42.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.149]        // while-condition  =>  TRUE
[23:13:42.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.153]        // while-condition  =>  TRUE
[23:13:42.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.156]        // while-condition  =>  TRUE
[23:13:42.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.160]        // while-condition  =>  TRUE
[23:13:42.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.165]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.165]        // while-condition  =>  TRUE
[23:13:42.165]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.166]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.166]        // while-condition  =>  TRUE
[23:13:42.166]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.168]        // while-condition  =>  TRUE
[23:13:42.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.169]        // while-condition  =>  TRUE
[23:13:42.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.172]        // while-condition  =>  TRUE
[23:13:42.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.174]        // while-condition  =>  TRUE
[23:13:42.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.176]        // while-condition  =>  TRUE
[23:13:42.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.178]        // while-condition  =>  TRUE
[23:13:42.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.181]        // while-condition  =>  TRUE
[23:13:42.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.189]        // while-condition  =>  TRUE
[23:13:42.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.191]        // while-condition  =>  TRUE
[23:13:42.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.194]        // while-condition  =>  TRUE
[23:13:42.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.198]        // while-condition  =>  TRUE
[23:13:42.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.204]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.204]        // while-condition  =>  TRUE
[23:13:42.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.205]        // while-condition  =>  TRUE
[23:13:42.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.207]        // while-condition  =>  TRUE
[23:13:42.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.211]        // while-condition  =>  TRUE
[23:13:42.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.212]        // while-condition  =>  TRUE
[23:13:42.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.215]        // while-condition  =>  TRUE
[23:13:42.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.218]        // while-condition  =>  TRUE
[23:13:42.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.223]        // while-condition  =>  TRUE
[23:13:42.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.225]        // while-condition  =>  TRUE
[23:13:42.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.226]        // while-condition  =>  TRUE
[23:13:42.227]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.229]        // while-condition  =>  TRUE
[23:13:42.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.230]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.230]        // while-condition  =>  TRUE
[23:13:42.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.232]        // while-condition  =>  TRUE
[23:13:42.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.235]        // while-condition  =>  TRUE
[23:13:42.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.236]        // while-condition  =>  TRUE
[23:13:42.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.237]        // while-condition  =>  TRUE
[23:13:42.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.240]        // while-condition  =>  TRUE
[23:13:42.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.242]        // while-condition  =>  TRUE
[23:13:42.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.243]        // while-condition  =>  TRUE
[23:13:42.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.245]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.245]        // while-condition  =>  TRUE
[23:13:42.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.247]        // while-condition  =>  TRUE
[23:13:42.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.249]        // while-condition  =>  TRUE
[23:13:42.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.251]        // while-condition  =>  TRUE
[23:13:42.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.253]        // while-condition  =>  TRUE
[23:13:42.253]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.254]        // while-condition  =>  TRUE
[23:13:42.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.256]        // while-condition  =>  TRUE
[23:13:42.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.259]        // while-condition  =>  TRUE
[23:13:42.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.263]        // while-condition  =>  TRUE
[23:13:42.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.265]        // while-condition  =>  TRUE
[23:13:42.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.266]        // while-condition  =>  TRUE
[23:13:42.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.268]        // while-condition  =>  TRUE
[23:13:42.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.271]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.271]        // while-condition  =>  TRUE
[23:13:42.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.279]        // while-condition  =>  TRUE
[23:13:42.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.283]        // while-condition  =>  TRUE
[23:13:42.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.288]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.288]        // while-condition  =>  TRUE
[23:13:42.288]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.289]        // while-condition  =>  TRUE
[23:13:42.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.291]        // while-condition  =>  TRUE
[23:13:42.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.292]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.292]        // while-condition  =>  TRUE
[23:13:42.293]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.296]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.296]        // while-condition  =>  TRUE
[23:13:42.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.303]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.303]        // while-condition  =>  TRUE
[23:13:42.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.305]        // while-condition  =>  TRUE
[23:13:42.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.313]        // while-condition  =>  TRUE
[23:13:42.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.315]        // while-condition  =>  TRUE
[23:13:42.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.316]        // while-condition  =>  TRUE
[23:13:42.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.318]        // while-condition  =>  TRUE
[23:13:42.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.320]        // while-condition  =>  TRUE
[23:13:42.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.325]        // while-condition  =>  TRUE
[23:13:42.325]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.327]        // while-condition  =>  TRUE
[23:13:42.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.330]        // while-condition  =>  TRUE
[23:13:42.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.335]        // while-condition  =>  TRUE
[23:13:42.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.336]        // while-condition  =>  TRUE
[23:13:42.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.338]        // while-condition  =>  TRUE
[23:13:42.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.345]        // while-condition  =>  TRUE
[23:13:42.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.348]        // while-condition  =>  TRUE
[23:13:42.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.349]        // while-condition  =>  TRUE
[23:13:42.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.351]        // while-condition  =>  TRUE
[23:13:42.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.353]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.353]        // while-condition  =>  TRUE
[23:13:42.353]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.355]        // while-condition  =>  TRUE
[23:13:42.356]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.357]        // while-condition  =>  TRUE
[23:13:42.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.361]        // while-condition  =>  TRUE
[23:13:42.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.368]        // while-condition  =>  TRUE
[23:13:42.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.371]        // while-condition  =>  TRUE
[23:13:42.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.372]        // while-condition  =>  TRUE
[23:13:42.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.374]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.374]        // while-condition  =>  TRUE
[23:13:42.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.377]        // while-condition  =>  TRUE
[23:13:42.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.379]        // while-condition  =>  TRUE
[23:13:42.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.381]        // while-condition  =>  TRUE
[23:13:42.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.383]        // while-condition  =>  TRUE
[23:13:42.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.386]        // while-condition  =>  TRUE
[23:13:42.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.388]        // while-condition  =>  TRUE
[23:13:42.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.391]        // while-condition  =>  TRUE
[23:13:42.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.393]        // while-condition  =>  TRUE
[23:13:42.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.396]        // while-condition  =>  TRUE
[23:13:42.396]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.397]        // while-condition  =>  TRUE
[23:13:42.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.403]        // while-condition  =>  TRUE
[23:13:42.403]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.405]        // while-condition  =>  TRUE
[23:13:42.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.406]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.407]        // while-condition  =>  TRUE
[23:13:42.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.409]        // while-condition  =>  TRUE
[23:13:42.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.416]        // while-condition  =>  TRUE
[23:13:42.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.419]        // while-condition  =>  TRUE
[23:13:42.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.421]        // while-condition  =>  TRUE
[23:13:42.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.426]        // while-condition  =>  TRUE
[23:13:42.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.428]        // while-condition  =>  TRUE
[23:13:42.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.430]        // while-condition  =>  TRUE
[23:13:42.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.432]        // while-condition  =>  TRUE
[23:13:42.432]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.433]        // while-condition  =>  TRUE
[23:13:42.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.435]        // while-condition  =>  TRUE
[23:13:42.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.436]        // while-condition  =>  TRUE
[23:13:42.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.438]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.438]        // while-condition  =>  TRUE
[23:13:42.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.440]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.440]        // while-condition  =>  TRUE
[23:13:42.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.442]        // while-condition  =>  TRUE
[23:13:42.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.443]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.443]        // while-condition  =>  TRUE
[23:13:42.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.445]        // while-condition  =>  TRUE
[23:13:42.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.451]        // while-condition  =>  TRUE
[23:13:42.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.452]        // while-condition  =>  TRUE
[23:13:42.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.454]        // while-condition  =>  TRUE
[23:13:42.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.457]        // while-condition  =>  TRUE
[23:13:42.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.459]        // while-condition  =>  TRUE
[23:13:42.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.461]        // while-condition  =>  TRUE
[23:13:42.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.465]        // while-condition  =>  TRUE
[23:13:42.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.469]        // while-condition  =>  TRUE
[23:13:42.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.475]        // while-condition  =>  TRUE
[23:13:42.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.477]        // while-condition  =>  TRUE
[23:13:42.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.479]        // while-condition  =>  TRUE
[23:13:42.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.481]        // while-condition  =>  TRUE
[23:13:42.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.483]        // while-condition  =>  TRUE
[23:13:42.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.484]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.484]        // while-condition  =>  TRUE
[23:13:42.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.488]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.489]        // while-condition  =>  TRUE
[23:13:42.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.490]        // while-condition  =>  TRUE
[23:13:42.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.492]        // while-condition  =>  TRUE
[23:13:42.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.494]        // while-condition  =>  TRUE
[23:13:42.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.496]        // while-condition  =>  TRUE
[23:13:42.496]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.498]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.498]        // while-condition  =>  TRUE
[23:13:42.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.502]        // while-condition  =>  TRUE
[23:13:42.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.506]        // while-condition  =>  TRUE
[23:13:42.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.511]        // while-condition  =>  TRUE
[23:13:42.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.512]        // while-condition  =>  TRUE
[23:13:42.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.518]        // while-condition  =>  TRUE
[23:13:42.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.519]        // while-condition  =>  TRUE
[23:13:42.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.520]        // while-condition  =>  TRUE
[23:13:42.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.522]        // while-condition  =>  TRUE
[23:13:42.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.527]        // while-condition  =>  TRUE
[23:13:42.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.530]        // while-condition  =>  TRUE
[23:13:42.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.536]        // while-condition  =>  TRUE
[23:13:42.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.538]        // while-condition  =>  TRUE
[23:13:42.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.541]        // while-condition  =>  TRUE
[23:13:42.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.542]        // while-condition  =>  TRUE
[23:13:42.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.543]        // while-condition  =>  TRUE
[23:13:42.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.546]        // while-condition  =>  TRUE
[23:13:42.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.548]        // while-condition  =>  TRUE
[23:13:42.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.550]        // while-condition  =>  TRUE
[23:13:42.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.552]        // while-condition  =>  TRUE
[23:13:42.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.554]        // while-condition  =>  TRUE
[23:13:42.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.559]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.559]        // while-condition  =>  TRUE
[23:13:42.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.561]        // while-condition  =>  TRUE
[23:13:42.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.563]        // while-condition  =>  TRUE
[23:13:42.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.566]        // while-condition  =>  TRUE
[23:13:42.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.575]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.575]        // while-condition  =>  TRUE
[23:13:42.575]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.577]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.577]        // while-condition  =>  TRUE
[23:13:42.577]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.582]        // while-condition  =>  TRUE
[23:13:42.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.586]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.586]        // while-condition  =>  TRUE
[23:13:42.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.588]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.588]        // while-condition  =>  TRUE
[23:13:42.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.591]        // while-condition  =>  TRUE
[23:13:42.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.593]        // while-condition  =>  TRUE
[23:13:42.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.595]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.595]        // while-condition  =>  TRUE
[23:13:42.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.599]        // while-condition  =>  TRUE
[23:13:42.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.604]        // while-condition  =>  TRUE
[23:13:42.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.612]        // while-condition  =>  TRUE
[23:13:42.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.614]        // while-condition  =>  TRUE
[23:13:42.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.616]        // while-condition  =>  TRUE
[23:13:42.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.617]        // while-condition  =>  TRUE
[23:13:42.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.624]        // while-condition  =>  TRUE
[23:13:42.624]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.625]        // while-condition  =>  TRUE
[23:13:42.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.627]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.627]        // while-condition  =>  TRUE
[23:13:42.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.630]        // while-condition  =>  TRUE
[23:13:42.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.632]        // while-condition  =>  TRUE
[23:13:42.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.634]        // while-condition  =>  TRUE
[23:13:42.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.636]        // while-condition  =>  TRUE
[23:13:42.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.638]        // while-condition  =>  TRUE
[23:13:42.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.642]        // while-condition  =>  TRUE
[23:13:42.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.643]        // while-condition  =>  TRUE
[23:13:42.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.645]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.645]        // while-condition  =>  TRUE
[23:13:42.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.652]        // while-condition  =>  TRUE
[23:13:42.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.654]        // while-condition  =>  TRUE
[23:13:42.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.658]        // while-condition  =>  TRUE
[23:13:42.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.661]        // while-condition  =>  TRUE
[23:13:42.662]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.664]        // while-condition  =>  TRUE
[23:13:42.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.665]        // while-condition  =>  TRUE
[23:13:42.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.669]        // while-condition  =>  TRUE
[23:13:42.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.673]        // while-condition  =>  TRUE
[23:13:42.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.675]        // while-condition  =>  TRUE
[23:13:42.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.677]        // while-condition  =>  TRUE
[23:13:42.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.678]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.679]        // while-condition  =>  TRUE
[23:13:42.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.680]        // while-condition  =>  TRUE
[23:13:42.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.685]        // while-condition  =>  TRUE
[23:13:42.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.687]        // while-condition  =>  TRUE
[23:13:42.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.688]        // while-condition  =>  TRUE
[23:13:42.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.696]        // while-condition  =>  TRUE
[23:13:42.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.698]        // while-condition  =>  TRUE
[23:13:42.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.700]        // while-condition  =>  TRUE
[23:13:42.700]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.703]        // while-condition  =>  TRUE
[23:13:42.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.706]        // while-condition  =>  TRUE
[23:13:42.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.711]        // while-condition  =>  TRUE
[23:13:42.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.713]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.713]        // while-condition  =>  TRUE
[23:13:42.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.714]        // while-condition  =>  TRUE
[23:13:42.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.718]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.718]        // while-condition  =>  TRUE
[23:13:42.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.723]        // while-condition  =>  TRUE
[23:13:42.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.726]        // while-condition  =>  TRUE
[23:13:42.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.728]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.728]        // while-condition  =>  TRUE
[23:13:42.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.730]        // while-condition  =>  TRUE
[23:13:42.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.734]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.734]        // while-condition  =>  TRUE
[23:13:42.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.736]        // while-condition  =>  TRUE
[23:13:42.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.738]        // while-condition  =>  TRUE
[23:13:42.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.740]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.740]        // while-condition  =>  TRUE
[23:13:42.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.742]        // while-condition  =>  TRUE
[23:13:42.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.745]        // while-condition  =>  TRUE
[23:13:42.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.747]        // while-condition  =>  TRUE
[23:13:42.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.748]        // while-condition  =>  TRUE
[23:13:42.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.752]        // while-condition  =>  TRUE
[23:13:42.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.753]        // while-condition  =>  TRUE
[23:13:42.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.762]        // while-condition  =>  TRUE
[23:13:42.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.764]        // while-condition  =>  TRUE
[23:13:42.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.770]        // while-condition  =>  TRUE
[23:13:42.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.773]        // while-condition  =>  TRUE
[23:13:42.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.775]        // while-condition  =>  TRUE
[23:13:42.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.779]        // while-condition  =>  TRUE
[23:13:42.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.782]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.782]        // while-condition  =>  TRUE
[23:13:42.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.783]        // while-condition  =>  TRUE
[23:13:42.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.786]        // while-condition  =>  TRUE
[23:13:42.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.788]        // while-condition  =>  TRUE
[23:13:42.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.790]        // while-condition  =>  TRUE
[23:13:42.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.792]        // while-condition  =>  TRUE
[23:13:42.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.795]        // while-condition  =>  TRUE
[23:13:42.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.797]        // while-condition  =>  TRUE
[23:13:42.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.799]        // while-condition  =>  TRUE
[23:13:42.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.801]        // while-condition  =>  TRUE
[23:13:42.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.802]        // while-condition  =>  TRUE
[23:13:42.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.804]        // while-condition  =>  TRUE
[23:13:42.804]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.806]        // while-condition  =>  TRUE
[23:13:42.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.809]        // while-condition  =>  TRUE
[23:13:42.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.813]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.813]        // while-condition  =>  TRUE
[23:13:42.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.815]        // while-condition  =>  TRUE
[23:13:42.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.823]        // while-condition  =>  TRUE
[23:13:42.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.828]        // while-condition  =>  TRUE
[23:13:42.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.830]        // while-condition  =>  TRUE
[23:13:42.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.832]        // while-condition  =>  TRUE
[23:13:42.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.834]        // while-condition  =>  TRUE
[23:13:42.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.837]        // while-condition  =>  TRUE
[23:13:42.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.842]        // while-condition  =>  TRUE
[23:13:42.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.844]        // while-condition  =>  TRUE
[23:13:42.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.849]        // while-condition  =>  TRUE
[23:13:42.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.850]        // while-condition  =>  TRUE
[23:13:42.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.852]        // while-condition  =>  TRUE
[23:13:42.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.857]        // while-condition  =>  TRUE
[23:13:42.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.859]        // while-condition  =>  TRUE
[23:13:42.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.861]        // while-condition  =>  TRUE
[23:13:42.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.863]        // while-condition  =>  TRUE
[23:13:42.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.864]        // while-condition  =>  TRUE
[23:13:42.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.867]        // while-condition  =>  TRUE
[23:13:42.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.868]        // while-condition  =>  TRUE
[23:13:42.868]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.872]        // while-condition  =>  TRUE
[23:13:42.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.874]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.874]        // while-condition  =>  TRUE
[23:13:42.874]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.879]        // while-condition  =>  TRUE
[23:13:42.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.881]        // while-condition  =>  TRUE
[23:13:42.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.882]        // while-condition  =>  TRUE
[23:13:42.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.885]        // while-condition  =>  TRUE
[23:13:42.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.887]        // while-condition  =>  TRUE
[23:13:42.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.890]        // while-condition  =>  TRUE
[23:13:42.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.891]        // while-condition  =>  TRUE
[23:13:42.891]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.894]        // while-condition  =>  TRUE
[23:13:42.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.897]        // while-condition  =>  TRUE
[23:13:42.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.900]        // while-condition  =>  TRUE
[23:13:42.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.907]        // while-condition  =>  TRUE
[23:13:42.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.909]        // while-condition  =>  TRUE
[23:13:42.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.911]        // while-condition  =>  TRUE
[23:13:42.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.915]        // while-condition  =>  TRUE
[23:13:42.915]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.922]        // while-condition  =>  TRUE
[23:13:42.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.925]        // while-condition  =>  TRUE
[23:13:42.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.928]        // while-condition  =>  TRUE
[23:13:42.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.931]        // while-condition  =>  TRUE
[23:13:42.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.932]        // while-condition  =>  TRUE
[23:13:42.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.940]        // while-condition  =>  TRUE
[23:13:42.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.942]        // while-condition  =>  TRUE
[23:13:42.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.943]        // while-condition  =>  TRUE
[23:13:42.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.945]        // while-condition  =>  TRUE
[23:13:42.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.950]        // while-condition  =>  TRUE
[23:13:42.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.953]        // while-condition  =>  TRUE
[23:13:42.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.955]        // while-condition  =>  TRUE
[23:13:42.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.957]        // while-condition  =>  TRUE
[23:13:42.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.960]        // while-condition  =>  TRUE
[23:13:42.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.972]        // while-condition  =>  TRUE
[23:13:42.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.978]        // while-condition  =>  TRUE
[23:13:42.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.983]        // while-condition  =>  TRUE
[23:13:42.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.985]        // while-condition  =>  TRUE
[23:13:42.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.987]        // while-condition  =>  TRUE
[23:13:42.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.988]        // while-condition  =>  TRUE
[23:13:42.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.992]        // while-condition  =>  TRUE
[23:13:42.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.994]        // while-condition  =>  TRUE
[23:13:42.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.996]        // while-condition  =>  TRUE
[23:13:42.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:42.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:42.998]        // while-condition  =>  TRUE
[23:13:42.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.000]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.000]        // while-condition  =>  TRUE
[23:13:43.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.002]        // while-condition  =>  TRUE
[23:13:43.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.004]        // while-condition  =>  TRUE
[23:13:43.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.006]        // while-condition  =>  TRUE
[23:13:43.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.007]        // while-condition  =>  TRUE
[23:13:43.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.012]        // while-condition  =>  TRUE
[23:13:43.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.018]        // while-condition  =>  TRUE
[23:13:43.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.020]        // while-condition  =>  TRUE
[23:13:43.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.022]        // while-condition  =>  TRUE
[23:13:43.022]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.026]        // while-condition  =>  TRUE
[23:13:43.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.029]        // while-condition  =>  TRUE
[23:13:43.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.032]        // while-condition  =>  TRUE
[23:13:43.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.033]        // while-condition  =>  TRUE
[23:13:43.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.036]        // while-condition  =>  TRUE
[23:13:43.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.039]        // while-condition  =>  TRUE
[23:13:43.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.042]        // while-condition  =>  TRUE
[23:13:43.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.047]        // while-condition  =>  TRUE
[23:13:43.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.053]        // while-condition  =>  TRUE
[23:13:43.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.054]        // while-condition  =>  TRUE
[23:13:43.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.057]        // while-condition  =>  TRUE
[23:13:43.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.059]        // while-condition  =>  TRUE
[23:13:43.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.060]        // while-condition  =>  TRUE
[23:13:43.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.062]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.062]        // while-condition  =>  TRUE
[23:13:43.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.065]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.066]        // while-condition  =>  TRUE
[23:13:43.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.067]        // while-condition  =>  TRUE
[23:13:43.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.071]        // while-condition  =>  TRUE
[23:13:43.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.073]        // while-condition  =>  TRUE
[23:13:43.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.075]        // while-condition  =>  TRUE
[23:13:43.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.078]        // while-condition  =>  TRUE
[23:13:43.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:13:43.082]        // while-condition  =>  TRUE
[23:13:43.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:43.082]        // while  =>  TIMEOUT
[23:13:43.082]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:13:43.082]      </control>
[23:13:43.082]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:13:43.082]        // if-block "(__protocol & 0xFFFF) == 1"
[23:13:43.082]          // =>  FALSE
[23:13:43.083]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:13:43.083]      </control>
[23:13:43.083]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:13:43.083]        // if-block "(__protocol & 0xFFFF) == 2"
[23:13:43.083]          // =>  TRUE
[23:13:43.083]        <block atomic="false" info="">
[23:13:43.083]          Message(0, "executing SWD power up");
[23:13:43.087]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:13:43.093]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:13:43.094]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:13:43.095]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:13:43.095]        </block>
[23:13:43.095]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:13:43.096]      </control>
[23:13:43.096]      // end if-block "powered_down"
[23:13:43.096]    </control>
[23:13:43.096]    <block atomic="false" info="">
[23:13:43.096]      __var DEBUG_PORT_VAL    = 0;
[23:13:43.096]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:13:43.096]      __var ACCESS_POINT_VAL  = 0;
[23:13:43.096]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:13:43.097]      __ap = 1; 
[23:13:43.097]        // -> [__ap <= 0x00000001]
[23:13:43.097]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:13:43.117]  
[23:13:43.117]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[23:13:43.117]  
[23:13:43.119]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:13:43.121]    </block>
[23:13:43.121]  </sequence>
[23:13:43.121]  
[23:13:51.488]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:13:51.488]  
[23:13:51.496]  <debugvars>
[23:13:51.496]    // Pre-defined
[23:13:51.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:51.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:51.496]    __dp=0x00000000
[23:13:51.496]    __ap=0x00000000
[23:13:51.496]    __traceout=0x00000000      (Trace Disabled)
[23:13:51.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:51.497]    __FlashAddr=0x00000000
[23:13:51.497]    __FlashLen=0x00000000
[23:13:51.497]    __FlashArg=0x00000000
[23:13:51.497]    __FlashOp=0x00000000
[23:13:51.497]    __Result=0x00000000
[23:13:51.497]  </debugvars>
[23:13:51.498]  
[23:13:51.498]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:13:51.498]    <block atomic="false" info="">
[23:13:51.498]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:13:51.498]        // -> [isSWJ <= 0x00000001]
[23:13:51.498]      __var hasDormant = __protocol & 0x00020000;
[23:13:51.498]        // -> [hasDormant <= 0x00000000]
[23:13:51.498]      __var protType   = __protocol & 0x0000FFFF;
[23:13:51.499]        // -> [protType <= 0x00000002]
[23:13:51.499]    </block>
[23:13:51.499]    <control if="protType == 1" while="" timeout="0" info="">
[23:13:51.499]      // if-block "protType == 1"
[23:13:51.499]        // =>  FALSE
[23:13:51.499]      // skip if-block "protType == 1"
[23:13:51.499]    </control>
[23:13:51.499]    <control if="protType == 2" while="" timeout="0" info="">
[23:13:51.499]      // if-block "protType == 2"
[23:13:51.500]        // =>  TRUE
[23:13:51.500]      <control if="isSWJ" while="" timeout="0" info="">
[23:13:51.500]        // if-block "isSWJ"
[23:13:51.500]          // =>  TRUE
[23:13:51.500]        <control if="hasDormant" while="" timeout="0" info="">
[23:13:51.500]          // if-block "hasDormant"
[23:13:51.500]            // =>  FALSE
[23:13:51.500]          // skip if-block "hasDormant"
[23:13:51.500]        </control>
[23:13:51.500]        <control if="!hasDormant" while="" timeout="0" info="">
[23:13:51.500]          // if-block "!hasDormant"
[23:13:51.501]            // =>  TRUE
[23:13:51.501]          <block atomic="false" info="">
[23:13:51.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:13:51.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:51.503]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:13:51.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:13:51.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:13:51.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:51.506]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:13:51.512]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:13:51.512]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:13:51.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:51.516]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:13:51.520]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:13:51.520]          </block>
[23:13:51.520]          // end if-block "!hasDormant"
[23:13:51.520]        </control>
[23:13:51.520]        // end if-block "isSWJ"
[23:13:51.521]      </control>
[23:13:51.521]      <control if="!isSWJ" while="" timeout="0" info="">
[23:13:51.521]        // if-block "!isSWJ"
[23:13:51.521]          // =>  FALSE
[23:13:51.521]        // skip if-block "!isSWJ"
[23:13:51.521]      </control>
[23:13:51.521]      <block atomic="false" info="">
[23:13:51.521]        ReadDP(0x0);
[23:13:51.529]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:13:51.529]      </block>
[23:13:51.530]      // end if-block "protType == 2"
[23:13:51.530]    </control>
[23:13:51.530]  </sequence>
[23:13:51.530]  
[23:13:51.533]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:13:51.533]  
[23:13:51.533]  <debugvars>
[23:13:51.533]    // Pre-defined
[23:13:51.533]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:51.533]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:51.533]    __dp=0x00000000
[23:13:51.533]    __ap=0x00000000
[23:13:51.533]    __traceout=0x00000000      (Trace Disabled)
[23:13:51.533]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:51.534]    __FlashAddr=0x00000000
[23:13:51.534]    __FlashLen=0x00000000
[23:13:51.534]    __FlashArg=0x00000000
[23:13:51.534]    __FlashOp=0x00000000
[23:13:51.534]    __Result=0x00000000
[23:13:51.534]  </debugvars>
[23:13:51.534]  
[23:13:51.535]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:13:51.535]    <block atomic="false" info="">
[23:13:51.535]      __var SW_DP_ABORT       = 0x0;
[23:13:51.535]        // -> [SW_DP_ABORT <= 0x00000000]
[23:13:51.535]      __var DP_CTRL_STAT      = 0x4;
[23:13:51.535]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:13:51.535]      __var DP_SELECT         = 0x8;
[23:13:51.536]        // -> [DP_SELECT <= 0x00000008]
[23:13:51.536]      __var powered_down      = 0;
[23:13:51.536]        // -> [powered_down <= 0x00000000]
[23:13:51.536]      WriteDP(DP_SELECT, 0x00000000);
[23:13:51.537]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:13:51.538]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:13:51.541]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:13:51.541]        // -> [powered_down <= 0x00000001]
[23:13:51.541]    </block>
[23:13:51.541]    <control if="powered_down" while="" timeout="0" info="">
[23:13:51.542]      // if-block "powered_down"
[23:13:51.542]        // =>  TRUE
[23:13:51.542]      <block atomic="false" info="">
[23:13:51.542]        Message(0, "Debug/System power-up request sent");
[23:13:51.545]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:13:51.548]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:13:51.548]      </block>
[23:13:51.548]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:13:51.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:51.550]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:13:51.550]        // while-condition  =>  FALSE
[23:13:51.550]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:13:51.550]      </control>
[23:13:51.551]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:13:51.551]        // if-block "(__protocol & 0xFFFF) == 1"
[23:13:51.551]          // =>  FALSE
[23:13:51.551]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:13:51.551]      </control>
[23:13:51.551]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:13:51.552]        // if-block "(__protocol & 0xFFFF) == 2"
[23:13:51.552]          // =>  TRUE
[23:13:51.552]        <block atomic="false" info="">
[23:13:51.552]          Message(0, "executing SWD power up");
[23:13:51.554]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:13:51.557]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:13:51.557]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:13:51.561]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:13:51.562]        </block>
[23:13:51.562]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:13:51.562]      </control>
[23:13:51.562]      // end if-block "powered_down"
[23:13:51.562]    </control>
[23:13:51.563]    <block atomic="false" info="">
[23:13:51.563]      __var DEBUG_PORT_VAL    = 0;
[23:13:51.563]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:13:51.563]      __var ACCESS_POINT_VAL  = 0;
[23:13:51.563]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:13:51.563]      __ap = 1; 
[23:13:51.563]        // -> [__ap <= 0x00000001]
[23:13:51.563]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:13:51.569]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:13:51.569]      __ap = 4;
[23:13:51.570]        // -> [__ap <= 0x00000004]
[23:13:51.571]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:13:51.581]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:13:51.581]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:13:51.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:13:51.584]    </block>
[23:13:51.584]    <block atomic="false" info="">
[23:13:51.584]      __var nReset = 0x80;
[23:13:51.585]        // -> [nReset <= 0x00000080]
[23:13:51.585]      __var canReadPins = 0;
[23:13:51.585]        // -> [canReadPins <= 0x00000000]
[23:13:51.585]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:13:51.589]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:13:51.589]        // -> [canReadPins <= 0x00000001]
[23:13:51.589]    </block>
[23:13:51.589]    <control if="" while="1" timeout="200" info="">
[23:13:51.589]      // while "1"  (timeout="200")
[23:13:51.589]      // while-condition  =>  TRUE
[23:13:51.589]      // while "1"  (timeout="200")
[23:13:51.590]      // while-condition  =>  TRUE
[23:13:51.590]      // while "1"  (timeout="200")
[23:13:51.590]      // while-condition  =>  TRUE
[23:13:51.590]      // while "1"  (timeout="200")
[23:13:51.590]      // while-condition  =>  TRUE
[23:13:51.591]      // while "1"  (timeout="200")
[23:13:51.591]      // while-condition  =>  TRUE
[23:13:51.591]      // while "1"  (timeout="200")
[23:13:51.591]      // while-condition  =>  TRUE
[23:13:51.591]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.592]      // while-condition  =>  TRUE
[23:13:51.592]      // while "1"  (timeout="200")
[23:13:51.593]      // while-condition  =>  TRUE
[23:13:51.593]      // while "1"  (timeout="200")
[23:13:51.593]      // while-condition  =>  TRUE
[23:13:51.593]      // while "1"  (timeout="200")
[23:13:51.593]      // while-condition  =>  TRUE
[23:13:51.593]      // while "1"  (timeout="200")
[23:13:51.593]      // while-condition  =>  TRUE
[23:13:51.593]      // while "1"  (timeout="200")
[23:13:51.593]      // while-condition  =>  TRUE
[23:13:51.593]      // while "1"  (timeout="200")
[23:13:51.593]      // while-condition  =>  TRUE
[23:13:51.593]      // while "1"  (timeout="200")
[23:13:51.595]      // while-condition  =>  TRUE
[23:13:51.595]      // while "1"  (timeout="200")
[23:13:51.595]      // while  =>  TIMEOUT
[23:13:51.595]      // end while "1"
[23:13:51.595]    </control>
[23:13:51.595]    <control if="canReadPins" while="" timeout="0" info="">
[23:13:51.595]      // if-block "canReadPins"
[23:13:51.595]        // =>  TRUE
[23:13:51.595]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:13:51.595]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:13:51.597]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:13:51.597]        // while-condition  =>  FALSE
[23:13:51.597]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:13:51.597]      </control>
[23:13:51.597]      // end if-block "canReadPins"
[23:13:51.597]    </control>
[23:13:51.597]    <control if="!canReadPins" while="" timeout="0" info="">
[23:13:51.597]      // if-block "!canReadPins"
[23:13:51.597]        // =>  FALSE
[23:13:51.598]      // skip if-block "!canReadPins"
[23:13:51.598]    </control>
[23:13:51.598]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:13:51.598]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:13:51.598]        // =>  TRUE
[23:13:51.598]      <block atomic="false" info="">
[23:13:51.598]        WriteAP(0x00, 0x190008);
[23:13:51.601]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:13:51.601]        WriteAP(0xF0, 0x01);
[23:13:51.609]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:13:51.609]      </block>
[23:13:51.609]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:13:51.609]    </control>
[23:13:51.609]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:13:51.609]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:13:51.610]        // =>  FALSE
[23:13:51.610]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:13:51.610]    </control>
[23:13:51.610]    <block atomic="false" info="">
[23:13:51.610]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:13:51.616]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:13:51.616]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:13:51.616]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:13:51.618]      __ap = 0; //lets make sure we reset the access point selection
[23:13:51.618]        // -> [__ap <= 0x00000000]
[23:13:51.618]    </block>
[23:13:51.618]  </sequence>
[23:13:51.618]  
[23:13:51.656]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:13:51.656]  
[23:13:51.656]  <debugvars>
[23:13:51.656]    // Pre-defined
[23:13:51.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:51.656]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:51.656]    __dp=0x00000000
[23:13:51.656]    __ap=0x00000000
[23:13:51.656]    __traceout=0x00000000      (Trace Disabled)
[23:13:51.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:51.656]    __FlashAddr=0x00000000
[23:13:51.656]    __FlashLen=0x00000000
[23:13:51.656]    __FlashArg=0x00000000
[23:13:51.656]    __FlashOp=0x00000000
[23:13:51.658]    __Result=0x00000000
[23:13:51.658]  </debugvars>
[23:13:51.658]  
[23:13:51.658]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:13:51.658]    <block atomic="false" info="">
[23:13:51.659]      __var deviceID = 0;
[23:13:51.659]        // -> [deviceID <= 0x00000000]
[23:13:51.659]      __var version = 0;
[23:13:51.659]        // -> [version <= 0x00000000]
[23:13:51.659]      __var partNum = 0;
[23:13:51.659]        // -> [partNum <= 0x00000000]
[23:13:51.659]      __var manuf = 0;
[23:13:51.660]        // -> [manuf <= 0x00000000]
[23:13:51.660]      __var isMSPM0G1X0X_G3X0X = 0;
[23:13:51.660]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:13:51.660]      __var isProduction = 0;
[23:13:51.660]        // -> [isProduction <= 0x00000000]
[23:13:51.660]      __var continueId = 0;
[23:13:51.660]        // -> [continueId <= 0x00000000]
[23:13:51.660]      deviceID =   Read32(0x41C40004);
[23:13:51.665]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:13:51.665]        // -> [deviceID <= 0x2BB8802F]
[23:13:51.665]      version = deviceID >> 28;
[23:13:51.665]        // -> [version <= 0x00000002]
[23:13:51.665]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:13:51.665]        // -> [partNum <= 0x0000BB88]
[23:13:51.665]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:13:51.665]        // -> [manuf <= 0x00000017]
[23:13:51.665]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:13:51.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:13:51.666]      isProduction = (version > 0);
[23:13:51.666]        // -> [isProduction <= 0x00000001]
[23:13:51.666]    </block>
[23:13:51.666]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:13:51.666]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:13:51.666]        // =>  FALSE
[23:13:51.666]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:13:51.666]    </control>
[23:13:51.666]    <control if="continueId == 4" while="" timeout="0" info="">
[23:13:51.667]      // if-block "continueId == 4"
[23:13:51.667]        // =>  FALSE
[23:13:51.667]      // skip if-block "continueId == 4"
[23:13:51.667]    </control>
[23:13:51.667]    <control if="!isProduction" while="" timeout="0" info="">
[23:13:51.667]      // if-block "!isProduction"
[23:13:51.667]        // =>  FALSE
[23:13:51.667]      // skip if-block "!isProduction"
[23:13:51.667]    </control>
[23:13:51.667]  </sequence>
[23:13:51.667]  
[23:14:40.187]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:14:40.187]  
[23:14:40.188]  <debugvars>
[23:14:40.188]    // Pre-defined
[23:14:40.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:40.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:14:40.188]    __dp=0x00000000
[23:14:40.188]    __ap=0x00000000
[23:14:40.188]    __traceout=0x00000000      (Trace Disabled)
[23:14:40.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:40.188]    __FlashAddr=0x00000000
[23:14:40.190]    __FlashLen=0x00000000
[23:14:40.190]    __FlashArg=0x00000000
[23:14:40.190]    __FlashOp=0x00000000
[23:14:40.190]    __Result=0x00000000
[23:14:40.190]  </debugvars>
[23:14:40.190]  
[23:14:40.190]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:14:40.190]    <block atomic="false" info="">
[23:14:40.191]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:14:40.191]        // -> [isSWJ <= 0x00000001]
[23:14:40.191]      __var hasDormant = __protocol & 0x00020000;
[23:14:40.191]        // -> [hasDormant <= 0x00000000]
[23:14:40.191]      __var protType   = __protocol & 0x0000FFFF;
[23:14:40.191]        // -> [protType <= 0x00000002]
[23:14:40.191]    </block>
[23:14:40.191]    <control if="protType == 1" while="" timeout="0" info="">
[23:14:40.191]      // if-block "protType == 1"
[23:14:40.191]        // =>  FALSE
[23:14:40.191]      // skip if-block "protType == 1"
[23:14:40.192]    </control>
[23:14:40.192]    <control if="protType == 2" while="" timeout="0" info="">
[23:14:40.192]      // if-block "protType == 2"
[23:14:40.192]        // =>  TRUE
[23:14:40.192]      <control if="isSWJ" while="" timeout="0" info="">
[23:14:40.192]        // if-block "isSWJ"
[23:14:40.192]          // =>  TRUE
[23:14:40.192]        <control if="hasDormant" while="" timeout="0" info="">
[23:14:40.192]          // if-block "hasDormant"
[23:14:40.192]            // =>  FALSE
[23:14:40.192]          // skip if-block "hasDormant"
[23:14:40.192]        </control>
[23:14:40.193]        <control if="!hasDormant" while="" timeout="0" info="">
[23:14:40.193]          // if-block "!hasDormant"
[23:14:40.193]            // =>  TRUE
[23:14:40.193]          <block atomic="false" info="">
[23:14:40.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:14:40.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:40.194]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:14:40.195]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:14:40.195]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:14:40.198]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:40.198]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:14:40.199]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:14:40.199]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:14:40.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:14:40.201]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:14:40.202]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:14:40.202]          </block>
[23:14:40.202]          // end if-block "!hasDormant"
[23:14:40.202]        </control>
[23:14:40.202]        // end if-block "isSWJ"
[23:14:40.202]      </control>
[23:14:40.202]      <control if="!isSWJ" while="" timeout="0" info="">
[23:14:40.202]        // if-block "!isSWJ"
[23:14:40.202]          // =>  FALSE
[23:14:40.202]        // skip if-block "!isSWJ"
[23:14:40.202]      </control>
[23:14:40.202]      <block atomic="false" info="">
[23:14:40.202]        ReadDP(0x0);
[23:14:40.206]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:14:40.206]      </block>
[23:14:40.207]      // end if-block "protType == 2"
[23:14:40.207]    </control>
[23:14:40.207]  </sequence>
[23:14:40.207]  
[23:14:40.209]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:14:40.209]  
[23:14:40.209]  <debugvars>
[23:14:40.209]    // Pre-defined
[23:14:40.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:40.210]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:14:40.210]    __dp=0x00000000
[23:14:40.210]    __ap=0x00000000
[23:14:40.210]    __traceout=0x00000000      (Trace Disabled)
[23:14:40.210]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:40.210]    __FlashAddr=0x00000000
[23:14:40.210]    __FlashLen=0x00000000
[23:14:40.210]    __FlashArg=0x00000000
[23:14:40.210]    __FlashOp=0x00000000
[23:14:40.210]    __Result=0x00000000
[23:14:40.210]  </debugvars>
[23:14:40.211]  
[23:14:40.211]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:14:40.211]    <block atomic="false" info="">
[23:14:40.211]      __var SW_DP_ABORT       = 0x0;
[23:14:40.211]        // -> [SW_DP_ABORT <= 0x00000000]
[23:14:40.211]      __var DP_CTRL_STAT      = 0x4;
[23:14:40.211]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:14:40.211]      __var DP_SELECT         = 0x8;
[23:14:40.211]        // -> [DP_SELECT <= 0x00000008]
[23:14:40.211]      __var powered_down      = 0;
[23:14:40.211]        // -> [powered_down <= 0x00000000]
[23:14:40.211]      WriteDP(DP_SELECT, 0x00000000);
[23:14:40.213]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:14:40.213]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:14:40.218]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:14:40.218]        // -> [powered_down <= 0x00000001]
[23:14:40.218]    </block>
[23:14:40.218]    <control if="powered_down" while="" timeout="0" info="">
[23:14:40.218]      // if-block "powered_down"
[23:14:40.218]        // =>  TRUE
[23:14:40.218]      <block atomic="false" info="">
[23:14:40.218]        Message(0, "Debug/System power-up request sent");
[23:14:40.221]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:14:40.223]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:14:40.223]      </block>
[23:14:40.223]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:14:40.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:14:40.225]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:14:40.225]        // while-condition  =>  FALSE
[23:14:40.225]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:14:40.225]      </control>
[23:14:40.225]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:14:40.225]        // if-block "(__protocol & 0xFFFF) == 1"
[23:14:40.225]          // =>  FALSE
[23:14:40.225]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:14:40.226]      </control>
[23:14:40.226]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:14:40.226]        // if-block "(__protocol & 0xFFFF) == 2"
[23:14:40.226]          // =>  TRUE
[23:14:40.226]        <block atomic="false" info="">
[23:14:40.226]          Message(0, "executing SWD power up");
[23:14:40.230]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:14:40.231]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:14:40.231]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:14:40.235]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:14:40.235]        </block>
[23:14:40.235]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:14:40.235]      </control>
[23:14:40.235]      // end if-block "powered_down"
[23:14:40.235]    </control>
[23:14:40.235]    <block atomic="false" info="">
[23:14:40.235]      __var DEBUG_PORT_VAL    = 0;
[23:14:40.235]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:14:40.235]      __var ACCESS_POINT_VAL  = 0;
[23:14:40.236]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:14:40.236]      __ap = 1; 
[23:14:40.236]        // -> [__ap <= 0x00000001]
[23:14:40.236]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:14:40.239]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:14:40.239]      __ap = 4;
[23:14:40.239]        // -> [__ap <= 0x00000004]
[23:14:40.239]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:14:40.244]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:14:40.244]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:14:40.244]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:14:40.246]    </block>
[23:14:40.246]    <block atomic="false" info="">
[23:14:40.247]      __var nReset = 0x80;
[23:14:40.247]        // -> [nReset <= 0x00000080]
[23:14:40.247]      __var canReadPins = 0;
[23:14:40.247]        // -> [canReadPins <= 0x00000000]
[23:14:40.247]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:14:40.248]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:14:40.248]        // -> [canReadPins <= 0x00000001]
[23:14:40.249]    </block>
[23:14:40.249]    <control if="" while="1" timeout="200" info="">
[23:14:40.249]      // while "1"  (timeout="200")
[23:14:40.249]      // while-condition  =>  TRUE
[23:14:40.249]      // while "1"  (timeout="200")
[23:14:40.249]      // while-condition  =>  TRUE
[23:14:40.249]      // while "1"  (timeout="200")
[23:14:40.249]      // while-condition  =>  TRUE
[23:14:40.249]      // while "1"  (timeout="200")
[23:14:40.249]      // while-condition  =>  TRUE
[23:14:40.249]      // while "1"  (timeout="200")
[23:14:40.250]      // while-condition  =>  TRUE
[23:14:40.250]      // while "1"  (timeout="200")
[23:14:40.250]      // while-condition  =>  TRUE
[23:14:40.250]      // while "1"  (timeout="200")
[23:14:40.250]      // while-condition  =>  TRUE
[23:14:40.250]      // while "1"  (timeout="200")
[23:14:40.250]      // while-condition  =>  TRUE
[23:14:40.250]      // while "1"  (timeout="200")
[23:14:40.251]      // while-condition  =>  TRUE
[23:14:40.251]      // while "1"  (timeout="200")
[23:14:40.251]      // while  =>  TIMEOUT
[23:14:40.251]      // end while "1"
[23:14:40.251]    </control>
[23:14:40.251]    <control if="canReadPins" while="" timeout="0" info="">
[23:14:40.252]      // if-block "canReadPins"
[23:14:40.252]        // =>  TRUE
[23:14:40.252]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:14:40.252]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:14:40.254]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:14:40.254]        // while-condition  =>  FALSE
[23:14:40.254]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:14:40.254]      </control>
[23:14:40.254]      // end if-block "canReadPins"
[23:14:40.254]    </control>
[23:14:40.255]    <control if="!canReadPins" while="" timeout="0" info="">
[23:14:40.255]      // if-block "!canReadPins"
[23:14:40.255]        // =>  FALSE
[23:14:40.255]      // skip if-block "!canReadPins"
[23:14:40.255]    </control>
[23:14:40.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:14:40.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:14:40.255]        // =>  TRUE
[23:14:40.255]      <block atomic="false" info="">
[23:14:40.255]        WriteAP(0x00, 0x190008);
[23:14:40.260]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:14:40.260]        WriteAP(0xF0, 0x01);
[23:14:40.263]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:14:40.263]      </block>
[23:14:40.263]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:14:40.264]    </control>
[23:14:40.264]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:14:40.264]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:14:40.264]        // =>  FALSE
[23:14:40.264]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:14:40.264]    </control>
[23:14:40.264]    <block atomic="false" info="">
[23:14:40.264]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:14:40.267]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:14:40.268]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:14:40.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:14:40.270]      __ap = 0; //lets make sure we reset the access point selection
[23:14:40.270]        // -> [__ap <= 0x00000000]
[23:14:40.270]    </block>
[23:14:40.270]  </sequence>
[23:14:40.270]  
[23:14:40.289]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:14:40.289]  
[23:14:40.289]  <debugvars>
[23:14:40.289]    // Pre-defined
[23:14:40.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:14:40.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:14:40.289]    __dp=0x00000000
[23:14:40.289]    __ap=0x00000000
[23:14:40.289]    __traceout=0x00000000      (Trace Disabled)
[23:14:40.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:14:40.289]    __FlashAddr=0x00000000
[23:14:40.289]    __FlashLen=0x00000000
[23:14:40.291]    __FlashArg=0x00000000
[23:14:40.291]    __FlashOp=0x00000000
[23:14:40.291]    __Result=0x00000000
[23:14:40.291]  </debugvars>
[23:14:40.291]  
[23:14:40.291]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:14:40.291]    <block atomic="false" info="">
[23:14:40.292]      __var deviceID = 0;
[23:14:40.292]        // -> [deviceID <= 0x00000000]
[23:14:40.292]      __var version = 0;
[23:14:40.292]        // -> [version <= 0x00000000]
[23:14:40.292]      __var partNum = 0;
[23:14:40.292]        // -> [partNum <= 0x00000000]
[23:14:40.292]      __var manuf = 0;
[23:14:40.292]        // -> [manuf <= 0x00000000]
[23:14:40.293]      __var isMSPM0G1X0X_G3X0X = 0;
[23:14:40.293]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:14:40.293]      __var isProduction = 0;
[23:14:40.293]        // -> [isProduction <= 0x00000000]
[23:14:40.293]      __var continueId = 0;
[23:14:40.293]        // -> [continueId <= 0x00000000]
[23:14:40.293]      deviceID =   Read32(0x41C40004);
[23:14:40.297]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:14:40.297]        // -> [deviceID <= 0x2BB8802F]
[23:14:40.297]      version = deviceID >> 28;
[23:14:40.297]        // -> [version <= 0x00000002]
[23:14:40.297]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:14:40.297]        // -> [partNum <= 0x0000BB88]
[23:14:40.297]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:14:40.297]        // -> [manuf <= 0x00000017]
[23:14:40.297]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:14:40.298]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:14:40.298]      isProduction = (version > 0);
[23:14:40.298]        // -> [isProduction <= 0x00000001]
[23:14:40.298]    </block>
[23:14:40.298]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:14:40.298]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:14:40.298]        // =>  FALSE
[23:14:40.298]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:14:40.298]    </control>
[23:14:40.298]    <control if="continueId == 4" while="" timeout="0" info="">
[23:14:40.299]      // if-block "continueId == 4"
[23:14:40.299]        // =>  FALSE
[23:14:40.299]      // skip if-block "continueId == 4"
[23:14:40.299]    </control>
[23:14:40.299]    <control if="!isProduction" while="" timeout="0" info="">
[23:14:40.299]      // if-block "!isProduction"
[23:14:40.299]        // =>  FALSE
[23:14:40.299]      // skip if-block "!isProduction"
[23:14:40.300]    </control>
[23:14:40.300]  </sequence>
[23:14:40.300]  
[23:17:09.539]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:17:09.539]  
[23:17:09.547]  <debugvars>
[23:17:09.547]    // Pre-defined
[23:17:09.547]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:17:09.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:17:09.547]    __dp=0x00000000
[23:17:09.547]    __ap=0x00000000
[23:17:09.547]    __traceout=0x00000000      (Trace Disabled)
[23:17:09.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:17:09.548]    __FlashAddr=0x00000000
[23:17:09.548]    __FlashLen=0x00000000
[23:17:09.548]    __FlashArg=0x00000000
[23:17:09.548]    __FlashOp=0x00000000
[23:17:09.548]    __Result=0x00000000
[23:17:09.548]  </debugvars>
[23:17:09.548]  
[23:17:09.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:17:09.548]    <block atomic="false" info="">
[23:17:09.548]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:17:09.548]        // -> [isSWJ <= 0x00000001]
[23:17:09.548]      __var hasDormant = __protocol & 0x00020000;
[23:17:09.548]        // -> [hasDormant <= 0x00000000]
[23:17:09.548]      __var protType   = __protocol & 0x0000FFFF;
[23:17:09.548]        // -> [protType <= 0x00000002]
[23:17:09.550]    </block>
[23:17:09.550]    <control if="protType == 1" while="" timeout="0" info="">
[23:17:09.550]      // if-block "protType == 1"
[23:17:09.550]        // =>  FALSE
[23:17:09.550]      // skip if-block "protType == 1"
[23:17:09.550]    </control>
[23:17:09.550]    <control if="protType == 2" while="" timeout="0" info="">
[23:17:09.550]      // if-block "protType == 2"
[23:17:09.550]        // =>  TRUE
[23:17:09.551]      <control if="isSWJ" while="" timeout="0" info="">
[23:17:09.551]        // if-block "isSWJ"
[23:17:09.551]          // =>  TRUE
[23:17:09.551]        <control if="hasDormant" while="" timeout="0" info="">
[23:17:09.551]          // if-block "hasDormant"
[23:17:09.551]            // =>  FALSE
[23:17:09.552]          // skip if-block "hasDormant"
[23:17:09.552]        </control>
[23:17:09.552]        <control if="!hasDormant" while="" timeout="0" info="">
[23:17:09.552]          // if-block "!hasDormant"
[23:17:09.552]            // =>  TRUE
[23:17:09.552]          <block atomic="false" info="">
[23:17:09.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:17:09.555]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:17:09.555]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:17:09.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:17:09.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:17:09.560]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:17:09.560]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:17:09.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:17:09.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:17:09.563]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:17:09.563]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:17:09.565]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:17:09.565]          </block>
[23:17:09.565]          // end if-block "!hasDormant"
[23:17:09.565]        </control>
[23:17:09.565]        // end if-block "isSWJ"
[23:17:09.565]      </control>
[23:17:09.565]      <control if="!isSWJ" while="" timeout="0" info="">
[23:17:09.565]        // if-block "!isSWJ"
[23:17:09.565]          // =>  FALSE
[23:17:09.565]        // skip if-block "!isSWJ"
[23:17:09.565]      </control>
[23:17:09.566]      <block atomic="false" info="">
[23:17:09.566]        ReadDP(0x0);
[23:17:09.567]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:17:09.567]      </block>
[23:17:09.567]      // end if-block "protType == 2"
[23:17:09.568]    </control>
[23:17:09.568]  </sequence>
[23:17:09.568]  
[23:17:09.573]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:17:09.573]  
[23:17:09.573]  <debugvars>
[23:17:09.573]    // Pre-defined
[23:17:09.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:17:09.573]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:17:09.573]    __dp=0x00000000
[23:17:09.574]    __ap=0x00000000
[23:17:09.574]    __traceout=0x00000000      (Trace Disabled)
[23:17:09.574]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:17:09.574]    __FlashAddr=0x00000000
[23:17:09.575]    __FlashLen=0x00000000
[23:17:09.575]    __FlashArg=0x00000000
[23:17:09.575]    __FlashOp=0x00000000
[23:17:09.575]    __Result=0x00000000
[23:17:09.575]  </debugvars>
[23:17:09.575]  
[23:17:09.575]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:17:09.575]    <block atomic="false" info="">
[23:17:09.575]      __var SW_DP_ABORT       = 0x0;
[23:17:09.575]        // -> [SW_DP_ABORT <= 0x00000000]
[23:17:09.575]      __var DP_CTRL_STAT      = 0x4;
[23:17:09.575]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:17:09.576]      __var DP_SELECT         = 0x8;
[23:17:09.576]        // -> [DP_SELECT <= 0x00000008]
[23:17:09.576]      __var powered_down      = 0;
[23:17:09.576]        // -> [powered_down <= 0x00000000]
[23:17:09.576]      WriteDP(DP_SELECT, 0x00000000);
[23:17:09.578]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:17:09.578]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:17:09.579]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:17:09.579]        // -> [powered_down <= 0x00000001]
[23:17:09.579]    </block>
[23:17:09.580]    <control if="powered_down" while="" timeout="0" info="">
[23:17:09.580]      // if-block "powered_down"
[23:17:09.580]        // =>  TRUE
[23:17:09.580]      <block atomic="false" info="">
[23:17:09.580]        Message(0, "Debug/System power-up request sent");
[23:17:09.580]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:17:09.582]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:17:09.582]      </block>
[23:17:09.582]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:17:09.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:17:09.584]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:17:09.584]        // while-condition  =>  FALSE
[23:17:09.584]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:17:09.584]      </control>
[23:17:09.584]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:17:09.584]        // if-block "(__protocol & 0xFFFF) == 1"
[23:17:09.585]          // =>  FALSE
[23:17:09.585]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:17:09.585]      </control>
[23:17:09.585]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:17:09.585]        // if-block "(__protocol & 0xFFFF) == 2"
[23:17:09.585]          // =>  TRUE
[23:17:09.585]        <block atomic="false" info="">
[23:17:09.585]          Message(0, "executing SWD power up");
[23:17:09.585]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:17:09.587]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:17:09.587]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:17:09.589]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:17:09.589]        </block>
[23:17:09.589]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:17:09.589]      </control>
[23:17:09.589]      // end if-block "powered_down"
[23:17:09.589]    </control>
[23:17:09.589]    <block atomic="false" info="">
[23:17:09.589]      __var DEBUG_PORT_VAL    = 0;
[23:17:09.589]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:17:09.589]      __var ACCESS_POINT_VAL  = 0;
[23:17:09.590]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:17:09.590]      __ap = 1; 
[23:17:09.590]        // -> [__ap <= 0x00000001]
[23:17:09.591]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:17:09.593]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:17:09.593]      __ap = 4;
[23:17:09.594]        // -> [__ap <= 0x00000004]
[23:17:09.594]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:17:09.599]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:17:09.599]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:17:09.599]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:17:09.599]    </block>
[23:17:09.599]    <block atomic="false" info="">
[23:17:09.599]      __var nReset = 0x80;
[23:17:09.599]        // -> [nReset <= 0x00000080]
[23:17:09.599]      __var canReadPins = 0;
[23:17:09.599]        // -> [canReadPins <= 0x00000000]
[23:17:09.600]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:17:09.601]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:17:09.601]        // -> [canReadPins <= 0x00000001]
[23:17:09.601]    </block>
[23:17:09.601]    <control if="" while="1" timeout="200" info="">
[23:17:09.602]      // while "1"  (timeout="200")
[23:17:09.602]      // while-condition  =>  TRUE
[23:17:09.602]      // while "1"  (timeout="200")
[23:17:09.602]      // while-condition  =>  TRUE
[23:17:09.602]      // while "1"  (timeout="200")
[23:17:09.602]      // while-condition  =>  TRUE
[23:17:09.602]      // while "1"  (timeout="200")
[23:17:09.602]      // while-condition  =>  TRUE
[23:17:09.602]      // while "1"  (timeout="200")
[23:17:09.602]      // while-condition  =>  TRUE
[23:17:09.602]      // while "1"  (timeout="200")
[23:17:09.602]      // while-condition  =>  TRUE
[23:17:09.603]      // while "1"  (timeout="200")
[23:17:09.603]      // while-condition  =>  TRUE
[23:17:09.603]      // while "1"  (timeout="200")
[23:17:09.603]      // while-condition  =>  TRUE
[23:17:09.603]      // while "1"  (timeout="200")
[23:17:09.603]      // while-condition  =>  TRUE
[23:17:09.603]      // while "1"  (timeout="200")
[23:17:09.603]      // while-condition  =>  TRUE
[23:17:09.603]      // while "1"  (timeout="200")
[23:17:09.603]      // while-condition  =>  TRUE
[23:17:09.603]      // while "1"  (timeout="200")
[23:17:09.604]      // while-condition  =>  TRUE
[23:17:09.604]      // while "1"  (timeout="200")
[23:17:09.604]      // while-condition  =>  TRUE
[23:17:09.604]      // while "1"  (timeout="200")
[23:17:09.604]      // while-condition  =>  TRUE
[23:17:09.604]      // while "1"  (timeout="200")
[23:17:09.604]      // while-condition  =>  TRUE
[23:17:09.604]      // while "1"  (timeout="200")
[23:17:09.604]      // while-condition  =>  TRUE
[23:17:09.604]      // while "1"  (timeout="200")
[23:17:09.604]      // while-condition  =>  TRUE
[23:17:09.605]      // while "1"  (timeout="200")
[23:17:09.605]      // while-condition  =>  TRUE
[23:17:09.605]      // while "1"  (timeout="200")
[23:17:09.605]      // while-condition  =>  TRUE
[23:17:09.605]      // while "1"  (timeout="200")
[23:17:09.605]      // while-condition  =>  TRUE
[23:17:09.605]      // while "1"  (timeout="200")
[23:17:09.605]      // while-condition  =>  TRUE
[23:17:09.605]      // while "1"  (timeout="200")
[23:17:09.605]      // while-condition  =>  TRUE
[23:17:09.605]      // while "1"  (timeout="200")
[23:17:09.606]      // while-condition  =>  TRUE
[23:17:09.606]      // while "1"  (timeout="200")
[23:17:09.606]      // while-condition  =>  TRUE
[23:17:09.606]      // while "1"  (timeout="200")
[23:17:09.606]      // while-condition  =>  TRUE
[23:17:09.606]      // while "1"  (timeout="200")
[23:17:09.606]      // while-condition  =>  TRUE
[23:17:09.606]      // while "1"  (timeout="200")
[23:17:09.606]      // while-condition  =>  TRUE
[23:17:09.606]      // while "1"  (timeout="200")
[23:17:09.606]      // while-condition  =>  TRUE
[23:17:09.607]      // while "1"  (timeout="200")
[23:17:09.607]      // while-condition  =>  TRUE
[23:17:09.607]      // while "1"  (timeout="200")
[23:17:09.607]      // while-condition  =>  TRUE
[23:17:09.607]      // while "1"  (timeout="200")
[23:17:09.607]      // while-condition  =>  TRUE
[23:17:09.607]      // while "1"  (timeout="200")
[23:17:09.607]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.608]      // while "1"  (timeout="200")
[23:17:09.608]      // while-condition  =>  TRUE
[23:17:09.610]      // while "1"  (timeout="200")
[23:17:09.610]      // while-condition  =>  TRUE
[23:17:09.610]      // while "1"  (timeout="200")
[23:17:09.610]      // while-condition  =>  TRUE
[23:17:09.610]      // while "1"  (timeout="200")
[23:17:09.610]      // while-condition  =>  TRUE
[23:17:09.610]      // while "1"  (timeout="200")
[23:17:09.610]      // while  =>  TIMEOUT
[23:17:09.610]      // end while "1"
[23:17:09.610]    </control>
[23:17:09.610]    <control if="canReadPins" while="" timeout="0" info="">
[23:17:09.610]      // if-block "canReadPins"
[23:17:09.610]        // =>  TRUE
[23:17:09.611]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:17:09.611]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:17:09.613]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:17:09.613]        // while-condition  =>  FALSE
[23:17:09.613]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:17:09.613]      </control>
[23:17:09.613]      // end if-block "canReadPins"
[23:17:09.614]    </control>
[23:17:09.614]    <control if="!canReadPins" while="" timeout="0" info="">
[23:17:09.614]      // if-block "!canReadPins"
[23:17:09.614]        // =>  FALSE
[23:17:09.614]      // skip if-block "!canReadPins"
[23:17:09.614]    </control>
[23:17:09.614]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:17:09.614]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:17:09.614]        // =>  TRUE
[23:17:09.614]      <block atomic="false" info="">
[23:17:09.615]        WriteAP(0x00, 0x190008);
[23:17:09.616]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:17:09.616]        WriteAP(0xF0, 0x01);
[23:17:09.619]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:17:09.619]      </block>
[23:17:09.619]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:17:09.620]    </control>
[23:17:09.620]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:17:09.620]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:17:09.620]        // =>  FALSE
[23:17:09.620]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:17:09.620]    </control>
[23:17:09.621]    <block atomic="false" info="">
[23:17:09.621]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:17:09.628]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:17:09.628]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:17:09.628]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:17:09.628]      __ap = 0; //lets make sure we reset the access point selection
[23:17:09.628]        // -> [__ap <= 0x00000000]
[23:17:09.628]    </block>
[23:17:09.628]  </sequence>
[23:17:09.628]  
[23:17:09.655]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:17:09.655]  
[23:17:09.655]  <debugvars>
[23:17:09.655]    // Pre-defined
[23:17:09.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:17:09.655]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:17:09.655]    __dp=0x00000000
[23:17:09.655]    __ap=0x00000000
[23:17:09.655]    __traceout=0x00000000      (Trace Disabled)
[23:17:09.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:17:09.655]    __FlashAddr=0x00000000
[23:17:09.655]    __FlashLen=0x00000000
[23:17:09.656]    __FlashArg=0x00000000
[23:17:09.656]    __FlashOp=0x00000000
[23:17:09.656]    __Result=0x00000000
[23:17:09.656]  </debugvars>
[23:17:09.656]  
[23:17:09.656]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:17:09.656]    <block atomic="false" info="">
[23:17:09.656]      __var deviceID = 0;
[23:17:09.656]        // -> [deviceID <= 0x00000000]
[23:17:09.656]      __var version = 0;
[23:17:09.656]        // -> [version <= 0x00000000]
[23:17:09.657]      __var partNum = 0;
[23:17:09.657]        // -> [partNum <= 0x00000000]
[23:17:09.657]      __var manuf = 0;
[23:17:09.657]        // -> [manuf <= 0x00000000]
[23:17:09.657]      __var isMSPM0G1X0X_G3X0X = 0;
[23:17:09.657]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:17:09.657]      __var isProduction = 0;
[23:17:09.657]        // -> [isProduction <= 0x00000000]
[23:17:09.657]      __var continueId = 0;
[23:17:09.657]        // -> [continueId <= 0x00000000]
[23:17:09.657]      deviceID =   Read32(0x41C40004);
[23:17:09.665]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:17:09.665]        // -> [deviceID <= 0x2BB8802F]
[23:17:09.665]      version = deviceID >> 28;
[23:17:09.665]        // -> [version <= 0x00000002]
[23:17:09.665]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:17:09.665]        // -> [partNum <= 0x0000BB88]
[23:17:09.665]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:17:09.665]        // -> [manuf <= 0x00000017]
[23:17:09.666]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:17:09.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:17:09.666]      isProduction = (version > 0);
[23:17:09.666]        // -> [isProduction <= 0x00000001]
[23:17:09.666]    </block>
[23:17:09.666]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:17:09.666]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:17:09.666]        // =>  FALSE
[23:17:09.667]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:17:09.667]    </control>
[23:17:09.667]    <control if="continueId == 4" while="" timeout="0" info="">
[23:17:09.667]      // if-block "continueId == 4"
[23:17:09.667]        // =>  FALSE
[23:17:09.667]      // skip if-block "continueId == 4"
[23:17:09.667]    </control>
[23:17:09.668]    <control if="!isProduction" while="" timeout="0" info="">
[23:17:09.668]      // if-block "!isProduction"
[23:17:09.668]        // =>  FALSE
[23:17:09.668]      // skip if-block "!isProduction"
[23:17:09.668]    </control>
[23:17:09.668]  </sequence>
[23:17:09.668]  
[23:18:43.761]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:18:43.761]  
[23:18:43.770]  <debugvars>
[23:18:43.770]    // Pre-defined
[23:18:43.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:18:43.770]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:18:43.770]    __dp=0x00000000
[23:18:43.770]    __ap=0x00000000
[23:18:43.770]    __traceout=0x00000000      (Trace Disabled)
[23:18:43.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:18:43.771]    __FlashAddr=0x00000000
[23:18:43.771]    __FlashLen=0x00000000
[23:18:43.771]    __FlashArg=0x00000000
[23:18:43.771]    __FlashOp=0x00000000
[23:18:43.771]    __Result=0x00000000
[23:18:43.771]  </debugvars>
[23:18:43.771]  
[23:18:43.771]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:18:43.771]    <block atomic="false" info="">
[23:18:43.772]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:18:43.772]        // -> [isSWJ <= 0x00000001]
[23:18:43.772]      __var hasDormant = __protocol & 0x00020000;
[23:18:43.772]        // -> [hasDormant <= 0x00000000]
[23:18:43.772]      __var protType   = __protocol & 0x0000FFFF;
[23:18:43.772]        // -> [protType <= 0x00000002]
[23:18:43.772]    </block>
[23:18:43.773]    <control if="protType == 1" while="" timeout="0" info="">
[23:18:43.773]      // if-block "protType == 1"
[23:18:43.773]        // =>  FALSE
[23:18:43.773]      // skip if-block "protType == 1"
[23:18:43.773]    </control>
[23:18:43.773]    <control if="protType == 2" while="" timeout="0" info="">
[23:18:43.773]      // if-block "protType == 2"
[23:18:43.773]        // =>  TRUE
[23:18:43.773]      <control if="isSWJ" while="" timeout="0" info="">
[23:18:43.773]        // if-block "isSWJ"
[23:18:43.774]          // =>  TRUE
[23:18:43.774]        <control if="hasDormant" while="" timeout="0" info="">
[23:18:43.774]          // if-block "hasDormant"
[23:18:43.774]            // =>  FALSE
[23:18:43.774]          // skip if-block "hasDormant"
[23:18:43.774]        </control>
[23:18:43.774]        <control if="!hasDormant" while="" timeout="0" info="">
[23:18:43.774]          // if-block "!hasDormant"
[23:18:43.774]            // =>  TRUE
[23:18:43.774]          <block atomic="false" info="">
[23:18:43.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:18:43.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:18:43.776]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:18:43.778]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:18:43.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:18:43.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:18:43.781]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:18:43.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:18:43.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:18:43.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:18:43.783]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:18:43.786]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:18:43.786]          </block>
[23:18:43.787]          // end if-block "!hasDormant"
[23:18:43.787]        </control>
[23:18:43.787]        // end if-block "isSWJ"
[23:18:43.787]      </control>
[23:18:43.787]      <control if="!isSWJ" while="" timeout="0" info="">
[23:18:43.787]        // if-block "!isSWJ"
[23:18:43.787]          // =>  FALSE
[23:18:43.787]        // skip if-block "!isSWJ"
[23:18:43.788]      </control>
[23:18:43.788]      <block atomic="false" info="">
[23:18:43.788]        ReadDP(0x0);
[23:18:43.789]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:18:43.790]      </block>
[23:18:43.790]      // end if-block "protType == 2"
[23:18:43.790]    </control>
[23:18:43.790]  </sequence>
[23:18:43.790]  
[23:18:43.798]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:18:43.798]  
[23:18:43.799]  <debugvars>
[23:18:43.799]    // Pre-defined
[23:18:43.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:18:43.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:18:43.799]    __dp=0x00000000
[23:18:43.799]    __ap=0x00000000
[23:18:43.799]    __traceout=0x00000000      (Trace Disabled)
[23:18:43.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:18:43.799]    __FlashAddr=0x00000000
[23:18:43.799]    __FlashLen=0x00000000
[23:18:43.799]    __FlashArg=0x00000000
[23:18:43.800]    __FlashOp=0x00000000
[23:18:43.800]    __Result=0x00000000
[23:18:43.800]  </debugvars>
[23:18:43.800]  
[23:18:43.800]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:18:43.800]    <block atomic="false" info="">
[23:18:43.800]      __var SW_DP_ABORT       = 0x0;
[23:18:43.800]        // -> [SW_DP_ABORT <= 0x00000000]
[23:18:43.800]      __var DP_CTRL_STAT      = 0x4;
[23:18:43.801]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:18:43.801]      __var DP_SELECT         = 0x8;
[23:18:43.801]        // -> [DP_SELECT <= 0x00000008]
[23:18:43.801]      __var powered_down      = 0;
[23:18:43.801]        // -> [powered_down <= 0x00000000]
[23:18:43.801]      WriteDP(DP_SELECT, 0x00000000);
[23:18:43.805]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:18:43.805]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:18:43.810]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:18:43.811]        // -> [powered_down <= 0x00000001]
[23:18:43.811]    </block>
[23:18:43.811]    <control if="powered_down" while="" timeout="0" info="">
[23:18:43.811]      // if-block "powered_down"
[23:18:43.811]        // =>  TRUE
[23:18:43.811]      <block atomic="false" info="">
[23:18:43.811]        Message(0, "Debug/System power-up request sent");
[23:18:43.813]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:18:43.815]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:18:43.815]      </block>
[23:18:43.815]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:18:43.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:18:43.818]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:18:43.818]        // while-condition  =>  FALSE
[23:18:43.818]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:18:43.818]      </control>
[23:18:43.818]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:18:43.818]        // if-block "(__protocol & 0xFFFF) == 1"
[23:18:43.819]          // =>  FALSE
[23:18:43.819]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:18:43.819]      </control>
[23:18:43.819]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:18:43.820]        // if-block "(__protocol & 0xFFFF) == 2"
[23:18:43.820]          // =>  TRUE
[23:18:43.820]        <block atomic="false" info="">
[23:18:43.820]          Message(0, "executing SWD power up");
[23:18:43.823]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:18:43.825]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:18:43.825]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:18:43.827]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:18:43.827]        </block>
[23:18:43.827]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:18:43.827]      </control>
[23:18:43.827]      // end if-block "powered_down"
[23:18:43.827]    </control>
[23:18:43.828]    <block atomic="false" info="">
[23:18:43.828]      __var DEBUG_PORT_VAL    = 0;
[23:18:43.828]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:18:43.828]      __var ACCESS_POINT_VAL  = 0;
[23:18:43.828]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:18:43.828]      __ap = 1; 
[23:18:43.828]        // -> [__ap <= 0x00000001]
[23:18:43.828]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:18:43.836]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:18:43.836]      __ap = 4;
[23:18:43.836]        // -> [__ap <= 0x00000004]
[23:18:43.836]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:18:43.841]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:18:43.841]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:18:43.842]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:18:43.849]    </block>
[23:18:43.849]    <block atomic="false" info="">
[23:18:43.849]      __var nReset = 0x80;
[23:18:43.849]        // -> [nReset <= 0x00000080]
[23:18:43.849]      __var canReadPins = 0;
[23:18:43.849]        // -> [canReadPins <= 0x00000000]
[23:18:43.849]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:18:43.851]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:18:43.851]        // -> [canReadPins <= 0x00000001]
[23:18:43.851]    </block>
[23:18:43.851]    <control if="" while="1" timeout="200" info="">
[23:18:43.851]      // while "1"  (timeout="200")
[23:18:43.851]      // while-condition  =>  TRUE
[23:18:43.852]      // while "1"  (timeout="200")
[23:18:43.852]      // while-condition  =>  TRUE
[23:18:43.852]      // while "1"  (timeout="200")
[23:18:43.852]      // while-condition  =>  TRUE
[23:18:43.852]      // while "1"  (timeout="200")
[23:18:43.852]      // while-condition  =>  TRUE
[23:18:43.852]      // while "1"  (timeout="200")
[23:18:43.852]      // while-condition  =>  TRUE
[23:18:43.852]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.853]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.853]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.853]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.853]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.853]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.853]      // while "1"  (timeout="200")
[23:18:43.853]      // while-condition  =>  TRUE
[23:18:43.855]      // while "1"  (timeout="200")
[23:18:43.855]      // while-condition  =>  TRUE
[23:18:43.855]      // while "1"  (timeout="200")
[23:18:43.855]      // while-condition  =>  TRUE
[23:18:43.855]      // while "1"  (timeout="200")
[23:18:43.855]      // while-condition  =>  TRUE
[23:18:43.855]      // while "1"  (timeout="200")
[23:18:43.855]      // while-condition  =>  TRUE
[23:18:43.855]      // while "1"  (timeout="200")
[23:18:43.855]      // while-condition  =>  TRUE
[23:18:43.855]      // while "1"  (timeout="200")
[23:18:43.855]      // while-condition  =>  TRUE
[23:18:43.856]      // while "1"  (timeout="200")
[23:18:43.856]      // while-condition  =>  TRUE
[23:18:43.856]      // while "1"  (timeout="200")
[23:18:43.856]      // while-condition  =>  TRUE
[23:18:43.856]      // while "1"  (timeout="200")
[23:18:43.856]      // while-condition  =>  TRUE
[23:18:43.856]      // while "1"  (timeout="200")
[23:18:43.856]      // while-condition  =>  TRUE
[23:18:43.856]      // while "1"  (timeout="200")
[23:18:43.856]      // while-condition  =>  TRUE
[23:18:43.856]      // while "1"  (timeout="200")
[23:18:43.857]      // while-condition  =>  TRUE
[23:18:43.857]      // while "1"  (timeout="200")
[23:18:43.857]      // while-condition  =>  TRUE
[23:18:43.857]      // while "1"  (timeout="200")
[23:18:43.857]      // while-condition  =>  TRUE
[23:18:43.857]      // while "1"  (timeout="200")
[23:18:43.857]      // while-condition  =>  TRUE
[23:18:43.857]      // while "1"  (timeout="200")
[23:18:43.858]      // while-condition  =>  TRUE
[23:18:43.858]      // while "1"  (timeout="200")
[23:18:43.858]      // while-condition  =>  TRUE
[23:18:43.858]      // while "1"  (timeout="200")
[23:18:43.858]      // while-condition  =>  TRUE
[23:18:43.858]      // while "1"  (timeout="200")
[23:18:43.858]      // while-condition  =>  TRUE
[23:18:43.858]      // while "1"  (timeout="200")
[23:18:43.858]      // while-condition  =>  TRUE
[23:18:43.858]      // while "1"  (timeout="200")
[23:18:43.858]      // while-condition  =>  TRUE
[23:18:43.859]      // while "1"  (timeout="200")
[23:18:43.859]      // while-condition  =>  TRUE
[23:18:43.859]      // while "1"  (timeout="200")
[23:18:43.859]      // while-condition  =>  TRUE
[23:18:43.859]      // while "1"  (timeout="200")
[23:18:43.859]      // while-condition  =>  TRUE
[23:18:43.859]      // while "1"  (timeout="200")
[23:18:43.860]      // while-condition  =>  TRUE
[23:18:43.860]      // while "1"  (timeout="200")
[23:18:43.860]      // while-condition  =>  TRUE
[23:18:43.860]      // while "1"  (timeout="200")
[23:18:43.860]      // while-condition  =>  TRUE
[23:18:43.860]      // while "1"  (timeout="200")
[23:18:43.860]      // while-condition  =>  TRUE
[23:18:43.860]      // while "1"  (timeout="200")
[23:18:43.860]      // while-condition  =>  TRUE
[23:18:43.860]      // while "1"  (timeout="200")
[23:18:43.861]      // while-condition  =>  TRUE
[23:18:43.861]      // while "1"  (timeout="200")
[23:18:43.861]      // while  =>  TIMEOUT
[23:18:43.861]      // end while "1"
[23:18:43.861]    </control>
[23:18:43.861]    <control if="canReadPins" while="" timeout="0" info="">
[23:18:43.861]      // if-block "canReadPins"
[23:18:43.861]        // =>  TRUE
[23:18:43.861]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:18:43.861]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:18:43.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:18:43.864]        // while-condition  =>  FALSE
[23:18:43.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:18:43.864]      </control>
[23:18:43.864]      // end if-block "canReadPins"
[23:18:43.864]    </control>
[23:18:43.864]    <control if="!canReadPins" while="" timeout="0" info="">
[23:18:43.864]      // if-block "!canReadPins"
[23:18:43.864]        // =>  FALSE
[23:18:43.864]      // skip if-block "!canReadPins"
[23:18:43.865]    </control>
[23:18:43.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:18:43.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:18:43.866]        // =>  TRUE
[23:18:43.866]      <block atomic="false" info="">
[23:18:43.866]        WriteAP(0x00, 0x190008);
[23:18:43.868]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:18:43.868]        WriteAP(0xF0, 0x01);
[23:18:43.873]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:18:43.873]      </block>
[23:18:43.874]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:18:43.874]    </control>
[23:18:43.874]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:18:43.874]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:18:43.874]        // =>  FALSE
[23:18:43.874]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:18:43.874]    </control>
[23:18:43.874]    <block atomic="false" info="">
[23:18:43.874]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:18:43.878]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:18:43.878]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:18:43.878]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:18:43.880]      __ap = 0; //lets make sure we reset the access point selection
[23:18:43.880]        // -> [__ap <= 0x00000000]
[23:18:43.880]    </block>
[23:18:43.881]  </sequence>
[23:18:43.881]  
[23:18:43.914]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:18:43.914]  
[23:18:43.914]  <debugvars>
[23:18:43.914]    // Pre-defined
[23:18:43.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:18:43.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:18:43.915]    __dp=0x00000000
[23:18:43.915]    __ap=0x00000000
[23:18:43.915]    __traceout=0x00000000      (Trace Disabled)
[23:18:43.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:18:43.915]    __FlashAddr=0x00000000
[23:18:43.915]    __FlashLen=0x00000000
[23:18:43.915]    __FlashArg=0x00000000
[23:18:43.916]    __FlashOp=0x00000000
[23:18:43.916]    __Result=0x00000000
[23:18:43.916]  </debugvars>
[23:18:43.916]  
[23:18:43.916]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:18:43.916]    <block atomic="false" info="">
[23:18:43.916]      __var deviceID = 0;
[23:18:43.916]        // -> [deviceID <= 0x00000000]
[23:18:43.916]      __var version = 0;
[23:18:43.917]        // -> [version <= 0x00000000]
[23:18:43.917]      __var partNum = 0;
[23:18:43.917]        // -> [partNum <= 0x00000000]
[23:18:43.917]      __var manuf = 0;
[23:18:43.917]        // -> [manuf <= 0x00000000]
[23:18:43.917]      __var isMSPM0G1X0X_G3X0X = 0;
[23:18:43.917]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:18:43.917]      __var isProduction = 0;
[23:18:43.917]        // -> [isProduction <= 0x00000000]
[23:18:43.917]      __var continueId = 0;
[23:18:43.917]        // -> [continueId <= 0x00000000]
[23:18:43.918]      deviceID =   Read32(0x41C40004);
[23:18:43.928]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:18:43.928]        // -> [deviceID <= 0x2BB8802F]
[23:18:43.928]      version = deviceID >> 28;
[23:18:43.928]        // -> [version <= 0x00000002]
[23:18:43.928]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:18:43.929]        // -> [partNum <= 0x0000BB88]
[23:18:43.929]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:18:43.929]        // -> [manuf <= 0x00000017]
[23:18:43.929]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:18:43.929]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:18:43.929]      isProduction = (version > 0);
[23:18:43.929]        // -> [isProduction <= 0x00000001]
[23:18:43.929]    </block>
[23:18:43.929]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:18:43.929]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:18:43.930]        // =>  FALSE
[23:18:43.930]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:18:43.930]    </control>
[23:18:43.930]    <control if="continueId == 4" while="" timeout="0" info="">
[23:18:43.930]      // if-block "continueId == 4"
[23:18:43.930]        // =>  FALSE
[23:18:43.930]      // skip if-block "continueId == 4"
[23:18:43.930]    </control>
[23:18:43.930]    <control if="!isProduction" while="" timeout="0" info="">
[23:18:43.930]      // if-block "!isProduction"
[23:18:43.930]        // =>  FALSE
[23:18:43.930]      // skip if-block "!isProduction"
[23:18:43.930]    </control>
[23:18:43.930]  </sequence>
[23:18:43.930]  
[23:20:52.570]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:20:52.570]  
[23:20:52.574]  <debugvars>
[23:20:52.574]    // Pre-defined
[23:20:52.574]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:52.575]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:20:52.575]    __dp=0x00000000
[23:20:52.575]    __ap=0x00000000
[23:20:52.575]    __traceout=0x00000000      (Trace Disabled)
[23:20:52.575]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:52.575]    __FlashAddr=0x00000000
[23:20:52.575]    __FlashLen=0x00000000
[23:20:52.575]    __FlashArg=0x00000000
[23:20:52.575]    __FlashOp=0x00000000
[23:20:52.575]    __Result=0x00000000
[23:20:52.575]  </debugvars>
[23:20:52.575]  
[23:20:52.575]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:20:52.575]    <block atomic="false" info="">
[23:20:52.576]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:20:52.576]        // -> [isSWJ <= 0x00000001]
[23:20:52.576]      __var hasDormant = __protocol & 0x00020000;
[23:20:52.576]        // -> [hasDormant <= 0x00000000]
[23:20:52.576]      __var protType   = __protocol & 0x0000FFFF;
[23:20:52.576]        // -> [protType <= 0x00000002]
[23:20:52.577]    </block>
[23:20:52.577]    <control if="protType == 1" while="" timeout="0" info="">
[23:20:52.577]      // if-block "protType == 1"
[23:20:52.577]        // =>  FALSE
[23:20:52.577]      // skip if-block "protType == 1"
[23:20:52.577]    </control>
[23:20:52.577]    <control if="protType == 2" while="" timeout="0" info="">
[23:20:52.577]      // if-block "protType == 2"
[23:20:52.577]        // =>  TRUE
[23:20:52.577]      <control if="isSWJ" while="" timeout="0" info="">
[23:20:52.577]        // if-block "isSWJ"
[23:20:52.577]          // =>  TRUE
[23:20:52.578]        <control if="hasDormant" while="" timeout="0" info="">
[23:20:52.578]          // if-block "hasDormant"
[23:20:52.578]            // =>  FALSE
[23:20:52.578]          // skip if-block "hasDormant"
[23:20:52.578]        </control>
[23:20:52.578]        <control if="!hasDormant" while="" timeout="0" info="">
[23:20:52.578]          // if-block "!hasDormant"
[23:20:52.579]            // =>  TRUE
[23:20:52.579]          <block atomic="false" info="">
[23:20:52.579]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:20:52.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:52.582]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:20:52.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:20:52.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:20:52.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:52.588]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:20:52.589]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:20:52.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:20:52.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:20:52.592]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:20:52.594]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:20:52.594]          </block>
[23:20:52.594]          // end if-block "!hasDormant"
[23:20:52.594]        </control>
[23:20:52.594]        // end if-block "isSWJ"
[23:20:52.594]      </control>
[23:20:52.594]      <control if="!isSWJ" while="" timeout="0" info="">
[23:20:52.594]        // if-block "!isSWJ"
[23:20:52.594]          // =>  FALSE
[23:20:52.594]        // skip if-block "!isSWJ"
[23:20:52.595]      </control>
[23:20:52.595]      <block atomic="false" info="">
[23:20:52.595]        ReadDP(0x0);
[23:20:52.596]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:20:52.596]      </block>
[23:20:52.597]      // end if-block "protType == 2"
[23:20:52.597]    </control>
[23:20:52.597]  </sequence>
[23:20:52.597]  
[23:20:52.599]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:20:52.599]  
[23:20:52.599]  <debugvars>
[23:20:52.600]    // Pre-defined
[23:20:52.600]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:52.600]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:20:52.600]    __dp=0x00000000
[23:20:52.600]    __ap=0x00000000
[23:20:52.601]    __traceout=0x00000000      (Trace Disabled)
[23:20:52.601]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:52.601]    __FlashAddr=0x00000000
[23:20:52.601]    __FlashLen=0x00000000
[23:20:52.601]    __FlashArg=0x00000000
[23:20:52.601]    __FlashOp=0x00000000
[23:20:52.601]    __Result=0x00000000
[23:20:52.601]  </debugvars>
[23:20:52.601]  
[23:20:52.601]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:20:52.601]    <block atomic="false" info="">
[23:20:52.601]      __var SW_DP_ABORT       = 0x0;
[23:20:52.601]        // -> [SW_DP_ABORT <= 0x00000000]
[23:20:52.601]      __var DP_CTRL_STAT      = 0x4;
[23:20:52.602]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:20:52.602]      __var DP_SELECT         = 0x8;
[23:20:52.602]        // -> [DP_SELECT <= 0x00000008]
[23:20:52.602]      __var powered_down      = 0;
[23:20:52.602]        // -> [powered_down <= 0x00000000]
[23:20:52.602]      WriteDP(DP_SELECT, 0x00000000);
[23:20:52.604]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:20:52.604]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:20:52.605]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:20:52.605]        // -> [powered_down <= 0x00000001]
[23:20:52.606]    </block>
[23:20:52.606]    <control if="powered_down" while="" timeout="0" info="">
[23:20:52.606]      // if-block "powered_down"
[23:20:52.606]        // =>  TRUE
[23:20:52.606]      <block atomic="false" info="">
[23:20:52.606]        Message(0, "Debug/System power-up request sent");
[23:20:52.607]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:20:52.609]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:20:52.609]      </block>
[23:20:52.609]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:20:52.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:20:52.610]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:20:52.610]        // while-condition  =>  FALSE
[23:20:52.611]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:20:52.611]      </control>
[23:20:52.611]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:20:52.611]        // if-block "(__protocol & 0xFFFF) == 1"
[23:20:52.611]          // =>  FALSE
[23:20:52.611]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:20:52.611]      </control>
[23:20:52.611]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:20:52.611]        // if-block "(__protocol & 0xFFFF) == 2"
[23:20:52.612]          // =>  TRUE
[23:20:52.612]        <block atomic="false" info="">
[23:20:52.612]          Message(0, "executing SWD power up");
[23:20:52.612]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:20:52.615]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:20:52.615]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:20:52.616]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:20:52.618]        </block>
[23:20:52.618]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:20:52.618]      </control>
[23:20:52.618]      // end if-block "powered_down"
[23:20:52.618]    </control>
[23:20:52.618]    <block atomic="false" info="">
[23:20:52.618]      __var DEBUG_PORT_VAL    = 0;
[23:20:52.618]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:20:52.618]      __var ACCESS_POINT_VAL  = 0;
[23:20:52.618]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:20:52.619]      __ap = 1; 
[23:20:52.619]        // -> [__ap <= 0x00000001]
[23:20:52.619]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:20:52.622]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:20:52.622]      __ap = 4;
[23:20:52.623]        // -> [__ap <= 0x00000004]
[23:20:52.623]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:20:52.626]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:20:52.626]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:20:52.626]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:20:52.626]    </block>
[23:20:52.626]    <block atomic="false" info="">
[23:20:52.628]      __var nReset = 0x80;
[23:20:52.628]        // -> [nReset <= 0x00000080]
[23:20:52.628]      __var canReadPins = 0;
[23:20:52.628]        // -> [canReadPins <= 0x00000000]
[23:20:52.628]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:20:52.629]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:20:52.629]        // -> [canReadPins <= 0x00000001]
[23:20:52.630]    </block>
[23:20:52.630]    <control if="" while="1" timeout="200" info="">
[23:20:52.630]      // while "1"  (timeout="200")
[23:20:52.630]      // while-condition  =>  TRUE
[23:20:52.630]      // while "1"  (timeout="200")
[23:20:52.630]      // while-condition  =>  TRUE
[23:20:52.630]      // while "1"  (timeout="200")
[23:20:52.630]      // while-condition  =>  TRUE
[23:20:52.630]      // while "1"  (timeout="200")
[23:20:52.630]      // while-condition  =>  TRUE
[23:20:52.630]      // while "1"  (timeout="200")
[23:20:52.630]      // while-condition  =>  TRUE
[23:20:52.631]      // while "1"  (timeout="200")
[23:20:52.631]      // while-condition  =>  TRUE
[23:20:52.631]      // while "1"  (timeout="200")
[23:20:52.631]      // while-condition  =>  TRUE
[23:20:52.631]      // while "1"  (timeout="200")
[23:20:52.631]      // while-condition  =>  TRUE
[23:20:52.631]      // while "1"  (timeout="200")
[23:20:52.631]      // while-condition  =>  TRUE
[23:20:52.631]      // while "1"  (timeout="200")
[23:20:52.631]      // while-condition  =>  TRUE
[23:20:52.631]      // while "1"  (timeout="200")
[23:20:52.632]      // while-condition  =>  TRUE
[23:20:52.632]      // while "1"  (timeout="200")
[23:20:52.632]      // while-condition  =>  TRUE
[23:20:52.632]      // while "1"  (timeout="200")
[23:20:52.632]      // while-condition  =>  TRUE
[23:20:52.632]      // while "1"  (timeout="200")
[23:20:52.632]      // while-condition  =>  TRUE
[23:20:52.632]      // while "1"  (timeout="200")
[23:20:52.632]      // while-condition  =>  TRUE
[23:20:52.632]      // while "1"  (timeout="200")
[23:20:52.632]      // while-condition  =>  TRUE
[23:20:52.632]      // while "1"  (timeout="200")
[23:20:52.633]      // while-condition  =>  TRUE
[23:20:52.633]      // while "1"  (timeout="200")
[23:20:52.633]      // while-condition  =>  TRUE
[23:20:52.633]      // while "1"  (timeout="200")
[23:20:52.633]      // while-condition  =>  TRUE
[23:20:52.633]      // while "1"  (timeout="200")
[23:20:52.633]      // while-condition  =>  TRUE
[23:20:52.634]      // while "1"  (timeout="200")
[23:20:52.634]      // while-condition  =>  TRUE
[23:20:52.634]      // while "1"  (timeout="200")
[23:20:52.634]      // while-condition  =>  TRUE
[23:20:52.634]      // while "1"  (timeout="200")
[23:20:52.634]      // while-condition  =>  TRUE
[23:20:52.635]      // while "1"  (timeout="200")
[23:20:52.635]      // while-condition  =>  TRUE
[23:20:52.635]      // while "1"  (timeout="200")
[23:20:52.635]      // while-condition  =>  TRUE
[23:20:52.635]      // while "1"  (timeout="200")
[23:20:52.635]      // while-condition  =>  TRUE
[23:20:52.635]      // while "1"  (timeout="200")
[23:20:52.635]      // while-condition  =>  TRUE
[23:20:52.635]      // while "1"  (timeout="200")
[23:20:52.635]      // while-condition  =>  TRUE
[23:20:52.635]      // while "1"  (timeout="200")
[23:20:52.635]      // while-condition  =>  TRUE
[23:20:52.636]      // while "1"  (timeout="200")
[23:20:52.636]      // while-condition  =>  TRUE
[23:20:52.636]      // while "1"  (timeout="200")
[23:20:52.636]      // while-condition  =>  TRUE
[23:20:52.636]      // while "1"  (timeout="200")
[23:20:52.636]      // while-condition  =>  TRUE
[23:20:52.636]      // while "1"  (timeout="200")
[23:20:52.636]      // while-condition  =>  TRUE
[23:20:52.636]      // while "1"  (timeout="200")
[23:20:52.636]      // while-condition  =>  TRUE
[23:20:52.636]      // while "1"  (timeout="200")
[23:20:52.637]      // while-condition  =>  TRUE
[23:20:52.637]      // while "1"  (timeout="200")
[23:20:52.637]      // while-condition  =>  TRUE
[23:20:52.637]      // while "1"  (timeout="200")
[23:20:52.637]      // while-condition  =>  TRUE
[23:20:52.637]      // while "1"  (timeout="200")
[23:20:52.637]      // while-condition  =>  TRUE
[23:20:52.637]      // while "1"  (timeout="200")
[23:20:52.637]      // while-condition  =>  TRUE
[23:20:52.637]      // while "1"  (timeout="200")
[23:20:52.637]      // while-condition  =>  TRUE
[23:20:52.637]      // while "1"  (timeout="200")
[23:20:52.638]      // while-condition  =>  TRUE
[23:20:52.638]      // while "1"  (timeout="200")
[23:20:52.638]      // while-condition  =>  TRUE
[23:20:52.638]      // while "1"  (timeout="200")
[23:20:52.638]      // while-condition  =>  TRUE
[23:20:52.638]      // while "1"  (timeout="200")
[23:20:52.638]      // while-condition  =>  TRUE
[23:20:52.638]      // while "1"  (timeout="200")
[23:20:52.639]      // while-condition  =>  TRUE
[23:20:52.639]      // while "1"  (timeout="200")
[23:20:52.639]      // while-condition  =>  TRUE
[23:20:52.639]      // while "1"  (timeout="200")
[23:20:52.639]      // while-condition  =>  TRUE
[23:20:52.639]      // while "1"  (timeout="200")
[23:20:52.639]      // while-condition  =>  TRUE
[23:20:52.640]      // while "1"  (timeout="200")
[23:20:52.640]      // while-condition  =>  TRUE
[23:20:52.640]      // while "1"  (timeout="200")
[23:20:52.640]      // while-condition  =>  TRUE
[23:20:52.640]      // while "1"  (timeout="200")
[23:20:52.640]      // while-condition  =>  TRUE
[23:20:52.640]      // while "1"  (timeout="200")
[23:20:52.640]      // while-condition  =>  TRUE
[23:20:52.640]      // while "1"  (timeout="200")
[23:20:52.641]      // while-condition  =>  TRUE
[23:20:52.641]      // while "1"  (timeout="200")
[23:20:52.641]      // while-condition  =>  TRUE
[23:20:52.641]      // while "1"  (timeout="200")
[23:20:52.641]      // while-condition  =>  TRUE
[23:20:52.641]      // while "1"  (timeout="200")
[23:20:52.641]      // while-condition  =>  TRUE
[23:20:52.641]      // while "1"  (timeout="200")
[23:20:52.641]      // while-condition  =>  TRUE
[23:20:52.641]      // while "1"  (timeout="200")
[23:20:52.641]      // while-condition  =>  TRUE
[23:20:52.642]      // while "1"  (timeout="200")
[23:20:52.642]      // while  =>  TIMEOUT
[23:20:52.642]      // end while "1"
[23:20:52.642]    </control>
[23:20:52.642]    <control if="canReadPins" while="" timeout="0" info="">
[23:20:52.642]      // if-block "canReadPins"
[23:20:52.642]        // =>  TRUE
[23:20:52.642]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:20:52.642]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:20:52.648]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:20:52.648]        // while-condition  =>  FALSE
[23:20:52.648]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:20:52.648]      </control>
[23:20:52.648]      // end if-block "canReadPins"
[23:20:52.648]    </control>
[23:20:52.648]    <control if="!canReadPins" while="" timeout="0" info="">
[23:20:52.648]      // if-block "!canReadPins"
[23:20:52.648]        // =>  FALSE
[23:20:52.648]      // skip if-block "!canReadPins"
[23:20:52.649]    </control>
[23:20:52.649]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:20:52.649]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:20:52.649]        // =>  TRUE
[23:20:52.649]      <block atomic="false" info="">
[23:20:52.649]        WriteAP(0x00, 0x190008);
[23:20:52.651]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:20:52.651]        WriteAP(0xF0, 0x01);
[23:20:52.663]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:20:52.664]      </block>
[23:20:52.664]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:20:52.664]    </control>
[23:20:52.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:20:52.664]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:20:52.664]        // =>  FALSE
[23:20:52.664]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:20:52.664]    </control>
[23:20:52.665]    <block atomic="false" info="">
[23:20:52.665]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:20:52.670]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:20:52.671]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:20:52.671]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:20:52.671]      __ap = 0; //lets make sure we reset the access point selection
[23:20:52.671]        // -> [__ap <= 0x00000000]
[23:20:52.671]    </block>
[23:20:52.671]  </sequence>
[23:20:52.671]  
[23:20:52.704]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:20:52.704]  
[23:20:52.704]  <debugvars>
[23:20:52.704]    // Pre-defined
[23:20:52.704]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:20:52.704]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:20:52.706]    __dp=0x00000000
[23:20:52.706]    __ap=0x00000000
[23:20:52.706]    __traceout=0x00000000      (Trace Disabled)
[23:20:52.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:20:52.706]    __FlashAddr=0x00000000
[23:20:52.706]    __FlashLen=0x00000000
[23:20:52.706]    __FlashArg=0x00000000
[23:20:52.706]    __FlashOp=0x00000000
[23:20:52.706]    __Result=0x00000000
[23:20:52.706]  </debugvars>
[23:20:52.706]  
[23:20:52.707]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:20:52.707]    <block atomic="false" info="">
[23:20:52.707]      __var deviceID = 0;
[23:20:52.707]        // -> [deviceID <= 0x00000000]
[23:20:52.707]      __var version = 0;
[23:20:52.707]        // -> [version <= 0x00000000]
[23:20:52.707]      __var partNum = 0;
[23:20:52.707]        // -> [partNum <= 0x00000000]
[23:20:52.707]      __var manuf = 0;
[23:20:52.708]        // -> [manuf <= 0x00000000]
[23:20:52.708]      __var isMSPM0G1X0X_G3X0X = 0;
[23:20:52.708]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:20:52.708]      __var isProduction = 0;
[23:20:52.708]        // -> [isProduction <= 0x00000000]
[23:20:52.708]      __var continueId = 0;
[23:20:52.709]        // -> [continueId <= 0x00000000]
[23:20:52.709]      deviceID =   Read32(0x41C40004);
[23:20:52.713]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:20:52.713]        // -> [deviceID <= 0x2BB8802F]
[23:20:52.714]      version = deviceID >> 28;
[23:20:52.714]        // -> [version <= 0x00000002]
[23:20:52.714]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:20:52.714]        // -> [partNum <= 0x0000BB88]
[23:20:52.714]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:20:52.714]        // -> [manuf <= 0x00000017]
[23:20:52.714]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:20:52.714]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:20:52.714]      isProduction = (version > 0);
[23:20:52.714]        // -> [isProduction <= 0x00000001]
[23:20:52.715]    </block>
[23:20:52.715]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:20:52.715]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:20:52.715]        // =>  FALSE
[23:20:52.715]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:20:52.715]    </control>
[23:20:52.716]    <control if="continueId == 4" while="" timeout="0" info="">
[23:20:52.716]      // if-block "continueId == 4"
[23:20:52.716]        // =>  FALSE
[23:20:52.716]      // skip if-block "continueId == 4"
[23:20:52.716]    </control>
[23:20:52.716]    <control if="!isProduction" while="" timeout="0" info="">
[23:20:52.716]      // if-block "!isProduction"
[23:20:52.716]        // =>  FALSE
[23:20:52.716]      // skip if-block "!isProduction"
[23:20:52.716]    </control>
[23:20:52.716]  </sequence>
[23:20:52.716]  
[23:21:20.620]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:21:20.620]  
[23:21:20.629]  <debugvars>
[23:21:20.629]    // Pre-defined
[23:21:20.629]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:21:20.629]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:21:20.629]    __dp=0x00000000
[23:21:20.629]    __ap=0x00000000
[23:21:20.629]    __traceout=0x00000000      (Trace Disabled)
[23:21:20.629]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:21:20.629]    __FlashAddr=0x00000000
[23:21:20.629]    __FlashLen=0x00000000
[23:21:20.630]    __FlashArg=0x00000000
[23:21:20.630]    __FlashOp=0x00000000
[23:21:20.630]    __Result=0x00000000
[23:21:20.630]  </debugvars>
[23:21:20.630]  
[23:21:20.630]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:21:20.630]    <block atomic="false" info="">
[23:21:20.630]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:21:20.630]        // -> [isSWJ <= 0x00000001]
[23:21:20.630]      __var hasDormant = __protocol & 0x00020000;
[23:21:20.630]        // -> [hasDormant <= 0x00000000]
[23:21:20.631]      __var protType   = __protocol & 0x0000FFFF;
[23:21:20.631]        // -> [protType <= 0x00000002]
[23:21:20.631]    </block>
[23:21:20.631]    <control if="protType == 1" while="" timeout="0" info="">
[23:21:20.631]      // if-block "protType == 1"
[23:21:20.631]        // =>  FALSE
[23:21:20.632]      // skip if-block "protType == 1"
[23:21:20.632]    </control>
[23:21:20.632]    <control if="protType == 2" while="" timeout="0" info="">
[23:21:20.632]      // if-block "protType == 2"
[23:21:20.632]        // =>  TRUE
[23:21:20.632]      <control if="isSWJ" while="" timeout="0" info="">
[23:21:20.632]        // if-block "isSWJ"
[23:21:20.632]          // =>  TRUE
[23:21:20.632]        <control if="hasDormant" while="" timeout="0" info="">
[23:21:20.632]          // if-block "hasDormant"
[23:21:20.632]            // =>  FALSE
[23:21:20.633]          // skip if-block "hasDormant"
[23:21:20.633]        </control>
[23:21:20.633]        <control if="!hasDormant" while="" timeout="0" info="">
[23:21:20.633]          // if-block "!hasDormant"
[23:21:20.633]            // =>  TRUE
[23:21:20.633]          <block atomic="false" info="">
[23:21:20.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:21:20.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:21:20.637]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:21:20.639]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:21:20.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:21:20.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:21:20.643]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:21:20.644]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:21:20.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:21:20.647]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:21:20.648]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:21:20.649]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:21:20.649]          </block>
[23:21:20.649]          // end if-block "!hasDormant"
[23:21:20.649]        </control>
[23:21:20.649]        // end if-block "isSWJ"
[23:21:20.649]      </control>
[23:21:20.649]      <control if="!isSWJ" while="" timeout="0" info="">
[23:21:20.651]        // if-block "!isSWJ"
[23:21:20.651]          // =>  FALSE
[23:21:20.651]        // skip if-block "!isSWJ"
[23:21:20.651]      </control>
[23:21:20.651]      <block atomic="false" info="">
[23:21:20.651]        ReadDP(0x0);
[23:21:20.653]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:21:20.653]      </block>
[23:21:20.653]      // end if-block "protType == 2"
[23:21:20.654]    </control>
[23:21:20.654]  </sequence>
[23:21:20.654]  
[23:21:20.656]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:21:20.656]  
[23:21:20.657]  <debugvars>
[23:21:20.657]    // Pre-defined
[23:21:20.657]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:21:20.657]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:21:20.657]    __dp=0x00000000
[23:21:20.657]    __ap=0x00000000
[23:21:20.657]    __traceout=0x00000000      (Trace Disabled)
[23:21:20.657]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:21:20.657]    __FlashAddr=0x00000000
[23:21:20.657]    __FlashLen=0x00000000
[23:21:20.657]    __FlashArg=0x00000000
[23:21:20.657]    __FlashOp=0x00000000
[23:21:20.658]    __Result=0x00000000
[23:21:20.658]  </debugvars>
[23:21:20.658]  
[23:21:20.658]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:21:20.658]    <block atomic="false" info="">
[23:21:20.658]      __var SW_DP_ABORT       = 0x0;
[23:21:20.658]        // -> [SW_DP_ABORT <= 0x00000000]
[23:21:20.658]      __var DP_CTRL_STAT      = 0x4;
[23:21:20.658]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:21:20.658]      __var DP_SELECT         = 0x8;
[23:21:20.659]        // -> [DP_SELECT <= 0x00000008]
[23:21:20.659]      __var powered_down      = 0;
[23:21:20.659]        // -> [powered_down <= 0x00000000]
[23:21:20.659]      WriteDP(DP_SELECT, 0x00000000);
[23:21:20.665]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:21:20.665]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:21:20.666]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:21:20.667]        // -> [powered_down <= 0x00000001]
[23:21:20.667]    </block>
[23:21:20.667]    <control if="powered_down" while="" timeout="0" info="">
[23:21:20.667]      // if-block "powered_down"
[23:21:20.667]        // =>  TRUE
[23:21:20.667]      <block atomic="false" info="">
[23:21:20.667]        Message(0, "Debug/System power-up request sent");
[23:21:20.670]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:21:20.671]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:21:20.672]      </block>
[23:21:20.672]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:21:20.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:21:20.674]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:21:20.674]        // while-condition  =>  FALSE
[23:21:20.674]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:21:20.674]      </control>
[23:21:20.674]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:21:20.674]        // if-block "(__protocol & 0xFFFF) == 1"
[23:21:20.674]          // =>  FALSE
[23:21:20.674]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:21:20.674]      </control>
[23:21:20.674]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:21:20.674]        // if-block "(__protocol & 0xFFFF) == 2"
[23:21:20.675]          // =>  TRUE
[23:21:20.675]        <block atomic="false" info="">
[23:21:20.675]          Message(0, "executing SWD power up");
[23:21:20.677]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:21:20.679]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:21:20.679]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:21:20.683]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:21:20.683]        </block>
[23:21:20.683]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:21:20.683]      </control>
[23:21:20.683]      // end if-block "powered_down"
[23:21:20.683]    </control>
[23:21:20.683]    <block atomic="false" info="">
[23:21:20.683]      __var DEBUG_PORT_VAL    = 0;
[23:21:20.684]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:21:20.684]      __var ACCESS_POINT_VAL  = 0;
[23:21:20.684]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:21:20.684]      __ap = 1; 
[23:21:20.684]        // -> [__ap <= 0x00000001]
[23:21:20.684]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:21:20.689]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:21:20.689]      __ap = 4;
[23:21:20.689]        // -> [__ap <= 0x00000004]
[23:21:20.690]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:21:20.693]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:21:20.693]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:21:20.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:21:20.695]    </block>
[23:21:20.695]    <block atomic="false" info="">
[23:21:20.695]      __var nReset = 0x80;
[23:21:20.696]        // -> [nReset <= 0x00000080]
[23:21:20.696]      __var canReadPins = 0;
[23:21:20.696]        // -> [canReadPins <= 0x00000000]
[23:21:20.696]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:21:20.701]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:21:20.702]        // -> [canReadPins <= 0x00000001]
[23:21:20.702]    </block>
[23:21:20.702]    <control if="" while="1" timeout="200" info="">
[23:21:20.702]      // while "1"  (timeout="200")
[23:21:20.702]      // while-condition  =>  TRUE
[23:21:20.702]      // while "1"  (timeout="200")
[23:21:20.702]      // while-condition  =>  TRUE
[23:21:20.702]      // while "1"  (timeout="200")
[23:21:20.702]      // while-condition  =>  TRUE
[23:21:20.702]      // while "1"  (timeout="200")
[23:21:20.703]      // while-condition  =>  TRUE
[23:21:20.703]      // while "1"  (timeout="200")
[23:21:20.703]      // while-condition  =>  TRUE
[23:21:20.703]      // while "1"  (timeout="200")
[23:21:20.703]      // while-condition  =>  TRUE
[23:21:20.703]      // while "1"  (timeout="200")
[23:21:20.703]      // while-condition  =>  TRUE
[23:21:20.703]      // while "1"  (timeout="200")
[23:21:20.703]      // while-condition  =>  TRUE
[23:21:20.703]      // while "1"  (timeout="200")
[23:21:20.703]      // while-condition  =>  TRUE
[23:21:20.703]      // while "1"  (timeout="200")
[23:21:20.704]      // while-condition  =>  TRUE
[23:21:20.704]      // while "1"  (timeout="200")
[23:21:20.704]      // while-condition  =>  TRUE
[23:21:20.704]      // while "1"  (timeout="200")
[23:21:20.704]      // while-condition  =>  TRUE
[23:21:20.704]      // while "1"  (timeout="200")
[23:21:20.704]      // while-condition  =>  TRUE
[23:21:20.704]      // while "1"  (timeout="200")
[23:21:20.704]      // while-condition  =>  TRUE
[23:21:20.704]      // while "1"  (timeout="200")
[23:21:20.704]      // while-condition  =>  TRUE
[23:21:20.705]      // while "1"  (timeout="200")
[23:21:20.705]      // while  =>  TIMEOUT
[23:21:20.705]      // end while "1"
[23:21:20.705]    </control>
[23:21:20.705]    <control if="canReadPins" while="" timeout="0" info="">
[23:21:20.705]      // if-block "canReadPins"
[23:21:20.705]        // =>  TRUE
[23:21:20.705]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:21:20.705]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:21:20.707]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:21:20.707]        // while-condition  =>  FALSE
[23:21:20.707]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:21:20.708]      </control>
[23:21:20.708]      // end if-block "canReadPins"
[23:21:20.708]    </control>
[23:21:20.708]    <control if="!canReadPins" while="" timeout="0" info="">
[23:21:20.708]      // if-block "!canReadPins"
[23:21:20.708]        // =>  FALSE
[23:21:20.708]      // skip if-block "!canReadPins"
[23:21:20.708]    </control>
[23:21:20.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:21:20.709]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:21:20.709]        // =>  TRUE
[23:21:20.709]      <block atomic="false" info="">
[23:21:20.709]        WriteAP(0x00, 0x190008);
[23:21:20.716]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:21:20.716]        WriteAP(0xF0, 0x01);
[23:21:20.722]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:21:20.722]      </block>
[23:21:20.722]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:21:20.722]    </control>
[23:21:20.722]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:21:20.722]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:21:20.722]        // =>  FALSE
[23:21:20.722]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:21:20.722]    </control>
[23:21:20.722]    <block atomic="false" info="">
[23:21:20.722]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:21:20.727]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:21:20.727]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:21:20.727]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:21:20.730]      __ap = 0; //lets make sure we reset the access point selection
[23:21:20.730]        // -> [__ap <= 0x00000000]
[23:21:20.730]    </block>
[23:21:20.730]  </sequence>
[23:21:20.730]  
[23:21:20.762]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:21:20.762]  
[23:21:20.762]  <debugvars>
[23:21:20.762]    // Pre-defined
[23:21:20.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:21:20.762]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:21:20.763]    __dp=0x00000000
[23:21:20.763]    __ap=0x00000000
[23:21:20.763]    __traceout=0x00000000      (Trace Disabled)
[23:21:20.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:21:20.763]    __FlashAddr=0x00000000
[23:21:20.763]    __FlashLen=0x00000000
[23:21:20.763]    __FlashArg=0x00000000
[23:21:20.763]    __FlashOp=0x00000000
[23:21:20.763]    __Result=0x00000000
[23:21:20.763]  </debugvars>
[23:21:20.764]  
[23:21:20.764]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:21:20.764]    <block atomic="false" info="">
[23:21:20.764]      __var deviceID = 0;
[23:21:20.764]        // -> [deviceID <= 0x00000000]
[23:21:20.764]      __var version = 0;
[23:21:20.764]        // -> [version <= 0x00000000]
[23:21:20.765]      __var partNum = 0;
[23:21:20.765]        // -> [partNum <= 0x00000000]
[23:21:20.765]      __var manuf = 0;
[23:21:20.765]        // -> [manuf <= 0x00000000]
[23:21:20.765]      __var isMSPM0G1X0X_G3X0X = 0;
[23:21:20.765]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:21:20.765]      __var isProduction = 0;
[23:21:20.765]        // -> [isProduction <= 0x00000000]
[23:21:20.765]      __var continueId = 0;
[23:21:20.765]        // -> [continueId <= 0x00000000]
[23:21:20.765]      deviceID =   Read32(0x41C40004);
[23:21:20.771]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:21:20.771]        // -> [deviceID <= 0x2BB8802F]
[23:21:20.771]      version = deviceID >> 28;
[23:21:20.771]        // -> [version <= 0x00000002]
[23:21:20.771]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:21:20.772]        // -> [partNum <= 0x0000BB88]
[23:21:20.772]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:21:20.772]        // -> [manuf <= 0x00000017]
[23:21:20.772]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:21:20.772]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:21:20.772]      isProduction = (version > 0);
[23:21:20.772]        // -> [isProduction <= 0x00000001]
[23:21:20.772]    </block>
[23:21:20.772]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:21:20.772]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:21:20.773]        // =>  FALSE
[23:21:20.773]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:21:20.774]    </control>
[23:21:20.774]    <control if="continueId == 4" while="" timeout="0" info="">
[23:21:20.774]      // if-block "continueId == 4"
[23:21:20.774]        // =>  FALSE
[23:21:20.774]      // skip if-block "continueId == 4"
[23:21:20.774]    </control>
[23:21:20.774]    <control if="!isProduction" while="" timeout="0" info="">
[23:21:20.774]      // if-block "!isProduction"
[23:21:20.774]        // =>  FALSE
[23:21:20.774]      // skip if-block "!isProduction"
[23:21:20.774]    </control>
[23:21:20.775]  </sequence>
[23:21:20.775]  
[23:22:05.687]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:22:05.687]  
[23:22:05.688]  <debugvars>
[23:22:05.688]    // Pre-defined
[23:22:05.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:22:05.688]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:22:05.688]    __dp=0x00000000
[23:22:05.688]    __ap=0x00000000
[23:22:05.688]    __traceout=0x00000000      (Trace Disabled)
[23:22:05.689]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:22:05.689]    __FlashAddr=0x00000000
[23:22:05.689]    __FlashLen=0x00000000
[23:22:05.689]    __FlashArg=0x00000000
[23:22:05.689]    __FlashOp=0x00000000
[23:22:05.689]    __Result=0x00000000
[23:22:05.689]  </debugvars>
[23:22:05.689]  
[23:22:05.689]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:22:05.689]    <block atomic="false" info="">
[23:22:05.689]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:22:05.690]        // -> [isSWJ <= 0x00000001]
[23:22:05.690]      __var hasDormant = __protocol & 0x00020000;
[23:22:05.690]        // -> [hasDormant <= 0x00000000]
[23:22:05.690]      __var protType   = __protocol & 0x0000FFFF;
[23:22:05.690]        // -> [protType <= 0x00000002]
[23:22:05.690]    </block>
[23:22:05.690]    <control if="protType == 1" while="" timeout="0" info="">
[23:22:05.690]      // if-block "protType == 1"
[23:22:05.690]        // =>  FALSE
[23:22:05.690]      // skip if-block "protType == 1"
[23:22:05.691]    </control>
[23:22:05.691]    <control if="protType == 2" while="" timeout="0" info="">
[23:22:05.691]      // if-block "protType == 2"
[23:22:05.691]        // =>  TRUE
[23:22:05.691]      <control if="isSWJ" while="" timeout="0" info="">
[23:22:05.691]        // if-block "isSWJ"
[23:22:05.691]          // =>  TRUE
[23:22:05.691]        <control if="hasDormant" while="" timeout="0" info="">
[23:22:05.691]          // if-block "hasDormant"
[23:22:05.691]            // =>  FALSE
[23:22:05.691]          // skip if-block "hasDormant"
[23:22:05.691]        </control>
[23:22:05.692]        <control if="!hasDormant" while="" timeout="0" info="">
[23:22:05.692]          // if-block "!hasDormant"
[23:22:05.692]            // =>  TRUE
[23:22:05.692]          <block atomic="false" info="">
[23:22:05.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:22:05.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:22:05.693]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:22:05.695]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:22:05.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:22:05.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:22:05.698]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:22:05.700]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:22:05.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:22:05.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:22:05.702]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:22:05.706]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:22:05.706]          </block>
[23:22:05.706]          // end if-block "!hasDormant"
[23:22:05.706]        </control>
[23:22:05.706]        // end if-block "isSWJ"
[23:22:05.706]      </control>
[23:22:05.706]      <control if="!isSWJ" while="" timeout="0" info="">
[23:22:05.707]        // if-block "!isSWJ"
[23:22:05.707]          // =>  FALSE
[23:22:05.707]        // skip if-block "!isSWJ"
[23:22:05.707]      </control>
[23:22:05.707]      <block atomic="false" info="">
[23:22:05.707]        ReadDP(0x0);
[23:22:05.709]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:22:05.709]      </block>
[23:22:05.709]      // end if-block "protType == 2"
[23:22:05.709]    </control>
[23:22:05.709]  </sequence>
[23:22:05.709]  
[23:22:05.712]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:22:05.712]  
[23:22:05.713]  <debugvars>
[23:22:05.713]    // Pre-defined
[23:22:05.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:22:05.713]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:22:05.713]    __dp=0x00000000
[23:22:05.713]    __ap=0x00000000
[23:22:05.713]    __traceout=0x00000000      (Trace Disabled)
[23:22:05.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:22:05.714]    __FlashAddr=0x00000000
[23:22:05.714]    __FlashLen=0x00000000
[23:22:05.714]    __FlashArg=0x00000000
[23:22:05.714]    __FlashOp=0x00000000
[23:22:05.714]    __Result=0x00000000
[23:22:05.714]  </debugvars>
[23:22:05.714]  
[23:22:05.714]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:22:05.714]    <block atomic="false" info="">
[23:22:05.715]      __var SW_DP_ABORT       = 0x0;
[23:22:05.715]        // -> [SW_DP_ABORT <= 0x00000000]
[23:22:05.715]      __var DP_CTRL_STAT      = 0x4;
[23:22:05.715]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:22:05.715]      __var DP_SELECT         = 0x8;
[23:22:05.715]        // -> [DP_SELECT <= 0x00000008]
[23:22:05.715]      __var powered_down      = 0;
[23:22:05.715]        // -> [powered_down <= 0x00000000]
[23:22:05.715]      WriteDP(DP_SELECT, 0x00000000);
[23:22:05.717]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:22:05.717]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:22:05.718]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:22:05.718]        // -> [powered_down <= 0x00000001]
[23:22:05.718]    </block>
[23:22:05.718]    <control if="powered_down" while="" timeout="0" info="">
[23:22:05.718]      // if-block "powered_down"
[23:22:05.720]        // =>  TRUE
[23:22:05.720]      <block atomic="false" info="">
[23:22:05.720]        Message(0, "Debug/System power-up request sent");
[23:22:05.720]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:22:05.722]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:22:05.722]      </block>
[23:22:05.722]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:22:05.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:22:05.723]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:22:05.724]        // while-condition  =>  FALSE
[23:22:05.724]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:22:05.724]      </control>
[23:22:05.724]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:22:05.724]        // if-block "(__protocol & 0xFFFF) == 1"
[23:22:05.724]          // =>  FALSE
[23:22:05.724]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:22:05.724]      </control>
[23:22:05.724]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:22:05.724]        // if-block "(__protocol & 0xFFFF) == 2"
[23:22:05.724]          // =>  TRUE
[23:22:05.724]        <block atomic="false" info="">
[23:22:05.725]          Message(0, "executing SWD power up");
[23:22:05.725]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:22:05.726]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:22:05.726]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:22:05.728]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:22:05.728]        </block>
[23:22:05.728]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:22:05.728]      </control>
[23:22:05.728]      // end if-block "powered_down"
[23:22:05.729]    </control>
[23:22:05.729]    <block atomic="false" info="">
[23:22:05.729]      __var DEBUG_PORT_VAL    = 0;
[23:22:05.729]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:22:05.729]      __var ACCESS_POINT_VAL  = 0;
[23:22:05.729]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:22:05.729]      __ap = 1; 
[23:22:05.729]        // -> [__ap <= 0x00000001]
[23:22:05.729]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:22:05.732]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:22:05.732]      __ap = 4;
[23:22:05.732]        // -> [__ap <= 0x00000004]
[23:22:05.733]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:22:05.736]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:22:05.736]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:22:05.736]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:22:05.737]    </block>
[23:22:05.737]    <block atomic="false" info="">
[23:22:05.737]      __var nReset = 0x80;
[23:22:05.737]        // -> [nReset <= 0x00000080]
[23:22:05.737]      __var canReadPins = 0;
[23:22:05.737]        // -> [canReadPins <= 0x00000000]
[23:22:05.737]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:22:05.739]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:22:05.739]        // -> [canReadPins <= 0x00000001]
[23:22:05.739]    </block>
[23:22:05.739]    <control if="" while="1" timeout="200" info="">
[23:22:05.739]      // while "1"  (timeout="200")
[23:22:05.740]      // while-condition  =>  TRUE
[23:22:05.740]      // while "1"  (timeout="200")
[23:22:05.740]      // while-condition  =>  TRUE
[23:22:05.740]      // while "1"  (timeout="200")
[23:22:05.740]      // while-condition  =>  TRUE
[23:22:05.740]      // while "1"  (timeout="200")
[23:22:05.740]      // while-condition  =>  TRUE
[23:22:05.740]      // while "1"  (timeout="200")
[23:22:05.741]      // while-condition  =>  TRUE
[23:22:05.741]      // while "1"  (timeout="200")
[23:22:05.741]      // while-condition  =>  TRUE
[23:22:05.741]      // while "1"  (timeout="200")
[23:22:05.741]      // while-condition  =>  TRUE
[23:22:05.741]      // while "1"  (timeout="200")
[23:22:05.741]      // while-condition  =>  TRUE
[23:22:05.741]      // while "1"  (timeout="200")
[23:22:05.742]      // while-condition  =>  TRUE
[23:22:05.742]      // while "1"  (timeout="200")
[23:22:05.742]      // while-condition  =>  TRUE
[23:22:05.742]      // while "1"  (timeout="200")
[23:22:05.742]      // while-condition  =>  TRUE
[23:22:05.742]      // while "1"  (timeout="200")
[23:22:05.742]      // while-condition  =>  TRUE
[23:22:05.743]      // while "1"  (timeout="200")
[23:22:05.743]      // while-condition  =>  TRUE
[23:22:05.743]      // while "1"  (timeout="200")
[23:22:05.744]      // while-condition  =>  TRUE
[23:22:05.744]      // while "1"  (timeout="200")
[23:22:05.744]      // while-condition  =>  TRUE
[23:22:05.744]      // while "1"  (timeout="200")
[23:22:05.744]      // while-condition  =>  TRUE
[23:22:05.744]      // while "1"  (timeout="200")
[23:22:05.744]      // while-condition  =>  TRUE
[23:22:05.745]      // while "1"  (timeout="200")
[23:22:05.745]      // while-condition  =>  TRUE
[23:22:05.745]      // while "1"  (timeout="200")
[23:22:05.745]      // while-condition  =>  TRUE
[23:22:05.745]      // while "1"  (timeout="200")
[23:22:05.745]      // while-condition  =>  TRUE
[23:22:05.745]      // while "1"  (timeout="200")
[23:22:05.746]      // while-condition  =>  TRUE
[23:22:05.746]      // while "1"  (timeout="200")
[23:22:05.746]      // while-condition  =>  TRUE
[23:22:05.746]      // while "1"  (timeout="200")
[23:22:05.746]      // while-condition  =>  TRUE
[23:22:05.746]      // while "1"  (timeout="200")
[23:22:05.746]      // while-condition  =>  TRUE
[23:22:05.746]      // while "1"  (timeout="200")
[23:22:05.746]      // while-condition  =>  TRUE
[23:22:05.746]      // while "1"  (timeout="200")
[23:22:05.746]      // while-condition  =>  TRUE
[23:22:05.746]      // while "1"  (timeout="200")
[23:22:05.747]      // while-condition  =>  TRUE
[23:22:05.747]      // while "1"  (timeout="200")
[23:22:05.747]      // while-condition  =>  TRUE
[23:22:05.747]      // while "1"  (timeout="200")
[23:22:05.747]      // while-condition  =>  TRUE
[23:22:05.747]      // while "1"  (timeout="200")
[23:22:05.747]      // while-condition  =>  TRUE
[23:22:05.747]      // while "1"  (timeout="200")
[23:22:05.747]      // while-condition  =>  TRUE
[23:22:05.747]      // while "1"  (timeout="200")
[23:22:05.748]      // while-condition  =>  TRUE
[23:22:05.748]      // while "1"  (timeout="200")
[23:22:05.748]      // while-condition  =>  TRUE
[23:22:05.748]      // while "1"  (timeout="200")
[23:22:05.748]      // while-condition  =>  TRUE
[23:22:05.748]      // while "1"  (timeout="200")
[23:22:05.748]      // while-condition  =>  TRUE
[23:22:05.748]      // while "1"  (timeout="200")
[23:22:05.748]      // while-condition  =>  TRUE
[23:22:05.748]      // while "1"  (timeout="200")
[23:22:05.748]      // while-condition  =>  TRUE
[23:22:05.749]      // while "1"  (timeout="200")
[23:22:05.749]      // while-condition  =>  TRUE
[23:22:05.749]      // while "1"  (timeout="200")
[23:22:05.749]      // while-condition  =>  TRUE
[23:22:05.749]      // while "1"  (timeout="200")
[23:22:05.749]      // while-condition  =>  TRUE
[23:22:05.749]      // while "1"  (timeout="200")
[23:22:05.749]      // while-condition  =>  TRUE
[23:22:05.749]      // while "1"  (timeout="200")
[23:22:05.749]      // while-condition  =>  TRUE
[23:22:05.749]      // while "1"  (timeout="200")
[23:22:05.749]      // while-condition  =>  TRUE
[23:22:05.750]      // while "1"  (timeout="200")
[23:22:05.750]      // while-condition  =>  TRUE
[23:22:05.750]      // while "1"  (timeout="200")
[23:22:05.750]      // while-condition  =>  TRUE
[23:22:05.750]      // while "1"  (timeout="200")
[23:22:05.750]      // while-condition  =>  TRUE
[23:22:05.750]      // while "1"  (timeout="200")
[23:22:05.750]      // while-condition  =>  TRUE
[23:22:05.750]      // while "1"  (timeout="200")
[23:22:05.750]      // while-condition  =>  TRUE
[23:22:05.750]      // while "1"  (timeout="200")
[23:22:05.750]      // while-condition  =>  TRUE
[23:22:05.751]      // while "1"  (timeout="200")
[23:22:05.751]      // while  =>  TIMEOUT
[23:22:05.751]      // end while "1"
[23:22:05.751]    </control>
[23:22:05.751]    <control if="canReadPins" while="" timeout="0" info="">
[23:22:05.752]      // if-block "canReadPins"
[23:22:05.752]        // =>  TRUE
[23:22:05.752]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:22:05.752]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:22:05.753]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:22:05.754]        // while-condition  =>  FALSE
[23:22:05.754]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:22:05.754]      </control>
[23:22:05.754]      // end if-block "canReadPins"
[23:22:05.754]    </control>
[23:22:05.755]    <control if="!canReadPins" while="" timeout="0" info="">
[23:22:05.755]      // if-block "!canReadPins"
[23:22:05.755]        // =>  FALSE
[23:22:05.755]      // skip if-block "!canReadPins"
[23:22:05.755]    </control>
[23:22:05.755]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:22:05.755]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:22:05.755]        // =>  TRUE
[23:22:05.755]      <block atomic="false" info="">
[23:22:05.755]        WriteAP(0x00, 0x190008);
[23:22:05.759]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:22:05.759]        WriteAP(0xF0, 0x01);
[23:22:05.764]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:22:05.764]      </block>
[23:22:05.764]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:22:05.764]    </control>
[23:22:05.765]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:22:05.765]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:22:05.765]        // =>  FALSE
[23:22:05.765]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:22:05.765]    </control>
[23:22:05.765]    <block atomic="false" info="">
[23:22:05.766]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:22:05.774]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:22:05.774]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:22:05.774]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:22:05.774]      __ap = 0; //lets make sure we reset the access point selection
[23:22:05.774]        // -> [__ap <= 0x00000000]
[23:22:05.774]    </block>
[23:22:05.774]  </sequence>
[23:22:05.774]  
[23:22:05.806]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:22:05.806]  
[23:22:05.807]  <debugvars>
[23:22:05.807]    // Pre-defined
[23:22:05.807]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:22:05.807]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:22:05.808]    __dp=0x00000000
[23:22:05.808]    __ap=0x00000000
[23:22:05.808]    __traceout=0x00000000      (Trace Disabled)
[23:22:05.808]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:22:05.808]    __FlashAddr=0x00000000
[23:22:05.808]    __FlashLen=0x00000000
[23:22:05.808]    __FlashArg=0x00000000
[23:22:05.808]    __FlashOp=0x00000000
[23:22:05.808]    __Result=0x00000000
[23:22:05.808]  </debugvars>
[23:22:05.808]  
[23:22:05.809]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:22:05.809]    <block atomic="false" info="">
[23:22:05.809]      __var deviceID = 0;
[23:22:05.809]        // -> [deviceID <= 0x00000000]
[23:22:05.809]      __var version = 0;
[23:22:05.809]        // -> [version <= 0x00000000]
[23:22:05.809]      __var partNum = 0;
[23:22:05.809]        // -> [partNum <= 0x00000000]
[23:22:05.809]      __var manuf = 0;
[23:22:05.809]        // -> [manuf <= 0x00000000]
[23:22:05.809]      __var isMSPM0G1X0X_G3X0X = 0;
[23:22:05.810]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:22:05.810]      __var isProduction = 0;
[23:22:05.810]        // -> [isProduction <= 0x00000000]
[23:22:05.810]      __var continueId = 0;
[23:22:05.810]        // -> [continueId <= 0x00000000]
[23:22:05.810]      deviceID =   Read32(0x41C40004);
[23:22:05.820]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:22:05.820]        // -> [deviceID <= 0x2BB8802F]
[23:22:05.820]      version = deviceID >> 28;
[23:22:05.820]        // -> [version <= 0x00000002]
[23:22:05.820]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:22:05.820]        // -> [partNum <= 0x0000BB88]
[23:22:05.820]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:22:05.820]        // -> [manuf <= 0x00000017]
[23:22:05.820]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:22:05.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:22:05.821]      isProduction = (version > 0);
[23:22:05.821]        // -> [isProduction <= 0x00000001]
[23:22:05.821]    </block>
[23:22:05.821]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:22:05.821]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:22:05.821]        // =>  FALSE
[23:22:05.821]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:22:05.822]    </control>
[23:22:05.822]    <control if="continueId == 4" while="" timeout="0" info="">
[23:22:05.822]      // if-block "continueId == 4"
[23:22:05.822]        // =>  FALSE
[23:22:05.822]      // skip if-block "continueId == 4"
[23:22:05.822]    </control>
[23:22:05.822]    <control if="!isProduction" while="" timeout="0" info="">
[23:22:05.822]      // if-block "!isProduction"
[23:22:05.822]        // =>  FALSE
[23:22:05.822]      // skip if-block "!isProduction"
[23:22:05.822]    </control>
[23:22:05.822]  </sequence>
[23:22:05.822]  
[23:29:38.428]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:38.428]  
[23:29:38.428]  <debugvars>
[23:29:38.428]    // Pre-defined
[23:29:38.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:38.429]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:38.429]    __dp=0x00000000
[23:29:38.429]    __ap=0x00000000
[23:29:38.429]    __traceout=0x00000000      (Trace Disabled)
[23:29:38.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:38.429]    __FlashAddr=0x00000000
[23:29:38.429]    __FlashLen=0x00000000
[23:29:38.429]    __FlashArg=0x00000000
[23:29:38.429]    __FlashOp=0x00000000
[23:29:38.429]    __Result=0x00000000
[23:29:38.429]  </debugvars>
[23:29:38.429]  
[23:29:38.429]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:38.429]    <block atomic="false" info="">
[23:29:38.431]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:38.431]        // -> [isSWJ <= 0x00000001]
[23:29:38.431]      __var hasDormant = __protocol & 0x00020000;
[23:29:38.431]        // -> [hasDormant <= 0x00000000]
[23:29:38.431]      __var protType   = __protocol & 0x0000FFFF;
[23:29:38.431]        // -> [protType <= 0x00000002]
[23:29:38.431]    </block>
[23:29:38.431]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:38.431]      // if-block "protType == 1"
[23:29:38.431]        // =>  FALSE
[23:29:38.431]      // skip if-block "protType == 1"
[23:29:38.431]    </control>
[23:29:38.431]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:38.432]      // if-block "protType == 2"
[23:29:38.432]        // =>  TRUE
[23:29:38.432]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:38.432]        // if-block "isSWJ"
[23:29:38.432]          // =>  TRUE
[23:29:38.432]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:38.432]          // if-block "hasDormant"
[23:29:38.432]            // =>  FALSE
[23:29:38.432]          // skip if-block "hasDormant"
[23:29:38.432]        </control>
[23:29:38.432]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:38.432]          // if-block "!hasDormant"
[23:29:38.432]            // =>  TRUE
[23:29:38.433]          <block atomic="false" info="">
[23:29:38.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:38.435]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:38.435]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:38.436]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:38.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:38.439]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:38.439]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:38.440]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:38.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:38.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:38.442]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:38.443]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:38.443]          </block>
[23:29:38.443]          // end if-block "!hasDormant"
[23:29:38.443]        </control>
[23:29:38.443]        // end if-block "isSWJ"
[23:29:38.443]      </control>
[23:29:38.443]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:38.443]        // if-block "!isSWJ"
[23:29:38.443]          // =>  FALSE
[23:29:38.443]        // skip if-block "!isSWJ"
[23:29:38.443]      </control>
[23:29:38.443]      <block atomic="false" info="">
[23:29:38.445]        ReadDP(0x0);
[23:29:38.447]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:38.447]      </block>
[23:29:38.447]      // end if-block "protType == 2"
[23:29:38.447]    </control>
[23:29:38.447]  </sequence>
[23:29:38.447]  
[23:29:38.454]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:29:38.454]  
[23:29:38.454]  <debugvars>
[23:29:38.454]    // Pre-defined
[23:29:38.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:38.454]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:38.455]    __dp=0x00000000
[23:29:38.455]    __ap=0x00000000
[23:29:38.455]    __traceout=0x00000000      (Trace Disabled)
[23:29:38.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:38.455]    __FlashAddr=0x00000000
[23:29:38.455]    __FlashLen=0x00000000
[23:29:38.455]    __FlashArg=0x00000000
[23:29:38.455]    __FlashOp=0x00000000
[23:29:38.455]    __Result=0x00000000
[23:29:38.455]  </debugvars>
[23:29:38.455]  
[23:29:38.456]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:29:38.456]    <block atomic="false" info="">
[23:29:38.456]      __var SW_DP_ABORT       = 0x0;
[23:29:38.456]        // -> [SW_DP_ABORT <= 0x00000000]
[23:29:38.456]      __var DP_CTRL_STAT      = 0x4;
[23:29:38.456]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:29:38.456]      __var DP_SELECT         = 0x8;
[23:29:38.456]        // -> [DP_SELECT <= 0x00000008]
[23:29:38.456]      __var powered_down      = 0;
[23:29:38.456]        // -> [powered_down <= 0x00000000]
[23:29:38.456]      WriteDP(DP_SELECT, 0x00000000);
[23:29:38.458]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:29:38.458]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:29:38.459]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:29:38.459]        // -> [powered_down <= 0x00000001]
[23:29:38.460]    </block>
[23:29:38.460]    <control if="powered_down" while="" timeout="0" info="">
[23:29:38.460]      // if-block "powered_down"
[23:29:38.460]        // =>  TRUE
[23:29:38.460]      <block atomic="false" info="">
[23:29:38.460]        Message(0, "Debug/System power-up request sent");
[23:29:38.463]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:29:38.465]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:29:38.465]      </block>
[23:29:38.465]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:29:38.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:38.466]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:29:38.466]        // while-condition  =>  FALSE
[23:29:38.466]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:29:38.466]      </control>
[23:29:38.466]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:29:38.468]        // if-block "(__protocol & 0xFFFF) == 1"
[23:29:38.468]          // =>  FALSE
[23:29:38.468]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:29:38.468]      </control>
[23:29:38.468]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:29:38.468]        // if-block "(__protocol & 0xFFFF) == 2"
[23:29:38.468]          // =>  TRUE
[23:29:38.468]        <block atomic="false" info="">
[23:29:38.468]          Message(0, "executing SWD power up");
[23:29:38.471]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:29:38.472]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:29:38.472]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:29:38.474]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:29:38.474]        </block>
[23:29:38.475]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:29:38.475]      </control>
[23:29:38.475]      // end if-block "powered_down"
[23:29:38.475]    </control>
[23:29:38.475]    <block atomic="false" info="">
[23:29:38.475]      __var DEBUG_PORT_VAL    = 0;
[23:29:38.475]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:29:38.475]      __var ACCESS_POINT_VAL  = 0;
[23:29:38.475]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:29:38.475]      __ap = 1; 
[23:29:38.475]        // -> [__ap <= 0x00000001]
[23:29:38.475]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:29:38.479]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:29:38.479]      __ap = 4;
[23:29:38.479]        // -> [__ap <= 0x00000004]
[23:29:38.479]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:29:38.491]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:29:38.491]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:29:38.491]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:29:38.494]    </block>
[23:29:38.494]    <block atomic="false" info="">
[23:29:38.494]      __var nReset = 0x80;
[23:29:38.494]        // -> [nReset <= 0x00000080]
[23:29:38.494]      __var canReadPins = 0;
[23:29:38.494]        // -> [canReadPins <= 0x00000000]
[23:29:38.495]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:29:38.495]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:29:38.497]        // -> [canReadPins <= 0x00000001]
[23:29:38.497]    </block>
[23:29:38.497]    <control if="" while="1" timeout="200" info="">
[23:29:38.497]      // while "1"  (timeout="200")
[23:29:38.497]      // while-condition  =>  TRUE
[23:29:38.498]      // while "1"  (timeout="200")
[23:29:38.498]      // while-condition  =>  TRUE
[23:29:38.498]      // while "1"  (timeout="200")
[23:29:38.498]      // while-condition  =>  TRUE
[23:29:38.498]      // while "1"  (timeout="200")
[23:29:38.498]      // while-condition  =>  TRUE
[23:29:38.498]      // while "1"  (timeout="200")
[23:29:38.498]      // while-condition  =>  TRUE
[23:29:38.498]      // while "1"  (timeout="200")
[23:29:38.498]      // while-condition  =>  TRUE
[23:29:38.498]      // while "1"  (timeout="200")
[23:29:38.499]      // while-condition  =>  TRUE
[23:29:38.499]      // while "1"  (timeout="200")
[23:29:38.499]      // while-condition  =>  TRUE
[23:29:38.499]      // while "1"  (timeout="200")
[23:29:38.499]      // while-condition  =>  TRUE
[23:29:38.499]      // while "1"  (timeout="200")
[23:29:38.499]      // while-condition  =>  TRUE
[23:29:38.499]      // while "1"  (timeout="200")
[23:29:38.499]      // while-condition  =>  TRUE
[23:29:38.499]      // while "1"  (timeout="200")
[23:29:38.500]      // while-condition  =>  TRUE
[23:29:38.500]      // while "1"  (timeout="200")
[23:29:38.500]      // while-condition  =>  TRUE
[23:29:38.500]      // while "1"  (timeout="200")
[23:29:38.500]      // while-condition  =>  TRUE
[23:29:38.500]      // while "1"  (timeout="200")
[23:29:38.501]      // while-condition  =>  TRUE
[23:29:38.501]      // while "1"  (timeout="200")
[23:29:38.501]      // while-condition  =>  TRUE
[23:29:38.501]      // while "1"  (timeout="200")
[23:29:38.501]      // while-condition  =>  TRUE
[23:29:38.501]      // while "1"  (timeout="200")
[23:29:38.501]      // while-condition  =>  TRUE
[23:29:38.501]      // while "1"  (timeout="200")
[23:29:38.501]      // while-condition  =>  TRUE
[23:29:38.501]      // while "1"  (timeout="200")
[23:29:38.501]      // while-condition  =>  TRUE
[23:29:38.502]      // while "1"  (timeout="200")
[23:29:38.502]      // while  =>  TIMEOUT
[23:29:38.502]      // end while "1"
[23:29:38.502]    </control>
[23:29:38.502]    <control if="canReadPins" while="" timeout="0" info="">
[23:29:38.502]      // if-block "canReadPins"
[23:29:38.502]        // =>  TRUE
[23:29:38.502]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:29:38.502]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:29:38.504]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:29:38.504]        // while-condition  =>  FALSE
[23:29:38.505]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:29:38.505]      </control>
[23:29:38.505]      // end if-block "canReadPins"
[23:29:38.505]    </control>
[23:29:38.505]    <control if="!canReadPins" while="" timeout="0" info="">
[23:29:38.505]      // if-block "!canReadPins"
[23:29:38.505]        // =>  FALSE
[23:29:38.505]      // skip if-block "!canReadPins"
[23:29:38.505]    </control>
[23:29:38.505]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:29:38.506]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:29:38.506]        // =>  TRUE
[23:29:38.506]      <block atomic="false" info="">
[23:29:38.506]        WriteAP(0x00, 0x190008);
[23:29:38.507]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:29:38.507]        WriteAP(0xF0, 0x01);
[23:29:38.511]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:29:38.511]      </block>
[23:29:38.511]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:29:38.511]    </control>
[23:29:38.511]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:29:38.512]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:29:38.512]        // =>  FALSE
[23:29:38.512]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:29:38.512]    </control>
[23:29:38.512]    <block atomic="false" info="">
[23:29:38.512]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:29:38.519]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:29:38.519]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:29:38.520]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:29:38.521]      __ap = 0; //lets make sure we reset the access point selection
[23:29:38.521]        // -> [__ap <= 0x00000000]
[23:29:38.521]    </block>
[23:29:38.522]  </sequence>
[23:29:38.522]  
[23:29:38.549]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:29:38.549]  
[23:29:38.549]  <debugvars>
[23:29:38.549]    // Pre-defined
[23:29:38.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:38.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:29:38.549]    __dp=0x00000000
[23:29:38.549]    __ap=0x00000000
[23:29:38.549]    __traceout=0x00000000      (Trace Disabled)
[23:29:38.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:38.550]    __FlashAddr=0x00000000
[23:29:38.550]    __FlashLen=0x00000000
[23:29:38.550]    __FlashArg=0x00000000
[23:29:38.550]    __FlashOp=0x00000000
[23:29:38.550]    __Result=0x00000000
[23:29:38.550]  </debugvars>
[23:29:38.550]  
[23:29:38.550]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:29:38.550]    <block atomic="false" info="">
[23:29:38.550]      __var deviceID = 0;
[23:29:38.550]        // -> [deviceID <= 0x00000000]
[23:29:38.551]      __var version = 0;
[23:29:38.551]        // -> [version <= 0x00000000]
[23:29:38.551]      __var partNum = 0;
[23:29:38.551]        // -> [partNum <= 0x00000000]
[23:29:38.551]      __var manuf = 0;
[23:29:38.551]        // -> [manuf <= 0x00000000]
[23:29:38.551]      __var isMSPM0G1X0X_G3X0X = 0;
[23:29:38.551]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:29:38.551]      __var isProduction = 0;
[23:29:38.551]        // -> [isProduction <= 0x00000000]
[23:29:38.551]      __var continueId = 0;
[23:29:38.551]        // -> [continueId <= 0x00000000]
[23:29:38.552]      deviceID =   Read32(0x41C40004);
[23:29:38.558]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:29:38.558]        // -> [deviceID <= 0x2BB8802F]
[23:29:38.558]      version = deviceID >> 28;
[23:29:38.558]        // -> [version <= 0x00000002]
[23:29:38.558]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:29:38.558]        // -> [partNum <= 0x0000BB88]
[23:29:38.558]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:29:38.558]        // -> [manuf <= 0x00000017]
[23:29:38.558]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:29:38.559]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:29:38.559]      isProduction = (version > 0);
[23:29:38.559]        // -> [isProduction <= 0x00000001]
[23:29:38.559]    </block>
[23:29:38.559]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:29:38.559]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:29:38.559]        // =>  FALSE
[23:29:38.559]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:29:38.560]    </control>
[23:29:38.560]    <control if="continueId == 4" while="" timeout="0" info="">
[23:29:38.560]      // if-block "continueId == 4"
[23:29:38.560]        // =>  FALSE
[23:29:38.560]      // skip if-block "continueId == 4"
[23:29:38.560]    </control>
[23:29:38.560]    <control if="!isProduction" while="" timeout="0" info="">
[23:29:38.561]      // if-block "!isProduction"
[23:29:38.561]        // =>  FALSE
[23:29:38.561]      // skip if-block "!isProduction"
[23:29:38.561]    </control>
[23:29:38.561]  </sequence>
[23:29:38.561]  
[23:30:12.060]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:30:12.060]  
[23:30:12.061]  <debugvars>
[23:30:12.061]    // Pre-defined
[23:30:12.061]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:12.061]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:12.061]    __dp=0x00000000
[23:30:12.061]    __ap=0x00000000
[23:30:12.061]    __traceout=0x00000000      (Trace Disabled)
[23:30:12.061]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:12.062]    __FlashAddr=0x00000000
[23:30:12.062]    __FlashLen=0x00000000
[23:30:12.062]    __FlashArg=0x00000000
[23:30:12.062]    __FlashOp=0x00000000
[23:30:12.062]    __Result=0x00000000
[23:30:12.062]  </debugvars>
[23:30:12.062]  
[23:30:12.062]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:30:12.062]    <block atomic="false" info="">
[23:30:12.063]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:30:12.063]        // -> [isSWJ <= 0x00000001]
[23:30:12.063]      __var hasDormant = __protocol & 0x00020000;
[23:30:12.063]        // -> [hasDormant <= 0x00000000]
[23:30:12.063]      __var protType   = __protocol & 0x0000FFFF;
[23:30:12.063]        // -> [protType <= 0x00000002]
[23:30:12.064]    </block>
[23:30:12.064]    <control if="protType == 1" while="" timeout="0" info="">
[23:30:12.065]      // if-block "protType == 1"
[23:30:12.065]        // =>  FALSE
[23:30:12.065]      // skip if-block "protType == 1"
[23:30:12.065]    </control>
[23:30:12.065]    <control if="protType == 2" while="" timeout="0" info="">
[23:30:12.065]      // if-block "protType == 2"
[23:30:12.065]        // =>  TRUE
[23:30:12.065]      <control if="isSWJ" while="" timeout="0" info="">
[23:30:12.065]        // if-block "isSWJ"
[23:30:12.065]          // =>  TRUE
[23:30:12.065]        <control if="hasDormant" while="" timeout="0" info="">
[23:30:12.065]          // if-block "hasDormant"
[23:30:12.066]            // =>  FALSE
[23:30:12.066]          // skip if-block "hasDormant"
[23:30:12.066]        </control>
[23:30:12.066]        <control if="!hasDormant" while="" timeout="0" info="">
[23:30:12.066]          // if-block "!hasDormant"
[23:30:12.066]            // =>  TRUE
[23:30:12.066]          <block atomic="false" info="">
[23:30:12.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:30:12.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:12.068]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:30:12.073]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:30:12.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:30:12.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:12.076]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:30:12.077]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:30:12.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:30:12.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:12.080]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:30:12.083]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:30:12.083]          </block>
[23:30:12.083]          // end if-block "!hasDormant"
[23:30:12.083]        </control>
[23:30:12.083]        // end if-block "isSWJ"
[23:30:12.083]      </control>
[23:30:12.083]      <control if="!isSWJ" while="" timeout="0" info="">
[23:30:12.083]        // if-block "!isSWJ"
[23:30:12.083]          // =>  FALSE
[23:30:12.083]        // skip if-block "!isSWJ"
[23:30:12.083]      </control>
[23:30:12.083]      <block atomic="false" info="">
[23:30:12.083]        ReadDP(0x0);
[23:30:12.085]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:30:12.085]      </block>
[23:30:12.085]      // end if-block "protType == 2"
[23:30:12.086]    </control>
[23:30:12.086]  </sequence>
[23:30:12.086]  
[23:30:12.090]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:30:12.090]  
[23:30:12.090]  <debugvars>
[23:30:12.091]    // Pre-defined
[23:30:12.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:12.091]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:12.091]    __dp=0x00000000
[23:30:12.091]    __ap=0x00000000
[23:30:12.091]    __traceout=0x00000000      (Trace Disabled)
[23:30:12.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:12.091]    __FlashAddr=0x00000000
[23:30:12.091]    __FlashLen=0x00000000
[23:30:12.091]    __FlashArg=0x00000000
[23:30:12.091]    __FlashOp=0x00000000
[23:30:12.092]    __Result=0x00000000
[23:30:12.092]  </debugvars>
[23:30:12.092]  
[23:30:12.092]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:30:12.092]    <block atomic="false" info="">
[23:30:12.092]      __var SW_DP_ABORT       = 0x0;
[23:30:12.093]        // -> [SW_DP_ABORT <= 0x00000000]
[23:30:12.093]      __var DP_CTRL_STAT      = 0x4;
[23:30:12.093]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:30:12.093]      __var DP_SELECT         = 0x8;
[23:30:12.093]        // -> [DP_SELECT <= 0x00000008]
[23:30:12.094]      __var powered_down      = 0;
[23:30:12.094]        // -> [powered_down <= 0x00000000]
[23:30:12.094]      WriteDP(DP_SELECT, 0x00000000);
[23:30:12.096]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:30:12.096]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:30:12.098]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:30:12.098]        // -> [powered_down <= 0x00000001]
[23:30:12.098]    </block>
[23:30:12.098]    <control if="powered_down" while="" timeout="0" info="">
[23:30:12.098]      // if-block "powered_down"
[23:30:12.099]        // =>  TRUE
[23:30:12.099]      <block atomic="false" info="">
[23:30:12.099]        Message(0, "Debug/System power-up request sent");
[23:30:12.099]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:30:12.102]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:30:12.102]      </block>
[23:30:12.102]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:30:12.102]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:30:12.104]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:30:12.104]        // while-condition  =>  FALSE
[23:30:12.104]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:30:12.104]      </control>
[23:30:12.104]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:30:12.105]        // if-block "(__protocol & 0xFFFF) == 1"
[23:30:12.105]          // =>  FALSE
[23:30:12.105]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:30:12.105]      </control>
[23:30:12.105]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:30:12.105]        // if-block "(__protocol & 0xFFFF) == 2"
[23:30:12.105]          // =>  TRUE
[23:30:12.105]        <block atomic="false" info="">
[23:30:12.105]          Message(0, "executing SWD power up");
[23:30:12.106]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:30:12.108]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:30:12.108]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:30:12.111]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:30:12.111]        </block>
[23:30:12.112]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:30:12.112]      </control>
[23:30:12.112]      // end if-block "powered_down"
[23:30:12.112]    </control>
[23:30:12.112]    <block atomic="false" info="">
[23:30:12.112]      __var DEBUG_PORT_VAL    = 0;
[23:30:12.112]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:30:12.112]      __var ACCESS_POINT_VAL  = 0;
[23:30:12.112]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:30:12.112]      __ap = 1; 
[23:30:12.112]        // -> [__ap <= 0x00000001]
[23:30:12.112]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:30:12.116]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:30:12.116]      __ap = 4;
[23:30:12.116]        // -> [__ap <= 0x00000004]
[23:30:12.116]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:12.121]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:30:12.121]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:30:12.121]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:12.121]    </block>
[23:30:12.121]    <block atomic="false" info="">
[23:30:12.121]      __var nReset = 0x80;
[23:30:12.121]        // -> [nReset <= 0x00000080]
[23:30:12.121]      __var canReadPins = 0;
[23:30:12.121]        // -> [canReadPins <= 0x00000000]
[23:30:12.122]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:30:12.123]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:30:12.123]        // -> [canReadPins <= 0x00000001]
[23:30:12.124]    </block>
[23:30:12.124]    <control if="" while="1" timeout="200" info="">
[23:30:12.124]      // while "1"  (timeout="200")
[23:30:12.124]      // while-condition  =>  TRUE
[23:30:12.124]      // while "1"  (timeout="200")
[23:30:12.124]      // while-condition  =>  TRUE
[23:30:12.124]      // while "1"  (timeout="200")
[23:30:12.124]      // while-condition  =>  TRUE
[23:30:12.124]      // while "1"  (timeout="200")
[23:30:12.124]      // while-condition  =>  TRUE
[23:30:12.124]      // while "1"  (timeout="200")
[23:30:12.125]      // while-condition  =>  TRUE
[23:30:12.125]      // while "1"  (timeout="200")
[23:30:12.125]      // while-condition  =>  TRUE
[23:30:12.125]      // while "1"  (timeout="200")
[23:30:12.125]      // while-condition  =>  TRUE
[23:30:12.125]      // while "1"  (timeout="200")
[23:30:12.125]      // while-condition  =>  TRUE
[23:30:12.125]      // while "1"  (timeout="200")
[23:30:12.125]      // while-condition  =>  TRUE
[23:30:12.125]      // while "1"  (timeout="200")
[23:30:12.125]      // while-condition  =>  TRUE
[23:30:12.126]      // while "1"  (timeout="200")
[23:30:12.126]      // while-condition  =>  TRUE
[23:30:12.126]      // while "1"  (timeout="200")
[23:30:12.126]      // while-condition  =>  TRUE
[23:30:12.126]      // while "1"  (timeout="200")
[23:30:12.126]      // while-condition  =>  TRUE
[23:30:12.126]      // while "1"  (timeout="200")
[23:30:12.126]      // while-condition  =>  TRUE
[23:30:12.126]      // while "1"  (timeout="200")
[23:30:12.126]      // while-condition  =>  TRUE
[23:30:12.126]      // while "1"  (timeout="200")
[23:30:12.126]      // while-condition  =>  TRUE
[23:30:12.127]      // while "1"  (timeout="200")
[23:30:12.127]      // while  =>  TIMEOUT
[23:30:12.127]      // end while "1"
[23:30:12.127]    </control>
[23:30:12.127]    <control if="canReadPins" while="" timeout="0" info="">
[23:30:12.127]      // if-block "canReadPins"
[23:30:12.127]        // =>  TRUE
[23:30:12.127]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:30:12.127]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:30:12.132]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:30:12.132]        // while-condition  =>  FALSE
[23:30:12.132]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:30:12.132]      </control>
[23:30:12.132]      // end if-block "canReadPins"
[23:30:12.132]    </control>
[23:30:12.132]    <control if="!canReadPins" while="" timeout="0" info="">
[23:30:12.133]      // if-block "!canReadPins"
[23:30:12.133]        // =>  FALSE
[23:30:12.133]      // skip if-block "!canReadPins"
[23:30:12.133]    </control>
[23:30:12.133]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:30:12.133]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:12.133]        // =>  TRUE
[23:30:12.133]      <block atomic="false" info="">
[23:30:12.133]        WriteAP(0x00, 0x190008);
[23:30:12.135]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:12.135]        WriteAP(0xF0, 0x01);
[23:30:12.137]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:12.138]      </block>
[23:30:12.138]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:12.138]    </control>
[23:30:12.138]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:30:12.138]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:12.138]        // =>  FALSE
[23:30:12.138]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:12.138]    </control>
[23:30:12.138]    <block atomic="false" info="">
[23:30:12.139]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:12.142]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:30:12.143]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:30:12.143]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:12.143]      __ap = 0; //lets make sure we reset the access point selection
[23:30:12.143]        // -> [__ap <= 0x00000000]
[23:30:12.143]    </block>
[23:30:12.143]  </sequence>
[23:30:12.143]  
[23:30:12.181]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:30:12.181]  
[23:30:12.181]  <debugvars>
[23:30:12.181]    // Pre-defined
[23:30:12.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:12.181]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:30:12.181]    __dp=0x00000000
[23:30:12.181]    __ap=0x00000000
[23:30:12.181]    __traceout=0x00000000      (Trace Disabled)
[23:30:12.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:12.181]    __FlashAddr=0x00000000
[23:30:12.181]    __FlashLen=0x00000000
[23:30:12.181]    __FlashArg=0x00000000
[23:30:12.181]    __FlashOp=0x00000000
[23:30:12.182]    __Result=0x00000000
[23:30:12.182]  </debugvars>
[23:30:12.182]  
[23:30:12.182]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:30:12.182]    <block atomic="false" info="">
[23:30:12.182]      __var deviceID = 0;
[23:30:12.182]        // -> [deviceID <= 0x00000000]
[23:30:12.182]      __var version = 0;
[23:30:12.182]        // -> [version <= 0x00000000]
[23:30:12.182]      __var partNum = 0;
[23:30:12.183]        // -> [partNum <= 0x00000000]
[23:30:12.183]      __var manuf = 0;
[23:30:12.183]        // -> [manuf <= 0x00000000]
[23:30:12.183]      __var isMSPM0G1X0X_G3X0X = 0;
[23:30:12.183]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:30:12.183]      __var isProduction = 0;
[23:30:12.183]        // -> [isProduction <= 0x00000000]
[23:30:12.183]      __var continueId = 0;
[23:30:12.183]        // -> [continueId <= 0x00000000]
[23:30:12.183]      deviceID =   Read32(0x41C40004);
[23:30:12.189]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:30:12.189]        // -> [deviceID <= 0x2BB8802F]
[23:30:12.189]      version = deviceID >> 28;
[23:30:12.189]        // -> [version <= 0x00000002]
[23:30:12.189]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:30:12.190]        // -> [partNum <= 0x0000BB88]
[23:30:12.190]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:30:12.190]        // -> [manuf <= 0x00000017]
[23:30:12.190]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:30:12.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:30:12.190]      isProduction = (version > 0);
[23:30:12.190]        // -> [isProduction <= 0x00000001]
[23:30:12.190]    </block>
[23:30:12.190]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:30:12.190]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:30:12.191]        // =>  FALSE
[23:30:12.191]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:30:12.191]    </control>
[23:30:12.191]    <control if="continueId == 4" while="" timeout="0" info="">
[23:30:12.191]      // if-block "continueId == 4"
[23:30:12.191]        // =>  FALSE
[23:30:12.191]      // skip if-block "continueId == 4"
[23:30:12.191]    </control>
[23:30:12.191]    <control if="!isProduction" while="" timeout="0" info="">
[23:30:12.191]      // if-block "!isProduction"
[23:30:12.191]        // =>  FALSE
[23:30:12.191]      // skip if-block "!isProduction"
[23:30:12.191]    </control>
[23:30:12.191]  </sequence>
[23:30:12.191]  
[23:33:14.433]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:33:14.433]  
[23:33:14.442]  <debugvars>
[23:33:14.442]    // Pre-defined
[23:33:14.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:33:14.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:33:14.442]    __dp=0x00000000
[23:33:14.442]    __ap=0x00000000
[23:33:14.442]    __traceout=0x00000000      (Trace Disabled)
[23:33:14.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:33:14.442]    __FlashAddr=0x00000000
[23:33:14.443]    __FlashLen=0x00000000
[23:33:14.443]    __FlashArg=0x00000000
[23:33:14.443]    __FlashOp=0x00000000
[23:33:14.443]    __Result=0x00000000
[23:33:14.443]  </debugvars>
[23:33:14.443]  
[23:33:14.443]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:33:14.443]    <block atomic="false" info="">
[23:33:14.443]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:33:14.443]        // -> [isSWJ <= 0x00000001]
[23:33:14.443]      __var hasDormant = __protocol & 0x00020000;
[23:33:14.444]        // -> [hasDormant <= 0x00000000]
[23:33:14.444]      __var protType   = __protocol & 0x0000FFFF;
[23:33:14.444]        // -> [protType <= 0x00000002]
[23:33:14.444]    </block>
[23:33:14.444]    <control if="protType == 1" while="" timeout="0" info="">
[23:33:14.444]      // if-block "protType == 1"
[23:33:14.444]        // =>  FALSE
[23:33:14.444]      // skip if-block "protType == 1"
[23:33:14.444]    </control>
[23:33:14.444]    <control if="protType == 2" while="" timeout="0" info="">
[23:33:14.444]      // if-block "protType == 2"
[23:33:14.445]        // =>  TRUE
[23:33:14.445]      <control if="isSWJ" while="" timeout="0" info="">
[23:33:14.445]        // if-block "isSWJ"
[23:33:14.445]          // =>  TRUE
[23:33:14.445]        <control if="hasDormant" while="" timeout="0" info="">
[23:33:14.445]          // if-block "hasDormant"
[23:33:14.445]            // =>  FALSE
[23:33:14.445]          // skip if-block "hasDormant"
[23:33:14.445]        </control>
[23:33:14.445]        <control if="!hasDormant" while="" timeout="0" info="">
[23:33:14.445]          // if-block "!hasDormant"
[23:33:14.446]            // =>  TRUE
[23:33:14.446]          <block atomic="false" info="">
[23:33:14.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:33:14.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:33:14.447]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:33:14.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:33:14.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:33:14.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:33:14.456]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:33:14.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:33:14.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:33:14.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:33:14.458]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:33:14.459]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:33:14.459]          </block>
[23:33:14.460]          // end if-block "!hasDormant"
[23:33:14.460]        </control>
[23:33:14.460]        // end if-block "isSWJ"
[23:33:14.460]      </control>
[23:33:14.460]      <control if="!isSWJ" while="" timeout="0" info="">
[23:33:14.460]        // if-block "!isSWJ"
[23:33:14.460]          // =>  FALSE
[23:33:14.460]        // skip if-block "!isSWJ"
[23:33:14.460]      </control>
[23:33:14.460]      <block atomic="false" info="">
[23:33:14.460]        ReadDP(0x0);
[23:33:14.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:33:14.463]      </block>
[23:33:14.463]      // end if-block "protType == 2"
[23:33:14.463]    </control>
[23:33:14.463]  </sequence>
[23:33:14.463]  
[23:33:14.469]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:33:14.469]  
[23:33:14.469]  <debugvars>
[23:33:14.469]    // Pre-defined
[23:33:14.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:33:14.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:33:14.469]    __dp=0x00000000
[23:33:14.469]    __ap=0x00000000
[23:33:14.469]    __traceout=0x00000000      (Trace Disabled)
[23:33:14.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:33:14.469]    __FlashAddr=0x00000000
[23:33:14.469]    __FlashLen=0x00000000
[23:33:14.470]    __FlashArg=0x00000000
[23:33:14.470]    __FlashOp=0x00000000
[23:33:14.470]    __Result=0x00000000
[23:33:14.470]  </debugvars>
[23:33:14.470]  
[23:33:14.470]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:33:14.470]    <block atomic="false" info="">
[23:33:14.470]      __var SW_DP_ABORT       = 0x0;
[23:33:14.470]        // -> [SW_DP_ABORT <= 0x00000000]
[23:33:14.470]      __var DP_CTRL_STAT      = 0x4;
[23:33:14.470]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:33:14.471]      __var DP_SELECT         = 0x8;
[23:33:14.471]        // -> [DP_SELECT <= 0x00000008]
[23:33:14.471]      __var powered_down      = 0;
[23:33:14.471]        // -> [powered_down <= 0x00000000]
[23:33:14.471]      WriteDP(DP_SELECT, 0x00000000);
[23:33:14.477]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:33:14.477]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:33:14.478]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:33:14.479]        // -> [powered_down <= 0x00000001]
[23:33:14.479]    </block>
[23:33:14.479]    <control if="powered_down" while="" timeout="0" info="">
[23:33:14.479]      // if-block "powered_down"
[23:33:14.479]        // =>  TRUE
[23:33:14.479]      <block atomic="false" info="">
[23:33:14.479]        Message(0, "Debug/System power-up request sent");
[23:33:14.479]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:33:14.489]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:33:14.490]      </block>
[23:33:14.490]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:33:14.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:33:14.491]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:33:14.491]        // while-condition  =>  FALSE
[23:33:14.491]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:33:14.491]      </control>
[23:33:14.492]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:33:14.492]        // if-block "(__protocol & 0xFFFF) == 1"
[23:33:14.492]          // =>  FALSE
[23:33:14.492]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:33:14.492]      </control>
[23:33:14.492]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:33:14.492]        // if-block "(__protocol & 0xFFFF) == 2"
[23:33:14.492]          // =>  TRUE
[23:33:14.492]        <block atomic="false" info="">
[23:33:14.492]          Message(0, "executing SWD power up");
[23:33:14.493]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:33:14.494]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:33:14.494]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:33:14.497]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:33:14.497]        </block>
[23:33:14.497]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:33:14.497]      </control>
[23:33:14.497]      // end if-block "powered_down"
[23:33:14.497]    </control>
[23:33:14.497]    <block atomic="false" info="">
[23:33:14.497]      __var DEBUG_PORT_VAL    = 0;
[23:33:14.498]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:33:14.498]      __var ACCESS_POINT_VAL  = 0;
[23:33:14.498]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:33:14.498]      __ap = 1; 
[23:33:14.498]        // -> [__ap <= 0x00000001]
[23:33:14.498]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:33:14.506]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:33:14.506]      __ap = 4;
[23:33:14.506]        // -> [__ap <= 0x00000004]
[23:33:14.506]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:33:14.509]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:33:14.509]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:33:14.509]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:33:14.509]    </block>
[23:33:14.509]    <block atomic="false" info="">
[23:33:14.509]      __var nReset = 0x80;
[23:33:14.510]        // -> [nReset <= 0x00000080]
[23:33:14.510]      __var canReadPins = 0;
[23:33:14.510]        // -> [canReadPins <= 0x00000000]
[23:33:14.510]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:33:14.512]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:33:14.512]        // -> [canReadPins <= 0x00000001]
[23:33:14.512]    </block>
[23:33:14.512]    <control if="" while="1" timeout="200" info="">
[23:33:14.512]      // while "1"  (timeout="200")
[23:33:14.512]      // while-condition  =>  TRUE
[23:33:14.512]      // while "1"  (timeout="200")
[23:33:14.512]      // while-condition  =>  TRUE
[23:33:14.512]      // while "1"  (timeout="200")
[23:33:14.513]      // while-condition  =>  TRUE
[23:33:14.513]      // while "1"  (timeout="200")
[23:33:14.513]      // while-condition  =>  TRUE
[23:33:14.513]      // while "1"  (timeout="200")
[23:33:14.513]      // while-condition  =>  TRUE
[23:33:14.513]      // while "1"  (timeout="200")
[23:33:14.513]      // while-condition  =>  TRUE
[23:33:14.513]      // while "1"  (timeout="200")
[23:33:14.513]      // while-condition  =>  TRUE
[23:33:14.513]      // while "1"  (timeout="200")
[23:33:14.513]      // while-condition  =>  TRUE
[23:33:14.514]      // while "1"  (timeout="200")
[23:33:14.515]      // while-condition  =>  TRUE
[23:33:14.515]      // while "1"  (timeout="200")
[23:33:14.515]      // while-condition  =>  TRUE
[23:33:14.515]      // while "1"  (timeout="200")
[23:33:14.515]      // while-condition  =>  TRUE
[23:33:14.515]      // while "1"  (timeout="200")
[23:33:14.515]      // while-condition  =>  TRUE
[23:33:14.515]      // while "1"  (timeout="200")
[23:33:14.515]      // while-condition  =>  TRUE
[23:33:14.516]      // while "1"  (timeout="200")
[23:33:14.516]      // while-condition  =>  TRUE
[23:33:14.516]      // while "1"  (timeout="200")
[23:33:14.516]      // while-condition  =>  TRUE
[23:33:14.516]      // while "1"  (timeout="200")
[23:33:14.516]      // while-condition  =>  TRUE
[23:33:14.516]      // while "1"  (timeout="200")
[23:33:14.516]      // while-condition  =>  TRUE
[23:33:14.516]      // while "1"  (timeout="200")
[23:33:14.517]      // while-condition  =>  TRUE
[23:33:14.517]      // while "1"  (timeout="200")
[23:33:14.517]      // while  =>  TIMEOUT
[23:33:14.517]      // end while "1"
[23:33:14.517]    </control>
[23:33:14.517]    <control if="canReadPins" while="" timeout="0" info="">
[23:33:14.517]      // if-block "canReadPins"
[23:33:14.517]        // =>  TRUE
[23:33:14.517]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:33:14.517]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:33:14.519]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:33:14.519]        // while-condition  =>  FALSE
[23:33:14.519]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:33:14.519]      </control>
[23:33:14.519]      // end if-block "canReadPins"
[23:33:14.519]    </control>
[23:33:14.519]    <control if="!canReadPins" while="" timeout="0" info="">
[23:33:14.520]      // if-block "!canReadPins"
[23:33:14.520]        // =>  FALSE
[23:33:14.520]      // skip if-block "!canReadPins"
[23:33:14.520]    </control>
[23:33:14.520]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:33:14.520]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:33:14.520]        // =>  TRUE
[23:33:14.520]      <block atomic="false" info="">
[23:33:14.520]        WriteAP(0x00, 0x190008);
[23:33:14.528]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:33:14.528]        WriteAP(0xF0, 0x01);
[23:33:14.532]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:33:14.532]      </block>
[23:33:14.532]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:33:14.532]    </control>
[23:33:14.532]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:33:14.532]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:33:14.533]        // =>  FALSE
[23:33:14.533]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:33:14.533]    </control>
[23:33:14.533]    <block atomic="false" info="">
[23:33:14.533]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:33:14.539]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:33:14.539]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:33:14.539]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:33:14.539]      __ap = 0; //lets make sure we reset the access point selection
[23:33:14.539]        // -> [__ap <= 0x00000000]
[23:33:14.539]    </block>
[23:33:14.539]  </sequence>
[23:33:14.540]  
[23:33:14.567]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:33:14.567]  
[23:33:14.567]  <debugvars>
[23:33:14.567]    // Pre-defined
[23:33:14.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:33:14.569]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:33:14.569]    __dp=0x00000000
[23:33:14.569]    __ap=0x00000000
[23:33:14.569]    __traceout=0x00000000      (Trace Disabled)
[23:33:14.569]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:33:14.569]    __FlashAddr=0x00000000
[23:33:14.569]    __FlashLen=0x00000000
[23:33:14.569]    __FlashArg=0x00000000
[23:33:14.569]    __FlashOp=0x00000000
[23:33:14.569]    __Result=0x00000000
[23:33:14.570]  </debugvars>
[23:33:14.570]  
[23:33:14.570]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:33:14.570]    <block atomic="false" info="">
[23:33:14.570]      __var deviceID = 0;
[23:33:14.570]        // -> [deviceID <= 0x00000000]
[23:33:14.570]      __var version = 0;
[23:33:14.570]        // -> [version <= 0x00000000]
[23:33:14.570]      __var partNum = 0;
[23:33:14.570]        // -> [partNum <= 0x00000000]
[23:33:14.570]      __var manuf = 0;
[23:33:14.570]        // -> [manuf <= 0x00000000]
[23:33:14.570]      __var isMSPM0G1X0X_G3X0X = 0;
[23:33:14.570]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:33:14.570]      __var isProduction = 0;
[23:33:14.571]        // -> [isProduction <= 0x00000000]
[23:33:14.571]      __var continueId = 0;
[23:33:14.571]        // -> [continueId <= 0x00000000]
[23:33:14.571]      deviceID =   Read32(0x41C40004);
[23:33:14.576]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:33:14.576]        // -> [deviceID <= 0x2BB8802F]
[23:33:14.576]      version = deviceID >> 28;
[23:33:14.576]        // -> [version <= 0x00000002]
[23:33:14.576]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:33:14.576]        // -> [partNum <= 0x0000BB88]
[23:33:14.576]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:33:14.576]        // -> [manuf <= 0x00000017]
[23:33:14.576]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:33:14.577]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:33:14.577]      isProduction = (version > 0);
[23:33:14.577]        // -> [isProduction <= 0x00000001]
[23:33:14.577]    </block>
[23:33:14.577]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:33:14.577]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:33:14.577]        // =>  FALSE
[23:33:14.577]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:33:14.578]    </control>
[23:33:14.578]    <control if="continueId == 4" while="" timeout="0" info="">
[23:33:14.578]      // if-block "continueId == 4"
[23:33:14.578]        // =>  FALSE
[23:33:14.578]      // skip if-block "continueId == 4"
[23:33:14.578]    </control>
[23:33:14.578]    <control if="!isProduction" while="" timeout="0" info="">
[23:33:14.578]      // if-block "!isProduction"
[23:33:14.578]        // =>  FALSE
[23:33:14.578]      // skip if-block "!isProduction"
[23:33:14.578]    </control>
[23:33:14.578]  </sequence>
[23:33:14.579]  
[23:36:31.637]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:36:31.637]  
[23:36:31.646]  <debugvars>
[23:36:31.646]    // Pre-defined
[23:36:31.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:36:31.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:36:31.646]    __dp=0x00000000
[23:36:31.647]    __ap=0x00000000
[23:36:31.647]    __traceout=0x00000000      (Trace Disabled)
[23:36:31.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:36:31.647]    __FlashAddr=0x00000000
[23:36:31.647]    __FlashLen=0x00000000
[23:36:31.647]    __FlashArg=0x00000000
[23:36:31.647]    __FlashOp=0x00000000
[23:36:31.647]    __Result=0x00000000
[23:36:31.647]  </debugvars>
[23:36:31.648]  
[23:36:31.648]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:36:31.648]    <block atomic="false" info="">
[23:36:31.648]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:36:31.648]        // -> [isSWJ <= 0x00000001]
[23:36:31.648]      __var hasDormant = __protocol & 0x00020000;
[23:36:31.648]        // -> [hasDormant <= 0x00000000]
[23:36:31.648]      __var protType   = __protocol & 0x0000FFFF;
[23:36:31.648]        // -> [protType <= 0x00000002]
[23:36:31.648]    </block>
[23:36:31.649]    <control if="protType == 1" while="" timeout="0" info="">
[23:36:31.649]      // if-block "protType == 1"
[23:36:31.649]        // =>  FALSE
[23:36:31.649]      // skip if-block "protType == 1"
[23:36:31.649]    </control>
[23:36:31.649]    <control if="protType == 2" while="" timeout="0" info="">
[23:36:31.650]      // if-block "protType == 2"
[23:36:31.650]        // =>  TRUE
[23:36:31.650]      <control if="isSWJ" while="" timeout="0" info="">
[23:36:31.650]        // if-block "isSWJ"
[23:36:31.650]          // =>  TRUE
[23:36:31.650]        <control if="hasDormant" while="" timeout="0" info="">
[23:36:31.650]          // if-block "hasDormant"
[23:36:31.650]            // =>  FALSE
[23:36:31.650]          // skip if-block "hasDormant"
[23:36:31.650]        </control>
[23:36:31.650]        <control if="!hasDormant" while="" timeout="0" info="">
[23:36:31.650]          // if-block "!hasDormant"
[23:36:31.650]            // =>  TRUE
[23:36:31.650]          <block atomic="false" info="">
[23:36:31.650]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:36:31.653]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:36:31.653]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:36:31.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:36:31.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:36:31.656]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:36:31.656]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:36:31.658]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:36:31.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:36:31.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:36:31.659]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:36:31.661]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:36:31.661]          </block>
[23:36:31.661]          // end if-block "!hasDormant"
[23:36:31.661]        </control>
[23:36:31.661]        // end if-block "isSWJ"
[23:36:31.661]      </control>
[23:36:31.661]      <control if="!isSWJ" while="" timeout="0" info="">
[23:36:31.661]        // if-block "!isSWJ"
[23:36:31.661]          // =>  FALSE
[23:36:31.661]        // skip if-block "!isSWJ"
[23:36:31.661]      </control>
[23:36:31.661]      <block atomic="false" info="">
[23:36:31.661]        ReadDP(0x0);
[23:36:31.663]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:36:31.663]      </block>
[23:36:31.663]      // end if-block "protType == 2"
[23:36:31.663]    </control>
[23:36:31.663]  </sequence>
[23:36:31.663]  
[23:36:31.667]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:36:31.667]  
[23:36:31.667]  <debugvars>
[23:36:31.667]    // Pre-defined
[23:36:31.667]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:36:31.667]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:36:31.667]    __dp=0x00000000
[23:36:31.667]    __ap=0x00000000
[23:36:31.667]    __traceout=0x00000000      (Trace Disabled)
[23:36:31.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:36:31.667]    __FlashAddr=0x00000000
[23:36:31.667]    __FlashLen=0x00000000
[23:36:31.667]    __FlashArg=0x00000000
[23:36:31.667]    __FlashOp=0x00000000
[23:36:31.668]    __Result=0x00000000
[23:36:31.668]  </debugvars>
[23:36:31.668]  
[23:36:31.668]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:36:31.668]    <block atomic="false" info="">
[23:36:31.668]      __var SW_DP_ABORT       = 0x0;
[23:36:31.668]        // -> [SW_DP_ABORT <= 0x00000000]
[23:36:31.668]      __var DP_CTRL_STAT      = 0x4;
[23:36:31.668]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:36:31.668]      __var DP_SELECT         = 0x8;
[23:36:31.669]        // -> [DP_SELECT <= 0x00000008]
[23:36:31.669]      __var powered_down      = 0;
[23:36:31.669]        // -> [powered_down <= 0x00000000]
[23:36:31.669]      WriteDP(DP_SELECT, 0x00000000);
[23:36:31.670]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:36:31.670]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:36:31.672]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:36:31.672]        // -> [powered_down <= 0x00000001]
[23:36:31.672]    </block>
[23:36:31.672]    <control if="powered_down" while="" timeout="0" info="">
[23:36:31.672]      // if-block "powered_down"
[23:36:31.672]        // =>  TRUE
[23:36:31.672]      <block atomic="false" info="">
[23:36:31.672]        Message(0, "Debug/System power-up request sent");
[23:36:31.676]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:36:31.680]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:36:31.681]      </block>
[23:36:31.681]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:36:31.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:36:31.682]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:36:31.682]        // while-condition  =>  FALSE
[23:36:31.682]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:36:31.682]      </control>
[23:36:31.682]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:36:31.682]        // if-block "(__protocol & 0xFFFF) == 1"
[23:36:31.682]          // =>  FALSE
[23:36:31.684]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:36:31.684]      </control>
[23:36:31.684]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:36:31.684]        // if-block "(__protocol & 0xFFFF) == 2"
[23:36:31.684]          // =>  TRUE
[23:36:31.684]        <block atomic="false" info="">
[23:36:31.684]          Message(0, "executing SWD power up");
[23:36:31.686]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:36:31.688]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:36:31.688]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:36:31.689]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:36:31.689]        </block>
[23:36:31.689]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:36:31.689]      </control>
[23:36:31.689]      // end if-block "powered_down"
[23:36:31.689]    </control>
[23:36:31.690]    <block atomic="false" info="">
[23:36:31.690]      __var DEBUG_PORT_VAL    = 0;
[23:36:31.690]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:36:31.690]      __var ACCESS_POINT_VAL  = 0;
[23:36:31.690]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:36:31.690]      __ap = 1; 
[23:36:31.691]        // -> [__ap <= 0x00000001]
[23:36:31.691]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:36:31.697]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:36:31.698]      __ap = 4;
[23:36:31.698]        // -> [__ap <= 0x00000004]
[23:36:31.698]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:36:31.703]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:36:31.703]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:36:31.704]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:36:31.706]    </block>
[23:36:31.707]    <block atomic="false" info="">
[23:36:31.707]      __var nReset = 0x80;
[23:36:31.707]        // -> [nReset <= 0x00000080]
[23:36:31.707]      __var canReadPins = 0;
[23:36:31.707]        // -> [canReadPins <= 0x00000000]
[23:36:31.707]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:36:31.712]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:36:31.712]        // -> [canReadPins <= 0x00000001]
[23:36:31.712]    </block>
[23:36:31.712]    <control if="" while="1" timeout="200" info="">
[23:36:31.712]      // while "1"  (timeout="200")
[23:36:31.713]      // while-condition  =>  TRUE
[23:36:31.713]      // while "1"  (timeout="200")
[23:36:31.713]      // while-condition  =>  TRUE
[23:36:31.713]      // while "1"  (timeout="200")
[23:36:31.713]      // while-condition  =>  TRUE
[23:36:31.713]      // while "1"  (timeout="200")
[23:36:31.713]      // while-condition  =>  TRUE
[23:36:31.713]      // while "1"  (timeout="200")
[23:36:31.713]      // while-condition  =>  TRUE
[23:36:31.713]      // while "1"  (timeout="200")
[23:36:31.713]      // while-condition  =>  TRUE
[23:36:31.713]      // while "1"  (timeout="200")
[23:36:31.714]      // while-condition  =>  TRUE
[23:36:31.714]      // while "1"  (timeout="200")
[23:36:31.714]      // while-condition  =>  TRUE
[23:36:31.714]      // while "1"  (timeout="200")
[23:36:31.714]      // while-condition  =>  TRUE
[23:36:31.714]      // while "1"  (timeout="200")
[23:36:31.714]      // while-condition  =>  TRUE
[23:36:31.714]      // while "1"  (timeout="200")
[23:36:31.714]      // while-condition  =>  TRUE
[23:36:31.714]      // while "1"  (timeout="200")
[23:36:31.715]      // while-condition  =>  TRUE
[23:36:31.715]      // while "1"  (timeout="200")
[23:36:31.715]      // while-condition  =>  TRUE
[23:36:31.715]      // while "1"  (timeout="200")
[23:36:31.715]      // while-condition  =>  TRUE
[23:36:31.715]      // while "1"  (timeout="200")
[23:36:31.715]      // while-condition  =>  TRUE
[23:36:31.715]      // while "1"  (timeout="200")
[23:36:31.715]      // while-condition  =>  TRUE
[23:36:31.715]      // while "1"  (timeout="200")
[23:36:31.715]      // while-condition  =>  TRUE
[23:36:31.716]      // while "1"  (timeout="200")
[23:36:31.716]      // while-condition  =>  TRUE
[23:36:31.716]      // while "1"  (timeout="200")
[23:36:31.716]      // while-condition  =>  TRUE
[23:36:31.716]      // while "1"  (timeout="200")
[23:36:31.716]      // while-condition  =>  TRUE
[23:36:31.717]      // while "1"  (timeout="200")
[23:36:31.717]      // while-condition  =>  TRUE
[23:36:31.717]      // while "1"  (timeout="200")
[23:36:31.717]      // while-condition  =>  TRUE
[23:36:31.717]      // while "1"  (timeout="200")
[23:36:31.717]      // while-condition  =>  TRUE
[23:36:31.717]      // while "1"  (timeout="200")
[23:36:31.717]      // while-condition  =>  TRUE
[23:36:31.717]      // while "1"  (timeout="200")
[23:36:31.717]      // while-condition  =>  TRUE
[23:36:31.718]      // while "1"  (timeout="200")
[23:36:31.718]      // while-condition  =>  TRUE
[23:36:31.718]      // while "1"  (timeout="200")
[23:36:31.718]      // while-condition  =>  TRUE
[23:36:31.718]      // while "1"  (timeout="200")
[23:36:31.718]      // while-condition  =>  TRUE
[23:36:31.718]      // while "1"  (timeout="200")
[23:36:31.718]      // while-condition  =>  TRUE
[23:36:31.718]      // while "1"  (timeout="200")
[23:36:31.719]      // while-condition  =>  TRUE
[23:36:31.719]      // while "1"  (timeout="200")
[23:36:31.719]      // while-condition  =>  TRUE
[23:36:31.719]      // while "1"  (timeout="200")
[23:36:31.719]      // while-condition  =>  TRUE
[23:36:31.719]      // while "1"  (timeout="200")
[23:36:31.719]      // while-condition  =>  TRUE
[23:36:31.720]      // while "1"  (timeout="200")
[23:36:31.720]      // while  =>  TIMEOUT
[23:36:31.720]      // end while "1"
[23:36:31.720]    </control>
[23:36:31.720]    <control if="canReadPins" while="" timeout="0" info="">
[23:36:31.720]      // if-block "canReadPins"
[23:36:31.720]        // =>  TRUE
[23:36:31.720]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:36:31.720]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:36:31.722]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:36:31.722]        // while-condition  =>  FALSE
[23:36:31.722]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:36:31.722]      </control>
[23:36:31.723]      // end if-block "canReadPins"
[23:36:31.723]    </control>
[23:36:31.723]    <control if="!canReadPins" while="" timeout="0" info="">
[23:36:31.723]      // if-block "!canReadPins"
[23:36:31.723]        // =>  FALSE
[23:36:31.723]      // skip if-block "!canReadPins"
[23:36:31.723]    </control>
[23:36:31.723]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:36:31.723]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:36:31.723]        // =>  TRUE
[23:36:31.723]      <block atomic="false" info="">
[23:36:31.724]        WriteAP(0x00, 0x190008);
[23:36:31.725]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:36:31.725]        WriteAP(0xF0, 0x01);
[23:36:31.729]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:36:31.729]      </block>
[23:36:31.730]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:36:31.730]    </control>
[23:36:31.730]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:36:31.730]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:36:31.730]        // =>  FALSE
[23:36:31.730]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:36:31.730]    </control>
[23:36:31.731]    <block atomic="false" info="">
[23:36:31.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:36:31.734]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:36:31.734]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:36:31.734]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:36:31.736]      __ap = 0; //lets make sure we reset the access point selection
[23:36:31.736]        // -> [__ap <= 0x00000000]
[23:36:31.737]    </block>
[23:36:31.737]  </sequence>
[23:36:31.737]  
[23:36:31.759]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:36:31.759]  
[23:36:31.759]  <debugvars>
[23:36:31.759]    // Pre-defined
[23:36:31.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:36:31.759]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:36:31.759]    __dp=0x00000000
[23:36:31.759]    __ap=0x00000000
[23:36:31.759]    __traceout=0x00000000      (Trace Disabled)
[23:36:31.760]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:36:31.760]    __FlashAddr=0x00000000
[23:36:31.760]    __FlashLen=0x00000000
[23:36:31.760]    __FlashArg=0x00000000
[23:36:31.760]    __FlashOp=0x00000000
[23:36:31.760]    __Result=0x00000000
[23:36:31.760]  </debugvars>
[23:36:31.760]  
[23:36:31.760]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:36:31.761]    <block atomic="false" info="">
[23:36:31.761]      __var deviceID = 0;
[23:36:31.761]        // -> [deviceID <= 0x00000000]
[23:36:31.761]      __var version = 0;
[23:36:31.761]        // -> [version <= 0x00000000]
[23:36:31.761]      __var partNum = 0;
[23:36:31.761]        // -> [partNum <= 0x00000000]
[23:36:31.761]      __var manuf = 0;
[23:36:31.761]        // -> [manuf <= 0x00000000]
[23:36:31.761]      __var isMSPM0G1X0X_G3X0X = 0;
[23:36:31.762]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:36:31.762]      __var isProduction = 0;
[23:36:31.762]        // -> [isProduction <= 0x00000000]
[23:36:31.762]      __var continueId = 0;
[23:36:31.762]        // -> [continueId <= 0x00000000]
[23:36:31.762]      deviceID =   Read32(0x41C40004);
[23:36:31.767]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:36:31.767]        // -> [deviceID <= 0x2BB8802F]
[23:36:31.767]      version = deviceID >> 28;
[23:36:31.767]        // -> [version <= 0x00000002]
[23:36:31.767]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:36:31.767]        // -> [partNum <= 0x0000BB88]
[23:36:31.767]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:36:31.767]        // -> [manuf <= 0x00000017]
[23:36:31.767]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:36:31.767]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:36:31.768]      isProduction = (version > 0);
[23:36:31.768]        // -> [isProduction <= 0x00000001]
[23:36:31.768]    </block>
[23:36:31.768]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:36:31.768]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:36:31.768]        // =>  FALSE
[23:36:31.768]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:36:31.768]    </control>
[23:36:31.768]    <control if="continueId == 4" while="" timeout="0" info="">
[23:36:31.768]      // if-block "continueId == 4"
[23:36:31.769]        // =>  FALSE
[23:36:31.769]      // skip if-block "continueId == 4"
[23:36:31.769]    </control>
[23:36:31.769]    <control if="!isProduction" while="" timeout="0" info="">
[23:36:31.769]      // if-block "!isProduction"
[23:36:31.769]        // =>  FALSE
[23:36:31.769]      // skip if-block "!isProduction"
[23:36:31.769]    </control>
[23:36:31.769]  </sequence>
[23:36:31.769]  
[23:37:19.541]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:37:19.541]  
[23:37:19.549]  <debugvars>
[23:37:19.549]    // Pre-defined
[23:37:19.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:37:19.549]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:37:19.549]    __dp=0x00000000
[23:37:19.549]    __ap=0x00000000
[23:37:19.549]    __traceout=0x00000000      (Trace Disabled)
[23:37:19.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:37:19.549]    __FlashAddr=0x00000000
[23:37:19.549]    __FlashLen=0x00000000
[23:37:19.549]    __FlashArg=0x00000000
[23:37:19.549]    __FlashOp=0x00000000
[23:37:19.549]    __Result=0x00000000
[23:37:19.550]  </debugvars>
[23:37:19.550]  
[23:37:19.550]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:37:19.550]    <block atomic="false" info="">
[23:37:19.550]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:37:19.550]        // -> [isSWJ <= 0x00000001]
[23:37:19.550]      __var hasDormant = __protocol & 0x00020000;
[23:37:19.550]        // -> [hasDormant <= 0x00000000]
[23:37:19.550]      __var protType   = __protocol & 0x0000FFFF;
[23:37:19.550]        // -> [protType <= 0x00000002]
[23:37:19.550]    </block>
[23:37:19.550]    <control if="protType == 1" while="" timeout="0" info="">
[23:37:19.551]      // if-block "protType == 1"
[23:37:19.551]        // =>  FALSE
[23:37:19.551]      // skip if-block "protType == 1"
[23:37:19.551]    </control>
[23:37:19.551]    <control if="protType == 2" while="" timeout="0" info="">
[23:37:19.551]      // if-block "protType == 2"
[23:37:19.551]        // =>  TRUE
[23:37:19.551]      <control if="isSWJ" while="" timeout="0" info="">
[23:37:19.551]        // if-block "isSWJ"
[23:37:19.551]          // =>  TRUE
[23:37:19.551]        <control if="hasDormant" while="" timeout="0" info="">
[23:37:19.552]          // if-block "hasDormant"
[23:37:19.552]            // =>  FALSE
[23:37:19.552]          // skip if-block "hasDormant"
[23:37:19.552]        </control>
[23:37:19.552]        <control if="!hasDormant" while="" timeout="0" info="">
[23:37:19.552]          // if-block "!hasDormant"
[23:37:19.552]            // =>  TRUE
[23:37:19.552]          <block atomic="false" info="">
[23:37:19.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:37:19.555]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:37:19.555]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:37:19.558]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:37:19.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:37:19.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:37:19.559]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:37:19.560]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:37:19.560]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:37:19.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:37:19.561]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:37:19.563]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:37:19.563]          </block>
[23:37:19.563]          // end if-block "!hasDormant"
[23:37:19.563]        </control>
[23:37:19.563]        // end if-block "isSWJ"
[23:37:19.563]      </control>
[23:37:19.563]      <control if="!isSWJ" while="" timeout="0" info="">
[23:37:19.564]        // if-block "!isSWJ"
[23:37:19.564]          // =>  FALSE
[23:37:19.564]        // skip if-block "!isSWJ"
[23:37:19.564]      </control>
[23:37:19.564]      <block atomic="false" info="">
[23:37:19.564]        ReadDP(0x0);
[23:37:19.568]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:37:19.568]      </block>
[23:37:19.568]      // end if-block "protType == 2"
[23:37:19.568]    </control>
[23:37:19.569]  </sequence>
[23:37:19.569]  
[23:37:19.571]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:37:19.571]  
[23:37:19.571]  <debugvars>
[23:37:19.571]    // Pre-defined
[23:37:19.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:37:19.572]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:37:19.572]    __dp=0x00000000
[23:37:19.572]    __ap=0x00000000
[23:37:19.572]    __traceout=0x00000000      (Trace Disabled)
[23:37:19.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:37:19.572]    __FlashAddr=0x00000000
[23:37:19.572]    __FlashLen=0x00000000
[23:37:19.572]    __FlashArg=0x00000000
[23:37:19.572]    __FlashOp=0x00000000
[23:37:19.572]    __Result=0x00000000
[23:37:19.572]  </debugvars>
[23:37:19.572]  
[23:37:19.573]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:37:19.573]    <block atomic="false" info="">
[23:37:19.573]      __var SW_DP_ABORT       = 0x0;
[23:37:19.573]        // -> [SW_DP_ABORT <= 0x00000000]
[23:37:19.573]      __var DP_CTRL_STAT      = 0x4;
[23:37:19.573]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:37:19.573]      __var DP_SELECT         = 0x8;
[23:37:19.573]        // -> [DP_SELECT <= 0x00000008]
[23:37:19.573]      __var powered_down      = 0;
[23:37:19.573]        // -> [powered_down <= 0x00000000]
[23:37:19.573]      WriteDP(DP_SELECT, 0x00000000);
[23:37:19.576]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:37:19.576]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:37:19.578]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:37:19.578]        // -> [powered_down <= 0x00000001]
[23:37:19.578]    </block>
[23:37:19.578]    <control if="powered_down" while="" timeout="0" info="">
[23:37:19.578]      // if-block "powered_down"
[23:37:19.578]        // =>  TRUE
[23:37:19.578]      <block atomic="false" info="">
[23:37:19.578]        Message(0, "Debug/System power-up request sent");
[23:37:19.580]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:37:19.583]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:37:19.583]      </block>
[23:37:19.583]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:37:19.583]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:37:19.584]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:37:19.584]        // while-condition  =>  FALSE
[23:37:19.584]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:37:19.585]      </control>
[23:37:19.585]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:37:19.585]        // if-block "(__protocol & 0xFFFF) == 1"
[23:37:19.585]          // =>  FALSE
[23:37:19.585]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:37:19.585]      </control>
[23:37:19.585]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:37:19.585]        // if-block "(__protocol & 0xFFFF) == 2"
[23:37:19.585]          // =>  TRUE
[23:37:19.586]        <block atomic="false" info="">
[23:37:19.586]          Message(0, "executing SWD power up");
[23:37:19.587]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:37:19.589]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:37:19.589]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:37:19.591]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:37:19.592]        </block>
[23:37:19.592]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:37:19.592]      </control>
[23:37:19.592]      // end if-block "powered_down"
[23:37:19.592]    </control>
[23:37:19.592]    <block atomic="false" info="">
[23:37:19.592]      __var DEBUG_PORT_VAL    = 0;
[23:37:19.592]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:37:19.592]      __var ACCESS_POINT_VAL  = 0;
[23:37:19.592]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:37:19.592]      __ap = 1; 
[23:37:19.592]        // -> [__ap <= 0x00000001]
[23:37:19.592]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:37:19.598]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:37:19.599]      __ap = 4;
[23:37:19.599]        // -> [__ap <= 0x00000004]
[23:37:19.599]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:37:19.603]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:37:19.603]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:37:19.603]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:37:19.606]    </block>
[23:37:19.606]    <block atomic="false" info="">
[23:37:19.606]      __var nReset = 0x80;
[23:37:19.606]        // -> [nReset <= 0x00000080]
[23:37:19.606]      __var canReadPins = 0;
[23:37:19.606]        // -> [canReadPins <= 0x00000000]
[23:37:19.606]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:37:19.608]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:37:19.608]        // -> [canReadPins <= 0x00000001]
[23:37:19.608]    </block>
[23:37:19.608]    <control if="" while="1" timeout="200" info="">
[23:37:19.608]      // while "1"  (timeout="200")
[23:37:19.608]      // while-condition  =>  TRUE
[23:37:19.608]      // while "1"  (timeout="200")
[23:37:19.608]      // while-condition  =>  TRUE
[23:37:19.608]      // while "1"  (timeout="200")
[23:37:19.608]      // while-condition  =>  TRUE
[23:37:19.608]      // while "1"  (timeout="200")
[23:37:19.608]      // while-condition  =>  TRUE
[23:37:19.608]      // while "1"  (timeout="200")
[23:37:19.609]      // while-condition  =>  TRUE
[23:37:19.609]      // while "1"  (timeout="200")
[23:37:19.609]      // while-condition  =>  TRUE
[23:37:19.609]      // while "1"  (timeout="200")
[23:37:19.609]      // while-condition  =>  TRUE
[23:37:19.609]      // while "1"  (timeout="200")
[23:37:19.609]      // while-condition  =>  TRUE
[23:37:19.609]      // while "1"  (timeout="200")
[23:37:19.609]      // while-condition  =>  TRUE
[23:37:19.609]      // while "1"  (timeout="200")
[23:37:19.609]      // while-condition  =>  TRUE
[23:37:19.610]      // while "1"  (timeout="200")
[23:37:19.610]      // while-condition  =>  TRUE
[23:37:19.610]      // while "1"  (timeout="200")
[23:37:19.610]      // while-condition  =>  TRUE
[23:37:19.610]      // while "1"  (timeout="200")
[23:37:19.610]      // while-condition  =>  TRUE
[23:37:19.611]      // while "1"  (timeout="200")
[23:37:19.611]      // while  =>  TIMEOUT
[23:37:19.611]      // end while "1"
[23:37:19.611]    </control>
[23:37:19.611]    <control if="canReadPins" while="" timeout="0" info="">
[23:37:19.611]      // if-block "canReadPins"
[23:37:19.611]        // =>  TRUE
[23:37:19.611]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:37:19.611]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:37:19.615]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:37:19.615]        // while-condition  =>  FALSE
[23:37:19.615]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:37:19.616]      </control>
[23:37:19.616]      // end if-block "canReadPins"
[23:37:19.616]    </control>
[23:37:19.616]    <control if="!canReadPins" while="" timeout="0" info="">
[23:37:19.616]      // if-block "!canReadPins"
[23:37:19.616]        // =>  FALSE
[23:37:19.616]      // skip if-block "!canReadPins"
[23:37:19.616]    </control>
[23:37:19.617]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:37:19.617]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:37:19.617]        // =>  TRUE
[23:37:19.617]      <block atomic="false" info="">
[23:37:19.617]        WriteAP(0x00, 0x190008);
[23:37:19.619]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:37:19.619]        WriteAP(0xF0, 0x01);
[23:37:19.631]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:37:19.631]      </block>
[23:37:19.631]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:37:19.631]    </control>
[23:37:19.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:37:19.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:37:19.631]        // =>  FALSE
[23:37:19.631]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:37:19.631]    </control>
[23:37:19.631]    <block atomic="false" info="">
[23:37:19.631]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:37:19.646]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:37:19.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:37:19.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:37:19.648]      __ap = 0; //lets make sure we reset the access point selection
[23:37:19.648]        // -> [__ap <= 0x00000000]
[23:37:19.648]    </block>
[23:37:19.649]  </sequence>
[23:37:19.649]  
[23:37:19.680]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:37:19.680]  
[23:37:19.680]  <debugvars>
[23:37:19.680]    // Pre-defined
[23:37:19.680]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:37:19.680]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:37:19.680]    __dp=0x00000000
[23:37:19.680]    __ap=0x00000000
[23:37:19.680]    __traceout=0x00000000      (Trace Disabled)
[23:37:19.680]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:37:19.681]    __FlashAddr=0x00000000
[23:37:19.681]    __FlashLen=0x00000000
[23:37:19.681]    __FlashArg=0x00000000
[23:37:19.681]    __FlashOp=0x00000000
[23:37:19.681]    __Result=0x00000000
[23:37:19.681]  </debugvars>
[23:37:19.681]  
[23:37:19.681]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:37:19.681]    <block atomic="false" info="">
[23:37:19.681]      __var deviceID = 0;
[23:37:19.681]        // -> [deviceID <= 0x00000000]
[23:37:19.681]      __var version = 0;
[23:37:19.681]        // -> [version <= 0x00000000]
[23:37:19.681]      __var partNum = 0;
[23:37:19.681]        // -> [partNum <= 0x00000000]
[23:37:19.682]      __var manuf = 0;
[23:37:19.682]        // -> [manuf <= 0x00000000]
[23:37:19.682]      __var isMSPM0G1X0X_G3X0X = 0;
[23:37:19.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:37:19.682]      __var isProduction = 0;
[23:37:19.682]        // -> [isProduction <= 0x00000000]
[23:37:19.683]      __var continueId = 0;
[23:37:19.683]        // -> [continueId <= 0x00000000]
[23:37:19.683]      deviceID =   Read32(0x41C40004);
[23:37:19.688]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:37:19.688]        // -> [deviceID <= 0x2BB8802F]
[23:37:19.688]      version = deviceID >> 28;
[23:37:19.689]        // -> [version <= 0x00000002]
[23:37:19.689]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:37:19.689]        // -> [partNum <= 0x0000BB88]
[23:37:19.689]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:37:19.689]        // -> [manuf <= 0x00000017]
[23:37:19.689]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:37:19.689]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:37:19.689]      isProduction = (version > 0);
[23:37:19.689]        // -> [isProduction <= 0x00000001]
[23:37:19.689]    </block>
[23:37:19.689]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:37:19.689]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:37:19.689]        // =>  FALSE
[23:37:19.689]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:37:19.689]    </control>
[23:37:19.690]    <control if="continueId == 4" while="" timeout="0" info="">
[23:37:19.691]      // if-block "continueId == 4"
[23:37:19.691]        // =>  FALSE
[23:37:19.691]      // skip if-block "continueId == 4"
[23:37:19.691]    </control>
[23:37:19.691]    <control if="!isProduction" while="" timeout="0" info="">
[23:37:19.691]      // if-block "!isProduction"
[23:37:19.691]        // =>  FALSE
[23:37:19.691]      // skip if-block "!isProduction"
[23:37:19.691]    </control>
[23:37:19.691]  </sequence>
[23:37:19.691]  
[23:39:56.302]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:39:56.302]  
[23:39:56.302]  <debugvars>
[23:39:56.302]    // Pre-defined
[23:39:56.302]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:39:56.302]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:39:56.302]    __dp=0x00000000
[23:39:56.302]    __ap=0x00000000
[23:39:56.302]    __traceout=0x00000000      (Trace Disabled)
[23:39:56.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:39:56.302]    __FlashAddr=0x00000000
[23:39:56.302]    __FlashLen=0x00000000
[23:39:56.302]    __FlashArg=0x00000000
[23:39:56.302]    __FlashOp=0x00000000
[23:39:56.303]    __Result=0x00000000
[23:39:56.303]  </debugvars>
[23:39:56.303]  
[23:39:56.303]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:39:56.303]    <block atomic="false" info="">
[23:39:56.303]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:39:56.303]        // -> [isSWJ <= 0x00000001]
[23:39:56.303]      __var hasDormant = __protocol & 0x00020000;
[23:39:56.303]        // -> [hasDormant <= 0x00000000]
[23:39:56.303]      __var protType   = __protocol & 0x0000FFFF;
[23:39:56.303]        // -> [protType <= 0x00000002]
[23:39:56.303]    </block>
[23:39:56.304]    <control if="protType == 1" while="" timeout="0" info="">
[23:39:56.304]      // if-block "protType == 1"
[23:39:56.304]        // =>  FALSE
[23:39:56.304]      // skip if-block "protType == 1"
[23:39:56.304]    </control>
[23:39:56.304]    <control if="protType == 2" while="" timeout="0" info="">
[23:39:56.304]      // if-block "protType == 2"
[23:39:56.304]        // =>  TRUE
[23:39:56.304]      <control if="isSWJ" while="" timeout="0" info="">
[23:39:56.304]        // if-block "isSWJ"
[23:39:56.304]          // =>  TRUE
[23:39:56.305]        <control if="hasDormant" while="" timeout="0" info="">
[23:39:56.305]          // if-block "hasDormant"
[23:39:56.305]            // =>  FALSE
[23:39:56.305]          // skip if-block "hasDormant"
[23:39:56.305]        </control>
[23:39:56.305]        <control if="!hasDormant" while="" timeout="0" info="">
[23:39:56.305]          // if-block "!hasDormant"
[23:39:56.305]            // =>  TRUE
[23:39:56.305]          <block atomic="false" info="">
[23:39:56.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:39:56.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:39:56.308]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:39:56.312]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:39:56.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:39:56.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:39:56.314]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:39:56.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:39:56.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:39:56.323]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:39:56.323]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:39:56.324]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:39:56.324]          </block>
[23:39:56.324]          // end if-block "!hasDormant"
[23:39:56.324]        </control>
[23:39:56.324]        // end if-block "isSWJ"
[23:39:56.325]      </control>
[23:39:56.325]      <control if="!isSWJ" while="" timeout="0" info="">
[23:39:56.325]        // if-block "!isSWJ"
[23:39:56.325]          // =>  FALSE
[23:39:56.325]        // skip if-block "!isSWJ"
[23:39:56.325]      </control>
[23:39:56.325]      <block atomic="false" info="">
[23:39:56.325]        ReadDP(0x0);
[23:39:56.329]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:39:56.329]      </block>
[23:39:56.330]      // end if-block "protType == 2"
[23:39:56.330]    </control>
[23:39:56.330]  </sequence>
[23:39:56.330]  
[23:39:56.333]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:39:56.333]  
[23:39:56.333]  <debugvars>
[23:39:56.333]    // Pre-defined
[23:39:56.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:39:56.334]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:39:56.334]    __dp=0x00000000
[23:39:56.334]    __ap=0x00000000
[23:39:56.334]    __traceout=0x00000000      (Trace Disabled)
[23:39:56.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:39:56.334]    __FlashAddr=0x00000000
[23:39:56.334]    __FlashLen=0x00000000
[23:39:56.334]    __FlashArg=0x00000000
[23:39:56.334]    __FlashOp=0x00000000
[23:39:56.335]    __Result=0x00000000
[23:39:56.335]  </debugvars>
[23:39:56.335]  
[23:39:56.335]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:39:56.335]    <block atomic="false" info="">
[23:39:56.335]      __var SW_DP_ABORT       = 0x0;
[23:39:56.335]        // -> [SW_DP_ABORT <= 0x00000000]
[23:39:56.335]      __var DP_CTRL_STAT      = 0x4;
[23:39:56.335]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:39:56.335]      __var DP_SELECT         = 0x8;
[23:39:56.335]        // -> [DP_SELECT <= 0x00000008]
[23:39:56.335]      __var powered_down      = 0;
[23:39:56.336]        // -> [powered_down <= 0x00000000]
[23:39:56.336]      WriteDP(DP_SELECT, 0x00000000);
[23:39:56.337]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:39:56.337]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:39:56.339]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:39:56.339]        // -> [powered_down <= 0x00000001]
[23:39:56.339]    </block>
[23:39:56.339]    <control if="powered_down" while="" timeout="0" info="">
[23:39:56.339]      // if-block "powered_down"
[23:39:56.339]        // =>  TRUE
[23:39:56.339]      <block atomic="false" info="">
[23:39:56.339]        Message(0, "Debug/System power-up request sent");
[23:39:56.341]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:39:56.343]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:39:56.343]      </block>
[23:39:56.343]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:39:56.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:39:56.346]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:39:56.346]        // while-condition  =>  FALSE
[23:39:56.346]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:39:56.346]      </control>
[23:39:56.346]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:39:56.346]        // if-block "(__protocol & 0xFFFF) == 1"
[23:39:56.346]          // =>  FALSE
[23:39:56.346]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:39:56.346]      </control>
[23:39:56.346]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:39:56.346]        // if-block "(__protocol & 0xFFFF) == 2"
[23:39:56.347]          // =>  TRUE
[23:39:56.347]        <block atomic="false" info="">
[23:39:56.347]          Message(0, "executing SWD power up");
[23:39:56.349]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:39:56.350]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:39:56.350]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:39:56.351]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:39:56.352]        </block>
[23:39:56.352]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:39:56.352]      </control>
[23:39:56.352]      // end if-block "powered_down"
[23:39:56.352]    </control>
[23:39:56.352]    <block atomic="false" info="">
[23:39:56.352]      __var DEBUG_PORT_VAL    = 0;
[23:39:56.352]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:39:56.352]      __var ACCESS_POINT_VAL  = 0;
[23:39:56.352]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:39:56.352]      __ap = 1; 
[23:39:56.353]        // -> [__ap <= 0x00000001]
[23:39:56.353]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:39:56.356]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:39:56.356]      __ap = 4;
[23:39:56.356]        // -> [__ap <= 0x00000004]
[23:39:56.356]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:39:56.360]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:39:56.360]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:39:56.360]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:39:56.362]    </block>
[23:39:56.362]    <block atomic="false" info="">
[23:39:56.362]      __var nReset = 0x80;
[23:39:56.363]        // -> [nReset <= 0x00000080]
[23:39:56.363]      __var canReadPins = 0;
[23:39:56.363]        // -> [canReadPins <= 0x00000000]
[23:39:56.363]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:39:56.365]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:39:56.365]        // -> [canReadPins <= 0x00000001]
[23:39:56.365]    </block>
[23:39:56.365]    <control if="" while="1" timeout="200" info="">
[23:39:56.365]      // while "1"  (timeout="200")
[23:39:56.365]      // while-condition  =>  TRUE
[23:39:56.365]      // while "1"  (timeout="200")
[23:39:56.365]      // while-condition  =>  TRUE
[23:39:56.365]      // while "1"  (timeout="200")
[23:39:56.365]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.366]      // while-condition  =>  TRUE
[23:39:56.366]      // while "1"  (timeout="200")
[23:39:56.367]      // while-condition  =>  TRUE
[23:39:56.367]      // while "1"  (timeout="200")
[23:39:56.367]      // while-condition  =>  TRUE
[23:39:56.367]      // while "1"  (timeout="200")
[23:39:56.367]      // while-condition  =>  TRUE
[23:39:56.367]      // while "1"  (timeout="200")
[23:39:56.367]      // while-condition  =>  TRUE
[23:39:56.367]      // while "1"  (timeout="200")
[23:39:56.367]      // while-condition  =>  TRUE
[23:39:56.367]      // while "1"  (timeout="200")
[23:39:56.367]      // while-condition  =>  TRUE
[23:39:56.367]      // while "1"  (timeout="200")
[23:39:56.369]      // while-condition  =>  TRUE
[23:39:56.369]      // while "1"  (timeout="200")
[23:39:56.369]      // while-condition  =>  TRUE
[23:39:56.369]      // while "1"  (timeout="200")
[23:39:56.369]      // while-condition  =>  TRUE
[23:39:56.369]      // while "1"  (timeout="200")
[23:39:56.369]      // while-condition  =>  TRUE
[23:39:56.369]      // while "1"  (timeout="200")
[23:39:56.369]      // while-condition  =>  TRUE
[23:39:56.369]      // while "1"  (timeout="200")
[23:39:56.370]      // while-condition  =>  TRUE
[23:39:56.370]      // while "1"  (timeout="200")
[23:39:56.370]      // while-condition  =>  TRUE
[23:39:56.370]      // while "1"  (timeout="200")
[23:39:56.370]      // while-condition  =>  TRUE
[23:39:56.370]      // while "1"  (timeout="200")
[23:39:56.370]      // while-condition  =>  TRUE
[23:39:56.370]      // while "1"  (timeout="200")
[23:39:56.370]      // while-condition  =>  TRUE
[23:39:56.370]      // while "1"  (timeout="200")
[23:39:56.370]      // while-condition  =>  TRUE
[23:39:56.370]      // while "1"  (timeout="200")
[23:39:56.371]      // while-condition  =>  TRUE
[23:39:56.371]      // while "1"  (timeout="200")
[23:39:56.371]      // while-condition  =>  TRUE
[23:39:56.371]      // while "1"  (timeout="200")
[23:39:56.371]      // while-condition  =>  TRUE
[23:39:56.371]      // while "1"  (timeout="200")
[23:39:56.371]      // while-condition  =>  TRUE
[23:39:56.371]      // while "1"  (timeout="200")
[23:39:56.371]      // while-condition  =>  TRUE
[23:39:56.371]      // while "1"  (timeout="200")
[23:39:56.372]      // while-condition  =>  TRUE
[23:39:56.372]      // while "1"  (timeout="200")
[23:39:56.372]      // while-condition  =>  TRUE
[23:39:56.372]      // while "1"  (timeout="200")
[23:39:56.372]      // while-condition  =>  TRUE
[23:39:56.372]      // while "1"  (timeout="200")
[23:39:56.372]      // while-condition  =>  TRUE
[23:39:56.372]      // while "1"  (timeout="200")
[23:39:56.372]      // while-condition  =>  TRUE
[23:39:56.372]      // while "1"  (timeout="200")
[23:39:56.372]      // while-condition  =>  TRUE
[23:39:56.372]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.373]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.373]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.373]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.373]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.373]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.373]      // while "1"  (timeout="200")
[23:39:56.373]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.374]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.374]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.374]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.374]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.374]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.374]      // while-condition  =>  TRUE
[23:39:56.374]      // while "1"  (timeout="200")
[23:39:56.376]      // while-condition  =>  TRUE
[23:39:56.376]      // while "1"  (timeout="200")
[23:39:56.376]      // while-condition  =>  TRUE
[23:39:56.376]      // while "1"  (timeout="200")
[23:39:56.376]      // while-condition  =>  TRUE
[23:39:56.376]      // while "1"  (timeout="200")
[23:39:56.376]      // while-condition  =>  TRUE
[23:39:56.376]      // while "1"  (timeout="200")
[23:39:56.376]      // while-condition  =>  TRUE
[23:39:56.376]      // while "1"  (timeout="200")
[23:39:56.376]      // while-condition  =>  TRUE
[23:39:56.377]      // while "1"  (timeout="200")
[23:39:56.377]      // while  =>  TIMEOUT
[23:39:56.377]      // end while "1"
[23:39:56.377]    </control>
[23:39:56.377]    <control if="canReadPins" while="" timeout="0" info="">
[23:39:56.377]      // if-block "canReadPins"
[23:39:56.377]        // =>  TRUE
[23:39:56.377]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:39:56.377]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:39:56.378]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:39:56.378]        // while-condition  =>  FALSE
[23:39:56.378]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:39:56.379]      </control>
[23:39:56.379]      // end if-block "canReadPins"
[23:39:56.379]    </control>
[23:39:56.379]    <control if="!canReadPins" while="" timeout="0" info="">
[23:39:56.379]      // if-block "!canReadPins"
[23:39:56.379]        // =>  FALSE
[23:39:56.379]      // skip if-block "!canReadPins"
[23:39:56.379]    </control>
[23:39:56.379]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:39:56.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:39:56.380]        // =>  TRUE
[23:39:56.380]      <block atomic="false" info="">
[23:39:56.380]        WriteAP(0x00, 0x190008);
[23:39:56.382]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:39:56.382]        WriteAP(0xF0, 0x01);
[23:39:56.389]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:39:56.389]      </block>
[23:39:56.389]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:39:56.389]    </control>
[23:39:56.389]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:39:56.389]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:39:56.389]        // =>  FALSE
[23:39:56.389]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:39:56.389]    </control>
[23:39:56.389]    <block atomic="false" info="">
[23:39:56.390]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:39:56.393]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:39:56.393]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:39:56.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:39:56.395]      __ap = 0; //lets make sure we reset the access point selection
[23:39:56.395]        // -> [__ap <= 0x00000000]
[23:39:56.395]    </block>
[23:39:56.395]  </sequence>
[23:39:56.395]  
[23:39:56.427]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:39:56.427]  
[23:39:56.428]  <debugvars>
[23:39:56.428]    // Pre-defined
[23:39:56.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:39:56.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:39:56.428]    __dp=0x00000000
[23:39:56.428]    __ap=0x00000000
[23:39:56.428]    __traceout=0x00000000      (Trace Disabled)
[23:39:56.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:39:56.428]    __FlashAddr=0x00000000
[23:39:56.428]    __FlashLen=0x00000000
[23:39:56.428]    __FlashArg=0x00000000
[23:39:56.429]    __FlashOp=0x00000000
[23:39:56.429]    __Result=0x00000000
[23:39:56.429]  </debugvars>
[23:39:56.429]  
[23:39:56.429]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:39:56.429]    <block atomic="false" info="">
[23:39:56.429]      __var deviceID = 0;
[23:39:56.429]        // -> [deviceID <= 0x00000000]
[23:39:56.429]      __var version = 0;
[23:39:56.429]        // -> [version <= 0x00000000]
[23:39:56.429]      __var partNum = 0;
[23:39:56.429]        // -> [partNum <= 0x00000000]
[23:39:56.429]      __var manuf = 0;
[23:39:56.429]        // -> [manuf <= 0x00000000]
[23:39:56.430]      __var isMSPM0G1X0X_G3X0X = 0;
[23:39:56.430]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:39:56.430]      __var isProduction = 0;
[23:39:56.430]        // -> [isProduction <= 0x00000000]
[23:39:56.431]      __var continueId = 0;
[23:39:56.431]        // -> [continueId <= 0x00000000]
[23:39:56.431]      deviceID =   Read32(0x41C40004);
[23:39:56.439]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:39:56.439]        // -> [deviceID <= 0x2BB8802F]
[23:39:56.439]      version = deviceID >> 28;
[23:39:56.440]        // -> [version <= 0x00000002]
[23:39:56.440]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:39:56.440]        // -> [partNum <= 0x0000BB88]
[23:39:56.440]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:39:56.440]        // -> [manuf <= 0x00000017]
[23:39:56.440]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:39:56.440]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:39:56.440]      isProduction = (version > 0);
[23:39:56.441]        // -> [isProduction <= 0x00000001]
[23:39:56.441]    </block>
[23:39:56.441]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:39:56.441]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:39:56.441]        // =>  FALSE
[23:39:56.441]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:39:56.441]    </control>
[23:39:56.441]    <control if="continueId == 4" while="" timeout="0" info="">
[23:39:56.441]      // if-block "continueId == 4"
[23:39:56.441]        // =>  FALSE
[23:39:56.441]      // skip if-block "continueId == 4"
[23:39:56.441]    </control>
[23:39:56.441]    <control if="!isProduction" while="" timeout="0" info="">
[23:39:56.441]      // if-block "!isProduction"
[23:39:56.441]        // =>  FALSE
[23:39:56.442]      // skip if-block "!isProduction"
[23:39:56.442]    </control>
[23:39:56.442]  </sequence>
[23:39:56.442]  
[23:40:39.385]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:40:39.385]  
[23:40:39.385]  <debugvars>
[23:40:39.385]    // Pre-defined
[23:40:39.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:40:39.385]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:40:39.386]    __dp=0x00000000
[23:40:39.386]    __ap=0x00000000
[23:40:39.386]    __traceout=0x00000000      (Trace Disabled)
[23:40:39.386]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:40:39.386]    __FlashAddr=0x00000000
[23:40:39.386]    __FlashLen=0x00000000
[23:40:39.386]    __FlashArg=0x00000000
[23:40:39.386]    __FlashOp=0x00000000
[23:40:39.386]    __Result=0x00000000
[23:40:39.386]  </debugvars>
[23:40:39.386]  
[23:40:39.386]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:40:39.387]    <block atomic="false" info="">
[23:40:39.387]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:40:39.387]        // -> [isSWJ <= 0x00000001]
[23:40:39.387]      __var hasDormant = __protocol & 0x00020000;
[23:40:39.387]        // -> [hasDormant <= 0x00000000]
[23:40:39.387]      __var protType   = __protocol & 0x0000FFFF;
[23:40:39.387]        // -> [protType <= 0x00000002]
[23:40:39.387]    </block>
[23:40:39.387]    <control if="protType == 1" while="" timeout="0" info="">
[23:40:39.387]      // if-block "protType == 1"
[23:40:39.387]        // =>  FALSE
[23:40:39.387]      // skip if-block "protType == 1"
[23:40:39.388]    </control>
[23:40:39.388]    <control if="protType == 2" while="" timeout="0" info="">
[23:40:39.388]      // if-block "protType == 2"
[23:40:39.388]        // =>  TRUE
[23:40:39.388]      <control if="isSWJ" while="" timeout="0" info="">
[23:40:39.388]        // if-block "isSWJ"
[23:40:39.388]          // =>  TRUE
[23:40:39.389]        <control if="hasDormant" while="" timeout="0" info="">
[23:40:39.389]          // if-block "hasDormant"
[23:40:39.389]            // =>  FALSE
[23:40:39.389]          // skip if-block "hasDormant"
[23:40:39.389]        </control>
[23:40:39.389]        <control if="!hasDormant" while="" timeout="0" info="">
[23:40:39.389]          // if-block "!hasDormant"
[23:40:39.389]            // =>  TRUE
[23:40:39.390]          <block atomic="false" info="">
[23:40:39.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:40:39.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:40:39.392]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:40:39.394]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:40:39.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:40:39.398]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:40:39.398]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:40:39.400]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:40:39.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:40:39.402]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:40:39.402]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:40:39.404]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:40:39.404]          </block>
[23:40:39.404]          // end if-block "!hasDormant"
[23:40:39.404]        </control>
[23:40:39.405]        // end if-block "isSWJ"
[23:40:39.405]      </control>
[23:40:39.405]      <control if="!isSWJ" while="" timeout="0" info="">
[23:40:39.405]        // if-block "!isSWJ"
[23:40:39.405]          // =>  FALSE
[23:40:39.405]        // skip if-block "!isSWJ"
[23:40:39.405]      </control>
[23:40:39.405]      <block atomic="false" info="">
[23:40:39.405]        ReadDP(0x0);
[23:40:39.409]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:40:39.409]      </block>
[23:40:39.409]      // end if-block "protType == 2"
[23:40:39.409]    </control>
[23:40:39.409]  </sequence>
[23:40:39.409]  
[23:40:39.414]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:40:39.414]  
[23:40:39.415]  <debugvars>
[23:40:39.415]    // Pre-defined
[23:40:39.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:40:39.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:40:39.415]    __dp=0x00000000
[23:40:39.415]    __ap=0x00000000
[23:40:39.415]    __traceout=0x00000000      (Trace Disabled)
[23:40:39.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:40:39.415]    __FlashAddr=0x00000000
[23:40:39.415]    __FlashLen=0x00000000
[23:40:39.415]    __FlashArg=0x00000000
[23:40:39.416]    __FlashOp=0x00000000
[23:40:39.416]    __Result=0x00000000
[23:40:39.416]  </debugvars>
[23:40:39.416]  
[23:40:39.416]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:40:39.416]    <block atomic="false" info="">
[23:40:39.416]      __var SW_DP_ABORT       = 0x0;
[23:40:39.416]        // -> [SW_DP_ABORT <= 0x00000000]
[23:40:39.416]      __var DP_CTRL_STAT      = 0x4;
[23:40:39.416]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:40:39.416]      __var DP_SELECT         = 0x8;
[23:40:39.417]        // -> [DP_SELECT <= 0x00000008]
[23:40:39.417]      __var powered_down      = 0;
[23:40:39.417]        // -> [powered_down <= 0x00000000]
[23:40:39.417]      WriteDP(DP_SELECT, 0x00000000);
[23:40:39.420]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:40:39.420]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:40:39.421]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:40:39.421]        // -> [powered_down <= 0x00000001]
[23:40:39.421]    </block>
[23:40:39.421]    <control if="powered_down" while="" timeout="0" info="">
[23:40:39.421]      // if-block "powered_down"
[23:40:39.423]        // =>  TRUE
[23:40:39.423]      <block atomic="false" info="">
[23:40:39.423]        Message(0, "Debug/System power-up request sent");
[23:40:39.425]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:40:39.427]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:40:39.427]      </block>
[23:40:39.427]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:40:39.427]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:40:39.429]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:40:39.429]        // while-condition  =>  FALSE
[23:40:39.429]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:40:39.429]      </control>
[23:40:39.429]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:40:39.429]        // if-block "(__protocol & 0xFFFF) == 1"
[23:40:39.429]          // =>  FALSE
[23:40:39.429]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:40:39.429]      </control>
[23:40:39.429]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:40:39.429]        // if-block "(__protocol & 0xFFFF) == 2"
[23:40:39.429]          // =>  TRUE
[23:40:39.429]        <block atomic="false" info="">
[23:40:39.429]          Message(0, "executing SWD power up");
[23:40:39.432]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:40:39.434]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:40:39.434]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:40:39.435]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:40:39.435]        </block>
[23:40:39.436]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:40:39.436]      </control>
[23:40:39.436]      // end if-block "powered_down"
[23:40:39.436]    </control>
[23:40:39.436]    <block atomic="false" info="">
[23:40:39.436]      __var DEBUG_PORT_VAL    = 0;
[23:40:39.436]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:40:39.436]      __var ACCESS_POINT_VAL  = 0;
[23:40:39.436]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:40:39.436]      __ap = 1; 
[23:40:39.437]        // -> [__ap <= 0x00000001]
[23:40:39.437]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:40:39.441]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:40:39.441]      __ap = 4;
[23:40:39.441]        // -> [__ap <= 0x00000004]
[23:40:39.441]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:40:39.445]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:40:39.446]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:40:39.446]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:40:39.448]    </block>
[23:40:39.448]    <block atomic="false" info="">
[23:40:39.448]      __var nReset = 0x80;
[23:40:39.448]        // -> [nReset <= 0x00000080]
[23:40:39.448]      __var canReadPins = 0;
[23:40:39.448]        // -> [canReadPins <= 0x00000000]
[23:40:39.448]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:40:39.449]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:40:39.450]        // -> [canReadPins <= 0x00000001]
[23:40:39.450]    </block>
[23:40:39.450]    <control if="" while="1" timeout="200" info="">
[23:40:39.450]      // while "1"  (timeout="200")
[23:40:39.450]      // while-condition  =>  TRUE
[23:40:39.450]      // while "1"  (timeout="200")
[23:40:39.450]      // while-condition  =>  TRUE
[23:40:39.450]      // while "1"  (timeout="200")
[23:40:39.450]      // while-condition  =>  TRUE
[23:40:39.450]      // while "1"  (timeout="200")
[23:40:39.450]      // while-condition  =>  TRUE
[23:40:39.451]      // while "1"  (timeout="200")
[23:40:39.451]      // while-condition  =>  TRUE
[23:40:39.451]      // while "1"  (timeout="200")
[23:40:39.451]      // while-condition  =>  TRUE
[23:40:39.451]      // while "1"  (timeout="200")
[23:40:39.451]      // while-condition  =>  TRUE
[23:40:39.451]      // while "1"  (timeout="200")
[23:40:39.452]      // while-condition  =>  TRUE
[23:40:39.452]      // while "1"  (timeout="200")
[23:40:39.452]      // while-condition  =>  TRUE
[23:40:39.452]      // while "1"  (timeout="200")
[23:40:39.452]      // while-condition  =>  TRUE
[23:40:39.452]      // while "1"  (timeout="200")
[23:40:39.452]      // while-condition  =>  TRUE
[23:40:39.453]      // while "1"  (timeout="200")
[23:40:39.453]      // while-condition  =>  TRUE
[23:40:39.453]      // while "1"  (timeout="200")
[23:40:39.453]      // while-condition  =>  TRUE
[23:40:39.453]      // while "1"  (timeout="200")
[23:40:39.453]      // while-condition  =>  TRUE
[23:40:39.453]      // while "1"  (timeout="200")
[23:40:39.453]      // while-condition  =>  TRUE
[23:40:39.453]      // while "1"  (timeout="200")
[23:40:39.453]      // while-condition  =>  TRUE
[23:40:39.453]      // while "1"  (timeout="200")
[23:40:39.453]      // while-condition  =>  TRUE
[23:40:39.454]      // while "1"  (timeout="200")
[23:40:39.454]      // while  =>  TIMEOUT
[23:40:39.455]      // end while "1"
[23:40:39.455]    </control>
[23:40:39.455]    <control if="canReadPins" while="" timeout="0" info="">
[23:40:39.455]      // if-block "canReadPins"
[23:40:39.455]        // =>  TRUE
[23:40:39.455]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:40:39.455]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:40:39.457]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:40:39.457]        // while-condition  =>  FALSE
[23:40:39.457]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:40:39.457]      </control>
[23:40:39.458]      // end if-block "canReadPins"
[23:40:39.458]    </control>
[23:40:39.458]    <control if="!canReadPins" while="" timeout="0" info="">
[23:40:39.458]      // if-block "!canReadPins"
[23:40:39.458]        // =>  FALSE
[23:40:39.458]      // skip if-block "!canReadPins"
[23:40:39.458]    </control>
[23:40:39.458]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:40:39.458]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:40:39.458]        // =>  TRUE
[23:40:39.458]      <block atomic="false" info="">
[23:40:39.459]        WriteAP(0x00, 0x190008);
[23:40:39.460]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:40:39.460]        WriteAP(0xF0, 0x01);
[23:40:39.465]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:40:39.465]      </block>
[23:40:39.465]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:40:39.465]    </control>
[23:40:39.465]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:40:39.466]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:40:39.466]        // =>  FALSE
[23:40:39.466]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:40:39.466]    </control>
[23:40:39.466]    <block atomic="false" info="">
[23:40:39.466]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:40:39.469]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:40:39.469]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:40:39.469]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:40:39.471]      __ap = 0; //lets make sure we reset the access point selection
[23:40:39.472]        // -> [__ap <= 0x00000000]
[23:40:39.472]    </block>
[23:40:39.472]  </sequence>
[23:40:39.472]  
[23:40:39.495]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:40:39.495]  
[23:40:39.495]  <debugvars>
[23:40:39.495]    // Pre-defined
[23:40:39.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:40:39.495]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:40:39.497]    __dp=0x00000000
[23:40:39.497]    __ap=0x00000000
[23:40:39.497]    __traceout=0x00000000      (Trace Disabled)
[23:40:39.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:40:39.497]    __FlashAddr=0x00000000
[23:40:39.497]    __FlashLen=0x00000000
[23:40:39.497]    __FlashArg=0x00000000
[23:40:39.497]    __FlashOp=0x00000000
[23:40:39.497]    __Result=0x00000000
[23:40:39.498]  </debugvars>
[23:40:39.498]  
[23:40:39.498]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:40:39.498]    <block atomic="false" info="">
[23:40:39.498]      __var deviceID = 0;
[23:40:39.498]        // -> [deviceID <= 0x00000000]
[23:40:39.498]      __var version = 0;
[23:40:39.498]        // -> [version <= 0x00000000]
[23:40:39.498]      __var partNum = 0;
[23:40:39.498]        // -> [partNum <= 0x00000000]
[23:40:39.499]      __var manuf = 0;
[23:40:39.499]        // -> [manuf <= 0x00000000]
[23:40:39.499]      __var isMSPM0G1X0X_G3X0X = 0;
[23:40:39.499]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:40:39.499]      __var isProduction = 0;
[23:40:39.499]        // -> [isProduction <= 0x00000000]
[23:40:39.499]      __var continueId = 0;
[23:40:39.500]        // -> [continueId <= 0x00000000]
[23:40:39.500]      deviceID =   Read32(0x41C40004);
[23:40:39.504]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:40:39.504]        // -> [deviceID <= 0x2BB8802F]
[23:40:39.505]      version = deviceID >> 28;
[23:40:39.505]        // -> [version <= 0x00000002]
[23:40:39.505]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:40:39.505]        // -> [partNum <= 0x0000BB88]
[23:40:39.505]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:40:39.505]        // -> [manuf <= 0x00000017]
[23:40:39.505]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:40:39.505]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:40:39.505]      isProduction = (version > 0);
[23:40:39.505]        // -> [isProduction <= 0x00000001]
[23:40:39.505]    </block>
[23:40:39.506]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:40:39.506]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:40:39.506]        // =>  FALSE
[23:40:39.506]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:40:39.506]    </control>
[23:40:39.506]    <control if="continueId == 4" while="" timeout="0" info="">
[23:40:39.506]      // if-block "continueId == 4"
[23:40:39.506]        // =>  FALSE
[23:40:39.506]      // skip if-block "continueId == 4"
[23:40:39.506]    </control>
[23:40:39.506]    <control if="!isProduction" while="" timeout="0" info="">
[23:40:39.506]      // if-block "!isProduction"
[23:40:39.507]        // =>  FALSE
[23:40:39.507]      // skip if-block "!isProduction"
[23:40:39.507]    </control>
[23:40:39.507]  </sequence>
[23:40:39.507]  
[23:41:48.709]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:41:48.709]  
[23:41:48.711]  <debugvars>
[23:41:48.711]    // Pre-defined
[23:41:48.711]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:41:48.711]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:41:48.711]    __dp=0x00000000
[23:41:48.711]    __ap=0x00000000
[23:41:48.711]    __traceout=0x00000000      (Trace Disabled)
[23:41:48.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:41:48.711]    __FlashAddr=0x00000000
[23:41:48.711]    __FlashLen=0x00000000
[23:41:48.711]    __FlashArg=0x00000000
[23:41:48.711]    __FlashOp=0x00000000
[23:41:48.711]    __Result=0x00000000
[23:41:48.711]  </debugvars>
[23:41:48.711]  
[23:41:48.711]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:41:48.711]    <block atomic="false" info="">
[23:41:48.711]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:41:48.712]        // -> [isSWJ <= 0x00000001]
[23:41:48.712]      __var hasDormant = __protocol & 0x00020000;
[23:41:48.712]        // -> [hasDormant <= 0x00000000]
[23:41:48.712]      __var protType   = __protocol & 0x0000FFFF;
[23:41:48.712]        // -> [protType <= 0x00000002]
[23:41:48.712]    </block>
[23:41:48.712]    <control if="protType == 1" while="" timeout="0" info="">
[23:41:48.712]      // if-block "protType == 1"
[23:41:48.712]        // =>  FALSE
[23:41:48.712]      // skip if-block "protType == 1"
[23:41:48.712]    </control>
[23:41:48.712]    <control if="protType == 2" while="" timeout="0" info="">
[23:41:48.713]      // if-block "protType == 2"
[23:41:48.713]        // =>  TRUE
[23:41:48.713]      <control if="isSWJ" while="" timeout="0" info="">
[23:41:48.713]        // if-block "isSWJ"
[23:41:48.713]          // =>  TRUE
[23:41:48.713]        <control if="hasDormant" while="" timeout="0" info="">
[23:41:48.713]          // if-block "hasDormant"
[23:41:48.713]            // =>  FALSE
[23:41:48.714]          // skip if-block "hasDormant"
[23:41:48.714]        </control>
[23:41:48.714]        <control if="!hasDormant" while="" timeout="0" info="">
[23:41:48.714]          // if-block "!hasDormant"
[23:41:48.714]            // =>  TRUE
[23:41:48.714]          <block atomic="false" info="">
[23:41:48.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:41:48.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:41:48.716]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:41:48.717]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:41:48.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:41:48.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:41:48.719]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:41:48.720]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:41:48.720]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:41:48.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:41:48.722]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:41:48.723]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:41:48.723]          </block>
[23:41:48.723]          // end if-block "!hasDormant"
[23:41:48.723]        </control>
[23:41:48.724]        // end if-block "isSWJ"
[23:41:48.724]      </control>
[23:41:48.724]      <control if="!isSWJ" while="" timeout="0" info="">
[23:41:48.724]        // if-block "!isSWJ"
[23:41:48.724]          // =>  FALSE
[23:41:48.724]        // skip if-block "!isSWJ"
[23:41:48.724]      </control>
[23:41:48.724]      <block atomic="false" info="">
[23:41:48.724]        ReadDP(0x0);
[23:41:48.726]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:41:48.726]      </block>
[23:41:48.726]      // end if-block "protType == 2"
[23:41:48.726]    </control>
[23:41:48.726]  </sequence>
[23:41:48.726]  
[23:41:48.731]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:41:48.731]  
[23:41:48.732]  <debugvars>
[23:41:48.732]    // Pre-defined
[23:41:48.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:41:48.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:41:48.732]    __dp=0x00000000
[23:41:48.732]    __ap=0x00000000
[23:41:48.732]    __traceout=0x00000000      (Trace Disabled)
[23:41:48.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:41:48.732]    __FlashAddr=0x00000000
[23:41:48.732]    __FlashLen=0x00000000
[23:41:48.732]    __FlashArg=0x00000000
[23:41:48.733]    __FlashOp=0x00000000
[23:41:48.733]    __Result=0x00000000
[23:41:48.733]  </debugvars>
[23:41:48.733]  
[23:41:48.733]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:41:48.733]    <block atomic="false" info="">
[23:41:48.733]      __var SW_DP_ABORT       = 0x0;
[23:41:48.733]        // -> [SW_DP_ABORT <= 0x00000000]
[23:41:48.733]      __var DP_CTRL_STAT      = 0x4;
[23:41:48.734]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:41:48.734]      __var DP_SELECT         = 0x8;
[23:41:48.734]        // -> [DP_SELECT <= 0x00000008]
[23:41:48.734]      __var powered_down      = 0;
[23:41:48.734]        // -> [powered_down <= 0x00000000]
[23:41:48.734]      WriteDP(DP_SELECT, 0x00000000);
[23:41:48.736]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:41:48.736]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:41:48.737]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:41:48.737]        // -> [powered_down <= 0x00000001]
[23:41:48.737]    </block>
[23:41:48.737]    <control if="powered_down" while="" timeout="0" info="">
[23:41:48.737]      // if-block "powered_down"
[23:41:48.738]        // =>  TRUE
[23:41:48.738]      <block atomic="false" info="">
[23:41:48.738]        Message(0, "Debug/System power-up request sent");
[23:41:48.740]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:41:48.741]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:41:48.742]      </block>
[23:41:48.742]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:41:48.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:41:48.743]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:41:48.743]        // while-condition  =>  FALSE
[23:41:48.743]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:41:48.744]      </control>
[23:41:48.744]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:41:48.744]        // if-block "(__protocol & 0xFFFF) == 1"
[23:41:48.744]          // =>  FALSE
[23:41:48.744]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:41:48.744]      </control>
[23:41:48.744]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:41:48.744]        // if-block "(__protocol & 0xFFFF) == 2"
[23:41:48.744]          // =>  TRUE
[23:41:48.744]        <block atomic="false" info="">
[23:41:48.744]          Message(0, "executing SWD power up");
[23:41:48.748]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:41:48.750]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:41:48.750]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:41:48.751]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:41:48.751]        </block>
[23:41:48.751]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:41:48.752]      </control>
[23:41:48.752]      // end if-block "powered_down"
[23:41:48.752]    </control>
[23:41:48.752]    <block atomic="false" info="">
[23:41:48.752]      __var DEBUG_PORT_VAL    = 0;
[23:41:48.752]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:41:48.752]      __var ACCESS_POINT_VAL  = 0;
[23:41:48.752]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:41:48.752]      __ap = 1; 
[23:41:48.752]        // -> [__ap <= 0x00000001]
[23:41:48.752]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:41:48.756]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:41:48.756]      __ap = 4;
[23:41:48.756]        // -> [__ap <= 0x00000004]
[23:41:48.756]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:41:48.761]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:41:48.761]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:41:48.762]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:41:48.763]    </block>
[23:41:48.764]    <block atomic="false" info="">
[23:41:48.764]      __var nReset = 0x80;
[23:41:48.764]        // -> [nReset <= 0x00000080]
[23:41:48.764]      __var canReadPins = 0;
[23:41:48.764]        // -> [canReadPins <= 0x00000000]
[23:41:48.764]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:41:48.766]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:41:48.766]        // -> [canReadPins <= 0x00000001]
[23:41:48.766]    </block>
[23:41:48.766]    <control if="" while="1" timeout="200" info="">
[23:41:48.766]      // while "1"  (timeout="200")
[23:41:48.767]      // while-condition  =>  TRUE
[23:41:48.767]      // while "1"  (timeout="200")
[23:41:48.767]      // while  =>  TIMEOUT
[23:41:48.767]      // end while "1"
[23:41:48.767]    </control>
[23:41:48.767]    <control if="canReadPins" while="" timeout="0" info="">
[23:41:48.767]      // if-block "canReadPins"
[23:41:48.767]        // =>  TRUE
[23:41:48.767]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:41:48.767]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:41:48.769]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:41:48.769]        // while-condition  =>  FALSE
[23:41:48.769]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:41:48.769]      </control>
[23:41:48.770]      // end if-block "canReadPins"
[23:41:48.770]    </control>
[23:41:48.770]    <control if="!canReadPins" while="" timeout="0" info="">
[23:41:48.770]      // if-block "!canReadPins"
[23:41:48.770]        // =>  FALSE
[23:41:48.770]      // skip if-block "!canReadPins"
[23:41:48.770]    </control>
[23:41:48.770]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:41:48.770]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:41:48.770]        // =>  TRUE
[23:41:48.770]      <block atomic="false" info="">
[23:41:48.770]        WriteAP(0x00, 0x190008);
[23:41:48.771]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:41:48.773]        WriteAP(0xF0, 0x01);
[23:41:48.776]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:41:48.776]      </block>
[23:41:48.776]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:41:48.776]    </control>
[23:41:48.777]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:41:48.777]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:41:48.777]        // =>  FALSE
[23:41:48.777]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:41:48.777]    </control>
[23:41:48.777]    <block atomic="false" info="">
[23:41:48.777]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:41:48.780]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:41:48.780]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:41:48.780]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:41:48.782]      __ap = 0; //lets make sure we reset the access point selection
[23:41:48.782]        // -> [__ap <= 0x00000000]
[23:41:48.782]    </block>
[23:41:48.782]  </sequence>
[23:41:48.783]  
[23:41:48.802]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:41:48.802]  
[23:41:48.802]  <debugvars>
[23:41:48.803]    // Pre-defined
[23:41:48.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:41:48.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:41:48.804]    __dp=0x00000000
[23:41:48.804]    __ap=0x00000000
[23:41:48.804]    __traceout=0x00000000      (Trace Disabled)
[23:41:48.804]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:41:48.804]    __FlashAddr=0x00000000
[23:41:48.804]    __FlashLen=0x00000000
[23:41:48.804]    __FlashArg=0x00000000
[23:41:48.804]    __FlashOp=0x00000000
[23:41:48.805]    __Result=0x00000000
[23:41:48.805]  </debugvars>
[23:41:48.805]  
[23:41:48.805]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:41:48.805]    <block atomic="false" info="">
[23:41:48.805]      __var deviceID = 0;
[23:41:48.805]        // -> [deviceID <= 0x00000000]
[23:41:48.805]      __var version = 0;
[23:41:48.805]        // -> [version <= 0x00000000]
[23:41:48.805]      __var partNum = 0;
[23:41:48.806]        // -> [partNum <= 0x00000000]
[23:41:48.806]      __var manuf = 0;
[23:41:48.806]        // -> [manuf <= 0x00000000]
[23:41:48.806]      __var isMSPM0G1X0X_G3X0X = 0;
[23:41:48.806]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:41:48.806]      __var isProduction = 0;
[23:41:48.806]        // -> [isProduction <= 0x00000000]
[23:41:48.806]      __var continueId = 0;
[23:41:48.807]        // -> [continueId <= 0x00000000]
[23:41:48.807]      deviceID =   Read32(0x41C40004);
[23:41:48.813]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:41:48.813]        // -> [deviceID <= 0x2BB8802F]
[23:41:48.813]      version = deviceID >> 28;
[23:41:48.813]        // -> [version <= 0x00000002]
[23:41:48.813]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:41:48.813]        // -> [partNum <= 0x0000BB88]
[23:41:48.813]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:41:48.813]        // -> [manuf <= 0x00000017]
[23:41:48.813]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:41:48.814]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:41:48.814]      isProduction = (version > 0);
[23:41:48.814]        // -> [isProduction <= 0x00000001]
[23:41:48.814]    </block>
[23:41:48.814]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:41:48.814]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:41:48.814]        // =>  FALSE
[23:41:48.814]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:41:48.814]    </control>
[23:41:48.814]    <control if="continueId == 4" while="" timeout="0" info="">
[23:41:48.814]      // if-block "continueId == 4"
[23:41:48.814]        // =>  FALSE
[23:41:48.814]      // skip if-block "continueId == 4"
[23:41:48.815]    </control>
[23:41:48.815]    <control if="!isProduction" while="" timeout="0" info="">
[23:41:48.815]      // if-block "!isProduction"
[23:41:48.815]        // =>  FALSE
[23:41:48.815]      // skip if-block "!isProduction"
[23:41:48.815]    </control>
[23:41:48.815]  </sequence>
[23:41:48.815]  
[23:47:56.012]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:47:56.012]  
[23:47:56.020]  <debugvars>
[23:47:56.020]    // Pre-defined
[23:47:56.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:56.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:47:56.020]    __dp=0x00000000
[23:47:56.020]    __ap=0x00000000
[23:47:56.020]    __traceout=0x00000000      (Trace Disabled)
[23:47:56.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:56.021]    __FlashAddr=0x00000000
[23:47:56.021]    __FlashLen=0x00000000
[23:47:56.021]    __FlashArg=0x00000000
[23:47:56.021]    __FlashOp=0x00000000
[23:47:56.021]    __Result=0x00000000
[23:47:56.021]  </debugvars>
[23:47:56.021]  
[23:47:56.021]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:47:56.021]    <block atomic="false" info="">
[23:47:56.022]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:47:56.022]        // -> [isSWJ <= 0x00000001]
[23:47:56.022]      __var hasDormant = __protocol & 0x00020000;
[23:47:56.022]        // -> [hasDormant <= 0x00000000]
[23:47:56.022]      __var protType   = __protocol & 0x0000FFFF;
[23:47:56.022]        // -> [protType <= 0x00000002]
[23:47:56.022]    </block>
[23:47:56.022]    <control if="protType == 1" while="" timeout="0" info="">
[23:47:56.022]      // if-block "protType == 1"
[23:47:56.022]        // =>  FALSE
[23:47:56.022]      // skip if-block "protType == 1"
[23:47:56.023]    </control>
[23:47:56.023]    <control if="protType == 2" while="" timeout="0" info="">
[23:47:56.023]      // if-block "protType == 2"
[23:47:56.023]        // =>  TRUE
[23:47:56.023]      <control if="isSWJ" while="" timeout="0" info="">
[23:47:56.023]        // if-block "isSWJ"
[23:47:56.023]          // =>  TRUE
[23:47:56.023]        <control if="hasDormant" while="" timeout="0" info="">
[23:47:56.023]          // if-block "hasDormant"
[23:47:56.023]            // =>  FALSE
[23:47:56.023]          // skip if-block "hasDormant"
[23:47:56.023]        </control>
[23:47:56.023]        <control if="!hasDormant" while="" timeout="0" info="">
[23:47:56.024]          // if-block "!hasDormant"
[23:47:56.024]            // =>  TRUE
[23:47:56.024]          <block atomic="false" info="">
[23:47:56.024]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:47:56.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:56.026]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:47:56.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:47:56.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:47:56.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:56.028]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:47:56.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:47:56.032]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:47:56.034]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:56.034]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:47:56.036]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:47:56.037]          </block>
[23:47:56.037]          // end if-block "!hasDormant"
[23:47:56.037]        </control>
[23:47:56.037]        // end if-block "isSWJ"
[23:47:56.037]      </control>
[23:47:56.037]      <control if="!isSWJ" while="" timeout="0" info="">
[23:47:56.037]        // if-block "!isSWJ"
[23:47:56.037]          // =>  FALSE
[23:47:56.037]        // skip if-block "!isSWJ"
[23:47:56.037]      </control>
[23:47:56.037]      <block atomic="false" info="">
[23:47:56.037]        ReadDP(0x0);
[23:47:56.038]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:47:56.040]      </block>
[23:47:56.040]      // end if-block "protType == 2"
[23:47:56.040]    </control>
[23:47:56.040]  </sequence>
[23:47:56.040]  
[23:47:56.042]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:47:56.042]  
[23:47:56.042]  <debugvars>
[23:47:56.042]    // Pre-defined
[23:47:56.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:56.042]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:47:56.043]    __dp=0x00000000
[23:47:56.043]    __ap=0x00000000
[23:47:56.043]    __traceout=0x00000000      (Trace Disabled)
[23:47:56.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:56.043]    __FlashAddr=0x00000000
[23:47:56.043]    __FlashLen=0x00000000
[23:47:56.043]    __FlashArg=0x00000000
[23:47:56.043]    __FlashOp=0x00000000
[23:47:56.043]    __Result=0x00000000
[23:47:56.044]  </debugvars>
[23:47:56.044]  
[23:47:56.044]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:47:56.044]    <block atomic="false" info="">
[23:47:56.044]      __var SW_DP_ABORT       = 0x0;
[23:47:56.044]        // -> [SW_DP_ABORT <= 0x00000000]
[23:47:56.044]      __var DP_CTRL_STAT      = 0x4;
[23:47:56.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:47:56.045]      __var DP_SELECT         = 0x8;
[23:47:56.045]        // -> [DP_SELECT <= 0x00000008]
[23:47:56.045]      __var powered_down      = 0;
[23:47:56.045]        // -> [powered_down <= 0x00000000]
[23:47:56.045]      WriteDP(DP_SELECT, 0x00000000);
[23:47:56.047]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:47:56.047]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:47:56.049]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:47:56.049]        // -> [powered_down <= 0x00000001]
[23:47:56.049]    </block>
[23:47:56.050]    <control if="powered_down" while="" timeout="0" info="">
[23:47:56.050]      // if-block "powered_down"
[23:47:56.050]        // =>  TRUE
[23:47:56.050]      <block atomic="false" info="">
[23:47:56.050]        Message(0, "Debug/System power-up request sent");
[23:47:56.053]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:47:56.055]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:47:56.055]      </block>
[23:47:56.055]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:47:56.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:47:56.060]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:47:56.060]        // while-condition  =>  FALSE
[23:47:56.060]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:47:56.060]      </control>
[23:47:56.060]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:47:56.060]        // if-block "(__protocol & 0xFFFF) == 1"
[23:47:56.060]          // =>  FALSE
[23:47:56.060]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:47:56.061]      </control>
[23:47:56.061]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:47:56.061]        // if-block "(__protocol & 0xFFFF) == 2"
[23:47:56.061]          // =>  TRUE
[23:47:56.061]        <block atomic="false" info="">
[23:47:56.061]          Message(0, "executing SWD power up");
[23:47:56.063]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:47:56.066]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:47:56.066]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:47:56.067]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:47:56.067]        </block>
[23:47:56.067]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:47:56.067]      </control>
[23:47:56.067]      // end if-block "powered_down"
[23:47:56.067]    </control>
[23:47:56.067]    <block atomic="false" info="">
[23:47:56.068]      __var DEBUG_PORT_VAL    = 0;
[23:47:56.068]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:47:56.068]      __var ACCESS_POINT_VAL  = 0;
[23:47:56.068]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:47:56.068]      __ap = 1; 
[23:47:56.068]        // -> [__ap <= 0x00000001]
[23:47:56.068]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:47:56.071]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:47:56.071]      __ap = 4;
[23:47:56.072]        // -> [__ap <= 0x00000004]
[23:47:56.072]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:47:56.077]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:47:56.077]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:47:56.077]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:47:56.085]    </block>
[23:47:56.085]    <block atomic="false" info="">
[23:47:56.085]      __var nReset = 0x80;
[23:47:56.085]        // -> [nReset <= 0x00000080]
[23:47:56.085]      __var canReadPins = 0;
[23:47:56.085]        // -> [canReadPins <= 0x00000000]
[23:47:56.087]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:47:56.088]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:47:56.088]        // -> [canReadPins <= 0x00000001]
[23:47:56.088]    </block>
[23:47:56.088]    <control if="" while="1" timeout="200" info="">
[23:47:56.088]      // while "1"  (timeout="200")
[23:47:56.088]      // while-condition  =>  TRUE
[23:47:56.088]      // while "1"  (timeout="200")
[23:47:56.088]      // while-condition  =>  TRUE
[23:47:56.088]      // while "1"  (timeout="200")
[23:47:56.090]      // while-condition  =>  TRUE
[23:47:56.090]      // while "1"  (timeout="200")
[23:47:56.090]      // while-condition  =>  TRUE
[23:47:56.090]      // while "1"  (timeout="200")
[23:47:56.090]      // while-condition  =>  TRUE
[23:47:56.090]      // while "1"  (timeout="200")
[23:47:56.090]      // while-condition  =>  TRUE
[23:47:56.091]      // while "1"  (timeout="200")
[23:47:56.091]      // while-condition  =>  TRUE
[23:47:56.091]      // while "1"  (timeout="200")
[23:47:56.091]      // while-condition  =>  TRUE
[23:47:56.091]      // while "1"  (timeout="200")
[23:47:56.091]      // while-condition  =>  TRUE
[23:47:56.091]      // while "1"  (timeout="200")
[23:47:56.091]      // while-condition  =>  TRUE
[23:47:56.091]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.092]      // while-condition  =>  TRUE
[23:47:56.092]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.093]      // while-condition  =>  TRUE
[23:47:56.093]      // while "1"  (timeout="200")
[23:47:56.094]      // while-condition  =>  TRUE
[23:47:56.094]      // while "1"  (timeout="200")
[23:47:56.094]      // while-condition  =>  TRUE
[23:47:56.094]      // while "1"  (timeout="200")
[23:47:56.094]      // while-condition  =>  TRUE
[23:47:56.094]      // while "1"  (timeout="200")
[23:47:56.094]      // while-condition  =>  TRUE
[23:47:56.094]      // while "1"  (timeout="200")
[23:47:56.094]      // while-condition  =>  TRUE
[23:47:56.094]      // while "1"  (timeout="200")
[23:47:56.094]      // while-condition  =>  TRUE
[23:47:56.094]      // while "1"  (timeout="200")
[23:47:56.095]      // while-condition  =>  TRUE
[23:47:56.095]      // while "1"  (timeout="200")
[23:47:56.095]      // while  =>  TIMEOUT
[23:47:56.095]      // end while "1"
[23:47:56.095]    </control>
[23:47:56.095]    <control if="canReadPins" while="" timeout="0" info="">
[23:47:56.095]      // if-block "canReadPins"
[23:47:56.095]        // =>  TRUE
[23:47:56.095]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:47:56.095]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:47:56.098]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:47:56.098]        // while-condition  =>  FALSE
[23:47:56.098]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:47:56.098]      </control>
[23:47:56.098]      // end if-block "canReadPins"
[23:47:56.098]    </control>
[23:47:56.099]    <control if="!canReadPins" while="" timeout="0" info="">
[23:47:56.099]      // if-block "!canReadPins"
[23:47:56.099]        // =>  FALSE
[23:47:56.099]      // skip if-block "!canReadPins"
[23:47:56.099]    </control>
[23:47:56.099]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:47:56.099]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:47:56.099]        // =>  TRUE
[23:47:56.099]      <block atomic="false" info="">
[23:47:56.099]        WriteAP(0x00, 0x190008);
[23:47:56.101]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:47:56.101]        WriteAP(0xF0, 0x01);
[23:47:56.104]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:47:56.104]      </block>
[23:47:56.104]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:47:56.105]    </control>
[23:47:56.105]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:47:56.105]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:47:56.105]        // =>  FALSE
[23:47:56.105]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:47:56.105]    </control>
[23:47:56.105]    <block atomic="false" info="">
[23:47:56.105]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:47:56.109]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:47:56.109]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:47:56.109]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:47:56.112]      __ap = 0; //lets make sure we reset the access point selection
[23:47:56.112]        // -> [__ap <= 0x00000000]
[23:47:56.112]    </block>
[23:47:56.112]  </sequence>
[23:47:56.112]  
[23:47:56.138]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:47:56.138]  
[23:47:56.138]  <debugvars>
[23:47:56.138]    // Pre-defined
[23:47:56.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:56.140]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:47:56.140]    __dp=0x00000000
[23:47:56.140]    __ap=0x00000000
[23:47:56.140]    __traceout=0x00000000      (Trace Disabled)
[23:47:56.140]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:56.140]    __FlashAddr=0x00000000
[23:47:56.140]    __FlashLen=0x00000000
[23:47:56.140]    __FlashArg=0x00000000
[23:47:56.140]    __FlashOp=0x00000000
[23:47:56.140]    __Result=0x00000000
[23:47:56.141]  </debugvars>
[23:47:56.141]  
[23:47:56.141]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:47:56.141]    <block atomic="false" info="">
[23:47:56.141]      __var deviceID = 0;
[23:47:56.141]        // -> [deviceID <= 0x00000000]
[23:47:56.141]      __var version = 0;
[23:47:56.141]        // -> [version <= 0x00000000]
[23:47:56.141]      __var partNum = 0;
[23:47:56.141]        // -> [partNum <= 0x00000000]
[23:47:56.141]      __var manuf = 0;
[23:47:56.142]        // -> [manuf <= 0x00000000]
[23:47:56.142]      __var isMSPM0G1X0X_G3X0X = 0;
[23:47:56.142]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:47:56.142]      __var isProduction = 0;
[23:47:56.142]        // -> [isProduction <= 0x00000000]
[23:47:56.142]      __var continueId = 0;
[23:47:56.142]        // -> [continueId <= 0x00000000]
[23:47:56.142]      deviceID =   Read32(0x41C40004);
[23:47:56.148]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:47:56.148]        // -> [deviceID <= 0x2BB8802F]
[23:47:56.148]      version = deviceID >> 28;
[23:47:56.148]        // -> [version <= 0x00000002]
[23:47:56.148]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:47:56.148]        // -> [partNum <= 0x0000BB88]
[23:47:56.148]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:47:56.148]        // -> [manuf <= 0x00000017]
[23:47:56.149]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:47:56.149]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:47:56.149]      isProduction = (version > 0);
[23:47:56.149]        // -> [isProduction <= 0x00000001]
[23:47:56.149]    </block>
[23:47:56.149]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:47:56.149]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:47:56.149]        // =>  FALSE
[23:47:56.149]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:47:56.149]    </control>
[23:47:56.149]    <control if="continueId == 4" while="" timeout="0" info="">
[23:47:56.149]      // if-block "continueId == 4"
[23:47:56.149]        // =>  FALSE
[23:47:56.149]      // skip if-block "continueId == 4"
[23:47:56.150]    </control>
[23:47:56.150]    <control if="!isProduction" while="" timeout="0" info="">
[23:47:56.150]      // if-block "!isProduction"
[23:47:56.150]        // =>  FALSE
[23:47:56.150]      // skip if-block "!isProduction"
[23:47:56.150]    </control>
[23:47:56.150]  </sequence>
[23:47:56.150]  
[23:50:17.525]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:50:17.525]  
[23:50:17.526]  <debugvars>
[23:50:17.526]    // Pre-defined
[23:50:17.526]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:50:17.526]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:50:17.526]    __dp=0x00000000
[23:50:17.526]    __ap=0x00000000
[23:50:17.526]    __traceout=0x00000000      (Trace Disabled)
[23:50:17.526]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:50:17.526]    __FlashAddr=0x00000000
[23:50:17.527]    __FlashLen=0x00000000
[23:50:17.527]    __FlashArg=0x00000000
[23:50:17.527]    __FlashOp=0x00000000
[23:50:17.527]    __Result=0x00000000
[23:50:17.527]  </debugvars>
[23:50:17.527]  
[23:50:17.527]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:50:17.527]    <block atomic="false" info="">
[23:50:17.527]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:50:17.527]        // -> [isSWJ <= 0x00000001]
[23:50:17.527]      __var hasDormant = __protocol & 0x00020000;
[23:50:17.527]        // -> [hasDormant <= 0x00000000]
[23:50:17.527]      __var protType   = __protocol & 0x0000FFFF;
[23:50:17.527]        // -> [protType <= 0x00000002]
[23:50:17.527]    </block>
[23:50:17.527]    <control if="protType == 1" while="" timeout="0" info="">
[23:50:17.528]      // if-block "protType == 1"
[23:50:17.528]        // =>  FALSE
[23:50:17.528]      // skip if-block "protType == 1"
[23:50:17.528]    </control>
[23:50:17.528]    <control if="protType == 2" while="" timeout="0" info="">
[23:50:17.528]      // if-block "protType == 2"
[23:50:17.529]        // =>  TRUE
[23:50:17.529]      <control if="isSWJ" while="" timeout="0" info="">
[23:50:17.529]        // if-block "isSWJ"
[23:50:17.529]          // =>  TRUE
[23:50:17.529]        <control if="hasDormant" while="" timeout="0" info="">
[23:50:17.529]          // if-block "hasDormant"
[23:50:17.530]            // =>  FALSE
[23:50:17.530]          // skip if-block "hasDormant"
[23:50:17.530]        </control>
[23:50:17.530]        <control if="!hasDormant" while="" timeout="0" info="">
[23:50:17.530]          // if-block "!hasDormant"
[23:50:17.530]            // =>  TRUE
[23:50:17.530]          <block atomic="false" info="">
[23:50:17.530]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:50:17.532]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:50:17.532]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:50:17.534]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:50:17.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:50:17.535]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:50:17.535]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:50:17.538]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:50:17.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:50:17.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:50:17.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:50:17.542]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:50:17.542]          </block>
[23:50:17.542]          // end if-block "!hasDormant"
[23:50:17.542]        </control>
[23:50:17.542]        // end if-block "isSWJ"
[23:50:17.542]      </control>
[23:50:17.542]      <control if="!isSWJ" while="" timeout="0" info="">
[23:50:17.542]        // if-block "!isSWJ"
[23:50:17.542]          // =>  FALSE
[23:50:17.542]        // skip if-block "!isSWJ"
[23:50:17.544]      </control>
[23:50:17.544]      <block atomic="false" info="">
[23:50:17.544]        ReadDP(0x0);
[23:50:17.545]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:50:17.545]      </block>
[23:50:17.546]      // end if-block "protType == 2"
[23:50:17.546]    </control>
[23:50:17.546]  </sequence>
[23:50:17.546]  
[23:50:17.548]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:50:17.548]  
[23:50:17.549]  <debugvars>
[23:50:17.549]    // Pre-defined
[23:50:17.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:50:17.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:50:17.549]    __dp=0x00000000
[23:50:17.549]    __ap=0x00000000
[23:50:17.549]    __traceout=0x00000000      (Trace Disabled)
[23:50:17.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:50:17.550]    __FlashAddr=0x00000000
[23:50:17.550]    __FlashLen=0x00000000
[23:50:17.550]    __FlashArg=0x00000000
[23:50:17.550]    __FlashOp=0x00000000
[23:50:17.550]    __Result=0x00000000
[23:50:17.550]  </debugvars>
[23:50:17.550]  
[23:50:17.550]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:50:17.550]    <block atomic="false" info="">
[23:50:17.550]      __var SW_DP_ABORT       = 0x0;
[23:50:17.551]        // -> [SW_DP_ABORT <= 0x00000000]
[23:50:17.551]      __var DP_CTRL_STAT      = 0x4;
[23:50:17.551]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:50:17.551]      __var DP_SELECT         = 0x8;
[23:50:17.551]        // -> [DP_SELECT <= 0x00000008]
[23:50:17.551]      __var powered_down      = 0;
[23:50:17.551]        // -> [powered_down <= 0x00000000]
[23:50:17.551]      WriteDP(DP_SELECT, 0x00000000);
[23:50:17.554]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:50:17.554]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:50:17.556]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:50:17.556]        // -> [powered_down <= 0x00000001]
[23:50:17.556]    </block>
[23:50:17.556]    <control if="powered_down" while="" timeout="0" info="">
[23:50:17.556]      // if-block "powered_down"
[23:50:17.556]        // =>  TRUE
[23:50:17.556]      <block atomic="false" info="">
[23:50:17.556]        Message(0, "Debug/System power-up request sent");
[23:50:17.558]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:50:17.560]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:50:17.560]      </block>
[23:50:17.560]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:50:17.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:50:17.564]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:50:17.564]        // while-condition  =>  FALSE
[23:50:17.564]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:50:17.564]      </control>
[23:50:17.564]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:50:17.564]        // if-block "(__protocol & 0xFFFF) == 1"
[23:50:17.564]          // =>  FALSE
[23:50:17.565]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:50:17.565]      </control>
[23:50:17.565]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:50:17.565]        // if-block "(__protocol & 0xFFFF) == 2"
[23:50:17.565]          // =>  TRUE
[23:50:17.565]        <block atomic="false" info="">
[23:50:17.565]          Message(0, "executing SWD power up");
[23:50:17.568]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:50:17.570]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:50:17.570]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:50:17.572]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:50:17.572]        </block>
[23:50:17.572]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:50:17.572]      </control>
[23:50:17.572]      // end if-block "powered_down"
[23:50:17.572]    </control>
[23:50:17.573]    <block atomic="false" info="">
[23:50:17.573]      __var DEBUG_PORT_VAL    = 0;
[23:50:17.573]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:50:17.573]      __var ACCESS_POINT_VAL  = 0;
[23:50:17.573]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:50:17.573]      __ap = 1; 
[23:50:17.573]        // -> [__ap <= 0x00000001]
[23:50:17.573]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:50:17.580]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:50:17.581]      __ap = 4;
[23:50:17.581]        // -> [__ap <= 0x00000004]
[23:50:17.581]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:50:17.586]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:50:17.586]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:50:17.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:50:17.588]    </block>
[23:50:17.588]    <block atomic="false" info="">
[23:50:17.588]      __var nReset = 0x80;
[23:50:17.588]        // -> [nReset <= 0x00000080]
[23:50:17.589]      __var canReadPins = 0;
[23:50:17.589]        // -> [canReadPins <= 0x00000000]
[23:50:17.589]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:50:17.595]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:50:17.596]        // -> [canReadPins <= 0x00000001]
[23:50:17.596]    </block>
[23:50:17.596]    <control if="" while="1" timeout="200" info="">
[23:50:17.596]      // while "1"  (timeout="200")
[23:50:17.596]      // while-condition  =>  TRUE
[23:50:17.597]      // while "1"  (timeout="200")
[23:50:17.597]      // while-condition  =>  TRUE
[23:50:17.597]      // while "1"  (timeout="200")
[23:50:17.597]      // while-condition  =>  TRUE
[23:50:17.597]      // while "1"  (timeout="200")
[23:50:17.597]      // while-condition  =>  TRUE
[23:50:17.597]      // while "1"  (timeout="200")
[23:50:17.597]      // while-condition  =>  TRUE
[23:50:17.597]      // while "1"  (timeout="200")
[23:50:17.597]      // while-condition  =>  TRUE
[23:50:17.598]      // while "1"  (timeout="200")
[23:50:17.598]      // while-condition  =>  TRUE
[23:50:17.598]      // while "1"  (timeout="200")
[23:50:17.598]      // while-condition  =>  TRUE
[23:50:17.598]      // while "1"  (timeout="200")
[23:50:17.598]      // while-condition  =>  TRUE
[23:50:17.598]      // while "1"  (timeout="200")
[23:50:17.598]      // while-condition  =>  TRUE
[23:50:17.598]      // while "1"  (timeout="200")
[23:50:17.598]      // while-condition  =>  TRUE
[23:50:17.598]      // while "1"  (timeout="200")
[23:50:17.599]      // while-condition  =>  TRUE
[23:50:17.599]      // while "1"  (timeout="200")
[23:50:17.599]      // while-condition  =>  TRUE
[23:50:17.599]      // while "1"  (timeout="200")
[23:50:17.599]      // while-condition  =>  TRUE
[23:50:17.599]      // while "1"  (timeout="200")
[23:50:17.599]      // while-condition  =>  TRUE
[23:50:17.600]      // while "1"  (timeout="200")
[23:50:17.600]      // while-condition  =>  TRUE
[23:50:17.600]      // while "1"  (timeout="200")
[23:50:17.600]      // while-condition  =>  TRUE
[23:50:17.600]      // while "1"  (timeout="200")
[23:50:17.600]      // while-condition  =>  TRUE
[23:50:17.600]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.601]      // while-condition  =>  TRUE
[23:50:17.601]      // while "1"  (timeout="200")
[23:50:17.602]      // while-condition  =>  TRUE
[23:50:17.602]      // while "1"  (timeout="200")
[23:50:17.602]      // while-condition  =>  TRUE
[23:50:17.602]      // while "1"  (timeout="200")
[23:50:17.602]      // while-condition  =>  TRUE
[23:50:17.602]      // while "1"  (timeout="200")
[23:50:17.602]      // while-condition  =>  TRUE
[23:50:17.602]      // while "1"  (timeout="200")
[23:50:17.604]      // while-condition  =>  TRUE
[23:50:17.604]      // while "1"  (timeout="200")
[23:50:17.604]      // while-condition  =>  TRUE
[23:50:17.604]      // while "1"  (timeout="200")
[23:50:17.604]      // while-condition  =>  TRUE
[23:50:17.604]      // while "1"  (timeout="200")
[23:50:17.604]      // while-condition  =>  TRUE
[23:50:17.604]      // while "1"  (timeout="200")
[23:50:17.604]      // while-condition  =>  TRUE
[23:50:17.605]      // while "1"  (timeout="200")
[23:50:17.605]      // while-condition  =>  TRUE
[23:50:17.605]      // while "1"  (timeout="200")
[23:50:17.605]      // while-condition  =>  TRUE
[23:50:17.605]      // while "1"  (timeout="200")
[23:50:17.605]      // while-condition  =>  TRUE
[23:50:17.605]      // while "1"  (timeout="200")
[23:50:17.605]      // while-condition  =>  TRUE
[23:50:17.605]      // while "1"  (timeout="200")
[23:50:17.605]      // while-condition  =>  TRUE
[23:50:17.606]      // while "1"  (timeout="200")
[23:50:17.606]      // while-condition  =>  TRUE
[23:50:17.606]      // while "1"  (timeout="200")
[23:50:17.606]      // while-condition  =>  TRUE
[23:50:17.606]      // while "1"  (timeout="200")
[23:50:17.606]      // while-condition  =>  TRUE
[23:50:17.606]      // while "1"  (timeout="200")
[23:50:17.606]      // while-condition  =>  TRUE
[23:50:17.607]      // while "1"  (timeout="200")
[23:50:17.607]      // while-condition  =>  TRUE
[23:50:17.607]      // while "1"  (timeout="200")
[23:50:17.607]      // while-condition  =>  TRUE
[23:50:17.607]      // while "1"  (timeout="200")
[23:50:17.608]      // while-condition  =>  TRUE
[23:50:17.608]      // while "1"  (timeout="200")
[23:50:17.608]      // while-condition  =>  TRUE
[23:50:17.608]      // while "1"  (timeout="200")
[23:50:17.608]      // while-condition  =>  TRUE
[23:50:17.608]      // while "1"  (timeout="200")
[23:50:17.609]      // while-condition  =>  TRUE
[23:50:17.609]      // while "1"  (timeout="200")
[23:50:17.609]      // while-condition  =>  TRUE
[23:50:17.609]      // while "1"  (timeout="200")
[23:50:17.609]      // while-condition  =>  TRUE
[23:50:17.609]      // while "1"  (timeout="200")
[23:50:17.609]      // while-condition  =>  TRUE
[23:50:17.609]      // while "1"  (timeout="200")
[23:50:17.610]      // while-condition  =>  TRUE
[23:50:17.610]      // while "1"  (timeout="200")
[23:50:17.610]      // while-condition  =>  TRUE
[23:50:17.610]      // while "1"  (timeout="200")
[23:50:17.610]      // while-condition  =>  TRUE
[23:50:17.610]      // while "1"  (timeout="200")
[23:50:17.610]      // while-condition  =>  TRUE
[23:50:17.610]      // while "1"  (timeout="200")
[23:50:17.610]      // while-condition  =>  TRUE
[23:50:17.611]      // while "1"  (timeout="200")
[23:50:17.611]      // while  =>  TIMEOUT
[23:50:17.611]      // end while "1"
[23:50:17.611]    </control>
[23:50:17.611]    <control if="canReadPins" while="" timeout="0" info="">
[23:50:17.611]      // if-block "canReadPins"
[23:50:17.612]        // =>  TRUE
[23:50:17.612]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:50:17.612]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:50:17.617]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:50:17.617]        // while-condition  =>  FALSE
[23:50:17.617]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:50:17.618]      </control>
[23:50:17.618]      // end if-block "canReadPins"
[23:50:17.618]    </control>
[23:50:17.618]    <control if="!canReadPins" while="" timeout="0" info="">
[23:50:17.618]      // if-block "!canReadPins"
[23:50:17.619]        // =>  FALSE
[23:50:17.619]      // skip if-block "!canReadPins"
[23:50:17.619]    </control>
[23:50:17.619]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:50:17.619]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:50:17.619]        // =>  TRUE
[23:50:17.619]      <block atomic="false" info="">
[23:50:17.620]        WriteAP(0x00, 0x190008);
[23:50:17.622]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:50:17.622]        WriteAP(0xF0, 0x01);
[23:50:17.624]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:50:17.625]      </block>
[23:50:17.625]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:50:17.625]    </control>
[23:50:17.625]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:50:17.625]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:50:17.625]        // =>  FALSE
[23:50:17.625]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:50:17.625]    </control>
[23:50:17.625]    <block atomic="false" info="">
[23:50:17.625]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:50:17.633]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:50:17.633]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:50:17.633]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:50:17.635]      __ap = 0; //lets make sure we reset the access point selection
[23:50:17.635]        // -> [__ap <= 0x00000000]
[23:50:17.636]    </block>
[23:50:17.636]  </sequence>
[23:50:17.637]  
[23:50:17.668]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:50:17.668]  
[23:50:17.668]  <debugvars>
[23:50:17.668]    // Pre-defined
[23:50:17.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:50:17.668]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:50:17.668]    __dp=0x00000000
[23:50:17.668]    __ap=0x00000000
[23:50:17.668]    __traceout=0x00000000      (Trace Disabled)
[23:50:17.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:50:17.669]    __FlashAddr=0x00000000
[23:50:17.669]    __FlashLen=0x00000000
[23:50:17.669]    __FlashArg=0x00000000
[23:50:17.669]    __FlashOp=0x00000000
[23:50:17.669]    __Result=0x00000000
[23:50:17.669]  </debugvars>
[23:50:17.669]  
[23:50:17.669]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:50:17.669]    <block atomic="false" info="">
[23:50:17.670]      __var deviceID = 0;
[23:50:17.670]        // -> [deviceID <= 0x00000000]
[23:50:17.670]      __var version = 0;
[23:50:17.670]        // -> [version <= 0x00000000]
[23:50:17.670]      __var partNum = 0;
[23:50:17.670]        // -> [partNum <= 0x00000000]
[23:50:17.670]      __var manuf = 0;
[23:50:17.670]        // -> [manuf <= 0x00000000]
[23:50:17.670]      __var isMSPM0G1X0X_G3X0X = 0;
[23:50:17.671]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:50:17.671]      __var isProduction = 0;
[23:50:17.671]        // -> [isProduction <= 0x00000000]
[23:50:17.671]      __var continueId = 0;
[23:50:17.671]        // -> [continueId <= 0x00000000]
[23:50:17.671]      deviceID =   Read32(0x41C40004);
[23:50:17.680]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:50:17.680]        // -> [deviceID <= 0x2BB8802F]
[23:50:17.680]      version = deviceID >> 28;
[23:50:17.680]        // -> [version <= 0x00000002]
[23:50:17.680]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:50:17.681]        // -> [partNum <= 0x0000BB88]
[23:50:17.681]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:50:17.681]        // -> [manuf <= 0x00000017]
[23:50:17.681]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:50:17.681]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:50:17.681]      isProduction = (version > 0);
[23:50:17.681]        // -> [isProduction <= 0x00000001]
[23:50:17.681]    </block>
[23:50:17.681]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:50:17.681]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:50:17.682]        // =>  FALSE
[23:50:17.682]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:50:17.682]    </control>
[23:50:17.682]    <control if="continueId == 4" while="" timeout="0" info="">
[23:50:17.682]      // if-block "continueId == 4"
[23:50:17.683]        // =>  FALSE
[23:50:17.683]      // skip if-block "continueId == 4"
[23:50:17.683]    </control>
[23:50:17.683]    <control if="!isProduction" while="" timeout="0" info="">
[23:50:17.683]      // if-block "!isProduction"
[23:50:17.683]        // =>  FALSE
[23:50:17.683]      // skip if-block "!isProduction"
[23:50:17.683]    </control>
[23:50:17.684]  </sequence>
[23:50:17.684]  
[23:54:27.770]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:54:27.770]  
[23:54:27.778]  <debugvars>
[23:54:27.778]    // Pre-defined
[23:54:27.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:27.778]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:27.778]    __dp=0x00000000
[23:54:27.779]    __ap=0x00000000
[23:54:27.779]    __traceout=0x00000000      (Trace Disabled)
[23:54:27.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:27.779]    __FlashAddr=0x00000000
[23:54:27.779]    __FlashLen=0x00000000
[23:54:27.779]    __FlashArg=0x00000000
[23:54:27.779]    __FlashOp=0x00000000
[23:54:27.779]    __Result=0x00000000
[23:54:27.779]  </debugvars>
[23:54:27.779]  
[23:54:27.779]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:54:27.780]    <block atomic="false" info="">
[23:54:27.780]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:54:27.780]        // -> [isSWJ <= 0x00000001]
[23:54:27.780]      __var hasDormant = __protocol & 0x00020000;
[23:54:27.780]        // -> [hasDormant <= 0x00000000]
[23:54:27.780]      __var protType   = __protocol & 0x0000FFFF;
[23:54:27.780]        // -> [protType <= 0x00000002]
[23:54:27.780]    </block>
[23:54:27.780]    <control if="protType == 1" while="" timeout="0" info="">
[23:54:27.782]      // if-block "protType == 1"
[23:54:27.782]        // =>  FALSE
[23:54:27.782]      // skip if-block "protType == 1"
[23:54:27.782]    </control>
[23:54:27.782]    <control if="protType == 2" while="" timeout="0" info="">
[23:54:27.782]      // if-block "protType == 2"
[23:54:27.782]        // =>  TRUE
[23:54:27.782]      <control if="isSWJ" while="" timeout="0" info="">
[23:54:27.782]        // if-block "isSWJ"
[23:54:27.782]          // =>  TRUE
[23:54:27.782]        <control if="hasDormant" while="" timeout="0" info="">
[23:54:27.782]          // if-block "hasDormant"
[23:54:27.782]            // =>  FALSE
[23:54:27.782]          // skip if-block "hasDormant"
[23:54:27.782]        </control>
[23:54:27.782]        <control if="!hasDormant" while="" timeout="0" info="">
[23:54:27.782]          // if-block "!hasDormant"
[23:54:27.784]            // =>  TRUE
[23:54:27.784]          <block atomic="false" info="">
[23:54:27.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:54:27.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:27.785]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:54:27.788]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:54:27.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:54:27.790]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:27.790]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:54:27.792]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:54:27.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:54:27.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:27.793]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:54:27.794]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:54:27.794]          </block>
[23:54:27.794]          // end if-block "!hasDormant"
[23:54:27.794]        </control>
[23:54:27.794]        // end if-block "isSWJ"
[23:54:27.794]      </control>
[23:54:27.794]      <control if="!isSWJ" while="" timeout="0" info="">
[23:54:27.796]        // if-block "!isSWJ"
[23:54:27.796]          // =>  FALSE
[23:54:27.796]        // skip if-block "!isSWJ"
[23:54:27.796]      </control>
[23:54:27.796]      <block atomic="false" info="">
[23:54:27.796]        ReadDP(0x0);
[23:54:27.798]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:54:27.798]      </block>
[23:54:27.798]      // end if-block "protType == 2"
[23:54:27.798]    </control>
[23:54:27.798]  </sequence>
[23:54:27.798]  
[23:54:27.801]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:54:27.801]  
[23:54:27.801]  <debugvars>
[23:54:27.802]    // Pre-defined
[23:54:27.802]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:27.802]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:27.802]    __dp=0x00000000
[23:54:27.802]    __ap=0x00000000
[23:54:27.802]    __traceout=0x00000000      (Trace Disabled)
[23:54:27.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:27.802]    __FlashAddr=0x00000000
[23:54:27.802]    __FlashLen=0x00000000
[23:54:27.803]    __FlashArg=0x00000000
[23:54:27.803]    __FlashOp=0x00000000
[23:54:27.803]    __Result=0x00000000
[23:54:27.803]  </debugvars>
[23:54:27.803]  
[23:54:27.803]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:54:27.803]    <block atomic="false" info="">
[23:54:27.803]      __var SW_DP_ABORT       = 0x0;
[23:54:27.804]        // -> [SW_DP_ABORT <= 0x00000000]
[23:54:27.804]      __var DP_CTRL_STAT      = 0x4;
[23:54:27.804]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:54:27.804]      __var DP_SELECT         = 0x8;
[23:54:27.804]        // -> [DP_SELECT <= 0x00000008]
[23:54:27.804]      __var powered_down      = 0;
[23:54:27.804]        // -> [powered_down <= 0x00000000]
[23:54:27.804]      WriteDP(DP_SELECT, 0x00000000);
[23:54:27.809]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:54:27.809]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:54:27.810]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:54:27.810]        // -> [powered_down <= 0x00000001]
[23:54:27.810]    </block>
[23:54:27.812]    <control if="powered_down" while="" timeout="0" info="">
[23:54:27.812]      // if-block "powered_down"
[23:54:27.812]        // =>  TRUE
[23:54:27.812]      <block atomic="false" info="">
[23:54:27.812]        Message(0, "Debug/System power-up request sent");
[23:54:27.814]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:54:27.821]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:54:27.821]      </block>
[23:54:27.821]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:54:27.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:54:27.823]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:54:27.823]        // while-condition  =>  FALSE
[23:54:27.824]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:54:27.824]      </control>
[23:54:27.824]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:54:27.824]        // if-block "(__protocol & 0xFFFF) == 1"
[23:54:27.824]          // =>  FALSE
[23:54:27.824]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:54:27.824]      </control>
[23:54:27.825]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:54:27.825]        // if-block "(__protocol & 0xFFFF) == 2"
[23:54:27.825]          // =>  TRUE
[23:54:27.825]        <block atomic="false" info="">
[23:54:27.825]          Message(0, "executing SWD power up");
[23:54:27.827]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:54:27.832]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:54:27.832]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:54:27.834]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:54:27.834]        </block>
[23:54:27.834]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:54:27.834]      </control>
[23:54:27.835]      // end if-block "powered_down"
[23:54:27.835]    </control>
[23:54:27.835]    <block atomic="false" info="">
[23:54:27.835]      __var DEBUG_PORT_VAL    = 0;
[23:54:27.835]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:54:27.835]      __var ACCESS_POINT_VAL  = 0;
[23:54:27.835]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:54:27.835]      __ap = 1; 
[23:54:27.836]        // -> [__ap <= 0x00000001]
[23:54:27.836]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:54:27.840]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:54:27.840]      __ap = 4;
[23:54:27.840]        // -> [__ap <= 0x00000004]
[23:54:27.840]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:27.843]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:54:27.843]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:54:27.843]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:27.846]    </block>
[23:54:27.846]    <block atomic="false" info="">
[23:54:27.846]      __var nReset = 0x80;
[23:54:27.846]        // -> [nReset <= 0x00000080]
[23:54:27.846]      __var canReadPins = 0;
[23:54:27.847]        // -> [canReadPins <= 0x00000000]
[23:54:27.847]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:54:27.849]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:54:27.849]        // -> [canReadPins <= 0x00000001]
[23:54:27.849]    </block>
[23:54:27.849]    <control if="" while="1" timeout="200" info="">
[23:54:27.849]      // while "1"  (timeout="200")
[23:54:27.849]      // while-condition  =>  TRUE
[23:54:27.849]      // while "1"  (timeout="200")
[23:54:27.850]      // while-condition  =>  TRUE
[23:54:27.850]      // while "1"  (timeout="200")
[23:54:27.850]      // while-condition  =>  TRUE
[23:54:27.850]      // while "1"  (timeout="200")
[23:54:27.850]      // while-condition  =>  TRUE
[23:54:27.850]      // while "1"  (timeout="200")
[23:54:27.850]      // while-condition  =>  TRUE
[23:54:27.850]      // while "1"  (timeout="200")
[23:54:27.851]      // while-condition  =>  TRUE
[23:54:27.851]      // while "1"  (timeout="200")
[23:54:27.851]      // while-condition  =>  TRUE
[23:54:27.851]      // while "1"  (timeout="200")
[23:54:27.851]      // while-condition  =>  TRUE
[23:54:27.851]      // while "1"  (timeout="200")
[23:54:27.851]      // while-condition  =>  TRUE
[23:54:27.851]      // while "1"  (timeout="200")
[23:54:27.851]      // while-condition  =>  TRUE
[23:54:27.851]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.852]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.852]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.852]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.852]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.852]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.852]      // while "1"  (timeout="200")
[23:54:27.852]      // while-condition  =>  TRUE
[23:54:27.854]      // while "1"  (timeout="200")
[23:54:27.854]      // while-condition  =>  TRUE
[23:54:27.854]      // while "1"  (timeout="200")
[23:54:27.854]      // while-condition  =>  TRUE
[23:54:27.854]      // while "1"  (timeout="200")
[23:54:27.854]      // while-condition  =>  TRUE
[23:54:27.855]      // while "1"  (timeout="200")
[23:54:27.855]      // while-condition  =>  TRUE
[23:54:27.855]      // while "1"  (timeout="200")
[23:54:27.855]      // while-condition  =>  TRUE
[23:54:27.855]      // while "1"  (timeout="200")
[23:54:27.855]      // while-condition  =>  TRUE
[23:54:27.856]      // while "1"  (timeout="200")
[23:54:27.856]      // while-condition  =>  TRUE
[23:54:27.856]      // while "1"  (timeout="200")
[23:54:27.856]      // while-condition  =>  TRUE
[23:54:27.856]      // while "1"  (timeout="200")
[23:54:27.857]      // while-condition  =>  TRUE
[23:54:27.857]      // while "1"  (timeout="200")
[23:54:27.857]      // while-condition  =>  TRUE
[23:54:27.857]      // while "1"  (timeout="200")
[23:54:27.857]      // while-condition  =>  TRUE
[23:54:27.857]      // while "1"  (timeout="200")
[23:54:27.857]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.858]      // while "1"  (timeout="200")
[23:54:27.858]      // while-condition  =>  TRUE
[23:54:27.859]      // while "1"  (timeout="200")
[23:54:27.859]      // while-condition  =>  TRUE
[23:54:27.859]      // while "1"  (timeout="200")
[23:54:27.859]      // while-condition  =>  TRUE
[23:54:27.859]      // while "1"  (timeout="200")
[23:54:27.859]      // while-condition  =>  TRUE
[23:54:27.859]      // while "1"  (timeout="200")
[23:54:27.859]      // while-condition  =>  TRUE
[23:54:27.859]      // while "1"  (timeout="200")
[23:54:27.859]      // while-condition  =>  TRUE
[23:54:27.859]      // while "1"  (timeout="200")
[23:54:27.859]      // while-condition  =>  TRUE
[23:54:27.860]      // while "1"  (timeout="200")
[23:54:27.860]      // while-condition  =>  TRUE
[23:54:27.860]      // while "1"  (timeout="200")
[23:54:27.860]      // while-condition  =>  TRUE
[23:54:27.860]      // while "1"  (timeout="200")
[23:54:27.860]      // while-condition  =>  TRUE
[23:54:27.860]      // while "1"  (timeout="200")
[23:54:27.860]      // while-condition  =>  TRUE
[23:54:27.860]      // while "1"  (timeout="200")
[23:54:27.860]      // while-condition  =>  TRUE
[23:54:27.861]      // while "1"  (timeout="200")
[23:54:27.861]      // while  =>  TIMEOUT
[23:54:27.861]      // end while "1"
[23:54:27.861]    </control>
[23:54:27.861]    <control if="canReadPins" while="" timeout="0" info="">
[23:54:27.861]      // if-block "canReadPins"
[23:54:27.861]        // =>  TRUE
[23:54:27.861]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:54:27.861]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:54:27.863]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:54:27.863]        // while-condition  =>  FALSE
[23:54:27.863]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:54:27.864]      </control>
[23:54:27.864]      // end if-block "canReadPins"
[23:54:27.864]    </control>
[23:54:27.864]    <control if="!canReadPins" while="" timeout="0" info="">
[23:54:27.864]      // if-block "!canReadPins"
[23:54:27.864]        // =>  FALSE
[23:54:27.864]      // skip if-block "!canReadPins"
[23:54:27.865]    </control>
[23:54:27.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:54:27.865]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:27.865]        // =>  TRUE
[23:54:27.865]      <block atomic="false" info="">
[23:54:27.865]        WriteAP(0x00, 0x190008);
[23:54:27.867]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:27.867]        WriteAP(0xF0, 0x01);
[23:54:27.872]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:27.872]      </block>
[23:54:27.873]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:27.873]    </control>
[23:54:27.873]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:54:27.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:27.873]        // =>  FALSE
[23:54:27.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:27.873]    </control>
[23:54:27.873]    <block atomic="false" info="">
[23:54:27.874]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:27.876]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:54:27.876]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:54:27.876]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:27.878]      __ap = 0; //lets make sure we reset the access point selection
[23:54:27.879]        // -> [__ap <= 0x00000000]
[23:54:27.879]    </block>
[23:54:27.879]  </sequence>
[23:54:27.879]  
[23:54:27.912]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:54:27.912]  
[23:54:27.912]  <debugvars>
[23:54:27.912]    // Pre-defined
[23:54:27.912]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:27.913]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:27.913]    __dp=0x00000000
[23:54:27.913]    __ap=0x00000000
[23:54:27.913]    __traceout=0x00000000      (Trace Disabled)
[23:54:27.913]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:27.913]    __FlashAddr=0x00000000
[23:54:27.913]    __FlashLen=0x00000000
[23:54:27.913]    __FlashArg=0x00000000
[23:54:27.913]    __FlashOp=0x00000000
[23:54:27.913]    __Result=0x00000000
[23:54:27.914]  </debugvars>
[23:54:27.914]  
[23:54:27.914]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:54:27.914]    <block atomic="false" info="">
[23:54:27.914]      __var deviceID = 0;
[23:54:27.914]        // -> [deviceID <= 0x00000000]
[23:54:27.914]      __var version = 0;
[23:54:27.914]        // -> [version <= 0x00000000]
[23:54:27.914]      __var partNum = 0;
[23:54:27.914]        // -> [partNum <= 0x00000000]
[23:54:27.915]      __var manuf = 0;
[23:54:27.915]        // -> [manuf <= 0x00000000]
[23:54:27.915]      __var isMSPM0G1X0X_G3X0X = 0;
[23:54:27.915]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:54:27.915]      __var isProduction = 0;
[23:54:27.915]        // -> [isProduction <= 0x00000000]
[23:54:27.915]      __var continueId = 0;
[23:54:27.915]        // -> [continueId <= 0x00000000]
[23:54:27.916]      deviceID =   Read32(0x41C40004);
[23:54:27.920]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:54:27.920]        // -> [deviceID <= 0x2BB8802F]
[23:54:27.920]      version = deviceID >> 28;
[23:54:27.921]        // -> [version <= 0x00000002]
[23:54:27.921]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:54:27.921]        // -> [partNum <= 0x0000BB88]
[23:54:27.921]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:54:27.921]        // -> [manuf <= 0x00000017]
[23:54:27.921]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:54:27.921]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:54:27.921]      isProduction = (version > 0);
[23:54:27.921]        // -> [isProduction <= 0x00000001]
[23:54:27.921]    </block>
[23:54:27.922]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:54:27.922]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:54:27.922]        // =>  FALSE
[23:54:27.922]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:54:27.922]    </control>
[23:54:27.922]    <control if="continueId == 4" while="" timeout="0" info="">
[23:54:27.922]      // if-block "continueId == 4"
[23:54:27.922]        // =>  FALSE
[23:54:27.922]      // skip if-block "continueId == 4"
[23:54:27.923]    </control>
[23:54:27.923]    <control if="!isProduction" while="" timeout="0" info="">
[23:54:27.923]      // if-block "!isProduction"
[23:54:27.923]        // =>  FALSE
[23:54:27.923]      // skip if-block "!isProduction"
[23:54:27.923]    </control>
[23:54:27.923]  </sequence>
[23:54:27.923]  
[00:03:33.197]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:03:33.197]  
[00:03:33.205]  <debugvars>
[00:03:33.205]    // Pre-defined
[00:03:33.206]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:33.206]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:33.206]    __dp=0x00000000
[00:03:33.206]    __ap=0x00000000
[00:03:33.206]    __traceout=0x00000000      (Trace Disabled)
[00:03:33.206]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:33.206]    __FlashAddr=0x00000000
[00:03:33.206]    __FlashLen=0x00000000
[00:03:33.206]    __FlashArg=0x00000000
[00:03:33.206]    __FlashOp=0x00000000
[00:03:33.206]    __Result=0x00000000
[00:03:33.207]  </debugvars>
[00:03:33.207]  
[00:03:33.207]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:03:33.207]    <block atomic="false" info="">
[00:03:33.207]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:03:33.207]        // -> [isSWJ <= 0x00000001]
[00:03:33.207]      __var hasDormant = __protocol & 0x00020000;
[00:03:33.207]        // -> [hasDormant <= 0x00000000]
[00:03:33.207]      __var protType   = __protocol & 0x0000FFFF;
[00:03:33.207]        // -> [protType <= 0x00000002]
[00:03:33.207]    </block>
[00:03:33.208]    <control if="protType == 1" while="" timeout="0" info="">
[00:03:33.208]      // if-block "protType == 1"
[00:03:33.208]        // =>  FALSE
[00:03:33.208]      // skip if-block "protType == 1"
[00:03:33.208]    </control>
[00:03:33.208]    <control if="protType == 2" while="" timeout="0" info="">
[00:03:33.208]      // if-block "protType == 2"
[00:03:33.208]        // =>  TRUE
[00:03:33.208]      <control if="isSWJ" while="" timeout="0" info="">
[00:03:33.208]        // if-block "isSWJ"
[00:03:33.208]          // =>  TRUE
[00:03:33.208]        <control if="hasDormant" while="" timeout="0" info="">
[00:03:33.209]          // if-block "hasDormant"
[00:03:33.209]            // =>  FALSE
[00:03:33.209]          // skip if-block "hasDormant"
[00:03:33.209]        </control>
[00:03:33.209]        <control if="!hasDormant" while="" timeout="0" info="">
[00:03:33.209]          // if-block "!hasDormant"
[00:03:33.209]            // =>  TRUE
[00:03:33.209]          <block atomic="false" info="">
[00:03:33.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:03:33.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:33.214]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:03:33.217]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:03:33.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:03:33.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:33.218]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:03:33.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:03:33.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:03:33.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:33.222]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:03:33.223]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:03:33.223]          </block>
[00:03:33.223]          // end if-block "!hasDormant"
[00:03:33.223]        </control>
[00:03:33.223]        // end if-block "isSWJ"
[00:03:33.223]      </control>
[00:03:33.223]      <control if="!isSWJ" while="" timeout="0" info="">
[00:03:33.223]        // if-block "!isSWJ"
[00:03:33.223]          // =>  FALSE
[00:03:33.223]        // skip if-block "!isSWJ"
[00:03:33.223]      </control>
[00:03:33.223]      <block atomic="false" info="">
[00:03:33.223]        ReadDP(0x0);
[00:03:33.232]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:03:33.232]      </block>
[00:03:33.232]      // end if-block "protType == 2"
[00:03:33.232]    </control>
[00:03:33.232]  </sequence>
[00:03:33.232]  
[00:03:33.250]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:03:33.250]  
[00:03:33.250]  <debugvars>
[00:03:33.250]    // Pre-defined
[00:03:33.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:33.251]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:33.251]    __dp=0x00000000
[00:03:33.251]    __ap=0x00000000
[00:03:33.251]    __traceout=0x00000000      (Trace Disabled)
[00:03:33.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:33.251]    __FlashAddr=0x00000000
[00:03:33.251]    __FlashLen=0x00000000
[00:03:33.251]    __FlashArg=0x00000000
[00:03:33.252]    __FlashOp=0x00000000
[00:03:33.252]    __Result=0x00000000
[00:03:33.252]  </debugvars>
[00:03:33.252]  
[00:03:33.252]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:03:33.252]    <block atomic="false" info="">
[00:03:33.252]      __var SW_DP_ABORT       = 0x0;
[00:03:33.252]        // -> [SW_DP_ABORT <= 0x00000000]
[00:03:33.252]      __var DP_CTRL_STAT      = 0x4;
[00:03:33.252]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:03:33.252]      __var DP_SELECT         = 0x8;
[00:03:33.253]        // -> [DP_SELECT <= 0x00000008]
[00:03:33.253]      __var powered_down      = 0;
[00:03:33.253]        // -> [powered_down <= 0x00000000]
[00:03:33.253]      WriteDP(DP_SELECT, 0x00000000);
[00:03:33.256]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:03:33.256]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:03:33.260]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:03:33.260]        // -> [powered_down <= 0x00000001]
[00:03:33.260]    </block>
[00:03:33.260]    <control if="powered_down" while="" timeout="0" info="">
[00:03:33.260]      // if-block "powered_down"
[00:03:33.260]        // =>  TRUE
[00:03:33.260]      <block atomic="false" info="">
[00:03:33.260]        Message(0, "Debug/System power-up request sent");
[00:03:33.263]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:03:33.265]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:03:33.265]      </block>
[00:03:33.265]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:03:33.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:03:33.269]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:03:33.269]        // while-condition  =>  FALSE
[00:03:33.270]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:03:33.270]      </control>
[00:03:33.270]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:03:33.270]        // if-block "(__protocol & 0xFFFF) == 1"
[00:03:33.270]          // =>  FALSE
[00:03:33.270]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:03:33.270]      </control>
[00:03:33.270]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:03:33.270]        // if-block "(__protocol & 0xFFFF) == 2"
[00:03:33.270]          // =>  TRUE
[00:03:33.271]        <block atomic="false" info="">
[00:03:33.271]          Message(0, "executing SWD power up");
[00:03:33.273]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:03:33.277]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:03:33.278]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:03:33.279]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:03:33.279]        </block>
[00:03:33.279]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:03:33.279]      </control>
[00:03:33.279]      // end if-block "powered_down"
[00:03:33.279]    </control>
[00:03:33.279]    <block atomic="false" info="">
[00:03:33.280]      __var DEBUG_PORT_VAL    = 0;
[00:03:33.280]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:03:33.280]      __var ACCESS_POINT_VAL  = 0;
[00:03:33.280]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:03:33.280]      __ap = 1; 
[00:03:33.280]        // -> [__ap <= 0x00000001]
[00:03:33.280]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:03:33.286]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:03:33.286]      __ap = 4;
[00:03:33.286]        // -> [__ap <= 0x00000004]
[00:03:33.286]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:33.289]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:03:33.289]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:03:33.289]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:33.291]    </block>
[00:03:33.292]    <block atomic="false" info="">
[00:03:33.292]      __var nReset = 0x80;
[00:03:33.292]        // -> [nReset <= 0x00000080]
[00:03:33.292]      __var canReadPins = 0;
[00:03:33.292]        // -> [canReadPins <= 0x00000000]
[00:03:33.292]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:03:33.294]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:03:33.294]        // -> [canReadPins <= 0x00000001]
[00:03:33.294]    </block>
[00:03:33.294]    <control if="" while="1" timeout="200" info="">
[00:03:33.294]      // while "1"  (timeout="200")
[00:03:33.294]      // while-condition  =>  TRUE
[00:03:33.294]      // while "1"  (timeout="200")
[00:03:33.295]      // while-condition  =>  TRUE
[00:03:33.295]      // while "1"  (timeout="200")
[00:03:33.295]      // while-condition  =>  TRUE
[00:03:33.295]      // while "1"  (timeout="200")
[00:03:33.295]      // while-condition  =>  TRUE
[00:03:33.295]      // while "1"  (timeout="200")
[00:03:33.296]      // while-condition  =>  TRUE
[00:03:33.296]      // while "1"  (timeout="200")
[00:03:33.296]      // while-condition  =>  TRUE
[00:03:33.296]      // while "1"  (timeout="200")
[00:03:33.296]      // while-condition  =>  TRUE
[00:03:33.296]      // while "1"  (timeout="200")
[00:03:33.296]      // while-condition  =>  TRUE
[00:03:33.296]      // while "1"  (timeout="200")
[00:03:33.296]      // while-condition  =>  TRUE
[00:03:33.296]      // while "1"  (timeout="200")
[00:03:33.296]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.297]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.297]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.297]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.297]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.297]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.297]      // while-condition  =>  TRUE
[00:03:33.297]      // while "1"  (timeout="200")
[00:03:33.298]      // while-condition  =>  TRUE
[00:03:33.298]      // while "1"  (timeout="200")
[00:03:33.298]      // while  =>  TIMEOUT
[00:03:33.298]      // end while "1"
[00:03:33.298]    </control>
[00:03:33.298]    <control if="canReadPins" while="" timeout="0" info="">
[00:03:33.298]      // if-block "canReadPins"
[00:03:33.298]        // =>  TRUE
[00:03:33.298]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:03:33.298]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:03:33.300]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:03:33.300]        // while-condition  =>  FALSE
[00:03:33.300]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:03:33.301]      </control>
[00:03:33.301]      // end if-block "canReadPins"
[00:03:33.301]    </control>
[00:03:33.301]    <control if="!canReadPins" while="" timeout="0" info="">
[00:03:33.301]      // if-block "!canReadPins"
[00:03:33.301]        // =>  FALSE
[00:03:33.302]      // skip if-block "!canReadPins"
[00:03:33.302]    </control>
[00:03:33.302]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:03:33.302]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:33.302]        // =>  TRUE
[00:03:33.302]      <block atomic="false" info="">
[00:03:33.302]        WriteAP(0x00, 0x190008);
[00:03:33.309]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:33.310]        WriteAP(0xF0, 0x01);
[00:03:33.313]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:33.314]      </block>
[00:03:33.314]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:33.314]    </control>
[00:03:33.314]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:03:33.314]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:33.314]        // =>  FALSE
[00:03:33.314]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:33.314]    </control>
[00:03:33.316]    <block atomic="false" info="">
[00:03:33.316]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:33.321]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:03:33.322]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:03:33.322]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:33.324]      __ap = 0; //lets make sure we reset the access point selection
[00:03:33.324]        // -> [__ap <= 0x00000000]
[00:03:33.324]    </block>
[00:03:33.324]  </sequence>
[00:03:33.325]  
[00:03:33.364]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:03:33.364]  
[00:03:33.364]  <debugvars>
[00:03:33.365]    // Pre-defined
[00:03:33.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:33.365]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:33.366]    __dp=0x00000000
[00:03:33.366]    __ap=0x00000000
[00:03:33.366]    __traceout=0x00000000      (Trace Disabled)
[00:03:33.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:33.366]    __FlashAddr=0x00000000
[00:03:33.366]    __FlashLen=0x00000000
[00:03:33.366]    __FlashArg=0x00000000
[00:03:33.366]    __FlashOp=0x00000000
[00:03:33.366]    __Result=0x00000000
[00:03:33.366]  </debugvars>
[00:03:33.366]  
[00:03:33.366]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:03:33.366]    <block atomic="false" info="">
[00:03:33.366]      __var deviceID = 0;
[00:03:33.366]        // -> [deviceID <= 0x00000000]
[00:03:33.366]      __var version = 0;
[00:03:33.366]        // -> [version <= 0x00000000]
[00:03:33.366]      __var partNum = 0;
[00:03:33.366]        // -> [partNum <= 0x00000000]
[00:03:33.366]      __var manuf = 0;
[00:03:33.368]        // -> [manuf <= 0x00000000]
[00:03:33.368]      __var isMSPM0G1X0X_G3X0X = 0;
[00:03:33.368]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:03:33.368]      __var isProduction = 0;
[00:03:33.368]        // -> [isProduction <= 0x00000000]
[00:03:33.368]      __var continueId = 0;
[00:03:33.368]        // -> [continueId <= 0x00000000]
[00:03:33.368]      deviceID =   Read32(0x41C40004);
[00:03:33.374]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:03:33.374]        // -> [deviceID <= 0x2BB8802F]
[00:03:33.374]      version = deviceID >> 28;
[00:03:33.374]        // -> [version <= 0x00000002]
[00:03:33.374]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:03:33.374]        // -> [partNum <= 0x0000BB88]
[00:03:33.374]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:03:33.375]        // -> [manuf <= 0x00000017]
[00:03:33.375]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:03:33.375]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:03:33.375]      isProduction = (version > 0);
[00:03:33.375]        // -> [isProduction <= 0x00000001]
[00:03:33.375]    </block>
[00:03:33.376]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:03:33.376]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:03:33.376]        // =>  FALSE
[00:03:33.376]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:03:33.376]    </control>
[00:03:33.376]    <control if="continueId == 4" while="" timeout="0" info="">
[00:03:33.376]      // if-block "continueId == 4"
[00:03:33.376]        // =>  FALSE
[00:03:33.376]      // skip if-block "continueId == 4"
[00:03:33.376]    </control>
[00:03:33.376]    <control if="!isProduction" while="" timeout="0" info="">
[00:03:33.377]      // if-block "!isProduction"
[00:03:33.377]        // =>  FALSE
[00:03:33.377]      // skip if-block "!isProduction"
[00:03:33.377]    </control>
[00:03:33.377]  </sequence>
[00:03:33.377]  
[00:04:30.351]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:04:30.351]  
[00:04:30.359]  <debugvars>
[00:04:30.359]    // Pre-defined
[00:04:30.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:30.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:04:30.359]    __dp=0x00000000
[00:04:30.359]    __ap=0x00000000
[00:04:30.359]    __traceout=0x00000000      (Trace Disabled)
[00:04:30.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:30.359]    __FlashAddr=0x00000000
[00:04:30.359]    __FlashLen=0x00000000
[00:04:30.359]    __FlashArg=0x00000000
[00:04:30.359]    __FlashOp=0x00000000
[00:04:30.359]    __Result=0x00000000
[00:04:30.360]  </debugvars>
[00:04:30.360]  
[00:04:30.360]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:04:30.361]    <block atomic="false" info="">
[00:04:30.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:04:30.361]        // -> [isSWJ <= 0x00000001]
[00:04:30.361]      __var hasDormant = __protocol & 0x00020000;
[00:04:30.361]        // -> [hasDormant <= 0x00000000]
[00:04:30.361]      __var protType   = __protocol & 0x0000FFFF;
[00:04:30.361]        // -> [protType <= 0x00000002]
[00:04:30.361]    </block>
[00:04:30.361]    <control if="protType == 1" while="" timeout="0" info="">
[00:04:30.361]      // if-block "protType == 1"
[00:04:30.361]        // =>  FALSE
[00:04:30.361]      // skip if-block "protType == 1"
[00:04:30.361]    </control>
[00:04:30.361]    <control if="protType == 2" while="" timeout="0" info="">
[00:04:30.361]      // if-block "protType == 2"
[00:04:30.361]        // =>  TRUE
[00:04:30.361]      <control if="isSWJ" while="" timeout="0" info="">
[00:04:30.361]        // if-block "isSWJ"
[00:04:30.361]          // =>  TRUE
[00:04:30.361]        <control if="hasDormant" while="" timeout="0" info="">
[00:04:30.363]          // if-block "hasDormant"
[00:04:30.363]            // =>  FALSE
[00:04:30.363]          // skip if-block "hasDormant"
[00:04:30.363]        </control>
[00:04:30.363]        <control if="!hasDormant" while="" timeout="0" info="">
[00:04:30.363]          // if-block "!hasDormant"
[00:04:30.363]            // =>  TRUE
[00:04:30.363]          <block atomic="false" info="">
[00:04:30.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:04:30.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:30.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:04:30.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:04:30.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:04:30.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:30.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:04:30.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:04:30.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:04:30.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:04:30.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:04:30.376]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:04:30.376]          </block>
[00:04:30.376]          // end if-block "!hasDormant"
[00:04:30.376]        </control>
[00:04:30.376]        // end if-block "isSWJ"
[00:04:30.376]      </control>
[00:04:30.376]      <control if="!isSWJ" while="" timeout="0" info="">
[00:04:30.377]        // if-block "!isSWJ"
[00:04:30.377]          // =>  FALSE
[00:04:30.377]        // skip if-block "!isSWJ"
[00:04:30.377]      </control>
[00:04:30.377]      <block atomic="false" info="">
[00:04:30.377]        ReadDP(0x0);
[00:04:30.379]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:04:30.379]      </block>
[00:04:30.379]      // end if-block "protType == 2"
[00:04:30.379]    </control>
[00:04:30.379]  </sequence>
[00:04:30.379]  
[00:04:30.382]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:04:30.382]  
[00:04:30.382]  <debugvars>
[00:04:30.382]    // Pre-defined
[00:04:30.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:30.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:04:30.383]    __dp=0x00000000
[00:04:30.383]    __ap=0x00000000
[00:04:30.383]    __traceout=0x00000000      (Trace Disabled)
[00:04:30.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:30.383]    __FlashAddr=0x00000000
[00:04:30.383]    __FlashLen=0x00000000
[00:04:30.383]    __FlashArg=0x00000000
[00:04:30.383]    __FlashOp=0x00000000
[00:04:30.384]    __Result=0x00000000
[00:04:30.384]  </debugvars>
[00:04:30.384]  
[00:04:30.384]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:04:30.384]    <block atomic="false" info="">
[00:04:30.384]      __var SW_DP_ABORT       = 0x0;
[00:04:30.384]        // -> [SW_DP_ABORT <= 0x00000000]
[00:04:30.384]      __var DP_CTRL_STAT      = 0x4;
[00:04:30.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:04:30.384]      __var DP_SELECT         = 0x8;
[00:04:30.384]        // -> [DP_SELECT <= 0x00000008]
[00:04:30.385]      __var powered_down      = 0;
[00:04:30.385]        // -> [powered_down <= 0x00000000]
[00:04:30.385]      WriteDP(DP_SELECT, 0x00000000);
[00:04:30.386]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:04:30.386]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:04:30.388]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:04:30.388]        // -> [powered_down <= 0x00000001]
[00:04:30.388]    </block>
[00:04:30.388]    <control if="powered_down" while="" timeout="0" info="">
[00:04:30.388]      // if-block "powered_down"
[00:04:30.388]        // =>  TRUE
[00:04:30.388]      <block atomic="false" info="">
[00:04:30.388]        Message(0, "Debug/System power-up request sent");
[00:04:30.388]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:04:30.391]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:04:30.392]      </block>
[00:04:30.392]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:04:30.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:04:30.393]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:04:30.393]        // while-condition  =>  FALSE
[00:04:30.393]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:04:30.393]      </control>
[00:04:30.393]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:04:30.393]        // if-block "(__protocol & 0xFFFF) == 1"
[00:04:30.393]          // =>  FALSE
[00:04:30.393]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:04:30.393]      </control>
[00:04:30.395]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:04:30.395]        // if-block "(__protocol & 0xFFFF) == 2"
[00:04:30.395]          // =>  TRUE
[00:04:30.395]        <block atomic="false" info="">
[00:04:30.395]          Message(0, "executing SWD power up");
[00:04:30.395]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:04:30.396]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:04:30.396]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:04:30.398]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:04:30.398]        </block>
[00:04:30.398]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:04:30.398]      </control>
[00:04:30.398]      // end if-block "powered_down"
[00:04:30.398]    </control>
[00:04:30.398]    <block atomic="false" info="">
[00:04:30.398]      __var DEBUG_PORT_VAL    = 0;
[00:04:30.399]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:04:30.399]      __var ACCESS_POINT_VAL  = 0;
[00:04:30.399]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:04:30.399]      __ap = 1; 
[00:04:30.399]        // -> [__ap <= 0x00000001]
[00:04:30.399]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:04:30.403]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:04:30.403]      __ap = 4;
[00:04:30.403]        // -> [__ap <= 0x00000004]
[00:04:30.403]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:04:30.407]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:04:30.407]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:04:30.407]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:04:30.407]    </block>
[00:04:30.407]    <block atomic="false" info="">
[00:04:30.407]      __var nReset = 0x80;
[00:04:30.407]        // -> [nReset <= 0x00000080]
[00:04:30.408]      __var canReadPins = 0;
[00:04:30.408]        // -> [canReadPins <= 0x00000000]
[00:04:30.408]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:04:30.409]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:04:30.409]        // -> [canReadPins <= 0x00000001]
[00:04:30.409]    </block>
[00:04:30.409]    <control if="" while="1" timeout="200" info="">
[00:04:30.409]      // while "1"  (timeout="200")
[00:04:30.409]      // while-condition  =>  TRUE
[00:04:30.409]      // while "1"  (timeout="200")
[00:04:30.409]      // while-condition  =>  TRUE
[00:04:30.409]      // while "1"  (timeout="200")
[00:04:30.409]      // while-condition  =>  TRUE
[00:04:30.411]      // while "1"  (timeout="200")
[00:04:30.411]      // while-condition  =>  TRUE
[00:04:30.411]      // while "1"  (timeout="200")
[00:04:30.411]      // while-condition  =>  TRUE
[00:04:30.411]      // while "1"  (timeout="200")
[00:04:30.411]      // while-condition  =>  TRUE
[00:04:30.411]      // while "1"  (timeout="200")
[00:04:30.411]      // while-condition  =>  TRUE
[00:04:30.411]      // while "1"  (timeout="200")
[00:04:30.411]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.412]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.412]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.412]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.412]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.412]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.412]      // while-condition  =>  TRUE
[00:04:30.412]      // while "1"  (timeout="200")
[00:04:30.413]      // while-condition  =>  TRUE
[00:04:30.413]      // while "1"  (timeout="200")
[00:04:30.413]      // while-condition  =>  TRUE
[00:04:30.413]      // while "1"  (timeout="200")
[00:04:30.413]      // while-condition  =>  TRUE
[00:04:30.413]      // while "1"  (timeout="200")
[00:04:30.413]      // while-condition  =>  TRUE
[00:04:30.413]      // while "1"  (timeout="200")
[00:04:30.413]      // while-condition  =>  TRUE
[00:04:30.413]      // while "1"  (timeout="200")
[00:04:30.413]      // while-condition  =>  TRUE
[00:04:30.414]      // while "1"  (timeout="200")
[00:04:30.414]      // while-condition  =>  TRUE
[00:04:30.414]      // while "1"  (timeout="200")
[00:04:30.414]      // while-condition  =>  TRUE
[00:04:30.414]      // while "1"  (timeout="200")
[00:04:30.414]      // while-condition  =>  TRUE
[00:04:30.414]      // while "1"  (timeout="200")
[00:04:30.414]      // while-condition  =>  TRUE
[00:04:30.414]      // while "1"  (timeout="200")
[00:04:30.414]      // while-condition  =>  TRUE
[00:04:30.414]      // while "1"  (timeout="200")
[00:04:30.414]      // while-condition  =>  TRUE
[00:04:30.415]      // while "1"  (timeout="200")
[00:04:30.415]      // while-condition  =>  TRUE
[00:04:30.415]      // while "1"  (timeout="200")
[00:04:30.415]      // while-condition  =>  TRUE
[00:04:30.415]      // while "1"  (timeout="200")
[00:04:30.415]      // while-condition  =>  TRUE
[00:04:30.415]      // while "1"  (timeout="200")
[00:04:30.415]      // while-condition  =>  TRUE
[00:04:30.415]      // while "1"  (timeout="200")
[00:04:30.415]      // while-condition  =>  TRUE
[00:04:30.415]      // while "1"  (timeout="200")
[00:04:30.415]      // while-condition  =>  TRUE
[00:04:30.416]      // while "1"  (timeout="200")
[00:04:30.416]      // while-condition  =>  TRUE
[00:04:30.416]      // while "1"  (timeout="200")
[00:04:30.416]      // while-condition  =>  TRUE
[00:04:30.416]      // while "1"  (timeout="200")
[00:04:30.416]      // while-condition  =>  TRUE
[00:04:30.416]      // while "1"  (timeout="200")
[00:04:30.416]      // while-condition  =>  TRUE
[00:04:30.416]      // while "1"  (timeout="200")
[00:04:30.417]      // while-condition  =>  TRUE
[00:04:30.417]      // while "1"  (timeout="200")
[00:04:30.417]      // while-condition  =>  TRUE
[00:04:30.417]      // while "1"  (timeout="200")
[00:04:30.417]      // while-condition  =>  TRUE
[00:04:30.417]      // while "1"  (timeout="200")
[00:04:30.417]      // while-condition  =>  TRUE
[00:04:30.417]      // while "1"  (timeout="200")
[00:04:30.417]      // while-condition  =>  TRUE
[00:04:30.417]      // while "1"  (timeout="200")
[00:04:30.418]      // while-condition  =>  TRUE
[00:04:30.418]      // while "1"  (timeout="200")
[00:04:30.418]      // while-condition  =>  TRUE
[00:04:30.418]      // while "1"  (timeout="200")
[00:04:30.418]      // while-condition  =>  TRUE
[00:04:30.418]      // while "1"  (timeout="200")
[00:04:30.418]      // while-condition  =>  TRUE
[00:04:30.418]      // while "1"  (timeout="200")
[00:04:30.418]      // while-condition  =>  TRUE
[00:04:30.418]      // while "1"  (timeout="200")
[00:04:30.418]      // while-condition  =>  TRUE
[00:04:30.418]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.419]      // while-condition  =>  TRUE
[00:04:30.419]      // while "1"  (timeout="200")
[00:04:30.421]      // while-condition  =>  TRUE
[00:04:30.421]      // while "1"  (timeout="200")
[00:04:30.421]      // while-condition  =>  TRUE
[00:04:30.421]      // while "1"  (timeout="200")
[00:04:30.421]      // while-condition  =>  TRUE
[00:04:30.421]      // while "1"  (timeout="200")
[00:04:30.421]      // while-condition  =>  TRUE
[00:04:30.421]      // while "1"  (timeout="200")
[00:04:30.422]      // while-condition  =>  TRUE
[00:04:30.422]      // while "1"  (timeout="200")
[00:04:30.422]      // while-condition  =>  TRUE
[00:04:30.422]      // while "1"  (timeout="200")
[00:04:30.422]      // while-condition  =>  TRUE
[00:04:30.422]      // while "1"  (timeout="200")
[00:04:30.422]      // while-condition  =>  TRUE
[00:04:30.422]      // while "1"  (timeout="200")
[00:04:30.422]      // while-condition  =>  TRUE
[00:04:30.423]      // while "1"  (timeout="200")
[00:04:30.423]      // while  =>  TIMEOUT
[00:04:30.423]      // end while "1"
[00:04:30.423]    </control>
[00:04:30.423]    <control if="canReadPins" while="" timeout="0" info="">
[00:04:30.423]      // if-block "canReadPins"
[00:04:30.423]        // =>  TRUE
[00:04:30.423]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:04:30.423]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:04:30.425]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:04:30.425]        // while-condition  =>  FALSE
[00:04:30.425]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:04:30.425]      </control>
[00:04:30.425]      // end if-block "canReadPins"
[00:04:30.425]    </control>
[00:04:30.425]    <control if="!canReadPins" while="" timeout="0" info="">
[00:04:30.426]      // if-block "!canReadPins"
[00:04:30.426]        // =>  FALSE
[00:04:30.426]      // skip if-block "!canReadPins"
[00:04:30.426]    </control>
[00:04:30.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:04:30.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:04:30.426]        // =>  TRUE
[00:04:30.426]      <block atomic="false" info="">
[00:04:30.426]        WriteAP(0x00, 0x190008);
[00:04:30.429]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:04:30.429]        WriteAP(0xF0, 0x01);
[00:04:30.432]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:04:30.433]      </block>
[00:04:30.433]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:04:30.433]    </control>
[00:04:30.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:04:30.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:04:30.433]        // =>  FALSE
[00:04:30.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:04:30.434]    </control>
[00:04:30.434]    <block atomic="false" info="">
[00:04:30.434]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:04:30.439]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:04:30.440]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:04:30.440]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:04:30.440]      __ap = 0; //lets make sure we reset the access point selection
[00:04:30.440]        // -> [__ap <= 0x00000000]
[00:04:30.440]    </block>
[00:04:30.441]  </sequence>
[00:04:30.441]  
[00:04:30.460]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:04:30.460]  
[00:04:30.460]  <debugvars>
[00:04:30.460]    // Pre-defined
[00:04:30.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:04:30.461]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:04:30.461]    __dp=0x00000000
[00:04:30.461]    __ap=0x00000000
[00:04:30.461]    __traceout=0x00000000      (Trace Disabled)
[00:04:30.461]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:04:30.461]    __FlashAddr=0x00000000
[00:04:30.461]    __FlashLen=0x00000000
[00:04:30.461]    __FlashArg=0x00000000
[00:04:30.461]    __FlashOp=0x00000000
[00:04:30.462]    __Result=0x00000000
[00:04:30.462]  </debugvars>
[00:04:30.462]  
[00:04:30.462]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:04:30.462]    <block atomic="false" info="">
[00:04:30.462]      __var deviceID = 0;
[00:04:30.462]        // -> [deviceID <= 0x00000000]
[00:04:30.462]      __var version = 0;
[00:04:30.462]        // -> [version <= 0x00000000]
[00:04:30.462]      __var partNum = 0;
[00:04:30.463]        // -> [partNum <= 0x00000000]
[00:04:30.463]      __var manuf = 0;
[00:04:30.463]        // -> [manuf <= 0x00000000]
[00:04:30.463]      __var isMSPM0G1X0X_G3X0X = 0;
[00:04:30.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:04:30.463]      __var isProduction = 0;
[00:04:30.463]        // -> [isProduction <= 0x00000000]
[00:04:30.463]      __var continueId = 0;
[00:04:30.463]        // -> [continueId <= 0x00000000]
[00:04:30.463]      deviceID =   Read32(0x41C40004);
[00:04:30.472]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:04:30.472]        // -> [deviceID <= 0x2BB8802F]
[00:04:30.472]      version = deviceID >> 28;
[00:04:30.473]        // -> [version <= 0x00000002]
[00:04:30.473]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:04:30.473]        // -> [partNum <= 0x0000BB88]
[00:04:30.473]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:04:30.473]        // -> [manuf <= 0x00000017]
[00:04:30.473]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:04:30.473]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:04:30.473]      isProduction = (version > 0);
[00:04:30.473]        // -> [isProduction <= 0x00000001]
[00:04:30.473]    </block>
[00:04:30.474]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:04:30.474]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:04:30.474]        // =>  FALSE
[00:04:30.474]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:04:30.474]    </control>
[00:04:30.474]    <control if="continueId == 4" while="" timeout="0" info="">
[00:04:30.474]      // if-block "continueId == 4"
[00:04:30.474]        // =>  FALSE
[00:04:30.474]      // skip if-block "continueId == 4"
[00:04:30.474]    </control>
[00:04:30.474]    <control if="!isProduction" while="" timeout="0" info="">
[00:04:30.475]      // if-block "!isProduction"
[00:04:30.475]        // =>  FALSE
[00:04:30.475]      // skip if-block "!isProduction"
[00:04:30.475]    </control>
[00:04:30.475]  </sequence>
[00:04:30.475]  
[00:19:56.527]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:19:56.527]  
[00:19:56.536]  <debugvars>
[00:19:56.536]    // Pre-defined
[00:19:56.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:56.536]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:56.536]    __dp=0x00000000
[00:19:56.536]    __ap=0x00000000
[00:19:56.537]    __traceout=0x00000000      (Trace Disabled)
[00:19:56.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:56.537]    __FlashAddr=0x00000000
[00:19:56.537]    __FlashLen=0x00000000
[00:19:56.537]    __FlashArg=0x00000000
[00:19:56.537]    __FlashOp=0x00000000
[00:19:56.537]    __Result=0x00000000
[00:19:56.537]  </debugvars>
[00:19:56.538]  
[00:19:56.538]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:19:56.538]    <block atomic="false" info="">
[00:19:56.538]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:19:56.538]        // -> [isSWJ <= 0x00000001]
[00:19:56.538]      __var hasDormant = __protocol & 0x00020000;
[00:19:56.538]        // -> [hasDormant <= 0x00000000]
[00:19:56.538]      __var protType   = __protocol & 0x0000FFFF;
[00:19:56.538]        // -> [protType <= 0x00000002]
[00:19:56.538]    </block>
[00:19:56.538]    <control if="protType == 1" while="" timeout="0" info="">
[00:19:56.538]      // if-block "protType == 1"
[00:19:56.539]        // =>  FALSE
[00:19:56.539]      // skip if-block "protType == 1"
[00:19:56.539]    </control>
[00:19:56.539]    <control if="protType == 2" while="" timeout="0" info="">
[00:19:56.539]      // if-block "protType == 2"
[00:19:56.539]        // =>  TRUE
[00:19:56.539]      <control if="isSWJ" while="" timeout="0" info="">
[00:19:56.539]        // if-block "isSWJ"
[00:19:56.539]          // =>  TRUE
[00:19:56.540]        <control if="hasDormant" while="" timeout="0" info="">
[00:19:56.540]          // if-block "hasDormant"
[00:19:56.540]            // =>  FALSE
[00:19:56.540]          // skip if-block "hasDormant"
[00:19:56.540]        </control>
[00:19:56.540]        <control if="!hasDormant" while="" timeout="0" info="">
[00:19:56.540]          // if-block "!hasDormant"
[00:19:56.540]            // =>  TRUE
[00:19:56.540]          <block atomic="false" info="">
[00:19:56.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:19:56.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:56.542]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:19:56.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:19:56.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:19:56.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:56.545]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:19:56.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:19:56.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:19:56.550]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:19:56.550]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:19:56.552]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:19:56.552]          </block>
[00:19:56.552]          // end if-block "!hasDormant"
[00:19:56.552]        </control>
[00:19:56.552]        // end if-block "isSWJ"
[00:19:56.552]      </control>
[00:19:56.552]      <control if="!isSWJ" while="" timeout="0" info="">
[00:19:56.552]        // if-block "!isSWJ"
[00:19:56.552]          // =>  FALSE
[00:19:56.552]        // skip if-block "!isSWJ"
[00:19:56.552]      </control>
[00:19:56.552]      <block atomic="false" info="">
[00:19:56.552]        ReadDP(0x0);
[00:19:56.556]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:19:56.557]      </block>
[00:19:56.557]      // end if-block "protType == 2"
[00:19:56.557]    </control>
[00:19:56.557]  </sequence>
[00:19:56.557]  
[00:19:56.560]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:19:56.560]  
[00:19:56.560]  <debugvars>
[00:19:56.560]    // Pre-defined
[00:19:56.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:56.560]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:56.560]    __dp=0x00000000
[00:19:56.560]    __ap=0x00000000
[00:19:56.560]    __traceout=0x00000000      (Trace Disabled)
[00:19:56.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:56.560]    __FlashAddr=0x00000000
[00:19:56.560]    __FlashLen=0x00000000
[00:19:56.560]    __FlashArg=0x00000000
[00:19:56.560]    __FlashOp=0x00000000
[00:19:56.561]    __Result=0x00000000
[00:19:56.561]  </debugvars>
[00:19:56.561]  
[00:19:56.561]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:19:56.561]    <block atomic="false" info="">
[00:19:56.561]      __var SW_DP_ABORT       = 0x0;
[00:19:56.561]        // -> [SW_DP_ABORT <= 0x00000000]
[00:19:56.562]      __var DP_CTRL_STAT      = 0x4;
[00:19:56.562]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:19:56.562]      __var DP_SELECT         = 0x8;
[00:19:56.562]        // -> [DP_SELECT <= 0x00000008]
[00:19:56.562]      __var powered_down      = 0;
[00:19:56.562]        // -> [powered_down <= 0x00000000]
[00:19:56.562]      WriteDP(DP_SELECT, 0x00000000);
[00:19:56.564]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:19:56.564]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:19:56.566]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:19:56.566]        // -> [powered_down <= 0x00000001]
[00:19:56.566]    </block>
[00:19:56.566]    <control if="powered_down" while="" timeout="0" info="">
[00:19:56.566]      // if-block "powered_down"
[00:19:56.566]        // =>  TRUE
[00:19:56.566]      <block atomic="false" info="">
[00:19:56.566]        Message(0, "Debug/System power-up request sent");
[00:19:56.568]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:19:56.572]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:19:56.572]      </block>
[00:19:56.572]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:19:56.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:19:56.574]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:19:56.574]        // while-condition  =>  FALSE
[00:19:56.574]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:19:56.574]      </control>
[00:19:56.574]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:19:56.574]        // if-block "(__protocol & 0xFFFF) == 1"
[00:19:56.574]          // =>  FALSE
[00:19:56.574]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:19:56.575]      </control>
[00:19:56.575]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:19:56.575]        // if-block "(__protocol & 0xFFFF) == 2"
[00:19:56.575]          // =>  TRUE
[00:19:56.575]        <block atomic="false" info="">
[00:19:56.575]          Message(0, "executing SWD power up");
[00:19:56.577]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:19:56.581]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:19:56.581]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:19:56.582]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:19:56.582]        </block>
[00:19:56.582]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:19:56.582]      </control>
[00:19:56.582]      // end if-block "powered_down"
[00:19:56.582]    </control>
[00:19:56.582]    <block atomic="false" info="">
[00:19:56.582]      __var DEBUG_PORT_VAL    = 0;
[00:19:56.583]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:19:56.583]      __var ACCESS_POINT_VAL  = 0;
[00:19:56.583]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:19:56.583]      __ap = 1; 
[00:19:56.583]        // -> [__ap <= 0x00000001]
[00:19:56.583]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:19:56.587]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:19:56.587]      __ap = 4;
[00:19:56.587]        // -> [__ap <= 0x00000004]
[00:19:56.587]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:19:56.597]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.597]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:19:56.597]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:19:56.600]    </block>
[00:19:56.600]    <block atomic="false" info="">
[00:19:56.600]      __var nReset = 0x80;
[00:19:56.600]        // -> [nReset <= 0x00000080]
[00:19:56.600]      __var canReadPins = 0;
[00:19:56.600]        // -> [canReadPins <= 0x00000000]
[00:19:56.600]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:19:56.602]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:19:56.602]        // -> [canReadPins <= 0x00000001]
[00:19:56.602]    </block>
[00:19:56.602]    <control if="" while="1" timeout="200" info="">
[00:19:56.602]      // while "1"  (timeout="200")
[00:19:56.602]      // while-condition  =>  TRUE
[00:19:56.602]      // while "1"  (timeout="200")
[00:19:56.603]      // while-condition  =>  TRUE
[00:19:56.603]      // while "1"  (timeout="200")
[00:19:56.603]      // while-condition  =>  TRUE
[00:19:56.603]      // while "1"  (timeout="200")
[00:19:56.603]      // while-condition  =>  TRUE
[00:19:56.603]      // while "1"  (timeout="200")
[00:19:56.603]      // while-condition  =>  TRUE
[00:19:56.603]      // while "1"  (timeout="200")
[00:19:56.603]      // while-condition  =>  TRUE
[00:19:56.603]      // while "1"  (timeout="200")
[00:19:56.603]      // while-condition  =>  TRUE
[00:19:56.603]      // while "1"  (timeout="200")
[00:19:56.605]      // while-condition  =>  TRUE
[00:19:56.605]      // while "1"  (timeout="200")
[00:19:56.605]      // while-condition  =>  TRUE
[00:19:56.605]      // while "1"  (timeout="200")
[00:19:56.605]      // while-condition  =>  TRUE
[00:19:56.605]      // while "1"  (timeout="200")
[00:19:56.605]      // while-condition  =>  TRUE
[00:19:56.605]      // while "1"  (timeout="200")
[00:19:56.605]      // while-condition  =>  TRUE
[00:19:56.605]      // while "1"  (timeout="200")
[00:19:56.605]      // while-condition  =>  TRUE
[00:19:56.605]      // while "1"  (timeout="200")
[00:19:56.606]      // while-condition  =>  TRUE
[00:19:56.606]      // while "1"  (timeout="200")
[00:19:56.606]      // while-condition  =>  TRUE
[00:19:56.606]      // while "1"  (timeout="200")
[00:19:56.606]      // while-condition  =>  TRUE
[00:19:56.606]      // while "1"  (timeout="200")
[00:19:56.606]      // while-condition  =>  TRUE
[00:19:56.606]      // while "1"  (timeout="200")
[00:19:56.606]      // while-condition  =>  TRUE
[00:19:56.606]      // while "1"  (timeout="200")
[00:19:56.606]      // while-condition  =>  TRUE
[00:19:56.606]      // while "1"  (timeout="200")
[00:19:56.607]      // while-condition  =>  TRUE
[00:19:56.607]      // while "1"  (timeout="200")
[00:19:56.607]      // while-condition  =>  TRUE
[00:19:56.607]      // while "1"  (timeout="200")
[00:19:56.607]      // while-condition  =>  TRUE
[00:19:56.607]      // while "1"  (timeout="200")
[00:19:56.607]      // while-condition  =>  TRUE
[00:19:56.607]      // while "1"  (timeout="200")
[00:19:56.607]      // while-condition  =>  TRUE
[00:19:56.607]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.608]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.608]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.608]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.608]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.608]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.608]      // while "1"  (timeout="200")
[00:19:56.608]      // while-condition  =>  TRUE
[00:19:56.609]      // while "1"  (timeout="200")
[00:19:56.609]      // while-condition  =>  TRUE
[00:19:56.609]      // while "1"  (timeout="200")
[00:19:56.609]      // while-condition  =>  TRUE
[00:19:56.609]      // while "1"  (timeout="200")
[00:19:56.609]      // while-condition  =>  TRUE
[00:19:56.610]      // while "1"  (timeout="200")
[00:19:56.610]      // while-condition  =>  TRUE
[00:19:56.610]      // while "1"  (timeout="200")
[00:19:56.610]      // while-condition  =>  TRUE
[00:19:56.610]      // while "1"  (timeout="200")
[00:19:56.610]      // while-condition  =>  TRUE
[00:19:56.611]      // while "1"  (timeout="200")
[00:19:56.611]      // while  =>  TIMEOUT
[00:19:56.611]      // end while "1"
[00:19:56.611]    </control>
[00:19:56.611]    <control if="canReadPins" while="" timeout="0" info="">
[00:19:56.611]      // if-block "canReadPins"
[00:19:56.611]        // =>  TRUE
[00:19:56.611]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:19:56.611]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:19:56.613]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:19:56.613]        // while-condition  =>  FALSE
[00:19:56.613]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:19:56.613]      </control>
[00:19:56.613]      // end if-block "canReadPins"
[00:19:56.613]    </control>
[00:19:56.613]    <control if="!canReadPins" while="" timeout="0" info="">
[00:19:56.613]      // if-block "!canReadPins"
[00:19:56.613]        // =>  FALSE
[00:19:56.613]      // skip if-block "!canReadPins"
[00:19:56.615]    </control>
[00:19:56.615]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:19:56.615]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:19:56.615]        // =>  TRUE
[00:19:56.615]      <block atomic="false" info="">
[00:19:56.615]        WriteAP(0x00, 0x190008);
[00:19:56.617]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.617]        WriteAP(0xF0, 0x01);
[00:19:56.622]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.622]      </block>
[00:19:56.622]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:19:56.622]    </control>
[00:19:56.622]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:19:56.622]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:19:56.622]        // =>  FALSE
[00:19:56.623]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:19:56.623]    </control>
[00:19:56.623]    <block atomic="false" info="">
[00:19:56.623]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:19:56.626]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:19:56.626]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:19:56.626]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:19:56.628]      __ap = 0; //lets make sure we reset the access point selection
[00:19:56.629]        // -> [__ap <= 0x00000000]
[00:19:56.629]    </block>
[00:19:56.629]  </sequence>
[00:19:56.629]  
[00:19:56.652]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:19:56.652]  
[00:19:56.652]  <debugvars>
[00:19:56.652]    // Pre-defined
[00:19:56.652]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:19:56.652]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:19:56.652]    __dp=0x00000000
[00:19:56.652]    __ap=0x00000000
[00:19:56.652]    __traceout=0x00000000      (Trace Disabled)
[00:19:56.652]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:19:56.652]    __FlashAddr=0x00000000
[00:19:56.653]    __FlashLen=0x00000000
[00:19:56.653]    __FlashArg=0x00000000
[00:19:56.653]    __FlashOp=0x00000000
[00:19:56.653]    __Result=0x00000000
[00:19:56.653]  </debugvars>
[00:19:56.653]  
[00:19:56.653]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:19:56.653]    <block atomic="false" info="">
[00:19:56.653]      __var deviceID = 0;
[00:19:56.654]        // -> [deviceID <= 0x00000000]
[00:19:56.654]      __var version = 0;
[00:19:56.654]        // -> [version <= 0x00000000]
[00:19:56.654]      __var partNum = 0;
[00:19:56.654]        // -> [partNum <= 0x00000000]
[00:19:56.654]      __var manuf = 0;
[00:19:56.654]        // -> [manuf <= 0x00000000]
[00:19:56.654]      __var isMSPM0G1X0X_G3X0X = 0;
[00:19:56.654]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:19:56.654]      __var isProduction = 0;
[00:19:56.654]        // -> [isProduction <= 0x00000000]
[00:19:56.654]      __var continueId = 0;
[00:19:56.654]        // -> [continueId <= 0x00000000]
[00:19:56.654]      deviceID =   Read32(0x41C40004);
[00:19:56.663]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:19:56.664]        // -> [deviceID <= 0x2BB8802F]
[00:19:56.664]      version = deviceID >> 28;
[00:19:56.664]        // -> [version <= 0x00000002]
[00:19:56.664]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:19:56.664]        // -> [partNum <= 0x0000BB88]
[00:19:56.664]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:19:56.664]        // -> [manuf <= 0x00000017]
[00:19:56.664]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:19:56.664]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:19:56.664]      isProduction = (version > 0);
[00:19:56.665]        // -> [isProduction <= 0x00000001]
[00:19:56.665]    </block>
[00:19:56.665]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:19:56.665]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:19:56.665]        // =>  FALSE
[00:19:56.665]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:19:56.665]    </control>
[00:19:56.665]    <control if="continueId == 4" while="" timeout="0" info="">
[00:19:56.665]      // if-block "continueId == 4"
[00:19:56.665]        // =>  FALSE
[00:19:56.665]      // skip if-block "continueId == 4"
[00:19:56.665]    </control>
[00:19:56.666]    <control if="!isProduction" while="" timeout="0" info="">
[00:19:56.666]      // if-block "!isProduction"
[00:19:56.666]        // =>  FALSE
[00:19:56.666]      // skip if-block "!isProduction"
[00:19:56.666]    </control>
[00:19:56.666]  </sequence>
[00:19:56.666]  
[00:23:37.029]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:23:37.029]  
[00:23:37.036]  <debugvars>
[00:23:37.036]    // Pre-defined
[00:23:37.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:37.036]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:37.037]    __dp=0x00000000
[00:23:37.037]    __ap=0x00000000
[00:23:37.037]    __traceout=0x00000000      (Trace Disabled)
[00:23:37.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:37.037]    __FlashAddr=0x00000000
[00:23:37.037]    __FlashLen=0x00000000
[00:23:37.038]    __FlashArg=0x00000000
[00:23:37.038]    __FlashOp=0x00000000
[00:23:37.038]    __Result=0x00000000
[00:23:37.038]  </debugvars>
[00:23:37.038]  
[00:23:37.038]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:23:37.038]    <block atomic="false" info="">
[00:23:37.038]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:23:37.038]        // -> [isSWJ <= 0x00000001]
[00:23:37.038]      __var hasDormant = __protocol & 0x00020000;
[00:23:37.038]        // -> [hasDormant <= 0x00000000]
[00:23:37.039]      __var protType   = __protocol & 0x0000FFFF;
[00:23:37.039]        // -> [protType <= 0x00000002]
[00:23:37.039]    </block>
[00:23:37.039]    <control if="protType == 1" while="" timeout="0" info="">
[00:23:37.039]      // if-block "protType == 1"
[00:23:37.039]        // =>  FALSE
[00:23:37.039]      // skip if-block "protType == 1"
[00:23:37.039]    </control>
[00:23:37.039]    <control if="protType == 2" while="" timeout="0" info="">
[00:23:37.039]      // if-block "protType == 2"
[00:23:37.040]        // =>  TRUE
[00:23:37.040]      <control if="isSWJ" while="" timeout="0" info="">
[00:23:37.040]        // if-block "isSWJ"
[00:23:37.040]          // =>  TRUE
[00:23:37.040]        <control if="hasDormant" while="" timeout="0" info="">
[00:23:37.040]          // if-block "hasDormant"
[00:23:37.040]            // =>  FALSE
[00:23:37.040]          // skip if-block "hasDormant"
[00:23:37.040]        </control>
[00:23:37.041]        <control if="!hasDormant" while="" timeout="0" info="">
[00:23:37.041]          // if-block "!hasDormant"
[00:23:37.041]            // =>  TRUE
[00:23:37.042]          <block atomic="false" info="">
[00:23:37.042]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:23:37.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:37.043]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:23:37.045]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:23:37.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:23:37.046]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:37.046]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:23:37.047]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:23:37.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:23:37.050]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:37.050]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:23:37.052]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:23:37.052]          </block>
[00:23:37.052]          // end if-block "!hasDormant"
[00:23:37.053]        </control>
[00:23:37.053]        // end if-block "isSWJ"
[00:23:37.053]      </control>
[00:23:37.053]      <control if="!isSWJ" while="" timeout="0" info="">
[00:23:37.053]        // if-block "!isSWJ"
[00:23:37.053]          // =>  FALSE
[00:23:37.053]        // skip if-block "!isSWJ"
[00:23:37.053]      </control>
[00:23:37.054]      <block atomic="false" info="">
[00:23:37.054]        ReadDP(0x0);
[00:23:37.055]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:23:37.055]      </block>
[00:23:37.055]      // end if-block "protType == 2"
[00:23:37.055]    </control>
[00:23:37.055]  </sequence>
[00:23:37.055]  
[00:23:37.059]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:23:37.059]  
[00:23:37.059]  <debugvars>
[00:23:37.059]    // Pre-defined
[00:23:37.059]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:37.059]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:37.059]    __dp=0x00000000
[00:23:37.059]    __ap=0x00000000
[00:23:37.059]    __traceout=0x00000000      (Trace Disabled)
[00:23:37.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:37.059]    __FlashAddr=0x00000000
[00:23:37.059]    __FlashLen=0x00000000
[00:23:37.060]    __FlashArg=0x00000000
[00:23:37.060]    __FlashOp=0x00000000
[00:23:37.060]    __Result=0x00000000
[00:23:37.060]  </debugvars>
[00:23:37.060]  
[00:23:37.060]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:23:37.060]    <block atomic="false" info="">
[00:23:37.060]      __var SW_DP_ABORT       = 0x0;
[00:23:37.060]        // -> [SW_DP_ABORT <= 0x00000000]
[00:23:37.060]      __var DP_CTRL_STAT      = 0x4;
[00:23:37.061]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:23:37.061]      __var DP_SELECT         = 0x8;
[00:23:37.061]        // -> [DP_SELECT <= 0x00000008]
[00:23:37.061]      __var powered_down      = 0;
[00:23:37.061]        // -> [powered_down <= 0x00000000]
[00:23:37.061]      WriteDP(DP_SELECT, 0x00000000);
[00:23:37.066]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:23:37.066]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:23:37.068]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:23:37.068]        // -> [powered_down <= 0x00000001]
[00:23:37.068]    </block>
[00:23:37.068]    <control if="powered_down" while="" timeout="0" info="">
[00:23:37.068]      // if-block "powered_down"
[00:23:37.068]        // =>  TRUE
[00:23:37.068]      <block atomic="false" info="">
[00:23:37.068]        Message(0, "Debug/System power-up request sent");
[00:23:37.071]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:23:37.074]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:23:37.074]      </block>
[00:23:37.074]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:23:37.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:23:37.076]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:23:37.076]        // while-condition  =>  FALSE
[00:23:37.076]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:23:37.077]      </control>
[00:23:37.077]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:23:37.077]        // if-block "(__protocol & 0xFFFF) == 1"
[00:23:37.077]          // =>  FALSE
[00:23:37.077]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:23:37.077]      </control>
[00:23:37.077]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:23:37.077]        // if-block "(__protocol & 0xFFFF) == 2"
[00:23:37.077]          // =>  TRUE
[00:23:37.078]        <block atomic="false" info="">
[00:23:37.078]          Message(0, "executing SWD power up");
[00:23:37.080]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:23:37.082]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:23:37.082]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:23:37.084]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:23:37.084]        </block>
[00:23:37.084]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:23:37.084]      </control>
[00:23:37.085]      // end if-block "powered_down"
[00:23:37.085]    </control>
[00:23:37.085]    <block atomic="false" info="">
[00:23:37.085]      __var DEBUG_PORT_VAL    = 0;
[00:23:37.085]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:23:37.085]      __var ACCESS_POINT_VAL  = 0;
[00:23:37.085]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:23:37.085]      __ap = 1; 
[00:23:37.085]        // -> [__ap <= 0x00000001]
[00:23:37.085]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:23:37.089]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:23:37.089]      __ap = 4;
[00:23:37.089]        // -> [__ap <= 0x00000004]
[00:23:37.089]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:37.094]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:23:37.094]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:23:37.095]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:37.097]    </block>
[00:23:37.097]    <block atomic="false" info="">
[00:23:37.097]      __var nReset = 0x80;
[00:23:37.097]        // -> [nReset <= 0x00000080]
[00:23:37.098]      __var canReadPins = 0;
[00:23:37.098]        // -> [canReadPins <= 0x00000000]
[00:23:37.098]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:23:37.100]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:23:37.100]        // -> [canReadPins <= 0x00000001]
[00:23:37.100]    </block>
[00:23:37.100]    <control if="" while="1" timeout="200" info="">
[00:23:37.100]      // while "1"  (timeout="200")
[00:23:37.100]      // while-condition  =>  TRUE
[00:23:37.100]      // while "1"  (timeout="200")
[00:23:37.100]      // while-condition  =>  TRUE
[00:23:37.101]      // while "1"  (timeout="200")
[00:23:37.101]      // while-condition  =>  TRUE
[00:23:37.101]      // while "1"  (timeout="200")
[00:23:37.101]      // while-condition  =>  TRUE
[00:23:37.101]      // while "1"  (timeout="200")
[00:23:37.101]      // while-condition  =>  TRUE
[00:23:37.101]      // while "1"  (timeout="200")
[00:23:37.102]      // while-condition  =>  TRUE
[00:23:37.102]      // while "1"  (timeout="200")
[00:23:37.102]      // while-condition  =>  TRUE
[00:23:37.102]      // while "1"  (timeout="200")
[00:23:37.102]      // while-condition  =>  TRUE
[00:23:37.102]      // while "1"  (timeout="200")
[00:23:37.102]      // while-condition  =>  TRUE
[00:23:37.103]      // while "1"  (timeout="200")
[00:23:37.103]      // while-condition  =>  TRUE
[00:23:37.103]      // while "1"  (timeout="200")
[00:23:37.103]      // while-condition  =>  TRUE
[00:23:37.103]      // while "1"  (timeout="200")
[00:23:37.103]      // while-condition  =>  TRUE
[00:23:37.103]      // while "1"  (timeout="200")
[00:23:37.103]      // while-condition  =>  TRUE
[00:23:37.103]      // while "1"  (timeout="200")
[00:23:37.104]      // while-condition  =>  TRUE
[00:23:37.104]      // while "1"  (timeout="200")
[00:23:37.104]      // while-condition  =>  TRUE
[00:23:37.104]      // while "1"  (timeout="200")
[00:23:37.104]      // while-condition  =>  TRUE
[00:23:37.104]      // while "1"  (timeout="200")
[00:23:37.104]      // while-condition  =>  TRUE
[00:23:37.105]      // while "1"  (timeout="200")
[00:23:37.105]      // while-condition  =>  TRUE
[00:23:37.105]      // while "1"  (timeout="200")
[00:23:37.105]      // while-condition  =>  TRUE
[00:23:37.105]      // while "1"  (timeout="200")
[00:23:37.105]      // while-condition  =>  TRUE
[00:23:37.105]      // while "1"  (timeout="200")
[00:23:37.105]      // while-condition  =>  TRUE
[00:23:37.105]      // while "1"  (timeout="200")
[00:23:37.105]      // while-condition  =>  TRUE
[00:23:37.106]      // while "1"  (timeout="200")
[00:23:37.106]      // while-condition  =>  TRUE
[00:23:37.106]      // while "1"  (timeout="200")
[00:23:37.106]      // while-condition  =>  TRUE
[00:23:37.106]      // while "1"  (timeout="200")
[00:23:37.106]      // while-condition  =>  TRUE
[00:23:37.106]      // while "1"  (timeout="200")
[00:23:37.106]      // while-condition  =>  TRUE
[00:23:37.106]      // while "1"  (timeout="200")
[00:23:37.106]      // while-condition  =>  TRUE
[00:23:37.107]      // while "1"  (timeout="200")
[00:23:37.107]      // while-condition  =>  TRUE
[00:23:37.107]      // while "1"  (timeout="200")
[00:23:37.107]      // while-condition  =>  TRUE
[00:23:37.107]      // while "1"  (timeout="200")
[00:23:37.107]      // while-condition  =>  TRUE
[00:23:37.107]      // while "1"  (timeout="200")
[00:23:37.108]      // while-condition  =>  TRUE
[00:23:37.108]      // while "1"  (timeout="200")
[00:23:37.108]      // while-condition  =>  TRUE
[00:23:37.108]      // while "1"  (timeout="200")
[00:23:37.108]      // while-condition  =>  TRUE
[00:23:37.108]      // while "1"  (timeout="200")
[00:23:37.108]      // while-condition  =>  TRUE
[00:23:37.108]      // while "1"  (timeout="200")
[00:23:37.109]      // while-condition  =>  TRUE
[00:23:37.109]      // while "1"  (timeout="200")
[00:23:37.109]      // while-condition  =>  TRUE
[00:23:37.109]      // while "1"  (timeout="200")
[00:23:37.109]      // while-condition  =>  TRUE
[00:23:37.109]      // while "1"  (timeout="200")
[00:23:37.109]      // while-condition  =>  TRUE
[00:23:37.109]      // while "1"  (timeout="200")
[00:23:37.109]      // while-condition  =>  TRUE
[00:23:37.109]      // while "1"  (timeout="200")
[00:23:37.110]      // while-condition  =>  TRUE
[00:23:37.110]      // while "1"  (timeout="200")
[00:23:37.110]      // while-condition  =>  TRUE
[00:23:37.110]      // while "1"  (timeout="200")
[00:23:37.110]      // while-condition  =>  TRUE
[00:23:37.110]      // while "1"  (timeout="200")
[00:23:37.110]      // while-condition  =>  TRUE
[00:23:37.110]      // while "1"  (timeout="200")
[00:23:37.110]      // while-condition  =>  TRUE
[00:23:37.110]      // while "1"  (timeout="200")
[00:23:37.111]      // while-condition  =>  TRUE
[00:23:37.111]      // while "1"  (timeout="200")
[00:23:37.111]      // while  =>  TIMEOUT
[00:23:37.111]      // end while "1"
[00:23:37.111]    </control>
[00:23:37.111]    <control if="canReadPins" while="" timeout="0" info="">
[00:23:37.111]      // if-block "canReadPins"
[00:23:37.111]        // =>  TRUE
[00:23:37.111]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:23:37.111]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:23:37.113]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:23:37.113]        // while-condition  =>  FALSE
[00:23:37.113]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:23:37.113]      </control>
[00:23:37.114]      // end if-block "canReadPins"
[00:23:37.114]    </control>
[00:23:37.114]    <control if="!canReadPins" while="" timeout="0" info="">
[00:23:37.114]      // if-block "!canReadPins"
[00:23:37.114]        // =>  FALSE
[00:23:37.114]      // skip if-block "!canReadPins"
[00:23:37.114]    </control>
[00:23:37.114]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:23:37.114]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:37.114]        // =>  TRUE
[00:23:37.114]      <block atomic="false" info="">
[00:23:37.114]        WriteAP(0x00, 0x190008);
[00:23:37.116]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:37.116]        WriteAP(0xF0, 0x01);
[00:23:37.122]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:37.123]      </block>
[00:23:37.123]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:37.123]    </control>
[00:23:37.123]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:23:37.123]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:37.123]        // =>  FALSE
[00:23:37.123]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:37.124]    </control>
[00:23:37.124]    <block atomic="false" info="">
[00:23:37.124]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:37.128]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:23:37.128]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:23:37.128]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:37.131]      __ap = 0; //lets make sure we reset the access point selection
[00:23:37.131]        // -> [__ap <= 0x00000000]
[00:23:37.131]    </block>
[00:23:37.131]  </sequence>
[00:23:37.131]  
[00:23:37.159]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:23:37.159]  
[00:23:37.160]  <debugvars>
[00:23:37.160]    // Pre-defined
[00:23:37.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:37.160]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:37.160]    __dp=0x00000000
[00:23:37.160]    __ap=0x00000000
[00:23:37.160]    __traceout=0x00000000      (Trace Disabled)
[00:23:37.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:37.160]    __FlashAddr=0x00000000
[00:23:37.160]    __FlashLen=0x00000000
[00:23:37.160]    __FlashArg=0x00000000
[00:23:37.160]    __FlashOp=0x00000000
[00:23:37.160]    __Result=0x00000000
[00:23:37.161]  </debugvars>
[00:23:37.161]  
[00:23:37.161]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:23:37.161]    <block atomic="false" info="">
[00:23:37.161]      __var deviceID = 0;
[00:23:37.161]        // -> [deviceID <= 0x00000000]
[00:23:37.161]      __var version = 0;
[00:23:37.161]        // -> [version <= 0x00000000]
[00:23:37.161]      __var partNum = 0;
[00:23:37.161]        // -> [partNum <= 0x00000000]
[00:23:37.162]      __var manuf = 0;
[00:23:37.162]        // -> [manuf <= 0x00000000]
[00:23:37.162]      __var isMSPM0G1X0X_G3X0X = 0;
[00:23:37.162]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:23:37.162]      __var isProduction = 0;
[00:23:37.162]        // -> [isProduction <= 0x00000000]
[00:23:37.162]      __var continueId = 0;
[00:23:37.162]        // -> [continueId <= 0x00000000]
[00:23:37.162]      deviceID =   Read32(0x41C40004);
[00:23:37.170]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:23:37.170]        // -> [deviceID <= 0x2BB8802F]
[00:23:37.170]      version = deviceID >> 28;
[00:23:37.170]        // -> [version <= 0x00000002]
[00:23:37.170]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:23:37.170]        // -> [partNum <= 0x0000BB88]
[00:23:37.170]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:23:37.170]        // -> [manuf <= 0x00000017]
[00:23:37.170]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:23:37.170]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:23:37.170]      isProduction = (version > 0);
[00:23:37.171]        // -> [isProduction <= 0x00000001]
[00:23:37.171]    </block>
[00:23:37.171]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:23:37.171]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:23:37.171]        // =>  FALSE
[00:23:37.171]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:23:37.171]    </control>
[00:23:37.171]    <control if="continueId == 4" while="" timeout="0" info="">
[00:23:37.171]      // if-block "continueId == 4"
[00:23:37.172]        // =>  FALSE
[00:23:37.172]      // skip if-block "continueId == 4"
[00:23:37.172]    </control>
[00:23:37.172]    <control if="!isProduction" while="" timeout="0" info="">
[00:23:37.172]      // if-block "!isProduction"
[00:23:37.172]        // =>  FALSE
[00:23:37.172]      // skip if-block "!isProduction"
[00:23:37.172]    </control>
[00:23:37.173]  </sequence>
[00:23:37.173]  
[00:30:29.453]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:30:29.453]  
[00:30:29.463]  <debugvars>
[00:30:29.463]    // Pre-defined
[00:30:29.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:29.463]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:30:29.463]    __dp=0x00000000
[00:30:29.463]    __ap=0x00000000
[00:30:29.463]    __traceout=0x00000000      (Trace Disabled)
[00:30:29.463]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:29.463]    __FlashAddr=0x00000000
[00:30:29.463]    __FlashLen=0x00000000
[00:30:29.463]    __FlashArg=0x00000000
[00:30:29.464]    __FlashOp=0x00000000
[00:30:29.464]    __Result=0x00000000
[00:30:29.464]  </debugvars>
[00:30:29.464]  
[00:30:29.464]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:30:29.464]    <block atomic="false" info="">
[00:30:29.464]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:30:29.464]        // -> [isSWJ <= 0x00000001]
[00:30:29.464]      __var hasDormant = __protocol & 0x00020000;
[00:30:29.465]        // -> [hasDormant <= 0x00000000]
[00:30:29.465]      __var protType   = __protocol & 0x0000FFFF;
[00:30:29.465]        // -> [protType <= 0x00000002]
[00:30:29.465]    </block>
[00:30:29.465]    <control if="protType == 1" while="" timeout="0" info="">
[00:30:29.465]      // if-block "protType == 1"
[00:30:29.465]        // =>  FALSE
[00:30:29.465]      // skip if-block "protType == 1"
[00:30:29.465]    </control>
[00:30:29.465]    <control if="protType == 2" while="" timeout="0" info="">
[00:30:29.465]      // if-block "protType == 2"
[00:30:29.467]        // =>  TRUE
[00:30:29.467]      <control if="isSWJ" while="" timeout="0" info="">
[00:30:29.467]        // if-block "isSWJ"
[00:30:29.467]          // =>  TRUE
[00:30:29.467]        <control if="hasDormant" while="" timeout="0" info="">
[00:30:29.467]          // if-block "hasDormant"
[00:30:29.467]            // =>  FALSE
[00:30:29.467]          // skip if-block "hasDormant"
[00:30:29.467]        </control>
[00:30:29.468]        <control if="!hasDormant" while="" timeout="0" info="">
[00:30:29.468]          // if-block "!hasDormant"
[00:30:29.468]            // =>  TRUE
[00:30:29.468]          <block atomic="false" info="">
[00:30:29.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:30:29.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:29.469]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:30:29.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:30:29.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:30:29.473]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:29.473]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:30:29.474]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:30:29.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:30:29.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:29.476]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:30:29.478]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:30:29.478]          </block>
[00:30:29.478]          // end if-block "!hasDormant"
[00:30:29.478]        </control>
[00:30:29.478]        // end if-block "isSWJ"
[00:30:29.478]      </control>
[00:30:29.478]      <control if="!isSWJ" while="" timeout="0" info="">
[00:30:29.478]        // if-block "!isSWJ"
[00:30:29.478]          // =>  FALSE
[00:30:29.478]        // skip if-block "!isSWJ"
[00:30:29.478]      </control>
[00:30:29.479]      <block atomic="false" info="">
[00:30:29.479]        ReadDP(0x0);
[00:30:29.480]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:30:29.480]      </block>
[00:30:29.480]      // end if-block "protType == 2"
[00:30:29.480]    </control>
[00:30:29.480]  </sequence>
[00:30:29.480]  
[00:30:29.483]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:30:29.483]  
[00:30:29.483]  <debugvars>
[00:30:29.483]    // Pre-defined
[00:30:29.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:29.483]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:30:29.483]    __dp=0x00000000
[00:30:29.483]    __ap=0x00000000
[00:30:29.483]    __traceout=0x00000000      (Trace Disabled)
[00:30:29.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:29.484]    __FlashAddr=0x00000000
[00:30:29.484]    __FlashLen=0x00000000
[00:30:29.484]    __FlashArg=0x00000000
[00:30:29.484]    __FlashOp=0x00000000
[00:30:29.484]    __Result=0x00000000
[00:30:29.484]  </debugvars>
[00:30:29.484]  
[00:30:29.484]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:30:29.484]    <block atomic="false" info="">
[00:30:29.484]      __var SW_DP_ABORT       = 0x0;
[00:30:29.485]        // -> [SW_DP_ABORT <= 0x00000000]
[00:30:29.485]      __var DP_CTRL_STAT      = 0x4;
[00:30:29.485]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:30:29.485]      __var DP_SELECT         = 0x8;
[00:30:29.485]        // -> [DP_SELECT <= 0x00000008]
[00:30:29.485]      __var powered_down      = 0;
[00:30:29.485]        // -> [powered_down <= 0x00000000]
[00:30:29.485]      WriteDP(DP_SELECT, 0x00000000);
[00:30:29.487]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:30:29.487]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:30:29.489]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:30:29.489]        // -> [powered_down <= 0x00000001]
[00:30:29.489]    </block>
[00:30:29.489]    <control if="powered_down" while="" timeout="0" info="">
[00:30:29.489]      // if-block "powered_down"
[00:30:29.489]        // =>  TRUE
[00:30:29.489]      <block atomic="false" info="">
[00:30:29.489]        Message(0, "Debug/System power-up request sent");
[00:30:29.491]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:30:29.493]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:30:29.493]      </block>
[00:30:29.493]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:30:29.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:30:29.499]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:30:29.499]        // while-condition  =>  FALSE
[00:30:29.499]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:30:29.499]      </control>
[00:30:29.499]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:30:29.499]        // if-block "(__protocol & 0xFFFF) == 1"
[00:30:29.499]          // =>  FALSE
[00:30:29.499]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:30:29.500]      </control>
[00:30:29.500]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:30:29.500]        // if-block "(__protocol & 0xFFFF) == 2"
[00:30:29.500]          // =>  TRUE
[00:30:29.500]        <block atomic="false" info="">
[00:30:29.501]          Message(0, "executing SWD power up");
[00:30:29.503]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:30:29.504]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:30:29.504]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:30:29.506]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:30:29.506]        </block>
[00:30:29.506]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:30:29.507]      </control>
[00:30:29.507]      // end if-block "powered_down"
[00:30:29.507]    </control>
[00:30:29.507]    <block atomic="false" info="">
[00:30:29.507]      __var DEBUG_PORT_VAL    = 0;
[00:30:29.507]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:30:29.507]      __var ACCESS_POINT_VAL  = 0;
[00:30:29.508]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:30:29.508]      __ap = 1; 
[00:30:29.508]        // -> [__ap <= 0x00000001]
[00:30:29.508]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:30:29.511]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:30:29.511]      __ap = 4;
[00:30:29.511]        // -> [__ap <= 0x00000004]
[00:30:29.511]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:30:29.515]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:30:29.515]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:30:29.515]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:30:29.517]    </block>
[00:30:29.517]    <block atomic="false" info="">
[00:30:29.517]      __var nReset = 0x80;
[00:30:29.518]        // -> [nReset <= 0x00000080]
[00:30:29.518]      __var canReadPins = 0;
[00:30:29.518]        // -> [canReadPins <= 0x00000000]
[00:30:29.518]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:30:29.519]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:30:29.520]        // -> [canReadPins <= 0x00000001]
[00:30:29.520]    </block>
[00:30:29.520]    <control if="" while="1" timeout="200" info="">
[00:30:29.520]      // while "1"  (timeout="200")
[00:30:29.520]      // while-condition  =>  TRUE
[00:30:29.520]      // while "1"  (timeout="200")
[00:30:29.520]      // while-condition  =>  TRUE
[00:30:29.520]      // while "1"  (timeout="200")
[00:30:29.520]      // while-condition  =>  TRUE
[00:30:29.520]      // while "1"  (timeout="200")
[00:30:29.521]      // while-condition  =>  TRUE
[00:30:29.521]      // while "1"  (timeout="200")
[00:30:29.521]      // while-condition  =>  TRUE
[00:30:29.521]      // while "1"  (timeout="200")
[00:30:29.521]      // while-condition  =>  TRUE
[00:30:29.521]      // while "1"  (timeout="200")
[00:30:29.521]      // while-condition  =>  TRUE
[00:30:29.521]      // while "1"  (timeout="200")
[00:30:29.521]      // while-condition  =>  TRUE
[00:30:29.521]      // while "1"  (timeout="200")
[00:30:29.522]      // while-condition  =>  TRUE
[00:30:29.522]      // while "1"  (timeout="200")
[00:30:29.522]      // while-condition  =>  TRUE
[00:30:29.522]      // while "1"  (timeout="200")
[00:30:29.522]      // while-condition  =>  TRUE
[00:30:29.522]      // while "1"  (timeout="200")
[00:30:29.522]      // while-condition  =>  TRUE
[00:30:29.522]      // while "1"  (timeout="200")
[00:30:29.522]      // while-condition  =>  TRUE
[00:30:29.522]      // while "1"  (timeout="200")
[00:30:29.522]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.523]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.523]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.523]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.523]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.523]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.523]      // while-condition  =>  TRUE
[00:30:29.523]      // while "1"  (timeout="200")
[00:30:29.524]      // while-condition  =>  TRUE
[00:30:29.524]      // while "1"  (timeout="200")
[00:30:29.524]      // while-condition  =>  TRUE
[00:30:29.524]      // while "1"  (timeout="200")
[00:30:29.524]      // while-condition  =>  TRUE
[00:30:29.524]      // while "1"  (timeout="200")
[00:30:29.524]      // while-condition  =>  TRUE
[00:30:29.524]      // while "1"  (timeout="200")
[00:30:29.524]      // while-condition  =>  TRUE
[00:30:29.524]      // while "1"  (timeout="200")
[00:30:29.524]      // while-condition  =>  TRUE
[00:30:29.525]      // while "1"  (timeout="200")
[00:30:29.525]      // while-condition  =>  TRUE
[00:30:29.525]      // while "1"  (timeout="200")
[00:30:29.525]      // while-condition  =>  TRUE
[00:30:29.525]      // while "1"  (timeout="200")
[00:30:29.525]      // while-condition  =>  TRUE
[00:30:29.525]      // while "1"  (timeout="200")
[00:30:29.525]      // while-condition  =>  TRUE
[00:30:29.525]      // while "1"  (timeout="200")
[00:30:29.525]      // while-condition  =>  TRUE
[00:30:29.525]      // while "1"  (timeout="200")
[00:30:29.525]      // while-condition  =>  TRUE
[00:30:29.526]      // while "1"  (timeout="200")
[00:30:29.526]      // while-condition  =>  TRUE
[00:30:29.526]      // while "1"  (timeout="200")
[00:30:29.526]      // while-condition  =>  TRUE
[00:30:29.526]      // while "1"  (timeout="200")
[00:30:29.526]      // while-condition  =>  TRUE
[00:30:29.527]      // while "1"  (timeout="200")
[00:30:29.527]      // while-condition  =>  TRUE
[00:30:29.527]      // while "1"  (timeout="200")
[00:30:29.527]      // while-condition  =>  TRUE
[00:30:29.527]      // while "1"  (timeout="200")
[00:30:29.527]      // while-condition  =>  TRUE
[00:30:29.528]      // while "1"  (timeout="200")
[00:30:29.528]      // while-condition  =>  TRUE
[00:30:29.528]      // while "1"  (timeout="200")
[00:30:29.528]      // while-condition  =>  TRUE
[00:30:29.528]      // while "1"  (timeout="200")
[00:30:29.528]      // while-condition  =>  TRUE
[00:30:29.528]      // while "1"  (timeout="200")
[00:30:29.528]      // while-condition  =>  TRUE
[00:30:29.528]      // while "1"  (timeout="200")
[00:30:29.528]      // while-condition  =>  TRUE
[00:30:29.528]      // while "1"  (timeout="200")
[00:30:29.528]      // while-condition  =>  TRUE
[00:30:29.529]      // while "1"  (timeout="200")
[00:30:29.529]      // while-condition  =>  TRUE
[00:30:29.529]      // while "1"  (timeout="200")
[00:30:29.529]      // while-condition  =>  TRUE
[00:30:29.529]      // while "1"  (timeout="200")
[00:30:29.529]      // while-condition  =>  TRUE
[00:30:29.529]      // while "1"  (timeout="200")
[00:30:29.529]      // while-condition  =>  TRUE
[00:30:29.529]      // while "1"  (timeout="200")
[00:30:29.529]      // while-condition  =>  TRUE
[00:30:29.529]      // while "1"  (timeout="200")
[00:30:29.530]      // while-condition  =>  TRUE
[00:30:29.530]      // while "1"  (timeout="200")
[00:30:29.530]      // while-condition  =>  TRUE
[00:30:29.530]      // while "1"  (timeout="200")
[00:30:29.530]      // while-condition  =>  TRUE
[00:30:29.530]      // while "1"  (timeout="200")
[00:30:29.530]      // while-condition  =>  TRUE
[00:30:29.530]      // while "1"  (timeout="200")
[00:30:29.530]      // while-condition  =>  TRUE
[00:30:29.530]      // while "1"  (timeout="200")
[00:30:29.530]      // while-condition  =>  TRUE
[00:30:29.531]      // while "1"  (timeout="200")
[00:30:29.531]      // while-condition  =>  TRUE
[00:30:29.531]      // while "1"  (timeout="200")
[00:30:29.531]      // while-condition  =>  TRUE
[00:30:29.531]      // while "1"  (timeout="200")
[00:30:29.531]      // while-condition  =>  TRUE
[00:30:29.531]      // while "1"  (timeout="200")
[00:30:29.531]      // while-condition  =>  TRUE
[00:30:29.531]      // while "1"  (timeout="200")
[00:30:29.531]      // while-condition  =>  TRUE
[00:30:29.531]      // while "1"  (timeout="200")
[00:30:29.531]      // while-condition  =>  TRUE
[00:30:29.533]      // while "1"  (timeout="200")
[00:30:29.533]      // while  =>  TIMEOUT
[00:30:29.533]      // end while "1"
[00:30:29.533]    </control>
[00:30:29.533]    <control if="canReadPins" while="" timeout="0" info="">
[00:30:29.533]      // if-block "canReadPins"
[00:30:29.533]        // =>  TRUE
[00:30:29.533]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:30:29.534]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:30:29.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:30:29.537]        // while-condition  =>  FALSE
[00:30:29.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:30:29.538]      </control>
[00:30:29.538]      // end if-block "canReadPins"
[00:30:29.538]    </control>
[00:30:29.538]    <control if="!canReadPins" while="" timeout="0" info="">
[00:30:29.538]      // if-block "!canReadPins"
[00:30:29.538]        // =>  FALSE
[00:30:29.538]      // skip if-block "!canReadPins"
[00:30:29.538]    </control>
[00:30:29.538]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:30:29.538]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:30:29.538]        // =>  TRUE
[00:30:29.539]      <block atomic="false" info="">
[00:30:29.539]        WriteAP(0x00, 0x190008);
[00:30:29.541]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:30:29.541]        WriteAP(0xF0, 0x01);
[00:30:29.544]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:30:29.544]      </block>
[00:30:29.545]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:30:29.545]    </control>
[00:30:29.545]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:30:29.545]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:30:29.545]        // =>  FALSE
[00:30:29.545]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:30:29.545]    </control>
[00:30:29.545]    <block atomic="false" info="">
[00:30:29.547]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:30:29.549]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:30:29.549]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:30:29.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:30:29.552]      __ap = 0; //lets make sure we reset the access point selection
[00:30:29.552]        // -> [__ap <= 0x00000000]
[00:30:29.552]    </block>
[00:30:29.552]  </sequence>
[00:30:29.553]  
[00:30:29.573]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:30:29.573]  
[00:30:29.573]  <debugvars>
[00:30:29.573]    // Pre-defined
[00:30:29.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:29.574]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:30:29.574]    __dp=0x00000000
[00:30:29.574]    __ap=0x00000000
[00:30:29.574]    __traceout=0x00000000      (Trace Disabled)
[00:30:29.574]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:29.574]    __FlashAddr=0x00000000
[00:30:29.574]    __FlashLen=0x00000000
[00:30:29.574]    __FlashArg=0x00000000
[00:30:29.574]    __FlashOp=0x00000000
[00:30:29.574]    __Result=0x00000000
[00:30:29.574]  </debugvars>
[00:30:29.574]  
[00:30:29.574]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:30:29.575]    <block atomic="false" info="">
[00:30:29.575]      __var deviceID = 0;
[00:30:29.575]        // -> [deviceID <= 0x00000000]
[00:30:29.575]      __var version = 0;
[00:30:29.575]        // -> [version <= 0x00000000]
[00:30:29.575]      __var partNum = 0;
[00:30:29.575]        // -> [partNum <= 0x00000000]
[00:30:29.576]      __var manuf = 0;
[00:30:29.576]        // -> [manuf <= 0x00000000]
[00:30:29.576]      __var isMSPM0G1X0X_G3X0X = 0;
[00:30:29.576]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:30:29.576]      __var isProduction = 0;
[00:30:29.576]        // -> [isProduction <= 0x00000000]
[00:30:29.576]      __var continueId = 0;
[00:30:29.576]        // -> [continueId <= 0x00000000]
[00:30:29.576]      deviceID =   Read32(0x41C40004);
[00:30:29.581]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:30:29.581]        // -> [deviceID <= 0x2BB8802F]
[00:30:29.581]      version = deviceID >> 28;
[00:30:29.581]        // -> [version <= 0x00000002]
[00:30:29.581]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:30:29.581]        // -> [partNum <= 0x0000BB88]
[00:30:29.581]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:30:29.581]        // -> [manuf <= 0x00000017]
[00:30:29.581]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:30:29.581]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:30:29.581]      isProduction = (version > 0);
[00:30:29.581]        // -> [isProduction <= 0x00000001]
[00:30:29.582]    </block>
[00:30:29.582]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:30:29.582]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:30:29.582]        // =>  FALSE
[00:30:29.582]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:30:29.582]    </control>
[00:30:29.582]    <control if="continueId == 4" while="" timeout="0" info="">
[00:30:29.582]      // if-block "continueId == 4"
[00:30:29.582]        // =>  FALSE
[00:30:29.582]      // skip if-block "continueId == 4"
[00:30:29.582]    </control>
[00:30:29.583]    <control if="!isProduction" while="" timeout="0" info="">
[00:30:29.583]      // if-block "!isProduction"
[00:30:29.583]        // =>  FALSE
[00:30:29.583]      // skip if-block "!isProduction"
[00:30:29.583]    </control>
[00:30:29.583]  </sequence>
[00:30:29.583]  
[00:30:35.322]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:30:35.322]  
[00:30:35.331]  <debugvars>
[00:30:35.331]    // Pre-defined
[00:30:35.331]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:35.331]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:30:35.331]    __dp=0x00000000
[00:30:35.331]    __ap=0x00000000
[00:30:35.331]    __traceout=0x00000000      (Trace Disabled)
[00:30:35.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:35.332]    __FlashAddr=0x00000000
[00:30:35.332]    __FlashLen=0x00000000
[00:30:35.332]    __FlashArg=0x00000000
[00:30:35.332]    __FlashOp=0x00000000
[00:30:35.332]    __Result=0x00000000
[00:30:35.332]  </debugvars>
[00:30:35.332]  
[00:30:35.332]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:30:35.332]    <block atomic="false" info="">
[00:30:35.333]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:30:35.333]        // -> [isSWJ <= 0x00000001]
[00:30:35.333]      __var hasDormant = __protocol & 0x00020000;
[00:30:35.333]        // -> [hasDormant <= 0x00000000]
[00:30:35.334]      __var protType   = __protocol & 0x0000FFFF;
[00:30:35.334]        // -> [protType <= 0x00000002]
[00:30:35.334]    </block>
[00:30:35.334]    <control if="protType == 1" while="" timeout="0" info="">
[00:30:35.334]      // if-block "protType == 1"
[00:30:35.334]        // =>  FALSE
[00:30:35.334]      // skip if-block "protType == 1"
[00:30:35.334]    </control>
[00:30:35.334]    <control if="protType == 2" while="" timeout="0" info="">
[00:30:35.334]      // if-block "protType == 2"
[00:30:35.334]        // =>  TRUE
[00:30:35.334]      <control if="isSWJ" while="" timeout="0" info="">
[00:30:35.335]        // if-block "isSWJ"
[00:30:35.335]          // =>  TRUE
[00:30:35.335]        <control if="hasDormant" while="" timeout="0" info="">
[00:30:35.335]          // if-block "hasDormant"
[00:30:35.335]            // =>  FALSE
[00:30:35.336]          // skip if-block "hasDormant"
[00:30:35.336]        </control>
[00:30:35.336]        <control if="!hasDormant" while="" timeout="0" info="">
[00:30:35.336]          // if-block "!hasDormant"
[00:30:35.336]            // =>  TRUE
[00:30:35.336]          <block atomic="false" info="">
[00:30:35.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:30:35.337]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:35.337]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:30:35.340]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:30:35.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:30:35.342]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:35.343]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:30:35.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:30:35.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:30:35.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:30:35.348]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:30:35.349]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:30:35.349]          </block>
[00:30:35.350]          // end if-block "!hasDormant"
[00:30:35.350]        </control>
[00:30:35.350]        // end if-block "isSWJ"
[00:30:35.350]      </control>
[00:30:35.350]      <control if="!isSWJ" while="" timeout="0" info="">
[00:30:35.350]        // if-block "!isSWJ"
[00:30:35.351]          // =>  FALSE
[00:30:35.351]        // skip if-block "!isSWJ"
[00:30:35.351]      </control>
[00:30:35.351]      <block atomic="false" info="">
[00:30:35.351]        ReadDP(0x0);
[00:30:35.352]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:30:35.352]      </block>
[00:30:35.352]      // end if-block "protType == 2"
[00:30:35.352]    </control>
[00:30:35.353]  </sequence>
[00:30:35.353]  
[00:30:35.356]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:30:35.356]  
[00:30:35.356]  <debugvars>
[00:30:35.356]    // Pre-defined
[00:30:35.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:35.356]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:30:35.356]    __dp=0x00000000
[00:30:35.357]    __ap=0x00000000
[00:30:35.357]    __traceout=0x00000000      (Trace Disabled)
[00:30:35.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:35.357]    __FlashAddr=0x00000000
[00:30:35.357]    __FlashLen=0x00000000
[00:30:35.357]    __FlashArg=0x00000000
[00:30:35.357]    __FlashOp=0x00000000
[00:30:35.357]    __Result=0x00000000
[00:30:35.357]  </debugvars>
[00:30:35.357]  
[00:30:35.358]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:30:35.358]    <block atomic="false" info="">
[00:30:35.358]      __var SW_DP_ABORT       = 0x0;
[00:30:35.358]        // -> [SW_DP_ABORT <= 0x00000000]
[00:30:35.358]      __var DP_CTRL_STAT      = 0x4;
[00:30:35.358]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:30:35.358]      __var DP_SELECT         = 0x8;
[00:30:35.358]        // -> [DP_SELECT <= 0x00000008]
[00:30:35.358]      __var powered_down      = 0;
[00:30:35.358]        // -> [powered_down <= 0x00000000]
[00:30:35.359]      WriteDP(DP_SELECT, 0x00000000);
[00:30:35.360]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:30:35.360]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:30:35.363]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:30:35.364]        // -> [powered_down <= 0x00000001]
[00:30:35.364]    </block>
[00:30:35.364]    <control if="powered_down" while="" timeout="0" info="">
[00:30:35.364]      // if-block "powered_down"
[00:30:35.364]        // =>  TRUE
[00:30:35.365]      <block atomic="false" info="">
[00:30:35.365]        Message(0, "Debug/System power-up request sent");
[00:30:35.366]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:30:35.368]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:30:35.368]      </block>
[00:30:35.369]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:30:35.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:30:35.373]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:30:35.373]        // while-condition  =>  FALSE
[00:30:35.373]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:30:35.373]      </control>
[00:30:35.373]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:30:35.373]        // if-block "(__protocol & 0xFFFF) == 1"
[00:30:35.374]          // =>  FALSE
[00:30:35.374]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:30:35.374]      </control>
[00:30:35.374]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:30:35.374]        // if-block "(__protocol & 0xFFFF) == 2"
[00:30:35.374]          // =>  TRUE
[00:30:35.374]        <block atomic="false" info="">
[00:30:35.375]          Message(0, "executing SWD power up");
[00:30:35.377]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:30:35.384]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:30:35.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:30:35.386]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:30:35.386]        </block>
[00:30:35.386]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:30:35.386]      </control>
[00:30:35.386]      // end if-block "powered_down"
[00:30:35.386]    </control>
[00:30:35.386]    <block atomic="false" info="">
[00:30:35.386]      __var DEBUG_PORT_VAL    = 0;
[00:30:35.386]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:30:35.386]      __var ACCESS_POINT_VAL  = 0;
[00:30:35.387]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:30:35.387]      __ap = 1; 
[00:30:35.387]        // -> [__ap <= 0x00000001]
[00:30:35.387]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:30:35.390]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:30:35.391]      __ap = 4;
[00:30:35.391]        // -> [__ap <= 0x00000004]
[00:30:35.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:30:35.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:30:35.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:30:35.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:30:35.397]    </block>
[00:30:35.397]    <block atomic="false" info="">
[00:30:35.397]      __var nReset = 0x80;
[00:30:35.397]        // -> [nReset <= 0x00000080]
[00:30:35.397]      __var canReadPins = 0;
[00:30:35.397]        // -> [canReadPins <= 0x00000000]
[00:30:35.398]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:30:35.399]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:30:35.399]        // -> [canReadPins <= 0x00000001]
[00:30:35.399]    </block>
[00:30:35.399]    <control if="" while="1" timeout="200" info="">
[00:30:35.399]      // while "1"  (timeout="200")
[00:30:35.400]      // while-condition  =>  TRUE
[00:30:35.400]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.401]      // while "1"  (timeout="200")
[00:30:35.401]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.403]      // while "1"  (timeout="200")
[00:30:35.403]      // while-condition  =>  TRUE
[00:30:35.404]      // while "1"  (timeout="200")
[00:30:35.404]      // while-condition  =>  TRUE
[00:30:35.404]      // while "1"  (timeout="200")
[00:30:35.404]      // while-condition  =>  TRUE
[00:30:35.404]      // while "1"  (timeout="200")
[00:30:35.404]      // while-condition  =>  TRUE
[00:30:35.404]      // while "1"  (timeout="200")
[00:30:35.404]      // while-condition  =>  TRUE
[00:30:35.405]      // while "1"  (timeout="200")
[00:30:35.405]      // while-condition  =>  TRUE
[00:30:35.405]      // while "1"  (timeout="200")
[00:30:35.405]      // while-condition  =>  TRUE
[00:30:35.405]      // while "1"  (timeout="200")
[00:30:35.405]      // while-condition  =>  TRUE
[00:30:35.405]      // while "1"  (timeout="200")
[00:30:35.405]      // while-condition  =>  TRUE
[00:30:35.406]      // while "1"  (timeout="200")
[00:30:35.406]      // while-condition  =>  TRUE
[00:30:35.406]      // while "1"  (timeout="200")
[00:30:35.406]      // while-condition  =>  TRUE
[00:30:35.406]      // while "1"  (timeout="200")
[00:30:35.406]      // while-condition  =>  TRUE
[00:30:35.406]      // while "1"  (timeout="200")
[00:30:35.406]      // while-condition  =>  TRUE
[00:30:35.406]      // while "1"  (timeout="200")
[00:30:35.406]      // while-condition  =>  TRUE
[00:30:35.406]      // while "1"  (timeout="200")
[00:30:35.407]      // while-condition  =>  TRUE
[00:30:35.407]      // while "1"  (timeout="200")
[00:30:35.407]      // while  =>  TIMEOUT
[00:30:35.407]      // end while "1"
[00:30:35.407]    </control>
[00:30:35.407]    <control if="canReadPins" while="" timeout="0" info="">
[00:30:35.407]      // if-block "canReadPins"
[00:30:35.407]        // =>  TRUE
[00:30:35.407]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:30:35.407]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:30:35.410]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:30:35.410]        // while-condition  =>  FALSE
[00:30:35.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:30:35.410]      </control>
[00:30:35.410]      // end if-block "canReadPins"
[00:30:35.411]    </control>
[00:30:35.411]    <control if="!canReadPins" while="" timeout="0" info="">
[00:30:35.411]      // if-block "!canReadPins"
[00:30:35.411]        // =>  FALSE
[00:30:35.411]      // skip if-block "!canReadPins"
[00:30:35.411]    </control>
[00:30:35.411]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:30:35.411]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:30:35.411]        // =>  TRUE
[00:30:35.411]      <block atomic="false" info="">
[00:30:35.411]        WriteAP(0x00, 0x190008);
[00:30:35.413]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:30:35.413]        WriteAP(0xF0, 0x01);
[00:30:35.416]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:30:35.416]      </block>
[00:30:35.416]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:30:35.416]    </control>
[00:30:35.416]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:30:35.416]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:30:35.416]        // =>  FALSE
[00:30:35.416]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:30:35.416]    </control>
[00:30:35.416]    <block atomic="false" info="">
[00:30:35.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:30:35.420]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:30:35.420]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:30:35.420]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:30:35.422]      __ap = 0; //lets make sure we reset the access point selection
[00:30:35.423]        // -> [__ap <= 0x00000000]
[00:30:35.423]    </block>
[00:30:35.423]  </sequence>
[00:30:35.423]  
[00:30:35.450]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:30:35.450]  
[00:30:35.450]  <debugvars>
[00:30:35.450]    // Pre-defined
[00:30:35.450]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:30:35.450]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:30:35.450]    __dp=0x00000000
[00:30:35.450]    __ap=0x00000000
[00:30:35.450]    __traceout=0x00000000      (Trace Disabled)
[00:30:35.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:30:35.451]    __FlashAddr=0x00000000
[00:30:35.451]    __FlashLen=0x00000000
[00:30:35.451]    __FlashArg=0x00000000
[00:30:35.451]    __FlashOp=0x00000000
[00:30:35.451]    __Result=0x00000000
[00:30:35.451]  </debugvars>
[00:30:35.451]  
[00:30:35.451]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:30:35.452]    <block atomic="false" info="">
[00:30:35.452]      __var deviceID = 0;
[00:30:35.452]        // -> [deviceID <= 0x00000000]
[00:30:35.452]      __var version = 0;
[00:30:35.452]        // -> [version <= 0x00000000]
[00:30:35.452]      __var partNum = 0;
[00:30:35.452]        // -> [partNum <= 0x00000000]
[00:30:35.452]      __var manuf = 0;
[00:30:35.452]        // -> [manuf <= 0x00000000]
[00:30:35.453]      __var isMSPM0G1X0X_G3X0X = 0;
[00:30:35.453]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:30:35.453]      __var isProduction = 0;
[00:30:35.453]        // -> [isProduction <= 0x00000000]
[00:30:35.453]      __var continueId = 0;
[00:30:35.453]        // -> [continueId <= 0x00000000]
[00:30:35.453]      deviceID =   Read32(0x41C40004);
[00:30:35.458]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:30:35.459]        // -> [deviceID <= 0x2BB8802F]
[00:30:35.459]      version = deviceID >> 28;
[00:30:35.459]        // -> [version <= 0x00000002]
[00:30:35.459]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:30:35.459]        // -> [partNum <= 0x0000BB88]
[00:30:35.459]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:30:35.459]        // -> [manuf <= 0x00000017]
[00:30:35.459]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:30:35.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:30:35.459]      isProduction = (version > 0);
[00:30:35.460]        // -> [isProduction <= 0x00000001]
[00:30:35.460]    </block>
[00:30:35.460]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:30:35.460]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:30:35.460]        // =>  FALSE
[00:30:35.460]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:30:35.460]    </control>
[00:30:35.460]    <control if="continueId == 4" while="" timeout="0" info="">
[00:30:35.460]      // if-block "continueId == 4"
[00:30:35.461]        // =>  FALSE
[00:30:35.461]      // skip if-block "continueId == 4"
[00:30:35.461]    </control>
[00:30:35.461]    <control if="!isProduction" while="" timeout="0" info="">
[00:30:35.461]      // if-block "!isProduction"
[00:30:35.461]        // =>  FALSE
[00:30:35.461]      // skip if-block "!isProduction"
[00:30:35.461]    </control>
[00:30:35.461]  </sequence>
[00:30:35.461]  
[00:31:34.084]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:31:34.084]  
[00:31:34.093]  <debugvars>
[00:31:34.093]    // Pre-defined
[00:31:34.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:34.093]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:31:34.093]    __dp=0x00000000
[00:31:34.093]    __ap=0x00000000
[00:31:34.093]    __traceout=0x00000000      (Trace Disabled)
[00:31:34.094]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:34.094]    __FlashAddr=0x00000000
[00:31:34.094]    __FlashLen=0x00000000
[00:31:34.094]    __FlashArg=0x00000000
[00:31:34.094]    __FlashOp=0x00000000
[00:31:34.094]    __Result=0x00000000
[00:31:34.094]  </debugvars>
[00:31:34.094]  
[00:31:34.094]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:34.094]    <block atomic="false" info="">
[00:31:34.094]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:34.094]        // -> [isSWJ <= 0x00000001]
[00:31:34.095]      __var hasDormant = __protocol & 0x00020000;
[00:31:34.095]        // -> [hasDormant <= 0x00000000]
[00:31:34.095]      __var protType   = __protocol & 0x0000FFFF;
[00:31:34.095]        // -> [protType <= 0x00000002]
[00:31:34.095]    </block>
[00:31:34.095]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:34.095]      // if-block "protType == 1"
[00:31:34.095]        // =>  FALSE
[00:31:34.095]      // skip if-block "protType == 1"
[00:31:34.095]    </control>
[00:31:34.095]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:34.095]      // if-block "protType == 2"
[00:31:34.096]        // =>  TRUE
[00:31:34.096]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:34.096]        // if-block "isSWJ"
[00:31:34.096]          // =>  TRUE
[00:31:34.096]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:34.096]          // if-block "hasDormant"
[00:31:34.096]            // =>  FALSE
[00:31:34.096]          // skip if-block "hasDormant"
[00:31:34.096]        </control>
[00:31:34.096]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:34.096]          // if-block "!hasDormant"
[00:31:34.096]            // =>  TRUE
[00:31:34.096]          <block atomic="false" info="">
[00:31:34.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:35.106]  
[00:31:35.106]  !!! E320 : DAP access error
[00:31:35.106]  
[00:31:35.115]          </block>
[00:31:35.115]          // end if-block "!hasDormant"
[00:31:35.115]        </control>
[00:31:35.115]        // end if-block "isSWJ"
[00:31:35.115]      </control>
[00:31:35.115]      // end if-block "protType == 2"
[00:31:35.115]    </control>
[00:31:35.115]  </sequence>
[00:31:35.116]  
[00:31:35.367]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:31:35.367]  
[00:31:35.377]  <debugvars>
[00:31:35.377]    // Pre-defined
[00:31:35.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:35.377]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:31:35.377]    __dp=0x00000000
[00:31:35.377]    __ap=0x00000000
[00:31:35.377]    __traceout=0x00000000      (Trace Disabled)
[00:31:35.377]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:35.377]    __FlashAddr=0x00000000
[00:31:35.377]    __FlashLen=0x00000000
[00:31:35.378]    __FlashArg=0x00000000
[00:31:35.378]    __FlashOp=0x00000000
[00:31:35.378]    __Result=0x00000000
[00:31:35.378]  </debugvars>
[00:31:35.378]  
[00:31:35.378]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:35.378]    <block atomic="false" info="">
[00:31:35.378]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:35.378]        // -> [isSWJ <= 0x00000001]
[00:31:35.378]      __var hasDormant = __protocol & 0x00020000;
[00:31:35.378]        // -> [hasDormant <= 0x00000000]
[00:31:35.379]      __var protType   = __protocol & 0x0000FFFF;
[00:31:35.379]        // -> [protType <= 0x00000002]
[00:31:35.379]    </block>
[00:31:35.379]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:35.379]      // if-block "protType == 1"
[00:31:35.379]        // =>  FALSE
[00:31:35.379]      // skip if-block "protType == 1"
[00:31:35.379]    </control>
[00:31:35.379]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:35.380]      // if-block "protType == 2"
[00:31:35.380]        // =>  TRUE
[00:31:35.380]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:35.380]        // if-block "isSWJ"
[00:31:35.380]          // =>  TRUE
[00:31:35.380]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:35.380]          // if-block "hasDormant"
[00:31:35.380]            // =>  FALSE
[00:31:35.380]          // skip if-block "hasDormant"
[00:31:35.380]        </control>
[00:31:35.380]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:35.380]          // if-block "!hasDormant"
[00:31:35.381]            // =>  TRUE
[00:31:35.381]          <block atomic="false" info="">
[00:31:35.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:36.389]  
[00:31:36.389]  !!! E320 : DAP access error
[00:31:36.389]  
[00:31:36.399]          </block>
[00:31:36.399]          // end if-block "!hasDormant"
[00:31:36.399]        </control>
[00:31:36.399]        // end if-block "isSWJ"
[00:31:36.399]      </control>
[00:31:36.399]      // end if-block "protType == 2"
[00:31:36.400]    </control>
[00:31:36.400]  </sequence>
[00:31:36.400]  
[00:31:36.663]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:31:36.663]  
[00:31:36.671]  <debugvars>
[00:31:36.671]    // Pre-defined
[00:31:36.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:36.671]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:31:36.671]    __dp=0x00000000
[00:31:36.671]    __ap=0x00000000
[00:31:36.671]    __traceout=0x00000000      (Trace Disabled)
[00:31:36.671]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:36.672]    __FlashAddr=0x00000000
[00:31:36.672]    __FlashLen=0x00000000
[00:31:36.672]    __FlashArg=0x00000000
[00:31:36.672]    __FlashOp=0x00000000
[00:31:36.672]    __Result=0x00000000
[00:31:36.672]  </debugvars>
[00:31:36.672]  
[00:31:36.672]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:36.672]    <block atomic="false" info="">
[00:31:36.672]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:36.672]        // -> [isSWJ <= 0x00000001]
[00:31:36.673]      __var hasDormant = __protocol & 0x00020000;
[00:31:36.673]        // -> [hasDormant <= 0x00000000]
[00:31:36.673]      __var protType   = __protocol & 0x0000FFFF;
[00:31:36.673]        // -> [protType <= 0x00000002]
[00:31:36.673]    </block>
[00:31:36.673]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:36.673]      // if-block "protType == 1"
[00:31:36.673]        // =>  FALSE
[00:31:36.674]      // skip if-block "protType == 1"
[00:31:36.674]    </control>
[00:31:36.674]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:36.674]      // if-block "protType == 2"
[00:31:36.674]        // =>  TRUE
[00:31:36.674]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:36.674]        // if-block "isSWJ"
[00:31:36.674]          // =>  TRUE
[00:31:36.674]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:36.674]          // if-block "hasDormant"
[00:31:36.675]            // =>  FALSE
[00:31:36.675]          // skip if-block "hasDormant"
[00:31:36.675]        </control>
[00:31:36.675]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:36.675]          // if-block "!hasDormant"
[00:31:36.675]            // =>  TRUE
[00:31:36.675]          <block atomic="false" info="">
[00:31:36.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:37.684]  
[00:31:37.684]  !!! E320 : DAP access error
[00:31:37.684]  
[00:31:37.692]          </block>
[00:31:37.692]          // end if-block "!hasDormant"
[00:31:37.692]        </control>
[00:31:37.692]        // end if-block "isSWJ"
[00:31:37.692]      </control>
[00:31:37.692]      // end if-block "protType == 2"
[00:31:37.693]    </control>
[00:31:37.693]  </sequence>
[00:31:37.693]  
[00:32:30.100]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:32:30.100]  
[00:32:30.109]  <debugvars>
[00:32:30.109]    // Pre-defined
[00:32:30.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:30.109]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:32:30.109]    __dp=0x00000000
[00:32:30.109]    __ap=0x00000000
[00:32:30.109]    __traceout=0x00000000      (Trace Disabled)
[00:32:30.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:30.109]    __FlashAddr=0x00000000
[00:32:30.109]    __FlashLen=0x00000000
[00:32:30.109]    __FlashArg=0x00000000
[00:32:30.109]    __FlashOp=0x00000000
[00:32:30.110]    __Result=0x00000000
[00:32:30.110]  </debugvars>
[00:32:30.110]  
[00:32:30.110]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:32:30.110]    <block atomic="false" info="">
[00:32:30.110]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:32:30.110]        // -> [isSWJ <= 0x00000001]
[00:32:30.110]      __var hasDormant = __protocol & 0x00020000;
[00:32:30.110]        // -> [hasDormant <= 0x00000000]
[00:32:30.110]      __var protType   = __protocol & 0x0000FFFF;
[00:32:30.110]        // -> [protType <= 0x00000002]
[00:32:30.110]    </block>
[00:32:30.111]    <control if="protType == 1" while="" timeout="0" info="">
[00:32:30.111]      // if-block "protType == 1"
[00:32:30.111]        // =>  FALSE
[00:32:30.111]      // skip if-block "protType == 1"
[00:32:30.111]    </control>
[00:32:30.111]    <control if="protType == 2" while="" timeout="0" info="">
[00:32:30.111]      // if-block "protType == 2"
[00:32:30.111]        // =>  TRUE
[00:32:30.111]      <control if="isSWJ" while="" timeout="0" info="">
[00:32:30.111]        // if-block "isSWJ"
[00:32:30.111]          // =>  TRUE
[00:32:30.111]        <control if="hasDormant" while="" timeout="0" info="">
[00:32:30.111]          // if-block "hasDormant"
[00:32:30.111]            // =>  FALSE
[00:32:30.113]          // skip if-block "hasDormant"
[00:32:30.113]        </control>
[00:32:30.113]        <control if="!hasDormant" while="" timeout="0" info="">
[00:32:30.113]          // if-block "!hasDormant"
[00:32:30.113]            // =>  TRUE
[00:32:30.113]          <block atomic="false" info="">
[00:32:30.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:32:30.114]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:30.115]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:32:30.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:32:30.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:32:30.117]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:30.118]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:32:30.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:32:30.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:32:30.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:30.122]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:32:30.129]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:32:30.129]          </block>
[00:32:30.129]          // end if-block "!hasDormant"
[00:32:30.129]        </control>
[00:32:30.129]        // end if-block "isSWJ"
[00:32:30.130]      </control>
[00:32:30.130]      <control if="!isSWJ" while="" timeout="0" info="">
[00:32:30.130]        // if-block "!isSWJ"
[00:32:30.130]          // =>  FALSE
[00:32:30.130]        // skip if-block "!isSWJ"
[00:32:30.130]      </control>
[00:32:30.130]      <block atomic="false" info="">
[00:32:30.130]        ReadDP(0x0);
[00:32:30.132]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:32:30.132]      </block>
[00:32:30.132]      // end if-block "protType == 2"
[00:32:30.132]    </control>
[00:32:30.132]  </sequence>
[00:32:30.132]  
[00:32:30.137]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:32:30.137]  
[00:32:30.138]  <debugvars>
[00:32:30.138]    // Pre-defined
[00:32:30.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:30.138]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:32:30.138]    __dp=0x00000000
[00:32:30.138]    __ap=0x00000000
[00:32:30.138]    __traceout=0x00000000      (Trace Disabled)
[00:32:30.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:30.138]    __FlashAddr=0x00000000
[00:32:30.139]    __FlashLen=0x00000000
[00:32:30.139]    __FlashArg=0x00000000
[00:32:30.139]    __FlashOp=0x00000000
[00:32:30.139]    __Result=0x00000000
[00:32:30.139]  </debugvars>
[00:32:30.139]  
[00:32:30.139]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:32:30.139]    <block atomic="false" info="">
[00:32:30.139]      __var SW_DP_ABORT       = 0x0;
[00:32:30.139]        // -> [SW_DP_ABORT <= 0x00000000]
[00:32:30.139]      __var DP_CTRL_STAT      = 0x4;
[00:32:30.140]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:32:30.140]      __var DP_SELECT         = 0x8;
[00:32:30.140]        // -> [DP_SELECT <= 0x00000008]
[00:32:30.140]      __var powered_down      = 0;
[00:32:30.140]        // -> [powered_down <= 0x00000000]
[00:32:30.140]      WriteDP(DP_SELECT, 0x00000000);
[00:32:30.142]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:32:30.142]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:32:30.143]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:32:30.144]        // -> [powered_down <= 0x00000001]
[00:32:30.144]    </block>
[00:32:30.144]    <control if="powered_down" while="" timeout="0" info="">
[00:32:30.144]      // if-block "powered_down"
[00:32:30.144]        // =>  TRUE
[00:32:30.144]      <block atomic="false" info="">
[00:32:30.145]        Message(0, "Debug/System power-up request sent");
[00:32:30.146]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:32:30.147]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:32:30.148]      </block>
[00:32:30.148]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:32:30.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:32:30.150]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:32:30.150]        // while-condition  =>  FALSE
[00:32:30.150]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:32:30.150]      </control>
[00:32:30.150]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:32:30.150]        // if-block "(__protocol & 0xFFFF) == 1"
[00:32:30.150]          // =>  FALSE
[00:32:30.150]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:32:30.150]      </control>
[00:32:30.150]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:32:30.150]        // if-block "(__protocol & 0xFFFF) == 2"
[00:32:30.150]          // =>  TRUE
[00:32:30.150]        <block atomic="false" info="">
[00:32:30.150]          Message(0, "executing SWD power up");
[00:32:30.152]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:32:30.155]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:32:30.155]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:32:30.157]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:32:30.157]        </block>
[00:32:30.157]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:32:30.157]      </control>
[00:32:30.157]      // end if-block "powered_down"
[00:32:30.157]    </control>
[00:32:30.157]    <block atomic="false" info="">
[00:32:30.159]      __var DEBUG_PORT_VAL    = 0;
[00:32:30.159]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:32:30.159]      __var ACCESS_POINT_VAL  = 0;
[00:32:30.159]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:32:30.159]      __ap = 1; 
[00:32:30.159]        // -> [__ap <= 0x00000001]
[00:32:30.159]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:32:30.165]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:32:30.165]      __ap = 4;
[00:32:30.165]        // -> [__ap <= 0x00000004]
[00:32:30.165]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:30.172]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:32:30.172]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:32:30.172]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:30.174]    </block>
[00:32:30.174]    <block atomic="false" info="">
[00:32:30.174]      __var nReset = 0x80;
[00:32:30.174]        // -> [nReset <= 0x00000080]
[00:32:30.174]      __var canReadPins = 0;
[00:32:30.174]        // -> [canReadPins <= 0x00000000]
[00:32:30.174]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:32:30.177]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:32:30.177]        // -> [canReadPins <= 0x00000001]
[00:32:30.177]    </block>
[00:32:30.177]    <control if="" while="1" timeout="200" info="">
[00:32:30.177]      // while "1"  (timeout="200")
[00:32:30.177]      // while-condition  =>  TRUE
[00:32:30.177]      // while "1"  (timeout="200")
[00:32:30.177]      // while-condition  =>  TRUE
[00:32:30.177]      // while "1"  (timeout="200")
[00:32:30.177]      // while-condition  =>  TRUE
[00:32:30.177]      // while "1"  (timeout="200")
[00:32:30.178]      // while-condition  =>  TRUE
[00:32:30.178]      // while "1"  (timeout="200")
[00:32:30.178]      // while-condition  =>  TRUE
[00:32:30.178]      // while "1"  (timeout="200")
[00:32:30.178]      // while-condition  =>  TRUE
[00:32:30.178]      // while "1"  (timeout="200")
[00:32:30.178]      // while-condition  =>  TRUE
[00:32:30.178]      // while "1"  (timeout="200")
[00:32:30.178]      // while-condition  =>  TRUE
[00:32:30.178]      // while "1"  (timeout="200")
[00:32:30.178]      // while-condition  =>  TRUE
[00:32:30.178]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.180]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.180]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.180]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.180]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.180]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.180]      // while "1"  (timeout="200")
[00:32:30.180]      // while-condition  =>  TRUE
[00:32:30.181]      // while "1"  (timeout="200")
[00:32:30.181]      // while-condition  =>  TRUE
[00:32:30.181]      // while "1"  (timeout="200")
[00:32:30.181]      // while-condition  =>  TRUE
[00:32:30.181]      // while "1"  (timeout="200")
[00:32:30.181]      // while-condition  =>  TRUE
[00:32:30.181]      // while "1"  (timeout="200")
[00:32:30.182]      // while-condition  =>  TRUE
[00:32:30.182]      // while "1"  (timeout="200")
[00:32:30.182]      // while-condition  =>  TRUE
[00:32:30.182]      // while "1"  (timeout="200")
[00:32:30.182]      // while-condition  =>  TRUE
[00:32:30.182]      // while "1"  (timeout="200")
[00:32:30.182]      // while-condition  =>  TRUE
[00:32:30.182]      // while "1"  (timeout="200")
[00:32:30.182]      // while-condition  =>  TRUE
[00:32:30.182]      // while "1"  (timeout="200")
[00:32:30.182]      // while-condition  =>  TRUE
[00:32:30.183]      // while "1"  (timeout="200")
[00:32:30.183]      // while-condition  =>  TRUE
[00:32:30.183]      // while "1"  (timeout="200")
[00:32:30.183]      // while-condition  =>  TRUE
[00:32:30.183]      // while "1"  (timeout="200")
[00:32:30.183]      // while-condition  =>  TRUE
[00:32:30.183]      // while "1"  (timeout="200")
[00:32:30.183]      // while-condition  =>  TRUE
[00:32:30.183]      // while "1"  (timeout="200")
[00:32:30.183]      // while-condition  =>  TRUE
[00:32:30.183]      // while "1"  (timeout="200")
[00:32:30.183]      // while-condition  =>  TRUE
[00:32:30.184]      // while "1"  (timeout="200")
[00:32:30.184]      // while-condition  =>  TRUE
[00:32:30.184]      // while "1"  (timeout="200")
[00:32:30.184]      // while-condition  =>  TRUE
[00:32:30.184]      // while "1"  (timeout="200")
[00:32:30.184]      // while-condition  =>  TRUE
[00:32:30.184]      // while "1"  (timeout="200")
[00:32:30.184]      // while-condition  =>  TRUE
[00:32:30.184]      // while "1"  (timeout="200")
[00:32:30.184]      // while-condition  =>  TRUE
[00:32:30.184]      // while "1"  (timeout="200")
[00:32:30.184]      // while-condition  =>  TRUE
[00:32:30.185]      // while "1"  (timeout="200")
[00:32:30.185]      // while-condition  =>  TRUE
[00:32:30.185]      // while "1"  (timeout="200")
[00:32:30.185]      // while-condition  =>  TRUE
[00:32:30.185]      // while "1"  (timeout="200")
[00:32:30.185]      // while-condition  =>  TRUE
[00:32:30.185]      // while "1"  (timeout="200")
[00:32:30.185]      // while-condition  =>  TRUE
[00:32:30.185]      // while "1"  (timeout="200")
[00:32:30.185]      // while-condition  =>  TRUE
[00:32:30.185]      // while "1"  (timeout="200")
[00:32:30.185]      // while-condition  =>  TRUE
[00:32:30.186]      // while "1"  (timeout="200")
[00:32:30.186]      // while-condition  =>  TRUE
[00:32:30.186]      // while "1"  (timeout="200")
[00:32:30.186]      // while-condition  =>  TRUE
[00:32:30.186]      // while "1"  (timeout="200")
[00:32:30.186]      // while-condition  =>  TRUE
[00:32:30.186]      // while "1"  (timeout="200")
[00:32:30.186]      // while-condition  =>  TRUE
[00:32:30.186]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.187]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.187]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.187]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.187]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.187]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.187]      // while "1"  (timeout="200")
[00:32:30.187]      // while-condition  =>  TRUE
[00:32:30.188]      // while "1"  (timeout="200")
[00:32:30.188]      // while  =>  TIMEOUT
[00:32:30.188]      // end while "1"
[00:32:30.188]    </control>
[00:32:30.188]    <control if="canReadPins" while="" timeout="0" info="">
[00:32:30.188]      // if-block "canReadPins"
[00:32:30.188]        // =>  TRUE
[00:32:30.188]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:32:30.188]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:32:30.190]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:32:30.190]        // while-condition  =>  FALSE
[00:32:30.190]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:32:30.190]      </control>
[00:32:30.190]      // end if-block "canReadPins"
[00:32:30.190]    </control>
[00:32:30.190]    <control if="!canReadPins" while="" timeout="0" info="">
[00:32:30.191]      // if-block "!canReadPins"
[00:32:30.192]        // =>  FALSE
[00:32:30.192]      // skip if-block "!canReadPins"
[00:32:30.192]    </control>
[00:32:30.192]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:32:30.192]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:30.192]        // =>  TRUE
[00:32:30.192]      <block atomic="false" info="">
[00:32:30.192]        WriteAP(0x00, 0x190008);
[00:32:30.193]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:30.193]        WriteAP(0xF0, 0x01);
[00:32:30.198]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:30.199]      </block>
[00:32:30.199]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:30.199]    </control>
[00:32:30.199]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:32:30.199]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:30.199]        // =>  FALSE
[00:32:30.199]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:30.199]    </control>
[00:32:30.199]    <block atomic="false" info="">
[00:32:30.199]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:30.204]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:32:30.204]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:32:30.204]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:30.206]      __ap = 0; //lets make sure we reset the access point selection
[00:32:30.206]        // -> [__ap <= 0x00000000]
[00:32:30.206]    </block>
[00:32:30.206]  </sequence>
[00:32:30.206]  
[00:32:30.233]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:32:30.233]  
[00:32:30.233]  <debugvars>
[00:32:30.233]    // Pre-defined
[00:32:30.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:30.233]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:32:30.233]    __dp=0x00000000
[00:32:30.233]    __ap=0x00000000
[00:32:30.235]    __traceout=0x00000000      (Trace Disabled)
[00:32:30.235]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:30.235]    __FlashAddr=0x00000000
[00:32:30.235]    __FlashLen=0x00000000
[00:32:30.235]    __FlashArg=0x00000000
[00:32:30.235]    __FlashOp=0x00000000
[00:32:30.235]    __Result=0x00000000
[00:32:30.235]  </debugvars>
[00:32:30.235]  
[00:32:30.235]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:32:30.235]    <block atomic="false" info="">
[00:32:30.235]      __var deviceID = 0;
[00:32:30.236]        // -> [deviceID <= 0x00000000]
[00:32:30.236]      __var version = 0;
[00:32:30.236]        // -> [version <= 0x00000000]
[00:32:30.236]      __var partNum = 0;
[00:32:30.236]        // -> [partNum <= 0x00000000]
[00:32:30.236]      __var manuf = 0;
[00:32:30.236]        // -> [manuf <= 0x00000000]
[00:32:30.237]      __var isMSPM0G1X0X_G3X0X = 0;
[00:32:30.237]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:32:30.237]      __var isProduction = 0;
[00:32:30.237]        // -> [isProduction <= 0x00000000]
[00:32:30.237]      __var continueId = 0;
[00:32:30.237]        // -> [continueId <= 0x00000000]
[00:32:30.237]      deviceID =   Read32(0x41C40004);
[00:32:30.243]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:32:30.243]        // -> [deviceID <= 0x2BB8802F]
[00:32:30.244]      version = deviceID >> 28;
[00:32:30.244]        // -> [version <= 0x00000002]
[00:32:30.244]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:32:30.244]        // -> [partNum <= 0x0000BB88]
[00:32:30.244]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:32:30.244]        // -> [manuf <= 0x00000017]
[00:32:30.244]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:32:30.244]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:32:30.244]      isProduction = (version > 0);
[00:32:30.244]        // -> [isProduction <= 0x00000001]
[00:32:30.245]    </block>
[00:32:30.245]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:32:30.245]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:32:30.245]        // =>  FALSE
[00:32:30.245]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:32:30.246]    </control>
[00:32:30.246]    <control if="continueId == 4" while="" timeout="0" info="">
[00:32:30.246]      // if-block "continueId == 4"
[00:32:30.246]        // =>  FALSE
[00:32:30.246]      // skip if-block "continueId == 4"
[00:32:30.246]    </control>
[00:32:30.246]    <control if="!isProduction" while="" timeout="0" info="">
[00:32:30.246]      // if-block "!isProduction"
[00:32:30.246]        // =>  FALSE
[00:32:30.246]      // skip if-block "!isProduction"
[00:32:30.246]    </control>
[00:32:30.246]  </sequence>
[00:32:30.246]  
[00:34:53.658]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:34:53.658]  
[00:34:53.666]  <debugvars>
[00:34:53.666]    // Pre-defined
[00:34:53.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:53.666]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:53.666]    __dp=0x00000000
[00:34:53.666]    __ap=0x00000000
[00:34:53.666]    __traceout=0x00000000      (Trace Disabled)
[00:34:53.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:53.666]    __FlashAddr=0x00000000
[00:34:53.666]    __FlashLen=0x00000000
[00:34:53.668]    __FlashArg=0x00000000
[00:34:53.668]    __FlashOp=0x00000000
[00:34:53.668]    __Result=0x00000000
[00:34:53.668]  </debugvars>
[00:34:53.668]  
[00:34:53.668]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:34:53.668]    <block atomic="false" info="">
[00:34:53.668]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:34:53.668]        // -> [isSWJ <= 0x00000001]
[00:34:53.668]      __var hasDormant = __protocol & 0x00020000;
[00:34:53.668]        // -> [hasDormant <= 0x00000000]
[00:34:53.669]      __var protType   = __protocol & 0x0000FFFF;
[00:34:53.669]        // -> [protType <= 0x00000002]
[00:34:53.669]    </block>
[00:34:53.669]    <control if="protType == 1" while="" timeout="0" info="">
[00:34:53.669]      // if-block "protType == 1"
[00:34:53.669]        // =>  FALSE
[00:34:53.669]      // skip if-block "protType == 1"
[00:34:53.669]    </control>
[00:34:53.670]    <control if="protType == 2" while="" timeout="0" info="">
[00:34:53.670]      // if-block "protType == 2"
[00:34:53.670]        // =>  TRUE
[00:34:53.670]      <control if="isSWJ" while="" timeout="0" info="">
[00:34:53.670]        // if-block "isSWJ"
[00:34:53.670]          // =>  TRUE
[00:34:53.671]        <control if="hasDormant" while="" timeout="0" info="">
[00:34:53.671]          // if-block "hasDormant"
[00:34:53.671]            // =>  FALSE
[00:34:53.671]          // skip if-block "hasDormant"
[00:34:53.671]        </control>
[00:34:53.671]        <control if="!hasDormant" while="" timeout="0" info="">
[00:34:53.671]          // if-block "!hasDormant"
[00:34:53.671]            // =>  TRUE
[00:34:53.672]          <block atomic="false" info="">
[00:34:53.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:34:53.673]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:53.673]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:34:53.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:34:53.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:34:53.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:53.678]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:34:53.679]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:34:53.679]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:34:53.685]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:53.685]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:34:53.686]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:34:53.686]          </block>
[00:34:53.686]          // end if-block "!hasDormant"
[00:34:53.686]        </control>
[00:34:53.686]        // end if-block "isSWJ"
[00:34:53.686]      </control>
[00:34:53.686]      <control if="!isSWJ" while="" timeout="0" info="">
[00:34:53.686]        // if-block "!isSWJ"
[00:34:53.688]          // =>  FALSE
[00:34:53.688]        // skip if-block "!isSWJ"
[00:34:53.688]      </control>
[00:34:53.688]      <block atomic="false" info="">
[00:34:53.688]        ReadDP(0x0);
[00:34:53.689]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:34:53.689]      </block>
[00:34:53.689]      // end if-block "protType == 2"
[00:34:53.689]    </control>
[00:34:53.689]  </sequence>
[00:34:53.689]  
[00:34:53.697]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:34:53.697]  
[00:34:53.697]  <debugvars>
[00:34:53.697]    // Pre-defined
[00:34:53.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:53.697]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:53.697]    __dp=0x00000000
[00:34:53.697]    __ap=0x00000000
[00:34:53.697]    __traceout=0x00000000      (Trace Disabled)
[00:34:53.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:53.697]    __FlashAddr=0x00000000
[00:34:53.697]    __FlashLen=0x00000000
[00:34:53.697]    __FlashArg=0x00000000
[00:34:53.698]    __FlashOp=0x00000000
[00:34:53.698]    __Result=0x00000000
[00:34:53.698]  </debugvars>
[00:34:53.698]  
[00:34:53.698]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:34:53.698]    <block atomic="false" info="">
[00:34:53.698]      __var SW_DP_ABORT       = 0x0;
[00:34:53.698]        // -> [SW_DP_ABORT <= 0x00000000]
[00:34:53.698]      __var DP_CTRL_STAT      = 0x4;
[00:34:53.698]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:34:53.698]      __var DP_SELECT         = 0x8;
[00:34:53.698]        // -> [DP_SELECT <= 0x00000008]
[00:34:53.700]      __var powered_down      = 0;
[00:34:53.700]        // -> [powered_down <= 0x00000000]
[00:34:53.700]      WriteDP(DP_SELECT, 0x00000000);
[00:34:53.703]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:34:53.703]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:34:53.707]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:34:53.707]        // -> [powered_down <= 0x00000001]
[00:34:53.707]    </block>
[00:34:53.707]    <control if="powered_down" while="" timeout="0" info="">
[00:34:53.707]      // if-block "powered_down"
[00:34:53.707]        // =>  TRUE
[00:34:53.708]      <block atomic="false" info="">
[00:34:53.708]        Message(0, "Debug/System power-up request sent");
[00:34:53.710]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:34:53.713]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:34:53.713]      </block>
[00:34:53.714]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:34:53.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:34:53.715]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:34:53.715]        // while-condition  =>  FALSE
[00:34:53.716]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:34:53.716]      </control>
[00:34:53.716]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:34:53.716]        // if-block "(__protocol & 0xFFFF) == 1"
[00:34:53.716]          // =>  FALSE
[00:34:53.716]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:34:53.716]      </control>
[00:34:53.716]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:34:53.716]        // if-block "(__protocol & 0xFFFF) == 2"
[00:34:53.716]          // =>  TRUE
[00:34:53.716]        <block atomic="false" info="">
[00:34:53.716]          Message(0, "executing SWD power up");
[00:34:53.719]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:34:53.722]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:34:53.722]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:34:53.725]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:34:53.725]        </block>
[00:34:53.725]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:34:53.725]      </control>
[00:34:53.725]      // end if-block "powered_down"
[00:34:53.725]    </control>
[00:34:53.725]    <block atomic="false" info="">
[00:34:53.725]      __var DEBUG_PORT_VAL    = 0;
[00:34:53.725]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:34:53.725]      __var ACCESS_POINT_VAL  = 0;
[00:34:53.725]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:34:53.725]      __ap = 1; 
[00:34:53.725]        // -> [__ap <= 0x00000001]
[00:34:53.725]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:34:53.731]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:34:53.731]      __ap = 4;
[00:34:53.731]        // -> [__ap <= 0x00000004]
[00:34:53.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:53.738]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:34:53.738]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:34:53.738]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:53.740]    </block>
[00:34:53.740]    <block atomic="false" info="">
[00:34:53.740]      __var nReset = 0x80;
[00:34:53.740]        // -> [nReset <= 0x00000080]
[00:34:53.740]      __var canReadPins = 0;
[00:34:53.740]        // -> [canReadPins <= 0x00000000]
[00:34:53.740]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:34:53.743]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:34:53.743]        // -> [canReadPins <= 0x00000001]
[00:34:53.743]    </block>
[00:34:53.743]    <control if="" while="1" timeout="200" info="">
[00:34:53.743]      // while "1"  (timeout="200")
[00:34:53.743]      // while-condition  =>  TRUE
[00:34:53.744]      // while "1"  (timeout="200")
[00:34:53.744]      // while-condition  =>  TRUE
[00:34:53.744]      // while "1"  (timeout="200")
[00:34:53.744]      // while-condition  =>  TRUE
[00:34:53.744]      // while "1"  (timeout="200")
[00:34:53.745]      // while-condition  =>  TRUE
[00:34:53.745]      // while "1"  (timeout="200")
[00:34:53.745]      // while-condition  =>  TRUE
[00:34:53.745]      // while "1"  (timeout="200")
[00:34:53.745]      // while-condition  =>  TRUE
[00:34:53.745]      // while "1"  (timeout="200")
[00:34:53.745]      // while-condition  =>  TRUE
[00:34:53.745]      // while "1"  (timeout="200")
[00:34:53.745]      // while-condition  =>  TRUE
[00:34:53.745]      // while "1"  (timeout="200")
[00:34:53.745]      // while-condition  =>  TRUE
[00:34:53.746]      // while "1"  (timeout="200")
[00:34:53.746]      // while-condition  =>  TRUE
[00:34:53.746]      // while "1"  (timeout="200")
[00:34:53.746]      // while-condition  =>  TRUE
[00:34:53.746]      // while "1"  (timeout="200")
[00:34:53.746]      // while-condition  =>  TRUE
[00:34:53.746]      // while "1"  (timeout="200")
[00:34:53.746]      // while-condition  =>  TRUE
[00:34:53.746]      // while "1"  (timeout="200")
[00:34:53.746]      // while-condition  =>  TRUE
[00:34:53.746]      // while "1"  (timeout="200")
[00:34:53.746]      // while-condition  =>  TRUE
[00:34:53.747]      // while "1"  (timeout="200")
[00:34:53.747]      // while-condition  =>  TRUE
[00:34:53.747]      // while "1"  (timeout="200")
[00:34:53.747]      // while-condition  =>  TRUE
[00:34:53.747]      // while "1"  (timeout="200")
[00:34:53.747]      // while-condition  =>  TRUE
[00:34:53.747]      // while "1"  (timeout="200")
[00:34:53.748]      // while-condition  =>  TRUE
[00:34:53.748]      // while "1"  (timeout="200")
[00:34:53.748]      // while-condition  =>  TRUE
[00:34:53.748]      // while "1"  (timeout="200")
[00:34:53.748]      // while-condition  =>  TRUE
[00:34:53.748]      // while "1"  (timeout="200")
[00:34:53.748]      // while-condition  =>  TRUE
[00:34:53.748]      // while "1"  (timeout="200")
[00:34:53.748]      // while-condition  =>  TRUE
[00:34:53.748]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.749]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.749]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.749]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.749]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.749]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.749]      // while "1"  (timeout="200")
[00:34:53.749]      // while-condition  =>  TRUE
[00:34:53.750]      // while "1"  (timeout="200")
[00:34:53.750]      // while-condition  =>  TRUE
[00:34:53.750]      // while "1"  (timeout="200")
[00:34:53.750]      // while-condition  =>  TRUE
[00:34:53.750]      // while "1"  (timeout="200")
[00:34:53.750]      // while-condition  =>  TRUE
[00:34:53.750]      // while "1"  (timeout="200")
[00:34:53.750]      // while-condition  =>  TRUE
[00:34:53.750]      // while "1"  (timeout="200")
[00:34:53.750]      // while-condition  =>  TRUE
[00:34:53.750]      // while "1"  (timeout="200")
[00:34:53.751]      // while-condition  =>  TRUE
[00:34:53.751]      // while "1"  (timeout="200")
[00:34:53.751]      // while  =>  TIMEOUT
[00:34:53.751]      // end while "1"
[00:34:53.751]    </control>
[00:34:53.751]    <control if="canReadPins" while="" timeout="0" info="">
[00:34:53.751]      // if-block "canReadPins"
[00:34:53.751]        // =>  TRUE
[00:34:53.751]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:34:53.751]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:34:53.753]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:34:53.753]        // while-condition  =>  FALSE
[00:34:53.753]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:34:53.753]      </control>
[00:34:53.753]      // end if-block "canReadPins"
[00:34:53.754]    </control>
[00:34:53.754]    <control if="!canReadPins" while="" timeout="0" info="">
[00:34:53.754]      // if-block "!canReadPins"
[00:34:53.754]        // =>  FALSE
[00:34:53.754]      // skip if-block "!canReadPins"
[00:34:53.754]    </control>
[00:34:53.754]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:34:53.755]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:53.755]        // =>  TRUE
[00:34:53.755]      <block atomic="false" info="">
[00:34:53.755]        WriteAP(0x00, 0x190008);
[00:34:53.757]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:53.757]        WriteAP(0xF0, 0x01);
[00:34:53.760]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:53.760]      </block>
[00:34:53.760]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:53.760]    </control>
[00:34:53.760]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:34:53.760]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:53.760]        // =>  FALSE
[00:34:53.761]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:53.761]    </control>
[00:34:53.761]    <block atomic="false" info="">
[00:34:53.761]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:53.766]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:34:53.766]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:34:53.766]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:53.769]      __ap = 0; //lets make sure we reset the access point selection
[00:34:53.769]        // -> [__ap <= 0x00000000]
[00:34:53.769]    </block>
[00:34:53.769]  </sequence>
[00:34:53.769]  
[00:34:53.801]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:34:53.802]  
[00:34:53.802]  <debugvars>
[00:34:53.802]    // Pre-defined
[00:34:53.802]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:53.802]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:53.802]    __dp=0x00000000
[00:34:53.802]    __ap=0x00000000
[00:34:53.802]    __traceout=0x00000000      (Trace Disabled)
[00:34:53.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:53.802]    __FlashAddr=0x00000000
[00:34:53.802]    __FlashLen=0x00000000
[00:34:53.803]    __FlashArg=0x00000000
[00:34:53.803]    __FlashOp=0x00000000
[00:34:53.803]    __Result=0x00000000
[00:34:53.803]  </debugvars>
[00:34:53.803]  
[00:34:53.803]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:34:53.803]    <block atomic="false" info="">
[00:34:53.803]      __var deviceID = 0;
[00:34:53.803]        // -> [deviceID <= 0x00000000]
[00:34:53.803]      __var version = 0;
[00:34:53.803]        // -> [version <= 0x00000000]
[00:34:53.803]      __var partNum = 0;
[00:34:53.804]        // -> [partNum <= 0x00000000]
[00:34:53.804]      __var manuf = 0;
[00:34:53.804]        // -> [manuf <= 0x00000000]
[00:34:53.804]      __var isMSPM0G1X0X_G3X0X = 0;
[00:34:53.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:34:53.804]      __var isProduction = 0;
[00:34:53.804]        // -> [isProduction <= 0x00000000]
[00:34:53.804]      __var continueId = 0;
[00:34:53.805]        // -> [continueId <= 0x00000000]
[00:34:53.805]      deviceID =   Read32(0x41C40004);
[00:34:53.810]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:34:53.810]        // -> [deviceID <= 0x2BB8802F]
[00:34:53.810]      version = deviceID >> 28;
[00:34:53.811]        // -> [version <= 0x00000002]
[00:34:53.811]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:34:53.811]        // -> [partNum <= 0x0000BB88]
[00:34:53.811]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:34:53.811]        // -> [manuf <= 0x00000017]
[00:34:53.811]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:34:53.811]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:34:53.811]      isProduction = (version > 0);
[00:34:53.811]        // -> [isProduction <= 0x00000001]
[00:34:53.811]    </block>
[00:34:53.812]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:34:53.812]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:34:53.812]        // =>  FALSE
[00:34:53.812]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:34:53.813]    </control>
[00:34:53.813]    <control if="continueId == 4" while="" timeout="0" info="">
[00:34:53.813]      // if-block "continueId == 4"
[00:34:53.813]        // =>  FALSE
[00:34:53.813]      // skip if-block "continueId == 4"
[00:34:53.813]    </control>
[00:34:53.813]    <control if="!isProduction" while="" timeout="0" info="">
[00:34:53.813]      // if-block "!isProduction"
[00:34:53.813]        // =>  FALSE
[00:34:53.813]      // skip if-block "!isProduction"
[00:34:53.813]    </control>
[00:34:53.813]  </sequence>
[00:34:53.813]  
[00:34:59.893]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:34:59.893]  
[00:34:59.902]  <debugvars>
[00:34:59.902]    // Pre-defined
[00:34:59.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:59.902]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:34:59.902]    __dp=0x00000000
[00:34:59.902]    __ap=0x00000000
[00:34:59.902]    __traceout=0x00000000      (Trace Disabled)
[00:34:59.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:59.902]    __FlashAddr=0x00000000
[00:34:59.902]    __FlashLen=0x00000000
[00:34:59.902]    __FlashArg=0x00000000
[00:34:59.902]    __FlashOp=0x00000000
[00:34:59.902]    __Result=0x00000000
[00:34:59.903]  </debugvars>
[00:34:59.903]  
[00:34:59.903]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:34:59.903]    <block atomic="false" info="">
[00:34:59.903]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:34:59.903]        // -> [isSWJ <= 0x00000001]
[00:34:59.903]      __var hasDormant = __protocol & 0x00020000;
[00:34:59.903]        // -> [hasDormant <= 0x00000000]
[00:34:59.904]      __var protType   = __protocol & 0x0000FFFF;
[00:34:59.904]        // -> [protType <= 0x00000002]
[00:34:59.904]    </block>
[00:34:59.904]    <control if="protType == 1" while="" timeout="0" info="">
[00:34:59.904]      // if-block "protType == 1"
[00:34:59.904]        // =>  FALSE
[00:34:59.904]      // skip if-block "protType == 1"
[00:34:59.906]    </control>
[00:34:59.906]    <control if="protType == 2" while="" timeout="0" info="">
[00:34:59.906]      // if-block "protType == 2"
[00:34:59.906]        // =>  TRUE
[00:34:59.906]      <control if="isSWJ" while="" timeout="0" info="">
[00:34:59.906]        // if-block "isSWJ"
[00:34:59.907]          // =>  TRUE
[00:34:59.907]        <control if="hasDormant" while="" timeout="0" info="">
[00:34:59.907]          // if-block "hasDormant"
[00:34:59.907]            // =>  FALSE
[00:34:59.907]          // skip if-block "hasDormant"
[00:34:59.907]        </control>
[00:34:59.907]        <control if="!hasDormant" while="" timeout="0" info="">
[00:34:59.908]          // if-block "!hasDormant"
[00:34:59.908]            // =>  TRUE
[00:34:59.908]          <block atomic="false" info="">
[00:34:59.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:34:59.911]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:59.911]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:34:59.912]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:34:59.912]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:34:59.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:59.915]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:34:59.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:34:59.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:34:59.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:59.917]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:34:59.919]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:34:59.919]          </block>
[00:34:59.919]          // end if-block "!hasDormant"
[00:34:59.919]        </control>
[00:34:59.919]        // end if-block "isSWJ"
[00:34:59.919]      </control>
[00:34:59.919]      <control if="!isSWJ" while="" timeout="0" info="">
[00:34:59.919]        // if-block "!isSWJ"
[00:34:59.919]          // =>  FALSE
[00:34:59.919]        // skip if-block "!isSWJ"
[00:34:59.919]      </control>
[00:34:59.919]      <block atomic="false" info="">
[00:34:59.919]        ReadDP(0x0);
[00:34:59.922]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:34:59.922]      </block>
[00:34:59.922]      // end if-block "protType == 2"
[00:34:59.922]    </control>
[00:34:59.922]  </sequence>
[00:34:59.922]  
[00:34:59.924]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:34:59.924]  
[00:34:59.925]  <debugvars>
[00:34:59.925]    // Pre-defined
[00:34:59.925]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:59.925]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:34:59.925]    __dp=0x00000000
[00:34:59.925]    __ap=0x00000000
[00:34:59.925]    __traceout=0x00000000      (Trace Disabled)
[00:34:59.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:59.925]    __FlashAddr=0x00000000
[00:34:59.925]    __FlashLen=0x00000000
[00:34:59.925]    __FlashArg=0x00000000
[00:34:59.925]    __FlashOp=0x00000000
[00:34:59.925]    __Result=0x00000000
[00:34:59.925]  </debugvars>
[00:34:59.925]  
[00:34:59.927]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:34:59.927]    <block atomic="false" info="">
[00:34:59.927]      __var SW_DP_ABORT       = 0x0;
[00:34:59.927]        // -> [SW_DP_ABORT <= 0x00000000]
[00:34:59.927]      __var DP_CTRL_STAT      = 0x4;
[00:34:59.927]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:34:59.927]      __var DP_SELECT         = 0x8;
[00:34:59.927]        // -> [DP_SELECT <= 0x00000008]
[00:34:59.927]      __var powered_down      = 0;
[00:34:59.927]        // -> [powered_down <= 0x00000000]
[00:34:59.927]      WriteDP(DP_SELECT, 0x00000000);
[00:34:59.929]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:34:59.929]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:34:59.931]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:34:59.931]        // -> [powered_down <= 0x00000001]
[00:34:59.931]    </block>
[00:34:59.931]    <control if="powered_down" while="" timeout="0" info="">
[00:34:59.931]      // if-block "powered_down"
[00:34:59.931]        // =>  TRUE
[00:34:59.931]      <block atomic="false" info="">
[00:34:59.931]        Message(0, "Debug/System power-up request sent");
[00:34:59.933]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:34:59.935]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:34:59.935]      </block>
[00:34:59.935]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:34:59.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:34:59.942]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:34:59.942]        // while-condition  =>  FALSE
[00:34:59.942]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:34:59.943]      </control>
[00:34:59.943]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:34:59.943]        // if-block "(__protocol & 0xFFFF) == 1"
[00:34:59.943]          // =>  FALSE
[00:34:59.943]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:34:59.943]      </control>
[00:34:59.944]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:34:59.944]        // if-block "(__protocol & 0xFFFF) == 2"
[00:34:59.944]          // =>  TRUE
[00:34:59.944]        <block atomic="false" info="">
[00:34:59.945]          Message(0, "executing SWD power up");
[00:34:59.947]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:34:59.949]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:34:59.950]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:34:59.951]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:34:59.952]        </block>
[00:34:59.952]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:34:59.952]      </control>
[00:34:59.953]      // end if-block "powered_down"
[00:34:59.953]    </control>
[00:34:59.953]    <block atomic="false" info="">
[00:34:59.953]      __var DEBUG_PORT_VAL    = 0;
[00:34:59.954]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:34:59.954]      __var ACCESS_POINT_VAL  = 0;
[00:34:59.954]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:34:59.954]      __ap = 1; 
[00:34:59.954]        // -> [__ap <= 0x00000001]
[00:34:59.954]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:34:59.958]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:34:59.959]      __ap = 4;
[00:34:59.959]        // -> [__ap <= 0x00000004]
[00:34:59.959]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:59.963]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:34:59.963]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:34:59.963]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:59.965]    </block>
[00:34:59.965]    <block atomic="false" info="">
[00:34:59.966]      __var nReset = 0x80;
[00:34:59.966]        // -> [nReset <= 0x00000080]
[00:34:59.966]      __var canReadPins = 0;
[00:34:59.966]        // -> [canReadPins <= 0x00000000]
[00:34:59.966]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:34:59.968]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:34:59.969]        // -> [canReadPins <= 0x00000001]
[00:34:59.969]    </block>
[00:34:59.969]    <control if="" while="1" timeout="200" info="">
[00:34:59.969]      // while "1"  (timeout="200")
[00:34:59.969]      // while-condition  =>  TRUE
[00:34:59.969]      // while "1"  (timeout="200")
[00:34:59.969]      // while-condition  =>  TRUE
[00:34:59.969]      // while "1"  (timeout="200")
[00:34:59.969]      // while-condition  =>  TRUE
[00:34:59.971]      // while "1"  (timeout="200")
[00:34:59.971]      // while  =>  TIMEOUT
[00:34:59.971]      // end while "1"
[00:34:59.971]    </control>
[00:34:59.971]    <control if="canReadPins" while="" timeout="0" info="">
[00:34:59.971]      // if-block "canReadPins"
[00:34:59.971]        // =>  TRUE
[00:34:59.972]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:34:59.972]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:34:59.973]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:34:59.973]        // while-condition  =>  FALSE
[00:34:59.973]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:34:59.973]      </control>
[00:34:59.974]      // end if-block "canReadPins"
[00:34:59.974]    </control>
[00:34:59.974]    <control if="!canReadPins" while="" timeout="0" info="">
[00:34:59.974]      // if-block "!canReadPins"
[00:34:59.974]        // =>  FALSE
[00:34:59.974]      // skip if-block "!canReadPins"
[00:34:59.974]    </control>
[00:34:59.974]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:34:59.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:59.975]        // =>  TRUE
[00:34:59.975]      <block atomic="false" info="">
[00:34:59.975]        WriteAP(0x00, 0x190008);
[00:34:59.977]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:59.977]        WriteAP(0xF0, 0x01);
[00:34:59.982]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:59.982]      </block>
[00:34:59.982]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:59.982]    </control>
[00:34:59.983]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:34:59.984]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:59.984]        // =>  FALSE
[00:34:59.984]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:59.984]    </control>
[00:34:59.984]    <block atomic="false" info="">
[00:34:59.984]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:59.987]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:34:59.987]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:34:59.987]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:59.990]      __ap = 0; //lets make sure we reset the access point selection
[00:34:59.990]        // -> [__ap <= 0x00000000]
[00:34:59.990]    </block>
[00:34:59.990]  </sequence>
[00:34:59.990]  
[00:35:00.010]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:35:00.010]  
[00:35:00.010]  <debugvars>
[00:35:00.010]    // Pre-defined
[00:35:00.010]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:00.010]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:35:00.010]    __dp=0x00000000
[00:35:00.011]    __ap=0x00000000
[00:35:00.011]    __traceout=0x00000000      (Trace Disabled)
[00:35:00.011]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:00.011]    __FlashAddr=0x00000000
[00:35:00.011]    __FlashLen=0x00000000
[00:35:00.011]    __FlashArg=0x00000000
[00:35:00.011]    __FlashOp=0x00000000
[00:35:00.011]    __Result=0x00000000
[00:35:00.011]  </debugvars>
[00:35:00.011]  
[00:35:00.011]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:35:00.011]    <block atomic="false" info="">
[00:35:00.012]      __var deviceID = 0;
[00:35:00.012]        // -> [deviceID <= 0x00000000]
[00:35:00.012]      __var version = 0;
[00:35:00.012]        // -> [version <= 0x00000000]
[00:35:00.012]      __var partNum = 0;
[00:35:00.012]        // -> [partNum <= 0x00000000]
[00:35:00.012]      __var manuf = 0;
[00:35:00.012]        // -> [manuf <= 0x00000000]
[00:35:00.012]      __var isMSPM0G1X0X_G3X0X = 0;
[00:35:00.012]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:35:00.012]      __var isProduction = 0;
[00:35:00.012]        // -> [isProduction <= 0x00000000]
[00:35:00.012]      __var continueId = 0;
[00:35:00.012]        // -> [continueId <= 0x00000000]
[00:35:00.013]      deviceID =   Read32(0x41C40004);
[00:35:00.026]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:35:00.026]        // -> [deviceID <= 0x2BB8802F]
[00:35:00.027]      version = deviceID >> 28;
[00:35:00.027]        // -> [version <= 0x00000002]
[00:35:00.027]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:35:00.027]        // -> [partNum <= 0x0000BB88]
[00:35:00.027]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:35:00.027]        // -> [manuf <= 0x00000017]
[00:35:00.027]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:35:00.027]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:35:00.027]      isProduction = (version > 0);
[00:35:00.027]        // -> [isProduction <= 0x00000001]
[00:35:00.027]    </block>
[00:35:00.028]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:35:00.028]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:35:00.028]        // =>  FALSE
[00:35:00.028]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:35:00.028]    </control>
[00:35:00.028]    <control if="continueId == 4" while="" timeout="0" info="">
[00:35:00.028]      // if-block "continueId == 4"
[00:35:00.028]        // =>  FALSE
[00:35:00.028]      // skip if-block "continueId == 4"
[00:35:00.028]    </control>
[00:35:00.028]    <control if="!isProduction" while="" timeout="0" info="">
[00:35:00.029]      // if-block "!isProduction"
[00:35:00.029]        // =>  FALSE
[00:35:00.029]      // skip if-block "!isProduction"
[00:35:00.029]    </control>
[00:35:00.029]  </sequence>
[00:35:00.029]  
[00:37:44.713]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:37:44.713]  
[00:37:44.721]  <debugvars>
[00:37:44.722]    // Pre-defined
[00:37:44.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:37:44.722]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:37:44.722]    __dp=0x00000000
[00:37:44.722]    __ap=0x00000000
[00:37:44.722]    __traceout=0x00000000      (Trace Disabled)
[00:37:44.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:37:44.722]    __FlashAddr=0x00000000
[00:37:44.722]    __FlashLen=0x00000000
[00:37:44.722]    __FlashArg=0x00000000
[00:37:44.723]    __FlashOp=0x00000000
[00:37:44.723]    __Result=0x00000000
[00:37:44.723]  </debugvars>
[00:37:44.723]  
[00:37:44.723]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:37:44.723]    <block atomic="false" info="">
[00:37:44.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:37:44.723]        // -> [isSWJ <= 0x00000001]
[00:37:44.723]      __var hasDormant = __protocol & 0x00020000;
[00:37:44.723]        // -> [hasDormant <= 0x00000000]
[00:37:44.723]      __var protType   = __protocol & 0x0000FFFF;
[00:37:44.723]        // -> [protType <= 0x00000002]
[00:37:44.724]    </block>
[00:37:44.724]    <control if="protType == 1" while="" timeout="0" info="">
[00:37:44.724]      // if-block "protType == 1"
[00:37:44.724]        // =>  FALSE
[00:37:44.724]      // skip if-block "protType == 1"
[00:37:44.724]    </control>
[00:37:44.724]    <control if="protType == 2" while="" timeout="0" info="">
[00:37:44.724]      // if-block "protType == 2"
[00:37:44.724]        // =>  TRUE
[00:37:44.724]      <control if="isSWJ" while="" timeout="0" info="">
[00:37:44.724]        // if-block "isSWJ"
[00:37:44.724]          // =>  TRUE
[00:37:44.724]        <control if="hasDormant" while="" timeout="0" info="">
[00:37:44.724]          // if-block "hasDormant"
[00:37:44.724]            // =>  FALSE
[00:37:44.724]          // skip if-block "hasDormant"
[00:37:44.725]        </control>
[00:37:44.725]        <control if="!hasDormant" while="" timeout="0" info="">
[00:37:44.725]          // if-block "!hasDormant"
[00:37:44.725]            // =>  TRUE
[00:37:44.725]          <block atomic="false" info="">
[00:37:44.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:37:44.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:37:44.727]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:37:44.729]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:37:44.729]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:37:44.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:37:44.732]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:37:44.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:37:44.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:37:44.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:37:44.736]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:37:44.738]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:37:44.738]          </block>
[00:37:44.738]          // end if-block "!hasDormant"
[00:37:44.738]        </control>
[00:37:44.738]        // end if-block "isSWJ"
[00:37:44.738]      </control>
[00:37:44.738]      <control if="!isSWJ" while="" timeout="0" info="">
[00:37:44.738]        // if-block "!isSWJ"
[00:37:44.738]          // =>  FALSE
[00:37:44.738]        // skip if-block "!isSWJ"
[00:37:44.738]      </control>
[00:37:44.738]      <block atomic="false" info="">
[00:37:44.738]        ReadDP(0x0);
[00:37:44.742]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:37:44.742]      </block>
[00:37:44.742]      // end if-block "protType == 2"
[00:37:44.742]    </control>
[00:37:44.743]  </sequence>
[00:37:44.743]  
[00:37:44.748]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:37:44.748]  
[00:37:44.748]  <debugvars>
[00:37:44.748]    // Pre-defined
[00:37:44.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:37:44.748]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:37:44.748]    __dp=0x00000000
[00:37:44.748]    __ap=0x00000000
[00:37:44.750]    __traceout=0x00000000      (Trace Disabled)
[00:37:44.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:37:44.750]    __FlashAddr=0x00000000
[00:37:44.750]    __FlashLen=0x00000000
[00:37:44.750]    __FlashArg=0x00000000
[00:37:44.750]    __FlashOp=0x00000000
[00:37:44.750]    __Result=0x00000000
[00:37:44.750]  </debugvars>
[00:37:44.750]  
[00:37:44.750]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:37:44.750]    <block atomic="false" info="">
[00:37:44.751]      __var SW_DP_ABORT       = 0x0;
[00:37:44.751]        // -> [SW_DP_ABORT <= 0x00000000]
[00:37:44.751]      __var DP_CTRL_STAT      = 0x4;
[00:37:44.751]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:37:44.751]      __var DP_SELECT         = 0x8;
[00:37:44.751]        // -> [DP_SELECT <= 0x00000008]
[00:37:44.751]      __var powered_down      = 0;
[00:37:44.751]        // -> [powered_down <= 0x00000000]
[00:37:44.751]      WriteDP(DP_SELECT, 0x00000000);
[00:37:44.753]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:37:44.753]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:37:44.755]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:37:44.755]        // -> [powered_down <= 0x00000001]
[00:37:44.755]    </block>
[00:37:44.755]    <control if="powered_down" while="" timeout="0" info="">
[00:37:44.755]      // if-block "powered_down"
[00:37:44.756]        // =>  TRUE
[00:37:44.756]      <block atomic="false" info="">
[00:37:44.756]        Message(0, "Debug/System power-up request sent");
[00:37:44.758]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:37:44.759]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:37:44.759]      </block>
[00:37:44.759]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:37:44.759]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:37:44.763]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:37:44.763]        // while-condition  =>  FALSE
[00:37:44.763]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:37:44.763]      </control>
[00:37:44.763]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:37:44.764]        // if-block "(__protocol & 0xFFFF) == 1"
[00:37:44.764]          // =>  FALSE
[00:37:44.764]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:37:44.764]      </control>
[00:37:44.764]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:37:44.764]        // if-block "(__protocol & 0xFFFF) == 2"
[00:37:44.764]          // =>  TRUE
[00:37:44.764]        <block atomic="false" info="">
[00:37:44.764]          Message(0, "executing SWD power up");
[00:37:44.767]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:37:44.769]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:37:44.769]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:37:44.771]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:37:44.771]        </block>
[00:37:44.771]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:37:44.771]      </control>
[00:37:44.771]      // end if-block "powered_down"
[00:37:44.771]    </control>
[00:37:44.771]    <block atomic="false" info="">
[00:37:44.771]      __var DEBUG_PORT_VAL    = 0;
[00:37:44.771]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:37:44.771]      __var ACCESS_POINT_VAL  = 0;
[00:37:44.771]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:37:44.771]      __ap = 1; 
[00:37:44.771]        // -> [__ap <= 0x00000001]
[00:37:44.771]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:37:44.779]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:37:44.779]      __ap = 4;
[00:37:44.779]        // -> [__ap <= 0x00000004]
[00:37:44.779]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:37:44.784]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:37:44.784]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:37:44.784]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:37:44.786]    </block>
[00:37:44.786]    <block atomic="false" info="">
[00:37:44.786]      __var nReset = 0x80;
[00:37:44.786]        // -> [nReset <= 0x00000080]
[00:37:44.786]      __var canReadPins = 0;
[00:37:44.787]        // -> [canReadPins <= 0x00000000]
[00:37:44.787]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:37:44.788]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:37:44.788]        // -> [canReadPins <= 0x00000001]
[00:37:44.788]    </block>
[00:37:44.788]    <control if="" while="1" timeout="200" info="">
[00:37:44.789]      // while "1"  (timeout="200")
[00:37:44.789]      // while-condition  =>  TRUE
[00:37:44.789]      // while "1"  (timeout="200")
[00:37:44.789]      // while-condition  =>  TRUE
[00:37:44.789]      // while "1"  (timeout="200")
[00:37:44.789]      // while-condition  =>  TRUE
[00:37:44.789]      // while "1"  (timeout="200")
[00:37:44.789]      // while-condition  =>  TRUE
[00:37:44.789]      // while "1"  (timeout="200")
[00:37:44.790]      // while-condition  =>  TRUE
[00:37:44.790]      // while "1"  (timeout="200")
[00:37:44.790]      // while-condition  =>  TRUE
[00:37:44.790]      // while "1"  (timeout="200")
[00:37:44.790]      // while-condition  =>  TRUE
[00:37:44.790]      // while "1"  (timeout="200")
[00:37:44.790]      // while-condition  =>  TRUE
[00:37:44.790]      // while "1"  (timeout="200")
[00:37:44.790]      // while-condition  =>  TRUE
[00:37:44.790]      // while "1"  (timeout="200")
[00:37:44.790]      // while-condition  =>  TRUE
[00:37:44.790]      // while "1"  (timeout="200")
[00:37:44.791]      // while-condition  =>  TRUE
[00:37:44.791]      // while "1"  (timeout="200")
[00:37:44.791]      // while-condition  =>  TRUE
[00:37:44.791]      // while "1"  (timeout="200")
[00:37:44.791]      // while-condition  =>  TRUE
[00:37:44.791]      // while "1"  (timeout="200")
[00:37:44.791]      // while-condition  =>  TRUE
[00:37:44.791]      // while "1"  (timeout="200")
[00:37:44.791]      // while-condition  =>  TRUE
[00:37:44.792]      // while "1"  (timeout="200")
[00:37:44.792]      // while-condition  =>  TRUE
[00:37:44.792]      // while "1"  (timeout="200")
[00:37:44.792]      // while-condition  =>  TRUE
[00:37:44.792]      // while "1"  (timeout="200")
[00:37:44.792]      // while-condition  =>  TRUE
[00:37:44.792]      // while "1"  (timeout="200")
[00:37:44.792]      // while-condition  =>  TRUE
[00:37:44.793]      // while "1"  (timeout="200")
[00:37:44.793]      // while-condition  =>  TRUE
[00:37:44.793]      // while "1"  (timeout="200")
[00:37:44.793]      // while-condition  =>  TRUE
[00:37:44.793]      // while "1"  (timeout="200")
[00:37:44.793]      // while-condition  =>  TRUE
[00:37:44.793]      // while "1"  (timeout="200")
[00:37:44.793]      // while-condition  =>  TRUE
[00:37:44.793]      // while "1"  (timeout="200")
[00:37:44.794]      // while-condition  =>  TRUE
[00:37:44.794]      // while "1"  (timeout="200")
[00:37:44.794]      // while-condition  =>  TRUE
[00:37:44.794]      // while "1"  (timeout="200")
[00:37:44.794]      // while-condition  =>  TRUE
[00:37:44.794]      // while "1"  (timeout="200")
[00:37:44.794]      // while-condition  =>  TRUE
[00:37:44.794]      // while "1"  (timeout="200")
[00:37:44.794]      // while-condition  =>  TRUE
[00:37:44.794]      // while "1"  (timeout="200")
[00:37:44.794]      // while-condition  =>  TRUE
[00:37:44.795]      // while "1"  (timeout="200")
[00:37:44.795]      // while-condition  =>  TRUE
[00:37:44.795]      // while "1"  (timeout="200")
[00:37:44.795]      // while-condition  =>  TRUE
[00:37:44.795]      // while "1"  (timeout="200")
[00:37:44.795]      // while-condition  =>  TRUE
[00:37:44.795]      // while "1"  (timeout="200")
[00:37:44.795]      // while-condition  =>  TRUE
[00:37:44.795]      // while "1"  (timeout="200")
[00:37:44.795]      // while-condition  =>  TRUE
[00:37:44.795]      // while "1"  (timeout="200")
[00:37:44.795]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.797]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.797]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.797]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.797]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.797]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.797]      // while-condition  =>  TRUE
[00:37:44.797]      // while "1"  (timeout="200")
[00:37:44.798]      // while-condition  =>  TRUE
[00:37:44.798]      // while "1"  (timeout="200")
[00:37:44.798]      // while  =>  TIMEOUT
[00:37:44.798]      // end while "1"
[00:37:44.798]    </control>
[00:37:44.798]    <control if="canReadPins" while="" timeout="0" info="">
[00:37:44.798]      // if-block "canReadPins"
[00:37:44.799]        // =>  TRUE
[00:37:44.799]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:37:44.799]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:37:44.800]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:37:44.800]        // while-condition  =>  FALSE
[00:37:44.801]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:37:44.801]      </control>
[00:37:44.801]      // end if-block "canReadPins"
[00:37:44.801]    </control>
[00:37:44.801]    <control if="!canReadPins" while="" timeout="0" info="">
[00:37:44.801]      // if-block "!canReadPins"
[00:37:44.801]        // =>  FALSE
[00:37:44.801]      // skip if-block "!canReadPins"
[00:37:44.801]    </control>
[00:37:44.801]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:37:44.801]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:37:44.801]        // =>  TRUE
[00:37:44.802]      <block atomic="false" info="">
[00:37:44.802]        WriteAP(0x00, 0x190008);
[00:37:44.809]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:37:44.809]        WriteAP(0xF0, 0x01);
[00:37:44.817]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:37:44.817]      </block>
[00:37:44.817]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:37:44.817]    </control>
[00:37:44.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:37:44.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:37:44.818]        // =>  FALSE
[00:37:44.818]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:37:44.818]    </control>
[00:37:44.818]    <block atomic="false" info="">
[00:37:44.818]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:37:44.821]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:37:44.821]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:37:44.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:37:44.824]      __ap = 0; //lets make sure we reset the access point selection
[00:37:44.824]        // -> [__ap <= 0x00000000]
[00:37:44.824]    </block>
[00:37:44.824]  </sequence>
[00:37:44.824]  
[00:37:44.849]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:37:44.849]  
[00:37:44.849]  <debugvars>
[00:37:44.849]    // Pre-defined
[00:37:44.849]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:37:44.849]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:37:44.849]    __dp=0x00000000
[00:37:44.849]    __ap=0x00000000
[00:37:44.849]    __traceout=0x00000000      (Trace Disabled)
[00:37:44.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:37:44.849]    __FlashAddr=0x00000000
[00:37:44.849]    __FlashLen=0x00000000
[00:37:44.850]    __FlashArg=0x00000000
[00:37:44.850]    __FlashOp=0x00000000
[00:37:44.850]    __Result=0x00000000
[00:37:44.850]  </debugvars>
[00:37:44.850]  
[00:37:44.850]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:37:44.850]    <block atomic="false" info="">
[00:37:44.850]      __var deviceID = 0;
[00:37:44.850]        // -> [deviceID <= 0x00000000]
[00:37:44.850]      __var version = 0;
[00:37:44.850]        // -> [version <= 0x00000000]
[00:37:44.851]      __var partNum = 0;
[00:37:44.851]        // -> [partNum <= 0x00000000]
[00:37:44.851]      __var manuf = 0;
[00:37:44.851]        // -> [manuf <= 0x00000000]
[00:37:44.851]      __var isMSPM0G1X0X_G3X0X = 0;
[00:37:44.851]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:37:44.851]      __var isProduction = 0;
[00:37:44.851]        // -> [isProduction <= 0x00000000]
[00:37:44.851]      __var continueId = 0;
[00:37:44.851]        // -> [continueId <= 0x00000000]
[00:37:44.852]      deviceID =   Read32(0x41C40004);
[00:37:44.856]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:37:44.856]        // -> [deviceID <= 0x2BB8802F]
[00:37:44.856]      version = deviceID >> 28;
[00:37:44.856]        // -> [version <= 0x00000002]
[00:37:44.856]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:37:44.856]        // -> [partNum <= 0x0000BB88]
[00:37:44.856]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:37:44.857]        // -> [manuf <= 0x00000017]
[00:37:44.857]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:37:44.857]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:37:44.857]      isProduction = (version > 0);
[00:37:44.857]        // -> [isProduction <= 0x00000001]
[00:37:44.857]    </block>
[00:37:44.857]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:37:44.857]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:37:44.857]        // =>  FALSE
[00:37:44.857]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:37:44.857]    </control>
[00:37:44.858]    <control if="continueId == 4" while="" timeout="0" info="">
[00:37:44.858]      // if-block "continueId == 4"
[00:37:44.858]        // =>  FALSE
[00:37:44.858]      // skip if-block "continueId == 4"
[00:37:44.858]    </control>
[00:37:44.858]    <control if="!isProduction" while="" timeout="0" info="">
[00:37:44.858]      // if-block "!isProduction"
[00:37:44.858]        // =>  FALSE
[00:37:44.858]      // skip if-block "!isProduction"
[00:37:44.858]    </control>
[00:37:44.858]  </sequence>
[00:37:44.858]  
[00:39:05.935]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:39:05.935]  
[00:39:05.936]  <debugvars>
[00:39:05.936]    // Pre-defined
[00:39:05.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:05.936]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:05.936]    __dp=0x00000000
[00:39:05.936]    __ap=0x00000000
[00:39:05.936]    __traceout=0x00000000      (Trace Disabled)
[00:39:05.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:05.937]    __FlashAddr=0x00000000
[00:39:05.937]    __FlashLen=0x00000000
[00:39:05.937]    __FlashArg=0x00000000
[00:39:05.937]    __FlashOp=0x00000000
[00:39:05.937]    __Result=0x00000000
[00:39:05.937]  </debugvars>
[00:39:05.937]  
[00:39:05.937]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:39:05.937]    <block atomic="false" info="">
[00:39:05.938]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:39:05.938]        // -> [isSWJ <= 0x00000001]
[00:39:05.938]      __var hasDormant = __protocol & 0x00020000;
[00:39:05.938]        // -> [hasDormant <= 0x00000000]
[00:39:05.938]      __var protType   = __protocol & 0x0000FFFF;
[00:39:05.938]        // -> [protType <= 0x00000002]
[00:39:05.938]    </block>
[00:39:05.938]    <control if="protType == 1" while="" timeout="0" info="">
[00:39:05.938]      // if-block "protType == 1"
[00:39:05.938]        // =>  FALSE
[00:39:05.938]      // skip if-block "protType == 1"
[00:39:05.938]    </control>
[00:39:05.938]    <control if="protType == 2" while="" timeout="0" info="">
[00:39:05.938]      // if-block "protType == 2"
[00:39:05.939]        // =>  TRUE
[00:39:05.939]      <control if="isSWJ" while="" timeout="0" info="">
[00:39:05.939]        // if-block "isSWJ"
[00:39:05.939]          // =>  TRUE
[00:39:05.939]        <control if="hasDormant" while="" timeout="0" info="">
[00:39:05.939]          // if-block "hasDormant"
[00:39:05.939]            // =>  FALSE
[00:39:05.940]          // skip if-block "hasDormant"
[00:39:05.940]        </control>
[00:39:05.940]        <control if="!hasDormant" while="" timeout="0" info="">
[00:39:05.940]          // if-block "!hasDormant"
[00:39:05.940]            // =>  TRUE
[00:39:05.940]          <block atomic="false" info="">
[00:39:05.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:39:05.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:05.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:39:05.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:39:05.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:39:05.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:05.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:39:05.952]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:39:05.952]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:39:05.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:39:05.957]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:39:05.958]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:39:05.959]          </block>
[00:39:05.959]          // end if-block "!hasDormant"
[00:39:05.959]        </control>
[00:39:05.959]        // end if-block "isSWJ"
[00:39:05.959]      </control>
[00:39:05.959]      <control if="!isSWJ" while="" timeout="0" info="">
[00:39:05.959]        // if-block "!isSWJ"
[00:39:05.959]          // =>  FALSE
[00:39:05.959]        // skip if-block "!isSWJ"
[00:39:05.959]      </control>
[00:39:05.959]      <block atomic="false" info="">
[00:39:05.959]        ReadDP(0x0);
[00:39:05.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:39:05.960]      </block>
[00:39:05.961]      // end if-block "protType == 2"
[00:39:05.961]    </control>
[00:39:05.961]  </sequence>
[00:39:05.961]  
[00:39:05.964]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:39:05.964]  
[00:39:05.964]  <debugvars>
[00:39:05.964]    // Pre-defined
[00:39:05.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:05.964]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:05.964]    __dp=0x00000000
[00:39:05.964]    __ap=0x00000000
[00:39:05.964]    __traceout=0x00000000      (Trace Disabled)
[00:39:05.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:05.965]    __FlashAddr=0x00000000
[00:39:05.965]    __FlashLen=0x00000000
[00:39:05.965]    __FlashArg=0x00000000
[00:39:05.965]    __FlashOp=0x00000000
[00:39:05.965]    __Result=0x00000000
[00:39:05.965]  </debugvars>
[00:39:05.966]  
[00:39:05.966]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:39:05.966]    <block atomic="false" info="">
[00:39:05.966]      __var SW_DP_ABORT       = 0x0;
[00:39:05.966]        // -> [SW_DP_ABORT <= 0x00000000]
[00:39:05.966]      __var DP_CTRL_STAT      = 0x4;
[00:39:05.966]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:39:05.966]      __var DP_SELECT         = 0x8;
[00:39:05.966]        // -> [DP_SELECT <= 0x00000008]
[00:39:05.966]      __var powered_down      = 0;
[00:39:05.966]        // -> [powered_down <= 0x00000000]
[00:39:05.966]      WriteDP(DP_SELECT, 0x00000000);
[00:39:05.968]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:39:05.968]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:39:05.970]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:39:05.970]        // -> [powered_down <= 0x00000001]
[00:39:05.970]    </block>
[00:39:05.970]    <control if="powered_down" while="" timeout="0" info="">
[00:39:05.970]      // if-block "powered_down"
[00:39:05.971]        // =>  TRUE
[00:39:05.971]      <block atomic="false" info="">
[00:39:05.971]        Message(0, "Debug/System power-up request sent");
[00:39:05.971]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:39:05.972]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:39:05.973]      </block>
[00:39:05.973]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:39:05.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:39:05.974]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:39:05.974]        // while-condition  =>  FALSE
[00:39:05.975]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:39:05.975]      </control>
[00:39:05.975]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:39:05.975]        // if-block "(__protocol & 0xFFFF) == 1"
[00:39:05.975]          // =>  FALSE
[00:39:05.975]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:39:05.975]      </control>
[00:39:05.975]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:39:05.975]        // if-block "(__protocol & 0xFFFF) == 2"
[00:39:05.976]          // =>  TRUE
[00:39:05.976]        <block atomic="false" info="">
[00:39:05.976]          Message(0, "executing SWD power up");
[00:39:05.976]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:39:05.978]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:39:05.978]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:39:05.980]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:39:05.980]        </block>
[00:39:05.980]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:39:05.980]      </control>
[00:39:05.981]      // end if-block "powered_down"
[00:39:05.981]    </control>
[00:39:05.981]    <block atomic="false" info="">
[00:39:05.981]      __var DEBUG_PORT_VAL    = 0;
[00:39:05.981]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:39:05.981]      __var ACCESS_POINT_VAL  = 0;
[00:39:05.981]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:39:05.981]      __ap = 1; 
[00:39:05.981]        // -> [__ap <= 0x00000001]
[00:39:05.981]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:39:05.986]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:39:05.986]      __ap = 4;
[00:39:05.986]        // -> [__ap <= 0x00000004]
[00:39:05.986]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:05.990]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:39:05.991]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:39:05.991]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:05.991]    </block>
[00:39:05.991]    <block atomic="false" info="">
[00:39:05.991]      __var nReset = 0x80;
[00:39:05.991]        // -> [nReset <= 0x00000080]
[00:39:05.991]      __var canReadPins = 0;
[00:39:05.991]        // -> [canReadPins <= 0x00000000]
[00:39:05.991]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:39:05.993]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:39:05.993]        // -> [canReadPins <= 0x00000001]
[00:39:05.993]    </block>
[00:39:05.993]    <control if="" while="1" timeout="200" info="">
[00:39:05.993]      // while "1"  (timeout="200")
[00:39:05.994]      // while-condition  =>  TRUE
[00:39:05.994]      // while "1"  (timeout="200")
[00:39:05.994]      // while-condition  =>  TRUE
[00:39:05.994]      // while "1"  (timeout="200")
[00:39:05.994]      // while-condition  =>  TRUE
[00:39:05.994]      // while "1"  (timeout="200")
[00:39:05.994]      // while-condition  =>  TRUE
[00:39:05.994]      // while "1"  (timeout="200")
[00:39:05.994]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.995]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.995]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.995]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.995]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.995]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.995]      // while-condition  =>  TRUE
[00:39:05.995]      // while "1"  (timeout="200")
[00:39:05.996]      // while-condition  =>  TRUE
[00:39:05.996]      // while "1"  (timeout="200")
[00:39:05.996]      // while-condition  =>  TRUE
[00:39:05.996]      // while "1"  (timeout="200")
[00:39:05.996]      // while-condition  =>  TRUE
[00:39:05.996]      // while "1"  (timeout="200")
[00:39:05.996]      // while-condition  =>  TRUE
[00:39:05.996]      // while "1"  (timeout="200")
[00:39:05.996]      // while-condition  =>  TRUE
[00:39:05.996]      // while "1"  (timeout="200")
[00:39:05.996]      // while-condition  =>  TRUE
[00:39:05.997]      // while "1"  (timeout="200")
[00:39:05.997]      // while-condition  =>  TRUE
[00:39:05.997]      // while "1"  (timeout="200")
[00:39:05.997]      // while-condition  =>  TRUE
[00:39:05.997]      // while "1"  (timeout="200")
[00:39:05.997]      // while-condition  =>  TRUE
[00:39:05.997]      // while "1"  (timeout="200")
[00:39:05.997]      // while-condition  =>  TRUE
[00:39:05.997]      // while "1"  (timeout="200")
[00:39:05.997]      // while-condition  =>  TRUE
[00:39:05.997]      // while "1"  (timeout="200")
[00:39:05.997]      // while-condition  =>  TRUE
[00:39:05.998]      // while "1"  (timeout="200")
[00:39:05.998]      // while-condition  =>  TRUE
[00:39:05.998]      // while "1"  (timeout="200")
[00:39:05.998]      // while-condition  =>  TRUE
[00:39:05.998]      // while "1"  (timeout="200")
[00:39:05.998]      // while-condition  =>  TRUE
[00:39:05.998]      // while "1"  (timeout="200")
[00:39:05.999]      // while-condition  =>  TRUE
[00:39:05.999]      // while "1"  (timeout="200")
[00:39:05.999]      // while-condition  =>  TRUE
[00:39:05.999]      // while "1"  (timeout="200")
[00:39:05.999]      // while-condition  =>  TRUE
[00:39:05.999]      // while "1"  (timeout="200")
[00:39:05.999]      // while-condition  =>  TRUE
[00:39:05.999]      // while "1"  (timeout="200")
[00:39:05.999]      // while-condition  =>  TRUE
[00:39:05.999]      // while "1"  (timeout="200")
[00:39:05.999]      // while-condition  =>  TRUE
[00:39:06.000]      // while "1"  (timeout="200")
[00:39:06.000]      // while-condition  =>  TRUE
[00:39:06.000]      // while "1"  (timeout="200")
[00:39:06.000]      // while-condition  =>  TRUE
[00:39:06.000]      // while "1"  (timeout="200")
[00:39:06.000]      // while-condition  =>  TRUE
[00:39:06.000]      // while "1"  (timeout="200")
[00:39:06.000]      // while-condition  =>  TRUE
[00:39:06.000]      // while "1"  (timeout="200")
[00:39:06.000]      // while-condition  =>  TRUE
[00:39:06.000]      // while "1"  (timeout="200")
[00:39:06.001]      // while-condition  =>  TRUE
[00:39:06.001]      // while "1"  (timeout="200")
[00:39:06.001]      // while  =>  TIMEOUT
[00:39:06.001]      // end while "1"
[00:39:06.001]    </control>
[00:39:06.001]    <control if="canReadPins" while="" timeout="0" info="">
[00:39:06.001]      // if-block "canReadPins"
[00:39:06.001]        // =>  TRUE
[00:39:06.001]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:39:06.001]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:39:06.003]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:39:06.003]        // while-condition  =>  FALSE
[00:39:06.004]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:39:06.004]      </control>
[00:39:06.004]      // end if-block "canReadPins"
[00:39:06.004]    </control>
[00:39:06.004]    <control if="!canReadPins" while="" timeout="0" info="">
[00:39:06.004]      // if-block "!canReadPins"
[00:39:06.004]        // =>  FALSE
[00:39:06.004]      // skip if-block "!canReadPins"
[00:39:06.004]    </control>
[00:39:06.004]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:39:06.004]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:06.005]        // =>  TRUE
[00:39:06.005]      <block atomic="false" info="">
[00:39:06.005]        WriteAP(0x00, 0x190008);
[00:39:06.007]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:06.007]        WriteAP(0xF0, 0x01);
[00:39:06.013]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:39:06.013]      </block>
[00:39:06.013]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:39:06.013]    </control>
[00:39:06.013]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:39:06.013]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:06.013]        // =>  FALSE
[00:39:06.013]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:39:06.013]    </control>
[00:39:06.014]    <block atomic="false" info="">
[00:39:06.014]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:39:06.019]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:39:06.019]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:39:06.020]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:39:06.020]      __ap = 0; //lets make sure we reset the access point selection
[00:39:06.020]        // -> [__ap <= 0x00000000]
[00:39:06.020]    </block>
[00:39:06.020]  </sequence>
[00:39:06.020]  
[00:39:06.046]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:39:06.046]  
[00:39:06.047]  <debugvars>
[00:39:06.047]    // Pre-defined
[00:39:06.047]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:39:06.047]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:39:06.047]    __dp=0x00000000
[00:39:06.047]    __ap=0x00000000
[00:39:06.047]    __traceout=0x00000000      (Trace Disabled)
[00:39:06.048]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:39:06.048]    __FlashAddr=0x00000000
[00:39:06.048]    __FlashLen=0x00000000
[00:39:06.048]    __FlashArg=0x00000000
[00:39:06.048]    __FlashOp=0x00000000
[00:39:06.048]    __Result=0x00000000
[00:39:06.049]  </debugvars>
[00:39:06.049]  
[00:39:06.049]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:39:06.049]    <block atomic="false" info="">
[00:39:06.049]      __var deviceID = 0;
[00:39:06.049]        // -> [deviceID <= 0x00000000]
[00:39:06.049]      __var version = 0;
[00:39:06.049]        // -> [version <= 0x00000000]
[00:39:06.049]      __var partNum = 0;
[00:39:06.049]        // -> [partNum <= 0x00000000]
[00:39:06.049]      __var manuf = 0;
[00:39:06.049]        // -> [manuf <= 0x00000000]
[00:39:06.050]      __var isMSPM0G1X0X_G3X0X = 0;
[00:39:06.050]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:39:06.050]      __var isProduction = 0;
[00:39:06.050]        // -> [isProduction <= 0x00000000]
[00:39:06.050]      __var continueId = 0;
[00:39:06.050]        // -> [continueId <= 0x00000000]
[00:39:06.050]      deviceID =   Read32(0x41C40004);
[00:39:06.058]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:39:06.059]        // -> [deviceID <= 0x2BB8802F]
[00:39:06.059]      version = deviceID >> 28;
[00:39:06.059]        // -> [version <= 0x00000002]
[00:39:06.059]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:39:06.059]        // -> [partNum <= 0x0000BB88]
[00:39:06.059]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:39:06.059]        // -> [manuf <= 0x00000017]
[00:39:06.059]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:39:06.059]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:39:06.060]      isProduction = (version > 0);
[00:39:06.060]        // -> [isProduction <= 0x00000001]
[00:39:06.060]    </block>
[00:39:06.060]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:39:06.060]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:39:06.060]        // =>  FALSE
[00:39:06.060]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:39:06.060]    </control>
[00:39:06.060]    <control if="continueId == 4" while="" timeout="0" info="">
[00:39:06.060]      // if-block "continueId == 4"
[00:39:06.060]        // =>  FALSE
[00:39:06.060]      // skip if-block "continueId == 4"
[00:39:06.060]    </control>
[00:39:06.060]    <control if="!isProduction" while="" timeout="0" info="">
[00:39:06.061]      // if-block "!isProduction"
[00:39:06.061]        // =>  FALSE
[00:39:06.061]      // skip if-block "!isProduction"
[00:39:06.061]    </control>
[00:39:06.061]  </sequence>
[00:39:06.061]  
[00:46:09.556]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:46:09.556]  
[00:46:09.557]  <debugvars>
[00:46:09.557]    // Pre-defined
[00:46:09.557]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:09.557]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:46:09.557]    __dp=0x00000000
[00:46:09.557]    __ap=0x00000000
[00:46:09.557]    __traceout=0x00000000      (Trace Disabled)
[00:46:09.557]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:09.557]    __FlashAddr=0x00000000
[00:46:09.557]    __FlashLen=0x00000000
[00:46:09.558]    __FlashArg=0x00000000
[00:46:09.558]    __FlashOp=0x00000000
[00:46:09.558]    __Result=0x00000000
[00:46:09.558]  </debugvars>
[00:46:09.558]  
[00:46:09.559]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:46:09.559]    <block atomic="false" info="">
[00:46:09.559]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:46:09.559]        // -> [isSWJ <= 0x00000001]
[00:46:09.559]      __var hasDormant = __protocol & 0x00020000;
[00:46:09.559]        // -> [hasDormant <= 0x00000000]
[00:46:09.559]      __var protType   = __protocol & 0x0000FFFF;
[00:46:09.559]        // -> [protType <= 0x00000002]
[00:46:09.560]    </block>
[00:46:09.560]    <control if="protType == 1" while="" timeout="0" info="">
[00:46:09.560]      // if-block "protType == 1"
[00:46:09.560]        // =>  FALSE
[00:46:09.560]      // skip if-block "protType == 1"
[00:46:09.560]    </control>
[00:46:09.560]    <control if="protType == 2" while="" timeout="0" info="">
[00:46:09.560]      // if-block "protType == 2"
[00:46:09.561]        // =>  TRUE
[00:46:09.561]      <control if="isSWJ" while="" timeout="0" info="">
[00:46:09.561]        // if-block "isSWJ"
[00:46:09.561]          // =>  TRUE
[00:46:09.561]        <control if="hasDormant" while="" timeout="0" info="">
[00:46:09.561]          // if-block "hasDormant"
[00:46:09.561]            // =>  FALSE
[00:46:09.562]          // skip if-block "hasDormant"
[00:46:09.562]        </control>
[00:46:09.562]        <control if="!hasDormant" while="" timeout="0" info="">
[00:46:09.562]          // if-block "!hasDormant"
[00:46:09.562]            // =>  TRUE
[00:46:09.562]          <block atomic="false" info="">
[00:46:09.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:46:09.564]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:09.564]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:46:09.565]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:46:09.565]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:46:09.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:09.567]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:46:09.568]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:46:09.568]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:46:09.570]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:09.571]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:46:09.580]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:46:09.580]          </block>
[00:46:09.580]          // end if-block "!hasDormant"
[00:46:09.580]        </control>
[00:46:09.580]        // end if-block "isSWJ"
[00:46:09.581]      </control>
[00:46:09.581]      <control if="!isSWJ" while="" timeout="0" info="">
[00:46:09.581]        // if-block "!isSWJ"
[00:46:09.581]          // =>  FALSE
[00:46:09.581]        // skip if-block "!isSWJ"
[00:46:09.581]      </control>
[00:46:09.581]      <block atomic="false" info="">
[00:46:09.581]        ReadDP(0x0);
[00:46:09.583]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:46:09.583]      </block>
[00:46:09.583]      // end if-block "protType == 2"
[00:46:09.584]    </control>
[00:46:09.584]  </sequence>
[00:46:09.584]  
[00:46:09.589]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:46:09.589]  
[00:46:09.589]  <debugvars>
[00:46:09.590]    // Pre-defined
[00:46:09.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:09.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:46:09.590]    __dp=0x00000000
[00:46:09.590]    __ap=0x00000000
[00:46:09.590]    __traceout=0x00000000      (Trace Disabled)
[00:46:09.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:09.590]    __FlashAddr=0x00000000
[00:46:09.590]    __FlashLen=0x00000000
[00:46:09.590]    __FlashArg=0x00000000
[00:46:09.591]    __FlashOp=0x00000000
[00:46:09.591]    __Result=0x00000000
[00:46:09.591]  </debugvars>
[00:46:09.591]  
[00:46:09.591]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:46:09.591]    <block atomic="false" info="">
[00:46:09.591]      __var SW_DP_ABORT       = 0x0;
[00:46:09.591]        // -> [SW_DP_ABORT <= 0x00000000]
[00:46:09.591]      __var DP_CTRL_STAT      = 0x4;
[00:46:09.591]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:46:09.592]      __var DP_SELECT         = 0x8;
[00:46:09.592]        // -> [DP_SELECT <= 0x00000008]
[00:46:09.592]      __var powered_down      = 0;
[00:46:09.592]        // -> [powered_down <= 0x00000000]
[00:46:09.592]      WriteDP(DP_SELECT, 0x00000000);
[00:46:09.594]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:46:09.595]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:46:09.597]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:46:09.597]        // -> [powered_down <= 0x00000001]
[00:46:09.597]    </block>
[00:46:09.597]    <control if="powered_down" while="" timeout="0" info="">
[00:46:09.598]      // if-block "powered_down"
[00:46:09.598]        // =>  TRUE
[00:46:09.598]      <block atomic="false" info="">
[00:46:09.598]        Message(0, "Debug/System power-up request sent");
[00:46:09.600]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:46:09.609]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:46:09.609]      </block>
[00:46:09.610]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:46:09.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:46:09.611]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:46:09.611]        // while-condition  =>  FALSE
[00:46:09.611]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:46:09.611]      </control>
[00:46:09.611]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:46:09.611]        // if-block "(__protocol & 0xFFFF) == 1"
[00:46:09.613]          // =>  FALSE
[00:46:09.613]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:46:09.613]      </control>
[00:46:09.613]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:46:09.613]        // if-block "(__protocol & 0xFFFF) == 2"
[00:46:09.613]          // =>  TRUE
[00:46:09.613]        <block atomic="false" info="">
[00:46:09.613]          Message(0, "executing SWD power up");
[00:46:09.615]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:46:09.617]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:46:09.617]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:46:09.619]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:46:09.619]        </block>
[00:46:09.619]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:46:09.619]      </control>
[00:46:09.619]      // end if-block "powered_down"
[00:46:09.619]    </control>
[00:46:09.619]    <block atomic="false" info="">
[00:46:09.619]      __var DEBUG_PORT_VAL    = 0;
[00:46:09.620]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:46:09.620]      __var ACCESS_POINT_VAL  = 0;
[00:46:09.620]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:46:09.620]      __ap = 1; 
[00:46:09.620]        // -> [__ap <= 0x00000001]
[00:46:09.620]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:46:09.625]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:46:09.625]      __ap = 4;
[00:46:09.625]        // -> [__ap <= 0x00000004]
[00:46:09.625]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:46:09.632]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:46:09.632]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:46:09.632]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:46:09.634]    </block>
[00:46:09.634]    <block atomic="false" info="">
[00:46:09.635]      __var nReset = 0x80;
[00:46:09.635]        // -> [nReset <= 0x00000080]
[00:46:09.635]      __var canReadPins = 0;
[00:46:09.635]        // -> [canReadPins <= 0x00000000]
[00:46:09.635]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:46:09.637]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:46:09.637]        // -> [canReadPins <= 0x00000001]
[00:46:09.637]    </block>
[00:46:09.637]    <control if="" while="1" timeout="200" info="">
[00:46:09.637]      // while "1"  (timeout="200")
[00:46:09.638]      // while-condition  =>  TRUE
[00:46:09.638]      // while "1"  (timeout="200")
[00:46:09.638]      // while-condition  =>  TRUE
[00:46:09.638]      // while "1"  (timeout="200")
[00:46:09.638]      // while-condition  =>  TRUE
[00:46:09.638]      // while "1"  (timeout="200")
[00:46:09.638]      // while-condition  =>  TRUE
[00:46:09.638]      // while "1"  (timeout="200")
[00:46:09.638]      // while-condition  =>  TRUE
[00:46:09.638]      // while "1"  (timeout="200")
[00:46:09.638]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.640]      // while "1"  (timeout="200")
[00:46:09.640]      // while-condition  =>  TRUE
[00:46:09.641]      // while "1"  (timeout="200")
[00:46:09.641]      // while-condition  =>  TRUE
[00:46:09.641]      // while "1"  (timeout="200")
[00:46:09.641]      // while-condition  =>  TRUE
[00:46:09.641]      // while "1"  (timeout="200")
[00:46:09.641]      // while-condition  =>  TRUE
[00:46:09.641]      // while "1"  (timeout="200")
[00:46:09.641]      // while-condition  =>  TRUE
[00:46:09.642]      // while "1"  (timeout="200")
[00:46:09.642]      // while  =>  TIMEOUT
[00:46:09.642]      // end while "1"
[00:46:09.642]    </control>
[00:46:09.642]    <control if="canReadPins" while="" timeout="0" info="">
[00:46:09.643]      // if-block "canReadPins"
[00:46:09.643]        // =>  TRUE
[00:46:09.643]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:46:09.643]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:46:09.646]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:46:09.646]        // while-condition  =>  FALSE
[00:46:09.647]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:46:09.647]      </control>
[00:46:09.647]      // end if-block "canReadPins"
[00:46:09.647]    </control>
[00:46:09.647]    <control if="!canReadPins" while="" timeout="0" info="">
[00:46:09.647]      // if-block "!canReadPins"
[00:46:09.647]        // =>  FALSE
[00:46:09.647]      // skip if-block "!canReadPins"
[00:46:09.647]    </control>
[00:46:09.647]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:46:09.648]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:46:09.648]        // =>  TRUE
[00:46:09.648]      <block atomic="false" info="">
[00:46:09.648]        WriteAP(0x00, 0x190008);
[00:46:09.652]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:46:09.652]        WriteAP(0xF0, 0x01);
[00:46:09.656]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:46:09.657]      </block>
[00:46:09.657]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:46:09.657]    </control>
[00:46:09.657]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:46:09.657]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:46:09.657]        // =>  FALSE
[00:46:09.657]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:46:09.657]    </control>
[00:46:09.657]    <block atomic="false" info="">
[00:46:09.657]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:46:09.661]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:46:09.661]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:46:09.661]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:46:09.664]      __ap = 0; //lets make sure we reset the access point selection
[00:46:09.664]        // -> [__ap <= 0x00000000]
[00:46:09.664]    </block>
[00:46:09.664]  </sequence>
[00:46:09.664]  
[00:46:09.700]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:46:09.700]  
[00:46:09.700]  <debugvars>
[00:46:09.700]    // Pre-defined
[00:46:09.700]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:09.700]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:46:09.700]    __dp=0x00000000
[00:46:09.700]    __ap=0x00000000
[00:46:09.700]    __traceout=0x00000000      (Trace Disabled)
[00:46:09.700]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:09.700]    __FlashAddr=0x00000000
[00:46:09.701]    __FlashLen=0x00000000
[00:46:09.701]    __FlashArg=0x00000000
[00:46:09.701]    __FlashOp=0x00000000
[00:46:09.701]    __Result=0x00000000
[00:46:09.701]  </debugvars>
[00:46:09.701]  
[00:46:09.701]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:46:09.701]    <block atomic="false" info="">
[00:46:09.701]      __var deviceID = 0;
[00:46:09.701]        // -> [deviceID <= 0x00000000]
[00:46:09.701]      __var version = 0;
[00:46:09.701]        // -> [version <= 0x00000000]
[00:46:09.701]      __var partNum = 0;
[00:46:09.701]        // -> [partNum <= 0x00000000]
[00:46:09.701]      __var manuf = 0;
[00:46:09.702]        // -> [manuf <= 0x00000000]
[00:46:09.702]      __var isMSPM0G1X0X_G3X0X = 0;
[00:46:09.702]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:46:09.702]      __var isProduction = 0;
[00:46:09.702]        // -> [isProduction <= 0x00000000]
[00:46:09.702]      __var continueId = 0;
[00:46:09.703]        // -> [continueId <= 0x00000000]
[00:46:09.703]      deviceID =   Read32(0x41C40004);
[00:46:09.713]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:46:09.713]        // -> [deviceID <= 0x2BB8802F]
[00:46:09.713]      version = deviceID >> 28;
[00:46:09.713]        // -> [version <= 0x00000002]
[00:46:09.713]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:46:09.714]        // -> [partNum <= 0x0000BB88]
[00:46:09.714]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:46:09.714]        // -> [manuf <= 0x00000017]
[00:46:09.714]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:46:09.714]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:46:09.714]      isProduction = (version > 0);
[00:46:09.714]        // -> [isProduction <= 0x00000001]
[00:46:09.714]    </block>
[00:46:09.714]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:46:09.715]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:46:09.715]        // =>  FALSE
[00:46:09.715]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:46:09.715]    </control>
[00:46:09.715]    <control if="continueId == 4" while="" timeout="0" info="">
[00:46:09.715]      // if-block "continueId == 4"
[00:46:09.715]        // =>  FALSE
[00:46:09.715]      // skip if-block "continueId == 4"
[00:46:09.715]    </control>
[00:46:09.715]    <control if="!isProduction" while="" timeout="0" info="">
[00:46:09.716]      // if-block "!isProduction"
[00:46:09.716]        // =>  FALSE
[00:46:09.716]      // skip if-block "!isProduction"
[00:46:09.716]    </control>
[00:46:09.716]  </sequence>
[00:46:09.716]  
[00:46:16.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:46:16.204]  
[00:46:16.204]  <debugvars>
[00:46:16.204]    // Pre-defined
[00:46:16.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:16.205]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:46:16.205]    __dp=0x00000000
[00:46:16.205]    __ap=0x00000000
[00:46:16.205]    __traceout=0x00000000      (Trace Disabled)
[00:46:16.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:16.205]    __FlashAddr=0x00000000
[00:46:16.205]    __FlashLen=0x00000000
[00:46:16.205]    __FlashArg=0x00000000
[00:46:16.205]    __FlashOp=0x00000000
[00:46:16.205]    __Result=0x00000000
[00:46:16.205]  </debugvars>
[00:46:16.205]  
[00:46:16.205]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:46:16.205]    <block atomic="false" info="">
[00:46:16.205]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:46:16.207]        // -> [isSWJ <= 0x00000001]
[00:46:16.207]      __var hasDormant = __protocol & 0x00020000;
[00:46:16.207]        // -> [hasDormant <= 0x00000000]
[00:46:16.207]      __var protType   = __protocol & 0x0000FFFF;
[00:46:16.207]        // -> [protType <= 0x00000002]
[00:46:16.207]    </block>
[00:46:16.207]    <control if="protType == 1" while="" timeout="0" info="">
[00:46:16.207]      // if-block "protType == 1"
[00:46:16.207]        // =>  FALSE
[00:46:16.207]      // skip if-block "protType == 1"
[00:46:16.207]    </control>
[00:46:16.207]    <control if="protType == 2" while="" timeout="0" info="">
[00:46:16.207]      // if-block "protType == 2"
[00:46:16.208]        // =>  TRUE
[00:46:16.208]      <control if="isSWJ" while="" timeout="0" info="">
[00:46:16.208]        // if-block "isSWJ"
[00:46:16.208]          // =>  TRUE
[00:46:16.208]        <control if="hasDormant" while="" timeout="0" info="">
[00:46:16.208]          // if-block "hasDormant"
[00:46:16.208]            // =>  FALSE
[00:46:16.208]          // skip if-block "hasDormant"
[00:46:16.208]        </control>
[00:46:16.208]        <control if="!hasDormant" while="" timeout="0" info="">
[00:46:16.208]          // if-block "!hasDormant"
[00:46:16.209]            // =>  TRUE
[00:46:16.209]          <block atomic="false" info="">
[00:46:16.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:46:16.211]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:16.211]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:46:16.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:46:16.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:46:16.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:16.213]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:46:16.215]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:46:16.215]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:46:16.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:46:16.218]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:46:16.219]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:46:16.219]          </block>
[00:46:16.220]          // end if-block "!hasDormant"
[00:46:16.220]        </control>
[00:46:16.220]        // end if-block "isSWJ"
[00:46:16.220]      </control>
[00:46:16.220]      <control if="!isSWJ" while="" timeout="0" info="">
[00:46:16.220]        // if-block "!isSWJ"
[00:46:16.220]          // =>  FALSE
[00:46:16.220]        // skip if-block "!isSWJ"
[00:46:16.220]      </control>
[00:46:16.220]      <block atomic="false" info="">
[00:46:16.221]        ReadDP(0x0);
[00:46:16.222]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:46:16.222]      </block>
[00:46:16.222]      // end if-block "protType == 2"
[00:46:16.223]    </control>
[00:46:16.223]  </sequence>
[00:46:16.223]  
[00:46:16.226]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:46:16.226]  
[00:46:16.226]  <debugvars>
[00:46:16.226]    // Pre-defined
[00:46:16.226]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:16.226]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:46:16.226]    __dp=0x00000000
[00:46:16.226]    __ap=0x00000000
[00:46:16.226]    __traceout=0x00000000      (Trace Disabled)
[00:46:16.226]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:16.226]    __FlashAddr=0x00000000
[00:46:16.227]    __FlashLen=0x00000000
[00:46:16.227]    __FlashArg=0x00000000
[00:46:16.227]    __FlashOp=0x00000000
[00:46:16.227]    __Result=0x00000000
[00:46:16.227]  </debugvars>
[00:46:16.227]  
[00:46:16.227]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:46:16.227]    <block atomic="false" info="">
[00:46:16.227]      __var SW_DP_ABORT       = 0x0;
[00:46:16.228]        // -> [SW_DP_ABORT <= 0x00000000]
[00:46:16.228]      __var DP_CTRL_STAT      = 0x4;
[00:46:16.228]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:46:16.228]      __var DP_SELECT         = 0x8;
[00:46:16.228]        // -> [DP_SELECT <= 0x00000008]
[00:46:16.228]      __var powered_down      = 0;
[00:46:16.228]        // -> [powered_down <= 0x00000000]
[00:46:16.228]      WriteDP(DP_SELECT, 0x00000000);
[00:46:16.234]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:46:16.234]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:46:16.237]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:46:16.237]        // -> [powered_down <= 0x00000001]
[00:46:16.237]    </block>
[00:46:16.237]    <control if="powered_down" while="" timeout="0" info="">
[00:46:16.238]      // if-block "powered_down"
[00:46:16.238]        // =>  TRUE
[00:46:16.238]      <block atomic="false" info="">
[00:46:16.238]        Message(0, "Debug/System power-up request sent");
[00:46:16.240]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:46:16.244]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:46:16.244]      </block>
[00:46:16.244]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:46:16.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:46:16.249]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:46:16.250]        // while-condition  =>  FALSE
[00:46:16.250]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:46:16.250]      </control>
[00:46:16.250]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:46:16.250]        // if-block "(__protocol & 0xFFFF) == 1"
[00:46:16.250]          // =>  FALSE
[00:46:16.250]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:46:16.250]      </control>
[00:46:16.250]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:46:16.250]        // if-block "(__protocol & 0xFFFF) == 2"
[00:46:16.251]          // =>  TRUE
[00:46:16.251]        <block atomic="false" info="">
[00:46:16.251]          Message(0, "executing SWD power up");
[00:46:16.253]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:46:16.255]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:46:16.255]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:46:16.259]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:46:16.259]        </block>
[00:46:16.259]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:46:16.259]      </control>
[00:46:16.260]      // end if-block "powered_down"
[00:46:16.260]    </control>
[00:46:16.260]    <block atomic="false" info="">
[00:46:16.260]      __var DEBUG_PORT_VAL    = 0;
[00:46:16.260]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:46:16.260]      __var ACCESS_POINT_VAL  = 0;
[00:46:16.260]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:46:16.260]      __ap = 1; 
[00:46:16.260]        // -> [__ap <= 0x00000001]
[00:46:16.260]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:46:16.265]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:46:16.265]      __ap = 4;
[00:46:16.265]        // -> [__ap <= 0x00000004]
[00:46:16.265]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:46:16.268]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:46:16.268]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:46:16.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:46:16.271]    </block>
[00:46:16.271]    <block atomic="false" info="">
[00:46:16.271]      __var nReset = 0x80;
[00:46:16.271]        // -> [nReset <= 0x00000080]
[00:46:16.271]      __var canReadPins = 0;
[00:46:16.271]        // -> [canReadPins <= 0x00000000]
[00:46:16.271]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:46:16.275]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:46:16.275]        // -> [canReadPins <= 0x00000001]
[00:46:16.275]    </block>
[00:46:16.276]    <control if="" while="1" timeout="200" info="">
[00:46:16.276]      // while "1"  (timeout="200")
[00:46:16.276]      // while-condition  =>  TRUE
[00:46:16.276]      // while "1"  (timeout="200")
[00:46:16.276]      // while-condition  =>  TRUE
[00:46:16.276]      // while "1"  (timeout="200")
[00:46:16.276]      // while-condition  =>  TRUE
[00:46:16.276]      // while "1"  (timeout="200")
[00:46:16.276]      // while-condition  =>  TRUE
[00:46:16.276]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.277]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.277]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.277]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.277]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.277]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.277]      // while "1"  (timeout="200")
[00:46:16.277]      // while-condition  =>  TRUE
[00:46:16.278]      // while "1"  (timeout="200")
[00:46:16.278]      // while-condition  =>  TRUE
[00:46:16.278]      // while "1"  (timeout="200")
[00:46:16.278]      // while-condition  =>  TRUE
[00:46:16.278]      // while "1"  (timeout="200")
[00:46:16.278]      // while-condition  =>  TRUE
[00:46:16.278]      // while "1"  (timeout="200")
[00:46:16.279]      // while-condition  =>  TRUE
[00:46:16.279]      // while "1"  (timeout="200")
[00:46:16.279]      // while-condition  =>  TRUE
[00:46:16.279]      // while "1"  (timeout="200")
[00:46:16.279]      // while-condition  =>  TRUE
[00:46:16.279]      // while "1"  (timeout="200")
[00:46:16.279]      // while-condition  =>  TRUE
[00:46:16.279]      // while "1"  (timeout="200")
[00:46:16.279]      // while-condition  =>  TRUE
[00:46:16.279]      // while "1"  (timeout="200")
[00:46:16.280]      // while-condition  =>  TRUE
[00:46:16.281]      // while "1"  (timeout="200")
[00:46:16.281]      // while-condition  =>  TRUE
[00:46:16.281]      // while "1"  (timeout="200")
[00:46:16.281]      // while-condition  =>  TRUE
[00:46:16.281]      // while "1"  (timeout="200")
[00:46:16.281]      // while-condition  =>  TRUE
[00:46:16.281]      // while "1"  (timeout="200")
[00:46:16.281]      // while-condition  =>  TRUE
[00:46:16.281]      // while "1"  (timeout="200")
[00:46:16.281]      // while-condition  =>  TRUE
[00:46:16.281]      // while "1"  (timeout="200")
[00:46:16.281]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.282]      // while "1"  (timeout="200")
[00:46:16.282]      // while-condition  =>  TRUE
[00:46:16.283]      // while "1"  (timeout="200")
[00:46:16.283]      // while  =>  TIMEOUT
[00:46:16.283]      // end while "1"
[00:46:16.283]    </control>
[00:46:16.283]    <control if="canReadPins" while="" timeout="0" info="">
[00:46:16.283]      // if-block "canReadPins"
[00:46:16.283]        // =>  TRUE
[00:46:16.283]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:46:16.283]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:46:16.285]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:46:16.285]        // while-condition  =>  FALSE
[00:46:16.285]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:46:16.285]      </control>
[00:46:16.285]      // end if-block "canReadPins"
[00:46:16.285]    </control>
[00:46:16.285]    <control if="!canReadPins" while="" timeout="0" info="">
[00:46:16.285]      // if-block "!canReadPins"
[00:46:16.285]        // =>  FALSE
[00:46:16.285]      // skip if-block "!canReadPins"
[00:46:16.285]    </control>
[00:46:16.286]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:46:16.286]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:46:16.286]        // =>  TRUE
[00:46:16.286]      <block atomic="false" info="">
[00:46:16.286]        WriteAP(0x00, 0x190008);
[00:46:16.289]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:46:16.289]        WriteAP(0xF0, 0x01);
[00:46:16.292]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:46:16.292]      </block>
[00:46:16.292]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:46:16.292]    </control>
[00:46:16.292]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:46:16.292]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:46:16.293]        // =>  FALSE
[00:46:16.293]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:46:16.293]    </control>
[00:46:16.293]    <block atomic="false" info="">
[00:46:16.293]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:46:16.302]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:46:16.302]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:46:16.302]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:46:16.304]      __ap = 0; //lets make sure we reset the access point selection
[00:46:16.304]        // -> [__ap <= 0x00000000]
[00:46:16.304]    </block>
[00:46:16.304]  </sequence>
[00:46:16.304]  
[00:46:16.328]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:46:16.328]  
[00:46:16.328]  <debugvars>
[00:46:16.328]    // Pre-defined
[00:46:16.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:46:16.328]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:46:16.328]    __dp=0x00000000
[00:46:16.328]    __ap=0x00000000
[00:46:16.329]    __traceout=0x00000000      (Trace Disabled)
[00:46:16.329]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:46:16.329]    __FlashAddr=0x00000000
[00:46:16.329]    __FlashLen=0x00000000
[00:46:16.329]    __FlashArg=0x00000000
[00:46:16.329]    __FlashOp=0x00000000
[00:46:16.329]    __Result=0x00000000
[00:46:16.330]  </debugvars>
[00:46:16.330]  
[00:46:16.330]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:46:16.330]    <block atomic="false" info="">
[00:46:16.330]      __var deviceID = 0;
[00:46:16.330]        // -> [deviceID <= 0x00000000]
[00:46:16.330]      __var version = 0;
[00:46:16.330]        // -> [version <= 0x00000000]
[00:46:16.330]      __var partNum = 0;
[00:46:16.330]        // -> [partNum <= 0x00000000]
[00:46:16.331]      __var manuf = 0;
[00:46:16.331]        // -> [manuf <= 0x00000000]
[00:46:16.331]      __var isMSPM0G1X0X_G3X0X = 0;
[00:46:16.331]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:46:16.331]      __var isProduction = 0;
[00:46:16.331]        // -> [isProduction <= 0x00000000]
[00:46:16.331]      __var continueId = 0;
[00:46:16.331]        // -> [continueId <= 0x00000000]
[00:46:16.331]      deviceID =   Read32(0x41C40004);
[00:46:16.341]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:46:16.341]        // -> [deviceID <= 0x2BB8802F]
[00:46:16.341]      version = deviceID >> 28;
[00:46:16.341]        // -> [version <= 0x00000002]
[00:46:16.341]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:46:16.341]        // -> [partNum <= 0x0000BB88]
[00:46:16.341]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:46:16.341]        // -> [manuf <= 0x00000017]
[00:46:16.341]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:46:16.341]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:46:16.341]      isProduction = (version > 0);
[00:46:16.342]        // -> [isProduction <= 0x00000001]
[00:46:16.342]    </block>
[00:46:16.342]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:46:16.342]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:46:16.342]        // =>  FALSE
[00:46:16.342]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:46:16.342]    </control>
[00:46:16.342]    <control if="continueId == 4" while="" timeout="0" info="">
[00:46:16.342]      // if-block "continueId == 4"
[00:46:16.342]        // =>  FALSE
[00:46:16.343]      // skip if-block "continueId == 4"
[00:46:16.343]    </control>
[00:46:16.343]    <control if="!isProduction" while="" timeout="0" info="">
[00:46:16.343]      // if-block "!isProduction"
[00:46:16.343]        // =>  FALSE
[00:46:16.343]      // skip if-block "!isProduction"
[00:46:16.343]    </control>
[00:46:16.343]  </sequence>
[00:46:16.344]  
[00:48:06.003]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.003]  
[00:48:06.011]  <debugvars>
[00:48:06.011]    // Pre-defined
[00:48:06.011]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.011]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.011]    __dp=0x00000000
[00:48:06.011]    __ap=0x00000000
[00:48:06.011]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.011]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.011]    __FlashAddr=0x00000000
[00:48:06.011]    __FlashLen=0x00000000
[00:48:06.012]    __FlashArg=0x00000000
[00:48:06.012]    __FlashOp=0x00000000
[00:48:06.012]    __Result=0x00000000
[00:48:06.012]  </debugvars>
[00:48:06.012]  
[00:48:06.012]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.012]    <block atomic="false" info="">
[00:48:06.012]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.012]        // -> [isSWJ <= 0x00000001]
[00:48:06.012]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.012]        // -> [hasDormant <= 0x00000000]
[00:48:06.012]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.014]        // -> [protType <= 0x00000002]
[00:48:06.014]    </block>
[00:48:06.014]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.014]      // if-block "protType == 1"
[00:48:06.014]        // =>  FALSE
[00:48:06.014]      // skip if-block "protType == 1"
[00:48:06.014]    </control>
[00:48:06.014]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.014]      // if-block "protType == 2"
[00:48:06.014]        // =>  TRUE
[00:48:06.014]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.015]        // if-block "isSWJ"
[00:48:06.015]          // =>  TRUE
[00:48:06.015]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.015]          // if-block "hasDormant"
[00:48:06.015]            // =>  FALSE
[00:48:06.015]          // skip if-block "hasDormant"
[00:48:06.016]        </control>
[00:48:06.016]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.016]          // if-block "!hasDormant"
[00:48:06.016]            // =>  TRUE
[00:48:06.016]          <block atomic="false" info="">
[00:48:06.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.019]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.021]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.027]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.031]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.032]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.032]          </block>
[00:48:06.032]          // end if-block "!hasDormant"
[00:48:06.032]        </control>
[00:48:06.033]        // end if-block "isSWJ"
[00:48:06.033]      </control>
[00:48:06.033]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.033]        // if-block "!isSWJ"
[00:48:06.034]          // =>  FALSE
[00:48:06.034]        // skip if-block "!isSWJ"
[00:48:06.034]      </control>
[00:48:06.034]      <block atomic="false" info="">
[00:48:06.034]        ReadDP(0x0);
[00:48:06.035]  
[00:48:06.035]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.035]  
[00:48:06.035]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.036]      </block>
[00:48:06.036]      // end if-block "protType == 2"
[00:48:06.036]    </control>
[00:48:06.036]  </sequence>
[00:48:06.036]  
[00:48:06.094]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.094]  
[00:48:06.094]  <debugvars>
[00:48:06.094]    // Pre-defined
[00:48:06.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.094]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.094]    __dp=0x00000000
[00:48:06.094]    __ap=0x00000000
[00:48:06.094]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.095]    __FlashAddr=0x00000000
[00:48:06.095]    __FlashLen=0x00000000
[00:48:06.096]    __FlashArg=0x00000000
[00:48:06.096]    __FlashOp=0x00000000
[00:48:06.096]    __Result=0x00000000
[00:48:06.096]  </debugvars>
[00:48:06.096]  
[00:48:06.096]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.096]    <block atomic="false" info="">
[00:48:06.097]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.097]        // -> [isSWJ <= 0x00000001]
[00:48:06.097]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.097]        // -> [hasDormant <= 0x00000000]
[00:48:06.097]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.097]        // -> [protType <= 0x00000002]
[00:48:06.097]    </block>
[00:48:06.097]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.097]      // if-block "protType == 1"
[00:48:06.097]        // =>  FALSE
[00:48:06.097]      // skip if-block "protType == 1"
[00:48:06.097]    </control>
[00:48:06.097]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.098]      // if-block "protType == 2"
[00:48:06.098]        // =>  TRUE
[00:48:06.098]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.098]        // if-block "isSWJ"
[00:48:06.098]          // =>  TRUE
[00:48:06.098]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.098]          // if-block "hasDormant"
[00:48:06.098]            // =>  FALSE
[00:48:06.098]          // skip if-block "hasDormant"
[00:48:06.098]        </control>
[00:48:06.098]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.098]          // if-block "!hasDormant"
[00:48:06.099]            // =>  TRUE
[00:48:06.099]          <block atomic="false" info="">
[00:48:06.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.100]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.102]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.107]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.107]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.112]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.114]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.114]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.115]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.115]          </block>
[00:48:06.116]          // end if-block "!hasDormant"
[00:48:06.116]        </control>
[00:48:06.116]        // end if-block "isSWJ"
[00:48:06.116]      </control>
[00:48:06.116]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.116]        // if-block "!isSWJ"
[00:48:06.117]          // =>  FALSE
[00:48:06.117]        // skip if-block "!isSWJ"
[00:48:06.117]      </control>
[00:48:06.117]      <block atomic="false" info="">
[00:48:06.117]        ReadDP(0x0);
[00:48:06.118]  
[00:48:06.118]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.118]  
[00:48:06.118]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.119]      </block>
[00:48:06.119]      // end if-block "protType == 2"
[00:48:06.119]    </control>
[00:48:06.119]  </sequence>
[00:48:06.119]  
[00:48:06.170]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.170]  
[00:48:06.170]  <debugvars>
[00:48:06.171]    // Pre-defined
[00:48:06.171]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.171]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.171]    __dp=0x00000000
[00:48:06.171]    __ap=0x00000000
[00:48:06.171]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.171]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.171]    __FlashAddr=0x00000000
[00:48:06.171]    __FlashLen=0x00000000
[00:48:06.171]    __FlashArg=0x00000000
[00:48:06.171]    __FlashOp=0x00000000
[00:48:06.171]    __Result=0x00000000
[00:48:06.171]  </debugvars>
[00:48:06.172]  
[00:48:06.172]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.172]    <block atomic="false" info="">
[00:48:06.172]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.172]        // -> [isSWJ <= 0x00000001]
[00:48:06.172]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.172]        // -> [hasDormant <= 0x00000000]
[00:48:06.172]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.172]        // -> [protType <= 0x00000002]
[00:48:06.172]    </block>
[00:48:06.173]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.173]      // if-block "protType == 1"
[00:48:06.173]        // =>  FALSE
[00:48:06.173]      // skip if-block "protType == 1"
[00:48:06.173]    </control>
[00:48:06.173]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.173]      // if-block "protType == 2"
[00:48:06.173]        // =>  TRUE
[00:48:06.173]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.173]        // if-block "isSWJ"
[00:48:06.174]          // =>  TRUE
[00:48:06.174]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.174]          // if-block "hasDormant"
[00:48:06.174]            // =>  FALSE
[00:48:06.174]          // skip if-block "hasDormant"
[00:48:06.174]        </control>
[00:48:06.174]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.174]          // if-block "!hasDormant"
[00:48:06.174]            // =>  TRUE
[00:48:06.175]          <block atomic="false" info="">
[00:48:06.175]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.176]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.184]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.188]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.189]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.189]          </block>
[00:48:06.189]          // end if-block "!hasDormant"
[00:48:06.189]        </control>
[00:48:06.189]        // end if-block "isSWJ"
[00:48:06.190]      </control>
[00:48:06.190]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.190]        // if-block "!isSWJ"
[00:48:06.190]          // =>  FALSE
[00:48:06.190]        // skip if-block "!isSWJ"
[00:48:06.190]      </control>
[00:48:06.190]      <block atomic="false" info="">
[00:48:06.191]        ReadDP(0x0);
[00:48:06.192]  
[00:48:06.192]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.192]  
[00:48:06.192]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.192]      </block>
[00:48:06.192]      // end if-block "protType == 2"
[00:48:06.192]    </control>
[00:48:06.193]  </sequence>
[00:48:06.193]  
[00:48:06.245]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.245]  
[00:48:06.245]  <debugvars>
[00:48:06.245]    // Pre-defined
[00:48:06.246]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.246]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.247]    __dp=0x00000000
[00:48:06.247]    __ap=0x00000000
[00:48:06.247]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.247]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.247]    __FlashAddr=0x00000000
[00:48:06.247]    __FlashLen=0x00000000
[00:48:06.247]    __FlashArg=0x00000000
[00:48:06.247]    __FlashOp=0x00000000
[00:48:06.247]    __Result=0x00000000
[00:48:06.247]  </debugvars>
[00:48:06.247]  
[00:48:06.247]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.248]    <block atomic="false" info="">
[00:48:06.248]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.248]        // -> [isSWJ <= 0x00000001]
[00:48:06.248]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.248]        // -> [hasDormant <= 0x00000000]
[00:48:06.248]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.249]        // -> [protType <= 0x00000002]
[00:48:06.249]    </block>
[00:48:06.249]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.249]      // if-block "protType == 1"
[00:48:06.249]        // =>  FALSE
[00:48:06.249]      // skip if-block "protType == 1"
[00:48:06.249]    </control>
[00:48:06.249]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.250]      // if-block "protType == 2"
[00:48:06.250]        // =>  TRUE
[00:48:06.250]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.250]        // if-block "isSWJ"
[00:48:06.250]          // =>  TRUE
[00:48:06.250]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.250]          // if-block "hasDormant"
[00:48:06.250]            // =>  FALSE
[00:48:06.251]          // skip if-block "hasDormant"
[00:48:06.251]        </control>
[00:48:06.251]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.251]          // if-block "!hasDormant"
[00:48:06.251]            // =>  TRUE
[00:48:06.251]          <block atomic="false" info="">
[00:48:06.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.253]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.254]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.257]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.265]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.268]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.268]          </block>
[00:48:06.268]          // end if-block "!hasDormant"
[00:48:06.268]        </control>
[00:48:06.268]        // end if-block "isSWJ"
[00:48:06.268]      </control>
[00:48:06.268]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.268]        // if-block "!isSWJ"
[00:48:06.269]          // =>  FALSE
[00:48:06.269]        // skip if-block "!isSWJ"
[00:48:06.269]      </control>
[00:48:06.269]      <block atomic="false" info="">
[00:48:06.269]        ReadDP(0x0);
[00:48:06.271]  
[00:48:06.271]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.271]  
[00:48:06.271]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.271]      </block>
[00:48:06.271]      // end if-block "protType == 2"
[00:48:06.271]    </control>
[00:48:06.271]  </sequence>
[00:48:06.272]  
[00:48:06.337]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.337]  
[00:48:06.337]  <debugvars>
[00:48:06.338]    // Pre-defined
[00:48:06.338]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.338]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.338]    __dp=0x00000000
[00:48:06.338]    __ap=0x00000000
[00:48:06.338]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.338]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.338]    __FlashAddr=0x00000000
[00:48:06.338]    __FlashLen=0x00000000
[00:48:06.338]    __FlashArg=0x00000000
[00:48:06.338]    __FlashOp=0x00000000
[00:48:06.340]    __Result=0x00000000
[00:48:06.340]  </debugvars>
[00:48:06.340]  
[00:48:06.340]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.340]    <block atomic="false" info="">
[00:48:06.340]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.340]        // -> [isSWJ <= 0x00000001]
[00:48:06.340]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.341]        // -> [hasDormant <= 0x00000000]
[00:48:06.341]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.341]        // -> [protType <= 0x00000002]
[00:48:06.341]    </block>
[00:48:06.341]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.341]      // if-block "protType == 1"
[00:48:06.341]        // =>  FALSE
[00:48:06.341]      // skip if-block "protType == 1"
[00:48:06.341]    </control>
[00:48:06.341]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.341]      // if-block "protType == 2"
[00:48:06.341]        // =>  TRUE
[00:48:06.341]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.342]        // if-block "isSWJ"
[00:48:06.342]          // =>  TRUE
[00:48:06.342]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.342]          // if-block "hasDormant"
[00:48:06.342]            // =>  FALSE
[00:48:06.342]          // skip if-block "hasDormant"
[00:48:06.342]        </control>
[00:48:06.342]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.342]          // if-block "!hasDormant"
[00:48:06.343]            // =>  TRUE
[00:48:06.343]          <block atomic="false" info="">
[00:48:06.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.345]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.348]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.351]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.352]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.352]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.353]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.354]          </block>
[00:48:06.354]          // end if-block "!hasDormant"
[00:48:06.354]        </control>
[00:48:06.354]        // end if-block "isSWJ"
[00:48:06.354]      </control>
[00:48:06.354]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.354]        // if-block "!isSWJ"
[00:48:06.354]          // =>  FALSE
[00:48:06.354]        // skip if-block "!isSWJ"
[00:48:06.354]      </control>
[00:48:06.355]      <block atomic="false" info="">
[00:48:06.355]        ReadDP(0x0);
[00:48:06.356]  
[00:48:06.356]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.356]  
[00:48:06.356]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.356]      </block>
[00:48:06.356]      // end if-block "protType == 2"
[00:48:06.356]    </control>
[00:48:06.357]  </sequence>
[00:48:06.357]  
[00:48:06.414]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.414]  
[00:48:06.414]  <debugvars>
[00:48:06.414]    // Pre-defined
[00:48:06.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.415]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.415]    __dp=0x00000000
[00:48:06.415]    __ap=0x00000000
[00:48:06.415]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.415]    __FlashAddr=0x00000000
[00:48:06.415]    __FlashLen=0x00000000
[00:48:06.415]    __FlashArg=0x00000000
[00:48:06.416]    __FlashOp=0x00000000
[00:48:06.416]    __Result=0x00000000
[00:48:06.416]  </debugvars>
[00:48:06.416]  
[00:48:06.416]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.416]    <block atomic="false" info="">
[00:48:06.416]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.416]        // -> [isSWJ <= 0x00000001]
[00:48:06.417]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.417]        // -> [hasDormant <= 0x00000000]
[00:48:06.417]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.417]        // -> [protType <= 0x00000002]
[00:48:06.417]    </block>
[00:48:06.417]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.417]      // if-block "protType == 1"
[00:48:06.418]        // =>  FALSE
[00:48:06.418]      // skip if-block "protType == 1"
[00:48:06.418]    </control>
[00:48:06.418]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.418]      // if-block "protType == 2"
[00:48:06.418]        // =>  TRUE
[00:48:06.418]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.418]        // if-block "isSWJ"
[00:48:06.419]          // =>  TRUE
[00:48:06.419]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.419]          // if-block "hasDormant"
[00:48:06.419]            // =>  FALSE
[00:48:06.419]          // skip if-block "hasDormant"
[00:48:06.419]        </control>
[00:48:06.419]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.419]          // if-block "!hasDormant"
[00:48:06.419]            // =>  TRUE
[00:48:06.419]          <block atomic="false" info="">
[00:48:06.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.421]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.424]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.424]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.426]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.426]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.429]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.429]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.432]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.432]          </block>
[00:48:06.432]          // end if-block "!hasDormant"
[00:48:06.432]        </control>
[00:48:06.432]        // end if-block "isSWJ"
[00:48:06.432]      </control>
[00:48:06.432]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.432]        // if-block "!isSWJ"
[00:48:06.432]          // =>  FALSE
[00:48:06.432]        // skip if-block "!isSWJ"
[00:48:06.432]      </control>
[00:48:06.432]      <block atomic="false" info="">
[00:48:06.432]        ReadDP(0x0);
[00:48:06.437]  
[00:48:06.437]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.437]  
[00:48:06.437]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.438]      </block>
[00:48:06.438]      // end if-block "protType == 2"
[00:48:06.438]    </control>
[00:48:06.438]  </sequence>
[00:48:06.438]  
[00:48:06.489]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.489]  
[00:48:06.490]  <debugvars>
[00:48:06.490]    // Pre-defined
[00:48:06.490]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.490]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.490]    __dp=0x00000000
[00:48:06.490]    __ap=0x00000000
[00:48:06.490]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.490]    __FlashAddr=0x00000000
[00:48:06.490]    __FlashLen=0x00000000
[00:48:06.491]    __FlashArg=0x00000000
[00:48:06.491]    __FlashOp=0x00000000
[00:48:06.491]    __Result=0x00000000
[00:48:06.491]  </debugvars>
[00:48:06.491]  
[00:48:06.491]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.492]    <block atomic="false" info="">
[00:48:06.492]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.492]        // -> [isSWJ <= 0x00000001]
[00:48:06.492]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.492]        // -> [hasDormant <= 0x00000000]
[00:48:06.492]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.493]        // -> [protType <= 0x00000002]
[00:48:06.493]    </block>
[00:48:06.493]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.493]      // if-block "protType == 1"
[00:48:06.493]        // =>  FALSE
[00:48:06.493]      // skip if-block "protType == 1"
[00:48:06.493]    </control>
[00:48:06.493]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.493]      // if-block "protType == 2"
[00:48:06.493]        // =>  TRUE
[00:48:06.494]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.494]        // if-block "isSWJ"
[00:48:06.494]          // =>  TRUE
[00:48:06.494]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.494]          // if-block "hasDormant"
[00:48:06.494]            // =>  FALSE
[00:48:06.494]          // skip if-block "hasDormant"
[00:48:06.494]        </control>
[00:48:06.494]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.494]          // if-block "!hasDormant"
[00:48:06.494]            // =>  TRUE
[00:48:06.494]          <block atomic="false" info="">
[00:48:06.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.498]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.499]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.500]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.502]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.504]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.505]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.505]          </block>
[00:48:06.505]          // end if-block "!hasDormant"
[00:48:06.505]        </control>
[00:48:06.505]        // end if-block "isSWJ"
[00:48:06.505]      </control>
[00:48:06.505]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.506]        // if-block "!isSWJ"
[00:48:06.506]          // =>  FALSE
[00:48:06.506]        // skip if-block "!isSWJ"
[00:48:06.506]      </control>
[00:48:06.506]      <block atomic="false" info="">
[00:48:06.506]        ReadDP(0x0);
[00:48:06.508]  
[00:48:06.508]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.508]  
[00:48:06.508]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.508]      </block>
[00:48:06.508]      // end if-block "protType == 2"
[00:48:06.508]    </control>
[00:48:06.508]  </sequence>
[00:48:06.508]  
[00:48:06.566]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.566]  
[00:48:06.566]  <debugvars>
[00:48:06.566]    // Pre-defined
[00:48:06.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.567]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.567]    __dp=0x00000000
[00:48:06.567]    __ap=0x00000000
[00:48:06.567]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.567]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.567]    __FlashAddr=0x00000000
[00:48:06.567]    __FlashLen=0x00000000
[00:48:06.567]    __FlashArg=0x00000000
[00:48:06.567]    __FlashOp=0x00000000
[00:48:06.568]    __Result=0x00000000
[00:48:06.568]  </debugvars>
[00:48:06.568]  
[00:48:06.568]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.568]    <block atomic="false" info="">
[00:48:06.568]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.568]        // -> [isSWJ <= 0x00000001]
[00:48:06.568]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.568]        // -> [hasDormant <= 0x00000000]
[00:48:06.568]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.569]        // -> [protType <= 0x00000002]
[00:48:06.569]    </block>
[00:48:06.569]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.569]      // if-block "protType == 1"
[00:48:06.569]        // =>  FALSE
[00:48:06.569]      // skip if-block "protType == 1"
[00:48:06.569]    </control>
[00:48:06.569]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.570]      // if-block "protType == 2"
[00:48:06.570]        // =>  TRUE
[00:48:06.570]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.570]        // if-block "isSWJ"
[00:48:06.570]          // =>  TRUE
[00:48:06.570]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.570]          // if-block "hasDormant"
[00:48:06.572]            // =>  FALSE
[00:48:06.572]          // skip if-block "hasDormant"
[00:48:06.572]        </control>
[00:48:06.572]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.572]          // if-block "!hasDormant"
[00:48:06.572]            // =>  TRUE
[00:48:06.572]          <block atomic="false" info="">
[00:48:06.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.578]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.580]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.582]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.588]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.590]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.590]          </block>
[00:48:06.590]          // end if-block "!hasDormant"
[00:48:06.591]        </control>
[00:48:06.591]        // end if-block "isSWJ"
[00:48:06.591]      </control>
[00:48:06.591]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.591]        // if-block "!isSWJ"
[00:48:06.591]          // =>  FALSE
[00:48:06.591]        // skip if-block "!isSWJ"
[00:48:06.591]      </control>
[00:48:06.591]      <block atomic="false" info="">
[00:48:06.591]        ReadDP(0x0);
[00:48:06.593]  
[00:48:06.593]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.593]  
[00:48:06.593]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.593]      </block>
[00:48:06.593]      // end if-block "protType == 2"
[00:48:06.593]    </control>
[00:48:06.593]  </sequence>
[00:48:06.593]  
[00:48:06.658]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.658]  
[00:48:06.658]  <debugvars>
[00:48:06.658]    // Pre-defined
[00:48:06.659]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.659]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.659]    __dp=0x00000000
[00:48:06.659]    __ap=0x00000000
[00:48:06.659]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.659]    __FlashAddr=0x00000000
[00:48:06.659]    __FlashLen=0x00000000
[00:48:06.659]    __FlashArg=0x00000000
[00:48:06.659]    __FlashOp=0x00000000
[00:48:06.660]    __Result=0x00000000
[00:48:06.660]  </debugvars>
[00:48:06.660]  
[00:48:06.660]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.660]    <block atomic="false" info="">
[00:48:06.660]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.660]        // -> [isSWJ <= 0x00000001]
[00:48:06.661]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.661]        // -> [hasDormant <= 0x00000000]
[00:48:06.661]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.661]        // -> [protType <= 0x00000002]
[00:48:06.661]    </block>
[00:48:06.661]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.661]      // if-block "protType == 1"
[00:48:06.662]        // =>  FALSE
[00:48:06.662]      // skip if-block "protType == 1"
[00:48:06.662]    </control>
[00:48:06.662]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.662]      // if-block "protType == 2"
[00:48:06.662]        // =>  TRUE
[00:48:06.662]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.662]        // if-block "isSWJ"
[00:48:06.662]          // =>  TRUE
[00:48:06.663]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.663]          // if-block "hasDormant"
[00:48:06.663]            // =>  FALSE
[00:48:06.663]          // skip if-block "hasDormant"
[00:48:06.663]        </control>
[00:48:06.663]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.663]          // if-block "!hasDormant"
[00:48:06.663]            // =>  TRUE
[00:48:06.663]          <block atomic="false" info="">
[00:48:06.663]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.665]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.665]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.668]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.670]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.673]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.675]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.675]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.676]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.676]          </block>
[00:48:06.677]          // end if-block "!hasDormant"
[00:48:06.677]        </control>
[00:48:06.677]        // end if-block "isSWJ"
[00:48:06.677]      </control>
[00:48:06.677]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.677]        // if-block "!isSWJ"
[00:48:06.677]          // =>  FALSE
[00:48:06.678]        // skip if-block "!isSWJ"
[00:48:06.678]      </control>
[00:48:06.678]      <block atomic="false" info="">
[00:48:06.678]        ReadDP(0x0);
[00:48:06.680]  
[00:48:06.680]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.680]  
[00:48:06.680]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.680]      </block>
[00:48:06.680]      // end if-block "protType == 2"
[00:48:06.680]    </control>
[00:48:06.680]  </sequence>
[00:48:06.681]  
[00:48:06.733]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.733]  
[00:48:06.733]  <debugvars>
[00:48:06.733]    // Pre-defined
[00:48:06.733]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.734]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.734]    __dp=0x00000000
[00:48:06.734]    __ap=0x00000000
[00:48:06.734]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.734]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.734]    __FlashAddr=0x00000000
[00:48:06.734]    __FlashLen=0x00000000
[00:48:06.734]    __FlashArg=0x00000000
[00:48:06.734]    __FlashOp=0x00000000
[00:48:06.734]    __Result=0x00000000
[00:48:06.735]  </debugvars>
[00:48:06.735]  
[00:48:06.735]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.735]    <block atomic="false" info="">
[00:48:06.735]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.735]        // -> [isSWJ <= 0x00000001]
[00:48:06.735]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.735]        // -> [hasDormant <= 0x00000000]
[00:48:06.735]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.735]        // -> [protType <= 0x00000002]
[00:48:06.736]    </block>
[00:48:06.736]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.736]      // if-block "protType == 1"
[00:48:06.736]        // =>  FALSE
[00:48:06.736]      // skip if-block "protType == 1"
[00:48:06.736]    </control>
[00:48:06.736]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.736]      // if-block "protType == 2"
[00:48:06.736]        // =>  TRUE
[00:48:06.736]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.737]        // if-block "isSWJ"
[00:48:06.737]          // =>  TRUE
[00:48:06.737]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.737]          // if-block "hasDormant"
[00:48:06.737]            // =>  FALSE
[00:48:06.737]          // skip if-block "hasDormant"
[00:48:06.737]        </control>
[00:48:06.737]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.737]          // if-block "!hasDormant"
[00:48:06.737]            // =>  TRUE
[00:48:06.738]          <block atomic="false" info="">
[00:48:06.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.739]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.739]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.741]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.744]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.754]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.754]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.758]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.758]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.759]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.759]          </block>
[00:48:06.759]          // end if-block "!hasDormant"
[00:48:06.760]        </control>
[00:48:06.760]        // end if-block "isSWJ"
[00:48:06.760]      </control>
[00:48:06.760]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.760]        // if-block "!isSWJ"
[00:48:06.760]          // =>  FALSE
[00:48:06.760]        // skip if-block "!isSWJ"
[00:48:06.761]      </control>
[00:48:06.761]      <block atomic="false" info="">
[00:48:06.761]        ReadDP(0x0);
[00:48:06.762]  
[00:48:06.762]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.762]  
[00:48:06.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.763]      </block>
[00:48:06.763]      // end if-block "protType == 2"
[00:48:06.763]    </control>
[00:48:06.763]  </sequence>
[00:48:06.763]  
[00:48:06.826]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.826]  
[00:48:06.826]  <debugvars>
[00:48:06.826]    // Pre-defined
[00:48:06.826]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.826]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.826]    __dp=0x00000000
[00:48:06.827]    __ap=0x00000000
[00:48:06.827]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.827]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.827]    __FlashAddr=0x00000000
[00:48:06.827]    __FlashLen=0x00000000
[00:48:06.827]    __FlashArg=0x00000000
[00:48:06.827]    __FlashOp=0x00000000
[00:48:06.827]    __Result=0x00000000
[00:48:06.827]  </debugvars>
[00:48:06.828]  
[00:48:06.828]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.828]    <block atomic="false" info="">
[00:48:06.828]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.828]        // -> [isSWJ <= 0x00000001]
[00:48:06.828]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.828]        // -> [hasDormant <= 0x00000000]
[00:48:06.828]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.828]        // -> [protType <= 0x00000002]
[00:48:06.828]    </block>
[00:48:06.828]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.828]      // if-block "protType == 1"
[00:48:06.828]        // =>  FALSE
[00:48:06.828]      // skip if-block "protType == 1"
[00:48:06.829]    </control>
[00:48:06.829]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.829]      // if-block "protType == 2"
[00:48:06.829]        // =>  TRUE
[00:48:06.829]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.829]        // if-block "isSWJ"
[00:48:06.829]          // =>  TRUE
[00:48:06.829]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.829]          // if-block "hasDormant"
[00:48:06.829]            // =>  FALSE
[00:48:06.829]          // skip if-block "hasDormant"
[00:48:06.829]        </control>
[00:48:06.829]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.830]          // if-block "!hasDormant"
[00:48:06.830]            // =>  TRUE
[00:48:06.830]          <block atomic="false" info="">
[00:48:06.830]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.831]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.838]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.840]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.842]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.844]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.846]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.847]          </block>
[00:48:06.847]          // end if-block "!hasDormant"
[00:48:06.847]        </control>
[00:48:06.847]        // end if-block "isSWJ"
[00:48:06.847]      </control>
[00:48:06.847]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.847]        // if-block "!isSWJ"
[00:48:06.847]          // =>  FALSE
[00:48:06.847]        // skip if-block "!isSWJ"
[00:48:06.847]      </control>
[00:48:06.847]      <block atomic="false" info="">
[00:48:06.848]        ReadDP(0x0);
[00:48:06.849]  
[00:48:06.849]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.849]  
[00:48:06.849]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.849]      </block>
[00:48:06.849]      // end if-block "protType == 2"
[00:48:06.849]    </control>
[00:48:06.849]  </sequence>
[00:48:06.849]  
[00:48:06.901]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.901]  
[00:48:06.901]  <debugvars>
[00:48:06.901]    // Pre-defined
[00:48:06.901]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.901]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.901]    __dp=0x00000000
[00:48:06.901]    __ap=0x00000000
[00:48:06.901]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.901]    __FlashAddr=0x00000000
[00:48:06.901]    __FlashLen=0x00000000
[00:48:06.901]    __FlashArg=0x00000000
[00:48:06.902]    __FlashOp=0x00000000
[00:48:06.902]    __Result=0x00000000
[00:48:06.902]  </debugvars>
[00:48:06.902]  
[00:48:06.902]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.902]    <block atomic="false" info="">
[00:48:06.902]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.903]        // -> [isSWJ <= 0x00000001]
[00:48:06.903]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.903]        // -> [hasDormant <= 0x00000000]
[00:48:06.903]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.903]        // -> [protType <= 0x00000002]
[00:48:06.903]    </block>
[00:48:06.903]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.903]      // if-block "protType == 1"
[00:48:06.904]        // =>  FALSE
[00:48:06.904]      // skip if-block "protType == 1"
[00:48:06.904]    </control>
[00:48:06.904]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.904]      // if-block "protType == 2"
[00:48:06.905]        // =>  TRUE
[00:48:06.905]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.905]        // if-block "isSWJ"
[00:48:06.905]          // =>  TRUE
[00:48:06.905]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.905]          // if-block "hasDormant"
[00:48:06.905]            // =>  FALSE
[00:48:06.906]          // skip if-block "hasDormant"
[00:48:06.906]        </control>
[00:48:06.906]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.906]          // if-block "!hasDormant"
[00:48:06.906]            // =>  TRUE
[00:48:06.906]          <block atomic="false" info="">
[00:48:06.906]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.912]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.913]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.915]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.920]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.920]          </block>
[00:48:06.920]          // end if-block "!hasDormant"
[00:48:06.920]        </control>
[00:48:06.920]        // end if-block "isSWJ"
[00:48:06.920]      </control>
[00:48:06.920]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.920]        // if-block "!isSWJ"
[00:48:06.921]          // =>  FALSE
[00:48:06.921]        // skip if-block "!isSWJ"
[00:48:06.921]      </control>
[00:48:06.921]      <block atomic="false" info="">
[00:48:06.921]        ReadDP(0x0);
[00:48:06.926]  
[00:48:06.926]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.926]  
[00:48:06.926]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.926]      </block>
[00:48:06.926]      // end if-block "protType == 2"
[00:48:06.926]    </control>
[00:48:06.926]  </sequence>
[00:48:06.926]  
[00:48:06.977]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:06.977]  
[00:48:06.977]  <debugvars>
[00:48:06.977]    // Pre-defined
[00:48:06.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:06.977]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:06.977]    __dp=0x00000000
[00:48:06.977]    __ap=0x00000000
[00:48:06.977]    __traceout=0x00000000      (Trace Disabled)
[00:48:06.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:06.978]    __FlashAddr=0x00000000
[00:48:06.978]    __FlashLen=0x00000000
[00:48:06.978]    __FlashArg=0x00000000
[00:48:06.978]    __FlashOp=0x00000000
[00:48:06.978]    __Result=0x00000000
[00:48:06.978]  </debugvars>
[00:48:06.978]  
[00:48:06.978]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:06.978]    <block atomic="false" info="">
[00:48:06.979]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:06.979]        // -> [isSWJ <= 0x00000001]
[00:48:06.979]      __var hasDormant = __protocol & 0x00020000;
[00:48:06.979]        // -> [hasDormant <= 0x00000000]
[00:48:06.979]      __var protType   = __protocol & 0x0000FFFF;
[00:48:06.979]        // -> [protType <= 0x00000002]
[00:48:06.979]    </block>
[00:48:06.979]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:06.979]      // if-block "protType == 1"
[00:48:06.980]        // =>  FALSE
[00:48:06.980]      // skip if-block "protType == 1"
[00:48:06.980]    </control>
[00:48:06.980]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:06.980]      // if-block "protType == 2"
[00:48:06.980]        // =>  TRUE
[00:48:06.980]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:06.980]        // if-block "isSWJ"
[00:48:06.980]          // =>  TRUE
[00:48:06.980]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:06.981]          // if-block "hasDormant"
[00:48:06.981]            // =>  FALSE
[00:48:06.981]          // skip if-block "hasDormant"
[00:48:06.981]        </control>
[00:48:06.981]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:06.981]          // if-block "!hasDormant"
[00:48:06.981]            // =>  TRUE
[00:48:06.981]          <block atomic="false" info="">
[00:48:06.981]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:06.983]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.983]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:06.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:06.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:06.987]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.987]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:06.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:06.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:06.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:06.990]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:06.991]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:06.991]          </block>
[00:48:06.992]          // end if-block "!hasDormant"
[00:48:06.992]        </control>
[00:48:06.992]        // end if-block "isSWJ"
[00:48:06.992]      </control>
[00:48:06.992]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:06.992]        // if-block "!isSWJ"
[00:48:06.993]          // =>  FALSE
[00:48:06.993]        // skip if-block "!isSWJ"
[00:48:06.993]      </control>
[00:48:06.993]      <block atomic="false" info="">
[00:48:06.993]        ReadDP(0x0);
[00:48:06.995]  
[00:48:06.995]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:06.995]  
[00:48:06.995]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:06.995]      </block>
[00:48:06.996]      // end if-block "protType == 2"
[00:48:06.996]    </control>
[00:48:06.996]  </sequence>
[00:48:06.996]  
[00:48:07.052]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.052]  
[00:48:07.052]  <debugvars>
[00:48:07.052]    // Pre-defined
[00:48:07.052]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.052]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.052]    __dp=0x00000000
[00:48:07.052]    __ap=0x00000000
[00:48:07.052]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.052]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.052]    __FlashAddr=0x00000000
[00:48:07.053]    __FlashLen=0x00000000
[00:48:07.053]    __FlashArg=0x00000000
[00:48:07.053]    __FlashOp=0x00000000
[00:48:07.053]    __Result=0x00000000
[00:48:07.053]  </debugvars>
[00:48:07.053]  
[00:48:07.053]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.053]    <block atomic="false" info="">
[00:48:07.055]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.055]        // -> [isSWJ <= 0x00000001]
[00:48:07.055]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.055]        // -> [hasDormant <= 0x00000000]
[00:48:07.055]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.055]        // -> [protType <= 0x00000002]
[00:48:07.055]    </block>
[00:48:07.055]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.055]      // if-block "protType == 1"
[00:48:07.055]        // =>  FALSE
[00:48:07.056]      // skip if-block "protType == 1"
[00:48:07.056]    </control>
[00:48:07.056]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.056]      // if-block "protType == 2"
[00:48:07.056]        // =>  TRUE
[00:48:07.056]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.056]        // if-block "isSWJ"
[00:48:07.056]          // =>  TRUE
[00:48:07.056]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.056]          // if-block "hasDormant"
[00:48:07.057]            // =>  FALSE
[00:48:07.057]          // skip if-block "hasDormant"
[00:48:07.057]        </control>
[00:48:07.057]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.057]          // if-block "!hasDormant"
[00:48:07.057]            // =>  TRUE
[00:48:07.057]          <block atomic="false" info="">
[00:48:07.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.059]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.062]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.065]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.071]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.071]          </block>
[00:48:07.071]          // end if-block "!hasDormant"
[00:48:07.071]        </control>
[00:48:07.071]        // end if-block "isSWJ"
[00:48:07.071]      </control>
[00:48:07.071]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.071]        // if-block "!isSWJ"
[00:48:07.071]          // =>  FALSE
[00:48:07.072]        // skip if-block "!isSWJ"
[00:48:07.072]      </control>
[00:48:07.072]      <block atomic="false" info="">
[00:48:07.072]        ReadDP(0x0);
[00:48:07.074]  
[00:48:07.074]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.074]  
[00:48:07.074]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.074]      </block>
[00:48:07.074]      // end if-block "protType == 2"
[00:48:07.074]    </control>
[00:48:07.074]  </sequence>
[00:48:07.074]  
[00:48:07.128]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.128]  
[00:48:07.129]  <debugvars>
[00:48:07.129]    // Pre-defined
[00:48:07.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.129]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.129]    __dp=0x00000000
[00:48:07.129]    __ap=0x00000000
[00:48:07.129]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.129]    __FlashAddr=0x00000000
[00:48:07.129]    __FlashLen=0x00000000
[00:48:07.130]    __FlashArg=0x00000000
[00:48:07.130]    __FlashOp=0x00000000
[00:48:07.130]    __Result=0x00000000
[00:48:07.130]  </debugvars>
[00:48:07.130]  
[00:48:07.130]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.130]    <block atomic="false" info="">
[00:48:07.130]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.130]        // -> [isSWJ <= 0x00000001]
[00:48:07.130]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.130]        // -> [hasDormant <= 0x00000000]
[00:48:07.131]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.131]        // -> [protType <= 0x00000002]
[00:48:07.131]    </block>
[00:48:07.131]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.131]      // if-block "protType == 1"
[00:48:07.131]        // =>  FALSE
[00:48:07.131]      // skip if-block "protType == 1"
[00:48:07.131]    </control>
[00:48:07.131]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.131]      // if-block "protType == 2"
[00:48:07.131]        // =>  TRUE
[00:48:07.132]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.132]        // if-block "isSWJ"
[00:48:07.132]          // =>  TRUE
[00:48:07.132]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.132]          // if-block "hasDormant"
[00:48:07.132]            // =>  FALSE
[00:48:07.132]          // skip if-block "hasDormant"
[00:48:07.132]        </control>
[00:48:07.132]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.132]          // if-block "!hasDormant"
[00:48:07.132]            // =>  TRUE
[00:48:07.133]          <block atomic="false" info="">
[00:48:07.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.137]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.141]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.145]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.145]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.147]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.149]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.149]          </block>
[00:48:07.149]          // end if-block "!hasDormant"
[00:48:07.149]        </control>
[00:48:07.149]        // end if-block "isSWJ"
[00:48:07.150]      </control>
[00:48:07.150]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.150]        // if-block "!isSWJ"
[00:48:07.150]          // =>  FALSE
[00:48:07.150]        // skip if-block "!isSWJ"
[00:48:07.150]      </control>
[00:48:07.150]      <block atomic="false" info="">
[00:48:07.150]        ReadDP(0x0);
[00:48:07.153]  
[00:48:07.153]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.153]  
[00:48:07.154]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.154]      </block>
[00:48:07.154]      // end if-block "protType == 2"
[00:48:07.154]    </control>
[00:48:07.154]  </sequence>
[00:48:07.154]  
[00:48:07.219]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.219]  
[00:48:07.219]  <debugvars>
[00:48:07.219]    // Pre-defined
[00:48:07.219]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.219]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.219]    __dp=0x00000000
[00:48:07.219]    __ap=0x00000000
[00:48:07.219]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.220]    __FlashAddr=0x00000000
[00:48:07.220]    __FlashLen=0x00000000
[00:48:07.220]    __FlashArg=0x00000000
[00:48:07.220]    __FlashOp=0x00000000
[00:48:07.220]    __Result=0x00000000
[00:48:07.220]  </debugvars>
[00:48:07.220]  
[00:48:07.220]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.221]    <block atomic="false" info="">
[00:48:07.221]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.221]        // -> [isSWJ <= 0x00000001]
[00:48:07.221]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.221]        // -> [hasDormant <= 0x00000000]
[00:48:07.221]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.221]        // -> [protType <= 0x00000002]
[00:48:07.221]    </block>
[00:48:07.221]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.221]      // if-block "protType == 1"
[00:48:07.221]        // =>  FALSE
[00:48:07.222]      // skip if-block "protType == 1"
[00:48:07.222]    </control>
[00:48:07.222]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.222]      // if-block "protType == 2"
[00:48:07.222]        // =>  TRUE
[00:48:07.222]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.222]        // if-block "isSWJ"
[00:48:07.222]          // =>  TRUE
[00:48:07.222]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.224]          // if-block "hasDormant"
[00:48:07.224]            // =>  FALSE
[00:48:07.224]          // skip if-block "hasDormant"
[00:48:07.224]        </control>
[00:48:07.224]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.225]          // if-block "!hasDormant"
[00:48:07.225]            // =>  TRUE
[00:48:07.225]          <block atomic="false" info="">
[00:48:07.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.226]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.229]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.231]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.238]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.238]          </block>
[00:48:07.238]          // end if-block "!hasDormant"
[00:48:07.238]        </control>
[00:48:07.239]        // end if-block "isSWJ"
[00:48:07.239]      </control>
[00:48:07.239]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.239]        // if-block "!isSWJ"
[00:48:07.239]          // =>  FALSE
[00:48:07.239]        // skip if-block "!isSWJ"
[00:48:07.239]      </control>
[00:48:07.239]      <block atomic="false" info="">
[00:48:07.239]        ReadDP(0x0);
[00:48:07.241]  
[00:48:07.241]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.241]  
[00:48:07.241]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.241]      </block>
[00:48:07.241]      // end if-block "protType == 2"
[00:48:07.241]    </control>
[00:48:07.242]  </sequence>
[00:48:07.242]  
[00:48:07.295]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.295]  
[00:48:07.295]  <debugvars>
[00:48:07.296]    // Pre-defined
[00:48:07.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.296]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.296]    __dp=0x00000000
[00:48:07.296]    __ap=0x00000000
[00:48:07.296]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.296]    __FlashAddr=0x00000000
[00:48:07.296]    __FlashLen=0x00000000
[00:48:07.297]    __FlashArg=0x00000000
[00:48:07.297]    __FlashOp=0x00000000
[00:48:07.297]    __Result=0x00000000
[00:48:07.297]  </debugvars>
[00:48:07.297]  
[00:48:07.297]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.297]    <block atomic="false" info="">
[00:48:07.297]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.297]        // -> [isSWJ <= 0x00000001]
[00:48:07.297]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.298]        // -> [hasDormant <= 0x00000000]
[00:48:07.298]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.298]        // -> [protType <= 0x00000002]
[00:48:07.298]    </block>
[00:48:07.298]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.298]      // if-block "protType == 1"
[00:48:07.298]        // =>  FALSE
[00:48:07.298]      // skip if-block "protType == 1"
[00:48:07.298]    </control>
[00:48:07.298]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.298]      // if-block "protType == 2"
[00:48:07.299]        // =>  TRUE
[00:48:07.299]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.299]        // if-block "isSWJ"
[00:48:07.299]          // =>  TRUE
[00:48:07.299]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.299]          // if-block "hasDormant"
[00:48:07.299]            // =>  FALSE
[00:48:07.299]          // skip if-block "hasDormant"
[00:48:07.299]        </control>
[00:48:07.299]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.300]          // if-block "!hasDormant"
[00:48:07.300]            // =>  TRUE
[00:48:07.300]          <block atomic="false" info="">
[00:48:07.300]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.302]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.302]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.304]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.305]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.311]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.313]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.313]          </block>
[00:48:07.313]          // end if-block "!hasDormant"
[00:48:07.313]        </control>
[00:48:07.313]        // end if-block "isSWJ"
[00:48:07.313]      </control>
[00:48:07.313]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.313]        // if-block "!isSWJ"
[00:48:07.313]          // =>  FALSE
[00:48:07.313]        // skip if-block "!isSWJ"
[00:48:07.313]      </control>
[00:48:07.314]      <block atomic="false" info="">
[00:48:07.314]        ReadDP(0x0);
[00:48:07.316]  
[00:48:07.316]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.316]  
[00:48:07.317]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.317]      </block>
[00:48:07.317]      // end if-block "protType == 2"
[00:48:07.317]    </control>
[00:48:07.317]  </sequence>
[00:48:07.317]  
[00:48:07.370]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.370]  
[00:48:07.370]  <debugvars>
[00:48:07.372]    // Pre-defined
[00:48:07.372]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.372]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.372]    __dp=0x00000000
[00:48:07.372]    __ap=0x00000000
[00:48:07.372]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.372]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.372]    __FlashAddr=0x00000000
[00:48:07.372]    __FlashLen=0x00000000
[00:48:07.372]    __FlashArg=0x00000000
[00:48:07.372]    __FlashOp=0x00000000
[00:48:07.372]    __Result=0x00000000
[00:48:07.372]  </debugvars>
[00:48:07.373]  
[00:48:07.373]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.373]    <block atomic="false" info="">
[00:48:07.373]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.373]        // -> [isSWJ <= 0x00000001]
[00:48:07.373]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.373]        // -> [hasDormant <= 0x00000000]
[00:48:07.374]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.374]        // -> [protType <= 0x00000002]
[00:48:07.374]    </block>
[00:48:07.374]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.374]      // if-block "protType == 1"
[00:48:07.374]        // =>  FALSE
[00:48:07.374]      // skip if-block "protType == 1"
[00:48:07.374]    </control>
[00:48:07.374]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.374]      // if-block "protType == 2"
[00:48:07.375]        // =>  TRUE
[00:48:07.375]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.375]        // if-block "isSWJ"
[00:48:07.375]          // =>  TRUE
[00:48:07.375]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.375]          // if-block "hasDormant"
[00:48:07.375]            // =>  FALSE
[00:48:07.375]          // skip if-block "hasDormant"
[00:48:07.375]        </control>
[00:48:07.375]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.376]          // if-block "!hasDormant"
[00:48:07.376]            // =>  TRUE
[00:48:07.376]          <block atomic="false" info="">
[00:48:07.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.378]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.378]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.379]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.379]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.382]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.382]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.386]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.387]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.387]          </block>
[00:48:07.387]          // end if-block "!hasDormant"
[00:48:07.387]        </control>
[00:48:07.387]        // end if-block "isSWJ"
[00:48:07.388]      </control>
[00:48:07.388]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.388]        // if-block "!isSWJ"
[00:48:07.388]          // =>  FALSE
[00:48:07.388]        // skip if-block "!isSWJ"
[00:48:07.388]      </control>
[00:48:07.388]      <block atomic="false" info="">
[00:48:07.388]        ReadDP(0x0);
[00:48:07.389]  
[00:48:07.389]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.389]  
[00:48:07.389]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.389]      </block>
[00:48:07.389]      // end if-block "protType == 2"
[00:48:07.389]    </control>
[00:48:07.389]  </sequence>
[00:48:07.391]  
[00:48:07.447]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.447]  
[00:48:07.447]  <debugvars>
[00:48:07.447]    // Pre-defined
[00:48:07.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.447]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.447]    __dp=0x00000000
[00:48:07.447]    __ap=0x00000000
[00:48:07.447]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.447]    __FlashAddr=0x00000000
[00:48:07.447]    __FlashLen=0x00000000
[00:48:07.447]    __FlashArg=0x00000000
[00:48:07.447]    __FlashOp=0x00000000
[00:48:07.447]    __Result=0x00000000
[00:48:07.447]  </debugvars>
[00:48:07.447]  
[00:48:07.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.449]    <block atomic="false" info="">
[00:48:07.449]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.449]        // -> [isSWJ <= 0x00000001]
[00:48:07.449]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.449]        // -> [hasDormant <= 0x00000000]
[00:48:07.449]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.449]        // -> [protType <= 0x00000002]
[00:48:07.449]    </block>
[00:48:07.450]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.450]      // if-block "protType == 1"
[00:48:07.450]        // =>  FALSE
[00:48:07.450]      // skip if-block "protType == 1"
[00:48:07.450]    </control>
[00:48:07.450]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.450]      // if-block "protType == 2"
[00:48:07.451]        // =>  TRUE
[00:48:07.451]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.451]        // if-block "isSWJ"
[00:48:07.451]          // =>  TRUE
[00:48:07.451]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.451]          // if-block "hasDormant"
[00:48:07.451]            // =>  FALSE
[00:48:07.451]          // skip if-block "hasDormant"
[00:48:07.451]        </control>
[00:48:07.451]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.451]          // if-block "!hasDormant"
[00:48:07.451]            // =>  TRUE
[00:48:07.452]          <block atomic="false" info="">
[00:48:07.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.456]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.461]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.463]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.463]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.465]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.466]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.466]          </block>
[00:48:07.467]          // end if-block "!hasDormant"
[00:48:07.467]        </control>
[00:48:07.467]        // end if-block "isSWJ"
[00:48:07.467]      </control>
[00:48:07.468]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.468]        // if-block "!isSWJ"
[00:48:07.468]          // =>  FALSE
[00:48:07.468]        // skip if-block "!isSWJ"
[00:48:07.468]      </control>
[00:48:07.469]      <block atomic="false" info="">
[00:48:07.469]        ReadDP(0x0);
[00:48:07.470]  
[00:48:07.470]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.470]  
[00:48:07.471]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.471]      </block>
[00:48:07.471]      // end if-block "protType == 2"
[00:48:07.471]    </control>
[00:48:07.471]  </sequence>
[00:48:07.472]  
[00:48:07.523]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.523]  
[00:48:07.523]  <debugvars>
[00:48:07.523]    // Pre-defined
[00:48:07.523]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.523]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.524]    __dp=0x00000000
[00:48:07.524]    __ap=0x00000000
[00:48:07.524]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.524]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.524]    __FlashAddr=0x00000000
[00:48:07.524]    __FlashLen=0x00000000
[00:48:07.524]    __FlashArg=0x00000000
[00:48:07.524]    __FlashOp=0x00000000
[00:48:07.524]    __Result=0x00000000
[00:48:07.525]  </debugvars>
[00:48:07.525]  
[00:48:07.525]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.525]    <block atomic="false" info="">
[00:48:07.525]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.525]        // -> [isSWJ <= 0x00000001]
[00:48:07.525]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.525]        // -> [hasDormant <= 0x00000000]
[00:48:07.525]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.525]        // -> [protType <= 0x00000002]
[00:48:07.526]    </block>
[00:48:07.526]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.526]      // if-block "protType == 1"
[00:48:07.526]        // =>  FALSE
[00:48:07.526]      // skip if-block "protType == 1"
[00:48:07.526]    </control>
[00:48:07.526]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.526]      // if-block "protType == 2"
[00:48:07.526]        // =>  TRUE
[00:48:07.526]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.527]        // if-block "isSWJ"
[00:48:07.527]          // =>  TRUE
[00:48:07.527]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.527]          // if-block "hasDormant"
[00:48:07.527]            // =>  FALSE
[00:48:07.527]          // skip if-block "hasDormant"
[00:48:07.527]        </control>
[00:48:07.527]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.528]          // if-block "!hasDormant"
[00:48:07.528]            // =>  TRUE
[00:48:07.528]          <block atomic="false" info="">
[00:48:07.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.531]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.532]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.534]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.536]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.538]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.539]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.539]          </block>
[00:48:07.539]          // end if-block "!hasDormant"
[00:48:07.539]        </control>
[00:48:07.539]        // end if-block "isSWJ"
[00:48:07.539]      </control>
[00:48:07.539]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.539]        // if-block "!isSWJ"
[00:48:07.540]          // =>  FALSE
[00:48:07.540]        // skip if-block "!isSWJ"
[00:48:07.540]      </control>
[00:48:07.540]      <block atomic="false" info="">
[00:48:07.540]        ReadDP(0x0);
[00:48:07.546]  
[00:48:07.546]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.546]  
[00:48:07.546]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.546]      </block>
[00:48:07.546]      // end if-block "protType == 2"
[00:48:07.546]    </control>
[00:48:07.547]  </sequence>
[00:48:07.547]  
[00:48:07.600]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.600]  
[00:48:07.600]  <debugvars>
[00:48:07.600]    // Pre-defined
[00:48:07.600]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.600]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.600]    __dp=0x00000000
[00:48:07.600]    __ap=0x00000000
[00:48:07.600]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.601]    __FlashAddr=0x00000000
[00:48:07.601]    __FlashLen=0x00000000
[00:48:07.601]    __FlashArg=0x00000000
[00:48:07.601]    __FlashOp=0x00000000
[00:48:07.601]    __Result=0x00000000
[00:48:07.601]  </debugvars>
[00:48:07.601]  
[00:48:07.601]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.601]    <block atomic="false" info="">
[00:48:07.601]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.601]        // -> [isSWJ <= 0x00000001]
[00:48:07.602]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.602]        // -> [hasDormant <= 0x00000000]
[00:48:07.602]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.602]        // -> [protType <= 0x00000002]
[00:48:07.602]    </block>
[00:48:07.602]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.602]      // if-block "protType == 1"
[00:48:07.602]        // =>  FALSE
[00:48:07.602]      // skip if-block "protType == 1"
[00:48:07.602]    </control>
[00:48:07.603]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.603]      // if-block "protType == 2"
[00:48:07.603]        // =>  TRUE
[00:48:07.603]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.603]        // if-block "isSWJ"
[00:48:07.603]          // =>  TRUE
[00:48:07.604]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.604]          // if-block "hasDormant"
[00:48:07.604]            // =>  FALSE
[00:48:07.604]          // skip if-block "hasDormant"
[00:48:07.604]        </control>
[00:48:07.604]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.604]          // if-block "!hasDormant"
[00:48:07.605]            // =>  TRUE
[00:48:07.605]          <block atomic="false" info="">
[00:48:07.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.610]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.611]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.616]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.619]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.620]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.620]          </block>
[00:48:07.620]          // end if-block "!hasDormant"
[00:48:07.620]        </control>
[00:48:07.622]        // end if-block "isSWJ"
[00:48:07.622]      </control>
[00:48:07.622]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.622]        // if-block "!isSWJ"
[00:48:07.622]          // =>  FALSE
[00:48:07.622]        // skip if-block "!isSWJ"
[00:48:07.622]      </control>
[00:48:07.622]      <block atomic="false" info="">
[00:48:07.622]        ReadDP(0x0);
[00:48:07.626]  
[00:48:07.626]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.626]  
[00:48:07.627]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.627]      </block>
[00:48:07.627]      // end if-block "protType == 2"
[00:48:07.627]    </control>
[00:48:07.627]  </sequence>
[00:48:07.627]  
[00:48:07.690]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.690]  
[00:48:07.691]  <debugvars>
[00:48:07.691]    // Pre-defined
[00:48:07.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.691]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.691]    __dp=0x00000000
[00:48:07.692]    __ap=0x00000000
[00:48:07.692]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.692]    __FlashAddr=0x00000000
[00:48:07.692]    __FlashLen=0x00000000
[00:48:07.692]    __FlashArg=0x00000000
[00:48:07.692]    __FlashOp=0x00000000
[00:48:07.692]    __Result=0x00000000
[00:48:07.692]  </debugvars>
[00:48:07.693]  
[00:48:07.693]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.693]    <block atomic="false" info="">
[00:48:07.693]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.693]        // -> [isSWJ <= 0x00000001]
[00:48:07.693]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.693]        // -> [hasDormant <= 0x00000000]
[00:48:07.694]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.694]        // -> [protType <= 0x00000002]
[00:48:07.694]    </block>
[00:48:07.694]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.694]      // if-block "protType == 1"
[00:48:07.694]        // =>  FALSE
[00:48:07.695]      // skip if-block "protType == 1"
[00:48:07.695]    </control>
[00:48:07.695]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.695]      // if-block "protType == 2"
[00:48:07.695]        // =>  TRUE
[00:48:07.695]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.695]        // if-block "isSWJ"
[00:48:07.696]          // =>  TRUE
[00:48:07.696]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.696]          // if-block "hasDormant"
[00:48:07.696]            // =>  FALSE
[00:48:07.696]          // skip if-block "hasDormant"
[00:48:07.696]        </control>
[00:48:07.697]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.697]          // if-block "!hasDormant"
[00:48:07.697]            // =>  TRUE
[00:48:07.697]          <block atomic="false" info="">
[00:48:07.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.698]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.701]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.704]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.705]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.707]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.711]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.711]          </block>
[00:48:07.711]          // end if-block "!hasDormant"
[00:48:07.712]        </control>
[00:48:07.712]        // end if-block "isSWJ"
[00:48:07.712]      </control>
[00:48:07.712]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.712]        // if-block "!isSWJ"
[00:48:07.712]          // =>  FALSE
[00:48:07.712]        // skip if-block "!isSWJ"
[00:48:07.712]      </control>
[00:48:07.713]      <block atomic="false" info="">
[00:48:07.713]        ReadDP(0x0);
[00:48:07.714]  
[00:48:07.714]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.714]  
[00:48:07.714]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.714]      </block>
[00:48:07.715]      // end if-block "protType == 2"
[00:48:07.715]    </control>
[00:48:07.715]  </sequence>
[00:48:07.715]  
[00:48:07.766]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.766]  
[00:48:07.766]  <debugvars>
[00:48:07.766]    // Pre-defined
[00:48:07.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.766]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.767]    __dp=0x00000000
[00:48:07.767]    __ap=0x00000000
[00:48:07.767]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.767]    __FlashAddr=0x00000000
[00:48:07.767]    __FlashLen=0x00000000
[00:48:07.767]    __FlashArg=0x00000000
[00:48:07.767]    __FlashOp=0x00000000
[00:48:07.767]    __Result=0x00000000
[00:48:07.768]  </debugvars>
[00:48:07.768]  
[00:48:07.768]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.768]    <block atomic="false" info="">
[00:48:07.768]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.768]        // -> [isSWJ <= 0x00000001]
[00:48:07.768]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.768]        // -> [hasDormant <= 0x00000000]
[00:48:07.768]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.769]        // -> [protType <= 0x00000002]
[00:48:07.769]    </block>
[00:48:07.769]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.769]      // if-block "protType == 1"
[00:48:07.769]        // =>  FALSE
[00:48:07.769]      // skip if-block "protType == 1"
[00:48:07.769]    </control>
[00:48:07.770]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.770]      // if-block "protType == 2"
[00:48:07.770]        // =>  TRUE
[00:48:07.770]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.770]        // if-block "isSWJ"
[00:48:07.770]          // =>  TRUE
[00:48:07.770]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.770]          // if-block "hasDormant"
[00:48:07.770]            // =>  FALSE
[00:48:07.771]          // skip if-block "hasDormant"
[00:48:07.771]        </control>
[00:48:07.771]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.771]          // if-block "!hasDormant"
[00:48:07.771]            // =>  TRUE
[00:48:07.771]          <block atomic="false" info="">
[00:48:07.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.773]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.776]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.777]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.779]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.780]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.780]          </block>
[00:48:07.781]          // end if-block "!hasDormant"
[00:48:07.781]        </control>
[00:48:07.781]        // end if-block "isSWJ"
[00:48:07.781]      </control>
[00:48:07.781]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.781]        // if-block "!isSWJ"
[00:48:07.781]          // =>  FALSE
[00:48:07.781]        // skip if-block "!isSWJ"
[00:48:07.782]      </control>
[00:48:07.782]      <block atomic="false" info="">
[00:48:07.782]        ReadDP(0x0);
[00:48:07.783]  
[00:48:07.783]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.783]  
[00:48:07.783]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.783]      </block>
[00:48:07.783]      // end if-block "protType == 2"
[00:48:07.784]    </control>
[00:48:07.784]  </sequence>
[00:48:07.784]  
[00:48:07.842]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.842]  
[00:48:07.842]  <debugvars>
[00:48:07.842]    // Pre-defined
[00:48:07.842]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.842]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.842]    __dp=0x00000000
[00:48:07.843]    __ap=0x00000000
[00:48:07.843]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.843]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.843]    __FlashAddr=0x00000000
[00:48:07.843]    __FlashLen=0x00000000
[00:48:07.843]    __FlashArg=0x00000000
[00:48:07.843]    __FlashOp=0x00000000
[00:48:07.843]    __Result=0x00000000
[00:48:07.843]  </debugvars>
[00:48:07.843]  
[00:48:07.844]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.844]    <block atomic="false" info="">
[00:48:07.844]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.844]        // -> [isSWJ <= 0x00000001]
[00:48:07.844]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.844]        // -> [hasDormant <= 0x00000000]
[00:48:07.844]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.844]        // -> [protType <= 0x00000002]
[00:48:07.844]    </block>
[00:48:07.845]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.845]      // if-block "protType == 1"
[00:48:07.845]        // =>  FALSE
[00:48:07.845]      // skip if-block "protType == 1"
[00:48:07.845]    </control>
[00:48:07.845]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.845]      // if-block "protType == 2"
[00:48:07.845]        // =>  TRUE
[00:48:07.845]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.845]        // if-block "isSWJ"
[00:48:07.846]          // =>  TRUE
[00:48:07.846]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.846]          // if-block "hasDormant"
[00:48:07.846]            // =>  FALSE
[00:48:07.846]          // skip if-block "hasDormant"
[00:48:07.846]        </control>
[00:48:07.846]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.846]          // if-block "!hasDormant"
[00:48:07.846]            // =>  TRUE
[00:48:07.846]          <block atomic="false" info="">
[00:48:07.847]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.853]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.854]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.856]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.857]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.861]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.862]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.863]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.863]          </block>
[00:48:07.863]          // end if-block "!hasDormant"
[00:48:07.863]        </control>
[00:48:07.863]        // end if-block "isSWJ"
[00:48:07.864]      </control>
[00:48:07.864]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.864]        // if-block "!isSWJ"
[00:48:07.864]          // =>  FALSE
[00:48:07.864]        // skip if-block "!isSWJ"
[00:48:07.864]      </control>
[00:48:07.865]      <block atomic="false" info="">
[00:48:07.865]        ReadDP(0x0);
[00:48:07.868]  
[00:48:07.868]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.868]  
[00:48:07.868]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.868]      </block>
[00:48:07.868]      // end if-block "protType == 2"
[00:48:07.869]    </control>
[00:48:07.869]  </sequence>
[00:48:07.869]  
[00:48:07.934]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:07.934]  
[00:48:07.934]  <debugvars>
[00:48:07.934]    // Pre-defined
[00:48:07.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:07.934]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:07.934]    __dp=0x00000000
[00:48:07.934]    __ap=0x00000000
[00:48:07.934]    __traceout=0x00000000      (Trace Disabled)
[00:48:07.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:07.934]    __FlashAddr=0x00000000
[00:48:07.934]    __FlashLen=0x00000000
[00:48:07.934]    __FlashArg=0x00000000
[00:48:07.935]    __FlashOp=0x00000000
[00:48:07.935]    __Result=0x00000000
[00:48:07.935]  </debugvars>
[00:48:07.935]  
[00:48:07.935]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:07.935]    <block atomic="false" info="">
[00:48:07.935]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:07.935]        // -> [isSWJ <= 0x00000001]
[00:48:07.935]      __var hasDormant = __protocol & 0x00020000;
[00:48:07.936]        // -> [hasDormant <= 0x00000000]
[00:48:07.936]      __var protType   = __protocol & 0x0000FFFF;
[00:48:07.936]        // -> [protType <= 0x00000002]
[00:48:07.936]    </block>
[00:48:07.936]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:07.936]      // if-block "protType == 1"
[00:48:07.936]        // =>  FALSE
[00:48:07.936]      // skip if-block "protType == 1"
[00:48:07.938]    </control>
[00:48:07.938]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:07.938]      // if-block "protType == 2"
[00:48:07.938]        // =>  TRUE
[00:48:07.938]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:07.938]        // if-block "isSWJ"
[00:48:07.938]          // =>  TRUE
[00:48:07.938]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:07.938]          // if-block "hasDormant"
[00:48:07.938]            // =>  FALSE
[00:48:07.939]          // skip if-block "hasDormant"
[00:48:07.939]        </control>
[00:48:07.939]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:07.939]          // if-block "!hasDormant"
[00:48:07.939]            // =>  TRUE
[00:48:07.939]          <block atomic="false" info="">
[00:48:07.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:07.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.941]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:07.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:07.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:07.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.949]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:07.958]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:07.958]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:07.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:07.965]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:07.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:07.966]          </block>
[00:48:07.966]          // end if-block "!hasDormant"
[00:48:07.966]        </control>
[00:48:07.966]        // end if-block "isSWJ"
[00:48:07.967]      </control>
[00:48:07.967]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:07.967]        // if-block "!isSWJ"
[00:48:07.967]          // =>  FALSE
[00:48:07.967]        // skip if-block "!isSWJ"
[00:48:07.967]      </control>
[00:48:07.967]      <block atomic="false" info="">
[00:48:07.967]        ReadDP(0x0);
[00:48:07.973]  
[00:48:07.973]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:07.973]  
[00:48:07.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:07.973]      </block>
[00:48:07.973]      // end if-block "protType == 2"
[00:48:07.973]    </control>
[00:48:07.973]  </sequence>
[00:48:07.973]  
[00:48:08.026]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.026]  
[00:48:08.026]  <debugvars>
[00:48:08.026]    // Pre-defined
[00:48:08.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.027]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.027]    __dp=0x00000000
[00:48:08.027]    __ap=0x00000000
[00:48:08.027]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.027]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.027]    __FlashAddr=0x00000000
[00:48:08.027]    __FlashLen=0x00000000
[00:48:08.027]    __FlashArg=0x00000000
[00:48:08.027]    __FlashOp=0x00000000
[00:48:08.028]    __Result=0x00000000
[00:48:08.028]  </debugvars>
[00:48:08.028]  
[00:48:08.028]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.028]    <block atomic="false" info="">
[00:48:08.028]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.028]        // -> [isSWJ <= 0x00000001]
[00:48:08.029]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.029]        // -> [hasDormant <= 0x00000000]
[00:48:08.029]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.029]        // -> [protType <= 0x00000002]
[00:48:08.029]    </block>
[00:48:08.029]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.029]      // if-block "protType == 1"
[00:48:08.029]        // =>  FALSE
[00:48:08.030]      // skip if-block "protType == 1"
[00:48:08.030]    </control>
[00:48:08.030]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.030]      // if-block "protType == 2"
[00:48:08.030]        // =>  TRUE
[00:48:08.030]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.030]        // if-block "isSWJ"
[00:48:08.030]          // =>  TRUE
[00:48:08.030]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.030]          // if-block "hasDormant"
[00:48:08.030]            // =>  FALSE
[00:48:08.031]          // skip if-block "hasDormant"
[00:48:08.031]        </control>
[00:48:08.031]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.031]          // if-block "!hasDormant"
[00:48:08.031]            // =>  TRUE
[00:48:08.031]          <block atomic="false" info="">
[00:48:08.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.033]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.036]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.036]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.037]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.037]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.039]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.040]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.040]          </block>
[00:48:08.040]          // end if-block "!hasDormant"
[00:48:08.040]        </control>
[00:48:08.041]        // end if-block "isSWJ"
[00:48:08.041]      </control>
[00:48:08.041]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.041]        // if-block "!isSWJ"
[00:48:08.041]          // =>  FALSE
[00:48:08.041]        // skip if-block "!isSWJ"
[00:48:08.042]      </control>
[00:48:08.042]      <block atomic="false" info="">
[00:48:08.042]        ReadDP(0x0);
[00:48:08.042]  
[00:48:08.042]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.042]  
[00:48:08.042]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.043]      </block>
[00:48:08.043]      // end if-block "protType == 2"
[00:48:08.043]    </control>
[00:48:08.043]  </sequence>
[00:48:08.043]  
[00:48:08.102]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.102]  
[00:48:08.102]  <debugvars>
[00:48:08.102]    // Pre-defined
[00:48:08.102]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.102]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.104]    __dp=0x00000000
[00:48:08.104]    __ap=0x00000000
[00:48:08.104]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.104]    __FlashAddr=0x00000000
[00:48:08.104]    __FlashLen=0x00000000
[00:48:08.104]    __FlashArg=0x00000000
[00:48:08.104]    __FlashOp=0x00000000
[00:48:08.104]    __Result=0x00000000
[00:48:08.104]  </debugvars>
[00:48:08.104]  
[00:48:08.105]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.105]    <block atomic="false" info="">
[00:48:08.105]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.105]        // -> [isSWJ <= 0x00000001]
[00:48:08.105]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.105]        // -> [hasDormant <= 0x00000000]
[00:48:08.105]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.105]        // -> [protType <= 0x00000002]
[00:48:08.105]    </block>
[00:48:08.105]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.106]      // if-block "protType == 1"
[00:48:08.106]        // =>  FALSE
[00:48:08.106]      // skip if-block "protType == 1"
[00:48:08.106]    </control>
[00:48:08.106]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.106]      // if-block "protType == 2"
[00:48:08.106]        // =>  TRUE
[00:48:08.106]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.106]        // if-block "isSWJ"
[00:48:08.106]          // =>  TRUE
[00:48:08.106]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.106]          // if-block "hasDormant"
[00:48:08.106]            // =>  FALSE
[00:48:08.107]          // skip if-block "hasDormant"
[00:48:08.107]        </control>
[00:48:08.107]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.107]          // if-block "!hasDormant"
[00:48:08.107]            // =>  TRUE
[00:48:08.107]          <block atomic="false" info="">
[00:48:08.107]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.110]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.110]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.111]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.113]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.113]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.121]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.128]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.128]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.130]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.130]          </block>
[00:48:08.130]          // end if-block "!hasDormant"
[00:48:08.130]        </control>
[00:48:08.130]        // end if-block "isSWJ"
[00:48:08.130]      </control>
[00:48:08.131]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.131]        // if-block "!isSWJ"
[00:48:08.131]          // =>  FALSE
[00:48:08.131]        // skip if-block "!isSWJ"
[00:48:08.131]      </control>
[00:48:08.131]      <block atomic="false" info="">
[00:48:08.131]        ReadDP(0x0);
[00:48:08.133]  
[00:48:08.133]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.133]  
[00:48:08.133]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.133]      </block>
[00:48:08.133]      // end if-block "protType == 2"
[00:48:08.133]    </control>
[00:48:08.133]  </sequence>
[00:48:08.133]  
[00:48:08.193]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.193]  
[00:48:08.193]  <debugvars>
[00:48:08.193]    // Pre-defined
[00:48:08.193]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.194]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.194]    __dp=0x00000000
[00:48:08.194]    __ap=0x00000000
[00:48:08.194]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.194]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.194]    __FlashAddr=0x00000000
[00:48:08.194]    __FlashLen=0x00000000
[00:48:08.194]    __FlashArg=0x00000000
[00:48:08.194]    __FlashOp=0x00000000
[00:48:08.195]    __Result=0x00000000
[00:48:08.195]  </debugvars>
[00:48:08.195]  
[00:48:08.195]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.195]    <block atomic="false" info="">
[00:48:08.195]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.195]        // -> [isSWJ <= 0x00000001]
[00:48:08.195]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.195]        // -> [hasDormant <= 0x00000000]
[00:48:08.195]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.195]        // -> [protType <= 0x00000002]
[00:48:08.195]    </block>
[00:48:08.195]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.195]      // if-block "protType == 1"
[00:48:08.195]        // =>  FALSE
[00:48:08.197]      // skip if-block "protType == 1"
[00:48:08.197]    </control>
[00:48:08.197]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.197]      // if-block "protType == 2"
[00:48:08.197]        // =>  TRUE
[00:48:08.197]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.197]        // if-block "isSWJ"
[00:48:08.197]          // =>  TRUE
[00:48:08.198]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.198]          // if-block "hasDormant"
[00:48:08.198]            // =>  FALSE
[00:48:08.198]          // skip if-block "hasDormant"
[00:48:08.198]        </control>
[00:48:08.198]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.199]          // if-block "!hasDormant"
[00:48:08.199]            // =>  TRUE
[00:48:08.199]          <block atomic="false" info="">
[00:48:08.199]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.201]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.204]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.204]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.205]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.206]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.211]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.213]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.213]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.214]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.215]          </block>
[00:48:08.215]          // end if-block "!hasDormant"
[00:48:08.215]        </control>
[00:48:08.215]        // end if-block "isSWJ"
[00:48:08.215]      </control>
[00:48:08.216]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.216]        // if-block "!isSWJ"
[00:48:08.216]          // =>  FALSE
[00:48:08.216]        // skip if-block "!isSWJ"
[00:48:08.216]      </control>
[00:48:08.216]      <block atomic="false" info="">
[00:48:08.216]        ReadDP(0x0);
[00:48:08.218]  
[00:48:08.218]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.218]  
[00:48:08.218]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.218]      </block>
[00:48:08.218]      // end if-block "protType == 2"
[00:48:08.218]    </control>
[00:48:08.218]  </sequence>
[00:48:08.218]  
[00:48:08.271]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.271]  
[00:48:08.272]  <debugvars>
[00:48:08.272]    // Pre-defined
[00:48:08.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.272]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.272]    __dp=0x00000000
[00:48:08.272]    __ap=0x00000000
[00:48:08.272]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.272]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.272]    __FlashAddr=0x00000000
[00:48:08.273]    __FlashLen=0x00000000
[00:48:08.273]    __FlashArg=0x00000000
[00:48:08.273]    __FlashOp=0x00000000
[00:48:08.273]    __Result=0x00000000
[00:48:08.273]  </debugvars>
[00:48:08.273]  
[00:48:08.273]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.273]    <block atomic="false" info="">
[00:48:08.273]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.273]        // -> [isSWJ <= 0x00000001]
[00:48:08.274]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.274]        // -> [hasDormant <= 0x00000000]
[00:48:08.274]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.274]        // -> [protType <= 0x00000002]
[00:48:08.274]    </block>
[00:48:08.274]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.275]      // if-block "protType == 1"
[00:48:08.275]        // =>  FALSE
[00:48:08.275]      // skip if-block "protType == 1"
[00:48:08.275]    </control>
[00:48:08.275]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.276]      // if-block "protType == 2"
[00:48:08.276]        // =>  TRUE
[00:48:08.276]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.276]        // if-block "isSWJ"
[00:48:08.276]          // =>  TRUE
[00:48:08.276]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.276]          // if-block "hasDormant"
[00:48:08.276]            // =>  FALSE
[00:48:08.276]          // skip if-block "hasDormant"
[00:48:08.277]        </control>
[00:48:08.277]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.277]          // if-block "!hasDormant"
[00:48:08.277]            // =>  TRUE
[00:48:08.277]          <block atomic="false" info="">
[00:48:08.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.280]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.280]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.281]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.283]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.286]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.286]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.287]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.287]          </block>
[00:48:08.288]          // end if-block "!hasDormant"
[00:48:08.288]        </control>
[00:48:08.288]        // end if-block "isSWJ"
[00:48:08.288]      </control>
[00:48:08.288]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.288]        // if-block "!isSWJ"
[00:48:08.288]          // =>  FALSE
[00:48:08.288]        // skip if-block "!isSWJ"
[00:48:08.288]      </control>
[00:48:08.289]      <block atomic="false" info="">
[00:48:08.289]        ReadDP(0x0);
[00:48:08.290]  
[00:48:08.290]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.290]  
[00:48:08.290]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.290]      </block>
[00:48:08.290]      // end if-block "protType == 2"
[00:48:08.290]    </control>
[00:48:08.290]  </sequence>
[00:48:08.290]  
[00:48:08.347]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.347]  
[00:48:08.347]  <debugvars>
[00:48:08.347]    // Pre-defined
[00:48:08.347]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.348]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.348]    __dp=0x00000000
[00:48:08.348]    __ap=0x00000000
[00:48:08.348]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.348]    __FlashAddr=0x00000000
[00:48:08.348]    __FlashLen=0x00000000
[00:48:08.349]    __FlashArg=0x00000000
[00:48:08.349]    __FlashOp=0x00000000
[00:48:08.349]    __Result=0x00000000
[00:48:08.349]  </debugvars>
[00:48:08.349]  
[00:48:08.349]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.349]    <block atomic="false" info="">
[00:48:08.349]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.350]        // -> [isSWJ <= 0x00000001]
[00:48:08.350]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.350]        // -> [hasDormant <= 0x00000000]
[00:48:08.350]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.350]        // -> [protType <= 0x00000002]
[00:48:08.350]    </block>
[00:48:08.350]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.350]      // if-block "protType == 1"
[00:48:08.351]        // =>  FALSE
[00:48:08.351]      // skip if-block "protType == 1"
[00:48:08.351]    </control>
[00:48:08.351]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.351]      // if-block "protType == 2"
[00:48:08.351]        // =>  TRUE
[00:48:08.351]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.351]        // if-block "isSWJ"
[00:48:08.351]          // =>  TRUE
[00:48:08.351]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.352]          // if-block "hasDormant"
[00:48:08.352]            // =>  FALSE
[00:48:08.352]          // skip if-block "hasDormant"
[00:48:08.352]        </control>
[00:48:08.352]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.352]          // if-block "!hasDormant"
[00:48:08.352]            // =>  TRUE
[00:48:08.352]          <block atomic="false" info="">
[00:48:08.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.355]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.367]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.371]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.375]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.375]          </block>
[00:48:08.375]          // end if-block "!hasDormant"
[00:48:08.375]        </control>
[00:48:08.375]        // end if-block "isSWJ"
[00:48:08.375]      </control>
[00:48:08.375]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.375]        // if-block "!isSWJ"
[00:48:08.375]          // =>  FALSE
[00:48:08.375]        // skip if-block "!isSWJ"
[00:48:08.376]      </control>
[00:48:08.376]      <block atomic="false" info="">
[00:48:08.376]        ReadDP(0x0);
[00:48:08.378]  
[00:48:08.378]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.378]  
[00:48:08.379]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.379]      </block>
[00:48:08.379]      // end if-block "protType == 2"
[00:48:08.379]    </control>
[00:48:08.379]  </sequence>
[00:48:08.379]  
[00:48:08.439]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.439]  
[00:48:08.439]  <debugvars>
[00:48:08.439]    // Pre-defined
[00:48:08.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.440]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.440]    __dp=0x00000000
[00:48:08.440]    __ap=0x00000000
[00:48:08.440]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.440]    __FlashAddr=0x00000000
[00:48:08.441]    __FlashLen=0x00000000
[00:48:08.441]    __FlashArg=0x00000000
[00:48:08.441]    __FlashOp=0x00000000
[00:48:08.441]    __Result=0x00000000
[00:48:08.441]  </debugvars>
[00:48:08.441]  
[00:48:08.441]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.441]    <block atomic="false" info="">
[00:48:08.441]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.442]        // -> [isSWJ <= 0x00000001]
[00:48:08.442]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.442]        // -> [hasDormant <= 0x00000000]
[00:48:08.442]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.442]        // -> [protType <= 0x00000002]
[00:48:08.442]    </block>
[00:48:08.442]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.442]      // if-block "protType == 1"
[00:48:08.442]        // =>  FALSE
[00:48:08.443]      // skip if-block "protType == 1"
[00:48:08.443]    </control>
[00:48:08.443]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.443]      // if-block "protType == 2"
[00:48:08.443]        // =>  TRUE
[00:48:08.443]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.443]        // if-block "isSWJ"
[00:48:08.443]          // =>  TRUE
[00:48:08.443]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.443]          // if-block "hasDormant"
[00:48:08.444]            // =>  FALSE
[00:48:08.444]          // skip if-block "hasDormant"
[00:48:08.444]        </control>
[00:48:08.444]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.444]          // if-block "!hasDormant"
[00:48:08.444]            // =>  TRUE
[00:48:08.444]          <block atomic="false" info="">
[00:48:08.444]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.449]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.449]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.452]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.456]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.457]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.458]          </block>
[00:48:08.458]          // end if-block "!hasDormant"
[00:48:08.458]        </control>
[00:48:08.458]        // end if-block "isSWJ"
[00:48:08.458]      </control>
[00:48:08.458]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.458]        // if-block "!isSWJ"
[00:48:08.458]          // =>  FALSE
[00:48:08.458]        // skip if-block "!isSWJ"
[00:48:08.459]      </control>
[00:48:08.459]      <block atomic="false" info="">
[00:48:08.459]        ReadDP(0x0);
[00:48:08.460]  
[00:48:08.460]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.460]  
[00:48:08.460]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.461]      </block>
[00:48:08.461]      // end if-block "protType == 2"
[00:48:08.461]    </control>
[00:48:08.461]  </sequence>
[00:48:08.461]  
[00:48:08.516]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.516]  
[00:48:08.517]  <debugvars>
[00:48:08.517]    // Pre-defined
[00:48:08.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.517]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.517]    __dp=0x00000000
[00:48:08.517]    __ap=0x00000000
[00:48:08.517]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.517]    __FlashAddr=0x00000000
[00:48:08.517]    __FlashLen=0x00000000
[00:48:08.518]    __FlashArg=0x00000000
[00:48:08.518]    __FlashOp=0x00000000
[00:48:08.518]    __Result=0x00000000
[00:48:08.518]  </debugvars>
[00:48:08.518]  
[00:48:08.518]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.518]    <block atomic="false" info="">
[00:48:08.518]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.518]        // -> [isSWJ <= 0x00000001]
[00:48:08.518]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.518]        // -> [hasDormant <= 0x00000000]
[00:48:08.519]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.519]        // -> [protType <= 0x00000002]
[00:48:08.519]    </block>
[00:48:08.519]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.519]      // if-block "protType == 1"
[00:48:08.519]        // =>  FALSE
[00:48:08.519]      // skip if-block "protType == 1"
[00:48:08.519]    </control>
[00:48:08.519]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.519]      // if-block "protType == 2"
[00:48:08.520]        // =>  TRUE
[00:48:08.520]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.520]        // if-block "isSWJ"
[00:48:08.520]          // =>  TRUE
[00:48:08.520]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.520]          // if-block "hasDormant"
[00:48:08.520]            // =>  FALSE
[00:48:08.520]          // skip if-block "hasDormant"
[00:48:08.521]        </control>
[00:48:08.521]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.521]          // if-block "!hasDormant"
[00:48:08.521]            // =>  TRUE
[00:48:08.521]          <block atomic="false" info="">
[00:48:08.521]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.522]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.524]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.531]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.533]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.538]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.538]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.539]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.540]          </block>
[00:48:08.540]          // end if-block "!hasDormant"
[00:48:08.540]        </control>
[00:48:08.540]        // end if-block "isSWJ"
[00:48:08.540]      </control>
[00:48:08.540]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.540]        // if-block "!isSWJ"
[00:48:08.540]          // =>  FALSE
[00:48:08.540]        // skip if-block "!isSWJ"
[00:48:08.541]      </control>
[00:48:08.541]      <block atomic="false" info="">
[00:48:08.541]        ReadDP(0x0);
[00:48:08.542]  
[00:48:08.542]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.542]  
[00:48:08.542]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.542]      </block>
[00:48:08.542]      // end if-block "protType == 2"
[00:48:08.543]    </control>
[00:48:08.543]  </sequence>
[00:48:08.543]  
[00:48:08.607]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.607]  
[00:48:08.609]  <debugvars>
[00:48:08.609]    // Pre-defined
[00:48:08.609]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.609]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.609]    __dp=0x00000000
[00:48:08.609]    __ap=0x00000000
[00:48:08.609]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.609]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.609]    __FlashAddr=0x00000000
[00:48:08.609]    __FlashLen=0x00000000
[00:48:08.610]    __FlashArg=0x00000000
[00:48:08.610]    __FlashOp=0x00000000
[00:48:08.610]    __Result=0x00000000
[00:48:08.610]  </debugvars>
[00:48:08.610]  
[00:48:08.610]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.610]    <block atomic="false" info="">
[00:48:08.610]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.610]        // -> [isSWJ <= 0x00000001]
[00:48:08.610]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.611]        // -> [hasDormant <= 0x00000000]
[00:48:08.611]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.611]        // -> [protType <= 0x00000002]
[00:48:08.611]    </block>
[00:48:08.611]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.611]      // if-block "protType == 1"
[00:48:08.611]        // =>  FALSE
[00:48:08.611]      // skip if-block "protType == 1"
[00:48:08.611]    </control>
[00:48:08.612]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.612]      // if-block "protType == 2"
[00:48:08.612]        // =>  TRUE
[00:48:08.612]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.612]        // if-block "isSWJ"
[00:48:08.612]          // =>  TRUE
[00:48:08.612]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.612]          // if-block "hasDormant"
[00:48:08.613]            // =>  FALSE
[00:48:08.613]          // skip if-block "hasDormant"
[00:48:08.613]        </control>
[00:48:08.613]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.613]          // if-block "!hasDormant"
[00:48:08.613]            // =>  TRUE
[00:48:08.613]          <block atomic="false" info="">
[00:48:08.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.615]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.615]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.622]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.626]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.626]          </block>
[00:48:08.626]          // end if-block "!hasDormant"
[00:48:08.626]        </control>
[00:48:08.626]        // end if-block "isSWJ"
[00:48:08.626]      </control>
[00:48:08.626]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.626]        // if-block "!isSWJ"
[00:48:08.626]          // =>  FALSE
[00:48:08.626]        // skip if-block "!isSWJ"
[00:48:08.627]      </control>
[00:48:08.627]      <block atomic="false" info="">
[00:48:08.627]        ReadDP(0x0);
[00:48:08.628]  
[00:48:08.628]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.628]  
[00:48:08.628]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.628]      </block>
[00:48:08.628]      // end if-block "protType == 2"
[00:48:08.628]    </control>
[00:48:08.628]  </sequence>
[00:48:08.629]  
[00:48:08.682]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.682]  
[00:48:08.682]  <debugvars>
[00:48:08.682]    // Pre-defined
[00:48:08.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.683]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.683]    __dp=0x00000000
[00:48:08.683]    __ap=0x00000000
[00:48:08.683]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.683]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.683]    __FlashAddr=0x00000000
[00:48:08.683]    __FlashLen=0x00000000
[00:48:08.683]    __FlashArg=0x00000000
[00:48:08.683]    __FlashOp=0x00000000
[00:48:08.683]    __Result=0x00000000
[00:48:08.683]  </debugvars>
[00:48:08.683]  
[00:48:08.683]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.685]    <block atomic="false" info="">
[00:48:08.685]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.685]        // -> [isSWJ <= 0x00000001]
[00:48:08.685]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.685]        // -> [hasDormant <= 0x00000000]
[00:48:08.685]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.685]        // -> [protType <= 0x00000002]
[00:48:08.685]    </block>
[00:48:08.685]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.685]      // if-block "protType == 1"
[00:48:08.685]        // =>  FALSE
[00:48:08.685]      // skip if-block "protType == 1"
[00:48:08.685]    </control>
[00:48:08.685]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.685]      // if-block "protType == 2"
[00:48:08.686]        // =>  TRUE
[00:48:08.686]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.686]        // if-block "isSWJ"
[00:48:08.686]          // =>  TRUE
[00:48:08.686]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.686]          // if-block "hasDormant"
[00:48:08.686]            // =>  FALSE
[00:48:08.687]          // skip if-block "hasDormant"
[00:48:08.687]        </control>
[00:48:08.687]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.687]          // if-block "!hasDormant"
[00:48:08.687]            // =>  TRUE
[00:48:08.688]          <block atomic="false" info="">
[00:48:08.688]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.689]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.690]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.692]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.693]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.696]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.697]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.697]          </block>
[00:48:08.697]          // end if-block "!hasDormant"
[00:48:08.697]        </control>
[00:48:08.698]        // end if-block "isSWJ"
[00:48:08.698]      </control>
[00:48:08.698]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.698]        // if-block "!isSWJ"
[00:48:08.698]          // =>  FALSE
[00:48:08.698]        // skip if-block "!isSWJ"
[00:48:08.698]      </control>
[00:48:08.698]      <block atomic="false" info="">
[00:48:08.698]        ReadDP(0x0);
[00:48:08.700]  
[00:48:08.700]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.700]  
[00:48:08.700]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.700]      </block>
[00:48:08.700]      // end if-block "protType == 2"
[00:48:08.700]    </control>
[00:48:08.700]  </sequence>
[00:48:08.700]  
[00:48:08.757]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.757]  
[00:48:08.757]  <debugvars>
[00:48:08.759]    // Pre-defined
[00:48:08.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.759]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.759]    __dp=0x00000000
[00:48:08.759]    __ap=0x00000000
[00:48:08.759]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.759]    __FlashAddr=0x00000000
[00:48:08.759]    __FlashLen=0x00000000
[00:48:08.759]    __FlashArg=0x00000000
[00:48:08.760]    __FlashOp=0x00000000
[00:48:08.760]    __Result=0x00000000
[00:48:08.760]  </debugvars>
[00:48:08.760]  
[00:48:08.760]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.760]    <block atomic="false" info="">
[00:48:08.760]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.760]        // -> [isSWJ <= 0x00000001]
[00:48:08.760]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.760]        // -> [hasDormant <= 0x00000000]
[00:48:08.760]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.760]        // -> [protType <= 0x00000002]
[00:48:08.761]    </block>
[00:48:08.761]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.761]      // if-block "protType == 1"
[00:48:08.761]        // =>  FALSE
[00:48:08.761]      // skip if-block "protType == 1"
[00:48:08.761]    </control>
[00:48:08.761]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.761]      // if-block "protType == 2"
[00:48:08.761]        // =>  TRUE
[00:48:08.761]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.761]        // if-block "isSWJ"
[00:48:08.761]          // =>  TRUE
[00:48:08.762]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.762]          // if-block "hasDormant"
[00:48:08.762]            // =>  FALSE
[00:48:08.762]          // skip if-block "hasDormant"
[00:48:08.762]        </control>
[00:48:08.762]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.762]          // if-block "!hasDormant"
[00:48:08.762]            // =>  TRUE
[00:48:08.762]          <block atomic="false" info="">
[00:48:08.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.767]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.771]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.777]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.778]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.778]          </block>
[00:48:08.778]          // end if-block "!hasDormant"
[00:48:08.778]        </control>
[00:48:08.778]        // end if-block "isSWJ"
[00:48:08.778]      </control>
[00:48:08.778]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.780]        // if-block "!isSWJ"
[00:48:08.780]          // =>  FALSE
[00:48:08.780]        // skip if-block "!isSWJ"
[00:48:08.780]      </control>
[00:48:08.780]      <block atomic="false" info="">
[00:48:08.780]        ReadDP(0x0);
[00:48:08.781]  
[00:48:08.781]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.781]  
[00:48:08.781]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.781]      </block>
[00:48:08.782]      // end if-block "protType == 2"
[00:48:08.782]    </control>
[00:48:08.782]  </sequence>
[00:48:08.782]  
[00:48:08.833]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.833]  
[00:48:08.833]  <debugvars>
[00:48:08.833]    // Pre-defined
[00:48:08.833]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.835]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.835]    __dp=0x00000000
[00:48:08.835]    __ap=0x00000000
[00:48:08.835]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.835]    __FlashAddr=0x00000000
[00:48:08.835]    __FlashLen=0x00000000
[00:48:08.835]    __FlashArg=0x00000000
[00:48:08.835]    __FlashOp=0x00000000
[00:48:08.836]    __Result=0x00000000
[00:48:08.836]  </debugvars>
[00:48:08.836]  
[00:48:08.836]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.837]    <block atomic="false" info="">
[00:48:08.837]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.837]        // -> [isSWJ <= 0x00000001]
[00:48:08.837]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.837]        // -> [hasDormant <= 0x00000000]
[00:48:08.837]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.837]        // -> [protType <= 0x00000002]
[00:48:08.837]    </block>
[00:48:08.837]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.837]      // if-block "protType == 1"
[00:48:08.838]        // =>  FALSE
[00:48:08.838]      // skip if-block "protType == 1"
[00:48:08.838]    </control>
[00:48:08.838]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.838]      // if-block "protType == 2"
[00:48:08.838]        // =>  TRUE
[00:48:08.838]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.838]        // if-block "isSWJ"
[00:48:08.838]          // =>  TRUE
[00:48:08.838]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.838]          // if-block "hasDormant"
[00:48:08.838]            // =>  FALSE
[00:48:08.838]          // skip if-block "hasDormant"
[00:48:08.838]        </control>
[00:48:08.838]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.838]          // if-block "!hasDormant"
[00:48:08.840]            // =>  TRUE
[00:48:08.840]          <block atomic="false" info="">
[00:48:08.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.841]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.845]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.847]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.847]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.848]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.850]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.850]          </block>
[00:48:08.851]          // end if-block "!hasDormant"
[00:48:08.851]        </control>
[00:48:08.851]        // end if-block "isSWJ"
[00:48:08.851]      </control>
[00:48:08.851]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.851]        // if-block "!isSWJ"
[00:48:08.852]          // =>  FALSE
[00:48:08.852]        // skip if-block "!isSWJ"
[00:48:08.852]      </control>
[00:48:08.852]      <block atomic="false" info="">
[00:48:08.852]        ReadDP(0x0);
[00:48:08.853]  
[00:48:08.853]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.853]  
[00:48:08.853]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.853]      </block>
[00:48:08.853]      // end if-block "protType == 2"
[00:48:08.853]    </control>
[00:48:08.853]  </sequence>
[00:48:08.853]  
[00:48:08.909]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.909]  
[00:48:08.909]  <debugvars>
[00:48:08.909]    // Pre-defined
[00:48:08.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.909]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.909]    __dp=0x00000000
[00:48:08.909]    __ap=0x00000000
[00:48:08.909]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.911]    __FlashAddr=0x00000000
[00:48:08.911]    __FlashLen=0x00000000
[00:48:08.911]    __FlashArg=0x00000000
[00:48:08.911]    __FlashOp=0x00000000
[00:48:08.911]    __Result=0x00000000
[00:48:08.911]  </debugvars>
[00:48:08.911]  
[00:48:08.911]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.911]    <block atomic="false" info="">
[00:48:08.911]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.911]        // -> [isSWJ <= 0x00000001]
[00:48:08.912]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.912]        // -> [hasDormant <= 0x00000000]
[00:48:08.912]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.912]        // -> [protType <= 0x00000002]
[00:48:08.912]    </block>
[00:48:08.912]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.913]      // if-block "protType == 1"
[00:48:08.913]        // =>  FALSE
[00:48:08.913]      // skip if-block "protType == 1"
[00:48:08.913]    </control>
[00:48:08.913]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.913]      // if-block "protType == 2"
[00:48:08.913]        // =>  TRUE
[00:48:08.913]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.913]        // if-block "isSWJ"
[00:48:08.913]          // =>  TRUE
[00:48:08.914]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.914]          // if-block "hasDormant"
[00:48:08.914]            // =>  FALSE
[00:48:08.914]          // skip if-block "hasDormant"
[00:48:08.914]        </control>
[00:48:08.914]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.914]          // if-block "!hasDormant"
[00:48:08.914]            // =>  TRUE
[00:48:08.914]          <block atomic="false" info="">
[00:48:08.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.916]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:08.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.921]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:08.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:08.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:08.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.925]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:08.929]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:08.929]          </block>
[00:48:08.930]          // end if-block "!hasDormant"
[00:48:08.930]        </control>
[00:48:08.930]        // end if-block "isSWJ"
[00:48:08.930]      </control>
[00:48:08.930]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:08.930]        // if-block "!isSWJ"
[00:48:08.930]          // =>  FALSE
[00:48:08.930]        // skip if-block "!isSWJ"
[00:48:08.931]      </control>
[00:48:08.931]      <block atomic="false" info="">
[00:48:08.931]        ReadDP(0x0);
[00:48:08.932]  
[00:48:08.932]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:08.932]  
[00:48:08.932]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:08.932]      </block>
[00:48:08.932]      // end if-block "protType == 2"
[00:48:08.933]    </control>
[00:48:08.933]  </sequence>
[00:48:08.933]  
[00:48:08.985]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:08.985]  
[00:48:08.985]  <debugvars>
[00:48:08.985]    // Pre-defined
[00:48:08.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:08.985]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:08.985]    __dp=0x00000000
[00:48:08.985]    __ap=0x00000000
[00:48:08.985]    __traceout=0x00000000      (Trace Disabled)
[00:48:08.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:08.986]    __FlashAddr=0x00000000
[00:48:08.986]    __FlashLen=0x00000000
[00:48:08.986]    __FlashArg=0x00000000
[00:48:08.986]    __FlashOp=0x00000000
[00:48:08.986]    __Result=0x00000000
[00:48:08.986]  </debugvars>
[00:48:08.986]  
[00:48:08.986]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:08.986]    <block atomic="false" info="">
[00:48:08.987]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:08.987]        // -> [isSWJ <= 0x00000001]
[00:48:08.987]      __var hasDormant = __protocol & 0x00020000;
[00:48:08.987]        // -> [hasDormant <= 0x00000000]
[00:48:08.987]      __var protType   = __protocol & 0x0000FFFF;
[00:48:08.987]        // -> [protType <= 0x00000002]
[00:48:08.987]    </block>
[00:48:08.988]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:08.988]      // if-block "protType == 1"
[00:48:08.988]        // =>  FALSE
[00:48:08.988]      // skip if-block "protType == 1"
[00:48:08.988]    </control>
[00:48:08.988]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:08.988]      // if-block "protType == 2"
[00:48:08.988]        // =>  TRUE
[00:48:08.989]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:08.989]        // if-block "isSWJ"
[00:48:08.989]          // =>  TRUE
[00:48:08.989]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:08.989]          // if-block "hasDormant"
[00:48:08.989]            // =>  FALSE
[00:48:08.989]          // skip if-block "hasDormant"
[00:48:08.989]        </control>
[00:48:08.989]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:08.990]          // if-block "!hasDormant"
[00:48:08.990]            // =>  TRUE
[00:48:08.990]          <block atomic="false" info="">
[00:48:08.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:08.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:08.992]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:08.999]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:08.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.002]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.003]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.003]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.006]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.006]          </block>
[00:48:09.006]          // end if-block "!hasDormant"
[00:48:09.006]        </control>
[00:48:09.006]        // end if-block "isSWJ"
[00:48:09.006]      </control>
[00:48:09.007]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.007]        // if-block "!isSWJ"
[00:48:09.007]          // =>  FALSE
[00:48:09.007]        // skip if-block "!isSWJ"
[00:48:09.007]      </control>
[00:48:09.007]      <block atomic="false" info="">
[00:48:09.007]        ReadDP(0x0);
[00:48:09.008]  
[00:48:09.008]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.008]  
[00:48:09.008]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.009]      </block>
[00:48:09.009]      // end if-block "protType == 2"
[00:48:09.009]    </control>
[00:48:09.009]  </sequence>
[00:48:09.009]  
[00:48:09.061]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.061]  
[00:48:09.062]  <debugvars>
[00:48:09.062]    // Pre-defined
[00:48:09.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.062]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.062]    __dp=0x00000000
[00:48:09.062]    __ap=0x00000000
[00:48:09.062]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.062]    __FlashAddr=0x00000000
[00:48:09.062]    __FlashLen=0x00000000
[00:48:09.063]    __FlashArg=0x00000000
[00:48:09.063]    __FlashOp=0x00000000
[00:48:09.063]    __Result=0x00000000
[00:48:09.063]  </debugvars>
[00:48:09.063]  
[00:48:09.063]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.064]    <block atomic="false" info="">
[00:48:09.064]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.064]        // -> [isSWJ <= 0x00000001]
[00:48:09.064]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.064]        // -> [hasDormant <= 0x00000000]
[00:48:09.064]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.064]        // -> [protType <= 0x00000002]
[00:48:09.064]    </block>
[00:48:09.065]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.065]      // if-block "protType == 1"
[00:48:09.065]        // =>  FALSE
[00:48:09.065]      // skip if-block "protType == 1"
[00:48:09.065]    </control>
[00:48:09.065]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.065]      // if-block "protType == 2"
[00:48:09.065]        // =>  TRUE
[00:48:09.065]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.065]        // if-block "isSWJ"
[00:48:09.066]          // =>  TRUE
[00:48:09.066]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.066]          // if-block "hasDormant"
[00:48:09.066]            // =>  FALSE
[00:48:09.066]          // skip if-block "hasDormant"
[00:48:09.066]        </control>
[00:48:09.066]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.066]          // if-block "!hasDormant"
[00:48:09.066]            // =>  TRUE
[00:48:09.066]          <block atomic="false" info="">
[00:48:09.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.068]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.069]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.070]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.074]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.075]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.075]          </block>
[00:48:09.075]          // end if-block "!hasDormant"
[00:48:09.075]        </control>
[00:48:09.075]        // end if-block "isSWJ"
[00:48:09.075]      </control>
[00:48:09.076]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.076]        // if-block "!isSWJ"
[00:48:09.076]          // =>  FALSE
[00:48:09.076]        // skip if-block "!isSWJ"
[00:48:09.076]      </control>
[00:48:09.076]      <block atomic="false" info="">
[00:48:09.076]        ReadDP(0x0);
[00:48:09.081]  
[00:48:09.081]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.081]  
[00:48:09.081]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.081]      </block>
[00:48:09.081]      // end if-block "protType == 2"
[00:48:09.081]    </control>
[00:48:09.081]  </sequence>
[00:48:09.081]  
[00:48:09.137]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.137]  
[00:48:09.137]  <debugvars>
[00:48:09.137]    // Pre-defined
[00:48:09.137]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.137]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.138]    __dp=0x00000000
[00:48:09.138]    __ap=0x00000000
[00:48:09.138]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.138]    __FlashAddr=0x00000000
[00:48:09.138]    __FlashLen=0x00000000
[00:48:09.139]    __FlashArg=0x00000000
[00:48:09.139]    __FlashOp=0x00000000
[00:48:09.139]    __Result=0x00000000
[00:48:09.139]  </debugvars>
[00:48:09.139]  
[00:48:09.139]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.140]    <block atomic="false" info="">
[00:48:09.140]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.140]        // -> [isSWJ <= 0x00000001]
[00:48:09.140]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.140]        // -> [hasDormant <= 0x00000000]
[00:48:09.141]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.141]        // -> [protType <= 0x00000002]
[00:48:09.141]    </block>
[00:48:09.141]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.141]      // if-block "protType == 1"
[00:48:09.141]        // =>  FALSE
[00:48:09.141]      // skip if-block "protType == 1"
[00:48:09.141]    </control>
[00:48:09.142]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.142]      // if-block "protType == 2"
[00:48:09.142]        // =>  TRUE
[00:48:09.142]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.142]        // if-block "isSWJ"
[00:48:09.142]          // =>  TRUE
[00:48:09.142]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.142]          // if-block "hasDormant"
[00:48:09.142]            // =>  FALSE
[00:48:09.142]          // skip if-block "hasDormant"
[00:48:09.142]        </control>
[00:48:09.143]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.143]          // if-block "!hasDormant"
[00:48:09.143]            // =>  TRUE
[00:48:09.143]          <block atomic="false" info="">
[00:48:09.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.146]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.149]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.149]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.154]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.155]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.155]          </block>
[00:48:09.155]          // end if-block "!hasDormant"
[00:48:09.156]        </control>
[00:48:09.156]        // end if-block "isSWJ"
[00:48:09.156]      </control>
[00:48:09.156]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.156]        // if-block "!isSWJ"
[00:48:09.156]          // =>  FALSE
[00:48:09.156]        // skip if-block "!isSWJ"
[00:48:09.156]      </control>
[00:48:09.156]      <block atomic="false" info="">
[00:48:09.156]        ReadDP(0x0);
[00:48:09.158]  
[00:48:09.158]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.158]  
[00:48:09.158]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.158]      </block>
[00:48:09.158]      // end if-block "protType == 2"
[00:48:09.158]    </control>
[00:48:09.158]  </sequence>
[00:48:09.158]  
[00:48:09.215]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.215]  
[00:48:09.215]  <debugvars>
[00:48:09.215]    // Pre-defined
[00:48:09.215]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.215]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.215]    __dp=0x00000000
[00:48:09.216]    __ap=0x00000000
[00:48:09.216]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.216]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.216]    __FlashAddr=0x00000000
[00:48:09.216]    __FlashLen=0x00000000
[00:48:09.216]    __FlashArg=0x00000000
[00:48:09.216]    __FlashOp=0x00000000
[00:48:09.216]    __Result=0x00000000
[00:48:09.216]  </debugvars>
[00:48:09.217]  
[00:48:09.217]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.217]    <block atomic="false" info="">
[00:48:09.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.217]        // -> [isSWJ <= 0x00000001]
[00:48:09.217]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.217]        // -> [hasDormant <= 0x00000000]
[00:48:09.218]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.218]        // -> [protType <= 0x00000002]
[00:48:09.218]    </block>
[00:48:09.218]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.218]      // if-block "protType == 1"
[00:48:09.218]        // =>  FALSE
[00:48:09.218]      // skip if-block "protType == 1"
[00:48:09.218]    </control>
[00:48:09.218]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.218]      // if-block "protType == 2"
[00:48:09.218]        // =>  TRUE
[00:48:09.219]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.219]        // if-block "isSWJ"
[00:48:09.219]          // =>  TRUE
[00:48:09.219]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.219]          // if-block "hasDormant"
[00:48:09.219]            // =>  FALSE
[00:48:09.219]          // skip if-block "hasDormant"
[00:48:09.219]        </control>
[00:48:09.219]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.219]          // if-block "!hasDormant"
[00:48:09.220]            // =>  TRUE
[00:48:09.220]          <block atomic="false" info="">
[00:48:09.220]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.221]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.222]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.224]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.229]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.231]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.231]          </block>
[00:48:09.231]          // end if-block "!hasDormant"
[00:48:09.232]        </control>
[00:48:09.232]        // end if-block "isSWJ"
[00:48:09.232]      </control>
[00:48:09.232]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.232]        // if-block "!isSWJ"
[00:48:09.232]          // =>  FALSE
[00:48:09.232]        // skip if-block "!isSWJ"
[00:48:09.232]      </control>
[00:48:09.232]      <block atomic="false" info="">
[00:48:09.232]        ReadDP(0x0);
[00:48:09.234]  
[00:48:09.234]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.234]  
[00:48:09.234]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.234]      </block>
[00:48:09.234]      // end if-block "protType == 2"
[00:48:09.234]    </control>
[00:48:09.235]  </sequence>
[00:48:09.235]  
[00:48:09.291]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.291]  
[00:48:09.291]  <debugvars>
[00:48:09.291]    // Pre-defined
[00:48:09.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.291]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.292]    __dp=0x00000000
[00:48:09.292]    __ap=0x00000000
[00:48:09.292]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.292]    __FlashAddr=0x00000000
[00:48:09.292]    __FlashLen=0x00000000
[00:48:09.292]    __FlashArg=0x00000000
[00:48:09.292]    __FlashOp=0x00000000
[00:48:09.292]    __Result=0x00000000
[00:48:09.292]  </debugvars>
[00:48:09.293]  
[00:48:09.293]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.293]    <block atomic="false" info="">
[00:48:09.293]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.293]        // -> [isSWJ <= 0x00000001]
[00:48:09.293]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.293]        // -> [hasDormant <= 0x00000000]
[00:48:09.293]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.293]        // -> [protType <= 0x00000002]
[00:48:09.293]    </block>
[00:48:09.293]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.294]      // if-block "protType == 1"
[00:48:09.294]        // =>  FALSE
[00:48:09.294]      // skip if-block "protType == 1"
[00:48:09.294]    </control>
[00:48:09.294]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.294]      // if-block "protType == 2"
[00:48:09.294]        // =>  TRUE
[00:48:09.294]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.294]        // if-block "isSWJ"
[00:48:09.295]          // =>  TRUE
[00:48:09.295]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.295]          // if-block "hasDormant"
[00:48:09.295]            // =>  FALSE
[00:48:09.295]          // skip if-block "hasDormant"
[00:48:09.295]        </control>
[00:48:09.296]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.296]          // if-block "!hasDormant"
[00:48:09.296]            // =>  TRUE
[00:48:09.296]          <block atomic="false" info="">
[00:48:09.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.299]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.307]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.308]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.310]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.312]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.312]          </block>
[00:48:09.312]          // end if-block "!hasDormant"
[00:48:09.312]        </control>
[00:48:09.312]        // end if-block "isSWJ"
[00:48:09.312]      </control>
[00:48:09.312]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.312]        // if-block "!isSWJ"
[00:48:09.312]          // =>  FALSE
[00:48:09.313]        // skip if-block "!isSWJ"
[00:48:09.313]      </control>
[00:48:09.313]      <block atomic="false" info="">
[00:48:09.313]        ReadDP(0x0);
[00:48:09.314]  
[00:48:09.314]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.314]  
[00:48:09.314]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.314]      </block>
[00:48:09.314]      // end if-block "protType == 2"
[00:48:09.314]    </control>
[00:48:09.314]  </sequence>
[00:48:09.315]  
[00:48:09.367]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.367]  
[00:48:09.367]  <debugvars>
[00:48:09.367]    // Pre-defined
[00:48:09.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.367]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.367]    __dp=0x00000000
[00:48:09.367]    __ap=0x00000000
[00:48:09.367]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.367]    __FlashAddr=0x00000000
[00:48:09.367]    __FlashLen=0x00000000
[00:48:09.367]    __FlashArg=0x00000000
[00:48:09.368]    __FlashOp=0x00000000
[00:48:09.368]    __Result=0x00000000
[00:48:09.368]  </debugvars>
[00:48:09.368]  
[00:48:09.368]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.368]    <block atomic="false" info="">
[00:48:09.368]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.368]        // -> [isSWJ <= 0x00000001]
[00:48:09.368]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.368]        // -> [hasDormant <= 0x00000000]
[00:48:09.368]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.370]        // -> [protType <= 0x00000002]
[00:48:09.370]    </block>
[00:48:09.370]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.370]      // if-block "protType == 1"
[00:48:09.370]        // =>  FALSE
[00:48:09.370]      // skip if-block "protType == 1"
[00:48:09.370]    </control>
[00:48:09.370]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.370]      // if-block "protType == 2"
[00:48:09.370]        // =>  TRUE
[00:48:09.371]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.371]        // if-block "isSWJ"
[00:48:09.371]          // =>  TRUE
[00:48:09.371]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.371]          // if-block "hasDormant"
[00:48:09.371]            // =>  FALSE
[00:48:09.371]          // skip if-block "hasDormant"
[00:48:09.371]        </control>
[00:48:09.371]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.371]          // if-block "!hasDormant"
[00:48:09.372]            // =>  TRUE
[00:48:09.372]          <block atomic="false" info="">
[00:48:09.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.373]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.374]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.375]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.375]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.377]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.377]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.378]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.378]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.380]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.381]          </block>
[00:48:09.381]          // end if-block "!hasDormant"
[00:48:09.381]        </control>
[00:48:09.381]        // end if-block "isSWJ"
[00:48:09.381]      </control>
[00:48:09.381]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.381]        // if-block "!isSWJ"
[00:48:09.382]          // =>  FALSE
[00:48:09.382]        // skip if-block "!isSWJ"
[00:48:09.382]      </control>
[00:48:09.382]      <block atomic="false" info="">
[00:48:09.382]        ReadDP(0x0);
[00:48:09.384]  
[00:48:09.384]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.384]  
[00:48:09.384]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.384]      </block>
[00:48:09.384]      // end if-block "protType == 2"
[00:48:09.384]    </control>
[00:48:09.384]  </sequence>
[00:48:09.384]  
[00:48:09.442]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.442]  
[00:48:09.444]  <debugvars>
[00:48:09.444]    // Pre-defined
[00:48:09.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.444]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.444]    __dp=0x00000000
[00:48:09.444]    __ap=0x00000000
[00:48:09.444]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.444]    __FlashAddr=0x00000000
[00:48:09.444]    __FlashLen=0x00000000
[00:48:09.444]    __FlashArg=0x00000000
[00:48:09.444]    __FlashOp=0x00000000
[00:48:09.445]    __Result=0x00000000
[00:48:09.445]  </debugvars>
[00:48:09.445]  
[00:48:09.445]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.445]    <block atomic="false" info="">
[00:48:09.445]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.446]        // -> [isSWJ <= 0x00000001]
[00:48:09.446]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.446]        // -> [hasDormant <= 0x00000000]
[00:48:09.446]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.446]        // -> [protType <= 0x00000002]
[00:48:09.446]    </block>
[00:48:09.446]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.446]      // if-block "protType == 1"
[00:48:09.446]        // =>  FALSE
[00:48:09.446]      // skip if-block "protType == 1"
[00:48:09.447]    </control>
[00:48:09.447]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.447]      // if-block "protType == 2"
[00:48:09.447]        // =>  TRUE
[00:48:09.447]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.447]        // if-block "isSWJ"
[00:48:09.447]          // =>  TRUE
[00:48:09.447]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.447]          // if-block "hasDormant"
[00:48:09.448]            // =>  FALSE
[00:48:09.448]          // skip if-block "hasDormant"
[00:48:09.448]        </control>
[00:48:09.448]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.448]          // if-block "!hasDormant"
[00:48:09.448]            // =>  TRUE
[00:48:09.448]          <block atomic="false" info="">
[00:48:09.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.453]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.459]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.462]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.464]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.464]          </block>
[00:48:09.464]          // end if-block "!hasDormant"
[00:48:09.464]        </control>
[00:48:09.464]        // end if-block "isSWJ"
[00:48:09.465]      </control>
[00:48:09.465]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.465]        // if-block "!isSWJ"
[00:48:09.465]          // =>  FALSE
[00:48:09.465]        // skip if-block "!isSWJ"
[00:48:09.465]      </control>
[00:48:09.466]      <block atomic="false" info="">
[00:48:09.466]        ReadDP(0x0);
[00:48:09.468]  
[00:48:09.468]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.468]  
[00:48:09.468]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.468]      </block>
[00:48:09.468]      // end if-block "protType == 2"
[00:48:09.468]    </control>
[00:48:09.468]  </sequence>
[00:48:09.468]  
[00:48:09.519]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.519]  
[00:48:09.520]  <debugvars>
[00:48:09.520]    // Pre-defined
[00:48:09.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.520]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.520]    __dp=0x00000000
[00:48:09.520]    __ap=0x00000000
[00:48:09.520]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.520]    __FlashAddr=0x00000000
[00:48:09.522]    __FlashLen=0x00000000
[00:48:09.522]    __FlashArg=0x00000000
[00:48:09.522]    __FlashOp=0x00000000
[00:48:09.522]    __Result=0x00000000
[00:48:09.522]  </debugvars>
[00:48:09.522]  
[00:48:09.522]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.522]    <block atomic="false" info="">
[00:48:09.522]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.522]        // -> [isSWJ <= 0x00000001]
[00:48:09.523]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.523]        // -> [hasDormant <= 0x00000000]
[00:48:09.523]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.523]        // -> [protType <= 0x00000002]
[00:48:09.523]    </block>
[00:48:09.523]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.524]      // if-block "protType == 1"
[00:48:09.524]        // =>  FALSE
[00:48:09.524]      // skip if-block "protType == 1"
[00:48:09.524]    </control>
[00:48:09.524]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.524]      // if-block "protType == 2"
[00:48:09.524]        // =>  TRUE
[00:48:09.525]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.525]        // if-block "isSWJ"
[00:48:09.525]          // =>  TRUE
[00:48:09.525]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.525]          // if-block "hasDormant"
[00:48:09.525]            // =>  FALSE
[00:48:09.525]          // skip if-block "hasDormant"
[00:48:09.525]        </control>
[00:48:09.525]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.525]          // if-block "!hasDormant"
[00:48:09.525]            // =>  TRUE
[00:48:09.526]          <block atomic="false" info="">
[00:48:09.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.527]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.529]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.529]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.531]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.532]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.532]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.535]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.535]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.536]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.536]          </block>
[00:48:09.536]          // end if-block "!hasDormant"
[00:48:09.536]        </control>
[00:48:09.536]        // end if-block "isSWJ"
[00:48:09.536]      </control>
[00:48:09.537]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.537]        // if-block "!isSWJ"
[00:48:09.537]          // =>  FALSE
[00:48:09.537]        // skip if-block "!isSWJ"
[00:48:09.537]      </control>
[00:48:09.537]      <block atomic="false" info="">
[00:48:09.537]        ReadDP(0x0);
[00:48:09.539]  
[00:48:09.539]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.539]  
[00:48:09.539]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.539]      </block>
[00:48:09.539]      // end if-block "protType == 2"
[00:48:09.539]    </control>
[00:48:09.539]  </sequence>
[00:48:09.539]  
[00:48:09.595]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.595]  
[00:48:09.595]  <debugvars>
[00:48:09.595]    // Pre-defined
[00:48:09.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.595]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.595]    __dp=0x00000000
[00:48:09.595]    __ap=0x00000000
[00:48:09.595]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.596]    __FlashAddr=0x00000000
[00:48:09.596]    __FlashLen=0x00000000
[00:48:09.596]    __FlashArg=0x00000000
[00:48:09.596]    __FlashOp=0x00000000
[00:48:09.596]    __Result=0x00000000
[00:48:09.596]  </debugvars>
[00:48:09.596]  
[00:48:09.596]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.596]    <block atomic="false" info="">
[00:48:09.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.597]        // -> [isSWJ <= 0x00000001]
[00:48:09.597]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.597]        // -> [hasDormant <= 0x00000000]
[00:48:09.597]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.597]        // -> [protType <= 0x00000002]
[00:48:09.597]    </block>
[00:48:09.597]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.597]      // if-block "protType == 1"
[00:48:09.597]        // =>  FALSE
[00:48:09.597]      // skip if-block "protType == 1"
[00:48:09.597]    </control>
[00:48:09.597]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.597]      // if-block "protType == 2"
[00:48:09.598]        // =>  TRUE
[00:48:09.598]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.598]        // if-block "isSWJ"
[00:48:09.598]          // =>  TRUE
[00:48:09.598]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.598]          // if-block "hasDormant"
[00:48:09.599]            // =>  FALSE
[00:48:09.599]          // skip if-block "hasDormant"
[00:48:09.599]        </control>
[00:48:09.599]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.599]          // if-block "!hasDormant"
[00:48:09.599]            // =>  TRUE
[00:48:09.599]          <block atomic="false" info="">
[00:48:09.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.611]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.612]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.612]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.614]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.616]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.617]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.618]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.619]          </block>
[00:48:09.619]          // end if-block "!hasDormant"
[00:48:09.619]        </control>
[00:48:09.619]        // end if-block "isSWJ"
[00:48:09.619]      </control>
[00:48:09.619]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.620]        // if-block "!isSWJ"
[00:48:09.620]          // =>  FALSE
[00:48:09.620]        // skip if-block "!isSWJ"
[00:48:09.620]      </control>
[00:48:09.621]      <block atomic="false" info="">
[00:48:09.621]        ReadDP(0x0);
[00:48:09.622]  
[00:48:09.622]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.622]  
[00:48:09.622]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.622]      </block>
[00:48:09.622]      // end if-block "protType == 2"
[00:48:09.622]    </control>
[00:48:09.622]  </sequence>
[00:48:09.622]  
[00:48:09.686]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.686]  
[00:48:09.686]  <debugvars>
[00:48:09.687]    // Pre-defined
[00:48:09.687]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.687]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.687]    __dp=0x00000000
[00:48:09.687]    __ap=0x00000000
[00:48:09.687]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.687]    __FlashAddr=0x00000000
[00:48:09.687]    __FlashLen=0x00000000
[00:48:09.687]    __FlashArg=0x00000000
[00:48:09.688]    __FlashOp=0x00000000
[00:48:09.688]    __Result=0x00000000
[00:48:09.688]  </debugvars>
[00:48:09.688]  
[00:48:09.688]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.688]    <block atomic="false" info="">
[00:48:09.688]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.688]        // -> [isSWJ <= 0x00000001]
[00:48:09.688]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.688]        // -> [hasDormant <= 0x00000000]
[00:48:09.688]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.689]        // -> [protType <= 0x00000002]
[00:48:09.689]    </block>
[00:48:09.689]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.689]      // if-block "protType == 1"
[00:48:09.689]        // =>  FALSE
[00:48:09.689]      // skip if-block "protType == 1"
[00:48:09.689]    </control>
[00:48:09.689]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.689]      // if-block "protType == 2"
[00:48:09.689]        // =>  TRUE
[00:48:09.690]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.690]        // if-block "isSWJ"
[00:48:09.690]          // =>  TRUE
[00:48:09.690]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.690]          // if-block "hasDormant"
[00:48:09.690]            // =>  FALSE
[00:48:09.690]          // skip if-block "hasDormant"
[00:48:09.690]        </control>
[00:48:09.690]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.690]          // if-block "!hasDormant"
[00:48:09.691]            // =>  TRUE
[00:48:09.691]          <block atomic="false" info="">
[00:48:09.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.696]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.697]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.700]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.701]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.702]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.702]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.705]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.706]          </block>
[00:48:09.706]          // end if-block "!hasDormant"
[00:48:09.706]        </control>
[00:48:09.706]        // end if-block "isSWJ"
[00:48:09.706]      </control>
[00:48:09.706]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.706]        // if-block "!isSWJ"
[00:48:09.707]          // =>  FALSE
[00:48:09.707]        // skip if-block "!isSWJ"
[00:48:09.707]      </control>
[00:48:09.707]      <block atomic="false" info="">
[00:48:09.707]        ReadDP(0x0);
[00:48:09.709]  
[00:48:09.709]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.709]  
[00:48:09.709]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.709]      </block>
[00:48:09.709]      // end if-block "protType == 2"
[00:48:09.709]    </control>
[00:48:09.709]  </sequence>
[00:48:09.709]  
[00:48:09.761]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.761]  
[00:48:09.762]  <debugvars>
[00:48:09.762]    // Pre-defined
[00:48:09.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.762]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.762]    __dp=0x00000000
[00:48:09.762]    __ap=0x00000000
[00:48:09.762]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.762]    __FlashAddr=0x00000000
[00:48:09.762]    __FlashLen=0x00000000
[00:48:09.762]    __FlashArg=0x00000000
[00:48:09.762]    __FlashOp=0x00000000
[00:48:09.762]    __Result=0x00000000
[00:48:09.762]  </debugvars>
[00:48:09.763]  
[00:48:09.763]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.763]    <block atomic="false" info="">
[00:48:09.763]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.763]        // -> [isSWJ <= 0x00000001]
[00:48:09.763]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.763]        // -> [hasDormant <= 0x00000000]
[00:48:09.763]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.763]        // -> [protType <= 0x00000002]
[00:48:09.764]    </block>
[00:48:09.764]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.764]      // if-block "protType == 1"
[00:48:09.764]        // =>  FALSE
[00:48:09.764]      // skip if-block "protType == 1"
[00:48:09.764]    </control>
[00:48:09.764]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.764]      // if-block "protType == 2"
[00:48:09.764]        // =>  TRUE
[00:48:09.765]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.765]        // if-block "isSWJ"
[00:48:09.765]          // =>  TRUE
[00:48:09.765]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.765]          // if-block "hasDormant"
[00:48:09.765]            // =>  FALSE
[00:48:09.765]          // skip if-block "hasDormant"
[00:48:09.765]        </control>
[00:48:09.765]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.765]          // if-block "!hasDormant"
[00:48:09.765]            // =>  TRUE
[00:48:09.765]          <block atomic="false" info="">
[00:48:09.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.768]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.768]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.770]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.772]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.773]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.775]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.779]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.780]          </block>
[00:48:09.780]          // end if-block "!hasDormant"
[00:48:09.780]        </control>
[00:48:09.780]        // end if-block "isSWJ"
[00:48:09.780]      </control>
[00:48:09.780]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.780]        // if-block "!isSWJ"
[00:48:09.780]          // =>  FALSE
[00:48:09.780]        // skip if-block "!isSWJ"
[00:48:09.780]      </control>
[00:48:09.780]      <block atomic="false" info="">
[00:48:09.781]        ReadDP(0x0);
[00:48:09.783]  
[00:48:09.783]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.783]  
[00:48:09.783]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.783]      </block>
[00:48:09.783]      // end if-block "protType == 2"
[00:48:09.783]    </control>
[00:48:09.783]  </sequence>
[00:48:09.783]  
[00:48:09.837]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.837]  
[00:48:09.837]  <debugvars>
[00:48:09.837]    // Pre-defined
[00:48:09.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.837]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.837]    __dp=0x00000000
[00:48:09.837]    __ap=0x00000000
[00:48:09.837]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.837]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.838]    __FlashAddr=0x00000000
[00:48:09.838]    __FlashLen=0x00000000
[00:48:09.838]    __FlashArg=0x00000000
[00:48:09.838]    __FlashOp=0x00000000
[00:48:09.838]    __Result=0x00000000
[00:48:09.838]  </debugvars>
[00:48:09.838]  
[00:48:09.838]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.838]    <block atomic="false" info="">
[00:48:09.838]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.839]        // -> [isSWJ <= 0x00000001]
[00:48:09.839]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.839]        // -> [hasDormant <= 0x00000000]
[00:48:09.839]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.839]        // -> [protType <= 0x00000002]
[00:48:09.839]    </block>
[00:48:09.839]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.839]      // if-block "protType == 1"
[00:48:09.839]        // =>  FALSE
[00:48:09.839]      // skip if-block "protType == 1"
[00:48:09.840]    </control>
[00:48:09.840]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.840]      // if-block "protType == 2"
[00:48:09.840]        // =>  TRUE
[00:48:09.840]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.840]        // if-block "isSWJ"
[00:48:09.840]          // =>  TRUE
[00:48:09.841]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.841]          // if-block "hasDormant"
[00:48:09.841]            // =>  FALSE
[00:48:09.841]          // skip if-block "hasDormant"
[00:48:09.841]        </control>
[00:48:09.841]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.841]          // if-block "!hasDormant"
[00:48:09.842]            // =>  TRUE
[00:48:09.842]          <block atomic="false" info="">
[00:48:09.842]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.844]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.844]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.848]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.849]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.851]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.852]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.852]          </block>
[00:48:09.852]          // end if-block "!hasDormant"
[00:48:09.852]        </control>
[00:48:09.852]        // end if-block "isSWJ"
[00:48:09.853]      </control>
[00:48:09.853]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.853]        // if-block "!isSWJ"
[00:48:09.853]          // =>  FALSE
[00:48:09.853]        // skip if-block "!isSWJ"
[00:48:09.853]      </control>
[00:48:09.853]      <block atomic="false" info="">
[00:48:09.854]        ReadDP(0x0);
[00:48:09.856]  
[00:48:09.856]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.856]  
[00:48:09.856]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.856]      </block>
[00:48:09.856]      // end if-block "protType == 2"
[00:48:09.856]    </control>
[00:48:09.856]  </sequence>
[00:48:09.856]  
[00:48:09.912]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.912]  
[00:48:09.912]  <debugvars>
[00:48:09.912]    // Pre-defined
[00:48:09.912]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.912]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.912]    __dp=0x00000000
[00:48:09.912]    __ap=0x00000000
[00:48:09.912]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.912]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.913]    __FlashAddr=0x00000000
[00:48:09.913]    __FlashLen=0x00000000
[00:48:09.913]    __FlashArg=0x00000000
[00:48:09.913]    __FlashOp=0x00000000
[00:48:09.913]    __Result=0x00000000
[00:48:09.913]  </debugvars>
[00:48:09.913]  
[00:48:09.913]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.913]    <block atomic="false" info="">
[00:48:09.915]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.915]        // -> [isSWJ <= 0x00000001]
[00:48:09.915]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.915]        // -> [hasDormant <= 0x00000000]
[00:48:09.915]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.915]        // -> [protType <= 0x00000002]
[00:48:09.915]    </block>
[00:48:09.915]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.915]      // if-block "protType == 1"
[00:48:09.915]        // =>  FALSE
[00:48:09.915]      // skip if-block "protType == 1"
[00:48:09.916]    </control>
[00:48:09.916]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.916]      // if-block "protType == 2"
[00:48:09.916]        // =>  TRUE
[00:48:09.916]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.916]        // if-block "isSWJ"
[00:48:09.916]          // =>  TRUE
[00:48:09.916]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.916]          // if-block "hasDormant"
[00:48:09.916]            // =>  FALSE
[00:48:09.917]          // skip if-block "hasDormant"
[00:48:09.917]        </control>
[00:48:09.917]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.917]          // if-block "!hasDormant"
[00:48:09.917]            // =>  TRUE
[00:48:09.917]          <block atomic="false" info="">
[00:48:09.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.919]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:09.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.922]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:09.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:09.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:09.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.927]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:09.929]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:09.929]          </block>
[00:48:09.930]          // end if-block "!hasDormant"
[00:48:09.930]        </control>
[00:48:09.930]        // end if-block "isSWJ"
[00:48:09.930]      </control>
[00:48:09.930]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:09.930]        // if-block "!isSWJ"
[00:48:09.930]          // =>  FALSE
[00:48:09.931]        // skip if-block "!isSWJ"
[00:48:09.931]      </control>
[00:48:09.931]      <block atomic="false" info="">
[00:48:09.931]        ReadDP(0x0);
[00:48:09.933]  
[00:48:09.933]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:09.933]  
[00:48:09.934]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:09.934]      </block>
[00:48:09.934]      // end if-block "protType == 2"
[00:48:09.934]    </control>
[00:48:09.934]  </sequence>
[00:48:09.934]  
[00:48:09.988]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:09.988]  
[00:48:09.989]  <debugvars>
[00:48:09.989]    // Pre-defined
[00:48:09.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:09.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:09.989]    __dp=0x00000000
[00:48:09.989]    __ap=0x00000000
[00:48:09.989]    __traceout=0x00000000      (Trace Disabled)
[00:48:09.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:09.990]    __FlashAddr=0x00000000
[00:48:09.991]    __FlashLen=0x00000000
[00:48:09.991]    __FlashArg=0x00000000
[00:48:09.991]    __FlashOp=0x00000000
[00:48:09.991]    __Result=0x00000000
[00:48:09.991]  </debugvars>
[00:48:09.991]  
[00:48:09.991]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:09.992]    <block atomic="false" info="">
[00:48:09.992]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:09.992]        // -> [isSWJ <= 0x00000001]
[00:48:09.992]      __var hasDormant = __protocol & 0x00020000;
[00:48:09.992]        // -> [hasDormant <= 0x00000000]
[00:48:09.992]      __var protType   = __protocol & 0x0000FFFF;
[00:48:09.992]        // -> [protType <= 0x00000002]
[00:48:09.992]    </block>
[00:48:09.992]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:09.992]      // if-block "protType == 1"
[00:48:09.993]        // =>  FALSE
[00:48:09.993]      // skip if-block "protType == 1"
[00:48:09.993]    </control>
[00:48:09.993]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:09.993]      // if-block "protType == 2"
[00:48:09.993]        // =>  TRUE
[00:48:09.993]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:09.993]        // if-block "isSWJ"
[00:48:09.993]          // =>  TRUE
[00:48:09.994]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:09.994]          // if-block "hasDormant"
[00:48:09.994]            // =>  FALSE
[00:48:09.994]          // skip if-block "hasDormant"
[00:48:09.994]        </control>
[00:48:09.994]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:09.994]          // if-block "!hasDormant"
[00:48:09.995]            // =>  TRUE
[00:48:09.995]          <block atomic="false" info="">
[00:48:09.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:09.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:09.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:09.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:09.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.001]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.008]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.009]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.009]          </block>
[00:48:10.009]          // end if-block "!hasDormant"
[00:48:10.009]        </control>
[00:48:10.009]        // end if-block "isSWJ"
[00:48:10.010]      </control>
[00:48:10.010]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.010]        // if-block "!isSWJ"
[00:48:10.010]          // =>  FALSE
[00:48:10.010]        // skip if-block "!isSWJ"
[00:48:10.010]      </control>
[00:48:10.010]      <block atomic="false" info="">
[00:48:10.010]        ReadDP(0x0);
[00:48:10.013]  
[00:48:10.013]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.013]  
[00:48:10.013]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.013]      </block>
[00:48:10.013]      // end if-block "protType == 2"
[00:48:10.014]    </control>
[00:48:10.014]  </sequence>
[00:48:10.014]  
[00:48:10.066]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.066]  
[00:48:10.066]  <debugvars>
[00:48:10.066]    // Pre-defined
[00:48:10.067]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.067]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.067]    __dp=0x00000000
[00:48:10.067]    __ap=0x00000000
[00:48:10.067]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.067]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.067]    __FlashAddr=0x00000000
[00:48:10.067]    __FlashLen=0x00000000
[00:48:10.068]    __FlashArg=0x00000000
[00:48:10.068]    __FlashOp=0x00000000
[00:48:10.068]    __Result=0x00000000
[00:48:10.068]  </debugvars>
[00:48:10.068]  
[00:48:10.068]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.068]    <block atomic="false" info="">
[00:48:10.068]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.069]        // -> [isSWJ <= 0x00000001]
[00:48:10.069]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.069]        // -> [hasDormant <= 0x00000000]
[00:48:10.069]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.069]        // -> [protType <= 0x00000002]
[00:48:10.069]    </block>
[00:48:10.069]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.070]      // if-block "protType == 1"
[00:48:10.070]        // =>  FALSE
[00:48:10.070]      // skip if-block "protType == 1"
[00:48:10.070]    </control>
[00:48:10.070]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.070]      // if-block "protType == 2"
[00:48:10.070]        // =>  TRUE
[00:48:10.070]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.070]        // if-block "isSWJ"
[00:48:10.070]          // =>  TRUE
[00:48:10.070]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.070]          // if-block "hasDormant"
[00:48:10.070]            // =>  FALSE
[00:48:10.070]          // skip if-block "hasDormant"
[00:48:10.071]        </control>
[00:48:10.071]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.071]          // if-block "!hasDormant"
[00:48:10.071]            // =>  TRUE
[00:48:10.071]          <block atomic="false" info="">
[00:48:10.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.075]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.076]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.078]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.079]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.081]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.082]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.083]          </block>
[00:48:10.083]          // end if-block "!hasDormant"
[00:48:10.083]        </control>
[00:48:10.083]        // end if-block "isSWJ"
[00:48:10.083]      </control>
[00:48:10.083]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.083]        // if-block "!isSWJ"
[00:48:10.083]          // =>  FALSE
[00:48:10.083]        // skip if-block "!isSWJ"
[00:48:10.083]      </control>
[00:48:10.084]      <block atomic="false" info="">
[00:48:10.084]        ReadDP(0x0);
[00:48:10.085]  
[00:48:10.085]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.085]  
[00:48:10.085]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.085]      </block>
[00:48:10.085]      // end if-block "protType == 2"
[00:48:10.085]    </control>
[00:48:10.086]  </sequence>
[00:48:10.086]  
[00:48:10.142]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.142]  
[00:48:10.142]  <debugvars>
[00:48:10.142]    // Pre-defined
[00:48:10.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.144]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.144]    __dp=0x00000000
[00:48:10.144]    __ap=0x00000000
[00:48:10.144]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.144]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.144]    __FlashAddr=0x00000000
[00:48:10.144]    __FlashLen=0x00000000
[00:48:10.144]    __FlashArg=0x00000000
[00:48:10.144]    __FlashOp=0x00000000
[00:48:10.144]    __Result=0x00000000
[00:48:10.145]  </debugvars>
[00:48:10.145]  
[00:48:10.145]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.145]    <block atomic="false" info="">
[00:48:10.145]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.145]        // -> [isSWJ <= 0x00000001]
[00:48:10.145]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.145]        // -> [hasDormant <= 0x00000000]
[00:48:10.145]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.145]        // -> [protType <= 0x00000002]
[00:48:10.145]    </block>
[00:48:10.146]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.146]      // if-block "protType == 1"
[00:48:10.146]        // =>  FALSE
[00:48:10.146]      // skip if-block "protType == 1"
[00:48:10.146]    </control>
[00:48:10.146]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.146]      // if-block "protType == 2"
[00:48:10.147]        // =>  TRUE
[00:48:10.147]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.147]        // if-block "isSWJ"
[00:48:10.147]          // =>  TRUE
[00:48:10.147]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.147]          // if-block "hasDormant"
[00:48:10.148]            // =>  FALSE
[00:48:10.148]          // skip if-block "hasDormant"
[00:48:10.148]        </control>
[00:48:10.148]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.148]          // if-block "!hasDormant"
[00:48:10.148]            // =>  TRUE
[00:48:10.148]          <block atomic="false" info="">
[00:48:10.148]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.151]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.154]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.155]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.163]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.163]          </block>
[00:48:10.163]          // end if-block "!hasDormant"
[00:48:10.164]        </control>
[00:48:10.164]        // end if-block "isSWJ"
[00:48:10.164]      </control>
[00:48:10.164]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.164]        // if-block "!isSWJ"
[00:48:10.164]          // =>  FALSE
[00:48:10.164]        // skip if-block "!isSWJ"
[00:48:10.164]      </control>
[00:48:10.164]      <block atomic="false" info="">
[00:48:10.164]        ReadDP(0x0);
[00:48:10.166]  
[00:48:10.166]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.166]  
[00:48:10.166]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.166]      </block>
[00:48:10.166]      // end if-block "protType == 2"
[00:48:10.166]    </control>
[00:48:10.166]  </sequence>
[00:48:10.166]  
[00:48:10.220]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.220]  
[00:48:10.220]  <debugvars>
[00:48:10.220]    // Pre-defined
[00:48:10.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.220]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.220]    __dp=0x00000000
[00:48:10.220]    __ap=0x00000000
[00:48:10.220]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.220]    __FlashAddr=0x00000000
[00:48:10.221]    __FlashLen=0x00000000
[00:48:10.221]    __FlashArg=0x00000000
[00:48:10.221]    __FlashOp=0x00000000
[00:48:10.221]    __Result=0x00000000
[00:48:10.221]  </debugvars>
[00:48:10.221]  
[00:48:10.221]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.222]    <block atomic="false" info="">
[00:48:10.222]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.222]        // -> [isSWJ <= 0x00000001]
[00:48:10.222]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.222]        // -> [hasDormant <= 0x00000000]
[00:48:10.222]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.222]        // -> [protType <= 0x00000002]
[00:48:10.222]    </block>
[00:48:10.223]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.223]      // if-block "protType == 1"
[00:48:10.223]        // =>  FALSE
[00:48:10.223]      // skip if-block "protType == 1"
[00:48:10.223]    </control>
[00:48:10.223]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.223]      // if-block "protType == 2"
[00:48:10.223]        // =>  TRUE
[00:48:10.223]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.223]        // if-block "isSWJ"
[00:48:10.224]          // =>  TRUE
[00:48:10.224]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.224]          // if-block "hasDormant"
[00:48:10.224]            // =>  FALSE
[00:48:10.224]          // skip if-block "hasDormant"
[00:48:10.224]        </control>
[00:48:10.224]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.224]          // if-block "!hasDormant"
[00:48:10.224]            // =>  TRUE
[00:48:10.225]          <block atomic="false" info="">
[00:48:10.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.226]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.228]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.228]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.230]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.230]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.231]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.236]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.238]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.238]          </block>
[00:48:10.238]          // end if-block "!hasDormant"
[00:48:10.239]        </control>
[00:48:10.239]        // end if-block "isSWJ"
[00:48:10.239]      </control>
[00:48:10.239]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.239]        // if-block "!isSWJ"
[00:48:10.239]          // =>  FALSE
[00:48:10.239]        // skip if-block "!isSWJ"
[00:48:10.239]      </control>
[00:48:10.240]      <block atomic="false" info="">
[00:48:10.240]        ReadDP(0x0);
[00:48:10.241]  
[00:48:10.241]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.241]  
[00:48:10.241]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.241]      </block>
[00:48:10.241]      // end if-block "protType == 2"
[00:48:10.241]    </control>
[00:48:10.242]  </sequence>
[00:48:10.242]  
[00:48:10.295]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.295]  
[00:48:10.295]  <debugvars>
[00:48:10.295]    // Pre-defined
[00:48:10.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.295]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.295]    __dp=0x00000000
[00:48:10.296]    __ap=0x00000000
[00:48:10.296]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.296]    __FlashAddr=0x00000000
[00:48:10.296]    __FlashLen=0x00000000
[00:48:10.296]    __FlashArg=0x00000000
[00:48:10.296]    __FlashOp=0x00000000
[00:48:10.296]    __Result=0x00000000
[00:48:10.296]  </debugvars>
[00:48:10.296]  
[00:48:10.296]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.298]    <block atomic="false" info="">
[00:48:10.298]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.298]        // -> [isSWJ <= 0x00000001]
[00:48:10.298]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.298]        // -> [hasDormant <= 0x00000000]
[00:48:10.298]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.298]        // -> [protType <= 0x00000002]
[00:48:10.298]    </block>
[00:48:10.299]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.299]      // if-block "protType == 1"
[00:48:10.299]        // =>  FALSE
[00:48:10.299]      // skip if-block "protType == 1"
[00:48:10.299]    </control>
[00:48:10.299]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.299]      // if-block "protType == 2"
[00:48:10.299]        // =>  TRUE
[00:48:10.299]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.299]        // if-block "isSWJ"
[00:48:10.299]          // =>  TRUE
[00:48:10.300]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.300]          // if-block "hasDormant"
[00:48:10.300]            // =>  FALSE
[00:48:10.300]          // skip if-block "hasDormant"
[00:48:10.300]        </control>
[00:48:10.300]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.300]          // if-block "!hasDormant"
[00:48:10.300]            // =>  TRUE
[00:48:10.300]          <block atomic="false" info="">
[00:48:10.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.303]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.303]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.310]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.312]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.314]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.316]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.316]          </block>
[00:48:10.317]          // end if-block "!hasDormant"
[00:48:10.317]        </control>
[00:48:10.317]        // end if-block "isSWJ"
[00:48:10.317]      </control>
[00:48:10.317]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.317]        // if-block "!isSWJ"
[00:48:10.317]          // =>  FALSE
[00:48:10.317]        // skip if-block "!isSWJ"
[00:48:10.318]      </control>
[00:48:10.318]      <block atomic="false" info="">
[00:48:10.318]        ReadDP(0x0);
[00:48:10.323]  
[00:48:10.323]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.323]  
[00:48:10.323]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.324]      </block>
[00:48:10.324]      // end if-block "protType == 2"
[00:48:10.324]    </control>
[00:48:10.324]  </sequence>
[00:48:10.324]  
[00:48:10.387]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.387]  
[00:48:10.387]  <debugvars>
[00:48:10.387]    // Pre-defined
[00:48:10.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.388]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.388]    __dp=0x00000000
[00:48:10.388]    __ap=0x00000000
[00:48:10.388]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.388]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.388]    __FlashAddr=0x00000000
[00:48:10.388]    __FlashLen=0x00000000
[00:48:10.389]    __FlashArg=0x00000000
[00:48:10.389]    __FlashOp=0x00000000
[00:48:10.389]    __Result=0x00000000
[00:48:10.389]  </debugvars>
[00:48:10.389]  
[00:48:10.389]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.389]    <block atomic="false" info="">
[00:48:10.389]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.389]        // -> [isSWJ <= 0x00000001]
[00:48:10.390]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.390]        // -> [hasDormant <= 0x00000000]
[00:48:10.390]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.390]        // -> [protType <= 0x00000002]
[00:48:10.390]    </block>
[00:48:10.390]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.390]      // if-block "protType == 1"
[00:48:10.390]        // =>  FALSE
[00:48:10.390]      // skip if-block "protType == 1"
[00:48:10.390]    </control>
[00:48:10.391]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.392]      // if-block "protType == 2"
[00:48:10.392]        // =>  TRUE
[00:48:10.392]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.392]        // if-block "isSWJ"
[00:48:10.392]          // =>  TRUE
[00:48:10.392]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.392]          // if-block "hasDormant"
[00:48:10.392]            // =>  FALSE
[00:48:10.393]          // skip if-block "hasDormant"
[00:48:10.393]        </control>
[00:48:10.393]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.393]          // if-block "!hasDormant"
[00:48:10.393]            // =>  TRUE
[00:48:10.393]          <block atomic="false" info="">
[00:48:10.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.395]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.396]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.396]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.398]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.398]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.399]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.401]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.402]          </block>
[00:48:10.402]          // end if-block "!hasDormant"
[00:48:10.402]        </control>
[00:48:10.402]        // end if-block "isSWJ"
[00:48:10.402]      </control>
[00:48:10.402]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.402]        // if-block "!isSWJ"
[00:48:10.402]          // =>  FALSE
[00:48:10.402]        // skip if-block "!isSWJ"
[00:48:10.404]      </control>
[00:48:10.404]      <block atomic="false" info="">
[00:48:10.404]        ReadDP(0x0);
[00:48:10.405]  
[00:48:10.405]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.405]  
[00:48:10.406]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.406]      </block>
[00:48:10.406]      // end if-block "protType == 2"
[00:48:10.406]    </control>
[00:48:10.406]  </sequence>
[00:48:10.406]  
[00:48:10.463]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.463]  
[00:48:10.463]  <debugvars>
[00:48:10.463]    // Pre-defined
[00:48:10.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.463]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.464]    __dp=0x00000000
[00:48:10.464]    __ap=0x00000000
[00:48:10.464]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.464]    __FlashAddr=0x00000000
[00:48:10.464]    __FlashLen=0x00000000
[00:48:10.464]    __FlashArg=0x00000000
[00:48:10.464]    __FlashOp=0x00000000
[00:48:10.464]    __Result=0x00000000
[00:48:10.465]  </debugvars>
[00:48:10.465]  
[00:48:10.465]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.465]    <block atomic="false" info="">
[00:48:10.465]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.465]        // -> [isSWJ <= 0x00000001]
[00:48:10.465]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.465]        // -> [hasDormant <= 0x00000000]
[00:48:10.465]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.465]        // -> [protType <= 0x00000002]
[00:48:10.466]    </block>
[00:48:10.466]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.466]      // if-block "protType == 1"
[00:48:10.466]        // =>  FALSE
[00:48:10.466]      // skip if-block "protType == 1"
[00:48:10.466]    </control>
[00:48:10.466]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.466]      // if-block "protType == 2"
[00:48:10.467]        // =>  TRUE
[00:48:10.467]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.467]        // if-block "isSWJ"
[00:48:10.467]          // =>  TRUE
[00:48:10.467]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.467]          // if-block "hasDormant"
[00:48:10.467]            // =>  FALSE
[00:48:10.467]          // skip if-block "hasDormant"
[00:48:10.467]        </control>
[00:48:10.468]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.468]          // if-block "!hasDormant"
[00:48:10.468]            // =>  TRUE
[00:48:10.468]          <block atomic="false" info="">
[00:48:10.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.470]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.473]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.476]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.478]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.483]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.483]          </block>
[00:48:10.483]          // end if-block "!hasDormant"
[00:48:10.483]        </control>
[00:48:10.483]        // end if-block "isSWJ"
[00:48:10.483]      </control>
[00:48:10.484]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.484]        // if-block "!isSWJ"
[00:48:10.484]          // =>  FALSE
[00:48:10.484]        // skip if-block "!isSWJ"
[00:48:10.484]      </control>
[00:48:10.484]      <block atomic="false" info="">
[00:48:10.484]        ReadDP(0x0);
[00:48:10.485]  
[00:48:10.485]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.485]  
[00:48:10.486]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.486]      </block>
[00:48:10.487]      // end if-block "protType == 2"
[00:48:10.487]    </control>
[00:48:10.487]  </sequence>
[00:48:10.487]  
[00:48:10.538]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.538]  
[00:48:10.538]  <debugvars>
[00:48:10.539]    // Pre-defined
[00:48:10.539]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.539]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.539]    __dp=0x00000000
[00:48:10.539]    __ap=0x00000000
[00:48:10.539]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.539]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.539]    __FlashAddr=0x00000000
[00:48:10.539]    __FlashLen=0x00000000
[00:48:10.539]    __FlashArg=0x00000000
[00:48:10.539]    __FlashOp=0x00000000
[00:48:10.541]    __Result=0x00000000
[00:48:10.541]  </debugvars>
[00:48:10.541]  
[00:48:10.541]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.541]    <block atomic="false" info="">
[00:48:10.541]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.541]        // -> [isSWJ <= 0x00000001]
[00:48:10.541]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.541]        // -> [hasDormant <= 0x00000000]
[00:48:10.541]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.541]        // -> [protType <= 0x00000002]
[00:48:10.541]    </block>
[00:48:10.542]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.542]      // if-block "protType == 1"
[00:48:10.542]        // =>  FALSE
[00:48:10.542]      // skip if-block "protType == 1"
[00:48:10.542]    </control>
[00:48:10.542]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.542]      // if-block "protType == 2"
[00:48:10.542]        // =>  TRUE
[00:48:10.542]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.542]        // if-block "isSWJ"
[00:48:10.543]          // =>  TRUE
[00:48:10.543]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.543]          // if-block "hasDormant"
[00:48:10.543]            // =>  FALSE
[00:48:10.543]          // skip if-block "hasDormant"
[00:48:10.543]        </control>
[00:48:10.543]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.543]          // if-block "!hasDormant"
[00:48:10.543]            // =>  TRUE
[00:48:10.543]          <block atomic="false" info="">
[00:48:10.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.545]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.548]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.548]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.550]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.552]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.553]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.553]          </block>
[00:48:10.553]          // end if-block "!hasDormant"
[00:48:10.554]        </control>
[00:48:10.554]        // end if-block "isSWJ"
[00:48:10.554]      </control>
[00:48:10.554]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.554]        // if-block "!isSWJ"
[00:48:10.554]          // =>  FALSE
[00:48:10.554]        // skip if-block "!isSWJ"
[00:48:10.554]      </control>
[00:48:10.555]      <block atomic="false" info="">
[00:48:10.555]        ReadDP(0x0);
[00:48:10.556]  
[00:48:10.556]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.556]  
[00:48:10.557]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.557]      </block>
[00:48:10.557]      // end if-block "protType == 2"
[00:48:10.557]    </control>
[00:48:10.557]  </sequence>
[00:48:10.557]  
[00:48:10.615]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.615]  
[00:48:10.615]  <debugvars>
[00:48:10.615]    // Pre-defined
[00:48:10.615]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.615]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.615]    __dp=0x00000000
[00:48:10.615]    __ap=0x00000000
[00:48:10.615]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.615]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.615]    __FlashAddr=0x00000000
[00:48:10.615]    __FlashLen=0x00000000
[00:48:10.615]    __FlashArg=0x00000000
[00:48:10.615]    __FlashOp=0x00000000
[00:48:10.616]    __Result=0x00000000
[00:48:10.616]  </debugvars>
[00:48:10.616]  
[00:48:10.616]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.616]    <block atomic="false" info="">
[00:48:10.616]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.616]        // -> [isSWJ <= 0x00000001]
[00:48:10.616]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.617]        // -> [hasDormant <= 0x00000000]
[00:48:10.617]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.617]        // -> [protType <= 0x00000002]
[00:48:10.617]    </block>
[00:48:10.617]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.617]      // if-block "protType == 1"
[00:48:10.617]        // =>  FALSE
[00:48:10.617]      // skip if-block "protType == 1"
[00:48:10.617]    </control>
[00:48:10.617]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.617]      // if-block "protType == 2"
[00:48:10.619]        // =>  TRUE
[00:48:10.619]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.619]        // if-block "isSWJ"
[00:48:10.619]          // =>  TRUE
[00:48:10.619]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.619]          // if-block "hasDormant"
[00:48:10.619]            // =>  FALSE
[00:48:10.619]          // skip if-block "hasDormant"
[00:48:10.619]        </control>
[00:48:10.619]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.619]          // if-block "!hasDormant"
[00:48:10.619]            // =>  TRUE
[00:48:10.619]          <block atomic="false" info="">
[00:48:10.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.622]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.624]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.624]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.627]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.627]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.630]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.630]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.631]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.636]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.636]          </block>
[00:48:10.636]          // end if-block "!hasDormant"
[00:48:10.636]        </control>
[00:48:10.636]        // end if-block "isSWJ"
[00:48:10.636]      </control>
[00:48:10.636]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.636]        // if-block "!isSWJ"
[00:48:10.636]          // =>  FALSE
[00:48:10.636]        // skip if-block "!isSWJ"
[00:48:10.637]      </control>
[00:48:10.637]      <block atomic="false" info="">
[00:48:10.637]        ReadDP(0x0);
[00:48:10.638]  
[00:48:10.638]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.638]  
[00:48:10.638]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.639]      </block>
[00:48:10.639]      // end if-block "protType == 2"
[00:48:10.639]    </control>
[00:48:10.639]  </sequence>
[00:48:10.639]  
[00:48:10.691]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.691]  
[00:48:10.691]  <debugvars>
[00:48:10.691]    // Pre-defined
[00:48:10.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.692]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.692]    __dp=0x00000000
[00:48:10.692]    __ap=0x00000000
[00:48:10.692]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.692]    __FlashAddr=0x00000000
[00:48:10.692]    __FlashLen=0x00000000
[00:48:10.692]    __FlashArg=0x00000000
[00:48:10.692]    __FlashOp=0x00000000
[00:48:10.692]    __Result=0x00000000
[00:48:10.692]  </debugvars>
[00:48:10.693]  
[00:48:10.693]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.693]    <block atomic="false" info="">
[00:48:10.693]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.693]        // -> [isSWJ <= 0x00000001]
[00:48:10.693]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.693]        // -> [hasDormant <= 0x00000000]
[00:48:10.693]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.693]        // -> [protType <= 0x00000002]
[00:48:10.693]    </block>
[00:48:10.693]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.695]      // if-block "protType == 1"
[00:48:10.695]        // =>  FALSE
[00:48:10.695]      // skip if-block "protType == 1"
[00:48:10.695]    </control>
[00:48:10.695]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.695]      // if-block "protType == 2"
[00:48:10.695]        // =>  TRUE
[00:48:10.695]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.695]        // if-block "isSWJ"
[00:48:10.695]          // =>  TRUE
[00:48:10.695]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.696]          // if-block "hasDormant"
[00:48:10.696]            // =>  FALSE
[00:48:10.696]          // skip if-block "hasDormant"
[00:48:10.696]        </control>
[00:48:10.696]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.696]          // if-block "!hasDormant"
[00:48:10.696]            // =>  TRUE
[00:48:10.696]          <block atomic="false" info="">
[00:48:10.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.698]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.701]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.705]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.705]          </block>
[00:48:10.705]          // end if-block "!hasDormant"
[00:48:10.705]        </control>
[00:48:10.705]        // end if-block "isSWJ"
[00:48:10.706]      </control>
[00:48:10.706]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.706]        // if-block "!isSWJ"
[00:48:10.706]          // =>  FALSE
[00:48:10.706]        // skip if-block "!isSWJ"
[00:48:10.706]      </control>
[00:48:10.706]      <block atomic="false" info="">
[00:48:10.706]        ReadDP(0x0);
[00:48:10.710]  
[00:48:10.710]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.710]  
[00:48:10.710]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.710]      </block>
[00:48:10.710]      // end if-block "protType == 2"
[00:48:10.710]    </control>
[00:48:10.710]  </sequence>
[00:48:10.710]  
[00:48:10.767]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.767]  
[00:48:10.767]  <debugvars>
[00:48:10.767]    // Pre-defined
[00:48:10.767]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.768]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.768]    __dp=0x00000000
[00:48:10.768]    __ap=0x00000000
[00:48:10.768]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.768]    __FlashAddr=0x00000000
[00:48:10.768]    __FlashLen=0x00000000
[00:48:10.768]    __FlashArg=0x00000000
[00:48:10.768]    __FlashOp=0x00000000
[00:48:10.769]    __Result=0x00000000
[00:48:10.769]  </debugvars>
[00:48:10.769]  
[00:48:10.769]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.769]    <block atomic="false" info="">
[00:48:10.769]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.769]        // -> [isSWJ <= 0x00000001]
[00:48:10.771]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.771]        // -> [hasDormant <= 0x00000000]
[00:48:10.771]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.771]        // -> [protType <= 0x00000002]
[00:48:10.771]    </block>
[00:48:10.771]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.771]      // if-block "protType == 1"
[00:48:10.772]        // =>  FALSE
[00:48:10.772]      // skip if-block "protType == 1"
[00:48:10.772]    </control>
[00:48:10.772]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.772]      // if-block "protType == 2"
[00:48:10.772]        // =>  TRUE
[00:48:10.772]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.772]        // if-block "isSWJ"
[00:48:10.772]          // =>  TRUE
[00:48:10.772]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.772]          // if-block "hasDormant"
[00:48:10.773]            // =>  FALSE
[00:48:10.773]          // skip if-block "hasDormant"
[00:48:10.773]        </control>
[00:48:10.773]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.773]          // if-block "!hasDormant"
[00:48:10.773]            // =>  TRUE
[00:48:10.773]          <block atomic="false" info="">
[00:48:10.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.775]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.776]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.777]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.783]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.785]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.785]          </block>
[00:48:10.785]          // end if-block "!hasDormant"
[00:48:10.785]        </control>
[00:48:10.785]        // end if-block "isSWJ"
[00:48:10.786]      </control>
[00:48:10.786]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.786]        // if-block "!isSWJ"
[00:48:10.786]          // =>  FALSE
[00:48:10.786]        // skip if-block "!isSWJ"
[00:48:10.786]      </control>
[00:48:10.786]      <block atomic="false" info="">
[00:48:10.786]        ReadDP(0x0);
[00:48:10.790]  
[00:48:10.790]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.790]  
[00:48:10.790]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.790]      </block>
[00:48:10.790]      // end if-block "protType == 2"
[00:48:10.790]    </control>
[00:48:10.791]  </sequence>
[00:48:10.791]  
[00:48:10.845]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.845]  
[00:48:10.845]  <debugvars>
[00:48:10.845]    // Pre-defined
[00:48:10.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.845]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.845]    __dp=0x00000000
[00:48:10.845]    __ap=0x00000000
[00:48:10.845]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.845]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.845]    __FlashAddr=0x00000000
[00:48:10.845]    __FlashLen=0x00000000
[00:48:10.846]    __FlashArg=0x00000000
[00:48:10.846]    __FlashOp=0x00000000
[00:48:10.846]    __Result=0x00000000
[00:48:10.846]  </debugvars>
[00:48:10.846]  
[00:48:10.846]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.846]    <block atomic="false" info="">
[00:48:10.846]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.847]        // -> [isSWJ <= 0x00000001]
[00:48:10.847]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.847]        // -> [hasDormant <= 0x00000000]
[00:48:10.847]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.847]        // -> [protType <= 0x00000002]
[00:48:10.847]    </block>
[00:48:10.847]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.847]      // if-block "protType == 1"
[00:48:10.847]        // =>  FALSE
[00:48:10.847]      // skip if-block "protType == 1"
[00:48:10.848]    </control>
[00:48:10.848]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.848]      // if-block "protType == 2"
[00:48:10.848]        // =>  TRUE
[00:48:10.848]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.848]        // if-block "isSWJ"
[00:48:10.848]          // =>  TRUE
[00:48:10.848]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.848]          // if-block "hasDormant"
[00:48:10.848]            // =>  FALSE
[00:48:10.849]          // skip if-block "hasDormant"
[00:48:10.849]        </control>
[00:48:10.849]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.849]          // if-block "!hasDormant"
[00:48:10.849]            // =>  TRUE
[00:48:10.850]          <block atomic="false" info="">
[00:48:10.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.852]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.853]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.854]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.855]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.856]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.857]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.857]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.859]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.860]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.860]          </block>
[00:48:10.860]          // end if-block "!hasDormant"
[00:48:10.860]        </control>
[00:48:10.860]        // end if-block "isSWJ"
[00:48:10.860]      </control>
[00:48:10.861]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.861]        // if-block "!isSWJ"
[00:48:10.861]          // =>  FALSE
[00:48:10.861]        // skip if-block "!isSWJ"
[00:48:10.861]      </control>
[00:48:10.861]      <block atomic="false" info="">
[00:48:10.861]        ReadDP(0x0);
[00:48:10.862]  
[00:48:10.862]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.862]  
[00:48:10.862]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.863]      </block>
[00:48:10.863]      // end if-block "protType == 2"
[00:48:10.863]    </control>
[00:48:10.863]  </sequence>
[00:48:10.863]  
[00:48:10.920]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.920]  
[00:48:10.920]  <debugvars>
[00:48:10.920]    // Pre-defined
[00:48:10.920]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.920]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.920]    __dp=0x00000000
[00:48:10.920]    __ap=0x00000000
[00:48:10.920]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.920]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.921]    __FlashAddr=0x00000000
[00:48:10.921]    __FlashLen=0x00000000
[00:48:10.921]    __FlashArg=0x00000000
[00:48:10.921]    __FlashOp=0x00000000
[00:48:10.921]    __Result=0x00000000
[00:48:10.921]  </debugvars>
[00:48:10.921]  
[00:48:10.921]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.921]    <block atomic="false" info="">
[00:48:10.921]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.921]        // -> [isSWJ <= 0x00000001]
[00:48:10.922]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.922]        // -> [hasDormant <= 0x00000000]
[00:48:10.922]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.922]        // -> [protType <= 0x00000002]
[00:48:10.922]    </block>
[00:48:10.922]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:10.922]      // if-block "protType == 1"
[00:48:10.924]        // =>  FALSE
[00:48:10.924]      // skip if-block "protType == 1"
[00:48:10.924]    </control>
[00:48:10.924]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:10.924]      // if-block "protType == 2"
[00:48:10.924]        // =>  TRUE
[00:48:10.924]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:10.924]        // if-block "isSWJ"
[00:48:10.924]          // =>  TRUE
[00:48:10.924]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:10.925]          // if-block "hasDormant"
[00:48:10.925]            // =>  FALSE
[00:48:10.925]          // skip if-block "hasDormant"
[00:48:10.925]        </control>
[00:48:10.925]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:10.925]          // if-block "!hasDormant"
[00:48:10.925]            // =>  TRUE
[00:48:10.925]          <block atomic="false" info="">
[00:48:10.925]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:10.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.928]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:10.929]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:10.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:10.931]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.931]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:10.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:10.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:10.937]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:10.938]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:10.939]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:10.939]          </block>
[00:48:10.939]          // end if-block "!hasDormant"
[00:48:10.939]        </control>
[00:48:10.939]        // end if-block "isSWJ"
[00:48:10.939]      </control>
[00:48:10.939]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:10.939]        // if-block "!isSWJ"
[00:48:10.939]          // =>  FALSE
[00:48:10.939]        // skip if-block "!isSWJ"
[00:48:10.939]      </control>
[00:48:10.940]      <block atomic="false" info="">
[00:48:10.940]        ReadDP(0x0);
[00:48:10.943]  
[00:48:10.943]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:10.943]  
[00:48:10.943]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:10.943]      </block>
[00:48:10.943]      // end if-block "protType == 2"
[00:48:10.943]    </control>
[00:48:10.943]  </sequence>
[00:48:10.943]  
[00:48:10.996]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:10.996]  
[00:48:10.996]  <debugvars>
[00:48:10.996]    // Pre-defined
[00:48:10.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:10.996]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:10.996]    __dp=0x00000000
[00:48:10.996]    __ap=0x00000000
[00:48:10.996]    __traceout=0x00000000      (Trace Disabled)
[00:48:10.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:10.998]    __FlashAddr=0x00000000
[00:48:10.998]    __FlashLen=0x00000000
[00:48:10.998]    __FlashArg=0x00000000
[00:48:10.998]    __FlashOp=0x00000000
[00:48:10.998]    __Result=0x00000000
[00:48:10.998]  </debugvars>
[00:48:10.998]  
[00:48:10.999]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:10.999]    <block atomic="false" info="">
[00:48:10.999]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:10.999]        // -> [isSWJ <= 0x00000001]
[00:48:10.999]      __var hasDormant = __protocol & 0x00020000;
[00:48:10.999]        // -> [hasDormant <= 0x00000000]
[00:48:10.999]      __var protType   = __protocol & 0x0000FFFF;
[00:48:10.999]        // -> [protType <= 0x00000002]
[00:48:10.999]    </block>
[00:48:10.999]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.000]      // if-block "protType == 1"
[00:48:11.000]        // =>  FALSE
[00:48:11.000]      // skip if-block "protType == 1"
[00:48:11.000]    </control>
[00:48:11.000]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.000]      // if-block "protType == 2"
[00:48:11.000]        // =>  TRUE
[00:48:11.000]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.000]        // if-block "isSWJ"
[00:48:11.000]          // =>  TRUE
[00:48:11.000]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.001]          // if-block "hasDormant"
[00:48:11.001]            // =>  FALSE
[00:48:11.001]          // skip if-block "hasDormant"
[00:48:11.001]        </control>
[00:48:11.001]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.001]          // if-block "!hasDormant"
[00:48:11.002]            // =>  TRUE
[00:48:11.002]          <block atomic="false" info="">
[00:48:11.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.004]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.008]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.010]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.012]          </block>
[00:48:11.012]          // end if-block "!hasDormant"
[00:48:11.012]        </control>
[00:48:11.013]        // end if-block "isSWJ"
[00:48:11.013]      </control>
[00:48:11.013]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.013]        // if-block "!isSWJ"
[00:48:11.013]          // =>  FALSE
[00:48:11.013]        // skip if-block "!isSWJ"
[00:48:11.014]      </control>
[00:48:11.014]      <block atomic="false" info="">
[00:48:11.014]        ReadDP(0x0);
[00:48:11.015]  
[00:48:11.015]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.015]  
[00:48:11.015]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.015]      </block>
[00:48:11.015]      // end if-block "protType == 2"
[00:48:11.016]    </control>
[00:48:11.016]  </sequence>
[00:48:11.016]  
[00:48:11.073]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.073]  
[00:48:11.073]  <debugvars>
[00:48:11.073]    // Pre-defined
[00:48:11.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.074]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.074]    __dp=0x00000000
[00:48:11.074]    __ap=0x00000000
[00:48:11.074]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.074]    __FlashAddr=0x00000000
[00:48:11.074]    __FlashLen=0x00000000
[00:48:11.074]    __FlashArg=0x00000000
[00:48:11.074]    __FlashOp=0x00000000
[00:48:11.074]    __Result=0x00000000
[00:48:11.075]  </debugvars>
[00:48:11.075]  
[00:48:11.075]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.075]    <block atomic="false" info="">
[00:48:11.075]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.075]        // -> [isSWJ <= 0x00000001]
[00:48:11.075]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.075]        // -> [hasDormant <= 0x00000000]
[00:48:11.075]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.075]        // -> [protType <= 0x00000002]
[00:48:11.076]    </block>
[00:48:11.076]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.076]      // if-block "protType == 1"
[00:48:11.076]        // =>  FALSE
[00:48:11.076]      // skip if-block "protType == 1"
[00:48:11.076]    </control>
[00:48:11.076]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.076]      // if-block "protType == 2"
[00:48:11.077]        // =>  TRUE
[00:48:11.077]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.077]        // if-block "isSWJ"
[00:48:11.077]          // =>  TRUE
[00:48:11.077]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.077]          // if-block "hasDormant"
[00:48:11.077]            // =>  FALSE
[00:48:11.078]          // skip if-block "hasDormant"
[00:48:11.078]        </control>
[00:48:11.078]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.078]          // if-block "!hasDormant"
[00:48:11.078]            // =>  TRUE
[00:48:11.078]          <block atomic="false" info="">
[00:48:11.079]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.080]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.081]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.083]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.085]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.085]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.091]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.093]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.093]          </block>
[00:48:11.093]          // end if-block "!hasDormant"
[00:48:11.093]        </control>
[00:48:11.093]        // end if-block "isSWJ"
[00:48:11.093]      </control>
[00:48:11.093]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.093]        // if-block "!isSWJ"
[00:48:11.093]          // =>  FALSE
[00:48:11.093]        // skip if-block "!isSWJ"
[00:48:11.093]      </control>
[00:48:11.094]      <block atomic="false" info="">
[00:48:11.094]        ReadDP(0x0);
[00:48:11.098]  
[00:48:11.098]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.098]  
[00:48:11.098]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.098]      </block>
[00:48:11.098]      // end if-block "protType == 2"
[00:48:11.099]    </control>
[00:48:11.099]  </sequence>
[00:48:11.099]  
[00:48:11.150]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.150]  
[00:48:11.150]  <debugvars>
[00:48:11.151]    // Pre-defined
[00:48:11.151]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.151]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.151]    __dp=0x00000000
[00:48:11.151]    __ap=0x00000000
[00:48:11.151]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.151]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.151]    __FlashAddr=0x00000000
[00:48:11.151]    __FlashLen=0x00000000
[00:48:11.151]    __FlashArg=0x00000000
[00:48:11.151]    __FlashOp=0x00000000
[00:48:11.151]    __Result=0x00000000
[00:48:11.151]  </debugvars>
[00:48:11.152]  
[00:48:11.152]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.152]    <block atomic="false" info="">
[00:48:11.153]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.153]        // -> [isSWJ <= 0x00000001]
[00:48:11.153]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.153]        // -> [hasDormant <= 0x00000000]
[00:48:11.153]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.153]        // -> [protType <= 0x00000002]
[00:48:11.153]    </block>
[00:48:11.154]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.154]      // if-block "protType == 1"
[00:48:11.154]        // =>  FALSE
[00:48:11.154]      // skip if-block "protType == 1"
[00:48:11.154]    </control>
[00:48:11.155]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.155]      // if-block "protType == 2"
[00:48:11.155]        // =>  TRUE
[00:48:11.155]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.155]        // if-block "isSWJ"
[00:48:11.155]          // =>  TRUE
[00:48:11.155]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.155]          // if-block "hasDormant"
[00:48:11.155]            // =>  FALSE
[00:48:11.156]          // skip if-block "hasDormant"
[00:48:11.156]        </control>
[00:48:11.156]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.156]          // if-block "!hasDormant"
[00:48:11.156]            // =>  TRUE
[00:48:11.156]          <block atomic="false" info="">
[00:48:11.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.158]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.159]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.160]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.161]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.164]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.165]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.165]          </block>
[00:48:11.165]          // end if-block "!hasDormant"
[00:48:11.166]        </control>
[00:48:11.166]        // end if-block "isSWJ"
[00:48:11.166]      </control>
[00:48:11.166]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.166]        // if-block "!isSWJ"
[00:48:11.166]          // =>  FALSE
[00:48:11.166]        // skip if-block "!isSWJ"
[00:48:11.166]      </control>
[00:48:11.166]      <block atomic="false" info="">
[00:48:11.166]        ReadDP(0x0);
[00:48:11.167]  
[00:48:11.167]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.167]  
[00:48:11.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.168]      </block>
[00:48:11.168]      // end if-block "protType == 2"
[00:48:11.168]    </control>
[00:48:11.168]  </sequence>
[00:48:11.168]  
[00:48:11.226]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.226]  
[00:48:11.226]  <debugvars>
[00:48:11.226]    // Pre-defined
[00:48:11.226]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.226]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.226]    __dp=0x00000000
[00:48:11.227]    __ap=0x00000000
[00:48:11.227]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.227]    __FlashAddr=0x00000000
[00:48:11.227]    __FlashLen=0x00000000
[00:48:11.227]    __FlashArg=0x00000000
[00:48:11.227]    __FlashOp=0x00000000
[00:48:11.227]    __Result=0x00000000
[00:48:11.227]  </debugvars>
[00:48:11.227]  
[00:48:11.228]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.228]    <block atomic="false" info="">
[00:48:11.228]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.228]        // -> [isSWJ <= 0x00000001]
[00:48:11.228]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.228]        // -> [hasDormant <= 0x00000000]
[00:48:11.228]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.228]        // -> [protType <= 0x00000002]
[00:48:11.228]    </block>
[00:48:11.229]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.229]      // if-block "protType == 1"
[00:48:11.229]        // =>  FALSE
[00:48:11.229]      // skip if-block "protType == 1"
[00:48:11.229]    </control>
[00:48:11.229]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.229]      // if-block "protType == 2"
[00:48:11.229]        // =>  TRUE
[00:48:11.229]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.229]        // if-block "isSWJ"
[00:48:11.230]          // =>  TRUE
[00:48:11.230]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.230]          // if-block "hasDormant"
[00:48:11.230]            // =>  FALSE
[00:48:11.230]          // skip if-block "hasDormant"
[00:48:11.230]        </control>
[00:48:11.230]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.230]          // if-block "!hasDormant"
[00:48:11.230]            // =>  TRUE
[00:48:11.230]          <block atomic="false" info="">
[00:48:11.231]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.235]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.237]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.237]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.238]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.243]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.243]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.245]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.246]          </block>
[00:48:11.246]          // end if-block "!hasDormant"
[00:48:11.246]        </control>
[00:48:11.246]        // end if-block "isSWJ"
[00:48:11.246]      </control>
[00:48:11.246]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.246]        // if-block "!isSWJ"
[00:48:11.246]          // =>  FALSE
[00:48:11.247]        // skip if-block "!isSWJ"
[00:48:11.247]      </control>
[00:48:11.247]      <block atomic="false" info="">
[00:48:11.247]        ReadDP(0x0);
[00:48:11.250]  
[00:48:11.250]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.250]  
[00:48:11.250]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.250]      </block>
[00:48:11.250]      // end if-block "protType == 2"
[00:48:11.250]    </control>
[00:48:11.250]  </sequence>
[00:48:11.250]  
[00:48:11.301]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.301]  
[00:48:11.301]  <debugvars>
[00:48:11.301]    // Pre-defined
[00:48:11.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.301]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.302]    __dp=0x00000000
[00:48:11.302]    __ap=0x00000000
[00:48:11.302]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.302]    __FlashAddr=0x00000000
[00:48:11.302]    __FlashLen=0x00000000
[00:48:11.302]    __FlashArg=0x00000000
[00:48:11.303]    __FlashOp=0x00000000
[00:48:11.303]    __Result=0x00000000
[00:48:11.303]  </debugvars>
[00:48:11.303]  
[00:48:11.303]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.303]    <block atomic="false" info="">
[00:48:11.303]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.303]        // -> [isSWJ <= 0x00000001]
[00:48:11.303]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.303]        // -> [hasDormant <= 0x00000000]
[00:48:11.303]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.303]        // -> [protType <= 0x00000002]
[00:48:11.303]    </block>
[00:48:11.304]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.304]      // if-block "protType == 1"
[00:48:11.304]        // =>  FALSE
[00:48:11.304]      // skip if-block "protType == 1"
[00:48:11.304]    </control>
[00:48:11.304]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.304]      // if-block "protType == 2"
[00:48:11.304]        // =>  TRUE
[00:48:11.304]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.304]        // if-block "isSWJ"
[00:48:11.304]          // =>  TRUE
[00:48:11.305]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.305]          // if-block "hasDormant"
[00:48:11.305]            // =>  FALSE
[00:48:11.305]          // skip if-block "hasDormant"
[00:48:11.305]        </control>
[00:48:11.305]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.305]          // if-block "!hasDormant"
[00:48:11.306]            // =>  TRUE
[00:48:11.306]          <block atomic="false" info="">
[00:48:11.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.307]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.309]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.313]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.318]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.318]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.319]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.319]          </block>
[00:48:11.319]          // end if-block "!hasDormant"
[00:48:11.320]        </control>
[00:48:11.320]        // end if-block "isSWJ"
[00:48:11.320]      </control>
[00:48:11.320]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.320]        // if-block "!isSWJ"
[00:48:11.320]          // =>  FALSE
[00:48:11.320]        // skip if-block "!isSWJ"
[00:48:11.320]      </control>
[00:48:11.321]      <block atomic="false" info="">
[00:48:11.321]        ReadDP(0x0);
[00:48:11.321]  
[00:48:11.321]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.321]  
[00:48:11.321]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.321]      </block>
[00:48:11.322]      // end if-block "protType == 2"
[00:48:11.322]    </control>
[00:48:11.322]  </sequence>
[00:48:11.322]  
[00:48:11.376]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.376]  
[00:48:11.376]  <debugvars>
[00:48:11.376]    // Pre-defined
[00:48:11.376]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.376]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.376]    __dp=0x00000000
[00:48:11.377]    __ap=0x00000000
[00:48:11.377]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.377]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.377]    __FlashAddr=0x00000000
[00:48:11.377]    __FlashLen=0x00000000
[00:48:11.377]    __FlashArg=0x00000000
[00:48:11.377]    __FlashOp=0x00000000
[00:48:11.377]    __Result=0x00000000
[00:48:11.377]  </debugvars>
[00:48:11.377]  
[00:48:11.378]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.378]    <block atomic="false" info="">
[00:48:11.378]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.378]        // -> [isSWJ <= 0x00000001]
[00:48:11.378]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.379]        // -> [hasDormant <= 0x00000000]
[00:48:11.379]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.379]        // -> [protType <= 0x00000002]
[00:48:11.379]    </block>
[00:48:11.379]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.379]      // if-block "protType == 1"
[00:48:11.379]        // =>  FALSE
[00:48:11.379]      // skip if-block "protType == 1"
[00:48:11.379]    </control>
[00:48:11.379]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.380]      // if-block "protType == 2"
[00:48:11.380]        // =>  TRUE
[00:48:11.380]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.380]        // if-block "isSWJ"
[00:48:11.380]          // =>  TRUE
[00:48:11.380]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.380]          // if-block "hasDormant"
[00:48:11.380]            // =>  FALSE
[00:48:11.380]          // skip if-block "hasDormant"
[00:48:11.380]        </control>
[00:48:11.381]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.381]          // if-block "!hasDormant"
[00:48:11.381]            // =>  TRUE
[00:48:11.381]          <block atomic="false" info="">
[00:48:11.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.383]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.384]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.386]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.389]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.390]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.390]          </block>
[00:48:11.390]          // end if-block "!hasDormant"
[00:48:11.390]        </control>
[00:48:11.391]        // end if-block "isSWJ"
[00:48:11.391]      </control>
[00:48:11.391]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.391]        // if-block "!isSWJ"
[00:48:11.391]          // =>  FALSE
[00:48:11.391]        // skip if-block "!isSWJ"
[00:48:11.391]      </control>
[00:48:11.392]      <block atomic="false" info="">
[00:48:11.392]        ReadDP(0x0);
[00:48:11.400]  
[00:48:11.400]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.400]  
[00:48:11.401]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.401]      </block>
[00:48:11.401]      // end if-block "protType == 2"
[00:48:11.401]    </control>
[00:48:11.401]  </sequence>
[00:48:11.401]  
[00:48:11.452]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.452]  
[00:48:11.452]  <debugvars>
[00:48:11.452]    // Pre-defined
[00:48:11.452]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.452]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.452]    __dp=0x00000000
[00:48:11.452]    __ap=0x00000000
[00:48:11.452]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.452]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.453]    __FlashAddr=0x00000000
[00:48:11.453]    __FlashLen=0x00000000
[00:48:11.453]    __FlashArg=0x00000000
[00:48:11.453]    __FlashOp=0x00000000
[00:48:11.453]    __Result=0x00000000
[00:48:11.453]  </debugvars>
[00:48:11.453]  
[00:48:11.453]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.453]    <block atomic="false" info="">
[00:48:11.453]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.453]        // -> [isSWJ <= 0x00000001]
[00:48:11.454]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.454]        // -> [hasDormant <= 0x00000000]
[00:48:11.454]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.454]        // -> [protType <= 0x00000002]
[00:48:11.454]    </block>
[00:48:11.454]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.454]      // if-block "protType == 1"
[00:48:11.455]        // =>  FALSE
[00:48:11.455]      // skip if-block "protType == 1"
[00:48:11.455]    </control>
[00:48:11.455]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.455]      // if-block "protType == 2"
[00:48:11.455]        // =>  TRUE
[00:48:11.455]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.455]        // if-block "isSWJ"
[00:48:11.455]          // =>  TRUE
[00:48:11.456]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.456]          // if-block "hasDormant"
[00:48:11.456]            // =>  FALSE
[00:48:11.456]          // skip if-block "hasDormant"
[00:48:11.456]        </control>
[00:48:11.456]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.456]          // if-block "!hasDormant"
[00:48:11.456]            // =>  TRUE
[00:48:11.456]          <block atomic="false" info="">
[00:48:11.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.459]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.461]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.462]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.464]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.464]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.465]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.465]          </block>
[00:48:11.466]          // end if-block "!hasDormant"
[00:48:11.466]        </control>
[00:48:11.466]        // end if-block "isSWJ"
[00:48:11.466]      </control>
[00:48:11.466]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.466]        // if-block "!isSWJ"
[00:48:11.466]          // =>  FALSE
[00:48:11.467]        // skip if-block "!isSWJ"
[00:48:11.467]      </control>
[00:48:11.467]      <block atomic="false" info="">
[00:48:11.467]        ReadDP(0x0);
[00:48:11.469]  
[00:48:11.469]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.469]  
[00:48:11.469]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.469]      </block>
[00:48:11.469]      // end if-block "protType == 2"
[00:48:11.469]    </control>
[00:48:11.469]  </sequence>
[00:48:11.469]  
[00:48:11.529]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.529]  
[00:48:11.529]  <debugvars>
[00:48:11.529]    // Pre-defined
[00:48:11.529]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.529]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.529]    __dp=0x00000000
[00:48:11.530]    __ap=0x00000000
[00:48:11.530]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.530]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.530]    __FlashAddr=0x00000000
[00:48:11.530]    __FlashLen=0x00000000
[00:48:11.530]    __FlashArg=0x00000000
[00:48:11.530]    __FlashOp=0x00000000
[00:48:11.530]    __Result=0x00000000
[00:48:11.531]  </debugvars>
[00:48:11.531]  
[00:48:11.531]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.531]    <block atomic="false" info="">
[00:48:11.531]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.531]        // -> [isSWJ <= 0x00000001]
[00:48:11.531]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.532]        // -> [hasDormant <= 0x00000000]
[00:48:11.532]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.532]        // -> [protType <= 0x00000002]
[00:48:11.532]    </block>
[00:48:11.532]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.533]      // if-block "protType == 1"
[00:48:11.533]        // =>  FALSE
[00:48:11.533]      // skip if-block "protType == 1"
[00:48:11.533]    </control>
[00:48:11.533]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.533]      // if-block "protType == 2"
[00:48:11.533]        // =>  TRUE
[00:48:11.534]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.534]        // if-block "isSWJ"
[00:48:11.534]          // =>  TRUE
[00:48:11.534]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.534]          // if-block "hasDormant"
[00:48:11.534]            // =>  FALSE
[00:48:11.534]          // skip if-block "hasDormant"
[00:48:11.534]        </control>
[00:48:11.534]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.534]          // if-block "!hasDormant"
[00:48:11.534]            // =>  TRUE
[00:48:11.535]          <block atomic="false" info="">
[00:48:11.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.545]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.553]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.555]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.555]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.558]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.558]          </block>
[00:48:11.559]          // end if-block "!hasDormant"
[00:48:11.559]        </control>
[00:48:11.559]        // end if-block "isSWJ"
[00:48:11.559]      </control>
[00:48:11.559]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.560]        // if-block "!isSWJ"
[00:48:11.560]          // =>  FALSE
[00:48:11.560]        // skip if-block "!isSWJ"
[00:48:11.560]      </control>
[00:48:11.560]      <block atomic="false" info="">
[00:48:11.560]        ReadDP(0x0);
[00:48:11.562]  
[00:48:11.562]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.562]  
[00:48:11.562]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.562]      </block>
[00:48:11.562]      // end if-block "protType == 2"
[00:48:11.562]    </control>
[00:48:11.562]  </sequence>
[00:48:11.562]  
[00:48:11.621]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.621]  
[00:48:11.621]  <debugvars>
[00:48:11.621]    // Pre-defined
[00:48:11.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.621]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.622]    __dp=0x00000000
[00:48:11.622]    __ap=0x00000000
[00:48:11.622]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.622]    __FlashAddr=0x00000000
[00:48:11.622]    __FlashLen=0x00000000
[00:48:11.622]    __FlashArg=0x00000000
[00:48:11.622]    __FlashOp=0x00000000
[00:48:11.622]    __Result=0x00000000
[00:48:11.622]  </debugvars>
[00:48:11.623]  
[00:48:11.623]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.623]    <block atomic="false" info="">
[00:48:11.623]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.623]        // -> [isSWJ <= 0x00000001]
[00:48:11.623]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.623]        // -> [hasDormant <= 0x00000000]
[00:48:11.623]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.623]        // -> [protType <= 0x00000002]
[00:48:11.624]    </block>
[00:48:11.624]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.624]      // if-block "protType == 1"
[00:48:11.624]        // =>  FALSE
[00:48:11.624]      // skip if-block "protType == 1"
[00:48:11.624]    </control>
[00:48:11.624]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.624]      // if-block "protType == 2"
[00:48:11.624]        // =>  TRUE
[00:48:11.624]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.625]        // if-block "isSWJ"
[00:48:11.625]          // =>  TRUE
[00:48:11.625]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.625]          // if-block "hasDormant"
[00:48:11.625]            // =>  FALSE
[00:48:11.625]          // skip if-block "hasDormant"
[00:48:11.625]        </control>
[00:48:11.625]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.625]          // if-block "!hasDormant"
[00:48:11.625]            // =>  TRUE
[00:48:11.625]          <block atomic="false" info="">
[00:48:11.625]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.628]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.628]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.630]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.631]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.632]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.632]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.634]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.634]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.635]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.635]          </block>
[00:48:11.636]          // end if-block "!hasDormant"
[00:48:11.636]        </control>
[00:48:11.636]        // end if-block "isSWJ"
[00:48:11.636]      </control>
[00:48:11.636]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.636]        // if-block "!isSWJ"
[00:48:11.637]          // =>  FALSE
[00:48:11.637]        // skip if-block "!isSWJ"
[00:48:11.637]      </control>
[00:48:11.637]      <block atomic="false" info="">
[00:48:11.637]        ReadDP(0x0);
[00:48:11.641]  
[00:48:11.641]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.641]  
[00:48:11.641]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.642]      </block>
[00:48:11.642]      // end if-block "protType == 2"
[00:48:11.642]    </control>
[00:48:11.642]  </sequence>
[00:48:11.642]  
[00:48:11.696]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.696]  
[00:48:11.696]  <debugvars>
[00:48:11.696]    // Pre-defined
[00:48:11.698]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.698]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.698]    __dp=0x00000000
[00:48:11.698]    __ap=0x00000000
[00:48:11.698]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.698]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.698]    __FlashAddr=0x00000000
[00:48:11.698]    __FlashLen=0x00000000
[00:48:11.698]    __FlashArg=0x00000000
[00:48:11.698]    __FlashOp=0x00000000
[00:48:11.699]    __Result=0x00000000
[00:48:11.699]  </debugvars>
[00:48:11.699]  
[00:48:11.699]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.699]    <block atomic="false" info="">
[00:48:11.699]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.699]        // -> [isSWJ <= 0x00000001]
[00:48:11.699]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.699]        // -> [hasDormant <= 0x00000000]
[00:48:11.699]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.700]        // -> [protType <= 0x00000002]
[00:48:11.700]    </block>
[00:48:11.700]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.700]      // if-block "protType == 1"
[00:48:11.700]        // =>  FALSE
[00:48:11.700]      // skip if-block "protType == 1"
[00:48:11.700]    </control>
[00:48:11.700]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.700]      // if-block "protType == 2"
[00:48:11.700]        // =>  TRUE
[00:48:11.700]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.700]        // if-block "isSWJ"
[00:48:11.700]          // =>  TRUE
[00:48:11.700]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.700]          // if-block "hasDormant"
[00:48:11.700]            // =>  FALSE
[00:48:11.701]          // skip if-block "hasDormant"
[00:48:11.701]        </control>
[00:48:11.701]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.701]          // if-block "!hasDormant"
[00:48:11.701]            // =>  TRUE
[00:48:11.701]          <block atomic="false" info="">
[00:48:11.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.706]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.708]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.713]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.713]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.717]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.718]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.718]          </block>
[00:48:11.718]          // end if-block "!hasDormant"
[00:48:11.718]        </control>
[00:48:11.718]        // end if-block "isSWJ"
[00:48:11.718]      </control>
[00:48:11.719]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.719]        // if-block "!isSWJ"
[00:48:11.719]          // =>  FALSE
[00:48:11.719]        // skip if-block "!isSWJ"
[00:48:11.719]      </control>
[00:48:11.719]      <block atomic="false" info="">
[00:48:11.719]        ReadDP(0x0);
[00:48:11.721]  
[00:48:11.721]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.721]  
[00:48:11.721]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.721]      </block>
[00:48:11.721]      // end if-block "protType == 2"
[00:48:11.721]    </control>
[00:48:11.721]  </sequence>
[00:48:11.721]  
[00:48:11.773]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.773]  
[00:48:11.773]  <debugvars>
[00:48:11.773]    // Pre-defined
[00:48:11.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.774]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.774]    __dp=0x00000000
[00:48:11.774]    __ap=0x00000000
[00:48:11.774]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.774]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.774]    __FlashAddr=0x00000000
[00:48:11.774]    __FlashLen=0x00000000
[00:48:11.774]    __FlashArg=0x00000000
[00:48:11.774]    __FlashOp=0x00000000
[00:48:11.774]    __Result=0x00000000
[00:48:11.774]  </debugvars>
[00:48:11.774]  
[00:48:11.775]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.775]    <block atomic="false" info="">
[00:48:11.775]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.775]        // -> [isSWJ <= 0x00000001]
[00:48:11.775]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.775]        // -> [hasDormant <= 0x00000000]
[00:48:11.775]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.775]        // -> [protType <= 0x00000002]
[00:48:11.775]    </block>
[00:48:11.775]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.775]      // if-block "protType == 1"
[00:48:11.776]        // =>  FALSE
[00:48:11.776]      // skip if-block "protType == 1"
[00:48:11.776]    </control>
[00:48:11.776]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.776]      // if-block "protType == 2"
[00:48:11.776]        // =>  TRUE
[00:48:11.776]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.776]        // if-block "isSWJ"
[00:48:11.776]          // =>  TRUE
[00:48:11.776]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.777]          // if-block "hasDormant"
[00:48:11.777]            // =>  FALSE
[00:48:11.777]          // skip if-block "hasDormant"
[00:48:11.777]        </control>
[00:48:11.777]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.777]          // if-block "!hasDormant"
[00:48:11.777]            // =>  TRUE
[00:48:11.777]          <block atomic="false" info="">
[00:48:11.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.779]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.780]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.781]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.782]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.783]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.789]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.792]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.792]          </block>
[00:48:11.792]          // end if-block "!hasDormant"
[00:48:11.793]        </control>
[00:48:11.793]        // end if-block "isSWJ"
[00:48:11.793]      </control>
[00:48:11.793]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.793]        // if-block "!isSWJ"
[00:48:11.793]          // =>  FALSE
[00:48:11.793]        // skip if-block "!isSWJ"
[00:48:11.794]      </control>
[00:48:11.794]      <block atomic="false" info="">
[00:48:11.794]        ReadDP(0x0);
[00:48:11.799]  
[00:48:11.799]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.799]  
[00:48:11.799]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.799]      </block>
[00:48:11.799]      // end if-block "protType == 2"
[00:48:11.800]    </control>
[00:48:11.800]  </sequence>
[00:48:11.800]  
[00:48:11.863]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.863]  
[00:48:11.863]  <debugvars>
[00:48:11.863]    // Pre-defined
[00:48:11.863]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.863]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.864]    __dp=0x00000000
[00:48:11.864]    __ap=0x00000000
[00:48:11.864]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.864]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.864]    __FlashAddr=0x00000000
[00:48:11.864]    __FlashLen=0x00000000
[00:48:11.864]    __FlashArg=0x00000000
[00:48:11.864]    __FlashOp=0x00000000
[00:48:11.864]    __Result=0x00000000
[00:48:11.864]  </debugvars>
[00:48:11.864]  
[00:48:11.864]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.864]    <block atomic="false" info="">
[00:48:11.866]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.866]        // -> [isSWJ <= 0x00000001]
[00:48:11.866]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.866]        // -> [hasDormant <= 0x00000000]
[00:48:11.866]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.866]        // -> [protType <= 0x00000002]
[00:48:11.866]    </block>
[00:48:11.866]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.866]      // if-block "protType == 1"
[00:48:11.866]        // =>  FALSE
[00:48:11.866]      // skip if-block "protType == 1"
[00:48:11.866]    </control>
[00:48:11.866]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.867]      // if-block "protType == 2"
[00:48:11.867]        // =>  TRUE
[00:48:11.867]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.867]        // if-block "isSWJ"
[00:48:11.867]          // =>  TRUE
[00:48:11.867]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.867]          // if-block "hasDormant"
[00:48:11.867]            // =>  FALSE
[00:48:11.867]          // skip if-block "hasDormant"
[00:48:11.867]        </control>
[00:48:11.867]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.867]          // if-block "!hasDormant"
[00:48:11.867]            // =>  TRUE
[00:48:11.868]          <block atomic="false" info="">
[00:48:11.868]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.870]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.873]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.874]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.876]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.878]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.878]          </block>
[00:48:11.878]          // end if-block "!hasDormant"
[00:48:11.878]        </control>
[00:48:11.878]        // end if-block "isSWJ"
[00:48:11.878]      </control>
[00:48:11.878]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.878]        // if-block "!isSWJ"
[00:48:11.878]          // =>  FALSE
[00:48:11.878]        // skip if-block "!isSWJ"
[00:48:11.879]      </control>
[00:48:11.879]      <block atomic="false" info="">
[00:48:11.879]        ReadDP(0x0);
[00:48:11.880]  
[00:48:11.880]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.880]  
[00:48:11.881]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.881]      </block>
[00:48:11.881]      // end if-block "protType == 2"
[00:48:11.881]    </control>
[00:48:11.881]  </sequence>
[00:48:11.881]  
[00:48:11.940]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:11.940]  
[00:48:11.940]  <debugvars>
[00:48:11.940]    // Pre-defined
[00:48:11.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:11.940]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:11.940]    __dp=0x00000000
[00:48:11.940]    __ap=0x00000000
[00:48:11.941]    __traceout=0x00000000      (Trace Disabled)
[00:48:11.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:11.941]    __FlashAddr=0x00000000
[00:48:11.941]    __FlashLen=0x00000000
[00:48:11.941]    __FlashArg=0x00000000
[00:48:11.942]    __FlashOp=0x00000000
[00:48:11.942]    __Result=0x00000000
[00:48:11.942]  </debugvars>
[00:48:11.942]  
[00:48:11.942]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:11.942]    <block atomic="false" info="">
[00:48:11.942]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:11.942]        // -> [isSWJ <= 0x00000001]
[00:48:11.942]      __var hasDormant = __protocol & 0x00020000;
[00:48:11.942]        // -> [hasDormant <= 0x00000000]
[00:48:11.943]      __var protType   = __protocol & 0x0000FFFF;
[00:48:11.943]        // -> [protType <= 0x00000002]
[00:48:11.943]    </block>
[00:48:11.943]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:11.943]      // if-block "protType == 1"
[00:48:11.943]        // =>  FALSE
[00:48:11.944]      // skip if-block "protType == 1"
[00:48:11.944]    </control>
[00:48:11.944]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:11.944]      // if-block "protType == 2"
[00:48:11.944]        // =>  TRUE
[00:48:11.944]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:11.944]        // if-block "isSWJ"
[00:48:11.944]          // =>  TRUE
[00:48:11.944]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:11.944]          // if-block "hasDormant"
[00:48:11.945]            // =>  FALSE
[00:48:11.945]          // skip if-block "hasDormant"
[00:48:11.945]        </control>
[00:48:11.945]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:11.945]          // if-block "!hasDormant"
[00:48:11.945]            // =>  TRUE
[00:48:11.945]          <block atomic="false" info="">
[00:48:11.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:11.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.949]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:11.950]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:11.950]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:11.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.952]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:11.954]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:11.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:11.955]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:11.955]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:11.958]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:11.958]          </block>
[00:48:11.958]          // end if-block "!hasDormant"
[00:48:11.958]        </control>
[00:48:11.959]        // end if-block "isSWJ"
[00:48:11.959]      </control>
[00:48:11.959]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:11.959]        // if-block "!isSWJ"
[00:48:11.959]          // =>  FALSE
[00:48:11.959]        // skip if-block "!isSWJ"
[00:48:11.959]      </control>
[00:48:11.959]      <block atomic="false" info="">
[00:48:11.959]        ReadDP(0x0);
[00:48:11.961]  
[00:48:11.961]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:11.961]  
[00:48:11.961]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:11.961]      </block>
[00:48:11.961]      // end if-block "protType == 2"
[00:48:11.961]    </control>
[00:48:11.961]  </sequence>
[00:48:11.961]  
[00:48:12.016]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.016]  
[00:48:12.016]  <debugvars>
[00:48:12.017]    // Pre-defined
[00:48:12.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.017]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.017]    __dp=0x00000000
[00:48:12.017]    __ap=0x00000000
[00:48:12.017]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.017]    __FlashAddr=0x00000000
[00:48:12.017]    __FlashLen=0x00000000
[00:48:12.018]    __FlashArg=0x00000000
[00:48:12.018]    __FlashOp=0x00000000
[00:48:12.018]    __Result=0x00000000
[00:48:12.018]  </debugvars>
[00:48:12.018]  
[00:48:12.018]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.018]    <block atomic="false" info="">
[00:48:12.018]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.018]        // -> [isSWJ <= 0x00000001]
[00:48:12.018]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.019]        // -> [hasDormant <= 0x00000000]
[00:48:12.019]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.019]        // -> [protType <= 0x00000002]
[00:48:12.019]    </block>
[00:48:12.019]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.019]      // if-block "protType == 1"
[00:48:12.019]        // =>  FALSE
[00:48:12.019]      // skip if-block "protType == 1"
[00:48:12.019]    </control>
[00:48:12.019]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.020]      // if-block "protType == 2"
[00:48:12.020]        // =>  TRUE
[00:48:12.020]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.020]        // if-block "isSWJ"
[00:48:12.020]          // =>  TRUE
[00:48:12.020]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.020]          // if-block "hasDormant"
[00:48:12.020]            // =>  FALSE
[00:48:12.020]          // skip if-block "hasDormant"
[00:48:12.021]        </control>
[00:48:12.021]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.021]          // if-block "!hasDormant"
[00:48:12.021]            // =>  TRUE
[00:48:12.021]          <block atomic="false" info="">
[00:48:12.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.024]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.029]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.029]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.032]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.034]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.034]          </block>
[00:48:12.034]          // end if-block "!hasDormant"
[00:48:12.034]        </control>
[00:48:12.034]        // end if-block "isSWJ"
[00:48:12.034]      </control>
[00:48:12.034]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.034]        // if-block "!isSWJ"
[00:48:12.034]          // =>  FALSE
[00:48:12.034]        // skip if-block "!isSWJ"
[00:48:12.035]      </control>
[00:48:12.035]      <block atomic="false" info="">
[00:48:12.035]        ReadDP(0x0);
[00:48:12.036]  
[00:48:12.036]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.036]  
[00:48:12.036]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.036]      </block>
[00:48:12.036]      // end if-block "protType == 2"
[00:48:12.037]    </control>
[00:48:12.037]  </sequence>
[00:48:12.037]  
[00:48:12.092]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.092]  
[00:48:12.092]  <debugvars>
[00:48:12.092]    // Pre-defined
[00:48:12.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.093]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.093]    __dp=0x00000000
[00:48:12.093]    __ap=0x00000000
[00:48:12.093]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.093]    __FlashAddr=0x00000000
[00:48:12.093]    __FlashLen=0x00000000
[00:48:12.093]    __FlashArg=0x00000000
[00:48:12.094]    __FlashOp=0x00000000
[00:48:12.095]    __Result=0x00000000
[00:48:12.095]  </debugvars>
[00:48:12.095]  
[00:48:12.095]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.095]    <block atomic="false" info="">
[00:48:12.095]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.095]        // -> [isSWJ <= 0x00000001]
[00:48:12.095]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.095]        // -> [hasDormant <= 0x00000000]
[00:48:12.095]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.095]        // -> [protType <= 0x00000002]
[00:48:12.095]    </block>
[00:48:12.095]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.095]      // if-block "protType == 1"
[00:48:12.095]        // =>  FALSE
[00:48:12.097]      // skip if-block "protType == 1"
[00:48:12.097]    </control>
[00:48:12.097]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.097]      // if-block "protType == 2"
[00:48:12.097]        // =>  TRUE
[00:48:12.097]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.097]        // if-block "isSWJ"
[00:48:12.097]          // =>  TRUE
[00:48:12.097]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.098]          // if-block "hasDormant"
[00:48:12.098]            // =>  FALSE
[00:48:12.098]          // skip if-block "hasDormant"
[00:48:12.098]        </control>
[00:48:12.098]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.098]          // if-block "!hasDormant"
[00:48:12.098]            // =>  TRUE
[00:48:12.098]          <block atomic="false" info="">
[00:48:12.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.099]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.101]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.103]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.105]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.105]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.106]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.109]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.110]          </block>
[00:48:12.110]          // end if-block "!hasDormant"
[00:48:12.110]        </control>
[00:48:12.110]        // end if-block "isSWJ"
[00:48:12.110]      </control>
[00:48:12.110]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.110]        // if-block "!isSWJ"
[00:48:12.110]          // =>  FALSE
[00:48:12.111]        // skip if-block "!isSWJ"
[00:48:12.111]      </control>
[00:48:12.111]      <block atomic="false" info="">
[00:48:12.111]        ReadDP(0x0);
[00:48:12.115]  
[00:48:12.115]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.115]  
[00:48:12.115]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.115]      </block>
[00:48:12.115]      // end if-block "protType == 2"
[00:48:12.116]    </control>
[00:48:12.116]  </sequence>
[00:48:12.116]  
[00:48:12.168]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.168]  
[00:48:12.168]  <debugvars>
[00:48:12.168]    // Pre-defined
[00:48:12.170]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.170]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.170]    __dp=0x00000000
[00:48:12.170]    __ap=0x00000000
[00:48:12.170]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.170]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.170]    __FlashAddr=0x00000000
[00:48:12.170]    __FlashLen=0x00000000
[00:48:12.170]    __FlashArg=0x00000000
[00:48:12.170]    __FlashOp=0x00000000
[00:48:12.171]    __Result=0x00000000
[00:48:12.171]  </debugvars>
[00:48:12.171]  
[00:48:12.171]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.171]    <block atomic="false" info="">
[00:48:12.171]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.172]        // -> [isSWJ <= 0x00000001]
[00:48:12.172]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.172]        // -> [hasDormant <= 0x00000000]
[00:48:12.172]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.172]        // -> [protType <= 0x00000002]
[00:48:12.172]    </block>
[00:48:12.172]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.172]      // if-block "protType == 1"
[00:48:12.172]        // =>  FALSE
[00:48:12.172]      // skip if-block "protType == 1"
[00:48:12.173]    </control>
[00:48:12.173]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.173]      // if-block "protType == 2"
[00:48:12.173]        // =>  TRUE
[00:48:12.173]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.173]        // if-block "isSWJ"
[00:48:12.173]          // =>  TRUE
[00:48:12.173]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.173]          // if-block "hasDormant"
[00:48:12.173]            // =>  FALSE
[00:48:12.174]          // skip if-block "hasDormant"
[00:48:12.174]        </control>
[00:48:12.174]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.174]          // if-block "!hasDormant"
[00:48:12.174]            // =>  TRUE
[00:48:12.174]          <block atomic="false" info="">
[00:48:12.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.177]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.178]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.178]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.180]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.180]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.184]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.185]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.185]          </block>
[00:48:12.186]          // end if-block "!hasDormant"
[00:48:12.186]        </control>
[00:48:12.186]        // end if-block "isSWJ"
[00:48:12.186]      </control>
[00:48:12.186]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.186]        // if-block "!isSWJ"
[00:48:12.186]          // =>  FALSE
[00:48:12.187]        // skip if-block "!isSWJ"
[00:48:12.187]      </control>
[00:48:12.187]      <block atomic="false" info="">
[00:48:12.187]        ReadDP(0x0);
[00:48:12.188]  
[00:48:12.188]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.188]  
[00:48:12.188]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.188]      </block>
[00:48:12.188]      // end if-block "protType == 2"
[00:48:12.188]    </control>
[00:48:12.188]  </sequence>
[00:48:12.188]  
[00:48:12.246]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.246]  
[00:48:12.246]  <debugvars>
[00:48:12.246]    // Pre-defined
[00:48:12.246]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.246]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.246]    __dp=0x00000000
[00:48:12.246]    __ap=0x00000000
[00:48:12.246]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.247]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.247]    __FlashAddr=0x00000000
[00:48:12.247]    __FlashLen=0x00000000
[00:48:12.247]    __FlashArg=0x00000000
[00:48:12.247]    __FlashOp=0x00000000
[00:48:12.247]    __Result=0x00000000
[00:48:12.247]  </debugvars>
[00:48:12.247]  
[00:48:12.247]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.247]    <block atomic="false" info="">
[00:48:12.247]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.247]        // -> [isSWJ <= 0x00000001]
[00:48:12.247]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.247]        // -> [hasDormant <= 0x00000000]
[00:48:12.247]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.247]        // -> [protType <= 0x00000002]
[00:48:12.249]    </block>
[00:48:12.249]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.249]      // if-block "protType == 1"
[00:48:12.249]        // =>  FALSE
[00:48:12.249]      // skip if-block "protType == 1"
[00:48:12.249]    </control>
[00:48:12.249]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.249]      // if-block "protType == 2"
[00:48:12.249]        // =>  TRUE
[00:48:12.250]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.250]        // if-block "isSWJ"
[00:48:12.250]          // =>  TRUE
[00:48:12.250]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.250]          // if-block "hasDormant"
[00:48:12.250]            // =>  FALSE
[00:48:12.250]          // skip if-block "hasDormant"
[00:48:12.250]        </control>
[00:48:12.250]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.251]          // if-block "!hasDormant"
[00:48:12.251]            // =>  TRUE
[00:48:12.251]          <block atomic="false" info="">
[00:48:12.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.256]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.261]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.262]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.262]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.266]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.266]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.268]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.268]          </block>
[00:48:12.268]          // end if-block "!hasDormant"
[00:48:12.268]        </control>
[00:48:12.269]        // end if-block "isSWJ"
[00:48:12.269]      </control>
[00:48:12.269]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.269]        // if-block "!isSWJ"
[00:48:12.269]          // =>  FALSE
[00:48:12.269]        // skip if-block "!isSWJ"
[00:48:12.269]      </control>
[00:48:12.269]      <block atomic="false" info="">
[00:48:12.270]        ReadDP(0x0);
[00:48:12.271]  
[00:48:12.271]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.271]  
[00:48:12.271]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.271]      </block>
[00:48:12.271]      // end if-block "protType == 2"
[00:48:12.271]    </control>
[00:48:12.271]  </sequence>
[00:48:12.271]  
[00:48:12.336]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.336]  
[00:48:12.336]  <debugvars>
[00:48:12.336]    // Pre-defined
[00:48:12.336]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.336]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.336]    __dp=0x00000000
[00:48:12.337]    __ap=0x00000000
[00:48:12.337]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.337]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.337]    __FlashAddr=0x00000000
[00:48:12.337]    __FlashLen=0x00000000
[00:48:12.337]    __FlashArg=0x00000000
[00:48:12.337]    __FlashOp=0x00000000
[00:48:12.337]    __Result=0x00000000
[00:48:12.337]  </debugvars>
[00:48:12.337]  
[00:48:12.338]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.338]    <block atomic="false" info="">
[00:48:12.338]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.338]        // -> [isSWJ <= 0x00000001]
[00:48:12.338]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.338]        // -> [hasDormant <= 0x00000000]
[00:48:12.338]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.338]        // -> [protType <= 0x00000002]
[00:48:12.338]    </block>
[00:48:12.339]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.339]      // if-block "protType == 1"
[00:48:12.339]        // =>  FALSE
[00:48:12.339]      // skip if-block "protType == 1"
[00:48:12.339]    </control>
[00:48:12.339]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.339]      // if-block "protType == 2"
[00:48:12.340]        // =>  TRUE
[00:48:12.340]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.340]        // if-block "isSWJ"
[00:48:12.340]          // =>  TRUE
[00:48:12.340]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.340]          // if-block "hasDormant"
[00:48:12.340]            // =>  FALSE
[00:48:12.340]          // skip if-block "hasDormant"
[00:48:12.340]        </control>
[00:48:12.340]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.341]          // if-block "!hasDormant"
[00:48:12.341]            // =>  TRUE
[00:48:12.341]          <block atomic="false" info="">
[00:48:12.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.344]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.348]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.350]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.351]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.352]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.353]          </block>
[00:48:12.353]          // end if-block "!hasDormant"
[00:48:12.353]        </control>
[00:48:12.353]        // end if-block "isSWJ"
[00:48:12.353]      </control>
[00:48:12.353]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.353]        // if-block "!isSWJ"
[00:48:12.353]          // =>  FALSE
[00:48:12.353]        // skip if-block "!isSWJ"
[00:48:12.353]      </control>
[00:48:12.354]      <block atomic="false" info="">
[00:48:12.354]        ReadDP(0x0);
[00:48:12.358]  
[00:48:12.358]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.358]  
[00:48:12.358]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.359]      </block>
[00:48:12.359]      // end if-block "protType == 2"
[00:48:12.359]    </control>
[00:48:12.359]  </sequence>
[00:48:12.359]  
[00:48:12.411]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.411]  
[00:48:12.411]  <debugvars>
[00:48:12.411]    // Pre-defined
[00:48:12.413]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.413]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.413]    __dp=0x00000000
[00:48:12.413]    __ap=0x00000000
[00:48:12.413]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.413]    __FlashAddr=0x00000000
[00:48:12.413]    __FlashLen=0x00000000
[00:48:12.413]    __FlashArg=0x00000000
[00:48:12.413]    __FlashOp=0x00000000
[00:48:12.413]    __Result=0x00000000
[00:48:12.413]  </debugvars>
[00:48:12.413]  
[00:48:12.414]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.414]    <block atomic="false" info="">
[00:48:12.414]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.414]        // -> [isSWJ <= 0x00000001]
[00:48:12.414]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.414]        // -> [hasDormant <= 0x00000000]
[00:48:12.414]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.414]        // -> [protType <= 0x00000002]
[00:48:12.414]    </block>
[00:48:12.414]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.414]      // if-block "protType == 1"
[00:48:12.414]        // =>  FALSE
[00:48:12.414]      // skip if-block "protType == 1"
[00:48:12.416]    </control>
[00:48:12.416]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.416]      // if-block "protType == 2"
[00:48:12.416]        // =>  TRUE
[00:48:12.416]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.416]        // if-block "isSWJ"
[00:48:12.416]          // =>  TRUE
[00:48:12.416]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.417]          // if-block "hasDormant"
[00:48:12.417]            // =>  FALSE
[00:48:12.417]          // skip if-block "hasDormant"
[00:48:12.417]        </control>
[00:48:12.417]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.417]          // if-block "!hasDormant"
[00:48:12.417]            // =>  TRUE
[00:48:12.417]          <block atomic="false" info="">
[00:48:12.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.422]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.423]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.426]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.429]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.429]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.431]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.431]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.433]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.433]          </block>
[00:48:12.433]          // end if-block "!hasDormant"
[00:48:12.433]        </control>
[00:48:12.433]        // end if-block "isSWJ"
[00:48:12.433]      </control>
[00:48:12.433]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.433]        // if-block "!isSWJ"
[00:48:12.433]          // =>  FALSE
[00:48:12.433]        // skip if-block "!isSWJ"
[00:48:12.433]      </control>
[00:48:12.434]      <block atomic="false" info="">
[00:48:12.434]        ReadDP(0x0);
[00:48:12.435]  
[00:48:12.435]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.435]  
[00:48:12.435]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.435]      </block>
[00:48:12.435]      // end if-block "protType == 2"
[00:48:12.435]    </control>
[00:48:12.435]  </sequence>
[00:48:12.435]  
[00:48:12.487]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.487]  
[00:48:12.487]  <debugvars>
[00:48:12.487]    // Pre-defined
[00:48:12.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.487]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.487]    __dp=0x00000000
[00:48:12.488]    __ap=0x00000000
[00:48:12.488]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.488]    __FlashAddr=0x00000000
[00:48:12.488]    __FlashLen=0x00000000
[00:48:12.488]    __FlashArg=0x00000000
[00:48:12.488]    __FlashOp=0x00000000
[00:48:12.488]    __Result=0x00000000
[00:48:12.488]  </debugvars>
[00:48:12.488]  
[00:48:12.488]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.488]    <block atomic="false" info="">
[00:48:12.490]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.490]        // -> [isSWJ <= 0x00000001]
[00:48:12.490]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.490]        // -> [hasDormant <= 0x00000000]
[00:48:12.490]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.490]        // -> [protType <= 0x00000002]
[00:48:12.490]    </block>
[00:48:12.490]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.490]      // if-block "protType == 1"
[00:48:12.491]        // =>  FALSE
[00:48:12.491]      // skip if-block "protType == 1"
[00:48:12.491]    </control>
[00:48:12.491]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.491]      // if-block "protType == 2"
[00:48:12.491]        // =>  TRUE
[00:48:12.491]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.491]        // if-block "isSWJ"
[00:48:12.491]          // =>  TRUE
[00:48:12.491]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.492]          // if-block "hasDormant"
[00:48:12.492]            // =>  FALSE
[00:48:12.492]          // skip if-block "hasDormant"
[00:48:12.492]        </control>
[00:48:12.492]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.492]          // if-block "!hasDormant"
[00:48:12.492]            // =>  TRUE
[00:48:12.492]          <block atomic="false" info="">
[00:48:12.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.494]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.497]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.498]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.498]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.500]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.502]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.502]          </block>
[00:48:12.502]          // end if-block "!hasDormant"
[00:48:12.502]        </control>
[00:48:12.502]        // end if-block "isSWJ"
[00:48:12.502]      </control>
[00:48:12.502]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.503]        // if-block "!isSWJ"
[00:48:12.503]          // =>  FALSE
[00:48:12.503]        // skip if-block "!isSWJ"
[00:48:12.503]      </control>
[00:48:12.503]      <block atomic="false" info="">
[00:48:12.503]        ReadDP(0x0);
[00:48:12.505]  
[00:48:12.505]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.505]  
[00:48:12.505]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.505]      </block>
[00:48:12.505]      // end if-block "protType == 2"
[00:48:12.505]    </control>
[00:48:12.505]  </sequence>
[00:48:12.505]  
[00:48:12.563]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.563]  
[00:48:12.563]  <debugvars>
[00:48:12.563]    // Pre-defined
[00:48:12.563]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.563]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.563]    __dp=0x00000000
[00:48:12.564]    __ap=0x00000000
[00:48:12.564]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.564]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.565]    __FlashAddr=0x00000000
[00:48:12.565]    __FlashLen=0x00000000
[00:48:12.565]    __FlashArg=0x00000000
[00:48:12.565]    __FlashOp=0x00000000
[00:48:12.565]    __Result=0x00000000
[00:48:12.565]  </debugvars>
[00:48:12.565]  
[00:48:12.565]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.565]    <block atomic="false" info="">
[00:48:12.565]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.566]        // -> [isSWJ <= 0x00000001]
[00:48:12.566]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.566]        // -> [hasDormant <= 0x00000000]
[00:48:12.566]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.566]        // -> [protType <= 0x00000002]
[00:48:12.566]    </block>
[00:48:12.566]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.566]      // if-block "protType == 1"
[00:48:12.566]        // =>  FALSE
[00:48:12.567]      // skip if-block "protType == 1"
[00:48:12.567]    </control>
[00:48:12.567]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.567]      // if-block "protType == 2"
[00:48:12.567]        // =>  TRUE
[00:48:12.567]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.567]        // if-block "isSWJ"
[00:48:12.567]          // =>  TRUE
[00:48:12.568]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.568]          // if-block "hasDormant"
[00:48:12.568]            // =>  FALSE
[00:48:12.568]          // skip if-block "hasDormant"
[00:48:12.568]        </control>
[00:48:12.568]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.568]          // if-block "!hasDormant"
[00:48:12.568]            // =>  TRUE
[00:48:12.568]          <block atomic="false" info="">
[00:48:12.568]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.573]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.573]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.579]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.579]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.582]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.585]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.585]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.587]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.588]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.588]          </block>
[00:48:12.588]          // end if-block "!hasDormant"
[00:48:12.588]        </control>
[00:48:12.589]        // end if-block "isSWJ"
[00:48:12.589]      </control>
[00:48:12.589]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.589]        // if-block "!isSWJ"
[00:48:12.589]          // =>  FALSE
[00:48:12.589]        // skip if-block "!isSWJ"
[00:48:12.589]      </control>
[00:48:12.589]      <block atomic="false" info="">
[00:48:12.589]        ReadDP(0x0);
[00:48:12.591]  
[00:48:12.591]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.591]  
[00:48:12.591]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.591]      </block>
[00:48:12.591]      // end if-block "protType == 2"
[00:48:12.591]    </control>
[00:48:12.591]  </sequence>
[00:48:12.591]  
[00:48:12.655]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.655]  
[00:48:12.655]  <debugvars>
[00:48:12.655]    // Pre-defined
[00:48:12.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.655]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.655]    __dp=0x00000000
[00:48:12.655]    __ap=0x00000000
[00:48:12.655]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.656]    __FlashAddr=0x00000000
[00:48:12.656]    __FlashLen=0x00000000
[00:48:12.656]    __FlashArg=0x00000000
[00:48:12.656]    __FlashOp=0x00000000
[00:48:12.656]    __Result=0x00000000
[00:48:12.656]  </debugvars>
[00:48:12.656]  
[00:48:12.656]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.656]    <block atomic="false" info="">
[00:48:12.657]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.657]        // -> [isSWJ <= 0x00000001]
[00:48:12.657]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.657]        // -> [hasDormant <= 0x00000000]
[00:48:12.657]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.657]        // -> [protType <= 0x00000002]
[00:48:12.657]    </block>
[00:48:12.657]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.657]      // if-block "protType == 1"
[00:48:12.657]        // =>  FALSE
[00:48:12.658]      // skip if-block "protType == 1"
[00:48:12.658]    </control>
[00:48:12.658]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.658]      // if-block "protType == 2"
[00:48:12.658]        // =>  TRUE
[00:48:12.658]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.658]        // if-block "isSWJ"
[00:48:12.658]          // =>  TRUE
[00:48:12.659]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.659]          // if-block "hasDormant"
[00:48:12.659]            // =>  FALSE
[00:48:12.659]          // skip if-block "hasDormant"
[00:48:12.659]        </control>
[00:48:12.659]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.659]          // if-block "!hasDormant"
[00:48:12.660]            // =>  TRUE
[00:48:12.660]          <block atomic="false" info="">
[00:48:12.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.666]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.669]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.670]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.672]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.672]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.675]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.675]          </block>
[00:48:12.675]          // end if-block "!hasDormant"
[00:48:12.675]        </control>
[00:48:12.675]        // end if-block "isSWJ"
[00:48:12.675]      </control>
[00:48:12.675]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.676]        // if-block "!isSWJ"
[00:48:12.676]          // =>  FALSE
[00:48:12.676]        // skip if-block "!isSWJ"
[00:48:12.676]      </control>
[00:48:12.676]      <block atomic="false" info="">
[00:48:12.676]        ReadDP(0x0);
[00:48:12.678]  
[00:48:12.678]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.678]  
[00:48:12.678]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.678]      </block>
[00:48:12.678]      // end if-block "protType == 2"
[00:48:12.679]    </control>
[00:48:12.679]  </sequence>
[00:48:12.679]  
[00:48:12.731]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.731]  
[00:48:12.731]  <debugvars>
[00:48:12.732]    // Pre-defined
[00:48:12.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.732]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.732]    __dp=0x00000000
[00:48:12.732]    __ap=0x00000000
[00:48:12.732]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.732]    __FlashAddr=0x00000000
[00:48:12.732]    __FlashLen=0x00000000
[00:48:12.732]    __FlashArg=0x00000000
[00:48:12.733]    __FlashOp=0x00000000
[00:48:12.733]    __Result=0x00000000
[00:48:12.733]  </debugvars>
[00:48:12.733]  
[00:48:12.733]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.733]    <block atomic="false" info="">
[00:48:12.733]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.733]        // -> [isSWJ <= 0x00000001]
[00:48:12.733]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.734]        // -> [hasDormant <= 0x00000000]
[00:48:12.734]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.734]        // -> [protType <= 0x00000002]
[00:48:12.734]    </block>
[00:48:12.734]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.734]      // if-block "protType == 1"
[00:48:12.734]        // =>  FALSE
[00:48:12.734]      // skip if-block "protType == 1"
[00:48:12.734]    </control>
[00:48:12.735]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.735]      // if-block "protType == 2"
[00:48:12.735]        // =>  TRUE
[00:48:12.735]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.735]        // if-block "isSWJ"
[00:48:12.735]          // =>  TRUE
[00:48:12.735]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.735]          // if-block "hasDormant"
[00:48:12.735]            // =>  FALSE
[00:48:12.735]          // skip if-block "hasDormant"
[00:48:12.736]        </control>
[00:48:12.736]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.736]          // if-block "!hasDormant"
[00:48:12.736]            // =>  TRUE
[00:48:12.736]          <block atomic="false" info="">
[00:48:12.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.738]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.741]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.743]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.745]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.747]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.754]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.754]          </block>
[00:48:12.754]          // end if-block "!hasDormant"
[00:48:12.754]        </control>
[00:48:12.755]        // end if-block "isSWJ"
[00:48:12.755]      </control>
[00:48:12.755]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.755]        // if-block "!isSWJ"
[00:48:12.755]          // =>  FALSE
[00:48:12.755]        // skip if-block "!isSWJ"
[00:48:12.755]      </control>
[00:48:12.755]      <block atomic="false" info="">
[00:48:12.755]        ReadDP(0x0);
[00:48:12.756]  
[00:48:12.756]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.756]  
[00:48:12.756]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.757]      </block>
[00:48:12.757]      // end if-block "protType == 2"
[00:48:12.757]    </control>
[00:48:12.757]  </sequence>
[00:48:12.757]  
[00:48:12.821]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.821]  
[00:48:12.821]  <debugvars>
[00:48:12.821]    // Pre-defined
[00:48:12.821]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.821]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.821]    __dp=0x00000000
[00:48:12.822]    __ap=0x00000000
[00:48:12.822]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.822]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.822]    __FlashAddr=0x00000000
[00:48:12.822]    __FlashLen=0x00000000
[00:48:12.822]    __FlashArg=0x00000000
[00:48:12.822]    __FlashOp=0x00000000
[00:48:12.822]    __Result=0x00000000
[00:48:12.822]  </debugvars>
[00:48:12.822]  
[00:48:12.823]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.823]    <block atomic="false" info="">
[00:48:12.823]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.823]        // -> [isSWJ <= 0x00000001]
[00:48:12.823]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.823]        // -> [hasDormant <= 0x00000000]
[00:48:12.823]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.823]        // -> [protType <= 0x00000002]
[00:48:12.823]    </block>
[00:48:12.824]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.824]      // if-block "protType == 1"
[00:48:12.824]        // =>  FALSE
[00:48:12.824]      // skip if-block "protType == 1"
[00:48:12.824]    </control>
[00:48:12.824]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.824]      // if-block "protType == 2"
[00:48:12.824]        // =>  TRUE
[00:48:12.825]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.825]        // if-block "isSWJ"
[00:48:12.825]          // =>  TRUE
[00:48:12.825]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.825]          // if-block "hasDormant"
[00:48:12.825]            // =>  FALSE
[00:48:12.825]          // skip if-block "hasDormant"
[00:48:12.825]        </control>
[00:48:12.825]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.825]          // if-block "!hasDormant"
[00:48:12.827]            // =>  TRUE
[00:48:12.827]          <block atomic="false" info="">
[00:48:12.827]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.828]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.833]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.835]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.835]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.841]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.842]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.843]          </block>
[00:48:12.843]          // end if-block "!hasDormant"
[00:48:12.843]        </control>
[00:48:12.843]        // end if-block "isSWJ"
[00:48:12.843]      </control>
[00:48:12.843]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.843]        // if-block "!isSWJ"
[00:48:12.843]          // =>  FALSE
[00:48:12.843]        // skip if-block "!isSWJ"
[00:48:12.843]      </control>
[00:48:12.843]      <block atomic="false" info="">
[00:48:12.844]        ReadDP(0x0);
[00:48:12.845]  
[00:48:12.845]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.845]  
[00:48:12.846]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.846]      </block>
[00:48:12.846]      // end if-block "protType == 2"
[00:48:12.846]    </control>
[00:48:12.846]  </sequence>
[00:48:12.846]  
[00:48:12.897]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.897]  
[00:48:12.897]  <debugvars>
[00:48:12.897]    // Pre-defined
[00:48:12.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.897]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.899]    __dp=0x00000000
[00:48:12.899]    __ap=0x00000000
[00:48:12.899]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.899]    __FlashAddr=0x00000000
[00:48:12.899]    __FlashLen=0x00000000
[00:48:12.899]    __FlashArg=0x00000000
[00:48:12.899]    __FlashOp=0x00000000
[00:48:12.899]    __Result=0x00000000
[00:48:12.899]  </debugvars>
[00:48:12.899]  
[00:48:12.899]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.899]    <block atomic="false" info="">
[00:48:12.899]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.900]        // -> [isSWJ <= 0x00000001]
[00:48:12.900]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.900]        // -> [hasDormant <= 0x00000000]
[00:48:12.900]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.900]        // -> [protType <= 0x00000002]
[00:48:12.900]    </block>
[00:48:12.900]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.900]      // if-block "protType == 1"
[00:48:12.900]        // =>  FALSE
[00:48:12.900]      // skip if-block "protType == 1"
[00:48:12.900]    </control>
[00:48:12.900]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.900]      // if-block "protType == 2"
[00:48:12.902]        // =>  TRUE
[00:48:12.902]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.902]        // if-block "isSWJ"
[00:48:12.902]          // =>  TRUE
[00:48:12.902]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.902]          // if-block "hasDormant"
[00:48:12.902]            // =>  FALSE
[00:48:12.902]          // skip if-block "hasDormant"
[00:48:12.902]        </control>
[00:48:12.902]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.902]          // if-block "!hasDormant"
[00:48:12.903]            // =>  TRUE
[00:48:12.903]          <block atomic="false" info="">
[00:48:12.903]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.905]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.907]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.907]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.909]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.910]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.912]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.915]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.915]          </block>
[00:48:12.915]          // end if-block "!hasDormant"
[00:48:12.915]        </control>
[00:48:12.915]        // end if-block "isSWJ"
[00:48:12.915]      </control>
[00:48:12.915]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.915]        // if-block "!isSWJ"
[00:48:12.915]          // =>  FALSE
[00:48:12.915]        // skip if-block "!isSWJ"
[00:48:12.916]      </control>
[00:48:12.916]      <block atomic="false" info="">
[00:48:12.916]        ReadDP(0x0);
[00:48:12.918]  
[00:48:12.918]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.918]  
[00:48:12.919]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.919]      </block>
[00:48:12.919]      // end if-block "protType == 2"
[00:48:12.919]    </control>
[00:48:12.919]  </sequence>
[00:48:12.919]  
[00:48:12.974]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:12.974]  
[00:48:12.974]  <debugvars>
[00:48:12.974]    // Pre-defined
[00:48:12.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:12.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:12.974]    __dp=0x00000000
[00:48:12.974]    __ap=0x00000000
[00:48:12.975]    __traceout=0x00000000      (Trace Disabled)
[00:48:12.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:12.975]    __FlashAddr=0x00000000
[00:48:12.975]    __FlashLen=0x00000000
[00:48:12.975]    __FlashArg=0x00000000
[00:48:12.975]    __FlashOp=0x00000000
[00:48:12.975]    __Result=0x00000000
[00:48:12.975]  </debugvars>
[00:48:12.975]  
[00:48:12.975]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:12.976]    <block atomic="false" info="">
[00:48:12.976]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:12.976]        // -> [isSWJ <= 0x00000001]
[00:48:12.976]      __var hasDormant = __protocol & 0x00020000;
[00:48:12.976]        // -> [hasDormant <= 0x00000000]
[00:48:12.976]      __var protType   = __protocol & 0x0000FFFF;
[00:48:12.976]        // -> [protType <= 0x00000002]
[00:48:12.977]    </block>
[00:48:12.977]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:12.977]      // if-block "protType == 1"
[00:48:12.977]        // =>  FALSE
[00:48:12.977]      // skip if-block "protType == 1"
[00:48:12.977]    </control>
[00:48:12.977]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:12.977]      // if-block "protType == 2"
[00:48:12.978]        // =>  TRUE
[00:48:12.978]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:12.978]        // if-block "isSWJ"
[00:48:12.978]          // =>  TRUE
[00:48:12.978]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:12.978]          // if-block "hasDormant"
[00:48:12.978]            // =>  FALSE
[00:48:12.979]          // skip if-block "hasDormant"
[00:48:12.979]        </control>
[00:48:12.979]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:12.979]          // if-block "!hasDormant"
[00:48:12.979]            // =>  TRUE
[00:48:12.979]          <block atomic="false" info="">
[00:48:12.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:12.982]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.982]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:12.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:12.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:12.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.986]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:12.987]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:12.987]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:12.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:12.990]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:12.991]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:12.991]          </block>
[00:48:12.991]          // end if-block "!hasDormant"
[00:48:12.991]        </control>
[00:48:12.991]        // end if-block "isSWJ"
[00:48:12.991]      </control>
[00:48:12.992]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:12.992]        // if-block "!isSWJ"
[00:48:12.992]          // =>  FALSE
[00:48:12.992]        // skip if-block "!isSWJ"
[00:48:12.992]      </control>
[00:48:12.992]      <block atomic="false" info="">
[00:48:12.992]        ReadDP(0x0);
[00:48:12.994]  
[00:48:12.994]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:12.994]  
[00:48:12.994]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:12.994]      </block>
[00:48:12.995]      // end if-block "protType == 2"
[00:48:12.995]    </control>
[00:48:12.995]  </sequence>
[00:48:12.995]  
[00:48:13.052]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.052]  
[00:48:13.052]  <debugvars>
[00:48:13.052]    // Pre-defined
[00:48:13.052]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.052]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.052]    __dp=0x00000000
[00:48:13.052]    __ap=0x00000000
[00:48:13.052]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.052]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.053]    __FlashAddr=0x00000000
[00:48:13.053]    __FlashLen=0x00000000
[00:48:13.053]    __FlashArg=0x00000000
[00:48:13.053]    __FlashOp=0x00000000
[00:48:13.053]    __Result=0x00000000
[00:48:13.053]  </debugvars>
[00:48:13.053]  
[00:48:13.053]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.053]    <block atomic="false" info="">
[00:48:13.053]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.054]        // -> [isSWJ <= 0x00000001]
[00:48:13.054]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.054]        // -> [hasDormant <= 0x00000000]
[00:48:13.054]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.054]        // -> [protType <= 0x00000002]
[00:48:13.054]    </block>
[00:48:13.055]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.055]      // if-block "protType == 1"
[00:48:13.055]        // =>  FALSE
[00:48:13.055]      // skip if-block "protType == 1"
[00:48:13.055]    </control>
[00:48:13.055]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.055]      // if-block "protType == 2"
[00:48:13.055]        // =>  TRUE
[00:48:13.055]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.055]        // if-block "isSWJ"
[00:48:13.056]          // =>  TRUE
[00:48:13.056]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.056]          // if-block "hasDormant"
[00:48:13.056]            // =>  FALSE
[00:48:13.056]          // skip if-block "hasDormant"
[00:48:13.056]        </control>
[00:48:13.056]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.056]          // if-block "!hasDormant"
[00:48:13.056]            // =>  TRUE
[00:48:13.057]          <block atomic="false" info="">
[00:48:13.057]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.058]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.058]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.060]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.061]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.064]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.064]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.066]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.066]          </block>
[00:48:13.066]          // end if-block "!hasDormant"
[00:48:13.066]        </control>
[00:48:13.066]        // end if-block "isSWJ"
[00:48:13.066]      </control>
[00:48:13.066]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.066]        // if-block "!isSWJ"
[00:48:13.067]          // =>  FALSE
[00:48:13.067]        // skip if-block "!isSWJ"
[00:48:13.067]      </control>
[00:48:13.067]      <block atomic="false" info="">
[00:48:13.067]        ReadDP(0x0);
[00:48:13.068]  
[00:48:13.068]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.068]  
[00:48:13.068]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.068]      </block>
[00:48:13.068]      // end if-block "protType == 2"
[00:48:13.068]    </control>
[00:48:13.068]  </sequence>
[00:48:13.069]  
[00:48:13.127]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.127]  
[00:48:13.127]  <debugvars>
[00:48:13.127]    // Pre-defined
[00:48:13.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.127]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.127]    __dp=0x00000000
[00:48:13.127]    __ap=0x00000000
[00:48:13.127]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.128]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.128]    __FlashAddr=0x00000000
[00:48:13.128]    __FlashLen=0x00000000
[00:48:13.128]    __FlashArg=0x00000000
[00:48:13.128]    __FlashOp=0x00000000
[00:48:13.128]    __Result=0x00000000
[00:48:13.128]  </debugvars>
[00:48:13.128]  
[00:48:13.128]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.128]    <block atomic="false" info="">
[00:48:13.128]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.129]        // -> [isSWJ <= 0x00000001]
[00:48:13.129]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.129]        // -> [hasDormant <= 0x00000000]
[00:48:13.129]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.129]        // -> [protType <= 0x00000002]
[00:48:13.129]    </block>
[00:48:13.129]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.129]      // if-block "protType == 1"
[00:48:13.129]        // =>  FALSE
[00:48:13.129]      // skip if-block "protType == 1"
[00:48:13.130]    </control>
[00:48:13.130]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.130]      // if-block "protType == 2"
[00:48:13.130]        // =>  TRUE
[00:48:13.130]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.130]        // if-block "isSWJ"
[00:48:13.130]          // =>  TRUE
[00:48:13.130]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.130]          // if-block "hasDormant"
[00:48:13.130]            // =>  FALSE
[00:48:13.130]          // skip if-block "hasDormant"
[00:48:13.131]        </control>
[00:48:13.131]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.131]          // if-block "!hasDormant"
[00:48:13.131]            // =>  TRUE
[00:48:13.131]          <block atomic="false" info="">
[00:48:13.131]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.132]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.132]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.135]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.140]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.141]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.146]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.148]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.148]          </block>
[00:48:13.148]          // end if-block "!hasDormant"
[00:48:13.148]        </control>
[00:48:13.148]        // end if-block "isSWJ"
[00:48:13.148]      </control>
[00:48:13.148]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.148]        // if-block "!isSWJ"
[00:48:13.148]          // =>  FALSE
[00:48:13.149]        // skip if-block "!isSWJ"
[00:48:13.149]      </control>
[00:48:13.149]      <block atomic="false" info="">
[00:48:13.149]        ReadDP(0x0);
[00:48:13.151]  
[00:48:13.151]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.151]  
[00:48:13.151]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.151]      </block>
[00:48:13.151]      // end if-block "protType == 2"
[00:48:13.151]    </control>
[00:48:13.151]  </sequence>
[00:48:13.151]  
[00:48:13.202]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.202]  
[00:48:13.202]  <debugvars>
[00:48:13.202]    // Pre-defined
[00:48:13.202]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.202]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.202]    __dp=0x00000000
[00:48:13.202]    __ap=0x00000000
[00:48:13.202]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.202]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.203]    __FlashAddr=0x00000000
[00:48:13.203]    __FlashLen=0x00000000
[00:48:13.203]    __FlashArg=0x00000000
[00:48:13.203]    __FlashOp=0x00000000
[00:48:13.203]    __Result=0x00000000
[00:48:13.203]  </debugvars>
[00:48:13.203]  
[00:48:13.203]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.203]    <block atomic="false" info="">
[00:48:13.203]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.204]        // -> [isSWJ <= 0x00000001]
[00:48:13.204]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.204]        // -> [hasDormant <= 0x00000000]
[00:48:13.204]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.204]        // -> [protType <= 0x00000002]
[00:48:13.204]    </block>
[00:48:13.204]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.205]      // if-block "protType == 1"
[00:48:13.205]        // =>  FALSE
[00:48:13.205]      // skip if-block "protType == 1"
[00:48:13.205]    </control>
[00:48:13.205]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.205]      // if-block "protType == 2"
[00:48:13.205]        // =>  TRUE
[00:48:13.206]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.206]        // if-block "isSWJ"
[00:48:13.206]          // =>  TRUE
[00:48:13.206]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.206]          // if-block "hasDormant"
[00:48:13.206]            // =>  FALSE
[00:48:13.206]          // skip if-block "hasDormant"
[00:48:13.207]        </control>
[00:48:13.207]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.207]          // if-block "!hasDormant"
[00:48:13.207]            // =>  TRUE
[00:48:13.207]          <block atomic="false" info="">
[00:48:13.207]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.209]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.209]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.211]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.218]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.222]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.223]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.223]          </block>
[00:48:13.224]          // end if-block "!hasDormant"
[00:48:13.224]        </control>
[00:48:13.224]        // end if-block "isSWJ"
[00:48:13.224]      </control>
[00:48:13.224]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.224]        // if-block "!isSWJ"
[00:48:13.224]          // =>  FALSE
[00:48:13.224]        // skip if-block "!isSWJ"
[00:48:13.224]      </control>
[00:48:13.224]      <block atomic="false" info="">
[00:48:13.225]        ReadDP(0x0);
[00:48:13.226]  
[00:48:13.226]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.226]  
[00:48:13.227]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.227]      </block>
[00:48:13.227]      // end if-block "protType == 2"
[00:48:13.227]    </control>
[00:48:13.227]  </sequence>
[00:48:13.227]  
[00:48:13.278]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.278]  
[00:48:13.278]  <debugvars>
[00:48:13.278]    // Pre-defined
[00:48:13.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.278]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.278]    __dp=0x00000000
[00:48:13.278]    __ap=0x00000000
[00:48:13.279]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.279]    __FlashAddr=0x00000000
[00:48:13.279]    __FlashLen=0x00000000
[00:48:13.279]    __FlashArg=0x00000000
[00:48:13.279]    __FlashOp=0x00000000
[00:48:13.279]    __Result=0x00000000
[00:48:13.279]  </debugvars>
[00:48:13.280]  
[00:48:13.280]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.280]    <block atomic="false" info="">
[00:48:13.280]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.280]        // -> [isSWJ <= 0x00000001]
[00:48:13.280]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.280]        // -> [hasDormant <= 0x00000000]
[00:48:13.280]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.280]        // -> [protType <= 0x00000002]
[00:48:13.280]    </block>
[00:48:13.281]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.281]      // if-block "protType == 1"
[00:48:13.281]        // =>  FALSE
[00:48:13.281]      // skip if-block "protType == 1"
[00:48:13.281]    </control>
[00:48:13.281]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.281]      // if-block "protType == 2"
[00:48:13.281]        // =>  TRUE
[00:48:13.282]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.282]        // if-block "isSWJ"
[00:48:13.282]          // =>  TRUE
[00:48:13.282]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.282]          // if-block "hasDormant"
[00:48:13.282]            // =>  FALSE
[00:48:13.282]          // skip if-block "hasDormant"
[00:48:13.283]        </control>
[00:48:13.283]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.283]          // if-block "!hasDormant"
[00:48:13.283]            // =>  TRUE
[00:48:13.283]          <block atomic="false" info="">
[00:48:13.283]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.285]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.289]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.289]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.293]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.295]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.295]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.298]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.298]          </block>
[00:48:13.298]          // end if-block "!hasDormant"
[00:48:13.299]        </control>
[00:48:13.299]        // end if-block "isSWJ"
[00:48:13.299]      </control>
[00:48:13.299]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.299]        // if-block "!isSWJ"
[00:48:13.299]          // =>  FALSE
[00:48:13.299]        // skip if-block "!isSWJ"
[00:48:13.299]      </control>
[00:48:13.299]      <block atomic="false" info="">
[00:48:13.299]        ReadDP(0x0);
[00:48:13.302]  
[00:48:13.302]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.302]  
[00:48:13.303]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.303]      </block>
[00:48:13.303]      // end if-block "protType == 2"
[00:48:13.303]    </control>
[00:48:13.303]  </sequence>
[00:48:13.303]  
[00:48:13.353]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.353]  
[00:48:13.354]  <debugvars>
[00:48:13.354]    // Pre-defined
[00:48:13.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.354]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.354]    __dp=0x00000000
[00:48:13.354]    __ap=0x00000000
[00:48:13.354]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.354]    __FlashAddr=0x00000000
[00:48:13.354]    __FlashLen=0x00000000
[00:48:13.354]    __FlashArg=0x00000000
[00:48:13.354]    __FlashOp=0x00000000
[00:48:13.355]    __Result=0x00000000
[00:48:13.355]  </debugvars>
[00:48:13.355]  
[00:48:13.355]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.355]    <block atomic="false" info="">
[00:48:13.355]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.355]        // -> [isSWJ <= 0x00000001]
[00:48:13.355]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.355]        // -> [hasDormant <= 0x00000000]
[00:48:13.355]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.356]        // -> [protType <= 0x00000002]
[00:48:13.356]    </block>
[00:48:13.356]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.356]      // if-block "protType == 1"
[00:48:13.356]        // =>  FALSE
[00:48:13.356]      // skip if-block "protType == 1"
[00:48:13.356]    </control>
[00:48:13.356]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.357]      // if-block "protType == 2"
[00:48:13.357]        // =>  TRUE
[00:48:13.357]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.357]        // if-block "isSWJ"
[00:48:13.357]          // =>  TRUE
[00:48:13.357]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.358]          // if-block "hasDormant"
[00:48:13.358]            // =>  FALSE
[00:48:13.358]          // skip if-block "hasDormant"
[00:48:13.358]        </control>
[00:48:13.358]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.358]          // if-block "!hasDormant"
[00:48:13.358]            // =>  TRUE
[00:48:13.358]          <block atomic="false" info="">
[00:48:13.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.361]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.363]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.368]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.368]          </block>
[00:48:13.369]          // end if-block "!hasDormant"
[00:48:13.369]        </control>
[00:48:13.369]        // end if-block "isSWJ"
[00:48:13.369]      </control>
[00:48:13.369]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.369]        // if-block "!isSWJ"
[00:48:13.369]          // =>  FALSE
[00:48:13.370]        // skip if-block "!isSWJ"
[00:48:13.370]      </control>
[00:48:13.370]      <block atomic="false" info="">
[00:48:13.370]        ReadDP(0x0);
[00:48:13.371]  
[00:48:13.371]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.371]  
[00:48:13.372]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.372]      </block>
[00:48:13.372]      // end if-block "protType == 2"
[00:48:13.372]    </control>
[00:48:13.372]  </sequence>
[00:48:13.372]  
[00:48:13.427]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.427]  
[00:48:13.427]  <debugvars>
[00:48:13.427]    // Pre-defined
[00:48:13.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.427]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.429]    __dp=0x00000000
[00:48:13.429]    __ap=0x00000000
[00:48:13.429]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.429]    __FlashAddr=0x00000000
[00:48:13.429]    __FlashLen=0x00000000
[00:48:13.429]    __FlashArg=0x00000000
[00:48:13.429]    __FlashOp=0x00000000
[00:48:13.429]    __Result=0x00000000
[00:48:13.429]  </debugvars>
[00:48:13.430]  
[00:48:13.430]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.430]    <block atomic="false" info="">
[00:48:13.430]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.430]        // -> [isSWJ <= 0x00000001]
[00:48:13.430]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.430]        // -> [hasDormant <= 0x00000000]
[00:48:13.430]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.430]        // -> [protType <= 0x00000002]
[00:48:13.430]    </block>
[00:48:13.431]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.431]      // if-block "protType == 1"
[00:48:13.431]        // =>  FALSE
[00:48:13.431]      // skip if-block "protType == 1"
[00:48:13.431]    </control>
[00:48:13.431]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.431]      // if-block "protType == 2"
[00:48:13.431]        // =>  TRUE
[00:48:13.432]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.432]        // if-block "isSWJ"
[00:48:13.432]          // =>  TRUE
[00:48:13.432]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.432]          // if-block "hasDormant"
[00:48:13.432]            // =>  FALSE
[00:48:13.432]          // skip if-block "hasDormant"
[00:48:13.432]        </control>
[00:48:13.432]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.432]          // if-block "!hasDormant"
[00:48:13.433]            // =>  TRUE
[00:48:13.433]          <block atomic="false" info="">
[00:48:13.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.434]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.435]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.438]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.438]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.440]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.440]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.442]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.447]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.447]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.449]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.449]          </block>
[00:48:13.449]          // end if-block "!hasDormant"
[00:48:13.449]        </control>
[00:48:13.449]        // end if-block "isSWJ"
[00:48:13.449]      </control>
[00:48:13.449]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.449]        // if-block "!isSWJ"
[00:48:13.449]          // =>  FALSE
[00:48:13.449]        // skip if-block "!isSWJ"
[00:48:13.449]      </control>
[00:48:13.449]      <block atomic="false" info="">
[00:48:13.449]        ReadDP(0x0);
[00:48:13.454]  
[00:48:13.454]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.454]  
[00:48:13.454]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.454]      </block>
[00:48:13.455]      // end if-block "protType == 2"
[00:48:13.455]    </control>
[00:48:13.455]  </sequence>
[00:48:13.455]  
[00:48:13.519]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.519]  
[00:48:13.519]  <debugvars>
[00:48:13.519]    // Pre-defined
[00:48:13.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.519]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.519]    __dp=0x00000000
[00:48:13.519]    __ap=0x00000000
[00:48:13.521]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.521]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.521]    __FlashAddr=0x00000000
[00:48:13.521]    __FlashLen=0x00000000
[00:48:13.521]    __FlashArg=0x00000000
[00:48:13.521]    __FlashOp=0x00000000
[00:48:13.522]    __Result=0x00000000
[00:48:13.522]  </debugvars>
[00:48:13.522]  
[00:48:13.522]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.522]    <block atomic="false" info="">
[00:48:13.522]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.522]        // -> [isSWJ <= 0x00000001]
[00:48:13.522]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.522]        // -> [hasDormant <= 0x00000000]
[00:48:13.523]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.523]        // -> [protType <= 0x00000002]
[00:48:13.523]    </block>
[00:48:13.523]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.523]      // if-block "protType == 1"
[00:48:13.523]        // =>  FALSE
[00:48:13.523]      // skip if-block "protType == 1"
[00:48:13.523]    </control>
[00:48:13.523]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.523]      // if-block "protType == 2"
[00:48:13.524]        // =>  TRUE
[00:48:13.524]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.524]        // if-block "isSWJ"
[00:48:13.524]          // =>  TRUE
[00:48:13.524]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.524]          // if-block "hasDormant"
[00:48:13.524]            // =>  FALSE
[00:48:13.524]          // skip if-block "hasDormant"
[00:48:13.524]        </control>
[00:48:13.525]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.525]          // if-block "!hasDormant"
[00:48:13.525]            // =>  TRUE
[00:48:13.525]          <block atomic="false" info="">
[00:48:13.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.529]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.529]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.531]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.534]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.537]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.537]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.541]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.542]          </block>
[00:48:13.542]          // end if-block "!hasDormant"
[00:48:13.542]        </control>
[00:48:13.542]        // end if-block "isSWJ"
[00:48:13.542]      </control>
[00:48:13.542]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.542]        // if-block "!isSWJ"
[00:48:13.543]          // =>  FALSE
[00:48:13.543]        // skip if-block "!isSWJ"
[00:48:13.543]      </control>
[00:48:13.543]      <block atomic="false" info="">
[00:48:13.543]        ReadDP(0x0);
[00:48:13.549]  
[00:48:13.549]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.549]  
[00:48:13.549]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.549]      </block>
[00:48:13.549]      // end if-block "protType == 2"
[00:48:13.549]    </control>
[00:48:13.549]  </sequence>
[00:48:13.549]  
[00:48:13.612]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.612]  
[00:48:13.613]  <debugvars>
[00:48:13.613]    // Pre-defined
[00:48:13.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.613]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.613]    __dp=0x00000000
[00:48:13.613]    __ap=0x00000000
[00:48:13.613]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.614]    __FlashAddr=0x00000000
[00:48:13.614]    __FlashLen=0x00000000
[00:48:13.614]    __FlashArg=0x00000000
[00:48:13.614]    __FlashOp=0x00000000
[00:48:13.614]    __Result=0x00000000
[00:48:13.614]  </debugvars>
[00:48:13.614]  
[00:48:13.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.615]    <block atomic="false" info="">
[00:48:13.615]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.615]        // -> [isSWJ <= 0x00000001]
[00:48:13.615]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.615]        // -> [hasDormant <= 0x00000000]
[00:48:13.615]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.615]        // -> [protType <= 0x00000002]
[00:48:13.615]    </block>
[00:48:13.615]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.615]      // if-block "protType == 1"
[00:48:13.616]        // =>  FALSE
[00:48:13.616]      // skip if-block "protType == 1"
[00:48:13.616]    </control>
[00:48:13.616]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.616]      // if-block "protType == 2"
[00:48:13.616]        // =>  TRUE
[00:48:13.616]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.616]        // if-block "isSWJ"
[00:48:13.616]          // =>  TRUE
[00:48:13.616]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.617]          // if-block "hasDormant"
[00:48:13.617]            // =>  FALSE
[00:48:13.617]          // skip if-block "hasDormant"
[00:48:13.617]        </control>
[00:48:13.617]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.617]          // if-block "!hasDormant"
[00:48:13.617]            // =>  TRUE
[00:48:13.617]          <block atomic="false" info="">
[00:48:13.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.619]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.622]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.624]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.624]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.626]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.627]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.627]          </block>
[00:48:13.627]          // end if-block "!hasDormant"
[00:48:13.627]        </control>
[00:48:13.628]        // end if-block "isSWJ"
[00:48:13.628]      </control>
[00:48:13.628]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.628]        // if-block "!isSWJ"
[00:48:13.628]          // =>  FALSE
[00:48:13.628]        // skip if-block "!isSWJ"
[00:48:13.628]      </control>
[00:48:13.628]      <block atomic="false" info="">
[00:48:13.628]        ReadDP(0x0);
[00:48:13.631]  
[00:48:13.631]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.631]  
[00:48:13.631]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.631]      </block>
[00:48:13.631]      // end if-block "protType == 2"
[00:48:13.632]    </control>
[00:48:13.632]  </sequence>
[00:48:13.632]  
[00:48:13.688]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.688]  
[00:48:13.688]  <debugvars>
[00:48:13.688]    // Pre-defined
[00:48:13.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.689]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.689]    __dp=0x00000000
[00:48:13.689]    __ap=0x00000000
[00:48:13.689]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.689]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.689]    __FlashAddr=0x00000000
[00:48:13.689]    __FlashLen=0x00000000
[00:48:13.689]    __FlashArg=0x00000000
[00:48:13.690]    __FlashOp=0x00000000
[00:48:13.690]    __Result=0x00000000
[00:48:13.690]  </debugvars>
[00:48:13.690]  
[00:48:13.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.691]    <block atomic="false" info="">
[00:48:13.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.691]        // -> [isSWJ <= 0x00000001]
[00:48:13.691]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.691]        // -> [hasDormant <= 0x00000000]
[00:48:13.691]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.691]        // -> [protType <= 0x00000002]
[00:48:13.691]    </block>
[00:48:13.692]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.692]      // if-block "protType == 1"
[00:48:13.692]        // =>  FALSE
[00:48:13.692]      // skip if-block "protType == 1"
[00:48:13.692]    </control>
[00:48:13.692]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.692]      // if-block "protType == 2"
[00:48:13.692]        // =>  TRUE
[00:48:13.693]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.693]        // if-block "isSWJ"
[00:48:13.693]          // =>  TRUE
[00:48:13.693]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.693]          // if-block "hasDormant"
[00:48:13.693]            // =>  FALSE
[00:48:13.693]          // skip if-block "hasDormant"
[00:48:13.693]        </control>
[00:48:13.693]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.693]          // if-block "!hasDormant"
[00:48:13.694]            // =>  TRUE
[00:48:13.694]          <block atomic="false" info="">
[00:48:13.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.696]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.697]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.699]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.703]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.709]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.709]          </block>
[00:48:13.710]          // end if-block "!hasDormant"
[00:48:13.710]        </control>
[00:48:13.710]        // end if-block "isSWJ"
[00:48:13.710]      </control>
[00:48:13.710]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.710]        // if-block "!isSWJ"
[00:48:13.710]          // =>  FALSE
[00:48:13.710]        // skip if-block "!isSWJ"
[00:48:13.710]      </control>
[00:48:13.711]      <block atomic="false" info="">
[00:48:13.711]        ReadDP(0x0);
[00:48:13.712]  
[00:48:13.712]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.712]  
[00:48:13.712]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.712]      </block>
[00:48:13.713]      // end if-block "protType == 2"
[00:48:13.713]    </control>
[00:48:13.713]  </sequence>
[00:48:13.713]  
[00:48:13.763]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.763]  
[00:48:13.763]  <debugvars>
[00:48:13.763]    // Pre-defined
[00:48:13.764]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.764]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.764]    __dp=0x00000000
[00:48:13.764]    __ap=0x00000000
[00:48:13.764]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.764]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.764]    __FlashAddr=0x00000000
[00:48:13.764]    __FlashLen=0x00000000
[00:48:13.764]    __FlashArg=0x00000000
[00:48:13.765]    __FlashOp=0x00000000
[00:48:13.765]    __Result=0x00000000
[00:48:13.765]  </debugvars>
[00:48:13.765]  
[00:48:13.765]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.765]    <block atomic="false" info="">
[00:48:13.765]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.765]        // -> [isSWJ <= 0x00000001]
[00:48:13.765]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.765]        // -> [hasDormant <= 0x00000000]
[00:48:13.766]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.766]        // -> [protType <= 0x00000002]
[00:48:13.766]    </block>
[00:48:13.766]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.766]      // if-block "protType == 1"
[00:48:13.766]        // =>  FALSE
[00:48:13.766]      // skip if-block "protType == 1"
[00:48:13.766]    </control>
[00:48:13.766]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.767]      // if-block "protType == 2"
[00:48:13.767]        // =>  TRUE
[00:48:13.767]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.767]        // if-block "isSWJ"
[00:48:13.767]          // =>  TRUE
[00:48:13.767]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.767]          // if-block "hasDormant"
[00:48:13.767]            // =>  FALSE
[00:48:13.767]          // skip if-block "hasDormant"
[00:48:13.768]        </control>
[00:48:13.768]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.768]          // if-block "!hasDormant"
[00:48:13.768]            // =>  TRUE
[00:48:13.768]          <block atomic="false" info="">
[00:48:13.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.769]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.771]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.775]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.777]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.778]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.779]          </block>
[00:48:13.779]          // end if-block "!hasDormant"
[00:48:13.779]        </control>
[00:48:13.779]        // end if-block "isSWJ"
[00:48:13.779]      </control>
[00:48:13.779]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.779]        // if-block "!isSWJ"
[00:48:13.780]          // =>  FALSE
[00:48:13.780]        // skip if-block "!isSWJ"
[00:48:13.780]      </control>
[00:48:13.780]      <block atomic="false" info="">
[00:48:13.780]        ReadDP(0x0);
[00:48:13.781]  
[00:48:13.781]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.781]  
[00:48:13.782]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.782]      </block>
[00:48:13.782]      // end if-block "protType == 2"
[00:48:13.782]    </control>
[00:48:13.782]  </sequence>
[00:48:13.782]  
[00:48:13.840]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.840]  
[00:48:13.840]  <debugvars>
[00:48:13.840]    // Pre-defined
[00:48:13.840]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.840]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.840]    __dp=0x00000000
[00:48:13.840]    __ap=0x00000000
[00:48:13.840]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.840]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.840]    __FlashAddr=0x00000000
[00:48:13.840]    __FlashLen=0x00000000
[00:48:13.840]    __FlashArg=0x00000000
[00:48:13.840]    __FlashOp=0x00000000
[00:48:13.840]    __Result=0x00000000
[00:48:13.840]  </debugvars>
[00:48:13.840]  
[00:48:13.840]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.840]    <block atomic="false" info="">
[00:48:13.841]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.841]        // -> [isSWJ <= 0x00000001]
[00:48:13.841]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.841]        // -> [hasDormant <= 0x00000000]
[00:48:13.841]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.841]        // -> [protType <= 0x00000002]
[00:48:13.841]    </block>
[00:48:13.841]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.841]      // if-block "protType == 1"
[00:48:13.843]        // =>  FALSE
[00:48:13.843]      // skip if-block "protType == 1"
[00:48:13.843]    </control>
[00:48:13.843]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.843]      // if-block "protType == 2"
[00:48:13.843]        // =>  TRUE
[00:48:13.843]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.843]        // if-block "isSWJ"
[00:48:13.843]          // =>  TRUE
[00:48:13.843]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.843]          // if-block "hasDormant"
[00:48:13.844]            // =>  FALSE
[00:48:13.844]          // skip if-block "hasDormant"
[00:48:13.844]        </control>
[00:48:13.844]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.844]          // if-block "!hasDormant"
[00:48:13.844]            // =>  TRUE
[00:48:13.845]          <block atomic="false" info="">
[00:48:13.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.848]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.850]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.852]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.852]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.856]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.857]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.858]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.862]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.863]          </block>
[00:48:13.863]          // end if-block "!hasDormant"
[00:48:13.863]        </control>
[00:48:13.863]        // end if-block "isSWJ"
[00:48:13.863]      </control>
[00:48:13.863]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.863]        // if-block "!isSWJ"
[00:48:13.864]          // =>  FALSE
[00:48:13.864]        // skip if-block "!isSWJ"
[00:48:13.864]      </control>
[00:48:13.864]      <block atomic="false" info="">
[00:48:13.864]        ReadDP(0x0);
[00:48:13.865]  
[00:48:13.865]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.865]  
[00:48:13.866]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.866]      </block>
[00:48:13.866]      // end if-block "protType == 2"
[00:48:13.866]    </control>
[00:48:13.866]  </sequence>
[00:48:13.866]  
[00:48:13.930]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:13.930]  
[00:48:13.930]  <debugvars>
[00:48:13.930]    // Pre-defined
[00:48:13.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:13.931]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:13.931]    __dp=0x00000000
[00:48:13.931]    __ap=0x00000000
[00:48:13.931]    __traceout=0x00000000      (Trace Disabled)
[00:48:13.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:13.931]    __FlashAddr=0x00000000
[00:48:13.931]    __FlashLen=0x00000000
[00:48:13.931]    __FlashArg=0x00000000
[00:48:13.931]    __FlashOp=0x00000000
[00:48:13.931]    __Result=0x00000000
[00:48:13.931]  </debugvars>
[00:48:13.932]  
[00:48:13.932]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:13.932]    <block atomic="false" info="">
[00:48:13.932]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:13.932]        // -> [isSWJ <= 0x00000001]
[00:48:13.932]      __var hasDormant = __protocol & 0x00020000;
[00:48:13.932]        // -> [hasDormant <= 0x00000000]
[00:48:13.932]      __var protType   = __protocol & 0x0000FFFF;
[00:48:13.933]        // -> [protType <= 0x00000002]
[00:48:13.933]    </block>
[00:48:13.933]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:13.933]      // if-block "protType == 1"
[00:48:13.933]        // =>  FALSE
[00:48:13.933]      // skip if-block "protType == 1"
[00:48:13.933]    </control>
[00:48:13.933]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:13.934]      // if-block "protType == 2"
[00:48:13.934]        // =>  TRUE
[00:48:13.934]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:13.934]        // if-block "isSWJ"
[00:48:13.934]          // =>  TRUE
[00:48:13.934]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:13.934]          // if-block "hasDormant"
[00:48:13.934]            // =>  FALSE
[00:48:13.934]          // skip if-block "hasDormant"
[00:48:13.934]        </control>
[00:48:13.935]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:13.935]          // if-block "!hasDormant"
[00:48:13.935]            // =>  TRUE
[00:48:13.935]          <block atomic="false" info="">
[00:48:13.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:13.938]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.938]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:13.940]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:13.940]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:13.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.945]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:13.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:13.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:13.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:13.951]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:13.952]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:13.952]          </block>
[00:48:13.952]          // end if-block "!hasDormant"
[00:48:13.952]        </control>
[00:48:13.952]        // end if-block "isSWJ"
[00:48:13.952]      </control>
[00:48:13.952]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:13.952]        // if-block "!isSWJ"
[00:48:13.952]          // =>  FALSE
[00:48:13.952]        // skip if-block "!isSWJ"
[00:48:13.952]      </control>
[00:48:13.954]      <block atomic="false" info="">
[00:48:13.954]        ReadDP(0x0);
[00:48:13.958]  
[00:48:13.958]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:13.958]  
[00:48:13.959]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:13.959]      </block>
[00:48:13.959]      // end if-block "protType == 2"
[00:48:13.959]    </control>
[00:48:13.959]  </sequence>
[00:48:13.959]  
[00:48:14.021]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.021]  
[00:48:14.021]  <debugvars>
[00:48:14.021]    // Pre-defined
[00:48:14.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.022]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.022]    __dp=0x00000000
[00:48:14.022]    __ap=0x00000000
[00:48:14.022]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.022]    __FlashAddr=0x00000000
[00:48:14.022]    __FlashLen=0x00000000
[00:48:14.022]    __FlashArg=0x00000000
[00:48:14.022]    __FlashOp=0x00000000
[00:48:14.023]    __Result=0x00000000
[00:48:14.023]  </debugvars>
[00:48:14.023]  
[00:48:14.023]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.023]    <block atomic="false" info="">
[00:48:14.023]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.023]        // -> [isSWJ <= 0x00000001]
[00:48:14.024]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.024]        // -> [hasDormant <= 0x00000000]
[00:48:14.024]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.024]        // -> [protType <= 0x00000002]
[00:48:14.024]    </block>
[00:48:14.024]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.024]      // if-block "protType == 1"
[00:48:14.024]        // =>  FALSE
[00:48:14.024]      // skip if-block "protType == 1"
[00:48:14.024]    </control>
[00:48:14.025]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.025]      // if-block "protType == 2"
[00:48:14.025]        // =>  TRUE
[00:48:14.025]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.025]        // if-block "isSWJ"
[00:48:14.025]          // =>  TRUE
[00:48:14.025]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.025]          // if-block "hasDormant"
[00:48:14.025]            // =>  FALSE
[00:48:14.026]          // skip if-block "hasDormant"
[00:48:14.026]        </control>
[00:48:14.026]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.026]          // if-block "!hasDormant"
[00:48:14.026]            // =>  TRUE
[00:48:14.026]          <block atomic="false" info="">
[00:48:14.026]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.029]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.033]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.033]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.035]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.036]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.036]          </block>
[00:48:14.036]          // end if-block "!hasDormant"
[00:48:14.036]        </control>
[00:48:14.036]        // end if-block "isSWJ"
[00:48:14.036]      </control>
[00:48:14.037]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.037]        // if-block "!isSWJ"
[00:48:14.037]          // =>  FALSE
[00:48:14.037]        // skip if-block "!isSWJ"
[00:48:14.037]      </control>
[00:48:14.037]      <block atomic="false" info="">
[00:48:14.037]        ReadDP(0x0);
[00:48:14.040]  
[00:48:14.040]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.040]  
[00:48:14.041]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.041]      </block>
[00:48:14.041]      // end if-block "protType == 2"
[00:48:14.041]    </control>
[00:48:14.041]  </sequence>
[00:48:14.041]  
[00:48:14.097]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.097]  
[00:48:14.098]  <debugvars>
[00:48:14.098]    // Pre-defined
[00:48:14.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.098]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.098]    __dp=0x00000000
[00:48:14.098]    __ap=0x00000000
[00:48:14.098]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.098]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.098]    __FlashAddr=0x00000000
[00:48:14.098]    __FlashLen=0x00000000
[00:48:14.098]    __FlashArg=0x00000000
[00:48:14.099]    __FlashOp=0x00000000
[00:48:14.099]    __Result=0x00000000
[00:48:14.099]  </debugvars>
[00:48:14.099]  
[00:48:14.099]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.099]    <block atomic="false" info="">
[00:48:14.099]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.099]        // -> [isSWJ <= 0x00000001]
[00:48:14.099]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.099]        // -> [hasDormant <= 0x00000000]
[00:48:14.099]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.099]        // -> [protType <= 0x00000002]
[00:48:14.099]    </block>
[00:48:14.101]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.101]      // if-block "protType == 1"
[00:48:14.101]        // =>  FALSE
[00:48:14.101]      // skip if-block "protType == 1"
[00:48:14.101]    </control>
[00:48:14.101]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.101]      // if-block "protType == 2"
[00:48:14.101]        // =>  TRUE
[00:48:14.101]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.101]        // if-block "isSWJ"
[00:48:14.102]          // =>  TRUE
[00:48:14.102]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.102]          // if-block "hasDormant"
[00:48:14.102]            // =>  FALSE
[00:48:14.102]          // skip if-block "hasDormant"
[00:48:14.102]        </control>
[00:48:14.102]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.102]          // if-block "!hasDormant"
[00:48:14.102]            // =>  TRUE
[00:48:14.102]          <block atomic="false" info="">
[00:48:14.103]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.105]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.112]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.113]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.114]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.117]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.117]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.118]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.118]          </block>
[00:48:14.119]          // end if-block "!hasDormant"
[00:48:14.119]        </control>
[00:48:14.119]        // end if-block "isSWJ"
[00:48:14.119]      </control>
[00:48:14.119]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.119]        // if-block "!isSWJ"
[00:48:14.119]          // =>  FALSE
[00:48:14.119]        // skip if-block "!isSWJ"
[00:48:14.119]      </control>
[00:48:14.119]      <block atomic="false" info="">
[00:48:14.120]        ReadDP(0x0);
[00:48:14.122]  
[00:48:14.122]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.122]  
[00:48:14.122]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.122]      </block>
[00:48:14.122]      // end if-block "protType == 2"
[00:48:14.122]    </control>
[00:48:14.122]  </sequence>
[00:48:14.122]  
[00:48:14.173]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.173]  
[00:48:14.174]  <debugvars>
[00:48:14.174]    // Pre-defined
[00:48:14.175]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.175]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.175]    __dp=0x00000000
[00:48:14.175]    __ap=0x00000000
[00:48:14.175]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.175]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.175]    __FlashAddr=0x00000000
[00:48:14.175]    __FlashLen=0x00000000
[00:48:14.175]    __FlashArg=0x00000000
[00:48:14.175]    __FlashOp=0x00000000
[00:48:14.176]    __Result=0x00000000
[00:48:14.176]  </debugvars>
[00:48:14.176]  
[00:48:14.176]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.176]    <block atomic="false" info="">
[00:48:14.176]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.176]        // -> [isSWJ <= 0x00000001]
[00:48:14.176]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.176]        // -> [hasDormant <= 0x00000000]
[00:48:14.176]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.176]        // -> [protType <= 0x00000002]
[00:48:14.177]    </block>
[00:48:14.177]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.177]      // if-block "protType == 1"
[00:48:14.177]        // =>  FALSE
[00:48:14.177]      // skip if-block "protType == 1"
[00:48:14.177]    </control>
[00:48:14.177]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.177]      // if-block "protType == 2"
[00:48:14.177]        // =>  TRUE
[00:48:14.177]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.178]        // if-block "isSWJ"
[00:48:14.178]          // =>  TRUE
[00:48:14.178]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.178]          // if-block "hasDormant"
[00:48:14.178]            // =>  FALSE
[00:48:14.178]          // skip if-block "hasDormant"
[00:48:14.178]        </control>
[00:48:14.178]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.178]          // if-block "!hasDormant"
[00:48:14.178]            // =>  TRUE
[00:48:14.179]          <block atomic="false" info="">
[00:48:14.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.181]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.182]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.182]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.184]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.186]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.188]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.189]          </block>
[00:48:14.189]          // end if-block "!hasDormant"
[00:48:14.189]        </control>
[00:48:14.189]        // end if-block "isSWJ"
[00:48:14.189]      </control>
[00:48:14.189]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.189]        // if-block "!isSWJ"
[00:48:14.190]          // =>  FALSE
[00:48:14.190]        // skip if-block "!isSWJ"
[00:48:14.191]      </control>
[00:48:14.191]      <block atomic="false" info="">
[00:48:14.191]        ReadDP(0x0);
[00:48:14.192]  
[00:48:14.192]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.192]  
[00:48:14.192]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.192]      </block>
[00:48:14.192]      // end if-block "protType == 2"
[00:48:14.192]    </control>
[00:48:14.192]  </sequence>
[00:48:14.192]  
[00:48:14.249]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.249]  
[00:48:14.249]  <debugvars>
[00:48:14.249]    // Pre-defined
[00:48:14.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.249]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.249]    __dp=0x00000000
[00:48:14.249]    __ap=0x00000000
[00:48:14.249]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.250]    __FlashAddr=0x00000000
[00:48:14.251]    __FlashLen=0x00000000
[00:48:14.251]    __FlashArg=0x00000000
[00:48:14.251]    __FlashOp=0x00000000
[00:48:14.251]    __Result=0x00000000
[00:48:14.251]  </debugvars>
[00:48:14.251]  
[00:48:14.251]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.251]    <block atomic="false" info="">
[00:48:14.251]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.251]        // -> [isSWJ <= 0x00000001]
[00:48:14.251]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.251]        // -> [hasDormant <= 0x00000000]
[00:48:14.251]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.251]        // -> [protType <= 0x00000002]
[00:48:14.252]    </block>
[00:48:14.252]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.252]      // if-block "protType == 1"
[00:48:14.252]        // =>  FALSE
[00:48:14.252]      // skip if-block "protType == 1"
[00:48:14.252]    </control>
[00:48:14.252]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.252]      // if-block "protType == 2"
[00:48:14.252]        // =>  TRUE
[00:48:14.252]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.252]        // if-block "isSWJ"
[00:48:14.253]          // =>  TRUE
[00:48:14.253]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.253]          // if-block "hasDormant"
[00:48:14.253]            // =>  FALSE
[00:48:14.253]          // skip if-block "hasDormant"
[00:48:14.253]        </control>
[00:48:14.253]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.253]          // if-block "!hasDormant"
[00:48:14.253]            // =>  TRUE
[00:48:14.253]          <block atomic="false" info="">
[00:48:14.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.258]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.260]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.262]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.268]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.269]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.269]          </block>
[00:48:14.269]          // end if-block "!hasDormant"
[00:48:14.269]        </control>
[00:48:14.269]        // end if-block "isSWJ"
[00:48:14.269]      </control>
[00:48:14.269]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.269]        // if-block "!isSWJ"
[00:48:14.269]          // =>  FALSE
[00:48:14.269]        // skip if-block "!isSWJ"
[00:48:14.270]      </control>
[00:48:14.270]      <block atomic="false" info="">
[00:48:14.270]        ReadDP(0x0);
[00:48:14.273]  
[00:48:14.273]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.273]  
[00:48:14.274]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.274]      </block>
[00:48:14.274]      // end if-block "protType == 2"
[00:48:14.274]    </control>
[00:48:14.274]  </sequence>
[00:48:14.274]  
[00:48:14.326]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.326]  
[00:48:14.326]  <debugvars>
[00:48:14.327]    // Pre-defined
[00:48:14.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.327]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.327]    __dp=0x00000000
[00:48:14.327]    __ap=0x00000000
[00:48:14.327]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.327]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.327]    __FlashAddr=0x00000000
[00:48:14.327]    __FlashLen=0x00000000
[00:48:14.328]    __FlashArg=0x00000000
[00:48:14.328]    __FlashOp=0x00000000
[00:48:14.328]    __Result=0x00000000
[00:48:14.328]  </debugvars>
[00:48:14.328]  
[00:48:14.328]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.328]    <block atomic="false" info="">
[00:48:14.328]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.328]        // -> [isSWJ <= 0x00000001]
[00:48:14.328]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.329]        // -> [hasDormant <= 0x00000000]
[00:48:14.329]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.329]        // -> [protType <= 0x00000002]
[00:48:14.329]    </block>
[00:48:14.329]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.329]      // if-block "protType == 1"
[00:48:14.329]        // =>  FALSE
[00:48:14.329]      // skip if-block "protType == 1"
[00:48:14.329]    </control>
[00:48:14.330]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.330]      // if-block "protType == 2"
[00:48:14.330]        // =>  TRUE
[00:48:14.330]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.330]        // if-block "isSWJ"
[00:48:14.330]          // =>  TRUE
[00:48:14.330]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.330]          // if-block "hasDormant"
[00:48:14.331]            // =>  FALSE
[00:48:14.331]          // skip if-block "hasDormant"
[00:48:14.331]        </control>
[00:48:14.331]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.331]          // if-block "!hasDormant"
[00:48:14.331]            // =>  TRUE
[00:48:14.331]          <block atomic="false" info="">
[00:48:14.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.332]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.334]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.336]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.339]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.340]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.341]          </block>
[00:48:14.341]          // end if-block "!hasDormant"
[00:48:14.341]        </control>
[00:48:14.341]        // end if-block "isSWJ"
[00:48:14.341]      </control>
[00:48:14.341]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.341]        // if-block "!isSWJ"
[00:48:14.341]          // =>  FALSE
[00:48:14.341]        // skip if-block "!isSWJ"
[00:48:14.342]      </control>
[00:48:14.342]      <block atomic="false" info="">
[00:48:14.342]        ReadDP(0x0);
[00:48:14.343]  
[00:48:14.343]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.343]  
[00:48:14.343]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.343]      </block>
[00:48:14.343]      // end if-block "protType == 2"
[00:48:14.343]    </control>
[00:48:14.343]  </sequence>
[00:48:14.343]  
[00:48:14.401]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.401]  
[00:48:14.401]  <debugvars>
[00:48:14.401]    // Pre-defined
[00:48:14.401]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.401]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.401]    __dp=0x00000000
[00:48:14.401]    __ap=0x00000000
[00:48:14.401]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.401]    __FlashAddr=0x00000000
[00:48:14.402]    __FlashLen=0x00000000
[00:48:14.402]    __FlashArg=0x00000000
[00:48:14.402]    __FlashOp=0x00000000
[00:48:14.402]    __Result=0x00000000
[00:48:14.402]  </debugvars>
[00:48:14.402]  
[00:48:14.402]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.402]    <block atomic="false" info="">
[00:48:14.402]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.403]        // -> [isSWJ <= 0x00000001]
[00:48:14.403]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.403]        // -> [hasDormant <= 0x00000000]
[00:48:14.403]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.403]        // -> [protType <= 0x00000002]
[00:48:14.403]    </block>
[00:48:14.403]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.403]      // if-block "protType == 1"
[00:48:14.403]        // =>  FALSE
[00:48:14.404]      // skip if-block "protType == 1"
[00:48:14.404]    </control>
[00:48:14.404]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.404]      // if-block "protType == 2"
[00:48:14.404]        // =>  TRUE
[00:48:14.404]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.405]        // if-block "isSWJ"
[00:48:14.405]          // =>  TRUE
[00:48:14.405]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.405]          // if-block "hasDormant"
[00:48:14.405]            // =>  FALSE
[00:48:14.405]          // skip if-block "hasDormant"
[00:48:14.405]        </control>
[00:48:14.405]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.405]          // if-block "!hasDormant"
[00:48:14.405]            // =>  TRUE
[00:48:14.406]          <block atomic="false" info="">
[00:48:14.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.407]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.409]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.415]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.415]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.418]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.420]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.421]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.421]          </block>
[00:48:14.422]          // end if-block "!hasDormant"
[00:48:14.422]        </control>
[00:48:14.422]        // end if-block "isSWJ"
[00:48:14.422]      </control>
[00:48:14.422]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.422]        // if-block "!isSWJ"
[00:48:14.422]          // =>  FALSE
[00:48:14.422]        // skip if-block "!isSWJ"
[00:48:14.422]      </control>
[00:48:14.423]      <block atomic="false" info="">
[00:48:14.423]        ReadDP(0x0);
[00:48:14.430]  
[00:48:14.430]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.430]  
[00:48:14.430]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.430]      </block>
[00:48:14.430]      // end if-block "protType == 2"
[00:48:14.430]    </control>
[00:48:14.430]  </sequence>
[00:48:14.431]  
[00:48:14.494]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.494]  
[00:48:14.495]  <debugvars>
[00:48:14.495]    // Pre-defined
[00:48:14.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.495]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.495]    __dp=0x00000000
[00:48:14.495]    __ap=0x00000000
[00:48:14.495]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.496]    __FlashAddr=0x00000000
[00:48:14.496]    __FlashLen=0x00000000
[00:48:14.496]    __FlashArg=0x00000000
[00:48:14.496]    __FlashOp=0x00000000
[00:48:14.496]    __Result=0x00000000
[00:48:14.496]  </debugvars>
[00:48:14.496]  
[00:48:14.496]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.497]    <block atomic="false" info="">
[00:48:14.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.497]        // -> [isSWJ <= 0x00000001]
[00:48:14.497]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.497]        // -> [hasDormant <= 0x00000000]
[00:48:14.497]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.497]        // -> [protType <= 0x00000002]
[00:48:14.497]    </block>
[00:48:14.497]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.498]      // if-block "protType == 1"
[00:48:14.498]        // =>  FALSE
[00:48:14.498]      // skip if-block "protType == 1"
[00:48:14.498]    </control>
[00:48:14.498]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.498]      // if-block "protType == 2"
[00:48:14.498]        // =>  TRUE
[00:48:14.498]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.498]        // if-block "isSWJ"
[00:48:14.498]          // =>  TRUE
[00:48:14.499]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.499]          // if-block "hasDormant"
[00:48:14.499]            // =>  FALSE
[00:48:14.499]          // skip if-block "hasDormant"
[00:48:14.499]        </control>
[00:48:14.499]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.499]          // if-block "!hasDormant"
[00:48:14.500]            // =>  TRUE
[00:48:14.500]          <block atomic="false" info="">
[00:48:14.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.502]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.502]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.503]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.510]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.511]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.511]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.512]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.512]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.514]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.514]          </block>
[00:48:14.514]          // end if-block "!hasDormant"
[00:48:14.514]        </control>
[00:48:14.515]        // end if-block "isSWJ"
[00:48:14.515]      </control>
[00:48:14.515]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.515]        // if-block "!isSWJ"
[00:48:14.515]          // =>  FALSE
[00:48:14.516]        // skip if-block "!isSWJ"
[00:48:14.516]      </control>
[00:48:14.516]      <block atomic="false" info="">
[00:48:14.516]        ReadDP(0x0);
[00:48:14.518]  
[00:48:14.518]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.518]  
[00:48:14.518]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.519]      </block>
[00:48:14.519]      // end if-block "protType == 2"
[00:48:14.519]    </control>
[00:48:14.519]  </sequence>
[00:48:14.519]  
[00:48:14.569]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.569]  
[00:48:14.569]  <debugvars>
[00:48:14.569]    // Pre-defined
[00:48:14.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.569]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.569]    __dp=0x00000000
[00:48:14.569]    __ap=0x00000000
[00:48:14.570]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.570]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.570]    __FlashAddr=0x00000000
[00:48:14.570]    __FlashLen=0x00000000
[00:48:14.570]    __FlashArg=0x00000000
[00:48:14.570]    __FlashOp=0x00000000
[00:48:14.570]    __Result=0x00000000
[00:48:14.570]  </debugvars>
[00:48:14.570]  
[00:48:14.571]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.571]    <block atomic="false" info="">
[00:48:14.571]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.571]        // -> [isSWJ <= 0x00000001]
[00:48:14.571]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.571]        // -> [hasDormant <= 0x00000000]
[00:48:14.571]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.571]        // -> [protType <= 0x00000002]
[00:48:14.571]    </block>
[00:48:14.571]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.571]      // if-block "protType == 1"
[00:48:14.573]        // =>  FALSE
[00:48:14.573]      // skip if-block "protType == 1"
[00:48:14.573]    </control>
[00:48:14.573]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.573]      // if-block "protType == 2"
[00:48:14.573]        // =>  TRUE
[00:48:14.573]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.573]        // if-block "isSWJ"
[00:48:14.573]          // =>  TRUE
[00:48:14.574]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.574]          // if-block "hasDormant"
[00:48:14.574]            // =>  FALSE
[00:48:14.574]          // skip if-block "hasDormant"
[00:48:14.574]        </control>
[00:48:14.574]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.574]          // if-block "!hasDormant"
[00:48:14.574]            // =>  TRUE
[00:48:14.574]          <block atomic="false" info="">
[00:48:14.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.576]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.576]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.580]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.582]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.583]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.587]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.587]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.588]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.588]          </block>
[00:48:14.588]          // end if-block "!hasDormant"
[00:48:14.588]        </control>
[00:48:14.588]        // end if-block "isSWJ"
[00:48:14.588]      </control>
[00:48:14.588]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.590]        // if-block "!isSWJ"
[00:48:14.590]          // =>  FALSE
[00:48:14.590]        // skip if-block "!isSWJ"
[00:48:14.590]      </control>
[00:48:14.590]      <block atomic="false" info="">
[00:48:14.590]        ReadDP(0x0);
[00:48:14.591]  
[00:48:14.591]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.591]  
[00:48:14.591]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.591]      </block>
[00:48:14.591]      // end if-block "protType == 2"
[00:48:14.592]    </control>
[00:48:14.592]  </sequence>
[00:48:14.592]  
[00:48:14.646]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.646]  
[00:48:14.646]  <debugvars>
[00:48:14.647]    // Pre-defined
[00:48:14.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.647]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.647]    __dp=0x00000000
[00:48:14.647]    __ap=0x00000000
[00:48:14.647]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.647]    __FlashAddr=0x00000000
[00:48:14.647]    __FlashLen=0x00000000
[00:48:14.647]    __FlashArg=0x00000000
[00:48:14.648]    __FlashOp=0x00000000
[00:48:14.648]    __Result=0x00000000
[00:48:14.648]  </debugvars>
[00:48:14.648]  
[00:48:14.648]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.648]    <block atomic="false" info="">
[00:48:14.648]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.649]        // -> [isSWJ <= 0x00000001]
[00:48:14.649]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.649]        // -> [hasDormant <= 0x00000000]
[00:48:14.649]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.649]        // -> [protType <= 0x00000002]
[00:48:14.649]    </block>
[00:48:14.649]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.649]      // if-block "protType == 1"
[00:48:14.649]        // =>  FALSE
[00:48:14.650]      // skip if-block "protType == 1"
[00:48:14.650]    </control>
[00:48:14.650]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.650]      // if-block "protType == 2"
[00:48:14.650]        // =>  TRUE
[00:48:14.650]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.650]        // if-block "isSWJ"
[00:48:14.650]          // =>  TRUE
[00:48:14.650]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.650]          // if-block "hasDormant"
[00:48:14.651]            // =>  FALSE
[00:48:14.651]          // skip if-block "hasDormant"
[00:48:14.651]        </control>
[00:48:14.651]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.651]          // if-block "!hasDormant"
[00:48:14.651]            // =>  TRUE
[00:48:14.651]          <block atomic="false" info="">
[00:48:14.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.655]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.657]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.660]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.660]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.661]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.661]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.664]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.666]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.666]          </block>
[00:48:14.666]          // end if-block "!hasDormant"
[00:48:14.666]        </control>
[00:48:14.666]        // end if-block "isSWJ"
[00:48:14.667]      </control>
[00:48:14.667]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.667]        // if-block "!isSWJ"
[00:48:14.667]          // =>  FALSE
[00:48:14.667]        // skip if-block "!isSWJ"
[00:48:14.667]      </control>
[00:48:14.667]      <block atomic="false" info="">
[00:48:14.667]        ReadDP(0x0);
[00:48:14.669]  
[00:48:14.669]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.669]  
[00:48:14.670]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.670]      </block>
[00:48:14.670]      // end if-block "protType == 2"
[00:48:14.670]    </control>
[00:48:14.670]  </sequence>
[00:48:14.670]  
[00:48:14.721]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.721]  
[00:48:14.722]  <debugvars>
[00:48:14.722]    // Pre-defined
[00:48:14.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.722]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.722]    __dp=0x00000000
[00:48:14.722]    __ap=0x00000000
[00:48:14.722]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.722]    __FlashAddr=0x00000000
[00:48:14.723]    __FlashLen=0x00000000
[00:48:14.723]    __FlashArg=0x00000000
[00:48:14.723]    __FlashOp=0x00000000
[00:48:14.723]    __Result=0x00000000
[00:48:14.723]  </debugvars>
[00:48:14.723]  
[00:48:14.723]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.723]    <block atomic="false" info="">
[00:48:14.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.723]        // -> [isSWJ <= 0x00000001]
[00:48:14.724]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.724]        // -> [hasDormant <= 0x00000000]
[00:48:14.724]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.724]        // -> [protType <= 0x00000002]
[00:48:14.724]    </block>
[00:48:14.724]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.724]      // if-block "protType == 1"
[00:48:14.724]        // =>  FALSE
[00:48:14.725]      // skip if-block "protType == 1"
[00:48:14.725]    </control>
[00:48:14.725]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.725]      // if-block "protType == 2"
[00:48:14.725]        // =>  TRUE
[00:48:14.725]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.725]        // if-block "isSWJ"
[00:48:14.725]          // =>  TRUE
[00:48:14.725]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.726]          // if-block "hasDormant"
[00:48:14.726]            // =>  FALSE
[00:48:14.726]          // skip if-block "hasDormant"
[00:48:14.726]        </control>
[00:48:14.726]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.726]          // if-block "!hasDormant"
[00:48:14.727]            // =>  TRUE
[00:48:14.727]          <block atomic="false" info="">
[00:48:14.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.729]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.731]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.731]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.734]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.736]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.737]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.739]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.739]          </block>
[00:48:14.739]          // end if-block "!hasDormant"
[00:48:14.739]        </control>
[00:48:14.739]        // end if-block "isSWJ"
[00:48:14.739]      </control>
[00:48:14.739]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.739]        // if-block "!isSWJ"
[00:48:14.740]          // =>  FALSE
[00:48:14.740]        // skip if-block "!isSWJ"
[00:48:14.740]      </control>
[00:48:14.740]      <block atomic="false" info="">
[00:48:14.740]        ReadDP(0x0);
[00:48:14.741]  
[00:48:14.741]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.741]  
[00:48:14.741]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.741]      </block>
[00:48:14.741]      // end if-block "protType == 2"
[00:48:14.741]    </control>
[00:48:14.742]  </sequence>
[00:48:14.742]  
[00:48:14.798]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.798]  
[00:48:14.798]  <debugvars>
[00:48:14.798]    // Pre-defined
[00:48:14.798]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.798]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.798]    __dp=0x00000000
[00:48:14.799]    __ap=0x00000000
[00:48:14.799]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.799]    __FlashAddr=0x00000000
[00:48:14.799]    __FlashLen=0x00000000
[00:48:14.799]    __FlashArg=0x00000000
[00:48:14.799]    __FlashOp=0x00000000
[00:48:14.799]    __Result=0x00000000
[00:48:14.799]  </debugvars>
[00:48:14.800]  
[00:48:14.800]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.800]    <block atomic="false" info="">
[00:48:14.800]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.800]        // -> [isSWJ <= 0x00000001]
[00:48:14.800]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.800]        // -> [hasDormant <= 0x00000000]
[00:48:14.801]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.801]        // -> [protType <= 0x00000002]
[00:48:14.801]    </block>
[00:48:14.801]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.801]      // if-block "protType == 1"
[00:48:14.801]        // =>  FALSE
[00:48:14.801]      // skip if-block "protType == 1"
[00:48:14.802]    </control>
[00:48:14.802]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.802]      // if-block "protType == 2"
[00:48:14.802]        // =>  TRUE
[00:48:14.802]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.802]        // if-block "isSWJ"
[00:48:14.802]          // =>  TRUE
[00:48:14.803]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.803]          // if-block "hasDormant"
[00:48:14.803]            // =>  FALSE
[00:48:14.803]          // skip if-block "hasDormant"
[00:48:14.803]        </control>
[00:48:14.803]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.803]          // if-block "!hasDormant"
[00:48:14.803]            // =>  TRUE
[00:48:14.804]          <block atomic="false" info="">
[00:48:14.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.805]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.807]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.807]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.808]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.808]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.811]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.811]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.816]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.816]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.817]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.818]          </block>
[00:48:14.818]          // end if-block "!hasDormant"
[00:48:14.818]        </control>
[00:48:14.818]        // end if-block "isSWJ"
[00:48:14.818]      </control>
[00:48:14.818]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.818]        // if-block "!isSWJ"
[00:48:14.818]          // =>  FALSE
[00:48:14.818]        // skip if-block "!isSWJ"
[00:48:14.818]      </control>
[00:48:14.819]      <block atomic="false" info="">
[00:48:14.819]        ReadDP(0x0);
[00:48:14.820]  
[00:48:14.820]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.820]  
[00:48:14.820]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.820]      </block>
[00:48:14.820]      // end if-block "protType == 2"
[00:48:14.820]    </control>
[00:48:14.820]  </sequence>
[00:48:14.820]  
[00:48:14.873]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.873]  
[00:48:14.873]  <debugvars>
[00:48:14.874]    // Pre-defined
[00:48:14.874]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.875]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.875]    __dp=0x00000000
[00:48:14.875]    __ap=0x00000000
[00:48:14.875]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.875]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.875]    __FlashAddr=0x00000000
[00:48:14.875]    __FlashLen=0x00000000
[00:48:14.875]    __FlashArg=0x00000000
[00:48:14.875]    __FlashOp=0x00000000
[00:48:14.875]    __Result=0x00000000
[00:48:14.875]  </debugvars>
[00:48:14.875]  
[00:48:14.875]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.876]    <block atomic="false" info="">
[00:48:14.876]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.876]        // -> [isSWJ <= 0x00000001]
[00:48:14.876]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.877]        // -> [hasDormant <= 0x00000000]
[00:48:14.877]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.877]        // -> [protType <= 0x00000002]
[00:48:14.877]    </block>
[00:48:14.877]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.877]      // if-block "protType == 1"
[00:48:14.877]        // =>  FALSE
[00:48:14.877]      // skip if-block "protType == 1"
[00:48:14.877]    </control>
[00:48:14.877]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.877]      // if-block "protType == 2"
[00:48:14.877]        // =>  TRUE
[00:48:14.878]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.878]        // if-block "isSWJ"
[00:48:14.878]          // =>  TRUE
[00:48:14.878]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.878]          // if-block "hasDormant"
[00:48:14.878]            // =>  FALSE
[00:48:14.878]          // skip if-block "hasDormant"
[00:48:14.878]        </control>
[00:48:14.879]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.879]          // if-block "!hasDormant"
[00:48:14.879]            // =>  TRUE
[00:48:14.879]          <block atomic="false" info="">
[00:48:14.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.881]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.882]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.888]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.888]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.891]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.898]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.899]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.900]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.901]          </block>
[00:48:14.901]          // end if-block "!hasDormant"
[00:48:14.901]        </control>
[00:48:14.901]        // end if-block "isSWJ"
[00:48:14.901]      </control>
[00:48:14.901]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.901]        // if-block "!isSWJ"
[00:48:14.902]          // =>  FALSE
[00:48:14.902]        // skip if-block "!isSWJ"
[00:48:14.902]      </control>
[00:48:14.902]      <block atomic="false" info="">
[00:48:14.902]        ReadDP(0x0);
[00:48:14.903]  
[00:48:14.903]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.903]  
[00:48:14.903]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.903]      </block>
[00:48:14.903]      // end if-block "protType == 2"
[00:48:14.903]    </control>
[00:48:14.903]  </sequence>
[00:48:14.903]  
[00:48:14.966]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:14.966]  
[00:48:14.967]  <debugvars>
[00:48:14.967]    // Pre-defined
[00:48:14.967]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:14.967]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:14.967]    __dp=0x00000000
[00:48:14.967]    __ap=0x00000000
[00:48:14.967]    __traceout=0x00000000      (Trace Disabled)
[00:48:14.967]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:14.967]    __FlashAddr=0x00000000
[00:48:14.967]    __FlashLen=0x00000000
[00:48:14.968]    __FlashArg=0x00000000
[00:48:14.968]    __FlashOp=0x00000000
[00:48:14.968]    __Result=0x00000000
[00:48:14.968]  </debugvars>
[00:48:14.968]  
[00:48:14.968]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:14.968]    <block atomic="false" info="">
[00:48:14.968]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:14.968]        // -> [isSWJ <= 0x00000001]
[00:48:14.968]      __var hasDormant = __protocol & 0x00020000;
[00:48:14.969]        // -> [hasDormant <= 0x00000000]
[00:48:14.969]      __var protType   = __protocol & 0x0000FFFF;
[00:48:14.969]        // -> [protType <= 0x00000002]
[00:48:14.969]    </block>
[00:48:14.969]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:14.969]      // if-block "protType == 1"
[00:48:14.969]        // =>  FALSE
[00:48:14.969]      // skip if-block "protType == 1"
[00:48:14.969]    </control>
[00:48:14.969]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:14.970]      // if-block "protType == 2"
[00:48:14.970]        // =>  TRUE
[00:48:14.970]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:14.970]        // if-block "isSWJ"
[00:48:14.970]          // =>  TRUE
[00:48:14.970]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:14.970]          // if-block "hasDormant"
[00:48:14.970]            // =>  FALSE
[00:48:14.970]          // skip if-block "hasDormant"
[00:48:14.971]        </control>
[00:48:14.971]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:14.971]          // if-block "!hasDormant"
[00:48:14.971]            // =>  TRUE
[00:48:14.971]          <block atomic="false" info="">
[00:48:14.971]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:14.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:14.975]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:14.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:14.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.977]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:14.982]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:14.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:14.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:14.984]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:14.989]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:14.989]          </block>
[00:48:14.989]          // end if-block "!hasDormant"
[00:48:14.989]        </control>
[00:48:14.989]        // end if-block "isSWJ"
[00:48:14.989]      </control>
[00:48:14.989]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:14.989]        // if-block "!isSWJ"
[00:48:14.990]          // =>  FALSE
[00:48:14.990]        // skip if-block "!isSWJ"
[00:48:14.990]      </control>
[00:48:14.990]      <block atomic="false" info="">
[00:48:14.991]        ReadDP(0x0);
[00:48:14.992]  
[00:48:14.992]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:14.992]  
[00:48:14.992]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:14.992]      </block>
[00:48:14.992]      // end if-block "protType == 2"
[00:48:14.992]    </control>
[00:48:14.992]  </sequence>
[00:48:14.992]  
[00:48:15.058]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.058]  
[00:48:15.058]  <debugvars>
[00:48:15.058]    // Pre-defined
[00:48:15.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.059]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.059]    __dp=0x00000000
[00:48:15.059]    __ap=0x00000000
[00:48:15.059]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.059]    __FlashAddr=0x00000000
[00:48:15.059]    __FlashLen=0x00000000
[00:48:15.059]    __FlashArg=0x00000000
[00:48:15.059]    __FlashOp=0x00000000
[00:48:15.059]    __Result=0x00000000
[00:48:15.060]  </debugvars>
[00:48:15.060]  
[00:48:15.060]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.060]    <block atomic="false" info="">
[00:48:15.060]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.060]        // -> [isSWJ <= 0x00000001]
[00:48:15.060]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.060]        // -> [hasDormant <= 0x00000000]
[00:48:15.061]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.061]        // -> [protType <= 0x00000002]
[00:48:15.061]    </block>
[00:48:15.061]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.061]      // if-block "protType == 1"
[00:48:15.061]        // =>  FALSE
[00:48:15.061]      // skip if-block "protType == 1"
[00:48:15.062]    </control>
[00:48:15.062]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.062]      // if-block "protType == 2"
[00:48:15.062]        // =>  TRUE
[00:48:15.062]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.062]        // if-block "isSWJ"
[00:48:15.062]          // =>  TRUE
[00:48:15.062]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.063]          // if-block "hasDormant"
[00:48:15.063]            // =>  FALSE
[00:48:15.063]          // skip if-block "hasDormant"
[00:48:15.063]        </control>
[00:48:15.063]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.063]          // if-block "!hasDormant"
[00:48:15.063]            // =>  TRUE
[00:48:15.063]          <block atomic="false" info="">
[00:48:15.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.066]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.069]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.070]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.071]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.073]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.076]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.077]          </block>
[00:48:15.077]          // end if-block "!hasDormant"
[00:48:15.077]        </control>
[00:48:15.077]        // end if-block "isSWJ"
[00:48:15.077]      </control>
[00:48:15.077]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.077]        // if-block "!isSWJ"
[00:48:15.077]          // =>  FALSE
[00:48:15.078]        // skip if-block "!isSWJ"
[00:48:15.078]      </control>
[00:48:15.078]      <block atomic="false" info="">
[00:48:15.078]        ReadDP(0x0);
[00:48:15.079]  
[00:48:15.079]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.079]  
[00:48:15.079]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.080]      </block>
[00:48:15.080]      // end if-block "protType == 2"
[00:48:15.080]    </control>
[00:48:15.080]  </sequence>
[00:48:15.080]  
[00:48:15.135]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.135]  
[00:48:15.135]  <debugvars>
[00:48:15.136]    // Pre-defined
[00:48:15.136]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.136]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.136]    __dp=0x00000000
[00:48:15.136]    __ap=0x00000000
[00:48:15.136]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.136]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.136]    __FlashAddr=0x00000000
[00:48:15.136]    __FlashLen=0x00000000
[00:48:15.136]    __FlashArg=0x00000000
[00:48:15.136]    __FlashOp=0x00000000
[00:48:15.137]    __Result=0x00000000
[00:48:15.137]  </debugvars>
[00:48:15.137]  
[00:48:15.137]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.137]    <block atomic="false" info="">
[00:48:15.137]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.137]        // -> [isSWJ <= 0x00000001]
[00:48:15.138]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.138]        // -> [hasDormant <= 0x00000000]
[00:48:15.138]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.138]        // -> [protType <= 0x00000002]
[00:48:15.138]    </block>
[00:48:15.138]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.138]      // if-block "protType == 1"
[00:48:15.138]        // =>  FALSE
[00:48:15.138]      // skip if-block "protType == 1"
[00:48:15.138]    </control>
[00:48:15.138]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.139]      // if-block "protType == 2"
[00:48:15.139]        // =>  TRUE
[00:48:15.139]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.139]        // if-block "isSWJ"
[00:48:15.139]          // =>  TRUE
[00:48:15.139]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.139]          // if-block "hasDormant"
[00:48:15.139]            // =>  FALSE
[00:48:15.139]          // skip if-block "hasDormant"
[00:48:15.139]        </control>
[00:48:15.140]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.140]          // if-block "!hasDormant"
[00:48:15.140]            // =>  TRUE
[00:48:15.140]          <block atomic="false" info="">
[00:48:15.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.142]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.145]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.146]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.151]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.151]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.153]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.153]          </block>
[00:48:15.153]          // end if-block "!hasDormant"
[00:48:15.153]        </control>
[00:48:15.153]        // end if-block "isSWJ"
[00:48:15.153]      </control>
[00:48:15.153]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.153]        // if-block "!isSWJ"
[00:48:15.153]          // =>  FALSE
[00:48:15.153]        // skip if-block "!isSWJ"
[00:48:15.154]      </control>
[00:48:15.154]      <block atomic="false" info="">
[00:48:15.154]        ReadDP(0x0);
[00:48:15.155]  
[00:48:15.155]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.155]  
[00:48:15.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.155]      </block>
[00:48:15.155]      // end if-block "protType == 2"
[00:48:15.155]    </control>
[00:48:15.155]  </sequence>
[00:48:15.155]  
[00:48:15.212]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.212]  
[00:48:15.213]  <debugvars>
[00:48:15.213]    // Pre-defined
[00:48:15.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.213]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.213]    __dp=0x00000000
[00:48:15.213]    __ap=0x00000000
[00:48:15.213]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.214]    __FlashAddr=0x00000000
[00:48:15.214]    __FlashLen=0x00000000
[00:48:15.214]    __FlashArg=0x00000000
[00:48:15.214]    __FlashOp=0x00000000
[00:48:15.214]    __Result=0x00000000
[00:48:15.214]  </debugvars>
[00:48:15.214]  
[00:48:15.214]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.214]    <block atomic="false" info="">
[00:48:15.214]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.214]        // -> [isSWJ <= 0x00000001]
[00:48:15.215]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.215]        // -> [hasDormant <= 0x00000000]
[00:48:15.215]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.215]        // -> [protType <= 0x00000002]
[00:48:15.215]    </block>
[00:48:15.215]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.215]      // if-block "protType == 1"
[00:48:15.215]        // =>  FALSE
[00:48:15.215]      // skip if-block "protType == 1"
[00:48:15.215]    </control>
[00:48:15.215]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.216]      // if-block "protType == 2"
[00:48:15.216]        // =>  TRUE
[00:48:15.216]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.216]        // if-block "isSWJ"
[00:48:15.216]          // =>  TRUE
[00:48:15.216]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.216]          // if-block "hasDormant"
[00:48:15.216]            // =>  FALSE
[00:48:15.217]          // skip if-block "hasDormant"
[00:48:15.217]        </control>
[00:48:15.217]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.217]          // if-block "!hasDormant"
[00:48:15.217]            // =>  TRUE
[00:48:15.217]          <block atomic="false" info="">
[00:48:15.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.226]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.227]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.227]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.229]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.229]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.232]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.232]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.235]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.236]          </block>
[00:48:15.236]          // end if-block "!hasDormant"
[00:48:15.236]        </control>
[00:48:15.236]        // end if-block "isSWJ"
[00:48:15.236]      </control>
[00:48:15.236]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.236]        // if-block "!isSWJ"
[00:48:15.236]          // =>  FALSE
[00:48:15.237]        // skip if-block "!isSWJ"
[00:48:15.237]      </control>
[00:48:15.237]      <block atomic="false" info="">
[00:48:15.237]        ReadDP(0x0);
[00:48:15.239]  
[00:48:15.239]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.239]  
[00:48:15.239]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.239]      </block>
[00:48:15.239]      // end if-block "protType == 2"
[00:48:15.239]    </control>
[00:48:15.240]  </sequence>
[00:48:15.240]  
[00:48:15.303]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.303]  
[00:48:15.303]  <debugvars>
[00:48:15.303]    // Pre-defined
[00:48:15.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.304]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.304]    __dp=0x00000000
[00:48:15.304]    __ap=0x00000000
[00:48:15.304]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.304]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.304]    __FlashAddr=0x00000000
[00:48:15.304]    __FlashLen=0x00000000
[00:48:15.304]    __FlashArg=0x00000000
[00:48:15.304]    __FlashOp=0x00000000
[00:48:15.305]    __Result=0x00000000
[00:48:15.305]  </debugvars>
[00:48:15.305]  
[00:48:15.305]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.305]    <block atomic="false" info="">
[00:48:15.305]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.305]        // -> [isSWJ <= 0x00000001]
[00:48:15.305]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.305]        // -> [hasDormant <= 0x00000000]
[00:48:15.305]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.306]        // -> [protType <= 0x00000002]
[00:48:15.306]    </block>
[00:48:15.306]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.306]      // if-block "protType == 1"
[00:48:15.306]        // =>  FALSE
[00:48:15.306]      // skip if-block "protType == 1"
[00:48:15.306]    </control>
[00:48:15.306]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.306]      // if-block "protType == 2"
[00:48:15.307]        // =>  TRUE
[00:48:15.307]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.307]        // if-block "isSWJ"
[00:48:15.307]          // =>  TRUE
[00:48:15.307]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.307]          // if-block "hasDormant"
[00:48:15.307]            // =>  FALSE
[00:48:15.308]          // skip if-block "hasDormant"
[00:48:15.308]        </control>
[00:48:15.308]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.308]          // if-block "!hasDormant"
[00:48:15.308]            // =>  TRUE
[00:48:15.308]          <block atomic="false" info="">
[00:48:15.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.311]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.312]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.314]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.315]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.315]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.317]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.319]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.319]          </block>
[00:48:15.319]          // end if-block "!hasDormant"
[00:48:15.320]        </control>
[00:48:15.320]        // end if-block "isSWJ"
[00:48:15.320]      </control>
[00:48:15.320]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.320]        // if-block "!isSWJ"
[00:48:15.320]          // =>  FALSE
[00:48:15.320]        // skip if-block "!isSWJ"
[00:48:15.320]      </control>
[00:48:15.321]      <block atomic="false" info="">
[00:48:15.321]        ReadDP(0x0);
[00:48:15.322]  
[00:48:15.322]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.322]  
[00:48:15.322]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.323]      </block>
[00:48:15.323]      // end if-block "protType == 2"
[00:48:15.323]    </control>
[00:48:15.323]  </sequence>
[00:48:15.323]  
[00:48:15.380]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.380]  
[00:48:15.380]  <debugvars>
[00:48:15.381]    // Pre-defined
[00:48:15.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.381]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.381]    __dp=0x00000000
[00:48:15.381]    __ap=0x00000000
[00:48:15.381]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.381]    __FlashAddr=0x00000000
[00:48:15.381]    __FlashLen=0x00000000
[00:48:15.381]    __FlashArg=0x00000000
[00:48:15.381]    __FlashOp=0x00000000
[00:48:15.381]    __Result=0x00000000
[00:48:15.381]  </debugvars>
[00:48:15.381]  
[00:48:15.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.382]    <block atomic="false" info="">
[00:48:15.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.382]        // -> [isSWJ <= 0x00000001]
[00:48:15.382]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.382]        // -> [hasDormant <= 0x00000000]
[00:48:15.382]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.383]        // -> [protType <= 0x00000002]
[00:48:15.383]    </block>
[00:48:15.383]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.383]      // if-block "protType == 1"
[00:48:15.383]        // =>  FALSE
[00:48:15.383]      // skip if-block "protType == 1"
[00:48:15.383]    </control>
[00:48:15.383]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.383]      // if-block "protType == 2"
[00:48:15.384]        // =>  TRUE
[00:48:15.384]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.384]        // if-block "isSWJ"
[00:48:15.384]          // =>  TRUE
[00:48:15.384]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.384]          // if-block "hasDormant"
[00:48:15.385]            // =>  FALSE
[00:48:15.385]          // skip if-block "hasDormant"
[00:48:15.385]        </control>
[00:48:15.385]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.385]          // if-block "!hasDormant"
[00:48:15.385]            // =>  TRUE
[00:48:15.385]          <block atomic="false" info="">
[00:48:15.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.395]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.399]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.401]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.402]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.406]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.407]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.407]          </block>
[00:48:15.407]          // end if-block "!hasDormant"
[00:48:15.408]        </control>
[00:48:15.408]        // end if-block "isSWJ"
[00:48:15.408]      </control>
[00:48:15.408]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.408]        // if-block "!isSWJ"
[00:48:15.408]          // =>  FALSE
[00:48:15.408]        // skip if-block "!isSWJ"
[00:48:15.408]      </control>
[00:48:15.409]      <block atomic="false" info="">
[00:48:15.409]        ReadDP(0x0);
[00:48:15.410]  
[00:48:15.410]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.410]  
[00:48:15.410]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.410]      </block>
[00:48:15.410]      // end if-block "protType == 2"
[00:48:15.410]    </control>
[00:48:15.410]  </sequence>
[00:48:15.410]  
[00:48:15.470]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.470]  
[00:48:15.470]  <debugvars>
[00:48:15.470]    // Pre-defined
[00:48:15.470]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.470]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.470]    __dp=0x00000000
[00:48:15.470]    __ap=0x00000000
[00:48:15.472]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.472]    __FlashAddr=0x00000000
[00:48:15.472]    __FlashLen=0x00000000
[00:48:15.472]    __FlashArg=0x00000000
[00:48:15.472]    __FlashOp=0x00000000
[00:48:15.472]    __Result=0x00000000
[00:48:15.472]  </debugvars>
[00:48:15.472]  
[00:48:15.472]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.473]    <block atomic="false" info="">
[00:48:15.473]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.473]        // -> [isSWJ <= 0x00000001]
[00:48:15.473]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.473]        // -> [hasDormant <= 0x00000000]
[00:48:15.473]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.473]        // -> [protType <= 0x00000002]
[00:48:15.473]    </block>
[00:48:15.473]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.473]      // if-block "protType == 1"
[00:48:15.474]        // =>  FALSE
[00:48:15.474]      // skip if-block "protType == 1"
[00:48:15.474]    </control>
[00:48:15.474]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.474]      // if-block "protType == 2"
[00:48:15.474]        // =>  TRUE
[00:48:15.474]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.474]        // if-block "isSWJ"
[00:48:15.474]          // =>  TRUE
[00:48:15.474]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.475]          // if-block "hasDormant"
[00:48:15.475]            // =>  FALSE
[00:48:15.475]          // skip if-block "hasDormant"
[00:48:15.475]        </control>
[00:48:15.475]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.475]          // if-block "!hasDormant"
[00:48:15.475]            // =>  TRUE
[00:48:15.475]          <block atomic="false" info="">
[00:48:15.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.477]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.479]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.483]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.488]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.494]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.495]          </block>
[00:48:15.495]          // end if-block "!hasDormant"
[00:48:15.495]        </control>
[00:48:15.495]        // end if-block "isSWJ"
[00:48:15.495]      </control>
[00:48:15.496]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.496]        // if-block "!isSWJ"
[00:48:15.496]          // =>  FALSE
[00:48:15.496]        // skip if-block "!isSWJ"
[00:48:15.496]      </control>
[00:48:15.496]      <block atomic="false" info="">
[00:48:15.496]        ReadDP(0x0);
[00:48:15.501]  
[00:48:15.501]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.501]  
[00:48:15.501]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.501]      </block>
[00:48:15.501]      // end if-block "protType == 2"
[00:48:15.502]    </control>
[00:48:15.502]  </sequence>
[00:48:15.502]  
[00:48:15.561]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.561]  
[00:48:15.561]  <debugvars>
[00:48:15.561]    // Pre-defined
[00:48:15.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.561]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.561]    __dp=0x00000000
[00:48:15.561]    __ap=0x00000000
[00:48:15.561]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.563]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.563]    __FlashAddr=0x00000000
[00:48:15.563]    __FlashLen=0x00000000
[00:48:15.563]    __FlashArg=0x00000000
[00:48:15.563]    __FlashOp=0x00000000
[00:48:15.563]    __Result=0x00000000
[00:48:15.563]  </debugvars>
[00:48:15.563]  
[00:48:15.563]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.563]    <block atomic="false" info="">
[00:48:15.564]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.564]        // -> [isSWJ <= 0x00000001]
[00:48:15.564]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.564]        // -> [hasDormant <= 0x00000000]
[00:48:15.564]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.564]        // -> [protType <= 0x00000002]
[00:48:15.564]    </block>
[00:48:15.564]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.564]      // if-block "protType == 1"
[00:48:15.564]        // =>  FALSE
[00:48:15.565]      // skip if-block "protType == 1"
[00:48:15.565]    </control>
[00:48:15.565]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.565]      // if-block "protType == 2"
[00:48:15.565]        // =>  TRUE
[00:48:15.565]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.565]        // if-block "isSWJ"
[00:48:15.565]          // =>  TRUE
[00:48:15.565]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.566]          // if-block "hasDormant"
[00:48:15.566]            // =>  FALSE
[00:48:15.566]          // skip if-block "hasDormant"
[00:48:15.566]        </control>
[00:48:15.566]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.566]          // if-block "!hasDormant"
[00:48:15.566]            // =>  TRUE
[00:48:15.566]          <block atomic="false" info="">
[00:48:15.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.568]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.568]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.570]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.571]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.571]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.573]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.573]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.577]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.579]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.579]          </block>
[00:48:15.579]          // end if-block "!hasDormant"
[00:48:15.579]        </control>
[00:48:15.579]        // end if-block "isSWJ"
[00:48:15.579]      </control>
[00:48:15.579]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.579]        // if-block "!isSWJ"
[00:48:15.580]          // =>  FALSE
[00:48:15.580]        // skip if-block "!isSWJ"
[00:48:15.580]      </control>
[00:48:15.580]      <block atomic="false" info="">
[00:48:15.580]        ReadDP(0x0);
[00:48:15.585]  
[00:48:15.585]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.585]  
[00:48:15.585]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.585]      </block>
[00:48:15.586]      // end if-block "protType == 2"
[00:48:15.586]    </control>
[00:48:15.586]  </sequence>
[00:48:15.586]  
[00:48:15.638]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.638]  
[00:48:15.638]  <debugvars>
[00:48:15.639]    // Pre-defined
[00:48:15.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.639]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.639]    __dp=0x00000000
[00:48:15.639]    __ap=0x00000000
[00:48:15.639]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.639]    __FlashAddr=0x00000000
[00:48:15.639]    __FlashLen=0x00000000
[00:48:15.639]    __FlashArg=0x00000000
[00:48:15.639]    __FlashOp=0x00000000
[00:48:15.639]    __Result=0x00000000
[00:48:15.641]  </debugvars>
[00:48:15.641]  
[00:48:15.641]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.641]    <block atomic="false" info="">
[00:48:15.641]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.641]        // -> [isSWJ <= 0x00000001]
[00:48:15.641]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.641]        // -> [hasDormant <= 0x00000000]
[00:48:15.641]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.641]        // -> [protType <= 0x00000002]
[00:48:15.641]    </block>
[00:48:15.642]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.642]      // if-block "protType == 1"
[00:48:15.642]        // =>  FALSE
[00:48:15.642]      // skip if-block "protType == 1"
[00:48:15.642]    </control>
[00:48:15.643]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.643]      // if-block "protType == 2"
[00:48:15.643]        // =>  TRUE
[00:48:15.643]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.643]        // if-block "isSWJ"
[00:48:15.643]          // =>  TRUE
[00:48:15.643]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.643]          // if-block "hasDormant"
[00:48:15.643]            // =>  FALSE
[00:48:15.643]          // skip if-block "hasDormant"
[00:48:15.643]        </control>
[00:48:15.644]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.644]          // if-block "!hasDormant"
[00:48:15.644]            // =>  TRUE
[00:48:15.644]          <block atomic="false" info="">
[00:48:15.644]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.649]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.654]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.657]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.659]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.660]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.660]          </block>
[00:48:15.660]          // end if-block "!hasDormant"
[00:48:15.660]        </control>
[00:48:15.660]        // end if-block "isSWJ"
[00:48:15.660]      </control>
[00:48:15.661]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.661]        // if-block "!isSWJ"
[00:48:15.661]          // =>  FALSE
[00:48:15.661]        // skip if-block "!isSWJ"
[00:48:15.661]      </control>
[00:48:15.661]      <block atomic="false" info="">
[00:48:15.661]        ReadDP(0x0);
[00:48:15.663]  
[00:48:15.663]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.663]  
[00:48:15.663]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.663]      </block>
[00:48:15.663]      // end if-block "protType == 2"
[00:48:15.663]    </control>
[00:48:15.663]  </sequence>
[00:48:15.663]  
[00:48:15.714]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.714]  
[00:48:15.714]  <debugvars>
[00:48:15.714]    // Pre-defined
[00:48:15.715]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.715]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.715]    __dp=0x00000000
[00:48:15.715]    __ap=0x00000000
[00:48:15.715]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.715]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.715]    __FlashAddr=0x00000000
[00:48:15.716]    __FlashLen=0x00000000
[00:48:15.716]    __FlashArg=0x00000000
[00:48:15.716]    __FlashOp=0x00000000
[00:48:15.716]    __Result=0x00000000
[00:48:15.716]  </debugvars>
[00:48:15.716]  
[00:48:15.716]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.716]    <block atomic="false" info="">
[00:48:15.716]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.716]        // -> [isSWJ <= 0x00000001]
[00:48:15.717]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.717]        // -> [hasDormant <= 0x00000000]
[00:48:15.717]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.717]        // -> [protType <= 0x00000002]
[00:48:15.719]    </block>
[00:48:15.719]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.719]      // if-block "protType == 1"
[00:48:15.720]        // =>  FALSE
[00:48:15.720]      // skip if-block "protType == 1"
[00:48:15.720]    </control>
[00:48:15.720]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.720]      // if-block "protType == 2"
[00:48:15.720]        // =>  TRUE
[00:48:15.720]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.720]        // if-block "isSWJ"
[00:48:15.721]          // =>  TRUE
[00:48:15.721]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.721]          // if-block "hasDormant"
[00:48:15.721]            // =>  FALSE
[00:48:15.721]          // skip if-block "hasDormant"
[00:48:15.721]        </control>
[00:48:15.721]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.721]          // if-block "!hasDormant"
[00:48:15.721]            // =>  TRUE
[00:48:15.722]          <block atomic="false" info="">
[00:48:15.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.723]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.725]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.726]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.726]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.727]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.729]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.730]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.731]          </block>
[00:48:15.731]          // end if-block "!hasDormant"
[00:48:15.731]        </control>
[00:48:15.731]        // end if-block "isSWJ"
[00:48:15.731]      </control>
[00:48:15.731]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.731]        // if-block "!isSWJ"
[00:48:15.732]          // =>  FALSE
[00:48:15.732]        // skip if-block "!isSWJ"
[00:48:15.732]      </control>
[00:48:15.732]      <block atomic="false" info="">
[00:48:15.732]        ReadDP(0x0);
[00:48:15.740]  
[00:48:15.740]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.740]  
[00:48:15.740]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.740]      </block>
[00:48:15.740]      // end if-block "protType == 2"
[00:48:15.740]    </control>
[00:48:15.740]  </sequence>
[00:48:15.740]  
[00:48:15.805]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.805]  
[00:48:15.805]  <debugvars>
[00:48:15.805]    // Pre-defined
[00:48:15.805]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.805]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.805]    __dp=0x00000000
[00:48:15.805]    __ap=0x00000000
[00:48:15.805]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.805]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.805]    __FlashAddr=0x00000000
[00:48:15.805]    __FlashLen=0x00000000
[00:48:15.806]    __FlashArg=0x00000000
[00:48:15.806]    __FlashOp=0x00000000
[00:48:15.806]    __Result=0x00000000
[00:48:15.806]  </debugvars>
[00:48:15.806]  
[00:48:15.807]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.807]    <block atomic="false" info="">
[00:48:15.807]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.807]        // -> [isSWJ <= 0x00000001]
[00:48:15.807]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.807]        // -> [hasDormant <= 0x00000000]
[00:48:15.807]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.807]        // -> [protType <= 0x00000002]
[00:48:15.807]    </block>
[00:48:15.807]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.807]      // if-block "protType == 1"
[00:48:15.808]        // =>  FALSE
[00:48:15.808]      // skip if-block "protType == 1"
[00:48:15.808]    </control>
[00:48:15.808]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.808]      // if-block "protType == 2"
[00:48:15.808]        // =>  TRUE
[00:48:15.808]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.808]        // if-block "isSWJ"
[00:48:15.808]          // =>  TRUE
[00:48:15.808]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.808]          // if-block "hasDormant"
[00:48:15.809]            // =>  FALSE
[00:48:15.809]          // skip if-block "hasDormant"
[00:48:15.809]        </control>
[00:48:15.809]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.809]          // if-block "!hasDormant"
[00:48:15.809]            // =>  TRUE
[00:48:15.809]          <block atomic="false" info="">
[00:48:15.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.811]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.814]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.816]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.816]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.820]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.825]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.825]          </block>
[00:48:15.825]          // end if-block "!hasDormant"
[00:48:15.825]        </control>
[00:48:15.825]        // end if-block "isSWJ"
[00:48:15.825]      </control>
[00:48:15.825]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.825]        // if-block "!isSWJ"
[00:48:15.825]          // =>  FALSE
[00:48:15.827]        // skip if-block "!isSWJ"
[00:48:15.827]      </control>
[00:48:15.827]      <block atomic="false" info="">
[00:48:15.827]        ReadDP(0x0);
[00:48:15.828]  
[00:48:15.828]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.828]  
[00:48:15.828]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.828]      </block>
[00:48:15.828]      // end if-block "protType == 2"
[00:48:15.828]    </control>
[00:48:15.828]  </sequence>
[00:48:15.828]  
[00:48:15.879]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.879]  
[00:48:15.879]  <debugvars>
[00:48:15.880]    // Pre-defined
[00:48:15.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.880]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.880]    __dp=0x00000000
[00:48:15.880]    __ap=0x00000000
[00:48:15.880]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.880]    __FlashAddr=0x00000000
[00:48:15.880]    __FlashLen=0x00000000
[00:48:15.881]    __FlashArg=0x00000000
[00:48:15.881]    __FlashOp=0x00000000
[00:48:15.881]    __Result=0x00000000
[00:48:15.881]  </debugvars>
[00:48:15.881]  
[00:48:15.881]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.882]    <block atomic="false" info="">
[00:48:15.882]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.882]        // -> [isSWJ <= 0x00000001]
[00:48:15.882]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.882]        // -> [hasDormant <= 0x00000000]
[00:48:15.882]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.882]        // -> [protType <= 0x00000002]
[00:48:15.882]    </block>
[00:48:15.882]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.882]      // if-block "protType == 1"
[00:48:15.883]        // =>  FALSE
[00:48:15.883]      // skip if-block "protType == 1"
[00:48:15.883]    </control>
[00:48:15.883]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.883]      // if-block "protType == 2"
[00:48:15.883]        // =>  TRUE
[00:48:15.883]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.883]        // if-block "isSWJ"
[00:48:15.883]          // =>  TRUE
[00:48:15.884]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.884]          // if-block "hasDormant"
[00:48:15.884]            // =>  FALSE
[00:48:15.884]          // skip if-block "hasDormant"
[00:48:15.884]        </control>
[00:48:15.884]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.884]          // if-block "!hasDormant"
[00:48:15.884]            // =>  TRUE
[00:48:15.884]          <block atomic="false" info="">
[00:48:15.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.886]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.892]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.892]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.905]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.907]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.907]          </block>
[00:48:15.907]          // end if-block "!hasDormant"
[00:48:15.907]        </control>
[00:48:15.908]        // end if-block "isSWJ"
[00:48:15.908]      </control>
[00:48:15.908]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.908]        // if-block "!isSWJ"
[00:48:15.908]          // =>  FALSE
[00:48:15.908]        // skip if-block "!isSWJ"
[00:48:15.908]      </control>
[00:48:15.908]      <block atomic="false" info="">
[00:48:15.909]        ReadDP(0x0);
[00:48:15.913]  
[00:48:15.913]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:15.913]  
[00:48:15.913]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:15.913]      </block>
[00:48:15.913]      // end if-block "protType == 2"
[00:48:15.913]    </control>
[00:48:15.913]  </sequence>
[00:48:15.913]  
[00:48:15.971]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:15.971]  
[00:48:15.971]  <debugvars>
[00:48:15.971]    // Pre-defined
[00:48:15.971]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:15.971]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:15.973]    __dp=0x00000000
[00:48:15.973]    __ap=0x00000000
[00:48:15.973]    __traceout=0x00000000      (Trace Disabled)
[00:48:15.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:15.973]    __FlashAddr=0x00000000
[00:48:15.973]    __FlashLen=0x00000000
[00:48:15.973]    __FlashArg=0x00000000
[00:48:15.973]    __FlashOp=0x00000000
[00:48:15.973]    __Result=0x00000000
[00:48:15.973]  </debugvars>
[00:48:15.973]  
[00:48:15.974]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:15.974]    <block atomic="false" info="">
[00:48:15.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:15.974]        // -> [isSWJ <= 0x00000001]
[00:48:15.974]      __var hasDormant = __protocol & 0x00020000;
[00:48:15.974]        // -> [hasDormant <= 0x00000000]
[00:48:15.974]      __var protType   = __protocol & 0x0000FFFF;
[00:48:15.974]        // -> [protType <= 0x00000002]
[00:48:15.974]    </block>
[00:48:15.974]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:15.975]      // if-block "protType == 1"
[00:48:15.975]        // =>  FALSE
[00:48:15.975]      // skip if-block "protType == 1"
[00:48:15.975]    </control>
[00:48:15.975]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:15.975]      // if-block "protType == 2"
[00:48:15.975]        // =>  TRUE
[00:48:15.975]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:15.975]        // if-block "isSWJ"
[00:48:15.975]          // =>  TRUE
[00:48:15.976]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:15.976]          // if-block "hasDormant"
[00:48:15.976]            // =>  FALSE
[00:48:15.976]          // skip if-block "hasDormant"
[00:48:15.976]        </control>
[00:48:15.976]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:15.976]          // if-block "!hasDormant"
[00:48:15.976]            // =>  TRUE
[00:48:15.976]          <block atomic="false" info="">
[00:48:15.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:15.982]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.983]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:15.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:15.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:15.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.991]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:15.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:15.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:15.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:15.995]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:15.998]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:15.998]          </block>
[00:48:15.998]          // end if-block "!hasDormant"
[00:48:15.998]        </control>
[00:48:15.999]        // end if-block "isSWJ"
[00:48:15.999]      </control>
[00:48:15.999]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:15.999]        // if-block "!isSWJ"
[00:48:15.999]          // =>  FALSE
[00:48:15.999]        // skip if-block "!isSWJ"
[00:48:15.999]      </control>
[00:48:15.999]      <block atomic="false" info="">
[00:48:15.999]        ReadDP(0x0);
[00:48:16.006]  
[00:48:16.006]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.006]  
[00:48:16.007]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.007]      </block>
[00:48:16.007]      // end if-block "protType == 2"
[00:48:16.007]    </control>
[00:48:16.007]  </sequence>
[00:48:16.007]  
[00:48:16.062]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.062]  
[00:48:16.062]  <debugvars>
[00:48:16.063]    // Pre-defined
[00:48:16.063]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.063]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.063]    __dp=0x00000000
[00:48:16.063]    __ap=0x00000000
[00:48:16.063]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.063]    __FlashAddr=0x00000000
[00:48:16.063]    __FlashLen=0x00000000
[00:48:16.063]    __FlashArg=0x00000000
[00:48:16.064]    __FlashOp=0x00000000
[00:48:16.064]    __Result=0x00000000
[00:48:16.064]  </debugvars>
[00:48:16.064]  
[00:48:16.064]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.064]    <block atomic="false" info="">
[00:48:16.065]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.065]        // -> [isSWJ <= 0x00000001]
[00:48:16.065]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.065]        // -> [hasDormant <= 0x00000000]
[00:48:16.065]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.065]        // -> [protType <= 0x00000002]
[00:48:16.065]    </block>
[00:48:16.066]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.066]      // if-block "protType == 1"
[00:48:16.066]        // =>  FALSE
[00:48:16.066]      // skip if-block "protType == 1"
[00:48:16.066]    </control>
[00:48:16.066]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.066]      // if-block "protType == 2"
[00:48:16.066]        // =>  TRUE
[00:48:16.067]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.067]        // if-block "isSWJ"
[00:48:16.067]          // =>  TRUE
[00:48:16.067]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.067]          // if-block "hasDormant"
[00:48:16.067]            // =>  FALSE
[00:48:16.067]          // skip if-block "hasDormant"
[00:48:16.067]        </control>
[00:48:16.067]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.068]          // if-block "!hasDormant"
[00:48:16.068]            // =>  TRUE
[00:48:16.068]          <block atomic="false" info="">
[00:48:16.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.070]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.071]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.073]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.074]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.074]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.076]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.077]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.077]          </block>
[00:48:16.077]          // end if-block "!hasDormant"
[00:48:16.078]        </control>
[00:48:16.078]        // end if-block "isSWJ"
[00:48:16.078]      </control>
[00:48:16.078]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.078]        // if-block "!isSWJ"
[00:48:16.078]          // =>  FALSE
[00:48:16.078]        // skip if-block "!isSWJ"
[00:48:16.079]      </control>
[00:48:16.079]      <block atomic="false" info="">
[00:48:16.079]        ReadDP(0x0);
[00:48:16.081]  
[00:48:16.081]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.081]  
[00:48:16.081]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.081]      </block>
[00:48:16.081]      // end if-block "protType == 2"
[00:48:16.081]    </control>
[00:48:16.081]  </sequence>
[00:48:16.081]  
[00:48:16.138]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.138]  
[00:48:16.138]  <debugvars>
[00:48:16.138]    // Pre-defined
[00:48:16.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.138]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.138]    __dp=0x00000000
[00:48:16.138]    __ap=0x00000000
[00:48:16.138]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.139]    __FlashAddr=0x00000000
[00:48:16.139]    __FlashLen=0x00000000
[00:48:16.139]    __FlashArg=0x00000000
[00:48:16.139]    __FlashOp=0x00000000
[00:48:16.139]    __Result=0x00000000
[00:48:16.139]  </debugvars>
[00:48:16.139]  
[00:48:16.139]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.139]    <block atomic="false" info="">
[00:48:16.140]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.140]        // -> [isSWJ <= 0x00000001]
[00:48:16.140]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.140]        // -> [hasDormant <= 0x00000000]
[00:48:16.140]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.140]        // -> [protType <= 0x00000002]
[00:48:16.140]    </block>
[00:48:16.140]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.140]      // if-block "protType == 1"
[00:48:16.141]        // =>  FALSE
[00:48:16.141]      // skip if-block "protType == 1"
[00:48:16.141]    </control>
[00:48:16.141]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.141]      // if-block "protType == 2"
[00:48:16.141]        // =>  TRUE
[00:48:16.141]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.141]        // if-block "isSWJ"
[00:48:16.142]          // =>  TRUE
[00:48:16.142]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.142]          // if-block "hasDormant"
[00:48:16.142]            // =>  FALSE
[00:48:16.142]          // skip if-block "hasDormant"
[00:48:16.142]        </control>
[00:48:16.143]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.143]          // if-block "!hasDormant"
[00:48:16.143]            // =>  TRUE
[00:48:16.143]          <block atomic="false" info="">
[00:48:16.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.148]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.149]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.149]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.151]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.154]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.154]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.157]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.157]          </block>
[00:48:16.157]          // end if-block "!hasDormant"
[00:48:16.158]        </control>
[00:48:16.158]        // end if-block "isSWJ"
[00:48:16.158]      </control>
[00:48:16.158]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.158]        // if-block "!isSWJ"
[00:48:16.158]          // =>  FALSE
[00:48:16.158]        // skip if-block "!isSWJ"
[00:48:16.158]      </control>
[00:48:16.159]      <block atomic="false" info="">
[00:48:16.159]        ReadDP(0x0);
[00:48:16.160]  
[00:48:16.160]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.160]  
[00:48:16.160]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.160]      </block>
[00:48:16.160]      // end if-block "protType == 2"
[00:48:16.160]    </control>
[00:48:16.161]  </sequence>
[00:48:16.161]  
[00:48:16.213]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.213]  
[00:48:16.213]  <debugvars>
[00:48:16.214]    // Pre-defined
[00:48:16.214]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.214]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.214]    __dp=0x00000000
[00:48:16.214]    __ap=0x00000000
[00:48:16.214]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.214]    __FlashAddr=0x00000000
[00:48:16.214]    __FlashLen=0x00000000
[00:48:16.214]    __FlashArg=0x00000000
[00:48:16.215]    __FlashOp=0x00000000
[00:48:16.215]    __Result=0x00000000
[00:48:16.215]  </debugvars>
[00:48:16.215]  
[00:48:16.215]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.215]    <block atomic="false" info="">
[00:48:16.215]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.216]        // -> [isSWJ <= 0x00000001]
[00:48:16.216]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.216]        // -> [hasDormant <= 0x00000000]
[00:48:16.216]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.216]        // -> [protType <= 0x00000002]
[00:48:16.216]    </block>
[00:48:16.216]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.216]      // if-block "protType == 1"
[00:48:16.216]        // =>  FALSE
[00:48:16.216]      // skip if-block "protType == 1"
[00:48:16.216]    </control>
[00:48:16.216]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.216]      // if-block "protType == 2"
[00:48:16.216]        // =>  TRUE
[00:48:16.216]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.217]        // if-block "isSWJ"
[00:48:16.217]          // =>  TRUE
[00:48:16.217]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.217]          // if-block "hasDormant"
[00:48:16.217]            // =>  FALSE
[00:48:16.217]          // skip if-block "hasDormant"
[00:48:16.217]        </control>
[00:48:16.217]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.217]          // if-block "!hasDormant"
[00:48:16.217]            // =>  TRUE
[00:48:16.218]          <block atomic="false" info="">
[00:48:16.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.219]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.220]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.222]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.223]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.225]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.227]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.227]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.228]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.228]          </block>
[00:48:16.229]          // end if-block "!hasDormant"
[00:48:16.229]        </control>
[00:48:16.229]        // end if-block "isSWJ"
[00:48:16.229]      </control>
[00:48:16.229]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.229]        // if-block "!isSWJ"
[00:48:16.229]          // =>  FALSE
[00:48:16.229]        // skip if-block "!isSWJ"
[00:48:16.229]      </control>
[00:48:16.230]      <block atomic="false" info="">
[00:48:16.230]        ReadDP(0x0);
[00:48:16.231]  
[00:48:16.231]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.231]  
[00:48:16.231]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.231]      </block>
[00:48:16.231]      // end if-block "protType == 2"
[00:48:16.231]    </control>
[00:48:16.231]  </sequence>
[00:48:16.232]  
[00:48:16.289]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.289]  
[00:48:16.289]  <debugvars>
[00:48:16.289]    // Pre-defined
[00:48:16.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.289]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.290]    __dp=0x00000000
[00:48:16.290]    __ap=0x00000000
[00:48:16.290]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.290]    __FlashAddr=0x00000000
[00:48:16.291]    __FlashLen=0x00000000
[00:48:16.291]    __FlashArg=0x00000000
[00:48:16.291]    __FlashOp=0x00000000
[00:48:16.291]    __Result=0x00000000
[00:48:16.291]  </debugvars>
[00:48:16.291]  
[00:48:16.291]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.291]    <block atomic="false" info="">
[00:48:16.291]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.291]        // -> [isSWJ <= 0x00000001]
[00:48:16.292]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.292]        // -> [hasDormant <= 0x00000000]
[00:48:16.292]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.292]        // -> [protType <= 0x00000002]
[00:48:16.292]    </block>
[00:48:16.292]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.292]      // if-block "protType == 1"
[00:48:16.292]        // =>  FALSE
[00:48:16.292]      // skip if-block "protType == 1"
[00:48:16.293]    </control>
[00:48:16.293]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.293]      // if-block "protType == 2"
[00:48:16.293]        // =>  TRUE
[00:48:16.293]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.293]        // if-block "isSWJ"
[00:48:16.293]          // =>  TRUE
[00:48:16.293]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.293]          // if-block "hasDormant"
[00:48:16.293]            // =>  FALSE
[00:48:16.294]          // skip if-block "hasDormant"
[00:48:16.294]        </control>
[00:48:16.294]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.294]          // if-block "!hasDormant"
[00:48:16.294]            // =>  TRUE
[00:48:16.294]          <block atomic="false" info="">
[00:48:16.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.296]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.296]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.297]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.299]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.299]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.302]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.303]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.303]          </block>
[00:48:16.303]          // end if-block "!hasDormant"
[00:48:16.303]        </control>
[00:48:16.303]        // end if-block "isSWJ"
[00:48:16.303]      </control>
[00:48:16.303]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.303]        // if-block "!isSWJ"
[00:48:16.303]          // =>  FALSE
[00:48:16.304]        // skip if-block "!isSWJ"
[00:48:16.304]      </control>
[00:48:16.304]      <block atomic="false" info="">
[00:48:16.304]        ReadDP(0x0);
[00:48:16.306]  
[00:48:16.306]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.306]  
[00:48:16.306]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.307]      </block>
[00:48:16.307]      // end if-block "protType == 2"
[00:48:16.307]    </control>
[00:48:16.307]  </sequence>
[00:48:16.307]  
[00:48:16.365]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.365]  
[00:48:16.365]  <debugvars>
[00:48:16.365]    // Pre-defined
[00:48:16.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.366]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.366]    __dp=0x00000000
[00:48:16.366]    __ap=0x00000000
[00:48:16.366]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.366]    __FlashAddr=0x00000000
[00:48:16.366]    __FlashLen=0x00000000
[00:48:16.366]    __FlashArg=0x00000000
[00:48:16.366]    __FlashOp=0x00000000
[00:48:16.366]    __Result=0x00000000
[00:48:16.366]  </debugvars>
[00:48:16.366]  
[00:48:16.367]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.367]    <block atomic="false" info="">
[00:48:16.367]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.367]        // -> [isSWJ <= 0x00000001]
[00:48:16.367]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.367]        // -> [hasDormant <= 0x00000000]
[00:48:16.367]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.367]        // -> [protType <= 0x00000002]
[00:48:16.367]    </block>
[00:48:16.367]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.367]      // if-block "protType == 1"
[00:48:16.368]        // =>  FALSE
[00:48:16.368]      // skip if-block "protType == 1"
[00:48:16.368]    </control>
[00:48:16.368]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.369]      // if-block "protType == 2"
[00:48:16.369]        // =>  TRUE
[00:48:16.369]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.369]        // if-block "isSWJ"
[00:48:16.369]          // =>  TRUE
[00:48:16.369]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.369]          // if-block "hasDormant"
[00:48:16.369]            // =>  FALSE
[00:48:16.370]          // skip if-block "hasDormant"
[00:48:16.370]        </control>
[00:48:16.370]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.370]          // if-block "!hasDormant"
[00:48:16.370]            // =>  TRUE
[00:48:16.370]          <block atomic="false" info="">
[00:48:16.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.371]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.374]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.374]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.375]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.377]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.377]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.379]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.379]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.382]          </block>
[00:48:16.382]          // end if-block "!hasDormant"
[00:48:16.382]        </control>
[00:48:16.382]        // end if-block "isSWJ"
[00:48:16.382]      </control>
[00:48:16.382]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.382]        // if-block "!isSWJ"
[00:48:16.382]          // =>  FALSE
[00:48:16.382]        // skip if-block "!isSWJ"
[00:48:16.382]      </control>
[00:48:16.382]      <block atomic="false" info="">
[00:48:16.383]        ReadDP(0x0);
[00:48:16.385]  
[00:48:16.385]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.385]  
[00:48:16.386]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.386]      </block>
[00:48:16.386]      // end if-block "protType == 2"
[00:48:16.386]    </control>
[00:48:16.386]  </sequence>
[00:48:16.386]  
[00:48:16.443]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.443]  
[00:48:16.445]  <debugvars>
[00:48:16.445]    // Pre-defined
[00:48:16.445]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.445]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.445]    __dp=0x00000000
[00:48:16.445]    __ap=0x00000000
[00:48:16.445]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.445]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.445]    __FlashAddr=0x00000000
[00:48:16.445]    __FlashLen=0x00000000
[00:48:16.445]    __FlashArg=0x00000000
[00:48:16.445]    __FlashOp=0x00000000
[00:48:16.445]    __Result=0x00000000
[00:48:16.445]  </debugvars>
[00:48:16.445]  
[00:48:16.445]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.445]    <block atomic="false" info="">
[00:48:16.446]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.446]        // -> [isSWJ <= 0x00000001]
[00:48:16.446]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.446]        // -> [hasDormant <= 0x00000000]
[00:48:16.446]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.446]        // -> [protType <= 0x00000002]
[00:48:16.446]    </block>
[00:48:16.446]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.446]      // if-block "protType == 1"
[00:48:16.446]        // =>  FALSE
[00:48:16.446]      // skip if-block "protType == 1"
[00:48:16.448]    </control>
[00:48:16.448]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.448]      // if-block "protType == 2"
[00:48:16.448]        // =>  TRUE
[00:48:16.448]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.448]        // if-block "isSWJ"
[00:48:16.448]          // =>  TRUE
[00:48:16.448]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.449]          // if-block "hasDormant"
[00:48:16.449]            // =>  FALSE
[00:48:16.449]          // skip if-block "hasDormant"
[00:48:16.449]        </control>
[00:48:16.449]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.449]          // if-block "!hasDormant"
[00:48:16.449]            // =>  TRUE
[00:48:16.449]          <block atomic="false" info="">
[00:48:16.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.458]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.460]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.465]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.465]          </block>
[00:48:16.465]          // end if-block "!hasDormant"
[00:48:16.465]        </control>
[00:48:16.465]        // end if-block "isSWJ"
[00:48:16.465]      </control>
[00:48:16.465]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.465]        // if-block "!isSWJ"
[00:48:16.466]          // =>  FALSE
[00:48:16.466]        // skip if-block "!isSWJ"
[00:48:16.466]      </control>
[00:48:16.466]      <block atomic="false" info="">
[00:48:16.466]        ReadDP(0x0);
[00:48:16.467]  
[00:48:16.467]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.467]  
[00:48:16.467]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.467]      </block>
[00:48:16.467]      // end if-block "protType == 2"
[00:48:16.468]    </control>
[00:48:16.468]  </sequence>
[00:48:16.468]  
[00:48:16.520]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.520]  
[00:48:16.520]  <debugvars>
[00:48:16.520]    // Pre-defined
[00:48:16.521]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.521]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.521]    __dp=0x00000000
[00:48:16.521]    __ap=0x00000000
[00:48:16.521]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.521]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.521]    __FlashAddr=0x00000000
[00:48:16.521]    __FlashLen=0x00000000
[00:48:16.521]    __FlashArg=0x00000000
[00:48:16.521]    __FlashOp=0x00000000
[00:48:16.521]    __Result=0x00000000
[00:48:16.521]  </debugvars>
[00:48:16.521]  
[00:48:16.521]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.521]    <block atomic="false" info="">
[00:48:16.522]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.522]        // -> [isSWJ <= 0x00000001]
[00:48:16.522]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.522]        // -> [hasDormant <= 0x00000000]
[00:48:16.522]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.522]        // -> [protType <= 0x00000002]
[00:48:16.522]    </block>
[00:48:16.522]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.523]      // if-block "protType == 1"
[00:48:16.523]        // =>  FALSE
[00:48:16.523]      // skip if-block "protType == 1"
[00:48:16.523]    </control>
[00:48:16.523]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.523]      // if-block "protType == 2"
[00:48:16.523]        // =>  TRUE
[00:48:16.523]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.523]        // if-block "isSWJ"
[00:48:16.524]          // =>  TRUE
[00:48:16.524]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.524]          // if-block "hasDormant"
[00:48:16.524]            // =>  FALSE
[00:48:16.524]          // skip if-block "hasDormant"
[00:48:16.524]        </control>
[00:48:16.524]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.524]          // if-block "!hasDormant"
[00:48:16.524]            // =>  TRUE
[00:48:16.524]          <block atomic="false" info="">
[00:48:16.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.526]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.530]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.530]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.532]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.539]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.541]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.541]          </block>
[00:48:16.541]          // end if-block "!hasDormant"
[00:48:16.541]        </control>
[00:48:16.541]        // end if-block "isSWJ"
[00:48:16.541]      </control>
[00:48:16.541]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.541]        // if-block "!isSWJ"
[00:48:16.541]          // =>  FALSE
[00:48:16.541]        // skip if-block "!isSWJ"
[00:48:16.541]      </control>
[00:48:16.542]      <block atomic="false" info="">
[00:48:16.542]        ReadDP(0x0);
[00:48:16.543]  
[00:48:16.543]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.543]  
[00:48:16.543]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.543]      </block>
[00:48:16.543]      // end if-block "protType == 2"
[00:48:16.543]    </control>
[00:48:16.543]  </sequence>
[00:48:16.544]  
[00:48:16.595]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.595]  
[00:48:16.595]  <debugvars>
[00:48:16.595]    // Pre-defined
[00:48:16.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.595]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.595]    __dp=0x00000000
[00:48:16.595]    __ap=0x00000000
[00:48:16.595]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.595]    __FlashAddr=0x00000000
[00:48:16.597]    __FlashLen=0x00000000
[00:48:16.597]    __FlashArg=0x00000000
[00:48:16.597]    __FlashOp=0x00000000
[00:48:16.597]    __Result=0x00000000
[00:48:16.597]  </debugvars>
[00:48:16.597]  
[00:48:16.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.597]    <block atomic="false" info="">
[00:48:16.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.597]        // -> [isSWJ <= 0x00000001]
[00:48:16.598]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.598]        // -> [hasDormant <= 0x00000000]
[00:48:16.598]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.598]        // -> [protType <= 0x00000002]
[00:48:16.598]    </block>
[00:48:16.598]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.599]      // if-block "protType == 1"
[00:48:16.599]        // =>  FALSE
[00:48:16.599]      // skip if-block "protType == 1"
[00:48:16.599]    </control>
[00:48:16.599]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.599]      // if-block "protType == 2"
[00:48:16.599]        // =>  TRUE
[00:48:16.599]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.599]        // if-block "isSWJ"
[00:48:16.599]          // =>  TRUE
[00:48:16.600]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.600]          // if-block "hasDormant"
[00:48:16.600]            // =>  FALSE
[00:48:16.600]          // skip if-block "hasDormant"
[00:48:16.600]        </control>
[00:48:16.600]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.600]          // if-block "!hasDormant"
[00:48:16.600]            // =>  TRUE
[00:48:16.600]          <block atomic="false" info="">
[00:48:16.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.602]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.606]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.611]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.611]          </block>
[00:48:16.611]          // end if-block "!hasDormant"
[00:48:16.611]        </control>
[00:48:16.611]        // end if-block "isSWJ"
[00:48:16.611]      </control>
[00:48:16.611]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.613]        // if-block "!isSWJ"
[00:48:16.613]          // =>  FALSE
[00:48:16.613]        // skip if-block "!isSWJ"
[00:48:16.613]      </control>
[00:48:16.613]      <block atomic="false" info="">
[00:48:16.613]        ReadDP(0x0);
[00:48:16.621]  
[00:48:16.621]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.621]  
[00:48:16.621]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.621]      </block>
[00:48:16.621]      // end if-block "protType == 2"
[00:48:16.621]    </control>
[00:48:16.622]  </sequence>
[00:48:16.622]  
[00:48:16.685]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.685]  
[00:48:16.685]  <debugvars>
[00:48:16.685]    // Pre-defined
[00:48:16.685]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.685]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.685]    __dp=0x00000000
[00:48:16.687]    __ap=0x00000000
[00:48:16.687]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.687]    __FlashAddr=0x00000000
[00:48:16.687]    __FlashLen=0x00000000
[00:48:16.687]    __FlashArg=0x00000000
[00:48:16.687]    __FlashOp=0x00000000
[00:48:16.687]    __Result=0x00000000
[00:48:16.687]  </debugvars>
[00:48:16.687]  
[00:48:16.688]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.688]    <block atomic="false" info="">
[00:48:16.688]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.688]        // -> [isSWJ <= 0x00000001]
[00:48:16.688]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.688]        // -> [hasDormant <= 0x00000000]
[00:48:16.688]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.688]        // -> [protType <= 0x00000002]
[00:48:16.688]    </block>
[00:48:16.688]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.689]      // if-block "protType == 1"
[00:48:16.689]        // =>  FALSE
[00:48:16.689]      // skip if-block "protType == 1"
[00:48:16.689]    </control>
[00:48:16.689]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.689]      // if-block "protType == 2"
[00:48:16.689]        // =>  TRUE
[00:48:16.689]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.689]        // if-block "isSWJ"
[00:48:16.689]          // =>  TRUE
[00:48:16.690]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.690]          // if-block "hasDormant"
[00:48:16.690]            // =>  FALSE
[00:48:16.690]          // skip if-block "hasDormant"
[00:48:16.690]        </control>
[00:48:16.690]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.690]          // if-block "!hasDormant"
[00:48:16.690]            // =>  TRUE
[00:48:16.690]          <block atomic="false" info="">
[00:48:16.690]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.692]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.695]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.697]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.699]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.700]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.700]          </block>
[00:48:16.700]          // end if-block "!hasDormant"
[00:48:16.700]        </control>
[00:48:16.700]        // end if-block "isSWJ"
[00:48:16.700]      </control>
[00:48:16.700]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.700]        // if-block "!isSWJ"
[00:48:16.701]          // =>  FALSE
[00:48:16.701]        // skip if-block "!isSWJ"
[00:48:16.701]      </control>
[00:48:16.701]      <block atomic="false" info="">
[00:48:16.701]        ReadDP(0x0);
[00:48:16.703]  
[00:48:16.703]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.703]  
[00:48:16.703]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.703]      </block>
[00:48:16.703]      // end if-block "protType == 2"
[00:48:16.703]    </control>
[00:48:16.703]  </sequence>
[00:48:16.703]  
[00:48:16.762]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.762]  
[00:48:16.762]  <debugvars>
[00:48:16.763]    // Pre-defined
[00:48:16.763]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.763]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.763]    __dp=0x00000000
[00:48:16.763]    __ap=0x00000000
[00:48:16.763]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.763]    __FlashAddr=0x00000000
[00:48:16.763]    __FlashLen=0x00000000
[00:48:16.764]    __FlashArg=0x00000000
[00:48:16.764]    __FlashOp=0x00000000
[00:48:16.764]    __Result=0x00000000
[00:48:16.764]  </debugvars>
[00:48:16.764]  
[00:48:16.764]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.764]    <block atomic="false" info="">
[00:48:16.764]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.764]        // -> [isSWJ <= 0x00000001]
[00:48:16.764]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.765]        // -> [hasDormant <= 0x00000000]
[00:48:16.765]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.765]        // -> [protType <= 0x00000002]
[00:48:16.765]    </block>
[00:48:16.765]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.765]      // if-block "protType == 1"
[00:48:16.765]        // =>  FALSE
[00:48:16.765]      // skip if-block "protType == 1"
[00:48:16.765]    </control>
[00:48:16.765]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.766]      // if-block "protType == 2"
[00:48:16.766]        // =>  TRUE
[00:48:16.766]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.766]        // if-block "isSWJ"
[00:48:16.766]          // =>  TRUE
[00:48:16.766]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.767]          // if-block "hasDormant"
[00:48:16.767]            // =>  FALSE
[00:48:16.767]          // skip if-block "hasDormant"
[00:48:16.767]        </control>
[00:48:16.767]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.767]          // if-block "!hasDormant"
[00:48:16.767]            // =>  TRUE
[00:48:16.768]          <block atomic="false" info="">
[00:48:16.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.769]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.771]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.781]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.783]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.785]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.785]          </block>
[00:48:16.785]          // end if-block "!hasDormant"
[00:48:16.785]        </control>
[00:48:16.785]        // end if-block "isSWJ"
[00:48:16.786]      </control>
[00:48:16.786]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.786]        // if-block "!isSWJ"
[00:48:16.786]          // =>  FALSE
[00:48:16.786]        // skip if-block "!isSWJ"
[00:48:16.786]      </control>
[00:48:16.786]      <block atomic="false" info="">
[00:48:16.786]        ReadDP(0x0);
[00:48:16.787]  
[00:48:16.787]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.787]  
[00:48:16.787]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.787]      </block>
[00:48:16.787]      // end if-block "protType == 2"
[00:48:16.788]    </control>
[00:48:16.788]  </sequence>
[00:48:16.788]  
[00:48:16.854]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.854]  
[00:48:16.854]  <debugvars>
[00:48:16.854]    // Pre-defined
[00:48:16.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.855]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.855]    __dp=0x00000000
[00:48:16.855]    __ap=0x00000000
[00:48:16.855]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.855]    __FlashAddr=0x00000000
[00:48:16.855]    __FlashLen=0x00000000
[00:48:16.855]    __FlashArg=0x00000000
[00:48:16.855]    __FlashOp=0x00000000
[00:48:16.855]    __Result=0x00000000
[00:48:16.855]  </debugvars>
[00:48:16.856]  
[00:48:16.856]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.856]    <block atomic="false" info="">
[00:48:16.856]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.856]        // -> [isSWJ <= 0x00000001]
[00:48:16.856]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.857]        // -> [hasDormant <= 0x00000000]
[00:48:16.857]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.857]        // -> [protType <= 0x00000002]
[00:48:16.857]    </block>
[00:48:16.857]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.857]      // if-block "protType == 1"
[00:48:16.857]        // =>  FALSE
[00:48:16.857]      // skip if-block "protType == 1"
[00:48:16.857]    </control>
[00:48:16.857]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.857]      // if-block "protType == 2"
[00:48:16.857]        // =>  TRUE
[00:48:16.857]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.857]        // if-block "isSWJ"
[00:48:16.857]          // =>  TRUE
[00:48:16.857]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.857]          // if-block "hasDormant"
[00:48:16.859]            // =>  FALSE
[00:48:16.859]          // skip if-block "hasDormant"
[00:48:16.859]        </control>
[00:48:16.859]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.859]          // if-block "!hasDormant"
[00:48:16.859]            // =>  TRUE
[00:48:16.859]          <block atomic="false" info="">
[00:48:16.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.864]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.865]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.868]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.869]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.869]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.873]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.874]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.875]          </block>
[00:48:16.875]          // end if-block "!hasDormant"
[00:48:16.875]        </control>
[00:48:16.875]        // end if-block "isSWJ"
[00:48:16.875]      </control>
[00:48:16.875]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.875]        // if-block "!isSWJ"
[00:48:16.875]          // =>  FALSE
[00:48:16.875]        // skip if-block "!isSWJ"
[00:48:16.875]      </control>
[00:48:16.876]      <block atomic="false" info="">
[00:48:16.876]        ReadDP(0x0);
[00:48:16.877]  
[00:48:16.877]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.877]  
[00:48:16.877]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.877]      </block>
[00:48:16.877]      // end if-block "protType == 2"
[00:48:16.877]    </control>
[00:48:16.877]  </sequence>
[00:48:16.877]  
[00:48:16.930]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:16.930]  
[00:48:16.930]  <debugvars>
[00:48:16.930]    // Pre-defined
[00:48:16.930]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:16.930]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:16.930]    __dp=0x00000000
[00:48:16.930]    __ap=0x00000000
[00:48:16.931]    __traceout=0x00000000      (Trace Disabled)
[00:48:16.931]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:16.931]    __FlashAddr=0x00000000
[00:48:16.931]    __FlashLen=0x00000000
[00:48:16.931]    __FlashArg=0x00000000
[00:48:16.931]    __FlashOp=0x00000000
[00:48:16.932]    __Result=0x00000000
[00:48:16.932]  </debugvars>
[00:48:16.932]  
[00:48:16.932]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:16.932]    <block atomic="false" info="">
[00:48:16.932]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:16.932]        // -> [isSWJ <= 0x00000001]
[00:48:16.932]      __var hasDormant = __protocol & 0x00020000;
[00:48:16.932]        // -> [hasDormant <= 0x00000000]
[00:48:16.932]      __var protType   = __protocol & 0x0000FFFF;
[00:48:16.933]        // -> [protType <= 0x00000002]
[00:48:16.933]    </block>
[00:48:16.933]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:16.933]      // if-block "protType == 1"
[00:48:16.933]        // =>  FALSE
[00:48:16.933]      // skip if-block "protType == 1"
[00:48:16.933]    </control>
[00:48:16.933]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:16.933]      // if-block "protType == 2"
[00:48:16.934]        // =>  TRUE
[00:48:16.934]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:16.934]        // if-block "isSWJ"
[00:48:16.934]          // =>  TRUE
[00:48:16.934]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:16.934]          // if-block "hasDormant"
[00:48:16.934]            // =>  FALSE
[00:48:16.934]          // skip if-block "hasDormant"
[00:48:16.934]        </control>
[00:48:16.934]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:16.935]          // if-block "!hasDormant"
[00:48:16.935]            // =>  TRUE
[00:48:16.935]          <block atomic="false" info="">
[00:48:16.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:16.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.937]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:16.939]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:16.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:16.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.941]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:16.942]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:16.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:16.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:16.944]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:16.947]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:16.949]          </block>
[00:48:16.949]          // end if-block "!hasDormant"
[00:48:16.949]        </control>
[00:48:16.949]        // end if-block "isSWJ"
[00:48:16.949]      </control>
[00:48:16.949]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:16.949]        // if-block "!isSWJ"
[00:48:16.949]          // =>  FALSE
[00:48:16.949]        // skip if-block "!isSWJ"
[00:48:16.949]      </control>
[00:48:16.949]      <block atomic="false" info="">
[00:48:16.950]        ReadDP(0x0);
[00:48:16.951]  
[00:48:16.951]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:16.951]  
[00:48:16.951]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:16.951]      </block>
[00:48:16.951]      // end if-block "protType == 2"
[00:48:16.951]    </control>
[00:48:16.951]  </sequence>
[00:48:16.951]  
[00:48:17.007]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.007]  
[00:48:17.007]  <debugvars>
[00:48:17.007]    // Pre-defined
[00:48:17.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.007]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.007]    __dp=0x00000000
[00:48:17.007]    __ap=0x00000000
[00:48:17.008]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.008]    __FlashAddr=0x00000000
[00:48:17.008]    __FlashLen=0x00000000
[00:48:17.008]    __FlashArg=0x00000000
[00:48:17.008]    __FlashOp=0x00000000
[00:48:17.008]    __Result=0x00000000
[00:48:17.008]  </debugvars>
[00:48:17.008]  
[00:48:17.008]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.009]    <block atomic="false" info="">
[00:48:17.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.009]        // -> [isSWJ <= 0x00000001]
[00:48:17.009]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.009]        // -> [hasDormant <= 0x00000000]
[00:48:17.009]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.010]        // -> [protType <= 0x00000002]
[00:48:17.010]    </block>
[00:48:17.010]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.010]      // if-block "protType == 1"
[00:48:17.010]        // =>  FALSE
[00:48:17.010]      // skip if-block "protType == 1"
[00:48:17.010]    </control>
[00:48:17.010]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.011]      // if-block "protType == 2"
[00:48:17.011]        // =>  TRUE
[00:48:17.011]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.011]        // if-block "isSWJ"
[00:48:17.011]          // =>  TRUE
[00:48:17.011]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.011]          // if-block "hasDormant"
[00:48:17.011]            // =>  FALSE
[00:48:17.011]          // skip if-block "hasDormant"
[00:48:17.011]        </control>
[00:48:17.011]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.011]          // if-block "!hasDormant"
[00:48:17.012]            // =>  TRUE
[00:48:17.012]          <block atomic="false" info="">
[00:48:17.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.014]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.015]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.015]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.018]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.020]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.020]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.022]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.024]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.024]          </block>
[00:48:17.024]          // end if-block "!hasDormant"
[00:48:17.024]        </control>
[00:48:17.024]        // end if-block "isSWJ"
[00:48:17.024]      </control>
[00:48:17.024]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.024]        // if-block "!isSWJ"
[00:48:17.024]          // =>  FALSE
[00:48:17.024]        // skip if-block "!isSWJ"
[00:48:17.024]      </control>
[00:48:17.024]      <block atomic="false" info="">
[00:48:17.025]        ReadDP(0x0);
[00:48:17.026]  
[00:48:17.026]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.026]  
[00:48:17.026]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.026]      </block>
[00:48:17.026]      // end if-block "protType == 2"
[00:48:17.026]    </control>
[00:48:17.026]  </sequence>
[00:48:17.026]  
[00:48:17.083]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.083]  
[00:48:17.083]  <debugvars>
[00:48:17.083]    // Pre-defined
[00:48:17.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.083]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.083]    __dp=0x00000000
[00:48:17.083]    __ap=0x00000000
[00:48:17.083]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.084]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.084]    __FlashAddr=0x00000000
[00:48:17.084]    __FlashLen=0x00000000
[00:48:17.084]    __FlashArg=0x00000000
[00:48:17.084]    __FlashOp=0x00000000
[00:48:17.084]    __Result=0x00000000
[00:48:17.084]  </debugvars>
[00:48:17.084]  
[00:48:17.084]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.084]    <block atomic="false" info="">
[00:48:17.085]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.085]        // -> [isSWJ <= 0x00000001]
[00:48:17.085]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.085]        // -> [hasDormant <= 0x00000000]
[00:48:17.086]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.086]        // -> [protType <= 0x00000002]
[00:48:17.086]    </block>
[00:48:17.086]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.086]      // if-block "protType == 1"
[00:48:17.086]        // =>  FALSE
[00:48:17.086]      // skip if-block "protType == 1"
[00:48:17.086]    </control>
[00:48:17.086]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.086]      // if-block "protType == 2"
[00:48:17.087]        // =>  TRUE
[00:48:17.087]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.087]        // if-block "isSWJ"
[00:48:17.087]          // =>  TRUE
[00:48:17.087]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.087]          // if-block "hasDormant"
[00:48:17.087]            // =>  FALSE
[00:48:17.087]          // skip if-block "hasDormant"
[00:48:17.087]        </control>
[00:48:17.087]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.087]          // if-block "!hasDormant"
[00:48:17.087]            // =>  TRUE
[00:48:17.087]          <block atomic="false" info="">
[00:48:17.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.090]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.092]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.093]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.097]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.100]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.100]          </block>
[00:48:17.100]          // end if-block "!hasDormant"
[00:48:17.100]        </control>
[00:48:17.100]        // end if-block "isSWJ"
[00:48:17.101]      </control>
[00:48:17.101]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.101]        // if-block "!isSWJ"
[00:48:17.101]          // =>  FALSE
[00:48:17.101]        // skip if-block "!isSWJ"
[00:48:17.101]      </control>
[00:48:17.101]      <block atomic="false" info="">
[00:48:17.101]        ReadDP(0x0);
[00:48:17.103]  
[00:48:17.103]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.103]  
[00:48:17.103]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.103]      </block>
[00:48:17.103]      // end if-block "protType == 2"
[00:48:17.103]    </control>
[00:48:17.103]  </sequence>
[00:48:17.103]  
[00:48:17.159]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.159]  
[00:48:17.159]  <debugvars>
[00:48:17.159]    // Pre-defined
[00:48:17.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.159]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.159]    __dp=0x00000000
[00:48:17.160]    __ap=0x00000000
[00:48:17.160]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.160]    __FlashAddr=0x00000000
[00:48:17.160]    __FlashLen=0x00000000
[00:48:17.160]    __FlashArg=0x00000000
[00:48:17.160]    __FlashOp=0x00000000
[00:48:17.160]    __Result=0x00000000
[00:48:17.160]  </debugvars>
[00:48:17.160]  
[00:48:17.161]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.161]    <block atomic="false" info="">
[00:48:17.161]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.161]        // -> [isSWJ <= 0x00000001]
[00:48:17.161]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.161]        // -> [hasDormant <= 0x00000000]
[00:48:17.161]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.161]        // -> [protType <= 0x00000002]
[00:48:17.161]    </block>
[00:48:17.161]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.162]      // if-block "protType == 1"
[00:48:17.162]        // =>  FALSE
[00:48:17.162]      // skip if-block "protType == 1"
[00:48:17.162]    </control>
[00:48:17.162]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.162]      // if-block "protType == 2"
[00:48:17.162]        // =>  TRUE
[00:48:17.163]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.163]        // if-block "isSWJ"
[00:48:17.163]          // =>  TRUE
[00:48:17.163]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.163]          // if-block "hasDormant"
[00:48:17.163]            // =>  FALSE
[00:48:17.164]          // skip if-block "hasDormant"
[00:48:17.164]        </control>
[00:48:17.164]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.164]          // if-block "!hasDormant"
[00:48:17.164]            // =>  TRUE
[00:48:17.164]          <block atomic="false" info="">
[00:48:17.164]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.171]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.172]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.175]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.175]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.182]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.183]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.183]          </block>
[00:48:17.183]          // end if-block "!hasDormant"
[00:48:17.183]        </control>
[00:48:17.184]        // end if-block "isSWJ"
[00:48:17.184]      </control>
[00:48:17.184]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.184]        // if-block "!isSWJ"
[00:48:17.184]          // =>  FALSE
[00:48:17.184]        // skip if-block "!isSWJ"
[00:48:17.184]      </control>
[00:48:17.184]      <block atomic="false" info="">
[00:48:17.184]        ReadDP(0x0);
[00:48:17.185]  
[00:48:17.186]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.186]  
[00:48:17.186]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.186]      </block>
[00:48:17.186]      // end if-block "protType == 2"
[00:48:17.186]    </control>
[00:48:17.186]  </sequence>
[00:48:17.186]  
[00:48:17.251]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.251]  
[00:48:17.252]  <debugvars>
[00:48:17.252]    // Pre-defined
[00:48:17.252]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.252]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.252]    __dp=0x00000000
[00:48:17.252]    __ap=0x00000000
[00:48:17.252]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.252]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.252]    __FlashAddr=0x00000000
[00:48:17.252]    __FlashLen=0x00000000
[00:48:17.253]    __FlashArg=0x00000000
[00:48:17.253]    __FlashOp=0x00000000
[00:48:17.253]    __Result=0x00000000
[00:48:17.253]  </debugvars>
[00:48:17.253]  
[00:48:17.253]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.253]    <block atomic="false" info="">
[00:48:17.253]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.253]        // -> [isSWJ <= 0x00000001]
[00:48:17.254]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.254]        // -> [hasDormant <= 0x00000000]
[00:48:17.254]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.254]        // -> [protType <= 0x00000002]
[00:48:17.254]    </block>
[00:48:17.254]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.255]      // if-block "protType == 1"
[00:48:17.255]        // =>  FALSE
[00:48:17.255]      // skip if-block "protType == 1"
[00:48:17.255]    </control>
[00:48:17.255]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.255]      // if-block "protType == 2"
[00:48:17.255]        // =>  TRUE
[00:48:17.255]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.255]        // if-block "isSWJ"
[00:48:17.255]          // =>  TRUE
[00:48:17.256]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.256]          // if-block "hasDormant"
[00:48:17.256]            // =>  FALSE
[00:48:17.256]          // skip if-block "hasDormant"
[00:48:17.256]        </control>
[00:48:17.256]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.256]          // if-block "!hasDormant"
[00:48:17.256]            // =>  TRUE
[00:48:17.256]          <block atomic="false" info="">
[00:48:17.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.258]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.261]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.262]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.264]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.265]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.265]          </block>
[00:48:17.265]          // end if-block "!hasDormant"
[00:48:17.266]        </control>
[00:48:17.266]        // end if-block "isSWJ"
[00:48:17.266]      </control>
[00:48:17.266]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.266]        // if-block "!isSWJ"
[00:48:17.266]          // =>  FALSE
[00:48:17.267]        // skip if-block "!isSWJ"
[00:48:17.267]      </control>
[00:48:17.267]      <block atomic="false" info="">
[00:48:17.267]        ReadDP(0x0);
[00:48:17.275]  
[00:48:17.275]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.275]  
[00:48:17.275]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.275]      </block>
[00:48:17.275]      // end if-block "protType == 2"
[00:48:17.275]    </control>
[00:48:17.275]  </sequence>
[00:48:17.275]  
[00:48:17.327]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.327]  
[00:48:17.327]  <debugvars>
[00:48:17.327]    // Pre-defined
[00:48:17.327]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.327]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.328]    __dp=0x00000000
[00:48:17.328]    __ap=0x00000000
[00:48:17.328]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.328]    __FlashAddr=0x00000000
[00:48:17.328]    __FlashLen=0x00000000
[00:48:17.329]    __FlashArg=0x00000000
[00:48:17.329]    __FlashOp=0x00000000
[00:48:17.329]    __Result=0x00000000
[00:48:17.329]  </debugvars>
[00:48:17.329]  
[00:48:17.329]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.329]    <block atomic="false" info="">
[00:48:17.329]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.329]        // -> [isSWJ <= 0x00000001]
[00:48:17.329]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.329]        // -> [hasDormant <= 0x00000000]
[00:48:17.330]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.330]        // -> [protType <= 0x00000002]
[00:48:17.330]    </block>
[00:48:17.330]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.330]      // if-block "protType == 1"
[00:48:17.330]        // =>  FALSE
[00:48:17.330]      // skip if-block "protType == 1"
[00:48:17.330]    </control>
[00:48:17.330]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.330]      // if-block "protType == 2"
[00:48:17.330]        // =>  TRUE
[00:48:17.330]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.330]        // if-block "isSWJ"
[00:48:17.332]          // =>  TRUE
[00:48:17.332]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.332]          // if-block "hasDormant"
[00:48:17.332]            // =>  FALSE
[00:48:17.332]          // skip if-block "hasDormant"
[00:48:17.332]        </control>
[00:48:17.332]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.332]          // if-block "!hasDormant"
[00:48:17.332]            // =>  TRUE
[00:48:17.333]          <block atomic="false" info="">
[00:48:17.333]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.337]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.337]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.340]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.347]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.347]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.348]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.348]          </block>
[00:48:17.348]          // end if-block "!hasDormant"
[00:48:17.348]        </control>
[00:48:17.348]        // end if-block "isSWJ"
[00:48:17.348]      </control>
[00:48:17.348]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.348]        // if-block "!isSWJ"
[00:48:17.348]          // =>  FALSE
[00:48:17.348]        // skip if-block "!isSWJ"
[00:48:17.348]      </control>
[00:48:17.348]      <block atomic="false" info="">
[00:48:17.348]        ReadDP(0x0);
[00:48:17.351]  
[00:48:17.351]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.351]  
[00:48:17.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.351]      </block>
[00:48:17.351]      // end if-block "protType == 2"
[00:48:17.351]    </control>
[00:48:17.351]  </sequence>
[00:48:17.351]  
[00:48:17.403]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.403]  
[00:48:17.403]  <debugvars>
[00:48:17.404]    // Pre-defined
[00:48:17.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.404]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.404]    __dp=0x00000000
[00:48:17.404]    __ap=0x00000000
[00:48:17.404]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.404]    __FlashAddr=0x00000000
[00:48:17.404]    __FlashLen=0x00000000
[00:48:17.404]    __FlashArg=0x00000000
[00:48:17.404]    __FlashOp=0x00000000
[00:48:17.406]    __Result=0x00000000
[00:48:17.406]  </debugvars>
[00:48:17.406]  
[00:48:17.406]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.406]    <block atomic="false" info="">
[00:48:17.406]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.406]        // -> [isSWJ <= 0x00000001]
[00:48:17.406]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.406]        // -> [hasDormant <= 0x00000000]
[00:48:17.407]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.407]        // -> [protType <= 0x00000002]
[00:48:17.407]    </block>
[00:48:17.407]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.407]      // if-block "protType == 1"
[00:48:17.407]        // =>  FALSE
[00:48:17.407]      // skip if-block "protType == 1"
[00:48:17.407]    </control>
[00:48:17.407]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.407]      // if-block "protType == 2"
[00:48:17.408]        // =>  TRUE
[00:48:17.408]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.408]        // if-block "isSWJ"
[00:48:17.408]          // =>  TRUE
[00:48:17.408]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.408]          // if-block "hasDormant"
[00:48:17.408]            // =>  FALSE
[00:48:17.408]          // skip if-block "hasDormant"
[00:48:17.408]        </control>
[00:48:17.409]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.409]          // if-block "!hasDormant"
[00:48:17.409]            // =>  TRUE
[00:48:17.409]          <block atomic="false" info="">
[00:48:17.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.411]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.411]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.412]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.414]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.421]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.421]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.423]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.423]          </block>
[00:48:17.423]          // end if-block "!hasDormant"
[00:48:17.423]        </control>
[00:48:17.423]        // end if-block "isSWJ"
[00:48:17.423]      </control>
[00:48:17.423]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.423]        // if-block "!isSWJ"
[00:48:17.423]          // =>  FALSE
[00:48:17.423]        // skip if-block "!isSWJ"
[00:48:17.423]      </control>
[00:48:17.424]      <block atomic="false" info="">
[00:48:17.424]        ReadDP(0x0);
[00:48:17.429]  
[00:48:17.429]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.429]  
[00:48:17.429]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.429]      </block>
[00:48:17.429]      // end if-block "protType == 2"
[00:48:17.429]    </control>
[00:48:17.430]  </sequence>
[00:48:17.430]  
[00:48:17.496]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.496]  
[00:48:17.496]  <debugvars>
[00:48:17.496]    // Pre-defined
[00:48:17.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.497]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.497]    __dp=0x00000000
[00:48:17.497]    __ap=0x00000000
[00:48:17.497]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.497]    __FlashAddr=0x00000000
[00:48:17.497]    __FlashLen=0x00000000
[00:48:17.497]    __FlashArg=0x00000000
[00:48:17.497]    __FlashOp=0x00000000
[00:48:17.498]    __Result=0x00000000
[00:48:17.498]  </debugvars>
[00:48:17.498]  
[00:48:17.498]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.498]    <block atomic="false" info="">
[00:48:17.498]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.498]        // -> [isSWJ <= 0x00000001]
[00:48:17.498]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.498]        // -> [hasDormant <= 0x00000000]
[00:48:17.499]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.499]        // -> [protType <= 0x00000002]
[00:48:17.499]    </block>
[00:48:17.499]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.499]      // if-block "protType == 1"
[00:48:17.499]        // =>  FALSE
[00:48:17.499]      // skip if-block "protType == 1"
[00:48:17.499]    </control>
[00:48:17.500]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.500]      // if-block "protType == 2"
[00:48:17.500]        // =>  TRUE
[00:48:17.500]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.500]        // if-block "isSWJ"
[00:48:17.500]          // =>  TRUE
[00:48:17.500]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.500]          // if-block "hasDormant"
[00:48:17.501]            // =>  FALSE
[00:48:17.501]          // skip if-block "hasDormant"
[00:48:17.501]        </control>
[00:48:17.501]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.501]          // if-block "!hasDormant"
[00:48:17.501]            // =>  TRUE
[00:48:17.501]          <block atomic="false" info="">
[00:48:17.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.505]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.509]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.522]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.527]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.527]          </block>
[00:48:17.527]          // end if-block "!hasDormant"
[00:48:17.528]        </control>
[00:48:17.528]        // end if-block "isSWJ"
[00:48:17.528]      </control>
[00:48:17.528]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.528]        // if-block "!isSWJ"
[00:48:17.528]          // =>  FALSE
[00:48:17.528]        // skip if-block "!isSWJ"
[00:48:17.528]      </control>
[00:48:17.528]      <block atomic="false" info="">
[00:48:17.528]        ReadDP(0x0);
[00:48:17.534]  
[00:48:17.534]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.534]  
[00:48:17.534]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.535]      </block>
[00:48:17.535]      // end if-block "protType == 2"
[00:48:17.535]    </control>
[00:48:17.535]  </sequence>
[00:48:17.535]  
[00:48:17.587]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.587]  
[00:48:17.588]  <debugvars>
[00:48:17.588]    // Pre-defined
[00:48:17.588]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.588]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.588]    __dp=0x00000000
[00:48:17.588]    __ap=0x00000000
[00:48:17.588]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.588]    __FlashAddr=0x00000000
[00:48:17.588]    __FlashLen=0x00000000
[00:48:17.589]    __FlashArg=0x00000000
[00:48:17.589]    __FlashOp=0x00000000
[00:48:17.589]    __Result=0x00000000
[00:48:17.589]  </debugvars>
[00:48:17.589]  
[00:48:17.589]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.589]    <block atomic="false" info="">
[00:48:17.589]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.589]        // -> [isSWJ <= 0x00000001]
[00:48:17.590]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.590]        // -> [hasDormant <= 0x00000000]
[00:48:17.590]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.590]        // -> [protType <= 0x00000002]
[00:48:17.590]    </block>
[00:48:17.590]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.590]      // if-block "protType == 1"
[00:48:17.590]        // =>  FALSE
[00:48:17.591]      // skip if-block "protType == 1"
[00:48:17.591]    </control>
[00:48:17.591]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.591]      // if-block "protType == 2"
[00:48:17.591]        // =>  TRUE
[00:48:17.591]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.591]        // if-block "isSWJ"
[00:48:17.591]          // =>  TRUE
[00:48:17.591]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.592]          // if-block "hasDormant"
[00:48:17.592]            // =>  FALSE
[00:48:17.592]          // skip if-block "hasDormant"
[00:48:17.592]        </control>
[00:48:17.592]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.592]          // if-block "!hasDormant"
[00:48:17.592]            // =>  TRUE
[00:48:17.593]          <block atomic="false" info="">
[00:48:17.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.599]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.603]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.604]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.605]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.607]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.607]          </block>
[00:48:17.607]          // end if-block "!hasDormant"
[00:48:17.607]        </control>
[00:48:17.607]        // end if-block "isSWJ"
[00:48:17.608]      </control>
[00:48:17.608]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.608]        // if-block "!isSWJ"
[00:48:17.608]          // =>  FALSE
[00:48:17.608]        // skip if-block "!isSWJ"
[00:48:17.608]      </control>
[00:48:17.608]      <block atomic="false" info="">
[00:48:17.608]        ReadDP(0x0);
[00:48:17.610]  
[00:48:17.610]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.610]  
[00:48:17.610]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.610]      </block>
[00:48:17.610]      // end if-block "protType == 2"
[00:48:17.610]    </control>
[00:48:17.610]  </sequence>
[00:48:17.610]  
[00:48:17.663]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.663]  
[00:48:17.663]  <debugvars>
[00:48:17.663]    // Pre-defined
[00:48:17.664]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.664]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.664]    __dp=0x00000000
[00:48:17.664]    __ap=0x00000000
[00:48:17.664]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.664]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.664]    __FlashAddr=0x00000000
[00:48:17.664]    __FlashLen=0x00000000
[00:48:17.664]    __FlashArg=0x00000000
[00:48:17.665]    __FlashOp=0x00000000
[00:48:17.665]    __Result=0x00000000
[00:48:17.665]  </debugvars>
[00:48:17.665]  
[00:48:17.665]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.665]    <block atomic="false" info="">
[00:48:17.665]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.665]        // -> [isSWJ <= 0x00000001]
[00:48:17.665]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.665]        // -> [hasDormant <= 0x00000000]
[00:48:17.665]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.665]        // -> [protType <= 0x00000002]
[00:48:17.667]    </block>
[00:48:17.667]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.667]      // if-block "protType == 1"
[00:48:17.667]        // =>  FALSE
[00:48:17.667]      // skip if-block "protType == 1"
[00:48:17.667]    </control>
[00:48:17.667]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.667]      // if-block "protType == 2"
[00:48:17.667]        // =>  TRUE
[00:48:17.667]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.668]        // if-block "isSWJ"
[00:48:17.668]          // =>  TRUE
[00:48:17.668]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.668]          // if-block "hasDormant"
[00:48:17.668]            // =>  FALSE
[00:48:17.668]          // skip if-block "hasDormant"
[00:48:17.668]        </control>
[00:48:17.668]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.668]          // if-block "!hasDormant"
[00:48:17.669]            // =>  TRUE
[00:48:17.669]          <block atomic="false" info="">
[00:48:17.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.670]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.670]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.672]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.674]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.677]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.679]          </block>
[00:48:17.679]          // end if-block "!hasDormant"
[00:48:17.679]        </control>
[00:48:17.679]        // end if-block "isSWJ"
[00:48:17.679]      </control>
[00:48:17.679]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.679]        // if-block "!isSWJ"
[00:48:17.680]          // =>  FALSE
[00:48:17.680]        // skip if-block "!isSWJ"
[00:48:17.680]      </control>
[00:48:17.680]      <block atomic="false" info="">
[00:48:17.680]        ReadDP(0x0);
[00:48:17.681]  
[00:48:17.681]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.681]  
[00:48:17.681]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.681]      </block>
[00:48:17.681]      // end if-block "protType == 2"
[00:48:17.681]    </control>
[00:48:17.681]  </sequence>
[00:48:17.682]  
[00:48:17.739]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.739]  
[00:48:17.739]  <debugvars>
[00:48:17.739]    // Pre-defined
[00:48:17.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.740]    __dp=0x00000000
[00:48:17.740]    __ap=0x00000000
[00:48:17.740]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.740]    __FlashAddr=0x00000000
[00:48:17.740]    __FlashLen=0x00000000
[00:48:17.740]    __FlashArg=0x00000000
[00:48:17.740]    __FlashOp=0x00000000
[00:48:17.740]    __Result=0x00000000
[00:48:17.740]  </debugvars>
[00:48:17.740]  
[00:48:17.740]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.740]    <block atomic="false" info="">
[00:48:17.741]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.741]        // -> [isSWJ <= 0x00000001]
[00:48:17.741]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.741]        // -> [hasDormant <= 0x00000000]
[00:48:17.741]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.741]        // -> [protType <= 0x00000002]
[00:48:17.741]    </block>
[00:48:17.741]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.742]      // if-block "protType == 1"
[00:48:17.742]        // =>  FALSE
[00:48:17.742]      // skip if-block "protType == 1"
[00:48:17.742]    </control>
[00:48:17.742]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.742]      // if-block "protType == 2"
[00:48:17.742]        // =>  TRUE
[00:48:17.742]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.743]        // if-block "isSWJ"
[00:48:17.743]          // =>  TRUE
[00:48:17.743]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.743]          // if-block "hasDormant"
[00:48:17.743]            // =>  FALSE
[00:48:17.743]          // skip if-block "hasDormant"
[00:48:17.743]        </control>
[00:48:17.743]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.743]          // if-block "!hasDormant"
[00:48:17.744]            // =>  TRUE
[00:48:17.744]          <block atomic="false" info="">
[00:48:17.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.748]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.754]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.755]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.758]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.758]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.761]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.761]          </block>
[00:48:17.761]          // end if-block "!hasDormant"
[00:48:17.762]        </control>
[00:48:17.762]        // end if-block "isSWJ"
[00:48:17.762]      </control>
[00:48:17.762]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.762]        // if-block "!isSWJ"
[00:48:17.762]          // =>  FALSE
[00:48:17.762]        // skip if-block "!isSWJ"
[00:48:17.763]      </control>
[00:48:17.763]      <block atomic="false" info="">
[00:48:17.763]        ReadDP(0x0);
[00:48:17.765]  
[00:48:17.765]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.765]  
[00:48:17.765]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.765]      </block>
[00:48:17.765]      // end if-block "protType == 2"
[00:48:17.765]    </control>
[00:48:17.765]  </sequence>
[00:48:17.765]  
[00:48:17.830]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.830]  
[00:48:17.831]  <debugvars>
[00:48:17.831]    // Pre-defined
[00:48:17.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.831]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.831]    __dp=0x00000000
[00:48:17.831]    __ap=0x00000000
[00:48:17.831]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.831]    __FlashAddr=0x00000000
[00:48:17.831]    __FlashLen=0x00000000
[00:48:17.831]    __FlashArg=0x00000000
[00:48:17.832]    __FlashOp=0x00000000
[00:48:17.832]    __Result=0x00000000
[00:48:17.832]  </debugvars>
[00:48:17.832]  
[00:48:17.832]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.832]    <block atomic="false" info="">
[00:48:17.832]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.832]        // -> [isSWJ <= 0x00000001]
[00:48:17.832]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.833]        // -> [hasDormant <= 0x00000000]
[00:48:17.833]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.833]        // -> [protType <= 0x00000002]
[00:48:17.833]    </block>
[00:48:17.833]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.833]      // if-block "protType == 1"
[00:48:17.834]        // =>  FALSE
[00:48:17.834]      // skip if-block "protType == 1"
[00:48:17.834]    </control>
[00:48:17.834]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.834]      // if-block "protType == 2"
[00:48:17.834]        // =>  TRUE
[00:48:17.834]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.834]        // if-block "isSWJ"
[00:48:17.834]          // =>  TRUE
[00:48:17.835]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.835]          // if-block "hasDormant"
[00:48:17.835]            // =>  FALSE
[00:48:17.835]          // skip if-block "hasDormant"
[00:48:17.835]        </control>
[00:48:17.835]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.836]          // if-block "!hasDormant"
[00:48:17.836]            // =>  TRUE
[00:48:17.836]          <block atomic="false" info="">
[00:48:17.836]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.838]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.838]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.839]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.841]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.842]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.842]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.844]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.844]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.845]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.845]          </block>
[00:48:17.845]          // end if-block "!hasDormant"
[00:48:17.845]        </control>
[00:48:17.846]        // end if-block "isSWJ"
[00:48:17.846]      </control>
[00:48:17.846]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.846]        // if-block "!isSWJ"
[00:48:17.846]          // =>  FALSE
[00:48:17.846]        // skip if-block "!isSWJ"
[00:48:17.846]      </control>
[00:48:17.846]      <block atomic="false" info="">
[00:48:17.846]        ReadDP(0x0);
[00:48:17.850]  
[00:48:17.850]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.850]  
[00:48:17.850]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.850]      </block>
[00:48:17.850]      // end if-block "protType == 2"
[00:48:17.850]    </control>
[00:48:17.850]  </sequence>
[00:48:17.850]  
[00:48:17.906]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.906]  
[00:48:17.907]  <debugvars>
[00:48:17.907]    // Pre-defined
[00:48:17.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.907]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.907]    __dp=0x00000000
[00:48:17.907]    __ap=0x00000000
[00:48:17.907]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.907]    __FlashAddr=0x00000000
[00:48:17.907]    __FlashLen=0x00000000
[00:48:17.907]    __FlashArg=0x00000000
[00:48:17.907]    __FlashOp=0x00000000
[00:48:17.907]    __Result=0x00000000
[00:48:17.908]  </debugvars>
[00:48:17.908]  
[00:48:17.908]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.908]    <block atomic="false" info="">
[00:48:17.908]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.908]        // -> [isSWJ <= 0x00000001]
[00:48:17.908]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.908]        // -> [hasDormant <= 0x00000000]
[00:48:17.908]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.909]        // -> [protType <= 0x00000002]
[00:48:17.909]    </block>
[00:48:17.909]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:17.909]      // if-block "protType == 1"
[00:48:17.909]        // =>  FALSE
[00:48:17.910]      // skip if-block "protType == 1"
[00:48:17.910]    </control>
[00:48:17.910]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:17.910]      // if-block "protType == 2"
[00:48:17.910]        // =>  TRUE
[00:48:17.910]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:17.910]        // if-block "isSWJ"
[00:48:17.910]          // =>  TRUE
[00:48:17.910]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:17.910]          // if-block "hasDormant"
[00:48:17.911]            // =>  FALSE
[00:48:17.911]          // skip if-block "hasDormant"
[00:48:17.911]        </control>
[00:48:17.911]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:17.911]          // if-block "!hasDormant"
[00:48:17.911]            // =>  TRUE
[00:48:17.911]          <block atomic="false" info="">
[00:48:17.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:17.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.914]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:17.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:17.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:17.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.917]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:17.918]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:17.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:17.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:17.925]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:17.926]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:17.926]          </block>
[00:48:17.926]          // end if-block "!hasDormant"
[00:48:17.926]        </control>
[00:48:17.926]        // end if-block "isSWJ"
[00:48:17.927]      </control>
[00:48:17.927]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:17.927]        // if-block "!isSWJ"
[00:48:17.927]          // =>  FALSE
[00:48:17.927]        // skip if-block "!isSWJ"
[00:48:17.927]      </control>
[00:48:17.927]      <block atomic="false" info="">
[00:48:17.927]        ReadDP(0x0);
[00:48:17.931]  
[00:48:17.931]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:17.931]  
[00:48:17.932]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:17.932]      </block>
[00:48:17.932]      // end if-block "protType == 2"
[00:48:17.932]    </control>
[00:48:17.932]  </sequence>
[00:48:17.932]  
[00:48:17.996]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:17.996]  
[00:48:17.997]  <debugvars>
[00:48:17.997]    // Pre-defined
[00:48:17.997]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:17.997]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:17.998]    __dp=0x00000000
[00:48:17.998]    __ap=0x00000000
[00:48:17.998]    __traceout=0x00000000      (Trace Disabled)
[00:48:17.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:17.998]    __FlashAddr=0x00000000
[00:48:17.998]    __FlashLen=0x00000000
[00:48:17.998]    __FlashArg=0x00000000
[00:48:17.998]    __FlashOp=0x00000000
[00:48:17.998]    __Result=0x00000000
[00:48:17.999]  </debugvars>
[00:48:17.999]  
[00:48:17.999]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:17.999]    <block atomic="false" info="">
[00:48:17.999]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:17.999]        // -> [isSWJ <= 0x00000001]
[00:48:17.999]      __var hasDormant = __protocol & 0x00020000;
[00:48:17.999]        // -> [hasDormant <= 0x00000000]
[00:48:17.999]      __var protType   = __protocol & 0x0000FFFF;
[00:48:17.999]        // -> [protType <= 0x00000002]
[00:48:18.000]    </block>
[00:48:18.000]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.000]      // if-block "protType == 1"
[00:48:18.000]        // =>  FALSE
[00:48:18.000]      // skip if-block "protType == 1"
[00:48:18.000]    </control>
[00:48:18.000]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.000]      // if-block "protType == 2"
[00:48:18.000]        // =>  TRUE
[00:48:18.000]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.000]        // if-block "isSWJ"
[00:48:18.000]          // =>  TRUE
[00:48:18.001]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.001]          // if-block "hasDormant"
[00:48:18.001]            // =>  FALSE
[00:48:18.001]          // skip if-block "hasDormant"
[00:48:18.001]        </control>
[00:48:18.001]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.001]          // if-block "!hasDormant"
[00:48:18.001]            // =>  TRUE
[00:48:18.001]          <block atomic="false" info="">
[00:48:18.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.003]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.003]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.008]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.008]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.012]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.014]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.015]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.016]          </block>
[00:48:18.016]          // end if-block "!hasDormant"
[00:48:18.017]        </control>
[00:48:18.017]        // end if-block "isSWJ"
[00:48:18.017]      </control>
[00:48:18.017]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.017]        // if-block "!isSWJ"
[00:48:18.017]          // =>  FALSE
[00:48:18.017]        // skip if-block "!isSWJ"
[00:48:18.017]      </control>
[00:48:18.017]      <block atomic="false" info="">
[00:48:18.017]        ReadDP(0x0);
[00:48:18.019]  
[00:48:18.019]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.019]  
[00:48:18.019]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.019]      </block>
[00:48:18.019]      // end if-block "protType == 2"
[00:48:18.019]    </control>
[00:48:18.019]  </sequence>
[00:48:18.020]  
[00:48:18.073]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.073]  
[00:48:18.073]  <debugvars>
[00:48:18.075]    // Pre-defined
[00:48:18.075]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.075]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.075]    __dp=0x00000000
[00:48:18.075]    __ap=0x00000000
[00:48:18.075]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.075]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.075]    __FlashAddr=0x00000000
[00:48:18.075]    __FlashLen=0x00000000
[00:48:18.076]    __FlashArg=0x00000000
[00:48:18.076]    __FlashOp=0x00000000
[00:48:18.076]    __Result=0x00000000
[00:48:18.076]  </debugvars>
[00:48:18.076]  
[00:48:18.076]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.076]    <block atomic="false" info="">
[00:48:18.076]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.076]        // -> [isSWJ <= 0x00000001]
[00:48:18.076]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.077]        // -> [hasDormant <= 0x00000000]
[00:48:18.077]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.077]        // -> [protType <= 0x00000002]
[00:48:18.077]    </block>
[00:48:18.077]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.077]      // if-block "protType == 1"
[00:48:18.077]        // =>  FALSE
[00:48:18.077]      // skip if-block "protType == 1"
[00:48:18.077]    </control>
[00:48:18.078]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.078]      // if-block "protType == 2"
[00:48:18.078]        // =>  TRUE
[00:48:18.078]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.078]        // if-block "isSWJ"
[00:48:18.078]          // =>  TRUE
[00:48:18.078]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.078]          // if-block "hasDormant"
[00:48:18.078]            // =>  FALSE
[00:48:18.078]          // skip if-block "hasDormant"
[00:48:18.079]        </control>
[00:48:18.079]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.079]          // if-block "!hasDormant"
[00:48:18.079]            // =>  TRUE
[00:48:18.079]          <block atomic="false" info="">
[00:48:18.079]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.081]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.082]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.084]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.084]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.085]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.085]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.087]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.088]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.092]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.093]          </block>
[00:48:18.093]          // end if-block "!hasDormant"
[00:48:18.093]        </control>
[00:48:18.093]        // end if-block "isSWJ"
[00:48:18.093]      </control>
[00:48:18.093]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.093]        // if-block "!isSWJ"
[00:48:18.093]          // =>  FALSE
[00:48:18.093]        // skip if-block "!isSWJ"
[00:48:18.094]      </control>
[00:48:18.094]      <block atomic="false" info="">
[00:48:18.094]        ReadDP(0x0);
[00:48:18.096]  
[00:48:18.096]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.096]  
[00:48:18.096]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.096]      </block>
[00:48:18.096]      // end if-block "protType == 2"
[00:48:18.096]    </control>
[00:48:18.096]  </sequence>
[00:48:18.097]  
[00:48:18.149]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.149]  
[00:48:18.149]  <debugvars>
[00:48:18.149]    // Pre-defined
[00:48:18.149]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.149]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.150]    __dp=0x00000000
[00:48:18.150]    __ap=0x00000000
[00:48:18.150]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.150]    __FlashAddr=0x00000000
[00:48:18.150]    __FlashLen=0x00000000
[00:48:18.150]    __FlashArg=0x00000000
[00:48:18.150]    __FlashOp=0x00000000
[00:48:18.150]    __Result=0x00000000
[00:48:18.150]  </debugvars>
[00:48:18.151]  
[00:48:18.151]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.151]    <block atomic="false" info="">
[00:48:18.151]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.151]        // -> [isSWJ <= 0x00000001]
[00:48:18.151]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.151]        // -> [hasDormant <= 0x00000000]
[00:48:18.151]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.151]        // -> [protType <= 0x00000002]
[00:48:18.152]    </block>
[00:48:18.152]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.152]      // if-block "protType == 1"
[00:48:18.152]        // =>  FALSE
[00:48:18.152]      // skip if-block "protType == 1"
[00:48:18.152]    </control>
[00:48:18.153]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.153]      // if-block "protType == 2"
[00:48:18.153]        // =>  TRUE
[00:48:18.153]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.153]        // if-block "isSWJ"
[00:48:18.153]          // =>  TRUE
[00:48:18.153]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.153]          // if-block "hasDormant"
[00:48:18.154]            // =>  FALSE
[00:48:18.154]          // skip if-block "hasDormant"
[00:48:18.154]        </control>
[00:48:18.154]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.154]          // if-block "!hasDormant"
[00:48:18.154]            // =>  TRUE
[00:48:18.154]          <block atomic="false" info="">
[00:48:18.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.159]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.159]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.168]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.169]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.169]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.182]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.183]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.183]          </block>
[00:48:18.183]          // end if-block "!hasDormant"
[00:48:18.184]        </control>
[00:48:18.184]        // end if-block "isSWJ"
[00:48:18.184]      </control>
[00:48:18.184]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.184]        // if-block "!isSWJ"
[00:48:18.184]          // =>  FALSE
[00:48:18.184]        // skip if-block "!isSWJ"
[00:48:18.184]      </control>
[00:48:18.184]      <block atomic="false" info="">
[00:48:18.184]        ReadDP(0x0);
[00:48:18.186]  
[00:48:18.186]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.186]  
[00:48:18.186]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.186]      </block>
[00:48:18.186]      // end if-block "protType == 2"
[00:48:18.186]    </control>
[00:48:18.186]  </sequence>
[00:48:18.186]  
[00:48:18.241]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.241]  
[00:48:18.241]  <debugvars>
[00:48:18.241]    // Pre-defined
[00:48:18.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.241]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.241]    __dp=0x00000000
[00:48:18.241]    __ap=0x00000000
[00:48:18.241]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.241]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.241]    __FlashAddr=0x00000000
[00:48:18.243]    __FlashLen=0x00000000
[00:48:18.243]    __FlashArg=0x00000000
[00:48:18.243]    __FlashOp=0x00000000
[00:48:18.243]    __Result=0x00000000
[00:48:18.243]  </debugvars>
[00:48:18.243]  
[00:48:18.243]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.243]    <block atomic="false" info="">
[00:48:18.243]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.243]        // -> [isSWJ <= 0x00000001]
[00:48:18.244]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.244]        // -> [hasDormant <= 0x00000000]
[00:48:18.244]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.244]        // -> [protType <= 0x00000002]
[00:48:18.244]    </block>
[00:48:18.244]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.244]      // if-block "protType == 1"
[00:48:18.244]        // =>  FALSE
[00:48:18.244]      // skip if-block "protType == 1"
[00:48:18.244]    </control>
[00:48:18.245]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.245]      // if-block "protType == 2"
[00:48:18.245]        // =>  TRUE
[00:48:18.245]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.245]        // if-block "isSWJ"
[00:48:18.245]          // =>  TRUE
[00:48:18.245]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.246]          // if-block "hasDormant"
[00:48:18.246]            // =>  FALSE
[00:48:18.246]          // skip if-block "hasDormant"
[00:48:18.246]        </control>
[00:48:18.246]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.246]          // if-block "!hasDormant"
[00:48:18.246]            // =>  TRUE
[00:48:18.247]          <block atomic="false" info="">
[00:48:18.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.248]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.250]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.259]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.260]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.262]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.264]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.264]          </block>
[00:48:18.264]          // end if-block "!hasDormant"
[00:48:18.264]        </control>
[00:48:18.264]        // end if-block "isSWJ"
[00:48:18.264]      </control>
[00:48:18.265]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.265]        // if-block "!isSWJ"
[00:48:18.265]          // =>  FALSE
[00:48:18.265]        // skip if-block "!isSWJ"
[00:48:18.265]      </control>
[00:48:18.266]      <block atomic="false" info="">
[00:48:18.266]        ReadDP(0x0);
[00:48:18.268]  
[00:48:18.268]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.268]  
[00:48:18.268]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.268]      </block>
[00:48:18.269]      // end if-block "protType == 2"
[00:48:18.269]    </control>
[00:48:18.269]  </sequence>
[00:48:18.269]  
[00:48:18.333]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.333]  
[00:48:18.333]  <debugvars>
[00:48:18.333]    // Pre-defined
[00:48:18.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.333]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.334]    __dp=0x00000000
[00:48:18.334]    __ap=0x00000000
[00:48:18.334]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.334]    __FlashAddr=0x00000000
[00:48:18.334]    __FlashLen=0x00000000
[00:48:18.334]    __FlashArg=0x00000000
[00:48:18.334]    __FlashOp=0x00000000
[00:48:18.334]    __Result=0x00000000
[00:48:18.334]  </debugvars>
[00:48:18.335]  
[00:48:18.335]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.335]    <block atomic="false" info="">
[00:48:18.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.335]        // -> [isSWJ <= 0x00000001]
[00:48:18.335]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.335]        // -> [hasDormant <= 0x00000000]
[00:48:18.335]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.335]        // -> [protType <= 0x00000002]
[00:48:18.335]    </block>
[00:48:18.335]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.336]      // if-block "protType == 1"
[00:48:18.336]        // =>  FALSE
[00:48:18.336]      // skip if-block "protType == 1"
[00:48:18.336]    </control>
[00:48:18.336]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.336]      // if-block "protType == 2"
[00:48:18.336]        // =>  TRUE
[00:48:18.336]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.337]        // if-block "isSWJ"
[00:48:18.337]          // =>  TRUE
[00:48:18.337]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.337]          // if-block "hasDormant"
[00:48:18.337]            // =>  FALSE
[00:48:18.337]          // skip if-block "hasDormant"
[00:48:18.337]        </control>
[00:48:18.338]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.338]          // if-block "!hasDormant"
[00:48:18.338]            // =>  TRUE
[00:48:18.338]          <block atomic="false" info="">
[00:48:18.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.341]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.344]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.348]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.350]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.350]          </block>
[00:48:18.350]          // end if-block "!hasDormant"
[00:48:18.350]        </control>
[00:48:18.350]        // end if-block "isSWJ"
[00:48:18.350]      </control>
[00:48:18.350]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.350]        // if-block "!isSWJ"
[00:48:18.350]          // =>  FALSE
[00:48:18.351]        // skip if-block "!isSWJ"
[00:48:18.351]      </control>
[00:48:18.351]      <block atomic="false" info="">
[00:48:18.351]        ReadDP(0x0);
[00:48:18.354]  
[00:48:18.354]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.354]  
[00:48:18.354]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.354]      </block>
[00:48:18.354]      // end if-block "protType == 2"
[00:48:18.354]    </control>
[00:48:18.354]  </sequence>
[00:48:18.355]  
[00:48:18.409]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.409]  
[00:48:18.409]  <debugvars>
[00:48:18.409]    // Pre-defined
[00:48:18.409]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.410]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.410]    __dp=0x00000000
[00:48:18.410]    __ap=0x00000000
[00:48:18.410]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.410]    __FlashAddr=0x00000000
[00:48:18.410]    __FlashLen=0x00000000
[00:48:18.410]    __FlashArg=0x00000000
[00:48:18.410]    __FlashOp=0x00000000
[00:48:18.410]    __Result=0x00000000
[00:48:18.410]  </debugvars>
[00:48:18.410]  
[00:48:18.411]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.411]    <block atomic="false" info="">
[00:48:18.411]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.411]        // -> [isSWJ <= 0x00000001]
[00:48:18.411]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.411]        // -> [hasDormant <= 0x00000000]
[00:48:18.411]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.411]        // -> [protType <= 0x00000002]
[00:48:18.411]    </block>
[00:48:18.412]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.412]      // if-block "protType == 1"
[00:48:18.412]        // =>  FALSE
[00:48:18.412]      // skip if-block "protType == 1"
[00:48:18.412]    </control>
[00:48:18.412]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.413]      // if-block "protType == 2"
[00:48:18.413]        // =>  TRUE
[00:48:18.413]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.413]        // if-block "isSWJ"
[00:48:18.413]          // =>  TRUE
[00:48:18.413]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.413]          // if-block "hasDormant"
[00:48:18.413]            // =>  FALSE
[00:48:18.413]          // skip if-block "hasDormant"
[00:48:18.413]        </control>
[00:48:18.413]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.414]          // if-block "!hasDormant"
[00:48:18.414]            // =>  TRUE
[00:48:18.414]          <block atomic="false" info="">
[00:48:18.414]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.419]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.423]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.424]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.425]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.427]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.427]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.429]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.429]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.430]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.431]          </block>
[00:48:18.431]          // end if-block "!hasDormant"
[00:48:18.431]        </control>
[00:48:18.431]        // end if-block "isSWJ"
[00:48:18.431]      </control>
[00:48:18.431]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.431]        // if-block "!isSWJ"
[00:48:18.432]          // =>  FALSE
[00:48:18.432]        // skip if-block "!isSWJ"
[00:48:18.432]      </control>
[00:48:18.432]      <block atomic="false" info="">
[00:48:18.432]        ReadDP(0x0);
[00:48:18.433]  
[00:48:18.433]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.433]  
[00:48:18.433]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.433]      </block>
[00:48:18.433]      // end if-block "protType == 2"
[00:48:18.433]    </control>
[00:48:18.435]  </sequence>
[00:48:18.435]  
[00:48:18.485]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.485]  
[00:48:18.485]  <debugvars>
[00:48:18.485]    // Pre-defined
[00:48:18.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.485]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.485]    __dp=0x00000000
[00:48:18.486]    __ap=0x00000000
[00:48:18.486]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.486]    __FlashAddr=0x00000000
[00:48:18.486]    __FlashLen=0x00000000
[00:48:18.486]    __FlashArg=0x00000000
[00:48:18.486]    __FlashOp=0x00000000
[00:48:18.486]    __Result=0x00000000
[00:48:18.486]  </debugvars>
[00:48:18.486]  
[00:48:18.487]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.487]    <block atomic="false" info="">
[00:48:18.487]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.487]        // -> [isSWJ <= 0x00000001]
[00:48:18.487]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.487]        // -> [hasDormant <= 0x00000000]
[00:48:18.487]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.487]        // -> [protType <= 0x00000002]
[00:48:18.488]    </block>
[00:48:18.488]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.488]      // if-block "protType == 1"
[00:48:18.488]        // =>  FALSE
[00:48:18.488]      // skip if-block "protType == 1"
[00:48:18.488]    </control>
[00:48:18.488]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.488]      // if-block "protType == 2"
[00:48:18.489]        // =>  TRUE
[00:48:18.489]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.489]        // if-block "isSWJ"
[00:48:18.489]          // =>  TRUE
[00:48:18.489]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.489]          // if-block "hasDormant"
[00:48:18.489]            // =>  FALSE
[00:48:18.489]          // skip if-block "hasDormant"
[00:48:18.489]        </control>
[00:48:18.489]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.489]          // if-block "!hasDormant"
[00:48:18.490]            // =>  TRUE
[00:48:18.490]          <block atomic="false" info="">
[00:48:18.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.493]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.495]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.496]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.496]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.503]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.506]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.507]          </block>
[00:48:18.507]          // end if-block "!hasDormant"
[00:48:18.507]        </control>
[00:48:18.507]        // end if-block "isSWJ"
[00:48:18.507]      </control>
[00:48:18.507]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.507]        // if-block "!isSWJ"
[00:48:18.507]          // =>  FALSE
[00:48:18.508]        // skip if-block "!isSWJ"
[00:48:18.508]      </control>
[00:48:18.508]      <block atomic="false" info="">
[00:48:18.508]        ReadDP(0x0);
[00:48:18.511]  
[00:48:18.511]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.511]  
[00:48:18.511]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.512]      </block>
[00:48:18.512]      // end if-block "protType == 2"
[00:48:18.512]    </control>
[00:48:18.512]  </sequence>
[00:48:18.512]  
[00:48:18.577]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.577]  
[00:48:18.577]  <debugvars>
[00:48:18.578]    // Pre-defined
[00:48:18.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.578]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.578]    __dp=0x00000000
[00:48:18.578]    __ap=0x00000000
[00:48:18.578]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.578]    __FlashAddr=0x00000000
[00:48:18.578]    __FlashLen=0x00000000
[00:48:18.578]    __FlashArg=0x00000000
[00:48:18.578]    __FlashOp=0x00000000
[00:48:18.579]    __Result=0x00000000
[00:48:18.579]  </debugvars>
[00:48:18.579]  
[00:48:18.579]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.579]    <block atomic="false" info="">
[00:48:18.579]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.580]        // -> [isSWJ <= 0x00000001]
[00:48:18.580]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.580]        // -> [hasDormant <= 0x00000000]
[00:48:18.580]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.580]        // -> [protType <= 0x00000002]
[00:48:18.580]    </block>
[00:48:18.580]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.580]      // if-block "protType == 1"
[00:48:18.580]        // =>  FALSE
[00:48:18.580]      // skip if-block "protType == 1"
[00:48:18.581]    </control>
[00:48:18.581]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.581]      // if-block "protType == 2"
[00:48:18.581]        // =>  TRUE
[00:48:18.581]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.581]        // if-block "isSWJ"
[00:48:18.581]          // =>  TRUE
[00:48:18.581]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.581]          // if-block "hasDormant"
[00:48:18.581]            // =>  FALSE
[00:48:18.581]          // skip if-block "hasDormant"
[00:48:18.583]        </control>
[00:48:18.583]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.583]          // if-block "!hasDormant"
[00:48:18.583]            // =>  TRUE
[00:48:18.583]          <block atomic="false" info="">
[00:48:18.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.585]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.585]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.587]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.587]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.589]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.590]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.592]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.592]          </block>
[00:48:18.593]          // end if-block "!hasDormant"
[00:48:18.593]        </control>
[00:48:18.593]        // end if-block "isSWJ"
[00:48:18.593]      </control>
[00:48:18.593]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.593]        // if-block "!isSWJ"
[00:48:18.593]          // =>  FALSE
[00:48:18.593]        // skip if-block "!isSWJ"
[00:48:18.593]      </control>
[00:48:18.594]      <block atomic="false" info="">
[00:48:18.594]        ReadDP(0x0);
[00:48:18.597]  
[00:48:18.597]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.597]  
[00:48:18.597]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.597]      </block>
[00:48:18.598]      // end if-block "protType == 2"
[00:48:18.598]    </control>
[00:48:18.598]  </sequence>
[00:48:18.598]  
[00:48:18.654]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.654]  
[00:48:18.654]  <debugvars>
[00:48:18.654]    // Pre-defined
[00:48:18.654]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.654]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.655]    __dp=0x00000000
[00:48:18.655]    __ap=0x00000000
[00:48:18.655]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.655]    __FlashAddr=0x00000000
[00:48:18.655]    __FlashLen=0x00000000
[00:48:18.655]    __FlashArg=0x00000000
[00:48:18.655]    __FlashOp=0x00000000
[00:48:18.655]    __Result=0x00000000
[00:48:18.656]  </debugvars>
[00:48:18.656]  
[00:48:18.656]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.656]    <block atomic="false" info="">
[00:48:18.656]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.656]        // -> [isSWJ <= 0x00000001]
[00:48:18.656]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.656]        // -> [hasDormant <= 0x00000000]
[00:48:18.656]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.656]        // -> [protType <= 0x00000002]
[00:48:18.657]    </block>
[00:48:18.657]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.657]      // if-block "protType == 1"
[00:48:18.657]        // =>  FALSE
[00:48:18.657]      // skip if-block "protType == 1"
[00:48:18.657]    </control>
[00:48:18.657]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.658]      // if-block "protType == 2"
[00:48:18.658]        // =>  TRUE
[00:48:18.658]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.658]        // if-block "isSWJ"
[00:48:18.658]          // =>  TRUE
[00:48:18.658]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.658]          // if-block "hasDormant"
[00:48:18.658]            // =>  FALSE
[00:48:18.658]          // skip if-block "hasDormant"
[00:48:18.658]        </control>
[00:48:18.659]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.659]          // if-block "!hasDormant"
[00:48:18.659]            // =>  TRUE
[00:48:18.659]          <block atomic="false" info="">
[00:48:18.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.661]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.661]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.663]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.663]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.669]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.671]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.671]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.677]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.679]          </block>
[00:48:18.679]          // end if-block "!hasDormant"
[00:48:18.679]        </control>
[00:48:18.679]        // end if-block "isSWJ"
[00:48:18.679]      </control>
[00:48:18.679]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.679]        // if-block "!isSWJ"
[00:48:18.679]          // =>  FALSE
[00:48:18.679]        // skip if-block "!isSWJ"
[00:48:18.679]      </control>
[00:48:18.680]      <block atomic="false" info="">
[00:48:18.680]        ReadDP(0x0);
[00:48:18.687]  
[00:48:18.687]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.687]  
[00:48:18.687]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.687]      </block>
[00:48:18.687]      // end if-block "protType == 2"
[00:48:18.687]    </control>
[00:48:18.688]  </sequence>
[00:48:18.688]  
[00:48:18.745]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.745]  
[00:48:18.745]  <debugvars>
[00:48:18.745]    // Pre-defined
[00:48:18.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.745]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.745]    __dp=0x00000000
[00:48:18.745]    __ap=0x00000000
[00:48:18.745]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.746]    __FlashAddr=0x00000000
[00:48:18.746]    __FlashLen=0x00000000
[00:48:18.746]    __FlashArg=0x00000000
[00:48:18.746]    __FlashOp=0x00000000
[00:48:18.746]    __Result=0x00000000
[00:48:18.746]  </debugvars>
[00:48:18.746]  
[00:48:18.746]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.746]    <block atomic="false" info="">
[00:48:18.746]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.748]        // -> [isSWJ <= 0x00000001]
[00:48:18.748]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.748]        // -> [hasDormant <= 0x00000000]
[00:48:18.748]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.748]        // -> [protType <= 0x00000002]
[00:48:18.748]    </block>
[00:48:18.748]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.748]      // if-block "protType == 1"
[00:48:18.748]        // =>  FALSE
[00:48:18.748]      // skip if-block "protType == 1"
[00:48:18.748]    </control>
[00:48:18.749]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.749]      // if-block "protType == 2"
[00:48:18.749]        // =>  TRUE
[00:48:18.749]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.749]        // if-block "isSWJ"
[00:48:18.749]          // =>  TRUE
[00:48:18.749]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.749]          // if-block "hasDormant"
[00:48:18.749]            // =>  FALSE
[00:48:18.749]          // skip if-block "hasDormant"
[00:48:18.750]        </control>
[00:48:18.750]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.750]          // if-block "!hasDormant"
[00:48:18.750]            // =>  TRUE
[00:48:18.750]          <block atomic="false" info="">
[00:48:18.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.752]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.755]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.755]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.757]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.759]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.759]          </block>
[00:48:18.759]          // end if-block "!hasDormant"
[00:48:18.759]        </control>
[00:48:18.759]        // end if-block "isSWJ"
[00:48:18.759]      </control>
[00:48:18.759]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.759]        // if-block "!isSWJ"
[00:48:18.759]          // =>  FALSE
[00:48:18.760]        // skip if-block "!isSWJ"
[00:48:18.760]      </control>
[00:48:18.760]      <block atomic="false" info="">
[00:48:18.760]        ReadDP(0x0);
[00:48:18.762]  
[00:48:18.762]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.762]  
[00:48:18.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.763]      </block>
[00:48:18.763]      // end if-block "protType == 2"
[00:48:18.763]    </control>
[00:48:18.763]  </sequence>
[00:48:18.763]  
[00:48:18.821]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.821]  
[00:48:18.821]  <debugvars>
[00:48:18.821]    // Pre-defined
[00:48:18.822]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.822]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.822]    __dp=0x00000000
[00:48:18.822]    __ap=0x00000000
[00:48:18.822]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.822]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.822]    __FlashAddr=0x00000000
[00:48:18.822]    __FlashLen=0x00000000
[00:48:18.823]    __FlashArg=0x00000000
[00:48:18.823]    __FlashOp=0x00000000
[00:48:18.823]    __Result=0x00000000
[00:48:18.823]  </debugvars>
[00:48:18.823]  
[00:48:18.823]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.824]    <block atomic="false" info="">
[00:48:18.824]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.824]        // -> [isSWJ <= 0x00000001]
[00:48:18.824]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.824]        // -> [hasDormant <= 0x00000000]
[00:48:18.824]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.824]        // -> [protType <= 0x00000002]
[00:48:18.824]    </block>
[00:48:18.824]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.824]      // if-block "protType == 1"
[00:48:18.825]        // =>  FALSE
[00:48:18.825]      // skip if-block "protType == 1"
[00:48:18.825]    </control>
[00:48:18.825]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.825]      // if-block "protType == 2"
[00:48:18.825]        // =>  TRUE
[00:48:18.825]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.825]        // if-block "isSWJ"
[00:48:18.825]          // =>  TRUE
[00:48:18.825]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.826]          // if-block "hasDormant"
[00:48:18.826]            // =>  FALSE
[00:48:18.826]          // skip if-block "hasDormant"
[00:48:18.826]        </control>
[00:48:18.826]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.826]          // if-block "!hasDormant"
[00:48:18.826]            // =>  TRUE
[00:48:18.826]          <block atomic="false" info="">
[00:48:18.826]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.828]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.828]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.831]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.833]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.834]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.836]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.836]          </block>
[00:48:18.836]          // end if-block "!hasDormant"
[00:48:18.837]        </control>
[00:48:18.837]        // end if-block "isSWJ"
[00:48:18.837]      </control>
[00:48:18.837]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.837]        // if-block "!isSWJ"
[00:48:18.837]          // =>  FALSE
[00:48:18.838]        // skip if-block "!isSWJ"
[00:48:18.838]      </control>
[00:48:18.838]      <block atomic="false" info="">
[00:48:18.838]        ReadDP(0x0);
[00:48:18.839]  
[00:48:18.839]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.839]  
[00:48:18.839]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.839]      </block>
[00:48:18.839]      // end if-block "protType == 2"
[00:48:18.840]    </control>
[00:48:18.840]  </sequence>
[00:48:18.840]  
[00:48:18.898]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.898]  
[00:48:18.898]  <debugvars>
[00:48:18.899]    // Pre-defined
[00:48:18.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.899]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.899]    __dp=0x00000000
[00:48:18.899]    __ap=0x00000000
[00:48:18.899]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.899]    __FlashAddr=0x00000000
[00:48:18.899]    __FlashLen=0x00000000
[00:48:18.899]    __FlashArg=0x00000000
[00:48:18.900]    __FlashOp=0x00000000
[00:48:18.900]    __Result=0x00000000
[00:48:18.900]  </debugvars>
[00:48:18.900]  
[00:48:18.900]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.900]    <block atomic="false" info="">
[00:48:18.900]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.900]        // -> [isSWJ <= 0x00000001]
[00:48:18.901]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.901]        // -> [hasDormant <= 0x00000000]
[00:48:18.901]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.901]        // -> [protType <= 0x00000002]
[00:48:18.901]    </block>
[00:48:18.901]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.901]      // if-block "protType == 1"
[00:48:18.901]        // =>  FALSE
[00:48:18.902]      // skip if-block "protType == 1"
[00:48:18.902]    </control>
[00:48:18.902]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.902]      // if-block "protType == 2"
[00:48:18.902]        // =>  TRUE
[00:48:18.902]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.902]        // if-block "isSWJ"
[00:48:18.902]          // =>  TRUE
[00:48:18.902]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.903]          // if-block "hasDormant"
[00:48:18.903]            // =>  FALSE
[00:48:18.903]          // skip if-block "hasDormant"
[00:48:18.903]        </control>
[00:48:18.903]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.903]          // if-block "!hasDormant"
[00:48:18.903]            // =>  TRUE
[00:48:18.903]          <block atomic="false" info="">
[00:48:18.903]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.913]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:18.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.915]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:18.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:18.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:18.921]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.921]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:18.922]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:18.922]          </block>
[00:48:18.922]          // end if-block "!hasDormant"
[00:48:18.922]        </control>
[00:48:18.923]        // end if-block "isSWJ"
[00:48:18.923]      </control>
[00:48:18.923]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:18.923]        // if-block "!isSWJ"
[00:48:18.923]          // =>  FALSE
[00:48:18.923]        // skip if-block "!isSWJ"
[00:48:18.923]      </control>
[00:48:18.923]      <block atomic="false" info="">
[00:48:18.923]        ReadDP(0x0);
[00:48:18.925]  
[00:48:18.925]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:18.925]  
[00:48:18.925]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:18.925]      </block>
[00:48:18.925]      // end if-block "protType == 2"
[00:48:18.925]    </control>
[00:48:18.925]  </sequence>
[00:48:18.926]  
[00:48:18.990]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:18.990]  
[00:48:18.990]  <debugvars>
[00:48:18.990]    // Pre-defined
[00:48:18.990]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:18.990]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:18.991]    __dp=0x00000000
[00:48:18.991]    __ap=0x00000000
[00:48:18.991]    __traceout=0x00000000      (Trace Disabled)
[00:48:18.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:18.991]    __FlashAddr=0x00000000
[00:48:18.991]    __FlashLen=0x00000000
[00:48:18.991]    __FlashArg=0x00000000
[00:48:18.991]    __FlashOp=0x00000000
[00:48:18.991]    __Result=0x00000000
[00:48:18.991]  </debugvars>
[00:48:18.992]  
[00:48:18.992]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:18.992]    <block atomic="false" info="">
[00:48:18.992]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:18.992]        // -> [isSWJ <= 0x00000001]
[00:48:18.992]      __var hasDormant = __protocol & 0x00020000;
[00:48:18.992]        // -> [hasDormant <= 0x00000000]
[00:48:18.992]      __var protType   = __protocol & 0x0000FFFF;
[00:48:18.992]        // -> [protType <= 0x00000002]
[00:48:18.992]    </block>
[00:48:18.992]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:18.993]      // if-block "protType == 1"
[00:48:18.993]        // =>  FALSE
[00:48:18.993]      // skip if-block "protType == 1"
[00:48:18.993]    </control>
[00:48:18.993]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:18.993]      // if-block "protType == 2"
[00:48:18.993]        // =>  TRUE
[00:48:18.993]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:18.993]        // if-block "isSWJ"
[00:48:18.994]          // =>  TRUE
[00:48:18.994]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:18.994]          // if-block "hasDormant"
[00:48:18.994]            // =>  FALSE
[00:48:18.994]          // skip if-block "hasDormant"
[00:48:18.994]        </control>
[00:48:18.994]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:18.995]          // if-block "!hasDormant"
[00:48:18.995]            // =>  TRUE
[00:48:18.995]          <block atomic="false" info="">
[00:48:18.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:18.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:18.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:18.999]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:18.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.001]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.020]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.023]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.023]          </block>
[00:48:19.023]          // end if-block "!hasDormant"
[00:48:19.023]        </control>
[00:48:19.023]        // end if-block "isSWJ"
[00:48:19.023]      </control>
[00:48:19.023]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.023]        // if-block "!isSWJ"
[00:48:19.023]          // =>  FALSE
[00:48:19.023]        // skip if-block "!isSWJ"
[00:48:19.024]      </control>
[00:48:19.024]      <block atomic="false" info="">
[00:48:19.024]        ReadDP(0x0);
[00:48:19.024]  
[00:48:19.024]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.024]  
[00:48:19.024]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.025]      </block>
[00:48:19.025]      // end if-block "protType == 2"
[00:48:19.025]    </control>
[00:48:19.025]  </sequence>
[00:48:19.025]  
[00:48:19.081]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.081]  
[00:48:19.081]  <debugvars>
[00:48:19.081]    // Pre-defined
[00:48:19.081]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.081]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.082]    __dp=0x00000000
[00:48:19.082]    __ap=0x00000000
[00:48:19.083]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.083]    __FlashAddr=0x00000000
[00:48:19.083]    __FlashLen=0x00000000
[00:48:19.083]    __FlashArg=0x00000000
[00:48:19.083]    __FlashOp=0x00000000
[00:48:19.083]    __Result=0x00000000
[00:48:19.083]  </debugvars>
[00:48:19.084]  
[00:48:19.084]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.084]    <block atomic="false" info="">
[00:48:19.084]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.084]        // -> [isSWJ <= 0x00000001]
[00:48:19.084]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.084]        // -> [hasDormant <= 0x00000000]
[00:48:19.084]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.084]        // -> [protType <= 0x00000002]
[00:48:19.084]    </block>
[00:48:19.085]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.085]      // if-block "protType == 1"
[00:48:19.085]        // =>  FALSE
[00:48:19.085]      // skip if-block "protType == 1"
[00:48:19.085]    </control>
[00:48:19.085]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.085]      // if-block "protType == 2"
[00:48:19.085]        // =>  TRUE
[00:48:19.085]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.086]        // if-block "isSWJ"
[00:48:19.086]          // =>  TRUE
[00:48:19.086]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.086]          // if-block "hasDormant"
[00:48:19.086]            // =>  FALSE
[00:48:19.086]          // skip if-block "hasDormant"
[00:48:19.086]        </control>
[00:48:19.086]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.086]          // if-block "!hasDormant"
[00:48:19.086]            // =>  TRUE
[00:48:19.087]          <block atomic="false" info="">
[00:48:19.087]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.088]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.089]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.091]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.094]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.097]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.099]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.099]          </block>
[00:48:19.099]          // end if-block "!hasDormant"
[00:48:19.099]        </control>
[00:48:19.099]        // end if-block "isSWJ"
[00:48:19.100]      </control>
[00:48:19.100]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.100]        // if-block "!isSWJ"
[00:48:19.100]          // =>  FALSE
[00:48:19.100]        // skip if-block "!isSWJ"
[00:48:19.100]      </control>
[00:48:19.100]      <block atomic="false" info="">
[00:48:19.100]        ReadDP(0x0);
[00:48:19.102]  
[00:48:19.102]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.102]  
[00:48:19.102]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.102]      </block>
[00:48:19.103]      // end if-block "protType == 2"
[00:48:19.103]    </control>
[00:48:19.103]  </sequence>
[00:48:19.103]  
[00:48:19.158]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.158]  
[00:48:19.159]  <debugvars>
[00:48:19.159]    // Pre-defined
[00:48:19.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.159]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.159]    __dp=0x00000000
[00:48:19.159]    __ap=0x00000000
[00:48:19.159]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.159]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.160]    __FlashAddr=0x00000000
[00:48:19.160]    __FlashLen=0x00000000
[00:48:19.160]    __FlashArg=0x00000000
[00:48:19.160]    __FlashOp=0x00000000
[00:48:19.160]    __Result=0x00000000
[00:48:19.160]  </debugvars>
[00:48:19.160]  
[00:48:19.160]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.160]    <block atomic="false" info="">
[00:48:19.160]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.160]        // -> [isSWJ <= 0x00000001]
[00:48:19.160]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.160]        // -> [hasDormant <= 0x00000000]
[00:48:19.160]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.161]        // -> [protType <= 0x00000002]
[00:48:19.161]    </block>
[00:48:19.161]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.161]      // if-block "protType == 1"
[00:48:19.161]        // =>  FALSE
[00:48:19.161]      // skip if-block "protType == 1"
[00:48:19.161]    </control>
[00:48:19.161]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.161]      // if-block "protType == 2"
[00:48:19.161]        // =>  TRUE
[00:48:19.162]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.162]        // if-block "isSWJ"
[00:48:19.162]          // =>  TRUE
[00:48:19.162]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.162]          // if-block "hasDormant"
[00:48:19.162]            // =>  FALSE
[00:48:19.162]          // skip if-block "hasDormant"
[00:48:19.162]        </control>
[00:48:19.164]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.164]          // if-block "!hasDormant"
[00:48:19.164]            // =>  TRUE
[00:48:19.164]          <block atomic="false" info="">
[00:48:19.164]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.166]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.169]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.169]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.174]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.174]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.176]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.176]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.180]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.180]          </block>
[00:48:19.180]          // end if-block "!hasDormant"
[00:48:19.181]        </control>
[00:48:19.181]        // end if-block "isSWJ"
[00:48:19.181]      </control>
[00:48:19.181]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.181]        // if-block "!isSWJ"
[00:48:19.181]          // =>  FALSE
[00:48:19.181]        // skip if-block "!isSWJ"
[00:48:19.181]      </control>
[00:48:19.182]      <block atomic="false" info="">
[00:48:19.182]        ReadDP(0x0);
[00:48:19.183]  
[00:48:19.183]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.183]  
[00:48:19.183]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.183]      </block>
[00:48:19.183]      // end if-block "protType == 2"
[00:48:19.184]    </control>
[00:48:19.184]  </sequence>
[00:48:19.184]  
[00:48:19.248]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.248]  
[00:48:19.248]  <debugvars>
[00:48:19.248]    // Pre-defined
[00:48:19.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.248]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.248]    __dp=0x00000000
[00:48:19.248]    __ap=0x00000000
[00:48:19.248]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.250]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.250]    __FlashAddr=0x00000000
[00:48:19.250]    __FlashLen=0x00000000
[00:48:19.250]    __FlashArg=0x00000000
[00:48:19.250]    __FlashOp=0x00000000
[00:48:19.250]    __Result=0x00000000
[00:48:19.250]  </debugvars>
[00:48:19.250]  
[00:48:19.250]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.251]    <block atomic="false" info="">
[00:48:19.251]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.251]        // -> [isSWJ <= 0x00000001]
[00:48:19.251]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.251]        // -> [hasDormant <= 0x00000000]
[00:48:19.251]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.252]        // -> [protType <= 0x00000002]
[00:48:19.252]    </block>
[00:48:19.252]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.252]      // if-block "protType == 1"
[00:48:19.252]        // =>  FALSE
[00:48:19.252]      // skip if-block "protType == 1"
[00:48:19.252]    </control>
[00:48:19.253]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.253]      // if-block "protType == 2"
[00:48:19.253]        // =>  TRUE
[00:48:19.253]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.253]        // if-block "isSWJ"
[00:48:19.253]          // =>  TRUE
[00:48:19.253]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.253]          // if-block "hasDormant"
[00:48:19.253]            // =>  FALSE
[00:48:19.253]          // skip if-block "hasDormant"
[00:48:19.254]        </control>
[00:48:19.254]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.254]          // if-block "!hasDormant"
[00:48:19.254]            // =>  TRUE
[00:48:19.254]          <block atomic="false" info="">
[00:48:19.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.260]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.263]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.263]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.264]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.265]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.266]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.268]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.269]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.269]          </block>
[00:48:19.270]          // end if-block "!hasDormant"
[00:48:19.270]        </control>
[00:48:19.270]        // end if-block "isSWJ"
[00:48:19.270]      </control>
[00:48:19.270]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.270]        // if-block "!isSWJ"
[00:48:19.270]          // =>  FALSE
[00:48:19.270]        // skip if-block "!isSWJ"
[00:48:19.270]      </control>
[00:48:19.271]      <block atomic="false" info="">
[00:48:19.271]        ReadDP(0x0);
[00:48:19.272]  
[00:48:19.272]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.272]  
[00:48:19.272]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.272]      </block>
[00:48:19.272]      // end if-block "protType == 2"
[00:48:19.272]    </control>
[00:48:19.273]  </sequence>
[00:48:19.273]  
[00:48:19.325]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.325]  
[00:48:19.325]  <debugvars>
[00:48:19.325]    // Pre-defined
[00:48:19.325]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.325]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.325]    __dp=0x00000000
[00:48:19.325]    __ap=0x00000000
[00:48:19.326]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.326]    __FlashAddr=0x00000000
[00:48:19.326]    __FlashLen=0x00000000
[00:48:19.326]    __FlashArg=0x00000000
[00:48:19.326]    __FlashOp=0x00000000
[00:48:19.326]    __Result=0x00000000
[00:48:19.326]  </debugvars>
[00:48:19.326]  
[00:48:19.327]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.327]    <block atomic="false" info="">
[00:48:19.327]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.327]        // -> [isSWJ <= 0x00000001]
[00:48:19.327]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.327]        // -> [hasDormant <= 0x00000000]
[00:48:19.327]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.327]        // -> [protType <= 0x00000002]
[00:48:19.327]    </block>
[00:48:19.327]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.327]      // if-block "protType == 1"
[00:48:19.328]        // =>  FALSE
[00:48:19.328]      // skip if-block "protType == 1"
[00:48:19.328]    </control>
[00:48:19.328]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.328]      // if-block "protType == 2"
[00:48:19.328]        // =>  TRUE
[00:48:19.328]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.328]        // if-block "isSWJ"
[00:48:19.328]          // =>  TRUE
[00:48:19.328]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.329]          // if-block "hasDormant"
[00:48:19.329]            // =>  FALSE
[00:48:19.329]          // skip if-block "hasDormant"
[00:48:19.329]        </control>
[00:48:19.329]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.329]          // if-block "!hasDormant"
[00:48:19.329]            // =>  TRUE
[00:48:19.329]          <block atomic="false" info="">
[00:48:19.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.332]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.336]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.340]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.343]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.343]          </block>
[00:48:19.344]          // end if-block "!hasDormant"
[00:48:19.344]        </control>
[00:48:19.344]        // end if-block "isSWJ"
[00:48:19.344]      </control>
[00:48:19.344]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.345]        // if-block "!isSWJ"
[00:48:19.345]          // =>  FALSE
[00:48:19.345]        // skip if-block "!isSWJ"
[00:48:19.345]      </control>
[00:48:19.345]      <block atomic="false" info="">
[00:48:19.345]        ReadDP(0x0);
[00:48:19.347]  
[00:48:19.347]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.347]  
[00:48:19.347]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.347]      </block>
[00:48:19.347]      // end if-block "protType == 2"
[00:48:19.347]    </control>
[00:48:19.347]  </sequence>
[00:48:19.347]  
[00:48:19.400]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.400]  
[00:48:19.400]  <debugvars>
[00:48:19.400]    // Pre-defined
[00:48:19.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.401]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.401]    __dp=0x00000000
[00:48:19.401]    __ap=0x00000000
[00:48:19.401]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.401]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.401]    __FlashAddr=0x00000000
[00:48:19.402]    __FlashLen=0x00000000
[00:48:19.402]    __FlashArg=0x00000000
[00:48:19.402]    __FlashOp=0x00000000
[00:48:19.402]    __Result=0x00000000
[00:48:19.402]  </debugvars>
[00:48:19.402]  
[00:48:19.402]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.402]    <block atomic="false" info="">
[00:48:19.402]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.402]        // -> [isSWJ <= 0x00000001]
[00:48:19.403]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.403]        // -> [hasDormant <= 0x00000000]
[00:48:19.403]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.403]        // -> [protType <= 0x00000002]
[00:48:19.403]    </block>
[00:48:19.403]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.403]      // if-block "protType == 1"
[00:48:19.403]        // =>  FALSE
[00:48:19.403]      // skip if-block "protType == 1"
[00:48:19.403]    </control>
[00:48:19.403]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.404]      // if-block "protType == 2"
[00:48:19.404]        // =>  TRUE
[00:48:19.404]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.404]        // if-block "isSWJ"
[00:48:19.404]          // =>  TRUE
[00:48:19.404]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.404]          // if-block "hasDormant"
[00:48:19.405]            // =>  FALSE
[00:48:19.405]          // skip if-block "hasDormant"
[00:48:19.405]        </control>
[00:48:19.405]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.405]          // if-block "!hasDormant"
[00:48:19.405]            // =>  TRUE
[00:48:19.405]          <block atomic="false" info="">
[00:48:19.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.408]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.409]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.411]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.411]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.412]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.413]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.415]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.416]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.416]          </block>
[00:48:19.416]          // end if-block "!hasDormant"
[00:48:19.417]        </control>
[00:48:19.417]        // end if-block "isSWJ"
[00:48:19.417]      </control>
[00:48:19.417]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.417]        // if-block "!isSWJ"
[00:48:19.417]          // =>  FALSE
[00:48:19.417]        // skip if-block "!isSWJ"
[00:48:19.418]      </control>
[00:48:19.418]      <block atomic="false" info="">
[00:48:19.418]        ReadDP(0x0);
[00:48:19.423]  
[00:48:19.423]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.423]  
[00:48:19.423]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.423]      </block>
[00:48:19.423]      // end if-block "protType == 2"
[00:48:19.425]    </control>
[00:48:19.425]  </sequence>
[00:48:19.425]  
[00:48:19.475]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.475]  
[00:48:19.475]  <debugvars>
[00:48:19.475]    // Pre-defined
[00:48:19.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.476]    __dp=0x00000000
[00:48:19.476]    __ap=0x00000000
[00:48:19.476]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.476]    __FlashAddr=0x00000000
[00:48:19.476]    __FlashLen=0x00000000
[00:48:19.476]    __FlashArg=0x00000000
[00:48:19.476]    __FlashOp=0x00000000
[00:48:19.476]    __Result=0x00000000
[00:48:19.476]  </debugvars>
[00:48:19.476]  
[00:48:19.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.477]    <block atomic="false" info="">
[00:48:19.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.477]        // -> [isSWJ <= 0x00000001]
[00:48:19.477]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.477]        // -> [hasDormant <= 0x00000000]
[00:48:19.477]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.477]        // -> [protType <= 0x00000002]
[00:48:19.477]    </block>
[00:48:19.477]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.478]      // if-block "protType == 1"
[00:48:19.478]        // =>  FALSE
[00:48:19.478]      // skip if-block "protType == 1"
[00:48:19.478]    </control>
[00:48:19.478]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.478]      // if-block "protType == 2"
[00:48:19.479]        // =>  TRUE
[00:48:19.479]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.479]        // if-block "isSWJ"
[00:48:19.479]          // =>  TRUE
[00:48:19.479]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.479]          // if-block "hasDormant"
[00:48:19.479]            // =>  FALSE
[00:48:19.479]          // skip if-block "hasDormant"
[00:48:19.479]        </control>
[00:48:19.479]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.480]          // if-block "!hasDormant"
[00:48:19.480]            // =>  TRUE
[00:48:19.480]          <block atomic="false" info="">
[00:48:19.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.482]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.491]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.492]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.503]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.504]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.505]          </block>
[00:48:19.505]          // end if-block "!hasDormant"
[00:48:19.505]        </control>
[00:48:19.505]        // end if-block "isSWJ"
[00:48:19.505]      </control>
[00:48:19.505]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.505]        // if-block "!isSWJ"
[00:48:19.505]          // =>  FALSE
[00:48:19.506]        // skip if-block "!isSWJ"
[00:48:19.506]      </control>
[00:48:19.506]      <block atomic="false" info="">
[00:48:19.506]        ReadDP(0x0);
[00:48:19.508]  
[00:48:19.508]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.508]  
[00:48:19.508]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.508]      </block>
[00:48:19.508]      // end if-block "protType == 2"
[00:48:19.508]    </control>
[00:48:19.508]  </sequence>
[00:48:19.508]  
[00:48:19.566]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.566]  
[00:48:19.566]  <debugvars>
[00:48:19.567]    // Pre-defined
[00:48:19.567]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.567]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.567]    __dp=0x00000000
[00:48:19.567]    __ap=0x00000000
[00:48:19.567]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.567]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.568]    __FlashAddr=0x00000000
[00:48:19.568]    __FlashLen=0x00000000
[00:48:19.568]    __FlashArg=0x00000000
[00:48:19.568]    __FlashOp=0x00000000
[00:48:19.568]    __Result=0x00000000
[00:48:19.568]  </debugvars>
[00:48:19.568]  
[00:48:19.568]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.568]    <block atomic="false" info="">
[00:48:19.569]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.569]        // -> [isSWJ <= 0x00000001]
[00:48:19.569]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.569]        // -> [hasDormant <= 0x00000000]
[00:48:19.569]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.569]        // -> [protType <= 0x00000002]
[00:48:19.569]    </block>
[00:48:19.570]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.570]      // if-block "protType == 1"
[00:48:19.570]        // =>  FALSE
[00:48:19.570]      // skip if-block "protType == 1"
[00:48:19.570]    </control>
[00:48:19.570]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.570]      // if-block "protType == 2"
[00:48:19.570]        // =>  TRUE
[00:48:19.571]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.571]        // if-block "isSWJ"
[00:48:19.571]          // =>  TRUE
[00:48:19.571]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.571]          // if-block "hasDormant"
[00:48:19.571]            // =>  FALSE
[00:48:19.571]          // skip if-block "hasDormant"
[00:48:19.571]        </control>
[00:48:19.571]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.571]          // if-block "!hasDormant"
[00:48:19.572]            // =>  TRUE
[00:48:19.572]          <block atomic="false" info="">
[00:48:19.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.575]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.575]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.577]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.579]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.582]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.584]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.594]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.594]          </block>
[00:48:19.594]          // end if-block "!hasDormant"
[00:48:19.594]        </control>
[00:48:19.594]        // end if-block "isSWJ"
[00:48:19.594]      </control>
[00:48:19.595]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.595]        // if-block "!isSWJ"
[00:48:19.595]          // =>  FALSE
[00:48:19.595]        // skip if-block "!isSWJ"
[00:48:19.595]      </control>
[00:48:19.596]      <block atomic="false" info="">
[00:48:19.596]        ReadDP(0x0);
[00:48:19.598]  
[00:48:19.598]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.598]  
[00:48:19.598]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.599]      </block>
[00:48:19.599]      // end if-block "protType == 2"
[00:48:19.599]    </control>
[00:48:19.599]  </sequence>
[00:48:19.599]  
[00:48:19.658]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.658]  
[00:48:19.658]  <debugvars>
[00:48:19.658]    // Pre-defined
[00:48:19.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.659]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.659]    __dp=0x00000000
[00:48:19.659]    __ap=0x00000000
[00:48:19.659]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.659]    __FlashAddr=0x00000000
[00:48:19.660]    __FlashLen=0x00000000
[00:48:19.660]    __FlashArg=0x00000000
[00:48:19.660]    __FlashOp=0x00000000
[00:48:19.660]    __Result=0x00000000
[00:48:19.660]  </debugvars>
[00:48:19.661]  
[00:48:19.661]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.661]    <block atomic="false" info="">
[00:48:19.661]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.661]        // -> [isSWJ <= 0x00000001]
[00:48:19.661]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.662]        // -> [hasDormant <= 0x00000000]
[00:48:19.662]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.662]        // -> [protType <= 0x00000002]
[00:48:19.662]    </block>
[00:48:19.662]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.662]      // if-block "protType == 1"
[00:48:19.662]        // =>  FALSE
[00:48:19.662]      // skip if-block "protType == 1"
[00:48:19.662]    </control>
[00:48:19.664]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.664]      // if-block "protType == 2"
[00:48:19.664]        // =>  TRUE
[00:48:19.664]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.664]        // if-block "isSWJ"
[00:48:19.664]          // =>  TRUE
[00:48:19.664]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.664]          // if-block "hasDormant"
[00:48:19.664]            // =>  FALSE
[00:48:19.664]          // skip if-block "hasDormant"
[00:48:19.664]        </control>
[00:48:19.665]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.665]          // if-block "!hasDormant"
[00:48:19.665]            // =>  TRUE
[00:48:19.665]          <block atomic="false" info="">
[00:48:19.665]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.667]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.668]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.677]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.677]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.681]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.684]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.684]          </block>
[00:48:19.684]          // end if-block "!hasDormant"
[00:48:19.685]        </control>
[00:48:19.685]        // end if-block "isSWJ"
[00:48:19.685]      </control>
[00:48:19.685]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.685]        // if-block "!isSWJ"
[00:48:19.685]          // =>  FALSE
[00:48:19.685]        // skip if-block "!isSWJ"
[00:48:19.685]      </control>
[00:48:19.685]      <block atomic="false" info="">
[00:48:19.685]        ReadDP(0x0);
[00:48:19.688]  
[00:48:19.688]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.688]  
[00:48:19.689]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.689]      </block>
[00:48:19.689]      // end if-block "protType == 2"
[00:48:19.689]    </control>
[00:48:19.689]  </sequence>
[00:48:19.689]  
[00:48:19.751]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.751]  
[00:48:19.751]  <debugvars>
[00:48:19.751]    // Pre-defined
[00:48:19.751]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.751]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.752]    __dp=0x00000000
[00:48:19.752]    __ap=0x00000000
[00:48:19.752]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.752]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.752]    __FlashAddr=0x00000000
[00:48:19.752]    __FlashLen=0x00000000
[00:48:19.752]    __FlashArg=0x00000000
[00:48:19.752]    __FlashOp=0x00000000
[00:48:19.752]    __Result=0x00000000
[00:48:19.752]  </debugvars>
[00:48:19.753]  
[00:48:19.753]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.753]    <block atomic="false" info="">
[00:48:19.753]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.753]        // -> [isSWJ <= 0x00000001]
[00:48:19.753]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.753]        // -> [hasDormant <= 0x00000000]
[00:48:19.753]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.753]        // -> [protType <= 0x00000002]
[00:48:19.753]    </block>
[00:48:19.754]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.754]      // if-block "protType == 1"
[00:48:19.754]        // =>  FALSE
[00:48:19.754]      // skip if-block "protType == 1"
[00:48:19.754]    </control>
[00:48:19.754]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.754]      // if-block "protType == 2"
[00:48:19.754]        // =>  TRUE
[00:48:19.754]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.755]        // if-block "isSWJ"
[00:48:19.755]          // =>  TRUE
[00:48:19.755]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.755]          // if-block "hasDormant"
[00:48:19.755]            // =>  FALSE
[00:48:19.755]          // skip if-block "hasDormant"
[00:48:19.755]        </control>
[00:48:19.755]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.755]          // if-block "!hasDormant"
[00:48:19.756]            // =>  TRUE
[00:48:19.756]          <block atomic="false" info="">
[00:48:19.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.758]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.760]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.761]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.762]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.764]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.765]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.767]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.767]          </block>
[00:48:19.767]          // end if-block "!hasDormant"
[00:48:19.767]        </control>
[00:48:19.767]        // end if-block "isSWJ"
[00:48:19.767]      </control>
[00:48:19.767]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.767]        // if-block "!isSWJ"
[00:48:19.767]          // =>  FALSE
[00:48:19.767]        // skip if-block "!isSWJ"
[00:48:19.767]      </control>
[00:48:19.767]      <block atomic="false" info="">
[00:48:19.768]        ReadDP(0x0);
[00:48:19.769]  
[00:48:19.769]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.769]  
[00:48:19.769]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.769]      </block>
[00:48:19.770]      // end if-block "protType == 2"
[00:48:19.770]    </control>
[00:48:19.770]  </sequence>
[00:48:19.770]  
[00:48:19.827]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.827]  
[00:48:19.827]  <debugvars>
[00:48:19.827]    // Pre-defined
[00:48:19.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.827]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.828]    __dp=0x00000000
[00:48:19.828]    __ap=0x00000000
[00:48:19.828]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.828]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.828]    __FlashAddr=0x00000000
[00:48:19.828]    __FlashLen=0x00000000
[00:48:19.828]    __FlashArg=0x00000000
[00:48:19.828]    __FlashOp=0x00000000
[00:48:19.828]    __Result=0x00000000
[00:48:19.829]  </debugvars>
[00:48:19.829]  
[00:48:19.829]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.829]    <block atomic="false" info="">
[00:48:19.829]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.829]        // -> [isSWJ <= 0x00000001]
[00:48:19.829]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.829]        // -> [hasDormant <= 0x00000000]
[00:48:19.829]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.829]        // -> [protType <= 0x00000002]
[00:48:19.830]    </block>
[00:48:19.830]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.830]      // if-block "protType == 1"
[00:48:19.830]        // =>  FALSE
[00:48:19.830]      // skip if-block "protType == 1"
[00:48:19.830]    </control>
[00:48:19.830]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.830]      // if-block "protType == 2"
[00:48:19.830]        // =>  TRUE
[00:48:19.830]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.831]        // if-block "isSWJ"
[00:48:19.831]          // =>  TRUE
[00:48:19.831]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.831]          // if-block "hasDormant"
[00:48:19.831]            // =>  FALSE
[00:48:19.831]          // skip if-block "hasDormant"
[00:48:19.831]        </control>
[00:48:19.831]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.832]          // if-block "!hasDormant"
[00:48:19.832]            // =>  TRUE
[00:48:19.832]          <block atomic="false" info="">
[00:48:19.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.836]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.836]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.838]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.839]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.843]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.844]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.844]          </block>
[00:48:19.844]          // end if-block "!hasDormant"
[00:48:19.844]        </control>
[00:48:19.844]        // end if-block "isSWJ"
[00:48:19.844]      </control>
[00:48:19.844]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.845]        // if-block "!isSWJ"
[00:48:19.845]          // =>  FALSE
[00:48:19.845]        // skip if-block "!isSWJ"
[00:48:19.845]      </control>
[00:48:19.845]      <block atomic="false" info="">
[00:48:19.845]        ReadDP(0x0);
[00:48:19.847]  
[00:48:19.847]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.847]  
[00:48:19.847]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.847]      </block>
[00:48:19.847]      // end if-block "protType == 2"
[00:48:19.847]    </control>
[00:48:19.847]  </sequence>
[00:48:19.847]  
[00:48:19.902]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.902]  
[00:48:19.902]  <debugvars>
[00:48:19.902]    // Pre-defined
[00:48:19.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.903]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.903]    __dp=0x00000000
[00:48:19.903]    __ap=0x00000000
[00:48:19.903]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.903]    __FlashAddr=0x00000000
[00:48:19.903]    __FlashLen=0x00000000
[00:48:19.903]    __FlashArg=0x00000000
[00:48:19.903]    __FlashOp=0x00000000
[00:48:19.904]    __Result=0x00000000
[00:48:19.904]  </debugvars>
[00:48:19.904]  
[00:48:19.904]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.904]    <block atomic="false" info="">
[00:48:19.904]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.904]        // -> [isSWJ <= 0x00000001]
[00:48:19.904]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.905]        // -> [hasDormant <= 0x00000000]
[00:48:19.905]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.905]        // -> [protType <= 0x00000002]
[00:48:19.905]    </block>
[00:48:19.905]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.905]      // if-block "protType == 1"
[00:48:19.905]        // =>  FALSE
[00:48:19.905]      // skip if-block "protType == 1"
[00:48:19.905]    </control>
[00:48:19.905]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.906]      // if-block "protType == 2"
[00:48:19.906]        // =>  TRUE
[00:48:19.906]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.906]        // if-block "isSWJ"
[00:48:19.906]          // =>  TRUE
[00:48:19.906]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.907]          // if-block "hasDormant"
[00:48:19.907]            // =>  FALSE
[00:48:19.907]          // skip if-block "hasDormant"
[00:48:19.907]        </control>
[00:48:19.907]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.907]          // if-block "!hasDormant"
[00:48:19.907]            // =>  TRUE
[00:48:19.907]          <block atomic="false" info="">
[00:48:19.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.912]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.912]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.919]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.922]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.923]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.923]          </block>
[00:48:19.923]          // end if-block "!hasDormant"
[00:48:19.923]        </control>
[00:48:19.924]        // end if-block "isSWJ"
[00:48:19.924]      </control>
[00:48:19.924]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.924]        // if-block "!isSWJ"
[00:48:19.924]          // =>  FALSE
[00:48:19.924]        // skip if-block "!isSWJ"
[00:48:19.925]      </control>
[00:48:19.925]      <block atomic="false" info="">
[00:48:19.925]        ReadDP(0x0);
[00:48:19.926]  
[00:48:19.926]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:19.926]  
[00:48:19.926]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:19.926]      </block>
[00:48:19.927]      // end if-block "protType == 2"
[00:48:19.927]    </control>
[00:48:19.927]  </sequence>
[00:48:19.927]  
[00:48:19.978]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:19.978]  
[00:48:19.980]  <debugvars>
[00:48:19.980]    // Pre-defined
[00:48:19.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:19.980]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:19.980]    __dp=0x00000000
[00:48:19.980]    __ap=0x00000000
[00:48:19.980]    __traceout=0x00000000      (Trace Disabled)
[00:48:19.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:19.980]    __FlashAddr=0x00000000
[00:48:19.981]    __FlashLen=0x00000000
[00:48:19.981]    __FlashArg=0x00000000
[00:48:19.981]    __FlashOp=0x00000000
[00:48:19.981]    __Result=0x00000000
[00:48:19.981]  </debugvars>
[00:48:19.981]  
[00:48:19.981]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:19.981]    <block atomic="false" info="">
[00:48:19.981]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:19.981]        // -> [isSWJ <= 0x00000001]
[00:48:19.981]      __var hasDormant = __protocol & 0x00020000;
[00:48:19.981]        // -> [hasDormant <= 0x00000000]
[00:48:19.982]      __var protType   = __protocol & 0x0000FFFF;
[00:48:19.982]        // -> [protType <= 0x00000002]
[00:48:19.982]    </block>
[00:48:19.982]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:19.982]      // if-block "protType == 1"
[00:48:19.982]        // =>  FALSE
[00:48:19.982]      // skip if-block "protType == 1"
[00:48:19.982]    </control>
[00:48:19.982]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:19.983]      // if-block "protType == 2"
[00:48:19.983]        // =>  TRUE
[00:48:19.983]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:19.983]        // if-block "isSWJ"
[00:48:19.983]          // =>  TRUE
[00:48:19.983]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:19.983]          // if-block "hasDormant"
[00:48:19.983]            // =>  FALSE
[00:48:19.983]          // skip if-block "hasDormant"
[00:48:19.983]        </control>
[00:48:19.983]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:19.983]          // if-block "!hasDormant"
[00:48:19.984]            // =>  TRUE
[00:48:19.984]          <block atomic="false" info="">
[00:48:19.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:19.986]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.986]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:19.987]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:19.987]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:19.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.989]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:19.991]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:19.991]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:19.992]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:19.992]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:19.996]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:19.996]          </block>
[00:48:19.996]          // end if-block "!hasDormant"
[00:48:19.996]        </control>
[00:48:19.996]        // end if-block "isSWJ"
[00:48:19.996]      </control>
[00:48:19.996]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:19.996]        // if-block "!isSWJ"
[00:48:19.996]          // =>  FALSE
[00:48:19.996]        // skip if-block "!isSWJ"
[00:48:19.996]      </control>
[00:48:19.997]      <block atomic="false" info="">
[00:48:19.997]        ReadDP(0x0);
[00:48:20.000]  
[00:48:20.000]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.000]  
[00:48:20.000]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.000]      </block>
[00:48:20.000]      // end if-block "protType == 2"
[00:48:20.000]    </control>
[00:48:20.001]  </sequence>
[00:48:20.001]  
[00:48:20.055]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.055]  
[00:48:20.055]  <debugvars>
[00:48:20.056]    // Pre-defined
[00:48:20.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.056]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.056]    __dp=0x00000000
[00:48:20.056]    __ap=0x00000000
[00:48:20.056]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.056]    __FlashAddr=0x00000000
[00:48:20.056]    __FlashLen=0x00000000
[00:48:20.056]    __FlashArg=0x00000000
[00:48:20.056]    __FlashOp=0x00000000
[00:48:20.057]    __Result=0x00000000
[00:48:20.057]  </debugvars>
[00:48:20.057]  
[00:48:20.057]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.057]    <block atomic="false" info="">
[00:48:20.057]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.057]        // -> [isSWJ <= 0x00000001]
[00:48:20.058]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.058]        // -> [hasDormant <= 0x00000000]
[00:48:20.058]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.058]        // -> [protType <= 0x00000002]
[00:48:20.058]    </block>
[00:48:20.058]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.058]      // if-block "protType == 1"
[00:48:20.058]        // =>  FALSE
[00:48:20.059]      // skip if-block "protType == 1"
[00:48:20.059]    </control>
[00:48:20.059]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.059]      // if-block "protType == 2"
[00:48:20.059]        // =>  TRUE
[00:48:20.059]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.059]        // if-block "isSWJ"
[00:48:20.059]          // =>  TRUE
[00:48:20.059]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.059]          // if-block "hasDormant"
[00:48:20.059]            // =>  FALSE
[00:48:20.060]          // skip if-block "hasDormant"
[00:48:20.060]        </control>
[00:48:20.060]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.060]          // if-block "!hasDormant"
[00:48:20.060]            // =>  TRUE
[00:48:20.060]          <block atomic="false" info="">
[00:48:20.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.062]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.064]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.064]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.066]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.068]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.068]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.069]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.069]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.070]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.070]          </block>
[00:48:20.070]          // end if-block "!hasDormant"
[00:48:20.070]        </control>
[00:48:20.071]        // end if-block "isSWJ"
[00:48:20.071]      </control>
[00:48:20.071]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.071]        // if-block "!isSWJ"
[00:48:20.071]          // =>  FALSE
[00:48:20.071]        // skip if-block "!isSWJ"
[00:48:20.071]      </control>
[00:48:20.071]      <block atomic="false" info="">
[00:48:20.071]        ReadDP(0x0);
[00:48:20.078]  
[00:48:20.078]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.078]  
[00:48:20.078]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.078]      </block>
[00:48:20.079]      // end if-block "protType == 2"
[00:48:20.079]    </control>
[00:48:20.079]  </sequence>
[00:48:20.079]  
[00:48:20.131]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.131]  
[00:48:20.132]  <debugvars>
[00:48:20.132]    // Pre-defined
[00:48:20.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.132]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.132]    __dp=0x00000000
[00:48:20.132]    __ap=0x00000000
[00:48:20.132]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.132]    __FlashAddr=0x00000000
[00:48:20.133]    __FlashLen=0x00000000
[00:48:20.133]    __FlashArg=0x00000000
[00:48:20.133]    __FlashOp=0x00000000
[00:48:20.133]    __Result=0x00000000
[00:48:20.133]  </debugvars>
[00:48:20.134]  
[00:48:20.134]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.134]    <block atomic="false" info="">
[00:48:20.134]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.134]        // -> [isSWJ <= 0x00000001]
[00:48:20.134]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.134]        // -> [hasDormant <= 0x00000000]
[00:48:20.134]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.134]        // -> [protType <= 0x00000002]
[00:48:20.135]    </block>
[00:48:20.135]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.135]      // if-block "protType == 1"
[00:48:20.135]        // =>  FALSE
[00:48:20.135]      // skip if-block "protType == 1"
[00:48:20.135]    </control>
[00:48:20.135]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.135]      // if-block "protType == 2"
[00:48:20.135]        // =>  TRUE
[00:48:20.135]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.135]        // if-block "isSWJ"
[00:48:20.136]          // =>  TRUE
[00:48:20.136]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.136]          // if-block "hasDormant"
[00:48:20.136]            // =>  FALSE
[00:48:20.136]          // skip if-block "hasDormant"
[00:48:20.136]        </control>
[00:48:20.136]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.136]          // if-block "!hasDormant"
[00:48:20.136]            // =>  TRUE
[00:48:20.136]          <block atomic="false" info="">
[00:48:20.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.141]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.142]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.144]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.148]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.151]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.151]          </block>
[00:48:20.151]          // end if-block "!hasDormant"
[00:48:20.151]        </control>
[00:48:20.151]        // end if-block "isSWJ"
[00:48:20.151]      </control>
[00:48:20.151]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.152]        // if-block "!isSWJ"
[00:48:20.152]          // =>  FALSE
[00:48:20.152]        // skip if-block "!isSWJ"
[00:48:20.152]      </control>
[00:48:20.152]      <block atomic="false" info="">
[00:48:20.152]        ReadDP(0x0);
[00:48:20.154]  
[00:48:20.154]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.154]  
[00:48:20.154]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.155]      </block>
[00:48:20.155]      // end if-block "protType == 2"
[00:48:20.155]    </control>
[00:48:20.155]  </sequence>
[00:48:20.155]  
[00:48:20.207]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.207]  
[00:48:20.207]  <debugvars>
[00:48:20.207]    // Pre-defined
[00:48:20.207]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.207]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.208]    __dp=0x00000000
[00:48:20.208]    __ap=0x00000000
[00:48:20.208]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.208]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.208]    __FlashAddr=0x00000000
[00:48:20.208]    __FlashLen=0x00000000
[00:48:20.208]    __FlashArg=0x00000000
[00:48:20.209]    __FlashOp=0x00000000
[00:48:20.209]    __Result=0x00000000
[00:48:20.209]  </debugvars>
[00:48:20.209]  
[00:48:20.209]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.209]    <block atomic="false" info="">
[00:48:20.209]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.210]        // -> [isSWJ <= 0x00000001]
[00:48:20.210]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.210]        // -> [hasDormant <= 0x00000000]
[00:48:20.210]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.210]        // -> [protType <= 0x00000002]
[00:48:20.210]    </block>
[00:48:20.210]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.210]      // if-block "protType == 1"
[00:48:20.210]        // =>  FALSE
[00:48:20.210]      // skip if-block "protType == 1"
[00:48:20.211]    </control>
[00:48:20.211]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.211]      // if-block "protType == 2"
[00:48:20.211]        // =>  TRUE
[00:48:20.211]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.211]        // if-block "isSWJ"
[00:48:20.211]          // =>  TRUE
[00:48:20.211]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.212]          // if-block "hasDormant"
[00:48:20.212]            // =>  FALSE
[00:48:20.212]          // skip if-block "hasDormant"
[00:48:20.212]        </control>
[00:48:20.212]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.212]          // if-block "!hasDormant"
[00:48:20.212]            // =>  TRUE
[00:48:20.212]          <block atomic="false" info="">
[00:48:20.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.216]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.218]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.218]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.220]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.221]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.221]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.226]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.226]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.228]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.228]          </block>
[00:48:20.228]          // end if-block "!hasDormant"
[00:48:20.228]        </control>
[00:48:20.228]        // end if-block "isSWJ"
[00:48:20.228]      </control>
[00:48:20.228]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.228]        // if-block "!isSWJ"
[00:48:20.229]          // =>  FALSE
[00:48:20.229]        // skip if-block "!isSWJ"
[00:48:20.229]      </control>
[00:48:20.229]      <block atomic="false" info="">
[00:48:20.229]        ReadDP(0x0);
[00:48:20.230]  
[00:48:20.230]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.230]  
[00:48:20.230]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.230]      </block>
[00:48:20.230]      // end if-block "protType == 2"
[00:48:20.231]    </control>
[00:48:20.231]  </sequence>
[00:48:20.231]  
[00:48:20.283]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.283]  
[00:48:20.283]  <debugvars>
[00:48:20.284]    // Pre-defined
[00:48:20.284]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.284]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.284]    __dp=0x00000000
[00:48:20.284]    __ap=0x00000000
[00:48:20.284]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.284]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.284]    __FlashAddr=0x00000000
[00:48:20.284]    __FlashLen=0x00000000
[00:48:20.284]    __FlashArg=0x00000000
[00:48:20.285]    __FlashOp=0x00000000
[00:48:20.285]    __Result=0x00000000
[00:48:20.285]  </debugvars>
[00:48:20.285]  
[00:48:20.285]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.285]    <block atomic="false" info="">
[00:48:20.285]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.285]        // -> [isSWJ <= 0x00000001]
[00:48:20.286]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.286]        // -> [hasDormant <= 0x00000000]
[00:48:20.286]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.286]        // -> [protType <= 0x00000002]
[00:48:20.286]    </block>
[00:48:20.286]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.286]      // if-block "protType == 1"
[00:48:20.287]        // =>  FALSE
[00:48:20.287]      // skip if-block "protType == 1"
[00:48:20.287]    </control>
[00:48:20.287]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.287]      // if-block "protType == 2"
[00:48:20.287]        // =>  TRUE
[00:48:20.287]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.287]        // if-block "isSWJ"
[00:48:20.287]          // =>  TRUE
[00:48:20.287]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.287]          // if-block "hasDormant"
[00:48:20.288]            // =>  FALSE
[00:48:20.288]          // skip if-block "hasDormant"
[00:48:20.288]        </control>
[00:48:20.288]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.288]          // if-block "!hasDormant"
[00:48:20.288]            // =>  TRUE
[00:48:20.288]          <block atomic="false" info="">
[00:48:20.288]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.290]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.291]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.291]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.293]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.293]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.294]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.296]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.296]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.297]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.297]          </block>
[00:48:20.297]          // end if-block "!hasDormant"
[00:48:20.298]        </control>
[00:48:20.298]        // end if-block "isSWJ"
[00:48:20.298]      </control>
[00:48:20.298]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.298]        // if-block "!isSWJ"
[00:48:20.298]          // =>  FALSE
[00:48:20.299]        // skip if-block "!isSWJ"
[00:48:20.299]      </control>
[00:48:20.299]      <block atomic="false" info="">
[00:48:20.299]        ReadDP(0x0);
[00:48:20.301]  
[00:48:20.301]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.301]  
[00:48:20.301]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.301]      </block>
[00:48:20.301]      // end if-block "protType == 2"
[00:48:20.301]    </control>
[00:48:20.301]  </sequence>
[00:48:20.301]  
[00:48:20.358]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.358]  
[00:48:20.358]  <debugvars>
[00:48:20.360]    // Pre-defined
[00:48:20.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.360]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.360]    __dp=0x00000000
[00:48:20.360]    __ap=0x00000000
[00:48:20.360]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.360]    __FlashAddr=0x00000000
[00:48:20.360]    __FlashLen=0x00000000
[00:48:20.360]    __FlashArg=0x00000000
[00:48:20.361]    __FlashOp=0x00000000
[00:48:20.361]    __Result=0x00000000
[00:48:20.361]  </debugvars>
[00:48:20.361]  
[00:48:20.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.361]    <block atomic="false" info="">
[00:48:20.362]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.362]        // -> [isSWJ <= 0x00000001]
[00:48:20.362]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.362]        // -> [hasDormant <= 0x00000000]
[00:48:20.362]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.362]        // -> [protType <= 0x00000002]
[00:48:20.362]    </block>
[00:48:20.362]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.363]      // if-block "protType == 1"
[00:48:20.363]        // =>  FALSE
[00:48:20.363]      // skip if-block "protType == 1"
[00:48:20.363]    </control>
[00:48:20.363]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.363]      // if-block "protType == 2"
[00:48:20.363]        // =>  TRUE
[00:48:20.363]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.363]        // if-block "isSWJ"
[00:48:20.363]          // =>  TRUE
[00:48:20.364]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.364]          // if-block "hasDormant"
[00:48:20.364]            // =>  FALSE
[00:48:20.364]          // skip if-block "hasDormant"
[00:48:20.364]        </control>
[00:48:20.364]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.364]          // if-block "!hasDormant"
[00:48:20.364]            // =>  TRUE
[00:48:20.364]          <block atomic="false" info="">
[00:48:20.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.366]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.371]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.374]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.374]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.375]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.375]          </block>
[00:48:20.375]          // end if-block "!hasDormant"
[00:48:20.376]        </control>
[00:48:20.376]        // end if-block "isSWJ"
[00:48:20.376]      </control>
[00:48:20.376]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.376]        // if-block "!isSWJ"
[00:48:20.376]          // =>  FALSE
[00:48:20.376]        // skip if-block "!isSWJ"
[00:48:20.376]      </control>
[00:48:20.376]      <block atomic="false" info="">
[00:48:20.376]        ReadDP(0x0);
[00:48:20.377]  
[00:48:20.377]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.377]  
[00:48:20.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.377]      </block>
[00:48:20.377]      // end if-block "protType == 2"
[00:48:20.379]    </control>
[00:48:20.379]  </sequence>
[00:48:20.379]  
[00:48:20.435]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.435]  
[00:48:20.435]  <debugvars>
[00:48:20.435]    // Pre-defined
[00:48:20.435]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.435]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.436]    __dp=0x00000000
[00:48:20.436]    __ap=0x00000000
[00:48:20.436]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.436]    __FlashAddr=0x00000000
[00:48:20.436]    __FlashLen=0x00000000
[00:48:20.436]    __FlashArg=0x00000000
[00:48:20.436]    __FlashOp=0x00000000
[00:48:20.436]    __Result=0x00000000
[00:48:20.436]  </debugvars>
[00:48:20.437]  
[00:48:20.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.437]    <block atomic="false" info="">
[00:48:20.438]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.438]        // -> [isSWJ <= 0x00000001]
[00:48:20.438]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.438]        // -> [hasDormant <= 0x00000000]
[00:48:20.438]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.438]        // -> [protType <= 0x00000002]
[00:48:20.438]    </block>
[00:48:20.438]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.438]      // if-block "protType == 1"
[00:48:20.438]        // =>  FALSE
[00:48:20.438]      // skip if-block "protType == 1"
[00:48:20.438]    </control>
[00:48:20.439]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.439]      // if-block "protType == 2"
[00:48:20.439]        // =>  TRUE
[00:48:20.439]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.439]        // if-block "isSWJ"
[00:48:20.439]          // =>  TRUE
[00:48:20.439]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.439]          // if-block "hasDormant"
[00:48:20.439]            // =>  FALSE
[00:48:20.439]          // skip if-block "hasDormant"
[00:48:20.440]        </control>
[00:48:20.440]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.440]          // if-block "!hasDormant"
[00:48:20.440]            // =>  TRUE
[00:48:20.440]          <block atomic="false" info="">
[00:48:20.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.452]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.457]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.459]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.463]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.463]          </block>
[00:48:20.463]          // end if-block "!hasDormant"
[00:48:20.463]        </control>
[00:48:20.463]        // end if-block "isSWJ"
[00:48:20.463]      </control>
[00:48:20.463]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.463]        // if-block "!isSWJ"
[00:48:20.463]          // =>  FALSE
[00:48:20.463]        // skip if-block "!isSWJ"
[00:48:20.463]      </control>
[00:48:20.464]      <block atomic="false" info="">
[00:48:20.464]        ReadDP(0x0);
[00:48:20.465]  
[00:48:20.465]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.465]  
[00:48:20.465]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.465]      </block>
[00:48:20.465]      // end if-block "protType == 2"
[00:48:20.467]    </control>
[00:48:20.467]  </sequence>
[00:48:20.467]  
[00:48:20.526]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.526]  
[00:48:20.526]  <debugvars>
[00:48:20.527]    // Pre-defined
[00:48:20.527]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.527]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.527]    __dp=0x00000000
[00:48:20.527]    __ap=0x00000000
[00:48:20.527]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.527]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.527]    __FlashAddr=0x00000000
[00:48:20.527]    __FlashLen=0x00000000
[00:48:20.528]    __FlashArg=0x00000000
[00:48:20.528]    __FlashOp=0x00000000
[00:48:20.528]    __Result=0x00000000
[00:48:20.528]  </debugvars>
[00:48:20.528]  
[00:48:20.528]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.528]    <block atomic="false" info="">
[00:48:20.528]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.528]        // -> [isSWJ <= 0x00000001]
[00:48:20.529]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.529]        // -> [hasDormant <= 0x00000000]
[00:48:20.529]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.529]        // -> [protType <= 0x00000002]
[00:48:20.529]    </block>
[00:48:20.529]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.529]      // if-block "protType == 1"
[00:48:20.529]        // =>  FALSE
[00:48:20.530]      // skip if-block "protType == 1"
[00:48:20.530]    </control>
[00:48:20.530]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.530]      // if-block "protType == 2"
[00:48:20.530]        // =>  TRUE
[00:48:20.530]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.530]        // if-block "isSWJ"
[00:48:20.530]          // =>  TRUE
[00:48:20.530]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.530]          // if-block "hasDormant"
[00:48:20.530]            // =>  FALSE
[00:48:20.530]          // skip if-block "hasDormant"
[00:48:20.531]        </control>
[00:48:20.531]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.531]          // if-block "!hasDormant"
[00:48:20.531]            // =>  TRUE
[00:48:20.531]          <block atomic="false" info="">
[00:48:20.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.533]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.533]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.534]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.534]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.536]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.536]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.538]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.539]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.541]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.541]          </block>
[00:48:20.541]          // end if-block "!hasDormant"
[00:48:20.542]        </control>
[00:48:20.542]        // end if-block "isSWJ"
[00:48:20.542]      </control>
[00:48:20.542]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.542]        // if-block "!isSWJ"
[00:48:20.542]          // =>  FALSE
[00:48:20.542]        // skip if-block "!isSWJ"
[00:48:20.542]      </control>
[00:48:20.542]      <block atomic="false" info="">
[00:48:20.542]        ReadDP(0x0);
[00:48:20.544]  
[00:48:20.544]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.544]  
[00:48:20.544]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.544]      </block>
[00:48:20.544]      // end if-block "protType == 2"
[00:48:20.544]    </control>
[00:48:20.544]  </sequence>
[00:48:20.544]  
[00:48:20.602]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.602]  
[00:48:20.603]  <debugvars>
[00:48:20.603]    // Pre-defined
[00:48:20.603]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.603]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.603]    __dp=0x00000000
[00:48:20.603]    __ap=0x00000000
[00:48:20.603]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.603]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.603]    __FlashAddr=0x00000000
[00:48:20.603]    __FlashLen=0x00000000
[00:48:20.604]    __FlashArg=0x00000000
[00:48:20.604]    __FlashOp=0x00000000
[00:48:20.604]    __Result=0x00000000
[00:48:20.604]  </debugvars>
[00:48:20.604]  
[00:48:20.604]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.604]    <block atomic="false" info="">
[00:48:20.604]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.604]        // -> [isSWJ <= 0x00000001]
[00:48:20.605]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.605]        // -> [hasDormant <= 0x00000000]
[00:48:20.605]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.605]        // -> [protType <= 0x00000002]
[00:48:20.605]    </block>
[00:48:20.605]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.605]      // if-block "protType == 1"
[00:48:20.605]        // =>  FALSE
[00:48:20.605]      // skip if-block "protType == 1"
[00:48:20.605]    </control>
[00:48:20.605]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.605]      // if-block "protType == 2"
[00:48:20.605]        // =>  TRUE
[00:48:20.605]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.605]        // if-block "isSWJ"
[00:48:20.607]          // =>  TRUE
[00:48:20.607]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.607]          // if-block "hasDormant"
[00:48:20.607]            // =>  FALSE
[00:48:20.607]          // skip if-block "hasDormant"
[00:48:20.607]        </control>
[00:48:20.607]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.607]          // if-block "!hasDormant"
[00:48:20.607]            // =>  TRUE
[00:48:20.607]          <block atomic="false" info="">
[00:48:20.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.609]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.626]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.626]          </block>
[00:48:20.626]          // end if-block "!hasDormant"
[00:48:20.627]        </control>
[00:48:20.627]        // end if-block "isSWJ"
[00:48:20.627]      </control>
[00:48:20.627]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.627]        // if-block "!isSWJ"
[00:48:20.627]          // =>  FALSE
[00:48:20.627]        // skip if-block "!isSWJ"
[00:48:20.627]      </control>
[00:48:20.627]      <block atomic="false" info="">
[00:48:20.628]        ReadDP(0x0);
[00:48:20.629]  
[00:48:20.629]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.629]  
[00:48:20.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.629]      </block>
[00:48:20.629]      // end if-block "protType == 2"
[00:48:20.629]    </control>
[00:48:20.630]  </sequence>
[00:48:20.630]  
[00:48:20.693]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.693]  
[00:48:20.693]  <debugvars>
[00:48:20.694]    // Pre-defined
[00:48:20.694]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.694]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.694]    __dp=0x00000000
[00:48:20.694]    __ap=0x00000000
[00:48:20.694]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.694]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.694]    __FlashAddr=0x00000000
[00:48:20.694]    __FlashLen=0x00000000
[00:48:20.695]    __FlashArg=0x00000000
[00:48:20.695]    __FlashOp=0x00000000
[00:48:20.695]    __Result=0x00000000
[00:48:20.695]  </debugvars>
[00:48:20.695]  
[00:48:20.695]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.695]    <block atomic="false" info="">
[00:48:20.695]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.695]        // -> [isSWJ <= 0x00000001]
[00:48:20.697]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.697]        // -> [hasDormant <= 0x00000000]
[00:48:20.697]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.697]        // -> [protType <= 0x00000002]
[00:48:20.697]    </block>
[00:48:20.697]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.697]      // if-block "protType == 1"
[00:48:20.697]        // =>  FALSE
[00:48:20.697]      // skip if-block "protType == 1"
[00:48:20.697]    </control>
[00:48:20.697]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.698]      // if-block "protType == 2"
[00:48:20.698]        // =>  TRUE
[00:48:20.698]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.698]        // if-block "isSWJ"
[00:48:20.699]          // =>  TRUE
[00:48:20.699]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.699]          // if-block "hasDormant"
[00:48:20.699]            // =>  FALSE
[00:48:20.699]          // skip if-block "hasDormant"
[00:48:20.699]        </control>
[00:48:20.699]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.699]          // if-block "!hasDormant"
[00:48:20.699]            // =>  TRUE
[00:48:20.699]          <block atomic="false" info="">
[00:48:20.700]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.701]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.704]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.706]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.706]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.708]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.709]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.709]          </block>
[00:48:20.709]          // end if-block "!hasDormant"
[00:48:20.709]        </control>
[00:48:20.710]        // end if-block "isSWJ"
[00:48:20.710]      </control>
[00:48:20.710]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.710]        // if-block "!isSWJ"
[00:48:20.710]          // =>  FALSE
[00:48:20.710]        // skip if-block "!isSWJ"
[00:48:20.710]      </control>
[00:48:20.710]      <block atomic="false" info="">
[00:48:20.711]        ReadDP(0x0);
[00:48:20.717]  
[00:48:20.717]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.717]  
[00:48:20.717]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.717]      </block>
[00:48:20.717]      // end if-block "protType == 2"
[00:48:20.717]    </control>
[00:48:20.717]  </sequence>
[00:48:20.718]  
[00:48:20.769]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.769]  
[00:48:20.770]  <debugvars>
[00:48:20.770]    // Pre-defined
[00:48:20.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.770]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.770]    __dp=0x00000000
[00:48:20.770]    __ap=0x00000000
[00:48:20.770]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.770]    __FlashAddr=0x00000000
[00:48:20.771]    __FlashLen=0x00000000
[00:48:20.771]    __FlashArg=0x00000000
[00:48:20.771]    __FlashOp=0x00000000
[00:48:20.771]    __Result=0x00000000
[00:48:20.771]  </debugvars>
[00:48:20.771]  
[00:48:20.771]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.771]    <block atomic="false" info="">
[00:48:20.771]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.772]        // -> [isSWJ <= 0x00000001]
[00:48:20.772]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.772]        // -> [hasDormant <= 0x00000000]
[00:48:20.772]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.772]        // -> [protType <= 0x00000002]
[00:48:20.772]    </block>
[00:48:20.772]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.772]      // if-block "protType == 1"
[00:48:20.772]        // =>  FALSE
[00:48:20.772]      // skip if-block "protType == 1"
[00:48:20.773]    </control>
[00:48:20.773]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.773]      // if-block "protType == 2"
[00:48:20.773]        // =>  TRUE
[00:48:20.773]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.773]        // if-block "isSWJ"
[00:48:20.773]          // =>  TRUE
[00:48:20.773]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.774]          // if-block "hasDormant"
[00:48:20.774]            // =>  FALSE
[00:48:20.774]          // skip if-block "hasDormant"
[00:48:20.774]        </control>
[00:48:20.774]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.774]          // if-block "!hasDormant"
[00:48:20.774]            // =>  TRUE
[00:48:20.774]          <block atomic="false" info="">
[00:48:20.775]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.777]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.778]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.785]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.791]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.792]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.793]          </block>
[00:48:20.793]          // end if-block "!hasDormant"
[00:48:20.793]        </control>
[00:48:20.793]        // end if-block "isSWJ"
[00:48:20.793]      </control>
[00:48:20.793]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.793]        // if-block "!isSWJ"
[00:48:20.793]          // =>  FALSE
[00:48:20.793]        // skip if-block "!isSWJ"
[00:48:20.793]      </control>
[00:48:20.793]      <block atomic="false" info="">
[00:48:20.793]        ReadDP(0x0);
[00:48:20.799]  
[00:48:20.799]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.799]  
[00:48:20.799]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.799]      </block>
[00:48:20.799]      // end if-block "protType == 2"
[00:48:20.800]    </control>
[00:48:20.800]  </sequence>
[00:48:20.800]  
[00:48:20.861]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.861]  
[00:48:20.861]  <debugvars>
[00:48:20.862]    // Pre-defined
[00:48:20.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.862]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.862]    __dp=0x00000000
[00:48:20.862]    __ap=0x00000000
[00:48:20.862]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.862]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.862]    __FlashAddr=0x00000000
[00:48:20.862]    __FlashLen=0x00000000
[00:48:20.863]    __FlashArg=0x00000000
[00:48:20.863]    __FlashOp=0x00000000
[00:48:20.863]    __Result=0x00000000
[00:48:20.863]  </debugvars>
[00:48:20.863]  
[00:48:20.863]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.863]    <block atomic="false" info="">
[00:48:20.863]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.863]        // -> [isSWJ <= 0x00000001]
[00:48:20.863]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.864]        // -> [hasDormant <= 0x00000000]
[00:48:20.864]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.864]        // -> [protType <= 0x00000002]
[00:48:20.864]    </block>
[00:48:20.864]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.864]      // if-block "protType == 1"
[00:48:20.864]        // =>  FALSE
[00:48:20.864]      // skip if-block "protType == 1"
[00:48:20.865]    </control>
[00:48:20.865]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.865]      // if-block "protType == 2"
[00:48:20.865]        // =>  TRUE
[00:48:20.865]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.865]        // if-block "isSWJ"
[00:48:20.865]          // =>  TRUE
[00:48:20.866]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.866]          // if-block "hasDormant"
[00:48:20.866]            // =>  FALSE
[00:48:20.866]          // skip if-block "hasDormant"
[00:48:20.866]        </control>
[00:48:20.866]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.866]          // if-block "!hasDormant"
[00:48:20.866]            // =>  TRUE
[00:48:20.866]          <block atomic="false" info="">
[00:48:20.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.868]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.868]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.870]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.870]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.872]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.872]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.875]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.877]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.877]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.878]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.878]          </block>
[00:48:20.878]          // end if-block "!hasDormant"
[00:48:20.878]        </control>
[00:48:20.879]        // end if-block "isSWJ"
[00:48:20.879]      </control>
[00:48:20.879]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.879]        // if-block "!isSWJ"
[00:48:20.879]          // =>  FALSE
[00:48:20.879]        // skip if-block "!isSWJ"
[00:48:20.879]      </control>
[00:48:20.879]      <block atomic="false" info="">
[00:48:20.879]        ReadDP(0x0);
[00:48:20.881]  
[00:48:20.881]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.881]  
[00:48:20.881]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.881]      </block>
[00:48:20.881]      // end if-block "protType == 2"
[00:48:20.881]    </control>
[00:48:20.881]  </sequence>
[00:48:20.881]  
[00:48:20.938]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:20.938]  
[00:48:20.938]  <debugvars>
[00:48:20.938]    // Pre-defined
[00:48:20.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:20.938]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:20.938]    __dp=0x00000000
[00:48:20.938]    __ap=0x00000000
[00:48:20.938]    __traceout=0x00000000      (Trace Disabled)
[00:48:20.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:20.940]    __FlashAddr=0x00000000
[00:48:20.940]    __FlashLen=0x00000000
[00:48:20.940]    __FlashArg=0x00000000
[00:48:20.940]    __FlashOp=0x00000000
[00:48:20.940]    __Result=0x00000000
[00:48:20.940]  </debugvars>
[00:48:20.940]  
[00:48:20.940]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:20.940]    <block atomic="false" info="">
[00:48:20.940]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:20.941]        // -> [isSWJ <= 0x00000001]
[00:48:20.941]      __var hasDormant = __protocol & 0x00020000;
[00:48:20.941]        // -> [hasDormant <= 0x00000000]
[00:48:20.941]      __var protType   = __protocol & 0x0000FFFF;
[00:48:20.941]        // -> [protType <= 0x00000002]
[00:48:20.941]    </block>
[00:48:20.941]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:20.941]      // if-block "protType == 1"
[00:48:20.942]        // =>  FALSE
[00:48:20.942]      // skip if-block "protType == 1"
[00:48:20.942]    </control>
[00:48:20.942]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:20.942]      // if-block "protType == 2"
[00:48:20.942]        // =>  TRUE
[00:48:20.942]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:20.942]        // if-block "isSWJ"
[00:48:20.942]          // =>  TRUE
[00:48:20.943]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:20.943]          // if-block "hasDormant"
[00:48:20.943]            // =>  FALSE
[00:48:20.943]          // skip if-block "hasDormant"
[00:48:20.943]        </control>
[00:48:20.943]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:20.943]          // if-block "!hasDormant"
[00:48:20.943]            // =>  TRUE
[00:48:20.943]          <block atomic="false" info="">
[00:48:20.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:20.945]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.945]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:20.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:20.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:20.948]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.948]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:20.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:20.950]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:20.951]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:20.951]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:20.952]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:20.953]          </block>
[00:48:20.953]          // end if-block "!hasDormant"
[00:48:20.953]        </control>
[00:48:20.953]        // end if-block "isSWJ"
[00:48:20.953]      </control>
[00:48:20.953]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:20.953]        // if-block "!isSWJ"
[00:48:20.953]          // =>  FALSE
[00:48:20.953]        // skip if-block "!isSWJ"
[00:48:20.953]      </control>
[00:48:20.953]      <block atomic="false" info="">
[00:48:20.954]        ReadDP(0x0);
[00:48:20.960]  
[00:48:20.960]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:20.960]  
[00:48:20.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:20.960]      </block>
[00:48:20.960]      // end if-block "protType == 2"
[00:48:20.960]    </control>
[00:48:20.960]  </sequence>
[00:48:20.960]  
[00:48:21.015]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.015]  
[00:48:21.016]  <debugvars>
[00:48:21.016]    // Pre-defined
[00:48:21.016]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.016]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.016]    __dp=0x00000000
[00:48:21.016]    __ap=0x00000000
[00:48:21.016]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.016]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.016]    __FlashAddr=0x00000000
[00:48:21.016]    __FlashLen=0x00000000
[00:48:21.017]    __FlashArg=0x00000000
[00:48:21.017]    __FlashOp=0x00000000
[00:48:21.017]    __Result=0x00000000
[00:48:21.017]  </debugvars>
[00:48:21.017]  
[00:48:21.017]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.017]    <block atomic="false" info="">
[00:48:21.017]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.017]        // -> [isSWJ <= 0x00000001]
[00:48:21.017]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.018]        // -> [hasDormant <= 0x00000000]
[00:48:21.018]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.018]        // -> [protType <= 0x00000002]
[00:48:21.019]    </block>
[00:48:21.019]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.019]      // if-block "protType == 1"
[00:48:21.019]        // =>  FALSE
[00:48:21.019]      // skip if-block "protType == 1"
[00:48:21.019]    </control>
[00:48:21.019]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.019]      // if-block "protType == 2"
[00:48:21.019]        // =>  TRUE
[00:48:21.020]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.020]        // if-block "isSWJ"
[00:48:21.020]          // =>  TRUE
[00:48:21.020]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.020]          // if-block "hasDormant"
[00:48:21.020]            // =>  FALSE
[00:48:21.020]          // skip if-block "hasDormant"
[00:48:21.020]        </control>
[00:48:21.020]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.020]          // if-block "!hasDormant"
[00:48:21.021]            // =>  TRUE
[00:48:21.021]          <block atomic="false" info="">
[00:48:21.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.024]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.025]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.026]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.028]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.032]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.032]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.033]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.034]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.034]          </block>
[00:48:21.035]          // end if-block "!hasDormant"
[00:48:21.035]        </control>
[00:48:21.035]        // end if-block "isSWJ"
[00:48:21.035]      </control>
[00:48:21.035]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.035]        // if-block "!isSWJ"
[00:48:21.035]          // =>  FALSE
[00:48:21.035]        // skip if-block "!isSWJ"
[00:48:21.035]      </control>
[00:48:21.036]      <block atomic="false" info="">
[00:48:21.036]        ReadDP(0x0);
[00:48:21.038]  
[00:48:21.038]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.038]  
[00:48:21.038]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.038]      </block>
[00:48:21.038]      // end if-block "protType == 2"
[00:48:21.038]    </control>
[00:48:21.038]  </sequence>
[00:48:21.038]  
[00:48:21.090]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.090]  
[00:48:21.092]  <debugvars>
[00:48:21.092]    // Pre-defined
[00:48:21.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.092]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.092]    __dp=0x00000000
[00:48:21.092]    __ap=0x00000000
[00:48:21.092]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.092]    __FlashAddr=0x00000000
[00:48:21.092]    __FlashLen=0x00000000
[00:48:21.092]    __FlashArg=0x00000000
[00:48:21.092]    __FlashOp=0x00000000
[00:48:21.092]    __Result=0x00000000
[00:48:21.092]  </debugvars>
[00:48:21.092]  
[00:48:21.092]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.092]    <block atomic="false" info="">
[00:48:21.092]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.093]        // -> [isSWJ <= 0x00000001]
[00:48:21.093]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.093]        // -> [hasDormant <= 0x00000000]
[00:48:21.093]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.093]        // -> [protType <= 0x00000002]
[00:48:21.093]    </block>
[00:48:21.093]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.093]      // if-block "protType == 1"
[00:48:21.093]        // =>  FALSE
[00:48:21.093]      // skip if-block "protType == 1"
[00:48:21.094]    </control>
[00:48:21.094]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.094]      // if-block "protType == 2"
[00:48:21.094]        // =>  TRUE
[00:48:21.094]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.094]        // if-block "isSWJ"
[00:48:21.094]          // =>  TRUE
[00:48:21.094]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.094]          // if-block "hasDormant"
[00:48:21.094]            // =>  FALSE
[00:48:21.095]          // skip if-block "hasDormant"
[00:48:21.095]        </control>
[00:48:21.095]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.095]          // if-block "!hasDormant"
[00:48:21.095]            // =>  TRUE
[00:48:21.095]          <block atomic="false" info="">
[00:48:21.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.099]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.101]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.102]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.104]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.104]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.108]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.108]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.109]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.110]          </block>
[00:48:21.111]          // end if-block "!hasDormant"
[00:48:21.111]        </control>
[00:48:21.111]        // end if-block "isSWJ"
[00:48:21.111]      </control>
[00:48:21.111]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.111]        // if-block "!isSWJ"
[00:48:21.112]          // =>  FALSE
[00:48:21.112]        // skip if-block "!isSWJ"
[00:48:21.112]      </control>
[00:48:21.112]      <block atomic="false" info="">
[00:48:21.112]        ReadDP(0x0);
[00:48:21.114]  
[00:48:21.114]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.114]  
[00:48:21.114]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.114]      </block>
[00:48:21.114]      // end if-block "protType == 2"
[00:48:21.114]    </control>
[00:48:21.114]  </sequence>
[00:48:21.114]  
[00:48:21.166]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.166]  
[00:48:21.167]  <debugvars>
[00:48:21.167]    // Pre-defined
[00:48:21.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.167]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.167]    __dp=0x00000000
[00:48:21.167]    __ap=0x00000000
[00:48:21.167]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.167]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.167]    __FlashAddr=0x00000000
[00:48:21.167]    __FlashLen=0x00000000
[00:48:21.167]    __FlashArg=0x00000000
[00:48:21.167]    __FlashOp=0x00000000
[00:48:21.167]    __Result=0x00000000
[00:48:21.169]  </debugvars>
[00:48:21.169]  
[00:48:21.169]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.169]    <block atomic="false" info="">
[00:48:21.169]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.169]        // -> [isSWJ <= 0x00000001]
[00:48:21.169]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.169]        // -> [hasDormant <= 0x00000000]
[00:48:21.169]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.169]        // -> [protType <= 0x00000002]
[00:48:21.169]    </block>
[00:48:21.169]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.169]      // if-block "protType == 1"
[00:48:21.170]        // =>  FALSE
[00:48:21.170]      // skip if-block "protType == 1"
[00:48:21.170]    </control>
[00:48:21.170]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.170]      // if-block "protType == 2"
[00:48:21.170]        // =>  TRUE
[00:48:21.170]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.170]        // if-block "isSWJ"
[00:48:21.170]          // =>  TRUE
[00:48:21.170]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.171]          // if-block "hasDormant"
[00:48:21.171]            // =>  FALSE
[00:48:21.171]          // skip if-block "hasDormant"
[00:48:21.171]        </control>
[00:48:21.171]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.171]          // if-block "!hasDormant"
[00:48:21.171]            // =>  TRUE
[00:48:21.171]          <block atomic="false" info="">
[00:48:21.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.178]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.178]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.183]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.187]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.187]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.188]          </block>
[00:48:21.188]          // end if-block "!hasDormant"
[00:48:21.188]        </control>
[00:48:21.188]        // end if-block "isSWJ"
[00:48:21.188]      </control>
[00:48:21.188]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.188]        // if-block "!isSWJ"
[00:48:21.188]          // =>  FALSE
[00:48:21.189]        // skip if-block "!isSWJ"
[00:48:21.189]      </control>
[00:48:21.189]      <block atomic="false" info="">
[00:48:21.189]        ReadDP(0x0);
[00:48:21.193]  
[00:48:21.193]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.193]  
[00:48:21.193]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.193]      </block>
[00:48:21.193]      // end if-block "protType == 2"
[00:48:21.193]    </control>
[00:48:21.193]  </sequence>
[00:48:21.193]  
[00:48:21.258]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.258]  
[00:48:21.259]  <debugvars>
[00:48:21.259]    // Pre-defined
[00:48:21.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.259]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.259]    __dp=0x00000000
[00:48:21.259]    __ap=0x00000000
[00:48:21.259]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.260]    __FlashAddr=0x00000000
[00:48:21.260]    __FlashLen=0x00000000
[00:48:21.260]    __FlashArg=0x00000000
[00:48:21.260]    __FlashOp=0x00000000
[00:48:21.260]    __Result=0x00000000
[00:48:21.260]  </debugvars>
[00:48:21.260]  
[00:48:21.260]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.260]    <block atomic="false" info="">
[00:48:21.260]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.260]        // -> [isSWJ <= 0x00000001]
[00:48:21.260]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.260]        // -> [hasDormant <= 0x00000000]
[00:48:21.261]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.261]        // -> [protType <= 0x00000002]
[00:48:21.261]    </block>
[00:48:21.261]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.261]      // if-block "protType == 1"
[00:48:21.261]        // =>  FALSE
[00:48:21.261]      // skip if-block "protType == 1"
[00:48:21.263]    </control>
[00:48:21.263]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.263]      // if-block "protType == 2"
[00:48:21.263]        // =>  TRUE
[00:48:21.263]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.263]        // if-block "isSWJ"
[00:48:21.263]          // =>  TRUE
[00:48:21.263]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.263]          // if-block "hasDormant"
[00:48:21.263]            // =>  FALSE
[00:48:21.263]          // skip if-block "hasDormant"
[00:48:21.264]        </control>
[00:48:21.264]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.264]          // if-block "!hasDormant"
[00:48:21.264]            // =>  TRUE
[00:48:21.264]          <block atomic="false" info="">
[00:48:21.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.265]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.270]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.272]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.272]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.273]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.276]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.278]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.278]          </block>
[00:48:21.278]          // end if-block "!hasDormant"
[00:48:21.279]        </control>
[00:48:21.279]        // end if-block "isSWJ"
[00:48:21.279]      </control>
[00:48:21.279]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.279]        // if-block "!isSWJ"
[00:48:21.279]          // =>  FALSE
[00:48:21.279]        // skip if-block "!isSWJ"
[00:48:21.279]      </control>
[00:48:21.280]      <block atomic="false" info="">
[00:48:21.280]        ReadDP(0x0);
[00:48:21.285]  
[00:48:21.285]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.285]  
[00:48:21.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.285]      </block>
[00:48:21.285]      // end if-block "protType == 2"
[00:48:21.286]    </control>
[00:48:21.286]  </sequence>
[00:48:21.286]  
[00:48:21.349]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.349]  
[00:48:21.349]  <debugvars>
[00:48:21.349]    // Pre-defined
[00:48:21.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.349]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.350]    __dp=0x00000000
[00:48:21.350]    __ap=0x00000000
[00:48:21.350]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.350]    __FlashAddr=0x00000000
[00:48:21.351]    __FlashLen=0x00000000
[00:48:21.351]    __FlashArg=0x00000000
[00:48:21.351]    __FlashOp=0x00000000
[00:48:21.351]    __Result=0x00000000
[00:48:21.351]  </debugvars>
[00:48:21.351]  
[00:48:21.351]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.351]    <block atomic="false" info="">
[00:48:21.351]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.351]        // -> [isSWJ <= 0x00000001]
[00:48:21.351]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.351]        // -> [hasDormant <= 0x00000000]
[00:48:21.351]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.352]        // -> [protType <= 0x00000002]
[00:48:21.352]    </block>
[00:48:21.352]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.352]      // if-block "protType == 1"
[00:48:21.352]        // =>  FALSE
[00:48:21.352]      // skip if-block "protType == 1"
[00:48:21.352]    </control>
[00:48:21.352]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.352]      // if-block "protType == 2"
[00:48:21.353]        // =>  TRUE
[00:48:21.353]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.353]        // if-block "isSWJ"
[00:48:21.353]          // =>  TRUE
[00:48:21.353]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.353]          // if-block "hasDormant"
[00:48:21.353]            // =>  FALSE
[00:48:21.354]          // skip if-block "hasDormant"
[00:48:21.354]        </control>
[00:48:21.354]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.354]          // if-block "!hasDormant"
[00:48:21.354]            // =>  TRUE
[00:48:21.354]          <block atomic="false" info="">
[00:48:21.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.361]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.364]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.374]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.374]          </block>
[00:48:21.374]          // end if-block "!hasDormant"
[00:48:21.374]        </control>
[00:48:21.374]        // end if-block "isSWJ"
[00:48:21.374]      </control>
[00:48:21.375]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.375]        // if-block "!isSWJ"
[00:48:21.375]          // =>  FALSE
[00:48:21.375]        // skip if-block "!isSWJ"
[00:48:21.375]      </control>
[00:48:21.375]      <block atomic="false" info="">
[00:48:21.375]        ReadDP(0x0);
[00:48:21.376]  
[00:48:21.376]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.376]  
[00:48:21.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.377]      </block>
[00:48:21.377]      // end if-block "protType == 2"
[00:48:21.377]    </control>
[00:48:21.377]  </sequence>
[00:48:21.377]  
[00:48:21.441]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.441]  
[00:48:21.442]  <debugvars>
[00:48:21.442]    // Pre-defined
[00:48:21.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.442]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.442]    __dp=0x00000000
[00:48:21.442]    __ap=0x00000000
[00:48:21.442]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.442]    __FlashAddr=0x00000000
[00:48:21.442]    __FlashLen=0x00000000
[00:48:21.442]    __FlashArg=0x00000000
[00:48:21.442]    __FlashOp=0x00000000
[00:48:21.442]    __Result=0x00000000
[00:48:21.442]  </debugvars>
[00:48:21.442]  
[00:48:21.442]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.442]    <block atomic="false" info="">
[00:48:21.443]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.443]        // -> [isSWJ <= 0x00000001]
[00:48:21.443]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.443]        // -> [hasDormant <= 0x00000000]
[00:48:21.443]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.443]        // -> [protType <= 0x00000002]
[00:48:21.443]    </block>
[00:48:21.443]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.443]      // if-block "protType == 1"
[00:48:21.443]        // =>  FALSE
[00:48:21.443]      // skip if-block "protType == 1"
[00:48:21.443]    </control>
[00:48:21.445]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.445]      // if-block "protType == 2"
[00:48:21.445]        // =>  TRUE
[00:48:21.445]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.445]        // if-block "isSWJ"
[00:48:21.445]          // =>  TRUE
[00:48:21.445]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.445]          // if-block "hasDormant"
[00:48:21.446]            // =>  FALSE
[00:48:21.446]          // skip if-block "hasDormant"
[00:48:21.446]        </control>
[00:48:21.446]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.446]          // if-block "!hasDormant"
[00:48:21.446]            // =>  TRUE
[00:48:21.446]          <block atomic="false" info="">
[00:48:21.446]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.448]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.450]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.451]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.453]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.455]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.456]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.456]          </block>
[00:48:21.456]          // end if-block "!hasDormant"
[00:48:21.456]        </control>
[00:48:21.458]        // end if-block "isSWJ"
[00:48:21.458]      </control>
[00:48:21.458]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.458]        // if-block "!isSWJ"
[00:48:21.458]          // =>  FALSE
[00:48:21.458]        // skip if-block "!isSWJ"
[00:48:21.458]      </control>
[00:48:21.458]      <block atomic="false" info="">
[00:48:21.458]        ReadDP(0x0);
[00:48:21.459]  
[00:48:21.459]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.459]  
[00:48:21.460]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.460]      </block>
[00:48:21.460]      // end if-block "protType == 2"
[00:48:21.460]    </control>
[00:48:21.460]  </sequence>
[00:48:21.460]  
[00:48:21.519]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.519]  
[00:48:21.519]  <debugvars>
[00:48:21.519]    // Pre-defined
[00:48:21.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.520]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.520]    __dp=0x00000000
[00:48:21.520]    __ap=0x00000000
[00:48:21.520]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.520]    __FlashAddr=0x00000000
[00:48:21.520]    __FlashLen=0x00000000
[00:48:21.520]    __FlashArg=0x00000000
[00:48:21.521]    __FlashOp=0x00000000
[00:48:21.521]    __Result=0x00000000
[00:48:21.521]  </debugvars>
[00:48:21.521]  
[00:48:21.521]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.521]    <block atomic="false" info="">
[00:48:21.521]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.521]        // -> [isSWJ <= 0x00000001]
[00:48:21.521]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.522]        // -> [hasDormant <= 0x00000000]
[00:48:21.522]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.522]        // -> [protType <= 0x00000002]
[00:48:21.522]    </block>
[00:48:21.522]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.522]      // if-block "protType == 1"
[00:48:21.522]        // =>  FALSE
[00:48:21.522]      // skip if-block "protType == 1"
[00:48:21.522]    </control>
[00:48:21.522]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.522]      // if-block "protType == 2"
[00:48:21.523]        // =>  TRUE
[00:48:21.523]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.523]        // if-block "isSWJ"
[00:48:21.523]          // =>  TRUE
[00:48:21.523]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.523]          // if-block "hasDormant"
[00:48:21.523]            // =>  FALSE
[00:48:21.523]          // skip if-block "hasDormant"
[00:48:21.523]        </control>
[00:48:21.524]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.524]          // if-block "!hasDormant"
[00:48:21.524]            // =>  TRUE
[00:48:21.524]          <block atomic="false" info="">
[00:48:21.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.527]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.528]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.528]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.530]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.530]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.531]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.542]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.557]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.558]          </block>
[00:48:21.558]          // end if-block "!hasDormant"
[00:48:21.558]        </control>
[00:48:21.558]        // end if-block "isSWJ"
[00:48:21.558]      </control>
[00:48:21.558]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.558]        // if-block "!isSWJ"
[00:48:21.558]          // =>  FALSE
[00:48:21.559]        // skip if-block "!isSWJ"
[00:48:21.559]      </control>
[00:48:21.559]      <block atomic="false" info="">
[00:48:21.559]        ReadDP(0x0);
[00:48:21.560]  
[00:48:21.560]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.560]  
[00:48:21.561]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.561]      </block>
[00:48:21.561]      // end if-block "protType == 2"
[00:48:21.561]    </control>
[00:48:21.561]  </sequence>
[00:48:21.561]  
[00:48:21.611]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.611]  
[00:48:21.611]  <debugvars>
[00:48:21.611]    // Pre-defined
[00:48:21.611]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.611]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.611]    __dp=0x00000000
[00:48:21.611]    __ap=0x00000000
[00:48:21.613]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.613]    __FlashAddr=0x00000000
[00:48:21.613]    __FlashLen=0x00000000
[00:48:21.613]    __FlashArg=0x00000000
[00:48:21.613]    __FlashOp=0x00000000
[00:48:21.613]    __Result=0x00000000
[00:48:21.613]  </debugvars>
[00:48:21.614]  
[00:48:21.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.614]    <block atomic="false" info="">
[00:48:21.614]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.614]        // -> [isSWJ <= 0x00000001]
[00:48:21.614]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.614]        // -> [hasDormant <= 0x00000000]
[00:48:21.614]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.614]        // -> [protType <= 0x00000002]
[00:48:21.614]    </block>
[00:48:21.615]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.615]      // if-block "protType == 1"
[00:48:21.615]        // =>  FALSE
[00:48:21.615]      // skip if-block "protType == 1"
[00:48:21.615]    </control>
[00:48:21.615]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.615]      // if-block "protType == 2"
[00:48:21.615]        // =>  TRUE
[00:48:21.615]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.615]        // if-block "isSWJ"
[00:48:21.616]          // =>  TRUE
[00:48:21.616]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.616]          // if-block "hasDormant"
[00:48:21.616]            // =>  FALSE
[00:48:21.616]          // skip if-block "hasDormant"
[00:48:21.616]        </control>
[00:48:21.616]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.616]          // if-block "!hasDormant"
[00:48:21.616]            // =>  TRUE
[00:48:21.616]          <block atomic="false" info="">
[00:48:21.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.619]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.621]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.623]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.624]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.624]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.626]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.627]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.627]          </block>
[00:48:21.627]          // end if-block "!hasDormant"
[00:48:21.627]        </control>
[00:48:21.627]        // end if-block "isSWJ"
[00:48:21.627]      </control>
[00:48:21.627]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.628]        // if-block "!isSWJ"
[00:48:21.628]          // =>  FALSE
[00:48:21.628]        // skip if-block "!isSWJ"
[00:48:21.628]      </control>
[00:48:21.628]      <block atomic="false" info="">
[00:48:21.628]        ReadDP(0x0);
[00:48:21.629]  
[00:48:21.629]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.629]  
[00:48:21.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.629]      </block>
[00:48:21.629]      // end if-block "protType == 2"
[00:48:21.630]    </control>
[00:48:21.630]  </sequence>
[00:48:21.630]  
[00:48:21.687]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.687]  
[00:48:21.687]  <debugvars>
[00:48:21.687]    // Pre-defined
[00:48:21.687]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.687]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.687]    __dp=0x00000000
[00:48:21.687]    __ap=0x00000000
[00:48:21.688]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.688]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.688]    __FlashAddr=0x00000000
[00:48:21.688]    __FlashLen=0x00000000
[00:48:21.688]    __FlashArg=0x00000000
[00:48:21.689]    __FlashOp=0x00000000
[00:48:21.690]    __Result=0x00000000
[00:48:21.690]  </debugvars>
[00:48:21.690]  
[00:48:21.690]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.690]    <block atomic="false" info="">
[00:48:21.690]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.690]        // -> [isSWJ <= 0x00000001]
[00:48:21.690]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.690]        // -> [hasDormant <= 0x00000000]
[00:48:21.690]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.690]        // -> [protType <= 0x00000002]
[00:48:21.690]    </block>
[00:48:21.691]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.691]      // if-block "protType == 1"
[00:48:21.691]        // =>  FALSE
[00:48:21.691]      // skip if-block "protType == 1"
[00:48:21.691]    </control>
[00:48:21.691]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.691]      // if-block "protType == 2"
[00:48:21.691]        // =>  TRUE
[00:48:21.691]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.691]        // if-block "isSWJ"
[00:48:21.692]          // =>  TRUE
[00:48:21.692]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.692]          // if-block "hasDormant"
[00:48:21.692]            // =>  FALSE
[00:48:21.692]          // skip if-block "hasDormant"
[00:48:21.692]        </control>
[00:48:21.692]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.692]          // if-block "!hasDormant"
[00:48:21.692]            // =>  TRUE
[00:48:21.692]          <block atomic="false" info="">
[00:48:21.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.695]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.696]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.698]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.701]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.701]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.702]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.702]          </block>
[00:48:21.702]          // end if-block "!hasDormant"
[00:48:21.702]        </control>
[00:48:21.702]        // end if-block "isSWJ"
[00:48:21.702]      </control>
[00:48:21.702]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.703]        // if-block "!isSWJ"
[00:48:21.703]          // =>  FALSE
[00:48:21.703]        // skip if-block "!isSWJ"
[00:48:21.703]      </control>
[00:48:21.704]      <block atomic="false" info="">
[00:48:21.704]        ReadDP(0x0);
[00:48:21.705]  
[00:48:21.705]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.705]  
[00:48:21.705]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.705]      </block>
[00:48:21.705]      // end if-block "protType == 2"
[00:48:21.705]    </control>
[00:48:21.705]  </sequence>
[00:48:21.705]  
[00:48:21.764]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.764]  
[00:48:21.764]  <debugvars>
[00:48:21.765]    // Pre-defined
[00:48:21.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.765]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.765]    __dp=0x00000000
[00:48:21.765]    __ap=0x00000000
[00:48:21.765]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.765]    __FlashAddr=0x00000000
[00:48:21.765]    __FlashLen=0x00000000
[00:48:21.765]    __FlashArg=0x00000000
[00:48:21.766]    __FlashOp=0x00000000
[00:48:21.766]    __Result=0x00000000
[00:48:21.766]  </debugvars>
[00:48:21.766]  
[00:48:21.766]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.766]    <block atomic="false" info="">
[00:48:21.766]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.766]        // -> [isSWJ <= 0x00000001]
[00:48:21.766]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.766]        // -> [hasDormant <= 0x00000000]
[00:48:21.766]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.766]        // -> [protType <= 0x00000002]
[00:48:21.767]    </block>
[00:48:21.767]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.767]      // if-block "protType == 1"
[00:48:21.767]        // =>  FALSE
[00:48:21.767]      // skip if-block "protType == 1"
[00:48:21.767]    </control>
[00:48:21.767]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.767]      // if-block "protType == 2"
[00:48:21.767]        // =>  TRUE
[00:48:21.767]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.768]        // if-block "isSWJ"
[00:48:21.768]          // =>  TRUE
[00:48:21.768]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.768]          // if-block "hasDormant"
[00:48:21.768]            // =>  FALSE
[00:48:21.768]          // skip if-block "hasDormant"
[00:48:21.768]        </control>
[00:48:21.768]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.768]          // if-block "!hasDormant"
[00:48:21.768]            // =>  TRUE
[00:48:21.769]          <block atomic="false" info="">
[00:48:21.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.770]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.770]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.772]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.773]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.781]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.781]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.783]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.783]          </block>
[00:48:21.784]          // end if-block "!hasDormant"
[00:48:21.784]        </control>
[00:48:21.784]        // end if-block "isSWJ"
[00:48:21.784]      </control>
[00:48:21.784]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.784]        // if-block "!isSWJ"
[00:48:21.785]          // =>  FALSE
[00:48:21.785]        // skip if-block "!isSWJ"
[00:48:21.785]      </control>
[00:48:21.785]      <block atomic="false" info="">
[00:48:21.785]        ReadDP(0x0);
[00:48:21.786]  
[00:48:21.786]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.786]  
[00:48:21.787]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.787]      </block>
[00:48:21.787]      // end if-block "protType == 2"
[00:48:21.787]    </control>
[00:48:21.787]  </sequence>
[00:48:21.787]  
[00:48:21.841]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.841]  
[00:48:21.841]  <debugvars>
[00:48:21.841]    // Pre-defined
[00:48:21.841]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.841]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.842]    __dp=0x00000000
[00:48:21.842]    __ap=0x00000000
[00:48:21.842]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.842]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.842]    __FlashAddr=0x00000000
[00:48:21.842]    __FlashLen=0x00000000
[00:48:21.842]    __FlashArg=0x00000000
[00:48:21.842]    __FlashOp=0x00000000
[00:48:21.842]    __Result=0x00000000
[00:48:21.842]  </debugvars>
[00:48:21.843]  
[00:48:21.843]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.843]    <block atomic="false" info="">
[00:48:21.843]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.843]        // -> [isSWJ <= 0x00000001]
[00:48:21.843]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.843]        // -> [hasDormant <= 0x00000000]
[00:48:21.843]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.843]        // -> [protType <= 0x00000002]
[00:48:21.844]    </block>
[00:48:21.844]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.844]      // if-block "protType == 1"
[00:48:21.844]        // =>  FALSE
[00:48:21.844]      // skip if-block "protType == 1"
[00:48:21.844]    </control>
[00:48:21.844]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.844]      // if-block "protType == 2"
[00:48:21.844]        // =>  TRUE
[00:48:21.844]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.845]        // if-block "isSWJ"
[00:48:21.845]          // =>  TRUE
[00:48:21.845]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.845]          // if-block "hasDormant"
[00:48:21.845]            // =>  FALSE
[00:48:21.845]          // skip if-block "hasDormant"
[00:48:21.845]        </control>
[00:48:21.845]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.845]          // if-block "!hasDormant"
[00:48:21.846]            // =>  TRUE
[00:48:21.846]          <block atomic="false" info="">
[00:48:21.846]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.851]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.853]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.854]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.854]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.863]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.863]          </block>
[00:48:21.863]          // end if-block "!hasDormant"
[00:48:21.863]        </control>
[00:48:21.863]        // end if-block "isSWJ"
[00:48:21.864]      </control>
[00:48:21.864]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.864]        // if-block "!isSWJ"
[00:48:21.864]          // =>  FALSE
[00:48:21.864]        // skip if-block "!isSWJ"
[00:48:21.864]      </control>
[00:48:21.864]      <block atomic="false" info="">
[00:48:21.864]        ReadDP(0x0);
[00:48:21.865]  
[00:48:21.865]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.865]  
[00:48:21.865]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.866]      </block>
[00:48:21.866]      // end if-block "protType == 2"
[00:48:21.866]    </control>
[00:48:21.866]  </sequence>
[00:48:21.866]  
[00:48:21.916]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:21.916]  
[00:48:21.916]  <debugvars>
[00:48:21.916]    // Pre-defined
[00:48:21.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:21.916]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:21.917]    __dp=0x00000000
[00:48:21.917]    __ap=0x00000000
[00:48:21.917]    __traceout=0x00000000      (Trace Disabled)
[00:48:21.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:21.917]    __FlashAddr=0x00000000
[00:48:21.917]    __FlashLen=0x00000000
[00:48:21.918]    __FlashArg=0x00000000
[00:48:21.918]    __FlashOp=0x00000000
[00:48:21.918]    __Result=0x00000000
[00:48:21.918]  </debugvars>
[00:48:21.918]  
[00:48:21.918]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:21.919]    <block atomic="false" info="">
[00:48:21.919]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:21.919]        // -> [isSWJ <= 0x00000001]
[00:48:21.919]      __var hasDormant = __protocol & 0x00020000;
[00:48:21.919]        // -> [hasDormant <= 0x00000000]
[00:48:21.919]      __var protType   = __protocol & 0x0000FFFF;
[00:48:21.919]        // -> [protType <= 0x00000002]
[00:48:21.919]    </block>
[00:48:21.919]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:21.920]      // if-block "protType == 1"
[00:48:21.920]        // =>  FALSE
[00:48:21.920]      // skip if-block "protType == 1"
[00:48:21.920]    </control>
[00:48:21.920]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:21.920]      // if-block "protType == 2"
[00:48:21.920]        // =>  TRUE
[00:48:21.920]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:21.921]        // if-block "isSWJ"
[00:48:21.921]          // =>  TRUE
[00:48:21.921]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:21.921]          // if-block "hasDormant"
[00:48:21.921]            // =>  FALSE
[00:48:21.921]          // skip if-block "hasDormant"
[00:48:21.921]        </control>
[00:48:21.921]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:21.921]          // if-block "!hasDormant"
[00:48:21.921]            // =>  TRUE
[00:48:21.922]          <block atomic="false" info="">
[00:48:21.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:21.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.924]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:21.930]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:21.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:21.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.932]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:21.933]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:21.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:21.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:21.937]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:21.938]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:21.938]          </block>
[00:48:21.938]          // end if-block "!hasDormant"
[00:48:21.938]        </control>
[00:48:21.938]        // end if-block "isSWJ"
[00:48:21.938]      </control>
[00:48:21.939]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:21.939]        // if-block "!isSWJ"
[00:48:21.939]          // =>  FALSE
[00:48:21.939]        // skip if-block "!isSWJ"
[00:48:21.939]      </control>
[00:48:21.939]      <block atomic="false" info="">
[00:48:21.939]        ReadDP(0x0);
[00:48:21.946]  
[00:48:21.946]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:21.946]  
[00:48:21.946]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:21.946]      </block>
[00:48:21.946]      // end if-block "protType == 2"
[00:48:21.947]    </control>
[00:48:21.947]  </sequence>
[00:48:21.947]  
[00:48:22.008]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.008]  
[00:48:22.008]  <debugvars>
[00:48:22.009]    // Pre-defined
[00:48:22.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.009]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.009]    __dp=0x00000000
[00:48:22.009]    __ap=0x00000000
[00:48:22.009]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.009]    __FlashAddr=0x00000000
[00:48:22.009]    __FlashLen=0x00000000
[00:48:22.010]    __FlashArg=0x00000000
[00:48:22.010]    __FlashOp=0x00000000
[00:48:22.010]    __Result=0x00000000
[00:48:22.010]  </debugvars>
[00:48:22.010]  
[00:48:22.010]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.010]    <block atomic="false" info="">
[00:48:22.010]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.010]        // -> [isSWJ <= 0x00000001]
[00:48:22.010]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.010]        // -> [hasDormant <= 0x00000000]
[00:48:22.011]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.011]        // -> [protType <= 0x00000002]
[00:48:22.011]    </block>
[00:48:22.011]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.011]      // if-block "protType == 1"
[00:48:22.011]        // =>  FALSE
[00:48:22.011]      // skip if-block "protType == 1"
[00:48:22.011]    </control>
[00:48:22.011]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.011]      // if-block "protType == 2"
[00:48:22.012]        // =>  TRUE
[00:48:22.012]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.012]        // if-block "isSWJ"
[00:48:22.012]          // =>  TRUE
[00:48:22.012]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.012]          // if-block "hasDormant"
[00:48:22.012]            // =>  FALSE
[00:48:22.012]          // skip if-block "hasDormant"
[00:48:22.012]        </control>
[00:48:22.012]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.013]          // if-block "!hasDormant"
[00:48:22.013]            // =>  TRUE
[00:48:22.013]          <block atomic="false" info="">
[00:48:22.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.015]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.020]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.020]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.021]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.024]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.025]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.025]          </block>
[00:48:22.025]          // end if-block "!hasDormant"
[00:48:22.025]        </control>
[00:48:22.026]        // end if-block "isSWJ"
[00:48:22.026]      </control>
[00:48:22.026]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.026]        // if-block "!isSWJ"
[00:48:22.026]          // =>  FALSE
[00:48:22.026]        // skip if-block "!isSWJ"
[00:48:22.026]      </control>
[00:48:22.026]      <block atomic="false" info="">
[00:48:22.026]        ReadDP(0x0);
[00:48:22.028]  
[00:48:22.028]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.028]  
[00:48:22.028]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.028]      </block>
[00:48:22.028]      // end if-block "protType == 2"
[00:48:22.028]    </control>
[00:48:22.029]  </sequence>
[00:48:22.029]  
[00:48:22.083]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.083]  
[00:48:22.083]  <debugvars>
[00:48:22.083]    // Pre-defined
[00:48:22.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.083]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.083]    __dp=0x00000000
[00:48:22.083]    __ap=0x00000000
[00:48:22.084]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.084]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.084]    __FlashAddr=0x00000000
[00:48:22.084]    __FlashLen=0x00000000
[00:48:22.084]    __FlashArg=0x00000000
[00:48:22.085]    __FlashOp=0x00000000
[00:48:22.085]    __Result=0x00000000
[00:48:22.085]  </debugvars>
[00:48:22.085]  
[00:48:22.085]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.085]    <block atomic="false" info="">
[00:48:22.085]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.085]        // -> [isSWJ <= 0x00000001]
[00:48:22.085]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.085]        // -> [hasDormant <= 0x00000000]
[00:48:22.085]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.085]        // -> [protType <= 0x00000002]
[00:48:22.086]    </block>
[00:48:22.086]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.086]      // if-block "protType == 1"
[00:48:22.086]        // =>  FALSE
[00:48:22.086]      // skip if-block "protType == 1"
[00:48:22.086]    </control>
[00:48:22.088]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.088]      // if-block "protType == 2"
[00:48:22.088]        // =>  TRUE
[00:48:22.088]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.088]        // if-block "isSWJ"
[00:48:22.088]          // =>  TRUE
[00:48:22.088]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.088]          // if-block "hasDormant"
[00:48:22.089]            // =>  FALSE
[00:48:22.089]          // skip if-block "hasDormant"
[00:48:22.089]        </control>
[00:48:22.089]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.089]          // if-block "!hasDormant"
[00:48:22.089]            // =>  TRUE
[00:48:22.089]          <block atomic="false" info="">
[00:48:22.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.091]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.096]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.100]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.102]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.102]          </block>
[00:48:22.102]          // end if-block "!hasDormant"
[00:48:22.102]        </control>
[00:48:22.102]        // end if-block "isSWJ"
[00:48:22.102]      </control>
[00:48:22.102]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.102]        // if-block "!isSWJ"
[00:48:22.102]          // =>  FALSE
[00:48:22.102]        // skip if-block "!isSWJ"
[00:48:22.103]      </control>
[00:48:22.103]      <block atomic="false" info="">
[00:48:22.103]        ReadDP(0x0);
[00:48:22.104]  
[00:48:22.104]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.104]  
[00:48:22.104]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.104]      </block>
[00:48:22.104]      // end if-block "protType == 2"
[00:48:22.104]    </control>
[00:48:22.104]  </sequence>
[00:48:22.104]  
[00:48:22.159]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.159]  
[00:48:22.159]  <debugvars>
[00:48:22.159]    // Pre-defined
[00:48:22.159]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.159]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.159]    __dp=0x00000000
[00:48:22.159]    __ap=0x00000000
[00:48:22.159]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.160]    __FlashAddr=0x00000000
[00:48:22.160]    __FlashLen=0x00000000
[00:48:22.160]    __FlashArg=0x00000000
[00:48:22.160]    __FlashOp=0x00000000
[00:48:22.160]    __Result=0x00000000
[00:48:22.160]  </debugvars>
[00:48:22.160]  
[00:48:22.160]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.160]    <block atomic="false" info="">
[00:48:22.161]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.161]        // -> [isSWJ <= 0x00000001]
[00:48:22.161]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.161]        // -> [hasDormant <= 0x00000000]
[00:48:22.161]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.161]        // -> [protType <= 0x00000002]
[00:48:22.161]    </block>
[00:48:22.162]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.162]      // if-block "protType == 1"
[00:48:22.162]        // =>  FALSE
[00:48:22.162]      // skip if-block "protType == 1"
[00:48:22.162]    </control>
[00:48:22.162]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.162]      // if-block "protType == 2"
[00:48:22.162]        // =>  TRUE
[00:48:22.162]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.163]        // if-block "isSWJ"
[00:48:22.163]          // =>  TRUE
[00:48:22.163]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.163]          // if-block "hasDormant"
[00:48:22.163]            // =>  FALSE
[00:48:22.163]          // skip if-block "hasDormant"
[00:48:22.163]        </control>
[00:48:22.163]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.164]          // if-block "!hasDormant"
[00:48:22.164]            // =>  TRUE
[00:48:22.164]          <block atomic="false" info="">
[00:48:22.164]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.166]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.169]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.170]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.171]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.173]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.173]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.174]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.176]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.176]          </block>
[00:48:22.176]          // end if-block "!hasDormant"
[00:48:22.176]        </control>
[00:48:22.176]        // end if-block "isSWJ"
[00:48:22.176]      </control>
[00:48:22.177]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.177]        // if-block "!isSWJ"
[00:48:22.177]          // =>  FALSE
[00:48:22.177]        // skip if-block "!isSWJ"
[00:48:22.177]      </control>
[00:48:22.178]      <block atomic="false" info="">
[00:48:22.178]        ReadDP(0x0);
[00:48:22.179]  
[00:48:22.179]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.179]  
[00:48:22.179]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.179]      </block>
[00:48:22.179]      // end if-block "protType == 2"
[00:48:22.179]    </control>
[00:48:22.179]  </sequence>
[00:48:22.179]  
[00:48:22.234]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.234]  
[00:48:22.235]  <debugvars>
[00:48:22.235]    // Pre-defined
[00:48:22.235]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.235]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.235]    __dp=0x00000000
[00:48:22.236]    __ap=0x00000000
[00:48:22.236]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.236]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.236]    __FlashAddr=0x00000000
[00:48:22.236]    __FlashLen=0x00000000
[00:48:22.236]    __FlashArg=0x00000000
[00:48:22.236]    __FlashOp=0x00000000
[00:48:22.236]    __Result=0x00000000
[00:48:22.236]  </debugvars>
[00:48:22.236]  
[00:48:22.237]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.237]    <block atomic="false" info="">
[00:48:22.237]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.237]        // -> [isSWJ <= 0x00000001]
[00:48:22.237]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.237]        // -> [hasDormant <= 0x00000000]
[00:48:22.237]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.237]        // -> [protType <= 0x00000002]
[00:48:22.237]    </block>
[00:48:22.237]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.238]      // if-block "protType == 1"
[00:48:22.238]        // =>  FALSE
[00:48:22.238]      // skip if-block "protType == 1"
[00:48:22.238]    </control>
[00:48:22.238]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.238]      // if-block "protType == 2"
[00:48:22.238]        // =>  TRUE
[00:48:22.238]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.238]        // if-block "isSWJ"
[00:48:22.238]          // =>  TRUE
[00:48:22.239]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.239]          // if-block "hasDormant"
[00:48:22.239]            // =>  FALSE
[00:48:22.239]          // skip if-block "hasDormant"
[00:48:22.239]        </control>
[00:48:22.239]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.239]          // if-block "!hasDormant"
[00:48:22.239]            // =>  TRUE
[00:48:22.239]          <block atomic="false" info="">
[00:48:22.239]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.241]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.244]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.246]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.246]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.249]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.249]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.253]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.253]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.254]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.255]          </block>
[00:48:22.255]          // end if-block "!hasDormant"
[00:48:22.255]        </control>
[00:48:22.255]        // end if-block "isSWJ"
[00:48:22.255]      </control>
[00:48:22.255]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.255]        // if-block "!isSWJ"
[00:48:22.255]          // =>  FALSE
[00:48:22.255]        // skip if-block "!isSWJ"
[00:48:22.255]      </control>
[00:48:22.255]      <block atomic="false" info="">
[00:48:22.255]        ReadDP(0x0);
[00:48:22.263]  
[00:48:22.263]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.263]  
[00:48:22.263]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.264]      </block>
[00:48:22.264]      // end if-block "protType == 2"
[00:48:22.264]    </control>
[00:48:22.264]  </sequence>
[00:48:22.264]  
[00:48:22.326]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.326]  
[00:48:22.326]  <debugvars>
[00:48:22.326]    // Pre-defined
[00:48:22.326]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.326]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.326]    __dp=0x00000000
[00:48:22.327]    __ap=0x00000000
[00:48:22.327]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.327]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.327]    __FlashAddr=0x00000000
[00:48:22.327]    __FlashLen=0x00000000
[00:48:22.327]    __FlashArg=0x00000000
[00:48:22.327]    __FlashOp=0x00000000
[00:48:22.327]    __Result=0x00000000
[00:48:22.327]  </debugvars>
[00:48:22.327]  
[00:48:22.327]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.328]    <block atomic="false" info="">
[00:48:22.328]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.328]        // -> [isSWJ <= 0x00000001]
[00:48:22.328]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.328]        // -> [hasDormant <= 0x00000000]
[00:48:22.329]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.329]        // -> [protType <= 0x00000002]
[00:48:22.329]    </block>
[00:48:22.329]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.329]      // if-block "protType == 1"
[00:48:22.329]        // =>  FALSE
[00:48:22.329]      // skip if-block "protType == 1"
[00:48:22.329]    </control>
[00:48:22.330]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.330]      // if-block "protType == 2"
[00:48:22.330]        // =>  TRUE
[00:48:22.330]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.330]        // if-block "isSWJ"
[00:48:22.330]          // =>  TRUE
[00:48:22.330]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.330]          // if-block "hasDormant"
[00:48:22.330]            // =>  FALSE
[00:48:22.330]          // skip if-block "hasDormant"
[00:48:22.331]        </control>
[00:48:22.331]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.331]          // if-block "!hasDormant"
[00:48:22.331]            // =>  TRUE
[00:48:22.331]          <block atomic="false" info="">
[00:48:22.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.335]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.340]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.344]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.344]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.346]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.346]          </block>
[00:48:22.347]          // end if-block "!hasDormant"
[00:48:22.347]        </control>
[00:48:22.347]        // end if-block "isSWJ"
[00:48:22.347]      </control>
[00:48:22.347]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.347]        // if-block "!isSWJ"
[00:48:22.347]          // =>  FALSE
[00:48:22.347]        // skip if-block "!isSWJ"
[00:48:22.347]      </control>
[00:48:22.348]      <block atomic="false" info="">
[00:48:22.348]        ReadDP(0x0);
[00:48:22.349]  
[00:48:22.349]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.349]  
[00:48:22.349]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.349]      </block>
[00:48:22.349]      // end if-block "protType == 2"
[00:48:22.349]    </control>
[00:48:22.349]  </sequence>
[00:48:22.349]  
[00:48:22.401]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.401]  
[00:48:22.401]  <debugvars>
[00:48:22.401]    // Pre-defined
[00:48:22.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.403]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.403]    __dp=0x00000000
[00:48:22.403]    __ap=0x00000000
[00:48:22.403]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.403]    __FlashAddr=0x00000000
[00:48:22.403]    __FlashLen=0x00000000
[00:48:22.403]    __FlashArg=0x00000000
[00:48:22.403]    __FlashOp=0x00000000
[00:48:22.404]    __Result=0x00000000
[00:48:22.404]  </debugvars>
[00:48:22.404]  
[00:48:22.404]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.404]    <block atomic="false" info="">
[00:48:22.404]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.404]        // -> [isSWJ <= 0x00000001]
[00:48:22.404]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.404]        // -> [hasDormant <= 0x00000000]
[00:48:22.405]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.405]        // -> [protType <= 0x00000002]
[00:48:22.405]    </block>
[00:48:22.405]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.405]      // if-block "protType == 1"
[00:48:22.405]        // =>  FALSE
[00:48:22.405]      // skip if-block "protType == 1"
[00:48:22.405]    </control>
[00:48:22.405]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.405]      // if-block "protType == 2"
[00:48:22.406]        // =>  TRUE
[00:48:22.406]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.406]        // if-block "isSWJ"
[00:48:22.406]          // =>  TRUE
[00:48:22.406]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.406]          // if-block "hasDormant"
[00:48:22.406]            // =>  FALSE
[00:48:22.406]          // skip if-block "hasDormant"
[00:48:22.406]        </control>
[00:48:22.406]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.407]          // if-block "!hasDormant"
[00:48:22.407]            // =>  TRUE
[00:48:22.407]          <block atomic="false" info="">
[00:48:22.407]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.408]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.411]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.413]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.417]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.419]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.419]          </block>
[00:48:22.419]          // end if-block "!hasDormant"
[00:48:22.419]        </control>
[00:48:22.419]        // end if-block "isSWJ"
[00:48:22.419]      </control>
[00:48:22.420]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.420]        // if-block "!isSWJ"
[00:48:22.420]          // =>  FALSE
[00:48:22.420]        // skip if-block "!isSWJ"
[00:48:22.420]      </control>
[00:48:22.420]      <block atomic="false" info="">
[00:48:22.421]        ReadDP(0x0);
[00:48:22.422]  
[00:48:22.422]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.422]  
[00:48:22.422]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.422]      </block>
[00:48:22.422]      // end if-block "protType == 2"
[00:48:22.422]    </control>
[00:48:22.422]  </sequence>
[00:48:22.422]  
[00:48:22.476]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.476]  
[00:48:22.476]  <debugvars>
[00:48:22.477]    // Pre-defined
[00:48:22.477]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.477]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.477]    __dp=0x00000000
[00:48:22.477]    __ap=0x00000000
[00:48:22.477]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.477]    __FlashAddr=0x00000000
[00:48:22.477]    __FlashLen=0x00000000
[00:48:22.477]    __FlashArg=0x00000000
[00:48:22.478]    __FlashOp=0x00000000
[00:48:22.478]    __Result=0x00000000
[00:48:22.478]  </debugvars>
[00:48:22.478]  
[00:48:22.478]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.478]    <block atomic="false" info="">
[00:48:22.478]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.478]        // -> [isSWJ <= 0x00000001]
[00:48:22.478]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.479]        // -> [hasDormant <= 0x00000000]
[00:48:22.479]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.479]        // -> [protType <= 0x00000002]
[00:48:22.479]    </block>
[00:48:22.479]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.479]      // if-block "protType == 1"
[00:48:22.479]        // =>  FALSE
[00:48:22.479]      // skip if-block "protType == 1"
[00:48:22.479]    </control>
[00:48:22.480]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.480]      // if-block "protType == 2"
[00:48:22.480]        // =>  TRUE
[00:48:22.481]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.481]        // if-block "isSWJ"
[00:48:22.481]          // =>  TRUE
[00:48:22.481]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.481]          // if-block "hasDormant"
[00:48:22.481]            // =>  FALSE
[00:48:22.481]          // skip if-block "hasDormant"
[00:48:22.481]        </control>
[00:48:22.481]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.481]          // if-block "!hasDormant"
[00:48:22.481]            // =>  TRUE
[00:48:22.482]          <block atomic="false" info="">
[00:48:22.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.485]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.496]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.496]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.498]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.498]          </block>
[00:48:22.498]          // end if-block "!hasDormant"
[00:48:22.498]        </control>
[00:48:22.498]        // end if-block "isSWJ"
[00:48:22.498]      </control>
[00:48:22.498]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.498]        // if-block "!isSWJ"
[00:48:22.498]          // =>  FALSE
[00:48:22.499]        // skip if-block "!isSWJ"
[00:48:22.499]      </control>
[00:48:22.499]      <block atomic="false" info="">
[00:48:22.499]        ReadDP(0x0);
[00:48:22.501]  
[00:48:22.501]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.501]  
[00:48:22.501]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.501]      </block>
[00:48:22.501]      // end if-block "protType == 2"
[00:48:22.501]    </control>
[00:48:22.501]  </sequence>
[00:48:22.501]  
[00:48:22.552]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.552]  
[00:48:22.552]  <debugvars>
[00:48:22.552]    // Pre-defined
[00:48:22.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.552]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.552]    __dp=0x00000000
[00:48:22.553]    __ap=0x00000000
[00:48:22.553]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.553]    __FlashAddr=0x00000000
[00:48:22.553]    __FlashLen=0x00000000
[00:48:22.554]    __FlashArg=0x00000000
[00:48:22.554]    __FlashOp=0x00000000
[00:48:22.554]    __Result=0x00000000
[00:48:22.554]  </debugvars>
[00:48:22.554]  
[00:48:22.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.554]    <block atomic="false" info="">
[00:48:22.555]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.555]        // -> [isSWJ <= 0x00000001]
[00:48:22.555]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.555]        // -> [hasDormant <= 0x00000000]
[00:48:22.555]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.555]        // -> [protType <= 0x00000002]
[00:48:22.555]    </block>
[00:48:22.555]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.555]      // if-block "protType == 1"
[00:48:22.555]        // =>  FALSE
[00:48:22.556]      // skip if-block "protType == 1"
[00:48:22.556]    </control>
[00:48:22.556]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.556]      // if-block "protType == 2"
[00:48:22.556]        // =>  TRUE
[00:48:22.556]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.556]        // if-block "isSWJ"
[00:48:22.556]          // =>  TRUE
[00:48:22.556]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.557]          // if-block "hasDormant"
[00:48:22.557]            // =>  FALSE
[00:48:22.557]          // skip if-block "hasDormant"
[00:48:22.557]        </control>
[00:48:22.557]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.557]          // if-block "!hasDormant"
[00:48:22.558]            // =>  TRUE
[00:48:22.558]          <block atomic="false" info="">
[00:48:22.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.561]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.562]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.562]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.566]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.569]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.569]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.570]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.570]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.571]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.571]          </block>
[00:48:22.572]          // end if-block "!hasDormant"
[00:48:22.572]        </control>
[00:48:22.572]        // end if-block "isSWJ"
[00:48:22.572]      </control>
[00:48:22.572]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.572]        // if-block "!isSWJ"
[00:48:22.572]          // =>  FALSE
[00:48:22.572]        // skip if-block "!isSWJ"
[00:48:22.572]      </control>
[00:48:22.572]      <block atomic="false" info="">
[00:48:22.573]        ReadDP(0x0);
[00:48:22.575]  
[00:48:22.575]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.575]  
[00:48:22.575]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.575]      </block>
[00:48:22.575]      // end if-block "protType == 2"
[00:48:22.575]    </control>
[00:48:22.576]  </sequence>
[00:48:22.576]  
[00:48:22.627]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.627]  
[00:48:22.627]  <debugvars>
[00:48:22.627]    // Pre-defined
[00:48:22.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.627]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.628]    __dp=0x00000000
[00:48:22.628]    __ap=0x00000000
[00:48:22.628]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.628]    __FlashAddr=0x00000000
[00:48:22.628]    __FlashLen=0x00000000
[00:48:22.628]    __FlashArg=0x00000000
[00:48:22.628]    __FlashOp=0x00000000
[00:48:22.629]    __Result=0x00000000
[00:48:22.629]  </debugvars>
[00:48:22.629]  
[00:48:22.629]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.629]    <block atomic="false" info="">
[00:48:22.629]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.629]        // -> [isSWJ <= 0x00000001]
[00:48:22.629]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.629]        // -> [hasDormant <= 0x00000000]
[00:48:22.630]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.630]        // -> [protType <= 0x00000002]
[00:48:22.630]    </block>
[00:48:22.630]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.630]      // if-block "protType == 1"
[00:48:22.630]        // =>  FALSE
[00:48:22.630]      // skip if-block "protType == 1"
[00:48:22.630]    </control>
[00:48:22.630]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.630]      // if-block "protType == 2"
[00:48:22.631]        // =>  TRUE
[00:48:22.631]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.631]        // if-block "isSWJ"
[00:48:22.631]          // =>  TRUE
[00:48:22.631]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.631]          // if-block "hasDormant"
[00:48:22.631]            // =>  FALSE
[00:48:22.631]          // skip if-block "hasDormant"
[00:48:22.631]        </control>
[00:48:22.631]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.632]          // if-block "!hasDormant"
[00:48:22.632]            // =>  TRUE
[00:48:22.632]          <block atomic="false" info="">
[00:48:22.632]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.633]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.634]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.636]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.642]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.646]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.646]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.648]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.648]          </block>
[00:48:22.648]          // end if-block "!hasDormant"
[00:48:22.648]        </control>
[00:48:22.648]        // end if-block "isSWJ"
[00:48:22.648]      </control>
[00:48:22.649]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.649]        // if-block "!isSWJ"
[00:48:22.649]          // =>  FALSE
[00:48:22.649]        // skip if-block "!isSWJ"
[00:48:22.649]      </control>
[00:48:22.649]      <block atomic="false" info="">
[00:48:22.649]        ReadDP(0x0);
[00:48:22.650]  
[00:48:22.650]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.650]  
[00:48:22.650]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.651]      </block>
[00:48:22.651]      // end if-block "protType == 2"
[00:48:22.651]    </control>
[00:48:22.651]  </sequence>
[00:48:22.651]  
[00:48:22.702]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.702]  
[00:48:22.702]  <debugvars>
[00:48:22.702]    // Pre-defined
[00:48:22.702]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.702]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.702]    __dp=0x00000000
[00:48:22.704]    __ap=0x00000000
[00:48:22.704]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.704]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.704]    __FlashAddr=0x00000000
[00:48:22.704]    __FlashLen=0x00000000
[00:48:22.704]    __FlashArg=0x00000000
[00:48:22.704]    __FlashOp=0x00000000
[00:48:22.704]    __Result=0x00000000
[00:48:22.704]  </debugvars>
[00:48:22.704]  
[00:48:22.704]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.704]    <block atomic="false" info="">
[00:48:22.704]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.704]        // -> [isSWJ <= 0x00000001]
[00:48:22.705]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.705]        // -> [hasDormant <= 0x00000000]
[00:48:22.705]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.705]        // -> [protType <= 0x00000002]
[00:48:22.705]    </block>
[00:48:22.705]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.705]      // if-block "protType == 1"
[00:48:22.705]        // =>  FALSE
[00:48:22.705]      // skip if-block "protType == 1"
[00:48:22.706]    </control>
[00:48:22.706]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.706]      // if-block "protType == 2"
[00:48:22.706]        // =>  TRUE
[00:48:22.706]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.706]        // if-block "isSWJ"
[00:48:22.706]          // =>  TRUE
[00:48:22.706]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.706]          // if-block "hasDormant"
[00:48:22.706]            // =>  FALSE
[00:48:22.707]          // skip if-block "hasDormant"
[00:48:22.707]        </control>
[00:48:22.707]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.707]          // if-block "!hasDormant"
[00:48:22.707]            // =>  TRUE
[00:48:22.707]          <block atomic="false" info="">
[00:48:22.707]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.711]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.713]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.713]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.715]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.715]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.717]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.719]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.722]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.723]          </block>
[00:48:22.723]          // end if-block "!hasDormant"
[00:48:22.723]        </control>
[00:48:22.723]        // end if-block "isSWJ"
[00:48:22.723]      </control>
[00:48:22.723]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.723]        // if-block "!isSWJ"
[00:48:22.723]          // =>  FALSE
[00:48:22.723]        // skip if-block "!isSWJ"
[00:48:22.723]      </control>
[00:48:22.723]      <block atomic="false" info="">
[00:48:22.723]        ReadDP(0x0);
[00:48:22.733]  
[00:48:22.733]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.733]  
[00:48:22.733]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.733]      </block>
[00:48:22.733]      // end if-block "protType == 2"
[00:48:22.733]    </control>
[00:48:22.733]  </sequence>
[00:48:22.735]  
[00:48:22.794]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.794]  
[00:48:22.794]  <debugvars>
[00:48:22.795]    // Pre-defined
[00:48:22.795]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.795]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.795]    __dp=0x00000000
[00:48:22.795]    __ap=0x00000000
[00:48:22.795]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.795]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.795]    __FlashAddr=0x00000000
[00:48:22.797]    __FlashLen=0x00000000
[00:48:22.797]    __FlashArg=0x00000000
[00:48:22.797]    __FlashOp=0x00000000
[00:48:22.797]    __Result=0x00000000
[00:48:22.797]  </debugvars>
[00:48:22.797]  
[00:48:22.797]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.797]    <block atomic="false" info="">
[00:48:22.797]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.797]        // -> [isSWJ <= 0x00000001]
[00:48:22.798]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.798]        // -> [hasDormant <= 0x00000000]
[00:48:22.798]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.798]        // -> [protType <= 0x00000002]
[00:48:22.798]    </block>
[00:48:22.798]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.798]      // if-block "protType == 1"
[00:48:22.798]        // =>  FALSE
[00:48:22.798]      // skip if-block "protType == 1"
[00:48:22.798]    </control>
[00:48:22.799]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.799]      // if-block "protType == 2"
[00:48:22.799]        // =>  TRUE
[00:48:22.799]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.799]        // if-block "isSWJ"
[00:48:22.799]          // =>  TRUE
[00:48:22.799]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.799]          // if-block "hasDormant"
[00:48:22.800]            // =>  FALSE
[00:48:22.800]          // skip if-block "hasDormant"
[00:48:22.800]        </control>
[00:48:22.800]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.800]          // if-block "!hasDormant"
[00:48:22.800]            // =>  TRUE
[00:48:22.801]          <block atomic="false" info="">
[00:48:22.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.802]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.806]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.806]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.808]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.808]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.809]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.813]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.813]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.814]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.814]          </block>
[00:48:22.814]          // end if-block "!hasDormant"
[00:48:22.814]        </control>
[00:48:22.815]        // end if-block "isSWJ"
[00:48:22.815]      </control>
[00:48:22.815]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.815]        // if-block "!isSWJ"
[00:48:22.815]          // =>  FALSE
[00:48:22.815]        // skip if-block "!isSWJ"
[00:48:22.815]      </control>
[00:48:22.815]      <block atomic="false" info="">
[00:48:22.815]        ReadDP(0x0);
[00:48:22.817]  
[00:48:22.817]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.817]  
[00:48:22.817]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.817]      </block>
[00:48:22.817]      // end if-block "protType == 2"
[00:48:22.817]    </control>
[00:48:22.817]  </sequence>
[00:48:22.817]  
[00:48:22.871]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.871]  
[00:48:22.873]  <debugvars>
[00:48:22.873]    // Pre-defined
[00:48:22.873]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.873]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.873]    __dp=0x00000000
[00:48:22.873]    __ap=0x00000000
[00:48:22.874]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.874]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.874]    __FlashAddr=0x00000000
[00:48:22.874]    __FlashLen=0x00000000
[00:48:22.874]    __FlashArg=0x00000000
[00:48:22.875]    __FlashOp=0x00000000
[00:48:22.875]    __Result=0x00000000
[00:48:22.875]  </debugvars>
[00:48:22.875]  
[00:48:22.875]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.875]    <block atomic="false" info="">
[00:48:22.876]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.876]        // -> [isSWJ <= 0x00000001]
[00:48:22.876]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.876]        // -> [hasDormant <= 0x00000000]
[00:48:22.876]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.876]        // -> [protType <= 0x00000002]
[00:48:22.876]    </block>
[00:48:22.876]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.876]      // if-block "protType == 1"
[00:48:22.877]        // =>  FALSE
[00:48:22.877]      // skip if-block "protType == 1"
[00:48:22.877]    </control>
[00:48:22.877]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.877]      // if-block "protType == 2"
[00:48:22.877]        // =>  TRUE
[00:48:22.877]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.877]        // if-block "isSWJ"
[00:48:22.877]          // =>  TRUE
[00:48:22.877]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.878]          // if-block "hasDormant"
[00:48:22.878]            // =>  FALSE
[00:48:22.878]          // skip if-block "hasDormant"
[00:48:22.878]        </control>
[00:48:22.878]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.878]          // if-block "!hasDormant"
[00:48:22.878]            // =>  TRUE
[00:48:22.879]          <block atomic="false" info="">
[00:48:22.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.882]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.882]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.886]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.887]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.887]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.889]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.890]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.890]          </block>
[00:48:22.890]          // end if-block "!hasDormant"
[00:48:22.890]        </control>
[00:48:22.891]        // end if-block "isSWJ"
[00:48:22.891]      </control>
[00:48:22.891]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.891]        // if-block "!isSWJ"
[00:48:22.891]          // =>  FALSE
[00:48:22.891]        // skip if-block "!isSWJ"
[00:48:22.891]      </control>
[00:48:22.891]      <block atomic="false" info="">
[00:48:22.892]        ReadDP(0x0);
[00:48:22.895]  
[00:48:22.895]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.895]  
[00:48:22.895]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.895]      </block>
[00:48:22.895]      // end if-block "protType == 2"
[00:48:22.896]    </control>
[00:48:22.896]  </sequence>
[00:48:22.896]  
[00:48:22.947]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:22.947]  
[00:48:22.948]  <debugvars>
[00:48:22.948]    // Pre-defined
[00:48:22.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:22.948]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:22.948]    __dp=0x00000000
[00:48:22.948]    __ap=0x00000000
[00:48:22.948]    __traceout=0x00000000      (Trace Disabled)
[00:48:22.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:22.948]    __FlashAddr=0x00000000
[00:48:22.949]    __FlashLen=0x00000000
[00:48:22.949]    __FlashArg=0x00000000
[00:48:22.949]    __FlashOp=0x00000000
[00:48:22.949]    __Result=0x00000000
[00:48:22.949]  </debugvars>
[00:48:22.949]  
[00:48:22.949]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:22.950]    <block atomic="false" info="">
[00:48:22.950]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:22.950]        // -> [isSWJ <= 0x00000001]
[00:48:22.950]      __var hasDormant = __protocol & 0x00020000;
[00:48:22.950]        // -> [hasDormant <= 0x00000000]
[00:48:22.950]      __var protType   = __protocol & 0x0000FFFF;
[00:48:22.950]        // -> [protType <= 0x00000002]
[00:48:22.950]    </block>
[00:48:22.950]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:22.952]      // if-block "protType == 1"
[00:48:22.952]        // =>  FALSE
[00:48:22.952]      // skip if-block "protType == 1"
[00:48:22.952]    </control>
[00:48:22.952]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:22.952]      // if-block "protType == 2"
[00:48:22.952]        // =>  TRUE
[00:48:22.952]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:22.952]        // if-block "isSWJ"
[00:48:22.952]          // =>  TRUE
[00:48:22.952]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:22.952]          // if-block "hasDormant"
[00:48:22.952]            // =>  FALSE
[00:48:22.952]          // skip if-block "hasDormant"
[00:48:22.953]        </control>
[00:48:22.953]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:22.953]          // if-block "!hasDormant"
[00:48:22.953]            // =>  TRUE
[00:48:22.953]          <block atomic="false" info="">
[00:48:22.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:22.956]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.956]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:22.957]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:22.958]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:22.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.961]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:22.962]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:22.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:22.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:22.965]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:22.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:22.966]          </block>
[00:48:22.966]          // end if-block "!hasDormant"
[00:48:22.966]        </control>
[00:48:22.967]        // end if-block "isSWJ"
[00:48:22.967]      </control>
[00:48:22.967]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:22.967]        // if-block "!isSWJ"
[00:48:22.967]          // =>  FALSE
[00:48:22.967]        // skip if-block "!isSWJ"
[00:48:22.967]      </control>
[00:48:22.967]      <block atomic="false" info="">
[00:48:22.968]        ReadDP(0x0);
[00:48:22.971]  
[00:48:22.971]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:22.971]  
[00:48:22.971]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:22.972]      </block>
[00:48:22.972]      // end if-block "protType == 2"
[00:48:22.972]    </control>
[00:48:22.972]  </sequence>
[00:48:22.972]  
[00:48:23.024]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.024]  
[00:48:23.024]  <debugvars>
[00:48:23.025]    // Pre-defined
[00:48:23.025]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.025]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.025]    __dp=0x00000000
[00:48:23.025]    __ap=0x00000000
[00:48:23.025]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.026]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.026]    __FlashAddr=0x00000000
[00:48:23.026]    __FlashLen=0x00000000
[00:48:23.026]    __FlashArg=0x00000000
[00:48:23.026]    __FlashOp=0x00000000
[00:48:23.026]    __Result=0x00000000
[00:48:23.026]  </debugvars>
[00:48:23.026]  
[00:48:23.026]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.026]    <block atomic="false" info="">
[00:48:23.027]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.027]        // -> [isSWJ <= 0x00000001]
[00:48:23.027]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.027]        // -> [hasDormant <= 0x00000000]
[00:48:23.027]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.027]        // -> [protType <= 0x00000002]
[00:48:23.027]    </block>
[00:48:23.027]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.027]      // if-block "protType == 1"
[00:48:23.028]        // =>  FALSE
[00:48:23.028]      // skip if-block "protType == 1"
[00:48:23.028]    </control>
[00:48:23.028]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.028]      // if-block "protType == 2"
[00:48:23.028]        // =>  TRUE
[00:48:23.028]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.028]        // if-block "isSWJ"
[00:48:23.028]          // =>  TRUE
[00:48:23.029]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.029]          // if-block "hasDormant"
[00:48:23.029]            // =>  FALSE
[00:48:23.029]          // skip if-block "hasDormant"
[00:48:23.029]        </control>
[00:48:23.029]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.029]          // if-block "!hasDormant"
[00:48:23.030]            // =>  TRUE
[00:48:23.030]          <block atomic="false" info="">
[00:48:23.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.033]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.035]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.035]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.037]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.037]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.040]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.042]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.042]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.043]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.043]          </block>
[00:48:23.044]          // end if-block "!hasDormant"
[00:48:23.044]        </control>
[00:48:23.044]        // end if-block "isSWJ"
[00:48:23.044]      </control>
[00:48:23.044]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.044]        // if-block "!isSWJ"
[00:48:23.044]          // =>  FALSE
[00:48:23.044]        // skip if-block "!isSWJ"
[00:48:23.044]      </control>
[00:48:23.044]      <block atomic="false" info="">
[00:48:23.045]        ReadDP(0x0);
[00:48:23.046]  
[00:48:23.046]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.046]  
[00:48:23.046]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.046]      </block>
[00:48:23.046]      // end if-block "protType == 2"
[00:48:23.046]    </control>
[00:48:23.046]  </sequence>
[00:48:23.046]  
[00:48:23.100]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.100]  
[00:48:23.100]  <debugvars>
[00:48:23.100]    // Pre-defined
[00:48:23.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.100]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.102]    __dp=0x00000000
[00:48:23.102]    __ap=0x00000000
[00:48:23.102]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.102]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.102]    __FlashAddr=0x00000000
[00:48:23.102]    __FlashLen=0x00000000
[00:48:23.102]    __FlashArg=0x00000000
[00:48:23.102]    __FlashOp=0x00000000
[00:48:23.102]    __Result=0x00000000
[00:48:23.102]  </debugvars>
[00:48:23.103]  
[00:48:23.103]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.103]    <block atomic="false" info="">
[00:48:23.103]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.103]        // -> [isSWJ <= 0x00000001]
[00:48:23.103]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.103]        // -> [hasDormant <= 0x00000000]
[00:48:23.103]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.103]        // -> [protType <= 0x00000002]
[00:48:23.103]    </block>
[00:48:23.104]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.104]      // if-block "protType == 1"
[00:48:23.104]        // =>  FALSE
[00:48:23.104]      // skip if-block "protType == 1"
[00:48:23.104]    </control>
[00:48:23.104]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.104]      // if-block "protType == 2"
[00:48:23.104]        // =>  TRUE
[00:48:23.104]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.104]        // if-block "isSWJ"
[00:48:23.105]          // =>  TRUE
[00:48:23.105]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.105]          // if-block "hasDormant"
[00:48:23.105]            // =>  FALSE
[00:48:23.105]          // skip if-block "hasDormant"
[00:48:23.105]        </control>
[00:48:23.105]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.105]          // if-block "!hasDormant"
[00:48:23.105]            // =>  TRUE
[00:48:23.106]          <block atomic="false" info="">
[00:48:23.106]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.111]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.113]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.114]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.114]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.120]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.121]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.121]          </block>
[00:48:23.121]          // end if-block "!hasDormant"
[00:48:23.121]        </control>
[00:48:23.121]        // end if-block "isSWJ"
[00:48:23.121]      </control>
[00:48:23.121]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.121]        // if-block "!isSWJ"
[00:48:23.121]          // =>  FALSE
[00:48:23.121]        // skip if-block "!isSWJ"
[00:48:23.122]      </control>
[00:48:23.122]      <block atomic="false" info="">
[00:48:23.122]        ReadDP(0x0);
[00:48:23.123]  
[00:48:23.123]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.123]  
[00:48:23.123]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.123]      </block>
[00:48:23.124]      // end if-block "protType == 2"
[00:48:23.124]    </control>
[00:48:23.124]  </sequence>
[00:48:23.124]  
[00:48:23.177]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.177]  
[00:48:23.177]  <debugvars>
[00:48:23.177]    // Pre-defined
[00:48:23.177]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.177]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.177]    __dp=0x00000000
[00:48:23.177]    __ap=0x00000000
[00:48:23.177]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.178]    __FlashAddr=0x00000000
[00:48:23.178]    __FlashLen=0x00000000
[00:48:23.178]    __FlashArg=0x00000000
[00:48:23.178]    __FlashOp=0x00000000
[00:48:23.178]    __Result=0x00000000
[00:48:23.178]  </debugvars>
[00:48:23.178]  
[00:48:23.178]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.178]    <block atomic="false" info="">
[00:48:23.178]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.179]        // -> [isSWJ <= 0x00000001]
[00:48:23.179]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.179]        // -> [hasDormant <= 0x00000000]
[00:48:23.179]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.179]        // -> [protType <= 0x00000002]
[00:48:23.179]    </block>
[00:48:23.179]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.179]      // if-block "protType == 1"
[00:48:23.180]        // =>  FALSE
[00:48:23.180]      // skip if-block "protType == 1"
[00:48:23.180]    </control>
[00:48:23.180]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.180]      // if-block "protType == 2"
[00:48:23.180]        // =>  TRUE
[00:48:23.180]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.180]        // if-block "isSWJ"
[00:48:23.180]          // =>  TRUE
[00:48:23.180]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.181]          // if-block "hasDormant"
[00:48:23.181]            // =>  FALSE
[00:48:23.181]          // skip if-block "hasDormant"
[00:48:23.181]        </control>
[00:48:23.181]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.181]          // if-block "!hasDormant"
[00:48:23.181]            // =>  TRUE
[00:48:23.181]          <block atomic="false" info="">
[00:48:23.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.183]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.186]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.189]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.189]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.190]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.192]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.192]          </block>
[00:48:23.192]          // end if-block "!hasDormant"
[00:48:23.192]        </control>
[00:48:23.192]        // end if-block "isSWJ"
[00:48:23.192]      </control>
[00:48:23.192]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.192]        // if-block "!isSWJ"
[00:48:23.192]          // =>  FALSE
[00:48:23.193]        // skip if-block "!isSWJ"
[00:48:23.193]      </control>
[00:48:23.193]      <block atomic="false" info="">
[00:48:23.193]        ReadDP(0x0);
[00:48:23.194]  
[00:48:23.194]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.194]  
[00:48:23.194]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.194]      </block>
[00:48:23.195]      // end if-block "protType == 2"
[00:48:23.195]    </control>
[00:48:23.195]  </sequence>
[00:48:23.195]  
[00:48:23.254]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.254]  
[00:48:23.254]  <debugvars>
[00:48:23.254]    // Pre-defined
[00:48:23.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.254]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.254]    __dp=0x00000000
[00:48:23.254]    __ap=0x00000000
[00:48:23.254]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.254]    __FlashAddr=0x00000000
[00:48:23.255]    __FlashLen=0x00000000
[00:48:23.255]    __FlashArg=0x00000000
[00:48:23.255]    __FlashOp=0x00000000
[00:48:23.255]    __Result=0x00000000
[00:48:23.255]  </debugvars>
[00:48:23.255]  
[00:48:23.255]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.255]    <block atomic="false" info="">
[00:48:23.255]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.255]        // -> [isSWJ <= 0x00000001]
[00:48:23.256]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.256]        // -> [hasDormant <= 0x00000000]
[00:48:23.256]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.256]        // -> [protType <= 0x00000002]
[00:48:23.256]    </block>
[00:48:23.256]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.256]      // if-block "protType == 1"
[00:48:23.256]        // =>  FALSE
[00:48:23.256]      // skip if-block "protType == 1"
[00:48:23.256]    </control>
[00:48:23.257]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.257]      // if-block "protType == 2"
[00:48:23.257]        // =>  TRUE
[00:48:23.257]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.257]        // if-block "isSWJ"
[00:48:23.257]          // =>  TRUE
[00:48:23.257]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.257]          // if-block "hasDormant"
[00:48:23.257]            // =>  FALSE
[00:48:23.257]          // skip if-block "hasDormant"
[00:48:23.257]        </control>
[00:48:23.258]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.258]          // if-block "!hasDormant"
[00:48:23.258]            // =>  TRUE
[00:48:23.259]          <block atomic="false" info="">
[00:48:23.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.262]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.265]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.266]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.267]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.270]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.270]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.272]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.272]          </block>
[00:48:23.272]          // end if-block "!hasDormant"
[00:48:23.272]        </control>
[00:48:23.272]        // end if-block "isSWJ"
[00:48:23.272]      </control>
[00:48:23.272]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.273]        // if-block "!isSWJ"
[00:48:23.273]          // =>  FALSE
[00:48:23.273]        // skip if-block "!isSWJ"
[00:48:23.273]      </control>
[00:48:23.273]      <block atomic="false" info="">
[00:48:23.273]        ReadDP(0x0);
[00:48:23.277]  
[00:48:23.277]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.277]  
[00:48:23.277]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.277]      </block>
[00:48:23.277]      // end if-block "protType == 2"
[00:48:23.278]    </control>
[00:48:23.278]  </sequence>
[00:48:23.278]  
[00:48:23.329]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.329]  
[00:48:23.329]  <debugvars>
[00:48:23.329]    // Pre-defined
[00:48:23.329]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.329]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.330]    __dp=0x00000000
[00:48:23.330]    __ap=0x00000000
[00:48:23.330]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.330]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.330]    __FlashAddr=0x00000000
[00:48:23.330]    __FlashLen=0x00000000
[00:48:23.330]    __FlashArg=0x00000000
[00:48:23.330]    __FlashOp=0x00000000
[00:48:23.330]    __Result=0x00000000
[00:48:23.331]  </debugvars>
[00:48:23.331]  
[00:48:23.331]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.331]    <block atomic="false" info="">
[00:48:23.331]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.331]        // -> [isSWJ <= 0x00000001]
[00:48:23.331]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.331]        // -> [hasDormant <= 0x00000000]
[00:48:23.331]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.331]        // -> [protType <= 0x00000002]
[00:48:23.332]    </block>
[00:48:23.332]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.332]      // if-block "protType == 1"
[00:48:23.332]        // =>  FALSE
[00:48:23.332]      // skip if-block "protType == 1"
[00:48:23.332]    </control>
[00:48:23.332]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.333]      // if-block "protType == 2"
[00:48:23.333]        // =>  TRUE
[00:48:23.333]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.333]        // if-block "isSWJ"
[00:48:23.333]          // =>  TRUE
[00:48:23.333]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.334]          // if-block "hasDormant"
[00:48:23.334]            // =>  FALSE
[00:48:23.334]          // skip if-block "hasDormant"
[00:48:23.334]        </control>
[00:48:23.334]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.334]          // if-block "!hasDormant"
[00:48:23.334]            // =>  TRUE
[00:48:23.334]          <block atomic="false" info="">
[00:48:23.334]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.336]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.339]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.342]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.342]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.344]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.344]          </block>
[00:48:23.344]          // end if-block "!hasDormant"
[00:48:23.344]        </control>
[00:48:23.344]        // end if-block "isSWJ"
[00:48:23.345]      </control>
[00:48:23.345]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.345]        // if-block "!isSWJ"
[00:48:23.345]          // =>  FALSE
[00:48:23.345]        // skip if-block "!isSWJ"
[00:48:23.345]      </control>
[00:48:23.345]      <block atomic="false" info="">
[00:48:23.345]        ReadDP(0x0);
[00:48:23.346]  
[00:48:23.346]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.346]  
[00:48:23.346]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.346]      </block>
[00:48:23.346]      // end if-block "protType == 2"
[00:48:23.346]    </control>
[00:48:23.346]  </sequence>
[00:48:23.347]  
[00:48:23.405]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.405]  
[00:48:23.405]  <debugvars>
[00:48:23.405]    // Pre-defined
[00:48:23.405]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.405]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.405]    __dp=0x00000000
[00:48:23.405]    __ap=0x00000000
[00:48:23.405]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.405]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.405]    __FlashAddr=0x00000000
[00:48:23.405]    __FlashLen=0x00000000
[00:48:23.405]    __FlashArg=0x00000000
[00:48:23.406]    __FlashOp=0x00000000
[00:48:23.406]    __Result=0x00000000
[00:48:23.406]  </debugvars>
[00:48:23.406]  
[00:48:23.406]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.406]    <block atomic="false" info="">
[00:48:23.406]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.406]        // -> [isSWJ <= 0x00000001]
[00:48:23.406]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.406]        // -> [hasDormant <= 0x00000000]
[00:48:23.406]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.407]        // -> [protType <= 0x00000002]
[00:48:23.407]    </block>
[00:48:23.407]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.407]      // if-block "protType == 1"
[00:48:23.407]        // =>  FALSE
[00:48:23.407]      // skip if-block "protType == 1"
[00:48:23.407]    </control>
[00:48:23.407]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.407]      // if-block "protType == 2"
[00:48:23.407]        // =>  TRUE
[00:48:23.408]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.408]        // if-block "isSWJ"
[00:48:23.408]          // =>  TRUE
[00:48:23.408]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.408]          // if-block "hasDormant"
[00:48:23.408]            // =>  FALSE
[00:48:23.409]          // skip if-block "hasDormant"
[00:48:23.409]        </control>
[00:48:23.409]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.409]          // if-block "!hasDormant"
[00:48:23.409]            // =>  TRUE
[00:48:23.409]          <block atomic="false" info="">
[00:48:23.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.414]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.415]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.419]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.420]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.422]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.422]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.422]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.423]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.424]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.424]          </block>
[00:48:23.424]          // end if-block "!hasDormant"
[00:48:23.424]        </control>
[00:48:23.424]        // end if-block "isSWJ"
[00:48:23.424]      </control>
[00:48:23.424]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.426]        // if-block "!isSWJ"
[00:48:23.426]          // =>  FALSE
[00:48:23.426]        // skip if-block "!isSWJ"
[00:48:23.426]      </control>
[00:48:23.426]      <block atomic="false" info="">
[00:48:23.426]        ReadDP(0x0);
[00:48:23.432]  
[00:48:23.432]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.432]  
[00:48:23.432]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.432]      </block>
[00:48:23.432]      // end if-block "protType == 2"
[00:48:23.432]    </control>
[00:48:23.433]  </sequence>
[00:48:23.433]  
[00:48:23.496]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.496]  
[00:48:23.497]  <debugvars>
[00:48:23.497]    // Pre-defined
[00:48:23.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.497]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.497]    __dp=0x00000000
[00:48:23.497]    __ap=0x00000000
[00:48:23.497]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.498]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.498]    __FlashAddr=0x00000000
[00:48:23.498]    __FlashLen=0x00000000
[00:48:23.498]    __FlashArg=0x00000000
[00:48:23.498]    __FlashOp=0x00000000
[00:48:23.498]    __Result=0x00000000
[00:48:23.498]  </debugvars>
[00:48:23.498]  
[00:48:23.498]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.498]    <block atomic="false" info="">
[00:48:23.498]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.499]        // -> [isSWJ <= 0x00000001]
[00:48:23.499]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.499]        // -> [hasDormant <= 0x00000000]
[00:48:23.499]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.499]        // -> [protType <= 0x00000002]
[00:48:23.499]    </block>
[00:48:23.500]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.500]      // if-block "protType == 1"
[00:48:23.500]        // =>  FALSE
[00:48:23.501]      // skip if-block "protType == 1"
[00:48:23.501]    </control>
[00:48:23.501]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.501]      // if-block "protType == 2"
[00:48:23.501]        // =>  TRUE
[00:48:23.501]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.501]        // if-block "isSWJ"
[00:48:23.501]          // =>  TRUE
[00:48:23.501]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.501]          // if-block "hasDormant"
[00:48:23.501]            // =>  FALSE
[00:48:23.502]          // skip if-block "hasDormant"
[00:48:23.502]        </control>
[00:48:23.502]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.502]          // if-block "!hasDormant"
[00:48:23.502]            // =>  TRUE
[00:48:23.502]          <block atomic="false" info="">
[00:48:23.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.503]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.507]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.510]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.517]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.520]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.520]          </block>
[00:48:23.520]          // end if-block "!hasDormant"
[00:48:23.521]        </control>
[00:48:23.521]        // end if-block "isSWJ"
[00:48:23.521]      </control>
[00:48:23.521]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.521]        // if-block "!isSWJ"
[00:48:23.521]          // =>  FALSE
[00:48:23.521]        // skip if-block "!isSWJ"
[00:48:23.521]      </control>
[00:48:23.521]      <block atomic="false" info="">
[00:48:23.521]        ReadDP(0x0);
[00:48:23.523]  
[00:48:23.523]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.523]  
[00:48:23.523]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.523]      </block>
[00:48:23.523]      // end if-block "protType == 2"
[00:48:23.523]    </control>
[00:48:23.524]  </sequence>
[00:48:23.524]  
[00:48:23.587]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.587]  
[00:48:23.588]  <debugvars>
[00:48:23.588]    // Pre-defined
[00:48:23.588]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.588]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.588]    __dp=0x00000000
[00:48:23.588]    __ap=0x00000000
[00:48:23.588]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.588]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.588]    __FlashAddr=0x00000000
[00:48:23.588]    __FlashLen=0x00000000
[00:48:23.588]    __FlashArg=0x00000000
[00:48:23.590]    __FlashOp=0x00000000
[00:48:23.590]    __Result=0x00000000
[00:48:23.590]  </debugvars>
[00:48:23.590]  
[00:48:23.590]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.590]    <block atomic="false" info="">
[00:48:23.590]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.590]        // -> [isSWJ <= 0x00000001]
[00:48:23.590]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.590]        // -> [hasDormant <= 0x00000000]
[00:48:23.590]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.591]        // -> [protType <= 0x00000002]
[00:48:23.591]    </block>
[00:48:23.591]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.591]      // if-block "protType == 1"
[00:48:23.591]        // =>  FALSE
[00:48:23.591]      // skip if-block "protType == 1"
[00:48:23.591]    </control>
[00:48:23.592]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.592]      // if-block "protType == 2"
[00:48:23.592]        // =>  TRUE
[00:48:23.592]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.592]        // if-block "isSWJ"
[00:48:23.592]          // =>  TRUE
[00:48:23.592]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.592]          // if-block "hasDormant"
[00:48:23.592]            // =>  FALSE
[00:48:23.592]          // skip if-block "hasDormant"
[00:48:23.592]        </control>
[00:48:23.592]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.593]          // if-block "!hasDormant"
[00:48:23.593]            // =>  TRUE
[00:48:23.593]          <block atomic="false" info="">
[00:48:23.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.595]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.598]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.600]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.603]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.605]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.605]          </block>
[00:48:23.605]          // end if-block "!hasDormant"
[00:48:23.605]        </control>
[00:48:23.605]        // end if-block "isSWJ"
[00:48:23.605]      </control>
[00:48:23.605]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.605]        // if-block "!isSWJ"
[00:48:23.605]          // =>  FALSE
[00:48:23.605]        // skip if-block "!isSWJ"
[00:48:23.606]      </control>
[00:48:23.607]      <block atomic="false" info="">
[00:48:23.607]        ReadDP(0x0);
[00:48:23.618]  
[00:48:23.618]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.618]  
[00:48:23.618]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.618]      </block>
[00:48:23.618]      // end if-block "protType == 2"
[00:48:23.618]    </control>
[00:48:23.618]  </sequence>
[00:48:23.618]  
[00:48:23.679]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.679]  
[00:48:23.679]  <debugvars>
[00:48:23.679]    // Pre-defined
[00:48:23.679]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.679]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.679]    __dp=0x00000000
[00:48:23.679]    __ap=0x00000000
[00:48:23.679]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.679]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.680]    __FlashAddr=0x00000000
[00:48:23.680]    __FlashLen=0x00000000
[00:48:23.680]    __FlashArg=0x00000000
[00:48:23.680]    __FlashOp=0x00000000
[00:48:23.680]    __Result=0x00000000
[00:48:23.680]  </debugvars>
[00:48:23.681]  
[00:48:23.681]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.681]    <block atomic="false" info="">
[00:48:23.681]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.681]        // -> [isSWJ <= 0x00000001]
[00:48:23.681]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.681]        // -> [hasDormant <= 0x00000000]
[00:48:23.681]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.681]        // -> [protType <= 0x00000002]
[00:48:23.681]    </block>
[00:48:23.682]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.682]      // if-block "protType == 1"
[00:48:23.682]        // =>  FALSE
[00:48:23.682]      // skip if-block "protType == 1"
[00:48:23.682]    </control>
[00:48:23.682]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.682]      // if-block "protType == 2"
[00:48:23.682]        // =>  TRUE
[00:48:23.682]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.682]        // if-block "isSWJ"
[00:48:23.683]          // =>  TRUE
[00:48:23.683]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.683]          // if-block "hasDormant"
[00:48:23.683]            // =>  FALSE
[00:48:23.683]          // skip if-block "hasDormant"
[00:48:23.683]        </control>
[00:48:23.683]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.683]          // if-block "!hasDormant"
[00:48:23.683]            // =>  TRUE
[00:48:23.684]          <block atomic="false" info="">
[00:48:23.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.687]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.687]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.689]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.689]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.693]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.695]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.695]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.697]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.700]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.700]          </block>
[00:48:23.700]          // end if-block "!hasDormant"
[00:48:23.700]        </control>
[00:48:23.700]        // end if-block "isSWJ"
[00:48:23.701]      </control>
[00:48:23.701]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.702]        // if-block "!isSWJ"
[00:48:23.702]          // =>  FALSE
[00:48:23.702]        // skip if-block "!isSWJ"
[00:48:23.702]      </control>
[00:48:23.702]      <block atomic="false" info="">
[00:48:23.702]        ReadDP(0x0);
[00:48:23.703]  
[00:48:23.703]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.703]  
[00:48:23.703]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.703]      </block>
[00:48:23.703]      // end if-block "protType == 2"
[00:48:23.703]    </control>
[00:48:23.703]  </sequence>
[00:48:23.703]  
[00:48:23.755]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.755]  
[00:48:23.755]  <debugvars>
[00:48:23.755]    // Pre-defined
[00:48:23.755]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.755]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.755]    __dp=0x00000000
[00:48:23.756]    __ap=0x00000000
[00:48:23.756]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.756]    __FlashAddr=0x00000000
[00:48:23.756]    __FlashLen=0x00000000
[00:48:23.756]    __FlashArg=0x00000000
[00:48:23.756]    __FlashOp=0x00000000
[00:48:23.756]    __Result=0x00000000
[00:48:23.756]  </debugvars>
[00:48:23.756]  
[00:48:23.756]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.756]    <block atomic="false" info="">
[00:48:23.756]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.756]        // -> [isSWJ <= 0x00000001]
[00:48:23.757]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.757]        // -> [hasDormant <= 0x00000000]
[00:48:23.757]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.757]        // -> [protType <= 0x00000002]
[00:48:23.757]    </block>
[00:48:23.757]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.757]      // if-block "protType == 1"
[00:48:23.757]        // =>  FALSE
[00:48:23.757]      // skip if-block "protType == 1"
[00:48:23.757]    </control>
[00:48:23.758]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.758]      // if-block "protType == 2"
[00:48:23.758]        // =>  TRUE
[00:48:23.758]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.758]        // if-block "isSWJ"
[00:48:23.758]          // =>  TRUE
[00:48:23.758]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.758]          // if-block "hasDormant"
[00:48:23.759]            // =>  FALSE
[00:48:23.759]          // skip if-block "hasDormant"
[00:48:23.759]        </control>
[00:48:23.759]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.759]          // if-block "!hasDormant"
[00:48:23.759]            // =>  TRUE
[00:48:23.759]          <block atomic="false" info="">
[00:48:23.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.762]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.763]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.765]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.766]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.766]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.769]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.771]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.771]          </block>
[00:48:23.771]          // end if-block "!hasDormant"
[00:48:23.771]        </control>
[00:48:23.771]        // end if-block "isSWJ"
[00:48:23.771]      </control>
[00:48:23.771]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.771]        // if-block "!isSWJ"
[00:48:23.771]          // =>  FALSE
[00:48:23.771]        // skip if-block "!isSWJ"
[00:48:23.772]      </control>
[00:48:23.772]      <block atomic="false" info="">
[00:48:23.772]        ReadDP(0x0);
[00:48:23.773]  
[00:48:23.773]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.773]  
[00:48:23.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.773]      </block>
[00:48:23.773]      // end if-block "protType == 2"
[00:48:23.773]    </control>
[00:48:23.774]  </sequence>
[00:48:23.774]  
[00:48:23.832]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.832]  
[00:48:23.832]  <debugvars>
[00:48:23.832]    // Pre-defined
[00:48:23.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.832]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.832]    __dp=0x00000000
[00:48:23.832]    __ap=0x00000000
[00:48:23.833]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.833]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.833]    __FlashAddr=0x00000000
[00:48:23.833]    __FlashLen=0x00000000
[00:48:23.833]    __FlashArg=0x00000000
[00:48:23.833]    __FlashOp=0x00000000
[00:48:23.833]    __Result=0x00000000
[00:48:23.833]  </debugvars>
[00:48:23.833]  
[00:48:23.833]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.834]    <block atomic="false" info="">
[00:48:23.834]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.834]        // -> [isSWJ <= 0x00000001]
[00:48:23.834]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.834]        // -> [hasDormant <= 0x00000000]
[00:48:23.834]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.834]        // -> [protType <= 0x00000002]
[00:48:23.834]    </block>
[00:48:23.834]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.834]      // if-block "protType == 1"
[00:48:23.835]        // =>  FALSE
[00:48:23.835]      // skip if-block "protType == 1"
[00:48:23.835]    </control>
[00:48:23.835]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.835]      // if-block "protType == 2"
[00:48:23.835]        // =>  TRUE
[00:48:23.835]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.835]        // if-block "isSWJ"
[00:48:23.835]          // =>  TRUE
[00:48:23.835]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.835]          // if-block "hasDormant"
[00:48:23.836]            // =>  FALSE
[00:48:23.836]          // skip if-block "hasDormant"
[00:48:23.836]        </control>
[00:48:23.836]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.836]          // if-block "!hasDormant"
[00:48:23.836]            // =>  TRUE
[00:48:23.836]          <block atomic="false" info="">
[00:48:23.836]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.838]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.838]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.842]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.842]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.845]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.846]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.847]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.848]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.848]          </block>
[00:48:23.848]          // end if-block "!hasDormant"
[00:48:23.849]        </control>
[00:48:23.849]        // end if-block "isSWJ"
[00:48:23.849]      </control>
[00:48:23.849]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.849]        // if-block "!isSWJ"
[00:48:23.849]          // =>  FALSE
[00:48:23.849]        // skip if-block "!isSWJ"
[00:48:23.849]      </control>
[00:48:23.849]      <block atomic="false" info="">
[00:48:23.849]        ReadDP(0x0);
[00:48:23.851]  
[00:48:23.851]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.851]  
[00:48:23.851]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.851]      </block>
[00:48:23.851]      // end if-block "protType == 2"
[00:48:23.851]    </control>
[00:48:23.851]  </sequence>
[00:48:23.851]  
[00:48:23.908]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:23.908]  
[00:48:23.908]  <debugvars>
[00:48:23.908]    // Pre-defined
[00:48:23.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:23.908]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:23.908]    __dp=0x00000000
[00:48:23.909]    __ap=0x00000000
[00:48:23.909]    __traceout=0x00000000      (Trace Disabled)
[00:48:23.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:23.909]    __FlashAddr=0x00000000
[00:48:23.909]    __FlashLen=0x00000000
[00:48:23.909]    __FlashArg=0x00000000
[00:48:23.909]    __FlashOp=0x00000000
[00:48:23.909]    __Result=0x00000000
[00:48:23.909]  </debugvars>
[00:48:23.909]  
[00:48:23.910]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:23.911]    <block atomic="false" info="">
[00:48:23.911]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:23.911]        // -> [isSWJ <= 0x00000001]
[00:48:23.911]      __var hasDormant = __protocol & 0x00020000;
[00:48:23.911]        // -> [hasDormant <= 0x00000000]
[00:48:23.911]      __var protType   = __protocol & 0x0000FFFF;
[00:48:23.911]        // -> [protType <= 0x00000002]
[00:48:23.911]    </block>
[00:48:23.911]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:23.911]      // if-block "protType == 1"
[00:48:23.911]        // =>  FALSE
[00:48:23.911]      // skip if-block "protType == 1"
[00:48:23.912]    </control>
[00:48:23.912]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:23.912]      // if-block "protType == 2"
[00:48:23.912]        // =>  TRUE
[00:48:23.912]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:23.912]        // if-block "isSWJ"
[00:48:23.912]          // =>  TRUE
[00:48:23.912]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:23.912]          // if-block "hasDormant"
[00:48:23.912]            // =>  FALSE
[00:48:23.913]          // skip if-block "hasDormant"
[00:48:23.913]        </control>
[00:48:23.913]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:23.913]          // if-block "!hasDormant"
[00:48:23.913]            // =>  TRUE
[00:48:23.913]          <block atomic="false" info="">
[00:48:23.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:23.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.915]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:23.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:23.916]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:23.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.930]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:23.931]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:23.931]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:23.933]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:23.933]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:23.934]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:23.934]          </block>
[00:48:23.934]          // end if-block "!hasDormant"
[00:48:23.934]        </control>
[00:48:23.934]        // end if-block "isSWJ"
[00:48:23.934]      </control>
[00:48:23.934]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:23.936]        // if-block "!isSWJ"
[00:48:23.936]          // =>  FALSE
[00:48:23.936]        // skip if-block "!isSWJ"
[00:48:23.936]      </control>
[00:48:23.936]      <block atomic="false" info="">
[00:48:23.936]        ReadDP(0x0);
[00:48:23.939]  
[00:48:23.939]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:23.939]  
[00:48:23.940]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:23.940]      </block>
[00:48:23.940]      // end if-block "protType == 2"
[00:48:23.940]    </control>
[00:48:23.940]  </sequence>
[00:48:23.940]  
[00:48:24.001]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.001]  
[00:48:24.002]  <debugvars>
[00:48:24.002]    // Pre-defined
[00:48:24.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.002]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.003]    __dp=0x00000000
[00:48:24.003]    __ap=0x00000000
[00:48:24.003]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.003]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.003]    __FlashAddr=0x00000000
[00:48:24.003]    __FlashLen=0x00000000
[00:48:24.003]    __FlashArg=0x00000000
[00:48:24.004]    __FlashOp=0x00000000
[00:48:24.004]    __Result=0x00000000
[00:48:24.004]  </debugvars>
[00:48:24.004]  
[00:48:24.004]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.004]    <block atomic="false" info="">
[00:48:24.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.004]        // -> [isSWJ <= 0x00000001]
[00:48:24.004]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.004]        // -> [hasDormant <= 0x00000000]
[00:48:24.004]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.004]        // -> [protType <= 0x00000002]
[00:48:24.004]    </block>
[00:48:24.004]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.004]      // if-block "protType == 1"
[00:48:24.005]        // =>  FALSE
[00:48:24.005]      // skip if-block "protType == 1"
[00:48:24.005]    </control>
[00:48:24.005]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.005]      // if-block "protType == 2"
[00:48:24.005]        // =>  TRUE
[00:48:24.005]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.005]        // if-block "isSWJ"
[00:48:24.006]          // =>  TRUE
[00:48:24.006]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.006]          // if-block "hasDormant"
[00:48:24.006]            // =>  FALSE
[00:48:24.006]          // skip if-block "hasDormant"
[00:48:24.006]        </control>
[00:48:24.006]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.006]          // if-block "!hasDormant"
[00:48:24.007]            // =>  TRUE
[00:48:24.007]          <block atomic="false" info="">
[00:48:24.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.013]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.015]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.015]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.016]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.016]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.019]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.020]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.020]          </block>
[00:48:24.020]          // end if-block "!hasDormant"
[00:48:24.020]        </control>
[00:48:24.020]        // end if-block "isSWJ"
[00:48:24.020]      </control>
[00:48:24.020]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.022]        // if-block "!isSWJ"
[00:48:24.022]          // =>  FALSE
[00:48:24.022]        // skip if-block "!isSWJ"
[00:48:24.022]      </control>
[00:48:24.022]      <block atomic="false" info="">
[00:48:24.022]        ReadDP(0x0);
[00:48:24.023]  
[00:48:24.023]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.023]  
[00:48:24.024]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.024]      </block>
[00:48:24.024]      // end if-block "protType == 2"
[00:48:24.025]    </control>
[00:48:24.025]  </sequence>
[00:48:24.025]  
[00:48:24.076]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.076]  
[00:48:24.076]  <debugvars>
[00:48:24.076]    // Pre-defined
[00:48:24.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.077]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.077]    __dp=0x00000000
[00:48:24.077]    __ap=0x00000000
[00:48:24.077]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.077]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.077]    __FlashAddr=0x00000000
[00:48:24.077]    __FlashLen=0x00000000
[00:48:24.077]    __FlashArg=0x00000000
[00:48:24.077]    __FlashOp=0x00000000
[00:48:24.077]    __Result=0x00000000
[00:48:24.077]  </debugvars>
[00:48:24.078]  
[00:48:24.078]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.078]    <block atomic="false" info="">
[00:48:24.078]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.078]        // -> [isSWJ <= 0x00000001]
[00:48:24.078]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.079]        // -> [hasDormant <= 0x00000000]
[00:48:24.079]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.079]        // -> [protType <= 0x00000002]
[00:48:24.079]    </block>
[00:48:24.079]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.079]      // if-block "protType == 1"
[00:48:24.079]        // =>  FALSE
[00:48:24.079]      // skip if-block "protType == 1"
[00:48:24.079]    </control>
[00:48:24.080]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.080]      // if-block "protType == 2"
[00:48:24.080]        // =>  TRUE
[00:48:24.080]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.080]        // if-block "isSWJ"
[00:48:24.080]          // =>  TRUE
[00:48:24.080]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.080]          // if-block "hasDormant"
[00:48:24.080]            // =>  FALSE
[00:48:24.080]          // skip if-block "hasDormant"
[00:48:24.081]        </control>
[00:48:24.081]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.081]          // if-block "!hasDormant"
[00:48:24.081]            // =>  TRUE
[00:48:24.081]          <block atomic="false" info="">
[00:48:24.081]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.086]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.088]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.088]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.089]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.091]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.091]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.092]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.092]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.096]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.096]          </block>
[00:48:24.096]          // end if-block "!hasDormant"
[00:48:24.096]        </control>
[00:48:24.096]        // end if-block "isSWJ"
[00:48:24.098]      </control>
[00:48:24.098]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.098]        // if-block "!isSWJ"
[00:48:24.098]          // =>  FALSE
[00:48:24.098]        // skip if-block "!isSWJ"
[00:48:24.098]      </control>
[00:48:24.098]      <block atomic="false" info="">
[00:48:24.098]        ReadDP(0x0);
[00:48:24.099]  
[00:48:24.099]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.099]  
[00:48:24.100]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.100]      </block>
[00:48:24.100]      // end if-block "protType == 2"
[00:48:24.100]    </control>
[00:48:24.100]  </sequence>
[00:48:24.100]  
[00:48:24.152]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.152]  
[00:48:24.153]  <debugvars>
[00:48:24.153]    // Pre-defined
[00:48:24.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.153]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.153]    __dp=0x00000000
[00:48:24.153]    __ap=0x00000000
[00:48:24.153]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.153]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.155]    __FlashAddr=0x00000000
[00:48:24.155]    __FlashLen=0x00000000
[00:48:24.155]    __FlashArg=0x00000000
[00:48:24.155]    __FlashOp=0x00000000
[00:48:24.155]    __Result=0x00000000
[00:48:24.155]  </debugvars>
[00:48:24.155]  
[00:48:24.155]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.155]    <block atomic="false" info="">
[00:48:24.155]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.155]        // -> [isSWJ <= 0x00000001]
[00:48:24.155]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.156]        // -> [hasDormant <= 0x00000000]
[00:48:24.156]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.156]        // -> [protType <= 0x00000002]
[00:48:24.156]    </block>
[00:48:24.156]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.156]      // if-block "protType == 1"
[00:48:24.156]        // =>  FALSE
[00:48:24.156]      // skip if-block "protType == 1"
[00:48:24.156]    </control>
[00:48:24.157]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.157]      // if-block "protType == 2"
[00:48:24.157]        // =>  TRUE
[00:48:24.157]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.157]        // if-block "isSWJ"
[00:48:24.157]          // =>  TRUE
[00:48:24.157]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.158]          // if-block "hasDormant"
[00:48:24.158]            // =>  FALSE
[00:48:24.158]          // skip if-block "hasDormant"
[00:48:24.158]        </control>
[00:48:24.158]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.158]          // if-block "!hasDormant"
[00:48:24.158]            // =>  TRUE
[00:48:24.158]          <block atomic="false" info="">
[00:48:24.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.162]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.163]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.163]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.165]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.165]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.166]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.166]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.168]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.168]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.170]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.170]          </block>
[00:48:24.170]          // end if-block "!hasDormant"
[00:48:24.170]        </control>
[00:48:24.170]        // end if-block "isSWJ"
[00:48:24.171]      </control>
[00:48:24.171]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.171]        // if-block "!isSWJ"
[00:48:24.171]          // =>  FALSE
[00:48:24.171]        // skip if-block "!isSWJ"
[00:48:24.171]      </control>
[00:48:24.171]      <block atomic="false" info="">
[00:48:24.171]        ReadDP(0x0);
[00:48:24.172]  
[00:48:24.172]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.172]  
[00:48:24.173]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.173]      </block>
[00:48:24.173]      // end if-block "protType == 2"
[00:48:24.173]    </control>
[00:48:24.173]  </sequence>
[00:48:24.173]  
[00:48:24.228]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.228]  
[00:48:24.228]  <debugvars>
[00:48:24.228]    // Pre-defined
[00:48:24.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.228]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.228]    __dp=0x00000000
[00:48:24.229]    __ap=0x00000000
[00:48:24.229]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.229]    __FlashAddr=0x00000000
[00:48:24.229]    __FlashLen=0x00000000
[00:48:24.229]    __FlashArg=0x00000000
[00:48:24.229]    __FlashOp=0x00000000
[00:48:24.229]    __Result=0x00000000
[00:48:24.229]  </debugvars>
[00:48:24.230]  
[00:48:24.230]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.230]    <block atomic="false" info="">
[00:48:24.230]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.230]        // -> [isSWJ <= 0x00000001]
[00:48:24.230]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.231]        // -> [hasDormant <= 0x00000000]
[00:48:24.232]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.232]        // -> [protType <= 0x00000002]
[00:48:24.232]    </block>
[00:48:24.232]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.232]      // if-block "protType == 1"
[00:48:24.232]        // =>  FALSE
[00:48:24.232]      // skip if-block "protType == 1"
[00:48:24.232]    </control>
[00:48:24.232]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.232]      // if-block "protType == 2"
[00:48:24.232]        // =>  TRUE
[00:48:24.233]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.233]        // if-block "isSWJ"
[00:48:24.233]          // =>  TRUE
[00:48:24.233]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.233]          // if-block "hasDormant"
[00:48:24.233]            // =>  FALSE
[00:48:24.233]          // skip if-block "hasDormant"
[00:48:24.233]        </control>
[00:48:24.233]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.233]          // if-block "!hasDormant"
[00:48:24.234]            // =>  TRUE
[00:48:24.234]          <block atomic="false" info="">
[00:48:24.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.238]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.240]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.240]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.241]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.243]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.243]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.247]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.247]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.248]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.248]          </block>
[00:48:24.248]          // end if-block "!hasDormant"
[00:48:24.248]        </control>
[00:48:24.248]        // end if-block "isSWJ"
[00:48:24.248]      </control>
[00:48:24.248]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.248]        // if-block "!isSWJ"
[00:48:24.248]          // =>  FALSE
[00:48:24.248]        // skip if-block "!isSWJ"
[00:48:24.248]      </control>
[00:48:24.249]      <block atomic="false" info="">
[00:48:24.249]        ReadDP(0x0);
[00:48:24.251]  
[00:48:24.251]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.251]  
[00:48:24.251]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.251]      </block>
[00:48:24.251]      // end if-block "protType == 2"
[00:48:24.251]    </control>
[00:48:24.251]  </sequence>
[00:48:24.251]  
[00:48:24.305]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.305]  
[00:48:24.305]  <debugvars>
[00:48:24.306]    // Pre-defined
[00:48:24.306]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.306]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.306]    __dp=0x00000000
[00:48:24.306]    __ap=0x00000000
[00:48:24.306]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.306]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.306]    __FlashAddr=0x00000000
[00:48:24.306]    __FlashLen=0x00000000
[00:48:24.306]    __FlashArg=0x00000000
[00:48:24.307]    __FlashOp=0x00000000
[00:48:24.307]    __Result=0x00000000
[00:48:24.307]  </debugvars>
[00:48:24.307]  
[00:48:24.307]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.307]    <block atomic="false" info="">
[00:48:24.307]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.308]        // -> [isSWJ <= 0x00000001]
[00:48:24.308]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.308]        // -> [hasDormant <= 0x00000000]
[00:48:24.308]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.308]        // -> [protType <= 0x00000002]
[00:48:24.308]    </block>
[00:48:24.308]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.309]      // if-block "protType == 1"
[00:48:24.309]        // =>  FALSE
[00:48:24.309]      // skip if-block "protType == 1"
[00:48:24.309]    </control>
[00:48:24.309]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.310]      // if-block "protType == 2"
[00:48:24.310]        // =>  TRUE
[00:48:24.310]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.310]        // if-block "isSWJ"
[00:48:24.310]          // =>  TRUE
[00:48:24.310]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.310]          // if-block "hasDormant"
[00:48:24.310]            // =>  FALSE
[00:48:24.310]          // skip if-block "hasDormant"
[00:48:24.310]        </control>
[00:48:24.311]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.311]          // if-block "!hasDormant"
[00:48:24.311]            // =>  TRUE
[00:48:24.311]          <block atomic="false" info="">
[00:48:24.311]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.317]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.317]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.319]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.320]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.322]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.322]          </block>
[00:48:24.322]          // end if-block "!hasDormant"
[00:48:24.322]        </control>
[00:48:24.322]        // end if-block "isSWJ"
[00:48:24.322]      </control>
[00:48:24.322]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.322]        // if-block "!isSWJ"
[00:48:24.322]          // =>  FALSE
[00:48:24.323]        // skip if-block "!isSWJ"
[00:48:24.323]      </control>
[00:48:24.323]      <block atomic="false" info="">
[00:48:24.323]        ReadDP(0x0);
[00:48:24.325]  
[00:48:24.325]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.325]  
[00:48:24.325]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.325]      </block>
[00:48:24.325]      // end if-block "protType == 2"
[00:48:24.325]    </control>
[00:48:24.325]  </sequence>
[00:48:24.325]  
[00:48:24.381]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.381]  
[00:48:24.381]  <debugvars>
[00:48:24.381]    // Pre-defined
[00:48:24.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.381]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.381]    __dp=0x00000000
[00:48:24.381]    __ap=0x00000000
[00:48:24.382]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.382]    __FlashAddr=0x00000000
[00:48:24.382]    __FlashLen=0x00000000
[00:48:24.382]    __FlashArg=0x00000000
[00:48:24.382]    __FlashOp=0x00000000
[00:48:24.382]    __Result=0x00000000
[00:48:24.382]  </debugvars>
[00:48:24.382]  
[00:48:24.383]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.383]    <block atomic="false" info="">
[00:48:24.383]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.383]        // -> [isSWJ <= 0x00000001]
[00:48:24.383]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.383]        // -> [hasDormant <= 0x00000000]
[00:48:24.383]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.383]        // -> [protType <= 0x00000002]
[00:48:24.383]    </block>
[00:48:24.383]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.383]      // if-block "protType == 1"
[00:48:24.384]        // =>  FALSE
[00:48:24.384]      // skip if-block "protType == 1"
[00:48:24.384]    </control>
[00:48:24.384]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.384]      // if-block "protType == 2"
[00:48:24.384]        // =>  TRUE
[00:48:24.384]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.384]        // if-block "isSWJ"
[00:48:24.386]          // =>  TRUE
[00:48:24.386]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.386]          // if-block "hasDormant"
[00:48:24.386]            // =>  FALSE
[00:48:24.386]          // skip if-block "hasDormant"
[00:48:24.386]        </control>
[00:48:24.386]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.386]          // if-block "!hasDormant"
[00:48:24.386]            // =>  TRUE
[00:48:24.386]          <block atomic="false" info="">
[00:48:24.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.388]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.390]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.395]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.396]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.396]          </block>
[00:48:24.396]          // end if-block "!hasDormant"
[00:48:24.397]        </control>
[00:48:24.397]        // end if-block "isSWJ"
[00:48:24.397]      </control>
[00:48:24.397]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.397]        // if-block "!isSWJ"
[00:48:24.397]          // =>  FALSE
[00:48:24.397]        // skip if-block "!isSWJ"
[00:48:24.397]      </control>
[00:48:24.397]      <block atomic="false" info="">
[00:48:24.397]        ReadDP(0x0);
[00:48:24.403]  
[00:48:24.403]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.403]  
[00:48:24.403]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.403]      </block>
[00:48:24.403]      // end if-block "protType == 2"
[00:48:24.403]    </control>
[00:48:24.403]  </sequence>
[00:48:24.403]  
[00:48:24.456]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.456]  
[00:48:24.456]  <debugvars>
[00:48:24.457]    // Pre-defined
[00:48:24.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.457]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.457]    __dp=0x00000000
[00:48:24.457]    __ap=0x00000000
[00:48:24.457]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.457]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.457]    __FlashAddr=0x00000000
[00:48:24.457]    __FlashLen=0x00000000
[00:48:24.458]    __FlashArg=0x00000000
[00:48:24.458]    __FlashOp=0x00000000
[00:48:24.458]    __Result=0x00000000
[00:48:24.458]  </debugvars>
[00:48:24.458]  
[00:48:24.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.458]    <block atomic="false" info="">
[00:48:24.458]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.459]        // -> [isSWJ <= 0x00000001]
[00:48:24.459]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.459]        // -> [hasDormant <= 0x00000000]
[00:48:24.459]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.459]        // -> [protType <= 0x00000002]
[00:48:24.459]    </block>
[00:48:24.459]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.459]      // if-block "protType == 1"
[00:48:24.459]        // =>  FALSE
[00:48:24.460]      // skip if-block "protType == 1"
[00:48:24.460]    </control>
[00:48:24.460]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.460]      // if-block "protType == 2"
[00:48:24.460]        // =>  TRUE
[00:48:24.460]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.460]        // if-block "isSWJ"
[00:48:24.460]          // =>  TRUE
[00:48:24.460]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.460]          // if-block "hasDormant"
[00:48:24.461]            // =>  FALSE
[00:48:24.461]          // skip if-block "hasDormant"
[00:48:24.461]        </control>
[00:48:24.461]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.461]          // if-block "!hasDormant"
[00:48:24.461]            // =>  TRUE
[00:48:24.461]          <block atomic="false" info="">
[00:48:24.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.463]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.463]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.467]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.467]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.469]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.471]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.472]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.472]          </block>
[00:48:24.472]          // end if-block "!hasDormant"
[00:48:24.473]        </control>
[00:48:24.473]        // end if-block "isSWJ"
[00:48:24.473]      </control>
[00:48:24.473]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.473]        // if-block "!isSWJ"
[00:48:24.473]          // =>  FALSE
[00:48:24.473]        // skip if-block "!isSWJ"
[00:48:24.473]      </control>
[00:48:24.473]      <block atomic="false" info="">
[00:48:24.474]        ReadDP(0x0);
[00:48:24.475]  
[00:48:24.475]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.475]  
[00:48:24.475]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.475]      </block>
[00:48:24.475]      // end if-block "protType == 2"
[00:48:24.475]    </control>
[00:48:24.475]  </sequence>
[00:48:24.476]  
[00:48:24.532]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.532]  
[00:48:24.532]  <debugvars>
[00:48:24.532]    // Pre-defined
[00:48:24.532]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.532]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.532]    __dp=0x00000000
[00:48:24.532]    __ap=0x00000000
[00:48:24.532]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.532]    __FlashAddr=0x00000000
[00:48:24.533]    __FlashLen=0x00000000
[00:48:24.533]    __FlashArg=0x00000000
[00:48:24.533]    __FlashOp=0x00000000
[00:48:24.533]    __Result=0x00000000
[00:48:24.533]  </debugvars>
[00:48:24.533]  
[00:48:24.533]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.533]    <block atomic="false" info="">
[00:48:24.534]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.534]        // -> [isSWJ <= 0x00000001]
[00:48:24.534]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.534]        // -> [hasDormant <= 0x00000000]
[00:48:24.534]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.534]        // -> [protType <= 0x00000002]
[00:48:24.534]    </block>
[00:48:24.534]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.534]      // if-block "protType == 1"
[00:48:24.535]        // =>  FALSE
[00:48:24.535]      // skip if-block "protType == 1"
[00:48:24.535]    </control>
[00:48:24.535]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.535]      // if-block "protType == 2"
[00:48:24.535]        // =>  TRUE
[00:48:24.535]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.535]        // if-block "isSWJ"
[00:48:24.535]          // =>  TRUE
[00:48:24.535]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.536]          // if-block "hasDormant"
[00:48:24.536]            // =>  FALSE
[00:48:24.536]          // skip if-block "hasDormant"
[00:48:24.536]        </control>
[00:48:24.536]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.536]          // if-block "!hasDormant"
[00:48:24.536]            // =>  TRUE
[00:48:24.536]          <block atomic="false" info="">
[00:48:24.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.538]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.538]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.546]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.547]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.549]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.549]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.550]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.550]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.553]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.553]          </block>
[00:48:24.554]          // end if-block "!hasDormant"
[00:48:24.554]        </control>
[00:48:24.554]        // end if-block "isSWJ"
[00:48:24.554]      </control>
[00:48:24.554]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.554]        // if-block "!isSWJ"
[00:48:24.554]          // =>  FALSE
[00:48:24.555]        // skip if-block "!isSWJ"
[00:48:24.555]      </control>
[00:48:24.555]      <block atomic="false" info="">
[00:48:24.555]        ReadDP(0x0);
[00:48:24.558]  
[00:48:24.558]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.558]  
[00:48:24.558]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.558]      </block>
[00:48:24.558]      // end if-block "protType == 2"
[00:48:24.558]    </control>
[00:48:24.559]  </sequence>
[00:48:24.559]  
[00:48:24.622]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.622]  
[00:48:24.623]  <debugvars>
[00:48:24.623]    // Pre-defined
[00:48:24.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.623]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.623]    __dp=0x00000000
[00:48:24.623]    __ap=0x00000000
[00:48:24.623]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.623]    __FlashAddr=0x00000000
[00:48:24.624]    __FlashLen=0x00000000
[00:48:24.624]    __FlashArg=0x00000000
[00:48:24.624]    __FlashOp=0x00000000
[00:48:24.624]    __Result=0x00000000
[00:48:24.624]  </debugvars>
[00:48:24.624]  
[00:48:24.624]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.624]    <block atomic="false" info="">
[00:48:24.625]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.625]        // -> [isSWJ <= 0x00000001]
[00:48:24.625]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.625]        // -> [hasDormant <= 0x00000000]
[00:48:24.625]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.625]        // -> [protType <= 0x00000002]
[00:48:24.625]    </block>
[00:48:24.625]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.625]      // if-block "protType == 1"
[00:48:24.625]        // =>  FALSE
[00:48:24.625]      // skip if-block "protType == 1"
[00:48:24.625]    </control>
[00:48:24.625]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.627]      // if-block "protType == 2"
[00:48:24.627]        // =>  TRUE
[00:48:24.627]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.627]        // if-block "isSWJ"
[00:48:24.627]          // =>  TRUE
[00:48:24.627]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.627]          // if-block "hasDormant"
[00:48:24.627]            // =>  FALSE
[00:48:24.627]          // skip if-block "hasDormant"
[00:48:24.627]        </control>
[00:48:24.628]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.628]          // if-block "!hasDormant"
[00:48:24.628]            // =>  TRUE
[00:48:24.628]          <block atomic="false" info="">
[00:48:24.628]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.632]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.632]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.633]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.633]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.635]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.635]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.636]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.636]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.638]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.639]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.639]          </block>
[00:48:24.639]          // end if-block "!hasDormant"
[00:48:24.639]        </control>
[00:48:24.639]        // end if-block "isSWJ"
[00:48:24.639]      </control>
[00:48:24.639]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.639]        // if-block "!isSWJ"
[00:48:24.639]          // =>  FALSE
[00:48:24.639]        // skip if-block "!isSWJ"
[00:48:24.639]      </control>
[00:48:24.639]      <block atomic="false" info="">
[00:48:24.641]        ReadDP(0x0);
[00:48:24.642]  
[00:48:24.642]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.642]  
[00:48:24.642]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.642]      </block>
[00:48:24.642]      // end if-block "protType == 2"
[00:48:24.642]    </control>
[00:48:24.642]  </sequence>
[00:48:24.642]  
[00:48:24.697]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.697]  
[00:48:24.697]  <debugvars>
[00:48:24.697]    // Pre-defined
[00:48:24.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.697]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.697]    __dp=0x00000000
[00:48:24.698]    __ap=0x00000000
[00:48:24.698]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.698]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.698]    __FlashAddr=0x00000000
[00:48:24.698]    __FlashLen=0x00000000
[00:48:24.698]    __FlashArg=0x00000000
[00:48:24.698]    __FlashOp=0x00000000
[00:48:24.698]    __Result=0x00000000
[00:48:24.698]  </debugvars>
[00:48:24.698]  
[00:48:24.698]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.700]    <block atomic="false" info="">
[00:48:24.700]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.700]        // -> [isSWJ <= 0x00000001]
[00:48:24.700]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.700]        // -> [hasDormant <= 0x00000000]
[00:48:24.700]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.700]        // -> [protType <= 0x00000002]
[00:48:24.701]    </block>
[00:48:24.701]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.701]      // if-block "protType == 1"
[00:48:24.701]        // =>  FALSE
[00:48:24.701]      // skip if-block "protType == 1"
[00:48:24.701]    </control>
[00:48:24.701]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.701]      // if-block "protType == 2"
[00:48:24.701]        // =>  TRUE
[00:48:24.701]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.701]        // if-block "isSWJ"
[00:48:24.702]          // =>  TRUE
[00:48:24.702]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.702]          // if-block "hasDormant"
[00:48:24.702]            // =>  FALSE
[00:48:24.702]          // skip if-block "hasDormant"
[00:48:24.703]        </control>
[00:48:24.703]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.703]          // if-block "!hasDormant"
[00:48:24.703]            // =>  TRUE
[00:48:24.703]          <block atomic="false" info="">
[00:48:24.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.706]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.706]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.710]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.710]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.712]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.712]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.713]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.713]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.718]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.719]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.719]          </block>
[00:48:24.720]          // end if-block "!hasDormant"
[00:48:24.720]        </control>
[00:48:24.720]        // end if-block "isSWJ"
[00:48:24.720]      </control>
[00:48:24.720]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.721]        // if-block "!isSWJ"
[00:48:24.721]          // =>  FALSE
[00:48:24.721]        // skip if-block "!isSWJ"
[00:48:24.721]      </control>
[00:48:24.721]      <block atomic="false" info="">
[00:48:24.721]        ReadDP(0x0);
[00:48:24.724]  
[00:48:24.724]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.724]  
[00:48:24.724]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.724]      </block>
[00:48:24.724]      // end if-block "protType == 2"
[00:48:24.724]    </control>
[00:48:24.725]  </sequence>
[00:48:24.725]  
[00:48:24.788]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.788]  
[00:48:24.789]  <debugvars>
[00:48:24.789]    // Pre-defined
[00:48:24.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.789]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.789]    __dp=0x00000000
[00:48:24.789]    __ap=0x00000000
[00:48:24.789]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.789]    __FlashAddr=0x00000000
[00:48:24.790]    __FlashLen=0x00000000
[00:48:24.790]    __FlashArg=0x00000000
[00:48:24.790]    __FlashOp=0x00000000
[00:48:24.790]    __Result=0x00000000
[00:48:24.790]  </debugvars>
[00:48:24.790]  
[00:48:24.790]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.790]    <block atomic="false" info="">
[00:48:24.790]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.790]        // -> [isSWJ <= 0x00000001]
[00:48:24.792]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.792]        // -> [hasDormant <= 0x00000000]
[00:48:24.792]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.792]        // -> [protType <= 0x00000002]
[00:48:24.792]    </block>
[00:48:24.792]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.792]      // if-block "protType == 1"
[00:48:24.792]        // =>  FALSE
[00:48:24.792]      // skip if-block "protType == 1"
[00:48:24.792]    </control>
[00:48:24.792]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.793]      // if-block "protType == 2"
[00:48:24.793]        // =>  TRUE
[00:48:24.793]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.793]        // if-block "isSWJ"
[00:48:24.793]          // =>  TRUE
[00:48:24.794]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.794]          // if-block "hasDormant"
[00:48:24.794]            // =>  FALSE
[00:48:24.794]          // skip if-block "hasDormant"
[00:48:24.794]        </control>
[00:48:24.794]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.794]          // if-block "!hasDormant"
[00:48:24.794]            // =>  TRUE
[00:48:24.795]          <block atomic="false" info="">
[00:48:24.795]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.796]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.796]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.798]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.799]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.799]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.801]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.803]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.805]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.805]          </block>
[00:48:24.805]          // end if-block "!hasDormant"
[00:48:24.805]        </control>
[00:48:24.805]        // end if-block "isSWJ"
[00:48:24.805]      </control>
[00:48:24.807]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.807]        // if-block "!isSWJ"
[00:48:24.807]          // =>  FALSE
[00:48:24.807]        // skip if-block "!isSWJ"
[00:48:24.807]      </control>
[00:48:24.807]      <block atomic="false" info="">
[00:48:24.807]        ReadDP(0x0);
[00:48:24.813]  
[00:48:24.813]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.813]  
[00:48:24.813]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.813]      </block>
[00:48:24.813]      // end if-block "protType == 2"
[00:48:24.813]    </control>
[00:48:24.813]  </sequence>
[00:48:24.813]  
[00:48:24.878]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.878]  
[00:48:24.878]  <debugvars>
[00:48:24.878]    // Pre-defined
[00:48:24.879]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.879]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.879]    __dp=0x00000000
[00:48:24.879]    __ap=0x00000000
[00:48:24.879]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.879]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.879]    __FlashAddr=0x00000000
[00:48:24.879]    __FlashLen=0x00000000
[00:48:24.880]    __FlashArg=0x00000000
[00:48:24.880]    __FlashOp=0x00000000
[00:48:24.880]    __Result=0x00000000
[00:48:24.880]  </debugvars>
[00:48:24.880]  
[00:48:24.880]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.880]    <block atomic="false" info="">
[00:48:24.880]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.880]        // -> [isSWJ <= 0x00000001]
[00:48:24.880]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.881]        // -> [hasDormant <= 0x00000000]
[00:48:24.881]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.881]        // -> [protType <= 0x00000002]
[00:48:24.881]    </block>
[00:48:24.881]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.881]      // if-block "protType == 1"
[00:48:24.881]        // =>  FALSE
[00:48:24.881]      // skip if-block "protType == 1"
[00:48:24.881]    </control>
[00:48:24.881]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.881]      // if-block "protType == 2"
[00:48:24.881]        // =>  TRUE
[00:48:24.881]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.881]        // if-block "isSWJ"
[00:48:24.881]          // =>  TRUE
[00:48:24.883]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.883]          // if-block "hasDormant"
[00:48:24.883]            // =>  FALSE
[00:48:24.883]          // skip if-block "hasDormant"
[00:48:24.883]        </control>
[00:48:24.884]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.884]          // if-block "!hasDormant"
[00:48:24.884]            // =>  TRUE
[00:48:24.884]          <block atomic="false" info="">
[00:48:24.884]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.887]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.891]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.891]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.892]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.896]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.897]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.897]          </block>
[00:48:24.897]          // end if-block "!hasDormant"
[00:48:24.898]        </control>
[00:48:24.898]        // end if-block "isSWJ"
[00:48:24.898]      </control>
[00:48:24.898]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.898]        // if-block "!isSWJ"
[00:48:24.898]          // =>  FALSE
[00:48:24.899]        // skip if-block "!isSWJ"
[00:48:24.899]      </control>
[00:48:24.899]      <block atomic="false" info="">
[00:48:24.899]        ReadDP(0x0);
[00:48:24.900]  
[00:48:24.900]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.900]  
[00:48:24.901]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.901]      </block>
[00:48:24.901]      // end if-block "protType == 2"
[00:48:24.901]    </control>
[00:48:24.901]  </sequence>
[00:48:24.901]  
[00:48:24.954]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:24.954]  
[00:48:24.955]  <debugvars>
[00:48:24.955]    // Pre-defined
[00:48:24.955]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:24.955]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:24.955]    __dp=0x00000000
[00:48:24.955]    __ap=0x00000000
[00:48:24.955]    __traceout=0x00000000      (Trace Disabled)
[00:48:24.955]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:24.955]    __FlashAddr=0x00000000
[00:48:24.955]    __FlashLen=0x00000000
[00:48:24.955]    __FlashArg=0x00000000
[00:48:24.956]    __FlashOp=0x00000000
[00:48:24.956]    __Result=0x00000000
[00:48:24.956]  </debugvars>
[00:48:24.956]  
[00:48:24.956]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:24.956]    <block atomic="false" info="">
[00:48:24.956]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:24.956]        // -> [isSWJ <= 0x00000001]
[00:48:24.956]      __var hasDormant = __protocol & 0x00020000;
[00:48:24.956]        // -> [hasDormant <= 0x00000000]
[00:48:24.956]      __var protType   = __protocol & 0x0000FFFF;
[00:48:24.956]        // -> [protType <= 0x00000002]
[00:48:24.956]    </block>
[00:48:24.957]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:24.957]      // if-block "protType == 1"
[00:48:24.957]        // =>  FALSE
[00:48:24.957]      // skip if-block "protType == 1"
[00:48:24.957]    </control>
[00:48:24.957]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:24.957]      // if-block "protType == 2"
[00:48:24.957]        // =>  TRUE
[00:48:24.958]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:24.958]        // if-block "isSWJ"
[00:48:24.958]          // =>  TRUE
[00:48:24.958]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:24.958]          // if-block "hasDormant"
[00:48:24.958]            // =>  FALSE
[00:48:24.958]          // skip if-block "hasDormant"
[00:48:24.958]        </control>
[00:48:24.958]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:24.959]          // if-block "!hasDormant"
[00:48:24.959]            // =>  TRUE
[00:48:24.959]          <block atomic="false" info="">
[00:48:24.959]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:24.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.962]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:24.964]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:24.964]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:24.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.965]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:24.972]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:24.972]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:24.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:24.978]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:24.980]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:24.981]          </block>
[00:48:24.981]          // end if-block "!hasDormant"
[00:48:24.981]        </control>
[00:48:24.981]        // end if-block "isSWJ"
[00:48:24.981]      </control>
[00:48:24.981]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:24.981]        // if-block "!isSWJ"
[00:48:24.981]          // =>  FALSE
[00:48:24.982]        // skip if-block "!isSWJ"
[00:48:24.982]      </control>
[00:48:24.982]      <block atomic="false" info="">
[00:48:24.982]        ReadDP(0x0);
[00:48:24.983]  
[00:48:24.983]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:24.983]  
[00:48:24.983]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:24.984]      </block>
[00:48:24.984]      // end if-block "protType == 2"
[00:48:24.984]    </control>
[00:48:24.984]  </sequence>
[00:48:24.984]  
[00:48:25.045]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.045]  
[00:48:25.045]  <debugvars>
[00:48:25.045]    // Pre-defined
[00:48:25.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.045]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.045]    __dp=0x00000000
[00:48:25.046]    __ap=0x00000000
[00:48:25.046]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.046]    __FlashAddr=0x00000000
[00:48:25.046]    __FlashLen=0x00000000
[00:48:25.046]    __FlashArg=0x00000000
[00:48:25.046]    __FlashOp=0x00000000
[00:48:25.046]    __Result=0x00000000
[00:48:25.046]  </debugvars>
[00:48:25.047]  
[00:48:25.047]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.047]    <block atomic="false" info="">
[00:48:25.047]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.047]        // -> [isSWJ <= 0x00000001]
[00:48:25.047]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.047]        // -> [hasDormant <= 0x00000000]
[00:48:25.047]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.047]        // -> [protType <= 0x00000002]
[00:48:25.048]    </block>
[00:48:25.048]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.048]      // if-block "protType == 1"
[00:48:25.048]        // =>  FALSE
[00:48:25.048]      // skip if-block "protType == 1"
[00:48:25.050]    </control>
[00:48:25.050]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.050]      // if-block "protType == 2"
[00:48:25.050]        // =>  TRUE
[00:48:25.050]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.050]        // if-block "isSWJ"
[00:48:25.050]          // =>  TRUE
[00:48:25.050]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.050]          // if-block "hasDormant"
[00:48:25.050]            // =>  FALSE
[00:48:25.051]          // skip if-block "hasDormant"
[00:48:25.051]        </control>
[00:48:25.051]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.051]          // if-block "!hasDormant"
[00:48:25.051]            // =>  TRUE
[00:48:25.051]          <block atomic="false" info="">
[00:48:25.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.056]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.057]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.058]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.058]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.059]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.061]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.062]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.063]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.063]          </block>
[00:48:25.064]          // end if-block "!hasDormant"
[00:48:25.064]        </control>
[00:48:25.064]        // end if-block "isSWJ"
[00:48:25.064]      </control>
[00:48:25.064]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.064]        // if-block "!isSWJ"
[00:48:25.065]          // =>  FALSE
[00:48:25.065]        // skip if-block "!isSWJ"
[00:48:25.065]      </control>
[00:48:25.065]      <block atomic="false" info="">
[00:48:25.065]        ReadDP(0x0);
[00:48:25.066]  
[00:48:25.066]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.066]  
[00:48:25.066]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.067]      </block>
[00:48:25.067]      // end if-block "protType == 2"
[00:48:25.067]    </control>
[00:48:25.067]  </sequence>
[00:48:25.067]  
[00:48:25.119]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.119]  
[00:48:25.119]  <debugvars>
[00:48:25.119]    // Pre-defined
[00:48:25.120]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.120]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.121]    __dp=0x00000000
[00:48:25.121]    __ap=0x00000000
[00:48:25.121]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.121]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.121]    __FlashAddr=0x00000000
[00:48:25.121]    __FlashLen=0x00000000
[00:48:25.121]    __FlashArg=0x00000000
[00:48:25.121]    __FlashOp=0x00000000
[00:48:25.121]    __Result=0x00000000
[00:48:25.121]  </debugvars>
[00:48:25.121]  
[00:48:25.122]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.122]    <block atomic="false" info="">
[00:48:25.122]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.122]        // -> [isSWJ <= 0x00000001]
[00:48:25.122]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.122]        // -> [hasDormant <= 0x00000000]
[00:48:25.122]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.122]        // -> [protType <= 0x00000002]
[00:48:25.122]    </block>
[00:48:25.122]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.123]      // if-block "protType == 1"
[00:48:25.123]        // =>  FALSE
[00:48:25.123]      // skip if-block "protType == 1"
[00:48:25.123]    </control>
[00:48:25.123]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.123]      // if-block "protType == 2"
[00:48:25.123]        // =>  TRUE
[00:48:25.123]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.123]        // if-block "isSWJ"
[00:48:25.124]          // =>  TRUE
[00:48:25.124]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.124]          // if-block "hasDormant"
[00:48:25.124]            // =>  FALSE
[00:48:25.124]          // skip if-block "hasDormant"
[00:48:25.124]        </control>
[00:48:25.124]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.124]          // if-block "!hasDormant"
[00:48:25.124]            // =>  TRUE
[00:48:25.124]          <block atomic="false" info="">
[00:48:25.125]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.134]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.140]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.144]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.147]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.147]          </block>
[00:48:25.147]          // end if-block "!hasDormant"
[00:48:25.147]        </control>
[00:48:25.147]        // end if-block "isSWJ"
[00:48:25.147]      </control>
[00:48:25.147]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.147]        // if-block "!isSWJ"
[00:48:25.148]          // =>  FALSE
[00:48:25.148]        // skip if-block "!isSWJ"
[00:48:25.148]      </control>
[00:48:25.148]      <block atomic="false" info="">
[00:48:25.148]        ReadDP(0x0);
[00:48:25.149]  
[00:48:25.149]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.149]  
[00:48:25.149]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.150]      </block>
[00:48:25.150]      // end if-block "protType == 2"
[00:48:25.150]    </control>
[00:48:25.150]  </sequence>
[00:48:25.150]  
[00:48:25.211]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.211]  
[00:48:25.211]  <debugvars>
[00:48:25.211]    // Pre-defined
[00:48:25.211]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.211]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.211]    __dp=0x00000000
[00:48:25.211]    __ap=0x00000000
[00:48:25.211]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.211]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.211]    __FlashAddr=0x00000000
[00:48:25.211]    __FlashLen=0x00000000
[00:48:25.212]    __FlashArg=0x00000000
[00:48:25.212]    __FlashOp=0x00000000
[00:48:25.212]    __Result=0x00000000
[00:48:25.212]  </debugvars>
[00:48:25.212]  
[00:48:25.212]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.212]    <block atomic="false" info="">
[00:48:25.212]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.212]        // -> [isSWJ <= 0x00000001]
[00:48:25.213]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.214]        // -> [hasDormant <= 0x00000000]
[00:48:25.214]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.214]        // -> [protType <= 0x00000002]
[00:48:25.214]    </block>
[00:48:25.214]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.214]      // if-block "protType == 1"
[00:48:25.214]        // =>  FALSE
[00:48:25.214]      // skip if-block "protType == 1"
[00:48:25.214]    </control>
[00:48:25.215]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.215]      // if-block "protType == 2"
[00:48:25.215]        // =>  TRUE
[00:48:25.215]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.215]        // if-block "isSWJ"
[00:48:25.215]          // =>  TRUE
[00:48:25.215]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.215]          // if-block "hasDormant"
[00:48:25.215]            // =>  FALSE
[00:48:25.215]          // skip if-block "hasDormant"
[00:48:25.215]        </control>
[00:48:25.216]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.216]          // if-block "!hasDormant"
[00:48:25.216]            // =>  TRUE
[00:48:25.216]          <block atomic="false" info="">
[00:48:25.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.217]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.218]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.222]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.222]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.224]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.224]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.230]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.230]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.231]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.231]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.233]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.233]          </block>
[00:48:25.233]          // end if-block "!hasDormant"
[00:48:25.233]        </control>
[00:48:25.233]        // end if-block "isSWJ"
[00:48:25.233]      </control>
[00:48:25.233]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.233]        // if-block "!isSWJ"
[00:48:25.233]          // =>  FALSE
[00:48:25.233]        // skip if-block "!isSWJ"
[00:48:25.233]      </control>
[00:48:25.233]      <block atomic="false" info="">
[00:48:25.233]        ReadDP(0x0);
[00:48:25.235]  
[00:48:25.235]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.235]  
[00:48:25.235]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.236]      </block>
[00:48:25.236]      // end if-block "protType == 2"
[00:48:25.236]    </control>
[00:48:25.236]  </sequence>
[00:48:25.236]  
[00:48:25.287]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.287]  
[00:48:25.288]  <debugvars>
[00:48:25.288]    // Pre-defined
[00:48:25.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.288]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.288]    __dp=0x00000000
[00:48:25.288]    __ap=0x00000000
[00:48:25.288]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.288]    __FlashAddr=0x00000000
[00:48:25.288]    __FlashLen=0x00000000
[00:48:25.288]    __FlashArg=0x00000000
[00:48:25.288]    __FlashOp=0x00000000
[00:48:25.288]    __Result=0x00000000
[00:48:25.288]  </debugvars>
[00:48:25.290]  
[00:48:25.290]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.290]    <block atomic="false" info="">
[00:48:25.290]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.290]        // -> [isSWJ <= 0x00000001]
[00:48:25.290]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.290]        // -> [hasDormant <= 0x00000000]
[00:48:25.290]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.290]        // -> [protType <= 0x00000002]
[00:48:25.290]    </block>
[00:48:25.290]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.291]      // if-block "protType == 1"
[00:48:25.291]        // =>  FALSE
[00:48:25.291]      // skip if-block "protType == 1"
[00:48:25.291]    </control>
[00:48:25.291]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.291]      // if-block "protType == 2"
[00:48:25.291]        // =>  TRUE
[00:48:25.291]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.291]        // if-block "isSWJ"
[00:48:25.291]          // =>  TRUE
[00:48:25.291]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.291]          // if-block "hasDormant"
[00:48:25.292]            // =>  FALSE
[00:48:25.292]          // skip if-block "hasDormant"
[00:48:25.292]        </control>
[00:48:25.292]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.292]          // if-block "!hasDormant"
[00:48:25.292]            // =>  TRUE
[00:48:25.292]          <block atomic="false" info="">
[00:48:25.292]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.294]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.296]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.297]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.298]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.298]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.301]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.302]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.302]          </block>
[00:48:25.302]          // end if-block "!hasDormant"
[00:48:25.302]        </control>
[00:48:25.302]        // end if-block "isSWJ"
[00:48:25.302]      </control>
[00:48:25.303]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.303]        // if-block "!isSWJ"
[00:48:25.303]          // =>  FALSE
[00:48:25.303]        // skip if-block "!isSWJ"
[00:48:25.303]      </control>
[00:48:25.303]      <block atomic="false" info="">
[00:48:25.304]        ReadDP(0x0);
[00:48:25.305]  
[00:48:25.305]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.305]  
[00:48:25.305]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.305]      </block>
[00:48:25.305]      // end if-block "protType == 2"
[00:48:25.305]    </control>
[00:48:25.306]  </sequence>
[00:48:25.306]  
[00:48:25.363]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.363]  
[00:48:25.363]  <debugvars>
[00:48:25.363]    // Pre-defined
[00:48:25.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.363]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.363]    __dp=0x00000000
[00:48:25.363]    __ap=0x00000000
[00:48:25.363]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.365]    __FlashAddr=0x00000000
[00:48:25.365]    __FlashLen=0x00000000
[00:48:25.365]    __FlashArg=0x00000000
[00:48:25.365]    __FlashOp=0x00000000
[00:48:25.365]    __Result=0x00000000
[00:48:25.365]  </debugvars>
[00:48:25.365]  
[00:48:25.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.365]    <block atomic="false" info="">
[00:48:25.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.365]        // -> [isSWJ <= 0x00000001]
[00:48:25.365]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.366]        // -> [hasDormant <= 0x00000000]
[00:48:25.366]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.366]        // -> [protType <= 0x00000002]
[00:48:25.366]    </block>
[00:48:25.366]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.366]      // if-block "protType == 1"
[00:48:25.366]        // =>  FALSE
[00:48:25.366]      // skip if-block "protType == 1"
[00:48:25.366]    </control>
[00:48:25.366]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.367]      // if-block "protType == 2"
[00:48:25.367]        // =>  TRUE
[00:48:25.367]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.367]        // if-block "isSWJ"
[00:48:25.367]          // =>  TRUE
[00:48:25.367]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.367]          // if-block "hasDormant"
[00:48:25.367]            // =>  FALSE
[00:48:25.367]          // skip if-block "hasDormant"
[00:48:25.367]        </control>
[00:48:25.367]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.368]          // if-block "!hasDormant"
[00:48:25.368]            // =>  TRUE
[00:48:25.368]          <block atomic="false" info="">
[00:48:25.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.378]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.378]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.382]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.382]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.384]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.385]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.386]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.387]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.388]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.388]          </block>
[00:48:25.389]          // end if-block "!hasDormant"
[00:48:25.389]        </control>
[00:48:25.389]        // end if-block "isSWJ"
[00:48:25.389]      </control>
[00:48:25.389]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.389]        // if-block "!isSWJ"
[00:48:25.389]          // =>  FALSE
[00:48:25.389]        // skip if-block "!isSWJ"
[00:48:25.390]      </control>
[00:48:25.390]      <block atomic="false" info="">
[00:48:25.390]        ReadDP(0x0);
[00:48:25.392]  
[00:48:25.392]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.392]  
[00:48:25.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.392]      </block>
[00:48:25.392]      // end if-block "protType == 2"
[00:48:25.392]    </control>
[00:48:25.392]  </sequence>
[00:48:25.392]  
[00:48:25.454]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.454]  
[00:48:25.455]  <debugvars>
[00:48:25.455]    // Pre-defined
[00:48:25.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.455]    __dp=0x00000000
[00:48:25.455]    __ap=0x00000000
[00:48:25.455]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.455]    __FlashAddr=0x00000000
[00:48:25.457]    __FlashLen=0x00000000
[00:48:25.457]    __FlashArg=0x00000000
[00:48:25.457]    __FlashOp=0x00000000
[00:48:25.457]    __Result=0x00000000
[00:48:25.457]  </debugvars>
[00:48:25.457]  
[00:48:25.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.457]    <block atomic="false" info="">
[00:48:25.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.457]        // -> [isSWJ <= 0x00000001]
[00:48:25.457]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.457]        // -> [hasDormant <= 0x00000000]
[00:48:25.457]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.458]        // -> [protType <= 0x00000002]
[00:48:25.458]    </block>
[00:48:25.458]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.458]      // if-block "protType == 1"
[00:48:25.458]        // =>  FALSE
[00:48:25.458]      // skip if-block "protType == 1"
[00:48:25.458]    </control>
[00:48:25.458]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.458]      // if-block "protType == 2"
[00:48:25.458]        // =>  TRUE
[00:48:25.458]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.458]        // if-block "isSWJ"
[00:48:25.458]          // =>  TRUE
[00:48:25.458]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.458]          // if-block "hasDormant"
[00:48:25.458]            // =>  FALSE
[00:48:25.459]          // skip if-block "hasDormant"
[00:48:25.459]        </control>
[00:48:25.459]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.459]          // if-block "!hasDormant"
[00:48:25.459]            // =>  TRUE
[00:48:25.459]          <block atomic="false" info="">
[00:48:25.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.466]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.467]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.467]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.468]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.469]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.472]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.474]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.474]          </block>
[00:48:25.475]          // end if-block "!hasDormant"
[00:48:25.475]        </control>
[00:48:25.475]        // end if-block "isSWJ"
[00:48:25.475]      </control>
[00:48:25.475]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.475]        // if-block "!isSWJ"
[00:48:25.476]          // =>  FALSE
[00:48:25.476]        // skip if-block "!isSWJ"
[00:48:25.476]      </control>
[00:48:25.476]      <block atomic="false" info="">
[00:48:25.476]        ReadDP(0x0);
[00:48:25.478]  
[00:48:25.478]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.478]  
[00:48:25.478]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.478]      </block>
[00:48:25.478]      // end if-block "protType == 2"
[00:48:25.479]    </control>
[00:48:25.479]  </sequence>
[00:48:25.479]  
[00:48:25.531]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.531]  
[00:48:25.531]  <debugvars>
[00:48:25.531]    // Pre-defined
[00:48:25.531]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.532]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.532]    __dp=0x00000000
[00:48:25.532]    __ap=0x00000000
[00:48:25.532]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.532]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.532]    __FlashAddr=0x00000000
[00:48:25.532]    __FlashLen=0x00000000
[00:48:25.532]    __FlashArg=0x00000000
[00:48:25.532]    __FlashOp=0x00000000
[00:48:25.532]    __Result=0x00000000
[00:48:25.532]  </debugvars>
[00:48:25.533]  
[00:48:25.533]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.533]    <block atomic="false" info="">
[00:48:25.533]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.533]        // -> [isSWJ <= 0x00000001]
[00:48:25.533]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.533]        // -> [hasDormant <= 0x00000000]
[00:48:25.533]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.533]        // -> [protType <= 0x00000002]
[00:48:25.533]    </block>
[00:48:25.533]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.533]      // if-block "protType == 1"
[00:48:25.533]        // =>  FALSE
[00:48:25.534]      // skip if-block "protType == 1"
[00:48:25.534]    </control>
[00:48:25.534]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.534]      // if-block "protType == 2"
[00:48:25.534]        // =>  TRUE
[00:48:25.534]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.534]        // if-block "isSWJ"
[00:48:25.534]          // =>  TRUE
[00:48:25.534]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.534]          // if-block "hasDormant"
[00:48:25.534]            // =>  FALSE
[00:48:25.534]          // skip if-block "hasDormant"
[00:48:25.534]        </control>
[00:48:25.534]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.534]          // if-block "!hasDormant"
[00:48:25.534]            // =>  TRUE
[00:48:25.534]          <block atomic="false" info="">
[00:48:25.535]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.537]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.539]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.547]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.549]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.549]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.551]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.551]          </block>
[00:48:25.551]          // end if-block "!hasDormant"
[00:48:25.551]        </control>
[00:48:25.551]        // end if-block "isSWJ"
[00:48:25.551]      </control>
[00:48:25.551]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.551]        // if-block "!isSWJ"
[00:48:25.551]          // =>  FALSE
[00:48:25.551]        // skip if-block "!isSWJ"
[00:48:25.552]      </control>
[00:48:25.552]      <block atomic="false" info="">
[00:48:25.552]        ReadDP(0x0);
[00:48:25.553]  
[00:48:25.553]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.553]  
[00:48:25.553]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.553]      </block>
[00:48:25.553]      // end if-block "protType == 2"
[00:48:25.553]    </control>
[00:48:25.553]  </sequence>
[00:48:25.553]  
[00:48:25.606]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:48:25.606]  
[00:48:25.606]  <debugvars>
[00:48:25.606]    // Pre-defined
[00:48:25.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:25.606]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:25.606]    __dp=0x00000000
[00:48:25.606]    __ap=0x00000000
[00:48:25.606]    __traceout=0x00000000      (Trace Disabled)
[00:48:25.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:25.607]    __FlashAddr=0x00000000
[00:48:25.607]    __FlashLen=0x00000000
[00:48:25.607]    __FlashArg=0x00000000
[00:48:25.607]    __FlashOp=0x00000000
[00:48:25.607]    __Result=0x00000000
[00:48:25.607]  </debugvars>
[00:48:25.607]  
[00:48:25.607]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:25.609]    <block atomic="false" info="">
[00:48:25.609]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:25.609]        // -> [isSWJ <= 0x00000001]
[00:48:25.609]      __var hasDormant = __protocol & 0x00020000;
[00:48:25.609]        // -> [hasDormant <= 0x00000000]
[00:48:25.609]      __var protType   = __protocol & 0x0000FFFF;
[00:48:25.609]        // -> [protType <= 0x00000002]
[00:48:25.609]    </block>
[00:48:25.609]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:25.609]      // if-block "protType == 1"
[00:48:25.609]        // =>  FALSE
[00:48:25.610]      // skip if-block "protType == 1"
[00:48:25.610]    </control>
[00:48:25.610]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:25.610]      // if-block "protType == 2"
[00:48:25.610]        // =>  TRUE
[00:48:25.610]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:25.610]        // if-block "isSWJ"
[00:48:25.610]          // =>  TRUE
[00:48:25.610]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:25.610]          // if-block "hasDormant"
[00:48:25.610]            // =>  FALSE
[00:48:25.611]          // skip if-block "hasDormant"
[00:48:25.611]        </control>
[00:48:25.611]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:25.611]          // if-block "!hasDormant"
[00:48:25.611]            // =>  TRUE
[00:48:25.611]          <block atomic="false" info="">
[00:48:25.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:25.613]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.614]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:25.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:25.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:25.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.617]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:25.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:25.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:25.620]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:25.620]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:25.621]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:25.621]          </block>
[00:48:25.621]          // end if-block "!hasDormant"
[00:48:25.621]        </control>
[00:48:25.621]        // end if-block "isSWJ"
[00:48:25.621]      </control>
[00:48:25.621]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:25.622]        // if-block "!isSWJ"
[00:48:25.622]          // =>  FALSE
[00:48:25.622]        // skip if-block "!isSWJ"
[00:48:25.622]      </control>
[00:48:25.622]      <block atomic="false" info="">
[00:48:25.622]        ReadDP(0x0);
[00:48:25.624]  
[00:48:25.624]  !!! E310 : Debug access failed - cannot read DP register 0x00
[00:48:25.624]  
[00:48:25.624]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:25.624]      </block>
[00:48:25.624]      // end if-block "protType == 2"
[00:48:25.624]    </control>
[00:48:25.624]  </sequence>
[00:48:25.624]  
[00:48:31.534]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:48:31.534]  
[00:48:31.534]  <debugvars>
[00:48:31.534]    // Pre-defined
[00:48:31.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:31.534]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:31.534]    __dp=0x00000000
[00:48:31.534]    __ap=0x00000000
[00:48:31.534]    __traceout=0x00000000      (Trace Disabled)
[00:48:31.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:31.535]    __FlashAddr=0x00000000
[00:48:31.535]    __FlashLen=0x00000000
[00:48:31.535]    __FlashArg=0x00000000
[00:48:31.535]    __FlashOp=0x00000000
[00:48:31.535]    __Result=0x00000000
[00:48:31.535]  </debugvars>
[00:48:31.535]  
[00:48:31.535]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:48:31.535]    <block atomic="false" info="">
[00:48:31.535]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:48:31.535]        // -> [isSWJ <= 0x00000001]
[00:48:31.536]      __var hasDormant = __protocol & 0x00020000;
[00:48:31.536]        // -> [hasDormant <= 0x00000000]
[00:48:31.536]      __var protType   = __protocol & 0x0000FFFF;
[00:48:31.536]        // -> [protType <= 0x00000002]
[00:48:31.536]    </block>
[00:48:31.536]    <control if="protType == 1" while="" timeout="0" info="">
[00:48:31.537]      // if-block "protType == 1"
[00:48:31.537]        // =>  FALSE
[00:48:31.537]      // skip if-block "protType == 1"
[00:48:31.537]    </control>
[00:48:31.537]    <control if="protType == 2" while="" timeout="0" info="">
[00:48:31.537]      // if-block "protType == 2"
[00:48:31.537]        // =>  TRUE
[00:48:31.537]      <control if="isSWJ" while="" timeout="0" info="">
[00:48:31.537]        // if-block "isSWJ"
[00:48:31.537]          // =>  TRUE
[00:48:31.537]        <control if="hasDormant" while="" timeout="0" info="">
[00:48:31.538]          // if-block "hasDormant"
[00:48:31.538]            // =>  FALSE
[00:48:31.538]          // skip if-block "hasDormant"
[00:48:31.538]        </control>
[00:48:31.538]        <control if="!hasDormant" while="" timeout="0" info="">
[00:48:31.538]          // if-block "!hasDormant"
[00:48:31.538]            // =>  TRUE
[00:48:31.538]          <block atomic="false" info="">
[00:48:31.538]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:48:31.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:31.543]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:48:31.545]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:48:31.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:48:31.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:31.547]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:48:31.552]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:48:31.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:48:31.554]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:48:31.554]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:48:31.556]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:48:31.557]          </block>
[00:48:31.557]          // end if-block "!hasDormant"
[00:48:31.557]        </control>
[00:48:31.557]        // end if-block "isSWJ"
[00:48:31.557]      </control>
[00:48:31.557]      <control if="!isSWJ" while="" timeout="0" info="">
[00:48:31.557]        // if-block "!isSWJ"
[00:48:31.558]          // =>  FALSE
[00:48:31.558]        // skip if-block "!isSWJ"
[00:48:31.558]      </control>
[00:48:31.558]      <block atomic="false" info="">
[00:48:31.558]        ReadDP(0x0);
[00:48:31.563]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:48:31.563]      </block>
[00:48:31.563]      // end if-block "protType == 2"
[00:48:31.563]    </control>
[00:48:31.563]  </sequence>
[00:48:31.564]  
[00:48:31.572]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:48:31.572]  
[00:48:31.572]  <debugvars>
[00:48:31.572]    // Pre-defined
[00:48:31.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:31.572]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:31.572]    __dp=0x00000000
[00:48:31.572]    __ap=0x00000000
[00:48:31.572]    __traceout=0x00000000      (Trace Disabled)
[00:48:31.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:31.572]    __FlashAddr=0x00000000
[00:48:31.572]    __FlashLen=0x00000000
[00:48:31.573]    __FlashArg=0x00000000
[00:48:31.573]    __FlashOp=0x00000000
[00:48:31.573]    __Result=0x00000000
[00:48:31.573]  </debugvars>
[00:48:31.573]  
[00:48:31.573]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:48:31.573]    <block atomic="false" info="">
[00:48:31.573]      __var SW_DP_ABORT       = 0x0;
[00:48:31.573]        // -> [SW_DP_ABORT <= 0x00000000]
[00:48:31.573]      __var DP_CTRL_STAT      = 0x4;
[00:48:31.573]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:48:31.573]      __var DP_SELECT         = 0x8;
[00:48:31.574]        // -> [DP_SELECT <= 0x00000008]
[00:48:31.574]      __var powered_down      = 0;
[00:48:31.574]        // -> [powered_down <= 0x00000000]
[00:48:31.574]      WriteDP(DP_SELECT, 0x00000000);
[00:48:31.580]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:48:31.580]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:48:31.583]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:48:31.583]        // -> [powered_down <= 0x00000001]
[00:48:31.583]    </block>
[00:48:31.583]    <control if="powered_down" while="" timeout="0" info="">
[00:48:31.583]      // if-block "powered_down"
[00:48:31.583]        // =>  TRUE
[00:48:31.583]      <block atomic="false" info="">
[00:48:31.583]        Message(0, "Debug/System power-up request sent");
[00:48:31.584]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:48:31.586]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:48:31.586]      </block>
[00:48:31.586]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:48:31.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:48:31.588]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:48:31.588]        // while-condition  =>  FALSE
[00:48:31.588]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:48:31.588]      </control>
[00:48:31.588]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:48:31.589]        // if-block "(__protocol & 0xFFFF) == 1"
[00:48:31.589]          // =>  FALSE
[00:48:31.589]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:48:31.589]      </control>
[00:48:31.589]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:48:31.589]        // if-block "(__protocol & 0xFFFF) == 2"
[00:48:31.589]          // =>  TRUE
[00:48:31.589]        <block atomic="false" info="">
[00:48:31.590]          Message(0, "executing SWD power up");
[00:48:31.591]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:48:31.594]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:48:31.594]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:48:31.596]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:48:31.596]        </block>
[00:48:31.596]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:48:31.596]      </control>
[00:48:31.597]      // end if-block "powered_down"
[00:48:31.597]    </control>
[00:48:31.597]    <block atomic="false" info="">
[00:48:31.597]      __var DEBUG_PORT_VAL    = 0;
[00:48:31.597]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:48:31.597]      __var ACCESS_POINT_VAL  = 0;
[00:48:31.597]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:48:31.597]      __ap = 1; 
[00:48:31.597]        // -> [__ap <= 0x00000001]
[00:48:31.597]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:48:31.600]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:48:31.600]      __ap = 4;
[00:48:31.601]        // -> [__ap <= 0x00000004]
[00:48:31.601]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:48:31.604]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:48:31.604]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:48:31.604]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:48:31.606]    </block>
[00:48:31.606]    <block atomic="false" info="">
[00:48:31.606]      __var nReset = 0x80;
[00:48:31.606]        // -> [nReset <= 0x00000080]
[00:48:31.606]      __var canReadPins = 0;
[00:48:31.607]        // -> [canReadPins <= 0x00000000]
[00:48:31.607]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:48:31.610]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:48:31.610]        // -> [canReadPins <= 0x00000001]
[00:48:31.611]    </block>
[00:48:31.611]    <control if="" while="1" timeout="200" info="">
[00:48:31.611]      // while "1"  (timeout="200")
[00:48:31.611]      // while-condition  =>  TRUE
[00:48:31.611]      // while "1"  (timeout="200")
[00:48:31.611]      // while-condition  =>  TRUE
[00:48:31.611]      // while "1"  (timeout="200")
[00:48:31.611]      // while-condition  =>  TRUE
[00:48:31.611]      // while "1"  (timeout="200")
[00:48:31.611]      // while-condition  =>  TRUE
[00:48:31.611]      // while "1"  (timeout="200")
[00:48:31.611]      // while-condition  =>  TRUE
[00:48:31.611]      // while "1"  (timeout="200")
[00:48:31.612]      // while-condition  =>  TRUE
[00:48:31.612]      // while "1"  (timeout="200")
[00:48:31.612]      // while-condition  =>  TRUE
[00:48:31.612]      // while "1"  (timeout="200")
[00:48:31.612]      // while-condition  =>  TRUE
[00:48:31.612]      // while "1"  (timeout="200")
[00:48:31.612]      // while-condition  =>  TRUE
[00:48:31.612]      // while "1"  (timeout="200")
[00:48:31.612]      // while-condition  =>  TRUE
[00:48:31.612]      // while "1"  (timeout="200")
[00:48:31.612]      // while-condition  =>  TRUE
[00:48:31.612]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.613]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.613]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.613]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.613]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.613]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.613]      // while "1"  (timeout="200")
[00:48:31.613]      // while-condition  =>  TRUE
[00:48:31.614]      // while "1"  (timeout="200")
[00:48:31.614]      // while-condition  =>  TRUE
[00:48:31.615]      // while "1"  (timeout="200")
[00:48:31.615]      // while-condition  =>  TRUE
[00:48:31.615]      // while "1"  (timeout="200")
[00:48:31.615]      // while-condition  =>  TRUE
[00:48:31.615]      // while "1"  (timeout="200")
[00:48:31.615]      // while-condition  =>  TRUE
[00:48:31.615]      // while "1"  (timeout="200")
[00:48:31.615]      // while-condition  =>  TRUE
[00:48:31.615]      // while "1"  (timeout="200")
[00:48:31.615]      // while-condition  =>  TRUE
[00:48:31.615]      // while "1"  (timeout="200")
[00:48:31.615]      // while-condition  =>  TRUE
[00:48:31.616]      // while "1"  (timeout="200")
[00:48:31.616]      // while-condition  =>  TRUE
[00:48:31.616]      // while "1"  (timeout="200")
[00:48:31.616]      // while-condition  =>  TRUE
[00:48:31.616]      // while "1"  (timeout="200")
[00:48:31.616]      // while-condition  =>  TRUE
[00:48:31.616]      // while "1"  (timeout="200")
[00:48:31.616]      // while-condition  =>  TRUE
[00:48:31.616]      // while "1"  (timeout="200")
[00:48:31.616]      // while-condition  =>  TRUE
[00:48:31.616]      // while "1"  (timeout="200")
[00:48:31.616]      // while-condition  =>  TRUE
[00:48:31.617]      // while "1"  (timeout="200")
[00:48:31.617]      // while-condition  =>  TRUE
[00:48:31.617]      // while "1"  (timeout="200")
[00:48:31.617]      // while-condition  =>  TRUE
[00:48:31.617]      // while "1"  (timeout="200")
[00:48:31.617]      // while-condition  =>  TRUE
[00:48:31.617]      // while "1"  (timeout="200")
[00:48:31.617]      // while-condition  =>  TRUE
[00:48:31.617]      // while "1"  (timeout="200")
[00:48:31.617]      // while-condition  =>  TRUE
[00:48:31.617]      // while "1"  (timeout="200")
[00:48:31.617]      // while-condition  =>  TRUE
[00:48:31.618]      // while "1"  (timeout="200")
[00:48:31.618]      // while-condition  =>  TRUE
[00:48:31.618]      // while "1"  (timeout="200")
[00:48:31.618]      // while-condition  =>  TRUE
[00:48:31.618]      // while "1"  (timeout="200")
[00:48:31.618]      // while-condition  =>  TRUE
[00:48:31.619]      // while "1"  (timeout="200")
[00:48:31.619]      // while-condition  =>  TRUE
[00:48:31.619]      // while "1"  (timeout="200")
[00:48:31.619]      // while-condition  =>  TRUE
[00:48:31.619]      // while "1"  (timeout="200")
[00:48:31.619]      // while-condition  =>  TRUE
[00:48:31.619]      // while "1"  (timeout="200")
[00:48:31.619]      // while-condition  =>  TRUE
[00:48:31.619]      // while "1"  (timeout="200")
[00:48:31.620]      // while-condition  =>  TRUE
[00:48:31.620]      // while "1"  (timeout="200")
[00:48:31.620]      // while-condition  =>  TRUE
[00:48:31.620]      // while "1"  (timeout="200")
[00:48:31.620]      // while-condition  =>  TRUE
[00:48:31.620]      // while "1"  (timeout="200")
[00:48:31.620]      // while-condition  =>  TRUE
[00:48:31.620]      // while "1"  (timeout="200")
[00:48:31.620]      // while-condition  =>  TRUE
[00:48:31.620]      // while "1"  (timeout="200")
[00:48:31.620]      // while-condition  =>  TRUE
[00:48:31.620]      // while "1"  (timeout="200")
[00:48:31.621]      // while-condition  =>  TRUE
[00:48:31.621]      // while "1"  (timeout="200")
[00:48:31.621]      // while-condition  =>  TRUE
[00:48:31.621]      // while "1"  (timeout="200")
[00:48:31.621]      // while-condition  =>  TRUE
[00:48:31.621]      // while "1"  (timeout="200")
[00:48:31.621]      // while-condition  =>  TRUE
[00:48:31.621]      // while "1"  (timeout="200")
[00:48:31.621]      // while-condition  =>  TRUE
[00:48:31.621]      // while "1"  (timeout="200")
[00:48:31.621]      // while-condition  =>  TRUE
[00:48:31.621]      // while "1"  (timeout="200")
[00:48:31.622]      // while-condition  =>  TRUE
[00:48:31.622]      // while "1"  (timeout="200")
[00:48:31.622]      // while-condition  =>  TRUE
[00:48:31.622]      // while "1"  (timeout="200")
[00:48:31.622]      // while-condition  =>  TRUE
[00:48:31.622]      // while "1"  (timeout="200")
[00:48:31.622]      // while-condition  =>  TRUE
[00:48:31.622]      // while "1"  (timeout="200")
[00:48:31.623]      // while-condition  =>  TRUE
[00:48:31.623]      // while "1"  (timeout="200")
[00:48:31.623]      // while-condition  =>  TRUE
[00:48:31.623]      // while "1"  (timeout="200")
[00:48:31.623]      // while-condition  =>  TRUE
[00:48:31.623]      // while "1"  (timeout="200")
[00:48:31.623]      // while-condition  =>  TRUE
[00:48:31.623]      // while "1"  (timeout="200")
[00:48:31.623]      // while-condition  =>  TRUE
[00:48:31.623]      // while "1"  (timeout="200")
[00:48:31.624]      // while-condition  =>  TRUE
[00:48:31.624]      // while "1"  (timeout="200")
[00:48:31.624]      // while-condition  =>  TRUE
[00:48:31.624]      // while "1"  (timeout="200")
[00:48:31.624]      // while-condition  =>  TRUE
[00:48:31.624]      // while "1"  (timeout="200")
[00:48:31.624]      // while-condition  =>  TRUE
[00:48:31.624]      // while "1"  (timeout="200")
[00:48:31.625]      // while-condition  =>  TRUE
[00:48:31.625]      // while "1"  (timeout="200")
[00:48:31.625]      // while-condition  =>  TRUE
[00:48:31.625]      // while "1"  (timeout="200")
[00:48:31.625]      // while-condition  =>  TRUE
[00:48:31.625]      // while "1"  (timeout="200")
[00:48:31.625]      // while-condition  =>  TRUE
[00:48:31.625]      // while "1"  (timeout="200")
[00:48:31.625]      // while-condition  =>  TRUE
[00:48:31.625]      // while "1"  (timeout="200")
[00:48:31.625]      // while-condition  =>  TRUE
[00:48:31.625]      // while "1"  (timeout="200")
[00:48:31.626]      // while-condition  =>  TRUE
[00:48:31.626]      // while "1"  (timeout="200")
[00:48:31.626]      // while  =>  TIMEOUT
[00:48:31.626]      // end while "1"
[00:48:31.626]    </control>
[00:48:31.626]    <control if="canReadPins" while="" timeout="0" info="">
[00:48:31.626]      // if-block "canReadPins"
[00:48:31.626]        // =>  TRUE
[00:48:31.626]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:48:31.626]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:48:31.629]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:48:31.629]        // while-condition  =>  FALSE
[00:48:31.629]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:48:31.629]      </control>
[00:48:31.629]      // end if-block "canReadPins"
[00:48:31.629]    </control>
[00:48:31.629]    <control if="!canReadPins" while="" timeout="0" info="">
[00:48:31.629]      // if-block "!canReadPins"
[00:48:31.629]        // =>  FALSE
[00:48:31.629]      // skip if-block "!canReadPins"
[00:48:31.630]    </control>
[00:48:31.630]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:48:31.630]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:48:31.630]        // =>  TRUE
[00:48:31.630]      <block atomic="false" info="">
[00:48:31.630]        WriteAP(0x00, 0x190008);
[00:48:31.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:48:31.634]        WriteAP(0xF0, 0x01);
[00:48:31.638]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:48:31.638]      </block>
[00:48:31.638]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:48:31.638]    </control>
[00:48:31.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:48:31.638]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:48:31.638]        // =>  FALSE
[00:48:31.639]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:48:31.639]    </control>
[00:48:31.639]    <block atomic="false" info="">
[00:48:31.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:48:31.650]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:48:31.650]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:48:31.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:48:31.652]      __ap = 0; //lets make sure we reset the access point selection
[00:48:31.652]        // -> [__ap <= 0x00000000]
[00:48:31.652]    </block>
[00:48:31.652]  </sequence>
[00:48:31.653]  
[00:48:31.701]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:48:31.701]  
[00:48:31.701]  <debugvars>
[00:48:31.702]    // Pre-defined
[00:48:31.702]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:48:31.702]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:48:31.702]    __dp=0x00000000
[00:48:31.702]    __ap=0x00000000
[00:48:31.702]    __traceout=0x00000000      (Trace Disabled)
[00:48:31.702]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:48:31.702]    __FlashAddr=0x00000000
[00:48:31.702]    __FlashLen=0x00000000
[00:48:31.703]    __FlashArg=0x00000000
[00:48:31.703]    __FlashOp=0x00000000
[00:48:31.703]    __Result=0x00000000
[00:48:31.703]  </debugvars>
[00:48:31.703]  
[00:48:31.703]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:48:31.703]    <block atomic="false" info="">
[00:48:31.703]      __var deviceID = 0;
[00:48:31.703]        // -> [deviceID <= 0x00000000]
[00:48:31.703]      __var version = 0;
[00:48:31.703]        // -> [version <= 0x00000000]
[00:48:31.704]      __var partNum = 0;
[00:48:31.704]        // -> [partNum <= 0x00000000]
[00:48:31.704]      __var manuf = 0;
[00:48:31.704]        // -> [manuf <= 0x00000000]
[00:48:31.704]      __var isMSPM0G1X0X_G3X0X = 0;
[00:48:31.704]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:48:31.704]      __var isProduction = 0;
[00:48:31.704]        // -> [isProduction <= 0x00000000]
[00:48:31.704]      __var continueId = 0;
[00:48:31.704]        // -> [continueId <= 0x00000000]
[00:48:31.704]      deviceID =   Read32(0x41C40004);
[00:48:31.717]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:48:31.717]        // -> [deviceID <= 0x2BB8802F]
[00:48:31.717]      version = deviceID >> 28;
[00:48:31.717]        // -> [version <= 0x00000002]
[00:48:31.717]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:48:31.717]        // -> [partNum <= 0x0000BB88]
[00:48:31.717]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:48:31.717]        // -> [manuf <= 0x00000017]
[00:48:31.717]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:48:31.717]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:48:31.717]      isProduction = (version > 0);
[00:48:31.717]        // -> [isProduction <= 0x00000001]
[00:48:31.717]    </block>
[00:48:31.718]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:48:31.718]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:48:31.718]        // =>  FALSE
[00:48:31.718]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:48:31.718]    </control>
[00:48:31.718]    <control if="continueId == 4" while="" timeout="0" info="">
[00:48:31.718]      // if-block "continueId == 4"
[00:48:31.718]        // =>  FALSE
[00:48:31.718]      // skip if-block "continueId == 4"
[00:48:31.718]    </control>
[00:48:31.718]    <control if="!isProduction" while="" timeout="0" info="">
[00:48:31.719]      // if-block "!isProduction"
[00:48:31.719]        // =>  FALSE
[00:48:31.719]      // skip if-block "!isProduction"
[00:48:31.719]    </control>
[00:48:31.719]  </sequence>
[00:48:31.719]  
[00:49:31.608]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:31.608]  
[00:49:31.617]  <debugvars>
[00:49:31.617]    // Pre-defined
[00:49:31.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:31.617]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:31.617]    __dp=0x00000000
[00:49:31.617]    __ap=0x00000000
[00:49:31.617]    __traceout=0x00000000      (Trace Disabled)
[00:49:31.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:31.617]    __FlashAddr=0x00000000
[00:49:31.618]    __FlashLen=0x00000000
[00:49:31.618]    __FlashArg=0x00000000
[00:49:31.618]    __FlashOp=0x00000000
[00:49:31.618]    __Result=0x00000000
[00:49:31.618]  </debugvars>
[00:49:31.618]  
[00:49:31.618]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:31.618]    <block atomic="false" info="">
[00:49:31.618]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:31.619]        // -> [isSWJ <= 0x00000001]
[00:49:31.619]      __var hasDormant = __protocol & 0x00020000;
[00:49:31.619]        // -> [hasDormant <= 0x00000000]
[00:49:31.619]      __var protType   = __protocol & 0x0000FFFF;
[00:49:31.619]        // -> [protType <= 0x00000002]
[00:49:31.619]    </block>
[00:49:31.619]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:31.619]      // if-block "protType == 1"
[00:49:31.620]        // =>  FALSE
[00:49:31.620]      // skip if-block "protType == 1"
[00:49:31.620]    </control>
[00:49:31.620]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:31.620]      // if-block "protType == 2"
[00:49:31.620]        // =>  TRUE
[00:49:31.620]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:31.620]        // if-block "isSWJ"
[00:49:31.621]          // =>  TRUE
[00:49:31.621]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:31.621]          // if-block "hasDormant"
[00:49:31.621]            // =>  FALSE
[00:49:31.621]          // skip if-block "hasDormant"
[00:49:31.621]        </control>
[00:49:31.621]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:31.621]          // if-block "!hasDormant"
[00:49:31.621]            // =>  TRUE
[00:49:31.621]          <block atomic="false" info="">
[00:49:31.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:32.623]  
[00:49:32.623]  !!! E320 : DAP access error
[00:49:32.623]  
[00:49:32.623]          </block>
[00:49:32.623]          // end if-block "!hasDormant"
[00:49:32.625]        </control>
[00:49:32.625]        // end if-block "isSWJ"
[00:49:32.625]      </control>
[00:49:32.625]      // end if-block "protType == 2"
[00:49:32.625]    </control>
[00:49:32.625]  </sequence>
[00:49:32.625]  
[00:49:32.884]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:32.884]  
[00:49:32.893]  <debugvars>
[00:49:32.893]    // Pre-defined
[00:49:32.893]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:32.893]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:32.893]    __dp=0x00000000
[00:49:32.894]    __ap=0x00000000
[00:49:32.894]    __traceout=0x00000000      (Trace Disabled)
[00:49:32.894]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:32.894]    __FlashAddr=0x00000000
[00:49:32.894]    __FlashLen=0x00000000
[00:49:32.894]    __FlashArg=0x00000000
[00:49:32.894]    __FlashOp=0x00000000
[00:49:32.894]    __Result=0x00000000
[00:49:32.894]  </debugvars>
[00:49:32.894]  
[00:49:32.894]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:32.895]    <block atomic="false" info="">
[00:49:32.895]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:32.895]        // -> [isSWJ <= 0x00000001]
[00:49:32.895]      __var hasDormant = __protocol & 0x00020000;
[00:49:32.895]        // -> [hasDormant <= 0x00000000]
[00:49:32.895]      __var protType   = __protocol & 0x0000FFFF;
[00:49:32.895]        // -> [protType <= 0x00000002]
[00:49:32.895]    </block>
[00:49:32.895]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:32.895]      // if-block "protType == 1"
[00:49:32.895]        // =>  FALSE
[00:49:32.895]      // skip if-block "protType == 1"
[00:49:32.895]    </control>
[00:49:32.895]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:32.897]      // if-block "protType == 2"
[00:49:32.897]        // =>  TRUE
[00:49:32.897]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:32.897]        // if-block "isSWJ"
[00:49:32.897]          // =>  TRUE
[00:49:32.897]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:32.897]          // if-block "hasDormant"
[00:49:32.897]            // =>  FALSE
[00:49:32.897]          // skip if-block "hasDormant"
[00:49:32.897]        </control>
[00:49:32.897]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:32.897]          // if-block "!hasDormant"
[00:49:32.898]            // =>  TRUE
[00:49:32.898]          <block atomic="false" info="">
[00:49:32.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:33.901]  
[00:49:33.901]  !!! E320 : DAP access error
[00:49:33.901]  
[00:49:33.901]          </block>
[00:49:33.901]          // end if-block "!hasDormant"
[00:49:33.901]        </control>
[00:49:33.901]        // end if-block "isSWJ"
[00:49:33.901]      </control>
[00:49:33.901]      // end if-block "protType == 2"
[00:49:33.902]    </control>
[00:49:33.902]  </sequence>
[00:49:33.902]  
[00:49:34.157]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:34.157]  
[00:49:34.167]  <debugvars>
[00:49:34.167]    // Pre-defined
[00:49:34.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:34.167]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:34.167]    __dp=0x00000000
[00:49:34.167]    __ap=0x00000000
[00:49:34.167]    __traceout=0x00000000      (Trace Disabled)
[00:49:34.167]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:34.167]    __FlashAddr=0x00000000
[00:49:34.168]    __FlashLen=0x00000000
[00:49:34.168]    __FlashArg=0x00000000
[00:49:34.168]    __FlashOp=0x00000000
[00:49:34.168]    __Result=0x00000000
[00:49:34.168]  </debugvars>
[00:49:34.168]  
[00:49:34.168]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:34.168]    <block atomic="false" info="">
[00:49:34.168]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:34.168]        // -> [isSWJ <= 0x00000001]
[00:49:34.169]      __var hasDormant = __protocol & 0x00020000;
[00:49:34.169]        // -> [hasDormant <= 0x00000000]
[00:49:34.169]      __var protType   = __protocol & 0x0000FFFF;
[00:49:34.169]        // -> [protType <= 0x00000002]
[00:49:34.169]    </block>
[00:49:34.170]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:34.170]      // if-block "protType == 1"
[00:49:34.170]        // =>  FALSE
[00:49:34.170]      // skip if-block "protType == 1"
[00:49:34.170]    </control>
[00:49:34.170]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:34.170]      // if-block "protType == 2"
[00:49:34.170]        // =>  TRUE
[00:49:34.170]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:34.170]        // if-block "isSWJ"
[00:49:34.171]          // =>  TRUE
[00:49:34.171]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:34.171]          // if-block "hasDormant"
[00:49:34.171]            // =>  FALSE
[00:49:34.171]          // skip if-block "hasDormant"
[00:49:34.171]        </control>
[00:49:34.171]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:34.171]          // if-block "!hasDormant"
[00:49:34.171]            // =>  TRUE
[00:49:34.172]          <block atomic="false" info="">
[00:49:34.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:35.180]  
[00:49:35.180]  !!! E320 : DAP access error
[00:49:35.180]  
[00:49:35.188]          </block>
[00:49:35.188]          // end if-block "!hasDormant"
[00:49:35.188]        </control>
[00:49:35.188]        // end if-block "isSWJ"
[00:49:35.188]      </control>
[00:49:35.188]      // end if-block "protType == 2"
[00:49:35.189]    </control>
[00:49:35.189]  </sequence>
[00:49:35.189]  
[00:49:35.454]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:35.454]  
[00:49:35.455]  <debugvars>
[00:49:35.455]    // Pre-defined
[00:49:35.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:35.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:35.455]    __dp=0x00000000
[00:49:35.455]    __ap=0x00000000
[00:49:35.455]    __traceout=0x00000000      (Trace Disabled)
[00:49:35.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:35.455]    __FlashAddr=0x00000000
[00:49:35.455]    __FlashLen=0x00000000
[00:49:35.455]    __FlashArg=0x00000000
[00:49:35.455]    __FlashOp=0x00000000
[00:49:35.457]    __Result=0x00000000
[00:49:35.457]  </debugvars>
[00:49:35.457]  
[00:49:35.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:35.457]    <block atomic="false" info="">
[00:49:35.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:35.457]        // -> [isSWJ <= 0x00000001]
[00:49:35.457]      __var hasDormant = __protocol & 0x00020000;
[00:49:35.457]        // -> [hasDormant <= 0x00000000]
[00:49:35.457]      __var protType   = __protocol & 0x0000FFFF;
[00:49:35.458]        // -> [protType <= 0x00000002]
[00:49:35.458]    </block>
[00:49:35.458]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:35.458]      // if-block "protType == 1"
[00:49:35.458]        // =>  FALSE
[00:49:35.458]      // skip if-block "protType == 1"
[00:49:35.458]    </control>
[00:49:35.458]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:35.458]      // if-block "protType == 2"
[00:49:35.458]        // =>  TRUE
[00:49:35.458]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:35.458]        // if-block "isSWJ"
[00:49:35.458]          // =>  TRUE
[00:49:35.458]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:35.459]          // if-block "hasDormant"
[00:49:35.459]            // =>  FALSE
[00:49:35.459]          // skip if-block "hasDormant"
[00:49:35.459]        </control>
[00:49:35.459]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:35.459]          // if-block "!hasDormant"
[00:49:35.459]            // =>  TRUE
[00:49:35.459]          <block atomic="false" info="">
[00:49:35.459]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:36.461]  
[00:49:36.461]  !!! E320 : DAP access error
[00:49:36.461]  
[00:49:36.470]          </block>
[00:49:36.470]          // end if-block "!hasDormant"
[00:49:36.470]        </control>
[00:49:36.470]        // end if-block "isSWJ"
[00:49:36.470]      </control>
[00:49:36.470]      // end if-block "protType == 2"
[00:49:36.471]    </control>
[00:49:36.471]  </sequence>
[00:49:36.472]  
[00:49:36.734]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:36.734]  
[00:49:36.734]  <debugvars>
[00:49:36.734]    // Pre-defined
[00:49:36.734]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.735]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:36.735]    __dp=0x00000000
[00:49:36.735]    __ap=0x00000000
[00:49:36.735]    __traceout=0x00000000      (Trace Disabled)
[00:49:36.735]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.735]    __FlashAddr=0x00000000
[00:49:36.735]    __FlashLen=0x00000000
[00:49:36.735]    __FlashArg=0x00000000
[00:49:36.735]    __FlashOp=0x00000000
[00:49:36.735]    __Result=0x00000000
[00:49:36.735]  </debugvars>
[00:49:36.737]  
[00:49:36.737]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:36.737]    <block atomic="false" info="">
[00:49:36.737]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:36.737]        // -> [isSWJ <= 0x00000001]
[00:49:36.737]      __var hasDormant = __protocol & 0x00020000;
[00:49:36.737]        // -> [hasDormant <= 0x00000000]
[00:49:36.737]      __var protType   = __protocol & 0x0000FFFF;
[00:49:36.737]        // -> [protType <= 0x00000002]
[00:49:36.737]    </block>
[00:49:36.737]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:36.737]      // if-block "protType == 1"
[00:49:36.737]        // =>  FALSE
[00:49:36.737]      // skip if-block "protType == 1"
[00:49:36.737]    </control>
[00:49:36.737]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:36.738]      // if-block "protType == 2"
[00:49:36.738]        // =>  TRUE
[00:49:36.738]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:36.738]        // if-block "isSWJ"
[00:49:36.738]          // =>  TRUE
[00:49:36.738]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:36.738]          // if-block "hasDormant"
[00:49:36.738]            // =>  FALSE
[00:49:36.738]          // skip if-block "hasDormant"
[00:49:36.738]        </control>
[00:49:36.738]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:36.738]          // if-block "!hasDormant"
[00:49:36.740]            // =>  TRUE
[00:49:36.740]          <block atomic="false" info="">
[00:49:36.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:37.753]  
[00:49:37.753]  !!! E320 : DAP access error
[00:49:37.753]  
[00:49:37.762]          </block>
[00:49:37.762]          // end if-block "!hasDormant"
[00:49:37.762]        </control>
[00:49:37.762]        // end if-block "isSWJ"
[00:49:37.762]      </control>
[00:49:37.763]      // end if-block "protType == 2"
[00:49:37.763]    </control>
[00:49:37.763]  </sequence>
[00:49:37.763]  
[00:49:38.027]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:38.027]  
[00:49:38.027]  <debugvars>
[00:49:38.027]    // Pre-defined
[00:49:38.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:38.027]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:38.027]    __dp=0x00000000
[00:49:38.028]    __ap=0x00000000
[00:49:38.028]    __traceout=0x00000000      (Trace Disabled)
[00:49:38.028]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:38.028]    __FlashAddr=0x00000000
[00:49:38.028]    __FlashLen=0x00000000
[00:49:38.028]    __FlashArg=0x00000000
[00:49:38.028]    __FlashOp=0x00000000
[00:49:38.028]    __Result=0x00000000
[00:49:38.028]  </debugvars>
[00:49:38.028]  
[00:49:38.029]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:38.029]    <block atomic="false" info="">
[00:49:38.029]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:38.029]        // -> [isSWJ <= 0x00000001]
[00:49:38.029]      __var hasDormant = __protocol & 0x00020000;
[00:49:38.029]        // -> [hasDormant <= 0x00000000]
[00:49:38.029]      __var protType   = __protocol & 0x0000FFFF;
[00:49:38.029]        // -> [protType <= 0x00000002]
[00:49:38.029]    </block>
[00:49:38.030]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:38.030]      // if-block "protType == 1"
[00:49:38.030]        // =>  FALSE
[00:49:38.030]      // skip if-block "protType == 1"
[00:49:38.030]    </control>
[00:49:38.030]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:38.030]      // if-block "protType == 2"
[00:49:38.030]        // =>  TRUE
[00:49:38.030]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:38.030]        // if-block "isSWJ"
[00:49:38.030]          // =>  TRUE
[00:49:38.031]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:38.031]          // if-block "hasDormant"
[00:49:38.031]            // =>  FALSE
[00:49:38.031]          // skip if-block "hasDormant"
[00:49:38.031]        </control>
[00:49:38.031]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:38.031]          // if-block "!hasDormant"
[00:49:38.031]            // =>  TRUE
[00:49:38.031]          <block atomic="false" info="">
[00:49:38.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:39.036]  
[00:49:39.036]  !!! E320 : DAP access error
[00:49:39.036]  
[00:49:39.046]          </block>
[00:49:39.046]          // end if-block "!hasDormant"
[00:49:39.046]        </control>
[00:49:39.046]        // end if-block "isSWJ"
[00:49:39.046]      </control>
[00:49:39.046]      // end if-block "protType == 2"
[00:49:39.047]    </control>
[00:49:39.047]  </sequence>
[00:49:39.047]  
[00:49:39.311]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:39.311]  
[00:49:39.311]  <debugvars>
[00:49:39.312]    // Pre-defined
[00:49:39.312]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:39.312]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:39.312]    __dp=0x00000000
[00:49:39.312]    __ap=0x00000000
[00:49:39.312]    __traceout=0x00000000      (Trace Disabled)
[00:49:39.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:39.312]    __FlashAddr=0x00000000
[00:49:39.313]    __FlashLen=0x00000000
[00:49:39.313]    __FlashArg=0x00000000
[00:49:39.313]    __FlashOp=0x00000000
[00:49:39.313]    __Result=0x00000000
[00:49:39.313]  </debugvars>
[00:49:39.313]  
[00:49:39.313]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:39.313]    <block atomic="false" info="">
[00:49:39.313]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:39.314]        // -> [isSWJ <= 0x00000001]
[00:49:39.314]      __var hasDormant = __protocol & 0x00020000;
[00:49:39.314]        // -> [hasDormant <= 0x00000000]
[00:49:39.314]      __var protType   = __protocol & 0x0000FFFF;
[00:49:39.314]        // -> [protType <= 0x00000002]
[00:49:39.314]    </block>
[00:49:39.314]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:39.314]      // if-block "protType == 1"
[00:49:39.314]        // =>  FALSE
[00:49:39.315]      // skip if-block "protType == 1"
[00:49:39.315]    </control>
[00:49:39.315]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:39.315]      // if-block "protType == 2"
[00:49:39.315]        // =>  TRUE
[00:49:39.315]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:39.315]        // if-block "isSWJ"
[00:49:39.315]          // =>  TRUE
[00:49:39.315]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:39.315]          // if-block "hasDormant"
[00:49:39.316]            // =>  FALSE
[00:49:39.316]          // skip if-block "hasDormant"
[00:49:39.316]        </control>
[00:49:39.316]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:39.316]          // if-block "!hasDormant"
[00:49:39.316]            // =>  TRUE
[00:49:39.317]          <block atomic="false" info="">
[00:49:39.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:40.320]  
[00:49:40.320]  !!! E320 : DAP access error
[00:49:40.320]  
[00:49:40.320]          </block>
[00:49:40.320]          // end if-block "!hasDormant"
[00:49:40.320]        </control>
[00:49:40.320]        // end if-block "isSWJ"
[00:49:40.320]      </control>
[00:49:40.322]      // end if-block "protType == 2"
[00:49:40.322]    </control>
[00:49:40.322]  </sequence>
[00:49:40.322]  
[00:49:40.578]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:40.578]  
[00:49:40.578]  <debugvars>
[00:49:40.578]    // Pre-defined
[00:49:40.579]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:40.579]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:40.579]    __dp=0x00000000
[00:49:40.579]    __ap=0x00000000
[00:49:40.579]    __traceout=0x00000000      (Trace Disabled)
[00:49:40.579]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:40.579]    __FlashAddr=0x00000000
[00:49:40.579]    __FlashLen=0x00000000
[00:49:40.579]    __FlashArg=0x00000000
[00:49:40.580]    __FlashOp=0x00000000
[00:49:40.580]    __Result=0x00000000
[00:49:40.580]  </debugvars>
[00:49:40.580]  
[00:49:40.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:40.580]    <block atomic="false" info="">
[00:49:40.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:40.580]        // -> [isSWJ <= 0x00000001]
[00:49:40.580]      __var hasDormant = __protocol & 0x00020000;
[00:49:40.581]        // -> [hasDormant <= 0x00000000]
[00:49:40.581]      __var protType   = __protocol & 0x0000FFFF;
[00:49:40.581]        // -> [protType <= 0x00000002]
[00:49:40.581]    </block>
[00:49:40.581]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:40.581]      // if-block "protType == 1"
[00:49:40.581]        // =>  FALSE
[00:49:40.581]      // skip if-block "protType == 1"
[00:49:40.581]    </control>
[00:49:40.581]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:40.581]      // if-block "protType == 2"
[00:49:40.582]        // =>  TRUE
[00:49:40.582]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:40.582]        // if-block "isSWJ"
[00:49:40.582]          // =>  TRUE
[00:49:40.582]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:40.582]          // if-block "hasDormant"
[00:49:40.582]            // =>  FALSE
[00:49:40.582]          // skip if-block "hasDormant"
[00:49:40.582]        </control>
[00:49:40.582]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:40.583]          // if-block "!hasDormant"
[00:49:40.583]            // =>  TRUE
[00:49:40.583]          <block atomic="false" info="">
[00:49:40.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:41.595]  
[00:49:41.595]  !!! E320 : DAP access error
[00:49:41.595]  
[00:49:41.605]          </block>
[00:49:41.605]          // end if-block "!hasDormant"
[00:49:41.605]        </control>
[00:49:41.605]        // end if-block "isSWJ"
[00:49:41.605]      </control>
[00:49:41.605]      // end if-block "protType == 2"
[00:49:41.605]    </control>
[00:49:41.605]  </sequence>
[00:49:41.605]  
[00:49:41.871]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:41.871]  
[00:49:41.880]  <debugvars>
[00:49:41.880]    // Pre-defined
[00:49:41.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:41.880]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:41.880]    __dp=0x00000000
[00:49:41.880]    __ap=0x00000000
[00:49:41.880]    __traceout=0x00000000      (Trace Disabled)
[00:49:41.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:41.880]    __FlashAddr=0x00000000
[00:49:41.880]    __FlashLen=0x00000000
[00:49:41.880]    __FlashArg=0x00000000
[00:49:41.881]    __FlashOp=0x00000000
[00:49:41.881]    __Result=0x00000000
[00:49:41.881]  </debugvars>
[00:49:41.881]  
[00:49:41.881]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:41.881]    <block atomic="false" info="">
[00:49:41.881]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:41.882]        // -> [isSWJ <= 0x00000001]
[00:49:41.882]      __var hasDormant = __protocol & 0x00020000;
[00:49:41.882]        // -> [hasDormant <= 0x00000000]
[00:49:41.882]      __var protType   = __protocol & 0x0000FFFF;
[00:49:41.882]        // -> [protType <= 0x00000002]
[00:49:41.882]    </block>
[00:49:41.882]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:41.882]      // if-block "protType == 1"
[00:49:41.882]        // =>  FALSE
[00:49:41.882]      // skip if-block "protType == 1"
[00:49:41.884]    </control>
[00:49:41.884]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:41.884]      // if-block "protType == 2"
[00:49:41.884]        // =>  TRUE
[00:49:41.884]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:41.884]        // if-block "isSWJ"
[00:49:41.884]          // =>  TRUE
[00:49:41.884]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:41.884]          // if-block "hasDormant"
[00:49:41.884]            // =>  FALSE
[00:49:41.884]          // skip if-block "hasDormant"
[00:49:41.884]        </control>
[00:49:41.885]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:41.885]          // if-block "!hasDormant"
[00:49:41.885]            // =>  TRUE
[00:49:41.885]          <block atomic="false" info="">
[00:49:41.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:42.890]  
[00:49:42.890]  !!! E320 : DAP access error
[00:49:42.890]  
[00:49:42.898]          </block>
[00:49:42.898]          // end if-block "!hasDormant"
[00:49:42.898]        </control>
[00:49:42.898]        // end if-block "isSWJ"
[00:49:42.898]      </control>
[00:49:42.898]      // end if-block "protType == 2"
[00:49:42.898]    </control>
[00:49:42.898]  </sequence>
[00:49:42.898]  
[00:49:43.163]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:43.163]  
[00:49:43.171]  <debugvars>
[00:49:43.172]    // Pre-defined
[00:49:43.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:43.172]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:43.172]    __dp=0x00000000
[00:49:43.172]    __ap=0x00000000
[00:49:43.172]    __traceout=0x00000000      (Trace Disabled)
[00:49:43.172]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:43.172]    __FlashAddr=0x00000000
[00:49:43.172]    __FlashLen=0x00000000
[00:49:43.172]    __FlashArg=0x00000000
[00:49:43.172]    __FlashOp=0x00000000
[00:49:43.173]    __Result=0x00000000
[00:49:43.173]  </debugvars>
[00:49:43.173]  
[00:49:43.173]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:43.173]    <block atomic="false" info="">
[00:49:43.173]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:43.173]        // -> [isSWJ <= 0x00000001]
[00:49:43.173]      __var hasDormant = __protocol & 0x00020000;
[00:49:43.173]        // -> [hasDormant <= 0x00000000]
[00:49:43.174]      __var protType   = __protocol & 0x0000FFFF;
[00:49:43.174]        // -> [protType <= 0x00000002]
[00:49:43.174]    </block>
[00:49:43.174]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:43.174]      // if-block "protType == 1"
[00:49:43.174]        // =>  FALSE
[00:49:43.175]      // skip if-block "protType == 1"
[00:49:43.175]    </control>
[00:49:43.175]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:43.175]      // if-block "protType == 2"
[00:49:43.175]        // =>  TRUE
[00:49:43.175]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:43.175]        // if-block "isSWJ"
[00:49:43.175]          // =>  TRUE
[00:49:43.175]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:43.175]          // if-block "hasDormant"
[00:49:43.176]            // =>  FALSE
[00:49:43.176]          // skip if-block "hasDormant"
[00:49:43.176]        </control>
[00:49:43.176]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:43.176]          // if-block "!hasDormant"
[00:49:43.176]            // =>  TRUE
[00:49:43.176]          <block atomic="false" info="">
[00:49:43.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:44.179]  
[00:49:44.179]  !!! E320 : DAP access error
[00:49:44.179]  
[00:49:44.187]          </block>
[00:49:44.187]          // end if-block "!hasDormant"
[00:49:44.188]        </control>
[00:49:44.188]        // end if-block "isSWJ"
[00:49:44.188]      </control>
[00:49:44.188]      // end if-block "protType == 2"
[00:49:44.188]    </control>
[00:49:44.188]  </sequence>
[00:49:44.188]  
[00:49:44.451]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:44.451]  
[00:49:44.459]  <debugvars>
[00:49:44.459]    // Pre-defined
[00:49:44.459]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:44.459]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:44.459]    __dp=0x00000000
[00:49:44.459]    __ap=0x00000000
[00:49:44.459]    __traceout=0x00000000      (Trace Disabled)
[00:49:44.459]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:44.459]    __FlashAddr=0x00000000
[00:49:44.460]    __FlashLen=0x00000000
[00:49:44.460]    __FlashArg=0x00000000
[00:49:44.460]    __FlashOp=0x00000000
[00:49:44.460]    __Result=0x00000000
[00:49:44.460]  </debugvars>
[00:49:44.460]  
[00:49:44.460]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:44.460]    <block atomic="false" info="">
[00:49:44.460]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:44.461]        // -> [isSWJ <= 0x00000001]
[00:49:44.461]      __var hasDormant = __protocol & 0x00020000;
[00:49:44.461]        // -> [hasDormant <= 0x00000000]
[00:49:44.461]      __var protType   = __protocol & 0x0000FFFF;
[00:49:44.461]        // -> [protType <= 0x00000002]
[00:49:44.461]    </block>
[00:49:44.462]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:44.462]      // if-block "protType == 1"
[00:49:44.462]        // =>  FALSE
[00:49:44.462]      // skip if-block "protType == 1"
[00:49:44.462]    </control>
[00:49:44.462]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:44.462]      // if-block "protType == 2"
[00:49:44.462]        // =>  TRUE
[00:49:44.462]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:44.462]        // if-block "isSWJ"
[00:49:44.462]          // =>  TRUE
[00:49:44.462]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:44.464]          // if-block "hasDormant"
[00:49:44.464]            // =>  FALSE
[00:49:44.464]          // skip if-block "hasDormant"
[00:49:44.464]        </control>
[00:49:44.464]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:44.464]          // if-block "!hasDormant"
[00:49:44.464]            // =>  TRUE
[00:49:44.464]          <block atomic="false" info="">
[00:49:44.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:45.473]  
[00:49:45.473]  !!! E320 : DAP access error
[00:49:45.473]  
[00:49:45.482]          </block>
[00:49:45.482]          // end if-block "!hasDormant"
[00:49:45.482]        </control>
[00:49:45.482]        // end if-block "isSWJ"
[00:49:45.482]      </control>
[00:49:45.482]      // end if-block "protType == 2"
[00:49:45.482]    </control>
[00:49:45.483]  </sequence>
[00:49:45.483]  
[00:49:45.747]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:45.747]  
[00:49:45.755]  <debugvars>
[00:49:45.755]    // Pre-defined
[00:49:45.755]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:45.755]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:45.755]    __dp=0x00000000
[00:49:45.755]    __ap=0x00000000
[00:49:45.755]    __traceout=0x00000000      (Trace Disabled)
[00:49:45.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:45.755]    __FlashAddr=0x00000000
[00:49:45.756]    __FlashLen=0x00000000
[00:49:45.756]    __FlashArg=0x00000000
[00:49:45.756]    __FlashOp=0x00000000
[00:49:45.756]    __Result=0x00000000
[00:49:45.756]  </debugvars>
[00:49:45.756]  
[00:49:45.756]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:45.756]    <block atomic="false" info="">
[00:49:45.756]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:45.756]        // -> [isSWJ <= 0x00000001]
[00:49:45.756]      __var hasDormant = __protocol & 0x00020000;
[00:49:45.757]        // -> [hasDormant <= 0x00000000]
[00:49:45.757]      __var protType   = __protocol & 0x0000FFFF;
[00:49:45.757]        // -> [protType <= 0x00000002]
[00:49:45.757]    </block>
[00:49:45.757]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:45.757]      // if-block "protType == 1"
[00:49:45.757]        // =>  FALSE
[00:49:45.757]      // skip if-block "protType == 1"
[00:49:45.757]    </control>
[00:49:45.758]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:45.758]      // if-block "protType == 2"
[00:49:45.758]        // =>  TRUE
[00:49:45.758]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:45.758]        // if-block "isSWJ"
[00:49:45.758]          // =>  TRUE
[00:49:45.758]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:45.758]          // if-block "hasDormant"
[00:49:45.758]            // =>  FALSE
[00:49:45.758]          // skip if-block "hasDormant"
[00:49:45.758]        </control>
[00:49:45.758]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:45.759]          // if-block "!hasDormant"
[00:49:45.759]            // =>  TRUE
[00:49:45.759]          <block atomic="false" info="">
[00:49:45.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:46.766]  
[00:49:46.766]  !!! E320 : DAP access error
[00:49:46.766]  
[00:49:46.774]          </block>
[00:49:46.774]          // end if-block "!hasDormant"
[00:49:46.774]        </control>
[00:49:46.774]        // end if-block "isSWJ"
[00:49:46.774]      </control>
[00:49:46.774]      // end if-block "protType == 2"
[00:49:46.774]    </control>
[00:49:46.774]  </sequence>
[00:49:46.774]  
[00:49:47.041]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:47.041]  
[00:49:47.050]  <debugvars>
[00:49:47.050]    // Pre-defined
[00:49:47.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:47.051]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:47.051]    __dp=0x00000000
[00:49:47.051]    __ap=0x00000000
[00:49:47.051]    __traceout=0x00000000      (Trace Disabled)
[00:49:47.051]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:47.051]    __FlashAddr=0x00000000
[00:49:47.051]    __FlashLen=0x00000000
[00:49:47.052]    __FlashArg=0x00000000
[00:49:47.052]    __FlashOp=0x00000000
[00:49:47.052]    __Result=0x00000000
[00:49:47.052]  </debugvars>
[00:49:47.052]  
[00:49:47.052]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:47.052]    <block atomic="false" info="">
[00:49:47.052]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:47.052]        // -> [isSWJ <= 0x00000001]
[00:49:47.052]      __var hasDormant = __protocol & 0x00020000;
[00:49:47.052]        // -> [hasDormant <= 0x00000000]
[00:49:47.053]      __var protType   = __protocol & 0x0000FFFF;
[00:49:47.053]        // -> [protType <= 0x00000002]
[00:49:47.053]    </block>
[00:49:47.053]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:47.053]      // if-block "protType == 1"
[00:49:47.053]        // =>  FALSE
[00:49:47.053]      // skip if-block "protType == 1"
[00:49:47.053]    </control>
[00:49:47.053]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:47.054]      // if-block "protType == 2"
[00:49:47.054]        // =>  TRUE
[00:49:47.054]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:47.054]        // if-block "isSWJ"
[00:49:47.054]          // =>  TRUE
[00:49:47.054]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:47.054]          // if-block "hasDormant"
[00:49:47.055]            // =>  FALSE
[00:49:47.055]          // skip if-block "hasDormant"
[00:49:47.055]        </control>
[00:49:47.055]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:47.055]          // if-block "!hasDormant"
[00:49:47.055]            // =>  TRUE
[00:49:47.055]          <block atomic="false" info="">
[00:49:47.055]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:48.059]  
[00:49:48.059]  !!! E320 : DAP access error
[00:49:48.059]  
[00:49:48.067]          </block>
[00:49:48.068]          // end if-block "!hasDormant"
[00:49:48.068]        </control>
[00:49:48.068]        // end if-block "isSWJ"
[00:49:48.068]      </control>
[00:49:48.068]      // end if-block "protType == 2"
[00:49:48.068]    </control>
[00:49:48.068]  </sequence>
[00:49:48.068]  
[00:49:48.332]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:48.332]  
[00:49:48.341]  <debugvars>
[00:49:48.341]    // Pre-defined
[00:49:48.341]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:48.341]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:48.341]    __dp=0x00000000
[00:49:48.341]    __ap=0x00000000
[00:49:48.341]    __traceout=0x00000000      (Trace Disabled)
[00:49:48.341]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:48.341]    __FlashAddr=0x00000000
[00:49:48.341]    __FlashLen=0x00000000
[00:49:48.341]    __FlashArg=0x00000000
[00:49:48.342]    __FlashOp=0x00000000
[00:49:48.342]    __Result=0x00000000
[00:49:48.342]  </debugvars>
[00:49:48.342]  
[00:49:48.342]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:48.342]    <block atomic="false" info="">
[00:49:48.343]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:48.343]        // -> [isSWJ <= 0x00000001]
[00:49:48.343]      __var hasDormant = __protocol & 0x00020000;
[00:49:48.343]        // -> [hasDormant <= 0x00000000]
[00:49:48.343]      __var protType   = __protocol & 0x0000FFFF;
[00:49:48.343]        // -> [protType <= 0x00000002]
[00:49:48.344]    </block>
[00:49:48.344]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:48.344]      // if-block "protType == 1"
[00:49:48.344]        // =>  FALSE
[00:49:48.344]      // skip if-block "protType == 1"
[00:49:48.344]    </control>
[00:49:48.344]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:48.344]      // if-block "protType == 2"
[00:49:48.345]        // =>  TRUE
[00:49:48.345]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:48.345]        // if-block "isSWJ"
[00:49:48.345]          // =>  TRUE
[00:49:48.345]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:48.345]          // if-block "hasDormant"
[00:49:48.345]            // =>  FALSE
[00:49:48.345]          // skip if-block "hasDormant"
[00:49:48.345]        </control>
[00:49:48.345]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:48.345]          // if-block "!hasDormant"
[00:49:48.346]            // =>  TRUE
[00:49:48.346]          <block atomic="false" info="">
[00:49:48.346]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:49.352]  
[00:49:49.352]  !!! E320 : DAP access error
[00:49:49.352]  
[00:49:49.362]          </block>
[00:49:49.362]          // end if-block "!hasDormant"
[00:49:49.362]        </control>
[00:49:49.362]        // end if-block "isSWJ"
[00:49:49.362]      </control>
[00:49:49.362]      // end if-block "protType == 2"
[00:49:49.362]    </control>
[00:49:49.362]  </sequence>
[00:49:49.362]  
[00:49:49.626]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:49.626]  
[00:49:49.635]  <debugvars>
[00:49:49.635]    // Pre-defined
[00:49:49.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:49.635]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:49.635]    __dp=0x00000000
[00:49:49.635]    __ap=0x00000000
[00:49:49.636]    __traceout=0x00000000      (Trace Disabled)
[00:49:49.636]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:49.636]    __FlashAddr=0x00000000
[00:49:49.636]    __FlashLen=0x00000000
[00:49:49.636]    __FlashArg=0x00000000
[00:49:49.636]    __FlashOp=0x00000000
[00:49:49.636]    __Result=0x00000000
[00:49:49.636]  </debugvars>
[00:49:49.637]  
[00:49:49.637]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:49.637]    <block atomic="false" info="">
[00:49:49.637]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:49.637]        // -> [isSWJ <= 0x00000001]
[00:49:49.637]      __var hasDormant = __protocol & 0x00020000;
[00:49:49.637]        // -> [hasDormant <= 0x00000000]
[00:49:49.637]      __var protType   = __protocol & 0x0000FFFF;
[00:49:49.637]        // -> [protType <= 0x00000002]
[00:49:49.637]    </block>
[00:49:49.637]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:49.638]      // if-block "protType == 1"
[00:49:49.638]        // =>  FALSE
[00:49:49.638]      // skip if-block "protType == 1"
[00:49:49.638]    </control>
[00:49:49.638]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:49.638]      // if-block "protType == 2"
[00:49:49.638]        // =>  TRUE
[00:49:49.638]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:49.638]        // if-block "isSWJ"
[00:49:49.638]          // =>  TRUE
[00:49:49.638]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:49.639]          // if-block "hasDormant"
[00:49:49.639]            // =>  FALSE
[00:49:49.639]          // skip if-block "hasDormant"
[00:49:49.639]        </control>
[00:49:49.639]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:49.639]          // if-block "!hasDormant"
[00:49:49.639]            // =>  TRUE
[00:49:49.639]          <block atomic="false" info="">
[00:49:49.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:50.646]  
[00:49:50.646]  !!! E320 : DAP access error
[00:49:50.646]  
[00:49:50.654]          </block>
[00:49:50.654]          // end if-block "!hasDormant"
[00:49:50.654]        </control>
[00:49:50.654]        // end if-block "isSWJ"
[00:49:50.654]      </control>
[00:49:50.654]      // end if-block "protType == 2"
[00:49:50.654]    </control>
[00:49:50.654]  </sequence>
[00:49:50.655]  
[00:49:50.918]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:50.918]  
[00:49:50.918]  <debugvars>
[00:49:50.918]    // Pre-defined
[00:49:50.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:50.918]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:50.919]    __dp=0x00000000
[00:49:50.919]    __ap=0x00000000
[00:49:50.919]    __traceout=0x00000000      (Trace Disabled)
[00:49:50.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:50.919]    __FlashAddr=0x00000000
[00:49:50.919]    __FlashLen=0x00000000
[00:49:50.919]    __FlashArg=0x00000000
[00:49:50.919]    __FlashOp=0x00000000
[00:49:50.920]    __Result=0x00000000
[00:49:50.920]  </debugvars>
[00:49:50.920]  
[00:49:50.920]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:50.920]    <block atomic="false" info="">
[00:49:50.920]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:50.920]        // -> [isSWJ <= 0x00000001]
[00:49:50.920]      __var hasDormant = __protocol & 0x00020000;
[00:49:50.920]        // -> [hasDormant <= 0x00000000]
[00:49:50.920]      __var protType   = __protocol & 0x0000FFFF;
[00:49:50.921]        // -> [protType <= 0x00000002]
[00:49:50.921]    </block>
[00:49:50.921]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:50.921]      // if-block "protType == 1"
[00:49:50.921]        // =>  FALSE
[00:49:50.921]      // skip if-block "protType == 1"
[00:49:50.922]    </control>
[00:49:50.922]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:50.922]      // if-block "protType == 2"
[00:49:50.922]        // =>  TRUE
[00:49:50.922]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:50.922]        // if-block "isSWJ"
[00:49:50.922]          // =>  TRUE
[00:49:50.922]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:50.922]          // if-block "hasDormant"
[00:49:50.922]            // =>  FALSE
[00:49:50.924]          // skip if-block "hasDormant"
[00:49:50.924]        </control>
[00:49:50.924]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:50.924]          // if-block "!hasDormant"
[00:49:50.924]            // =>  TRUE
[00:49:50.924]          <block atomic="false" info="">
[00:49:50.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:51.933]  
[00:49:51.933]  !!! E320 : DAP access error
[00:49:51.933]  
[00:49:51.942]          </block>
[00:49:51.942]          // end if-block "!hasDormant"
[00:49:51.942]        </control>
[00:49:51.942]        // end if-block "isSWJ"
[00:49:51.942]      </control>
[00:49:51.942]      // end if-block "protType == 2"
[00:49:51.942]    </control>
[00:49:51.942]  </sequence>
[00:49:51.942]  
[00:49:52.207]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:52.207]  
[00:49:52.215]  <debugvars>
[00:49:52.215]    // Pre-defined
[00:49:52.215]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:52.215]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:52.215]    __dp=0x00000000
[00:49:52.215]    __ap=0x00000000
[00:49:52.215]    __traceout=0x00000000      (Trace Disabled)
[00:49:52.215]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:52.215]    __FlashAddr=0x00000000
[00:49:52.215]    __FlashLen=0x00000000
[00:49:52.216]    __FlashArg=0x00000000
[00:49:52.216]    __FlashOp=0x00000000
[00:49:52.216]    __Result=0x00000000
[00:49:52.216]  </debugvars>
[00:49:52.216]  
[00:49:52.216]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:52.216]    <block atomic="false" info="">
[00:49:52.217]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:52.217]        // -> [isSWJ <= 0x00000001]
[00:49:52.217]      __var hasDormant = __protocol & 0x00020000;
[00:49:52.217]        // -> [hasDormant <= 0x00000000]
[00:49:52.217]      __var protType   = __protocol & 0x0000FFFF;
[00:49:52.217]        // -> [protType <= 0x00000002]
[00:49:52.217]    </block>
[00:49:52.217]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:52.217]      // if-block "protType == 1"
[00:49:52.218]        // =>  FALSE
[00:49:52.218]      // skip if-block "protType == 1"
[00:49:52.218]    </control>
[00:49:52.218]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:52.218]      // if-block "protType == 2"
[00:49:52.218]        // =>  TRUE
[00:49:52.218]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:52.218]        // if-block "isSWJ"
[00:49:52.218]          // =>  TRUE
[00:49:52.218]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:52.219]          // if-block "hasDormant"
[00:49:52.219]            // =>  FALSE
[00:49:52.219]          // skip if-block "hasDormant"
[00:49:52.219]        </control>
[00:49:52.219]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:52.219]          // if-block "!hasDormant"
[00:49:52.219]            // =>  TRUE
[00:49:52.219]          <block atomic="false" info="">
[00:49:52.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:53.225]  
[00:49:53.225]  !!! E320 : DAP access error
[00:49:53.225]  
[00:49:53.226]          </block>
[00:49:53.226]          // end if-block "!hasDormant"
[00:49:53.226]        </control>
[00:49:53.226]        // end if-block "isSWJ"
[00:49:53.226]      </control>
[00:49:53.226]      // end if-block "protType == 2"
[00:49:53.227]    </control>
[00:49:53.227]  </sequence>
[00:49:53.227]  
[00:49:53.483]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:49:53.483]  
[00:49:53.492]  <debugvars>
[00:49:53.492]    // Pre-defined
[00:49:53.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:53.492]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:49:53.492]    __dp=0x00000000
[00:49:53.492]    __ap=0x00000000
[00:49:53.492]    __traceout=0x00000000      (Trace Disabled)
[00:49:53.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:53.493]    __FlashAddr=0x00000000
[00:49:53.493]    __FlashLen=0x00000000
[00:49:53.493]    __FlashArg=0x00000000
[00:49:53.493]    __FlashOp=0x00000000
[00:49:53.493]    __Result=0x00000000
[00:49:53.493]  </debugvars>
[00:49:53.493]  
[00:49:53.493]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:53.493]    <block atomic="false" info="">
[00:49:53.494]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:53.494]        // -> [isSWJ <= 0x00000001]
[00:49:53.494]      __var hasDormant = __protocol & 0x00020000;
[00:49:53.494]        // -> [hasDormant <= 0x00000000]
[00:49:53.494]      __var protType   = __protocol & 0x0000FFFF;
[00:49:53.494]        // -> [protType <= 0x00000002]
[00:49:53.494]    </block>
[00:49:53.494]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:53.494]      // if-block "protType == 1"
[00:49:53.494]        // =>  FALSE
[00:49:53.495]      // skip if-block "protType == 1"
[00:49:53.495]    </control>
[00:49:53.496]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:53.496]      // if-block "protType == 2"
[00:49:53.496]        // =>  TRUE
[00:49:53.496]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:53.496]        // if-block "isSWJ"
[00:49:53.496]          // =>  TRUE
[00:49:53.496]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:53.496]          // if-block "hasDormant"
[00:49:53.496]            // =>  FALSE
[00:49:53.496]          // skip if-block "hasDormant"
[00:49:53.497]        </control>
[00:49:53.497]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:53.497]          // if-block "!hasDormant"
[00:49:53.497]            // =>  TRUE
[00:49:53.497]          <block atomic="false" info="">
[00:49:53.497]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:54.501]  
[00:49:54.501]  !!! E320 : DAP access error
[00:49:54.501]  
[00:49:54.503]          </block>
[00:49:54.503]          // end if-block "!hasDormant"
[00:49:54.503]        </control>
[00:49:54.503]        // end if-block "isSWJ"
[00:49:54.503]      </control>
[00:49:54.503]      // end if-block "protType == 2"
[00:49:54.503]    </control>
[00:49:54.503]  </sequence>
[00:49:54.503]  
[00:58:12.485]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:58:12.485]  
[00:58:12.493]  <debugvars>
[00:58:12.493]    // Pre-defined
[00:58:12.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:12.493]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:12.493]    __dp=0x00000000
[00:58:12.493]    __ap=0x00000000
[00:58:12.493]    __traceout=0x00000000      (Trace Disabled)
[00:58:12.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:12.493]    __FlashAddr=0x00000000
[00:58:12.494]    __FlashLen=0x00000000
[00:58:12.494]    __FlashArg=0x00000000
[00:58:12.494]    __FlashOp=0x00000000
[00:58:12.494]    __Result=0x00000000
[00:58:12.494]  </debugvars>
[00:58:12.495]  
[00:58:12.495]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:58:12.495]    <block atomic="false" info="">
[00:58:12.495]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:58:12.495]        // -> [isSWJ <= 0x00000001]
[00:58:12.495]      __var hasDormant = __protocol & 0x00020000;
[00:58:12.495]        // -> [hasDormant <= 0x00000000]
[00:58:12.495]      __var protType   = __protocol & 0x0000FFFF;
[00:58:12.495]        // -> [protType <= 0x00000002]
[00:58:12.495]    </block>
[00:58:12.495]    <control if="protType == 1" while="" timeout="0" info="">
[00:58:12.495]      // if-block "protType == 1"
[00:58:12.495]        // =>  FALSE
[00:58:12.496]      // skip if-block "protType == 1"
[00:58:12.496]    </control>
[00:58:12.496]    <control if="protType == 2" while="" timeout="0" info="">
[00:58:12.496]      // if-block "protType == 2"
[00:58:12.496]        // =>  TRUE
[00:58:12.496]      <control if="isSWJ" while="" timeout="0" info="">
[00:58:12.496]        // if-block "isSWJ"
[00:58:12.496]          // =>  TRUE
[00:58:12.496]        <control if="hasDormant" while="" timeout="0" info="">
[00:58:12.496]          // if-block "hasDormant"
[00:58:12.498]            // =>  FALSE
[00:58:12.498]          // skip if-block "hasDormant"
[00:58:12.498]        </control>
[00:58:12.498]        <control if="!hasDormant" while="" timeout="0" info="">
[00:58:12.498]          // if-block "!hasDormant"
[00:58:12.498]            // =>  TRUE
[00:58:12.498]          <block atomic="false" info="">
[00:58:12.498]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:58:12.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:12.500]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:58:12.501]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:58:12.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:58:12.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:12.503]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:58:12.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:58:12.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:58:12.508]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:12.508]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:58:12.509]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:58:12.509]          </block>
[00:58:12.509]          // end if-block "!hasDormant"
[00:58:12.509]        </control>
[00:58:12.510]        // end if-block "isSWJ"
[00:58:12.510]      </control>
[00:58:12.510]      <control if="!isSWJ" while="" timeout="0" info="">
[00:58:12.510]        // if-block "!isSWJ"
[00:58:12.510]          // =>  FALSE
[00:58:12.510]        // skip if-block "!isSWJ"
[00:58:12.510]      </control>
[00:58:12.510]      <block atomic="false" info="">
[00:58:12.510]        ReadDP(0x0);
[00:58:12.512]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:58:12.512]      </block>
[00:58:12.512]      // end if-block "protType == 2"
[00:58:12.512]    </control>
[00:58:12.512]  </sequence>
[00:58:12.512]  
[00:58:12.515]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:58:12.515]  
[00:58:12.515]  <debugvars>
[00:58:12.515]    // Pre-defined
[00:58:12.515]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:12.515]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:12.516]    __dp=0x00000000
[00:58:12.516]    __ap=0x00000000
[00:58:12.516]    __traceout=0x00000000      (Trace Disabled)
[00:58:12.516]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:12.516]    __FlashAddr=0x00000000
[00:58:12.516]    __FlashLen=0x00000000
[00:58:12.516]    __FlashArg=0x00000000
[00:58:12.516]    __FlashOp=0x00000000
[00:58:12.516]    __Result=0x00000000
[00:58:12.516]  </debugvars>
[00:58:12.516]  
[00:58:12.517]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:58:12.517]    <block atomic="false" info="">
[00:58:12.517]      __var SW_DP_ABORT       = 0x0;
[00:58:12.517]        // -> [SW_DP_ABORT <= 0x00000000]
[00:58:12.517]      __var DP_CTRL_STAT      = 0x4;
[00:58:12.517]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:58:12.517]      __var DP_SELECT         = 0x8;
[00:58:12.517]        // -> [DP_SELECT <= 0x00000008]
[00:58:12.517]      __var powered_down      = 0;
[00:58:12.517]        // -> [powered_down <= 0x00000000]
[00:58:12.517]      WriteDP(DP_SELECT, 0x00000000);
[00:58:12.519]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:58:12.519]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:58:12.521]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:58:12.521]        // -> [powered_down <= 0x00000001]
[00:58:12.521]    </block>
[00:58:12.521]    <control if="powered_down" while="" timeout="0" info="">
[00:58:12.521]      // if-block "powered_down"
[00:58:12.522]        // =>  TRUE
[00:58:12.522]      <block atomic="false" info="">
[00:58:12.522]        Message(0, "Debug/System power-up request sent");
[00:58:12.525]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:58:12.527]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:58:12.527]      </block>
[00:58:12.527]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:58:12.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:58:12.533]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:58:12.534]        // while-condition  =>  FALSE
[00:58:12.534]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:58:12.534]      </control>
[00:58:12.534]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:58:12.534]        // if-block "(__protocol & 0xFFFF) == 1"
[00:58:12.534]          // =>  FALSE
[00:58:12.534]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:58:12.535]      </control>
[00:58:12.535]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:58:12.535]        // if-block "(__protocol & 0xFFFF) == 2"
[00:58:12.535]          // =>  TRUE
[00:58:12.535]        <block atomic="false" info="">
[00:58:12.535]          Message(0, "executing SWD power up");
[00:58:12.537]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:58:12.539]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:58:12.539]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:58:12.541]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:58:12.541]        </block>
[00:58:12.541]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:58:12.541]      </control>
[00:58:12.541]      // end if-block "powered_down"
[00:58:12.542]    </control>
[00:58:12.542]    <block atomic="false" info="">
[00:58:12.542]      __var DEBUG_PORT_VAL    = 0;
[00:58:12.542]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:58:12.542]      __var ACCESS_POINT_VAL  = 0;
[00:58:12.542]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:58:12.542]      __ap = 1; 
[00:58:12.542]        // -> [__ap <= 0x00000001]
[00:58:12.542]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:58:12.552]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:58:12.552]      __ap = 4;
[00:58:12.552]        // -> [__ap <= 0x00000004]
[00:58:12.552]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:12.555]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:58:12.555]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:58:12.555]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:12.557]    </block>
[00:58:12.557]    <block atomic="false" info="">
[00:58:12.557]      __var nReset = 0x80;
[00:58:12.557]        // -> [nReset <= 0x00000080]
[00:58:12.558]      __var canReadPins = 0;
[00:58:12.558]        // -> [canReadPins <= 0x00000000]
[00:58:12.558]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:58:12.559]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:58:12.559]        // -> [canReadPins <= 0x00000001]
[00:58:12.559]    </block>
[00:58:12.559]    <control if="" while="1" timeout="200" info="">
[00:58:12.559]      // while "1"  (timeout="200")
[00:58:12.559]      // while-condition  =>  TRUE
[00:58:12.560]      // while "1"  (timeout="200")
[00:58:12.560]      // while-condition  =>  TRUE
[00:58:12.560]      // while "1"  (timeout="200")
[00:58:12.560]      // while-condition  =>  TRUE
[00:58:12.560]      // while "1"  (timeout="200")
[00:58:12.560]      // while-condition  =>  TRUE
[00:58:12.560]      // while "1"  (timeout="200")
[00:58:12.560]      // while-condition  =>  TRUE
[00:58:12.560]      // while "1"  (timeout="200")
[00:58:12.561]      // while-condition  =>  TRUE
[00:58:12.561]      // while "1"  (timeout="200")
[00:58:12.561]      // while-condition  =>  TRUE
[00:58:12.561]      // while "1"  (timeout="200")
[00:58:12.561]      // while-condition  =>  TRUE
[00:58:12.561]      // while "1"  (timeout="200")
[00:58:12.561]      // while-condition  =>  TRUE
[00:58:12.561]      // while "1"  (timeout="200")
[00:58:12.561]      // while-condition  =>  TRUE
[00:58:12.561]      // while "1"  (timeout="200")
[00:58:12.561]      // while-condition  =>  TRUE
[00:58:12.562]      // while "1"  (timeout="200")
[00:58:12.562]      // while-condition  =>  TRUE
[00:58:12.562]      // while "1"  (timeout="200")
[00:58:12.562]      // while-condition  =>  TRUE
[00:58:12.562]      // while "1"  (timeout="200")
[00:58:12.562]      // while-condition  =>  TRUE
[00:58:12.562]      // while "1"  (timeout="200")
[00:58:12.562]      // while-condition  =>  TRUE
[00:58:12.562]      // while "1"  (timeout="200")
[00:58:12.563]      // while-condition  =>  TRUE
[00:58:12.563]      // while "1"  (timeout="200")
[00:58:12.563]      // while  =>  TIMEOUT
[00:58:12.563]      // end while "1"
[00:58:12.563]    </control>
[00:58:12.563]    <control if="canReadPins" while="" timeout="0" info="">
[00:58:12.563]      // if-block "canReadPins"
[00:58:12.563]        // =>  TRUE
[00:58:12.563]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:58:12.564]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:58:12.565]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:58:12.566]        // while-condition  =>  FALSE
[00:58:12.566]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:58:12.566]      </control>
[00:58:12.566]      // end if-block "canReadPins"
[00:58:12.566]    </control>
[00:58:12.566]    <control if="!canReadPins" while="" timeout="0" info="">
[00:58:12.566]      // if-block "!canReadPins"
[00:58:12.566]        // =>  FALSE
[00:58:12.567]      // skip if-block "!canReadPins"
[00:58:12.567]    </control>
[00:58:12.567]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:58:12.567]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:12.567]        // =>  TRUE
[00:58:12.567]      <block atomic="false" info="">
[00:58:12.567]        WriteAP(0x00, 0x190008);
[00:58:12.572]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:12.573]        WriteAP(0xF0, 0x01);
[00:58:12.576]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:12.576]      </block>
[00:58:12.576]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:12.576]    </control>
[00:58:12.576]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:58:12.576]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:12.576]        // =>  FALSE
[00:58:12.576]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:12.576]    </control>
[00:58:12.577]    <block atomic="false" info="">
[00:58:12.577]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:12.582]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:58:12.582]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:58:12.582]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:12.585]      __ap = 0; //lets make sure we reset the access point selection
[00:58:12.585]        // -> [__ap <= 0x00000000]
[00:58:12.585]    </block>
[00:58:12.585]  </sequence>
[00:58:12.585]  
[00:58:12.613]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:58:12.613]  
[00:58:12.613]  <debugvars>
[00:58:12.613]    // Pre-defined
[00:58:12.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:12.613]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:12.613]    __dp=0x00000000
[00:58:12.613]    __ap=0x00000000
[00:58:12.613]    __traceout=0x00000000      (Trace Disabled)
[00:58:12.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:12.614]    __FlashAddr=0x00000000
[00:58:12.614]    __FlashLen=0x00000000
[00:58:12.614]    __FlashArg=0x00000000
[00:58:12.614]    __FlashOp=0x00000000
[00:58:12.614]    __Result=0x00000000
[00:58:12.614]  </debugvars>
[00:58:12.614]  
[00:58:12.614]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:58:12.614]    <block atomic="false" info="">
[00:58:12.614]      __var deviceID = 0;
[00:58:12.614]        // -> [deviceID <= 0x00000000]
[00:58:12.614]      __var version = 0;
[00:58:12.616]        // -> [version <= 0x00000000]
[00:58:12.616]      __var partNum = 0;
[00:58:12.616]        // -> [partNum <= 0x00000000]
[00:58:12.616]      __var manuf = 0;
[00:58:12.616]        // -> [manuf <= 0x00000000]
[00:58:12.616]      __var isMSPM0G1X0X_G3X0X = 0;
[00:58:12.616]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:58:12.616]      __var isProduction = 0;
[00:58:12.616]        // -> [isProduction <= 0x00000000]
[00:58:12.616]      __var continueId = 0;
[00:58:12.617]        // -> [continueId <= 0x00000000]
[00:58:12.617]      deviceID =   Read32(0x41C40004);
[00:58:12.621]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:58:12.621]        // -> [deviceID <= 0x2BB8802F]
[00:58:12.621]      version = deviceID >> 28;
[00:58:12.621]        // -> [version <= 0x00000002]
[00:58:12.622]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:58:12.622]        // -> [partNum <= 0x0000BB88]
[00:58:12.622]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:58:12.622]        // -> [manuf <= 0x00000017]
[00:58:12.622]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:58:12.622]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:58:12.622]      isProduction = (version > 0);
[00:58:12.622]        // -> [isProduction <= 0x00000001]
[00:58:12.622]    </block>
[00:58:12.622]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:58:12.622]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:58:12.622]        // =>  FALSE
[00:58:12.623]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:58:12.623]    </control>
[00:58:12.623]    <control if="continueId == 4" while="" timeout="0" info="">
[00:58:12.623]      // if-block "continueId == 4"
[00:58:12.623]        // =>  FALSE
[00:58:12.623]      // skip if-block "continueId == 4"
[00:58:12.623]    </control>
[00:58:12.623]    <control if="!isProduction" while="" timeout="0" info="">
[00:58:12.623]      // if-block "!isProduction"
[00:58:12.624]        // =>  FALSE
[00:58:12.624]      // skip if-block "!isProduction"
[00:58:12.624]    </control>
[00:58:12.624]  </sequence>
[00:58:12.624]  
[00:58:57.728]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:58:57.728]  
[00:58:57.737]  <debugvars>
[00:58:57.737]    // Pre-defined
[00:58:57.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:57.738]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:57.738]    __dp=0x00000000
[00:58:57.738]    __ap=0x00000000
[00:58:57.738]    __traceout=0x00000000      (Trace Disabled)
[00:58:57.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:57.738]    __FlashAddr=0x00000000
[00:58:57.739]    __FlashLen=0x00000000
[00:58:57.739]    __FlashArg=0x00000000
[00:58:57.739]    __FlashOp=0x00000000
[00:58:57.739]    __Result=0x00000000
[00:58:57.739]  </debugvars>
[00:58:57.739]  
[00:58:57.739]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:58:57.739]    <block atomic="false" info="">
[00:58:57.739]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:58:57.740]        // -> [isSWJ <= 0x00000001]
[00:58:57.740]      __var hasDormant = __protocol & 0x00020000;
[00:58:57.740]        // -> [hasDormant <= 0x00000000]
[00:58:57.740]      __var protType   = __protocol & 0x0000FFFF;
[00:58:57.740]        // -> [protType <= 0x00000002]
[00:58:57.740]    </block>
[00:58:57.740]    <control if="protType == 1" while="" timeout="0" info="">
[00:58:57.740]      // if-block "protType == 1"
[00:58:57.740]        // =>  FALSE
[00:58:57.740]      // skip if-block "protType == 1"
[00:58:57.740]    </control>
[00:58:57.741]    <control if="protType == 2" while="" timeout="0" info="">
[00:58:57.741]      // if-block "protType == 2"
[00:58:57.741]        // =>  TRUE
[00:58:57.741]      <control if="isSWJ" while="" timeout="0" info="">
[00:58:57.741]        // if-block "isSWJ"
[00:58:57.741]          // =>  TRUE
[00:58:57.741]        <control if="hasDormant" while="" timeout="0" info="">
[00:58:57.741]          // if-block "hasDormant"
[00:58:57.742]            // =>  FALSE
[00:58:57.742]          // skip if-block "hasDormant"
[00:58:57.742]        </control>
[00:58:57.742]        <control if="!hasDormant" while="" timeout="0" info="">
[00:58:57.742]          // if-block "!hasDormant"
[00:58:57.742]            // =>  TRUE
[00:58:57.742]          <block atomic="false" info="">
[00:58:57.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:58:57.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:57.744]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:58:57.745]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:58:57.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:58:57.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:57.746]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:58:57.747]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:58:57.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:58:57.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:57.750]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:58:57.754]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:58:57.754]          </block>
[00:58:57.754]          // end if-block "!hasDormant"
[00:58:57.754]        </control>
[00:58:57.755]        // end if-block "isSWJ"
[00:58:57.755]      </control>
[00:58:57.755]      <control if="!isSWJ" while="" timeout="0" info="">
[00:58:57.755]        // if-block "!isSWJ"
[00:58:57.755]          // =>  FALSE
[00:58:57.755]        // skip if-block "!isSWJ"
[00:58:57.755]      </control>
[00:58:57.755]      <block atomic="false" info="">
[00:58:57.755]        ReadDP(0x0);
[00:58:57.758]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:58:57.758]      </block>
[00:58:57.758]      // end if-block "protType == 2"
[00:58:57.758]    </control>
[00:58:57.758]  </sequence>
[00:58:57.758]  
[00:58:57.761]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:58:57.761]  
[00:58:57.762]  <debugvars>
[00:58:57.762]    // Pre-defined
[00:58:57.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:57.762]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:57.762]    __dp=0x00000000
[00:58:57.762]    __ap=0x00000000
[00:58:57.762]    __traceout=0x00000000      (Trace Disabled)
[00:58:57.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:57.762]    __FlashAddr=0x00000000
[00:58:57.763]    __FlashLen=0x00000000
[00:58:57.763]    __FlashArg=0x00000000
[00:58:57.763]    __FlashOp=0x00000000
[00:58:57.763]    __Result=0x00000000
[00:58:57.763]  </debugvars>
[00:58:57.763]  
[00:58:57.763]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:58:57.763]    <block atomic="false" info="">
[00:58:57.763]      __var SW_DP_ABORT       = 0x0;
[00:58:57.763]        // -> [SW_DP_ABORT <= 0x00000000]
[00:58:57.764]      __var DP_CTRL_STAT      = 0x4;
[00:58:57.764]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:58:57.765]      __var DP_SELECT         = 0x8;
[00:58:57.765]        // -> [DP_SELECT <= 0x00000008]
[00:58:57.765]      __var powered_down      = 0;
[00:58:57.765]        // -> [powered_down <= 0x00000000]
[00:58:57.765]      WriteDP(DP_SELECT, 0x00000000);
[00:58:57.769]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:58:57.769]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:58:57.773]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:58:57.773]        // -> [powered_down <= 0x00000001]
[00:58:57.773]    </block>
[00:58:57.773]    <control if="powered_down" while="" timeout="0" info="">
[00:58:57.774]      // if-block "powered_down"
[00:58:57.774]        // =>  TRUE
[00:58:57.774]      <block atomic="false" info="">
[00:58:57.774]        Message(0, "Debug/System power-up request sent");
[00:58:57.777]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:58:57.779]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:58:57.780]      </block>
[00:58:57.781]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:58:57.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:58:57.782]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:58:57.782]        // while-condition  =>  FALSE
[00:58:57.782]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:58:57.782]      </control>
[00:58:57.782]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:58:57.783]        // if-block "(__protocol & 0xFFFF) == 1"
[00:58:57.783]          // =>  FALSE
[00:58:57.783]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:58:57.783]      </control>
[00:58:57.783]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:58:57.783]        // if-block "(__protocol & 0xFFFF) == 2"
[00:58:57.783]          // =>  TRUE
[00:58:57.783]        <block atomic="false" info="">
[00:58:57.783]          Message(0, "executing SWD power up");
[00:58:57.786]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:58:57.789]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:58:57.789]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:58:57.795]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:58:57.795]        </block>
[00:58:57.795]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:58:57.795]      </control>
[00:58:57.795]      // end if-block "powered_down"
[00:58:57.795]    </control>
[00:58:57.795]    <block atomic="false" info="">
[00:58:57.795]      __var DEBUG_PORT_VAL    = 0;
[00:58:57.795]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:58:57.795]      __var ACCESS_POINT_VAL  = 0;
[00:58:57.795]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:58:57.795]      __ap = 1; 
[00:58:57.796]        // -> [__ap <= 0x00000001]
[00:58:57.796]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:58:57.799]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:58:57.799]      __ap = 4;
[00:58:57.799]        // -> [__ap <= 0x00000004]
[00:58:57.799]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:57.803]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:58:57.803]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:58:57.803]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:57.805]    </block>
[00:58:57.806]    <block atomic="false" info="">
[00:58:57.806]      __var nReset = 0x80;
[00:58:57.806]        // -> [nReset <= 0x00000080]
[00:58:57.806]      __var canReadPins = 0;
[00:58:57.806]        // -> [canReadPins <= 0x00000000]
[00:58:57.806]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:58:57.810]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:58:57.810]        // -> [canReadPins <= 0x00000001]
[00:58:57.810]    </block>
[00:58:57.810]    <control if="" while="1" timeout="200" info="">
[00:58:57.810]      // while "1"  (timeout="200")
[00:58:57.810]      // while-condition  =>  TRUE
[00:58:57.810]      // while "1"  (timeout="200")
[00:58:57.811]      // while-condition  =>  TRUE
[00:58:57.811]      // while "1"  (timeout="200")
[00:58:57.811]      // while-condition  =>  TRUE
[00:58:57.811]      // while "1"  (timeout="200")
[00:58:57.811]      // while-condition  =>  TRUE
[00:58:57.811]      // while "1"  (timeout="200")
[00:58:57.811]      // while-condition  =>  TRUE
[00:58:57.812]      // while "1"  (timeout="200")
[00:58:57.812]      // while-condition  =>  TRUE
[00:58:57.812]      // while "1"  (timeout="200")
[00:58:57.812]      // while-condition  =>  TRUE
[00:58:57.812]      // while "1"  (timeout="200")
[00:58:57.812]      // while-condition  =>  TRUE
[00:58:57.812]      // while "1"  (timeout="200")
[00:58:57.812]      // while-condition  =>  TRUE
[00:58:57.813]      // while "1"  (timeout="200")
[00:58:57.813]      // while-condition  =>  TRUE
[00:58:57.813]      // while "1"  (timeout="200")
[00:58:57.813]      // while-condition  =>  TRUE
[00:58:57.813]      // while "1"  (timeout="200")
[00:58:57.813]      // while-condition  =>  TRUE
[00:58:57.813]      // while "1"  (timeout="200")
[00:58:57.813]      // while-condition  =>  TRUE
[00:58:57.813]      // while "1"  (timeout="200")
[00:58:57.814]      // while-condition  =>  TRUE
[00:58:57.814]      // while "1"  (timeout="200")
[00:58:57.814]      // while  =>  TIMEOUT
[00:58:57.814]      // end while "1"
[00:58:57.814]    </control>
[00:58:57.814]    <control if="canReadPins" while="" timeout="0" info="">
[00:58:57.814]      // if-block "canReadPins"
[00:58:57.814]        // =>  TRUE
[00:58:57.814]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:58:57.815]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:58:57.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:58:57.816]        // while-condition  =>  FALSE
[00:58:57.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:58:57.816]      </control>
[00:58:57.817]      // end if-block "canReadPins"
[00:58:57.817]    </control>
[00:58:57.817]    <control if="!canReadPins" while="" timeout="0" info="">
[00:58:57.817]      // if-block "!canReadPins"
[00:58:57.817]        // =>  FALSE
[00:58:57.817]      // skip if-block "!canReadPins"
[00:58:57.817]    </control>
[00:58:57.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:58:57.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:57.818]        // =>  TRUE
[00:58:57.818]      <block atomic="false" info="">
[00:58:57.818]        WriteAP(0x00, 0x190008);
[00:58:57.819]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:57.819]        WriteAP(0xF0, 0x01);
[00:58:57.822]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:57.823]      </block>
[00:58:57.823]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:57.823]    </control>
[00:58:57.823]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:58:57.823]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:57.823]        // =>  FALSE
[00:58:57.823]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:57.823]    </control>
[00:58:57.823]    <block atomic="false" info="">
[00:58:57.825]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:57.828]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:58:57.828]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:58:57.828]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:57.831]      __ap = 0; //lets make sure we reset the access point selection
[00:58:57.831]        // -> [__ap <= 0x00000000]
[00:58:57.831]    </block>
[00:58:57.831]  </sequence>
[00:58:57.831]  
[00:58:57.857]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:58:57.857]  
[00:58:57.857]  <debugvars>
[00:58:57.857]    // Pre-defined
[00:58:57.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:57.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:57.858]    __dp=0x00000000
[00:58:57.858]    __ap=0x00000000
[00:58:57.858]    __traceout=0x00000000      (Trace Disabled)
[00:58:57.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:57.858]    __FlashAddr=0x00000000
[00:58:57.859]    __FlashLen=0x00000000
[00:58:57.859]    __FlashArg=0x00000000
[00:58:57.859]    __FlashOp=0x00000000
[00:58:57.859]    __Result=0x00000000
[00:58:57.859]  </debugvars>
[00:58:57.859]  
[00:58:57.859]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:58:57.859]    <block atomic="false" info="">
[00:58:57.859]      __var deviceID = 0;
[00:58:57.860]        // -> [deviceID <= 0x00000000]
[00:58:57.860]      __var version = 0;
[00:58:57.860]        // -> [version <= 0x00000000]
[00:58:57.860]      __var partNum = 0;
[00:58:57.860]        // -> [partNum <= 0x00000000]
[00:58:57.860]      __var manuf = 0;
[00:58:57.860]        // -> [manuf <= 0x00000000]
[00:58:57.860]      __var isMSPM0G1X0X_G3X0X = 0;
[00:58:57.860]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:58:57.861]      __var isProduction = 0;
[00:58:57.861]        // -> [isProduction <= 0x00000000]
[00:58:57.861]      __var continueId = 0;
[00:58:57.861]        // -> [continueId <= 0x00000000]
[00:58:57.861]      deviceID =   Read32(0x41C40004);
[00:58:57.865]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:58:57.865]        // -> [deviceID <= 0x2BB8802F]
[00:58:57.865]      version = deviceID >> 28;
[00:58:57.865]        // -> [version <= 0x00000002]
[00:58:57.865]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:58:57.865]        // -> [partNum <= 0x0000BB88]
[00:58:57.865]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:58:57.865]        // -> [manuf <= 0x00000017]
[00:58:57.865]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:58:57.865]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:58:57.867]      isProduction = (version > 0);
[00:58:57.867]        // -> [isProduction <= 0x00000001]
[00:58:57.867]    </block>
[00:58:57.867]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:58:57.867]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:58:57.867]        // =>  FALSE
[00:58:57.867]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:58:57.867]    </control>
[00:58:57.867]    <control if="continueId == 4" while="" timeout="0" info="">
[00:58:57.867]      // if-block "continueId == 4"
[00:58:57.867]        // =>  FALSE
[00:58:57.867]      // skip if-block "continueId == 4"
[00:58:57.867]    </control>
[00:58:57.868]    <control if="!isProduction" while="" timeout="0" info="">
[00:58:57.868]      // if-block "!isProduction"
[00:58:57.868]        // =>  FALSE
[00:58:57.868]      // skip if-block "!isProduction"
[00:58:57.868]    </control>
[00:58:57.868]  </sequence>
[00:58:57.868]  
[01:08:17.462]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:08:17.462]  
[01:08:17.471]  <debugvars>
[01:08:17.471]    // Pre-defined
[01:08:17.471]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:17.471]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:08:17.471]    __dp=0x00000000
[01:08:17.471]    __ap=0x00000000
[01:08:17.471]    __traceout=0x00000000      (Trace Disabled)
[01:08:17.471]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:17.473]    __FlashAddr=0x00000000
[01:08:17.473]    __FlashLen=0x00000000
[01:08:17.473]    __FlashArg=0x00000000
[01:08:17.473]    __FlashOp=0x00000000
[01:08:17.473]    __Result=0x00000000
[01:08:17.473]  </debugvars>
[01:08:17.473]  
[01:08:17.473]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:08:17.473]    <block atomic="false" info="">
[01:08:17.473]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:08:17.474]        // -> [isSWJ <= 0x00000001]
[01:08:17.474]      __var hasDormant = __protocol & 0x00020000;
[01:08:17.474]        // -> [hasDormant <= 0x00000000]
[01:08:17.474]      __var protType   = __protocol & 0x0000FFFF;
[01:08:17.474]        // -> [protType <= 0x00000002]
[01:08:17.474]    </block>
[01:08:17.474]    <control if="protType == 1" while="" timeout="0" info="">
[01:08:17.474]      // if-block "protType == 1"
[01:08:17.474]        // =>  FALSE
[01:08:17.474]      // skip if-block "protType == 1"
[01:08:17.475]    </control>
[01:08:17.475]    <control if="protType == 2" while="" timeout="0" info="">
[01:08:17.475]      // if-block "protType == 2"
[01:08:17.475]        // =>  TRUE
[01:08:17.475]      <control if="isSWJ" while="" timeout="0" info="">
[01:08:17.475]        // if-block "isSWJ"
[01:08:17.475]          // =>  TRUE
[01:08:17.475]        <control if="hasDormant" while="" timeout="0" info="">
[01:08:17.475]          // if-block "hasDormant"
[01:08:17.475]            // =>  FALSE
[01:08:17.476]          // skip if-block "hasDormant"
[01:08:17.476]        </control>
[01:08:17.476]        <control if="!hasDormant" while="" timeout="0" info="">
[01:08:17.476]          // if-block "!hasDormant"
[01:08:17.476]            // =>  TRUE
[01:08:17.476]          <block atomic="false" info="">
[01:08:17.476]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:08:17.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:17.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:08:17.485]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:08:17.485]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:08:17.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:17.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:08:17.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:08:17.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:08:17.492]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:17.492]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:08:17.493]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:08:17.493]          </block>
[01:08:17.493]          // end if-block "!hasDormant"
[01:08:17.493]        </control>
[01:08:17.494]        // end if-block "isSWJ"
[01:08:17.494]      </control>
[01:08:17.494]      <control if="!isSWJ" while="" timeout="0" info="">
[01:08:17.494]        // if-block "!isSWJ"
[01:08:17.494]          // =>  FALSE
[01:08:17.494]        // skip if-block "!isSWJ"
[01:08:17.494]      </control>
[01:08:17.494]      <block atomic="false" info="">
[01:08:17.494]        ReadDP(0x0);
[01:08:17.497]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:08:17.497]      </block>
[01:08:17.498]      // end if-block "protType == 2"
[01:08:17.498]    </control>
[01:08:17.498]  </sequence>
[01:08:17.498]  
[01:08:17.503]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:08:17.503]  
[01:08:17.503]  <debugvars>
[01:08:17.503]    // Pre-defined
[01:08:17.503]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:17.503]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:08:17.503]    __dp=0x00000000
[01:08:17.503]    __ap=0x00000000
[01:08:17.503]    __traceout=0x00000000      (Trace Disabled)
[01:08:17.503]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:17.503]    __FlashAddr=0x00000000
[01:08:17.504]    __FlashLen=0x00000000
[01:08:17.504]    __FlashArg=0x00000000
[01:08:17.504]    __FlashOp=0x00000000
[01:08:17.504]    __Result=0x00000000
[01:08:17.504]  </debugvars>
[01:08:17.504]  
[01:08:17.504]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:08:17.504]    <block atomic="false" info="">
[01:08:17.505]      __var SW_DP_ABORT       = 0x0;
[01:08:17.505]        // -> [SW_DP_ABORT <= 0x00000000]
[01:08:17.505]      __var DP_CTRL_STAT      = 0x4;
[01:08:17.505]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:08:17.505]      __var DP_SELECT         = 0x8;
[01:08:17.505]        // -> [DP_SELECT <= 0x00000008]
[01:08:17.505]      __var powered_down      = 0;
[01:08:17.505]        // -> [powered_down <= 0x00000000]
[01:08:17.505]      WriteDP(DP_SELECT, 0x00000000);
[01:08:17.507]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:08:17.508]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:08:17.511]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:08:17.511]        // -> [powered_down <= 0x00000001]
[01:08:17.511]    </block>
[01:08:17.511]    <control if="powered_down" while="" timeout="0" info="">
[01:08:17.511]      // if-block "powered_down"
[01:08:17.512]        // =>  TRUE
[01:08:17.512]      <block atomic="false" info="">
[01:08:17.512]        Message(0, "Debug/System power-up request sent");
[01:08:17.514]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:08:17.519]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:08:17.519]      </block>
[01:08:17.519]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:08:17.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:08:17.521]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:08:17.521]        // while-condition  =>  FALSE
[01:08:17.521]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:08:17.521]      </control>
[01:08:17.521]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:08:17.522]        // if-block "(__protocol & 0xFFFF) == 1"
[01:08:17.522]          // =>  FALSE
[01:08:17.522]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:08:17.522]      </control>
[01:08:17.522]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:08:17.522]        // if-block "(__protocol & 0xFFFF) == 2"
[01:08:17.522]          // =>  TRUE
[01:08:17.522]        <block atomic="false" info="">
[01:08:17.522]          Message(0, "executing SWD power up");
[01:08:17.524]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:08:17.526]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:08:17.526]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:08:17.529]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:08:17.529]        </block>
[01:08:17.529]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:08:17.529]      </control>
[01:08:17.529]      // end if-block "powered_down"
[01:08:17.529]    </control>
[01:08:17.530]    <block atomic="false" info="">
[01:08:17.530]      __var DEBUG_PORT_VAL    = 0;
[01:08:17.530]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:08:17.530]      __var ACCESS_POINT_VAL  = 0;
[01:08:17.530]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:08:17.530]      __ap = 1; 
[01:08:17.530]        // -> [__ap <= 0x00000001]
[01:08:17.530]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:08:17.539]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:08:17.539]      __ap = 4;
[01:08:17.539]        // -> [__ap <= 0x00000004]
[01:08:17.540]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:17.543]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:08:17.543]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:08:17.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:17.545]    </block>
[01:08:17.545]    <block atomic="false" info="">
[01:08:17.545]      __var nReset = 0x80;
[01:08:17.546]        // -> [nReset <= 0x00000080]
[01:08:17.546]      __var canReadPins = 0;
[01:08:17.546]        // -> [canReadPins <= 0x00000000]
[01:08:17.546]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:08:17.547]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:08:17.547]        // -> [canReadPins <= 0x00000001]
[01:08:17.547]    </block>
[01:08:17.548]    <control if="" while="1" timeout="200" info="">
[01:08:17.548]      // while "1"  (timeout="200")
[01:08:17.548]      // while-condition  =>  TRUE
[01:08:17.548]      // while "1"  (timeout="200")
[01:08:17.548]      // while-condition  =>  TRUE
[01:08:17.548]      // while "1"  (timeout="200")
[01:08:17.548]      // while-condition  =>  TRUE
[01:08:17.549]      // while "1"  (timeout="200")
[01:08:17.549]      // while-condition  =>  TRUE
[01:08:17.549]      // while "1"  (timeout="200")
[01:08:17.549]      // while-condition  =>  TRUE
[01:08:17.549]      // while "1"  (timeout="200")
[01:08:17.549]      // while-condition  =>  TRUE
[01:08:17.549]      // while "1"  (timeout="200")
[01:08:17.549]      // while-condition  =>  TRUE
[01:08:17.549]      // while "1"  (timeout="200")
[01:08:17.549]      // while-condition  =>  TRUE
[01:08:17.550]      // while "1"  (timeout="200")
[01:08:17.551]      // while-condition  =>  TRUE
[01:08:17.551]      // while "1"  (timeout="200")
[01:08:17.551]      // while-condition  =>  TRUE
[01:08:17.551]      // while "1"  (timeout="200")
[01:08:17.551]      // while-condition  =>  TRUE
[01:08:17.551]      // while "1"  (timeout="200")
[01:08:17.551]      // while-condition  =>  TRUE
[01:08:17.551]      // while "1"  (timeout="200")
[01:08:17.551]      // while-condition  =>  TRUE
[01:08:17.551]      // while "1"  (timeout="200")
[01:08:17.551]      // while-condition  =>  TRUE
[01:08:17.551]      // while "1"  (timeout="200")
[01:08:17.552]      // while-condition  =>  TRUE
[01:08:17.552]      // while "1"  (timeout="200")
[01:08:17.552]      // while-condition  =>  TRUE
[01:08:17.552]      // while "1"  (timeout="200")
[01:08:17.552]      // while-condition  =>  TRUE
[01:08:17.552]      // while "1"  (timeout="200")
[01:08:17.552]      // while-condition  =>  TRUE
[01:08:17.552]      // while "1"  (timeout="200")
[01:08:17.552]      // while-condition  =>  TRUE
[01:08:17.553]      // while "1"  (timeout="200")
[01:08:17.553]      // while-condition  =>  TRUE
[01:08:17.553]      // while "1"  (timeout="200")
[01:08:17.553]      // while-condition  =>  TRUE
[01:08:17.553]      // while "1"  (timeout="200")
[01:08:17.553]      // while-condition  =>  TRUE
[01:08:17.553]      // while "1"  (timeout="200")
[01:08:17.553]      // while-condition  =>  TRUE
[01:08:17.553]      // while "1"  (timeout="200")
[01:08:17.553]      // while-condition  =>  TRUE
[01:08:17.553]      // while "1"  (timeout="200")
[01:08:17.554]      // while-condition  =>  TRUE
[01:08:17.554]      // while "1"  (timeout="200")
[01:08:17.554]      // while-condition  =>  TRUE
[01:08:17.554]      // while "1"  (timeout="200")
[01:08:17.554]      // while-condition  =>  TRUE
[01:08:17.554]      // while "1"  (timeout="200")
[01:08:17.554]      // while-condition  =>  TRUE
[01:08:17.554]      // while "1"  (timeout="200")
[01:08:17.555]      // while-condition  =>  TRUE
[01:08:17.555]      // while "1"  (timeout="200")
[01:08:17.555]      // while-condition  =>  TRUE
[01:08:17.555]      // while "1"  (timeout="200")
[01:08:17.555]      // while-condition  =>  TRUE
[01:08:17.555]      // while "1"  (timeout="200")
[01:08:17.555]      // while-condition  =>  TRUE
[01:08:17.555]      // while "1"  (timeout="200")
[01:08:17.555]      // while-condition  =>  TRUE
[01:08:17.555]      // while "1"  (timeout="200")
[01:08:17.556]      // while-condition  =>  TRUE
[01:08:17.556]      // while "1"  (timeout="200")
[01:08:17.556]      // while-condition  =>  TRUE
[01:08:17.556]      // while "1"  (timeout="200")
[01:08:17.556]      // while-condition  =>  TRUE
[01:08:17.556]      // while "1"  (timeout="200")
[01:08:17.556]      // while-condition  =>  TRUE
[01:08:17.556]      // while "1"  (timeout="200")
[01:08:17.556]      // while-condition  =>  TRUE
[01:08:17.556]      // while "1"  (timeout="200")
[01:08:17.557]      // while-condition  =>  TRUE
[01:08:17.557]      // while "1"  (timeout="200")
[01:08:17.557]      // while-condition  =>  TRUE
[01:08:17.557]      // while "1"  (timeout="200")
[01:08:17.557]      // while-condition  =>  TRUE
[01:08:17.557]      // while "1"  (timeout="200")
[01:08:17.557]      // while-condition  =>  TRUE
[01:08:17.557]      // while "1"  (timeout="200")
[01:08:17.557]      // while-condition  =>  TRUE
[01:08:17.557]      // while "1"  (timeout="200")
[01:08:17.558]      // while-condition  =>  TRUE
[01:08:17.558]      // while "1"  (timeout="200")
[01:08:17.558]      // while-condition  =>  TRUE
[01:08:17.558]      // while "1"  (timeout="200")
[01:08:17.558]      // while-condition  =>  TRUE
[01:08:17.558]      // while "1"  (timeout="200")
[01:08:17.558]      // while-condition  =>  TRUE
[01:08:17.558]      // while "1"  (timeout="200")
[01:08:17.558]      // while-condition  =>  TRUE
[01:08:17.558]      // while "1"  (timeout="200")
[01:08:17.559]      // while-condition  =>  TRUE
[01:08:17.559]      // while "1"  (timeout="200")
[01:08:17.559]      // while-condition  =>  TRUE
[01:08:17.559]      // while "1"  (timeout="200")
[01:08:17.559]      // while-condition  =>  TRUE
[01:08:17.560]      // while "1"  (timeout="200")
[01:08:17.560]      // while-condition  =>  TRUE
[01:08:17.560]      // while "1"  (timeout="200")
[01:08:17.560]      // while-condition  =>  TRUE
[01:08:17.560]      // while "1"  (timeout="200")
[01:08:17.560]      // while-condition  =>  TRUE
[01:08:17.560]      // while "1"  (timeout="200")
[01:08:17.560]      // while-condition  =>  TRUE
[01:08:17.560]      // while "1"  (timeout="200")
[01:08:17.561]      // while-condition  =>  TRUE
[01:08:17.561]      // while "1"  (timeout="200")
[01:08:17.561]      // while-condition  =>  TRUE
[01:08:17.561]      // while "1"  (timeout="200")
[01:08:17.561]      // while-condition  =>  TRUE
[01:08:17.561]      // while "1"  (timeout="200")
[01:08:17.561]      // while-condition  =>  TRUE
[01:08:17.561]      // while "1"  (timeout="200")
[01:08:17.561]      // while-condition  =>  TRUE
[01:08:17.561]      // while "1"  (timeout="200")
[01:08:17.561]      // while-condition  =>  TRUE
[01:08:17.562]      // while "1"  (timeout="200")
[01:08:17.562]      // while-condition  =>  TRUE
[01:08:17.562]      // while "1"  (timeout="200")
[01:08:17.562]      // while-condition  =>  TRUE
[01:08:17.562]      // while "1"  (timeout="200")
[01:08:17.562]      // while-condition  =>  TRUE
[01:08:17.562]      // while "1"  (timeout="200")
[01:08:17.562]      // while-condition  =>  TRUE
[01:08:17.562]      // while "1"  (timeout="200")
[01:08:17.564]      // while-condition  =>  TRUE
[01:08:17.564]      // while "1"  (timeout="200")
[01:08:17.564]      // while  =>  TIMEOUT
[01:08:17.564]      // end while "1"
[01:08:17.564]    </control>
[01:08:17.564]    <control if="canReadPins" while="" timeout="0" info="">
[01:08:17.564]      // if-block "canReadPins"
[01:08:17.564]        // =>  TRUE
[01:08:17.564]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:08:17.565]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:08:17.566]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:08:17.566]        // while-condition  =>  FALSE
[01:08:17.566]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:08:17.566]      </control>
[01:08:17.566]      // end if-block "canReadPins"
[01:08:17.566]    </control>
[01:08:17.566]    <control if="!canReadPins" while="" timeout="0" info="">
[01:08:17.566]      // if-block "!canReadPins"
[01:08:17.566]        // =>  FALSE
[01:08:17.566]      // skip if-block "!canReadPins"
[01:08:17.566]    </control>
[01:08:17.566]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:08:17.567]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:17.567]        // =>  TRUE
[01:08:17.567]      <block atomic="false" info="">
[01:08:17.567]        WriteAP(0x00, 0x190008);
[01:08:17.570]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:17.570]        WriteAP(0xF0, 0x01);
[01:08:17.574]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:17.575]      </block>
[01:08:17.575]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:17.575]    </control>
[01:08:17.575]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:08:17.575]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:17.575]        // =>  FALSE
[01:08:17.575]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:17.576]    </control>
[01:08:17.576]    <block atomic="false" info="">
[01:08:17.576]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:17.585]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:08:17.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:08:17.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:17.589]      __ap = 0; //lets make sure we reset the access point selection
[01:08:17.589]        // -> [__ap <= 0x00000000]
[01:08:17.589]    </block>
[01:08:17.590]  </sequence>
[01:08:17.590]  
[01:08:17.617]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:08:17.617]  
[01:08:17.617]  <debugvars>
[01:08:17.617]    // Pre-defined
[01:08:17.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:17.618]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:08:17.618]    __dp=0x00000000
[01:08:17.618]    __ap=0x00000000
[01:08:17.618]    __traceout=0x00000000      (Trace Disabled)
[01:08:17.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:17.618]    __FlashAddr=0x00000000
[01:08:17.618]    __FlashLen=0x00000000
[01:08:17.618]    __FlashArg=0x00000000
[01:08:17.618]    __FlashOp=0x00000000
[01:08:17.619]    __Result=0x00000000
[01:08:17.619]  </debugvars>
[01:08:17.619]  
[01:08:17.619]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:08:17.619]    <block atomic="false" info="">
[01:08:17.620]      __var deviceID = 0;
[01:08:17.620]        // -> [deviceID <= 0x00000000]
[01:08:17.620]      __var version = 0;
[01:08:17.620]        // -> [version <= 0x00000000]
[01:08:17.620]      __var partNum = 0;
[01:08:17.620]        // -> [partNum <= 0x00000000]
[01:08:17.620]      __var manuf = 0;
[01:08:17.620]        // -> [manuf <= 0x00000000]
[01:08:17.620]      __var isMSPM0G1X0X_G3X0X = 0;
[01:08:17.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:08:17.620]      __var isProduction = 0;
[01:08:17.621]        // -> [isProduction <= 0x00000000]
[01:08:17.621]      __var continueId = 0;
[01:08:17.621]        // -> [continueId <= 0x00000000]
[01:08:17.621]      deviceID =   Read32(0x41C40004);
[01:08:17.632]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:08:17.632]        // -> [deviceID <= 0x2BB8802F]
[01:08:17.632]      version = deviceID >> 28;
[01:08:17.632]        // -> [version <= 0x00000002]
[01:08:17.632]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:08:17.632]        // -> [partNum <= 0x0000BB88]
[01:08:17.632]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:08:17.632]        // -> [manuf <= 0x00000017]
[01:08:17.632]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:08:17.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:08:17.632]      isProduction = (version > 0);
[01:08:17.633]        // -> [isProduction <= 0x00000001]
[01:08:17.633]    </block>
[01:08:17.633]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:08:17.633]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:08:17.633]        // =>  FALSE
[01:08:17.633]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:08:17.633]    </control>
[01:08:17.633]    <control if="continueId == 4" while="" timeout="0" info="">
[01:08:17.634]      // if-block "continueId == 4"
[01:08:17.634]        // =>  FALSE
[01:08:17.634]      // skip if-block "continueId == 4"
[01:08:17.634]    </control>
[01:08:17.634]    <control if="!isProduction" while="" timeout="0" info="">
[01:08:17.634]      // if-block "!isProduction"
[01:08:17.634]        // =>  FALSE
[01:08:17.634]      // skip if-block "!isProduction"
[01:08:17.634]    </control>
[01:08:17.635]  </sequence>
[01:08:17.635]  
[01:08:25.232]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:08:25.232]  
[01:08:25.242]  <debugvars>
[01:08:25.242]    // Pre-defined
[01:08:25.242]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:25.242]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:08:25.242]    __dp=0x00000000
[01:08:25.242]    __ap=0x00000000
[01:08:25.242]    __traceout=0x00000000      (Trace Disabled)
[01:08:25.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:25.242]    __FlashAddr=0x00000000
[01:08:25.242]    __FlashLen=0x00000000
[01:08:25.243]    __FlashArg=0x00000000
[01:08:25.243]    __FlashOp=0x00000000
[01:08:25.243]    __Result=0x00000000
[01:08:25.243]  </debugvars>
[01:08:25.243]  
[01:08:25.243]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:08:25.243]    <block atomic="false" info="">
[01:08:25.243]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:08:25.244]        // -> [isSWJ <= 0x00000001]
[01:08:25.244]      __var hasDormant = __protocol & 0x00020000;
[01:08:25.244]        // -> [hasDormant <= 0x00000000]
[01:08:25.244]      __var protType   = __protocol & 0x0000FFFF;
[01:08:25.244]        // -> [protType <= 0x00000002]
[01:08:25.244]    </block>
[01:08:25.244]    <control if="protType == 1" while="" timeout="0" info="">
[01:08:25.244]      // if-block "protType == 1"
[01:08:25.244]        // =>  FALSE
[01:08:25.245]      // skip if-block "protType == 1"
[01:08:25.245]    </control>
[01:08:25.245]    <control if="protType == 2" while="" timeout="0" info="">
[01:08:25.245]      // if-block "protType == 2"
[01:08:25.245]        // =>  TRUE
[01:08:25.245]      <control if="isSWJ" while="" timeout="0" info="">
[01:08:25.245]        // if-block "isSWJ"
[01:08:25.245]          // =>  TRUE
[01:08:25.246]        <control if="hasDormant" while="" timeout="0" info="">
[01:08:25.246]          // if-block "hasDormant"
[01:08:25.246]            // =>  FALSE
[01:08:25.246]          // skip if-block "hasDormant"
[01:08:25.246]        </control>
[01:08:25.246]        <control if="!hasDormant" while="" timeout="0" info="">
[01:08:25.246]          // if-block "!hasDormant"
[01:08:25.246]            // =>  TRUE
[01:08:25.246]          <block atomic="false" info="">
[01:08:25.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:08:25.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:25.248]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:08:25.250]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:08:25.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:08:25.252]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:25.252]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:08:25.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:08:25.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:08:25.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:08:25.256]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:08:25.257]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:08:25.257]          </block>
[01:08:25.257]          // end if-block "!hasDormant"
[01:08:25.257]        </control>
[01:08:25.257]        // end if-block "isSWJ"
[01:08:25.258]      </control>
[01:08:25.258]      <control if="!isSWJ" while="" timeout="0" info="">
[01:08:25.258]        // if-block "!isSWJ"
[01:08:25.258]          // =>  FALSE
[01:08:25.258]        // skip if-block "!isSWJ"
[01:08:25.258]      </control>
[01:08:25.258]      <block atomic="false" info="">
[01:08:25.258]        ReadDP(0x0);
[01:08:25.266]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:08:25.266]      </block>
[01:08:25.266]      // end if-block "protType == 2"
[01:08:25.266]    </control>
[01:08:25.266]  </sequence>
[01:08:25.267]  
[01:08:25.272]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:08:25.272]  
[01:08:25.272]  <debugvars>
[01:08:25.272]    // Pre-defined
[01:08:25.273]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:25.273]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:08:25.273]    __dp=0x00000000
[01:08:25.273]    __ap=0x00000000
[01:08:25.273]    __traceout=0x00000000      (Trace Disabled)
[01:08:25.273]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:25.273]    __FlashAddr=0x00000000
[01:08:25.273]    __FlashLen=0x00000000
[01:08:25.273]    __FlashArg=0x00000000
[01:08:25.273]    __FlashOp=0x00000000
[01:08:25.273]    __Result=0x00000000
[01:08:25.274]  </debugvars>
[01:08:25.274]  
[01:08:25.274]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:08:25.274]    <block atomic="false" info="">
[01:08:25.274]      __var SW_DP_ABORT       = 0x0;
[01:08:25.274]        // -> [SW_DP_ABORT <= 0x00000000]
[01:08:25.274]      __var DP_CTRL_STAT      = 0x4;
[01:08:25.274]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:08:25.274]      __var DP_SELECT         = 0x8;
[01:08:25.275]        // -> [DP_SELECT <= 0x00000008]
[01:08:25.275]      __var powered_down      = 0;
[01:08:25.275]        // -> [powered_down <= 0x00000000]
[01:08:25.275]      WriteDP(DP_SELECT, 0x00000000);
[01:08:25.278]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:08:25.278]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:08:25.279]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:08:25.279]        // -> [powered_down <= 0x00000001]
[01:08:25.280]    </block>
[01:08:25.280]    <control if="powered_down" while="" timeout="0" info="">
[01:08:25.280]      // if-block "powered_down"
[01:08:25.280]        // =>  TRUE
[01:08:25.280]      <block atomic="false" info="">
[01:08:25.280]        Message(0, "Debug/System power-up request sent");
[01:08:25.282]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:08:25.285]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:08:25.285]      </block>
[01:08:25.285]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:08:25.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:08:25.286]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:08:25.286]        // while-condition  =>  FALSE
[01:08:25.286]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:08:25.286]      </control>
[01:08:25.287]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:08:25.287]        // if-block "(__protocol & 0xFFFF) == 1"
[01:08:25.287]          // =>  FALSE
[01:08:25.287]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:08:25.287]      </control>
[01:08:25.287]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:08:25.287]        // if-block "(__protocol & 0xFFFF) == 2"
[01:08:25.287]          // =>  TRUE
[01:08:25.287]        <block atomic="false" info="">
[01:08:25.287]          Message(0, "executing SWD power up");
[01:08:25.289]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:08:25.291]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:08:25.291]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:08:25.296]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:08:25.296]        </block>
[01:08:25.296]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:08:25.297]      </control>
[01:08:25.297]      // end if-block "powered_down"
[01:08:25.297]    </control>
[01:08:25.297]    <block atomic="false" info="">
[01:08:25.297]      __var DEBUG_PORT_VAL    = 0;
[01:08:25.298]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:08:25.298]      __var ACCESS_POINT_VAL  = 0;
[01:08:25.298]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:08:25.298]      __ap = 1; 
[01:08:25.298]        // -> [__ap <= 0x00000001]
[01:08:25.298]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:08:25.303]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:08:25.303]      __ap = 4;
[01:08:25.303]        // -> [__ap <= 0x00000004]
[01:08:25.304]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:25.308]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:08:25.308]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:08:25.308]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:25.310]    </block>
[01:08:25.310]    <block atomic="false" info="">
[01:08:25.311]      __var nReset = 0x80;
[01:08:25.311]        // -> [nReset <= 0x00000080]
[01:08:25.311]      __var canReadPins = 0;
[01:08:25.311]        // -> [canReadPins <= 0x00000000]
[01:08:25.311]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:08:25.312]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:08:25.312]        // -> [canReadPins <= 0x00000001]
[01:08:25.312]    </block>
[01:08:25.312]    <control if="" while="1" timeout="200" info="">
[01:08:25.312]      // while "1"  (timeout="200")
[01:08:25.313]      // while-condition  =>  TRUE
[01:08:25.313]      // while "1"  (timeout="200")
[01:08:25.313]      // while  =>  TIMEOUT
[01:08:25.313]      // end while "1"
[01:08:25.313]    </control>
[01:08:25.313]    <control if="canReadPins" while="" timeout="0" info="">
[01:08:25.313]      // if-block "canReadPins"
[01:08:25.313]        // =>  TRUE
[01:08:25.313]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:08:25.313]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:08:25.315]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:08:25.315]        // while-condition  =>  FALSE
[01:08:25.315]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:08:25.315]      </control>
[01:08:25.315]      // end if-block "canReadPins"
[01:08:25.315]    </control>
[01:08:25.315]    <control if="!canReadPins" while="" timeout="0" info="">
[01:08:25.315]      // if-block "!canReadPins"
[01:08:25.315]        // =>  FALSE
[01:08:25.315]      // skip if-block "!canReadPins"
[01:08:25.315]    </control>
[01:08:25.315]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:08:25.315]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:25.317]        // =>  TRUE
[01:08:25.317]      <block atomic="false" info="">
[01:08:25.317]        WriteAP(0x00, 0x190008);
[01:08:25.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:25.320]        WriteAP(0xF0, 0x01);
[01:08:25.326]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:08:25.326]      </block>
[01:08:25.327]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:08:25.327]    </control>
[01:08:25.327]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:08:25.327]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:25.327]        // =>  FALSE
[01:08:25.327]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:08:25.327]    </control>
[01:08:25.327]    <block atomic="false" info="">
[01:08:25.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:08:25.330]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:08:25.331]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:08:25.331]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:08:25.333]      __ap = 0; //lets make sure we reset the access point selection
[01:08:25.333]        // -> [__ap <= 0x00000000]
[01:08:25.333]    </block>
[01:08:25.333]  </sequence>
[01:08:25.333]  
[01:08:25.352]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:08:25.352]  
[01:08:25.352]  <debugvars>
[01:08:25.352]    // Pre-defined
[01:08:25.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:08:25.352]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:08:25.353]    __dp=0x00000000
[01:08:25.353]    __ap=0x00000000
[01:08:25.353]    __traceout=0x00000000      (Trace Disabled)
[01:08:25.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:08:25.353]    __FlashAddr=0x00000000
[01:08:25.353]    __FlashLen=0x00000000
[01:08:25.353]    __FlashArg=0x00000000
[01:08:25.353]    __FlashOp=0x00000000
[01:08:25.353]    __Result=0x00000000
[01:08:25.353]  </debugvars>
[01:08:25.354]  
[01:08:25.354]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:08:25.354]    <block atomic="false" info="">
[01:08:25.354]      __var deviceID = 0;
[01:08:25.354]        // -> [deviceID <= 0x00000000]
[01:08:25.354]      __var version = 0;
[01:08:25.354]        // -> [version <= 0x00000000]
[01:08:25.354]      __var partNum = 0;
[01:08:25.355]        // -> [partNum <= 0x00000000]
[01:08:25.355]      __var manuf = 0;
[01:08:25.355]        // -> [manuf <= 0x00000000]
[01:08:25.355]      __var isMSPM0G1X0X_G3X0X = 0;
[01:08:25.355]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:08:25.355]      __var isProduction = 0;
[01:08:25.355]        // -> [isProduction <= 0x00000000]
[01:08:25.356]      __var continueId = 0;
[01:08:25.356]        // -> [continueId <= 0x00000000]
[01:08:25.356]      deviceID =   Read32(0x41C40004);
[01:08:25.369]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:08:25.369]        // -> [deviceID <= 0x2BB8802F]
[01:08:25.369]      version = deviceID >> 28;
[01:08:25.369]        // -> [version <= 0x00000002]
[01:08:25.370]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:08:25.370]        // -> [partNum <= 0x0000BB88]
[01:08:25.370]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:08:25.370]        // -> [manuf <= 0x00000017]
[01:08:25.370]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:08:25.370]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:08:25.372]      isProduction = (version > 0);
[01:08:25.372]        // -> [isProduction <= 0x00000001]
[01:08:25.372]    </block>
[01:08:25.372]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:08:25.372]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:08:25.372]        // =>  FALSE
[01:08:25.373]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:08:25.373]    </control>
[01:08:25.373]    <control if="continueId == 4" while="" timeout="0" info="">
[01:08:25.373]      // if-block "continueId == 4"
[01:08:25.373]        // =>  FALSE
[01:08:25.373]      // skip if-block "continueId == 4"
[01:08:25.373]    </control>
[01:08:25.373]    <control if="!isProduction" while="" timeout="0" info="">
[01:08:25.373]      // if-block "!isProduction"
[01:08:25.373]        // =>  FALSE
[01:08:25.373]      // skip if-block "!isProduction"
[01:08:25.373]    </control>
[01:08:25.374]  </sequence>
[01:08:25.374]  
[01:10:16.249]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:10:16.249]  
[01:10:16.258]  <debugvars>
[01:10:16.258]    // Pre-defined
[01:10:16.258]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:16.258]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:10:16.258]    __dp=0x00000000
[01:10:16.258]    __ap=0x00000000
[01:10:16.258]    __traceout=0x00000000      (Trace Disabled)
[01:10:16.258]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:16.259]    __FlashAddr=0x00000000
[01:10:16.259]    __FlashLen=0x00000000
[01:10:16.259]    __FlashArg=0x00000000
[01:10:16.259]    __FlashOp=0x00000000
[01:10:16.259]    __Result=0x00000000
[01:10:16.259]  </debugvars>
[01:10:16.259]  
[01:10:16.259]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:10:16.259]    <block atomic="false" info="">
[01:10:16.259]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:10:16.259]        // -> [isSWJ <= 0x00000001]
[01:10:16.259]      __var hasDormant = __protocol & 0x00020000;
[01:10:16.260]        // -> [hasDormant <= 0x00000000]
[01:10:16.260]      __var protType   = __protocol & 0x0000FFFF;
[01:10:16.260]        // -> [protType <= 0x00000002]
[01:10:16.260]    </block>
[01:10:16.260]    <control if="protType == 1" while="" timeout="0" info="">
[01:10:16.260]      // if-block "protType == 1"
[01:10:16.260]        // =>  FALSE
[01:10:16.261]      // skip if-block "protType == 1"
[01:10:16.261]    </control>
[01:10:16.261]    <control if="protType == 2" while="" timeout="0" info="">
[01:10:16.261]      // if-block "protType == 2"
[01:10:16.261]        // =>  TRUE
[01:10:16.261]      <control if="isSWJ" while="" timeout="0" info="">
[01:10:16.261]        // if-block "isSWJ"
[01:10:16.261]          // =>  TRUE
[01:10:16.261]        <control if="hasDormant" while="" timeout="0" info="">
[01:10:16.262]          // if-block "hasDormant"
[01:10:16.262]            // =>  FALSE
[01:10:16.262]          // skip if-block "hasDormant"
[01:10:16.262]        </control>
[01:10:16.262]        <control if="!hasDormant" while="" timeout="0" info="">
[01:10:16.262]          // if-block "!hasDormant"
[01:10:16.262]            // =>  TRUE
[01:10:16.262]          <block atomic="false" info="">
[01:10:16.262]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:10:16.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:16.268]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:10:16.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:10:16.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:10:16.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:16.271]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:10:16.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:10:16.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:10:16.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:16.274]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:10:16.275]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:10:16.275]          </block>
[01:10:16.276]          // end if-block "!hasDormant"
[01:10:16.276]        </control>
[01:10:16.276]        // end if-block "isSWJ"
[01:10:16.276]      </control>
[01:10:16.276]      <control if="!isSWJ" while="" timeout="0" info="">
[01:10:16.276]        // if-block "!isSWJ"
[01:10:16.276]          // =>  FALSE
[01:10:16.276]        // skip if-block "!isSWJ"
[01:10:16.276]      </control>
[01:10:16.276]      <block atomic="false" info="">
[01:10:16.276]        ReadDP(0x0);
[01:10:16.280]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:10:16.281]      </block>
[01:10:16.281]      // end if-block "protType == 2"
[01:10:16.281]    </control>
[01:10:16.281]  </sequence>
[01:10:16.281]  
[01:10:16.283]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:10:16.283]  
[01:10:16.283]  <debugvars>
[01:10:16.283]    // Pre-defined
[01:10:16.284]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:16.284]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:10:16.284]    __dp=0x00000000
[01:10:16.284]    __ap=0x00000000
[01:10:16.284]    __traceout=0x00000000      (Trace Disabled)
[01:10:16.284]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:16.285]    __FlashAddr=0x00000000
[01:10:16.285]    __FlashLen=0x00000000
[01:10:16.285]    __FlashArg=0x00000000
[01:10:16.285]    __FlashOp=0x00000000
[01:10:16.285]    __Result=0x00000000
[01:10:16.285]  </debugvars>
[01:10:16.285]  
[01:10:16.285]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:10:16.285]    <block atomic="false" info="">
[01:10:16.285]      __var SW_DP_ABORT       = 0x0;
[01:10:16.286]        // -> [SW_DP_ABORT <= 0x00000000]
[01:10:16.286]      __var DP_CTRL_STAT      = 0x4;
[01:10:16.286]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:10:16.286]      __var DP_SELECT         = 0x8;
[01:10:16.286]        // -> [DP_SELECT <= 0x00000008]
[01:10:16.287]      __var powered_down      = 0;
[01:10:16.287]        // -> [powered_down <= 0x00000000]
[01:10:16.287]      WriteDP(DP_SELECT, 0x00000000);
[01:10:16.289]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:10:16.289]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:10:16.291]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:10:16.291]        // -> [powered_down <= 0x00000001]
[01:10:16.291]    </block>
[01:10:16.291]    <control if="powered_down" while="" timeout="0" info="">
[01:10:16.292]      // if-block "powered_down"
[01:10:16.292]        // =>  TRUE
[01:10:16.292]      <block atomic="false" info="">
[01:10:16.292]        Message(0, "Debug/System power-up request sent");
[01:10:16.294]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:10:16.296]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:10:16.296]      </block>
[01:10:16.297]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:10:16.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:10:16.298]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:10:16.298]        // while-condition  =>  FALSE
[01:10:16.298]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:10:16.298]      </control>
[01:10:16.299]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:10:16.299]        // if-block "(__protocol & 0xFFFF) == 1"
[01:10:16.299]          // =>  FALSE
[01:10:16.299]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:10:16.299]      </control>
[01:10:16.299]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:10:16.299]        // if-block "(__protocol & 0xFFFF) == 2"
[01:10:16.299]          // =>  TRUE
[01:10:16.299]        <block atomic="false" info="">
[01:10:16.299]          Message(0, "executing SWD power up");
[01:10:16.303]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:10:16.306]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:10:16.306]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:10:16.307]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:10:16.307]        </block>
[01:10:16.308]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:10:16.308]      </control>
[01:10:16.308]      // end if-block "powered_down"
[01:10:16.308]    </control>
[01:10:16.308]    <block atomic="false" info="">
[01:10:16.308]      __var DEBUG_PORT_VAL    = 0;
[01:10:16.308]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:10:16.308]      __var ACCESS_POINT_VAL  = 0;
[01:10:16.308]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:10:16.308]      __ap = 1; 
[01:10:16.309]        // -> [__ap <= 0x00000001]
[01:10:16.309]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:10:16.312]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:10:16.313]      __ap = 4;
[01:10:16.313]        // -> [__ap <= 0x00000004]
[01:10:16.313]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:10:16.316]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:10:16.316]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:10:16.317]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:10:16.321]    </block>
[01:10:16.321]    <block atomic="false" info="">
[01:10:16.321]      __var nReset = 0x80;
[01:10:16.321]        // -> [nReset <= 0x00000080]
[01:10:16.321]      __var canReadPins = 0;
[01:10:16.321]        // -> [canReadPins <= 0x00000000]
[01:10:16.321]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:10:16.324]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:10:16.324]        // -> [canReadPins <= 0x00000001]
[01:10:16.324]    </block>
[01:10:16.324]    <control if="" while="1" timeout="200" info="">
[01:10:16.324]      // while "1"  (timeout="200")
[01:10:16.324]      // while-condition  =>  TRUE
[01:10:16.324]      // while "1"  (timeout="200")
[01:10:16.324]      // while-condition  =>  TRUE
[01:10:16.324]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.325]      // while "1"  (timeout="200")
[01:10:16.325]      // while-condition  =>  TRUE
[01:10:16.326]      // while "1"  (timeout="200")
[01:10:16.326]      // while-condition  =>  TRUE
[01:10:16.326]      // while "1"  (timeout="200")
[01:10:16.326]      // while-condition  =>  TRUE
[01:10:16.326]      // while "1"  (timeout="200")
[01:10:16.326]      // while-condition  =>  TRUE
[01:10:16.326]      // while "1"  (timeout="200")
[01:10:16.326]      // while-condition  =>  TRUE
[01:10:16.326]      // while "1"  (timeout="200")
[01:10:16.326]      // while-condition  =>  TRUE
[01:10:16.326]      // while "1"  (timeout="200")
[01:10:16.326]      // while-condition  =>  TRUE
[01:10:16.327]      // while "1"  (timeout="200")
[01:10:16.327]      // while-condition  =>  TRUE
[01:10:16.327]      // while "1"  (timeout="200")
[01:10:16.327]      // while-condition  =>  TRUE
[01:10:16.327]      // while "1"  (timeout="200")
[01:10:16.327]      // while-condition  =>  TRUE
[01:10:16.327]      // while "1"  (timeout="200")
[01:10:16.327]      // while-condition  =>  TRUE
[01:10:16.327]      // while "1"  (timeout="200")
[01:10:16.327]      // while-condition  =>  TRUE
[01:10:16.327]      // while "1"  (timeout="200")
[01:10:16.327]      // while-condition  =>  TRUE
[01:10:16.328]      // while "1"  (timeout="200")
[01:10:16.328]      // while-condition  =>  TRUE
[01:10:16.328]      // while "1"  (timeout="200")
[01:10:16.328]      // while-condition  =>  TRUE
[01:10:16.328]      // while "1"  (timeout="200")
[01:10:16.328]      // while-condition  =>  TRUE
[01:10:16.328]      // while "1"  (timeout="200")
[01:10:16.328]      // while-condition  =>  TRUE
[01:10:16.328]      // while "1"  (timeout="200")
[01:10:16.328]      // while-condition  =>  TRUE
[01:10:16.328]      // while "1"  (timeout="200")
[01:10:16.329]      // while-condition  =>  TRUE
[01:10:16.329]      // while "1"  (timeout="200")
[01:10:16.329]      // while  =>  TIMEOUT
[01:10:16.329]      // end while "1"
[01:10:16.329]    </control>
[01:10:16.329]    <control if="canReadPins" while="" timeout="0" info="">
[01:10:16.329]      // if-block "canReadPins"
[01:10:16.329]        // =>  TRUE
[01:10:16.329]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:10:16.329]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:10:16.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:10:16.333]        // while-condition  =>  FALSE
[01:10:16.333]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:10:16.333]      </control>
[01:10:16.333]      // end if-block "canReadPins"
[01:10:16.333]    </control>
[01:10:16.333]    <control if="!canReadPins" while="" timeout="0" info="">
[01:10:16.333]      // if-block "!canReadPins"
[01:10:16.333]        // =>  FALSE
[01:10:16.333]      // skip if-block "!canReadPins"
[01:10:16.333]    </control>
[01:10:16.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:10:16.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:10:16.334]        // =>  TRUE
[01:10:16.334]      <block atomic="false" info="">
[01:10:16.334]        WriteAP(0x00, 0x190008);
[01:10:16.336]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:10:16.336]        WriteAP(0xF0, 0x01);
[01:10:16.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:10:16.339]      </block>
[01:10:16.339]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:10:16.339]    </control>
[01:10:16.339]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:10:16.339]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:10:16.339]        // =>  FALSE
[01:10:16.339]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:10:16.339]    </control>
[01:10:16.339]    <block atomic="false" info="">
[01:10:16.341]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:10:16.344]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:10:16.344]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:10:16.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:10:16.346]      __ap = 0; //lets make sure we reset the access point selection
[01:10:16.346]        // -> [__ap <= 0x00000000]
[01:10:16.346]    </block>
[01:10:16.346]  </sequence>
[01:10:16.346]  
[01:10:16.373]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:10:16.373]  
[01:10:16.373]  <debugvars>
[01:10:16.373]    // Pre-defined
[01:10:16.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:16.373]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:10:16.373]    __dp=0x00000000
[01:10:16.373]    __ap=0x00000000
[01:10:16.373]    __traceout=0x00000000      (Trace Disabled)
[01:10:16.373]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:16.373]    __FlashAddr=0x00000000
[01:10:16.373]    __FlashLen=0x00000000
[01:10:16.373]    __FlashArg=0x00000000
[01:10:16.373]    __FlashOp=0x00000000
[01:10:16.373]    __Result=0x00000000
[01:10:16.373]  </debugvars>
[01:10:16.373]  
[01:10:16.375]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:10:16.375]    <block atomic="false" info="">
[01:10:16.375]      __var deviceID = 0;
[01:10:16.375]        // -> [deviceID <= 0x00000000]
[01:10:16.375]      __var version = 0;
[01:10:16.375]        // -> [version <= 0x00000000]
[01:10:16.375]      __var partNum = 0;
[01:10:16.375]        // -> [partNum <= 0x00000000]
[01:10:16.376]      __var manuf = 0;
[01:10:16.376]        // -> [manuf <= 0x00000000]
[01:10:16.376]      __var isMSPM0G1X0X_G3X0X = 0;
[01:10:16.376]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:10:16.376]      __var isProduction = 0;
[01:10:16.376]        // -> [isProduction <= 0x00000000]
[01:10:16.376]      __var continueId = 0;
[01:10:16.376]        // -> [continueId <= 0x00000000]
[01:10:16.376]      deviceID =   Read32(0x41C40004);
[01:10:16.380]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:10:16.381]        // -> [deviceID <= 0x2BB8802F]
[01:10:16.381]      version = deviceID >> 28;
[01:10:16.381]        // -> [version <= 0x00000002]
[01:10:16.381]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:10:16.381]        // -> [partNum <= 0x0000BB88]
[01:10:16.381]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:10:16.381]        // -> [manuf <= 0x00000017]
[01:10:16.381]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:10:16.382]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:10:16.382]      isProduction = (version > 0);
[01:10:16.382]        // -> [isProduction <= 0x00000001]
[01:10:16.382]    </block>
[01:10:16.382]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:10:16.382]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:10:16.383]        // =>  FALSE
[01:10:16.383]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:10:16.383]    </control>
[01:10:16.383]    <control if="continueId == 4" while="" timeout="0" info="">
[01:10:16.383]      // if-block "continueId == 4"
[01:10:16.383]        // =>  FALSE
[01:10:16.383]      // skip if-block "continueId == 4"
[01:10:16.383]    </control>
[01:10:16.383]    <control if="!isProduction" while="" timeout="0" info="">
[01:10:16.383]      // if-block "!isProduction"
[01:10:16.383]        // =>  FALSE
[01:10:16.384]      // skip if-block "!isProduction"
[01:10:16.384]    </control>
[01:10:16.384]  </sequence>
[01:10:16.384]  
[01:10:22.251]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:10:22.251]  
[01:10:22.259]  <debugvars>
[01:10:22.259]    // Pre-defined
[01:10:22.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:22.259]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:10:22.259]    __dp=0x00000000
[01:10:22.259]    __ap=0x00000000
[01:10:22.259]    __traceout=0x00000000      (Trace Disabled)
[01:10:22.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:22.260]    __FlashAddr=0x00000000
[01:10:22.260]    __FlashLen=0x00000000
[01:10:22.260]    __FlashArg=0x00000000
[01:10:22.260]    __FlashOp=0x00000000
[01:10:22.260]    __Result=0x00000000
[01:10:22.260]  </debugvars>
[01:10:22.260]  
[01:10:22.261]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:10:22.261]    <block atomic="false" info="">
[01:10:22.261]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:10:22.261]        // -> [isSWJ <= 0x00000001]
[01:10:22.261]      __var hasDormant = __protocol & 0x00020000;
[01:10:22.261]        // -> [hasDormant <= 0x00000000]
[01:10:22.261]      __var protType   = __protocol & 0x0000FFFF;
[01:10:22.261]        // -> [protType <= 0x00000002]
[01:10:22.261]    </block>
[01:10:22.261]    <control if="protType == 1" while="" timeout="0" info="">
[01:10:22.261]      // if-block "protType == 1"
[01:10:22.261]        // =>  FALSE
[01:10:22.262]      // skip if-block "protType == 1"
[01:10:22.262]    </control>
[01:10:22.262]    <control if="protType == 2" while="" timeout="0" info="">
[01:10:22.262]      // if-block "protType == 2"
[01:10:22.262]        // =>  TRUE
[01:10:22.262]      <control if="isSWJ" while="" timeout="0" info="">
[01:10:22.262]        // if-block "isSWJ"
[01:10:22.263]          // =>  TRUE
[01:10:22.263]        <control if="hasDormant" while="" timeout="0" info="">
[01:10:22.263]          // if-block "hasDormant"
[01:10:22.263]            // =>  FALSE
[01:10:22.263]          // skip if-block "hasDormant"
[01:10:22.263]        </control>
[01:10:22.263]        <control if="!hasDormant" while="" timeout="0" info="">
[01:10:22.263]          // if-block "!hasDormant"
[01:10:22.263]            // =>  TRUE
[01:10:22.264]          <block atomic="false" info="">
[01:10:22.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:10:22.267]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:22.267]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:10:22.268]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:10:22.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:10:22.270]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:22.270]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:10:22.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:10:22.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:10:22.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:10:22.273]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:10:22.274]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:10:22.275]          </block>
[01:10:22.275]          // end if-block "!hasDormant"
[01:10:22.275]        </control>
[01:10:22.275]        // end if-block "isSWJ"
[01:10:22.275]      </control>
[01:10:22.275]      <control if="!isSWJ" while="" timeout="0" info="">
[01:10:22.275]        // if-block "!isSWJ"
[01:10:22.275]          // =>  FALSE
[01:10:22.275]        // skip if-block "!isSWJ"
[01:10:22.276]      </control>
[01:10:22.276]      <block atomic="false" info="">
[01:10:22.276]        ReadDP(0x0);
[01:10:22.277]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:10:22.277]      </block>
[01:10:22.277]      // end if-block "protType == 2"
[01:10:22.277]    </control>
[01:10:22.277]  </sequence>
[01:10:22.278]  
[01:10:22.280]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:10:22.280]  
[01:10:22.280]  <debugvars>
[01:10:22.281]    // Pre-defined
[01:10:22.281]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:22.281]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:10:22.281]    __dp=0x00000000
[01:10:22.281]    __ap=0x00000000
[01:10:22.282]    __traceout=0x00000000      (Trace Disabled)
[01:10:22.282]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:22.282]    __FlashAddr=0x00000000
[01:10:22.282]    __FlashLen=0x00000000
[01:10:22.282]    __FlashArg=0x00000000
[01:10:22.282]    __FlashOp=0x00000000
[01:10:22.282]    __Result=0x00000000
[01:10:22.282]  </debugvars>
[01:10:22.282]  
[01:10:22.282]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:10:22.283]    <block atomic="false" info="">
[01:10:22.283]      __var SW_DP_ABORT       = 0x0;
[01:10:22.283]        // -> [SW_DP_ABORT <= 0x00000000]
[01:10:22.283]      __var DP_CTRL_STAT      = 0x4;
[01:10:22.283]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:10:22.283]      __var DP_SELECT         = 0x8;
[01:10:22.283]        // -> [DP_SELECT <= 0x00000008]
[01:10:22.283]      __var powered_down      = 0;
[01:10:22.284]        // -> [powered_down <= 0x00000000]
[01:10:22.284]      WriteDP(DP_SELECT, 0x00000000);
[01:10:22.285]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:10:22.285]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:10:22.287]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:10:22.287]        // -> [powered_down <= 0x00000001]
[01:10:22.287]    </block>
[01:10:22.287]    <control if="powered_down" while="" timeout="0" info="">
[01:10:22.287]      // if-block "powered_down"
[01:10:22.288]        // =>  TRUE
[01:10:22.288]      <block atomic="false" info="">
[01:10:22.288]        Message(0, "Debug/System power-up request sent");
[01:10:22.290]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:10:22.292]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:10:22.292]      </block>
[01:10:22.292]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:10:22.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:10:22.295]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:10:22.295]        // while-condition  =>  FALSE
[01:10:22.295]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:10:22.295]      </control>
[01:10:22.295]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:10:22.295]        // if-block "(__protocol & 0xFFFF) == 1"
[01:10:22.295]          // =>  FALSE
[01:10:22.295]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:10:22.295]      </control>
[01:10:22.296]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:10:22.296]        // if-block "(__protocol & 0xFFFF) == 2"
[01:10:22.296]          // =>  TRUE
[01:10:22.296]        <block atomic="false" info="">
[01:10:22.296]          Message(0, "executing SWD power up");
[01:10:22.298]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:10:22.302]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:10:22.302]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:10:22.309]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:10:22.310]        </block>
[01:10:22.310]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:10:22.310]      </control>
[01:10:22.310]      // end if-block "powered_down"
[01:10:22.310]    </control>
[01:10:22.310]    <block atomic="false" info="">
[01:10:22.310]      __var DEBUG_PORT_VAL    = 0;
[01:10:22.311]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:10:22.311]      __var ACCESS_POINT_VAL  = 0;
[01:10:22.311]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:10:22.311]      __ap = 1; 
[01:10:22.311]        // -> [__ap <= 0x00000001]
[01:10:22.311]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:10:22.314]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:10:22.314]      __ap = 4;
[01:10:22.314]        // -> [__ap <= 0x00000004]
[01:10:22.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:10:22.318]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:10:22.319]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:10:22.319]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:10:22.322]    </block>
[01:10:22.322]    <block atomic="false" info="">
[01:10:22.322]      __var nReset = 0x80;
[01:10:22.322]        // -> [nReset <= 0x00000080]
[01:10:22.322]      __var canReadPins = 0;
[01:10:22.322]        // -> [canReadPins <= 0x00000000]
[01:10:22.322]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:10:22.324]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:10:22.324]        // -> [canReadPins <= 0x00000001]
[01:10:22.324]    </block>
[01:10:22.325]    <control if="" while="1" timeout="200" info="">
[01:10:22.325]      // while "1"  (timeout="200")
[01:10:22.325]      // while-condition  =>  TRUE
[01:10:22.325]      // while "1"  (timeout="200")
[01:10:22.325]      // while-condition  =>  TRUE
[01:10:22.325]      // while "1"  (timeout="200")
[01:10:22.325]      // while-condition  =>  TRUE
[01:10:22.325]      // while "1"  (timeout="200")
[01:10:22.325]      // while-condition  =>  TRUE
[01:10:22.325]      // while "1"  (timeout="200")
[01:10:22.325]      // while-condition  =>  TRUE
[01:10:22.327]      // while "1"  (timeout="200")
[01:10:22.327]      // while-condition  =>  TRUE
[01:10:22.327]      // while "1"  (timeout="200")
[01:10:22.327]      // while-condition  =>  TRUE
[01:10:22.327]      // while "1"  (timeout="200")
[01:10:22.327]      // while-condition  =>  TRUE
[01:10:22.327]      // while "1"  (timeout="200")
[01:10:22.327]      // while-condition  =>  TRUE
[01:10:22.327]      // while "1"  (timeout="200")
[01:10:22.327]      // while-condition  =>  TRUE
[01:10:22.327]      // while "1"  (timeout="200")
[01:10:22.328]      // while-condition  =>  TRUE
[01:10:22.328]      // while "1"  (timeout="200")
[01:10:22.328]      // while-condition  =>  TRUE
[01:10:22.328]      // while "1"  (timeout="200")
[01:10:22.328]      // while-condition  =>  TRUE
[01:10:22.329]      // while "1"  (timeout="200")
[01:10:22.329]      // while-condition  =>  TRUE
[01:10:22.329]      // while "1"  (timeout="200")
[01:10:22.329]      // while-condition  =>  TRUE
[01:10:22.329]      // while "1"  (timeout="200")
[01:10:22.329]      // while-condition  =>  TRUE
[01:10:22.329]      // while "1"  (timeout="200")
[01:10:22.329]      // while-condition  =>  TRUE
[01:10:22.329]      // while "1"  (timeout="200")
[01:10:22.329]      // while-condition  =>  TRUE
[01:10:22.330]      // while "1"  (timeout="200")
[01:10:22.330]      // while  =>  TIMEOUT
[01:10:22.330]      // end while "1"
[01:10:22.330]    </control>
[01:10:22.330]    <control if="canReadPins" while="" timeout="0" info="">
[01:10:22.330]      // if-block "canReadPins"
[01:10:22.330]        // =>  TRUE
[01:10:22.330]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:10:22.330]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:10:22.335]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:10:22.335]        // while-condition  =>  FALSE
[01:10:22.335]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:10:22.335]      </control>
[01:10:22.335]      // end if-block "canReadPins"
[01:10:22.336]    </control>
[01:10:22.336]    <control if="!canReadPins" while="" timeout="0" info="">
[01:10:22.336]      // if-block "!canReadPins"
[01:10:22.336]        // =>  FALSE
[01:10:22.336]      // skip if-block "!canReadPins"
[01:10:22.336]    </control>
[01:10:22.336]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:10:22.336]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:10:22.336]        // =>  TRUE
[01:10:22.336]      <block atomic="false" info="">
[01:10:22.337]        WriteAP(0x00, 0x190008);
[01:10:22.339]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:10:22.339]        WriteAP(0xF0, 0x01);
[01:10:22.344]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:10:22.344]      </block>
[01:10:22.345]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:10:22.345]    </control>
[01:10:22.345]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:10:22.345]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:10:22.345]        // =>  FALSE
[01:10:22.346]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:10:22.346]    </control>
[01:10:22.346]    <block atomic="false" info="">
[01:10:22.346]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:10:22.354]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:10:22.354]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:10:22.354]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:10:22.356]      __ap = 0; //lets make sure we reset the access point selection
[01:10:22.356]        // -> [__ap <= 0x00000000]
[01:10:22.356]    </block>
[01:10:22.356]  </sequence>
[01:10:22.356]  
[01:10:22.378]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:10:22.378]  
[01:10:22.378]  <debugvars>
[01:10:22.378]    // Pre-defined
[01:10:22.378]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:10:22.378]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:10:22.378]    __dp=0x00000000
[01:10:22.378]    __ap=0x00000000
[01:10:22.379]    __traceout=0x00000000      (Trace Disabled)
[01:10:22.379]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:10:22.379]    __FlashAddr=0x00000000
[01:10:22.379]    __FlashLen=0x00000000
[01:10:22.379]    __FlashArg=0x00000000
[01:10:22.379]    __FlashOp=0x00000000
[01:10:22.379]    __Result=0x00000000
[01:10:22.379]  </debugvars>
[01:10:22.380]  
[01:10:22.380]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:10:22.380]    <block atomic="false" info="">
[01:10:22.380]      __var deviceID = 0;
[01:10:22.380]        // -> [deviceID <= 0x00000000]
[01:10:22.380]      __var version = 0;
[01:10:22.380]        // -> [version <= 0x00000000]
[01:10:22.380]      __var partNum = 0;
[01:10:22.380]        // -> [partNum <= 0x00000000]
[01:10:22.380]      __var manuf = 0;
[01:10:22.380]        // -> [manuf <= 0x00000000]
[01:10:22.380]      __var isMSPM0G1X0X_G3X0X = 0;
[01:10:22.380]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:10:22.380]      __var isProduction = 0;
[01:10:22.380]        // -> [isProduction <= 0x00000000]
[01:10:22.380]      __var continueId = 0;
[01:10:22.380]        // -> [continueId <= 0x00000000]
[01:10:22.382]      deviceID =   Read32(0x41C40004);
[01:10:22.387]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:10:22.387]        // -> [deviceID <= 0x2BB8802F]
[01:10:22.387]      version = deviceID >> 28;
[01:10:22.387]        // -> [version <= 0x00000002]
[01:10:22.387]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:10:22.387]        // -> [partNum <= 0x0000BB88]
[01:10:22.387]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:10:22.387]        // -> [manuf <= 0x00000017]
[01:10:22.387]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:10:22.387]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:10:22.388]      isProduction = (version > 0);
[01:10:22.388]        // -> [isProduction <= 0x00000001]
[01:10:22.388]    </block>
[01:10:22.388]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:10:22.388]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:10:22.388]        // =>  FALSE
[01:10:22.388]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:10:22.388]    </control>
[01:10:22.388]    <control if="continueId == 4" while="" timeout="0" info="">
[01:10:22.388]      // if-block "continueId == 4"
[01:10:22.388]        // =>  FALSE
[01:10:22.389]      // skip if-block "continueId == 4"
[01:10:22.389]    </control>
[01:10:22.389]    <control if="!isProduction" while="" timeout="0" info="">
[01:10:22.389]      // if-block "!isProduction"
[01:10:22.389]        // =>  FALSE
[01:10:22.389]      // skip if-block "!isProduction"
[01:10:22.389]    </control>
[01:10:22.389]  </sequence>
[01:10:22.389]  
[01:14:01.362]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:14:01.362]  
[01:14:01.362]  <debugvars>
[01:14:01.362]    // Pre-defined
[01:14:01.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:01.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:01.363]    __dp=0x00000000
[01:14:01.363]    __ap=0x00000000
[01:14:01.363]    __traceout=0x00000000      (Trace Disabled)
[01:14:01.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:01.363]    __FlashAddr=0x00000000
[01:14:01.363]    __FlashLen=0x00000000
[01:14:01.363]    __FlashArg=0x00000000
[01:14:01.364]    __FlashOp=0x00000000
[01:14:01.364]    __Result=0x00000000
[01:14:01.365]  </debugvars>
[01:14:01.365]  
[01:14:01.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:14:01.365]    <block atomic="false" info="">
[01:14:01.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:14:01.365]        // -> [isSWJ <= 0x00000001]
[01:14:01.365]      __var hasDormant = __protocol & 0x00020000;
[01:14:01.365]        // -> [hasDormant <= 0x00000000]
[01:14:01.365]      __var protType   = __protocol & 0x0000FFFF;
[01:14:01.365]        // -> [protType <= 0x00000002]
[01:14:01.365]    </block>
[01:14:01.365]    <control if="protType == 1" while="" timeout="0" info="">
[01:14:01.365]      // if-block "protType == 1"
[01:14:01.366]        // =>  FALSE
[01:14:01.366]      // skip if-block "protType == 1"
[01:14:01.366]    </control>
[01:14:01.366]    <control if="protType == 2" while="" timeout="0" info="">
[01:14:01.366]      // if-block "protType == 2"
[01:14:01.366]        // =>  TRUE
[01:14:01.366]      <control if="isSWJ" while="" timeout="0" info="">
[01:14:01.367]        // if-block "isSWJ"
[01:14:01.367]          // =>  TRUE
[01:14:01.367]        <control if="hasDormant" while="" timeout="0" info="">
[01:14:01.367]          // if-block "hasDormant"
[01:14:01.367]            // =>  FALSE
[01:14:01.367]          // skip if-block "hasDormant"
[01:14:01.368]        </control>
[01:14:01.368]        <control if="!hasDormant" while="" timeout="0" info="">
[01:14:01.368]          // if-block "!hasDormant"
[01:14:01.368]            // =>  TRUE
[01:14:01.368]          <block atomic="false" info="">
[01:14:01.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:14:01.370]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:01.370]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:14:01.376]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:14:01.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:14:01.378]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:01.378]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:14:01.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:14:01.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:14:01.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:01.385]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:14:01.386]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:14:01.386]          </block>
[01:14:01.386]          // end if-block "!hasDormant"
[01:14:01.388]        </control>
[01:14:01.388]        // end if-block "isSWJ"
[01:14:01.388]      </control>
[01:14:01.388]      <control if="!isSWJ" while="" timeout="0" info="">
[01:14:01.388]        // if-block "!isSWJ"
[01:14:01.388]          // =>  FALSE
[01:14:01.388]        // skip if-block "!isSWJ"
[01:14:01.388]      </control>
[01:14:01.389]      <block atomic="false" info="">
[01:14:01.389]        ReadDP(0x0);
[01:14:01.390]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:14:01.390]      </block>
[01:14:01.390]      // end if-block "protType == 2"
[01:14:01.391]    </control>
[01:14:01.391]  </sequence>
[01:14:01.391]  
[01:14:01.396]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:14:01.396]  
[01:14:01.398]  <debugvars>
[01:14:01.398]    // Pre-defined
[01:14:01.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:01.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:01.398]    __dp=0x00000000
[01:14:01.398]    __ap=0x00000000
[01:14:01.398]    __traceout=0x00000000      (Trace Disabled)
[01:14:01.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:01.398]    __FlashAddr=0x00000000
[01:14:01.398]    __FlashLen=0x00000000
[01:14:01.398]    __FlashArg=0x00000000
[01:14:01.399]    __FlashOp=0x00000000
[01:14:01.399]    __Result=0x00000000
[01:14:01.399]  </debugvars>
[01:14:01.399]  
[01:14:01.399]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:14:01.399]    <block atomic="false" info="">
[01:14:01.399]      __var SW_DP_ABORT       = 0x0;
[01:14:01.399]        // -> [SW_DP_ABORT <= 0x00000000]
[01:14:01.399]      __var DP_CTRL_STAT      = 0x4;
[01:14:01.399]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:14:01.399]      __var DP_SELECT         = 0x8;
[01:14:01.400]        // -> [DP_SELECT <= 0x00000008]
[01:14:01.400]      __var powered_down      = 0;
[01:14:01.400]        // -> [powered_down <= 0x00000000]
[01:14:01.400]      WriteDP(DP_SELECT, 0x00000000);
[01:14:01.404]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:14:01.404]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:14:01.408]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:14:01.409]        // -> [powered_down <= 0x00000001]
[01:14:01.409]    </block>
[01:14:01.409]    <control if="powered_down" while="" timeout="0" info="">
[01:14:01.409]      // if-block "powered_down"
[01:14:01.409]        // =>  TRUE
[01:14:01.409]      <block atomic="false" info="">
[01:14:01.409]        Message(0, "Debug/System power-up request sent");
[01:14:01.412]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:14:01.414]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:14:01.414]      </block>
[01:14:01.414]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:14:01.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:14:01.416]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:14:01.416]        // while-condition  =>  FALSE
[01:14:01.416]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:14:01.417]      </control>
[01:14:01.417]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:14:01.417]        // if-block "(__protocol & 0xFFFF) == 1"
[01:14:01.417]          // =>  FALSE
[01:14:01.417]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:14:01.417]      </control>
[01:14:01.417]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:14:01.417]        // if-block "(__protocol & 0xFFFF) == 2"
[01:14:01.417]          // =>  TRUE
[01:14:01.417]        <block atomic="false" info="">
[01:14:01.417]          Message(0, "executing SWD power up");
[01:14:01.419]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:14:01.421]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:14:01.421]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:14:01.423]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:14:01.423]        </block>
[01:14:01.423]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:14:01.423]      </control>
[01:14:01.423]      // end if-block "powered_down"
[01:14:01.423]    </control>
[01:14:01.423]    <block atomic="false" info="">
[01:14:01.423]      __var DEBUG_PORT_VAL    = 0;
[01:14:01.423]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:14:01.424]      __var ACCESS_POINT_VAL  = 0;
[01:14:01.424]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:14:01.424]      __ap = 1; 
[01:14:01.424]        // -> [__ap <= 0x00000001]
[01:14:01.424]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:14:01.429]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:14:01.429]      __ap = 4;
[01:14:01.429]        // -> [__ap <= 0x00000004]
[01:14:01.429]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:01.432]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:14:01.432]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:14:01.432]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:01.434]    </block>
[01:14:01.435]    <block atomic="false" info="">
[01:14:01.435]      __var nReset = 0x80;
[01:14:01.435]        // -> [nReset <= 0x00000080]
[01:14:01.435]      __var canReadPins = 0;
[01:14:01.435]        // -> [canReadPins <= 0x00000000]
[01:14:01.435]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:14:01.437]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:14:01.437]        // -> [canReadPins <= 0x00000001]
[01:14:01.437]    </block>
[01:14:01.437]    <control if="" while="1" timeout="200" info="">
[01:14:01.437]      // while "1"  (timeout="200")
[01:14:01.437]      // while-condition  =>  TRUE
[01:14:01.437]      // while "1"  (timeout="200")
[01:14:01.437]      // while-condition  =>  TRUE
[01:14:01.437]      // while "1"  (timeout="200")
[01:14:01.438]      // while-condition  =>  TRUE
[01:14:01.438]      // while "1"  (timeout="200")
[01:14:01.438]      // while  =>  TIMEOUT
[01:14:01.438]      // end while "1"
[01:14:01.438]    </control>
[01:14:01.438]    <control if="canReadPins" while="" timeout="0" info="">
[01:14:01.438]      // if-block "canReadPins"
[01:14:01.438]        // =>  TRUE
[01:14:01.438]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:14:01.438]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:14:01.441]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:14:01.442]        // while-condition  =>  FALSE
[01:14:01.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:14:01.442]      </control>
[01:14:01.442]      // end if-block "canReadPins"
[01:14:01.442]    </control>
[01:14:01.442]    <control if="!canReadPins" while="" timeout="0" info="">
[01:14:01.442]      // if-block "!canReadPins"
[01:14:01.442]        // =>  FALSE
[01:14:01.442]      // skip if-block "!canReadPins"
[01:14:01.442]    </control>
[01:14:01.443]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:14:01.443]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:01.443]        // =>  TRUE
[01:14:01.443]      <block atomic="false" info="">
[01:14:01.443]        WriteAP(0x00, 0x190008);
[01:14:01.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:01.448]        WriteAP(0xF0, 0x01);
[01:14:01.456]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:01.457]      </block>
[01:14:01.457]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:01.457]    </control>
[01:14:01.457]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:14:01.457]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:01.457]        // =>  FALSE
[01:14:01.457]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:01.457]    </control>
[01:14:01.457]    <block atomic="false" info="">
[01:14:01.457]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:01.463]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:14:01.463]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:14:01.463]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:01.465]      __ap = 0; //lets make sure we reset the access point selection
[01:14:01.465]        // -> [__ap <= 0x00000000]
[01:14:01.465]    </block>
[01:14:01.465]  </sequence>
[01:14:01.465]  
[01:14:01.498]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:14:01.498]  
[01:14:01.498]  <debugvars>
[01:14:01.498]    // Pre-defined
[01:14:01.498]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:01.498]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:01.498]    __dp=0x00000000
[01:14:01.500]    __ap=0x00000000
[01:14:01.500]    __traceout=0x00000000      (Trace Disabled)
[01:14:01.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:01.500]    __FlashAddr=0x00000000
[01:14:01.500]    __FlashLen=0x00000000
[01:14:01.500]    __FlashArg=0x00000000
[01:14:01.500]    __FlashOp=0x00000000
[01:14:01.500]    __Result=0x00000000
[01:14:01.500]  </debugvars>
[01:14:01.500]  
[01:14:01.500]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:14:01.500]    <block atomic="false" info="">
[01:14:01.501]      __var deviceID = 0;
[01:14:01.501]        // -> [deviceID <= 0x00000000]
[01:14:01.501]      __var version = 0;
[01:14:01.501]        // -> [version <= 0x00000000]
[01:14:01.501]      __var partNum = 0;
[01:14:01.501]        // -> [partNum <= 0x00000000]
[01:14:01.501]      __var manuf = 0;
[01:14:01.501]        // -> [manuf <= 0x00000000]
[01:14:01.501]      __var isMSPM0G1X0X_G3X0X = 0;
[01:14:01.501]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:14:01.502]      __var isProduction = 0;
[01:14:01.502]        // -> [isProduction <= 0x00000000]
[01:14:01.502]      __var continueId = 0;
[01:14:01.502]        // -> [continueId <= 0x00000000]
[01:14:01.502]      deviceID =   Read32(0x41C40004);
[01:14:01.508]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:14:01.508]        // -> [deviceID <= 0x2BB8802F]
[01:14:01.508]      version = deviceID >> 28;
[01:14:01.508]        // -> [version <= 0x00000002]
[01:14:01.508]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:14:01.508]        // -> [partNum <= 0x0000BB88]
[01:14:01.509]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:14:01.509]        // -> [manuf <= 0x00000017]
[01:14:01.509]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:14:01.509]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:14:01.509]      isProduction = (version > 0);
[01:14:01.509]        // -> [isProduction <= 0x00000001]
[01:14:01.509]    </block>
[01:14:01.509]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:14:01.509]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:14:01.509]        // =>  FALSE
[01:14:01.509]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:14:01.510]    </control>
[01:14:01.510]    <control if="continueId == 4" while="" timeout="0" info="">
[01:14:01.510]      // if-block "continueId == 4"
[01:14:01.510]        // =>  FALSE
[01:14:01.510]      // skip if-block "continueId == 4"
[01:14:01.510]    </control>
[01:14:01.510]    <control if="!isProduction" while="" timeout="0" info="">
[01:14:01.510]      // if-block "!isProduction"
[01:14:01.511]        // =>  FALSE
[01:14:01.511]      // skip if-block "!isProduction"
[01:14:01.511]    </control>
[01:14:01.511]  </sequence>
[01:14:01.511]  
[01:15:44.850]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:15:44.850]  
[01:15:44.858]  <debugvars>
[01:15:44.858]    // Pre-defined
[01:15:44.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:44.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:44.858]    __dp=0x00000000
[01:15:44.858]    __ap=0x00000000
[01:15:44.858]    __traceout=0x00000000      (Trace Disabled)
[01:15:44.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:44.859]    __FlashAddr=0x00000000
[01:15:44.859]    __FlashLen=0x00000000
[01:15:44.859]    __FlashArg=0x00000000
[01:15:44.859]    __FlashOp=0x00000000
[01:15:44.859]    __Result=0x00000000
[01:15:44.859]  </debugvars>
[01:15:44.860]  
[01:15:44.860]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:15:44.860]    <block atomic="false" info="">
[01:15:44.860]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:15:44.860]        // -> [isSWJ <= 0x00000001]
[01:15:44.860]      __var hasDormant = __protocol & 0x00020000;
[01:15:44.860]        // -> [hasDormant <= 0x00000000]
[01:15:44.860]      __var protType   = __protocol & 0x0000FFFF;
[01:15:44.860]        // -> [protType <= 0x00000002]
[01:15:44.860]    </block>
[01:15:44.860]    <control if="protType == 1" while="" timeout="0" info="">
[01:15:44.860]      // if-block "protType == 1"
[01:15:44.861]        // =>  FALSE
[01:15:44.861]      // skip if-block "protType == 1"
[01:15:44.861]    </control>
[01:15:44.861]    <control if="protType == 2" while="" timeout="0" info="">
[01:15:44.861]      // if-block "protType == 2"
[01:15:44.861]        // =>  TRUE
[01:15:44.861]      <control if="isSWJ" while="" timeout="0" info="">
[01:15:44.861]        // if-block "isSWJ"
[01:15:44.861]          // =>  TRUE
[01:15:44.861]        <control if="hasDormant" while="" timeout="0" info="">
[01:15:44.861]          // if-block "hasDormant"
[01:15:44.862]            // =>  FALSE
[01:15:44.862]          // skip if-block "hasDormant"
[01:15:44.862]        </control>
[01:15:44.862]        <control if="!hasDormant" while="" timeout="0" info="">
[01:15:44.862]          // if-block "!hasDormant"
[01:15:44.862]            // =>  TRUE
[01:15:44.862]          <block atomic="false" info="">
[01:15:44.863]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:15:44.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:44.865]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:15:44.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:15:44.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:15:44.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:44.873]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:15:44.874]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:15:44.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:15:44.876]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:15:44.876]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:15:44.878]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:15:44.878]          </block>
[01:15:44.878]          // end if-block "!hasDormant"
[01:15:44.878]        </control>
[01:15:44.878]        // end if-block "isSWJ"
[01:15:44.878]      </control>
[01:15:44.878]      <control if="!isSWJ" while="" timeout="0" info="">
[01:15:44.878]        // if-block "!isSWJ"
[01:15:44.878]          // =>  FALSE
[01:15:44.878]        // skip if-block "!isSWJ"
[01:15:44.878]      </control>
[01:15:44.878]      <block atomic="false" info="">
[01:15:44.878]        ReadDP(0x0);
[01:15:44.880]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:15:44.880]      </block>
[01:15:44.880]      // end if-block "protType == 2"
[01:15:44.880]    </control>
[01:15:44.880]  </sequence>
[01:15:44.880]  
[01:15:44.882]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:15:44.882]  
[01:15:44.883]  <debugvars>
[01:15:44.884]    // Pre-defined
[01:15:44.884]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:44.884]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:44.884]    __dp=0x00000000
[01:15:44.884]    __ap=0x00000000
[01:15:44.884]    __traceout=0x00000000      (Trace Disabled)
[01:15:44.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:44.884]    __FlashAddr=0x00000000
[01:15:44.884]    __FlashLen=0x00000000
[01:15:44.884]    __FlashArg=0x00000000
[01:15:44.884]    __FlashOp=0x00000000
[01:15:44.885]    __Result=0x00000000
[01:15:44.885]  </debugvars>
[01:15:44.885]  
[01:15:44.885]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:15:44.885]    <block atomic="false" info="">
[01:15:44.885]      __var SW_DP_ABORT       = 0x0;
[01:15:44.885]        // -> [SW_DP_ABORT <= 0x00000000]
[01:15:44.885]      __var DP_CTRL_STAT      = 0x4;
[01:15:44.885]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:15:44.885]      __var DP_SELECT         = 0x8;
[01:15:44.885]        // -> [DP_SELECT <= 0x00000008]
[01:15:44.885]      __var powered_down      = 0;
[01:15:44.886]        // -> [powered_down <= 0x00000000]
[01:15:44.886]      WriteDP(DP_SELECT, 0x00000000);
[01:15:44.888]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:15:44.888]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:15:44.890]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:15:44.890]        // -> [powered_down <= 0x00000001]
[01:15:44.890]    </block>
[01:15:44.890]    <control if="powered_down" while="" timeout="0" info="">
[01:15:44.890]      // if-block "powered_down"
[01:15:44.890]        // =>  TRUE
[01:15:44.890]      <block atomic="false" info="">
[01:15:44.890]        Message(0, "Debug/System power-up request sent");
[01:15:44.892]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:15:44.894]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:15:44.894]      </block>
[01:15:44.894]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:15:44.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:15:44.895]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:15:44.895]        // while-condition  =>  FALSE
[01:15:44.895]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:15:44.895]      </control>
[01:15:44.896]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:15:44.896]        // if-block "(__protocol & 0xFFFF) == 1"
[01:15:44.896]          // =>  FALSE
[01:15:44.896]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:15:44.896]      </control>
[01:15:44.896]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:15:44.896]        // if-block "(__protocol & 0xFFFF) == 2"
[01:15:44.896]          // =>  TRUE
[01:15:44.896]        <block atomic="false" info="">
[01:15:44.896]          Message(0, "executing SWD power up");
[01:15:44.898]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:15:44.901]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:15:44.901]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:15:44.903]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:15:44.903]        </block>
[01:15:44.903]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:15:44.903]      </control>
[01:15:44.903]      // end if-block "powered_down"
[01:15:44.903]    </control>
[01:15:44.903]    <block atomic="false" info="">
[01:15:44.904]      __var DEBUG_PORT_VAL    = 0;
[01:15:44.904]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:15:44.904]      __var ACCESS_POINT_VAL  = 0;
[01:15:44.904]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:15:44.904]      __ap = 1; 
[01:15:44.904]        // -> [__ap <= 0x00000001]
[01:15:44.904]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:15:44.910]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:15:44.910]      __ap = 4;
[01:15:44.910]        // -> [__ap <= 0x00000004]
[01:15:44.910]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:44.913]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:15:44.913]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:15:44.914]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:44.915]    </block>
[01:15:44.916]    <block atomic="false" info="">
[01:15:44.916]      __var nReset = 0x80;
[01:15:44.916]        // -> [nReset <= 0x00000080]
[01:15:44.916]      __var canReadPins = 0;
[01:15:44.916]        // -> [canReadPins <= 0x00000000]
[01:15:44.916]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:15:44.918]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:15:44.918]        // -> [canReadPins <= 0x00000001]
[01:15:44.918]    </block>
[01:15:44.918]    <control if="" while="1" timeout="200" info="">
[01:15:44.919]      // while "1"  (timeout="200")
[01:15:44.919]      // while-condition  =>  TRUE
[01:15:44.919]      // while "1"  (timeout="200")
[01:15:44.919]      // while-condition  =>  TRUE
[01:15:44.919]      // while "1"  (timeout="200")
[01:15:44.919]      // while-condition  =>  TRUE
[01:15:44.919]      // while "1"  (timeout="200")
[01:15:44.919]      // while-condition  =>  TRUE
[01:15:44.919]      // while "1"  (timeout="200")
[01:15:44.919]      // while-condition  =>  TRUE
[01:15:44.919]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.920]      // while-condition  =>  TRUE
[01:15:44.920]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.922]      // while-condition  =>  TRUE
[01:15:44.922]      // while "1"  (timeout="200")
[01:15:44.923]      // while-condition  =>  TRUE
[01:15:44.923]      // while "1"  (timeout="200")
[01:15:44.923]      // while  =>  TIMEOUT
[01:15:44.923]      // end while "1"
[01:15:44.923]    </control>
[01:15:44.923]    <control if="canReadPins" while="" timeout="0" info="">
[01:15:44.923]      // if-block "canReadPins"
[01:15:44.923]        // =>  TRUE
[01:15:44.923]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:15:44.923]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:15:44.925]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:15:44.925]        // while-condition  =>  FALSE
[01:15:44.925]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:15:44.925]      </control>
[01:15:44.925]      // end if-block "canReadPins"
[01:15:44.925]    </control>
[01:15:44.925]    <control if="!canReadPins" while="" timeout="0" info="">
[01:15:44.925]      // if-block "!canReadPins"
[01:15:44.925]        // =>  FALSE
[01:15:44.925]      // skip if-block "!canReadPins"
[01:15:44.925]    </control>
[01:15:44.925]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:15:44.927]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:44.927]        // =>  TRUE
[01:15:44.927]      <block atomic="false" info="">
[01:15:44.927]        WriteAP(0x00, 0x190008);
[01:15:44.932]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:44.932]        WriteAP(0xF0, 0x01);
[01:15:44.936]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:15:44.936]      </block>
[01:15:44.936]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:15:44.936]    </control>
[01:15:44.936]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:15:44.936]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:44.936]        // =>  FALSE
[01:15:44.936]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:15:44.936]    </control>
[01:15:44.937]    <block atomic="false" info="">
[01:15:44.937]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:15:44.940]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:15:44.940]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:15:44.940]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:15:44.942]      __ap = 0; //lets make sure we reset the access point selection
[01:15:44.942]        // -> [__ap <= 0x00000000]
[01:15:44.942]    </block>
[01:15:44.943]  </sequence>
[01:15:44.943]  
[01:15:44.964]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:15:44.964]  
[01:15:44.964]  <debugvars>
[01:15:44.964]    // Pre-defined
[01:15:44.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:15:44.964]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:15:44.965]    __dp=0x00000000
[01:15:44.965]    __ap=0x00000000
[01:15:44.965]    __traceout=0x00000000      (Trace Disabled)
[01:15:44.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:15:44.965]    __FlashAddr=0x00000000
[01:15:44.965]    __FlashLen=0x00000000
[01:15:44.965]    __FlashArg=0x00000000
[01:15:44.965]    __FlashOp=0x00000000
[01:15:44.965]    __Result=0x00000000
[01:15:44.966]  </debugvars>
[01:15:44.966]  
[01:15:44.966]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:15:44.966]    <block atomic="false" info="">
[01:15:44.966]      __var deviceID = 0;
[01:15:44.966]        // -> [deviceID <= 0x00000000]
[01:15:44.966]      __var version = 0;
[01:15:44.966]        // -> [version <= 0x00000000]
[01:15:44.967]      __var partNum = 0;
[01:15:44.967]        // -> [partNum <= 0x00000000]
[01:15:44.967]      __var manuf = 0;
[01:15:44.967]        // -> [manuf <= 0x00000000]
[01:15:44.967]      __var isMSPM0G1X0X_G3X0X = 0;
[01:15:44.967]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:15:44.967]      __var isProduction = 0;
[01:15:44.967]        // -> [isProduction <= 0x00000000]
[01:15:44.967]      __var continueId = 0;
[01:15:44.967]        // -> [continueId <= 0x00000000]
[01:15:44.968]      deviceID =   Read32(0x41C40004);
[01:15:44.979]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:15:44.979]        // -> [deviceID <= 0x2BB8802F]
[01:15:44.980]      version = deviceID >> 28;
[01:15:44.980]        // -> [version <= 0x00000002]
[01:15:44.980]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:15:44.980]        // -> [partNum <= 0x0000BB88]
[01:15:44.980]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:15:44.980]        // -> [manuf <= 0x00000017]
[01:15:44.980]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:15:44.981]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:15:44.981]      isProduction = (version > 0);
[01:15:44.981]        // -> [isProduction <= 0x00000001]
[01:15:44.981]    </block>
[01:15:44.981]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:15:44.981]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:15:44.981]        // =>  FALSE
[01:15:44.981]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:15:44.981]    </control>
[01:15:44.981]    <control if="continueId == 4" while="" timeout="0" info="">
[01:15:44.981]      // if-block "continueId == 4"
[01:15:44.981]        // =>  FALSE
[01:15:44.982]      // skip if-block "continueId == 4"
[01:15:44.982]    </control>
[01:15:44.982]    <control if="!isProduction" while="" timeout="0" info="">
[01:15:44.982]      // if-block "!isProduction"
[01:15:44.982]        // =>  FALSE
[01:15:44.982]      // skip if-block "!isProduction"
[01:15:44.982]    </control>
[01:15:44.982]  </sequence>
[01:15:44.982]  
[01:17:13.003]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:17:13.003]  
[01:17:13.003]  <debugvars>
[01:17:13.004]    // Pre-defined
[01:17:13.004]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:13.004]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:13.004]    __dp=0x00000000
[01:17:13.004]    __ap=0x00000000
[01:17:13.004]    __traceout=0x00000000      (Trace Disabled)
[01:17:13.004]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:13.004]    __FlashAddr=0x00000000
[01:17:13.004]    __FlashLen=0x00000000
[01:17:13.004]    __FlashArg=0x00000000
[01:17:13.004]    __FlashOp=0x00000000
[01:17:13.004]    __Result=0x00000000
[01:17:13.004]  </debugvars>
[01:17:13.004]  
[01:17:13.005]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:17:13.005]    <block atomic="false" info="">
[01:17:13.005]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:17:13.005]        // -> [isSWJ <= 0x00000001]
[01:17:13.005]      __var hasDormant = __protocol & 0x00020000;
[01:17:13.005]        // -> [hasDormant <= 0x00000000]
[01:17:13.005]      __var protType   = __protocol & 0x0000FFFF;
[01:17:13.005]        // -> [protType <= 0x00000002]
[01:17:13.005]    </block>
[01:17:13.005]    <control if="protType == 1" while="" timeout="0" info="">
[01:17:13.005]      // if-block "protType == 1"
[01:17:13.005]        // =>  FALSE
[01:17:13.006]      // skip if-block "protType == 1"
[01:17:13.006]    </control>
[01:17:13.006]    <control if="protType == 2" while="" timeout="0" info="">
[01:17:13.006]      // if-block "protType == 2"
[01:17:13.006]        // =>  TRUE
[01:17:13.006]      <control if="isSWJ" while="" timeout="0" info="">
[01:17:13.006]        // if-block "isSWJ"
[01:17:13.007]          // =>  TRUE
[01:17:13.007]        <control if="hasDormant" while="" timeout="0" info="">
[01:17:13.007]          // if-block "hasDormant"
[01:17:13.007]            // =>  FALSE
[01:17:13.007]          // skip if-block "hasDormant"
[01:17:13.007]        </control>
[01:17:13.007]        <control if="!hasDormant" while="" timeout="0" info="">
[01:17:13.007]          // if-block "!hasDormant"
[01:17:13.008]            // =>  TRUE
[01:17:13.008]          <block atomic="false" info="">
[01:17:13.008]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:17:13.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:13.010]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:17:13.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:17:13.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:17:13.019]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:13.019]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:17:13.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:17:13.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:17:13.024]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:13.024]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:17:13.029]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:17:13.029]          </block>
[01:17:13.029]          // end if-block "!hasDormant"
[01:17:13.029]        </control>
[01:17:13.029]        // end if-block "isSWJ"
[01:17:13.029]      </control>
[01:17:13.029]      <control if="!isSWJ" while="" timeout="0" info="">
[01:17:13.029]        // if-block "!isSWJ"
[01:17:13.029]          // =>  FALSE
[01:17:13.029]        // skip if-block "!isSWJ"
[01:17:13.030]      </control>
[01:17:13.030]      <block atomic="false" info="">
[01:17:13.030]        ReadDP(0x0);
[01:17:13.040]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:17:13.041]      </block>
[01:17:13.041]      // end if-block "protType == 2"
[01:17:13.041]    </control>
[01:17:13.041]  </sequence>
[01:17:13.041]  
[01:17:13.044]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:17:13.044]  
[01:17:13.044]  <debugvars>
[01:17:13.044]    // Pre-defined
[01:17:13.044]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:13.044]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:13.044]    __dp=0x00000000
[01:17:13.044]    __ap=0x00000000
[01:17:13.044]    __traceout=0x00000000      (Trace Disabled)
[01:17:13.044]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:13.044]    __FlashAddr=0x00000000
[01:17:13.044]    __FlashLen=0x00000000
[01:17:13.044]    __FlashArg=0x00000000
[01:17:13.045]    __FlashOp=0x00000000
[01:17:13.045]    __Result=0x00000000
[01:17:13.045]  </debugvars>
[01:17:13.045]  
[01:17:13.045]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:17:13.045]    <block atomic="false" info="">
[01:17:13.045]      __var SW_DP_ABORT       = 0x0;
[01:17:13.045]        // -> [SW_DP_ABORT <= 0x00000000]
[01:17:13.045]      __var DP_CTRL_STAT      = 0x4;
[01:17:13.045]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:17:13.045]      __var DP_SELECT         = 0x8;
[01:17:13.045]        // -> [DP_SELECT <= 0x00000008]
[01:17:13.046]      __var powered_down      = 0;
[01:17:13.046]        // -> [powered_down <= 0x00000000]
[01:17:13.046]      WriteDP(DP_SELECT, 0x00000000);
[01:17:13.052]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:17:13.052]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:17:13.053]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:17:13.053]        // -> [powered_down <= 0x00000001]
[01:17:13.054]    </block>
[01:17:13.054]    <control if="powered_down" while="" timeout="0" info="">
[01:17:13.054]      // if-block "powered_down"
[01:17:13.054]        // =>  TRUE
[01:17:13.054]      <block atomic="false" info="">
[01:17:13.054]        Message(0, "Debug/System power-up request sent");
[01:17:13.057]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:17:13.064]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:17:13.064]      </block>
[01:17:13.064]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:17:13.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:17:13.068]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:17:13.068]        // while-condition  =>  FALSE
[01:17:13.068]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:17:13.068]      </control>
[01:17:13.068]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:17:13.068]        // if-block "(__protocol & 0xFFFF) == 1"
[01:17:13.069]          // =>  FALSE
[01:17:13.069]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:17:13.069]      </control>
[01:17:13.069]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:17:13.069]        // if-block "(__protocol & 0xFFFF) == 2"
[01:17:13.069]          // =>  TRUE
[01:17:13.069]        <block atomic="false" info="">
[01:17:13.069]          Message(0, "executing SWD power up");
[01:17:13.071]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:17:13.080]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:17:13.081]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:17:13.089]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:17:13.089]        </block>
[01:17:13.089]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:17:13.089]      </control>
[01:17:13.089]      // end if-block "powered_down"
[01:17:13.089]    </control>
[01:17:13.090]    <block atomic="false" info="">
[01:17:13.090]      __var DEBUG_PORT_VAL    = 0;
[01:17:13.090]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:17:13.090]      __var ACCESS_POINT_VAL  = 0;
[01:17:13.090]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:17:13.090]      __ap = 1; 
[01:17:13.090]        // -> [__ap <= 0x00000001]
[01:17:13.090]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:17:13.102]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:17:13.103]      __ap = 4;
[01:17:13.103]        // -> [__ap <= 0x00000004]
[01:17:13.103]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:13.108]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:17:13.108]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:17:13.108]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:13.110]    </block>
[01:17:13.110]    <block atomic="false" info="">
[01:17:13.110]      __var nReset = 0x80;
[01:17:13.110]        // -> [nReset <= 0x00000080]
[01:17:13.111]      __var canReadPins = 0;
[01:17:13.111]        // -> [canReadPins <= 0x00000000]
[01:17:13.111]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:17:13.114]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:17:13.114]        // -> [canReadPins <= 0x00000001]
[01:17:13.114]    </block>
[01:17:13.114]    <control if="" while="1" timeout="200" info="">
[01:17:13.114]      // while "1"  (timeout="200")
[01:17:13.115]      // while-condition  =>  TRUE
[01:17:13.115]      // while "1"  (timeout="200")
[01:17:13.115]      // while-condition  =>  TRUE
[01:17:13.115]      // while "1"  (timeout="200")
[01:17:13.115]      // while-condition  =>  TRUE
[01:17:13.115]      // while "1"  (timeout="200")
[01:17:13.115]      // while-condition  =>  TRUE
[01:17:13.115]      // while "1"  (timeout="200")
[01:17:13.115]      // while-condition  =>  TRUE
[01:17:13.115]      // while "1"  (timeout="200")
[01:17:13.115]      // while-condition  =>  TRUE
[01:17:13.115]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.116]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.116]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.116]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.116]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.116]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.116]      // while "1"  (timeout="200")
[01:17:13.116]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.117]      // while "1"  (timeout="200")
[01:17:13.117]      // while-condition  =>  TRUE
[01:17:13.118]      // while "1"  (timeout="200")
[01:17:13.118]      // while-condition  =>  TRUE
[01:17:13.118]      // while "1"  (timeout="200")
[01:17:13.119]      // while-condition  =>  TRUE
[01:17:13.119]      // while "1"  (timeout="200")
[01:17:13.119]      // while-condition  =>  TRUE
[01:17:13.119]      // while "1"  (timeout="200")
[01:17:13.119]      // while-condition  =>  TRUE
[01:17:13.119]      // while "1"  (timeout="200")
[01:17:13.119]      // while-condition  =>  TRUE
[01:17:13.119]      // while "1"  (timeout="200")
[01:17:13.120]      // while-condition  =>  TRUE
[01:17:13.120]      // while "1"  (timeout="200")
[01:17:13.120]      // while-condition  =>  TRUE
[01:17:13.120]      // while "1"  (timeout="200")
[01:17:13.120]      // while-condition  =>  TRUE
[01:17:13.120]      // while "1"  (timeout="200")
[01:17:13.120]      // while-condition  =>  TRUE
[01:17:13.120]      // while "1"  (timeout="200")
[01:17:13.120]      // while-condition  =>  TRUE
[01:17:13.121]      // while "1"  (timeout="200")
[01:17:13.121]      // while-condition  =>  TRUE
[01:17:13.121]      // while "1"  (timeout="200")
[01:17:13.121]      // while-condition  =>  TRUE
[01:17:13.121]      // while "1"  (timeout="200")
[01:17:13.121]      // while-condition  =>  TRUE
[01:17:13.121]      // while "1"  (timeout="200")
[01:17:13.121]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.122]      // while "1"  (timeout="200")
[01:17:13.122]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.123]      // while "1"  (timeout="200")
[01:17:13.123]      // while-condition  =>  TRUE
[01:17:13.125]      // while "1"  (timeout="200")
[01:17:13.125]      // while-condition  =>  TRUE
[01:17:13.125]      // while "1"  (timeout="200")
[01:17:13.125]      // while-condition  =>  TRUE
[01:17:13.125]      // while "1"  (timeout="200")
[01:17:13.125]      // while-condition  =>  TRUE
[01:17:13.125]      // while "1"  (timeout="200")
[01:17:13.125]      // while-condition  =>  TRUE
[01:17:13.125]      // while "1"  (timeout="200")
[01:17:13.125]      // while-condition  =>  TRUE
[01:17:13.125]      // while "1"  (timeout="200")
[01:17:13.126]      // while-condition  =>  TRUE
[01:17:13.126]      // while "1"  (timeout="200")
[01:17:13.126]      // while  =>  TIMEOUT
[01:17:13.126]      // end while "1"
[01:17:13.126]    </control>
[01:17:13.126]    <control if="canReadPins" while="" timeout="0" info="">
[01:17:13.126]      // if-block "canReadPins"
[01:17:13.126]        // =>  TRUE
[01:17:13.126]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:17:13.126]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:17:13.134]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:17:13.135]        // while-condition  =>  FALSE
[01:17:13.135]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:17:13.135]      </control>
[01:17:13.135]      // end if-block "canReadPins"
[01:17:13.135]    </control>
[01:17:13.135]    <control if="!canReadPins" while="" timeout="0" info="">
[01:17:13.136]      // if-block "!canReadPins"
[01:17:13.136]        // =>  FALSE
[01:17:13.136]      // skip if-block "!canReadPins"
[01:17:13.136]    </control>
[01:17:13.136]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:17:13.136]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:13.136]        // =>  TRUE
[01:17:13.136]      <block atomic="false" info="">
[01:17:13.136]        WriteAP(0x00, 0x190008);
[01:17:13.143]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:13.144]        WriteAP(0xF0, 0x01);
[01:17:13.148]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:13.148]      </block>
[01:17:13.148]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:13.149]    </control>
[01:17:13.149]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:17:13.149]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:13.149]        // =>  FALSE
[01:17:13.149]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:13.149]    </control>
[01:17:13.150]    <block atomic="false" info="">
[01:17:13.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:13.157]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:17:13.157]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:17:13.157]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:13.160]      __ap = 0; //lets make sure we reset the access point selection
[01:17:13.160]        // -> [__ap <= 0x00000000]
[01:17:13.160]    </block>
[01:17:13.160]  </sequence>
[01:17:13.160]  
[01:18:19.753]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:18:19.753]  
[01:18:19.754]  <debugvars>
[01:18:19.754]    // Pre-defined
[01:18:19.754]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:19.754]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:19.754]    __dp=0x00000000
[01:18:19.754]    __ap=0x00000000
[01:18:19.754]    __traceout=0x00000000      (Trace Disabled)
[01:18:19.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:19.755]    __FlashAddr=0x00000000
[01:18:19.755]    __FlashLen=0x00000000
[01:18:19.755]    __FlashArg=0x00000000
[01:18:19.755]    __FlashOp=0x00000000
[01:18:19.755]    __Result=0x00000000
[01:18:19.755]  </debugvars>
[01:18:19.756]  
[01:18:19.756]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:18:19.756]    <block atomic="false" info="">
[01:18:19.756]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:18:19.756]        // -> [isSWJ <= 0x00000001]
[01:18:19.756]      __var hasDormant = __protocol & 0x00020000;
[01:18:19.756]        // -> [hasDormant <= 0x00000000]
[01:18:19.756]      __var protType   = __protocol & 0x0000FFFF;
[01:18:19.756]        // -> [protType <= 0x00000002]
[01:18:19.756]    </block>
[01:18:19.756]    <control if="protType == 1" while="" timeout="0" info="">
[01:18:19.756]      // if-block "protType == 1"
[01:18:19.757]        // =>  FALSE
[01:18:19.757]      // skip if-block "protType == 1"
[01:18:19.757]    </control>
[01:18:19.757]    <control if="protType == 2" while="" timeout="0" info="">
[01:18:19.757]      // if-block "protType == 2"
[01:18:19.757]        // =>  TRUE
[01:18:19.757]      <control if="isSWJ" while="" timeout="0" info="">
[01:18:19.757]        // if-block "isSWJ"
[01:18:19.757]          // =>  TRUE
[01:18:19.757]        <control if="hasDormant" while="" timeout="0" info="">
[01:18:19.757]          // if-block "hasDormant"
[01:18:19.757]            // =>  FALSE
[01:18:19.758]          // skip if-block "hasDormant"
[01:18:19.758]        </control>
[01:18:19.758]        <control if="!hasDormant" while="" timeout="0" info="">
[01:18:19.758]          // if-block "!hasDormant"
[01:18:19.758]            // =>  TRUE
[01:18:19.758]          <block atomic="false" info="">
[01:18:19.758]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:18:19.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:19.763]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:18:19.765]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:18:19.765]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:18:19.766]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:19.766]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:18:19.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:18:19.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:18:19.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:19.770]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:18:19.771]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:18:19.771]          </block>
[01:18:19.771]          // end if-block "!hasDormant"
[01:18:19.771]        </control>
[01:18:19.771]        // end if-block "isSWJ"
[01:18:19.771]      </control>
[01:18:19.771]      <control if="!isSWJ" while="" timeout="0" info="">
[01:18:19.772]        // if-block "!isSWJ"
[01:18:19.772]          // =>  FALSE
[01:18:19.772]        // skip if-block "!isSWJ"
[01:18:19.772]      </control>
[01:18:19.772]      <block atomic="false" info="">
[01:18:19.772]        ReadDP(0x0);
[01:18:19.774]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:18:19.774]      </block>
[01:18:19.775]      // end if-block "protType == 2"
[01:18:19.775]    </control>
[01:18:19.775]  </sequence>
[01:18:19.775]  
[01:18:19.777]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:18:19.777]  
[01:18:19.777]  <debugvars>
[01:18:19.777]    // Pre-defined
[01:18:19.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:19.777]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:19.777]    __dp=0x00000000
[01:18:19.777]    __ap=0x00000000
[01:18:19.777]    __traceout=0x00000000      (Trace Disabled)
[01:18:19.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:19.778]    __FlashAddr=0x00000000
[01:18:19.778]    __FlashLen=0x00000000
[01:18:19.778]    __FlashArg=0x00000000
[01:18:19.778]    __FlashOp=0x00000000
[01:18:19.778]    __Result=0x00000000
[01:18:19.778]  </debugvars>
[01:18:19.778]  
[01:18:19.778]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:18:19.778]    <block atomic="false" info="">
[01:18:19.778]      __var SW_DP_ABORT       = 0x0;
[01:18:19.778]        // -> [SW_DP_ABORT <= 0x00000000]
[01:18:19.778]      __var DP_CTRL_STAT      = 0x4;
[01:18:19.778]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:18:19.778]      __var DP_SELECT         = 0x8;
[01:18:19.780]        // -> [DP_SELECT <= 0x00000008]
[01:18:19.780]      __var powered_down      = 0;
[01:18:19.780]        // -> [powered_down <= 0x00000000]
[01:18:19.780]      WriteDP(DP_SELECT, 0x00000000);
[01:18:19.783]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:18:19.783]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:18:19.785]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:18:19.785]        // -> [powered_down <= 0x00000001]
[01:18:19.785]    </block>
[01:18:19.785]    <control if="powered_down" while="" timeout="0" info="">
[01:18:19.785]      // if-block "powered_down"
[01:18:19.785]        // =>  TRUE
[01:18:19.785]      <block atomic="false" info="">
[01:18:19.785]        Message(0, "Debug/System power-up request sent");
[01:18:19.788]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:18:19.790]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:18:19.790]      </block>
[01:18:19.790]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:18:19.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:18:19.791]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:18:19.791]        // while-condition  =>  FALSE
[01:18:19.791]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:18:19.792]      </control>
[01:18:19.792]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:18:19.792]        // if-block "(__protocol & 0xFFFF) == 1"
[01:18:19.792]          // =>  FALSE
[01:18:19.792]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:18:19.792]      </control>
[01:18:19.792]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:18:19.792]        // if-block "(__protocol & 0xFFFF) == 2"
[01:18:19.792]          // =>  TRUE
[01:18:19.792]        <block atomic="false" info="">
[01:18:19.793]          Message(0, "executing SWD power up");
[01:18:19.794]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:18:19.796]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:18:19.796]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:18:19.799]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:18:19.799]        </block>
[01:18:19.799]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:18:19.799]      </control>
[01:18:19.799]      // end if-block "powered_down"
[01:18:19.799]    </control>
[01:18:19.799]    <block atomic="false" info="">
[01:18:19.799]      __var DEBUG_PORT_VAL    = 0;
[01:18:19.799]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:18:19.799]      __var ACCESS_POINT_VAL  = 0;
[01:18:19.799]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:18:19.799]      __ap = 1; 
[01:18:19.800]        // -> [__ap <= 0x00000001]
[01:18:19.800]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:18:19.804]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:18:19.804]      __ap = 4;
[01:18:19.804]        // -> [__ap <= 0x00000004]
[01:18:19.804]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:19.808]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:18:19.808]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:18:19.808]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:19.810]    </block>
[01:18:19.810]    <block atomic="false" info="">
[01:18:19.810]      __var nReset = 0x80;
[01:18:19.810]        // -> [nReset <= 0x00000080]
[01:18:19.810]      __var canReadPins = 0;
[01:18:19.810]        // -> [canReadPins <= 0x00000000]
[01:18:19.811]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:18:19.812]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:18:19.812]        // -> [canReadPins <= 0x00000001]
[01:18:19.812]    </block>
[01:18:19.812]    <control if="" while="1" timeout="200" info="">
[01:18:19.812]      // while "1"  (timeout="200")
[01:18:19.812]      // while-condition  =>  TRUE
[01:18:19.812]      // while "1"  (timeout="200")
[01:18:19.812]      // while-condition  =>  TRUE
[01:18:19.813]      // while "1"  (timeout="200")
[01:18:19.813]      // while  =>  TIMEOUT
[01:18:19.813]      // end while "1"
[01:18:19.813]    </control>
[01:18:19.813]    <control if="canReadPins" while="" timeout="0" info="">
[01:18:19.813]      // if-block "canReadPins"
[01:18:19.813]        // =>  TRUE
[01:18:19.813]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:18:19.813]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:18:19.815]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:18:19.815]        // while-condition  =>  FALSE
[01:18:19.815]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:18:19.815]      </control>
[01:18:19.815]      // end if-block "canReadPins"
[01:18:19.815]    </control>
[01:18:19.815]    <control if="!canReadPins" while="" timeout="0" info="">
[01:18:19.815]      // if-block "!canReadPins"
[01:18:19.815]        // =>  FALSE
[01:18:19.815]      // skip if-block "!canReadPins"
[01:18:19.816]    </control>
[01:18:19.816]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:18:19.816]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:19.816]        // =>  TRUE
[01:18:19.816]      <block atomic="false" info="">
[01:18:19.816]        WriteAP(0x00, 0x190008);
[01:18:19.819]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:19.819]        WriteAP(0xF0, 0x01);
[01:18:19.822]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:19.822]      </block>
[01:18:19.822]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:19.822]    </control>
[01:18:19.822]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:18:19.822]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:19.822]        // =>  FALSE
[01:18:19.822]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:19.822]    </control>
[01:18:19.822]    <block atomic="false" info="">
[01:18:19.822]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:19.826]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:18:19.826]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:18:19.827]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:19.828]      __ap = 0; //lets make sure we reset the access point selection
[01:18:19.829]        // -> [__ap <= 0x00000000]
[01:18:19.829]    </block>
[01:18:19.829]  </sequence>
[01:18:19.829]  
[01:18:19.854]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:18:19.854]  
[01:18:19.854]  <debugvars>
[01:18:19.854]    // Pre-defined
[01:18:19.855]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:19.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:19.855]    __dp=0x00000000
[01:18:19.855]    __ap=0x00000000
[01:18:19.855]    __traceout=0x00000000      (Trace Disabled)
[01:18:19.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:19.855]    __FlashAddr=0x00000000
[01:18:19.855]    __FlashLen=0x00000000
[01:18:19.855]    __FlashArg=0x00000000
[01:18:19.855]    __FlashOp=0x00000000
[01:18:19.855]    __Result=0x00000000
[01:18:19.856]  </debugvars>
[01:18:19.856]  
[01:18:19.856]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:18:19.856]    <block atomic="false" info="">
[01:18:19.856]      __var deviceID = 0;
[01:18:19.856]        // -> [deviceID <= 0x00000000]
[01:18:19.856]      __var version = 0;
[01:18:19.856]        // -> [version <= 0x00000000]
[01:18:19.856]      __var partNum = 0;
[01:18:19.856]        // -> [partNum <= 0x00000000]
[01:18:19.856]      __var manuf = 0;
[01:18:19.857]        // -> [manuf <= 0x00000000]
[01:18:19.857]      __var isMSPM0G1X0X_G3X0X = 0;
[01:18:19.857]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:18:19.857]      __var isProduction = 0;
[01:18:19.857]        // -> [isProduction <= 0x00000000]
[01:18:19.857]      __var continueId = 0;
[01:18:19.857]        // -> [continueId <= 0x00000000]
[01:18:19.858]      deviceID =   Read32(0x41C40004);
[01:18:19.866]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:18:19.866]        // -> [deviceID <= 0x2BB8802F]
[01:18:19.867]      version = deviceID >> 28;
[01:18:19.867]        // -> [version <= 0x00000002]
[01:18:19.867]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:18:19.867]        // -> [partNum <= 0x0000BB88]
[01:18:19.867]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:18:19.867]        // -> [manuf <= 0x00000017]
[01:18:19.867]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:18:19.867]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:18:19.867]      isProduction = (version > 0);
[01:18:19.868]        // -> [isProduction <= 0x00000001]
[01:18:19.868]    </block>
[01:18:19.868]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:18:19.868]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:18:19.868]        // =>  FALSE
[01:18:19.868]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:18:19.868]    </control>
[01:18:19.868]    <control if="continueId == 4" while="" timeout="0" info="">
[01:18:19.868]      // if-block "continueId == 4"
[01:18:19.868]        // =>  FALSE
[01:18:19.868]      // skip if-block "continueId == 4"
[01:18:19.869]    </control>
[01:18:19.869]    <control if="!isProduction" while="" timeout="0" info="">
[01:18:19.869]      // if-block "!isProduction"
[01:18:19.869]        // =>  FALSE
[01:18:19.869]      // skip if-block "!isProduction"
[01:18:19.869]    </control>
[01:18:19.869]  </sequence>
[01:18:19.869]  
[01:19:35.158]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:19:35.158]  
[01:19:35.167]  <debugvars>
[01:19:35.167]    // Pre-defined
[01:19:35.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:35.167]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:35.167]    __dp=0x00000000
[01:19:35.168]    __ap=0x00000000
[01:19:35.168]    __traceout=0x00000000      (Trace Disabled)
[01:19:35.168]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:35.168]    __FlashAddr=0x00000000
[01:19:35.168]    __FlashLen=0x00000000
[01:19:35.168]    __FlashArg=0x00000000
[01:19:35.168]    __FlashOp=0x00000000
[01:19:35.168]    __Result=0x00000000
[01:19:35.168]  </debugvars>
[01:19:35.168]  
[01:19:35.169]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:19:35.169]    <block atomic="false" info="">
[01:19:35.169]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:19:35.169]        // -> [isSWJ <= 0x00000001]
[01:19:35.169]      __var hasDormant = __protocol & 0x00020000;
[01:19:35.169]        // -> [hasDormant <= 0x00000000]
[01:19:35.169]      __var protType   = __protocol & 0x0000FFFF;
[01:19:35.169]        // -> [protType <= 0x00000002]
[01:19:35.169]    </block>
[01:19:35.169]    <control if="protType == 1" while="" timeout="0" info="">
[01:19:35.170]      // if-block "protType == 1"
[01:19:35.170]        // =>  FALSE
[01:19:35.170]      // skip if-block "protType == 1"
[01:19:35.170]    </control>
[01:19:35.170]    <control if="protType == 2" while="" timeout="0" info="">
[01:19:35.170]      // if-block "protType == 2"
[01:19:35.171]        // =>  TRUE
[01:19:35.171]      <control if="isSWJ" while="" timeout="0" info="">
[01:19:35.171]        // if-block "isSWJ"
[01:19:35.171]          // =>  TRUE
[01:19:35.171]        <control if="hasDormant" while="" timeout="0" info="">
[01:19:35.171]          // if-block "hasDormant"
[01:19:35.171]            // =>  FALSE
[01:19:35.171]          // skip if-block "hasDormant"
[01:19:35.171]        </control>
[01:19:35.171]        <control if="!hasDormant" while="" timeout="0" info="">
[01:19:35.171]          // if-block "!hasDormant"
[01:19:35.172]            // =>  TRUE
[01:19:35.172]          <block atomic="false" info="">
[01:19:35.172]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:19:35.174]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:35.174]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:19:35.175]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:19:35.175]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:19:35.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:35.177]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:19:35.178]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:19:35.178]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:19:35.179]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:19:35.180]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:19:35.181]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:19:35.181]          </block>
[01:19:35.181]          // end if-block "!hasDormant"
[01:19:35.181]        </control>
[01:19:35.181]        // end if-block "isSWJ"
[01:19:35.181]      </control>
[01:19:35.182]      <control if="!isSWJ" while="" timeout="0" info="">
[01:19:35.182]        // if-block "!isSWJ"
[01:19:35.182]          // =>  FALSE
[01:19:35.182]        // skip if-block "!isSWJ"
[01:19:35.182]      </control>
[01:19:35.182]      <block atomic="false" info="">
[01:19:35.182]        ReadDP(0x0);
[01:19:35.184]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:19:35.184]      </block>
[01:19:35.184]      // end if-block "protType == 2"
[01:19:35.184]    </control>
[01:19:35.184]  </sequence>
[01:19:35.184]  
[01:19:35.188]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:19:35.188]  
[01:19:35.188]  <debugvars>
[01:19:35.188]    // Pre-defined
[01:19:35.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:35.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:35.188]    __dp=0x00000000
[01:19:35.189]    __ap=0x00000000
[01:19:35.189]    __traceout=0x00000000      (Trace Disabled)
[01:19:35.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:35.189]    __FlashAddr=0x00000000
[01:19:35.189]    __FlashLen=0x00000000
[01:19:35.189]    __FlashArg=0x00000000
[01:19:35.189]    __FlashOp=0x00000000
[01:19:35.189]    __Result=0x00000000
[01:19:35.189]  </debugvars>
[01:19:35.189]  
[01:19:35.189]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:19:35.189]    <block atomic="false" info="">
[01:19:35.190]      __var SW_DP_ABORT       = 0x0;
[01:19:35.190]        // -> [SW_DP_ABORT <= 0x00000000]
[01:19:35.190]      __var DP_CTRL_STAT      = 0x4;
[01:19:35.190]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:19:35.190]      __var DP_SELECT         = 0x8;
[01:19:35.190]        // -> [DP_SELECT <= 0x00000008]
[01:19:35.190]      __var powered_down      = 0;
[01:19:35.190]        // -> [powered_down <= 0x00000000]
[01:19:35.190]      WriteDP(DP_SELECT, 0x00000000);
[01:19:35.193]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:19:35.193]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:19:35.195]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:19:35.195]        // -> [powered_down <= 0x00000001]
[01:19:35.195]    </block>
[01:19:35.195]    <control if="powered_down" while="" timeout="0" info="">
[01:19:35.195]      // if-block "powered_down"
[01:19:35.195]        // =>  TRUE
[01:19:35.196]      <block atomic="false" info="">
[01:19:35.196]        Message(0, "Debug/System power-up request sent");
[01:19:35.198]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:19:35.200]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:19:35.200]      </block>
[01:19:35.200]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:19:35.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:19:35.201]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:19:35.201]        // while-condition  =>  FALSE
[01:19:35.201]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:19:35.201]      </control>
[01:19:35.201]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:19:35.201]        // if-block "(__protocol & 0xFFFF) == 1"
[01:19:35.201]          // =>  FALSE
[01:19:35.202]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:19:35.202]      </control>
[01:19:35.202]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:19:35.202]        // if-block "(__protocol & 0xFFFF) == 2"
[01:19:35.202]          // =>  TRUE
[01:19:35.202]        <block atomic="false" info="">
[01:19:35.202]          Message(0, "executing SWD power up");
[01:19:35.204]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:19:35.205]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:19:35.206]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:19:35.209]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:19:35.210]        </block>
[01:19:35.210]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:19:35.210]      </control>
[01:19:35.210]      // end if-block "powered_down"
[01:19:35.210]    </control>
[01:19:35.210]    <block atomic="false" info="">
[01:19:35.210]      __var DEBUG_PORT_VAL    = 0;
[01:19:35.211]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:19:35.211]      __var ACCESS_POINT_VAL  = 0;
[01:19:35.211]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:19:35.211]      __ap = 1; 
[01:19:35.211]        // -> [__ap <= 0x00000001]
[01:19:35.211]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:19:35.215]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:19:35.215]      __ap = 4;
[01:19:35.215]        // -> [__ap <= 0x00000004]
[01:19:35.215]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:35.219]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:19:35.219]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:19:35.219]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:35.221]    </block>
[01:19:35.221]    <block atomic="false" info="">
[01:19:35.221]      __var nReset = 0x80;
[01:19:35.221]        // -> [nReset <= 0x00000080]
[01:19:35.221]      __var canReadPins = 0;
[01:19:35.221]        // -> [canReadPins <= 0x00000000]
[01:19:35.221]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:19:35.223]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:19:35.223]        // -> [canReadPins <= 0x00000001]
[01:19:35.224]    </block>
[01:19:35.224]    <control if="" while="1" timeout="200" info="">
[01:19:35.224]      // while "1"  (timeout="200")
[01:19:35.224]      // while-condition  =>  TRUE
[01:19:35.224]      // while "1"  (timeout="200")
[01:19:35.225]      // while-condition  =>  TRUE
[01:19:35.225]      // while "1"  (timeout="200")
[01:19:35.225]      // while-condition  =>  TRUE
[01:19:35.225]      // while "1"  (timeout="200")
[01:19:35.225]      // while-condition  =>  TRUE
[01:19:35.225]      // while "1"  (timeout="200")
[01:19:35.225]      // while-condition  =>  TRUE
[01:19:35.225]      // while "1"  (timeout="200")
[01:19:35.225]      // while-condition  =>  TRUE
[01:19:35.225]      // while "1"  (timeout="200")
[01:19:35.226]      // while-condition  =>  TRUE
[01:19:35.226]      // while "1"  (timeout="200")
[01:19:35.226]      // while-condition  =>  TRUE
[01:19:35.226]      // while "1"  (timeout="200")
[01:19:35.226]      // while-condition  =>  TRUE
[01:19:35.226]      // while "1"  (timeout="200")
[01:19:35.226]      // while-condition  =>  TRUE
[01:19:35.226]      // while "1"  (timeout="200")
[01:19:35.226]      // while-condition  =>  TRUE
[01:19:35.227]      // while "1"  (timeout="200")
[01:19:35.227]      // while-condition  =>  TRUE
[01:19:35.227]      // while "1"  (timeout="200")
[01:19:35.227]      // while-condition  =>  TRUE
[01:19:35.227]      // while "1"  (timeout="200")
[01:19:35.227]      // while-condition  =>  TRUE
[01:19:35.227]      // while "1"  (timeout="200")
[01:19:35.227]      // while-condition  =>  TRUE
[01:19:35.227]      // while "1"  (timeout="200")
[01:19:35.227]      // while-condition  =>  TRUE
[01:19:35.227]      // while "1"  (timeout="200")
[01:19:35.228]      // while-condition  =>  TRUE
[01:19:35.228]      // while "1"  (timeout="200")
[01:19:35.228]      // while-condition  =>  TRUE
[01:19:35.228]      // while "1"  (timeout="200")
[01:19:35.228]      // while-condition  =>  TRUE
[01:19:35.228]      // while "1"  (timeout="200")
[01:19:35.228]      // while-condition  =>  TRUE
[01:19:35.228]      // while "1"  (timeout="200")
[01:19:35.228]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.229]      // while-condition  =>  TRUE
[01:19:35.229]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.231]      // while-condition  =>  TRUE
[01:19:35.231]      // while "1"  (timeout="200")
[01:19:35.232]      // while-condition  =>  TRUE
[01:19:35.232]      // while "1"  (timeout="200")
[01:19:35.232]      // while-condition  =>  TRUE
[01:19:35.232]      // while "1"  (timeout="200")
[01:19:35.232]      // while-condition  =>  TRUE
[01:19:35.232]      // while "1"  (timeout="200")
[01:19:35.232]      // while-condition  =>  TRUE
[01:19:35.232]      // while "1"  (timeout="200")
[01:19:35.232]      // while-condition  =>  TRUE
[01:19:35.232]      // while "1"  (timeout="200")
[01:19:35.233]      // while-condition  =>  TRUE
[01:19:35.233]      // while "1"  (timeout="200")
[01:19:35.233]      // while-condition  =>  TRUE
[01:19:35.233]      // while "1"  (timeout="200")
[01:19:35.233]      // while-condition  =>  TRUE
[01:19:35.233]      // while "1"  (timeout="200")
[01:19:35.233]      // while-condition  =>  TRUE
[01:19:35.233]      // while "1"  (timeout="200")
[01:19:35.234]      // while-condition  =>  TRUE
[01:19:35.234]      // while "1"  (timeout="200")
[01:19:35.234]      // while-condition  =>  TRUE
[01:19:35.234]      // while "1"  (timeout="200")
[01:19:35.234]      // while-condition  =>  TRUE
[01:19:35.234]      // while "1"  (timeout="200")
[01:19:35.234]      // while-condition  =>  TRUE
[01:19:35.234]      // while "1"  (timeout="200")
[01:19:35.234]      // while-condition  =>  TRUE
[01:19:35.234]      // while "1"  (timeout="200")
[01:19:35.234]      // while-condition  =>  TRUE
[01:19:35.235]      // while "1"  (timeout="200")
[01:19:35.235]      // while  =>  TIMEOUT
[01:19:35.235]      // end while "1"
[01:19:35.235]    </control>
[01:19:35.235]    <control if="canReadPins" while="" timeout="0" info="">
[01:19:35.235]      // if-block "canReadPins"
[01:19:35.235]        // =>  TRUE
[01:19:35.235]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:19:35.236]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:19:35.237]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:19:35.237]        // while-condition  =>  FALSE
[01:19:35.237]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:19:35.237]      </control>
[01:19:35.237]      // end if-block "canReadPins"
[01:19:35.238]    </control>
[01:19:35.238]    <control if="!canReadPins" while="" timeout="0" info="">
[01:19:35.238]      // if-block "!canReadPins"
[01:19:35.238]        // =>  FALSE
[01:19:35.238]      // skip if-block "!canReadPins"
[01:19:35.238]    </control>
[01:19:35.238]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:19:35.238]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:35.238]        // =>  TRUE
[01:19:35.238]      <block atomic="false" info="">
[01:19:35.238]        WriteAP(0x00, 0x190008);
[01:19:35.240]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:35.240]        WriteAP(0xF0, 0x01);
[01:19:35.244]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:19:35.244]      </block>
[01:19:35.245]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:19:35.245]    </control>
[01:19:35.245]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:19:35.245]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:35.245]        // =>  FALSE
[01:19:35.245]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:19:35.245]    </control>
[01:19:35.245]    <block atomic="false" info="">
[01:19:35.245]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:19:35.248]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:19:35.249]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:19:35.249]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:19:35.251]      __ap = 0; //lets make sure we reset the access point selection
[01:19:35.251]        // -> [__ap <= 0x00000000]
[01:19:35.251]    </block>
[01:19:35.251]  </sequence>
[01:19:35.251]  
[01:19:35.277]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:19:35.277]  
[01:19:35.278]  <debugvars>
[01:19:35.278]    // Pre-defined
[01:19:35.278]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:19:35.278]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:19:35.278]    __dp=0x00000000
[01:19:35.278]    __ap=0x00000000
[01:19:35.279]    __traceout=0x00000000      (Trace Disabled)
[01:19:35.279]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:19:35.279]    __FlashAddr=0x00000000
[01:19:35.279]    __FlashLen=0x00000000
[01:19:35.279]    __FlashArg=0x00000000
[01:19:35.279]    __FlashOp=0x00000000
[01:19:35.279]    __Result=0x00000000
[01:19:35.279]  </debugvars>
[01:19:35.279]  
[01:19:35.279]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:19:35.280]    <block atomic="false" info="">
[01:19:35.280]      __var deviceID = 0;
[01:19:35.280]        // -> [deviceID <= 0x00000000]
[01:19:35.280]      __var version = 0;
[01:19:35.280]        // -> [version <= 0x00000000]
[01:19:35.280]      __var partNum = 0;
[01:19:35.280]        // -> [partNum <= 0x00000000]
[01:19:35.280]      __var manuf = 0;
[01:19:35.280]        // -> [manuf <= 0x00000000]
[01:19:35.280]      __var isMSPM0G1X0X_G3X0X = 0;
[01:19:35.280]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:19:35.281]      __var isProduction = 0;
[01:19:35.281]        // -> [isProduction <= 0x00000000]
[01:19:35.281]      __var continueId = 0;
[01:19:35.281]        // -> [continueId <= 0x00000000]
[01:19:35.281]      deviceID =   Read32(0x41C40004);
[01:19:35.285]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:19:35.286]        // -> [deviceID <= 0x2BB8802F]
[01:19:35.286]      version = deviceID >> 28;
[01:19:35.286]        // -> [version <= 0x00000002]
[01:19:35.286]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:19:35.286]        // -> [partNum <= 0x0000BB88]
[01:19:35.286]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:19:35.286]        // -> [manuf <= 0x00000017]
[01:19:35.287]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:19:35.287]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:19:35.287]      isProduction = (version > 0);
[01:19:35.287]        // -> [isProduction <= 0x00000001]
[01:19:35.287]    </block>
[01:19:35.287]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:19:35.287]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:19:35.287]        // =>  FALSE
[01:19:35.287]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:19:35.287]    </control>
[01:19:35.287]    <control if="continueId == 4" while="" timeout="0" info="">
[01:19:35.287]      // if-block "continueId == 4"
[01:19:35.288]        // =>  FALSE
[01:19:35.288]      // skip if-block "continueId == 4"
[01:19:35.288]    </control>
[01:19:35.288]    <control if="!isProduction" while="" timeout="0" info="">
[01:19:35.288]      // if-block "!isProduction"
[01:19:35.288]        // =>  FALSE
[01:19:35.288]      // skip if-block "!isProduction"
[01:19:35.288]    </control>
[01:19:35.288]  </sequence>
[01:19:35.288]  
[01:24:29.888]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:24:29.888]  
[01:24:29.897]  <debugvars>
[01:24:29.897]    // Pre-defined
[01:24:29.898]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:29.898]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:29.898]    __dp=0x00000000
[01:24:29.898]    __ap=0x00000000
[01:24:29.898]    __traceout=0x00000000      (Trace Disabled)
[01:24:29.898]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:29.898]    __FlashAddr=0x00000000
[01:24:29.898]    __FlashLen=0x00000000
[01:24:29.898]    __FlashArg=0x00000000
[01:24:29.898]    __FlashOp=0x00000000
[01:24:29.898]    __Result=0x00000000
[01:24:29.898]  </debugvars>
[01:24:29.899]  
[01:24:29.899]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:24:29.899]    <block atomic="false" info="">
[01:24:29.899]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:24:29.899]        // -> [isSWJ <= 0x00000001]
[01:24:29.899]      __var hasDormant = __protocol & 0x00020000;
[01:24:29.899]        // -> [hasDormant <= 0x00000000]
[01:24:29.899]      __var protType   = __protocol & 0x0000FFFF;
[01:24:29.899]        // -> [protType <= 0x00000002]
[01:24:29.899]    </block>
[01:24:29.899]    <control if="protType == 1" while="" timeout="0" info="">
[01:24:29.900]      // if-block "protType == 1"
[01:24:29.900]        // =>  FALSE
[01:24:29.900]      // skip if-block "protType == 1"
[01:24:29.900]    </control>
[01:24:29.900]    <control if="protType == 2" while="" timeout="0" info="">
[01:24:29.900]      // if-block "protType == 2"
[01:24:29.900]        // =>  TRUE
[01:24:29.900]      <control if="isSWJ" while="" timeout="0" info="">
[01:24:29.900]        // if-block "isSWJ"
[01:24:29.900]          // =>  TRUE
[01:24:29.900]        <control if="hasDormant" while="" timeout="0" info="">
[01:24:29.901]          // if-block "hasDormant"
[01:24:29.901]            // =>  FALSE
[01:24:29.901]          // skip if-block "hasDormant"
[01:24:29.901]        </control>
[01:24:29.901]        <control if="!hasDormant" while="" timeout="0" info="">
[01:24:29.901]          // if-block "!hasDormant"
[01:24:29.901]            // =>  TRUE
[01:24:29.901]          <block atomic="false" info="">
[01:24:29.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:24:29.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:29.903]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:24:29.904]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:24:29.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:24:29.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:29.906]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:24:29.908]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:24:29.908]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:24:29.910]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:24:29.910]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:24:29.911]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:24:29.911]          </block>
[01:24:29.911]          // end if-block "!hasDormant"
[01:24:29.911]        </control>
[01:24:29.911]        // end if-block "isSWJ"
[01:24:29.912]      </control>
[01:24:29.912]      <control if="!isSWJ" while="" timeout="0" info="">
[01:24:29.912]        // if-block "!isSWJ"
[01:24:29.912]          // =>  FALSE
[01:24:29.912]        // skip if-block "!isSWJ"
[01:24:29.912]      </control>
[01:24:29.912]      <block atomic="false" info="">
[01:24:29.912]        ReadDP(0x0);
[01:24:29.914]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:24:29.914]      </block>
[01:24:29.914]      // end if-block "protType == 2"
[01:24:29.914]    </control>
[01:24:29.914]  </sequence>
[01:24:29.915]  
[01:24:29.920]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:24:29.920]  
[01:24:29.920]  <debugvars>
[01:24:29.920]    // Pre-defined
[01:24:29.920]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:29.921]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:29.921]    __dp=0x00000000
[01:24:29.921]    __ap=0x00000000
[01:24:29.921]    __traceout=0x00000000      (Trace Disabled)
[01:24:29.921]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:29.921]    __FlashAddr=0x00000000
[01:24:29.921]    __FlashLen=0x00000000
[01:24:29.921]    __FlashArg=0x00000000
[01:24:29.921]    __FlashOp=0x00000000
[01:24:29.922]    __Result=0x00000000
[01:24:29.922]  </debugvars>
[01:24:29.922]  
[01:24:29.922]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:24:29.922]    <block atomic="false" info="">
[01:24:29.922]      __var SW_DP_ABORT       = 0x0;
[01:24:29.923]        // -> [SW_DP_ABORT <= 0x00000000]
[01:24:29.923]      __var DP_CTRL_STAT      = 0x4;
[01:24:29.923]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:24:29.923]      __var DP_SELECT         = 0x8;
[01:24:29.923]        // -> [DP_SELECT <= 0x00000008]
[01:24:29.923]      __var powered_down      = 0;
[01:24:29.923]        // -> [powered_down <= 0x00000000]
[01:24:29.923]      WriteDP(DP_SELECT, 0x00000000);
[01:24:29.924]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:24:29.925]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:24:29.926]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:24:29.926]        // -> [powered_down <= 0x00000001]
[01:24:29.927]    </block>
[01:24:29.927]    <control if="powered_down" while="" timeout="0" info="">
[01:24:29.927]      // if-block "powered_down"
[01:24:29.927]        // =>  TRUE
[01:24:29.927]      <block atomic="false" info="">
[01:24:29.927]        Message(0, "Debug/System power-up request sent");
[01:24:29.930]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:24:29.933]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:24:29.933]      </block>
[01:24:29.933]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:24:29.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:24:29.935]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:24:29.935]        // while-condition  =>  FALSE
[01:24:29.935]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:24:29.935]      </control>
[01:24:29.935]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:24:29.935]        // if-block "(__protocol & 0xFFFF) == 1"
[01:24:29.935]          // =>  FALSE
[01:24:29.936]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:24:29.936]      </control>
[01:24:29.936]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:24:29.936]        // if-block "(__protocol & 0xFFFF) == 2"
[01:24:29.936]          // =>  TRUE
[01:24:29.936]        <block atomic="false" info="">
[01:24:29.936]          Message(0, "executing SWD power up");
[01:24:29.938]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:24:29.948]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:24:29.949]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:24:29.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:24:29.963]        </block>
[01:24:29.963]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:24:29.963]      </control>
[01:24:29.963]      // end if-block "powered_down"
[01:24:29.963]    </control>
[01:24:29.963]    <block atomic="false" info="">
[01:24:29.963]      __var DEBUG_PORT_VAL    = 0;
[01:24:29.963]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:24:29.963]      __var ACCESS_POINT_VAL  = 0;
[01:24:29.964]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:24:29.964]      __ap = 1; 
[01:24:29.964]        // -> [__ap <= 0x00000001]
[01:24:29.964]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:24:29.976]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:24:29.976]      __ap = 4;
[01:24:29.976]        // -> [__ap <= 0x00000004]
[01:24:29.977]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:29.995]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:24:29.995]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:24:29.995]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:29.997]    </block>
[01:24:29.998]    <block atomic="false" info="">
[01:24:29.998]      __var nReset = 0x80;
[01:24:29.998]        // -> [nReset <= 0x00000080]
[01:24:29.998]      __var canReadPins = 0;
[01:24:29.998]        // -> [canReadPins <= 0x00000000]
[01:24:29.998]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:24:30.003]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:24:30.003]        // -> [canReadPins <= 0x00000001]
[01:24:30.003]    </block>
[01:24:30.003]    <control if="" while="1" timeout="200" info="">
[01:24:30.003]      // while "1"  (timeout="200")
[01:24:30.003]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.004]      // while "1"  (timeout="200")
[01:24:30.004]      // while-condition  =>  TRUE
[01:24:30.005]      // while "1"  (timeout="200")
[01:24:30.005]      // while-condition  =>  TRUE
[01:24:30.005]      // while "1"  (timeout="200")
[01:24:30.005]      // while-condition  =>  TRUE
[01:24:30.005]      // while "1"  (timeout="200")
[01:24:30.005]      // while-condition  =>  TRUE
[01:24:30.005]      // while "1"  (timeout="200")
[01:24:30.006]      // while-condition  =>  TRUE
[01:24:30.006]      // while "1"  (timeout="200")
[01:24:30.006]      // while-condition  =>  TRUE
[01:24:30.006]      // while "1"  (timeout="200")
[01:24:30.006]      // while-condition  =>  TRUE
[01:24:30.006]      // while "1"  (timeout="200")
[01:24:30.006]      // while-condition  =>  TRUE
[01:24:30.006]      // while "1"  (timeout="200")
[01:24:30.006]      // while-condition  =>  TRUE
[01:24:30.006]      // while "1"  (timeout="200")
[01:24:30.006]      // while-condition  =>  TRUE
[01:24:30.006]      // while "1"  (timeout="200")
[01:24:30.007]      // while-condition  =>  TRUE
[01:24:30.007]      // while "1"  (timeout="200")
[01:24:30.007]      // while-condition  =>  TRUE
[01:24:30.007]      // while "1"  (timeout="200")
[01:24:30.007]      // while-condition  =>  TRUE
[01:24:30.007]      // while "1"  (timeout="200")
[01:24:30.007]      // while-condition  =>  TRUE
[01:24:30.007]      // while "1"  (timeout="200")
[01:24:30.007]      // while-condition  =>  TRUE
[01:24:30.007]      // while "1"  (timeout="200")
[01:24:30.008]      // while-condition  =>  TRUE
[01:24:30.008]      // while "1"  (timeout="200")
[01:24:30.008]      // while-condition  =>  TRUE
[01:24:30.008]      // while "1"  (timeout="200")
[01:24:30.008]      // while-condition  =>  TRUE
[01:24:30.008]      // while "1"  (timeout="200")
[01:24:30.008]      // while-condition  =>  TRUE
[01:24:30.009]      // while "1"  (timeout="200")
[01:24:30.009]      // while-condition  =>  TRUE
[01:24:30.009]      // while "1"  (timeout="200")
[01:24:30.009]      // while-condition  =>  TRUE
[01:24:30.009]      // while "1"  (timeout="200")
[01:24:30.009]      // while-condition  =>  TRUE
[01:24:30.009]      // while "1"  (timeout="200")
[01:24:30.009]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.011]      // while "1"  (timeout="200")
[01:24:30.011]      // while-condition  =>  TRUE
[01:24:30.012]      // while "1"  (timeout="200")
[01:24:30.012]      // while-condition  =>  TRUE
[01:24:30.012]      // while "1"  (timeout="200")
[01:24:30.012]      // while-condition  =>  TRUE
[01:24:30.012]      // while "1"  (timeout="200")
[01:24:30.012]      // while-condition  =>  TRUE
[01:24:30.012]      // while "1"  (timeout="200")
[01:24:30.012]      // while-condition  =>  TRUE
[01:24:30.012]      // while "1"  (timeout="200")
[01:24:30.012]      // while-condition  =>  TRUE
[01:24:30.012]      // while "1"  (timeout="200")
[01:24:30.013]      // while-condition  =>  TRUE
[01:24:30.013]      // while "1"  (timeout="200")
[01:24:30.013]      // while-condition  =>  TRUE
[01:24:30.013]      // while "1"  (timeout="200")
[01:24:30.013]      // while-condition  =>  TRUE
[01:24:30.013]      // while "1"  (timeout="200")
[01:24:30.013]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.014]      // while-condition  =>  TRUE
[01:24:30.014]      // while "1"  (timeout="200")
[01:24:30.015]      // while-condition  =>  TRUE
[01:24:30.015]      // while "1"  (timeout="200")
[01:24:30.015]      // while-condition  =>  TRUE
[01:24:30.015]      // while "1"  (timeout="200")
[01:24:30.015]      // while-condition  =>  TRUE
[01:24:30.015]      // while "1"  (timeout="200")
[01:24:30.015]      // while-condition  =>  TRUE
[01:24:30.015]      // while "1"  (timeout="200")
[01:24:30.015]      // while-condition  =>  TRUE
[01:24:30.015]      // while "1"  (timeout="200")
[01:24:30.015]      // while-condition  =>  TRUE
[01:24:30.015]      // while "1"  (timeout="200")
[01:24:30.016]      // while-condition  =>  TRUE
[01:24:30.016]      // while "1"  (timeout="200")
[01:24:30.016]      // while-condition  =>  TRUE
[01:24:30.016]      // while "1"  (timeout="200")
[01:24:30.017]      // while-condition  =>  TRUE
[01:24:30.017]      // while "1"  (timeout="200")
[01:24:30.017]      // while  =>  TIMEOUT
[01:24:30.017]      // end while "1"
[01:24:30.017]    </control>
[01:24:30.017]    <control if="canReadPins" while="" timeout="0" info="">
[01:24:30.017]      // if-block "canReadPins"
[01:24:30.017]        // =>  TRUE
[01:24:30.017]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:24:30.017]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:24:30.022]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:24:30.022]        // while-condition  =>  FALSE
[01:24:30.022]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:24:30.022]      </control>
[01:24:30.022]      // end if-block "canReadPins"
[01:24:30.022]    </control>
[01:24:30.022]    <control if="!canReadPins" while="" timeout="0" info="">
[01:24:30.022]      // if-block "!canReadPins"
[01:24:30.022]        // =>  FALSE
[01:24:30.022]      // skip if-block "!canReadPins"
[01:24:30.022]    </control>
[01:24:30.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:24:30.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:30.023]        // =>  TRUE
[01:24:30.023]      <block atomic="false" info="">
[01:24:30.023]        WriteAP(0x00, 0x190008);
[01:24:30.025]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:30.026]        WriteAP(0xF0, 0x01);
[01:24:30.030]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:24:30.030]      </block>
[01:24:30.030]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:24:30.030]    </control>
[01:24:30.030]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:24:30.030]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:30.030]        // =>  FALSE
[01:24:30.030]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:24:30.030]    </control>
[01:24:30.030]    <block atomic="false" info="">
[01:24:30.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:24:30.036]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:24:30.036]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:24:30.036]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:24:30.038]      __ap = 0; //lets make sure we reset the access point selection
[01:24:30.038]        // -> [__ap <= 0x00000000]
[01:24:30.038]    </block>
[01:24:30.039]  </sequence>
[01:24:30.039]  
[01:24:30.063]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:24:30.063]  
[01:24:30.063]  <debugvars>
[01:24:30.063]    // Pre-defined
[01:24:30.063]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:24:30.063]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:24:30.063]    __dp=0x00000000
[01:24:30.063]    __ap=0x00000000
[01:24:30.063]    __traceout=0x00000000      (Trace Disabled)
[01:24:30.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:24:30.063]    __FlashAddr=0x00000000
[01:24:30.063]    __FlashLen=0x00000000
[01:24:30.063]    __FlashArg=0x00000000
[01:24:30.064]    __FlashOp=0x00000000
[01:24:30.064]    __Result=0x00000000
[01:24:30.064]  </debugvars>
[01:24:30.064]  
[01:24:30.064]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:24:30.064]    <block atomic="false" info="">
[01:24:30.064]      __var deviceID = 0;
[01:24:30.064]        // -> [deviceID <= 0x00000000]
[01:24:30.064]      __var version = 0;
[01:24:30.064]        // -> [version <= 0x00000000]
[01:24:30.064]      __var partNum = 0;
[01:24:30.064]        // -> [partNum <= 0x00000000]
[01:24:30.064]      __var manuf = 0;
[01:24:30.064]        // -> [manuf <= 0x00000000]
[01:24:30.064]      __var isMSPM0G1X0X_G3X0X = 0;
[01:24:30.064]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:24:30.064]      __var isProduction = 0;
[01:24:30.064]        // -> [isProduction <= 0x00000000]
[01:24:30.065]      __var continueId = 0;
[01:24:30.065]        // -> [continueId <= 0x00000000]
[01:24:30.065]      deviceID =   Read32(0x41C40004);
[01:24:30.070]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:24:30.070]        // -> [deviceID <= 0x2BB8802F]
[01:24:30.071]      version = deviceID >> 28;
[01:24:30.071]        // -> [version <= 0x00000002]
[01:24:30.071]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:24:30.071]        // -> [partNum <= 0x0000BB88]
[01:24:30.071]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:24:30.071]        // -> [manuf <= 0x00000017]
[01:24:30.071]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:24:30.071]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:24:30.071]      isProduction = (version > 0);
[01:24:30.071]        // -> [isProduction <= 0x00000001]
[01:24:30.071]    </block>
[01:24:30.072]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:24:30.072]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:24:30.072]        // =>  FALSE
[01:24:30.072]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:24:30.072]    </control>
[01:24:30.072]    <control if="continueId == 4" while="" timeout="0" info="">
[01:24:30.072]      // if-block "continueId == 4"
[01:24:30.072]        // =>  FALSE
[01:24:30.072]      // skip if-block "continueId == 4"
[01:24:30.072]    </control>
[01:24:30.072]    <control if="!isProduction" while="" timeout="0" info="">
[01:24:30.072]      // if-block "!isProduction"
[01:24:30.072]        // =>  FALSE
[01:24:30.073]      // skip if-block "!isProduction"
[01:24:30.073]    </control>
[01:24:30.073]  </sequence>
[01:24:30.073]  
[01:28:00.680]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:28:00.680]  
[01:28:00.688]  <debugvars>
[01:28:00.688]    // Pre-defined
[01:28:00.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:00.688]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:28:00.689]    __dp=0x00000000
[01:28:00.689]    __ap=0x00000000
[01:28:00.689]    __traceout=0x00000000      (Trace Disabled)
[01:28:00.689]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:00.689]    __FlashAddr=0x00000000
[01:28:00.689]    __FlashLen=0x00000000
[01:28:00.690]    __FlashArg=0x00000000
[01:28:00.690]    __FlashOp=0x00000000
[01:28:00.690]    __Result=0x00000000
[01:28:00.690]  </debugvars>
[01:28:00.690]  
[01:28:00.690]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:28:00.690]    <block atomic="false" info="">
[01:28:00.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:28:00.691]        // -> [isSWJ <= 0x00000001]
[01:28:00.691]      __var hasDormant = __protocol & 0x00020000;
[01:28:00.691]        // -> [hasDormant <= 0x00000000]
[01:28:00.691]      __var protType   = __protocol & 0x0000FFFF;
[01:28:00.691]        // -> [protType <= 0x00000002]
[01:28:00.691]    </block>
[01:28:00.691]    <control if="protType == 1" while="" timeout="0" info="">
[01:28:00.691]      // if-block "protType == 1"
[01:28:00.691]        // =>  FALSE
[01:28:00.691]      // skip if-block "protType == 1"
[01:28:00.691]    </control>
[01:28:00.691]    <control if="protType == 2" while="" timeout="0" info="">
[01:28:00.691]      // if-block "protType == 2"
[01:28:00.691]        // =>  TRUE
[01:28:00.691]      <control if="isSWJ" while="" timeout="0" info="">
[01:28:00.692]        // if-block "isSWJ"
[01:28:00.692]          // =>  TRUE
[01:28:00.692]        <control if="hasDormant" while="" timeout="0" info="">
[01:28:00.692]          // if-block "hasDormant"
[01:28:00.692]            // =>  FALSE
[01:28:00.692]          // skip if-block "hasDormant"
[01:28:00.693]        </control>
[01:28:00.693]        <control if="!hasDormant" while="" timeout="0" info="">
[01:28:00.693]          // if-block "!hasDormant"
[01:28:00.693]            // =>  TRUE
[01:28:00.693]          <block atomic="false" info="">
[01:28:00.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:28:00.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:00.697]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:28:00.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:28:00.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:28:00.700]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:00.700]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:28:00.702]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:28:00.702]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:28:00.709]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:00.709]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:28:00.711]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:28:00.711]          </block>
[01:28:00.711]          // end if-block "!hasDormant"
[01:28:00.711]        </control>
[01:28:00.711]        // end if-block "isSWJ"
[01:28:00.711]      </control>
[01:28:00.711]      <control if="!isSWJ" while="" timeout="0" info="">
[01:28:00.711]        // if-block "!isSWJ"
[01:28:00.711]          // =>  FALSE
[01:28:00.711]        // skip if-block "!isSWJ"
[01:28:00.711]      </control>
[01:28:00.712]      <block atomic="false" info="">
[01:28:00.712]        ReadDP(0x0);
[01:28:00.713]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:28:00.713]      </block>
[01:28:00.713]      // end if-block "protType == 2"
[01:28:00.713]    </control>
[01:28:00.713]  </sequence>
[01:28:00.714]  
[01:28:00.720]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:28:00.720]  
[01:28:00.720]  <debugvars>
[01:28:00.720]    // Pre-defined
[01:28:00.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:00.720]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:28:00.720]    __dp=0x00000000
[01:28:00.721]    __ap=0x00000000
[01:28:00.721]    __traceout=0x00000000      (Trace Disabled)
[01:28:00.721]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:00.721]    __FlashAddr=0x00000000
[01:28:00.721]    __FlashLen=0x00000000
[01:28:00.721]    __FlashArg=0x00000000
[01:28:00.721]    __FlashOp=0x00000000
[01:28:00.721]    __Result=0x00000000
[01:28:00.721]  </debugvars>
[01:28:00.721]  
[01:28:00.721]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:28:00.722]    <block atomic="false" info="">
[01:28:00.722]      __var SW_DP_ABORT       = 0x0;
[01:28:00.722]        // -> [SW_DP_ABORT <= 0x00000000]
[01:28:00.722]      __var DP_CTRL_STAT      = 0x4;
[01:28:00.722]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:28:00.722]      __var DP_SELECT         = 0x8;
[01:28:00.722]        // -> [DP_SELECT <= 0x00000008]
[01:28:00.722]      __var powered_down      = 0;
[01:28:00.722]        // -> [powered_down <= 0x00000000]
[01:28:00.722]      WriteDP(DP_SELECT, 0x00000000);
[01:28:00.728]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:28:00.728]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:28:00.730]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:28:00.730]        // -> [powered_down <= 0x00000001]
[01:28:00.730]    </block>
[01:28:00.730]    <control if="powered_down" while="" timeout="0" info="">
[01:28:00.730]      // if-block "powered_down"
[01:28:00.731]        // =>  TRUE
[01:28:00.731]      <block atomic="false" info="">
[01:28:00.731]        Message(0, "Debug/System power-up request sent");
[01:28:00.732]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:28:00.735]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:28:00.735]      </block>
[01:28:00.735]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:28:00.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:28:00.737]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:28:00.737]        // while-condition  =>  FALSE
[01:28:00.738]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:28:00.738]      </control>
[01:28:00.738]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:28:00.738]        // if-block "(__protocol & 0xFFFF) == 1"
[01:28:00.738]          // =>  FALSE
[01:28:00.738]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:28:00.738]      </control>
[01:28:00.738]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:28:00.738]        // if-block "(__protocol & 0xFFFF) == 2"
[01:28:00.738]          // =>  TRUE
[01:28:00.738]        <block atomic="false" info="">
[01:28:00.738]          Message(0, "executing SWD power up");
[01:28:00.740]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:28:00.742]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:28:00.742]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:28:00.744]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:28:00.744]        </block>
[01:28:00.744]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:28:00.744]      </control>
[01:28:00.744]      // end if-block "powered_down"
[01:28:00.744]    </control>
[01:28:00.744]    <block atomic="false" info="">
[01:28:00.744]      __var DEBUG_PORT_VAL    = 0;
[01:28:00.746]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:28:00.746]      __var ACCESS_POINT_VAL  = 0;
[01:28:00.746]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:28:00.746]      __ap = 1; 
[01:28:00.746]        // -> [__ap <= 0x00000001]
[01:28:00.746]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:28:00.751]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:28:00.751]      __ap = 4;
[01:28:00.751]        // -> [__ap <= 0x00000004]
[01:28:00.752]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:00.755]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:28:00.755]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:28:00.756]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:00.758]    </block>
[01:28:00.758]    <block atomic="false" info="">
[01:28:00.758]      __var nReset = 0x80;
[01:28:00.758]        // -> [nReset <= 0x00000080]
[01:28:00.758]      __var canReadPins = 0;
[01:28:00.758]        // -> [canReadPins <= 0x00000000]
[01:28:00.758]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:28:00.760]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:28:00.760]        // -> [canReadPins <= 0x00000001]
[01:28:00.760]    </block>
[01:28:00.760]    <control if="" while="1" timeout="200" info="">
[01:28:00.760]      // while "1"  (timeout="200")
[01:28:00.760]      // while-condition  =>  TRUE
[01:28:00.760]      // while "1"  (timeout="200")
[01:28:00.760]      // while-condition  =>  TRUE
[01:28:00.760]      // while "1"  (timeout="200")
[01:28:00.760]      // while-condition  =>  TRUE
[01:28:00.760]      // while "1"  (timeout="200")
[01:28:00.760]      // while-condition  =>  TRUE
[01:28:00.760]      // while "1"  (timeout="200")
[01:28:00.761]      // while-condition  =>  TRUE
[01:28:00.761]      // while "1"  (timeout="200")
[01:28:00.761]      // while-condition  =>  TRUE
[01:28:00.761]      // while "1"  (timeout="200")
[01:28:00.761]      // while-condition  =>  TRUE
[01:28:00.761]      // while "1"  (timeout="200")
[01:28:00.761]      // while-condition  =>  TRUE
[01:28:00.762]      // while "1"  (timeout="200")
[01:28:00.762]      // while-condition  =>  TRUE
[01:28:00.762]      // while "1"  (timeout="200")
[01:28:00.762]      // while-condition  =>  TRUE
[01:28:00.762]      // while "1"  (timeout="200")
[01:28:00.762]      // while-condition  =>  TRUE
[01:28:00.763]      // while "1"  (timeout="200")
[01:28:00.763]      // while-condition  =>  TRUE
[01:28:00.763]      // while "1"  (timeout="200")
[01:28:00.763]      // while-condition  =>  TRUE
[01:28:00.763]      // while "1"  (timeout="200")
[01:28:00.763]      // while-condition  =>  TRUE
[01:28:00.763]      // while "1"  (timeout="200")
[01:28:00.763]      // while-condition  =>  TRUE
[01:28:00.763]      // while "1"  (timeout="200")
[01:28:00.764]      // while-condition  =>  TRUE
[01:28:00.764]      // while "1"  (timeout="200")
[01:28:00.764]      // while-condition  =>  TRUE
[01:28:00.764]      // while "1"  (timeout="200")
[01:28:00.764]      // while-condition  =>  TRUE
[01:28:00.764]      // while "1"  (timeout="200")
[01:28:00.764]      // while-condition  =>  TRUE
[01:28:00.764]      // while "1"  (timeout="200")
[01:28:00.764]      // while-condition  =>  TRUE
[01:28:00.764]      // while "1"  (timeout="200")
[01:28:00.764]      // while-condition  =>  TRUE
[01:28:00.765]      // while "1"  (timeout="200")
[01:28:00.765]      // while-condition  =>  TRUE
[01:28:00.765]      // while "1"  (timeout="200")
[01:28:00.765]      // while-condition  =>  TRUE
[01:28:00.765]      // while "1"  (timeout="200")
[01:28:00.765]      // while-condition  =>  TRUE
[01:28:00.765]      // while "1"  (timeout="200")
[01:28:00.765]      // while-condition  =>  TRUE
[01:28:00.765]      // while "1"  (timeout="200")
[01:28:00.765]      // while-condition  =>  TRUE
[01:28:00.765]      // while "1"  (timeout="200")
[01:28:00.765]      // while-condition  =>  TRUE
[01:28:00.766]      // while "1"  (timeout="200")
[01:28:00.766]      // while  =>  TIMEOUT
[01:28:00.766]      // end while "1"
[01:28:00.766]    </control>
[01:28:00.766]    <control if="canReadPins" while="" timeout="0" info="">
[01:28:00.766]      // if-block "canReadPins"
[01:28:00.766]        // =>  TRUE
[01:28:00.768]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:28:00.768]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:28:00.769]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:28:00.769]        // while-condition  =>  FALSE
[01:28:00.769]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:28:00.769]      </control>
[01:28:00.769]      // end if-block "canReadPins"
[01:28:00.769]    </control>
[01:28:00.769]    <control if="!canReadPins" while="" timeout="0" info="">
[01:28:00.769]      // if-block "!canReadPins"
[01:28:00.769]        // =>  FALSE
[01:28:00.769]      // skip if-block "!canReadPins"
[01:28:00.769]    </control>
[01:28:00.769]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:28:00.769]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:00.769]        // =>  TRUE
[01:28:00.769]      <block atomic="false" info="">
[01:28:00.769]        WriteAP(0x00, 0x190008);
[01:28:00.772]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:00.772]        WriteAP(0xF0, 0x01);
[01:28:00.775]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:00.775]      </block>
[01:28:00.776]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:00.776]    </control>
[01:28:00.776]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:28:00.776]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:00.776]        // =>  FALSE
[01:28:00.776]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:00.776]    </control>
[01:28:00.776]    <block atomic="false" info="">
[01:28:00.776]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:00.780]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:28:00.780]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:28:00.780]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:00.782]      __ap = 0; //lets make sure we reset the access point selection
[01:28:00.782]        // -> [__ap <= 0x00000000]
[01:28:00.782]    </block>
[01:28:00.782]  </sequence>
[01:28:00.782]  
[01:28:00.804]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:28:00.804]  
[01:28:00.804]  <debugvars>
[01:28:00.804]    // Pre-defined
[01:28:00.804]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:00.804]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:28:00.804]    __dp=0x00000000
[01:28:00.804]    __ap=0x00000000
[01:28:00.804]    __traceout=0x00000000      (Trace Disabled)
[01:28:00.804]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:00.804]    __FlashAddr=0x00000000
[01:28:00.804]    __FlashLen=0x00000000
[01:28:00.804]    __FlashArg=0x00000000
[01:28:00.806]    __FlashOp=0x00000000
[01:28:00.806]    __Result=0x00000000
[01:28:00.806]  </debugvars>
[01:28:00.806]  
[01:28:00.806]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:28:00.806]    <block atomic="false" info="">
[01:28:00.806]      __var deviceID = 0;
[01:28:00.806]        // -> [deviceID <= 0x00000000]
[01:28:00.806]      __var version = 0;
[01:28:00.806]        // -> [version <= 0x00000000]
[01:28:00.806]      __var partNum = 0;
[01:28:00.806]        // -> [partNum <= 0x00000000]
[01:28:00.806]      __var manuf = 0;
[01:28:00.806]        // -> [manuf <= 0x00000000]
[01:28:00.806]      __var isMSPM0G1X0X_G3X0X = 0;
[01:28:00.806]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:28:00.807]      __var isProduction = 0;
[01:28:00.807]        // -> [isProduction <= 0x00000000]
[01:28:00.807]      __var continueId = 0;
[01:28:00.807]        // -> [continueId <= 0x00000000]
[01:28:00.807]      deviceID =   Read32(0x41C40004);
[01:28:00.812]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:28:00.812]        // -> [deviceID <= 0x2BB8802F]
[01:28:00.812]      version = deviceID >> 28;
[01:28:00.812]        // -> [version <= 0x00000002]
[01:28:00.812]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:28:00.812]        // -> [partNum <= 0x0000BB88]
[01:28:00.812]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:28:00.812]        // -> [manuf <= 0x00000017]
[01:28:00.812]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:28:00.813]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:28:00.813]      isProduction = (version > 0);
[01:28:00.813]        // -> [isProduction <= 0x00000001]
[01:28:00.813]    </block>
[01:28:00.813]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:28:00.813]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:28:00.813]        // =>  FALSE
[01:28:00.815]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:28:00.815]    </control>
[01:28:00.815]    <control if="continueId == 4" while="" timeout="0" info="">
[01:28:00.815]      // if-block "continueId == 4"
[01:28:00.815]        // =>  FALSE
[01:28:00.815]      // skip if-block "continueId == 4"
[01:28:00.815]    </control>
[01:28:00.815]    <control if="!isProduction" while="" timeout="0" info="">
[01:28:00.815]      // if-block "!isProduction"
[01:28:00.815]        // =>  FALSE
[01:28:00.815]      // skip if-block "!isProduction"
[01:28:00.815]    </control>
[01:28:00.816]  </sequence>
[01:28:00.816]  
[01:29:37.661]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:37.661]  
[01:29:37.670]  <debugvars>
[01:29:37.670]    // Pre-defined
[01:29:37.670]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:37.670]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:37.670]    __dp=0x00000000
[01:29:37.670]    __ap=0x00000000
[01:29:37.670]    __traceout=0x00000000      (Trace Disabled)
[01:29:37.670]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:37.671]    __FlashAddr=0x00000000
[01:29:37.671]    __FlashLen=0x00000000
[01:29:37.671]    __FlashArg=0x00000000
[01:29:37.671]    __FlashOp=0x00000000
[01:29:37.671]    __Result=0x00000000
[01:29:37.671]  </debugvars>
[01:29:37.671]  
[01:29:37.671]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:37.671]    <block atomic="false" info="">
[01:29:37.671]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:37.671]        // -> [isSWJ <= 0x00000001]
[01:29:37.671]      __var hasDormant = __protocol & 0x00020000;
[01:29:37.671]        // -> [hasDormant <= 0x00000000]
[01:29:37.673]      __var protType   = __protocol & 0x0000FFFF;
[01:29:37.673]        // -> [protType <= 0x00000002]
[01:29:37.673]    </block>
[01:29:37.673]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:37.673]      // if-block "protType == 1"
[01:29:37.673]        // =>  FALSE
[01:29:37.673]      // skip if-block "protType == 1"
[01:29:37.674]    </control>
[01:29:37.674]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:37.674]      // if-block "protType == 2"
[01:29:37.674]        // =>  TRUE
[01:29:37.674]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:37.674]        // if-block "isSWJ"
[01:29:37.674]          // =>  TRUE
[01:29:37.674]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:37.674]          // if-block "hasDormant"
[01:29:37.674]            // =>  FALSE
[01:29:37.674]          // skip if-block "hasDormant"
[01:29:37.674]        </control>
[01:29:37.675]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:37.675]          // if-block "!hasDormant"
[01:29:37.675]            // =>  TRUE
[01:29:37.675]          <block atomic="false" info="">
[01:29:37.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:37.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:37.677]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:37.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:37.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:37.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:37.681]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:37.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:37.683]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:37.684]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:37.684]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:37.685]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:37.686]          </block>
[01:29:37.686]          // end if-block "!hasDormant"
[01:29:37.686]        </control>
[01:29:37.686]        // end if-block "isSWJ"
[01:29:37.686]      </control>
[01:29:37.686]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:37.687]        // if-block "!isSWJ"
[01:29:37.687]          // =>  FALSE
[01:29:37.687]        // skip if-block "!isSWJ"
[01:29:37.687]      </control>
[01:29:37.687]      <block atomic="false" info="">
[01:29:37.687]        ReadDP(0x0);
[01:29:37.689]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:37.690]      </block>
[01:29:37.690]      // end if-block "protType == 2"
[01:29:37.690]    </control>
[01:29:37.690]  </sequence>
[01:29:37.690]  
[01:29:37.696]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:37.696]  
[01:29:37.696]  <debugvars>
[01:29:37.696]    // Pre-defined
[01:29:37.697]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:37.697]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:37.697]    __dp=0x00000000
[01:29:37.697]    __ap=0x00000000
[01:29:37.697]    __traceout=0x00000000      (Trace Disabled)
[01:29:37.697]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:37.697]    __FlashAddr=0x00000000
[01:29:37.697]    __FlashLen=0x00000000
[01:29:37.697]    __FlashArg=0x00000000
[01:29:37.697]    __FlashOp=0x00000000
[01:29:37.697]    __Result=0x00000000
[01:29:37.698]  </debugvars>
[01:29:37.698]  
[01:29:37.698]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:37.698]    <block atomic="false" info="">
[01:29:37.698]      __var SW_DP_ABORT       = 0x0;
[01:29:37.699]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:37.699]      __var DP_CTRL_STAT      = 0x4;
[01:29:37.699]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:37.699]      __var DP_SELECT         = 0x8;
[01:29:37.699]        // -> [DP_SELECT <= 0x00000008]
[01:29:37.699]      __var powered_down      = 0;
[01:29:37.699]        // -> [powered_down <= 0x00000000]
[01:29:37.699]      WriteDP(DP_SELECT, 0x00000000);
[01:29:37.701]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:37.701]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:37.702]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:37.702]        // -> [powered_down <= 0x00000001]
[01:29:37.702]    </block>
[01:29:37.703]    <control if="powered_down" while="" timeout="0" info="">
[01:29:37.703]      // if-block "powered_down"
[01:29:37.703]        // =>  TRUE
[01:29:37.703]      <block atomic="false" info="">
[01:29:37.703]        Message(0, "Debug/System power-up request sent");
[01:29:37.703]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:37.706]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:37.706]      </block>
[01:29:37.706]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:37.706]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:37.708]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:37.708]        // while-condition  =>  FALSE
[01:29:37.708]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:37.708]      </control>
[01:29:37.708]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:37.708]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:37.708]          // =>  FALSE
[01:29:37.709]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:37.709]      </control>
[01:29:37.709]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:37.709]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:37.709]          // =>  TRUE
[01:29:37.709]        <block atomic="false" info="">
[01:29:37.709]          Message(0, "executing SWD power up");
[01:29:37.709]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:37.717]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:37.717]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:37.718]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:37.718]        </block>
[01:29:37.718]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:37.718]      </control>
[01:29:37.718]      // end if-block "powered_down"
[01:29:37.718]    </control>
[01:29:37.718]    <block atomic="false" info="">
[01:29:37.720]      __var DEBUG_PORT_VAL    = 0;
[01:29:37.720]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:37.720]      __var ACCESS_POINT_VAL  = 0;
[01:29:37.720]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:37.720]      __ap = 1; 
[01:29:37.720]        // -> [__ap <= 0x00000001]
[01:29:37.720]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:37.723]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:37.723]      __ap = 4;
[01:29:37.724]        // -> [__ap <= 0x00000004]
[01:29:37.724]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:37.727]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:37.728]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:37.728]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:37.728]    </block>
[01:29:37.728]    <block atomic="false" info="">
[01:29:37.728]      __var nReset = 0x80;
[01:29:37.728]        // -> [nReset <= 0x00000080]
[01:29:37.728]      __var canReadPins = 0;
[01:29:37.728]        // -> [canReadPins <= 0x00000000]
[01:29:37.728]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:37.730]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:37.730]        // -> [canReadPins <= 0x00000001]
[01:29:37.730]    </block>
[01:29:37.730]    <control if="" while="1" timeout="200" info="">
[01:29:37.730]      // while "1"  (timeout="200")
[01:29:37.731]      // while-condition  =>  TRUE
[01:29:37.731]      // while "1"  (timeout="200")
[01:29:37.731]      // while-condition  =>  TRUE
[01:29:37.731]      // while "1"  (timeout="200")
[01:29:37.731]      // while-condition  =>  TRUE
[01:29:37.731]      // while "1"  (timeout="200")
[01:29:37.731]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.732]      // while "1"  (timeout="200")
[01:29:37.732]      // while-condition  =>  TRUE
[01:29:37.733]      // while "1"  (timeout="200")
[01:29:37.733]      // while-condition  =>  TRUE
[01:29:37.733]      // while "1"  (timeout="200")
[01:29:37.733]      // while-condition  =>  TRUE
[01:29:37.733]      // while "1"  (timeout="200")
[01:29:37.733]      // while-condition  =>  TRUE
[01:29:37.733]      // while "1"  (timeout="200")
[01:29:37.734]      // while-condition  =>  TRUE
[01:29:37.734]      // while "1"  (timeout="200")
[01:29:37.734]      // while-condition  =>  TRUE
[01:29:37.734]      // while "1"  (timeout="200")
[01:29:37.734]      // while-condition  =>  TRUE
[01:29:37.734]      // while "1"  (timeout="200")
[01:29:37.734]      // while-condition  =>  TRUE
[01:29:37.734]      // while "1"  (timeout="200")
[01:29:37.734]      // while-condition  =>  TRUE
[01:29:37.734]      // while "1"  (timeout="200")
[01:29:37.734]      // while-condition  =>  TRUE
[01:29:37.734]      // while "1"  (timeout="200")
[01:29:37.736]      // while-condition  =>  TRUE
[01:29:37.736]      // while "1"  (timeout="200")
[01:29:37.736]      // while  =>  TIMEOUT
[01:29:37.736]      // end while "1"
[01:29:37.736]    </control>
[01:29:37.736]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:37.736]      // if-block "canReadPins"
[01:29:37.736]        // =>  TRUE
[01:29:37.737]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:37.737]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:37.738]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:37.738]        // while-condition  =>  FALSE
[01:29:37.739]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:37.739]      </control>
[01:29:37.739]      // end if-block "canReadPins"
[01:29:37.739]    </control>
[01:29:37.739]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:37.739]      // if-block "!canReadPins"
[01:29:37.739]        // =>  FALSE
[01:29:37.739]      // skip if-block "!canReadPins"
[01:29:37.739]    </control>
[01:29:37.739]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:37.739]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:37.739]        // =>  TRUE
[01:29:37.740]      <block atomic="false" info="">
[01:29:37.740]        WriteAP(0x00, 0x190008);
[01:29:37.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:37.742]        WriteAP(0xF0, 0x01);
[01:29:37.747]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:37.747]      </block>
[01:29:37.747]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:37.747]    </control>
[01:29:37.747]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:37.747]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:37.747]        // =>  FALSE
[01:29:37.747]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:37.747]    </control>
[01:29:37.747]    <block atomic="false" info="">
[01:29:37.747]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:37.753]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:37.753]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:37.753]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:37.754]      __ap = 0; //lets make sure we reset the access point selection
[01:29:37.754]        // -> [__ap <= 0x00000000]
[01:29:37.754]    </block>
[01:29:37.754]  </sequence>
[01:29:37.754]  
[01:29:37.778]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:37.778]  
[01:29:37.778]  <debugvars>
[01:29:37.778]    // Pre-defined
[01:29:37.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:37.778]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:37.778]    __dp=0x00000000
[01:29:37.778]    __ap=0x00000000
[01:29:37.779]    __traceout=0x00000000      (Trace Disabled)
[01:29:37.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:37.779]    __FlashAddr=0x00000000
[01:29:37.779]    __FlashLen=0x00000000
[01:29:37.779]    __FlashArg=0x00000000
[01:29:37.779]    __FlashOp=0x00000000
[01:29:37.779]    __Result=0x00000000
[01:29:37.779]  </debugvars>
[01:29:37.779]  
[01:29:37.779]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:37.779]    <block atomic="false" info="">
[01:29:37.780]      __var deviceID = 0;
[01:29:37.780]        // -> [deviceID <= 0x00000000]
[01:29:37.781]      __var version = 0;
[01:29:37.781]        // -> [version <= 0x00000000]
[01:29:37.781]      __var partNum = 0;
[01:29:37.781]        // -> [partNum <= 0x00000000]
[01:29:37.781]      __var manuf = 0;
[01:29:37.781]        // -> [manuf <= 0x00000000]
[01:29:37.782]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:37.782]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:37.782]      __var isProduction = 0;
[01:29:37.782]        // -> [isProduction <= 0x00000000]
[01:29:37.782]      __var continueId = 0;
[01:29:37.782]        // -> [continueId <= 0x00000000]
[01:29:37.783]      deviceID =   Read32(0x41C40004);
[01:29:37.787]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:37.787]        // -> [deviceID <= 0x2BB8802F]
[01:29:37.787]      version = deviceID >> 28;
[01:29:37.787]        // -> [version <= 0x00000002]
[01:29:37.787]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:37.787]        // -> [partNum <= 0x0000BB88]
[01:29:37.787]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:37.788]        // -> [manuf <= 0x00000017]
[01:29:37.788]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:37.788]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:37.788]      isProduction = (version > 0);
[01:29:37.788]        // -> [isProduction <= 0x00000001]
[01:29:37.788]    </block>
[01:29:37.788]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:37.788]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:37.788]        // =>  FALSE
[01:29:37.788]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:37.788]    </control>
[01:29:37.789]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:37.789]      // if-block "continueId == 4"
[01:29:37.789]        // =>  FALSE
[01:29:37.789]      // skip if-block "continueId == 4"
[01:29:37.789]    </control>
[01:29:37.789]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:37.789]      // if-block "!isProduction"
[01:29:37.789]        // =>  FALSE
[01:29:37.789]      // skip if-block "!isProduction"
[01:29:37.789]    </control>
[01:29:37.789]  </sequence>
[01:29:37.789]  
[01:32:58.130]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:32:58.130]  
[01:32:58.131]  <debugvars>
[01:32:58.131]    // Pre-defined
[01:32:58.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:58.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:58.131]    __dp=0x00000000
[01:32:58.132]    __ap=0x00000000
[01:32:58.132]    __traceout=0x00000000      (Trace Disabled)
[01:32:58.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:58.132]    __FlashAddr=0x00000000
[01:32:58.132]    __FlashLen=0x00000000
[01:32:58.132]    __FlashArg=0x00000000
[01:32:58.132]    __FlashOp=0x00000000
[01:32:58.132]    __Result=0x00000000
[01:32:58.132]  </debugvars>
[01:32:58.132]  
[01:32:58.132]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:32:58.133]    <block atomic="false" info="">
[01:32:58.133]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:32:58.133]        // -> [isSWJ <= 0x00000001]
[01:32:58.133]      __var hasDormant = __protocol & 0x00020000;
[01:32:58.133]        // -> [hasDormant <= 0x00000000]
[01:32:58.133]      __var protType   = __protocol & 0x0000FFFF;
[01:32:58.133]        // -> [protType <= 0x00000002]
[01:32:58.133]    </block>
[01:32:58.133]    <control if="protType == 1" while="" timeout="0" info="">
[01:32:58.133]      // if-block "protType == 1"
[01:32:58.134]        // =>  FALSE
[01:32:58.134]      // skip if-block "protType == 1"
[01:32:58.134]    </control>
[01:32:58.134]    <control if="protType == 2" while="" timeout="0" info="">
[01:32:58.134]      // if-block "protType == 2"
[01:32:58.134]        // =>  TRUE
[01:32:58.134]      <control if="isSWJ" while="" timeout="0" info="">
[01:32:58.134]        // if-block "isSWJ"
[01:32:58.134]          // =>  TRUE
[01:32:58.134]        <control if="hasDormant" while="" timeout="0" info="">
[01:32:58.135]          // if-block "hasDormant"
[01:32:58.135]            // =>  FALSE
[01:32:58.135]          // skip if-block "hasDormant"
[01:32:58.135]        </control>
[01:32:58.135]        <control if="!hasDormant" while="" timeout="0" info="">
[01:32:58.135]          // if-block "!hasDormant"
[01:32:58.135]            // =>  TRUE
[01:32:58.135]          <block atomic="false" info="">
[01:32:58.135]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:32:58.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:58.137]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:32:58.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:32:58.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:32:58.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:58.142]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:32:58.143]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:32:58.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:32:58.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:58.144]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:32:58.145]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:32:58.145]          </block>
[01:32:58.146]          // end if-block "!hasDormant"
[01:32:58.146]        </control>
[01:32:58.146]        // end if-block "isSWJ"
[01:32:58.146]      </control>
[01:32:58.146]      <control if="!isSWJ" while="" timeout="0" info="">
[01:32:58.146]        // if-block "!isSWJ"
[01:32:58.146]          // =>  FALSE
[01:32:58.148]        // skip if-block "!isSWJ"
[01:32:58.148]      </control>
[01:32:58.148]      <block atomic="false" info="">
[01:32:58.148]        ReadDP(0x0);
[01:32:58.149]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:32:58.149]      </block>
[01:32:58.150]      // end if-block "protType == 2"
[01:32:58.150]    </control>
[01:32:58.150]  </sequence>
[01:32:58.150]  
[01:32:58.153]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:32:58.153]  
[01:32:58.153]  <debugvars>
[01:32:58.153]    // Pre-defined
[01:32:58.153]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:58.153]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:58.153]    __dp=0x00000000
[01:32:58.153]    __ap=0x00000000
[01:32:58.154]    __traceout=0x00000000      (Trace Disabled)
[01:32:58.154]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:58.154]    __FlashAddr=0x00000000
[01:32:58.154]    __FlashLen=0x00000000
[01:32:58.154]    __FlashArg=0x00000000
[01:32:58.154]    __FlashOp=0x00000000
[01:32:58.154]    __Result=0x00000000
[01:32:58.154]  </debugvars>
[01:32:58.154]  
[01:32:58.154]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:32:58.155]    <block atomic="false" info="">
[01:32:58.155]      __var SW_DP_ABORT       = 0x0;
[01:32:58.155]        // -> [SW_DP_ABORT <= 0x00000000]
[01:32:58.155]      __var DP_CTRL_STAT      = 0x4;
[01:32:58.155]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:32:58.155]      __var DP_SELECT         = 0x8;
[01:32:58.155]        // -> [DP_SELECT <= 0x00000008]
[01:32:58.155]      __var powered_down      = 0;
[01:32:58.155]        // -> [powered_down <= 0x00000000]
[01:32:58.155]      WriteDP(DP_SELECT, 0x00000000);
[01:32:58.157]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:32:58.157]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:32:58.159]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:32:58.159]        // -> [powered_down <= 0x00000001]
[01:32:58.160]    </block>
[01:32:58.160]    <control if="powered_down" while="" timeout="0" info="">
[01:32:58.160]      // if-block "powered_down"
[01:32:58.160]        // =>  TRUE
[01:32:58.160]      <block atomic="false" info="">
[01:32:58.160]        Message(0, "Debug/System power-up request sent");
[01:32:58.161]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:32:58.163]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:32:58.163]      </block>
[01:32:58.163]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:32:58.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:32:58.165]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:32:58.165]        // while-condition  =>  FALSE
[01:32:58.165]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:32:58.165]      </control>
[01:32:58.165]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:32:58.165]        // if-block "(__protocol & 0xFFFF) == 1"
[01:32:58.166]          // =>  FALSE
[01:32:58.166]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:32:58.166]      </control>
[01:32:58.166]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:32:58.166]        // if-block "(__protocol & 0xFFFF) == 2"
[01:32:58.166]          // =>  TRUE
[01:32:58.166]        <block atomic="false" info="">
[01:32:58.166]          Message(0, "executing SWD power up");
[01:32:58.167]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:32:58.172]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:32:58.172]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:32:58.173]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:32:58.173]        </block>
[01:32:58.173]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:32:58.173]      </control>
[01:32:58.173]      // end if-block "powered_down"
[01:32:58.174]    </control>
[01:32:58.174]    <block atomic="false" info="">
[01:32:58.174]      __var DEBUG_PORT_VAL    = 0;
[01:32:58.174]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:32:58.174]      __var ACCESS_POINT_VAL  = 0;
[01:32:58.174]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:32:58.174]      __ap = 1; 
[01:32:58.174]        // -> [__ap <= 0x00000001]
[01:32:58.174]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:32:58.182]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:32:58.182]      __ap = 4;
[01:32:58.182]        // -> [__ap <= 0x00000004]
[01:32:58.182]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:58.186]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:32:58.186]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:32:58.186]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:58.186]    </block>
[01:32:58.186]    <block atomic="false" info="">
[01:32:58.188]      __var nReset = 0x80;
[01:32:58.188]        // -> [nReset <= 0x00000080]
[01:32:58.188]      __var canReadPins = 0;
[01:32:58.188]        // -> [canReadPins <= 0x00000000]
[01:32:58.188]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:32:58.191]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:32:58.191]        // -> [canReadPins <= 0x00000001]
[01:32:58.191]    </block>
[01:32:58.191]    <control if="" while="1" timeout="200" info="">
[01:32:58.191]      // while "1"  (timeout="200")
[01:32:58.191]      // while-condition  =>  TRUE
[01:32:58.192]      // while "1"  (timeout="200")
[01:32:58.192]      // while-condition  =>  TRUE
[01:32:58.192]      // while "1"  (timeout="200")
[01:32:58.192]      // while-condition  =>  TRUE
[01:32:58.192]      // while "1"  (timeout="200")
[01:32:58.192]      // while-condition  =>  TRUE
[01:32:58.192]      // while "1"  (timeout="200")
[01:32:58.192]      // while-condition  =>  TRUE
[01:32:58.192]      // while "1"  (timeout="200")
[01:32:58.192]      // while-condition  =>  TRUE
[01:32:58.193]      // while "1"  (timeout="200")
[01:32:58.193]      // while-condition  =>  TRUE
[01:32:58.193]      // while "1"  (timeout="200")
[01:32:58.193]      // while-condition  =>  TRUE
[01:32:58.193]      // while "1"  (timeout="200")
[01:32:58.193]      // while-condition  =>  TRUE
[01:32:58.193]      // while "1"  (timeout="200")
[01:32:58.193]      // while-condition  =>  TRUE
[01:32:58.193]      // while "1"  (timeout="200")
[01:32:58.193]      // while-condition  =>  TRUE
[01:32:58.194]      // while "1"  (timeout="200")
[01:32:58.194]      // while-condition  =>  TRUE
[01:32:58.194]      // while "1"  (timeout="200")
[01:32:58.194]      // while-condition  =>  TRUE
[01:32:58.194]      // while "1"  (timeout="200")
[01:32:58.194]      // while-condition  =>  TRUE
[01:32:58.194]      // while "1"  (timeout="200")
[01:32:58.194]      // while-condition  =>  TRUE
[01:32:58.194]      // while "1"  (timeout="200")
[01:32:58.194]      // while-condition  =>  TRUE
[01:32:58.195]      // while "1"  (timeout="200")
[01:32:58.195]      // while-condition  =>  TRUE
[01:32:58.195]      // while "1"  (timeout="200")
[01:32:58.195]      // while-condition  =>  TRUE
[01:32:58.195]      // while "1"  (timeout="200")
[01:32:58.196]      // while-condition  =>  TRUE
[01:32:58.196]      // while "1"  (timeout="200")
[01:32:58.196]      // while-condition  =>  TRUE
[01:32:58.196]      // while "1"  (timeout="200")
[01:32:58.196]      // while-condition  =>  TRUE
[01:32:58.196]      // while "1"  (timeout="200")
[01:32:58.196]      // while-condition  =>  TRUE
[01:32:58.196]      // while "1"  (timeout="200")
[01:32:58.197]      // while-condition  =>  TRUE
[01:32:58.197]      // while "1"  (timeout="200")
[01:32:58.197]      // while-condition  =>  TRUE
[01:32:58.197]      // while "1"  (timeout="200")
[01:32:58.197]      // while-condition  =>  TRUE
[01:32:58.197]      // while "1"  (timeout="200")
[01:32:58.197]      // while-condition  =>  TRUE
[01:32:58.197]      // while "1"  (timeout="200")
[01:32:58.197]      // while-condition  =>  TRUE
[01:32:58.197]      // while "1"  (timeout="200")
[01:32:58.197]      // while-condition  =>  TRUE
[01:32:58.198]      // while "1"  (timeout="200")
[01:32:58.198]      // while-condition  =>  TRUE
[01:32:58.198]      // while "1"  (timeout="200")
[01:32:58.198]      // while-condition  =>  TRUE
[01:32:58.198]      // while "1"  (timeout="200")
[01:32:58.198]      // while-condition  =>  TRUE
[01:32:58.198]      // while "1"  (timeout="200")
[01:32:58.198]      // while-condition  =>  TRUE
[01:32:58.198]      // while "1"  (timeout="200")
[01:32:58.198]      // while-condition  =>  TRUE
[01:32:58.199]      // while "1"  (timeout="200")
[01:32:58.199]      // while-condition  =>  TRUE
[01:32:58.199]      // while "1"  (timeout="200")
[01:32:58.199]      // while-condition  =>  TRUE
[01:32:58.199]      // while "1"  (timeout="200")
[01:32:58.199]      // while-condition  =>  TRUE
[01:32:58.199]      // while "1"  (timeout="200")
[01:32:58.199]      // while-condition  =>  TRUE
[01:32:58.199]      // while "1"  (timeout="200")
[01:32:58.199]      // while-condition  =>  TRUE
[01:32:58.199]      // while "1"  (timeout="200")
[01:32:58.200]      // while-condition  =>  TRUE
[01:32:58.200]      // while "1"  (timeout="200")
[01:32:58.200]      // while-condition  =>  TRUE
[01:32:58.200]      // while "1"  (timeout="200")
[01:32:58.200]      // while-condition  =>  TRUE
[01:32:58.200]      // while "1"  (timeout="200")
[01:32:58.200]      // while-condition  =>  TRUE
[01:32:58.200]      // while "1"  (timeout="200")
[01:32:58.200]      // while-condition  =>  TRUE
[01:32:58.201]      // while "1"  (timeout="200")
[01:32:58.201]      // while-condition  =>  TRUE
[01:32:58.201]      // while "1"  (timeout="200")
[01:32:58.201]      // while-condition  =>  TRUE
[01:32:58.201]      // while "1"  (timeout="200")
[01:32:58.201]      // while-condition  =>  TRUE
[01:32:58.201]      // while "1"  (timeout="200")
[01:32:58.202]      // while-condition  =>  TRUE
[01:32:58.202]      // while "1"  (timeout="200")
[01:32:58.202]      // while-condition  =>  TRUE
[01:32:58.202]      // while "1"  (timeout="200")
[01:32:58.202]      // while-condition  =>  TRUE
[01:32:58.202]      // while "1"  (timeout="200")
[01:32:58.202]      // while-condition  =>  TRUE
[01:32:58.202]      // while "1"  (timeout="200")
[01:32:58.203]      // while-condition  =>  TRUE
[01:32:58.203]      // while "1"  (timeout="200")
[01:32:58.203]      // while-condition  =>  TRUE
[01:32:58.203]      // while "1"  (timeout="200")
[01:32:58.203]      // while-condition  =>  TRUE
[01:32:58.203]      // while "1"  (timeout="200")
[01:32:58.203]      // while-condition  =>  TRUE
[01:32:58.203]      // while "1"  (timeout="200")
[01:32:58.203]      // while-condition  =>  TRUE
[01:32:58.204]      // while "1"  (timeout="200")
[01:32:58.204]      // while  =>  TIMEOUT
[01:32:58.204]      // end while "1"
[01:32:58.204]    </control>
[01:32:58.204]    <control if="canReadPins" while="" timeout="0" info="">
[01:32:58.204]      // if-block "canReadPins"
[01:32:58.204]        // =>  TRUE
[01:32:58.204]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:32:58.205]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:32:58.207]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:32:58.208]        // while-condition  =>  FALSE
[01:32:58.208]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:32:58.208]      </control>
[01:32:58.208]      // end if-block "canReadPins"
[01:32:58.208]    </control>
[01:32:58.208]    <control if="!canReadPins" while="" timeout="0" info="">
[01:32:58.208]      // if-block "!canReadPins"
[01:32:58.208]        // =>  FALSE
[01:32:58.208]      // skip if-block "!canReadPins"
[01:32:58.208]    </control>
[01:32:58.208]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:32:58.208]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:58.208]        // =>  TRUE
[01:32:58.209]      <block atomic="false" info="">
[01:32:58.209]        WriteAP(0x00, 0x190008);
[01:32:58.213]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:58.214]        WriteAP(0xF0, 0x01);
[01:32:58.217]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:58.217]      </block>
[01:32:58.217]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:58.218]    </control>
[01:32:58.218]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:32:58.218]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:58.218]        // =>  FALSE
[01:32:58.218]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:58.218]    </control>
[01:32:58.218]    <block atomic="false" info="">
[01:32:58.218]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:58.222]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:32:58.222]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:32:58.223]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:58.223]      __ap = 0; //lets make sure we reset the access point selection
[01:32:58.223]        // -> [__ap <= 0x00000000]
[01:32:58.223]    </block>
[01:32:58.224]  </sequence>
[01:32:58.224]  
[01:32:58.248]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:32:58.248]  
[01:32:58.248]  <debugvars>
[01:32:58.248]    // Pre-defined
[01:32:58.248]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:58.248]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:58.249]    __dp=0x00000000
[01:32:58.249]    __ap=0x00000000
[01:32:58.249]    __traceout=0x00000000      (Trace Disabled)
[01:32:58.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:58.249]    __FlashAddr=0x00000000
[01:32:58.249]    __FlashLen=0x00000000
[01:32:58.249]    __FlashArg=0x00000000
[01:32:58.249]    __FlashOp=0x00000000
[01:32:58.249]    __Result=0x00000000
[01:32:58.250]  </debugvars>
[01:32:58.250]  
[01:32:58.250]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:32:58.250]    <block atomic="false" info="">
[01:32:58.250]      __var deviceID = 0;
[01:32:58.250]        // -> [deviceID <= 0x00000000]
[01:32:58.250]      __var version = 0;
[01:32:58.250]        // -> [version <= 0x00000000]
[01:32:58.251]      __var partNum = 0;
[01:32:58.251]        // -> [partNum <= 0x00000000]
[01:32:58.251]      __var manuf = 0;
[01:32:58.251]        // -> [manuf <= 0x00000000]
[01:32:58.251]      __var isMSPM0G1X0X_G3X0X = 0;
[01:32:58.251]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:32:58.251]      __var isProduction = 0;
[01:32:58.252]        // -> [isProduction <= 0x00000000]
[01:32:58.252]      __var continueId = 0;
[01:32:58.252]        // -> [continueId <= 0x00000000]
[01:32:58.252]      deviceID =   Read32(0x41C40004);
[01:32:58.258]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:32:58.258]        // -> [deviceID <= 0x2BB8802F]
[01:32:58.258]      version = deviceID >> 28;
[01:32:58.258]        // -> [version <= 0x00000002]
[01:32:58.258]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:32:58.258]        // -> [partNum <= 0x0000BB88]
[01:32:58.258]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:32:58.258]        // -> [manuf <= 0x00000017]
[01:32:58.258]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:32:58.258]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:32:58.258]      isProduction = (version > 0);
[01:32:58.259]        // -> [isProduction <= 0x00000001]
[01:32:58.259]    </block>
[01:32:58.259]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:32:58.259]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:32:58.259]        // =>  FALSE
[01:32:58.259]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:32:58.259]    </control>
[01:32:58.259]    <control if="continueId == 4" while="" timeout="0" info="">
[01:32:58.259]      // if-block "continueId == 4"
[01:32:58.259]        // =>  FALSE
[01:32:58.260]      // skip if-block "continueId == 4"
[01:32:58.260]    </control>
[01:32:58.260]    <control if="!isProduction" while="" timeout="0" info="">
[01:32:58.260]      // if-block "!isProduction"
[01:32:58.260]        // =>  FALSE
[01:32:58.260]      // skip if-block "!isProduction"
[01:32:58.260]    </control>
[01:32:58.260]  </sequence>
[01:32:58.260]  
[01:33:39.135]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:33:39.135]  
[01:33:39.142]  <debugvars>
[01:33:39.142]    // Pre-defined
[01:33:39.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:39.142]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:39.142]    __dp=0x00000000
[01:33:39.142]    __ap=0x00000000
[01:33:39.142]    __traceout=0x00000000      (Trace Disabled)
[01:33:39.142]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:39.142]    __FlashAddr=0x00000000
[01:33:39.144]    __FlashLen=0x00000000
[01:33:39.144]    __FlashArg=0x00000000
[01:33:39.144]    __FlashOp=0x00000000
[01:33:39.144]    __Result=0x00000000
[01:33:39.144]  </debugvars>
[01:33:39.144]  
[01:33:39.144]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:33:39.144]    <block atomic="false" info="">
[01:33:39.144]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:33:39.144]        // -> [isSWJ <= 0x00000001]
[01:33:39.145]      __var hasDormant = __protocol & 0x00020000;
[01:33:39.145]        // -> [hasDormant <= 0x00000000]
[01:33:39.145]      __var protType   = __protocol & 0x0000FFFF;
[01:33:39.145]        // -> [protType <= 0x00000002]
[01:33:39.145]    </block>
[01:33:39.145]    <control if="protType == 1" while="" timeout="0" info="">
[01:33:39.145]      // if-block "protType == 1"
[01:33:39.145]        // =>  FALSE
[01:33:39.145]      // skip if-block "protType == 1"
[01:33:39.145]    </control>
[01:33:39.145]    <control if="protType == 2" while="" timeout="0" info="">
[01:33:39.146]      // if-block "protType == 2"
[01:33:39.146]        // =>  TRUE
[01:33:39.146]      <control if="isSWJ" while="" timeout="0" info="">
[01:33:39.146]        // if-block "isSWJ"
[01:33:39.146]          // =>  TRUE
[01:33:39.146]        <control if="hasDormant" while="" timeout="0" info="">
[01:33:39.146]          // if-block "hasDormant"
[01:33:39.146]            // =>  FALSE
[01:33:39.146]          // skip if-block "hasDormant"
[01:33:39.146]        </control>
[01:33:39.146]        <control if="!hasDormant" while="" timeout="0" info="">
[01:33:39.147]          // if-block "!hasDormant"
[01:33:39.147]            // =>  TRUE
[01:33:39.147]          <block atomic="false" info="">
[01:33:39.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:33:39.148]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:39.148]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:33:39.150]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:33:39.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:33:39.153]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:39.153]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:33:39.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:33:39.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:33:39.161]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:33:39.161]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:33:39.162]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:33:39.164]          </block>
[01:33:39.164]          // end if-block "!hasDormant"
[01:33:39.164]        </control>
[01:33:39.164]        // end if-block "isSWJ"
[01:33:39.165]      </control>
[01:33:39.165]      <control if="!isSWJ" while="" timeout="0" info="">
[01:33:39.165]        // if-block "!isSWJ"
[01:33:39.165]          // =>  FALSE
[01:33:39.165]        // skip if-block "!isSWJ"
[01:33:39.165]      </control>
[01:33:39.165]      <block atomic="false" info="">
[01:33:39.165]        ReadDP(0x0);
[01:33:39.169]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:33:39.169]      </block>
[01:33:39.169]      // end if-block "protType == 2"
[01:33:39.169]    </control>
[01:33:39.170]  </sequence>
[01:33:39.170]  
[01:33:39.173]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:33:39.173]  
[01:33:39.173]  <debugvars>
[01:33:39.173]    // Pre-defined
[01:33:39.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:39.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:39.173]    __dp=0x00000000
[01:33:39.173]    __ap=0x00000000
[01:33:39.173]    __traceout=0x00000000      (Trace Disabled)
[01:33:39.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:39.173]    __FlashAddr=0x00000000
[01:33:39.173]    __FlashLen=0x00000000
[01:33:39.173]    __FlashArg=0x00000000
[01:33:39.173]    __FlashOp=0x00000000
[01:33:39.173]    __Result=0x00000000
[01:33:39.173]  </debugvars>
[01:33:39.173]  
[01:33:39.173]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:33:39.173]    <block atomic="false" info="">
[01:33:39.174]      __var SW_DP_ABORT       = 0x0;
[01:33:39.175]        // -> [SW_DP_ABORT <= 0x00000000]
[01:33:39.175]      __var DP_CTRL_STAT      = 0x4;
[01:33:39.175]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:33:39.175]      __var DP_SELECT         = 0x8;
[01:33:39.175]        // -> [DP_SELECT <= 0x00000008]
[01:33:39.175]      __var powered_down      = 0;
[01:33:39.175]        // -> [powered_down <= 0x00000000]
[01:33:39.175]      WriteDP(DP_SELECT, 0x00000000);
[01:33:39.177]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:33:39.177]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:33:39.179]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:33:39.179]        // -> [powered_down <= 0x00000001]
[01:33:39.179]    </block>
[01:33:39.179]    <control if="powered_down" while="" timeout="0" info="">
[01:33:39.179]      // if-block "powered_down"
[01:33:39.179]        // =>  TRUE
[01:33:39.179]      <block atomic="false" info="">
[01:33:39.180]        Message(0, "Debug/System power-up request sent");
[01:33:39.180]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:33:39.181]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:33:39.182]      </block>
[01:33:39.182]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:33:39.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:33:39.184]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:33:39.184]        // while-condition  =>  FALSE
[01:33:39.184]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:33:39.184]      </control>
[01:33:39.184]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:33:39.184]        // if-block "(__protocol & 0xFFFF) == 1"
[01:33:39.184]          // =>  FALSE
[01:33:39.184]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:33:39.184]      </control>
[01:33:39.185]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:33:39.185]        // if-block "(__protocol & 0xFFFF) == 2"
[01:33:39.185]          // =>  TRUE
[01:33:39.185]        <block atomic="false" info="">
[01:33:39.185]          Message(0, "executing SWD power up");
[01:33:39.185]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:33:39.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:33:39.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:33:39.189]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:33:39.189]        </block>
[01:33:39.189]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:33:39.189]      </control>
[01:33:39.189]      // end if-block "powered_down"
[01:33:39.189]    </control>
[01:33:39.189]    <block atomic="false" info="">
[01:33:39.189]      __var DEBUG_PORT_VAL    = 0;
[01:33:39.191]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:33:39.191]      __var ACCESS_POINT_VAL  = 0;
[01:33:39.191]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:33:39.191]      __ap = 1; 
[01:33:39.191]        // -> [__ap <= 0x00000001]
[01:33:39.191]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:33:39.194]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:33:39.194]      __ap = 4;
[01:33:39.194]        // -> [__ap <= 0x00000004]
[01:33:39.194]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:39.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:33:39.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:33:39.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:39.197]    </block>
[01:33:39.198]    <block atomic="false" info="">
[01:33:39.198]      __var nReset = 0x80;
[01:33:39.198]        // -> [nReset <= 0x00000080]
[01:33:39.198]      __var canReadPins = 0;
[01:33:39.198]        // -> [canReadPins <= 0x00000000]
[01:33:39.198]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:33:39.202]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:33:39.202]        // -> [canReadPins <= 0x00000001]
[01:33:39.203]    </block>
[01:33:39.203]    <control if="" while="1" timeout="200" info="">
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.203]      // while-condition  =>  TRUE
[01:33:39.203]      // while "1"  (timeout="200")
[01:33:39.204]      // while-condition  =>  TRUE
[01:33:39.204]      // while "1"  (timeout="200")
[01:33:39.204]      // while  =>  TIMEOUT
[01:33:39.204]      // end while "1"
[01:33:39.204]    </control>
[01:33:39.204]    <control if="canReadPins" while="" timeout="0" info="">
[01:33:39.204]      // if-block "canReadPins"
[01:33:39.204]        // =>  TRUE
[01:33:39.205]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:33:39.205]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:33:39.206]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:33:39.206]        // while-condition  =>  FALSE
[01:33:39.208]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:33:39.208]      </control>
[01:33:39.208]      // end if-block "canReadPins"
[01:33:39.208]    </control>
[01:33:39.208]    <control if="!canReadPins" while="" timeout="0" info="">
[01:33:39.208]      // if-block "!canReadPins"
[01:33:39.208]        // =>  FALSE
[01:33:39.208]      // skip if-block "!canReadPins"
[01:33:39.208]    </control>
[01:33:39.208]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:33:39.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:39.209]        // =>  TRUE
[01:33:39.209]      <block atomic="false" info="">
[01:33:39.209]        WriteAP(0x00, 0x190008);
[01:33:39.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:39.211]        WriteAP(0xF0, 0x01);
[01:33:39.214]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:33:39.214]      </block>
[01:33:39.214]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:33:39.214]    </control>
[01:33:39.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:33:39.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:39.214]        // =>  FALSE
[01:33:39.214]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:33:39.214]    </control>
[01:33:39.214]    <block atomic="false" info="">
[01:33:39.214]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:33:39.218]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:33:39.218]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:33:39.218]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:33:39.218]      __ap = 0; //lets make sure we reset the access point selection
[01:33:39.218]        // -> [__ap <= 0x00000000]
[01:33:39.219]    </block>
[01:33:39.219]  </sequence>
[01:33:39.219]  
[01:33:39.240]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:33:39.240]  
[01:33:39.241]  <debugvars>
[01:33:39.241]    // Pre-defined
[01:33:39.241]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:33:39.241]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:33:39.241]    __dp=0x00000000
[01:33:39.241]    __ap=0x00000000
[01:33:39.242]    __traceout=0x00000000      (Trace Disabled)
[01:33:39.242]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:33:39.242]    __FlashAddr=0x00000000
[01:33:39.242]    __FlashLen=0x00000000
[01:33:39.242]    __FlashArg=0x00000000
[01:33:39.242]    __FlashOp=0x00000000
[01:33:39.242]    __Result=0x00000000
[01:33:39.242]  </debugvars>
[01:33:39.242]  
[01:33:39.242]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:33:39.242]    <block atomic="false" info="">
[01:33:39.243]      __var deviceID = 0;
[01:33:39.243]        // -> [deviceID <= 0x00000000]
[01:33:39.243]      __var version = 0;
[01:33:39.243]        // -> [version <= 0x00000000]
[01:33:39.243]      __var partNum = 0;
[01:33:39.243]        // -> [partNum <= 0x00000000]
[01:33:39.243]      __var manuf = 0;
[01:33:39.243]        // -> [manuf <= 0x00000000]
[01:33:39.243]      __var isMSPM0G1X0X_G3X0X = 0;
[01:33:39.243]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:33:39.243]      __var isProduction = 0;
[01:33:39.243]        // -> [isProduction <= 0x00000000]
[01:33:39.244]      __var continueId = 0;
[01:33:39.244]        // -> [continueId <= 0x00000000]
[01:33:39.244]      deviceID =   Read32(0x41C40004);
[01:33:39.253]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:33:39.253]        // -> [deviceID <= 0x2BB8802F]
[01:33:39.253]      version = deviceID >> 28;
[01:33:39.253]        // -> [version <= 0x00000002]
[01:33:39.253]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:33:39.253]        // -> [partNum <= 0x0000BB88]
[01:33:39.254]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:33:39.254]        // -> [manuf <= 0x00000017]
[01:33:39.254]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:33:39.255]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:33:39.255]      isProduction = (version > 0);
[01:33:39.255]        // -> [isProduction <= 0x00000001]
[01:33:39.255]    </block>
[01:33:39.255]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:33:39.255]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:33:39.255]        // =>  FALSE
[01:33:39.256]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:33:39.256]    </control>
[01:33:39.256]    <control if="continueId == 4" while="" timeout="0" info="">
[01:33:39.256]      // if-block "continueId == 4"
[01:33:39.256]        // =>  FALSE
[01:33:39.256]      // skip if-block "continueId == 4"
[01:33:39.256]    </control>
[01:33:39.256]    <control if="!isProduction" while="" timeout="0" info="">
[01:33:39.256]      // if-block "!isProduction"
[01:33:39.256]        // =>  FALSE
[01:33:39.256]      // skip if-block "!isProduction"
[01:33:39.256]    </control>
[01:33:39.256]  </sequence>
[01:33:39.257]  
[01:34:17.978]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:34:17.978]  
[01:34:17.978]  <debugvars>
[01:34:17.978]    // Pre-defined
[01:34:17.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:17.978]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:17.978]    __dp=0x00000000
[01:34:17.979]    __ap=0x00000000
[01:34:17.979]    __traceout=0x00000000      (Trace Disabled)
[01:34:17.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:17.979]    __FlashAddr=0x00000000
[01:34:17.979]    __FlashLen=0x00000000
[01:34:17.979]    __FlashArg=0x00000000
[01:34:17.979]    __FlashOp=0x00000000
[01:34:17.979]    __Result=0x00000000
[01:34:17.980]  </debugvars>
[01:34:17.980]  
[01:34:17.980]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:34:17.980]    <block atomic="false" info="">
[01:34:17.980]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:34:17.980]        // -> [isSWJ <= 0x00000001]
[01:34:17.980]      __var hasDormant = __protocol & 0x00020000;
[01:34:17.980]        // -> [hasDormant <= 0x00000000]
[01:34:17.980]      __var protType   = __protocol & 0x0000FFFF;
[01:34:17.980]        // -> [protType <= 0x00000002]
[01:34:17.980]    </block>
[01:34:17.981]    <control if="protType == 1" while="" timeout="0" info="">
[01:34:17.981]      // if-block "protType == 1"
[01:34:17.981]        // =>  FALSE
[01:34:17.981]      // skip if-block "protType == 1"
[01:34:17.981]    </control>
[01:34:17.981]    <control if="protType == 2" while="" timeout="0" info="">
[01:34:17.981]      // if-block "protType == 2"
[01:34:17.981]        // =>  TRUE
[01:34:17.981]      <control if="isSWJ" while="" timeout="0" info="">
[01:34:17.981]        // if-block "isSWJ"
[01:34:17.981]          // =>  TRUE
[01:34:17.981]        <control if="hasDormant" while="" timeout="0" info="">
[01:34:17.982]          // if-block "hasDormant"
[01:34:17.982]            // =>  FALSE
[01:34:17.982]          // skip if-block "hasDormant"
[01:34:17.982]        </control>
[01:34:17.982]        <control if="!hasDormant" while="" timeout="0" info="">
[01:34:17.982]          // if-block "!hasDormant"
[01:34:17.983]            // =>  TRUE
[01:34:17.983]          <block atomic="false" info="">
[01:34:17.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:34:17.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:17.985]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:34:17.986]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:34:17.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:34:17.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:17.988]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:34:17.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:34:17.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:34:17.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:17.991]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:34:17.992]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:34:17.993]          </block>
[01:34:17.993]          // end if-block "!hasDormant"
[01:34:17.993]        </control>
[01:34:17.993]        // end if-block "isSWJ"
[01:34:17.993]      </control>
[01:34:17.993]      <control if="!isSWJ" while="" timeout="0" info="">
[01:34:17.993]        // if-block "!isSWJ"
[01:34:17.993]          // =>  FALSE
[01:34:17.993]        // skip if-block "!isSWJ"
[01:34:17.993]      </control>
[01:34:17.993]      <block atomic="false" info="">
[01:34:17.993]        ReadDP(0x0);
[01:34:17.995]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:34:17.995]      </block>
[01:34:17.995]      // end if-block "protType == 2"
[01:34:17.995]    </control>
[01:34:17.995]  </sequence>
[01:34:17.995]  
[01:34:18.003]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:34:18.003]  
[01:34:18.003]  <debugvars>
[01:34:18.003]    // Pre-defined
[01:34:18.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:18.003]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:18.003]    __dp=0x00000000
[01:34:18.004]    __ap=0x00000000
[01:34:18.004]    __traceout=0x00000000      (Trace Disabled)
[01:34:18.004]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:18.004]    __FlashAddr=0x00000000
[01:34:18.004]    __FlashLen=0x00000000
[01:34:18.004]    __FlashArg=0x00000000
[01:34:18.004]    __FlashOp=0x00000000
[01:34:18.004]    __Result=0x00000000
[01:34:18.004]  </debugvars>
[01:34:18.004]  
[01:34:18.004]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:34:18.004]    <block atomic="false" info="">
[01:34:18.004]      __var SW_DP_ABORT       = 0x0;
[01:34:18.004]        // -> [SW_DP_ABORT <= 0x00000000]
[01:34:18.005]      __var DP_CTRL_STAT      = 0x4;
[01:34:18.005]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:34:18.005]      __var DP_SELECT         = 0x8;
[01:34:18.005]        // -> [DP_SELECT <= 0x00000008]
[01:34:18.005]      __var powered_down      = 0;
[01:34:18.005]        // -> [powered_down <= 0x00000000]
[01:34:18.005]      WriteDP(DP_SELECT, 0x00000000);
[01:34:18.009]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:34:18.009]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:34:18.012]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:34:18.012]        // -> [powered_down <= 0x00000001]
[01:34:18.012]    </block>
[01:34:18.012]    <control if="powered_down" while="" timeout="0" info="">
[01:34:18.012]      // if-block "powered_down"
[01:34:18.012]        // =>  TRUE
[01:34:18.012]      <block atomic="false" info="">
[01:34:18.012]        Message(0, "Debug/System power-up request sent");
[01:34:18.013]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:34:18.020]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:34:18.020]      </block>
[01:34:18.020]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:34:18.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:34:18.022]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:34:18.022]        // while-condition  =>  FALSE
[01:34:18.022]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:34:18.022]      </control>
[01:34:18.022]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:34:18.022]        // if-block "(__protocol & 0xFFFF) == 1"
[01:34:18.022]          // =>  FALSE
[01:34:18.022]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:34:18.022]      </control>
[01:34:18.022]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:34:18.022]        // if-block "(__protocol & 0xFFFF) == 2"
[01:34:18.022]          // =>  TRUE
[01:34:18.022]        <block atomic="false" info="">
[01:34:18.023]          Message(0, "executing SWD power up");
[01:34:18.023]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:34:18.026]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:34:18.027]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:34:18.028]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:34:18.029]        </block>
[01:34:18.029]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:34:18.029]      </control>
[01:34:18.029]      // end if-block "powered_down"
[01:34:18.029]    </control>
[01:34:18.029]    <block atomic="false" info="">
[01:34:18.029]      __var DEBUG_PORT_VAL    = 0;
[01:34:18.029]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:34:18.029]      __var ACCESS_POINT_VAL  = 0;
[01:34:18.030]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:34:18.030]      __ap = 1; 
[01:34:18.030]        // -> [__ap <= 0x00000001]
[01:34:18.030]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:34:18.034]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:34:18.034]      __ap = 4;
[01:34:18.034]        // -> [__ap <= 0x00000004]
[01:34:18.034]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:18.038]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:34:18.038]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:34:18.038]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:18.038]    </block>
[01:34:18.038]    <block atomic="false" info="">
[01:34:18.039]      __var nReset = 0x80;
[01:34:18.039]        // -> [nReset <= 0x00000080]
[01:34:18.039]      __var canReadPins = 0;
[01:34:18.039]        // -> [canReadPins <= 0x00000000]
[01:34:18.039]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:34:18.041]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:34:18.041]        // -> [canReadPins <= 0x00000001]
[01:34:18.041]    </block>
[01:34:18.041]    <control if="" while="1" timeout="200" info="">
[01:34:18.041]      // while "1"  (timeout="200")
[01:34:18.042]      // while-condition  =>  TRUE
[01:34:18.042]      // while "1"  (timeout="200")
[01:34:18.042]      // while-condition  =>  TRUE
[01:34:18.042]      // while "1"  (timeout="200")
[01:34:18.042]      // while-condition  =>  TRUE
[01:34:18.042]      // while "1"  (timeout="200")
[01:34:18.043]      // while-condition  =>  TRUE
[01:34:18.043]      // while "1"  (timeout="200")
[01:34:18.043]      // while-condition  =>  TRUE
[01:34:18.043]      // while "1"  (timeout="200")
[01:34:18.043]      // while-condition  =>  TRUE
[01:34:18.043]      // while "1"  (timeout="200")
[01:34:18.043]      // while-condition  =>  TRUE
[01:34:18.043]      // while "1"  (timeout="200")
[01:34:18.043]      // while-condition  =>  TRUE
[01:34:18.043]      // while "1"  (timeout="200")
[01:34:18.043]      // while-condition  =>  TRUE
[01:34:18.044]      // while "1"  (timeout="200")
[01:34:18.044]      // while-condition  =>  TRUE
[01:34:18.044]      // while "1"  (timeout="200")
[01:34:18.044]      // while-condition  =>  TRUE
[01:34:18.044]      // while "1"  (timeout="200")
[01:34:18.044]      // while-condition  =>  TRUE
[01:34:18.044]      // while "1"  (timeout="200")
[01:34:18.044]      // while-condition  =>  TRUE
[01:34:18.044]      // while "1"  (timeout="200")
[01:34:18.044]      // while-condition  =>  TRUE
[01:34:18.044]      // while "1"  (timeout="200")
[01:34:18.045]      // while-condition  =>  TRUE
[01:34:18.045]      // while "1"  (timeout="200")
[01:34:18.045]      // while-condition  =>  TRUE
[01:34:18.045]      // while "1"  (timeout="200")
[01:34:18.045]      // while-condition  =>  TRUE
[01:34:18.045]      // while "1"  (timeout="200")
[01:34:18.045]      // while-condition  =>  TRUE
[01:34:18.045]      // while "1"  (timeout="200")
[01:34:18.045]      // while-condition  =>  TRUE
[01:34:18.045]      // while "1"  (timeout="200")
[01:34:18.045]      // while-condition  =>  TRUE
[01:34:18.046]      // while "1"  (timeout="200")
[01:34:18.046]      // while-condition  =>  TRUE
[01:34:18.046]      // while "1"  (timeout="200")
[01:34:18.046]      // while-condition  =>  TRUE
[01:34:18.046]      // while "1"  (timeout="200")
[01:34:18.046]      // while-condition  =>  TRUE
[01:34:18.046]      // while "1"  (timeout="200")
[01:34:18.046]      // while-condition  =>  TRUE
[01:34:18.046]      // while "1"  (timeout="200")
[01:34:18.046]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.047]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.047]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.047]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.047]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.047]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.047]      // while-condition  =>  TRUE
[01:34:18.047]      // while "1"  (timeout="200")
[01:34:18.048]      // while-condition  =>  TRUE
[01:34:18.048]      // while "1"  (timeout="200")
[01:34:18.048]      // while  =>  TIMEOUT
[01:34:18.048]      // end while "1"
[01:34:18.048]    </control>
[01:34:18.048]    <control if="canReadPins" while="" timeout="0" info="">
[01:34:18.048]      // if-block "canReadPins"
[01:34:18.048]        // =>  TRUE
[01:34:18.048]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:34:18.048]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:34:18.051]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:34:18.051]        // while-condition  =>  FALSE
[01:34:18.051]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:34:18.052]      </control>
[01:34:18.052]      // end if-block "canReadPins"
[01:34:18.052]    </control>
[01:34:18.052]    <control if="!canReadPins" while="" timeout="0" info="">
[01:34:18.052]      // if-block "!canReadPins"
[01:34:18.052]        // =>  FALSE
[01:34:18.052]      // skip if-block "!canReadPins"
[01:34:18.052]    </control>
[01:34:18.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:34:18.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:18.052]        // =>  TRUE
[01:34:18.053]      <block atomic="false" info="">
[01:34:18.053]        WriteAP(0x00, 0x190008);
[01:34:18.056]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:18.056]        WriteAP(0xF0, 0x01);
[01:34:18.061]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:18.061]      </block>
[01:34:18.061]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:18.061]    </control>
[01:34:18.061]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:34:18.061]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:18.062]        // =>  FALSE
[01:34:18.062]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:18.062]    </control>
[01:34:18.062]    <block atomic="false" info="">
[01:34:18.062]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:18.068]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:34:18.068]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:34:18.068]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:18.068]      __ap = 0; //lets make sure we reset the access point selection
[01:34:18.068]        // -> [__ap <= 0x00000000]
[01:34:18.068]    </block>
[01:34:18.068]  </sequence>
[01:34:18.068]  
[01:34:18.104]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:34:18.104]  
[01:34:18.104]  <debugvars>
[01:34:18.104]    // Pre-defined
[01:34:18.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:18.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:18.104]    __dp=0x00000000
[01:34:18.104]    __ap=0x00000000
[01:34:18.104]    __traceout=0x00000000      (Trace Disabled)
[01:34:18.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:18.105]    __FlashAddr=0x00000000
[01:34:18.105]    __FlashLen=0x00000000
[01:34:18.105]    __FlashArg=0x00000000
[01:34:18.105]    __FlashOp=0x00000000
[01:34:18.105]    __Result=0x00000000
[01:34:18.105]  </debugvars>
[01:34:18.105]  
[01:34:18.105]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:34:18.105]    <block atomic="false" info="">
[01:34:18.105]      __var deviceID = 0;
[01:34:18.105]        // -> [deviceID <= 0x00000000]
[01:34:18.105]      __var version = 0;
[01:34:18.106]        // -> [version <= 0x00000000]
[01:34:18.106]      __var partNum = 0;
[01:34:18.106]        // -> [partNum <= 0x00000000]
[01:34:18.106]      __var manuf = 0;
[01:34:18.106]        // -> [manuf <= 0x00000000]
[01:34:18.106]      __var isMSPM0G1X0X_G3X0X = 0;
[01:34:18.106]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:34:18.107]      __var isProduction = 0;
[01:34:18.107]        // -> [isProduction <= 0x00000000]
[01:34:18.107]      __var continueId = 0;
[01:34:18.107]        // -> [continueId <= 0x00000000]
[01:34:18.107]      deviceID =   Read32(0x41C40004);
[01:34:18.114]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:34:18.115]        // -> [deviceID <= 0x2BB8802F]
[01:34:18.115]      version = deviceID >> 28;
[01:34:18.115]        // -> [version <= 0x00000002]
[01:34:18.115]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:34:18.115]        // -> [partNum <= 0x0000BB88]
[01:34:18.115]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:34:18.115]        // -> [manuf <= 0x00000017]
[01:34:18.116]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:34:18.116]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:34:18.116]      isProduction = (version > 0);
[01:34:18.116]        // -> [isProduction <= 0x00000001]
[01:34:18.116]    </block>
[01:34:18.116]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:34:18.116]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:34:18.116]        // =>  FALSE
[01:34:18.116]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:34:18.116]    </control>
[01:34:18.116]    <control if="continueId == 4" while="" timeout="0" info="">
[01:34:18.117]      // if-block "continueId == 4"
[01:34:18.117]        // =>  FALSE
[01:34:18.117]      // skip if-block "continueId == 4"
[01:34:18.117]    </control>
[01:34:18.117]    <control if="!isProduction" while="" timeout="0" info="">
[01:34:18.117]      // if-block "!isProduction"
[01:34:18.117]        // =>  FALSE
[01:34:18.118]      // skip if-block "!isProduction"
[01:34:18.118]    </control>
[01:34:18.118]  </sequence>
[01:34:18.118]  
[01:34:27.545]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:34:27.545]  
[01:34:27.546]  <debugvars>
[01:34:27.546]    // Pre-defined
[01:34:27.546]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:27.547]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:27.547]    __dp=0x00000000
[01:34:27.547]    __ap=0x00000000
[01:34:27.547]    __traceout=0x00000000      (Trace Disabled)
[01:34:27.547]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:27.547]    __FlashAddr=0x00000000
[01:34:27.547]    __FlashLen=0x00000000
[01:34:27.547]    __FlashArg=0x00000000
[01:34:27.548]    __FlashOp=0x00000000
[01:34:27.548]    __Result=0x00000000
[01:34:27.548]  </debugvars>
[01:34:27.548]  
[01:34:27.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:34:27.549]    <block atomic="false" info="">
[01:34:27.549]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:34:27.549]        // -> [isSWJ <= 0x00000001]
[01:34:27.549]      __var hasDormant = __protocol & 0x00020000;
[01:34:27.549]        // -> [hasDormant <= 0x00000000]
[01:34:27.549]      __var protType   = __protocol & 0x0000FFFF;
[01:34:27.549]        // -> [protType <= 0x00000002]
[01:34:27.549]    </block>
[01:34:27.549]    <control if="protType == 1" while="" timeout="0" info="">
[01:34:27.549]      // if-block "protType == 1"
[01:34:27.550]        // =>  FALSE
[01:34:27.550]      // skip if-block "protType == 1"
[01:34:27.550]    </control>
[01:34:27.550]    <control if="protType == 2" while="" timeout="0" info="">
[01:34:27.550]      // if-block "protType == 2"
[01:34:27.550]        // =>  TRUE
[01:34:27.550]      <control if="isSWJ" while="" timeout="0" info="">
[01:34:27.550]        // if-block "isSWJ"
[01:34:27.550]          // =>  TRUE
[01:34:27.550]        <control if="hasDormant" while="" timeout="0" info="">
[01:34:27.550]          // if-block "hasDormant"
[01:34:27.550]            // =>  FALSE
[01:34:27.551]          // skip if-block "hasDormant"
[01:34:27.551]        </control>
[01:34:27.551]        <control if="!hasDormant" while="" timeout="0" info="">
[01:34:27.551]          // if-block "!hasDormant"
[01:34:27.551]            // =>  TRUE
[01:34:27.551]          <block atomic="false" info="">
[01:34:27.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:34:27.554]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:27.554]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:34:27.556]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:34:27.556]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:34:27.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:27.558]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:34:27.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:34:27.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:34:27.562]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:34:27.562]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:34:27.564]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:34:27.565]          </block>
[01:34:27.565]          // end if-block "!hasDormant"
[01:34:27.565]        </control>
[01:34:27.565]        // end if-block "isSWJ"
[01:34:27.565]      </control>
[01:34:27.565]      <control if="!isSWJ" while="" timeout="0" info="">
[01:34:27.565]        // if-block "!isSWJ"
[01:34:27.565]          // =>  FALSE
[01:34:27.565]        // skip if-block "!isSWJ"
[01:34:27.565]      </control>
[01:34:27.566]      <block atomic="false" info="">
[01:34:27.566]        ReadDP(0x0);
[01:34:27.568]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:34:27.568]      </block>
[01:34:27.568]      // end if-block "protType == 2"
[01:34:27.568]    </control>
[01:34:27.568]  </sequence>
[01:34:27.568]  
[01:34:27.570]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:34:27.570]  
[01:34:27.571]  <debugvars>
[01:34:27.571]    // Pre-defined
[01:34:27.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:27.571]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:27.571]    __dp=0x00000000
[01:34:27.571]    __ap=0x00000000
[01:34:27.571]    __traceout=0x00000000      (Trace Disabled)
[01:34:27.571]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:27.571]    __FlashAddr=0x00000000
[01:34:27.571]    __FlashLen=0x00000000
[01:34:27.571]    __FlashArg=0x00000000
[01:34:27.572]    __FlashOp=0x00000000
[01:34:27.572]    __Result=0x00000000
[01:34:27.572]  </debugvars>
[01:34:27.572]  
[01:34:27.572]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:34:27.572]    <block atomic="false" info="">
[01:34:27.572]      __var SW_DP_ABORT       = 0x0;
[01:34:27.572]        // -> [SW_DP_ABORT <= 0x00000000]
[01:34:27.572]      __var DP_CTRL_STAT      = 0x4;
[01:34:27.572]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:34:27.572]      __var DP_SELECT         = 0x8;
[01:34:27.574]        // -> [DP_SELECT <= 0x00000008]
[01:34:27.574]      __var powered_down      = 0;
[01:34:27.574]        // -> [powered_down <= 0x00000000]
[01:34:27.574]      WriteDP(DP_SELECT, 0x00000000);
[01:34:27.575]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:34:27.575]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:34:27.577]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:34:27.577]        // -> [powered_down <= 0x00000001]
[01:34:27.577]    </block>
[01:34:27.577]    <control if="powered_down" while="" timeout="0" info="">
[01:34:27.577]      // if-block "powered_down"
[01:34:27.577]        // =>  TRUE
[01:34:27.578]      <block atomic="false" info="">
[01:34:27.578]        Message(0, "Debug/System power-up request sent");
[01:34:27.581]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:34:27.584]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:34:27.584]      </block>
[01:34:27.584]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:34:27.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:34:27.589]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:34:27.589]        // while-condition  =>  FALSE
[01:34:27.589]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:34:27.589]      </control>
[01:34:27.589]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:34:27.589]        // if-block "(__protocol & 0xFFFF) == 1"
[01:34:27.589]          // =>  FALSE
[01:34:27.589]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:34:27.589]      </control>
[01:34:27.589]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:34:27.591]        // if-block "(__protocol & 0xFFFF) == 2"
[01:34:27.591]          // =>  TRUE
[01:34:27.591]        <block atomic="false" info="">
[01:34:27.591]          Message(0, "executing SWD power up");
[01:34:27.594]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:34:27.599]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:34:27.599]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:34:27.601]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:34:27.601]        </block>
[01:34:27.601]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:34:27.601]      </control>
[01:34:27.601]      // end if-block "powered_down"
[01:34:27.601]    </control>
[01:34:27.601]    <block atomic="false" info="">
[01:34:27.601]      __var DEBUG_PORT_VAL    = 0;
[01:34:27.601]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:34:27.601]      __var ACCESS_POINT_VAL  = 0;
[01:34:27.602]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:34:27.602]      __ap = 1; 
[01:34:27.602]        // -> [__ap <= 0x00000001]
[01:34:27.602]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:34:27.605]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:34:27.605]      __ap = 4;
[01:34:27.606]        // -> [__ap <= 0x00000004]
[01:34:27.606]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:27.610]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:34:27.610]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:34:27.610]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:27.612]    </block>
[01:34:27.613]    <block atomic="false" info="">
[01:34:27.613]      __var nReset = 0x80;
[01:34:27.613]        // -> [nReset <= 0x00000080]
[01:34:27.613]      __var canReadPins = 0;
[01:34:27.613]        // -> [canReadPins <= 0x00000000]
[01:34:27.613]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:34:27.614]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:34:27.614]        // -> [canReadPins <= 0x00000001]
[01:34:27.615]    </block>
[01:34:27.615]    <control if="" while="1" timeout="200" info="">
[01:34:27.615]      // while "1"  (timeout="200")
[01:34:27.615]      // while-condition  =>  TRUE
[01:34:27.615]      // while "1"  (timeout="200")
[01:34:27.615]      // while-condition  =>  TRUE
[01:34:27.615]      // while "1"  (timeout="200")
[01:34:27.615]      // while-condition  =>  TRUE
[01:34:27.615]      // while "1"  (timeout="200")
[01:34:27.615]      // while-condition  =>  TRUE
[01:34:27.616]      // while "1"  (timeout="200")
[01:34:27.616]      // while-condition  =>  TRUE
[01:34:27.616]      // while "1"  (timeout="200")
[01:34:27.616]      // while-condition  =>  TRUE
[01:34:27.616]      // while "1"  (timeout="200")
[01:34:27.616]      // while-condition  =>  TRUE
[01:34:27.616]      // while "1"  (timeout="200")
[01:34:27.616]      // while-condition  =>  TRUE
[01:34:27.616]      // while "1"  (timeout="200")
[01:34:27.617]      // while-condition  =>  TRUE
[01:34:27.617]      // while "1"  (timeout="200")
[01:34:27.617]      // while-condition  =>  TRUE
[01:34:27.617]      // while "1"  (timeout="200")
[01:34:27.617]      // while-condition  =>  TRUE
[01:34:27.617]      // while "1"  (timeout="200")
[01:34:27.617]      // while-condition  =>  TRUE
[01:34:27.617]      // while "1"  (timeout="200")
[01:34:27.617]      // while-condition  =>  TRUE
[01:34:27.618]      // while "1"  (timeout="200")
[01:34:27.618]      // while-condition  =>  TRUE
[01:34:27.618]      // while "1"  (timeout="200")
[01:34:27.618]      // while-condition  =>  TRUE
[01:34:27.618]      // while "1"  (timeout="200")
[01:34:27.618]      // while-condition  =>  TRUE
[01:34:27.618]      // while "1"  (timeout="200")
[01:34:27.618]      // while-condition  =>  TRUE
[01:34:27.618]      // while "1"  (timeout="200")
[01:34:27.618]      // while-condition  =>  TRUE
[01:34:27.619]      // while "1"  (timeout="200")
[01:34:27.619]      // while-condition  =>  TRUE
[01:34:27.619]      // while "1"  (timeout="200")
[01:34:27.619]      // while-condition  =>  TRUE
[01:34:27.619]      // while "1"  (timeout="200")
[01:34:27.619]      // while-condition  =>  TRUE
[01:34:27.620]      // while "1"  (timeout="200")
[01:34:27.620]      // while-condition  =>  TRUE
[01:34:27.621]      // while "1"  (timeout="200")
[01:34:27.621]      // while-condition  =>  TRUE
[01:34:27.621]      // while "1"  (timeout="200")
[01:34:27.621]      // while-condition  =>  TRUE
[01:34:27.621]      // while "1"  (timeout="200")
[01:34:27.621]      // while-condition  =>  TRUE
[01:34:27.621]      // while "1"  (timeout="200")
[01:34:27.621]      // while-condition  =>  TRUE
[01:34:27.621]      // while "1"  (timeout="200")
[01:34:27.621]      // while-condition  =>  TRUE
[01:34:27.621]      // while "1"  (timeout="200")
[01:34:27.622]      // while-condition  =>  TRUE
[01:34:27.622]      // while "1"  (timeout="200")
[01:34:27.622]      // while-condition  =>  TRUE
[01:34:27.622]      // while "1"  (timeout="200")
[01:34:27.622]      // while-condition  =>  TRUE
[01:34:27.622]      // while "1"  (timeout="200")
[01:34:27.622]      // while-condition  =>  TRUE
[01:34:27.622]      // while "1"  (timeout="200")
[01:34:27.622]      // while-condition  =>  TRUE
[01:34:27.622]      // while "1"  (timeout="200")
[01:34:27.623]      // while-condition  =>  TRUE
[01:34:27.623]      // while "1"  (timeout="200")
[01:34:27.623]      // while-condition  =>  TRUE
[01:34:27.623]      // while "1"  (timeout="200")
[01:34:27.623]      // while-condition  =>  TRUE
[01:34:27.623]      // while "1"  (timeout="200")
[01:34:27.624]      // while-condition  =>  TRUE
[01:34:27.624]      // while "1"  (timeout="200")
[01:34:27.624]      // while-condition  =>  TRUE
[01:34:27.624]      // while "1"  (timeout="200")
[01:34:27.624]      // while-condition  =>  TRUE
[01:34:27.624]      // while "1"  (timeout="200")
[01:34:27.624]      // while-condition  =>  TRUE
[01:34:27.624]      // while "1"  (timeout="200")
[01:34:27.625]      // while-condition  =>  TRUE
[01:34:27.625]      // while "1"  (timeout="200")
[01:34:27.625]      // while-condition  =>  TRUE
[01:34:27.625]      // while "1"  (timeout="200")
[01:34:27.625]      // while-condition  =>  TRUE
[01:34:27.625]      // while "1"  (timeout="200")
[01:34:27.625]      // while-condition  =>  TRUE
[01:34:27.625]      // while "1"  (timeout="200")
[01:34:27.625]      // while-condition  =>  TRUE
[01:34:27.625]      // while "1"  (timeout="200")
[01:34:27.626]      // while-condition  =>  TRUE
[01:34:27.626]      // while "1"  (timeout="200")
[01:34:27.626]      // while  =>  TIMEOUT
[01:34:27.626]      // end while "1"
[01:34:27.626]    </control>
[01:34:27.626]    <control if="canReadPins" while="" timeout="0" info="">
[01:34:27.626]      // if-block "canReadPins"
[01:34:27.626]        // =>  TRUE
[01:34:27.626]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:34:27.626]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:34:27.628]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:34:27.628]        // while-condition  =>  FALSE
[01:34:27.628]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:34:27.628]      </control>
[01:34:27.629]      // end if-block "canReadPins"
[01:34:27.629]    </control>
[01:34:27.629]    <control if="!canReadPins" while="" timeout="0" info="">
[01:34:27.629]      // if-block "!canReadPins"
[01:34:27.629]        // =>  FALSE
[01:34:27.630]      // skip if-block "!canReadPins"
[01:34:27.630]    </control>
[01:34:27.630]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:34:27.630]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:27.630]        // =>  TRUE
[01:34:27.630]      <block atomic="false" info="">
[01:34:27.630]        WriteAP(0x00, 0x190008);
[01:34:27.635]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:27.635]        WriteAP(0xF0, 0x01);
[01:34:27.639]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:34:27.639]      </block>
[01:34:27.639]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:34:27.639]    </control>
[01:34:27.640]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:34:27.641]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:27.641]        // =>  FALSE
[01:34:27.641]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:34:27.641]    </control>
[01:34:27.641]    <block atomic="false" info="">
[01:34:27.641]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:34:27.645]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:34:27.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:34:27.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:34:27.648]      __ap = 0; //lets make sure we reset the access point selection
[01:34:27.648]        // -> [__ap <= 0x00000000]
[01:34:27.649]    </block>
[01:34:27.649]  </sequence>
[01:34:27.649]  
[01:34:27.673]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:34:27.673]  
[01:34:27.673]  <debugvars>
[01:34:27.673]    // Pre-defined
[01:34:27.673]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:34:27.674]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:34:27.674]    __dp=0x00000000
[01:34:27.674]    __ap=0x00000000
[01:34:27.675]    __traceout=0x00000000      (Trace Disabled)
[01:34:27.675]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:34:27.675]    __FlashAddr=0x00000000
[01:34:27.675]    __FlashLen=0x00000000
[01:34:27.675]    __FlashArg=0x00000000
[01:34:27.675]    __FlashOp=0x00000000
[01:34:27.675]    __Result=0x00000000
[01:34:27.675]  </debugvars>
[01:34:27.675]  
[01:34:27.675]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:34:27.676]    <block atomic="false" info="">
[01:34:27.676]      __var deviceID = 0;
[01:34:27.676]        // -> [deviceID <= 0x00000000]
[01:34:27.676]      __var version = 0;
[01:34:27.676]        // -> [version <= 0x00000000]
[01:34:27.676]      __var partNum = 0;
[01:34:27.676]        // -> [partNum <= 0x00000000]
[01:34:27.676]      __var manuf = 0;
[01:34:27.677]        // -> [manuf <= 0x00000000]
[01:34:27.677]      __var isMSPM0G1X0X_G3X0X = 0;
[01:34:27.677]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:34:27.677]      __var isProduction = 0;
[01:34:27.677]        // -> [isProduction <= 0x00000000]
[01:34:27.677]      __var continueId = 0;
[01:34:27.677]        // -> [continueId <= 0x00000000]
[01:34:27.677]      deviceID =   Read32(0x41C40004);
[01:34:27.682]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:34:27.682]        // -> [deviceID <= 0x2BB8802F]
[01:34:27.682]      version = deviceID >> 28;
[01:34:27.682]        // -> [version <= 0x00000002]
[01:34:27.682]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:34:27.682]        // -> [partNum <= 0x0000BB88]
[01:34:27.683]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:34:27.683]        // -> [manuf <= 0x00000017]
[01:34:27.683]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:34:27.683]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:34:27.684]      isProduction = (version > 0);
[01:34:27.684]        // -> [isProduction <= 0x00000001]
[01:34:27.684]    </block>
[01:34:27.684]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:34:27.684]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:34:27.684]        // =>  FALSE
[01:34:27.684]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:34:27.684]    </control>
[01:34:27.684]    <control if="continueId == 4" while="" timeout="0" info="">
[01:34:27.684]      // if-block "continueId == 4"
[01:34:27.684]        // =>  FALSE
[01:34:27.685]      // skip if-block "continueId == 4"
[01:34:27.685]    </control>
[01:34:27.685]    <control if="!isProduction" while="" timeout="0" info="">
[01:34:27.685]      // if-block "!isProduction"
[01:34:27.685]        // =>  FALSE
[01:34:27.685]      // skip if-block "!isProduction"
[01:34:27.685]    </control>
[01:34:27.685]  </sequence>
[01:34:27.685]  
[01:35:16.969]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:35:16.969]  
[01:35:16.970]  <debugvars>
[01:35:16.970]    // Pre-defined
[01:35:16.970]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:35:16.970]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:35:16.970]    __dp=0x00000000
[01:35:16.970]    __ap=0x00000000
[01:35:16.970]    __traceout=0x00000000      (Trace Disabled)
[01:35:16.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:35:16.971]    __FlashAddr=0x00000000
[01:35:16.971]    __FlashLen=0x00000000
[01:35:16.971]    __FlashArg=0x00000000
[01:35:16.971]    __FlashOp=0x00000000
[01:35:16.971]    __Result=0x00000000
[01:35:16.971]  </debugvars>
[01:35:16.971]  
[01:35:16.971]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:35:16.971]    <block atomic="false" info="">
[01:35:16.971]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:35:16.972]        // -> [isSWJ <= 0x00000001]
[01:35:16.972]      __var hasDormant = __protocol & 0x00020000;
[01:35:16.972]        // -> [hasDormant <= 0x00000000]
[01:35:16.972]      __var protType   = __protocol & 0x0000FFFF;
[01:35:16.972]        // -> [protType <= 0x00000002]
[01:35:16.972]    </block>
[01:35:16.972]    <control if="protType == 1" while="" timeout="0" info="">
[01:35:16.973]      // if-block "protType == 1"
[01:35:16.973]        // =>  FALSE
[01:35:16.973]      // skip if-block "protType == 1"
[01:35:16.974]    </control>
[01:35:16.974]    <control if="protType == 2" while="" timeout="0" info="">
[01:35:16.974]      // if-block "protType == 2"
[01:35:16.974]        // =>  TRUE
[01:35:16.974]      <control if="isSWJ" while="" timeout="0" info="">
[01:35:16.974]        // if-block "isSWJ"
[01:35:16.974]          // =>  TRUE
[01:35:16.975]        <control if="hasDormant" while="" timeout="0" info="">
[01:35:16.975]          // if-block "hasDormant"
[01:35:16.975]            // =>  FALSE
[01:35:16.975]          // skip if-block "hasDormant"
[01:35:16.975]        </control>
[01:35:16.975]        <control if="!hasDormant" while="" timeout="0" info="">
[01:35:16.975]          // if-block "!hasDormant"
[01:35:16.975]            // =>  TRUE
[01:35:16.975]          <block atomic="false" info="">
[01:35:16.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:35:16.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:35:16.978]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:35:16.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:35:16.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:35:16.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:35:16.981]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:35:16.983]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:35:16.983]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:35:16.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:35:16.985]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:35:16.987]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:35:16.987]          </block>
[01:35:16.987]          // end if-block "!hasDormant"
[01:35:16.987]        </control>
[01:35:16.987]        // end if-block "isSWJ"
[01:35:16.987]      </control>
[01:35:16.988]      <control if="!isSWJ" while="" timeout="0" info="">
[01:35:16.988]        // if-block "!isSWJ"
[01:35:16.988]          // =>  FALSE
[01:35:16.988]        // skip if-block "!isSWJ"
[01:35:16.988]      </control>
[01:35:16.988]      <block atomic="false" info="">
[01:35:16.988]        ReadDP(0x0);
[01:35:16.989]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:35:16.989]      </block>
[01:35:16.989]      // end if-block "protType == 2"
[01:35:16.989]    </control>
[01:35:16.989]  </sequence>
[01:35:16.990]  
[01:35:16.993]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:35:16.993]  
[01:35:16.993]  <debugvars>
[01:35:16.993]    // Pre-defined
[01:35:16.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:35:16.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:35:16.994]    __dp=0x00000000
[01:35:16.994]    __ap=0x00000000
[01:35:16.994]    __traceout=0x00000000      (Trace Disabled)
[01:35:16.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:35:16.994]    __FlashAddr=0x00000000
[01:35:16.994]    __FlashLen=0x00000000
[01:35:16.994]    __FlashArg=0x00000000
[01:35:16.994]    __FlashOp=0x00000000
[01:35:16.994]    __Result=0x00000000
[01:35:16.994]  </debugvars>
[01:35:16.995]  
[01:35:16.995]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:35:16.995]    <block atomic="false" info="">
[01:35:16.995]      __var SW_DP_ABORT       = 0x0;
[01:35:16.995]        // -> [SW_DP_ABORT <= 0x00000000]
[01:35:16.995]      __var DP_CTRL_STAT      = 0x4;
[01:35:16.995]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:35:16.995]      __var DP_SELECT         = 0x8;
[01:35:16.995]        // -> [DP_SELECT <= 0x00000008]
[01:35:16.995]      __var powered_down      = 0;
[01:35:16.995]        // -> [powered_down <= 0x00000000]
[01:35:16.996]      WriteDP(DP_SELECT, 0x00000000);
[01:35:16.997]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:35:16.997]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:35:17.003]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:35:17.003]        // -> [powered_down <= 0x00000001]
[01:35:17.003]    </block>
[01:35:17.003]    <control if="powered_down" while="" timeout="0" info="">
[01:35:17.003]      // if-block "powered_down"
[01:35:17.003]        // =>  TRUE
[01:35:17.003]      <block atomic="false" info="">
[01:35:17.003]        Message(0, "Debug/System power-up request sent");
[01:35:17.004]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:35:17.005]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:35:17.006]      </block>
[01:35:17.006]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:35:17.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:35:17.008]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:35:17.008]        // while-condition  =>  FALSE
[01:35:17.008]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:35:17.008]      </control>
[01:35:17.008]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:35:17.008]        // if-block "(__protocol & 0xFFFF) == 1"
[01:35:17.008]          // =>  FALSE
[01:35:17.008]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:35:17.009]      </control>
[01:35:17.009]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:35:17.009]        // if-block "(__protocol & 0xFFFF) == 2"
[01:35:17.009]          // =>  TRUE
[01:35:17.009]        <block atomic="false" info="">
[01:35:17.009]          Message(0, "executing SWD power up");
[01:35:17.010]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:35:17.011]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:35:17.011]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:35:17.014]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:35:17.014]        </block>
[01:35:17.014]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:35:17.014]      </control>
[01:35:17.015]      // end if-block "powered_down"
[01:35:17.015]    </control>
[01:35:17.015]    <block atomic="false" info="">
[01:35:17.015]      __var DEBUG_PORT_VAL    = 0;
[01:35:17.015]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:35:17.015]      __var ACCESS_POINT_VAL  = 0;
[01:35:17.015]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:35:17.015]      __ap = 1; 
[01:35:17.015]        // -> [__ap <= 0x00000001]
[01:35:17.015]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:35:17.019]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:35:17.019]      __ap = 4;
[01:35:17.019]        // -> [__ap <= 0x00000004]
[01:35:17.019]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:35:17.023]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:35:17.023]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:35:17.024]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:35:17.024]    </block>
[01:35:17.024]    <block atomic="false" info="">
[01:35:17.024]      __var nReset = 0x80;
[01:35:17.024]        // -> [nReset <= 0x00000080]
[01:35:17.025]      __var canReadPins = 0;
[01:35:17.025]        // -> [canReadPins <= 0x00000000]
[01:35:17.025]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:35:17.026]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:35:17.026]        // -> [canReadPins <= 0x00000001]
[01:35:17.027]    </block>
[01:35:17.027]    <control if="" while="1" timeout="200" info="">
[01:35:17.027]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.028]      // while "1"  (timeout="200")
[01:35:17.028]      // while-condition  =>  TRUE
[01:35:17.029]      // while "1"  (timeout="200")
[01:35:17.029]      // while-condition  =>  TRUE
[01:35:17.029]      // while "1"  (timeout="200")
[01:35:17.029]      // while-condition  =>  TRUE
[01:35:17.029]      // while "1"  (timeout="200")
[01:35:17.029]      // while-condition  =>  TRUE
[01:35:17.029]      // while "1"  (timeout="200")
[01:35:17.030]      // while-condition  =>  TRUE
[01:35:17.030]      // while "1"  (timeout="200")
[01:35:17.030]      // while-condition  =>  TRUE
[01:35:17.030]      // while "1"  (timeout="200")
[01:35:17.030]      // while-condition  =>  TRUE
[01:35:17.030]      // while "1"  (timeout="200")
[01:35:17.030]      // while-condition  =>  TRUE
[01:35:17.030]      // while "1"  (timeout="200")
[01:35:17.031]      // while-condition  =>  TRUE
[01:35:17.031]      // while "1"  (timeout="200")
[01:35:17.031]      // while-condition  =>  TRUE
[01:35:17.031]      // while "1"  (timeout="200")
[01:35:17.031]      // while-condition  =>  TRUE
[01:35:17.031]      // while "1"  (timeout="200")
[01:35:17.031]      // while-condition  =>  TRUE
[01:35:17.031]      // while "1"  (timeout="200")
[01:35:17.031]      // while-condition  =>  TRUE
[01:35:17.031]      // while "1"  (timeout="200")
[01:35:17.031]      // while-condition  =>  TRUE
[01:35:17.031]      // while "1"  (timeout="200")
[01:35:17.032]      // while-condition  =>  TRUE
[01:35:17.032]      // while "1"  (timeout="200")
[01:35:17.032]      // while  =>  TIMEOUT
[01:35:17.032]      // end while "1"
[01:35:17.032]    </control>
[01:35:17.032]    <control if="canReadPins" while="" timeout="0" info="">
[01:35:17.032]      // if-block "canReadPins"
[01:35:17.032]        // =>  TRUE
[01:35:17.032]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:35:17.032]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:35:17.034]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:35:17.034]        // while-condition  =>  FALSE
[01:35:17.034]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:35:17.034]      </control>
[01:35:17.034]      // end if-block "canReadPins"
[01:35:17.035]    </control>
[01:35:17.035]    <control if="!canReadPins" while="" timeout="0" info="">
[01:35:17.035]      // if-block "!canReadPins"
[01:35:17.035]        // =>  FALSE
[01:35:17.035]      // skip if-block "!canReadPins"
[01:35:17.035]    </control>
[01:35:17.035]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:35:17.035]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:35:17.035]        // =>  TRUE
[01:35:17.035]      <block atomic="false" info="">
[01:35:17.036]        WriteAP(0x00, 0x190008);
[01:35:17.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:35:17.041]        WriteAP(0xF0, 0x01);
[01:35:17.044]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:35:17.044]      </block>
[01:35:17.045]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:35:17.045]    </control>
[01:35:17.045]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:35:17.046]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:35:17.046]        // =>  FALSE
[01:35:17.046]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:35:17.046]    </control>
[01:35:17.046]    <block atomic="false" info="">
[01:35:17.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:35:17.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:35:17.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:35:17.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:35:17.052]      __ap = 0; //lets make sure we reset the access point selection
[01:35:17.053]        // -> [__ap <= 0x00000000]
[01:35:17.053]    </block>
[01:35:17.053]  </sequence>
[01:35:17.053]  
[01:35:17.078]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:35:17.078]  
[01:35:17.078]  <debugvars>
[01:35:17.078]    // Pre-defined
[01:35:17.079]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:35:17.079]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:35:17.079]    __dp=0x00000000
[01:35:17.079]    __ap=0x00000000
[01:35:17.079]    __traceout=0x00000000      (Trace Disabled)
[01:35:17.079]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:35:17.080]    __FlashAddr=0x00000000
[01:35:17.080]    __FlashLen=0x00000000
[01:35:17.080]    __FlashArg=0x00000000
[01:35:17.080]    __FlashOp=0x00000000
[01:35:17.080]    __Result=0x00000000
[01:35:17.080]  </debugvars>
[01:35:17.080]  
[01:35:17.080]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:35:17.080]    <block atomic="false" info="">
[01:35:17.081]      __var deviceID = 0;
[01:35:17.081]        // -> [deviceID <= 0x00000000]
[01:35:17.081]      __var version = 0;
[01:35:17.081]        // -> [version <= 0x00000000]
[01:35:17.081]      __var partNum = 0;
[01:35:17.081]        // -> [partNum <= 0x00000000]
[01:35:17.081]      __var manuf = 0;
[01:35:17.081]        // -> [manuf <= 0x00000000]
[01:35:17.081]      __var isMSPM0G1X0X_G3X0X = 0;
[01:35:17.081]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:35:17.081]      __var isProduction = 0;
[01:35:17.082]        // -> [isProduction <= 0x00000000]
[01:35:17.082]      __var continueId = 0;
[01:35:17.082]        // -> [continueId <= 0x00000000]
[01:35:17.082]      deviceID =   Read32(0x41C40004);
[01:35:17.090]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:35:17.090]        // -> [deviceID <= 0x2BB8802F]
[01:35:17.090]      version = deviceID >> 28;
[01:35:17.090]        // -> [version <= 0x00000002]
[01:35:17.090]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:35:17.090]        // -> [partNum <= 0x0000BB88]
[01:35:17.091]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:35:17.091]        // -> [manuf <= 0x00000017]
[01:35:17.091]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:35:17.091]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:35:17.091]      isProduction = (version > 0);
[01:35:17.091]        // -> [isProduction <= 0x00000001]
[01:35:17.091]    </block>
[01:35:17.091]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:35:17.091]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:35:17.091]        // =>  FALSE
[01:35:17.091]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:35:17.092]    </control>
[01:35:17.092]    <control if="continueId == 4" while="" timeout="0" info="">
[01:35:17.092]      // if-block "continueId == 4"
[01:35:17.092]        // =>  FALSE
[01:35:17.092]      // skip if-block "continueId == 4"
[01:35:17.092]    </control>
[01:35:17.092]    <control if="!isProduction" while="" timeout="0" info="">
[01:35:17.092]      // if-block "!isProduction"
[01:35:17.092]        // =>  FALSE
[01:35:17.092]      // skip if-block "!isProduction"
[01:35:17.092]    </control>
[01:35:17.092]  </sequence>
[01:35:17.092]  
[01:36:17.740]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:36:17.740]  
[01:36:17.742]  <debugvars>
[01:36:17.742]    // Pre-defined
[01:36:17.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:17.742]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:17.742]    __dp=0x00000000
[01:36:17.742]    __ap=0x00000000
[01:36:17.742]    __traceout=0x00000000      (Trace Disabled)
[01:36:17.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:17.742]    __FlashAddr=0x00000000
[01:36:17.742]    __FlashLen=0x00000000
[01:36:17.742]    __FlashArg=0x00000000
[01:36:17.742]    __FlashOp=0x00000000
[01:36:17.742]    __Result=0x00000000
[01:36:17.743]  </debugvars>
[01:36:17.743]  
[01:36:17.743]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:36:17.743]    <block atomic="false" info="">
[01:36:17.743]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:36:17.743]        // -> [isSWJ <= 0x00000001]
[01:36:17.743]      __var hasDormant = __protocol & 0x00020000;
[01:36:17.743]        // -> [hasDormant <= 0x00000000]
[01:36:17.743]      __var protType   = __protocol & 0x0000FFFF;
[01:36:17.743]        // -> [protType <= 0x00000002]
[01:36:17.743]    </block>
[01:36:17.744]    <control if="protType == 1" while="" timeout="0" info="">
[01:36:17.744]      // if-block "protType == 1"
[01:36:17.744]        // =>  FALSE
[01:36:17.744]      // skip if-block "protType == 1"
[01:36:17.744]    </control>
[01:36:17.744]    <control if="protType == 2" while="" timeout="0" info="">
[01:36:17.744]      // if-block "protType == 2"
[01:36:17.744]        // =>  TRUE
[01:36:17.744]      <control if="isSWJ" while="" timeout="0" info="">
[01:36:17.744]        // if-block "isSWJ"
[01:36:17.744]          // =>  TRUE
[01:36:17.744]        <control if="hasDormant" while="" timeout="0" info="">
[01:36:17.745]          // if-block "hasDormant"
[01:36:17.745]            // =>  FALSE
[01:36:17.745]          // skip if-block "hasDormant"
[01:36:17.745]        </control>
[01:36:17.745]        <control if="!hasDormant" while="" timeout="0" info="">
[01:36:17.745]          // if-block "!hasDormant"
[01:36:17.745]            // =>  TRUE
[01:36:17.745]          <block atomic="false" info="">
[01:36:17.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:36:17.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:17.747]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:36:17.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:36:17.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:36:17.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:17.750]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:36:17.752]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:36:17.752]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:36:17.757]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:17.757]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:36:17.759]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:36:17.759]          </block>
[01:36:17.759]          // end if-block "!hasDormant"
[01:36:17.759]        </control>
[01:36:17.759]        // end if-block "isSWJ"
[01:36:17.759]      </control>
[01:36:17.759]      <control if="!isSWJ" while="" timeout="0" info="">
[01:36:17.759]        // if-block "!isSWJ"
[01:36:17.759]          // =>  FALSE
[01:36:17.759]        // skip if-block "!isSWJ"
[01:36:17.759]      </control>
[01:36:17.759]      <block atomic="false" info="">
[01:36:17.760]        ReadDP(0x0);
[01:36:17.761]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:36:17.761]      </block>
[01:36:17.761]      // end if-block "protType == 2"
[01:36:17.761]    </control>
[01:36:17.761]  </sequence>
[01:36:17.761]  
[01:36:17.765]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:36:17.765]  
[01:36:17.765]  <debugvars>
[01:36:17.765]    // Pre-defined
[01:36:17.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:17.765]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:17.765]    __dp=0x00000000
[01:36:17.766]    __ap=0x00000000
[01:36:17.766]    __traceout=0x00000000      (Trace Disabled)
[01:36:17.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:17.766]    __FlashAddr=0x00000000
[01:36:17.766]    __FlashLen=0x00000000
[01:36:17.766]    __FlashArg=0x00000000
[01:36:17.766]    __FlashOp=0x00000000
[01:36:17.766]    __Result=0x00000000
[01:36:17.766]  </debugvars>
[01:36:17.767]  
[01:36:17.767]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:36:17.767]    <block atomic="false" info="">
[01:36:17.767]      __var SW_DP_ABORT       = 0x0;
[01:36:17.767]        // -> [SW_DP_ABORT <= 0x00000000]
[01:36:17.767]      __var DP_CTRL_STAT      = 0x4;
[01:36:17.767]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:36:17.768]      __var DP_SELECT         = 0x8;
[01:36:17.768]        // -> [DP_SELECT <= 0x00000008]
[01:36:17.768]      __var powered_down      = 0;
[01:36:17.768]        // -> [powered_down <= 0x00000000]
[01:36:17.768]      WriteDP(DP_SELECT, 0x00000000);
[01:36:17.772]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:36:17.772]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:36:17.773]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:36:17.774]        // -> [powered_down <= 0x00000001]
[01:36:17.774]    </block>
[01:36:17.774]    <control if="powered_down" while="" timeout="0" info="">
[01:36:17.774]      // if-block "powered_down"
[01:36:17.774]        // =>  TRUE
[01:36:17.774]      <block atomic="false" info="">
[01:36:17.775]        Message(0, "Debug/System power-up request sent");
[01:36:17.775]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:36:17.777]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:36:17.777]      </block>
[01:36:17.777]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:36:17.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:36:17.782]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:36:17.782]        // while-condition  =>  FALSE
[01:36:17.782]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:36:17.782]      </control>
[01:36:17.782]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:36:17.782]        // if-block "(__protocol & 0xFFFF) == 1"
[01:36:17.782]          // =>  FALSE
[01:36:17.782]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:36:17.783]      </control>
[01:36:17.783]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:36:17.783]        // if-block "(__protocol & 0xFFFF) == 2"
[01:36:17.783]          // =>  TRUE
[01:36:17.783]        <block atomic="false" info="">
[01:36:17.783]          Message(0, "executing SWD power up");
[01:36:17.783]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:36:17.785]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:36:17.785]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:36:17.787]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:36:17.787]        </block>
[01:36:17.787]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:36:17.787]      </control>
[01:36:17.787]      // end if-block "powered_down"
[01:36:17.787]    </control>
[01:36:17.787]    <block atomic="false" info="">
[01:36:17.788]      __var DEBUG_PORT_VAL    = 0;
[01:36:17.788]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:36:17.788]      __var ACCESS_POINT_VAL  = 0;
[01:36:17.788]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:36:17.788]      __ap = 1; 
[01:36:17.788]        // -> [__ap <= 0x00000001]
[01:36:17.788]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:36:17.792]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:36:17.792]      __ap = 4;
[01:36:17.792]        // -> [__ap <= 0x00000004]
[01:36:17.792]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:17.796]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:36:17.796]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:36:17.796]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:17.796]    </block>
[01:36:17.796]    <block atomic="false" info="">
[01:36:17.797]      __var nReset = 0x80;
[01:36:17.797]        // -> [nReset <= 0x00000080]
[01:36:17.797]      __var canReadPins = 0;
[01:36:17.797]        // -> [canReadPins <= 0x00000000]
[01:36:17.797]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:36:17.799]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:36:17.799]        // -> [canReadPins <= 0x00000001]
[01:36:17.799]    </block>
[01:36:17.799]    <control if="" while="1" timeout="200" info="">
[01:36:17.799]      // while "1"  (timeout="200")
[01:36:17.799]      // while-condition  =>  TRUE
[01:36:17.800]      // while "1"  (timeout="200")
[01:36:17.800]      // while-condition  =>  TRUE
[01:36:17.800]      // while "1"  (timeout="200")
[01:36:17.800]      // while-condition  =>  TRUE
[01:36:17.800]      // while "1"  (timeout="200")
[01:36:17.800]      // while-condition  =>  TRUE
[01:36:17.800]      // while "1"  (timeout="200")
[01:36:17.800]      // while-condition  =>  TRUE
[01:36:17.800]      // while "1"  (timeout="200")
[01:36:17.800]      // while-condition  =>  TRUE
[01:36:17.801]      // while "1"  (timeout="200")
[01:36:17.801]      // while-condition  =>  TRUE
[01:36:17.801]      // while "1"  (timeout="200")
[01:36:17.801]      // while-condition  =>  TRUE
[01:36:17.801]      // while "1"  (timeout="200")
[01:36:17.801]      // while-condition  =>  TRUE
[01:36:17.801]      // while "1"  (timeout="200")
[01:36:17.801]      // while-condition  =>  TRUE
[01:36:17.801]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.802]      // while "1"  (timeout="200")
[01:36:17.802]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.803]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.803]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.803]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.803]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.803]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.803]      // while-condition  =>  TRUE
[01:36:17.803]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.805]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.805]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.805]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.805]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.805]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.805]      // while "1"  (timeout="200")
[01:36:17.805]      // while-condition  =>  TRUE
[01:36:17.806]      // while "1"  (timeout="200")
[01:36:17.806]      // while-condition  =>  TRUE
[01:36:17.806]      // while "1"  (timeout="200")
[01:36:17.806]      // while-condition  =>  TRUE
[01:36:17.806]      // while "1"  (timeout="200")
[01:36:17.806]      // while-condition  =>  TRUE
[01:36:17.806]      // while "1"  (timeout="200")
[01:36:17.806]      // while-condition  =>  TRUE
[01:36:17.806]      // while "1"  (timeout="200")
[01:36:17.807]      // while-condition  =>  TRUE
[01:36:17.807]      // while "1"  (timeout="200")
[01:36:17.807]      // while-condition  =>  TRUE
[01:36:17.807]      // while "1"  (timeout="200")
[01:36:17.807]      // while-condition  =>  TRUE
[01:36:17.807]      // while "1"  (timeout="200")
[01:36:17.807]      // while-condition  =>  TRUE
[01:36:17.808]      // while "1"  (timeout="200")
[01:36:17.808]      // while-condition  =>  TRUE
[01:36:17.808]      // while "1"  (timeout="200")
[01:36:17.808]      // while-condition  =>  TRUE
[01:36:17.808]      // while "1"  (timeout="200")
[01:36:17.808]      // while-condition  =>  TRUE
[01:36:17.809]      // while "1"  (timeout="200")
[01:36:17.809]      // while-condition  =>  TRUE
[01:36:17.809]      // while "1"  (timeout="200")
[01:36:17.809]      // while-condition  =>  TRUE
[01:36:17.809]      // while "1"  (timeout="200")
[01:36:17.809]      // while-condition  =>  TRUE
[01:36:17.809]      // while "1"  (timeout="200")
[01:36:17.810]      // while-condition  =>  TRUE
[01:36:17.810]      // while "1"  (timeout="200")
[01:36:17.810]      // while-condition  =>  TRUE
[01:36:17.810]      // while "1"  (timeout="200")
[01:36:17.810]      // while-condition  =>  TRUE
[01:36:17.810]      // while "1"  (timeout="200")
[01:36:17.810]      // while-condition  =>  TRUE
[01:36:17.810]      // while "1"  (timeout="200")
[01:36:17.810]      // while-condition  =>  TRUE
[01:36:17.810]      // while "1"  (timeout="200")
[01:36:17.810]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.811]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.811]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.811]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.811]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.811]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.811]      // while-condition  =>  TRUE
[01:36:17.811]      // while "1"  (timeout="200")
[01:36:17.812]      // while-condition  =>  TRUE
[01:36:17.812]      // while "1"  (timeout="200")
[01:36:17.812]      // while-condition  =>  TRUE
[01:36:17.812]      // while "1"  (timeout="200")
[01:36:17.812]      // while-condition  =>  TRUE
[01:36:17.812]      // while "1"  (timeout="200")
[01:36:17.813]      // while-condition  =>  TRUE
[01:36:17.813]      // while "1"  (timeout="200")
[01:36:17.813]      // while-condition  =>  TRUE
[01:36:17.813]      // while "1"  (timeout="200")
[01:36:17.813]      // while-condition  =>  TRUE
[01:36:17.813]      // while "1"  (timeout="200")
[01:36:17.813]      // while-condition  =>  TRUE
[01:36:17.814]      // while "1"  (timeout="200")
[01:36:17.814]      // while  =>  TIMEOUT
[01:36:17.814]      // end while "1"
[01:36:17.814]    </control>
[01:36:17.814]    <control if="canReadPins" while="" timeout="0" info="">
[01:36:17.814]      // if-block "canReadPins"
[01:36:17.815]        // =>  TRUE
[01:36:17.815]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:36:17.815]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:36:17.819]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:36:17.819]        // while-condition  =>  FALSE
[01:36:17.819]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:36:17.819]      </control>
[01:36:17.819]      // end if-block "canReadPins"
[01:36:17.819]    </control>
[01:36:17.819]    <control if="!canReadPins" while="" timeout="0" info="">
[01:36:17.819]      // if-block "!canReadPins"
[01:36:17.819]        // =>  FALSE
[01:36:17.819]      // skip if-block "!canReadPins"
[01:36:17.819]    </control>
[01:36:17.819]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:36:17.820]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:17.820]        // =>  TRUE
[01:36:17.820]      <block atomic="false" info="">
[01:36:17.820]        WriteAP(0x00, 0x190008);
[01:36:17.822]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:17.822]        WriteAP(0xF0, 0x01);
[01:36:17.825]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:17.825]      </block>
[01:36:17.825]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:17.825]    </control>
[01:36:17.825]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:36:17.825]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:17.825]        // =>  FALSE
[01:36:17.825]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:17.825]    </control>
[01:36:17.825]    <block atomic="false" info="">
[01:36:17.825]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:17.829]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:36:17.829]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:36:17.829]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:17.829]      __ap = 0; //lets make sure we reset the access point selection
[01:36:17.829]        // -> [__ap <= 0x00000000]
[01:36:17.830]    </block>
[01:36:17.830]  </sequence>
[01:36:17.830]  
[01:36:17.851]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:36:17.851]  
[01:36:17.851]  <debugvars>
[01:36:17.851]    // Pre-defined
[01:36:17.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:17.851]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:17.851]    __dp=0x00000000
[01:36:17.852]    __ap=0x00000000
[01:36:17.852]    __traceout=0x00000000      (Trace Disabled)
[01:36:17.852]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:17.852]    __FlashAddr=0x00000000
[01:36:17.852]    __FlashLen=0x00000000
[01:36:17.852]    __FlashArg=0x00000000
[01:36:17.852]    __FlashOp=0x00000000
[01:36:17.852]    __Result=0x00000000
[01:36:17.852]  </debugvars>
[01:36:17.852]  
[01:36:17.852]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:36:17.853]    <block atomic="false" info="">
[01:36:17.853]      __var deviceID = 0;
[01:36:17.853]        // -> [deviceID <= 0x00000000]
[01:36:17.853]      __var version = 0;
[01:36:17.853]        // -> [version <= 0x00000000]
[01:36:17.853]      __var partNum = 0;
[01:36:17.853]        // -> [partNum <= 0x00000000]
[01:36:17.853]      __var manuf = 0;
[01:36:17.853]        // -> [manuf <= 0x00000000]
[01:36:17.853]      __var isMSPM0G1X0X_G3X0X = 0;
[01:36:17.853]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:36:17.853]      __var isProduction = 0;
[01:36:17.854]        // -> [isProduction <= 0x00000000]
[01:36:17.854]      __var continueId = 0;
[01:36:17.854]        // -> [continueId <= 0x00000000]
[01:36:17.854]      deviceID =   Read32(0x41C40004);
[01:36:17.858]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:36:17.859]        // -> [deviceID <= 0x2BB8802F]
[01:36:17.859]      version = deviceID >> 28;
[01:36:17.859]        // -> [version <= 0x00000002]
[01:36:17.859]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:36:17.859]        // -> [partNum <= 0x0000BB88]
[01:36:17.859]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:36:17.859]        // -> [manuf <= 0x00000017]
[01:36:17.860]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:36:17.860]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:36:17.860]      isProduction = (version > 0);
[01:36:17.860]        // -> [isProduction <= 0x00000001]
[01:36:17.860]    </block>
[01:36:17.860]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:36:17.860]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:36:17.860]        // =>  FALSE
[01:36:17.861]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:36:17.861]    </control>
[01:36:17.861]    <control if="continueId == 4" while="" timeout="0" info="">
[01:36:17.861]      // if-block "continueId == 4"
[01:36:17.861]        // =>  FALSE
[01:36:17.861]      // skip if-block "continueId == 4"
[01:36:17.861]    </control>
[01:36:17.861]    <control if="!isProduction" while="" timeout="0" info="">
[01:36:17.861]      // if-block "!isProduction"
[01:36:17.861]        // =>  FALSE
[01:36:17.861]      // skip if-block "!isProduction"
[01:36:17.862]    </control>
[01:36:17.862]  </sequence>
[01:36:17.862]  
[01:38:34.907]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:38:34.907]  
[01:38:34.916]  <debugvars>
[01:38:34.916]    // Pre-defined
[01:38:34.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:34.916]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:34.916]    __dp=0x00000000
[01:38:34.916]    __ap=0x00000000
[01:38:34.916]    __traceout=0x00000000      (Trace Disabled)
[01:38:34.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:34.916]    __FlashAddr=0x00000000
[01:38:34.916]    __FlashLen=0x00000000
[01:38:34.917]    __FlashArg=0x00000000
[01:38:34.917]    __FlashOp=0x00000000
[01:38:34.917]    __Result=0x00000000
[01:38:34.917]  </debugvars>
[01:38:34.917]  
[01:38:34.917]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:38:34.917]    <block atomic="false" info="">
[01:38:34.917]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:38:34.917]        // -> [isSWJ <= 0x00000001]
[01:38:34.917]      __var hasDormant = __protocol & 0x00020000;
[01:38:34.917]        // -> [hasDormant <= 0x00000000]
[01:38:34.918]      __var protType   = __protocol & 0x0000FFFF;
[01:38:34.918]        // -> [protType <= 0x00000002]
[01:38:34.918]    </block>
[01:38:34.918]    <control if="protType == 1" while="" timeout="0" info="">
[01:38:34.918]      // if-block "protType == 1"
[01:38:34.918]        // =>  FALSE
[01:38:34.918]      // skip if-block "protType == 1"
[01:38:34.918]    </control>
[01:38:34.918]    <control if="protType == 2" while="" timeout="0" info="">
[01:38:34.918]      // if-block "protType == 2"
[01:38:34.918]        // =>  TRUE
[01:38:34.918]      <control if="isSWJ" while="" timeout="0" info="">
[01:38:34.919]        // if-block "isSWJ"
[01:38:34.919]          // =>  TRUE
[01:38:34.919]        <control if="hasDormant" while="" timeout="0" info="">
[01:38:34.919]          // if-block "hasDormant"
[01:38:34.919]            // =>  FALSE
[01:38:34.919]          // skip if-block "hasDormant"
[01:38:34.919]        </control>
[01:38:34.919]        <control if="!hasDormant" while="" timeout="0" info="">
[01:38:34.920]          // if-block "!hasDormant"
[01:38:34.920]            // =>  TRUE
[01:38:34.920]          <block atomic="false" info="">
[01:38:34.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:38:34.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:34.922]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:38:34.924]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:38:34.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:38:34.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:34.926]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:38:34.928]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:38:34.928]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:38:34.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:38:34.932]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:38:34.933]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:38:34.934]          </block>
[01:38:34.934]          // end if-block "!hasDormant"
[01:38:34.934]        </control>
[01:38:34.934]        // end if-block "isSWJ"
[01:38:34.934]      </control>
[01:38:34.934]      <control if="!isSWJ" while="" timeout="0" info="">
[01:38:34.934]        // if-block "!isSWJ"
[01:38:34.935]          // =>  FALSE
[01:38:34.935]        // skip if-block "!isSWJ"
[01:38:34.935]      </control>
[01:38:34.935]      <block atomic="false" info="">
[01:38:34.935]        ReadDP(0x0);
[01:38:34.937]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:38:34.937]      </block>
[01:38:34.937]      // end if-block "protType == 2"
[01:38:34.937]    </control>
[01:38:34.937]  </sequence>
[01:38:34.938]  
[01:38:34.940]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:38:34.940]  
[01:38:34.940]  <debugvars>
[01:38:34.940]    // Pre-defined
[01:38:34.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:34.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:34.942]    __dp=0x00000000
[01:38:34.942]    __ap=0x00000000
[01:38:34.942]    __traceout=0x00000000      (Trace Disabled)
[01:38:34.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:34.942]    __FlashAddr=0x00000000
[01:38:34.942]    __FlashLen=0x00000000
[01:38:34.942]    __FlashArg=0x00000000
[01:38:34.942]    __FlashOp=0x00000000
[01:38:34.943]    __Result=0x00000000
[01:38:34.943]  </debugvars>
[01:38:34.943]  
[01:38:34.943]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:38:34.943]    <block atomic="false" info="">
[01:38:34.943]      __var SW_DP_ABORT       = 0x0;
[01:38:34.943]        // -> [SW_DP_ABORT <= 0x00000000]
[01:38:34.943]      __var DP_CTRL_STAT      = 0x4;
[01:38:34.943]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:38:34.943]      __var DP_SELECT         = 0x8;
[01:38:34.943]        // -> [DP_SELECT <= 0x00000008]
[01:38:34.943]      __var powered_down      = 0;
[01:38:34.943]        // -> [powered_down <= 0x00000000]
[01:38:34.943]      WriteDP(DP_SELECT, 0x00000000);
[01:38:34.945]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:38:34.945]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:38:34.947]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:38:34.947]        // -> [powered_down <= 0x00000001]
[01:38:34.947]    </block>
[01:38:34.947]    <control if="powered_down" while="" timeout="0" info="">
[01:38:34.947]      // if-block "powered_down"
[01:38:34.947]        // =>  TRUE
[01:38:34.947]      <block atomic="false" info="">
[01:38:34.947]        Message(0, "Debug/System power-up request sent");
[01:38:34.947]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:38:34.949]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:38:34.949]      </block>
[01:38:34.949]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:38:34.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:38:34.952]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:38:34.952]        // while-condition  =>  FALSE
[01:38:34.952]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:38:34.952]      </control>
[01:38:34.952]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:38:34.952]        // if-block "(__protocol & 0xFFFF) == 1"
[01:38:34.952]          // =>  FALSE
[01:38:34.952]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:38:34.952]      </control>
[01:38:34.952]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:38:34.952]        // if-block "(__protocol & 0xFFFF) == 2"
[01:38:34.952]          // =>  TRUE
[01:38:34.952]        <block atomic="false" info="">
[01:38:34.953]          Message(0, "executing SWD power up");
[01:38:34.953]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:38:34.955]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:38:34.955]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:38:34.957]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:38:34.957]        </block>
[01:38:34.957]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:38:34.957]      </control>
[01:38:34.957]      // end if-block "powered_down"
[01:38:34.959]    </control>
[01:38:34.959]    <block atomic="false" info="">
[01:38:34.959]      __var DEBUG_PORT_VAL    = 0;
[01:38:34.959]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:38:34.959]      __var ACCESS_POINT_VAL  = 0;
[01:38:34.959]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:38:34.959]      __ap = 1; 
[01:38:34.959]        // -> [__ap <= 0x00000001]
[01:38:34.959]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:38:34.966]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:38:34.966]      __ap = 4;
[01:38:34.966]        // -> [__ap <= 0x00000004]
[01:38:34.967]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:34.973]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:38:34.973]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:38:34.973]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:34.973]    </block>
[01:38:34.973]    <block atomic="false" info="">
[01:38:34.973]      __var nReset = 0x80;
[01:38:34.974]        // -> [nReset <= 0x00000080]
[01:38:34.974]      __var canReadPins = 0;
[01:38:34.975]        // -> [canReadPins <= 0x00000000]
[01:38:34.975]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:38:34.976]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:38:34.976]        // -> [canReadPins <= 0x00000001]
[01:38:34.977]    </block>
[01:38:34.977]    <control if="" while="1" timeout="200" info="">
[01:38:34.977]      // while "1"  (timeout="200")
[01:38:34.977]      // while-condition  =>  TRUE
[01:38:34.977]      // while "1"  (timeout="200")
[01:38:34.977]      // while-condition  =>  TRUE
[01:38:34.977]      // while "1"  (timeout="200")
[01:38:34.977]      // while-condition  =>  TRUE
[01:38:34.977]      // while "1"  (timeout="200")
[01:38:34.978]      // while-condition  =>  TRUE
[01:38:34.978]      // while "1"  (timeout="200")
[01:38:34.978]      // while-condition  =>  TRUE
[01:38:34.978]      // while "1"  (timeout="200")
[01:38:34.978]      // while-condition  =>  TRUE
[01:38:34.978]      // while "1"  (timeout="200")
[01:38:34.978]      // while-condition  =>  TRUE
[01:38:34.978]      // while "1"  (timeout="200")
[01:38:34.978]      // while-condition  =>  TRUE
[01:38:34.978]      // while "1"  (timeout="200")
[01:38:34.978]      // while-condition  =>  TRUE
[01:38:34.978]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.979]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.979]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.979]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.979]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.979]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.979]      // while "1"  (timeout="200")
[01:38:34.979]      // while-condition  =>  TRUE
[01:38:34.980]      // while "1"  (timeout="200")
[01:38:34.980]      // while-condition  =>  TRUE
[01:38:34.980]      // while "1"  (timeout="200")
[01:38:34.980]      // while-condition  =>  TRUE
[01:38:34.980]      // while "1"  (timeout="200")
[01:38:34.980]      // while-condition  =>  TRUE
[01:38:34.980]      // while "1"  (timeout="200")
[01:38:34.980]      // while-condition  =>  TRUE
[01:38:34.980]      // while "1"  (timeout="200")
[01:38:34.980]      // while-condition  =>  TRUE
[01:38:34.981]      // while "1"  (timeout="200")
[01:38:34.981]      // while-condition  =>  TRUE
[01:38:34.981]      // while "1"  (timeout="200")
[01:38:34.981]      // while-condition  =>  TRUE
[01:38:34.981]      // while "1"  (timeout="200")
[01:38:34.981]      // while-condition  =>  TRUE
[01:38:34.981]      // while "1"  (timeout="200")
[01:38:34.981]      // while-condition  =>  TRUE
[01:38:34.982]      // while "1"  (timeout="200")
[01:38:34.982]      // while-condition  =>  TRUE
[01:38:34.982]      // while "1"  (timeout="200")
[01:38:34.982]      // while-condition  =>  TRUE
[01:38:34.982]      // while "1"  (timeout="200")
[01:38:34.982]      // while-condition  =>  TRUE
[01:38:34.982]      // while "1"  (timeout="200")
[01:38:34.982]      // while-condition  =>  TRUE
[01:38:34.982]      // while "1"  (timeout="200")
[01:38:34.982]      // while-condition  =>  TRUE
[01:38:34.982]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.983]      // while-condition  =>  TRUE
[01:38:34.983]      // while "1"  (timeout="200")
[01:38:34.985]      // while-condition  =>  TRUE
[01:38:34.985]      // while "1"  (timeout="200")
[01:38:34.985]      // while-condition  =>  TRUE
[01:38:34.985]      // while "1"  (timeout="200")
[01:38:34.985]      // while-condition  =>  TRUE
[01:38:34.985]      // while "1"  (timeout="200")
[01:38:34.986]      // while-condition  =>  TRUE
[01:38:34.986]      // while "1"  (timeout="200")
[01:38:34.986]      // while  =>  TIMEOUT
[01:38:34.986]      // end while "1"
[01:38:34.986]    </control>
[01:38:34.986]    <control if="canReadPins" while="" timeout="0" info="">
[01:38:34.986]      // if-block "canReadPins"
[01:38:34.986]        // =>  TRUE
[01:38:34.986]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:38:34.986]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:38:34.989]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:38:34.989]        // while-condition  =>  FALSE
[01:38:34.989]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:38:34.989]      </control>
[01:38:34.989]      // end if-block "canReadPins"
[01:38:34.989]    </control>
[01:38:34.989]    <control if="!canReadPins" while="" timeout="0" info="">
[01:38:34.989]      // if-block "!canReadPins"
[01:38:34.990]        // =>  FALSE
[01:38:34.990]      // skip if-block "!canReadPins"
[01:38:34.990]    </control>
[01:38:34.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:38:34.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:34.990]        // =>  TRUE
[01:38:34.990]      <block atomic="false" info="">
[01:38:34.990]        WriteAP(0x00, 0x190008);
[01:38:34.992]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:34.992]        WriteAP(0xF0, 0x01);
[01:38:34.996]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:38:34.996]      </block>
[01:38:34.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:38:34.996]    </control>
[01:38:34.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:38:34.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:34.996]        // =>  FALSE
[01:38:34.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:38:34.996]    </control>
[01:38:34.996]    <block atomic="false" info="">
[01:38:34.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:38:35.000]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:38:35.000]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:38:35.000]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:38:35.001]      __ap = 0; //lets make sure we reset the access point selection
[01:38:35.001]        // -> [__ap <= 0x00000000]
[01:38:35.001]    </block>
[01:38:35.001]  </sequence>
[01:38:35.001]  
[01:38:35.027]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:38:35.027]  
[01:38:35.027]  <debugvars>
[01:38:35.027]    // Pre-defined
[01:38:35.027]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:38:35.027]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:38:35.027]    __dp=0x00000000
[01:38:35.027]    __ap=0x00000000
[01:38:35.028]    __traceout=0x00000000      (Trace Disabled)
[01:38:35.028]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:38:35.028]    __FlashAddr=0x00000000
[01:38:35.028]    __FlashLen=0x00000000
[01:38:35.028]    __FlashArg=0x00000000
[01:38:35.028]    __FlashOp=0x00000000
[01:38:35.028]    __Result=0x00000000
[01:38:35.028]  </debugvars>
[01:38:35.028]  
[01:38:35.028]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:38:35.028]    <block atomic="false" info="">
[01:38:35.029]      __var deviceID = 0;
[01:38:35.030]        // -> [deviceID <= 0x00000000]
[01:38:35.030]      __var version = 0;
[01:38:35.030]        // -> [version <= 0x00000000]
[01:38:35.030]      __var partNum = 0;
[01:38:35.030]        // -> [partNum <= 0x00000000]
[01:38:35.030]      __var manuf = 0;
[01:38:35.030]        // -> [manuf <= 0x00000000]
[01:38:35.030]      __var isMSPM0G1X0X_G3X0X = 0;
[01:38:35.030]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:38:35.030]      __var isProduction = 0;
[01:38:35.030]        // -> [isProduction <= 0x00000000]
[01:38:35.030]      __var continueId = 0;
[01:38:35.030]        // -> [continueId <= 0x00000000]
[01:38:35.030]      deviceID =   Read32(0x41C40004);
[01:38:35.037]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:38:35.037]        // -> [deviceID <= 0x2BB8802F]
[01:38:35.037]      version = deviceID >> 28;
[01:38:35.037]        // -> [version <= 0x00000002]
[01:38:35.038]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:38:35.038]        // -> [partNum <= 0x0000BB88]
[01:38:35.038]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:38:35.038]        // -> [manuf <= 0x00000017]
[01:38:35.038]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:38:35.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:38:35.038]      isProduction = (version > 0);
[01:38:35.038]        // -> [isProduction <= 0x00000001]
[01:38:35.038]    </block>
[01:38:35.038]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:38:35.038]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:38:35.038]        // =>  FALSE
[01:38:35.039]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:38:35.039]    </control>
[01:38:35.039]    <control if="continueId == 4" while="" timeout="0" info="">
[01:38:35.039]      // if-block "continueId == 4"
[01:38:35.039]        // =>  FALSE
[01:38:35.039]      // skip if-block "continueId == 4"
[01:38:35.039]    </control>
[01:38:35.039]    <control if="!isProduction" while="" timeout="0" info="">
[01:38:35.039]      // if-block "!isProduction"
[01:38:35.039]        // =>  FALSE
[01:38:35.039]      // skip if-block "!isProduction"
[01:38:35.040]    </control>
[01:38:35.040]  </sequence>
[01:38:35.040]  
[01:39:16.799]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:39:16.799]  
[01:39:16.807]  <debugvars>
[01:39:16.807]    // Pre-defined
[01:39:16.807]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:39:16.807]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:39:16.807]    __dp=0x00000000
[01:39:16.807]    __ap=0x00000000
[01:39:16.807]    __traceout=0x00000000      (Trace Disabled)
[01:39:16.807]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:39:16.807]    __FlashAddr=0x00000000
[01:39:16.807]    __FlashLen=0x00000000
[01:39:16.808]    __FlashArg=0x00000000
[01:39:16.808]    __FlashOp=0x00000000
[01:39:16.808]    __Result=0x00000000
[01:39:16.808]  </debugvars>
[01:39:16.808]  
[01:39:16.808]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:39:16.808]    <block atomic="false" info="">
[01:39:16.808]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:39:16.808]        // -> [isSWJ <= 0x00000001]
[01:39:16.808]      __var hasDormant = __protocol & 0x00020000;
[01:39:16.809]        // -> [hasDormant <= 0x00000000]
[01:39:16.809]      __var protType   = __protocol & 0x0000FFFF;
[01:39:16.809]        // -> [protType <= 0x00000002]
[01:39:16.809]    </block>
[01:39:16.809]    <control if="protType == 1" while="" timeout="0" info="">
[01:39:16.809]      // if-block "protType == 1"
[01:39:16.809]        // =>  FALSE
[01:39:16.809]      // skip if-block "protType == 1"
[01:39:16.809]    </control>
[01:39:16.809]    <control if="protType == 2" while="" timeout="0" info="">
[01:39:16.811]      // if-block "protType == 2"
[01:39:16.811]        // =>  TRUE
[01:39:16.811]      <control if="isSWJ" while="" timeout="0" info="">
[01:39:16.811]        // if-block "isSWJ"
[01:39:16.811]          // =>  TRUE
[01:39:16.811]        <control if="hasDormant" while="" timeout="0" info="">
[01:39:16.811]          // if-block "hasDormant"
[01:39:16.811]            // =>  FALSE
[01:39:16.811]          // skip if-block "hasDormant"
[01:39:16.811]        </control>
[01:39:16.811]        <control if="!hasDormant" while="" timeout="0" info="">
[01:39:16.812]          // if-block "!hasDormant"
[01:39:16.812]            // =>  TRUE
[01:39:16.812]          <block atomic="false" info="">
[01:39:16.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:39:16.813]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:39:16.813]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:39:16.817]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:39:16.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:39:16.818]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:39:16.818]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:39:16.824]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:39:16.824]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:39:16.825]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:39:16.825]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:39:16.829]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:39:16.829]          </block>
[01:39:16.829]          // end if-block "!hasDormant"
[01:39:16.829]        </control>
[01:39:16.829]        // end if-block "isSWJ"
[01:39:16.830]      </control>
[01:39:16.830]      <control if="!isSWJ" while="" timeout="0" info="">
[01:39:16.830]        // if-block "!isSWJ"
[01:39:16.830]          // =>  FALSE
[01:39:16.830]        // skip if-block "!isSWJ"
[01:39:16.830]      </control>
[01:39:16.830]      <block atomic="false" info="">
[01:39:16.830]        ReadDP(0x0);
[01:39:16.831]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:39:16.832]      </block>
[01:39:16.832]      // end if-block "protType == 2"
[01:39:16.832]    </control>
[01:39:16.832]  </sequence>
[01:39:16.832]  
[01:39:16.836]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:39:16.836]  
[01:39:16.837]  <debugvars>
[01:39:16.837]    // Pre-defined
[01:39:16.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:39:16.837]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:39:16.837]    __dp=0x00000000
[01:39:16.837]    __ap=0x00000000
[01:39:16.838]    __traceout=0x00000000      (Trace Disabled)
[01:39:16.838]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:39:16.838]    __FlashAddr=0x00000000
[01:39:16.838]    __FlashLen=0x00000000
[01:39:16.838]    __FlashArg=0x00000000
[01:39:16.838]    __FlashOp=0x00000000
[01:39:16.838]    __Result=0x00000000
[01:39:16.838]  </debugvars>
[01:39:16.838]  
[01:39:16.838]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:39:16.838]    <block atomic="false" info="">
[01:39:16.838]      __var SW_DP_ABORT       = 0x0;
[01:39:16.838]        // -> [SW_DP_ABORT <= 0x00000000]
[01:39:16.840]      __var DP_CTRL_STAT      = 0x4;
[01:39:16.840]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:39:16.840]      __var DP_SELECT         = 0x8;
[01:39:16.840]        // -> [DP_SELECT <= 0x00000008]
[01:39:16.840]      __var powered_down      = 0;
[01:39:16.840]        // -> [powered_down <= 0x00000000]
[01:39:16.840]      WriteDP(DP_SELECT, 0x00000000);
[01:39:16.842]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:39:16.842]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:39:16.844]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:39:16.845]        // -> [powered_down <= 0x00000001]
[01:39:16.845]    </block>
[01:39:16.845]    <control if="powered_down" while="" timeout="0" info="">
[01:39:16.845]      // if-block "powered_down"
[01:39:16.845]        // =>  TRUE
[01:39:16.845]      <block atomic="false" info="">
[01:39:16.845]        Message(0, "Debug/System power-up request sent");
[01:39:16.845]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:39:16.849]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:39:16.849]      </block>
[01:39:16.849]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:39:16.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:39:16.860]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:39:16.860]        // while-condition  =>  FALSE
[01:39:16.861]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:39:16.861]      </control>
[01:39:16.861]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:39:16.861]        // if-block "(__protocol & 0xFFFF) == 1"
[01:39:16.861]          // =>  FALSE
[01:39:16.861]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:39:16.861]      </control>
[01:39:16.861]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:39:16.861]        // if-block "(__protocol & 0xFFFF) == 2"
[01:39:16.861]          // =>  TRUE
[01:39:16.862]        <block atomic="false" info="">
[01:39:16.862]          Message(0, "executing SWD power up");
[01:39:16.862]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:39:16.864]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:39:16.864]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:39:16.866]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:39:16.866]        </block>
[01:39:16.866]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:39:16.867]      </control>
[01:39:16.867]      // end if-block "powered_down"
[01:39:16.867]    </control>
[01:39:16.867]    <block atomic="false" info="">
[01:39:16.867]      __var DEBUG_PORT_VAL    = 0;
[01:39:16.867]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:39:16.867]      __var ACCESS_POINT_VAL  = 0;
[01:39:16.867]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:39:16.868]      __ap = 1; 
[01:39:16.868]        // -> [__ap <= 0x00000001]
[01:39:16.868]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:39:16.873]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:39:16.873]      __ap = 4;
[01:39:16.873]        // -> [__ap <= 0x00000004]
[01:39:16.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:39:16.885]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:39:16.885]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:39:16.885]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:39:16.885]    </block>
[01:39:16.887]    <block atomic="false" info="">
[01:39:16.887]      __var nReset = 0x80;
[01:39:16.887]        // -> [nReset <= 0x00000080]
[01:39:16.887]      __var canReadPins = 0;
[01:39:16.887]        // -> [canReadPins <= 0x00000000]
[01:39:16.887]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:39:16.889]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:39:16.889]        // -> [canReadPins <= 0x00000001]
[01:39:16.889]    </block>
[01:39:16.889]    <control if="" while="1" timeout="200" info="">
[01:39:16.889]      // while "1"  (timeout="200")
[01:39:16.889]      // while-condition  =>  TRUE
[01:39:16.889]      // while "1"  (timeout="200")
[01:39:16.889]      // while-condition  =>  TRUE
[01:39:16.890]      // while "1"  (timeout="200")
[01:39:16.890]      // while-condition  =>  TRUE
[01:39:16.890]      // while "1"  (timeout="200")
[01:39:16.890]      // while-condition  =>  TRUE
[01:39:16.890]      // while "1"  (timeout="200")
[01:39:16.890]      // while-condition  =>  TRUE
[01:39:16.890]      // while "1"  (timeout="200")
[01:39:16.890]      // while-condition  =>  TRUE
[01:39:16.891]      // while "1"  (timeout="200")
[01:39:16.891]      // while  =>  TIMEOUT
[01:39:16.891]      // end while "1"
[01:39:16.891]    </control>
[01:39:16.891]    <control if="canReadPins" while="" timeout="0" info="">
[01:39:16.891]      // if-block "canReadPins"
[01:39:16.891]        // =>  TRUE
[01:39:16.891]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:39:16.891]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:39:16.894]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:39:16.894]        // while-condition  =>  FALSE
[01:39:16.894]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:39:16.895]      </control>
[01:39:16.895]      // end if-block "canReadPins"
[01:39:16.895]    </control>
[01:39:16.895]    <control if="!canReadPins" while="" timeout="0" info="">
[01:39:16.895]      // if-block "!canReadPins"
[01:39:16.895]        // =>  FALSE
[01:39:16.895]      // skip if-block "!canReadPins"
[01:39:16.896]    </control>
[01:39:16.896]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:39:16.896]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:39:16.896]        // =>  TRUE
[01:39:16.896]      <block atomic="false" info="">
[01:39:16.896]        WriteAP(0x00, 0x190008);
[01:39:16.897]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:39:16.897]        WriteAP(0xF0, 0x01);
[01:39:16.906]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:39:16.906]      </block>
[01:39:16.907]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:39:16.907]    </control>
[01:39:16.907]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:39:16.907]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:39:16.907]        // =>  FALSE
[01:39:16.907]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:39:16.907]    </control>
[01:39:16.907]    <block atomic="false" info="">
[01:39:16.907]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:39:16.912]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:39:16.912]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:39:16.912]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:39:16.912]      __ap = 0; //lets make sure we reset the access point selection
[01:39:16.912]        // -> [__ap <= 0x00000000]
[01:39:16.912]    </block>
[01:39:16.912]  </sequence>
[01:39:16.912]  
[01:39:16.946]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:39:16.946]  
[01:39:16.946]  <debugvars>
[01:39:16.946]    // Pre-defined
[01:39:16.946]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:39:16.946]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:39:16.947]    __dp=0x00000000
[01:39:16.947]    __ap=0x00000000
[01:39:16.947]    __traceout=0x00000000      (Trace Disabled)
[01:39:16.947]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:39:16.947]    __FlashAddr=0x00000000
[01:39:16.947]    __FlashLen=0x00000000
[01:39:16.947]    __FlashArg=0x00000000
[01:39:16.947]    __FlashOp=0x00000000
[01:39:16.947]    __Result=0x00000000
[01:39:16.947]  </debugvars>
[01:39:16.947]  
[01:39:16.948]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:39:16.948]    <block atomic="false" info="">
[01:39:16.948]      __var deviceID = 0;
[01:39:16.948]        // -> [deviceID <= 0x00000000]
[01:39:16.948]      __var version = 0;
[01:39:16.948]        // -> [version <= 0x00000000]
[01:39:16.948]      __var partNum = 0;
[01:39:16.948]        // -> [partNum <= 0x00000000]
[01:39:16.948]      __var manuf = 0;
[01:39:16.949]        // -> [manuf <= 0x00000000]
[01:39:16.949]      __var isMSPM0G1X0X_G3X0X = 0;
[01:39:16.949]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:39:16.949]      __var isProduction = 0;
[01:39:16.949]        // -> [isProduction <= 0x00000000]
[01:39:16.949]      __var continueId = 0;
[01:39:16.949]        // -> [continueId <= 0x00000000]
[01:39:16.949]      deviceID =   Read32(0x41C40004);
[01:39:16.954]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:39:16.954]        // -> [deviceID <= 0x2BB8802F]
[01:39:16.954]      version = deviceID >> 28;
[01:39:16.954]        // -> [version <= 0x00000002]
[01:39:16.954]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:39:16.954]        // -> [partNum <= 0x0000BB88]
[01:39:16.954]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:39:16.954]        // -> [manuf <= 0x00000017]
[01:39:16.956]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:39:16.956]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:39:16.956]      isProduction = (version > 0);
[01:39:16.956]        // -> [isProduction <= 0x00000001]
[01:39:16.956]    </block>
[01:39:16.956]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:39:16.956]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:39:16.956]        // =>  FALSE
[01:39:16.957]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:39:16.957]    </control>
[01:39:16.957]    <control if="continueId == 4" while="" timeout="0" info="">
[01:39:16.957]      // if-block "continueId == 4"
[01:39:16.957]        // =>  FALSE
[01:39:16.957]      // skip if-block "continueId == 4"
[01:39:16.957]    </control>
[01:39:16.957]    <control if="!isProduction" while="" timeout="0" info="">
[01:39:16.957]      // if-block "!isProduction"
[01:39:16.957]        // =>  FALSE
[01:39:16.957]      // skip if-block "!isProduction"
[01:39:16.957]    </control>
[01:39:16.957]  </sequence>
[01:39:16.957]  
[01:41:04.371]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:41:04.371]  
[01:41:04.380]  <debugvars>
[01:41:04.380]    // Pre-defined
[01:41:04.380]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:04.380]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:04.380]    __dp=0x00000000
[01:41:04.380]    __ap=0x00000000
[01:41:04.380]    __traceout=0x00000000      (Trace Disabled)
[01:41:04.380]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:04.380]    __FlashAddr=0x00000000
[01:41:04.380]    __FlashLen=0x00000000
[01:41:04.381]    __FlashArg=0x00000000
[01:41:04.381]    __FlashOp=0x00000000
[01:41:04.381]    __Result=0x00000000
[01:41:04.381]  </debugvars>
[01:41:04.382]  
[01:41:04.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:41:04.382]    <block atomic="false" info="">
[01:41:04.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:41:04.382]        // -> [isSWJ <= 0x00000001]
[01:41:04.382]      __var hasDormant = __protocol & 0x00020000;
[01:41:04.382]        // -> [hasDormant <= 0x00000000]
[01:41:04.382]      __var protType   = __protocol & 0x0000FFFF;
[01:41:04.382]        // -> [protType <= 0x00000002]
[01:41:04.382]    </block>
[01:41:04.382]    <control if="protType == 1" while="" timeout="0" info="">
[01:41:04.382]      // if-block "protType == 1"
[01:41:04.382]        // =>  FALSE
[01:41:04.382]      // skip if-block "protType == 1"
[01:41:04.382]    </control>
[01:41:04.382]    <control if="protType == 2" while="" timeout="0" info="">
[01:41:04.383]      // if-block "protType == 2"
[01:41:04.383]        // =>  TRUE
[01:41:04.383]      <control if="isSWJ" while="" timeout="0" info="">
[01:41:04.383]        // if-block "isSWJ"
[01:41:04.383]          // =>  TRUE
[01:41:04.383]        <control if="hasDormant" while="" timeout="0" info="">
[01:41:04.383]          // if-block "hasDormant"
[01:41:04.383]            // =>  FALSE
[01:41:04.383]          // skip if-block "hasDormant"
[01:41:04.383]        </control>
[01:41:04.383]        <control if="!hasDormant" while="" timeout="0" info="">
[01:41:04.384]          // if-block "!hasDormant"
[01:41:04.384]            // =>  TRUE
[01:41:04.384]          <block atomic="false" info="">
[01:41:04.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:41:04.386]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:04.386]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:41:04.388]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:41:04.388]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:41:04.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:04.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:41:04.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:41:04.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:41:04.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:04.394]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:41:04.396]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:41:04.396]          </block>
[01:41:04.396]          // end if-block "!hasDormant"
[01:41:04.396]        </control>
[01:41:04.396]        // end if-block "isSWJ"
[01:41:04.396]      </control>
[01:41:04.397]      <control if="!isSWJ" while="" timeout="0" info="">
[01:41:04.397]        // if-block "!isSWJ"
[01:41:04.397]          // =>  FALSE
[01:41:04.397]        // skip if-block "!isSWJ"
[01:41:04.397]      </control>
[01:41:04.397]      <block atomic="false" info="">
[01:41:04.397]        ReadDP(0x0);
[01:41:04.407]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:41:04.407]      </block>
[01:41:04.407]      // end if-block "protType == 2"
[01:41:04.407]    </control>
[01:41:04.408]  </sequence>
[01:41:04.408]  
[01:41:04.414]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:41:04.414]  
[01:41:04.415]  <debugvars>
[01:41:04.415]    // Pre-defined
[01:41:04.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:04.415]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:04.415]    __dp=0x00000000
[01:41:04.415]    __ap=0x00000000
[01:41:04.415]    __traceout=0x00000000      (Trace Disabled)
[01:41:04.415]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:04.415]    __FlashAddr=0x00000000
[01:41:04.415]    __FlashLen=0x00000000
[01:41:04.415]    __FlashArg=0x00000000
[01:41:04.416]    __FlashOp=0x00000000
[01:41:04.416]    __Result=0x00000000
[01:41:04.416]  </debugvars>
[01:41:04.416]  
[01:41:04.416]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:41:04.416]    <block atomic="false" info="">
[01:41:04.416]      __var SW_DP_ABORT       = 0x0;
[01:41:04.416]        // -> [SW_DP_ABORT <= 0x00000000]
[01:41:04.416]      __var DP_CTRL_STAT      = 0x4;
[01:41:04.416]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:41:04.416]      __var DP_SELECT         = 0x8;
[01:41:04.416]        // -> [DP_SELECT <= 0x00000008]
[01:41:04.416]      __var powered_down      = 0;
[01:41:04.418]        // -> [powered_down <= 0x00000000]
[01:41:04.418]      WriteDP(DP_SELECT, 0x00000000);
[01:41:04.419]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:41:04.419]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:41:04.421]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:41:04.421]        // -> [powered_down <= 0x00000001]
[01:41:04.421]    </block>
[01:41:04.421]    <control if="powered_down" while="" timeout="0" info="">
[01:41:04.421]      // if-block "powered_down"
[01:41:04.421]        // =>  TRUE
[01:41:04.421]      <block atomic="false" info="">
[01:41:04.421]        Message(0, "Debug/System power-up request sent");
[01:41:04.422]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:41:04.424]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:41:04.424]      </block>
[01:41:04.424]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:41:04.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:41:04.425]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:41:04.425]        // while-condition  =>  FALSE
[01:41:04.426]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:41:04.426]      </control>
[01:41:04.426]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:41:04.426]        // if-block "(__protocol & 0xFFFF) == 1"
[01:41:04.426]          // =>  FALSE
[01:41:04.426]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:41:04.426]      </control>
[01:41:04.426]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:41:04.426]        // if-block "(__protocol & 0xFFFF) == 2"
[01:41:04.426]          // =>  TRUE
[01:41:04.426]        <block atomic="false" info="">
[01:41:04.427]          Message(0, "executing SWD power up");
[01:41:04.427]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:41:04.429]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:41:04.429]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:41:04.433]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:41:04.433]        </block>
[01:41:04.433]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:41:04.433]      </control>
[01:41:04.433]      // end if-block "powered_down"
[01:41:04.433]    </control>
[01:41:04.433]    <block atomic="false" info="">
[01:41:04.433]      __var DEBUG_PORT_VAL    = 0;
[01:41:04.433]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:41:04.433]      __var ACCESS_POINT_VAL  = 0;
[01:41:04.433]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:41:04.433]      __ap = 1; 
[01:41:04.433]        // -> [__ap <= 0x00000001]
[01:41:04.435]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:41:04.446]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:41:04.446]      __ap = 4;
[01:41:04.447]        // -> [__ap <= 0x00000004]
[01:41:04.447]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:41:04.450]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:41:04.450]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:41:04.450]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:41:04.450]    </block>
[01:41:04.450]    <block atomic="false" info="">
[01:41:04.450]      __var nReset = 0x80;
[01:41:04.450]        // -> [nReset <= 0x00000080]
[01:41:04.450]      __var canReadPins = 0;
[01:41:04.450]        // -> [canReadPins <= 0x00000000]
[01:41:04.452]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:41:04.453]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:41:04.453]        // -> [canReadPins <= 0x00000001]
[01:41:04.453]    </block>
[01:41:04.453]    <control if="" while="1" timeout="200" info="">
[01:41:04.453]      // while "1"  (timeout="200")
[01:41:04.453]      // while-condition  =>  TRUE
[01:41:04.454]      // while "1"  (timeout="200")
[01:41:04.454]      // while-condition  =>  TRUE
[01:41:04.454]      // while "1"  (timeout="200")
[01:41:04.454]      // while-condition  =>  TRUE
[01:41:04.454]      // while "1"  (timeout="200")
[01:41:04.454]      // while-condition  =>  TRUE
[01:41:04.454]      // while "1"  (timeout="200")
[01:41:04.454]      // while  =>  TIMEOUT
[01:41:04.454]      // end while "1"
[01:41:04.454]    </control>
[01:41:04.454]    <control if="canReadPins" while="" timeout="0" info="">
[01:41:04.454]      // if-block "canReadPins"
[01:41:04.455]        // =>  TRUE
[01:41:04.455]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:41:04.455]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:41:04.456]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:41:04.457]        // while-condition  =>  FALSE
[01:41:04.457]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:41:04.457]      </control>
[01:41:04.457]      // end if-block "canReadPins"
[01:41:04.457]    </control>
[01:41:04.457]    <control if="!canReadPins" while="" timeout="0" info="">
[01:41:04.457]      // if-block "!canReadPins"
[01:41:04.457]        // =>  FALSE
[01:41:04.457]      // skip if-block "!canReadPins"
[01:41:04.457]    </control>
[01:41:04.457]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:41:04.458]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:41:04.458]        // =>  TRUE
[01:41:04.458]      <block atomic="false" info="">
[01:41:04.458]        WriteAP(0x00, 0x190008);
[01:41:04.460]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:41:04.460]        WriteAP(0xF0, 0x01);
[01:41:04.475]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:41:04.476]      </block>
[01:41:04.476]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:41:04.476]    </control>
[01:41:04.476]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:41:04.476]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:41:04.476]        // =>  FALSE
[01:41:04.476]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:41:04.476]    </control>
[01:41:04.476]    <block atomic="false" info="">
[01:41:04.477]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:41:04.480]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:41:04.481]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:41:04.481]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:41:04.481]      __ap = 0; //lets make sure we reset the access point selection
[01:41:04.481]        // -> [__ap <= 0x00000000]
[01:41:04.481]    </block>
[01:41:04.482]  </sequence>
[01:41:04.482]  
[01:41:04.513]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:41:04.513]  
[01:41:04.513]  <debugvars>
[01:41:04.513]    // Pre-defined
[01:41:04.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:04.513]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:04.513]    __dp=0x00000000
[01:41:04.513]    __ap=0x00000000
[01:41:04.513]    __traceout=0x00000000      (Trace Disabled)
[01:41:04.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:04.513]    __FlashAddr=0x00000000
[01:41:04.515]    __FlashLen=0x00000000
[01:41:04.515]    __FlashArg=0x00000000
[01:41:04.515]    __FlashOp=0x00000000
[01:41:04.515]    __Result=0x00000000
[01:41:04.515]  </debugvars>
[01:41:04.515]  
[01:41:04.515]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:41:04.515]    <block atomic="false" info="">
[01:41:04.515]      __var deviceID = 0;
[01:41:04.515]        // -> [deviceID <= 0x00000000]
[01:41:04.515]      __var version = 0;
[01:41:04.515]        // -> [version <= 0x00000000]
[01:41:04.515]      __var partNum = 0;
[01:41:04.515]        // -> [partNum <= 0x00000000]
[01:41:04.515]      __var manuf = 0;
[01:41:04.515]        // -> [manuf <= 0x00000000]
[01:41:04.516]      __var isMSPM0G1X0X_G3X0X = 0;
[01:41:04.516]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:41:04.516]      __var isProduction = 0;
[01:41:04.516]        // -> [isProduction <= 0x00000000]
[01:41:04.516]      __var continueId = 0;
[01:41:04.516]        // -> [continueId <= 0x00000000]
[01:41:04.516]      deviceID =   Read32(0x41C40004);
[01:41:04.523]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:41:04.523]        // -> [deviceID <= 0x2BB8802F]
[01:41:04.523]      version = deviceID >> 28;
[01:41:04.523]        // -> [version <= 0x00000002]
[01:41:04.523]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:41:04.523]        // -> [partNum <= 0x0000BB88]
[01:41:04.523]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:41:04.524]        // -> [manuf <= 0x00000017]
[01:41:04.524]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:41:04.524]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:41:04.524]      isProduction = (version > 0);
[01:41:04.524]        // -> [isProduction <= 0x00000001]
[01:41:04.524]    </block>
[01:41:04.524]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:41:04.524]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:41:04.524]        // =>  FALSE
[01:41:04.525]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:41:04.525]    </control>
[01:41:04.525]    <control if="continueId == 4" while="" timeout="0" info="">
[01:41:04.525]      // if-block "continueId == 4"
[01:41:04.525]        // =>  FALSE
[01:41:04.525]      // skip if-block "continueId == 4"
[01:41:04.525]    </control>
[01:41:04.525]    <control if="!isProduction" while="" timeout="0" info="">
[01:41:04.525]      // if-block "!isProduction"
[01:41:04.525]        // =>  FALSE
[01:41:04.525]      // skip if-block "!isProduction"
[01:41:04.526]    </control>
[01:41:04.526]  </sequence>
[01:41:04.526]  
[01:43:54.370]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:43:54.370]  
[01:43:54.379]  <debugvars>
[01:43:54.379]    // Pre-defined
[01:43:54.379]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:43:54.379]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:43:54.379]    __dp=0x00000000
[01:43:54.379]    __ap=0x00000000
[01:43:54.379]    __traceout=0x00000000      (Trace Disabled)
[01:43:54.379]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:43:54.379]    __FlashAddr=0x00000000
[01:43:54.379]    __FlashLen=0x00000000
[01:43:54.380]    __FlashArg=0x00000000
[01:43:54.380]    __FlashOp=0x00000000
[01:43:54.380]    __Result=0x00000000
[01:43:54.380]  </debugvars>
[01:43:54.380]  
[01:43:54.381]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:43:54.381]    <block atomic="false" info="">
[01:43:54.381]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:43:54.381]        // -> [isSWJ <= 0x00000001]
[01:43:54.381]      __var hasDormant = __protocol & 0x00020000;
[01:43:54.381]        // -> [hasDormant <= 0x00000000]
[01:43:54.381]      __var protType   = __protocol & 0x0000FFFF;
[01:43:54.382]        // -> [protType <= 0x00000002]
[01:43:54.382]    </block>
[01:43:54.382]    <control if="protType == 1" while="" timeout="0" info="">
[01:43:54.382]      // if-block "protType == 1"
[01:43:54.382]        // =>  FALSE
[01:43:54.382]      // skip if-block "protType == 1"
[01:43:54.382]    </control>
[01:43:54.382]    <control if="protType == 2" while="" timeout="0" info="">
[01:43:54.382]      // if-block "protType == 2"
[01:43:54.382]        // =>  TRUE
[01:43:54.382]      <control if="isSWJ" while="" timeout="0" info="">
[01:43:54.382]        // if-block "isSWJ"
[01:43:54.383]          // =>  TRUE
[01:43:54.383]        <control if="hasDormant" while="" timeout="0" info="">
[01:43:54.383]          // if-block "hasDormant"
[01:43:54.383]            // =>  FALSE
[01:43:54.383]          // skip if-block "hasDormant"
[01:43:54.383]        </control>
[01:43:54.383]        <control if="!hasDormant" while="" timeout="0" info="">
[01:43:54.383]          // if-block "!hasDormant"
[01:43:54.383]            // =>  TRUE
[01:43:54.383]          <block atomic="false" info="">
[01:43:54.384]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:43:54.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:43:54.388]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:43:54.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:43:54.390]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:43:54.391]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:43:54.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:43:54.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:43:54.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:43:54.395]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:43:54.395]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:43:54.396]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:43:54.397]          </block>
[01:43:54.397]          // end if-block "!hasDormant"
[01:43:54.397]        </control>
[01:43:54.397]        // end if-block "isSWJ"
[01:43:54.397]      </control>
[01:43:54.397]      <control if="!isSWJ" while="" timeout="0" info="">
[01:43:54.397]        // if-block "!isSWJ"
[01:43:54.398]          // =>  FALSE
[01:43:54.398]        // skip if-block "!isSWJ"
[01:43:54.398]      </control>
[01:43:54.398]      <block atomic="false" info="">
[01:43:54.398]        ReadDP(0x0);
[01:43:54.399]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:43:54.399]      </block>
[01:43:54.399]      // end if-block "protType == 2"
[01:43:54.399]    </control>
[01:43:54.399]  </sequence>
[01:43:54.399]  
[01:43:54.403]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:43:54.403]  
[01:43:54.403]  <debugvars>
[01:43:54.403]    // Pre-defined
[01:43:54.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:43:54.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:43:54.403]    __dp=0x00000000
[01:43:54.403]    __ap=0x00000000
[01:43:54.403]    __traceout=0x00000000      (Trace Disabled)
[01:43:54.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:43:54.404]    __FlashAddr=0x00000000
[01:43:54.404]    __FlashLen=0x00000000
[01:43:54.404]    __FlashArg=0x00000000
[01:43:54.404]    __FlashOp=0x00000000
[01:43:54.404]    __Result=0x00000000
[01:43:54.404]  </debugvars>
[01:43:54.404]  
[01:43:54.405]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:43:54.405]    <block atomic="false" info="">
[01:43:54.405]      __var SW_DP_ABORT       = 0x0;
[01:43:54.405]        // -> [SW_DP_ABORT <= 0x00000000]
[01:43:54.405]      __var DP_CTRL_STAT      = 0x4;
[01:43:54.405]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:43:54.405]      __var DP_SELECT         = 0x8;
[01:43:54.405]        // -> [DP_SELECT <= 0x00000008]
[01:43:54.406]      __var powered_down      = 0;
[01:43:54.406]        // -> [powered_down <= 0x00000000]
[01:43:54.406]      WriteDP(DP_SELECT, 0x00000000);
[01:43:54.407]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:43:54.408]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:43:54.409]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:43:54.409]        // -> [powered_down <= 0x00000001]
[01:43:54.409]    </block>
[01:43:54.409]    <control if="powered_down" while="" timeout="0" info="">
[01:43:54.410]      // if-block "powered_down"
[01:43:54.410]        // =>  TRUE
[01:43:54.410]      <block atomic="false" info="">
[01:43:54.410]        Message(0, "Debug/System power-up request sent");
[01:43:54.412]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:43:54.414]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:43:54.414]      </block>
[01:43:54.414]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:43:54.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:43:54.416]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:43:54.416]        // while-condition  =>  FALSE
[01:43:54.416]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:43:54.416]      </control>
[01:43:54.416]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:43:54.416]        // if-block "(__protocol & 0xFFFF) == 1"
[01:43:54.416]          // =>  FALSE
[01:43:54.417]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:43:54.417]      </control>
[01:43:54.417]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:43:54.417]        // if-block "(__protocol & 0xFFFF) == 2"
[01:43:54.417]          // =>  TRUE
[01:43:54.417]        <block atomic="false" info="">
[01:43:54.417]          Message(0, "executing SWD power up");
[01:43:54.419]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:43:54.424]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:43:54.425]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:43:54.428]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:43:54.428]        </block>
[01:43:54.428]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:43:54.428]      </control>
[01:43:54.428]      // end if-block "powered_down"
[01:43:54.428]    </control>
[01:43:54.428]    <block atomic="false" info="">
[01:43:54.429]      __var DEBUG_PORT_VAL    = 0;
[01:43:54.429]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:43:54.429]      __var ACCESS_POINT_VAL  = 0;
[01:43:54.429]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:43:54.429]      __ap = 1; 
[01:43:54.429]        // -> [__ap <= 0x00000001]
[01:43:54.429]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:43:54.432]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:43:54.433]      __ap = 4;
[01:43:54.433]        // -> [__ap <= 0x00000004]
[01:43:54.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:43:54.436]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:43:54.436]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:43:54.436]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:43:54.439]    </block>
[01:43:54.439]    <block atomic="false" info="">
[01:43:54.439]      __var nReset = 0x80;
[01:43:54.439]        // -> [nReset <= 0x00000080]
[01:43:54.439]      __var canReadPins = 0;
[01:43:54.439]        // -> [canReadPins <= 0x00000000]
[01:43:54.440]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:43:54.441]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:43:54.441]        // -> [canReadPins <= 0x00000001]
[01:43:54.441]    </block>
[01:43:54.441]    <control if="" while="1" timeout="200" info="">
[01:43:54.441]      // while "1"  (timeout="200")
[01:43:54.442]      // while-condition  =>  TRUE
[01:43:54.442]      // while "1"  (timeout="200")
[01:43:54.442]      // while-condition  =>  TRUE
[01:43:54.442]      // while "1"  (timeout="200")
[01:43:54.442]      // while-condition  =>  TRUE
[01:43:54.442]      // while "1"  (timeout="200")
[01:43:54.442]      // while-condition  =>  TRUE
[01:43:54.442]      // while "1"  (timeout="200")
[01:43:54.442]      // while-condition  =>  TRUE
[01:43:54.443]      // while "1"  (timeout="200")
[01:43:54.443]      // while-condition  =>  TRUE
[01:43:54.443]      // while "1"  (timeout="200")
[01:43:54.443]      // while-condition  =>  TRUE
[01:43:54.443]      // while "1"  (timeout="200")
[01:43:54.443]      // while-condition  =>  TRUE
[01:43:54.443]      // while "1"  (timeout="200")
[01:43:54.443]      // while-condition  =>  TRUE
[01:43:54.443]      // while "1"  (timeout="200")
[01:43:54.444]      // while-condition  =>  TRUE
[01:43:54.444]      // while "1"  (timeout="200")
[01:43:54.444]      // while-condition  =>  TRUE
[01:43:54.444]      // while "1"  (timeout="200")
[01:43:54.444]      // while-condition  =>  TRUE
[01:43:54.444]      // while "1"  (timeout="200")
[01:43:54.444]      // while-condition  =>  TRUE
[01:43:54.444]      // while "1"  (timeout="200")
[01:43:54.445]      // while-condition  =>  TRUE
[01:43:54.445]      // while "1"  (timeout="200")
[01:43:54.445]      // while-condition  =>  TRUE
[01:43:54.445]      // while "1"  (timeout="200")
[01:43:54.445]      // while-condition  =>  TRUE
[01:43:54.445]      // while "1"  (timeout="200")
[01:43:54.445]      // while-condition  =>  TRUE
[01:43:54.445]      // while "1"  (timeout="200")
[01:43:54.445]      // while-condition  =>  TRUE
[01:43:54.445]      // while "1"  (timeout="200")
[01:43:54.446]      // while-condition  =>  TRUE
[01:43:54.446]      // while "1"  (timeout="200")
[01:43:54.446]      // while-condition  =>  TRUE
[01:43:54.446]      // while "1"  (timeout="200")
[01:43:54.446]      // while-condition  =>  TRUE
[01:43:54.446]      // while "1"  (timeout="200")
[01:43:54.446]      // while-condition  =>  TRUE
[01:43:54.446]      // while "1"  (timeout="200")
[01:43:54.446]      // while-condition  =>  TRUE
[01:43:54.446]      // while "1"  (timeout="200")
[01:43:54.447]      // while-condition  =>  TRUE
[01:43:54.447]      // while "1"  (timeout="200")
[01:43:54.447]      // while-condition  =>  TRUE
[01:43:54.447]      // while "1"  (timeout="200")
[01:43:54.447]      // while-condition  =>  TRUE
[01:43:54.447]      // while "1"  (timeout="200")
[01:43:54.448]      // while-condition  =>  TRUE
[01:43:54.448]      // while "1"  (timeout="200")
[01:43:54.448]      // while-condition  =>  TRUE
[01:43:54.448]      // while "1"  (timeout="200")
[01:43:54.448]      // while-condition  =>  TRUE
[01:43:54.448]      // while "1"  (timeout="200")
[01:43:54.448]      // while-condition  =>  TRUE
[01:43:54.448]      // while "1"  (timeout="200")
[01:43:54.448]      // while-condition  =>  TRUE
[01:43:54.448]      // while "1"  (timeout="200")
[01:43:54.449]      // while-condition  =>  TRUE
[01:43:54.449]      // while "1"  (timeout="200")
[01:43:54.449]      // while-condition  =>  TRUE
[01:43:54.449]      // while "1"  (timeout="200")
[01:43:54.449]      // while-condition  =>  TRUE
[01:43:54.449]      // while "1"  (timeout="200")
[01:43:54.449]      // while-condition  =>  TRUE
[01:43:54.449]      // while "1"  (timeout="200")
[01:43:54.449]      // while-condition  =>  TRUE
[01:43:54.449]      // while "1"  (timeout="200")
[01:43:54.450]      // while-condition  =>  TRUE
[01:43:54.450]      // while "1"  (timeout="200")
[01:43:54.450]      // while-condition  =>  TRUE
[01:43:54.450]      // while "1"  (timeout="200")
[01:43:54.450]      // while-condition  =>  TRUE
[01:43:54.450]      // while "1"  (timeout="200")
[01:43:54.450]      // while-condition  =>  TRUE
[01:43:54.450]      // while "1"  (timeout="200")
[01:43:54.450]      // while-condition  =>  TRUE
[01:43:54.451]      // while "1"  (timeout="200")
[01:43:54.451]      // while-condition  =>  TRUE
[01:43:54.451]      // while "1"  (timeout="200")
[01:43:54.451]      // while-condition  =>  TRUE
[01:43:54.451]      // while "1"  (timeout="200")
[01:43:54.451]      // while-condition  =>  TRUE
[01:43:54.451]      // while "1"  (timeout="200")
[01:43:54.451]      // while-condition  =>  TRUE
[01:43:54.451]      // while "1"  (timeout="200")
[01:43:54.451]      // while-condition  =>  TRUE
[01:43:54.452]      // while "1"  (timeout="200")
[01:43:54.452]      // while-condition  =>  TRUE
[01:43:54.452]      // while "1"  (timeout="200")
[01:43:54.452]      // while-condition  =>  TRUE
[01:43:54.452]      // while "1"  (timeout="200")
[01:43:54.452]      // while-condition  =>  TRUE
[01:43:54.452]      // while "1"  (timeout="200")
[01:43:54.452]      // while-condition  =>  TRUE
[01:43:54.452]      // while "1"  (timeout="200")
[01:43:54.452]      // while-condition  =>  TRUE
[01:43:54.452]      // while "1"  (timeout="200")
[01:43:54.453]      // while-condition  =>  TRUE
[01:43:54.453]      // while "1"  (timeout="200")
[01:43:54.453]      // while-condition  =>  TRUE
[01:43:54.453]      // while "1"  (timeout="200")
[01:43:54.453]      // while-condition  =>  TRUE
[01:43:54.453]      // while "1"  (timeout="200")
[01:43:54.453]      // while-condition  =>  TRUE
[01:43:54.453]      // while "1"  (timeout="200")
[01:43:54.453]      // while-condition  =>  TRUE
[01:43:54.453]      // while "1"  (timeout="200")
[01:43:54.454]      // while-condition  =>  TRUE
[01:43:54.454]      // while "1"  (timeout="200")
[01:43:54.454]      // while  =>  TIMEOUT
[01:43:54.454]      // end while "1"
[01:43:54.454]    </control>
[01:43:54.454]    <control if="canReadPins" while="" timeout="0" info="">
[01:43:54.454]      // if-block "canReadPins"
[01:43:54.454]        // =>  TRUE
[01:43:54.454]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:43:54.455]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:43:54.456]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:43:54.456]        // while-condition  =>  FALSE
[01:43:54.456]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:43:54.456]      </control>
[01:43:54.457]      // end if-block "canReadPins"
[01:43:54.457]    </control>
[01:43:54.457]    <control if="!canReadPins" while="" timeout="0" info="">
[01:43:54.457]      // if-block "!canReadPins"
[01:43:54.457]        // =>  FALSE
[01:43:54.457]      // skip if-block "!canReadPins"
[01:43:54.457]    </control>
[01:43:54.457]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:43:54.457]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:43:54.457]        // =>  TRUE
[01:43:54.458]      <block atomic="false" info="">
[01:43:54.458]        WriteAP(0x00, 0x190008);
[01:43:54.459]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:43:54.461]        WriteAP(0xF0, 0x01);
[01:43:54.463]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:43:54.463]      </block>
[01:43:54.464]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:43:54.464]    </control>
[01:43:54.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:43:54.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:43:54.464]        // =>  FALSE
[01:43:54.464]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:43:54.464]    </control>
[01:43:54.464]    <block atomic="false" info="">
[01:43:54.464]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:43:54.467]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:43:54.467]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:43:54.467]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:43:54.471]      __ap = 0; //lets make sure we reset the access point selection
[01:43:54.471]        // -> [__ap <= 0x00000000]
[01:43:54.471]    </block>
[01:43:54.471]  </sequence>
[01:43:54.471]  
[01:43:54.494]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:43:54.494]  
[01:43:54.494]  <debugvars>
[01:43:54.494]    // Pre-defined
[01:43:54.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:43:54.494]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:43:54.494]    __dp=0x00000000
[01:43:54.494]    __ap=0x00000000
[01:43:54.494]    __traceout=0x00000000      (Trace Disabled)
[01:43:54.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:43:54.495]    __FlashAddr=0x00000000
[01:43:54.495]    __FlashLen=0x00000000
[01:43:54.495]    __FlashArg=0x00000000
[01:43:54.495]    __FlashOp=0x00000000
[01:43:54.495]    __Result=0x00000000
[01:43:54.495]  </debugvars>
[01:43:54.495]  
[01:43:54.495]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:43:54.495]    <block atomic="false" info="">
[01:43:54.496]      __var deviceID = 0;
[01:43:54.496]        // -> [deviceID <= 0x00000000]
[01:43:54.496]      __var version = 0;
[01:43:54.496]        // -> [version <= 0x00000000]
[01:43:54.496]      __var partNum = 0;
[01:43:54.496]        // -> [partNum <= 0x00000000]
[01:43:54.496]      __var manuf = 0;
[01:43:54.496]        // -> [manuf <= 0x00000000]
[01:43:54.496]      __var isMSPM0G1X0X_G3X0X = 0;
[01:43:54.496]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:43:54.496]      __var isProduction = 0;
[01:43:54.496]        // -> [isProduction <= 0x00000000]
[01:43:54.498]      __var continueId = 0;
[01:43:54.498]        // -> [continueId <= 0x00000000]
[01:43:54.498]      deviceID =   Read32(0x41C40004);
[01:43:54.503]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:43:54.503]        // -> [deviceID <= 0x2BB8802F]
[01:43:54.503]      version = deviceID >> 28;
[01:43:54.503]        // -> [version <= 0x00000002]
[01:43:54.503]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:43:54.503]        // -> [partNum <= 0x0000BB88]
[01:43:54.503]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:43:54.503]        // -> [manuf <= 0x00000017]
[01:43:54.503]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:43:54.503]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:43:54.503]      isProduction = (version > 0);
[01:43:54.504]        // -> [isProduction <= 0x00000001]
[01:43:54.504]    </block>
[01:43:54.504]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:43:54.504]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:43:54.504]        // =>  FALSE
[01:43:54.504]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:43:54.504]    </control>
[01:43:54.504]    <control if="continueId == 4" while="" timeout="0" info="">
[01:43:54.504]      // if-block "continueId == 4"
[01:43:54.504]        // =>  FALSE
[01:43:54.505]      // skip if-block "continueId == 4"
[01:43:54.505]    </control>
[01:43:54.505]    <control if="!isProduction" while="" timeout="0" info="">
[01:43:54.505]      // if-block "!isProduction"
[01:43:54.505]        // =>  FALSE
[01:43:54.505]      // skip if-block "!isProduction"
[01:43:54.505]    </control>
[01:43:54.505]  </sequence>
[01:43:54.505]  
[01:47:56.389]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:47:56.389]  
[01:47:56.398]  <debugvars>
[01:47:56.398]    // Pre-defined
[01:47:56.398]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:47:56.398]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:47:56.398]    __dp=0x00000000
[01:47:56.398]    __ap=0x00000000
[01:47:56.398]    __traceout=0x00000000      (Trace Disabled)
[01:47:56.398]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:47:56.398]    __FlashAddr=0x00000000
[01:47:56.399]    __FlashLen=0x00000000
[01:47:56.399]    __FlashArg=0x00000000
[01:47:56.399]    __FlashOp=0x00000000
[01:47:56.399]    __Result=0x00000000
[01:47:56.399]  </debugvars>
[01:47:56.399]  
[01:47:56.399]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:47:56.399]    <block atomic="false" info="">
[01:47:56.399]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:47:56.399]        // -> [isSWJ <= 0x00000001]
[01:47:56.399]      __var hasDormant = __protocol & 0x00020000;
[01:47:56.400]        // -> [hasDormant <= 0x00000000]
[01:47:56.400]      __var protType   = __protocol & 0x0000FFFF;
[01:47:56.400]        // -> [protType <= 0x00000002]
[01:47:56.400]    </block>
[01:47:56.400]    <control if="protType == 1" while="" timeout="0" info="">
[01:47:56.400]      // if-block "protType == 1"
[01:47:56.400]        // =>  FALSE
[01:47:56.400]      // skip if-block "protType == 1"
[01:47:56.400]    </control>
[01:47:56.400]    <control if="protType == 2" while="" timeout="0" info="">
[01:47:56.400]      // if-block "protType == 2"
[01:47:56.400]        // =>  TRUE
[01:47:56.400]      <control if="isSWJ" while="" timeout="0" info="">
[01:47:56.400]        // if-block "isSWJ"
[01:47:56.400]          // =>  TRUE
[01:47:56.400]        <control if="hasDormant" while="" timeout="0" info="">
[01:47:56.400]          // if-block "hasDormant"
[01:47:56.402]            // =>  FALSE
[01:47:56.402]          // skip if-block "hasDormant"
[01:47:56.402]        </control>
[01:47:56.402]        <control if="!hasDormant" while="" timeout="0" info="">
[01:47:56.402]          // if-block "!hasDormant"
[01:47:56.402]            // =>  TRUE
[01:47:56.402]          <block atomic="false" info="">
[01:47:56.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:47:56.404]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:47:56.404]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:47:56.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:47:56.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:47:56.406]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:47:56.406]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:47:56.408]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:47:56.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:47:56.409]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:47:56.409]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:47:56.411]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:47:56.411]          </block>
[01:47:56.411]          // end if-block "!hasDormant"
[01:47:56.411]        </control>
[01:47:56.411]        // end if-block "isSWJ"
[01:47:56.412]      </control>
[01:47:56.412]      <control if="!isSWJ" while="" timeout="0" info="">
[01:47:56.412]        // if-block "!isSWJ"
[01:47:56.412]          // =>  FALSE
[01:47:56.412]        // skip if-block "!isSWJ"
[01:47:56.412]      </control>
[01:47:56.412]      <block atomic="false" info="">
[01:47:56.412]        ReadDP(0x0);
[01:47:56.414]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:47:56.414]      </block>
[01:47:56.414]      // end if-block "protType == 2"
[01:47:56.414]    </control>
[01:47:56.414]  </sequence>
[01:47:56.414]  
[01:47:56.417]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:47:56.417]  
[01:47:56.417]  <debugvars>
[01:47:56.417]    // Pre-defined
[01:47:56.417]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:47:56.417]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:47:56.417]    __dp=0x00000000
[01:47:56.417]    __ap=0x00000000
[01:47:56.417]    __traceout=0x00000000      (Trace Disabled)
[01:47:56.417]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:47:56.417]    __FlashAddr=0x00000000
[01:47:56.417]    __FlashLen=0x00000000
[01:47:56.417]    __FlashArg=0x00000000
[01:47:56.417]    __FlashOp=0x00000000
[01:47:56.419]    __Result=0x00000000
[01:47:56.419]  </debugvars>
[01:47:56.419]  
[01:47:56.419]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:47:56.419]    <block atomic="false" info="">
[01:47:56.419]      __var SW_DP_ABORT       = 0x0;
[01:47:56.419]        // -> [SW_DP_ABORT <= 0x00000000]
[01:47:56.419]      __var DP_CTRL_STAT      = 0x4;
[01:47:56.419]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:47:56.419]      __var DP_SELECT         = 0x8;
[01:47:56.419]        // -> [DP_SELECT <= 0x00000008]
[01:47:56.419]      __var powered_down      = 0;
[01:47:56.419]        // -> [powered_down <= 0x00000000]
[01:47:56.420]      WriteDP(DP_SELECT, 0x00000000);
[01:47:56.425]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:47:56.425]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:47:56.427]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:47:56.427]        // -> [powered_down <= 0x00000001]
[01:47:56.427]    </block>
[01:47:56.427]    <control if="powered_down" while="" timeout="0" info="">
[01:47:56.428]      // if-block "powered_down"
[01:47:56.428]        // =>  TRUE
[01:47:56.428]      <block atomic="false" info="">
[01:47:56.428]        Message(0, "Debug/System power-up request sent");
[01:47:56.428]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:47:56.430]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:47:56.430]      </block>
[01:47:56.430]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:47:56.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:47:56.433]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:47:56.433]        // while-condition  =>  FALSE
[01:47:56.433]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:47:56.433]      </control>
[01:47:56.433]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:47:56.433]        // if-block "(__protocol & 0xFFFF) == 1"
[01:47:56.433]          // =>  FALSE
[01:47:56.434]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:47:56.434]      </control>
[01:47:56.434]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:47:56.434]        // if-block "(__protocol & 0xFFFF) == 2"
[01:47:56.434]          // =>  TRUE
[01:47:56.434]        <block atomic="false" info="">
[01:47:56.434]          Message(0, "executing SWD power up");
[01:47:56.434]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:47:56.437]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:47:56.437]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:47:56.439]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:47:56.439]        </block>
[01:47:56.439]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:47:56.439]      </control>
[01:47:56.439]      // end if-block "powered_down"
[01:47:56.439]    </control>
[01:47:56.439]    <block atomic="false" info="">
[01:47:56.440]      __var DEBUG_PORT_VAL    = 0;
[01:47:56.440]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:47:56.440]      __var ACCESS_POINT_VAL  = 0;
[01:47:56.440]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:47:56.440]      __ap = 1; 
[01:47:56.440]        // -> [__ap <= 0x00000001]
[01:47:56.440]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:47:56.446]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:47:56.446]      __ap = 4;
[01:47:56.446]        // -> [__ap <= 0x00000004]
[01:47:56.446]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:47:56.452]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:47:56.452]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:47:56.452]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:47:56.452]    </block>
[01:47:56.453]    <block atomic="false" info="">
[01:47:56.453]      __var nReset = 0x80;
[01:47:56.453]        // -> [nReset <= 0x00000080]
[01:47:56.453]      __var canReadPins = 0;
[01:47:56.453]        // -> [canReadPins <= 0x00000000]
[01:47:56.453]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:47:56.454]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:47:56.456]        // -> [canReadPins <= 0x00000001]
[01:47:56.456]    </block>
[01:47:56.456]    <control if="" while="1" timeout="200" info="">
[01:47:56.456]      // while "1"  (timeout="200")
[01:47:56.456]      // while-condition  =>  TRUE
[01:47:56.456]      // while "1"  (timeout="200")
[01:47:56.456]      // while-condition  =>  TRUE
[01:47:56.456]      // while "1"  (timeout="200")
[01:47:56.457]      // while-condition  =>  TRUE
[01:47:56.457]      // while "1"  (timeout="200")
[01:47:56.457]      // while-condition  =>  TRUE
[01:47:56.457]      // while "1"  (timeout="200")
[01:47:56.457]      // while-condition  =>  TRUE
[01:47:56.457]      // while "1"  (timeout="200")
[01:47:56.457]      // while-condition  =>  TRUE
[01:47:56.457]      // while "1"  (timeout="200")
[01:47:56.457]      // while-condition  =>  TRUE
[01:47:56.457]      // while "1"  (timeout="200")
[01:47:56.458]      // while-condition  =>  TRUE
[01:47:56.458]      // while "1"  (timeout="200")
[01:47:56.458]      // while-condition  =>  TRUE
[01:47:56.458]      // while "1"  (timeout="200")
[01:47:56.458]      // while-condition  =>  TRUE
[01:47:56.458]      // while "1"  (timeout="200")
[01:47:56.458]      // while-condition  =>  TRUE
[01:47:56.459]      // while "1"  (timeout="200")
[01:47:56.459]      // while-condition  =>  TRUE
[01:47:56.459]      // while "1"  (timeout="200")
[01:47:56.459]      // while-condition  =>  TRUE
[01:47:56.459]      // while "1"  (timeout="200")
[01:47:56.459]      // while-condition  =>  TRUE
[01:47:56.460]      // while "1"  (timeout="200")
[01:47:56.460]      // while-condition  =>  TRUE
[01:47:56.460]      // while "1"  (timeout="200")
[01:47:56.460]      // while-condition  =>  TRUE
[01:47:56.460]      // while "1"  (timeout="200")
[01:47:56.460]      // while-condition  =>  TRUE
[01:47:56.460]      // while "1"  (timeout="200")
[01:47:56.460]      // while-condition  =>  TRUE
[01:47:56.460]      // while "1"  (timeout="200")
[01:47:56.460]      // while-condition  =>  TRUE
[01:47:56.460]      // while "1"  (timeout="200")
[01:47:56.461]      // while-condition  =>  TRUE
[01:47:56.461]      // while "1"  (timeout="200")
[01:47:56.461]      // while-condition  =>  TRUE
[01:47:56.461]      // while "1"  (timeout="200")
[01:47:56.461]      // while-condition  =>  TRUE
[01:47:56.461]      // while "1"  (timeout="200")
[01:47:56.461]      // while-condition  =>  TRUE
[01:47:56.461]      // while "1"  (timeout="200")
[01:47:56.461]      // while-condition  =>  TRUE
[01:47:56.461]      // while "1"  (timeout="200")
[01:47:56.461]      // while-condition  =>  TRUE
[01:47:56.462]      // while "1"  (timeout="200")
[01:47:56.462]      // while-condition  =>  TRUE
[01:47:56.462]      // while "1"  (timeout="200")
[01:47:56.462]      // while-condition  =>  TRUE
[01:47:56.462]      // while "1"  (timeout="200")
[01:47:56.462]      // while-condition  =>  TRUE
[01:47:56.462]      // while "1"  (timeout="200")
[01:47:56.462]      // while-condition  =>  TRUE
[01:47:56.462]      // while "1"  (timeout="200")
[01:47:56.462]      // while-condition  =>  TRUE
[01:47:56.462]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.463]      // while-condition  =>  TRUE
[01:47:56.463]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.464]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.464]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.464]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.464]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.464]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.464]      // while "1"  (timeout="200")
[01:47:56.464]      // while-condition  =>  TRUE
[01:47:56.465]      // while "1"  (timeout="200")
[01:47:56.465]      // while-condition  =>  TRUE
[01:47:56.465]      // while "1"  (timeout="200")
[01:47:56.465]      // while-condition  =>  TRUE
[01:47:56.465]      // while "1"  (timeout="200")
[01:47:56.465]      // while-condition  =>  TRUE
[01:47:56.466]      // while "1"  (timeout="200")
[01:47:56.466]      // while-condition  =>  TRUE
[01:47:56.466]      // while "1"  (timeout="200")
[01:47:56.466]      // while-condition  =>  TRUE
[01:47:56.466]      // while "1"  (timeout="200")
[01:47:56.466]      // while-condition  =>  TRUE
[01:47:56.466]      // while "1"  (timeout="200")
[01:47:56.466]      // while-condition  =>  TRUE
[01:47:56.466]      // while "1"  (timeout="200")
[01:47:56.467]      // while-condition  =>  TRUE
[01:47:56.467]      // while "1"  (timeout="200")
[01:47:56.467]      // while-condition  =>  TRUE
[01:47:56.467]      // while "1"  (timeout="200")
[01:47:56.467]      // while-condition  =>  TRUE
[01:47:56.467]      // while "1"  (timeout="200")
[01:47:56.467]      // while-condition  =>  TRUE
[01:47:56.467]      // while "1"  (timeout="200")
[01:47:56.467]      // while-condition  =>  TRUE
[01:47:56.467]      // while "1"  (timeout="200")
[01:47:56.467]      // while-condition  =>  TRUE
[01:47:56.468]      // while "1"  (timeout="200")
[01:47:56.468]      // while-condition  =>  TRUE
[01:47:56.468]      // while "1"  (timeout="200")
[01:47:56.468]      // while-condition  =>  TRUE
[01:47:56.468]      // while "1"  (timeout="200")
[01:47:56.468]      // while-condition  =>  TRUE
[01:47:56.468]      // while "1"  (timeout="200")
[01:47:56.468]      // while-condition  =>  TRUE
[01:47:56.468]      // while "1"  (timeout="200")
[01:47:56.468]      // while-condition  =>  TRUE
[01:47:56.468]      // while "1"  (timeout="200")
[01:47:56.468]      // while-condition  =>  TRUE
[01:47:56.469]      // while "1"  (timeout="200")
[01:47:56.469]      // while-condition  =>  TRUE
[01:47:56.469]      // while "1"  (timeout="200")
[01:47:56.469]      // while-condition  =>  TRUE
[01:47:56.469]      // while "1"  (timeout="200")
[01:47:56.469]      // while-condition  =>  TRUE
[01:47:56.469]      // while "1"  (timeout="200")
[01:47:56.469]      // while-condition  =>  TRUE
[01:47:56.469]      // while "1"  (timeout="200")
[01:47:56.469]      // while-condition  =>  TRUE
[01:47:56.469]      // while "1"  (timeout="200")
[01:47:56.470]      // while-condition  =>  TRUE
[01:47:56.470]      // while "1"  (timeout="200")
[01:47:56.470]      // while  =>  TIMEOUT
[01:47:56.470]      // end while "1"
[01:47:56.470]    </control>
[01:47:56.470]    <control if="canReadPins" while="" timeout="0" info="">
[01:47:56.470]      // if-block "canReadPins"
[01:47:56.470]        // =>  TRUE
[01:47:56.470]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:47:56.470]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:47:56.473]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:47:56.473]        // while-condition  =>  FALSE
[01:47:56.473]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:47:56.473]      </control>
[01:47:56.473]      // end if-block "canReadPins"
[01:47:56.474]    </control>
[01:47:56.474]    <control if="!canReadPins" while="" timeout="0" info="">
[01:47:56.474]      // if-block "!canReadPins"
[01:47:56.474]        // =>  FALSE
[01:47:56.474]      // skip if-block "!canReadPins"
[01:47:56.474]    </control>
[01:47:56.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:47:56.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:47:56.474]        // =>  TRUE
[01:47:56.474]      <block atomic="false" info="">
[01:47:56.474]        WriteAP(0x00, 0x190008);
[01:47:56.476]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:47:56.476]        WriteAP(0xF0, 0x01);
[01:47:56.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:47:56.480]      </block>
[01:47:56.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:47:56.480]    </control>
[01:47:56.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:47:56.480]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:47:56.480]        // =>  FALSE
[01:47:56.480]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:47:56.480]    </control>
[01:47:56.480]    <block atomic="false" info="">
[01:47:56.480]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:47:56.487]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:47:56.487]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:47:56.487]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:47:56.488]      __ap = 0; //lets make sure we reset the access point selection
[01:47:56.488]        // -> [__ap <= 0x00000000]
[01:47:56.488]    </block>
[01:47:56.488]  </sequence>
[01:47:56.488]  
[01:47:56.515]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:47:56.515]  
[01:47:56.515]  <debugvars>
[01:47:56.515]    // Pre-defined
[01:47:56.515]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:47:56.515]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:47:56.515]    __dp=0x00000000
[01:47:56.515]    __ap=0x00000000
[01:47:56.516]    __traceout=0x00000000      (Trace Disabled)
[01:47:56.516]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:47:56.516]    __FlashAddr=0x00000000
[01:47:56.516]    __FlashLen=0x00000000
[01:47:56.516]    __FlashArg=0x00000000
[01:47:56.516]    __FlashOp=0x00000000
[01:47:56.516]    __Result=0x00000000
[01:47:56.516]  </debugvars>
[01:47:56.516]  
[01:47:56.516]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:47:56.516]    <block atomic="false" info="">
[01:47:56.516]      __var deviceID = 0;
[01:47:56.518]        // -> [deviceID <= 0x00000000]
[01:47:56.518]      __var version = 0;
[01:47:56.518]        // -> [version <= 0x00000000]
[01:47:56.518]      __var partNum = 0;
[01:47:56.518]        // -> [partNum <= 0x00000000]
[01:47:56.518]      __var manuf = 0;
[01:47:56.518]        // -> [manuf <= 0x00000000]
[01:47:56.518]      __var isMSPM0G1X0X_G3X0X = 0;
[01:47:56.518]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:47:56.518]      __var isProduction = 0;
[01:47:56.518]        // -> [isProduction <= 0x00000000]
[01:47:56.518]      __var continueId = 0;
[01:47:56.519]        // -> [continueId <= 0x00000000]
[01:47:56.519]      deviceID =   Read32(0x41C40004);
[01:47:56.526]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:47:56.526]        // -> [deviceID <= 0x2BB8802F]
[01:47:56.527]      version = deviceID >> 28;
[01:47:56.527]        // -> [version <= 0x00000002]
[01:47:56.527]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:47:56.527]        // -> [partNum <= 0x0000BB88]
[01:47:56.527]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:47:56.527]        // -> [manuf <= 0x00000017]
[01:47:56.527]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:47:56.527]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:47:56.527]      isProduction = (version > 0);
[01:47:56.527]        // -> [isProduction <= 0x00000001]
[01:47:56.527]    </block>
[01:47:56.528]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:47:56.528]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:47:56.528]        // =>  FALSE
[01:47:56.528]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:47:56.528]    </control>
[01:47:56.528]    <control if="continueId == 4" while="" timeout="0" info="">
[01:47:56.528]      // if-block "continueId == 4"
[01:47:56.529]        // =>  FALSE
[01:47:56.529]      // skip if-block "continueId == 4"
[01:47:56.529]    </control>
[01:47:56.529]    <control if="!isProduction" while="" timeout="0" info="">
[01:47:56.529]      // if-block "!isProduction"
[01:47:56.529]        // =>  FALSE
[01:47:56.529]      // skip if-block "!isProduction"
[01:47:56.529]    </control>
[01:47:56.529]  </sequence>
[01:47:56.529]  
[01:49:02.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:49:02.482]  
[01:49:02.491]  <debugvars>
[01:49:02.491]    // Pre-defined
[01:49:02.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:49:02.491]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:49:02.491]    __dp=0x00000000
[01:49:02.491]    __ap=0x00000000
[01:49:02.491]    __traceout=0x00000000      (Trace Disabled)
[01:49:02.491]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:49:02.491]    __FlashAddr=0x00000000
[01:49:02.492]    __FlashLen=0x00000000
[01:49:02.492]    __FlashArg=0x00000000
[01:49:02.492]    __FlashOp=0x00000000
[01:49:02.492]    __Result=0x00000000
[01:49:02.492]  </debugvars>
[01:49:02.492]  
[01:49:02.492]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:49:02.492]    <block atomic="false" info="">
[01:49:02.492]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:49:02.493]        // -> [isSWJ <= 0x00000001]
[01:49:02.494]      __var hasDormant = __protocol & 0x00020000;
[01:49:02.494]        // -> [hasDormant <= 0x00000000]
[01:49:02.494]      __var protType   = __protocol & 0x0000FFFF;
[01:49:02.494]        // -> [protType <= 0x00000002]
[01:49:02.494]    </block>
[01:49:02.494]    <control if="protType == 1" while="" timeout="0" info="">
[01:49:02.494]      // if-block "protType == 1"
[01:49:02.494]        // =>  FALSE
[01:49:02.494]      // skip if-block "protType == 1"
[01:49:02.494]    </control>
[01:49:02.494]    <control if="protType == 2" while="" timeout="0" info="">
[01:49:02.495]      // if-block "protType == 2"
[01:49:02.495]        // =>  TRUE
[01:49:02.495]      <control if="isSWJ" while="" timeout="0" info="">
[01:49:02.495]        // if-block "isSWJ"
[01:49:02.495]          // =>  TRUE
[01:49:02.495]        <control if="hasDormant" while="" timeout="0" info="">
[01:49:02.495]          // if-block "hasDormant"
[01:49:02.495]            // =>  FALSE
[01:49:02.495]          // skip if-block "hasDormant"
[01:49:02.496]        </control>
[01:49:02.496]        <control if="!hasDormant" while="" timeout="0" info="">
[01:49:02.496]          // if-block "!hasDormant"
[01:49:02.496]            // =>  TRUE
[01:49:02.496]          <block atomic="false" info="">
[01:49:02.496]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:49:02.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:49:02.498]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:49:02.501]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:49:02.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:49:02.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:49:02.503]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:49:02.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:49:02.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:49:02.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:49:02.507]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:49:02.508]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:49:02.509]          </block>
[01:49:02.509]          // end if-block "!hasDormant"
[01:49:02.509]        </control>
[01:49:02.509]        // end if-block "isSWJ"
[01:49:02.509]      </control>
[01:49:02.509]      <control if="!isSWJ" while="" timeout="0" info="">
[01:49:02.509]        // if-block "!isSWJ"
[01:49:02.510]          // =>  FALSE
[01:49:02.510]        // skip if-block "!isSWJ"
[01:49:02.510]      </control>
[01:49:02.510]      <block atomic="false" info="">
[01:49:02.510]        ReadDP(0x0);
[01:49:02.514]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:49:02.514]      </block>
[01:49:02.514]      // end if-block "protType == 2"
[01:49:02.514]    </control>
[01:49:02.514]  </sequence>
[01:49:02.514]  
[01:49:02.518]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:49:02.518]  
[01:49:02.518]  <debugvars>
[01:49:02.518]    // Pre-defined
[01:49:02.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:49:02.519]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:49:02.519]    __dp=0x00000000
[01:49:02.519]    __ap=0x00000000
[01:49:02.519]    __traceout=0x00000000      (Trace Disabled)
[01:49:02.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:49:02.519]    __FlashAddr=0x00000000
[01:49:02.519]    __FlashLen=0x00000000
[01:49:02.519]    __FlashArg=0x00000000
[01:49:02.519]    __FlashOp=0x00000000
[01:49:02.519]    __Result=0x00000000
[01:49:02.519]  </debugvars>
[01:49:02.519]  
[01:49:02.519]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:49:02.519]    <block atomic="false" info="">
[01:49:02.519]      __var SW_DP_ABORT       = 0x0;
[01:49:02.521]        // -> [SW_DP_ABORT <= 0x00000000]
[01:49:02.521]      __var DP_CTRL_STAT      = 0x4;
[01:49:02.521]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:49:02.521]      __var DP_SELECT         = 0x8;
[01:49:02.521]        // -> [DP_SELECT <= 0x00000008]
[01:49:02.521]      __var powered_down      = 0;
[01:49:02.521]        // -> [powered_down <= 0x00000000]
[01:49:02.521]      WriteDP(DP_SELECT, 0x00000000);
[01:49:02.523]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:49:02.523]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:49:02.526]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:49:02.526]        // -> [powered_down <= 0x00000001]
[01:49:02.526]    </block>
[01:49:02.526]    <control if="powered_down" while="" timeout="0" info="">
[01:49:02.526]      // if-block "powered_down"
[01:49:02.526]        // =>  TRUE
[01:49:02.526]      <block atomic="false" info="">
[01:49:02.526]        Message(0, "Debug/System power-up request sent");
[01:49:02.527]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:49:02.528]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:49:02.528]      </block>
[01:49:02.529]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:49:02.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:49:02.531]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:49:02.531]        // while-condition  =>  FALSE
[01:49:02.531]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:49:02.531]      </control>
[01:49:02.531]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:49:02.531]        // if-block "(__protocol & 0xFFFF) == 1"
[01:49:02.531]          // =>  FALSE
[01:49:02.532]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:49:02.532]      </control>
[01:49:02.532]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:49:02.532]        // if-block "(__protocol & 0xFFFF) == 2"
[01:49:02.532]          // =>  TRUE
[01:49:02.532]        <block atomic="false" info="">
[01:49:02.532]          Message(0, "executing SWD power up");
[01:49:02.532]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:49:02.537]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:49:02.537]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:49:02.542]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:49:02.542]        </block>
[01:49:02.542]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:49:02.542]      </control>
[01:49:02.542]      // end if-block "powered_down"
[01:49:02.542]    </control>
[01:49:02.542]    <block atomic="false" info="">
[01:49:02.542]      __var DEBUG_PORT_VAL    = 0;
[01:49:02.542]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:49:02.542]      __var ACCESS_POINT_VAL  = 0;
[01:49:02.542]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:49:02.542]      __ap = 1; 
[01:49:02.542]        // -> [__ap <= 0x00000001]
[01:49:02.542]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:49:02.547]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:49:02.547]      __ap = 4;
[01:49:02.547]        // -> [__ap <= 0x00000004]
[01:49:02.547]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:49:02.556]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:49:02.557]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:49:02.557]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:49:02.557]    </block>
[01:49:02.557]    <block atomic="false" info="">
[01:49:02.557]      __var nReset = 0x80;
[01:49:02.557]        // -> [nReset <= 0x00000080]
[01:49:02.557]      __var canReadPins = 0;
[01:49:02.558]        // -> [canReadPins <= 0x00000000]
[01:49:02.558]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:49:02.559]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:49:02.559]        // -> [canReadPins <= 0x00000001]
[01:49:02.559]    </block>
[01:49:02.559]    <control if="" while="1" timeout="200" info="">
[01:49:02.559]      // while "1"  (timeout="200")
[01:49:02.559]      // while-condition  =>  TRUE
[01:49:02.559]      // while "1"  (timeout="200")
[01:49:02.560]      // while-condition  =>  TRUE
[01:49:02.561]      // while "1"  (timeout="200")
[01:49:02.561]      // while-condition  =>  TRUE
[01:49:02.561]      // while "1"  (timeout="200")
[01:49:02.561]      // while-condition  =>  TRUE
[01:49:02.561]      // while "1"  (timeout="200")
[01:49:02.561]      // while-condition  =>  TRUE
[01:49:02.561]      // while "1"  (timeout="200")
[01:49:02.561]      // while-condition  =>  TRUE
[01:49:02.561]      // while "1"  (timeout="200")
[01:49:02.561]      // while-condition  =>  TRUE
[01:49:02.561]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.562]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.562]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.562]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.562]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.562]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.562]      // while "1"  (timeout="200")
[01:49:02.562]      // while-condition  =>  TRUE
[01:49:02.563]      // while "1"  (timeout="200")
[01:49:02.563]      // while-condition  =>  TRUE
[01:49:02.563]      // while "1"  (timeout="200")
[01:49:02.563]      // while-condition  =>  TRUE
[01:49:02.563]      // while "1"  (timeout="200")
[01:49:02.563]      // while-condition  =>  TRUE
[01:49:02.563]      // while "1"  (timeout="200")
[01:49:02.563]      // while-condition  =>  TRUE
[01:49:02.563]      // while "1"  (timeout="200")
[01:49:02.564]      // while-condition  =>  TRUE
[01:49:02.564]      // while "1"  (timeout="200")
[01:49:02.564]      // while  =>  TIMEOUT
[01:49:02.564]      // end while "1"
[01:49:02.564]    </control>
[01:49:02.564]    <control if="canReadPins" while="" timeout="0" info="">
[01:49:02.564]      // if-block "canReadPins"
[01:49:02.565]        // =>  TRUE
[01:49:02.565]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:49:02.565]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:49:02.566]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:49:02.567]        // while-condition  =>  FALSE
[01:49:02.567]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:49:02.567]      </control>
[01:49:02.567]      // end if-block "canReadPins"
[01:49:02.567]    </control>
[01:49:02.568]    <control if="!canReadPins" while="" timeout="0" info="">
[01:49:02.568]      // if-block "!canReadPins"
[01:49:02.568]        // =>  FALSE
[01:49:02.568]      // skip if-block "!canReadPins"
[01:49:02.568]    </control>
[01:49:02.568]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:49:02.568]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:49:02.568]        // =>  TRUE
[01:49:02.568]      <block atomic="false" info="">
[01:49:02.568]        WriteAP(0x00, 0x190008);
[01:49:02.570]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:49:02.570]        WriteAP(0xF0, 0x01);
[01:49:02.577]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:49:02.577]      </block>
[01:49:02.577]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:49:02.577]    </control>
[01:49:02.577]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:49:02.577]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:49:02.577]        // =>  FALSE
[01:49:02.577]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:49:02.577]    </control>
[01:49:02.577]    <block atomic="false" info="">
[01:49:02.577]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:49:02.585]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:49:02.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:49:02.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:49:02.586]      __ap = 0; //lets make sure we reset the access point selection
[01:49:02.586]        // -> [__ap <= 0x00000000]
[01:49:02.586]    </block>
[01:49:02.586]  </sequence>
[01:49:02.586]  
[01:49:02.607]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:49:02.607]  
[01:49:02.607]  <debugvars>
[01:49:02.608]    // Pre-defined
[01:49:02.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:49:02.608]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:49:02.608]    __dp=0x00000000
[01:49:02.608]    __ap=0x00000000
[01:49:02.608]    __traceout=0x00000000      (Trace Disabled)
[01:49:02.608]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:49:02.608]    __FlashAddr=0x00000000
[01:49:02.608]    __FlashLen=0x00000000
[01:49:02.608]    __FlashArg=0x00000000
[01:49:02.608]    __FlashOp=0x00000000
[01:49:02.609]    __Result=0x00000000
[01:49:02.609]  </debugvars>
[01:49:02.609]  
[01:49:02.609]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:49:02.609]    <block atomic="false" info="">
[01:49:02.610]      __var deviceID = 0;
[01:49:02.610]        // -> [deviceID <= 0x00000000]
[01:49:02.610]      __var version = 0;
[01:49:02.610]        // -> [version <= 0x00000000]
[01:49:02.610]      __var partNum = 0;
[01:49:02.610]        // -> [partNum <= 0x00000000]
[01:49:02.610]      __var manuf = 0;
[01:49:02.610]        // -> [manuf <= 0x00000000]
[01:49:02.610]      __var isMSPM0G1X0X_G3X0X = 0;
[01:49:02.610]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:49:02.610]      __var isProduction = 0;
[01:49:02.610]        // -> [isProduction <= 0x00000000]
[01:49:02.611]      __var continueId = 0;
[01:49:02.611]        // -> [continueId <= 0x00000000]
[01:49:02.611]      deviceID =   Read32(0x41C40004);
[01:49:02.620]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:49:02.620]        // -> [deviceID <= 0x2BB8802F]
[01:49:02.620]      version = deviceID >> 28;
[01:49:02.620]        // -> [version <= 0x00000002]
[01:49:02.621]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:49:02.621]        // -> [partNum <= 0x0000BB88]
[01:49:02.621]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:49:02.621]        // -> [manuf <= 0x00000017]
[01:49:02.621]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:49:02.621]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:49:02.621]      isProduction = (version > 0);
[01:49:02.621]        // -> [isProduction <= 0x00000001]
[01:49:02.621]    </block>
[01:49:02.621]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:49:02.621]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:49:02.622]        // =>  FALSE
[01:49:02.622]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:49:02.622]    </control>
[01:49:02.622]    <control if="continueId == 4" while="" timeout="0" info="">
[01:49:02.622]      // if-block "continueId == 4"
[01:49:02.622]        // =>  FALSE
[01:49:02.622]      // skip if-block "continueId == 4"
[01:49:02.622]    </control>
[01:49:02.622]    <control if="!isProduction" while="" timeout="0" info="">
[01:49:02.622]      // if-block "!isProduction"
[01:49:02.622]        // =>  FALSE
[01:49:02.623]      // skip if-block "!isProduction"
[01:49:02.623]    </control>
[01:49:02.623]  </sequence>
[01:49:02.623]  
[01:55:15.752]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:55:15.752]  
[01:55:15.761]  <debugvars>
[01:55:15.761]    // Pre-defined
[01:55:15.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:55:15.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:55:15.761]    __dp=0x00000000
[01:55:15.761]    __ap=0x00000000
[01:55:15.761]    __traceout=0x00000000      (Trace Disabled)
[01:55:15.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:55:15.762]    __FlashAddr=0x00000000
[01:55:15.762]    __FlashLen=0x00000000
[01:55:15.762]    __FlashArg=0x00000000
[01:55:15.762]    __FlashOp=0x00000000
[01:55:15.762]    __Result=0x00000000
[01:55:15.762]  </debugvars>
[01:55:15.762]  
[01:55:15.762]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:55:15.763]    <block atomic="false" info="">
[01:55:15.763]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:55:15.763]        // -> [isSWJ <= 0x00000001]
[01:55:15.763]      __var hasDormant = __protocol & 0x00020000;
[01:55:15.763]        // -> [hasDormant <= 0x00000000]
[01:55:15.763]      __var protType   = __protocol & 0x0000FFFF;
[01:55:15.763]        // -> [protType <= 0x00000002]
[01:55:15.763]    </block>
[01:55:15.763]    <control if="protType == 1" while="" timeout="0" info="">
[01:55:15.763]      // if-block "protType == 1"
[01:55:15.764]        // =>  FALSE
[01:55:15.764]      // skip if-block "protType == 1"
[01:55:15.764]    </control>
[01:55:15.764]    <control if="protType == 2" while="" timeout="0" info="">
[01:55:15.764]      // if-block "protType == 2"
[01:55:15.764]        // =>  TRUE
[01:55:15.764]      <control if="isSWJ" while="" timeout="0" info="">
[01:55:15.764]        // if-block "isSWJ"
[01:55:15.765]          // =>  TRUE
[01:55:15.765]        <control if="hasDormant" while="" timeout="0" info="">
[01:55:15.765]          // if-block "hasDormant"
[01:55:15.765]            // =>  FALSE
[01:55:15.765]          // skip if-block "hasDormant"
[01:55:15.765]        </control>
[01:55:15.765]        <control if="!hasDormant" while="" timeout="0" info="">
[01:55:15.766]          // if-block "!hasDormant"
[01:55:15.766]            // =>  TRUE
[01:55:15.766]          <block atomic="false" info="">
[01:55:15.766]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:55:15.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:55:15.771]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:55:15.779]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:55:15.779]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:55:15.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:55:15.785]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:55:15.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:55:15.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:55:15.789]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:55:15.789]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:55:15.791]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:55:15.791]          </block>
[01:55:15.791]          // end if-block "!hasDormant"
[01:55:15.791]        </control>
[01:55:15.791]        // end if-block "isSWJ"
[01:55:15.791]      </control>
[01:55:15.791]      <control if="!isSWJ" while="" timeout="0" info="">
[01:55:15.791]        // if-block "!isSWJ"
[01:55:15.791]          // =>  FALSE
[01:55:15.791]        // skip if-block "!isSWJ"
[01:55:15.792]      </control>
[01:55:15.792]      <block atomic="false" info="">
[01:55:15.792]        ReadDP(0x0);
[01:55:15.793]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:55:15.793]      </block>
[01:55:15.793]      // end if-block "protType == 2"
[01:55:15.794]    </control>
[01:55:15.794]  </sequence>
[01:55:15.794]  
[01:55:15.798]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:55:15.798]  
[01:55:15.799]  <debugvars>
[01:55:15.799]    // Pre-defined
[01:55:15.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:55:15.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:55:15.799]    __dp=0x00000000
[01:55:15.799]    __ap=0x00000000
[01:55:15.799]    __traceout=0x00000000      (Trace Disabled)
[01:55:15.800]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:55:15.800]    __FlashAddr=0x00000000
[01:55:15.800]    __FlashLen=0x00000000
[01:55:15.800]    __FlashArg=0x00000000
[01:55:15.800]    __FlashOp=0x00000000
[01:55:15.800]    __Result=0x00000000
[01:55:15.800]  </debugvars>
[01:55:15.800]  
[01:55:15.800]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:55:15.801]    <block atomic="false" info="">
[01:55:15.801]      __var SW_DP_ABORT       = 0x0;
[01:55:15.801]        // -> [SW_DP_ABORT <= 0x00000000]
[01:55:15.801]      __var DP_CTRL_STAT      = 0x4;
[01:55:15.801]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:55:15.801]      __var DP_SELECT         = 0x8;
[01:55:15.801]        // -> [DP_SELECT <= 0x00000008]
[01:55:15.802]      __var powered_down      = 0;
[01:55:15.802]        // -> [powered_down <= 0x00000000]
[01:55:15.802]      WriteDP(DP_SELECT, 0x00000000);
[01:55:15.805]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:55:15.805]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:55:15.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:55:15.809]        // -> [powered_down <= 0x00000001]
[01:55:15.809]    </block>
[01:55:15.809]    <control if="powered_down" while="" timeout="0" info="">
[01:55:15.809]      // if-block "powered_down"
[01:55:15.809]        // =>  TRUE
[01:55:15.809]      <block atomic="false" info="">
[01:55:15.809]        Message(0, "Debug/System power-up request sent");
[01:55:15.813]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:55:15.816]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:55:15.816]      </block>
[01:55:15.816]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:55:15.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:55:15.820]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:55:15.820]        // while-condition  =>  FALSE
[01:55:15.820]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:55:15.821]      </control>
[01:55:15.821]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:55:15.821]        // if-block "(__protocol & 0xFFFF) == 1"
[01:55:15.821]          // =>  FALSE
[01:55:15.821]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:55:15.821]      </control>
[01:55:15.821]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:55:15.821]        // if-block "(__protocol & 0xFFFF) == 2"
[01:55:15.821]          // =>  TRUE
[01:55:15.821]        <block atomic="false" info="">
[01:55:15.821]          Message(0, "executing SWD power up");
[01:55:15.823]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:55:15.829]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:55:15.829]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:55:15.833]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:55:15.834]        </block>
[01:55:15.834]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:55:15.834]      </control>
[01:55:15.834]      // end if-block "powered_down"
[01:55:15.834]    </control>
[01:55:15.834]    <block atomic="false" info="">
[01:55:15.834]      __var DEBUG_PORT_VAL    = 0;
[01:55:15.834]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:55:15.834]      __var ACCESS_POINT_VAL  = 0;
[01:55:15.834]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:55:15.834]      __ap = 1; 
[01:55:15.835]        // -> [__ap <= 0x00000001]
[01:55:15.835]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:55:15.839]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:55:15.839]      __ap = 4;
[01:55:15.839]        // -> [__ap <= 0x00000004]
[01:55:15.839]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:55:15.843]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:55:15.844]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:55:15.844]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:55:15.846]    </block>
[01:55:15.846]    <block atomic="false" info="">
[01:55:15.846]      __var nReset = 0x80;
[01:55:15.847]        // -> [nReset <= 0x00000080]
[01:55:15.847]      __var canReadPins = 0;
[01:55:15.847]        // -> [canReadPins <= 0x00000000]
[01:55:15.847]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:55:15.848]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:55:15.848]        // -> [canReadPins <= 0x00000001]
[01:55:15.849]    </block>
[01:55:15.849]    <control if="" while="1" timeout="200" info="">
[01:55:15.849]      // while "1"  (timeout="200")
[01:55:15.849]      // while-condition  =>  TRUE
[01:55:15.849]      // while "1"  (timeout="200")
[01:55:15.849]      // while-condition  =>  TRUE
[01:55:15.849]      // while "1"  (timeout="200")
[01:55:15.849]      // while-condition  =>  TRUE
[01:55:15.849]      // while "1"  (timeout="200")
[01:55:15.851]      // while-condition  =>  TRUE
[01:55:15.851]      // while "1"  (timeout="200")
[01:55:15.851]      // while-condition  =>  TRUE
[01:55:15.851]      // while "1"  (timeout="200")
[01:55:15.851]      // while-condition  =>  TRUE
[01:55:15.851]      // while "1"  (timeout="200")
[01:55:15.851]      // while-condition  =>  TRUE
[01:55:15.851]      // while "1"  (timeout="200")
[01:55:15.851]      // while-condition  =>  TRUE
[01:55:15.851]      // while "1"  (timeout="200")
[01:55:15.851]      // while-condition  =>  TRUE
[01:55:15.851]      // while "1"  (timeout="200")
[01:55:15.852]      // while-condition  =>  TRUE
[01:55:15.852]      // while "1"  (timeout="200")
[01:55:15.852]      // while-condition  =>  TRUE
[01:55:15.852]      // while "1"  (timeout="200")
[01:55:15.852]      // while-condition  =>  TRUE
[01:55:15.852]      // while "1"  (timeout="200")
[01:55:15.852]      // while-condition  =>  TRUE
[01:55:15.852]      // while "1"  (timeout="200")
[01:55:15.852]      // while-condition  =>  TRUE
[01:55:15.853]      // while "1"  (timeout="200")
[01:55:15.853]      // while-condition  =>  TRUE
[01:55:15.853]      // while "1"  (timeout="200")
[01:55:15.853]      // while-condition  =>  TRUE
[01:55:15.853]      // while "1"  (timeout="200")
[01:55:15.853]      // while-condition  =>  TRUE
[01:55:15.853]      // while "1"  (timeout="200")
[01:55:15.853]      // while-condition  =>  TRUE
[01:55:15.853]      // while "1"  (timeout="200")
[01:55:15.853]      // while-condition  =>  TRUE
[01:55:15.854]      // while "1"  (timeout="200")
[01:55:15.854]      // while-condition  =>  TRUE
[01:55:15.854]      // while "1"  (timeout="200")
[01:55:15.854]      // while-condition  =>  TRUE
[01:55:15.854]      // while "1"  (timeout="200")
[01:55:15.855]      // while-condition  =>  TRUE
[01:55:15.855]      // while "1"  (timeout="200")
[01:55:15.855]      // while-condition  =>  TRUE
[01:55:15.855]      // while "1"  (timeout="200")
[01:55:15.855]      // while-condition  =>  TRUE
[01:55:15.855]      // while "1"  (timeout="200")
[01:55:15.855]      // while-condition  =>  TRUE
[01:55:15.856]      // while "1"  (timeout="200")
[01:55:15.856]      // while-condition  =>  TRUE
[01:55:15.856]      // while "1"  (timeout="200")
[01:55:15.856]      // while-condition  =>  TRUE
[01:55:15.856]      // while "1"  (timeout="200")
[01:55:15.856]      // while-condition  =>  TRUE
[01:55:15.856]      // while "1"  (timeout="200")
[01:55:15.857]      // while-condition  =>  TRUE
[01:55:15.857]      // while "1"  (timeout="200")
[01:55:15.857]      // while-condition  =>  TRUE
[01:55:15.857]      // while "1"  (timeout="200")
[01:55:15.857]      // while-condition  =>  TRUE
[01:55:15.857]      // while "1"  (timeout="200")
[01:55:15.857]      // while-condition  =>  TRUE
[01:55:15.857]      // while "1"  (timeout="200")
[01:55:15.857]      // while-condition  =>  TRUE
[01:55:15.858]      // while "1"  (timeout="200")
[01:55:15.858]      // while-condition  =>  TRUE
[01:55:15.858]      // while "1"  (timeout="200")
[01:55:15.858]      // while-condition  =>  TRUE
[01:55:15.858]      // while "1"  (timeout="200")
[01:55:15.858]      // while-condition  =>  TRUE
[01:55:15.858]      // while "1"  (timeout="200")
[01:55:15.858]      // while-condition  =>  TRUE
[01:55:15.858]      // while "1"  (timeout="200")
[01:55:15.858]      // while-condition  =>  TRUE
[01:55:15.858]      // while "1"  (timeout="200")
[01:55:15.859]      // while-condition  =>  TRUE
[01:55:15.859]      // while "1"  (timeout="200")
[01:55:15.859]      // while-condition  =>  TRUE
[01:55:15.859]      // while "1"  (timeout="200")
[01:55:15.859]      // while-condition  =>  TRUE
[01:55:15.859]      // while "1"  (timeout="200")
[01:55:15.859]      // while-condition  =>  TRUE
[01:55:15.859]      // while "1"  (timeout="200")
[01:55:15.859]      // while-condition  =>  TRUE
[01:55:15.859]      // while "1"  (timeout="200")
[01:55:15.861]      // while-condition  =>  TRUE
[01:55:15.861]      // while "1"  (timeout="200")
[01:55:15.861]      // while  =>  TIMEOUT
[01:55:15.861]      // end while "1"
[01:55:15.861]    </control>
[01:55:15.861]    <control if="canReadPins" while="" timeout="0" info="">
[01:55:15.861]      // if-block "canReadPins"
[01:55:15.861]        // =>  TRUE
[01:55:15.861]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:55:15.861]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:55:15.862]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:55:15.862]        // while-condition  =>  FALSE
[01:55:15.862]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:55:15.862]      </control>
[01:55:15.862]      // end if-block "canReadPins"
[01:55:15.863]    </control>
[01:55:15.863]    <control if="!canReadPins" while="" timeout="0" info="">
[01:55:15.863]      // if-block "!canReadPins"
[01:55:15.863]        // =>  FALSE
[01:55:15.863]      // skip if-block "!canReadPins"
[01:55:15.863]    </control>
[01:55:15.863]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:55:15.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:55:15.864]        // =>  TRUE
[01:55:15.864]      <block atomic="false" info="">
[01:55:15.864]        WriteAP(0x00, 0x190008);
[01:55:15.871]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:55:15.871]        WriteAP(0xF0, 0x01);
[01:55:15.878]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:55:15.878]      </block>
[01:55:15.878]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:55:15.878]    </control>
[01:55:15.878]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:55:15.878]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:55:15.878]        // =>  FALSE
[01:55:15.879]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:55:15.879]    </control>
[01:55:15.879]    <block atomic="false" info="">
[01:55:15.879]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:55:15.883]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:55:15.883]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:55:15.883]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:55:15.885]      __ap = 0; //lets make sure we reset the access point selection
[01:55:15.885]        // -> [__ap <= 0x00000000]
[01:55:15.885]    </block>
[01:55:15.885]  </sequence>
[01:55:15.885]  
[01:55:15.920]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:55:15.920]  
[01:55:15.921]  <debugvars>
[01:55:15.921]    // Pre-defined
[01:55:15.921]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:55:15.921]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:55:15.921]    __dp=0x00000000
[01:55:15.921]    __ap=0x00000000
[01:55:15.921]    __traceout=0x00000000      (Trace Disabled)
[01:55:15.921]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:55:15.922]    __FlashAddr=0x00000000
[01:55:15.922]    __FlashLen=0x00000000
[01:55:15.922]    __FlashArg=0x00000000
[01:55:15.922]    __FlashOp=0x00000000
[01:55:15.922]    __Result=0x00000000
[01:55:15.922]  </debugvars>
[01:55:15.922]  
[01:55:15.922]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:55:15.922]    <block atomic="false" info="">
[01:55:15.922]      __var deviceID = 0;
[01:55:15.923]        // -> [deviceID <= 0x00000000]
[01:55:15.923]      __var version = 0;
[01:55:15.923]        // -> [version <= 0x00000000]
[01:55:15.923]      __var partNum = 0;
[01:55:15.923]        // -> [partNum <= 0x00000000]
[01:55:15.923]      __var manuf = 0;
[01:55:15.924]        // -> [manuf <= 0x00000000]
[01:55:15.924]      __var isMSPM0G1X0X_G3X0X = 0;
[01:55:15.924]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:55:15.924]      __var isProduction = 0;
[01:55:15.924]        // -> [isProduction <= 0x00000000]
[01:55:15.924]      __var continueId = 0;
[01:55:15.924]        // -> [continueId <= 0x00000000]
[01:55:15.924]      deviceID =   Read32(0x41C40004);
[01:55:15.935]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:55:15.935]        // -> [deviceID <= 0x2BB8802F]
[01:55:15.935]      version = deviceID >> 28;
[01:55:15.935]        // -> [version <= 0x00000002]
[01:55:15.935]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:55:15.935]        // -> [partNum <= 0x0000BB88]
[01:55:15.935]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:55:15.935]        // -> [manuf <= 0x00000017]
[01:55:15.935]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:55:15.935]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:55:15.936]      isProduction = (version > 0);
[01:55:15.936]        // -> [isProduction <= 0x00000001]
[01:55:15.936]    </block>
[01:55:15.936]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:55:15.936]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:55:15.936]        // =>  FALSE
[01:55:15.936]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:55:15.936]    </control>
[01:55:15.936]    <control if="continueId == 4" while="" timeout="0" info="">
[01:55:15.936]      // if-block "continueId == 4"
[01:55:15.937]        // =>  FALSE
[01:55:15.937]      // skip if-block "continueId == 4"
[01:55:15.937]    </control>
[01:55:15.937]    <control if="!isProduction" while="" timeout="0" info="">
[01:55:15.937]      // if-block "!isProduction"
[01:55:15.937]        // =>  FALSE
[01:55:15.937]      // skip if-block "!isProduction"
[01:55:15.937]    </control>
[01:55:15.937]  </sequence>
[01:55:15.938]  
[02:00:23.986]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:00:23.986]  
[02:00:23.995]  <debugvars>
[02:00:23.995]    // Pre-defined
[02:00:23.995]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:23.995]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:00:23.995]    __dp=0x00000000
[02:00:23.995]    __ap=0x00000000
[02:00:23.995]    __traceout=0x00000000      (Trace Disabled)
[02:00:23.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:23.995]    __FlashAddr=0x00000000
[02:00:23.995]    __FlashLen=0x00000000
[02:00:23.995]    __FlashArg=0x00000000
[02:00:23.995]    __FlashOp=0x00000000
[02:00:23.995]    __Result=0x00000000
[02:00:23.996]  </debugvars>
[02:00:23.996]  
[02:00:23.996]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:00:23.996]    <block atomic="false" info="">
[02:00:23.996]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:00:23.996]        // -> [isSWJ <= 0x00000001]
[02:00:23.996]      __var hasDormant = __protocol & 0x00020000;
[02:00:23.996]        // -> [hasDormant <= 0x00000000]
[02:00:23.996]      __var protType   = __protocol & 0x0000FFFF;
[02:00:23.997]        // -> [protType <= 0x00000002]
[02:00:23.997]    </block>
[02:00:23.997]    <control if="protType == 1" while="" timeout="0" info="">
[02:00:23.997]      // if-block "protType == 1"
[02:00:23.997]        // =>  FALSE
[02:00:23.997]      // skip if-block "protType == 1"
[02:00:23.997]    </control>
[02:00:23.997]    <control if="protType == 2" while="" timeout="0" info="">
[02:00:23.997]      // if-block "protType == 2"
[02:00:23.997]        // =>  TRUE
[02:00:23.997]      <control if="isSWJ" while="" timeout="0" info="">
[02:00:23.998]        // if-block "isSWJ"
[02:00:23.998]          // =>  TRUE
[02:00:23.998]        <control if="hasDormant" while="" timeout="0" info="">
[02:00:23.998]          // if-block "hasDormant"
[02:00:23.998]            // =>  FALSE
[02:00:23.998]          // skip if-block "hasDormant"
[02:00:23.998]        </control>
[02:00:23.998]        <control if="!hasDormant" while="" timeout="0" info="">
[02:00:23.998]          // if-block "!hasDormant"
[02:00:23.998]            // =>  TRUE
[02:00:23.998]          <block atomic="false" info="">
[02:00:23.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:00:24.001]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:00:24.001]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:00:24.002]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:00:24.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:00:24.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:00:24.004]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:00:24.005]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:00:24.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:00:24.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:00:24.007]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:00:24.009]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:00:24.009]          </block>
[02:00:24.009]          // end if-block "!hasDormant"
[02:00:24.009]        </control>
[02:00:24.009]        // end if-block "isSWJ"
[02:00:24.009]      </control>
[02:00:24.009]      <control if="!isSWJ" while="" timeout="0" info="">
[02:00:24.009]        // if-block "!isSWJ"
[02:00:24.010]          // =>  FALSE
[02:00:24.010]        // skip if-block "!isSWJ"
[02:00:24.010]      </control>
[02:00:24.010]      <block atomic="false" info="">
[02:00:24.010]        ReadDP(0x0);
[02:00:24.011]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:00:24.011]      </block>
[02:00:24.011]      // end if-block "protType == 2"
[02:00:24.011]    </control>
[02:00:24.012]  </sequence>
[02:00:24.012]  
[02:00:24.014]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:00:24.014]  
[02:00:24.015]  <debugvars>
[02:00:24.015]    // Pre-defined
[02:00:24.015]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:24.015]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:00:24.015]    __dp=0x00000000
[02:00:24.015]    __ap=0x00000000
[02:00:24.016]    __traceout=0x00000000      (Trace Disabled)
[02:00:24.016]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:24.016]    __FlashAddr=0x00000000
[02:00:24.016]    __FlashLen=0x00000000
[02:00:24.016]    __FlashArg=0x00000000
[02:00:24.016]    __FlashOp=0x00000000
[02:00:24.016]    __Result=0x00000000
[02:00:24.016]  </debugvars>
[02:00:24.016]  
[02:00:24.016]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:00:24.016]    <block atomic="false" info="">
[02:00:24.017]      __var SW_DP_ABORT       = 0x0;
[02:00:24.017]        // -> [SW_DP_ABORT <= 0x00000000]
[02:00:24.017]      __var DP_CTRL_STAT      = 0x4;
[02:00:24.017]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:00:24.017]      __var DP_SELECT         = 0x8;
[02:00:24.017]        // -> [DP_SELECT <= 0x00000008]
[02:00:24.017]      __var powered_down      = 0;
[02:00:24.017]        // -> [powered_down <= 0x00000000]
[02:00:24.017]      WriteDP(DP_SELECT, 0x00000000);
[02:00:24.021]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:00:24.021]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:00:24.023]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:00:24.023]        // -> [powered_down <= 0x00000001]
[02:00:24.023]    </block>
[02:00:24.023]    <control if="powered_down" while="" timeout="0" info="">
[02:00:24.023]      // if-block "powered_down"
[02:00:24.023]        // =>  TRUE
[02:00:24.023]      <block atomic="false" info="">
[02:00:24.023]        Message(0, "Debug/System power-up request sent");
[02:00:24.025]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:00:24.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:00:24.027]      </block>
[02:00:24.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:00:24.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:00:24.031]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:00:24.032]        // while-condition  =>  FALSE
[02:00:24.032]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:00:24.032]      </control>
[02:00:24.032]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:00:24.032]        // if-block "(__protocol & 0xFFFF) == 1"
[02:00:24.032]          // =>  FALSE
[02:00:24.032]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:00:24.032]      </control>
[02:00:24.032]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:00:24.032]        // if-block "(__protocol & 0xFFFF) == 2"
[02:00:24.033]          // =>  TRUE
[02:00:24.033]        <block atomic="false" info="">
[02:00:24.033]          Message(0, "executing SWD power up");
[02:00:24.035]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:00:24.037]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:00:24.037]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:00:24.039]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:00:24.039]        </block>
[02:00:24.040]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:00:24.040]      </control>
[02:00:24.040]      // end if-block "powered_down"
[02:00:24.040]    </control>
[02:00:24.040]    <block atomic="false" info="">
[02:00:24.040]      __var DEBUG_PORT_VAL    = 0;
[02:00:24.040]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:00:24.040]      __var ACCESS_POINT_VAL  = 0;
[02:00:24.040]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:00:24.040]      __ap = 1; 
[02:00:24.040]        // -> [__ap <= 0x00000001]
[02:00:24.040]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:00:24.044]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:00:24.044]      __ap = 4;
[02:00:24.044]        // -> [__ap <= 0x00000004]
[02:00:24.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:00:24.047]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:00:24.047]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:00:24.047]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:00:24.050]    </block>
[02:00:24.050]    <block atomic="false" info="">
[02:00:24.050]      __var nReset = 0x80;
[02:00:24.050]        // -> [nReset <= 0x00000080]
[02:00:24.050]      __var canReadPins = 0;
[02:00:24.051]        // -> [canReadPins <= 0x00000000]
[02:00:24.051]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:00:24.052]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:00:24.052]        // -> [canReadPins <= 0x00000001]
[02:00:24.052]    </block>
[02:00:24.052]    <control if="" while="1" timeout="200" info="">
[02:00:24.052]      // while "1"  (timeout="200")
[02:00:24.052]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.053]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.053]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.053]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.053]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.053]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.053]      // while-condition  =>  TRUE
[02:00:24.053]      // while "1"  (timeout="200")
[02:00:24.054]      // while-condition  =>  TRUE
[02:00:24.054]      // while "1"  (timeout="200")
[02:00:24.054]      // while-condition  =>  TRUE
[02:00:24.054]      // while "1"  (timeout="200")
[02:00:24.054]      // while-condition  =>  TRUE
[02:00:24.054]      // while "1"  (timeout="200")
[02:00:24.054]      // while-condition  =>  TRUE
[02:00:24.054]      // while "1"  (timeout="200")
[02:00:24.054]      // while-condition  =>  TRUE
[02:00:24.054]      // while "1"  (timeout="200")
[02:00:24.054]      // while-condition  =>  TRUE
[02:00:24.054]      // while "1"  (timeout="200")
[02:00:24.055]      // while-condition  =>  TRUE
[02:00:24.055]      // while "1"  (timeout="200")
[02:00:24.055]      // while-condition  =>  TRUE
[02:00:24.055]      // while "1"  (timeout="200")
[02:00:24.055]      // while-condition  =>  TRUE
[02:00:24.055]      // while "1"  (timeout="200")
[02:00:24.055]      // while-condition  =>  TRUE
[02:00:24.055]      // while "1"  (timeout="200")
[02:00:24.055]      // while-condition  =>  TRUE
[02:00:24.055]      // while "1"  (timeout="200")
[02:00:24.055]      // while-condition  =>  TRUE
[02:00:24.055]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.056]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.056]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.056]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.056]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.056]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.056]      // while "1"  (timeout="200")
[02:00:24.056]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.057]      // while-condition  =>  TRUE
[02:00:24.057]      // while "1"  (timeout="200")
[02:00:24.058]      // while-condition  =>  TRUE
[02:00:24.058]      // while "1"  (timeout="200")
[02:00:24.058]      // while-condition  =>  TRUE
[02:00:24.058]      // while "1"  (timeout="200")
[02:00:24.058]      // while-condition  =>  TRUE
[02:00:24.058]      // while "1"  (timeout="200")
[02:00:24.058]      // while-condition  =>  TRUE
[02:00:24.059]      // while "1"  (timeout="200")
[02:00:24.059]      // while-condition  =>  TRUE
[02:00:24.059]      // while "1"  (timeout="200")
[02:00:24.059]      // while-condition  =>  TRUE
[02:00:24.059]      // while "1"  (timeout="200")
[02:00:24.060]      // while-condition  =>  TRUE
[02:00:24.060]      // while "1"  (timeout="200")
[02:00:24.060]      // while-condition  =>  TRUE
[02:00:24.060]      // while "1"  (timeout="200")
[02:00:24.060]      // while-condition  =>  TRUE
[02:00:24.060]      // while "1"  (timeout="200")
[02:00:24.060]      // while-condition  =>  TRUE
[02:00:24.060]      // while "1"  (timeout="200")
[02:00:24.060]      // while-condition  =>  TRUE
[02:00:24.060]      // while "1"  (timeout="200")
[02:00:24.060]      // while-condition  =>  TRUE
[02:00:24.060]      // while "1"  (timeout="200")
[02:00:24.061]      // while-condition  =>  TRUE
[02:00:24.061]      // while "1"  (timeout="200")
[02:00:24.061]      // while-condition  =>  TRUE
[02:00:24.061]      // while "1"  (timeout="200")
[02:00:24.061]      // while-condition  =>  TRUE
[02:00:24.061]      // while "1"  (timeout="200")
[02:00:24.061]      // while-condition  =>  TRUE
[02:00:24.061]      // while "1"  (timeout="200")
[02:00:24.061]      // while-condition  =>  TRUE
[02:00:24.061]      // while "1"  (timeout="200")
[02:00:24.061]      // while-condition  =>  TRUE
[02:00:24.062]      // while "1"  (timeout="200")
[02:00:24.062]      // while-condition  =>  TRUE
[02:00:24.062]      // while "1"  (timeout="200")
[02:00:24.062]      // while-condition  =>  TRUE
[02:00:24.062]      // while "1"  (timeout="200")
[02:00:24.062]      // while-condition  =>  TRUE
[02:00:24.062]      // while "1"  (timeout="200")
[02:00:24.062]      // while-condition  =>  TRUE
[02:00:24.062]      // while "1"  (timeout="200")
[02:00:24.062]      // while-condition  =>  TRUE
[02:00:24.062]      // while "1"  (timeout="200")
[02:00:24.062]      // while-condition  =>  TRUE
[02:00:24.063]      // while "1"  (timeout="200")
[02:00:24.063]      // while-condition  =>  TRUE
[02:00:24.063]      // while "1"  (timeout="200")
[02:00:24.063]      // while-condition  =>  TRUE
[02:00:24.063]      // while "1"  (timeout="200")
[02:00:24.063]      // while-condition  =>  TRUE
[02:00:24.063]      // while "1"  (timeout="200")
[02:00:24.063]      // while-condition  =>  TRUE
[02:00:24.063]      // while "1"  (timeout="200")
[02:00:24.063]      // while-condition  =>  TRUE
[02:00:24.063]      // while "1"  (timeout="200")
[02:00:24.064]      // while-condition  =>  TRUE
[02:00:24.064]      // while "1"  (timeout="200")
[02:00:24.064]      // while  =>  TIMEOUT
[02:00:24.064]      // end while "1"
[02:00:24.064]    </control>
[02:00:24.064]    <control if="canReadPins" while="" timeout="0" info="">
[02:00:24.064]      // if-block "canReadPins"
[02:00:24.064]        // =>  TRUE
[02:00:24.064]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:00:24.064]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:00:24.066]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:00:24.067]        // while-condition  =>  FALSE
[02:00:24.067]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:00:24.067]      </control>
[02:00:24.067]      // end if-block "canReadPins"
[02:00:24.067]    </control>
[02:00:24.067]    <control if="!canReadPins" while="" timeout="0" info="">
[02:00:24.067]      // if-block "!canReadPins"
[02:00:24.067]        // =>  FALSE
[02:00:24.067]      // skip if-block "!canReadPins"
[02:00:24.068]    </control>
[02:00:24.068]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:00:24.068]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:00:24.068]        // =>  TRUE
[02:00:24.068]      <block atomic="false" info="">
[02:00:24.068]        WriteAP(0x00, 0x190008);
[02:00:24.070]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:00:24.070]        WriteAP(0xF0, 0x01);
[02:00:24.081]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:00:24.081]      </block>
[02:00:24.081]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:00:24.081]    </control>
[02:00:24.081]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:00:24.081]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:00:24.081]        // =>  FALSE
[02:00:24.081]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:00:24.081]    </control>
[02:00:24.081]    <block atomic="false" info="">
[02:00:24.081]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:00:24.084]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:00:24.084]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:00:24.084]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:00:24.087]      __ap = 0; //lets make sure we reset the access point selection
[02:00:24.087]        // -> [__ap <= 0x00000000]
[02:00:24.087]    </block>
[02:00:24.087]  </sequence>
[02:00:24.087]  
[02:00:24.110]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:00:24.110]  
[02:00:24.110]  <debugvars>
[02:00:24.110]    // Pre-defined
[02:00:24.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:00:24.111]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:00:24.111]    __dp=0x00000000
[02:00:24.111]    __ap=0x00000000
[02:00:24.111]    __traceout=0x00000000      (Trace Disabled)
[02:00:24.111]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:00:24.111]    __FlashAddr=0x00000000
[02:00:24.111]    __FlashLen=0x00000000
[02:00:24.111]    __FlashArg=0x00000000
[02:00:24.111]    __FlashOp=0x00000000
[02:00:24.111]    __Result=0x00000000
[02:00:24.111]  </debugvars>
[02:00:24.112]  
[02:00:24.112]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:00:24.112]    <block atomic="false" info="">
[02:00:24.112]      __var deviceID = 0;
[02:00:24.112]        // -> [deviceID <= 0x00000000]
[02:00:24.112]      __var version = 0;
[02:00:24.112]        // -> [version <= 0x00000000]
[02:00:24.112]      __var partNum = 0;
[02:00:24.112]        // -> [partNum <= 0x00000000]
[02:00:24.112]      __var manuf = 0;
[02:00:24.112]        // -> [manuf <= 0x00000000]
[02:00:24.114]      __var isMSPM0G1X0X_G3X0X = 0;
[02:00:24.114]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:00:24.114]      __var isProduction = 0;
[02:00:24.114]        // -> [isProduction <= 0x00000000]
[02:00:24.114]      __var continueId = 0;
[02:00:24.114]        // -> [continueId <= 0x00000000]
[02:00:24.114]      deviceID =   Read32(0x41C40004);
[02:00:24.119]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:00:24.120]        // -> [deviceID <= 0x2BB8802F]
[02:00:24.120]      version = deviceID >> 28;
[02:00:24.120]        // -> [version <= 0x00000002]
[02:00:24.120]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:00:24.120]        // -> [partNum <= 0x0000BB88]
[02:00:24.120]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:00:24.120]        // -> [manuf <= 0x00000017]
[02:00:24.121]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:00:24.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:00:24.121]      isProduction = (version > 0);
[02:00:24.121]        // -> [isProduction <= 0x00000001]
[02:00:24.121]    </block>
[02:00:24.121]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:00:24.121]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:00:24.121]        // =>  FALSE
[02:00:24.121]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:00:24.121]    </control>
[02:00:24.121]    <control if="continueId == 4" while="" timeout="0" info="">
[02:00:24.122]      // if-block "continueId == 4"
[02:00:24.122]        // =>  FALSE
[02:00:24.122]      // skip if-block "continueId == 4"
[02:00:24.122]    </control>
[02:00:24.122]    <control if="!isProduction" while="" timeout="0" info="">
[02:00:24.122]      // if-block "!isProduction"
[02:00:24.122]        // =>  FALSE
[02:00:24.122]      // skip if-block "!isProduction"
[02:00:24.122]    </control>
[02:00:24.122]  </sequence>
[02:00:24.122]  
[02:01:39.510]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:01:39.510]  
[02:01:39.512]  <debugvars>
[02:01:39.512]    // Pre-defined
[02:01:39.512]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:39.512]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:39.512]    __dp=0x00000000
[02:01:39.512]    __ap=0x00000000
[02:01:39.512]    __traceout=0x00000000      (Trace Disabled)
[02:01:39.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:39.512]    __FlashAddr=0x00000000
[02:01:39.512]    __FlashLen=0x00000000
[02:01:39.512]    __FlashArg=0x00000000
[02:01:39.513]    __FlashOp=0x00000000
[02:01:39.513]    __Result=0x00000000
[02:01:39.513]  </debugvars>
[02:01:39.513]  
[02:01:39.513]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:01:39.513]    <block atomic="false" info="">
[02:01:39.513]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:01:39.513]        // -> [isSWJ <= 0x00000001]
[02:01:39.513]      __var hasDormant = __protocol & 0x00020000;
[02:01:39.513]        // -> [hasDormant <= 0x00000000]
[02:01:39.513]      __var protType   = __protocol & 0x0000FFFF;
[02:01:39.513]        // -> [protType <= 0x00000002]
[02:01:39.514]    </block>
[02:01:39.514]    <control if="protType == 1" while="" timeout="0" info="">
[02:01:39.514]      // if-block "protType == 1"
[02:01:39.514]        // =>  FALSE
[02:01:39.514]      // skip if-block "protType == 1"
[02:01:39.514]    </control>
[02:01:39.514]    <control if="protType == 2" while="" timeout="0" info="">
[02:01:39.514]      // if-block "protType == 2"
[02:01:39.514]        // =>  TRUE
[02:01:39.514]      <control if="isSWJ" while="" timeout="0" info="">
[02:01:39.514]        // if-block "isSWJ"
[02:01:39.515]          // =>  TRUE
[02:01:39.515]        <control if="hasDormant" while="" timeout="0" info="">
[02:01:39.515]          // if-block "hasDormant"
[02:01:39.515]            // =>  FALSE
[02:01:39.515]          // skip if-block "hasDormant"
[02:01:39.515]        </control>
[02:01:39.515]        <control if="!hasDormant" while="" timeout="0" info="">
[02:01:39.515]          // if-block "!hasDormant"
[02:01:39.515]            // =>  TRUE
[02:01:39.515]          <block atomic="false" info="">
[02:01:39.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:01:39.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:39.516]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:01:39.519]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:01:39.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:01:39.520]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:39.521]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:01:39.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:01:39.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:01:39.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:39.526]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:01:39.528]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:01:39.529]          </block>
[02:01:39.529]          // end if-block "!hasDormant"
[02:01:39.529]        </control>
[02:01:39.529]        // end if-block "isSWJ"
[02:01:39.529]      </control>
[02:01:39.529]      <control if="!isSWJ" while="" timeout="0" info="">
[02:01:39.530]        // if-block "!isSWJ"
[02:01:39.530]          // =>  FALSE
[02:01:39.530]        // skip if-block "!isSWJ"
[02:01:39.530]      </control>
[02:01:39.530]      <block atomic="false" info="">
[02:01:39.530]        ReadDP(0x0);
[02:01:39.531]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:01:39.531]      </block>
[02:01:39.532]      // end if-block "protType == 2"
[02:01:39.532]    </control>
[02:01:39.532]  </sequence>
[02:01:39.532]  
[02:01:39.539]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:01:39.539]  
[02:01:39.539]  <debugvars>
[02:01:39.539]    // Pre-defined
[02:01:39.539]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:39.539]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:39.539]    __dp=0x00000000
[02:01:39.540]    __ap=0x00000000
[02:01:39.540]    __traceout=0x00000000      (Trace Disabled)
[02:01:39.540]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:39.540]    __FlashAddr=0x00000000
[02:01:39.540]    __FlashLen=0x00000000
[02:01:39.540]    __FlashArg=0x00000000
[02:01:39.540]    __FlashOp=0x00000000
[02:01:39.540]    __Result=0x00000000
[02:01:39.540]  </debugvars>
[02:01:39.540]  
[02:01:39.541]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:01:39.541]    <block atomic="false" info="">
[02:01:39.541]      __var SW_DP_ABORT       = 0x0;
[02:01:39.541]        // -> [SW_DP_ABORT <= 0x00000000]
[02:01:39.541]      __var DP_CTRL_STAT      = 0x4;
[02:01:39.541]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:01:39.542]      __var DP_SELECT         = 0x8;
[02:01:39.542]        // -> [DP_SELECT <= 0x00000008]
[02:01:39.542]      __var powered_down      = 0;
[02:01:39.542]        // -> [powered_down <= 0x00000000]
[02:01:39.542]      WriteDP(DP_SELECT, 0x00000000);
[02:01:39.544]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:01:39.544]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:01:39.546]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:01:39.546]        // -> [powered_down <= 0x00000001]
[02:01:39.546]    </block>
[02:01:39.546]    <control if="powered_down" while="" timeout="0" info="">
[02:01:39.546]      // if-block "powered_down"
[02:01:39.546]        // =>  TRUE
[02:01:39.546]      <block atomic="false" info="">
[02:01:39.547]        Message(0, "Debug/System power-up request sent");
[02:01:39.547]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:01:39.550]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:01:39.550]      </block>
[02:01:39.550]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:01:39.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:01:39.552]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:01:39.552]        // while-condition  =>  FALSE
[02:01:39.552]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:01:39.552]      </control>
[02:01:39.552]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:01:39.552]        // if-block "(__protocol & 0xFFFF) == 1"
[02:01:39.553]          // =>  FALSE
[02:01:39.553]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:01:39.553]      </control>
[02:01:39.553]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:01:39.553]        // if-block "(__protocol & 0xFFFF) == 2"
[02:01:39.553]          // =>  TRUE
[02:01:39.553]        <block atomic="false" info="">
[02:01:39.553]          Message(0, "executing SWD power up");
[02:01:39.553]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:01:39.556]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:01:39.556]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:01:39.558]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:01:39.558]        </block>
[02:01:39.558]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:01:39.559]      </control>
[02:01:39.559]      // end if-block "powered_down"
[02:01:39.559]    </control>
[02:01:39.559]    <block atomic="false" info="">
[02:01:39.559]      __var DEBUG_PORT_VAL    = 0;
[02:01:39.559]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:01:39.559]      __var ACCESS_POINT_VAL  = 0;
[02:01:39.559]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:01:39.559]      __ap = 1; 
[02:01:39.559]        // -> [__ap <= 0x00000001]
[02:01:39.560]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:01:39.565]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:01:39.566]      __ap = 4;
[02:01:39.566]        // -> [__ap <= 0x00000004]
[02:01:39.566]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:39.569]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:01:39.569]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:01:39.569]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:39.569]    </block>
[02:01:39.570]    <block atomic="false" info="">
[02:01:39.570]      __var nReset = 0x80;
[02:01:39.570]        // -> [nReset <= 0x00000080]
[02:01:39.570]      __var canReadPins = 0;
[02:01:39.570]        // -> [canReadPins <= 0x00000000]
[02:01:39.570]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:01:39.572]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:01:39.572]        // -> [canReadPins <= 0x00000001]
[02:01:39.572]    </block>
[02:01:39.572]    <control if="" while="1" timeout="200" info="">
[02:01:39.572]      // while "1"  (timeout="200")
[02:01:39.572]      // while-condition  =>  TRUE
[02:01:39.572]      // while "1"  (timeout="200")
[02:01:39.572]      // while-condition  =>  TRUE
[02:01:39.573]      // while "1"  (timeout="200")
[02:01:39.573]      // while-condition  =>  TRUE
[02:01:39.573]      // while "1"  (timeout="200")
[02:01:39.573]      // while-condition  =>  TRUE
[02:01:39.573]      // while "1"  (timeout="200")
[02:01:39.573]      // while-condition  =>  TRUE
[02:01:39.573]      // while "1"  (timeout="200")
[02:01:39.573]      // while-condition  =>  TRUE
[02:01:39.573]      // while "1"  (timeout="200")
[02:01:39.573]      // while-condition  =>  TRUE
[02:01:39.573]      // while "1"  (timeout="200")
[02:01:39.574]      // while-condition  =>  TRUE
[02:01:39.574]      // while "1"  (timeout="200")
[02:01:39.574]      // while-condition  =>  TRUE
[02:01:39.574]      // while "1"  (timeout="200")
[02:01:39.574]      // while-condition  =>  TRUE
[02:01:39.574]      // while "1"  (timeout="200")
[02:01:39.574]      // while-condition  =>  TRUE
[02:01:39.574]      // while "1"  (timeout="200")
[02:01:39.574]      // while-condition  =>  TRUE
[02:01:39.575]      // while "1"  (timeout="200")
[02:01:39.575]      // while-condition  =>  TRUE
[02:01:39.575]      // while "1"  (timeout="200")
[02:01:39.575]      // while-condition  =>  TRUE
[02:01:39.575]      // while "1"  (timeout="200")
[02:01:39.575]      // while-condition  =>  TRUE
[02:01:39.575]      // while "1"  (timeout="200")
[02:01:39.575]      // while-condition  =>  TRUE
[02:01:39.576]      // while "1"  (timeout="200")
[02:01:39.576]      // while-condition  =>  TRUE
[02:01:39.576]      // while "1"  (timeout="200")
[02:01:39.576]      // while-condition  =>  TRUE
[02:01:39.576]      // while "1"  (timeout="200")
[02:01:39.576]      // while-condition  =>  TRUE
[02:01:39.576]      // while "1"  (timeout="200")
[02:01:39.576]      // while-condition  =>  TRUE
[02:01:39.577]      // while "1"  (timeout="200")
[02:01:39.577]      // while-condition  =>  TRUE
[02:01:39.577]      // while "1"  (timeout="200")
[02:01:39.577]      // while-condition  =>  TRUE
[02:01:39.577]      // while "1"  (timeout="200")
[02:01:39.577]      // while-condition  =>  TRUE
[02:01:39.577]      // while "1"  (timeout="200")
[02:01:39.577]      // while-condition  =>  TRUE
[02:01:39.577]      // while "1"  (timeout="200")
[02:01:39.577]      // while-condition  =>  TRUE
[02:01:39.578]      // while "1"  (timeout="200")
[02:01:39.578]      // while-condition  =>  TRUE
[02:01:39.578]      // while "1"  (timeout="200")
[02:01:39.578]      // while-condition  =>  TRUE
[02:01:39.578]      // while "1"  (timeout="200")
[02:01:39.578]      // while-condition  =>  TRUE
[02:01:39.579]      // while "1"  (timeout="200")
[02:01:39.579]      // while  =>  TIMEOUT
[02:01:39.579]      // end while "1"
[02:01:39.579]    </control>
[02:01:39.579]    <control if="canReadPins" while="" timeout="0" info="">
[02:01:39.579]      // if-block "canReadPins"
[02:01:39.579]        // =>  TRUE
[02:01:39.580]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:01:39.580]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:01:39.585]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:01:39.585]        // while-condition  =>  FALSE
[02:01:39.585]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:01:39.585]      </control>
[02:01:39.585]      // end if-block "canReadPins"
[02:01:39.585]    </control>
[02:01:39.587]    <control if="!canReadPins" while="" timeout="0" info="">
[02:01:39.587]      // if-block "!canReadPins"
[02:01:39.587]        // =>  FALSE
[02:01:39.587]      // skip if-block "!canReadPins"
[02:01:39.587]    </control>
[02:01:39.587]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:01:39.587]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:39.587]        // =>  TRUE
[02:01:39.587]      <block atomic="false" info="">
[02:01:39.587]        WriteAP(0x00, 0x190008);
[02:01:39.595]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:39.595]        WriteAP(0xF0, 0x01);
[02:01:39.598]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:39.598]      </block>
[02:01:39.598]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:39.598]    </control>
[02:01:39.598]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:01:39.598]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:39.598]        // =>  FALSE
[02:01:39.598]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:39.598]    </control>
[02:01:39.598]    <block atomic="false" info="">
[02:01:39.598]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:39.604]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:01:39.604]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:01:39.604]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:39.604]      __ap = 0; //lets make sure we reset the access point selection
[02:01:39.604]        // -> [__ap <= 0x00000000]
[02:01:39.604]    </block>
[02:01:39.604]  </sequence>
[02:01:39.604]  
[02:01:39.629]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:01:39.629]  
[02:01:39.629]  <debugvars>
[02:01:39.629]    // Pre-defined
[02:01:39.629]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:39.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:39.630]    __dp=0x00000000
[02:01:39.630]    __ap=0x00000000
[02:01:39.630]    __traceout=0x00000000      (Trace Disabled)
[02:01:39.630]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:39.630]    __FlashAddr=0x00000000
[02:01:39.630]    __FlashLen=0x00000000
[02:01:39.630]    __FlashArg=0x00000000
[02:01:39.631]    __FlashOp=0x00000000
[02:01:39.631]    __Result=0x00000000
[02:01:39.631]  </debugvars>
[02:01:39.631]  
[02:01:39.631]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:01:39.631]    <block atomic="false" info="">
[02:01:39.631]      __var deviceID = 0;
[02:01:39.631]        // -> [deviceID <= 0x00000000]
[02:01:39.631]      __var version = 0;
[02:01:39.631]        // -> [version <= 0x00000000]
[02:01:39.631]      __var partNum = 0;
[02:01:39.632]        // -> [partNum <= 0x00000000]
[02:01:39.632]      __var manuf = 0;
[02:01:39.632]        // -> [manuf <= 0x00000000]
[02:01:39.632]      __var isMSPM0G1X0X_G3X0X = 0;
[02:01:39.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:01:39.632]      __var isProduction = 0;
[02:01:39.632]        // -> [isProduction <= 0x00000000]
[02:01:39.632]      __var continueId = 0;
[02:01:39.632]        // -> [continueId <= 0x00000000]
[02:01:39.632]      deviceID =   Read32(0x41C40004);
[02:01:39.637]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:01:39.637]        // -> [deviceID <= 0x2BB8802F]
[02:01:39.637]      version = deviceID >> 28;
[02:01:39.637]        // -> [version <= 0x00000002]
[02:01:39.637]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:01:39.637]        // -> [partNum <= 0x0000BB88]
[02:01:39.637]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:01:39.637]        // -> [manuf <= 0x00000017]
[02:01:39.637]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:01:39.638]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:01:39.638]      isProduction = (version > 0);
[02:01:39.638]        // -> [isProduction <= 0x00000001]
[02:01:39.638]    </block>
[02:01:39.638]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:01:39.638]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:01:39.638]        // =>  FALSE
[02:01:39.638]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:01:39.638]    </control>
[02:01:39.638]    <control if="continueId == 4" while="" timeout="0" info="">
[02:01:39.638]      // if-block "continueId == 4"
[02:01:39.638]        // =>  FALSE
[02:01:39.639]      // skip if-block "continueId == 4"
[02:01:39.639]    </control>
[02:01:39.639]    <control if="!isProduction" while="" timeout="0" info="">
[02:01:39.639]      // if-block "!isProduction"
[02:01:39.639]        // =>  FALSE
[02:01:39.639]      // skip if-block "!isProduction"
[02:01:39.639]    </control>
[02:01:39.640]  </sequence>
[02:01:39.640]  
[02:09:57.639]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:09:57.639]  
[02:09:57.647]  <debugvars>
[02:09:57.647]    // Pre-defined
[02:09:57.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:57.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:09:57.647]    __dp=0x00000000
[02:09:57.647]    __ap=0x00000000
[02:09:57.647]    __traceout=0x00000000      (Trace Disabled)
[02:09:57.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:57.647]    __FlashAddr=0x00000000
[02:09:57.647]    __FlashLen=0x00000000
[02:09:57.648]    __FlashArg=0x00000000
[02:09:57.648]    __FlashOp=0x00000000
[02:09:57.648]    __Result=0x00000000
[02:09:57.648]  </debugvars>
[02:09:57.648]  
[02:09:57.648]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:09:57.648]    <block atomic="false" info="">
[02:09:57.648]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:09:57.648]        // -> [isSWJ <= 0x00000001]
[02:09:57.648]      __var hasDormant = __protocol & 0x00020000;
[02:09:57.648]        // -> [hasDormant <= 0x00000000]
[02:09:57.649]      __var protType   = __protocol & 0x0000FFFF;
[02:09:57.649]        // -> [protType <= 0x00000002]
[02:09:57.649]    </block>
[02:09:57.649]    <control if="protType == 1" while="" timeout="0" info="">
[02:09:57.649]      // if-block "protType == 1"
[02:09:57.649]        // =>  FALSE
[02:09:57.650]      // skip if-block "protType == 1"
[02:09:57.650]    </control>
[02:09:57.650]    <control if="protType == 2" while="" timeout="0" info="">
[02:09:57.650]      // if-block "protType == 2"
[02:09:57.650]        // =>  TRUE
[02:09:57.650]      <control if="isSWJ" while="" timeout="0" info="">
[02:09:57.650]        // if-block "isSWJ"
[02:09:57.650]          // =>  TRUE
[02:09:57.651]        <control if="hasDormant" while="" timeout="0" info="">
[02:09:57.651]          // if-block "hasDormant"
[02:09:57.651]            // =>  FALSE
[02:09:57.651]          // skip if-block "hasDormant"
[02:09:57.651]        </control>
[02:09:57.651]        <control if="!hasDormant" while="" timeout="0" info="">
[02:09:57.651]          // if-block "!hasDormant"
[02:09:57.651]            // =>  TRUE
[02:09:57.651]          <block atomic="false" info="">
[02:09:57.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:09:57.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:57.656]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:09:57.657]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:09:57.657]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:09:57.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:57.660]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:09:57.661]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:09:57.661]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:09:57.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:57.663]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:09:57.664]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:09:57.665]          </block>
[02:09:57.665]          // end if-block "!hasDormant"
[02:09:57.665]        </control>
[02:09:57.665]        // end if-block "isSWJ"
[02:09:57.665]      </control>
[02:09:57.665]      <control if="!isSWJ" while="" timeout="0" info="">
[02:09:57.665]        // if-block "!isSWJ"
[02:09:57.665]          // =>  FALSE
[02:09:57.665]        // skip if-block "!isSWJ"
[02:09:57.665]      </control>
[02:09:57.666]      <block atomic="false" info="">
[02:09:57.666]        ReadDP(0x0);
[02:09:57.667]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:09:57.667]      </block>
[02:09:57.667]      // end if-block "protType == 2"
[02:09:57.667]    </control>
[02:09:57.668]  </sequence>
[02:09:57.668]  
[02:09:57.671]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:09:57.671]  
[02:09:57.671]  <debugvars>
[02:09:57.671]    // Pre-defined
[02:09:57.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:57.672]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:09:57.672]    __dp=0x00000000
[02:09:57.672]    __ap=0x00000000
[02:09:57.672]    __traceout=0x00000000      (Trace Disabled)
[02:09:57.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:57.672]    __FlashAddr=0x00000000
[02:09:57.672]    __FlashLen=0x00000000
[02:09:57.672]    __FlashArg=0x00000000
[02:09:57.672]    __FlashOp=0x00000000
[02:09:57.673]    __Result=0x00000000
[02:09:57.673]  </debugvars>
[02:09:57.673]  
[02:09:57.673]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:09:57.673]    <block atomic="false" info="">
[02:09:57.673]      __var SW_DP_ABORT       = 0x0;
[02:09:57.673]        // -> [SW_DP_ABORT <= 0x00000000]
[02:09:57.673]      __var DP_CTRL_STAT      = 0x4;
[02:09:57.673]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:09:57.674]      __var DP_SELECT         = 0x8;
[02:09:57.675]        // -> [DP_SELECT <= 0x00000008]
[02:09:57.675]      __var powered_down      = 0;
[02:09:57.675]        // -> [powered_down <= 0x00000000]
[02:09:57.675]      WriteDP(DP_SELECT, 0x00000000);
[02:09:57.678]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:09:57.678]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:09:57.682]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:09:57.683]        // -> [powered_down <= 0x00000001]
[02:09:57.683]    </block>
[02:09:57.683]    <control if="powered_down" while="" timeout="0" info="">
[02:09:57.683]      // if-block "powered_down"
[02:09:57.683]        // =>  TRUE
[02:09:57.683]      <block atomic="false" info="">
[02:09:57.683]        Message(0, "Debug/System power-up request sent");
[02:09:57.686]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:09:57.692]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:09:57.692]      </block>
[02:09:57.692]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:09:57.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:09:57.696]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:09:57.696]        // while-condition  =>  FALSE
[02:09:57.696]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:09:57.696]      </control>
[02:09:57.696]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:09:57.696]        // if-block "(__protocol & 0xFFFF) == 1"
[02:09:57.696]          // =>  FALSE
[02:09:57.696]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:09:57.697]      </control>
[02:09:57.697]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:09:57.697]        // if-block "(__protocol & 0xFFFF) == 2"
[02:09:57.697]          // =>  TRUE
[02:09:57.697]        <block atomic="false" info="">
[02:09:57.698]          Message(0, "executing SWD power up");
[02:09:57.700]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:09:57.702]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:09:57.702]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:09:57.704]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:09:57.705]        </block>
[02:09:57.705]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:09:57.705]      </control>
[02:09:57.705]      // end if-block "powered_down"
[02:09:57.705]    </control>
[02:09:57.705]    <block atomic="false" info="">
[02:09:57.705]      __var DEBUG_PORT_VAL    = 0;
[02:09:57.705]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:09:57.705]      __var ACCESS_POINT_VAL  = 0;
[02:09:57.705]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:09:57.706]      __ap = 1; 
[02:09:57.706]        // -> [__ap <= 0x00000001]
[02:09:57.706]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:09:57.710]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:09:57.710]      __ap = 4;
[02:09:57.710]        // -> [__ap <= 0x00000004]
[02:09:57.710]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:09:57.716]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:09:57.716]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:09:57.716]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:09:57.718]    </block>
[02:09:57.718]    <block atomic="false" info="">
[02:09:57.718]      __var nReset = 0x80;
[02:09:57.719]        // -> [nReset <= 0x00000080]
[02:09:57.719]      __var canReadPins = 0;
[02:09:57.719]        // -> [canReadPins <= 0x00000000]
[02:09:57.719]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:09:57.721]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:09:57.721]        // -> [canReadPins <= 0x00000001]
[02:09:57.721]    </block>
[02:09:57.721]    <control if="" while="1" timeout="200" info="">
[02:09:57.721]      // while "1"  (timeout="200")
[02:09:57.721]      // while-condition  =>  TRUE
[02:09:57.721]      // while "1"  (timeout="200")
[02:09:57.721]      // while-condition  =>  TRUE
[02:09:57.721]      // while "1"  (timeout="200")
[02:09:57.721]      // while-condition  =>  TRUE
[02:09:57.721]      // while "1"  (timeout="200")
[02:09:57.722]      // while-condition  =>  TRUE
[02:09:57.722]      // while "1"  (timeout="200")
[02:09:57.722]      // while-condition  =>  TRUE
[02:09:57.722]      // while "1"  (timeout="200")
[02:09:57.722]      // while-condition  =>  TRUE
[02:09:57.722]      // while "1"  (timeout="200")
[02:09:57.722]      // while-condition  =>  TRUE
[02:09:57.722]      // while "1"  (timeout="200")
[02:09:57.722]      // while-condition  =>  TRUE
[02:09:57.722]      // while "1"  (timeout="200")
[02:09:57.722]      // while-condition  =>  TRUE
[02:09:57.723]      // while "1"  (timeout="200")
[02:09:57.723]      // while-condition  =>  TRUE
[02:09:57.723]      // while "1"  (timeout="200")
[02:09:57.723]      // while-condition  =>  TRUE
[02:09:57.723]      // while "1"  (timeout="200")
[02:09:57.723]      // while-condition  =>  TRUE
[02:09:57.723]      // while "1"  (timeout="200")
[02:09:57.723]      // while-condition  =>  TRUE
[02:09:57.724]      // while "1"  (timeout="200")
[02:09:57.724]      // while-condition  =>  TRUE
[02:09:57.724]      // while "1"  (timeout="200")
[02:09:57.724]      // while-condition  =>  TRUE
[02:09:57.724]      // while "1"  (timeout="200")
[02:09:57.724]      // while-condition  =>  TRUE
[02:09:57.724]      // while "1"  (timeout="200")
[02:09:57.724]      // while-condition  =>  TRUE
[02:09:57.724]      // while "1"  (timeout="200")
[02:09:57.725]      // while-condition  =>  TRUE
[02:09:57.725]      // while "1"  (timeout="200")
[02:09:57.725]      // while-condition  =>  TRUE
[02:09:57.725]      // while "1"  (timeout="200")
[02:09:57.725]      // while-condition  =>  TRUE
[02:09:57.725]      // while "1"  (timeout="200")
[02:09:57.725]      // while-condition  =>  TRUE
[02:09:57.725]      // while "1"  (timeout="200")
[02:09:57.726]      // while-condition  =>  TRUE
[02:09:57.726]      // while "1"  (timeout="200")
[02:09:57.726]      // while-condition  =>  TRUE
[02:09:57.726]      // while "1"  (timeout="200")
[02:09:57.726]      // while-condition  =>  TRUE
[02:09:57.726]      // while "1"  (timeout="200")
[02:09:57.726]      // while-condition  =>  TRUE
[02:09:57.726]      // while "1"  (timeout="200")
[02:09:57.726]      // while-condition  =>  TRUE
[02:09:57.726]      // while "1"  (timeout="200")
[02:09:57.726]      // while-condition  =>  TRUE
[02:09:57.727]      // while "1"  (timeout="200")
[02:09:57.727]      // while-condition  =>  TRUE
[02:09:57.727]      // while "1"  (timeout="200")
[02:09:57.727]      // while-condition  =>  TRUE
[02:09:57.727]      // while "1"  (timeout="200")
[02:09:57.727]      // while-condition  =>  TRUE
[02:09:57.727]      // while "1"  (timeout="200")
[02:09:57.727]      // while-condition  =>  TRUE
[02:09:57.729]      // while "1"  (timeout="200")
[02:09:57.729]      // while-condition  =>  TRUE
[02:09:57.729]      // while "1"  (timeout="200")
[02:09:57.729]      // while-condition  =>  TRUE
[02:09:57.729]      // while "1"  (timeout="200")
[02:09:57.729]      // while-condition  =>  TRUE
[02:09:57.729]      // while "1"  (timeout="200")
[02:09:57.729]      // while-condition  =>  TRUE
[02:09:57.729]      // while "1"  (timeout="200")
[02:09:57.729]      // while-condition  =>  TRUE
[02:09:57.730]      // while "1"  (timeout="200")
[02:09:57.730]      // while-condition  =>  TRUE
[02:09:57.730]      // while "1"  (timeout="200")
[02:09:57.730]      // while-condition  =>  TRUE
[02:09:57.730]      // while "1"  (timeout="200")
[02:09:57.730]      // while-condition  =>  TRUE
[02:09:57.730]      // while "1"  (timeout="200")
[02:09:57.730]      // while-condition  =>  TRUE
[02:09:57.730]      // while "1"  (timeout="200")
[02:09:57.730]      // while-condition  =>  TRUE
[02:09:57.730]      // while "1"  (timeout="200")
[02:09:57.731]      // while-condition  =>  TRUE
[02:09:57.731]      // while "1"  (timeout="200")
[02:09:57.731]      // while-condition  =>  TRUE
[02:09:57.731]      // while "1"  (timeout="200")
[02:09:57.731]      // while-condition  =>  TRUE
[02:09:57.731]      // while "1"  (timeout="200")
[02:09:57.731]      // while-condition  =>  TRUE
[02:09:57.731]      // while "1"  (timeout="200")
[02:09:57.731]      // while-condition  =>  TRUE
[02:09:57.731]      // while "1"  (timeout="200")
[02:09:57.732]      // while-condition  =>  TRUE
[02:09:57.732]      // while "1"  (timeout="200")
[02:09:57.732]      // while-condition  =>  TRUE
[02:09:57.732]      // while "1"  (timeout="200")
[02:09:57.732]      // while-condition  =>  TRUE
[02:09:57.732]      // while "1"  (timeout="200")
[02:09:57.732]      // while-condition  =>  TRUE
[02:09:57.732]      // while "1"  (timeout="200")
[02:09:57.732]      // while-condition  =>  TRUE
[02:09:57.732]      // while "1"  (timeout="200")
[02:09:57.733]      // while-condition  =>  TRUE
[02:09:57.733]      // while "1"  (timeout="200")
[02:09:57.733]      // while-condition  =>  TRUE
[02:09:57.733]      // while "1"  (timeout="200")
[02:09:57.733]      // while-condition  =>  TRUE
[02:09:57.733]      // while "1"  (timeout="200")
[02:09:57.733]      // while-condition  =>  TRUE
[02:09:57.733]      // while "1"  (timeout="200")
[02:09:57.733]      // while-condition  =>  TRUE
[02:09:57.733]      // while "1"  (timeout="200")
[02:09:57.734]      // while-condition  =>  TRUE
[02:09:57.734]      // while "1"  (timeout="200")
[02:09:57.734]      // while-condition  =>  TRUE
[02:09:57.734]      // while "1"  (timeout="200")
[02:09:57.734]      // while-condition  =>  TRUE
[02:09:57.734]      // while "1"  (timeout="200")
[02:09:57.734]      // while-condition  =>  TRUE
[02:09:57.734]      // while "1"  (timeout="200")
[02:09:57.734]      // while-condition  =>  TRUE
[02:09:57.734]      // while "1"  (timeout="200")
[02:09:57.734]      // while-condition  =>  TRUE
[02:09:57.735]      // while "1"  (timeout="200")
[02:09:57.735]      // while-condition  =>  TRUE
[02:09:57.735]      // while "1"  (timeout="200")
[02:09:57.735]      // while-condition  =>  TRUE
[02:09:57.735]      // while "1"  (timeout="200")
[02:09:57.735]      // while-condition  =>  TRUE
[02:09:57.735]      // while "1"  (timeout="200")
[02:09:57.735]      // while-condition  =>  TRUE
[02:09:57.735]      // while "1"  (timeout="200")
[02:09:57.735]      // while-condition  =>  TRUE
[02:09:57.735]      // while "1"  (timeout="200")
[02:09:57.736]      // while-condition  =>  TRUE
[02:09:57.736]      // while "1"  (timeout="200")
[02:09:57.736]      // while  =>  TIMEOUT
[02:09:57.736]      // end while "1"
[02:09:57.736]    </control>
[02:09:57.736]    <control if="canReadPins" while="" timeout="0" info="">
[02:09:57.736]      // if-block "canReadPins"
[02:09:57.737]        // =>  TRUE
[02:09:57.737]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:09:57.737]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:09:57.738]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:09:57.738]        // while-condition  =>  FALSE
[02:09:57.739]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:09:57.739]      </control>
[02:09:57.739]      // end if-block "canReadPins"
[02:09:57.739]    </control>
[02:09:57.739]    <control if="!canReadPins" while="" timeout="0" info="">
[02:09:57.739]      // if-block "!canReadPins"
[02:09:57.739]        // =>  FALSE
[02:09:57.739]      // skip if-block "!canReadPins"
[02:09:57.739]    </control>
[02:09:57.740]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:09:57.740]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:09:57.740]        // =>  TRUE
[02:09:57.740]      <block atomic="false" info="">
[02:09:57.740]        WriteAP(0x00, 0x190008);
[02:09:57.742]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:09:57.742]        WriteAP(0xF0, 0x01);
[02:09:57.748]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:09:57.748]      </block>
[02:09:57.748]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:09:57.748]    </control>
[02:09:57.748]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:09:57.748]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:09:57.749]        // =>  FALSE
[02:09:57.749]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:09:57.749]    </control>
[02:09:57.749]    <block atomic="false" info="">
[02:09:57.749]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:09:57.752]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:09:57.752]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:09:57.752]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:09:57.756]      __ap = 0; //lets make sure we reset the access point selection
[02:09:57.756]        // -> [__ap <= 0x00000000]
[02:09:57.756]    </block>
[02:09:57.756]  </sequence>
[02:09:57.756]  
[02:09:57.784]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:09:57.784]  
[02:09:57.784]  <debugvars>
[02:09:57.785]    // Pre-defined
[02:09:57.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:57.785]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:09:57.785]    __dp=0x00000000
[02:09:57.785]    __ap=0x00000000
[02:09:57.785]    __traceout=0x00000000      (Trace Disabled)
[02:09:57.785]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:57.785]    __FlashAddr=0x00000000
[02:09:57.786]    __FlashLen=0x00000000
[02:09:57.786]    __FlashArg=0x00000000
[02:09:57.786]    __FlashOp=0x00000000
[02:09:57.786]    __Result=0x00000000
[02:09:57.786]  </debugvars>
[02:09:57.786]  
[02:09:57.786]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:09:57.786]    <block atomic="false" info="">
[02:09:57.786]      __var deviceID = 0;
[02:09:57.786]        // -> [deviceID <= 0x00000000]
[02:09:57.787]      __var version = 0;
[02:09:57.787]        // -> [version <= 0x00000000]
[02:09:57.787]      __var partNum = 0;
[02:09:57.787]        // -> [partNum <= 0x00000000]
[02:09:57.787]      __var manuf = 0;
[02:09:57.787]        // -> [manuf <= 0x00000000]
[02:09:57.787]      __var isMSPM0G1X0X_G3X0X = 0;
[02:09:57.787]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:09:57.787]      __var isProduction = 0;
[02:09:57.787]        // -> [isProduction <= 0x00000000]
[02:09:57.787]      __var continueId = 0;
[02:09:57.787]        // -> [continueId <= 0x00000000]
[02:09:57.788]      deviceID =   Read32(0x41C40004);
[02:09:57.797]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:09:57.797]        // -> [deviceID <= 0x2BB8802F]
[02:09:57.797]      version = deviceID >> 28;
[02:09:57.797]        // -> [version <= 0x00000002]
[02:09:57.797]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:09:57.797]        // -> [partNum <= 0x0000BB88]
[02:09:57.797]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:09:57.798]        // -> [manuf <= 0x00000017]
[02:09:57.798]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:09:57.798]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:09:57.798]      isProduction = (version > 0);
[02:09:57.798]        // -> [isProduction <= 0x00000001]
[02:09:57.798]    </block>
[02:09:57.798]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:09:57.798]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:09:57.798]        // =>  FALSE
[02:09:57.798]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:09:57.798]    </control>
[02:09:57.800]    <control if="continueId == 4" while="" timeout="0" info="">
[02:09:57.800]      // if-block "continueId == 4"
[02:09:57.800]        // =>  FALSE
[02:09:57.800]      // skip if-block "continueId == 4"
[02:09:57.800]    </control>
[02:09:57.800]    <control if="!isProduction" while="" timeout="0" info="">
[02:09:57.800]      // if-block "!isProduction"
[02:09:57.801]        // =>  FALSE
[02:09:57.801]      // skip if-block "!isProduction"
[02:09:57.801]    </control>
[02:09:57.801]  </sequence>
[02:09:57.801]  
[02:13:54.845]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:13:54.845]  
[02:13:54.852]  <debugvars>
[02:13:54.852]    // Pre-defined
[02:13:54.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:54.852]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:13:54.852]    __dp=0x00000000
[02:13:54.852]    __ap=0x00000000
[02:13:54.852]    __traceout=0x00000000      (Trace Disabled)
[02:13:54.852]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:54.852]    __FlashAddr=0x00000000
[02:13:54.853]    __FlashLen=0x00000000
[02:13:54.853]    __FlashArg=0x00000000
[02:13:54.853]    __FlashOp=0x00000000
[02:13:54.853]    __Result=0x00000000
[02:13:54.853]  </debugvars>
[02:13:54.853]  
[02:13:54.853]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:13:54.853]    <block atomic="false" info="">
[02:13:54.853]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:13:54.853]        // -> [isSWJ <= 0x00000001]
[02:13:54.853]      __var hasDormant = __protocol & 0x00020000;
[02:13:54.854]        // -> [hasDormant <= 0x00000000]
[02:13:54.854]      __var protType   = __protocol & 0x0000FFFF;
[02:13:54.854]        // -> [protType <= 0x00000002]
[02:13:54.854]    </block>
[02:13:54.854]    <control if="protType == 1" while="" timeout="0" info="">
[02:13:54.854]      // if-block "protType == 1"
[02:13:54.854]        // =>  FALSE
[02:13:54.854]      // skip if-block "protType == 1"
[02:13:54.854]    </control>
[02:13:54.854]    <control if="protType == 2" while="" timeout="0" info="">
[02:13:54.854]      // if-block "protType == 2"
[02:13:54.855]        // =>  TRUE
[02:13:54.855]      <control if="isSWJ" while="" timeout="0" info="">
[02:13:54.855]        // if-block "isSWJ"
[02:13:54.855]          // =>  TRUE
[02:13:54.855]        <control if="hasDormant" while="" timeout="0" info="">
[02:13:54.855]          // if-block "hasDormant"
[02:13:54.855]            // =>  FALSE
[02:13:54.855]          // skip if-block "hasDormant"
[02:13:54.855]        </control>
[02:13:54.855]        <control if="!hasDormant" while="" timeout="0" info="">
[02:13:54.855]          // if-block "!hasDormant"
[02:13:54.855]            // =>  TRUE
[02:13:54.856]          <block atomic="false" info="">
[02:13:54.856]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:13:54.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:54.859]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:13:54.861]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:13:54.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:13:54.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:54.863]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:13:54.864]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:13:54.864]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:13:54.865]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:54.865]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:13:54.871]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:13:54.872]          </block>
[02:13:54.872]          // end if-block "!hasDormant"
[02:13:54.872]        </control>
[02:13:54.872]        // end if-block "isSWJ"
[02:13:54.872]      </control>
[02:13:54.872]      <control if="!isSWJ" while="" timeout="0" info="">
[02:13:54.872]        // if-block "!isSWJ"
[02:13:54.872]          // =>  FALSE
[02:13:54.872]        // skip if-block "!isSWJ"
[02:13:54.872]      </control>
[02:13:54.872]      <block atomic="false" info="">
[02:13:54.873]        ReadDP(0x0);
[02:13:54.874]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:13:54.874]      </block>
[02:13:54.874]      // end if-block "protType == 2"
[02:13:54.874]    </control>
[02:13:54.874]  </sequence>
[02:13:54.874]  
[02:13:54.878]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:13:54.878]  
[02:13:54.879]  <debugvars>
[02:13:54.879]    // Pre-defined
[02:13:54.879]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:54.879]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:13:54.879]    __dp=0x00000000
[02:13:54.879]    __ap=0x00000000
[02:13:54.879]    __traceout=0x00000000      (Trace Disabled)
[02:13:54.879]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:54.879]    __FlashAddr=0x00000000
[02:13:54.880]    __FlashLen=0x00000000
[02:13:54.880]    __FlashArg=0x00000000
[02:13:54.880]    __FlashOp=0x00000000
[02:13:54.880]    __Result=0x00000000
[02:13:54.880]  </debugvars>
[02:13:54.880]  
[02:13:54.880]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:13:54.880]    <block atomic="false" info="">
[02:13:54.880]      __var SW_DP_ABORT       = 0x0;
[02:13:54.880]        // -> [SW_DP_ABORT <= 0x00000000]
[02:13:54.880]      __var DP_CTRL_STAT      = 0x4;
[02:13:54.880]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:13:54.881]      __var DP_SELECT         = 0x8;
[02:13:54.881]        // -> [DP_SELECT <= 0x00000008]
[02:13:54.881]      __var powered_down      = 0;
[02:13:54.881]        // -> [powered_down <= 0x00000000]
[02:13:54.881]      WriteDP(DP_SELECT, 0x00000000);
[02:13:54.882]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:13:54.883]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:13:54.889]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:13:54.889]        // -> [powered_down <= 0x00000001]
[02:13:54.889]    </block>
[02:13:54.889]    <control if="powered_down" while="" timeout="0" info="">
[02:13:54.889]      // if-block "powered_down"
[02:13:54.890]        // =>  TRUE
[02:13:54.890]      <block atomic="false" info="">
[02:13:54.890]        Message(0, "Debug/System power-up request sent");
[02:13:54.891]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:13:54.893]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:13:54.893]      </block>
[02:13:54.893]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:13:54.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:13:54.894]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:13:54.896]        // while-condition  =>  FALSE
[02:13:54.896]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:13:54.896]      </control>
[02:13:54.896]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:13:54.896]        // if-block "(__protocol & 0xFFFF) == 1"
[02:13:54.896]          // =>  FALSE
[02:13:54.896]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:13:54.896]      </control>
[02:13:54.896]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:13:54.896]        // if-block "(__protocol & 0xFFFF) == 2"
[02:13:54.896]          // =>  TRUE
[02:13:54.896]        <block atomic="false" info="">
[02:13:54.897]          Message(0, "executing SWD power up");
[02:13:54.898]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:13:54.900]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:13:54.900]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:13:54.902]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:13:54.902]        </block>
[02:13:54.902]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:13:54.902]      </control>
[02:13:54.903]      // end if-block "powered_down"
[02:13:54.903]    </control>
[02:13:54.903]    <block atomic="false" info="">
[02:13:54.903]      __var DEBUG_PORT_VAL    = 0;
[02:13:54.903]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:13:54.903]      __var ACCESS_POINT_VAL  = 0;
[02:13:54.903]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:13:54.903]      __ap = 1; 
[02:13:54.903]        // -> [__ap <= 0x00000001]
[02:13:54.903]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:13:54.910]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:13:54.910]      __ap = 4;
[02:13:54.910]        // -> [__ap <= 0x00000004]
[02:13:54.910]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:13:54.915]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:13:54.915]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:13:54.915]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:13:54.917]    </block>
[02:13:54.917]    <block atomic="false" info="">
[02:13:54.917]      __var nReset = 0x80;
[02:13:54.917]        // -> [nReset <= 0x00000080]
[02:13:54.917]      __var canReadPins = 0;
[02:13:54.917]        // -> [canReadPins <= 0x00000000]
[02:13:54.917]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:13:54.920]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:13:54.920]        // -> [canReadPins <= 0x00000001]
[02:13:54.920]    </block>
[02:13:54.920]    <control if="" while="1" timeout="200" info="">
[02:13:54.921]      // while "1"  (timeout="200")
[02:13:54.921]      // while-condition  =>  TRUE
[02:13:54.921]      // while "1"  (timeout="200")
[02:13:54.921]      // while-condition  =>  TRUE
[02:13:54.921]      // while "1"  (timeout="200")
[02:13:54.921]      // while-condition  =>  TRUE
[02:13:54.921]      // while "1"  (timeout="200")
[02:13:54.921]      // while-condition  =>  TRUE
[02:13:54.921]      // while "1"  (timeout="200")
[02:13:54.921]      // while-condition  =>  TRUE
[02:13:54.921]      // while "1"  (timeout="200")
[02:13:54.921]      // while-condition  =>  TRUE
[02:13:54.922]      // while "1"  (timeout="200")
[02:13:54.922]      // while-condition  =>  TRUE
[02:13:54.922]      // while "1"  (timeout="200")
[02:13:54.922]      // while-condition  =>  TRUE
[02:13:54.922]      // while "1"  (timeout="200")
[02:13:54.922]      // while-condition  =>  TRUE
[02:13:54.922]      // while "1"  (timeout="200")
[02:13:54.922]      // while-condition  =>  TRUE
[02:13:54.922]      // while "1"  (timeout="200")
[02:13:54.922]      // while-condition  =>  TRUE
[02:13:54.922]      // while "1"  (timeout="200")
[02:13:54.923]      // while-condition  =>  TRUE
[02:13:54.923]      // while "1"  (timeout="200")
[02:13:54.923]      // while  =>  TIMEOUT
[02:13:54.923]      // end while "1"
[02:13:54.923]    </control>
[02:13:54.923]    <control if="canReadPins" while="" timeout="0" info="">
[02:13:54.923]      // if-block "canReadPins"
[02:13:54.923]        // =>  TRUE
[02:13:54.923]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:13:54.923]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:13:54.925]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:13:54.925]        // while-condition  =>  FALSE
[02:13:54.925]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:13:54.925]      </control>
[02:13:54.926]      // end if-block "canReadPins"
[02:13:54.926]    </control>
[02:13:54.926]    <control if="!canReadPins" while="" timeout="0" info="">
[02:13:54.926]      // if-block "!canReadPins"
[02:13:54.926]        // =>  FALSE
[02:13:54.926]      // skip if-block "!canReadPins"
[02:13:54.926]    </control>
[02:13:54.926]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:13:54.926]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:13:54.926]        // =>  TRUE
[02:13:54.926]      <block atomic="false" info="">
[02:13:54.926]        WriteAP(0x00, 0x190008);
[02:13:54.928]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:13:54.928]        WriteAP(0xF0, 0x01);
[02:13:54.932]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:13:54.932]      </block>
[02:13:54.932]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:13:54.932]    </control>
[02:13:54.932]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:13:54.932]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:13:54.933]        // =>  FALSE
[02:13:54.933]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:13:54.933]    </control>
[02:13:54.933]    <block atomic="false" info="">
[02:13:54.933]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:13:54.938]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:13:54.939]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:13:54.939]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:13:54.941]      __ap = 0; //lets make sure we reset the access point selection
[02:13:54.941]        // -> [__ap <= 0x00000000]
[02:13:54.941]    </block>
[02:13:54.941]  </sequence>
[02:13:54.941]  
[02:13:54.971]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:13:54.971]  
[02:13:54.971]  <debugvars>
[02:13:54.972]    // Pre-defined
[02:13:54.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:54.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:13:54.972]    __dp=0x00000000
[02:13:54.972]    __ap=0x00000000
[02:13:54.972]    __traceout=0x00000000      (Trace Disabled)
[02:13:54.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:54.972]    __FlashAddr=0x00000000
[02:13:54.972]    __FlashLen=0x00000000
[02:13:54.972]    __FlashArg=0x00000000
[02:13:54.972]    __FlashOp=0x00000000
[02:13:54.973]    __Result=0x00000000
[02:13:54.973]  </debugvars>
[02:13:54.973]  
[02:13:54.973]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:13:54.973]    <block atomic="false" info="">
[02:13:54.973]      __var deviceID = 0;
[02:13:54.973]        // -> [deviceID <= 0x00000000]
[02:13:54.973]      __var version = 0;
[02:13:54.973]        // -> [version <= 0x00000000]
[02:13:54.973]      __var partNum = 0;
[02:13:54.973]        // -> [partNum <= 0x00000000]
[02:13:54.974]      __var manuf = 0;
[02:13:54.974]        // -> [manuf <= 0x00000000]
[02:13:54.974]      __var isMSPM0G1X0X_G3X0X = 0;
[02:13:54.974]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:13:54.974]      __var isProduction = 0;
[02:13:54.974]        // -> [isProduction <= 0x00000000]
[02:13:54.974]      __var continueId = 0;
[02:13:54.974]        // -> [continueId <= 0x00000000]
[02:13:54.974]      deviceID =   Read32(0x41C40004);
[02:13:54.981]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:13:54.981]        // -> [deviceID <= 0x2BB8802F]
[02:13:54.981]      version = deviceID >> 28;
[02:13:54.981]        // -> [version <= 0x00000002]
[02:13:54.981]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:13:54.981]        // -> [partNum <= 0x0000BB88]
[02:13:54.982]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:13:54.982]        // -> [manuf <= 0x00000017]
[02:13:54.982]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:13:54.982]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:13:54.982]      isProduction = (version > 0);
[02:13:54.982]        // -> [isProduction <= 0x00000001]
[02:13:54.982]    </block>
[02:13:54.982]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:13:54.983]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:13:54.983]        // =>  FALSE
[02:13:54.983]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:13:54.983]    </control>
[02:13:54.983]    <control if="continueId == 4" while="" timeout="0" info="">
[02:13:54.983]      // if-block "continueId == 4"
[02:13:54.984]        // =>  FALSE
[02:13:54.984]      // skip if-block "continueId == 4"
[02:13:54.984]    </control>
[02:13:54.984]    <control if="!isProduction" while="" timeout="0" info="">
[02:13:54.984]      // if-block "!isProduction"
[02:13:54.984]        // =>  FALSE
[02:13:54.984]      // skip if-block "!isProduction"
[02:13:54.984]    </control>
[02:13:54.985]  </sequence>
[02:13:54.985]  
[02:17:10.243]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:17:10.243]  
[02:17:10.244]  <debugvars>
[02:17:10.244]    // Pre-defined
[02:17:10.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:10.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:10.245]    __dp=0x00000000
[02:17:10.245]    __ap=0x00000000
[02:17:10.245]    __traceout=0x00000000      (Trace Disabled)
[02:17:10.245]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:10.245]    __FlashAddr=0x00000000
[02:17:10.245]    __FlashLen=0x00000000
[02:17:10.245]    __FlashArg=0x00000000
[02:17:10.245]    __FlashOp=0x00000000
[02:17:10.245]    __Result=0x00000000
[02:17:10.245]  </debugvars>
[02:17:10.245]  
[02:17:10.245]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:17:10.245]    <block atomic="false" info="">
[02:17:10.246]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:17:10.246]        // -> [isSWJ <= 0x00000001]
[02:17:10.246]      __var hasDormant = __protocol & 0x00020000;
[02:17:10.246]        // -> [hasDormant <= 0x00000000]
[02:17:10.246]      __var protType   = __protocol & 0x0000FFFF;
[02:17:10.246]        // -> [protType <= 0x00000002]
[02:17:10.246]    </block>
[02:17:10.246]    <control if="protType == 1" while="" timeout="0" info="">
[02:17:10.246]      // if-block "protType == 1"
[02:17:10.246]        // =>  FALSE
[02:17:10.246]      // skip if-block "protType == 1"
[02:17:10.246]    </control>
[02:17:10.247]    <control if="protType == 2" while="" timeout="0" info="">
[02:17:10.247]      // if-block "protType == 2"
[02:17:10.247]        // =>  TRUE
[02:17:10.247]      <control if="isSWJ" while="" timeout="0" info="">
[02:17:10.247]        // if-block "isSWJ"
[02:17:10.247]          // =>  TRUE
[02:17:10.247]        <control if="hasDormant" while="" timeout="0" info="">
[02:17:10.247]          // if-block "hasDormant"
[02:17:10.247]            // =>  FALSE
[02:17:10.247]          // skip if-block "hasDormant"
[02:17:10.247]        </control>
[02:17:10.247]        <control if="!hasDormant" while="" timeout="0" info="">
[02:17:10.248]          // if-block "!hasDormant"
[02:17:10.248]            // =>  TRUE
[02:17:10.248]          <block atomic="false" info="">
[02:17:10.248]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:17:10.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:10.251]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:17:10.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:17:10.254]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:17:10.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:10.256]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:17:10.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:17:10.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:17:10.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:10.262]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:17:10.263]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:17:10.263]          </block>
[02:17:10.263]          // end if-block "!hasDormant"
[02:17:10.263]        </control>
[02:17:10.263]        // end if-block "isSWJ"
[02:17:10.263]      </control>
[02:17:10.263]      <control if="!isSWJ" while="" timeout="0" info="">
[02:17:10.263]        // if-block "!isSWJ"
[02:17:10.263]          // =>  FALSE
[02:17:10.263]        // skip if-block "!isSWJ"
[02:17:10.263]      </control>
[02:17:10.263]      <block atomic="false" info="">
[02:17:10.263]        ReadDP(0x0);
[02:17:10.270]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:17:10.270]      </block>
[02:17:10.270]      // end if-block "protType == 2"
[02:17:10.270]    </control>
[02:17:10.270]  </sequence>
[02:17:10.270]  
[02:17:10.276]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:17:10.276]  
[02:17:10.276]  <debugvars>
[02:17:10.276]    // Pre-defined
[02:17:10.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:10.277]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:10.277]    __dp=0x00000000
[02:17:10.277]    __ap=0x00000000
[02:17:10.277]    __traceout=0x00000000      (Trace Disabled)
[02:17:10.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:10.277]    __FlashAddr=0x00000000
[02:17:10.277]    __FlashLen=0x00000000
[02:17:10.277]    __FlashArg=0x00000000
[02:17:10.278]    __FlashOp=0x00000000
[02:17:10.278]    __Result=0x00000000
[02:17:10.278]  </debugvars>
[02:17:10.278]  
[02:17:10.278]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:17:10.278]    <block atomic="false" info="">
[02:17:10.278]      __var SW_DP_ABORT       = 0x0;
[02:17:10.278]        // -> [SW_DP_ABORT <= 0x00000000]
[02:17:10.278]      __var DP_CTRL_STAT      = 0x4;
[02:17:10.278]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:17:10.278]      __var DP_SELECT         = 0x8;
[02:17:10.278]        // -> [DP_SELECT <= 0x00000008]
[02:17:10.279]      __var powered_down      = 0;
[02:17:10.279]        // -> [powered_down <= 0x00000000]
[02:17:10.279]      WriteDP(DP_SELECT, 0x00000000);
[02:17:10.282]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:17:10.282]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:17:10.283]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:17:10.283]        // -> [powered_down <= 0x00000001]
[02:17:10.284]    </block>
[02:17:10.284]    <control if="powered_down" while="" timeout="0" info="">
[02:17:10.284]      // if-block "powered_down"
[02:17:10.284]        // =>  TRUE
[02:17:10.284]      <block atomic="false" info="">
[02:17:10.284]        Message(0, "Debug/System power-up request sent");
[02:17:10.286]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:17:10.291]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:17:10.291]      </block>
[02:17:10.291]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:17:10.291]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:17:10.294]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:17:10.294]        // while-condition  =>  FALSE
[02:17:10.294]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:17:10.294]      </control>
[02:17:10.294]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:17:10.294]        // if-block "(__protocol & 0xFFFF) == 1"
[02:17:10.295]          // =>  FALSE
[02:17:10.295]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:17:10.295]      </control>
[02:17:10.295]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:17:10.295]        // if-block "(__protocol & 0xFFFF) == 2"
[02:17:10.295]          // =>  TRUE
[02:17:10.295]        <block atomic="false" info="">
[02:17:10.295]          Message(0, "executing SWD power up");
[02:17:10.297]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:17:10.298]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:17:10.299]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:17:10.301]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:17:10.302]        </block>
[02:17:10.302]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:17:10.302]      </control>
[02:17:10.302]      // end if-block "powered_down"
[02:17:10.302]    </control>
[02:17:10.302]    <block atomic="false" info="">
[02:17:10.302]      __var DEBUG_PORT_VAL    = 0;
[02:17:10.302]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:17:10.302]      __var ACCESS_POINT_VAL  = 0;
[02:17:10.302]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:17:10.302]      __ap = 1; 
[02:17:10.303]        // -> [__ap <= 0x00000001]
[02:17:10.303]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:17:10.306]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:17:10.306]      __ap = 4;
[02:17:10.306]        // -> [__ap <= 0x00000004]
[02:17:10.306]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:10.310]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:17:10.310]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:17:10.310]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:10.312]    </block>
[02:17:10.312]    <block atomic="false" info="">
[02:17:10.312]      __var nReset = 0x80;
[02:17:10.312]        // -> [nReset <= 0x00000080]
[02:17:10.312]      __var canReadPins = 0;
[02:17:10.313]        // -> [canReadPins <= 0x00000000]
[02:17:10.313]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:17:10.316]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:17:10.316]        // -> [canReadPins <= 0x00000001]
[02:17:10.316]    </block>
[02:17:10.316]    <control if="" while="1" timeout="200" info="">
[02:17:10.316]      // while "1"  (timeout="200")
[02:17:10.316]      // while-condition  =>  TRUE
[02:17:10.316]      // while "1"  (timeout="200")
[02:17:10.316]      // while-condition  =>  TRUE
[02:17:10.316]      // while "1"  (timeout="200")
[02:17:10.316]      // while-condition  =>  TRUE
[02:17:10.316]      // while "1"  (timeout="200")
[02:17:10.317]      // while-condition  =>  TRUE
[02:17:10.317]      // while "1"  (timeout="200")
[02:17:10.317]      // while-condition  =>  TRUE
[02:17:10.317]      // while "1"  (timeout="200")
[02:17:10.317]      // while-condition  =>  TRUE
[02:17:10.317]      // while "1"  (timeout="200")
[02:17:10.318]      // while-condition  =>  TRUE
[02:17:10.318]      // while "1"  (timeout="200")
[02:17:10.318]      // while-condition  =>  TRUE
[02:17:10.318]      // while "1"  (timeout="200")
[02:17:10.318]      // while-condition  =>  TRUE
[02:17:10.318]      // while "1"  (timeout="200")
[02:17:10.318]      // while-condition  =>  TRUE
[02:17:10.318]      // while "1"  (timeout="200")
[02:17:10.319]      // while-condition  =>  TRUE
[02:17:10.319]      // while "1"  (timeout="200")
[02:17:10.319]      // while-condition  =>  TRUE
[02:17:10.319]      // while "1"  (timeout="200")
[02:17:10.319]      // while-condition  =>  TRUE
[02:17:10.319]      // while "1"  (timeout="200")
[02:17:10.319]      // while-condition  =>  TRUE
[02:17:10.319]      // while "1"  (timeout="200")
[02:17:10.319]      // while-condition  =>  TRUE
[02:17:10.319]      // while "1"  (timeout="200")
[02:17:10.319]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.320]      // while-condition  =>  TRUE
[02:17:10.320]      // while "1"  (timeout="200")
[02:17:10.321]      // while-condition  =>  TRUE
[02:17:10.321]      // while "1"  (timeout="200")
[02:17:10.321]      // while-condition  =>  TRUE
[02:17:10.321]      // while "1"  (timeout="200")
[02:17:10.321]      // while-condition  =>  TRUE
[02:17:10.321]      // while "1"  (timeout="200")
[02:17:10.321]      // while-condition  =>  TRUE
[02:17:10.321]      // while "1"  (timeout="200")
[02:17:10.321]      // while-condition  =>  TRUE
[02:17:10.321]      // while "1"  (timeout="200")
[02:17:10.322]      // while-condition  =>  TRUE
[02:17:10.322]      // while "1"  (timeout="200")
[02:17:10.322]      // while-condition  =>  TRUE
[02:17:10.322]      // while "1"  (timeout="200")
[02:17:10.322]      // while-condition  =>  TRUE
[02:17:10.322]      // while "1"  (timeout="200")
[02:17:10.322]      // while-condition  =>  TRUE
[02:17:10.322]      // while "1"  (timeout="200")
[02:17:10.322]      // while-condition  =>  TRUE
[02:17:10.322]      // while "1"  (timeout="200")
[02:17:10.323]      // while-condition  =>  TRUE
[02:17:10.323]      // while "1"  (timeout="200")
[02:17:10.323]      // while-condition  =>  TRUE
[02:17:10.323]      // while "1"  (timeout="200")
[02:17:10.323]      // while-condition  =>  TRUE
[02:17:10.323]      // while "1"  (timeout="200")
[02:17:10.323]      // while-condition  =>  TRUE
[02:17:10.323]      // while "1"  (timeout="200")
[02:17:10.324]      // while-condition  =>  TRUE
[02:17:10.325]      // while "1"  (timeout="200")
[02:17:10.325]      // while-condition  =>  TRUE
[02:17:10.325]      // while "1"  (timeout="200")
[02:17:10.325]      // while-condition  =>  TRUE
[02:17:10.325]      // while "1"  (timeout="200")
[02:17:10.325]      // while-condition  =>  TRUE
[02:17:10.325]      // while "1"  (timeout="200")
[02:17:10.325]      // while-condition  =>  TRUE
[02:17:10.325]      // while "1"  (timeout="200")
[02:17:10.325]      // while-condition  =>  TRUE
[02:17:10.325]      // while "1"  (timeout="200")
[02:17:10.326]      // while-condition  =>  TRUE
[02:17:10.326]      // while "1"  (timeout="200")
[02:17:10.326]      // while-condition  =>  TRUE
[02:17:10.326]      // while "1"  (timeout="200")
[02:17:10.326]      // while-condition  =>  TRUE
[02:17:10.326]      // while "1"  (timeout="200")
[02:17:10.326]      // while-condition  =>  TRUE
[02:17:10.326]      // while "1"  (timeout="200")
[02:17:10.326]      // while-condition  =>  TRUE
[02:17:10.327]      // while "1"  (timeout="200")
[02:17:10.327]      // while-condition  =>  TRUE
[02:17:10.327]      // while "1"  (timeout="200")
[02:17:10.327]      // while-condition  =>  TRUE
[02:17:10.327]      // while "1"  (timeout="200")
[02:17:10.327]      // while-condition  =>  TRUE
[02:17:10.327]      // while "1"  (timeout="200")
[02:17:10.327]      // while-condition  =>  TRUE
[02:17:10.327]      // while "1"  (timeout="200")
[02:17:10.327]      // while-condition  =>  TRUE
[02:17:10.327]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.328]      // while-condition  =>  TRUE
[02:17:10.328]      // while "1"  (timeout="200")
[02:17:10.330]      // while-condition  =>  TRUE
[02:17:10.330]      // while "1"  (timeout="200")
[02:17:10.330]      // while  =>  TIMEOUT
[02:17:10.330]      // end while "1"
[02:17:10.330]    </control>
[02:17:10.330]    <control if="canReadPins" while="" timeout="0" info="">
[02:17:10.330]      // if-block "canReadPins"
[02:17:10.330]        // =>  TRUE
[02:17:10.330]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:17:10.330]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:17:10.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:17:10.332]        // while-condition  =>  FALSE
[02:17:10.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:17:10.332]      </control>
[02:17:10.332]      // end if-block "canReadPins"
[02:17:10.332]    </control>
[02:17:10.333]    <control if="!canReadPins" while="" timeout="0" info="">
[02:17:10.333]      // if-block "!canReadPins"
[02:17:10.333]        // =>  FALSE
[02:17:10.333]      // skip if-block "!canReadPins"
[02:17:10.333]    </control>
[02:17:10.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:17:10.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:10.334]        // =>  TRUE
[02:17:10.334]      <block atomic="false" info="">
[02:17:10.334]        WriteAP(0x00, 0x190008);
[02:17:10.344]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:10.344]        WriteAP(0xF0, 0x01);
[02:17:10.347]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:10.348]      </block>
[02:17:10.348]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:10.348]    </control>
[02:17:10.348]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:17:10.348]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:10.348]        // =>  FALSE
[02:17:10.348]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:10.348]    </control>
[02:17:10.348]    <block atomic="false" info="">
[02:17:10.348]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:10.357]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:17:10.358]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:17:10.358]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:10.359]      __ap = 0; //lets make sure we reset the access point selection
[02:17:10.359]        // -> [__ap <= 0x00000000]
[02:17:10.359]    </block>
[02:17:10.359]  </sequence>
[02:17:10.361]  
[02:17:10.395]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:17:10.395]  
[02:17:10.395]  <debugvars>
[02:17:10.395]    // Pre-defined
[02:17:10.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:10.396]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:10.396]    __dp=0x00000000
[02:17:10.396]    __ap=0x00000000
[02:17:10.396]    __traceout=0x00000000      (Trace Disabled)
[02:17:10.396]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:10.396]    __FlashAddr=0x00000000
[02:17:10.396]    __FlashLen=0x00000000
[02:17:10.396]    __FlashArg=0x00000000
[02:17:10.396]    __FlashOp=0x00000000
[02:17:10.396]    __Result=0x00000000
[02:17:10.397]  </debugvars>
[02:17:10.397]  
[02:17:10.397]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:17:10.397]    <block atomic="false" info="">
[02:17:10.397]      __var deviceID = 0;
[02:17:10.397]        // -> [deviceID <= 0x00000000]
[02:17:10.397]      __var version = 0;
[02:17:10.397]        // -> [version <= 0x00000000]
[02:17:10.397]      __var partNum = 0;
[02:17:10.397]        // -> [partNum <= 0x00000000]
[02:17:10.397]      __var manuf = 0;
[02:17:10.398]        // -> [manuf <= 0x00000000]
[02:17:10.398]      __var isMSPM0G1X0X_G3X0X = 0;
[02:17:10.398]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:17:10.398]      __var isProduction = 0;
[02:17:10.398]        // -> [isProduction <= 0x00000000]
[02:17:10.398]      __var continueId = 0;
[02:17:10.398]        // -> [continueId <= 0x00000000]
[02:17:10.398]      deviceID =   Read32(0x41C40004);
[02:17:10.420]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:17:10.421]        // -> [deviceID <= 0x2BB8802F]
[02:17:10.421]      version = deviceID >> 28;
[02:17:10.422]        // -> [version <= 0x00000002]
[02:17:10.422]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:17:10.422]        // -> [partNum <= 0x0000BB88]
[02:17:10.422]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:17:10.422]        // -> [manuf <= 0x00000017]
[02:17:10.422]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:17:10.422]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:17:10.422]      isProduction = (version > 0);
[02:17:10.422]        // -> [isProduction <= 0x00000001]
[02:17:10.422]    </block>
[02:17:10.422]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:17:10.422]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:17:10.423]        // =>  FALSE
[02:17:10.423]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:17:10.423]    </control>
[02:17:10.423]    <control if="continueId == 4" while="" timeout="0" info="">
[02:17:10.423]      // if-block "continueId == 4"
[02:17:10.423]        // =>  FALSE
[02:17:10.423]      // skip if-block "continueId == 4"
[02:17:10.423]    </control>
[02:17:10.423]    <control if="!isProduction" while="" timeout="0" info="">
[02:17:10.423]      // if-block "!isProduction"
[02:17:10.423]        // =>  FALSE
[02:17:10.423]      // skip if-block "!isProduction"
[02:17:10.424]    </control>
[02:17:10.424]  </sequence>
[02:17:10.424]  
[02:17:24.289]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:17:24.289]  
[02:17:24.298]  <debugvars>
[02:17:24.298]    // Pre-defined
[02:17:24.298]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:24.298]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:24.298]    __dp=0x00000000
[02:17:24.298]    __ap=0x00000000
[02:17:24.299]    __traceout=0x00000000      (Trace Disabled)
[02:17:24.299]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:24.299]    __FlashAddr=0x00000000
[02:17:24.299]    __FlashLen=0x00000000
[02:17:24.299]    __FlashArg=0x00000000
[02:17:24.299]    __FlashOp=0x00000000
[02:17:24.299]    __Result=0x00000000
[02:17:24.300]  </debugvars>
[02:17:24.300]  
[02:17:24.300]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:17:24.300]    <block atomic="false" info="">
[02:17:24.300]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:17:24.300]        // -> [isSWJ <= 0x00000001]
[02:17:24.300]      __var hasDormant = __protocol & 0x00020000;
[02:17:24.300]        // -> [hasDormant <= 0x00000000]
[02:17:24.300]      __var protType   = __protocol & 0x0000FFFF;
[02:17:24.300]        // -> [protType <= 0x00000002]
[02:17:24.300]    </block>
[02:17:24.300]    <control if="protType == 1" while="" timeout="0" info="">
[02:17:24.300]      // if-block "protType == 1"
[02:17:24.301]        // =>  FALSE
[02:17:24.301]      // skip if-block "protType == 1"
[02:17:24.301]    </control>
[02:17:24.301]    <control if="protType == 2" while="" timeout="0" info="">
[02:17:24.301]      // if-block "protType == 2"
[02:17:24.301]        // =>  TRUE
[02:17:24.301]      <control if="isSWJ" while="" timeout="0" info="">
[02:17:24.301]        // if-block "isSWJ"
[02:17:24.301]          // =>  TRUE
[02:17:24.302]        <control if="hasDormant" while="" timeout="0" info="">
[02:17:24.302]          // if-block "hasDormant"
[02:17:24.302]            // =>  FALSE
[02:17:24.302]          // skip if-block "hasDormant"
[02:17:24.302]        </control>
[02:17:24.302]        <control if="!hasDormant" while="" timeout="0" info="">
[02:17:24.302]          // if-block "!hasDormant"
[02:17:24.302]            // =>  TRUE
[02:17:24.302]          <block atomic="false" info="">
[02:17:24.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:17:24.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:24.307]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:17:24.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:17:24.311]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:17:24.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:24.321]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:17:24.327]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:17:24.329]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:17:24.333]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:24.333]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:17:24.334]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:17:24.334]          </block>
[02:17:24.334]          // end if-block "!hasDormant"
[02:17:24.334]        </control>
[02:17:24.334]        // end if-block "isSWJ"
[02:17:24.335]      </control>
[02:17:24.335]      <control if="!isSWJ" while="" timeout="0" info="">
[02:17:24.335]        // if-block "!isSWJ"
[02:17:24.335]          // =>  FALSE
[02:17:24.335]        // skip if-block "!isSWJ"
[02:17:24.335]      </control>
[02:17:24.335]      <block atomic="false" info="">
[02:17:24.335]        ReadDP(0x0);
[02:17:24.342]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:17:24.342]      </block>
[02:17:24.342]      // end if-block "protType == 2"
[02:17:24.342]    </control>
[02:17:24.343]  </sequence>
[02:17:24.343]  
[02:17:24.349]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:17:24.349]  
[02:17:24.349]  <debugvars>
[02:17:24.349]    // Pre-defined
[02:17:24.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:24.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:24.349]    __dp=0x00000000
[02:17:24.349]    __ap=0x00000000
[02:17:24.349]    __traceout=0x00000000      (Trace Disabled)
[02:17:24.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:24.349]    __FlashAddr=0x00000000
[02:17:24.349]    __FlashLen=0x00000000
[02:17:24.351]    __FlashArg=0x00000000
[02:17:24.351]    __FlashOp=0x00000000
[02:17:24.351]    __Result=0x00000000
[02:17:24.351]  </debugvars>
[02:17:24.351]  
[02:17:24.351]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:17:24.351]    <block atomic="false" info="">
[02:17:24.351]      __var SW_DP_ABORT       = 0x0;
[02:17:24.351]        // -> [SW_DP_ABORT <= 0x00000000]
[02:17:24.352]      __var DP_CTRL_STAT      = 0x4;
[02:17:24.352]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:17:24.352]      __var DP_SELECT         = 0x8;
[02:17:24.352]        // -> [DP_SELECT <= 0x00000008]
[02:17:24.352]      __var powered_down      = 0;
[02:17:24.352]        // -> [powered_down <= 0x00000000]
[02:17:24.352]      WriteDP(DP_SELECT, 0x00000000);
[02:17:24.358]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:17:24.358]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:17:24.365]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:17:24.365]        // -> [powered_down <= 0x00000001]
[02:17:24.366]    </block>
[02:17:24.366]    <control if="powered_down" while="" timeout="0" info="">
[02:17:24.366]      // if-block "powered_down"
[02:17:24.366]        // =>  TRUE
[02:17:24.366]      <block atomic="false" info="">
[02:17:24.366]        Message(0, "Debug/System power-up request sent");
[02:17:24.366]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:17:24.373]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:17:24.373]      </block>
[02:17:24.374]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:17:24.374]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:17:24.384]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:17:24.384]        // while-condition  =>  FALSE
[02:17:24.384]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:17:24.384]      </control>
[02:17:24.384]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:17:24.384]        // if-block "(__protocol & 0xFFFF) == 1"
[02:17:24.384]          // =>  FALSE
[02:17:24.384]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:17:24.384]      </control>
[02:17:24.384]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:17:24.384]        // if-block "(__protocol & 0xFFFF) == 2"
[02:17:24.385]          // =>  TRUE
[02:17:24.385]        <block atomic="false" info="">
[02:17:24.385]          Message(0, "executing SWD power up");
[02:17:24.385]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:17:24.392]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:17:24.392]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:17:24.396]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:17:24.396]        </block>
[02:17:24.396]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:17:24.396]      </control>
[02:17:24.396]      // end if-block "powered_down"
[02:17:24.396]    </control>
[02:17:24.396]    <block atomic="false" info="">
[02:17:24.396]      __var DEBUG_PORT_VAL    = 0;
[02:17:24.396]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:17:24.396]      __var ACCESS_POINT_VAL  = 0;
[02:17:24.396]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:17:24.396]      __ap = 1; 
[02:17:24.397]        // -> [__ap <= 0x00000001]
[02:17:24.397]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:17:24.411]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:17:24.411]      __ap = 4;
[02:17:24.411]        // -> [__ap <= 0x00000004]
[02:17:24.412]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:24.426]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[02:17:24.427]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[02:17:24.427]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:24.427]    </block>
[02:17:24.427]    <block atomic="false" info="">
[02:17:24.427]      __var nReset = 0x80;
[02:17:24.427]        // -> [nReset <= 0x00000080]
[02:17:24.427]      __var canReadPins = 0;
[02:17:24.427]        // -> [canReadPins <= 0x00000000]
[02:17:24.427]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:17:24.440]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:17:24.441]        // -> [canReadPins <= 0x00000001]
[02:17:24.441]    </block>
[02:17:24.441]    <control if="" while="1" timeout="200" info="">
[02:17:24.441]      // while "1"  (timeout="200")
[02:17:24.441]      // while-condition  =>  TRUE
[02:17:24.441]      // while "1"  (timeout="200")
[02:17:24.441]      // while-condition  =>  TRUE
[02:17:24.441]      // while "1"  (timeout="200")
[02:17:24.441]      // while-condition  =>  TRUE
[02:17:24.441]      // while "1"  (timeout="200")
[02:17:24.441]      // while-condition  =>  TRUE
[02:17:24.441]      // while "1"  (timeout="200")
[02:17:24.442]      // while-condition  =>  TRUE
[02:17:24.442]      // while "1"  (timeout="200")
[02:17:24.442]      // while-condition  =>  TRUE
[02:17:24.442]      // while "1"  (timeout="200")
[02:17:24.442]      // while-condition  =>  TRUE
[02:17:24.442]      // while "1"  (timeout="200")
[02:17:24.442]      // while-condition  =>  TRUE
[02:17:24.442]      // while "1"  (timeout="200")
[02:17:24.442]      // while-condition  =>  TRUE
[02:17:24.443]      // while "1"  (timeout="200")
[02:17:24.443]      // while-condition  =>  TRUE
[02:17:24.443]      // while "1"  (timeout="200")
[02:17:24.443]      // while-condition  =>  TRUE
[02:17:24.443]      // while "1"  (timeout="200")
[02:17:24.443]      // while-condition  =>  TRUE
[02:17:24.443]      // while "1"  (timeout="200")
[02:17:24.443]      // while-condition  =>  TRUE
[02:17:24.443]      // while "1"  (timeout="200")
[02:17:24.443]      // while-condition  =>  TRUE
[02:17:24.445]      // while "1"  (timeout="200")
[02:17:24.445]      // while-condition  =>  TRUE
[02:17:24.445]      // while "1"  (timeout="200")
[02:17:24.445]      // while-condition  =>  TRUE
[02:17:24.445]      // while "1"  (timeout="200")
[02:17:24.445]      // while-condition  =>  TRUE
[02:17:24.445]      // while "1"  (timeout="200")
[02:17:24.445]      // while-condition  =>  TRUE
[02:17:24.445]      // while "1"  (timeout="200")
[02:17:24.445]      // while-condition  =>  TRUE
[02:17:24.445]      // while "1"  (timeout="200")
[02:17:24.446]      // while-condition  =>  TRUE
[02:17:24.446]      // while "1"  (timeout="200")
[02:17:24.446]      // while-condition  =>  TRUE
[02:17:24.446]      // while "1"  (timeout="200")
[02:17:24.446]      // while-condition  =>  TRUE
[02:17:24.447]      // while "1"  (timeout="200")
[02:17:24.447]      // while-condition  =>  TRUE
[02:17:24.447]      // while "1"  (timeout="200")
[02:17:24.447]      // while-condition  =>  TRUE
[02:17:24.447]      // while "1"  (timeout="200")
[02:17:24.447]      // while-condition  =>  TRUE
[02:17:24.447]      // while "1"  (timeout="200")
[02:17:24.447]      // while-condition  =>  TRUE
[02:17:24.447]      // while "1"  (timeout="200")
[02:17:24.447]      // while-condition  =>  TRUE
[02:17:24.447]      // while "1"  (timeout="200")
[02:17:24.447]      // while-condition  =>  TRUE
[02:17:24.448]      // while "1"  (timeout="200")
[02:17:24.448]      // while-condition  =>  TRUE
[02:17:24.448]      // while "1"  (timeout="200")
[02:17:24.448]      // while-condition  =>  TRUE
[02:17:24.448]      // while "1"  (timeout="200")
[02:17:24.448]      // while-condition  =>  TRUE
[02:17:24.448]      // while "1"  (timeout="200")
[02:17:24.448]      // while-condition  =>  TRUE
[02:17:24.448]      // while "1"  (timeout="200")
[02:17:24.448]      // while-condition  =>  TRUE
[02:17:24.449]      // while "1"  (timeout="200")
[02:17:24.449]      // while-condition  =>  TRUE
[02:17:24.449]      // while "1"  (timeout="200")
[02:17:24.449]      // while-condition  =>  TRUE
[02:17:24.449]      // while "1"  (timeout="200")
[02:17:24.449]      // while-condition  =>  TRUE
[02:17:24.449]      // while "1"  (timeout="200")
[02:17:24.449]      // while-condition  =>  TRUE
[02:17:24.449]      // while "1"  (timeout="200")
[02:17:24.449]      // while-condition  =>  TRUE
[02:17:24.449]      // while "1"  (timeout="200")
[02:17:24.449]      // while-condition  =>  TRUE
[02:17:24.450]      // while "1"  (timeout="200")
[02:17:24.450]      // while-condition  =>  TRUE
[02:17:24.450]      // while "1"  (timeout="200")
[02:17:24.450]      // while-condition  =>  TRUE
[02:17:24.450]      // while "1"  (timeout="200")
[02:17:24.450]      // while-condition  =>  TRUE
[02:17:24.450]      // while "1"  (timeout="200")
[02:17:24.450]      // while-condition  =>  TRUE
[02:17:24.450]      // while "1"  (timeout="200")
[02:17:24.450]      // while-condition  =>  TRUE
[02:17:24.450]      // while "1"  (timeout="200")
[02:17:24.450]      // while-condition  =>  TRUE
[02:17:24.452]      // while "1"  (timeout="200")
[02:17:24.452]      // while-condition  =>  TRUE
[02:17:24.452]      // while "1"  (timeout="200")
[02:17:24.452]      // while-condition  =>  TRUE
[02:17:24.452]      // while "1"  (timeout="200")
[02:17:24.452]      // while-condition  =>  TRUE
[02:17:24.452]      // while "1"  (timeout="200")
[02:17:24.452]      // while-condition  =>  TRUE
[02:17:24.452]      // while "1"  (timeout="200")
[02:17:24.452]      // while-condition  =>  TRUE
[02:17:24.452]      // while "1"  (timeout="200")
[02:17:24.452]      // while-condition  =>  TRUE
[02:17:24.453]      // while "1"  (timeout="200")
[02:17:24.453]      // while-condition  =>  TRUE
[02:17:24.453]      // while "1"  (timeout="200")
[02:17:24.453]      // while-condition  =>  TRUE
[02:17:24.453]      // while "1"  (timeout="200")
[02:17:24.453]      // while-condition  =>  TRUE
[02:17:24.453]      // while "1"  (timeout="200")
[02:17:24.453]      // while-condition  =>  TRUE
[02:17:24.453]      // while "1"  (timeout="200")
[02:17:24.453]      // while-condition  =>  TRUE
[02:17:24.453]      // while "1"  (timeout="200")
[02:17:24.454]      // while-condition  =>  TRUE
[02:17:24.454]      // while "1"  (timeout="200")
[02:17:24.454]      // while  =>  TIMEOUT
[02:17:24.454]      // end while "1"
[02:17:24.454]    </control>
[02:17:24.454]    <control if="canReadPins" while="" timeout="0" info="">
[02:17:24.454]      // if-block "canReadPins"
[02:17:24.454]        // =>  TRUE
[02:17:24.454]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:17:24.454]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:17:24.465]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:17:24.465]        // while-condition  =>  FALSE
[02:17:24.465]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:17:24.465]      </control>
[02:17:24.465]      // end if-block "canReadPins"
[02:17:24.465]    </control>
[02:17:24.465]    <control if="!canReadPins" while="" timeout="0" info="">
[02:17:24.465]      // if-block "!canReadPins"
[02:17:24.465]        // =>  FALSE
[02:17:24.465]      // skip if-block "!canReadPins"
[02:17:24.465]    </control>
[02:17:24.465]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:17:24.466]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:24.466]        // =>  TRUE
[02:17:24.466]      <block atomic="false" info="">
[02:17:24.466]        WriteAP(0x00, 0x190008);
[02:17:24.476]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:24.476]        WriteAP(0xF0, 0x01);
[02:17:24.495]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:24.495]      </block>
[02:17:24.495]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:24.495]    </control>
[02:17:24.495]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:17:24.495]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:24.496]        // =>  FALSE
[02:17:24.496]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:24.496]    </control>
[02:17:24.496]    <block atomic="false" info="">
[02:17:24.496]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:24.516]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[02:17:24.516]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[02:17:24.516]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:24.517]      __ap = 0; //lets make sure we reset the access point selection
[02:17:24.517]        // -> [__ap <= 0x00000000]
[02:17:24.517]    </block>
[02:17:24.517]  </sequence>
[02:17:24.517]  
[02:17:24.617]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:17:24.617]  
[02:17:24.617]  <debugvars>
[02:17:24.617]    // Pre-defined
[02:17:24.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:24.617]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:24.617]    __dp=0x00000000
[02:17:24.618]    __ap=0x00000000
[02:17:24.618]    __traceout=0x00000000      (Trace Disabled)
[02:17:24.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:24.618]    __FlashAddr=0x00000000
[02:17:24.618]    __FlashLen=0x00000000
[02:17:24.618]    __FlashArg=0x00000000
[02:17:24.618]    __FlashOp=0x00000000
[02:17:24.619]    __Result=0x00000000
[02:17:24.619]  </debugvars>
[02:17:24.619]  
[02:17:24.619]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:17:24.619]    <block atomic="false" info="">
[02:17:24.619]      __var deviceID = 0;
[02:17:24.619]        // -> [deviceID <= 0x00000000]
[02:17:24.619]      __var version = 0;
[02:17:24.619]        // -> [version <= 0x00000000]
[02:17:24.619]      __var partNum = 0;
[02:17:24.620]        // -> [partNum <= 0x00000000]
[02:17:24.620]      __var manuf = 0;
[02:17:24.620]        // -> [manuf <= 0x00000000]
[02:17:24.620]      __var isMSPM0G1X0X_G3X0X = 0;
[02:17:24.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:17:24.620]      __var isProduction = 0;
[02:17:24.620]        // -> [isProduction <= 0x00000000]
[02:17:24.620]      __var continueId = 0;
[02:17:24.620]        // -> [continueId <= 0x00000000]
[02:17:24.620]      deviceID =   Read32(0x41C40004);
[02:17:24.636]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:17:24.636]        // -> [deviceID <= 0x2BB8802F]
[02:17:24.636]      version = deviceID >> 28;
[02:17:24.636]        // -> [version <= 0x00000002]
[02:17:24.636]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:17:24.636]        // -> [partNum <= 0x0000BB88]
[02:17:24.636]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:17:24.636]        // -> [manuf <= 0x00000017]
[02:17:24.636]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:17:24.637]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:17:24.637]      isProduction = (version > 0);
[02:17:24.637]        // -> [isProduction <= 0x00000001]
[02:17:24.637]    </block>
[02:17:24.637]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:17:24.637]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:17:24.637]        // =>  FALSE
[02:17:24.637]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:17:24.637]    </control>
[02:17:24.637]    <control if="continueId == 4" while="" timeout="0" info="">
[02:17:24.637]      // if-block "continueId == 4"
[02:17:24.637]        // =>  FALSE
[02:17:24.638]      // skip if-block "continueId == 4"
[02:17:24.638]    </control>
[02:17:24.638]    <control if="!isProduction" while="" timeout="0" info="">
[02:17:24.638]      // if-block "!isProduction"
[02:17:24.638]        // =>  FALSE
[02:17:24.638]      // skip if-block "!isProduction"
[02:17:24.638]    </control>
[02:17:24.638]  </sequence>
[02:17:24.638]  
[02:17:35.778]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:17:35.778]  
[02:17:35.778]  <debugvars>
[02:17:35.778]    // Pre-defined
[02:17:35.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:35.779]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:35.779]    __dp=0x00000000
[02:17:35.779]    __ap=0x00000000
[02:17:35.779]    __traceout=0x00000000      (Trace Disabled)
[02:17:35.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:35.779]    __FlashAddr=0x00000000
[02:17:35.779]    __FlashLen=0x00000000
[02:17:35.779]    __FlashArg=0x00000000
[02:17:35.779]    __FlashOp=0x00000000
[02:17:35.779]    __Result=0x00000000
[02:17:35.779]  </debugvars>
[02:17:35.780]  
[02:17:35.780]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:17:35.780]    <block atomic="false" info="">
[02:17:35.780]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:17:35.780]        // -> [isSWJ <= 0x00000001]
[02:17:35.780]      __var hasDormant = __protocol & 0x00020000;
[02:17:35.780]        // -> [hasDormant <= 0x00000000]
[02:17:35.781]      __var protType   = __protocol & 0x0000FFFF;
[02:17:35.781]        // -> [protType <= 0x00000002]
[02:17:35.781]    </block>
[02:17:35.781]    <control if="protType == 1" while="" timeout="0" info="">
[02:17:35.781]      // if-block "protType == 1"
[02:17:35.781]        // =>  FALSE
[02:17:35.781]      // skip if-block "protType == 1"
[02:17:35.781]    </control>
[02:17:35.781]    <control if="protType == 2" while="" timeout="0" info="">
[02:17:35.782]      // if-block "protType == 2"
[02:17:35.782]        // =>  TRUE
[02:17:35.782]      <control if="isSWJ" while="" timeout="0" info="">
[02:17:35.782]        // if-block "isSWJ"
[02:17:35.782]          // =>  TRUE
[02:17:35.782]        <control if="hasDormant" while="" timeout="0" info="">
[02:17:35.782]          // if-block "hasDormant"
[02:17:35.782]            // =>  FALSE
[02:17:35.782]          // skip if-block "hasDormant"
[02:17:35.782]        </control>
[02:17:35.783]        <control if="!hasDormant" while="" timeout="0" info="">
[02:17:35.783]          // if-block "!hasDormant"
[02:17:35.783]            // =>  TRUE
[02:17:35.783]          <block atomic="false" info="">
[02:17:35.783]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:17:35.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:35.788]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:17:35.790]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:17:35.790]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:17:35.792]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:35.792]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:17:35.793]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:17:35.793]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:17:35.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:35.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:17:35.796]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:17:35.796]          </block>
[02:17:35.796]          // end if-block "!hasDormant"
[02:17:35.796]        </control>
[02:17:35.796]        // end if-block "isSWJ"
[02:17:35.796]      </control>
[02:17:35.796]      <control if="!isSWJ" while="" timeout="0" info="">
[02:17:35.796]        // if-block "!isSWJ"
[02:17:35.796]          // =>  FALSE
[02:17:35.796]        // skip if-block "!isSWJ"
[02:17:35.796]      </control>
[02:17:35.797]      <block atomic="false" info="">
[02:17:35.797]        ReadDP(0x0);
[02:17:35.799]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:17:35.799]      </block>
[02:17:35.799]      // end if-block "protType == 2"
[02:17:35.799]    </control>
[02:17:35.799]  </sequence>
[02:17:35.799]  
[02:17:35.803]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:17:35.803]  
[02:17:35.803]  <debugvars>
[02:17:35.803]    // Pre-defined
[02:17:35.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:35.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:35.803]    __dp=0x00000000
[02:17:35.803]    __ap=0x00000000
[02:17:35.803]    __traceout=0x00000000      (Trace Disabled)
[02:17:35.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:35.803]    __FlashAddr=0x00000000
[02:17:35.803]    __FlashLen=0x00000000
[02:17:35.803]    __FlashArg=0x00000000
[02:17:35.804]    __FlashOp=0x00000000
[02:17:35.804]    __Result=0x00000000
[02:17:35.804]  </debugvars>
[02:17:35.804]  
[02:17:35.804]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:17:35.804]    <block atomic="false" info="">
[02:17:35.804]      __var SW_DP_ABORT       = 0x0;
[02:17:35.804]        // -> [SW_DP_ABORT <= 0x00000000]
[02:17:35.804]      __var DP_CTRL_STAT      = 0x4;
[02:17:35.804]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:17:35.804]      __var DP_SELECT         = 0x8;
[02:17:35.805]        // -> [DP_SELECT <= 0x00000008]
[02:17:35.805]      __var powered_down      = 0;
[02:17:35.805]        // -> [powered_down <= 0x00000000]
[02:17:35.805]      WriteDP(DP_SELECT, 0x00000000);
[02:17:35.807]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:17:35.808]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:17:35.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:17:35.809]        // -> [powered_down <= 0x00000001]
[02:17:35.809]    </block>
[02:17:35.809]    <control if="powered_down" while="" timeout="0" info="">
[02:17:35.809]      // if-block "powered_down"
[02:17:35.809]        // =>  TRUE
[02:17:35.809]      <block atomic="false" info="">
[02:17:35.810]        Message(0, "Debug/System power-up request sent");
[02:17:35.812]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:17:35.814]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:17:35.814]      </block>
[02:17:35.814]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:17:35.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:17:35.815]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:17:35.815]        // while-condition  =>  FALSE
[02:17:35.815]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:17:35.815]      </control>
[02:17:35.817]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:17:35.817]        // if-block "(__protocol & 0xFFFF) == 1"
[02:17:35.817]          // =>  FALSE
[02:17:35.817]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:17:35.817]      </control>
[02:17:35.817]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:17:35.817]        // if-block "(__protocol & 0xFFFF) == 2"
[02:17:35.817]          // =>  TRUE
[02:17:35.817]        <block atomic="false" info="">
[02:17:35.817]          Message(0, "executing SWD power up");
[02:17:35.820]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:17:35.822]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:17:35.822]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:17:35.824]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:17:35.824]        </block>
[02:17:35.825]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:17:35.825]      </control>
[02:17:35.825]      // end if-block "powered_down"
[02:17:35.825]    </control>
[02:17:35.825]    <block atomic="false" info="">
[02:17:35.825]      __var DEBUG_PORT_VAL    = 0;
[02:17:35.825]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:17:35.825]      __var ACCESS_POINT_VAL  = 0;
[02:17:35.825]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:17:35.825]      __ap = 1; 
[02:17:35.825]        // -> [__ap <= 0x00000001]
[02:17:35.825]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:17:35.831]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:17:35.831]      __ap = 4;
[02:17:35.831]        // -> [__ap <= 0x00000004]
[02:17:35.831]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:35.834]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[02:17:35.834]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[02:17:35.834]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:35.837]    </block>
[02:17:35.837]    <block atomic="false" info="">
[02:17:35.838]      __var nReset = 0x80;
[02:17:35.838]        // -> [nReset <= 0x00000080]
[02:17:35.838]      __var canReadPins = 0;
[02:17:35.838]        // -> [canReadPins <= 0x00000000]
[02:17:35.838]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:17:35.840]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:17:35.840]        // -> [canReadPins <= 0x00000001]
[02:17:35.840]    </block>
[02:17:35.841]    <control if="" while="1" timeout="200" info="">
[02:17:35.841]      // while "1"  (timeout="200")
[02:17:35.841]      // while-condition  =>  TRUE
[02:17:35.841]      // while "1"  (timeout="200")
[02:17:35.841]      // while-condition  =>  TRUE
[02:17:35.841]      // while "1"  (timeout="200")
[02:17:35.841]      // while-condition  =>  TRUE
[02:17:35.841]      // while "1"  (timeout="200")
[02:17:35.841]      // while-condition  =>  TRUE
[02:17:35.841]      // while "1"  (timeout="200")
[02:17:35.842]      // while-condition  =>  TRUE
[02:17:35.842]      // while "1"  (timeout="200")
[02:17:35.842]      // while-condition  =>  TRUE
[02:17:35.842]      // while "1"  (timeout="200")
[02:17:35.842]      // while-condition  =>  TRUE
[02:17:35.842]      // while "1"  (timeout="200")
[02:17:35.843]      // while-condition  =>  TRUE
[02:17:35.843]      // while "1"  (timeout="200")
[02:17:35.843]      // while-condition  =>  TRUE
[02:17:35.843]      // while "1"  (timeout="200")
[02:17:35.843]      // while-condition  =>  TRUE
[02:17:35.843]      // while "1"  (timeout="200")
[02:17:35.843]      // while-condition  =>  TRUE
[02:17:35.843]      // while "1"  (timeout="200")
[02:17:35.843]      // while-condition  =>  TRUE
[02:17:35.843]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.844]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.844]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.844]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.844]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.844]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.844]      // while "1"  (timeout="200")
[02:17:35.844]      // while-condition  =>  TRUE
[02:17:35.845]      // while "1"  (timeout="200")
[02:17:35.845]      // while  =>  TIMEOUT
[02:17:35.845]      // end while "1"
[02:17:35.845]    </control>
[02:17:35.845]    <control if="canReadPins" while="" timeout="0" info="">
[02:17:35.845]      // if-block "canReadPins"
[02:17:35.845]        // =>  TRUE
[02:17:35.845]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:17:35.846]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:17:35.847]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:17:35.847]        // while-condition  =>  FALSE
[02:17:35.847]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:17:35.848]      </control>
[02:17:35.848]      // end if-block "canReadPins"
[02:17:35.848]    </control>
[02:17:35.848]    <control if="!canReadPins" while="" timeout="0" info="">
[02:17:35.848]      // if-block "!canReadPins"
[02:17:35.848]        // =>  FALSE
[02:17:35.848]      // skip if-block "!canReadPins"
[02:17:35.849]    </control>
[02:17:35.849]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:17:35.849]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:35.849]        // =>  TRUE
[02:17:35.849]      <block atomic="false" info="">
[02:17:35.849]        WriteAP(0x00, 0x190008);
[02:17:35.852]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:35.852]        WriteAP(0xF0, 0x01);
[02:17:35.856]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:35.856]      </block>
[02:17:35.856]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:35.856]    </control>
[02:17:35.856]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:17:35.857]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:35.857]        // =>  FALSE
[02:17:35.857]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:35.857]    </control>
[02:17:35.857]    <block atomic="false" info="">
[02:17:35.857]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:35.862]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[02:17:35.862]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[02:17:35.862]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:35.866]      __ap = 0; //lets make sure we reset the access point selection
[02:17:35.866]        // -> [__ap <= 0x00000000]
[02:17:35.866]    </block>
[02:17:35.866]  </sequence>
[02:17:35.866]  
[02:17:35.894]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:17:35.894]  
[02:17:35.895]  <debugvars>
[02:17:35.895]    // Pre-defined
[02:17:35.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:35.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:35.895]    __dp=0x00000000
[02:17:35.895]    __ap=0x00000000
[02:17:35.895]    __traceout=0x00000000      (Trace Disabled)
[02:17:35.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:35.896]    __FlashAddr=0x00000000
[02:17:35.896]    __FlashLen=0x00000000
[02:17:35.896]    __FlashArg=0x00000000
[02:17:35.896]    __FlashOp=0x00000000
[02:17:35.896]    __Result=0x00000000
[02:17:35.896]  </debugvars>
[02:17:35.896]  
[02:17:35.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:17:35.896]    <block atomic="false" info="">
[02:17:35.897]      __var deviceID = 0;
[02:17:35.898]        // -> [deviceID <= 0x00000000]
[02:17:35.898]      __var version = 0;
[02:17:35.898]        // -> [version <= 0x00000000]
[02:17:35.898]      __var partNum = 0;
[02:17:35.898]        // -> [partNum <= 0x00000000]
[02:17:35.898]      __var manuf = 0;
[02:17:35.898]        // -> [manuf <= 0x00000000]
[02:17:35.898]      __var isMSPM0G1X0X_G3X0X = 0;
[02:17:35.898]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:17:35.898]      __var isProduction = 0;
[02:17:35.898]        // -> [isProduction <= 0x00000000]
[02:17:35.899]      __var continueId = 0;
[02:17:35.899]        // -> [continueId <= 0x00000000]
[02:17:35.899]      deviceID =   Read32(0x41C40004);
[02:17:35.904]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:17:35.904]        // -> [deviceID <= 0x2BB8802F]
[02:17:35.904]      version = deviceID >> 28;
[02:17:35.904]        // -> [version <= 0x00000002]
[02:17:35.904]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:17:35.904]        // -> [partNum <= 0x0000BB88]
[02:17:35.905]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:17:35.905]        // -> [manuf <= 0x00000017]
[02:17:35.905]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:17:35.905]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:17:35.905]      isProduction = (version > 0);
[02:17:35.905]        // -> [isProduction <= 0x00000001]
[02:17:35.905]    </block>
[02:17:35.905]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:17:35.905]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:17:35.905]        // =>  FALSE
[02:17:35.905]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:17:35.905]    </control>
[02:17:35.906]    <control if="continueId == 4" while="" timeout="0" info="">
[02:17:35.906]      // if-block "continueId == 4"
[02:17:35.906]        // =>  FALSE
[02:17:35.906]      // skip if-block "continueId == 4"
[02:17:35.906]    </control>
[02:17:35.906]    <control if="!isProduction" while="" timeout="0" info="">
[02:17:35.906]      // if-block "!isProduction"
[02:17:35.906]        // =>  FALSE
[02:17:35.906]      // skip if-block "!isProduction"
[02:17:35.907]    </control>
[02:17:35.907]  </sequence>
[02:17:35.907]  
[02:17:41.906]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:17:41.906]  
[02:17:41.916]  <debugvars>
[02:17:41.916]    // Pre-defined
[02:17:41.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:41.916]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:17:41.916]    __dp=0x00000000
[02:17:41.916]    __ap=0x00000000
[02:17:41.916]    __traceout=0x00000000      (Trace Disabled)
[02:17:41.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:41.916]    __FlashAddr=0x00000000
[02:17:41.917]    __FlashLen=0x00000000
[02:17:41.917]    __FlashArg=0x00000000
[02:17:41.917]    __FlashOp=0x00000000
[02:17:41.917]    __Result=0x00000000
[02:17:41.917]  </debugvars>
[02:17:41.917]  
[02:17:41.917]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:17:41.917]    <block atomic="false" info="">
[02:17:41.918]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:17:41.918]        // -> [isSWJ <= 0x00000001]
[02:17:41.918]      __var hasDormant = __protocol & 0x00020000;
[02:17:41.918]        // -> [hasDormant <= 0x00000000]
[02:17:41.918]      __var protType   = __protocol & 0x0000FFFF;
[02:17:41.918]        // -> [protType <= 0x00000002]
[02:17:41.919]    </block>
[02:17:41.919]    <control if="protType == 1" while="" timeout="0" info="">
[02:17:41.919]      // if-block "protType == 1"
[02:17:41.919]        // =>  FALSE
[02:17:41.919]      // skip if-block "protType == 1"
[02:17:41.919]    </control>
[02:17:41.919]    <control if="protType == 2" while="" timeout="0" info="">
[02:17:41.919]      // if-block "protType == 2"
[02:17:41.919]        // =>  TRUE
[02:17:41.920]      <control if="isSWJ" while="" timeout="0" info="">
[02:17:41.920]        // if-block "isSWJ"
[02:17:41.920]          // =>  TRUE
[02:17:41.920]        <control if="hasDormant" while="" timeout="0" info="">
[02:17:41.920]          // if-block "hasDormant"
[02:17:41.920]            // =>  FALSE
[02:17:41.920]          // skip if-block "hasDormant"
[02:17:41.920]        </control>
[02:17:41.920]        <control if="!hasDormant" while="" timeout="0" info="">
[02:17:41.920]          // if-block "!hasDormant"
[02:17:41.921]            // =>  TRUE
[02:17:41.921]          <block atomic="false" info="">
[02:17:41.921]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:17:41.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:41.922]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:17:41.924]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:17:41.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:17:41.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:41.927]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:17:41.928]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:17:41.928]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:17:41.933]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:41.933]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:17:41.935]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:17:41.935]          </block>
[02:17:41.935]          // end if-block "!hasDormant"
[02:17:41.935]        </control>
[02:17:41.935]        // end if-block "isSWJ"
[02:17:41.935]      </control>
[02:17:41.935]      <control if="!isSWJ" while="" timeout="0" info="">
[02:17:41.935]        // if-block "!isSWJ"
[02:17:41.935]          // =>  FALSE
[02:17:41.935]        // skip if-block "!isSWJ"
[02:17:41.935]      </control>
[02:17:41.935]      <block atomic="false" info="">
[02:17:41.935]        ReadDP(0x0);
[02:17:41.937]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:17:41.937]      </block>
[02:17:41.937]      // end if-block "protType == 2"
[02:17:41.937]    </control>
[02:17:41.937]  </sequence>
[02:17:41.937]  
[02:17:41.940]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:17:41.940]  
[02:17:41.940]  <debugvars>
[02:17:41.940]    // Pre-defined
[02:17:41.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:41.940]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:17:41.940]    __dp=0x00000000
[02:17:41.941]    __ap=0x00000000
[02:17:41.941]    __traceout=0x00000000      (Trace Disabled)
[02:17:41.941]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:41.941]    __FlashAddr=0x00000000
[02:17:41.941]    __FlashLen=0x00000000
[02:17:41.941]    __FlashArg=0x00000000
[02:17:41.941]    __FlashOp=0x00000000
[02:17:41.941]    __Result=0x00000000
[02:17:41.942]  </debugvars>
[02:17:41.942]  
[02:17:41.942]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:17:41.942]    <block atomic="false" info="">
[02:17:41.942]      __var SW_DP_ABORT       = 0x0;
[02:17:41.942]        // -> [SW_DP_ABORT <= 0x00000000]
[02:17:41.943]      __var DP_CTRL_STAT      = 0x4;
[02:17:41.943]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:17:41.943]      __var DP_SELECT         = 0x8;
[02:17:41.943]        // -> [DP_SELECT <= 0x00000008]
[02:17:41.943]      __var powered_down      = 0;
[02:17:41.943]        // -> [powered_down <= 0x00000000]
[02:17:41.943]      WriteDP(DP_SELECT, 0x00000000);
[02:17:41.945]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:17:41.945]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:17:41.946]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:17:41.947]        // -> [powered_down <= 0x00000001]
[02:17:41.947]    </block>
[02:17:41.947]    <control if="powered_down" while="" timeout="0" info="">
[02:17:41.947]      // if-block "powered_down"
[02:17:41.947]        // =>  TRUE
[02:17:41.947]      <block atomic="false" info="">
[02:17:41.947]        Message(0, "Debug/System power-up request sent");
[02:17:41.950]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:17:41.952]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:17:41.952]      </block>
[02:17:41.952]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:17:41.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:17:41.954]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:17:41.954]        // while-condition  =>  FALSE
[02:17:41.954]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:17:41.955]      </control>
[02:17:41.955]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:17:41.955]        // if-block "(__protocol & 0xFFFF) == 1"
[02:17:41.955]          // =>  FALSE
[02:17:41.955]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:17:41.955]      </control>
[02:17:41.955]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:17:41.956]        // if-block "(__protocol & 0xFFFF) == 2"
[02:17:41.956]          // =>  TRUE
[02:17:41.956]        <block atomic="false" info="">
[02:17:41.956]          Message(0, "executing SWD power up");
[02:17:41.958]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:17:41.964]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:17:41.964]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:17:41.966]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:17:41.966]        </block>
[02:17:41.966]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:17:41.966]      </control>
[02:17:41.966]      // end if-block "powered_down"
[02:17:41.966]    </control>
[02:17:41.967]    <block atomic="false" info="">
[02:17:41.967]      __var DEBUG_PORT_VAL    = 0;
[02:17:41.967]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:17:41.967]      __var ACCESS_POINT_VAL  = 0;
[02:17:41.967]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:17:41.967]      __ap = 1; 
[02:17:41.967]        // -> [__ap <= 0x00000001]
[02:17:41.967]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:17:41.973]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:17:41.973]      __ap = 4;
[02:17:41.973]        // -> [__ap <= 0x00000004]
[02:17:41.973]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:41.976]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.977]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:17:41.977]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:41.979]    </block>
[02:17:41.980]    <block atomic="false" info="">
[02:17:41.980]      __var nReset = 0x80;
[02:17:41.980]        // -> [nReset <= 0x00000080]
[02:17:41.980]      __var canReadPins = 0;
[02:17:41.980]        // -> [canReadPins <= 0x00000000]
[02:17:41.980]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:17:41.982]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:17:41.982]        // -> [canReadPins <= 0x00000001]
[02:17:41.982]    </block>
[02:17:41.982]    <control if="" while="1" timeout="200" info="">
[02:17:41.982]      // while "1"  (timeout="200")
[02:17:41.982]      // while-condition  =>  TRUE
[02:17:41.982]      // while "1"  (timeout="200")
[02:17:41.982]      // while-condition  =>  TRUE
[02:17:41.983]      // while "1"  (timeout="200")
[02:17:41.983]      // while-condition  =>  TRUE
[02:17:41.983]      // while "1"  (timeout="200")
[02:17:41.983]      // while-condition  =>  TRUE
[02:17:41.983]      // while "1"  (timeout="200")
[02:17:41.983]      // while-condition  =>  TRUE
[02:17:41.983]      // while "1"  (timeout="200")
[02:17:41.983]      // while-condition  =>  TRUE
[02:17:41.983]      // while "1"  (timeout="200")
[02:17:41.984]      // while-condition  =>  TRUE
[02:17:41.984]      // while "1"  (timeout="200")
[02:17:41.984]      // while-condition  =>  TRUE
[02:17:41.984]      // while "1"  (timeout="200")
[02:17:41.984]      // while-condition  =>  TRUE
[02:17:41.984]      // while "1"  (timeout="200")
[02:17:41.984]      // while-condition  =>  TRUE
[02:17:41.984]      // while "1"  (timeout="200")
[02:17:41.985]      // while-condition  =>  TRUE
[02:17:41.985]      // while "1"  (timeout="200")
[02:17:41.985]      // while  =>  TIMEOUT
[02:17:41.985]      // end while "1"
[02:17:41.985]    </control>
[02:17:41.985]    <control if="canReadPins" while="" timeout="0" info="">
[02:17:41.985]      // if-block "canReadPins"
[02:17:41.985]        // =>  TRUE
[02:17:41.985]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:17:41.985]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:17:41.992]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:17:41.992]        // while-condition  =>  FALSE
[02:17:41.992]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:17:41.992]      </control>
[02:17:41.992]      // end if-block "canReadPins"
[02:17:41.992]    </control>
[02:17:41.992]    <control if="!canReadPins" while="" timeout="0" info="">
[02:17:41.993]      // if-block "!canReadPins"
[02:17:41.993]        // =>  FALSE
[02:17:41.993]      // skip if-block "!canReadPins"
[02:17:41.993]    </control>
[02:17:41.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:17:41.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:41.993]        // =>  TRUE
[02:17:41.993]      <block atomic="false" info="">
[02:17:41.993]        WriteAP(0x00, 0x190008);
[02:17:41.995]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.995]        WriteAP(0xF0, 0x01);
[02:17:41.999]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.999]      </block>
[02:17:41.999]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:41.999]    </control>
[02:17:41.999]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:17:41.999]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:41.999]        // =>  FALSE
[02:17:42.000]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:42.000]    </control>
[02:17:42.000]    <block atomic="false" info="">
[02:17:42.000]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:42.005]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:17:42.005]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:17:42.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:42.008]      __ap = 0; //lets make sure we reset the access point selection
[02:17:42.008]        // -> [__ap <= 0x00000000]
[02:17:42.008]    </block>
[02:17:42.008]  </sequence>
[02:17:42.008]  
[02:17:42.036]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:17:42.036]  
[02:17:42.036]  <debugvars>
[02:17:42.036]    // Pre-defined
[02:17:42.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:42.036]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:17:42.037]    __dp=0x00000000
[02:17:42.037]    __ap=0x00000000
[02:17:42.037]    __traceout=0x00000000      (Trace Disabled)
[02:17:42.037]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:42.037]    __FlashAddr=0x00000000
[02:17:42.037]    __FlashLen=0x00000000
[02:17:42.037]    __FlashArg=0x00000000
[02:17:42.037]    __FlashOp=0x00000000
[02:17:42.037]    __Result=0x00000000
[02:17:42.037]  </debugvars>
[02:17:42.038]  
[02:17:42.038]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:17:42.038]    <block atomic="false" info="">
[02:17:42.038]      __var deviceID = 0;
[02:17:42.038]        // -> [deviceID <= 0x00000000]
[02:17:42.038]      __var version = 0;
[02:17:42.038]        // -> [version <= 0x00000000]
[02:17:42.038]      __var partNum = 0;
[02:17:42.039]        // -> [partNum <= 0x00000000]
[02:17:42.039]      __var manuf = 0;
[02:17:42.039]        // -> [manuf <= 0x00000000]
[02:17:42.039]      __var isMSPM0G1X0X_G3X0X = 0;
[02:17:42.039]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:17:42.039]      __var isProduction = 0;
[02:17:42.039]        // -> [isProduction <= 0x00000000]
[02:17:42.041]      __var continueId = 0;
[02:17:42.041]        // -> [continueId <= 0x00000000]
[02:17:42.041]      deviceID =   Read32(0x41C40004);
[02:17:42.047]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:17:42.047]        // -> [deviceID <= 0x2BB8802F]
[02:17:42.047]      version = deviceID >> 28;
[02:17:42.047]        // -> [version <= 0x00000002]
[02:17:42.047]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:17:42.048]        // -> [partNum <= 0x0000BB88]
[02:17:42.048]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:17:42.048]        // -> [manuf <= 0x00000017]
[02:17:42.048]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:17:42.048]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:17:42.048]      isProduction = (version > 0);
[02:17:42.048]        // -> [isProduction <= 0x00000001]
[02:17:42.048]    </block>
[02:17:42.048]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:17:42.048]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:17:42.048]        // =>  FALSE
[02:17:42.049]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:17:42.049]    </control>
[02:17:42.049]    <control if="continueId == 4" while="" timeout="0" info="">
[02:17:42.049]      // if-block "continueId == 4"
[02:17:42.049]        // =>  FALSE
[02:17:42.049]      // skip if-block "continueId == 4"
[02:17:42.049]    </control>
[02:17:42.049]    <control if="!isProduction" while="" timeout="0" info="">
[02:17:42.049]      // if-block "!isProduction"
[02:17:42.050]        // =>  FALSE
[02:17:42.050]      // skip if-block "!isProduction"
[02:17:42.050]    </control>
[02:17:42.050]  </sequence>
[02:17:42.050]  
[02:19:23.794]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:19:23.794]  
[02:19:23.794]  <debugvars>
[02:19:23.794]    // Pre-defined
[02:19:23.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:23.794]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:23.794]    __dp=0x00000000
[02:19:23.794]    __ap=0x00000000
[02:19:23.795]    __traceout=0x00000000      (Trace Disabled)
[02:19:23.795]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:23.795]    __FlashAddr=0x00000000
[02:19:23.795]    __FlashLen=0x00000000
[02:19:23.795]    __FlashArg=0x00000000
[02:19:23.795]    __FlashOp=0x00000000
[02:19:23.795]    __Result=0x00000000
[02:19:23.795]  </debugvars>
[02:19:23.795]  
[02:19:23.795]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:19:23.795]    <block atomic="false" info="">
[02:19:23.796]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:19:23.796]        // -> [isSWJ <= 0x00000001]
[02:19:23.796]      __var hasDormant = __protocol & 0x00020000;
[02:19:23.796]        // -> [hasDormant <= 0x00000000]
[02:19:23.796]      __var protType   = __protocol & 0x0000FFFF;
[02:19:23.796]        // -> [protType <= 0x00000002]
[02:19:23.796]    </block>
[02:19:23.796]    <control if="protType == 1" while="" timeout="0" info="">
[02:19:23.796]      // if-block "protType == 1"
[02:19:23.796]        // =>  FALSE
[02:19:23.796]      // skip if-block "protType == 1"
[02:19:23.796]    </control>
[02:19:23.797]    <control if="protType == 2" while="" timeout="0" info="">
[02:19:23.797]      // if-block "protType == 2"
[02:19:23.797]        // =>  TRUE
[02:19:23.797]      <control if="isSWJ" while="" timeout="0" info="">
[02:19:23.797]        // if-block "isSWJ"
[02:19:23.797]          // =>  TRUE
[02:19:23.797]        <control if="hasDormant" while="" timeout="0" info="">
[02:19:23.798]          // if-block "hasDormant"
[02:19:23.798]            // =>  FALSE
[02:19:23.798]          // skip if-block "hasDormant"
[02:19:23.798]        </control>
[02:19:23.798]        <control if="!hasDormant" while="" timeout="0" info="">
[02:19:23.798]          // if-block "!hasDormant"
[02:19:23.798]            // =>  TRUE
[02:19:23.798]          <block atomic="false" info="">
[02:19:23.798]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:19:23.800]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:23.800]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:19:23.802]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:19:23.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:19:23.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:23.805]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:19:23.809]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:19:23.809]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:19:23.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:23.811]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:19:23.812]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:19:23.812]          </block>
[02:19:23.812]          // end if-block "!hasDormant"
[02:19:23.812]        </control>
[02:19:23.812]        // end if-block "isSWJ"
[02:19:23.812]      </control>
[02:19:23.812]      <control if="!isSWJ" while="" timeout="0" info="">
[02:19:23.813]        // if-block "!isSWJ"
[02:19:23.813]          // =>  FALSE
[02:19:23.813]        // skip if-block "!isSWJ"
[02:19:23.813]      </control>
[02:19:23.813]      <block atomic="false" info="">
[02:19:23.813]        ReadDP(0x0);
[02:19:23.815]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:19:23.815]      </block>
[02:19:23.815]      // end if-block "protType == 2"
[02:19:23.815]    </control>
[02:19:23.815]  </sequence>
[02:19:23.815]  
[02:19:23.818]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:19:23.818]  
[02:19:23.818]  <debugvars>
[02:19:23.818]    // Pre-defined
[02:19:23.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:23.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:23.818]    __dp=0x00000000
[02:19:23.818]    __ap=0x00000000
[02:19:23.818]    __traceout=0x00000000      (Trace Disabled)
[02:19:23.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:23.818]    __FlashAddr=0x00000000
[02:19:23.818]    __FlashLen=0x00000000
[02:19:23.818]    __FlashArg=0x00000000
[02:19:23.818]    __FlashOp=0x00000000
[02:19:23.819]    __Result=0x00000000
[02:19:23.819]  </debugvars>
[02:19:23.819]  
[02:19:23.819]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:19:23.819]    <block atomic="false" info="">
[02:19:23.819]      __var SW_DP_ABORT       = 0x0;
[02:19:23.819]        // -> [SW_DP_ABORT <= 0x00000000]
[02:19:23.819]      __var DP_CTRL_STAT      = 0x4;
[02:19:23.820]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:19:23.820]      __var DP_SELECT         = 0x8;
[02:19:23.820]        // -> [DP_SELECT <= 0x00000008]
[02:19:23.820]      __var powered_down      = 0;
[02:19:23.820]        // -> [powered_down <= 0x00000000]
[02:19:23.820]      WriteDP(DP_SELECT, 0x00000000);
[02:19:23.823]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:19:23.823]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:19:23.824]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:19:23.824]        // -> [powered_down <= 0x00000001]
[02:19:23.824]    </block>
[02:19:23.825]    <control if="powered_down" while="" timeout="0" info="">
[02:19:23.825]      // if-block "powered_down"
[02:19:23.825]        // =>  TRUE
[02:19:23.825]      <block atomic="false" info="">
[02:19:23.825]        Message(0, "Debug/System power-up request sent");
[02:19:23.827]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:19:23.830]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:19:23.830]      </block>
[02:19:23.830]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:19:23.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:19:23.832]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:19:23.832]        // while-condition  =>  FALSE
[02:19:23.832]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:19:23.832]      </control>
[02:19:23.832]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:19:23.832]        // if-block "(__protocol & 0xFFFF) == 1"
[02:19:23.832]          // =>  FALSE
[02:19:23.832]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:19:23.832]      </control>
[02:19:23.833]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:19:23.833]        // if-block "(__protocol & 0xFFFF) == 2"
[02:19:23.833]          // =>  TRUE
[02:19:23.833]        <block atomic="false" info="">
[02:19:23.833]          Message(0, "executing SWD power up");
[02:19:23.835]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:19:23.837]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:19:23.837]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:19:23.838]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:19:23.838]        </block>
[02:19:23.839]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:19:23.839]      </control>
[02:19:23.839]      // end if-block "powered_down"
[02:19:23.840]    </control>
[02:19:23.840]    <block atomic="false" info="">
[02:19:23.840]      __var DEBUG_PORT_VAL    = 0;
[02:19:23.840]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:19:23.840]      __var ACCESS_POINT_VAL  = 0;
[02:19:23.840]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:19:23.840]      __ap = 1; 
[02:19:23.840]        // -> [__ap <= 0x00000001]
[02:19:23.840]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:19:23.843]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:19:23.843]      __ap = 4;
[02:19:23.843]        // -> [__ap <= 0x00000004]
[02:19:23.843]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:23.846]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:19:23.846]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:19:23.847]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:23.849]    </block>
[02:19:23.849]    <block atomic="false" info="">
[02:19:23.849]      __var nReset = 0x80;
[02:19:23.849]        // -> [nReset <= 0x00000080]
[02:19:23.849]      __var canReadPins = 0;
[02:19:23.849]        // -> [canReadPins <= 0x00000000]
[02:19:23.850]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:19:23.851]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:19:23.851]        // -> [canReadPins <= 0x00000001]
[02:19:23.851]    </block>
[02:19:23.851]    <control if="" while="1" timeout="200" info="">
[02:19:23.851]      // while "1"  (timeout="200")
[02:19:23.852]      // while-condition  =>  TRUE
[02:19:23.852]      // while "1"  (timeout="200")
[02:19:23.852]      // while-condition  =>  TRUE
[02:19:23.852]      // while "1"  (timeout="200")
[02:19:23.852]      // while-condition  =>  TRUE
[02:19:23.852]      // while "1"  (timeout="200")
[02:19:23.852]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.853]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.853]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.853]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.853]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.853]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.853]      // while-condition  =>  TRUE
[02:19:23.853]      // while "1"  (timeout="200")
[02:19:23.854]      // while-condition  =>  TRUE
[02:19:23.854]      // while "1"  (timeout="200")
[02:19:23.854]      // while-condition  =>  TRUE
[02:19:23.854]      // while "1"  (timeout="200")
[02:19:23.854]      // while-condition  =>  TRUE
[02:19:23.854]      // while "1"  (timeout="200")
[02:19:23.854]      // while-condition  =>  TRUE
[02:19:23.854]      // while "1"  (timeout="200")
[02:19:23.854]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.856]      // while "1"  (timeout="200")
[02:19:23.856]      // while-condition  =>  TRUE
[02:19:23.857]      // while "1"  (timeout="200")
[02:19:23.857]      // while-condition  =>  TRUE
[02:19:23.857]      // while "1"  (timeout="200")
[02:19:23.857]      // while-condition  =>  TRUE
[02:19:23.857]      // while "1"  (timeout="200")
[02:19:23.857]      // while-condition  =>  TRUE
[02:19:23.857]      // while "1"  (timeout="200")
[02:19:23.857]      // while-condition  =>  TRUE
[02:19:23.857]      // while "1"  (timeout="200")
[02:19:23.857]      // while-condition  =>  TRUE
[02:19:23.857]      // while "1"  (timeout="200")
[02:19:23.857]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.858]      // while-condition  =>  TRUE
[02:19:23.858]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.860]      // while "1"  (timeout="200")
[02:19:23.860]      // while-condition  =>  TRUE
[02:19:23.861]      // while "1"  (timeout="200")
[02:19:23.861]      // while  =>  TIMEOUT
[02:19:23.861]      // end while "1"
[02:19:23.861]    </control>
[02:19:23.861]    <control if="canReadPins" while="" timeout="0" info="">
[02:19:23.861]      // if-block "canReadPins"
[02:19:23.861]        // =>  TRUE
[02:19:23.861]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:19:23.862]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:19:23.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:19:23.864]        // while-condition  =>  FALSE
[02:19:23.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:19:23.864]      </control>
[02:19:23.864]      // end if-block "canReadPins"
[02:19:23.864]    </control>
[02:19:23.865]    <control if="!canReadPins" while="" timeout="0" info="">
[02:19:23.865]      // if-block "!canReadPins"
[02:19:23.865]        // =>  FALSE
[02:19:23.865]      // skip if-block "!canReadPins"
[02:19:23.865]    </control>
[02:19:23.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:19:23.865]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:23.865]        // =>  TRUE
[02:19:23.865]      <block atomic="false" info="">
[02:19:23.865]        WriteAP(0x00, 0x190008);
[02:19:23.867]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:23.867]        WriteAP(0xF0, 0x01);
[02:19:23.871]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:23.871]      </block>
[02:19:23.871]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:23.871]    </control>
[02:19:23.871]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:19:23.871]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:23.871]        // =>  FALSE
[02:19:23.871]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:23.871]    </control>
[02:19:23.872]    <block atomic="false" info="">
[02:19:23.872]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:23.875]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:19:23.875]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:19:23.875]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:23.877]      __ap = 0; //lets make sure we reset the access point selection
[02:19:23.878]        // -> [__ap <= 0x00000000]
[02:19:23.878]    </block>
[02:19:23.878]  </sequence>
[02:19:23.878]  
[02:19:23.897]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:19:23.897]  
[02:19:23.897]  <debugvars>
[02:19:23.898]    // Pre-defined
[02:19:23.898]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:23.898]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:23.898]    __dp=0x00000000
[02:19:23.898]    __ap=0x00000000
[02:19:23.898]    __traceout=0x00000000      (Trace Disabled)
[02:19:23.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:23.899]    __FlashAddr=0x00000000
[02:19:23.899]    __FlashLen=0x00000000
[02:19:23.899]    __FlashArg=0x00000000
[02:19:23.899]    __FlashOp=0x00000000
[02:19:23.899]    __Result=0x00000000
[02:19:23.899]  </debugvars>
[02:19:23.899]  
[02:19:23.900]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:19:23.900]    <block atomic="false" info="">
[02:19:23.900]      __var deviceID = 0;
[02:19:23.900]        // -> [deviceID <= 0x00000000]
[02:19:23.900]      __var version = 0;
[02:19:23.900]        // -> [version <= 0x00000000]
[02:19:23.900]      __var partNum = 0;
[02:19:23.900]        // -> [partNum <= 0x00000000]
[02:19:23.900]      __var manuf = 0;
[02:19:23.900]        // -> [manuf <= 0x00000000]
[02:19:23.900]      __var isMSPM0G1X0X_G3X0X = 0;
[02:19:23.902]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:19:23.902]      __var isProduction = 0;
[02:19:23.902]        // -> [isProduction <= 0x00000000]
[02:19:23.902]      __var continueId = 0;
[02:19:23.902]        // -> [continueId <= 0x00000000]
[02:19:23.902]      deviceID =   Read32(0x41C40004);
[02:19:23.907]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:19:23.907]        // -> [deviceID <= 0x2BB8802F]
[02:19:23.907]      version = deviceID >> 28;
[02:19:23.908]        // -> [version <= 0x00000002]
[02:19:23.908]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:19:23.908]        // -> [partNum <= 0x0000BB88]
[02:19:23.908]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:19:23.908]        // -> [manuf <= 0x00000017]
[02:19:23.908]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:19:23.908]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:19:23.908]      isProduction = (version > 0);
[02:19:23.908]        // -> [isProduction <= 0x00000001]
[02:19:23.909]    </block>
[02:19:23.909]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:19:23.909]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:19:23.909]        // =>  FALSE
[02:19:23.909]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:19:23.909]    </control>
[02:19:23.909]    <control if="continueId == 4" while="" timeout="0" info="">
[02:19:23.909]      // if-block "continueId == 4"
[02:19:23.909]        // =>  FALSE
[02:19:23.909]      // skip if-block "continueId == 4"
[02:19:23.909]    </control>
[02:19:23.909]    <control if="!isProduction" while="" timeout="0" info="">
[02:19:23.910]      // if-block "!isProduction"
[02:19:23.910]        // =>  FALSE
[02:19:23.910]      // skip if-block "!isProduction"
[02:19:23.910]    </control>
[02:19:23.910]  </sequence>
[02:19:23.910]  
[02:19:29.551]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:19:29.551]  
[02:19:29.560]  <debugvars>
[02:19:29.560]    // Pre-defined
[02:19:29.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:29.560]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:19:29.560]    __dp=0x00000000
[02:19:29.560]    __ap=0x00000000
[02:19:29.560]    __traceout=0x00000000      (Trace Disabled)
[02:19:29.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:29.560]    __FlashAddr=0x00000000
[02:19:29.561]    __FlashLen=0x00000000
[02:19:29.561]    __FlashArg=0x00000000
[02:19:29.561]    __FlashOp=0x00000000
[02:19:29.561]    __Result=0x00000000
[02:19:29.561]  </debugvars>
[02:19:29.561]  
[02:19:29.561]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:19:29.562]    <block atomic="false" info="">
[02:19:29.562]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:19:29.562]        // -> [isSWJ <= 0x00000001]
[02:19:29.562]      __var hasDormant = __protocol & 0x00020000;
[02:19:29.562]        // -> [hasDormant <= 0x00000000]
[02:19:29.562]      __var protType   = __protocol & 0x0000FFFF;
[02:19:29.562]        // -> [protType <= 0x00000002]
[02:19:29.562]    </block>
[02:19:29.562]    <control if="protType == 1" while="" timeout="0" info="">
[02:19:29.563]      // if-block "protType == 1"
[02:19:29.563]        // =>  FALSE
[02:19:29.563]      // skip if-block "protType == 1"
[02:19:29.563]    </control>
[02:19:29.563]    <control if="protType == 2" while="" timeout="0" info="">
[02:19:29.563]      // if-block "protType == 2"
[02:19:29.563]        // =>  TRUE
[02:19:29.563]      <control if="isSWJ" while="" timeout="0" info="">
[02:19:29.563]        // if-block "isSWJ"
[02:19:29.563]          // =>  TRUE
[02:19:29.564]        <control if="hasDormant" while="" timeout="0" info="">
[02:19:29.564]          // if-block "hasDormant"
[02:19:29.564]            // =>  FALSE
[02:19:29.564]          // skip if-block "hasDormant"
[02:19:29.564]        </control>
[02:19:29.564]        <control if="!hasDormant" while="" timeout="0" info="">
[02:19:29.564]          // if-block "!hasDormant"
[02:19:29.564]            // =>  TRUE
[02:19:29.564]          <block atomic="false" info="">
[02:19:29.565]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:19:29.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:29.566]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:19:29.568]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:19:29.568]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:19:29.569]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:29.569]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:19:29.571]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:19:29.571]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:19:29.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:29.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:19:29.574]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:19:29.574]          </block>
[02:19:29.574]          // end if-block "!hasDormant"
[02:19:29.574]        </control>
[02:19:29.575]        // end if-block "isSWJ"
[02:19:29.575]      </control>
[02:19:29.575]      <control if="!isSWJ" while="" timeout="0" info="">
[02:19:29.575]        // if-block "!isSWJ"
[02:19:29.575]          // =>  FALSE
[02:19:29.575]        // skip if-block "!isSWJ"
[02:19:29.575]      </control>
[02:19:29.575]      <block atomic="false" info="">
[02:19:29.575]        ReadDP(0x0);
[02:19:29.577]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:19:29.577]      </block>
[02:19:29.577]      // end if-block "protType == 2"
[02:19:29.577]    </control>
[02:19:29.577]  </sequence>
[02:19:29.577]  
[02:19:29.580]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:19:29.580]  
[02:19:29.580]  <debugvars>
[02:19:29.580]    // Pre-defined
[02:19:29.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:29.580]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:19:29.580]    __dp=0x00000000
[02:19:29.580]    __ap=0x00000000
[02:19:29.580]    __traceout=0x00000000      (Trace Disabled)
[02:19:29.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:29.581]    __FlashAddr=0x00000000
[02:19:29.581]    __FlashLen=0x00000000
[02:19:29.581]    __FlashArg=0x00000000
[02:19:29.581]    __FlashOp=0x00000000
[02:19:29.581]    __Result=0x00000000
[02:19:29.581]  </debugvars>
[02:19:29.581]  
[02:19:29.581]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:19:29.582]    <block atomic="false" info="">
[02:19:29.582]      __var SW_DP_ABORT       = 0x0;
[02:19:29.582]        // -> [SW_DP_ABORT <= 0x00000000]
[02:19:29.582]      __var DP_CTRL_STAT      = 0x4;
[02:19:29.582]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:19:29.582]      __var DP_SELECT         = 0x8;
[02:19:29.582]        // -> [DP_SELECT <= 0x00000008]
[02:19:29.582]      __var powered_down      = 0;
[02:19:29.583]        // -> [powered_down <= 0x00000000]
[02:19:29.583]      WriteDP(DP_SELECT, 0x00000000);
[02:19:29.586]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:19:29.586]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:19:29.588]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:19:29.588]        // -> [powered_down <= 0x00000001]
[02:19:29.588]    </block>
[02:19:29.588]    <control if="powered_down" while="" timeout="0" info="">
[02:19:29.588]      // if-block "powered_down"
[02:19:29.588]        // =>  TRUE
[02:19:29.588]      <block atomic="false" info="">
[02:19:29.588]        Message(0, "Debug/System power-up request sent");
[02:19:29.591]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:19:29.595]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:19:29.595]      </block>
[02:19:29.595]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:19:29.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:19:29.597]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:19:29.597]        // while-condition  =>  FALSE
[02:19:29.597]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:19:29.597]      </control>
[02:19:29.597]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:19:29.598]        // if-block "(__protocol & 0xFFFF) == 1"
[02:19:29.598]          // =>  FALSE
[02:19:29.598]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:19:29.598]      </control>
[02:19:29.598]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:19:29.598]        // if-block "(__protocol & 0xFFFF) == 2"
[02:19:29.598]          // =>  TRUE
[02:19:29.598]        <block atomic="false" info="">
[02:19:29.598]          Message(0, "executing SWD power up");
[02:19:29.601]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:19:29.603]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:19:29.603]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:19:29.605]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:19:29.605]        </block>
[02:19:29.605]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:19:29.605]      </control>
[02:19:29.605]      // end if-block "powered_down"
[02:19:29.605]    </control>
[02:19:29.605]    <block atomic="false" info="">
[02:19:29.606]      __var DEBUG_PORT_VAL    = 0;
[02:19:29.606]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:19:29.606]      __var ACCESS_POINT_VAL  = 0;
[02:19:29.606]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:19:29.606]      __ap = 1; 
[02:19:29.606]        // -> [__ap <= 0x00000001]
[02:19:29.606]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:19:29.613]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:19:29.613]      __ap = 4;
[02:19:29.613]        // -> [__ap <= 0x00000004]
[02:19:29.613]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:29.621]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:19:29.621]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:19:29.621]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:29.623]    </block>
[02:19:29.623]    <block atomic="false" info="">
[02:19:29.623]      __var nReset = 0x80;
[02:19:29.623]        // -> [nReset <= 0x00000080]
[02:19:29.624]      __var canReadPins = 0;
[02:19:29.624]        // -> [canReadPins <= 0x00000000]
[02:19:29.624]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:19:29.625]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:19:29.625]        // -> [canReadPins <= 0x00000001]
[02:19:29.625]    </block>
[02:19:29.626]    <control if="" while="1" timeout="200" info="">
[02:19:29.626]      // while "1"  (timeout="200")
[02:19:29.626]      // while-condition  =>  TRUE
[02:19:29.626]      // while "1"  (timeout="200")
[02:19:29.626]      // while-condition  =>  TRUE
[02:19:29.626]      // while "1"  (timeout="200")
[02:19:29.626]      // while-condition  =>  TRUE
[02:19:29.626]      // while "1"  (timeout="200")
[02:19:29.626]      // while-condition  =>  TRUE
[02:19:29.626]      // while "1"  (timeout="200")
[02:19:29.627]      // while-condition  =>  TRUE
[02:19:29.627]      // while "1"  (timeout="200")
[02:19:29.627]      // while  =>  TIMEOUT
[02:19:29.627]      // end while "1"
[02:19:29.627]    </control>
[02:19:29.627]    <control if="canReadPins" while="" timeout="0" info="">
[02:19:29.627]      // if-block "canReadPins"
[02:19:29.627]        // =>  TRUE
[02:19:29.627]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:19:29.628]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:19:29.629]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:19:29.629]        // while-condition  =>  FALSE
[02:19:29.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:19:29.630]      </control>
[02:19:29.630]      // end if-block "canReadPins"
[02:19:29.630]    </control>
[02:19:29.630]    <control if="!canReadPins" while="" timeout="0" info="">
[02:19:29.630]      // if-block "!canReadPins"
[02:19:29.630]        // =>  FALSE
[02:19:29.630]      // skip if-block "!canReadPins"
[02:19:29.630]    </control>
[02:19:29.630]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:19:29.630]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:29.631]        // =>  TRUE
[02:19:29.631]      <block atomic="false" info="">
[02:19:29.631]        WriteAP(0x00, 0x190008);
[02:19:29.633]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:29.633]        WriteAP(0xF0, 0x01);
[02:19:29.638]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:29.638]      </block>
[02:19:29.638]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:29.639]    </control>
[02:19:29.639]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:19:29.639]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:29.639]        // =>  FALSE
[02:19:29.639]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:29.639]    </control>
[02:19:29.639]    <block atomic="false" info="">
[02:19:29.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:29.643]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:19:29.643]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:19:29.643]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:29.646]      __ap = 0; //lets make sure we reset the access point selection
[02:19:29.646]        // -> [__ap <= 0x00000000]
[02:19:29.646]    </block>
[02:19:29.646]  </sequence>
[02:19:29.646]  
[02:19:29.669]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:19:29.669]  
[02:19:29.669]  <debugvars>
[02:19:29.669]    // Pre-defined
[02:19:29.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:29.669]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:19:29.669]    __dp=0x00000000
[02:19:29.669]    __ap=0x00000000
[02:19:29.669]    __traceout=0x00000000      (Trace Disabled)
[02:19:29.670]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:29.670]    __FlashAddr=0x00000000
[02:19:29.670]    __FlashLen=0x00000000
[02:19:29.670]    __FlashArg=0x00000000
[02:19:29.670]    __FlashOp=0x00000000
[02:19:29.670]    __Result=0x00000000
[02:19:29.670]  </debugvars>
[02:19:29.670]  
[02:19:29.671]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:19:29.671]    <block atomic="false" info="">
[02:19:29.671]      __var deviceID = 0;
[02:19:29.671]        // -> [deviceID <= 0x00000000]
[02:19:29.671]      __var version = 0;
[02:19:29.671]        // -> [version <= 0x00000000]
[02:19:29.671]      __var partNum = 0;
[02:19:29.671]        // -> [partNum <= 0x00000000]
[02:19:29.671]      __var manuf = 0;
[02:19:29.671]        // -> [manuf <= 0x00000000]
[02:19:29.671]      __var isMSPM0G1X0X_G3X0X = 0;
[02:19:29.673]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:19:29.673]      __var isProduction = 0;
[02:19:29.673]        // -> [isProduction <= 0x00000000]
[02:19:29.673]      __var continueId = 0;
[02:19:29.673]        // -> [continueId <= 0x00000000]
[02:19:29.673]      deviceID =   Read32(0x41C40004);
[02:19:29.678]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:19:29.678]        // -> [deviceID <= 0x2BB8802F]
[02:19:29.678]      version = deviceID >> 28;
[02:19:29.678]        // -> [version <= 0x00000002]
[02:19:29.678]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:19:29.678]        // -> [partNum <= 0x0000BB88]
[02:19:29.678]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:19:29.679]        // -> [manuf <= 0x00000017]
[02:19:29.679]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:19:29.679]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:19:29.679]      isProduction = (version > 0);
[02:19:29.679]        // -> [isProduction <= 0x00000001]
[02:19:29.679]    </block>
[02:19:29.679]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:19:29.679]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:19:29.679]        // =>  FALSE
[02:19:29.679]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:19:29.680]    </control>
[02:19:29.680]    <control if="continueId == 4" while="" timeout="0" info="">
[02:19:29.680]      // if-block "continueId == 4"
[02:19:29.680]        // =>  FALSE
[02:19:29.680]      // skip if-block "continueId == 4"
[02:19:29.680]    </control>
[02:19:29.680]    <control if="!isProduction" while="" timeout="0" info="">
[02:19:29.680]      // if-block "!isProduction"
[02:19:29.680]        // =>  FALSE
[02:19:29.680]      // skip if-block "!isProduction"
[02:19:29.680]    </control>
[02:19:29.681]  </sequence>
[02:19:29.681]  
[02:22:25.895]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:22:25.895]  
[02:22:25.900]  <debugvars>
[02:22:25.900]    // Pre-defined
[02:22:25.900]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:25.900]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:22:25.900]    __dp=0x00000000
[02:22:25.900]    __ap=0x00000000
[02:22:25.900]    __traceout=0x00000000      (Trace Disabled)
[02:22:25.900]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:25.901]    __FlashAddr=0x00000000
[02:22:25.901]    __FlashLen=0x00000000
[02:22:25.901]    __FlashArg=0x00000000
[02:22:25.901]    __FlashOp=0x00000000
[02:22:25.901]    __Result=0x00000000
[02:22:25.901]  </debugvars>
[02:22:25.901]  
[02:22:25.901]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:22:25.901]    <block atomic="false" info="">
[02:22:25.901]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:22:25.901]        // -> [isSWJ <= 0x00000001]
[02:22:25.901]      __var hasDormant = __protocol & 0x00020000;
[02:22:25.902]        // -> [hasDormant <= 0x00000000]
[02:22:25.902]      __var protType   = __protocol & 0x0000FFFF;
[02:22:25.902]        // -> [protType <= 0x00000002]
[02:22:25.902]    </block>
[02:22:25.902]    <control if="protType == 1" while="" timeout="0" info="">
[02:22:25.902]      // if-block "protType == 1"
[02:22:25.902]        // =>  FALSE
[02:22:25.902]      // skip if-block "protType == 1"
[02:22:25.902]    </control>
[02:22:25.902]    <control if="protType == 2" while="" timeout="0" info="">
[02:22:25.902]      // if-block "protType == 2"
[02:22:25.903]        // =>  TRUE
[02:22:25.903]      <control if="isSWJ" while="" timeout="0" info="">
[02:22:25.903]        // if-block "isSWJ"
[02:22:25.903]          // =>  TRUE
[02:22:25.903]        <control if="hasDormant" while="" timeout="0" info="">
[02:22:25.903]          // if-block "hasDormant"
[02:22:25.903]            // =>  FALSE
[02:22:25.903]          // skip if-block "hasDormant"
[02:22:25.903]        </control>
[02:22:25.903]        <control if="!hasDormant" while="" timeout="0" info="">
[02:22:25.903]          // if-block "!hasDormant"
[02:22:25.903]            // =>  TRUE
[02:22:25.904]          <block atomic="false" info="">
[02:22:25.905]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:22:25.906]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:25.907]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:22:25.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:22:25.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:22:25.913]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:25.913]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:22:25.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:22:25.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:22:25.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:25.917]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:22:25.918]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:22:25.918]          </block>
[02:22:25.918]          // end if-block "!hasDormant"
[02:22:25.918]        </control>
[02:22:25.918]        // end if-block "isSWJ"
[02:22:25.918]      </control>
[02:22:25.918]      <control if="!isSWJ" while="" timeout="0" info="">
[02:22:25.918]        // if-block "!isSWJ"
[02:22:25.918]          // =>  FALSE
[02:22:25.918]        // skip if-block "!isSWJ"
[02:22:25.918]      </control>
[02:22:25.918]      <block atomic="false" info="">
[02:22:25.920]        ReadDP(0x0);
[02:22:25.921]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:22:25.921]      </block>
[02:22:25.921]      // end if-block "protType == 2"
[02:22:25.921]    </control>
[02:22:25.921]  </sequence>
[02:22:25.921]  
[02:22:25.924]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:22:25.924]  
[02:22:25.924]  <debugvars>
[02:22:25.924]    // Pre-defined
[02:22:25.924]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:25.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:22:25.924]    __dp=0x00000000
[02:22:25.924]    __ap=0x00000000
[02:22:25.924]    __traceout=0x00000000      (Trace Disabled)
[02:22:25.924]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:25.924]    __FlashAddr=0x00000000
[02:22:25.924]    __FlashLen=0x00000000
[02:22:25.924]    __FlashArg=0x00000000
[02:22:25.924]    __FlashOp=0x00000000
[02:22:25.924]    __Result=0x00000000
[02:22:25.924]  </debugvars>
[02:22:25.924]  
[02:22:25.924]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:22:25.924]    <block atomic="false" info="">
[02:22:25.926]      __var SW_DP_ABORT       = 0x0;
[02:22:25.926]        // -> [SW_DP_ABORT <= 0x00000000]
[02:22:25.926]      __var DP_CTRL_STAT      = 0x4;
[02:22:25.926]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:22:25.926]      __var DP_SELECT         = 0x8;
[02:22:25.926]        // -> [DP_SELECT <= 0x00000008]
[02:22:25.926]      __var powered_down      = 0;
[02:22:25.926]        // -> [powered_down <= 0x00000000]
[02:22:25.926]      WriteDP(DP_SELECT, 0x00000000);
[02:22:25.928]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:22:25.928]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:22:25.933]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:22:25.933]        // -> [powered_down <= 0x00000001]
[02:22:25.933]    </block>
[02:22:25.933]    <control if="powered_down" while="" timeout="0" info="">
[02:22:25.933]      // if-block "powered_down"
[02:22:25.933]        // =>  TRUE
[02:22:25.933]      <block atomic="false" info="">
[02:22:25.933]        Message(0, "Debug/System power-up request sent");
[02:22:25.935]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:22:25.938]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:22:25.938]      </block>
[02:22:25.938]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:22:25.938]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:22:25.943]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:22:25.943]        // while-condition  =>  FALSE
[02:22:25.943]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:22:25.943]      </control>
[02:22:25.943]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:22:25.943]        // if-block "(__protocol & 0xFFFF) == 1"
[02:22:25.943]          // =>  FALSE
[02:22:25.943]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:22:25.943]      </control>
[02:22:25.944]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:22:25.944]        // if-block "(__protocol & 0xFFFF) == 2"
[02:22:25.944]          // =>  TRUE
[02:22:25.944]        <block atomic="false" info="">
[02:22:25.944]          Message(0, "executing SWD power up");
[02:22:25.946]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:22:25.947]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:22:25.948]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:22:25.950]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:22:25.950]        </block>
[02:22:25.950]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:22:25.950]      </control>
[02:22:25.950]      // end if-block "powered_down"
[02:22:25.950]    </control>
[02:22:25.950]    <block atomic="false" info="">
[02:22:25.950]      __var DEBUG_PORT_VAL    = 0;
[02:22:25.950]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:22:25.950]      __var ACCESS_POINT_VAL  = 0;
[02:22:25.951]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:22:25.951]      __ap = 1; 
[02:22:25.951]        // -> [__ap <= 0x00000001]
[02:22:25.951]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:22:25.961]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:22:25.961]      __ap = 4;
[02:22:25.961]        // -> [__ap <= 0x00000004]
[02:22:25.962]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:22:25.972]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:22:25.972]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:22:25.972]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:22:25.974]    </block>
[02:22:25.974]    <block atomic="false" info="">
[02:22:25.974]      __var nReset = 0x80;
[02:22:25.974]        // -> [nReset <= 0x00000080]
[02:22:25.975]      __var canReadPins = 0;
[02:22:25.975]        // -> [canReadPins <= 0x00000000]
[02:22:25.975]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:22:25.977]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:22:25.978]        // -> [canReadPins <= 0x00000001]
[02:22:25.978]    </block>
[02:22:25.978]    <control if="" while="1" timeout="200" info="">
[02:22:25.978]      // while "1"  (timeout="200")
[02:22:25.978]      // while-condition  =>  TRUE
[02:22:25.978]      // while "1"  (timeout="200")
[02:22:25.978]      // while-condition  =>  TRUE
[02:22:25.978]      // while "1"  (timeout="200")
[02:22:25.978]      // while-condition  =>  TRUE
[02:22:25.978]      // while "1"  (timeout="200")
[02:22:25.978]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.979]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.979]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.979]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.979]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.979]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.979]      // while-condition  =>  TRUE
[02:22:25.979]      // while "1"  (timeout="200")
[02:22:25.980]      // while-condition  =>  TRUE
[02:22:25.980]      // while "1"  (timeout="200")
[02:22:25.980]      // while-condition  =>  TRUE
[02:22:25.980]      // while "1"  (timeout="200")
[02:22:25.980]      // while-condition  =>  TRUE
[02:22:25.980]      // while "1"  (timeout="200")
[02:22:25.980]      // while-condition  =>  TRUE
[02:22:25.981]      // while "1"  (timeout="200")
[02:22:25.981]      // while-condition  =>  TRUE
[02:22:25.981]      // while "1"  (timeout="200")
[02:22:25.981]      // while-condition  =>  TRUE
[02:22:25.981]      // while "1"  (timeout="200")
[02:22:25.981]      // while-condition  =>  TRUE
[02:22:25.981]      // while "1"  (timeout="200")
[02:22:25.981]      // while-condition  =>  TRUE
[02:22:25.981]      // while "1"  (timeout="200")
[02:22:25.981]      // while-condition  =>  TRUE
[02:22:25.981]      // while "1"  (timeout="200")
[02:22:25.982]      // while-condition  =>  TRUE
[02:22:25.982]      // while "1"  (timeout="200")
[02:22:25.982]      // while-condition  =>  TRUE
[02:22:25.982]      // while "1"  (timeout="200")
[02:22:25.982]      // while-condition  =>  TRUE
[02:22:25.982]      // while "1"  (timeout="200")
[02:22:25.983]      // while-condition  =>  TRUE
[02:22:25.983]      // while "1"  (timeout="200")
[02:22:25.983]      // while-condition  =>  TRUE
[02:22:25.983]      // while "1"  (timeout="200")
[02:22:25.983]      // while-condition  =>  TRUE
[02:22:25.983]      // while "1"  (timeout="200")
[02:22:25.983]      // while-condition  =>  TRUE
[02:22:25.983]      // while "1"  (timeout="200")
[02:22:25.983]      // while-condition  =>  TRUE
[02:22:25.983]      // while "1"  (timeout="200")
[02:22:25.983]      // while-condition  =>  TRUE
[02:22:25.984]      // while "1"  (timeout="200")
[02:22:25.984]      // while-condition  =>  TRUE
[02:22:25.984]      // while "1"  (timeout="200")
[02:22:25.984]      // while-condition  =>  TRUE
[02:22:25.984]      // while "1"  (timeout="200")
[02:22:25.984]      // while-condition  =>  TRUE
[02:22:25.984]      // while "1"  (timeout="200")
[02:22:25.985]      // while-condition  =>  TRUE
[02:22:25.985]      // while "1"  (timeout="200")
[02:22:25.985]      // while  =>  TIMEOUT
[02:22:25.985]      // end while "1"
[02:22:25.985]    </control>
[02:22:25.985]    <control if="canReadPins" while="" timeout="0" info="">
[02:22:25.985]      // if-block "canReadPins"
[02:22:25.986]        // =>  TRUE
[02:22:25.986]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:22:25.986]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:22:25.993]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:22:25.993]        // while-condition  =>  FALSE
[02:22:25.993]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:22:25.993]      </control>
[02:22:25.993]      // end if-block "canReadPins"
[02:22:25.994]    </control>
[02:22:25.994]    <control if="!canReadPins" while="" timeout="0" info="">
[02:22:25.994]      // if-block "!canReadPins"
[02:22:25.994]        // =>  FALSE
[02:22:25.994]      // skip if-block "!canReadPins"
[02:22:25.994]    </control>
[02:22:25.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:22:25.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:22:25.994]        // =>  TRUE
[02:22:25.994]      <block atomic="false" info="">
[02:22:25.994]        WriteAP(0x00, 0x190008);
[02:22:25.997]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:22:25.997]        WriteAP(0xF0, 0x01);
[02:22:26.004]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:22:26.004]      </block>
[02:22:26.004]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:22:26.004]    </control>
[02:22:26.004]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:22:26.004]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:22:26.004]        // =>  FALSE
[02:22:26.004]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:22:26.005]    </control>
[02:22:26.005]    <block atomic="false" info="">
[02:22:26.005]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:22:26.009]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:22:26.009]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:22:26.009]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:22:26.011]      __ap = 0; //lets make sure we reset the access point selection
[02:22:26.011]        // -> [__ap <= 0x00000000]
[02:22:26.011]    </block>
[02:22:26.012]  </sequence>
[02:22:26.012]  
[02:22:26.057]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:22:26.057]  
[02:22:26.057]  <debugvars>
[02:22:26.057]    // Pre-defined
[02:22:26.057]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:26.057]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:22:26.057]    __dp=0x00000000
[02:22:26.057]    __ap=0x00000000
[02:22:26.058]    __traceout=0x00000000      (Trace Disabled)
[02:22:26.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:26.058]    __FlashAddr=0x00000000
[02:22:26.058]    __FlashLen=0x00000000
[02:22:26.058]    __FlashArg=0x00000000
[02:22:26.058]    __FlashOp=0x00000000
[02:22:26.058]    __Result=0x00000000
[02:22:26.058]  </debugvars>
[02:22:26.058]  
[02:22:26.058]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:22:26.058]    <block atomic="false" info="">
[02:22:26.058]      __var deviceID = 0;
[02:22:26.060]        // -> [deviceID <= 0x00000000]
[02:22:26.060]      __var version = 0;
[02:22:26.060]        // -> [version <= 0x00000000]
[02:22:26.060]      __var partNum = 0;
[02:22:26.060]        // -> [partNum <= 0x00000000]
[02:22:26.060]      __var manuf = 0;
[02:22:26.060]        // -> [manuf <= 0x00000000]
[02:22:26.060]      __var isMSPM0G1X0X_G3X0X = 0;
[02:22:26.060]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:22:26.060]      __var isProduction = 0;
[02:22:26.060]        // -> [isProduction <= 0x00000000]
[02:22:26.061]      __var continueId = 0;
[02:22:26.061]        // -> [continueId <= 0x00000000]
[02:22:26.061]      deviceID =   Read32(0x41C40004);
[02:22:26.072]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:22:26.073]        // -> [deviceID <= 0x2BB8802F]
[02:22:26.073]      version = deviceID >> 28;
[02:22:26.073]        // -> [version <= 0x00000002]
[02:22:26.073]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:22:26.073]        // -> [partNum <= 0x0000BB88]
[02:22:26.073]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:22:26.073]        // -> [manuf <= 0x00000017]
[02:22:26.073]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:22:26.073]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:22:26.073]      isProduction = (version > 0);
[02:22:26.073]        // -> [isProduction <= 0x00000001]
[02:22:26.074]    </block>
[02:22:26.074]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:22:26.074]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:22:26.074]        // =>  FALSE
[02:22:26.074]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:22:26.074]    </control>
[02:22:26.074]    <control if="continueId == 4" while="" timeout="0" info="">
[02:22:26.074]      // if-block "continueId == 4"
[02:22:26.074]        // =>  FALSE
[02:22:26.074]      // skip if-block "continueId == 4"
[02:22:26.075]    </control>
[02:22:26.075]    <control if="!isProduction" while="" timeout="0" info="">
[02:22:26.075]      // if-block "!isProduction"
[02:22:26.075]        // =>  FALSE
[02:22:26.075]      // skip if-block "!isProduction"
[02:22:26.075]    </control>
[02:22:26.075]  </sequence>
[02:22:26.075]  
[02:22:32.016]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:22:32.016]  
[02:22:32.016]  <debugvars>
[02:22:32.016]    // Pre-defined
[02:22:32.016]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:32.016]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:22:32.016]    __dp=0x00000000
[02:22:32.016]    __ap=0x00000000
[02:22:32.016]    __traceout=0x00000000      (Trace Disabled)
[02:22:32.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:32.017]    __FlashAddr=0x00000000
[02:22:32.017]    __FlashLen=0x00000000
[02:22:32.017]    __FlashArg=0x00000000
[02:22:32.017]    __FlashOp=0x00000000
[02:22:32.017]    __Result=0x00000000
[02:22:32.017]  </debugvars>
[02:22:32.018]  
[02:22:32.018]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:22:32.018]    <block atomic="false" info="">
[02:22:32.018]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:22:32.018]        // -> [isSWJ <= 0x00000001]
[02:22:32.018]      __var hasDormant = __protocol & 0x00020000;
[02:22:32.018]        // -> [hasDormant <= 0x00000000]
[02:22:32.018]      __var protType   = __protocol & 0x0000FFFF;
[02:22:32.019]        // -> [protType <= 0x00000002]
[02:22:32.019]    </block>
[02:22:32.019]    <control if="protType == 1" while="" timeout="0" info="">
[02:22:32.019]      // if-block "protType == 1"
[02:22:32.019]        // =>  FALSE
[02:22:32.019]      // skip if-block "protType == 1"
[02:22:32.019]    </control>
[02:22:32.019]    <control if="protType == 2" while="" timeout="0" info="">
[02:22:32.019]      // if-block "protType == 2"
[02:22:32.019]        // =>  TRUE
[02:22:32.020]      <control if="isSWJ" while="" timeout="0" info="">
[02:22:32.020]        // if-block "isSWJ"
[02:22:32.020]          // =>  TRUE
[02:22:32.020]        <control if="hasDormant" while="" timeout="0" info="">
[02:22:32.020]          // if-block "hasDormant"
[02:22:32.020]            // =>  FALSE
[02:22:32.020]          // skip if-block "hasDormant"
[02:22:32.020]        </control>
[02:22:32.020]        <control if="!hasDormant" while="" timeout="0" info="">
[02:22:32.020]          // if-block "!hasDormant"
[02:22:32.020]            // =>  TRUE
[02:22:32.021]          <block atomic="false" info="">
[02:22:32.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:22:32.023]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:32.023]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:22:32.026]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:22:32.026]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:22:32.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:32.027]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:22:32.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:22:32.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:22:32.030]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:32.030]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:22:32.035]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:22:32.035]          </block>
[02:22:32.036]          // end if-block "!hasDormant"
[02:22:32.036]        </control>
[02:22:32.036]        // end if-block "isSWJ"
[02:22:32.036]      </control>
[02:22:32.036]      <control if="!isSWJ" while="" timeout="0" info="">
[02:22:32.036]        // if-block "!isSWJ"
[02:22:32.036]          // =>  FALSE
[02:22:32.036]        // skip if-block "!isSWJ"
[02:22:32.037]      </control>
[02:22:32.037]      <block atomic="false" info="">
[02:22:32.037]        ReadDP(0x0);
[02:22:32.038]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:22:32.039]      </block>
[02:22:32.039]      // end if-block "protType == 2"
[02:22:32.039]    </control>
[02:22:32.039]  </sequence>
[02:22:32.039]  
[02:22:32.041]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:22:32.041]  
[02:22:32.042]  <debugvars>
[02:22:32.042]    // Pre-defined
[02:22:32.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:32.042]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:22:32.042]    __dp=0x00000000
[02:22:32.042]    __ap=0x00000000
[02:22:32.042]    __traceout=0x00000000      (Trace Disabled)
[02:22:32.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:32.042]    __FlashAddr=0x00000000
[02:22:32.042]    __FlashLen=0x00000000
[02:22:32.042]    __FlashArg=0x00000000
[02:22:32.043]    __FlashOp=0x00000000
[02:22:32.043]    __Result=0x00000000
[02:22:32.043]  </debugvars>
[02:22:32.043]  
[02:22:32.043]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:22:32.043]    <block atomic="false" info="">
[02:22:32.043]      __var SW_DP_ABORT       = 0x0;
[02:22:32.043]        // -> [SW_DP_ABORT <= 0x00000000]
[02:22:32.044]      __var DP_CTRL_STAT      = 0x4;
[02:22:32.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:22:32.044]      __var DP_SELECT         = 0x8;
[02:22:32.044]        // -> [DP_SELECT <= 0x00000008]
[02:22:32.044]      __var powered_down      = 0;
[02:22:32.044]        // -> [powered_down <= 0x00000000]
[02:22:32.044]      WriteDP(DP_SELECT, 0x00000000);
[02:22:32.046]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:22:32.046]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:22:32.048]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:22:32.048]        // -> [powered_down <= 0x00000001]
[02:22:32.048]    </block>
[02:22:32.048]    <control if="powered_down" while="" timeout="0" info="">
[02:22:32.048]      // if-block "powered_down"
[02:22:32.048]        // =>  TRUE
[02:22:32.048]      <block atomic="false" info="">
[02:22:32.048]        Message(0, "Debug/System power-up request sent");
[02:22:32.051]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:22:32.053]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:22:32.053]      </block>
[02:22:32.053]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:22:32.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:22:32.055]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:22:32.055]        // while-condition  =>  FALSE
[02:22:32.055]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:22:32.055]      </control>
[02:22:32.055]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:22:32.055]        // if-block "(__protocol & 0xFFFF) == 1"
[02:22:32.055]          // =>  FALSE
[02:22:32.056]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:22:32.056]      </control>
[02:22:32.056]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:22:32.056]        // if-block "(__protocol & 0xFFFF) == 2"
[02:22:32.056]          // =>  TRUE
[02:22:32.057]        <block atomic="false" info="">
[02:22:32.057]          Message(0, "executing SWD power up");
[02:22:32.060]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:22:32.061]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:22:32.062]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:22:32.063]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:22:32.064]        </block>
[02:22:32.064]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:22:32.064]      </control>
[02:22:32.064]      // end if-block "powered_down"
[02:22:32.064]    </control>
[02:22:32.064]    <block atomic="false" info="">
[02:22:32.064]      __var DEBUG_PORT_VAL    = 0;
[02:22:32.064]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:22:32.064]      __var ACCESS_POINT_VAL  = 0;
[02:22:32.064]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:22:32.065]      __ap = 1; 
[02:22:32.065]        // -> [__ap <= 0x00000001]
[02:22:32.065]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:22:32.068]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:22:32.068]      __ap = 4;
[02:22:32.069]        // -> [__ap <= 0x00000004]
[02:22:32.069]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:22:32.077]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:22:32.077]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:22:32.077]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:22:32.079]    </block>
[02:22:32.080]    <block atomic="false" info="">
[02:22:32.080]      __var nReset = 0x80;
[02:22:32.080]        // -> [nReset <= 0x00000080]
[02:22:32.080]      __var canReadPins = 0;
[02:22:32.080]        // -> [canReadPins <= 0x00000000]
[02:22:32.080]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:22:32.082]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:22:32.082]        // -> [canReadPins <= 0x00000001]
[02:22:32.082]    </block>
[02:22:32.082]    <control if="" while="1" timeout="200" info="">
[02:22:32.082]      // while "1"  (timeout="200")
[02:22:32.082]      // while-condition  =>  TRUE
[02:22:32.082]      // while "1"  (timeout="200")
[02:22:32.082]      // while-condition  =>  TRUE
[02:22:32.083]      // while "1"  (timeout="200")
[02:22:32.083]      // while-condition  =>  TRUE
[02:22:32.083]      // while "1"  (timeout="200")
[02:22:32.083]      // while-condition  =>  TRUE
[02:22:32.083]      // while "1"  (timeout="200")
[02:22:32.083]      // while-condition  =>  TRUE
[02:22:32.083]      // while "1"  (timeout="200")
[02:22:32.083]      // while-condition  =>  TRUE
[02:22:32.083]      // while "1"  (timeout="200")
[02:22:32.083]      // while-condition  =>  TRUE
[02:22:32.083]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.084]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.084]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.084]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.084]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.084]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.084]      // while "1"  (timeout="200")
[02:22:32.084]      // while-condition  =>  TRUE
[02:22:32.086]      // while "1"  (timeout="200")
[02:22:32.086]      // while-condition  =>  TRUE
[02:22:32.086]      // while "1"  (timeout="200")
[02:22:32.086]      // while-condition  =>  TRUE
[02:22:32.086]      // while "1"  (timeout="200")
[02:22:32.086]      // while-condition  =>  TRUE
[02:22:32.086]      // while "1"  (timeout="200")
[02:22:32.086]      // while-condition  =>  TRUE
[02:22:32.086]      // while "1"  (timeout="200")
[02:22:32.086]      // while-condition  =>  TRUE
[02:22:32.087]      // while "1"  (timeout="200")
[02:22:32.087]      // while-condition  =>  TRUE
[02:22:32.087]      // while "1"  (timeout="200")
[02:22:32.088]      // while-condition  =>  TRUE
[02:22:32.088]      // while "1"  (timeout="200")
[02:22:32.088]      // while-condition  =>  TRUE
[02:22:32.088]      // while "1"  (timeout="200")
[02:22:32.088]      // while-condition  =>  TRUE
[02:22:32.088]      // while "1"  (timeout="200")
[02:22:32.088]      // while-condition  =>  TRUE
[02:22:32.088]      // while "1"  (timeout="200")
[02:22:32.088]      // while-condition  =>  TRUE
[02:22:32.088]      // while "1"  (timeout="200")
[02:22:32.089]      // while-condition  =>  TRUE
[02:22:32.089]      // while "1"  (timeout="200")
[02:22:32.089]      // while-condition  =>  TRUE
[02:22:32.089]      // while "1"  (timeout="200")
[02:22:32.089]      // while-condition  =>  TRUE
[02:22:32.089]      // while "1"  (timeout="200")
[02:22:32.089]      // while-condition  =>  TRUE
[02:22:32.089]      // while "1"  (timeout="200")
[02:22:32.089]      // while-condition  =>  TRUE
[02:22:32.089]      // while "1"  (timeout="200")
[02:22:32.089]      // while-condition  =>  TRUE
[02:22:32.090]      // while "1"  (timeout="200")
[02:22:32.090]      // while-condition  =>  TRUE
[02:22:32.090]      // while "1"  (timeout="200")
[02:22:32.090]      // while-condition  =>  TRUE
[02:22:32.090]      // while "1"  (timeout="200")
[02:22:32.090]      // while-condition  =>  TRUE
[02:22:32.090]      // while "1"  (timeout="200")
[02:22:32.090]      // while-condition  =>  TRUE
[02:22:32.090]      // while "1"  (timeout="200")
[02:22:32.090]      // while-condition  =>  TRUE
[02:22:32.090]      // while "1"  (timeout="200")
[02:22:32.090]      // while-condition  =>  TRUE
[02:22:32.091]      // while "1"  (timeout="200")
[02:22:32.091]      // while-condition  =>  TRUE
[02:22:32.091]      // while "1"  (timeout="200")
[02:22:32.091]      // while-condition  =>  TRUE
[02:22:32.091]      // while "1"  (timeout="200")
[02:22:32.091]      // while-condition  =>  TRUE
[02:22:32.091]      // while "1"  (timeout="200")
[02:22:32.092]      // while-condition  =>  TRUE
[02:22:32.092]      // while "1"  (timeout="200")
[02:22:32.092]      // while-condition  =>  TRUE
[02:22:32.092]      // while "1"  (timeout="200")
[02:22:32.092]      // while-condition  =>  TRUE
[02:22:32.092]      // while "1"  (timeout="200")
[02:22:32.092]      // while-condition  =>  TRUE
[02:22:32.092]      // while "1"  (timeout="200")
[02:22:32.092]      // while-condition  =>  TRUE
[02:22:32.092]      // while "1"  (timeout="200")
[02:22:32.092]      // while-condition  =>  TRUE
[02:22:32.093]      // while "1"  (timeout="200")
[02:22:32.093]      // while-condition  =>  TRUE
[02:22:32.093]      // while "1"  (timeout="200")
[02:22:32.093]      // while-condition  =>  TRUE
[02:22:32.093]      // while "1"  (timeout="200")
[02:22:32.093]      // while-condition  =>  TRUE
[02:22:32.093]      // while "1"  (timeout="200")
[02:22:32.093]      // while-condition  =>  TRUE
[02:22:32.093]      // while "1"  (timeout="200")
[02:22:32.093]      // while-condition  =>  TRUE
[02:22:32.093]      // while "1"  (timeout="200")
[02:22:32.093]      // while-condition  =>  TRUE
[02:22:32.094]      // while "1"  (timeout="200")
[02:22:32.094]      // while-condition  =>  TRUE
[02:22:32.094]      // while "1"  (timeout="200")
[02:22:32.094]      // while-condition  =>  TRUE
[02:22:32.094]      // while "1"  (timeout="200")
[02:22:32.094]      // while-condition  =>  TRUE
[02:22:32.094]      // while "1"  (timeout="200")
[02:22:32.094]      // while-condition  =>  TRUE
[02:22:32.094]      // while "1"  (timeout="200")
[02:22:32.094]      // while-condition  =>  TRUE
[02:22:32.095]      // while "1"  (timeout="200")
[02:22:32.095]      // while  =>  TIMEOUT
[02:22:32.095]      // end while "1"
[02:22:32.095]    </control>
[02:22:32.095]    <control if="canReadPins" while="" timeout="0" info="">
[02:22:32.095]      // if-block "canReadPins"
[02:22:32.095]        // =>  TRUE
[02:22:32.095]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:22:32.095]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:22:32.098]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:22:32.098]        // while-condition  =>  FALSE
[02:22:32.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:22:32.099]      </control>
[02:22:32.099]      // end if-block "canReadPins"
[02:22:32.099]    </control>
[02:22:32.099]    <control if="!canReadPins" while="" timeout="0" info="">
[02:22:32.099]      // if-block "!canReadPins"
[02:22:32.099]        // =>  FALSE
[02:22:32.099]      // skip if-block "!canReadPins"
[02:22:32.100]    </control>
[02:22:32.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:22:32.100]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:22:32.100]        // =>  TRUE
[02:22:32.100]      <block atomic="false" info="">
[02:22:32.100]        WriteAP(0x00, 0x190008);
[02:22:32.102]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:22:32.102]        WriteAP(0xF0, 0x01);
[02:22:32.106]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:22:32.106]      </block>
[02:22:32.106]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:22:32.106]    </control>
[02:22:32.106]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:22:32.106]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:22:32.106]        // =>  FALSE
[02:22:32.106]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:22:32.106]    </control>
[02:22:32.106]    <block atomic="false" info="">
[02:22:32.107]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:22:32.110]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:22:32.111]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:22:32.111]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:22:32.113]      __ap = 0; //lets make sure we reset the access point selection
[02:22:32.113]        // -> [__ap <= 0x00000000]
[02:22:32.113]    </block>
[02:22:32.113]  </sequence>
[02:22:32.114]  
[02:22:32.139]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:22:32.139]  
[02:22:32.140]  <debugvars>
[02:22:32.140]    // Pre-defined
[02:22:32.140]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:32.140]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:22:32.140]    __dp=0x00000000
[02:22:32.141]    __ap=0x00000000
[02:22:32.141]    __traceout=0x00000000      (Trace Disabled)
[02:22:32.141]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:32.141]    __FlashAddr=0x00000000
[02:22:32.141]    __FlashLen=0x00000000
[02:22:32.141]    __FlashArg=0x00000000
[02:22:32.141]    __FlashOp=0x00000000
[02:22:32.141]    __Result=0x00000000
[02:22:32.141]  </debugvars>
[02:22:32.141]  
[02:22:32.141]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:22:32.142]    <block atomic="false" info="">
[02:22:32.142]      __var deviceID = 0;
[02:22:32.142]        // -> [deviceID <= 0x00000000]
[02:22:32.142]      __var version = 0;
[02:22:32.142]        // -> [version <= 0x00000000]
[02:22:32.142]      __var partNum = 0;
[02:22:32.142]        // -> [partNum <= 0x00000000]
[02:22:32.143]      __var manuf = 0;
[02:22:32.144]        // -> [manuf <= 0x00000000]
[02:22:32.144]      __var isMSPM0G1X0X_G3X0X = 0;
[02:22:32.144]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:22:32.144]      __var isProduction = 0;
[02:22:32.144]        // -> [isProduction <= 0x00000000]
[02:22:32.144]      __var continueId = 0;
[02:22:32.144]        // -> [continueId <= 0x00000000]
[02:22:32.144]      deviceID =   Read32(0x41C40004);
[02:22:32.152]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:22:32.152]        // -> [deviceID <= 0x2BB8802F]
[02:22:32.152]      version = deviceID >> 28;
[02:22:32.152]        // -> [version <= 0x00000002]
[02:22:32.153]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:22:32.153]        // -> [partNum <= 0x0000BB88]
[02:22:32.153]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:22:32.153]        // -> [manuf <= 0x00000017]
[02:22:32.153]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:22:32.153]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:22:32.153]      isProduction = (version > 0);
[02:22:32.153]        // -> [isProduction <= 0x00000001]
[02:22:32.153]    </block>
[02:22:32.154]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:22:32.154]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:22:32.154]        // =>  FALSE
[02:22:32.154]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:22:32.154]    </control>
[02:22:32.154]    <control if="continueId == 4" while="" timeout="0" info="">
[02:22:32.154]      // if-block "continueId == 4"
[02:22:32.154]        // =>  FALSE
[02:22:32.154]      // skip if-block "continueId == 4"
[02:22:32.154]    </control>
[02:22:32.155]    <control if="!isProduction" while="" timeout="0" info="">
[02:22:32.155]      // if-block "!isProduction"
[02:22:32.155]        // =>  FALSE
[02:22:32.155]      // skip if-block "!isProduction"
[02:22:32.155]    </control>
[02:22:32.155]  </sequence>
[02:22:32.155]  
[02:24:18.323]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:24:18.323]  
[02:24:18.324]  <debugvars>
[02:24:18.324]    // Pre-defined
[02:24:18.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:18.324]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:24:18.324]    __dp=0x00000000
[02:24:18.324]    __ap=0x00000000
[02:24:18.325]    __traceout=0x00000000      (Trace Disabled)
[02:24:18.325]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:18.325]    __FlashAddr=0x00000000
[02:24:18.325]    __FlashLen=0x00000000
[02:24:18.325]    __FlashArg=0x00000000
[02:24:18.325]    __FlashOp=0x00000000
[02:24:18.325]    __Result=0x00000000
[02:24:18.325]  </debugvars>
[02:24:18.325]  
[02:24:18.325]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:24:18.325]    <block atomic="false" info="">
[02:24:18.326]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:24:18.326]        // -> [isSWJ <= 0x00000001]
[02:24:18.326]      __var hasDormant = __protocol & 0x00020000;
[02:24:18.326]        // -> [hasDormant <= 0x00000000]
[02:24:18.326]      __var protType   = __protocol & 0x0000FFFF;
[02:24:18.326]        // -> [protType <= 0x00000002]
[02:24:18.326]    </block>
[02:24:18.326]    <control if="protType == 1" while="" timeout="0" info="">
[02:24:18.326]      // if-block "protType == 1"
[02:24:18.326]        // =>  FALSE
[02:24:18.326]      // skip if-block "protType == 1"
[02:24:18.327]    </control>
[02:24:18.327]    <control if="protType == 2" while="" timeout="0" info="">
[02:24:18.327]      // if-block "protType == 2"
[02:24:18.327]        // =>  TRUE
[02:24:18.327]      <control if="isSWJ" while="" timeout="0" info="">
[02:24:18.327]        // if-block "isSWJ"
[02:24:18.327]          // =>  TRUE
[02:24:18.327]        <control if="hasDormant" while="" timeout="0" info="">
[02:24:18.327]          // if-block "hasDormant"
[02:24:18.327]            // =>  FALSE
[02:24:18.327]          // skip if-block "hasDormant"
[02:24:18.327]        </control>
[02:24:18.328]        <control if="!hasDormant" while="" timeout="0" info="">
[02:24:18.328]          // if-block "!hasDormant"
[02:24:18.328]            // =>  TRUE
[02:24:18.328]          <block atomic="false" info="">
[02:24:18.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:24:18.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:18.330]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:24:18.331]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:24:18.331]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:24:18.333]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:18.333]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:24:18.336]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:24:18.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:24:18.338]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:18.338]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:24:18.342]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:24:18.342]          </block>
[02:24:18.342]          // end if-block "!hasDormant"
[02:24:18.342]        </control>
[02:24:18.342]        // end if-block "isSWJ"
[02:24:18.342]      </control>
[02:24:18.342]      <control if="!isSWJ" while="" timeout="0" info="">
[02:24:18.342]        // if-block "!isSWJ"
[02:24:18.342]          // =>  FALSE
[02:24:18.342]        // skip if-block "!isSWJ"
[02:24:18.342]      </control>
[02:24:18.344]      <block atomic="false" info="">
[02:24:18.344]        ReadDP(0x0);
[02:24:18.345]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:24:18.345]      </block>
[02:24:18.345]      // end if-block "protType == 2"
[02:24:18.345]    </control>
[02:24:18.345]  </sequence>
[02:24:18.345]  
[02:24:18.349]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:24:18.349]  
[02:24:18.349]  <debugvars>
[02:24:18.349]    // Pre-defined
[02:24:18.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:18.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:24:18.349]    __dp=0x00000000
[02:24:18.349]    __ap=0x00000000
[02:24:18.349]    __traceout=0x00000000      (Trace Disabled)
[02:24:18.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:18.349]    __FlashAddr=0x00000000
[02:24:18.349]    __FlashLen=0x00000000
[02:24:18.349]    __FlashArg=0x00000000
[02:24:18.350]    __FlashOp=0x00000000
[02:24:18.350]    __Result=0x00000000
[02:24:18.350]  </debugvars>
[02:24:18.350]  
[02:24:18.350]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:24:18.350]    <block atomic="false" info="">
[02:24:18.350]      __var SW_DP_ABORT       = 0x0;
[02:24:18.350]        // -> [SW_DP_ABORT <= 0x00000000]
[02:24:18.350]      __var DP_CTRL_STAT      = 0x4;
[02:24:18.350]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:24:18.350]      __var DP_SELECT         = 0x8;
[02:24:18.350]        // -> [DP_SELECT <= 0x00000008]
[02:24:18.350]      __var powered_down      = 0;
[02:24:18.351]        // -> [powered_down <= 0x00000000]
[02:24:18.351]      WriteDP(DP_SELECT, 0x00000000);
[02:24:18.353]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:24:18.353]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:24:18.355]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:24:18.355]        // -> [powered_down <= 0x00000001]
[02:24:18.355]    </block>
[02:24:18.355]    <control if="powered_down" while="" timeout="0" info="">
[02:24:18.355]      // if-block "powered_down"
[02:24:18.355]        // =>  TRUE
[02:24:18.355]      <block atomic="false" info="">
[02:24:18.355]        Message(0, "Debug/System power-up request sent");
[02:24:18.358]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:24:18.360]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:24:18.361]      </block>
[02:24:18.361]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:24:18.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:24:18.364]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:24:18.364]        // while-condition  =>  FALSE
[02:24:18.364]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:24:18.364]      </control>
[02:24:18.364]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:24:18.364]        // if-block "(__protocol & 0xFFFF) == 1"
[02:24:18.365]          // =>  FALSE
[02:24:18.365]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:24:18.365]      </control>
[02:24:18.365]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:24:18.365]        // if-block "(__protocol & 0xFFFF) == 2"
[02:24:18.365]          // =>  TRUE
[02:24:18.365]        <block atomic="false" info="">
[02:24:18.366]          Message(0, "executing SWD power up");
[02:24:18.368]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:24:18.369]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:24:18.371]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:24:18.372]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:24:18.372]        </block>
[02:24:18.372]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:24:18.372]      </control>
[02:24:18.372]      // end if-block "powered_down"
[02:24:18.372]    </control>
[02:24:18.372]    <block atomic="false" info="">
[02:24:18.374]      __var DEBUG_PORT_VAL    = 0;
[02:24:18.374]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:24:18.374]      __var ACCESS_POINT_VAL  = 0;
[02:24:18.374]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:24:18.374]      __ap = 1; 
[02:24:18.374]        // -> [__ap <= 0x00000001]
[02:24:18.374]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:24:18.378]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:24:18.379]      __ap = 4;
[02:24:18.379]        // -> [__ap <= 0x00000004]
[02:24:18.379]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:24:18.384]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:24:18.384]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:24:18.384]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:24:18.386]    </block>
[02:24:18.386]    <block atomic="false" info="">
[02:24:18.387]      __var nReset = 0x80;
[02:24:18.387]        // -> [nReset <= 0x00000080]
[02:24:18.387]      __var canReadPins = 0;
[02:24:18.387]        // -> [canReadPins <= 0x00000000]
[02:24:18.387]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:24:18.388]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:24:18.388]        // -> [canReadPins <= 0x00000001]
[02:24:18.388]    </block>
[02:24:18.388]    <control if="" while="1" timeout="200" info="">
[02:24:18.388]      // while "1"  (timeout="200")
[02:24:18.388]      // while-condition  =>  TRUE
[02:24:18.388]      // while "1"  (timeout="200")
[02:24:18.388]      // while-condition  =>  TRUE
[02:24:18.388]      // while "1"  (timeout="200")
[02:24:18.388]      // while-condition  =>  TRUE
[02:24:18.388]      // while "1"  (timeout="200")
[02:24:18.388]      // while-condition  =>  TRUE
[02:24:18.390]      // while "1"  (timeout="200")
[02:24:18.390]      // while-condition  =>  TRUE
[02:24:18.390]      // while "1"  (timeout="200")
[02:24:18.390]      // while-condition  =>  TRUE
[02:24:18.390]      // while "1"  (timeout="200")
[02:24:18.390]      // while-condition  =>  TRUE
[02:24:18.390]      // while "1"  (timeout="200")
[02:24:18.390]      // while-condition  =>  TRUE
[02:24:18.390]      // while "1"  (timeout="200")
[02:24:18.391]      // while-condition  =>  TRUE
[02:24:18.391]      // while "1"  (timeout="200")
[02:24:18.391]      // while-condition  =>  TRUE
[02:24:18.391]      // while "1"  (timeout="200")
[02:24:18.391]      // while-condition  =>  TRUE
[02:24:18.391]      // while "1"  (timeout="200")
[02:24:18.392]      // while-condition  =>  TRUE
[02:24:18.392]      // while "1"  (timeout="200")
[02:24:18.392]      // while  =>  TIMEOUT
[02:24:18.392]      // end while "1"
[02:24:18.392]    </control>
[02:24:18.392]    <control if="canReadPins" while="" timeout="0" info="">
[02:24:18.393]      // if-block "canReadPins"
[02:24:18.393]        // =>  TRUE
[02:24:18.393]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:24:18.393]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:24:18.394]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:24:18.395]        // while-condition  =>  FALSE
[02:24:18.395]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:24:18.395]      </control>
[02:24:18.395]      // end if-block "canReadPins"
[02:24:18.395]    </control>
[02:24:18.395]    <control if="!canReadPins" while="" timeout="0" info="">
[02:24:18.395]      // if-block "!canReadPins"
[02:24:18.395]        // =>  FALSE
[02:24:18.395]      // skip if-block "!canReadPins"
[02:24:18.395]    </control>
[02:24:18.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:24:18.396]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:24:18.396]        // =>  TRUE
[02:24:18.396]      <block atomic="false" info="">
[02:24:18.396]        WriteAP(0x00, 0x190008);
[02:24:18.397]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:24:18.397]        WriteAP(0xF0, 0x01);
[02:24:18.406]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:24:18.406]      </block>
[02:24:18.406]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:24:18.407]    </control>
[02:24:18.407]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:24:18.407]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:24:18.407]        // =>  FALSE
[02:24:18.407]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:24:18.407]    </control>
[02:24:18.407]    <block atomic="false" info="">
[02:24:18.407]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:24:18.411]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:24:18.412]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:24:18.412]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:24:18.413]      __ap = 0; //lets make sure we reset the access point selection
[02:24:18.413]        // -> [__ap <= 0x00000000]
[02:24:18.413]    </block>
[02:24:18.413]  </sequence>
[02:24:18.413]  
[02:24:18.441]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:24:18.441]  
[02:24:18.441]  <debugvars>
[02:24:18.441]    // Pre-defined
[02:24:18.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:18.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:24:18.441]    __dp=0x00000000
[02:24:18.441]    __ap=0x00000000
[02:24:18.441]    __traceout=0x00000000      (Trace Disabled)
[02:24:18.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:18.441]    __FlashAddr=0x00000000
[02:24:18.442]    __FlashLen=0x00000000
[02:24:18.442]    __FlashArg=0x00000000
[02:24:18.442]    __FlashOp=0x00000000
[02:24:18.442]    __Result=0x00000000
[02:24:18.442]  </debugvars>
[02:24:18.442]  
[02:24:18.442]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:24:18.442]    <block atomic="false" info="">
[02:24:18.442]      __var deviceID = 0;
[02:24:18.442]        // -> [deviceID <= 0x00000000]
[02:24:18.442]      __var version = 0;
[02:24:18.443]        // -> [version <= 0x00000000]
[02:24:18.443]      __var partNum = 0;
[02:24:18.443]        // -> [partNum <= 0x00000000]
[02:24:18.443]      __var manuf = 0;
[02:24:18.443]        // -> [manuf <= 0x00000000]
[02:24:18.443]      __var isMSPM0G1X0X_G3X0X = 0;
[02:24:18.443]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:24:18.443]      __var isProduction = 0;
[02:24:18.443]        // -> [isProduction <= 0x00000000]
[02:24:18.443]      __var continueId = 0;
[02:24:18.443]        // -> [continueId <= 0x00000000]
[02:24:18.443]      deviceID =   Read32(0x41C40004);
[02:24:18.452]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:24:18.452]        // -> [deviceID <= 0x2BB8802F]
[02:24:18.452]      version = deviceID >> 28;
[02:24:18.452]        // -> [version <= 0x00000002]
[02:24:18.452]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:24:18.452]        // -> [partNum <= 0x0000BB88]
[02:24:18.452]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:24:18.452]        // -> [manuf <= 0x00000017]
[02:24:18.452]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:24:18.454]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:24:18.454]      isProduction = (version > 0);
[02:24:18.454]        // -> [isProduction <= 0x00000001]
[02:24:18.454]    </block>
[02:24:18.454]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:24:18.454]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:24:18.454]        // =>  FALSE
[02:24:18.454]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:24:18.454]    </control>
[02:24:18.454]    <control if="continueId == 4" while="" timeout="0" info="">
[02:24:18.454]      // if-block "continueId == 4"
[02:24:18.454]        // =>  FALSE
[02:24:18.455]      // skip if-block "continueId == 4"
[02:24:18.455]    </control>
[02:24:18.455]    <control if="!isProduction" while="" timeout="0" info="">
[02:24:18.455]      // if-block "!isProduction"
[02:24:18.455]        // =>  FALSE
[02:24:18.455]      // skip if-block "!isProduction"
[02:24:18.455]    </control>
[02:24:18.455]  </sequence>
[02:24:18.455]  
[02:24:25.228]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:24:25.228]  
[02:24:25.237]  <debugvars>
[02:24:25.237]    // Pre-defined
[02:24:25.237]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:25.237]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:24:25.237]    __dp=0x00000000
[02:24:25.237]    __ap=0x00000000
[02:24:25.237]    __traceout=0x00000000      (Trace Disabled)
[02:24:25.237]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:25.237]    __FlashAddr=0x00000000
[02:24:25.237]    __FlashLen=0x00000000
[02:24:25.237]    __FlashArg=0x00000000
[02:24:25.237]    __FlashOp=0x00000000
[02:24:25.238]    __Result=0x00000000
[02:24:25.238]  </debugvars>
[02:24:25.238]  
[02:24:25.238]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:24:25.238]    <block atomic="false" info="">
[02:24:25.238]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:24:25.238]        // -> [isSWJ <= 0x00000001]
[02:24:25.238]      __var hasDormant = __protocol & 0x00020000;
[02:24:25.238]        // -> [hasDormant <= 0x00000000]
[02:24:25.239]      __var protType   = __protocol & 0x0000FFFF;
[02:24:25.239]        // -> [protType <= 0x00000002]
[02:24:25.239]    </block>
[02:24:25.239]    <control if="protType == 1" while="" timeout="0" info="">
[02:24:25.239]      // if-block "protType == 1"
[02:24:25.239]        // =>  FALSE
[02:24:25.240]      // skip if-block "protType == 1"
[02:24:25.240]    </control>
[02:24:25.240]    <control if="protType == 2" while="" timeout="0" info="">
[02:24:25.240]      // if-block "protType == 2"
[02:24:25.240]        // =>  TRUE
[02:24:25.240]      <control if="isSWJ" while="" timeout="0" info="">
[02:24:25.241]        // if-block "isSWJ"
[02:24:25.241]          // =>  TRUE
[02:24:25.241]        <control if="hasDormant" while="" timeout="0" info="">
[02:24:25.241]          // if-block "hasDormant"
[02:24:25.241]            // =>  FALSE
[02:24:25.241]          // skip if-block "hasDormant"
[02:24:25.241]        </control>
[02:24:25.241]        <control if="!hasDormant" while="" timeout="0" info="">
[02:24:25.241]          // if-block "!hasDormant"
[02:24:25.241]            // =>  TRUE
[02:24:25.241]          <block atomic="false" info="">
[02:24:25.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:24:25.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:25.244]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:24:25.245]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:24:25.245]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:24:25.246]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:25.247]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:24:25.248]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:24:25.248]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:24:25.249]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:24:25.249]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:24:25.253]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:24:25.253]          </block>
[02:24:25.253]          // end if-block "!hasDormant"
[02:24:25.253]        </control>
[02:24:25.253]        // end if-block "isSWJ"
[02:24:25.253]      </control>
[02:24:25.253]      <control if="!isSWJ" while="" timeout="0" info="">
[02:24:25.253]        // if-block "!isSWJ"
[02:24:25.254]          // =>  FALSE
[02:24:25.254]        // skip if-block "!isSWJ"
[02:24:25.254]      </control>
[02:24:25.255]      <block atomic="false" info="">
[02:24:25.255]        ReadDP(0x0);
[02:24:25.256]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:24:25.256]      </block>
[02:24:25.256]      // end if-block "protType == 2"
[02:24:25.256]    </control>
[02:24:25.256]  </sequence>
[02:24:25.256]  
[02:24:25.259]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:24:25.259]  
[02:24:25.259]  <debugvars>
[02:24:25.259]    // Pre-defined
[02:24:25.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:25.259]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:24:25.259]    __dp=0x00000000
[02:24:25.260]    __ap=0x00000000
[02:24:25.260]    __traceout=0x00000000      (Trace Disabled)
[02:24:25.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:25.260]    __FlashAddr=0x00000000
[02:24:25.260]    __FlashLen=0x00000000
[02:24:25.260]    __FlashArg=0x00000000
[02:24:25.260]    __FlashOp=0x00000000
[02:24:25.260]    __Result=0x00000000
[02:24:25.260]  </debugvars>
[02:24:25.260]  
[02:24:25.261]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:24:25.261]    <block atomic="false" info="">
[02:24:25.261]      __var SW_DP_ABORT       = 0x0;
[02:24:25.261]        // -> [SW_DP_ABORT <= 0x00000000]
[02:24:25.262]      __var DP_CTRL_STAT      = 0x4;
[02:24:25.262]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:24:25.262]      __var DP_SELECT         = 0x8;
[02:24:25.262]        // -> [DP_SELECT <= 0x00000008]
[02:24:25.262]      __var powered_down      = 0;
[02:24:25.263]        // -> [powered_down <= 0x00000000]
[02:24:25.263]      WriteDP(DP_SELECT, 0x00000000);
[02:24:25.268]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:24:25.268]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:24:25.269]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:24:25.270]        // -> [powered_down <= 0x00000001]
[02:24:25.270]    </block>
[02:24:25.270]    <control if="powered_down" while="" timeout="0" info="">
[02:24:25.270]      // if-block "powered_down"
[02:24:25.270]        // =>  TRUE
[02:24:25.270]      <block atomic="false" info="">
[02:24:25.270]        Message(0, "Debug/System power-up request sent");
[02:24:25.273]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:24:25.275]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:24:25.275]      </block>
[02:24:25.275]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:24:25.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:24:25.276]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:24:25.276]        // while-condition  =>  FALSE
[02:24:25.276]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:24:25.276]      </control>
[02:24:25.276]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:24:25.276]        // if-block "(__protocol & 0xFFFF) == 1"
[02:24:25.276]          // =>  FALSE
[02:24:25.278]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:24:25.278]      </control>
[02:24:25.278]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:24:25.278]        // if-block "(__protocol & 0xFFFF) == 2"
[02:24:25.278]          // =>  TRUE
[02:24:25.278]        <block atomic="false" info="">
[02:24:25.278]          Message(0, "executing SWD power up");
[02:24:25.280]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:24:25.282]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:24:25.282]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:24:25.284]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:24:25.284]        </block>
[02:24:25.284]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:24:25.284]      </control>
[02:24:25.284]      // end if-block "powered_down"
[02:24:25.284]    </control>
[02:24:25.284]    <block atomic="false" info="">
[02:24:25.284]      __var DEBUG_PORT_VAL    = 0;
[02:24:25.284]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:24:25.285]      __var ACCESS_POINT_VAL  = 0;
[02:24:25.285]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:24:25.285]      __ap = 1; 
[02:24:25.285]        // -> [__ap <= 0x00000001]
[02:24:25.285]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:24:25.292]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:24:25.292]      __ap = 4;
[02:24:25.292]        // -> [__ap <= 0x00000004]
[02:24:25.292]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:24:25.295]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:24:25.295]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:24:25.295]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:24:25.298]    </block>
[02:24:25.298]    <block atomic="false" info="">
[02:24:25.298]      __var nReset = 0x80;
[02:24:25.298]        // -> [nReset <= 0x00000080]
[02:24:25.298]      __var canReadPins = 0;
[02:24:25.298]        // -> [canReadPins <= 0x00000000]
[02:24:25.298]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:24:25.299]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:24:25.300]        // -> [canReadPins <= 0x00000001]
[02:24:25.300]    </block>
[02:24:25.300]    <control if="" while="1" timeout="200" info="">
[02:24:25.300]      // while "1"  (timeout="200")
[02:24:25.300]      // while-condition  =>  TRUE
[02:24:25.300]      // while "1"  (timeout="200")
[02:24:25.300]      // while-condition  =>  TRUE
[02:24:25.300]      // while "1"  (timeout="200")
[02:24:25.300]      // while-condition  =>  TRUE
[02:24:25.300]      // while "1"  (timeout="200")
[02:24:25.301]      // while-condition  =>  TRUE
[02:24:25.301]      // while "1"  (timeout="200")
[02:24:25.301]      // while-condition  =>  TRUE
[02:24:25.301]      // while "1"  (timeout="200")
[02:24:25.301]      // while-condition  =>  TRUE
[02:24:25.301]      // while "1"  (timeout="200")
[02:24:25.301]      // while-condition  =>  TRUE
[02:24:25.301]      // while "1"  (timeout="200")
[02:24:25.301]      // while-condition  =>  TRUE
[02:24:25.301]      // while "1"  (timeout="200")
[02:24:25.302]      // while-condition  =>  TRUE
[02:24:25.302]      // while "1"  (timeout="200")
[02:24:25.302]      // while-condition  =>  TRUE
[02:24:25.302]      // while "1"  (timeout="200")
[02:24:25.302]      // while-condition  =>  TRUE
[02:24:25.302]      // while "1"  (timeout="200")
[02:24:25.302]      // while-condition  =>  TRUE
[02:24:25.302]      // while "1"  (timeout="200")
[02:24:25.302]      // while-condition  =>  TRUE
[02:24:25.304]      // while "1"  (timeout="200")
[02:24:25.304]      // while-condition  =>  TRUE
[02:24:25.304]      // while "1"  (timeout="200")
[02:24:25.304]      // while-condition  =>  TRUE
[02:24:25.304]      // while "1"  (timeout="200")
[02:24:25.304]      // while-condition  =>  TRUE
[02:24:25.304]      // while "1"  (timeout="200")
[02:24:25.304]      // while-condition  =>  TRUE
[02:24:25.304]      // while "1"  (timeout="200")
[02:24:25.305]      // while-condition  =>  TRUE
[02:24:25.305]      // while "1"  (timeout="200")
[02:24:25.305]      // while-condition  =>  TRUE
[02:24:25.305]      // while "1"  (timeout="200")
[02:24:25.305]      // while-condition  =>  TRUE
[02:24:25.305]      // while "1"  (timeout="200")
[02:24:25.305]      // while-condition  =>  TRUE
[02:24:25.305]      // while "1"  (timeout="200")
[02:24:25.306]      // while-condition  =>  TRUE
[02:24:25.306]      // while "1"  (timeout="200")
[02:24:25.306]      // while-condition  =>  TRUE
[02:24:25.306]      // while "1"  (timeout="200")
[02:24:25.306]      // while-condition  =>  TRUE
[02:24:25.306]      // while "1"  (timeout="200")
[02:24:25.306]      // while-condition  =>  TRUE
[02:24:25.306]      // while "1"  (timeout="200")
[02:24:25.306]      // while-condition  =>  TRUE
[02:24:25.306]      // while "1"  (timeout="200")
[02:24:25.306]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.307]      // while-condition  =>  TRUE
[02:24:25.307]      // while "1"  (timeout="200")
[02:24:25.309]      // while-condition  =>  TRUE
[02:24:25.309]      // while "1"  (timeout="200")
[02:24:25.309]      // while-condition  =>  TRUE
[02:24:25.309]      // while "1"  (timeout="200")
[02:24:25.309]      // while-condition  =>  TRUE
[02:24:25.309]      // while "1"  (timeout="200")
[02:24:25.309]      // while-condition  =>  TRUE
[02:24:25.309]      // while "1"  (timeout="200")
[02:24:25.309]      // while-condition  =>  TRUE
[02:24:25.309]      // while "1"  (timeout="200")
[02:24:25.310]      // while-condition  =>  TRUE
[02:24:25.310]      // while "1"  (timeout="200")
[02:24:25.310]      // while-condition  =>  TRUE
[02:24:25.310]      // while "1"  (timeout="200")
[02:24:25.310]      // while-condition  =>  TRUE
[02:24:25.310]      // while "1"  (timeout="200")
[02:24:25.310]      // while-condition  =>  TRUE
[02:24:25.310]      // while "1"  (timeout="200")
[02:24:25.311]      // while-condition  =>  TRUE
[02:24:25.311]      // while "1"  (timeout="200")
[02:24:25.311]      // while-condition  =>  TRUE
[02:24:25.311]      // while "1"  (timeout="200")
[02:24:25.311]      // while-condition  =>  TRUE
[02:24:25.311]      // while "1"  (timeout="200")
[02:24:25.311]      // while-condition  =>  TRUE
[02:24:25.311]      // while "1"  (timeout="200")
[02:24:25.311]      // while-condition  =>  TRUE
[02:24:25.312]      // while "1"  (timeout="200")
[02:24:25.312]      // while-condition  =>  TRUE
[02:24:25.312]      // while "1"  (timeout="200")
[02:24:25.312]      // while-condition  =>  TRUE
[02:24:25.312]      // while "1"  (timeout="200")
[02:24:25.312]      // while-condition  =>  TRUE
[02:24:25.312]      // while "1"  (timeout="200")
[02:24:25.312]      // while-condition  =>  TRUE
[02:24:25.312]      // while "1"  (timeout="200")
[02:24:25.312]      // while-condition  =>  TRUE
[02:24:25.312]      // while "1"  (timeout="200")
[02:24:25.313]      // while-condition  =>  TRUE
[02:24:25.314]      // while "1"  (timeout="200")
[02:24:25.314]      // while  =>  TIMEOUT
[02:24:25.314]      // end while "1"
[02:24:25.314]    </control>
[02:24:25.314]    <control if="canReadPins" while="" timeout="0" info="">
[02:24:25.314]      // if-block "canReadPins"
[02:24:25.315]        // =>  TRUE
[02:24:25.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:24:25.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:24:25.316]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:24:25.316]        // while-condition  =>  FALSE
[02:24:25.317]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:24:25.317]      </control>
[02:24:25.317]      // end if-block "canReadPins"
[02:24:25.317]    </control>
[02:24:25.317]    <control if="!canReadPins" while="" timeout="0" info="">
[02:24:25.317]      // if-block "!canReadPins"
[02:24:25.317]        // =>  FALSE
[02:24:25.317]      // skip if-block "!canReadPins"
[02:24:25.317]    </control>
[02:24:25.317]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:24:25.318]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:24:25.318]        // =>  TRUE
[02:24:25.318]      <block atomic="false" info="">
[02:24:25.318]        WriteAP(0x00, 0x190008);
[02:24:25.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:24:25.321]        WriteAP(0xF0, 0x01);
[02:24:25.324]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:24:25.324]      </block>
[02:24:25.324]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:24:25.324]    </control>
[02:24:25.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:24:25.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:24:25.324]        // =>  FALSE
[02:24:25.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:24:25.325]    </control>
[02:24:25.325]    <block atomic="false" info="">
[02:24:25.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:24:25.331]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:24:25.331]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:24:25.331]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:24:25.333]      __ap = 0; //lets make sure we reset the access point selection
[02:24:25.333]        // -> [__ap <= 0x00000000]
[02:24:25.333]    </block>
[02:24:25.333]  </sequence>
[02:24:25.333]  
[02:24:25.355]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:24:25.355]  
[02:24:25.355]  <debugvars>
[02:24:25.355]    // Pre-defined
[02:24:25.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:24:25.355]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:24:25.355]    __dp=0x00000000
[02:24:25.355]    __ap=0x00000000
[02:24:25.355]    __traceout=0x00000000      (Trace Disabled)
[02:24:25.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:24:25.356]    __FlashAddr=0x00000000
[02:24:25.356]    __FlashLen=0x00000000
[02:24:25.356]    __FlashArg=0x00000000
[02:24:25.356]    __FlashOp=0x00000000
[02:24:25.356]    __Result=0x00000000
[02:24:25.356]  </debugvars>
[02:24:25.356]  
[02:24:25.356]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:24:25.356]    <block atomic="false" info="">
[02:24:25.356]      __var deviceID = 0;
[02:24:25.357]        // -> [deviceID <= 0x00000000]
[02:24:25.357]      __var version = 0;
[02:24:25.357]        // -> [version <= 0x00000000]
[02:24:25.357]      __var partNum = 0;
[02:24:25.357]        // -> [partNum <= 0x00000000]
[02:24:25.357]      __var manuf = 0;
[02:24:25.357]        // -> [manuf <= 0x00000000]
[02:24:25.357]      __var isMSPM0G1X0X_G3X0X = 0;
[02:24:25.357]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:24:25.357]      __var isProduction = 0;
[02:24:25.357]        // -> [isProduction <= 0x00000000]
[02:24:25.358]      __var continueId = 0;
[02:24:25.358]        // -> [continueId <= 0x00000000]
[02:24:25.358]      deviceID =   Read32(0x41C40004);
[02:24:25.364]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:24:25.364]        // -> [deviceID <= 0x2BB8802F]
[02:24:25.364]      version = deviceID >> 28;
[02:24:25.364]        // -> [version <= 0x00000002]
[02:24:25.364]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:24:25.364]        // -> [partNum <= 0x0000BB88]
[02:24:25.364]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:24:25.364]        // -> [manuf <= 0x00000017]
[02:24:25.364]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:24:25.364]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:24:25.364]      isProduction = (version > 0);
[02:24:25.365]        // -> [isProduction <= 0x00000001]
[02:24:25.365]    </block>
[02:24:25.365]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:24:25.365]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:24:25.365]        // =>  FALSE
[02:24:25.365]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:24:25.365]    </control>
[02:24:25.365]    <control if="continueId == 4" while="" timeout="0" info="">
[02:24:25.365]      // if-block "continueId == 4"
[02:24:25.366]        // =>  FALSE
[02:24:25.366]      // skip if-block "continueId == 4"
[02:24:25.366]    </control>
[02:24:25.366]    <control if="!isProduction" while="" timeout="0" info="">
[02:24:25.366]      // if-block "!isProduction"
[02:24:25.366]        // =>  FALSE
[02:24:25.367]      // skip if-block "!isProduction"
[02:24:25.367]    </control>
[02:24:25.367]  </sequence>
[02:24:25.367]  
[02:29:30.075]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:29:30.075]  
[02:29:30.085]  <debugvars>
[02:29:30.085]    // Pre-defined
[02:29:30.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:29:30.085]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:29:30.085]    __dp=0x00000000
[02:29:30.085]    __ap=0x00000000
[02:29:30.085]    __traceout=0x00000000      (Trace Disabled)
[02:29:30.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:29:30.085]    __FlashAddr=0x00000000
[02:29:30.085]    __FlashLen=0x00000000
[02:29:30.085]    __FlashArg=0x00000000
[02:29:30.086]    __FlashOp=0x00000000
[02:29:30.086]    __Result=0x00000000
[02:29:30.086]  </debugvars>
[02:29:30.086]  
[02:29:30.086]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:29:30.086]    <block atomic="false" info="">
[02:29:30.086]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:29:30.086]        // -> [isSWJ <= 0x00000001]
[02:29:30.086]      __var hasDormant = __protocol & 0x00020000;
[02:29:30.086]        // -> [hasDormant <= 0x00000000]
[02:29:30.086]      __var protType   = __protocol & 0x0000FFFF;
[02:29:30.086]        // -> [protType <= 0x00000002]
[02:29:30.087]    </block>
[02:29:30.087]    <control if="protType == 1" while="" timeout="0" info="">
[02:29:30.087]      // if-block "protType == 1"
[02:29:30.087]        // =>  FALSE
[02:29:30.087]      // skip if-block "protType == 1"
[02:29:30.087]    </control>
[02:29:30.087]    <control if="protType == 2" while="" timeout="0" info="">
[02:29:30.087]      // if-block "protType == 2"
[02:29:30.087]        // =>  TRUE
[02:29:30.087]      <control if="isSWJ" while="" timeout="0" info="">
[02:29:30.087]        // if-block "isSWJ"
[02:29:30.087]          // =>  TRUE
[02:29:30.089]        <control if="hasDormant" while="" timeout="0" info="">
[02:29:30.089]          // if-block "hasDormant"
[02:29:30.089]            // =>  FALSE
[02:29:30.089]          // skip if-block "hasDormant"
[02:29:30.089]        </control>
[02:29:30.089]        <control if="!hasDormant" while="" timeout="0" info="">
[02:29:30.089]          // if-block "!hasDormant"
[02:29:30.089]            // =>  TRUE
[02:29:30.089]          <block atomic="false" info="">
[02:29:30.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:29:30.092]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:29:30.092]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:29:30.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:29:30.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:29:30.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:29:30.100]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:29:30.101]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:29:30.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:29:30.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:29:30.104]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:29:30.106]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:29:30.106]          </block>
[02:29:30.106]          // end if-block "!hasDormant"
[02:29:30.106]        </control>
[02:29:30.106]        // end if-block "isSWJ"
[02:29:30.106]      </control>
[02:29:30.106]      <control if="!isSWJ" while="" timeout="0" info="">
[02:29:30.106]        // if-block "!isSWJ"
[02:29:30.106]          // =>  FALSE
[02:29:30.107]        // skip if-block "!isSWJ"
[02:29:30.107]      </control>
[02:29:30.107]      <block atomic="false" info="">
[02:29:30.107]        ReadDP(0x0);
[02:29:30.109]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:29:30.109]      </block>
[02:29:30.110]      // end if-block "protType == 2"
[02:29:30.110]    </control>
[02:29:30.110]  </sequence>
[02:29:30.110]  
[02:29:30.117]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:29:30.117]  
[02:29:30.118]  <debugvars>
[02:29:30.118]    // Pre-defined
[02:29:30.119]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:29:30.119]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:29:30.119]    __dp=0x00000000
[02:29:30.119]    __ap=0x00000000
[02:29:30.119]    __traceout=0x00000000      (Trace Disabled)
[02:29:30.119]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:29:30.119]    __FlashAddr=0x00000000
[02:29:30.119]    __FlashLen=0x00000000
[02:29:30.119]    __FlashArg=0x00000000
[02:29:30.119]    __FlashOp=0x00000000
[02:29:30.120]    __Result=0x00000000
[02:29:30.120]  </debugvars>
[02:29:30.120]  
[02:29:30.120]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:29:30.120]    <block atomic="false" info="">
[02:29:30.120]      __var SW_DP_ABORT       = 0x0;
[02:29:30.120]        // -> [SW_DP_ABORT <= 0x00000000]
[02:29:30.121]      __var DP_CTRL_STAT      = 0x4;
[02:29:30.121]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:29:30.121]      __var DP_SELECT         = 0x8;
[02:29:30.121]        // -> [DP_SELECT <= 0x00000008]
[02:29:30.121]      __var powered_down      = 0;
[02:29:30.121]        // -> [powered_down <= 0x00000000]
[02:29:30.121]      WriteDP(DP_SELECT, 0x00000000);
[02:29:30.123]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:29:30.123]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:29:30.128]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:29:30.128]        // -> [powered_down <= 0x00000001]
[02:29:30.128]    </block>
[02:29:30.128]    <control if="powered_down" while="" timeout="0" info="">
[02:29:30.128]      // if-block "powered_down"
[02:29:30.128]        // =>  TRUE
[02:29:30.128]      <block atomic="false" info="">
[02:29:30.128]        Message(0, "Debug/System power-up request sent");
[02:29:30.131]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:29:30.133]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:29:30.133]      </block>
[02:29:30.133]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:29:30.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:29:30.138]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:29:30.139]        // while-condition  =>  FALSE
[02:29:30.139]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:29:30.139]      </control>
[02:29:30.139]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:29:30.139]        // if-block "(__protocol & 0xFFFF) == 1"
[02:29:30.139]          // =>  FALSE
[02:29:30.139]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:29:30.139]      </control>
[02:29:30.139]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:29:30.139]        // if-block "(__protocol & 0xFFFF) == 2"
[02:29:30.140]          // =>  TRUE
[02:29:30.140]        <block atomic="false" info="">
[02:29:30.140]          Message(0, "executing SWD power up");
[02:29:30.142]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:29:30.145]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:29:30.145]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:29:30.151]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:29:30.152]        </block>
[02:29:30.152]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:29:30.152]      </control>
[02:29:30.152]      // end if-block "powered_down"
[02:29:30.152]    </control>
[02:29:30.152]    <block atomic="false" info="">
[02:29:30.153]      __var DEBUG_PORT_VAL    = 0;
[02:29:30.153]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:29:30.153]      __var ACCESS_POINT_VAL  = 0;
[02:29:30.153]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:29:30.153]      __ap = 1; 
[02:29:30.153]        // -> [__ap <= 0x00000001]
[02:29:30.153]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:29:30.157]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:29:30.157]      __ap = 4;
[02:29:30.157]        // -> [__ap <= 0x00000004]
[02:29:30.157]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:29:30.160]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:29:30.160]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:29:30.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:29:30.163]    </block>
[02:29:30.163]    <block atomic="false" info="">
[02:29:30.163]      __var nReset = 0x80;
[02:29:30.163]        // -> [nReset <= 0x00000080]
[02:29:30.163]      __var canReadPins = 0;
[02:29:30.163]        // -> [canReadPins <= 0x00000000]
[02:29:30.163]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:29:30.166]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:29:30.166]        // -> [canReadPins <= 0x00000001]
[02:29:30.166]    </block>
[02:29:30.166]    <control if="" while="1" timeout="200" info="">
[02:29:30.166]      // while "1"  (timeout="200")
[02:29:30.166]      // while-condition  =>  TRUE
[02:29:30.167]      // while "1"  (timeout="200")
[02:29:30.167]      // while-condition  =>  TRUE
[02:29:30.167]      // while "1"  (timeout="200")
[02:29:30.167]      // while-condition  =>  TRUE
[02:29:30.167]      // while "1"  (timeout="200")
[02:29:30.168]      // while-condition  =>  TRUE
[02:29:30.168]      // while "1"  (timeout="200")
[02:29:30.168]      // while-condition  =>  TRUE
[02:29:30.168]      // while "1"  (timeout="200")
[02:29:30.168]      // while-condition  =>  TRUE
[02:29:30.168]      // while "1"  (timeout="200")
[02:29:30.168]      // while-condition  =>  TRUE
[02:29:30.168]      // while "1"  (timeout="200")
[02:29:30.168]      // while-condition  =>  TRUE
[02:29:30.168]      // while "1"  (timeout="200")
[02:29:30.169]      // while-condition  =>  TRUE
[02:29:30.169]      // while "1"  (timeout="200")
[02:29:30.169]      // while-condition  =>  TRUE
[02:29:30.169]      // while "1"  (timeout="200")
[02:29:30.169]      // while-condition  =>  TRUE
[02:29:30.169]      // while "1"  (timeout="200")
[02:29:30.169]      // while-condition  =>  TRUE
[02:29:30.169]      // while "1"  (timeout="200")
[02:29:30.169]      // while-condition  =>  TRUE
[02:29:30.169]      // while "1"  (timeout="200")
[02:29:30.170]      // while-condition  =>  TRUE
[02:29:30.170]      // while "1"  (timeout="200")
[02:29:30.170]      // while-condition  =>  TRUE
[02:29:30.170]      // while "1"  (timeout="200")
[02:29:30.170]      // while-condition  =>  TRUE
[02:29:30.170]      // while "1"  (timeout="200")
[02:29:30.170]      // while-condition  =>  TRUE
[02:29:30.170]      // while "1"  (timeout="200")
[02:29:30.170]      // while-condition  =>  TRUE
[02:29:30.170]      // while "1"  (timeout="200")
[02:29:30.170]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.171]      // while "1"  (timeout="200")
[02:29:30.171]      // while-condition  =>  TRUE
[02:29:30.173]      // while "1"  (timeout="200")
[02:29:30.173]      // while  =>  TIMEOUT
[02:29:30.173]      // end while "1"
[02:29:30.173]    </control>
[02:29:30.173]    <control if="canReadPins" while="" timeout="0" info="">
[02:29:30.173]      // if-block "canReadPins"
[02:29:30.173]        // =>  TRUE
[02:29:30.173]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:29:30.173]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:29:30.176]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:29:30.177]        // while-condition  =>  FALSE
[02:29:30.177]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:29:30.177]      </control>
[02:29:30.177]      // end if-block "canReadPins"
[02:29:30.177]    </control>
[02:29:30.177]    <control if="!canReadPins" while="" timeout="0" info="">
[02:29:30.177]      // if-block "!canReadPins"
[02:29:30.177]        // =>  FALSE
[02:29:30.178]      // skip if-block "!canReadPins"
[02:29:30.178]    </control>
[02:29:30.178]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:29:30.178]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:29:30.178]        // =>  TRUE
[02:29:30.178]      <block atomic="false" info="">
[02:29:30.178]        WriteAP(0x00, 0x190008);
[02:29:30.187]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:29:30.187]        WriteAP(0xF0, 0x01);
[02:29:30.196]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:29:30.196]      </block>
[02:29:30.196]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:29:30.196]    </control>
[02:29:30.196]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:29:30.196]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:29:30.197]        // =>  FALSE
[02:29:30.197]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:29:30.197]    </control>
[02:29:30.197]    <block atomic="false" info="">
[02:29:30.197]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:29:30.205]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:29:30.205]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:29:30.205]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:29:30.207]      __ap = 0; //lets make sure we reset the access point selection
[02:29:30.207]        // -> [__ap <= 0x00000000]
[02:29:30.208]    </block>
[02:29:30.208]  </sequence>
[02:29:30.208]  
[02:29:30.259]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:29:30.259]  
[02:29:30.259]  <debugvars>
[02:29:30.260]    // Pre-defined
[02:29:30.260]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:29:30.260]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:29:30.260]    __dp=0x00000000
[02:29:30.260]    __ap=0x00000000
[02:29:30.260]    __traceout=0x00000000      (Trace Disabled)
[02:29:30.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:29:30.260]    __FlashAddr=0x00000000
[02:29:30.260]    __FlashLen=0x00000000
[02:29:30.261]    __FlashArg=0x00000000
[02:29:30.261]    __FlashOp=0x00000000
[02:29:30.261]    __Result=0x00000000
[02:29:30.261]  </debugvars>
[02:29:30.261]  
[02:29:30.261]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:29:30.261]    <block atomic="false" info="">
[02:29:30.261]      __var deviceID = 0;
[02:29:30.261]        // -> [deviceID <= 0x00000000]
[02:29:30.261]      __var version = 0;
[02:29:30.262]        // -> [version <= 0x00000000]
[02:29:30.262]      __var partNum = 0;
[02:29:30.262]        // -> [partNum <= 0x00000000]
[02:29:30.262]      __var manuf = 0;
[02:29:30.262]        // -> [manuf <= 0x00000000]
[02:29:30.262]      __var isMSPM0G1X0X_G3X0X = 0;
[02:29:30.262]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:29:30.262]      __var isProduction = 0;
[02:29:30.263]        // -> [isProduction <= 0x00000000]
[02:29:30.263]      __var continueId = 0;
[02:29:30.263]        // -> [continueId <= 0x00000000]
[02:29:30.263]      deviceID =   Read32(0x41C40004);
[02:29:30.273]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:29:30.273]        // -> [deviceID <= 0x2BB8802F]
[02:29:30.273]      version = deviceID >> 28;
[02:29:30.273]        // -> [version <= 0x00000002]
[02:29:30.273]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:29:30.273]        // -> [partNum <= 0x0000BB88]
[02:29:30.273]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:29:30.273]        // -> [manuf <= 0x00000017]
[02:29:30.274]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:29:30.274]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:29:30.274]      isProduction = (version > 0);
[02:29:30.274]        // -> [isProduction <= 0x00000001]
[02:29:30.274]    </block>
[02:29:30.274]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:29:30.274]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:29:30.274]        // =>  FALSE
[02:29:30.275]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:29:30.275]    </control>
[02:29:30.275]    <control if="continueId == 4" while="" timeout="0" info="">
[02:29:30.275]      // if-block "continueId == 4"
[02:29:30.275]        // =>  FALSE
[02:29:30.275]      // skip if-block "continueId == 4"
[02:29:30.275]    </control>
[02:29:30.275]    <control if="!isProduction" while="" timeout="0" info="">
[02:29:30.275]      // if-block "!isProduction"
[02:29:30.275]        // =>  FALSE
[02:29:30.276]      // skip if-block "!isProduction"
[02:29:30.276]    </control>
[02:29:30.276]  </sequence>
[02:29:30.276]  
[02:30:39.062]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:30:39.062]  
[02:30:39.070]  <debugvars>
[02:30:39.070]    // Pre-defined
[02:30:39.070]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:30:39.070]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:30:39.070]    __dp=0x00000000
[02:30:39.071]    __ap=0x00000000
[02:30:39.071]    __traceout=0x00000000      (Trace Disabled)
[02:30:39.071]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:30:39.071]    __FlashAddr=0x00000000
[02:30:39.071]    __FlashLen=0x00000000
[02:30:39.072]    __FlashArg=0x00000000
[02:30:39.072]    __FlashOp=0x00000000
[02:30:39.072]    __Result=0x00000000
[02:30:39.072]  </debugvars>
[02:30:39.072]  
[02:30:39.072]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:30:39.072]    <block atomic="false" info="">
[02:30:39.073]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:30:39.073]        // -> [isSWJ <= 0x00000001]
[02:30:39.073]      __var hasDormant = __protocol & 0x00020000;
[02:30:39.073]        // -> [hasDormant <= 0x00000000]
[02:30:39.073]      __var protType   = __protocol & 0x0000FFFF;
[02:30:39.073]        // -> [protType <= 0x00000002]
[02:30:39.073]    </block>
[02:30:39.073]    <control if="protType == 1" while="" timeout="0" info="">
[02:30:39.073]      // if-block "protType == 1"
[02:30:39.073]        // =>  FALSE
[02:30:39.074]      // skip if-block "protType == 1"
[02:30:39.074]    </control>
[02:30:39.074]    <control if="protType == 2" while="" timeout="0" info="">
[02:30:39.074]      // if-block "protType == 2"
[02:30:39.074]        // =>  TRUE
[02:30:39.074]      <control if="isSWJ" while="" timeout="0" info="">
[02:30:39.074]        // if-block "isSWJ"
[02:30:39.074]          // =>  TRUE
[02:30:39.074]        <control if="hasDormant" while="" timeout="0" info="">
[02:30:39.074]          // if-block "hasDormant"
[02:30:39.075]            // =>  FALSE
[02:30:39.075]          // skip if-block "hasDormant"
[02:30:39.075]        </control>
[02:30:39.075]        <control if="!hasDormant" while="" timeout="0" info="">
[02:30:39.075]          // if-block "!hasDormant"
[02:30:39.075]            // =>  TRUE
[02:30:39.075]          <block atomic="false" info="">
[02:30:39.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:30:39.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:30:39.077]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:30:39.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:30:39.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:30:39.080]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:30:39.082]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:30:39.082]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:30:39.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:30:39.084]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:30:39.084]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:30:39.085]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:30:39.086]          </block>
[02:30:39.086]          // end if-block "!hasDormant"
[02:30:39.086]        </control>
[02:30:39.086]        // end if-block "isSWJ"
[02:30:39.086]      </control>
[02:30:39.086]      <control if="!isSWJ" while="" timeout="0" info="">
[02:30:39.086]        // if-block "!isSWJ"
[02:30:39.086]          // =>  FALSE
[02:30:39.086]        // skip if-block "!isSWJ"
[02:30:39.086]      </control>
[02:30:39.086]      <block atomic="false" info="">
[02:30:39.087]        ReadDP(0x0);
[02:30:39.088]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:30:39.088]      </block>
[02:30:39.088]      // end if-block "protType == 2"
[02:30:39.088]    </control>
[02:30:39.088]  </sequence>
[02:30:39.088]  
[02:30:39.094]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:30:39.094]  
[02:30:39.094]  <debugvars>
[02:30:39.094]    // Pre-defined
[02:30:39.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:30:39.094]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:30:39.094]    __dp=0x00000000
[02:30:39.094]    __ap=0x00000000
[02:30:39.094]    __traceout=0x00000000      (Trace Disabled)
[02:30:39.094]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:30:39.094]    __FlashAddr=0x00000000
[02:30:39.094]    __FlashLen=0x00000000
[02:30:39.095]    __FlashArg=0x00000000
[02:30:39.095]    __FlashOp=0x00000000
[02:30:39.095]    __Result=0x00000000
[02:30:39.095]  </debugvars>
[02:30:39.095]  
[02:30:39.096]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:30:39.096]    <block atomic="false" info="">
[02:30:39.096]      __var SW_DP_ABORT       = 0x0;
[02:30:39.096]        // -> [SW_DP_ABORT <= 0x00000000]
[02:30:39.096]      __var DP_CTRL_STAT      = 0x4;
[02:30:39.096]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:30:39.096]      __var DP_SELECT         = 0x8;
[02:30:39.096]        // -> [DP_SELECT <= 0x00000008]
[02:30:39.096]      __var powered_down      = 0;
[02:30:39.097]        // -> [powered_down <= 0x00000000]
[02:30:39.097]      WriteDP(DP_SELECT, 0x00000000);
[02:30:39.098]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:30:39.099]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:30:39.100]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:30:39.100]        // -> [powered_down <= 0x00000001]
[02:30:39.100]    </block>
[02:30:39.100]    <control if="powered_down" while="" timeout="0" info="">
[02:30:39.101]      // if-block "powered_down"
[02:30:39.101]        // =>  TRUE
[02:30:39.101]      <block atomic="false" info="">
[02:30:39.101]        Message(0, "Debug/System power-up request sent");
[02:30:39.103]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:30:39.106]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:30:39.106]      </block>
[02:30:39.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:30:39.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:30:39.108]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:30:39.108]        // while-condition  =>  FALSE
[02:30:39.108]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:30:39.108]      </control>
[02:30:39.108]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:30:39.108]        // if-block "(__protocol & 0xFFFF) == 1"
[02:30:39.108]          // =>  FALSE
[02:30:39.108]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:30:39.108]      </control>
[02:30:39.108]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:30:39.108]        // if-block "(__protocol & 0xFFFF) == 2"
[02:30:39.108]          // =>  TRUE
[02:30:39.108]        <block atomic="false" info="">
[02:30:39.109]          Message(0, "executing SWD power up");
[02:30:39.111]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:30:39.113]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:30:39.113]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:30:39.115]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:30:39.115]        </block>
[02:30:39.115]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:30:39.115]      </control>
[02:30:39.115]      // end if-block "powered_down"
[02:30:39.115]    </control>
[02:30:39.115]    <block atomic="false" info="">
[02:30:39.115]      __var DEBUG_PORT_VAL    = 0;
[02:30:39.115]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:30:39.116]      __var ACCESS_POINT_VAL  = 0;
[02:30:39.116]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:30:39.116]      __ap = 1; 
[02:30:39.116]        // -> [__ap <= 0x00000001]
[02:30:39.116]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:30:39.121]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:30:39.121]      __ap = 4;
[02:30:39.122]        // -> [__ap <= 0x00000004]
[02:30:39.122]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:30:39.124]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:30:39.125]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:30:39.125]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:30:39.127]    </block>
[02:30:39.127]    <block atomic="false" info="">
[02:30:39.127]      __var nReset = 0x80;
[02:30:39.127]        // -> [nReset <= 0x00000080]
[02:30:39.127]      __var canReadPins = 0;
[02:30:39.127]        // -> [canReadPins <= 0x00000000]
[02:30:39.127]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:30:39.128]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:30:39.128]        // -> [canReadPins <= 0x00000001]
[02:30:39.128]    </block>
[02:30:39.128]    <control if="" while="1" timeout="200" info="">
[02:30:39.128]      // while "1"  (timeout="200")
[02:30:39.128]      // while-condition  =>  TRUE
[02:30:39.130]      // while "1"  (timeout="200")
[02:30:39.130]      // while-condition  =>  TRUE
[02:30:39.130]      // while "1"  (timeout="200")
[02:30:39.130]      // while-condition  =>  TRUE
[02:30:39.130]      // while "1"  (timeout="200")
[02:30:39.130]      // while-condition  =>  TRUE
[02:30:39.130]      // while "1"  (timeout="200")
[02:30:39.130]      // while-condition  =>  TRUE
[02:30:39.130]      // while "1"  (timeout="200")
[02:30:39.130]      // while-condition  =>  TRUE
[02:30:39.130]      // while "1"  (timeout="200")
[02:30:39.131]      // while-condition  =>  TRUE
[02:30:39.131]      // while "1"  (timeout="200")
[02:30:39.131]      // while-condition  =>  TRUE
[02:30:39.131]      // while "1"  (timeout="200")
[02:30:39.131]      // while-condition  =>  TRUE
[02:30:39.131]      // while "1"  (timeout="200")
[02:30:39.131]      // while-condition  =>  TRUE
[02:30:39.131]      // while "1"  (timeout="200")
[02:30:39.131]      // while-condition  =>  TRUE
[02:30:39.131]      // while "1"  (timeout="200")
[02:30:39.131]      // while-condition  =>  TRUE
[02:30:39.132]      // while "1"  (timeout="200")
[02:30:39.132]      // while-condition  =>  TRUE
[02:30:39.132]      // while "1"  (timeout="200")
[02:30:39.132]      // while-condition  =>  TRUE
[02:30:39.132]      // while "1"  (timeout="200")
[02:30:39.132]      // while-condition  =>  TRUE
[02:30:39.132]      // while "1"  (timeout="200")
[02:30:39.132]      // while-condition  =>  TRUE
[02:30:39.132]      // while "1"  (timeout="200")
[02:30:39.132]      // while-condition  =>  TRUE
[02:30:39.132]      // while "1"  (timeout="200")
[02:30:39.133]      // while-condition  =>  TRUE
[02:30:39.133]      // while "1"  (timeout="200")
[02:30:39.133]      // while-condition  =>  TRUE
[02:30:39.133]      // while "1"  (timeout="200")
[02:30:39.133]      // while-condition  =>  TRUE
[02:30:39.133]      // while "1"  (timeout="200")
[02:30:39.133]      // while-condition  =>  TRUE
[02:30:39.133]      // while "1"  (timeout="200")
[02:30:39.133]      // while-condition  =>  TRUE
[02:30:39.133]      // while "1"  (timeout="200")
[02:30:39.133]      // while-condition  =>  TRUE
[02:30:39.133]      // while "1"  (timeout="200")
[02:30:39.134]      // while-condition  =>  TRUE
[02:30:39.134]      // while "1"  (timeout="200")
[02:30:39.134]      // while-condition  =>  TRUE
[02:30:39.134]      // while "1"  (timeout="200")
[02:30:39.134]      // while-condition  =>  TRUE
[02:30:39.134]      // while "1"  (timeout="200")
[02:30:39.134]      // while-condition  =>  TRUE
[02:30:39.134]      // while "1"  (timeout="200")
[02:30:39.134]      // while-condition  =>  TRUE
[02:30:39.134]      // while "1"  (timeout="200")
[02:30:39.134]      // while-condition  =>  TRUE
[02:30:39.135]      // while "1"  (timeout="200")
[02:30:39.135]      // while-condition  =>  TRUE
[02:30:39.135]      // while "1"  (timeout="200")
[02:30:39.135]      // while-condition  =>  TRUE
[02:30:39.135]      // while "1"  (timeout="200")
[02:30:39.135]      // while-condition  =>  TRUE
[02:30:39.135]      // while "1"  (timeout="200")
[02:30:39.135]      // while-condition  =>  TRUE
[02:30:39.135]      // while "1"  (timeout="200")
[02:30:39.135]      // while-condition  =>  TRUE
[02:30:39.135]      // while "1"  (timeout="200")
[02:30:39.135]      // while-condition  =>  TRUE
[02:30:39.136]      // while "1"  (timeout="200")
[02:30:39.136]      // while-condition  =>  TRUE
[02:30:39.136]      // while "1"  (timeout="200")
[02:30:39.136]      // while-condition  =>  TRUE
[02:30:39.136]      // while "1"  (timeout="200")
[02:30:39.136]      // while-condition  =>  TRUE
[02:30:39.136]      // while "1"  (timeout="200")
[02:30:39.136]      // while-condition  =>  TRUE
[02:30:39.136]      // while "1"  (timeout="200")
[02:30:39.136]      // while-condition  =>  TRUE
[02:30:39.136]      // while "1"  (timeout="200")
[02:30:39.136]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.137]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.137]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.137]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.137]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.137]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.137]      // while-condition  =>  TRUE
[02:30:39.137]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.138]      // while-condition  =>  TRUE
[02:30:39.138]      // while "1"  (timeout="200")
[02:30:39.140]      // while-condition  =>  TRUE
[02:30:39.140]      // while "1"  (timeout="200")
[02:30:39.140]      // while-condition  =>  TRUE
[02:30:39.140]      // while "1"  (timeout="200")
[02:30:39.140]      // while-condition  =>  TRUE
[02:30:39.140]      // while "1"  (timeout="200")
[02:30:39.140]      // while-condition  =>  TRUE
[02:30:39.140]      // while "1"  (timeout="200")
[02:30:39.141]      // while-condition  =>  TRUE
[02:30:39.141]      // while "1"  (timeout="200")
[02:30:39.141]      // while-condition  =>  TRUE
[02:30:39.141]      // while "1"  (timeout="200")
[02:30:39.141]      // while-condition  =>  TRUE
[02:30:39.141]      // while "1"  (timeout="200")
[02:30:39.141]      // while-condition  =>  TRUE
[02:30:39.142]      // while "1"  (timeout="200")
[02:30:39.142]      // while  =>  TIMEOUT
[02:30:39.142]      // end while "1"
[02:30:39.142]    </control>
[02:30:39.142]    <control if="canReadPins" while="" timeout="0" info="">
[02:30:39.142]      // if-block "canReadPins"
[02:30:39.142]        // =>  TRUE
[02:30:39.142]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:30:39.142]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:30:39.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:30:39.146]        // while-condition  =>  FALSE
[02:30:39.146]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:30:39.147]      </control>
[02:30:39.147]      // end if-block "canReadPins"
[02:30:39.147]    </control>
[02:30:39.147]    <control if="!canReadPins" while="" timeout="0" info="">
[02:30:39.147]      // if-block "!canReadPins"
[02:30:39.147]        // =>  FALSE
[02:30:39.147]      // skip if-block "!canReadPins"
[02:30:39.148]    </control>
[02:30:39.148]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:30:39.148]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:30:39.148]        // =>  TRUE
[02:30:39.148]      <block atomic="false" info="">
[02:30:39.148]        WriteAP(0x00, 0x190008);
[02:30:39.150]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:30:39.150]        WriteAP(0xF0, 0x01);
[02:30:39.157]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:30:39.157]      </block>
[02:30:39.157]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:30:39.157]    </control>
[02:30:39.157]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:30:39.157]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:30:39.157]        // =>  FALSE
[02:30:39.157]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:30:39.157]    </control>
[02:30:39.157]    <block atomic="false" info="">
[02:30:39.157]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:30:39.161]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:30:39.161]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:30:39.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:30:39.163]      __ap = 0; //lets make sure we reset the access point selection
[02:30:39.163]        // -> [__ap <= 0x00000000]
[02:30:39.163]    </block>
[02:30:39.163]  </sequence>
[02:30:39.163]  
[02:30:39.186]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:30:39.186]  
[02:30:39.186]  <debugvars>
[02:30:39.186]    // Pre-defined
[02:30:39.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:30:39.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:30:39.186]    __dp=0x00000000
[02:30:39.186]    __ap=0x00000000
[02:30:39.186]    __traceout=0x00000000      (Trace Disabled)
[02:30:39.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:30:39.187]    __FlashAddr=0x00000000
[02:30:39.187]    __FlashLen=0x00000000
[02:30:39.187]    __FlashArg=0x00000000
[02:30:39.187]    __FlashOp=0x00000000
[02:30:39.187]    __Result=0x00000000
[02:30:39.187]  </debugvars>
[02:30:39.187]  
[02:30:39.187]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:30:39.187]    <block atomic="false" info="">
[02:30:39.187]      __var deviceID = 0;
[02:30:39.187]        // -> [deviceID <= 0x00000000]
[02:30:39.187]      __var version = 0;
[02:30:39.188]        // -> [version <= 0x00000000]
[02:30:39.188]      __var partNum = 0;
[02:30:39.188]        // -> [partNum <= 0x00000000]
[02:30:39.188]      __var manuf = 0;
[02:30:39.188]        // -> [manuf <= 0x00000000]
[02:30:39.188]      __var isMSPM0G1X0X_G3X0X = 0;
[02:30:39.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:30:39.188]      __var isProduction = 0;
[02:30:39.188]        // -> [isProduction <= 0x00000000]
[02:30:39.188]      __var continueId = 0;
[02:30:39.188]        // -> [continueId <= 0x00000000]
[02:30:39.188]      deviceID =   Read32(0x41C40004);
[02:30:39.196]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:30:39.196]        // -> [deviceID <= 0x2BB8802F]
[02:30:39.196]      version = deviceID >> 28;
[02:30:39.196]        // -> [version <= 0x00000002]
[02:30:39.196]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:30:39.196]        // -> [partNum <= 0x0000BB88]
[02:30:39.196]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:30:39.196]        // -> [manuf <= 0x00000017]
[02:30:39.196]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:30:39.196]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:30:39.196]      isProduction = (version > 0);
[02:30:39.197]        // -> [isProduction <= 0x00000001]
[02:30:39.197]    </block>
[02:30:39.197]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:30:39.197]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:30:39.197]        // =>  FALSE
[02:30:39.197]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:30:39.197]    </control>
[02:30:39.197]    <control if="continueId == 4" while="" timeout="0" info="">
[02:30:39.198]      // if-block "continueId == 4"
[02:30:39.198]        // =>  FALSE
[02:30:39.198]      // skip if-block "continueId == 4"
[02:30:39.198]    </control>
[02:30:39.198]    <control if="!isProduction" while="" timeout="0" info="">
[02:30:39.198]      // if-block "!isProduction"
[02:30:39.198]        // =>  FALSE
[02:30:39.198]      // skip if-block "!isProduction"
[02:30:39.198]    </control>
[02:30:39.198]  </sequence>
[02:30:39.198]  
[02:35:33.923]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:35:33.923]  
[02:35:33.923]  <debugvars>
[02:35:33.923]    // Pre-defined
[02:35:33.923]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:35:33.923]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:35:33.923]    __dp=0x00000000
[02:35:33.925]    __ap=0x00000000
[02:35:33.925]    __traceout=0x00000000      (Trace Disabled)
[02:35:33.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:35:33.925]    __FlashAddr=0x00000000
[02:35:33.925]    __FlashLen=0x00000000
[02:35:33.925]    __FlashArg=0x00000000
[02:35:33.925]    __FlashOp=0x00000000
[02:35:33.925]    __Result=0x00000000
[02:35:33.925]  </debugvars>
[02:35:33.925]  
[02:35:33.925]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:35:33.925]    <block atomic="false" info="">
[02:35:33.925]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:35:33.925]        // -> [isSWJ <= 0x00000001]
[02:35:33.925]      __var hasDormant = __protocol & 0x00020000;
[02:35:33.925]        // -> [hasDormant <= 0x00000000]
[02:35:33.925]      __var protType   = __protocol & 0x0000FFFF;
[02:35:33.927]        // -> [protType <= 0x00000002]
[02:35:33.927]    </block>
[02:35:33.927]    <control if="protType == 1" while="" timeout="0" info="">
[02:35:33.927]      // if-block "protType == 1"
[02:35:33.927]        // =>  FALSE
[02:35:33.927]      // skip if-block "protType == 1"
[02:35:33.928]    </control>
[02:35:33.928]    <control if="protType == 2" while="" timeout="0" info="">
[02:35:33.928]      // if-block "protType == 2"
[02:35:33.928]        // =>  TRUE
[02:35:33.928]      <control if="isSWJ" while="" timeout="0" info="">
[02:35:33.928]        // if-block "isSWJ"
[02:35:33.929]          // =>  TRUE
[02:35:33.929]        <control if="hasDormant" while="" timeout="0" info="">
[02:35:33.929]          // if-block "hasDormant"
[02:35:33.929]            // =>  FALSE
[02:35:33.929]          // skip if-block "hasDormant"
[02:35:33.929]        </control>
[02:35:33.930]        <control if="!hasDormant" while="" timeout="0" info="">
[02:35:33.930]          // if-block "!hasDormant"
[02:35:33.930]            // =>  TRUE
[02:35:33.930]          <block atomic="false" info="">
[02:35:33.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:35:33.943]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:35:33.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:35:33.945]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:35:33.945]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:35:33.948]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:35:33.948]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:35:33.950]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:35:33.950]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:35:33.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:35:33.952]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:35:33.956]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:35:33.956]          </block>
[02:35:33.956]          // end if-block "!hasDormant"
[02:35:33.956]        </control>
[02:35:33.956]        // end if-block "isSWJ"
[02:35:33.956]      </control>
[02:35:33.956]      <control if="!isSWJ" while="" timeout="0" info="">
[02:35:33.956]        // if-block "!isSWJ"
[02:35:33.957]          // =>  FALSE
[02:35:33.957]        // skip if-block "!isSWJ"
[02:35:33.957]      </control>
[02:35:33.957]      <block atomic="false" info="">
[02:35:33.957]        ReadDP(0x0);
[02:35:33.958]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:35:33.959]      </block>
[02:35:33.959]      // end if-block "protType == 2"
[02:35:33.959]    </control>
[02:35:33.959]  </sequence>
[02:35:33.959]  
[02:35:33.962]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:35:33.962]  
[02:35:33.962]  <debugvars>
[02:35:33.962]    // Pre-defined
[02:35:33.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:35:33.963]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:35:33.963]    __dp=0x00000000
[02:35:33.963]    __ap=0x00000000
[02:35:33.963]    __traceout=0x00000000      (Trace Disabled)
[02:35:33.963]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:35:33.963]    __FlashAddr=0x00000000
[02:35:33.963]    __FlashLen=0x00000000
[02:35:33.963]    __FlashArg=0x00000000
[02:35:33.963]    __FlashOp=0x00000000
[02:35:33.963]    __Result=0x00000000
[02:35:33.964]  </debugvars>
[02:35:33.964]  
[02:35:33.965]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:35:33.965]    <block atomic="false" info="">
[02:35:33.965]      __var SW_DP_ABORT       = 0x0;
[02:35:33.965]        // -> [SW_DP_ABORT <= 0x00000000]
[02:35:33.965]      __var DP_CTRL_STAT      = 0x4;
[02:35:33.965]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:35:33.965]      __var DP_SELECT         = 0x8;
[02:35:33.965]        // -> [DP_SELECT <= 0x00000008]
[02:35:33.965]      __var powered_down      = 0;
[02:35:33.965]        // -> [powered_down <= 0x00000000]
[02:35:33.966]      WriteDP(DP_SELECT, 0x00000000);
[02:35:33.970]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:35:33.970]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:35:33.972]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:35:33.972]        // -> [powered_down <= 0x00000001]
[02:35:33.974]    </block>
[02:35:33.974]    <control if="powered_down" while="" timeout="0" info="">
[02:35:33.974]      // if-block "powered_down"
[02:35:33.974]        // =>  TRUE
[02:35:33.974]      <block atomic="false" info="">
[02:35:33.974]        Message(0, "Debug/System power-up request sent");
[02:35:33.977]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:35:33.978]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:35:33.978]      </block>
[02:35:33.980]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:35:33.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:35:33.982]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:35:33.982]        // while-condition  =>  FALSE
[02:35:33.982]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:35:33.982]      </control>
[02:35:33.982]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:35:33.982]        // if-block "(__protocol & 0xFFFF) == 1"
[02:35:33.982]          // =>  FALSE
[02:35:33.982]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:35:33.982]      </control>
[02:35:33.983]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:35:33.983]        // if-block "(__protocol & 0xFFFF) == 2"
[02:35:33.984]          // =>  TRUE
[02:35:33.984]        <block atomic="false" info="">
[02:35:33.984]          Message(0, "executing SWD power up");
[02:35:33.986]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:35:33.993]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:35:33.993]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:35:34.001]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:35:34.001]        </block>
[02:35:34.001]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:35:34.001]      </control>
[02:35:34.001]      // end if-block "powered_down"
[02:35:34.001]    </control>
[02:35:34.001]    <block atomic="false" info="">
[02:35:34.001]      __var DEBUG_PORT_VAL    = 0;
[02:35:34.001]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:35:34.001]      __var ACCESS_POINT_VAL  = 0;
[02:35:34.002]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:35:34.002]      __ap = 1; 
[02:35:34.002]        // -> [__ap <= 0x00000001]
[02:35:34.002]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:35:34.008]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:35:34.008]      __ap = 4;
[02:35:34.009]        // -> [__ap <= 0x00000004]
[02:35:34.009]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:35:34.012]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:35:34.012]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:35:34.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:35:34.015]    </block>
[02:35:34.015]    <block atomic="false" info="">
[02:35:34.015]      __var nReset = 0x80;
[02:35:34.015]        // -> [nReset <= 0x00000080]
[02:35:34.016]      __var canReadPins = 0;
[02:35:34.016]        // -> [canReadPins <= 0x00000000]
[02:35:34.016]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:35:34.018]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:35:34.018]        // -> [canReadPins <= 0x00000001]
[02:35:34.018]    </block>
[02:35:34.018]    <control if="" while="1" timeout="200" info="">
[02:35:34.018]      // while "1"  (timeout="200")
[02:35:34.018]      // while-condition  =>  TRUE
[02:35:34.018]      // while "1"  (timeout="200")
[02:35:34.018]      // while-condition  =>  TRUE
[02:35:34.018]      // while "1"  (timeout="200")
[02:35:34.019]      // while-condition  =>  TRUE
[02:35:34.019]      // while "1"  (timeout="200")
[02:35:34.019]      // while-condition  =>  TRUE
[02:35:34.019]      // while "1"  (timeout="200")
[02:35:34.019]      // while-condition  =>  TRUE
[02:35:34.019]      // while "1"  (timeout="200")
[02:35:34.019]      // while-condition  =>  TRUE
[02:35:34.019]      // while "1"  (timeout="200")
[02:35:34.019]      // while-condition  =>  TRUE
[02:35:34.020]      // while "1"  (timeout="200")
[02:35:34.020]      // while-condition  =>  TRUE
[02:35:34.020]      // while "1"  (timeout="200")
[02:35:34.020]      // while-condition  =>  TRUE
[02:35:34.020]      // while "1"  (timeout="200")
[02:35:34.020]      // while-condition  =>  TRUE
[02:35:34.020]      // while "1"  (timeout="200")
[02:35:34.020]      // while-condition  =>  TRUE
[02:35:34.020]      // while "1"  (timeout="200")
[02:35:34.021]      // while-condition  =>  TRUE
[02:35:34.021]      // while "1"  (timeout="200")
[02:35:34.021]      // while-condition  =>  TRUE
[02:35:34.021]      // while "1"  (timeout="200")
[02:35:34.021]      // while-condition  =>  TRUE
[02:35:34.021]      // while "1"  (timeout="200")
[02:35:34.021]      // while-condition  =>  TRUE
[02:35:34.021]      // while "1"  (timeout="200")
[02:35:34.021]      // while-condition  =>  TRUE
[02:35:34.021]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.022]      // while "1"  (timeout="200")
[02:35:34.022]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.024]      // while "1"  (timeout="200")
[02:35:34.024]      // while-condition  =>  TRUE
[02:35:34.025]      // while "1"  (timeout="200")
[02:35:34.025]      // while-condition  =>  TRUE
[02:35:34.025]      // while "1"  (timeout="200")
[02:35:34.025]      // while-condition  =>  TRUE
[02:35:34.025]      // while "1"  (timeout="200")
[02:35:34.025]      // while-condition  =>  TRUE
[02:35:34.025]      // while "1"  (timeout="200")
[02:35:34.025]      // while-condition  =>  TRUE
[02:35:34.025]      // while "1"  (timeout="200")
[02:35:34.026]      // while-condition  =>  TRUE
[02:35:34.026]      // while "1"  (timeout="200")
[02:35:34.026]      // while-condition  =>  TRUE
[02:35:34.026]      // while "1"  (timeout="200")
[02:35:34.026]      // while-condition  =>  TRUE
[02:35:34.026]      // while "1"  (timeout="200")
[02:35:34.026]      // while-condition  =>  TRUE
[02:35:34.026]      // while "1"  (timeout="200")
[02:35:34.026]      // while-condition  =>  TRUE
[02:35:34.028]      // while "1"  (timeout="200")
[02:35:34.028]      // while-condition  =>  TRUE
[02:35:34.028]      // while "1"  (timeout="200")
[02:35:34.028]      // while-condition  =>  TRUE
[02:35:34.028]      // while "1"  (timeout="200")
[02:35:34.028]      // while-condition  =>  TRUE
[02:35:34.029]      // while "1"  (timeout="200")
[02:35:34.029]      // while-condition  =>  TRUE
[02:35:34.029]      // while "1"  (timeout="200")
[02:35:34.029]      // while-condition  =>  TRUE
[02:35:34.029]      // while "1"  (timeout="200")
[02:35:34.029]      // while-condition  =>  TRUE
[02:35:34.029]      // while "1"  (timeout="200")
[02:35:34.030]      // while-condition  =>  TRUE
[02:35:34.030]      // while "1"  (timeout="200")
[02:35:34.030]      // while-condition  =>  TRUE
[02:35:34.030]      // while "1"  (timeout="200")
[02:35:34.030]      // while-condition  =>  TRUE
[02:35:34.030]      // while "1"  (timeout="200")
[02:35:34.030]      // while-condition  =>  TRUE
[02:35:34.030]      // while "1"  (timeout="200")
[02:35:34.030]      // while-condition  =>  TRUE
[02:35:34.030]      // while "1"  (timeout="200")
[02:35:34.031]      // while-condition  =>  TRUE
[02:35:34.031]      // while "1"  (timeout="200")
[02:35:34.031]      // while-condition  =>  TRUE
[02:35:34.031]      // while "1"  (timeout="200")
[02:35:34.031]      // while-condition  =>  TRUE
[02:35:34.031]      // while "1"  (timeout="200")
[02:35:34.031]      // while-condition  =>  TRUE
[02:35:34.031]      // while "1"  (timeout="200")
[02:35:34.031]      // while-condition  =>  TRUE
[02:35:34.031]      // while "1"  (timeout="200")
[02:35:34.031]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.032]      // while "1"  (timeout="200")
[02:35:34.032]      // while-condition  =>  TRUE
[02:35:34.033]      // while "1"  (timeout="200")
[02:35:34.033]      // while  =>  TIMEOUT
[02:35:34.033]      // end while "1"
[02:35:34.033]    </control>
[02:35:34.033]    <control if="canReadPins" while="" timeout="0" info="">
[02:35:34.033]      // if-block "canReadPins"
[02:35:34.033]        // =>  TRUE
[02:35:34.033]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:35:34.033]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:35:34.036]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:35:34.036]        // while-condition  =>  FALSE
[02:35:34.036]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:35:34.036]      </control>
[02:35:34.036]      // end if-block "canReadPins"
[02:35:34.036]    </control>
[02:35:34.036]    <control if="!canReadPins" while="" timeout="0" info="">
[02:35:34.036]      // if-block "!canReadPins"
[02:35:34.037]        // =>  FALSE
[02:35:34.037]      // skip if-block "!canReadPins"
[02:35:34.037]    </control>
[02:35:34.037]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:35:34.037]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:35:34.037]        // =>  TRUE
[02:35:34.037]      <block atomic="false" info="">
[02:35:34.037]        WriteAP(0x00, 0x190008);
[02:35:34.039]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:35:34.040]        WriteAP(0xF0, 0x01);
[02:35:34.043]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:35:34.043]      </block>
[02:35:34.043]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:35:34.043]    </control>
[02:35:34.043]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:35:34.043]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:35:34.043]        // =>  FALSE
[02:35:34.044]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:35:34.044]    </control>
[02:35:34.044]    <block atomic="false" info="">
[02:35:34.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:35:34.048]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:35:34.048]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:35:34.048]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:35:34.050]      __ap = 0; //lets make sure we reset the access point selection
[02:35:34.050]        // -> [__ap <= 0x00000000]
[02:35:34.050]    </block>
[02:35:34.051]  </sequence>
[02:35:34.051]  
[02:35:34.085]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:35:34.085]  
[02:35:34.085]  <debugvars>
[02:35:34.085]    // Pre-defined
[02:35:34.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:35:34.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:35:34.086]    __dp=0x00000000
[02:35:34.086]    __ap=0x00000000
[02:35:34.087]    __traceout=0x00000000      (Trace Disabled)
[02:35:34.087]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:35:34.087]    __FlashAddr=0x00000000
[02:35:34.087]    __FlashLen=0x00000000
[02:35:34.087]    __FlashArg=0x00000000
[02:35:34.087]    __FlashOp=0x00000000
[02:35:34.087]    __Result=0x00000000
[02:35:34.087]  </debugvars>
[02:35:34.087]  
[02:35:34.087]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:35:34.087]    <block atomic="false" info="">
[02:35:34.087]      __var deviceID = 0;
[02:35:34.088]        // -> [deviceID <= 0x00000000]
[02:35:34.088]      __var version = 0;
[02:35:34.088]        // -> [version <= 0x00000000]
[02:35:34.088]      __var partNum = 0;
[02:35:34.088]        // -> [partNum <= 0x00000000]
[02:35:34.088]      __var manuf = 0;
[02:35:34.088]        // -> [manuf <= 0x00000000]
[02:35:34.088]      __var isMSPM0G1X0X_G3X0X = 0;
[02:35:34.088]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:35:34.088]      __var isProduction = 0;
[02:35:34.089]        // -> [isProduction <= 0x00000000]
[02:35:34.089]      __var continueId = 0;
[02:35:34.089]        // -> [continueId <= 0x00000000]
[02:35:34.089]      deviceID =   Read32(0x41C40004);
[02:35:34.103]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:35:34.103]        // -> [deviceID <= 0x2BB8802F]
[02:35:34.104]      version = deviceID >> 28;
[02:35:34.104]        // -> [version <= 0x00000002]
[02:35:34.104]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:35:34.104]        // -> [partNum <= 0x0000BB88]
[02:35:34.104]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:35:34.104]        // -> [manuf <= 0x00000017]
[02:35:34.104]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:35:34.104]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:35:34.104]      isProduction = (version > 0);
[02:35:34.105]        // -> [isProduction <= 0x00000001]
[02:35:34.105]    </block>
[02:35:34.105]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:35:34.105]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:35:34.105]        // =>  FALSE
[02:35:34.105]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:35:34.105]    </control>
[02:35:34.105]    <control if="continueId == 4" while="" timeout="0" info="">
[02:35:34.105]      // if-block "continueId == 4"
[02:35:34.105]        // =>  FALSE
[02:35:34.105]      // skip if-block "continueId == 4"
[02:35:34.106]    </control>
[02:35:34.106]    <control if="!isProduction" while="" timeout="0" info="">
[02:35:34.106]      // if-block "!isProduction"
[02:35:34.106]        // =>  FALSE
[02:35:34.106]      // skip if-block "!isProduction"
[02:35:34.106]    </control>
[02:35:34.106]  </sequence>
[02:35:34.106]  
[02:38:26.395]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:38:26.395]  
[02:38:26.404]  <debugvars>
[02:38:26.404]    // Pre-defined
[02:38:26.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:26.404]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:26.404]    __dp=0x00000000
[02:38:26.405]    __ap=0x00000000
[02:38:26.405]    __traceout=0x00000000      (Trace Disabled)
[02:38:26.405]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:26.405]    __FlashAddr=0x00000000
[02:38:26.405]    __FlashLen=0x00000000
[02:38:26.405]    __FlashArg=0x00000000
[02:38:26.406]    __FlashOp=0x00000000
[02:38:26.406]    __Result=0x00000000
[02:38:26.406]  </debugvars>
[02:38:26.406]  
[02:38:26.406]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:38:26.406]    <block atomic="false" info="">
[02:38:26.406]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:38:26.406]        // -> [isSWJ <= 0x00000001]
[02:38:26.406]      __var hasDormant = __protocol & 0x00020000;
[02:38:26.406]        // -> [hasDormant <= 0x00000000]
[02:38:26.407]      __var protType   = __protocol & 0x0000FFFF;
[02:38:26.407]        // -> [protType <= 0x00000002]
[02:38:26.407]    </block>
[02:38:26.407]    <control if="protType == 1" while="" timeout="0" info="">
[02:38:26.407]      // if-block "protType == 1"
[02:38:26.407]        // =>  FALSE
[02:38:26.408]      // skip if-block "protType == 1"
[02:38:26.408]    </control>
[02:38:26.408]    <control if="protType == 2" while="" timeout="0" info="">
[02:38:26.408]      // if-block "protType == 2"
[02:38:26.408]        // =>  TRUE
[02:38:26.408]      <control if="isSWJ" while="" timeout="0" info="">
[02:38:26.408]        // if-block "isSWJ"
[02:38:26.409]          // =>  TRUE
[02:38:26.409]        <control if="hasDormant" while="" timeout="0" info="">
[02:38:26.409]          // if-block "hasDormant"
[02:38:26.409]            // =>  FALSE
[02:38:26.409]          // skip if-block "hasDormant"
[02:38:26.409]        </control>
[02:38:26.409]        <control if="!hasDormant" while="" timeout="0" info="">
[02:38:26.409]          // if-block "!hasDormant"
[02:38:26.409]            // =>  TRUE
[02:38:26.409]          <block atomic="false" info="">
[02:38:26.410]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:38:26.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:26.414]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:38:26.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:38:26.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:38:26.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:26.417]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:38:26.418]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:38:26.419]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:38:26.420]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:38:26.420]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:38:26.421]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:38:26.421]          </block>
[02:38:26.422]          // end if-block "!hasDormant"
[02:38:26.422]        </control>
[02:38:26.422]        // end if-block "isSWJ"
[02:38:26.422]      </control>
[02:38:26.422]      <control if="!isSWJ" while="" timeout="0" info="">
[02:38:26.422]        // if-block "!isSWJ"
[02:38:26.422]          // =>  FALSE
[02:38:26.422]        // skip if-block "!isSWJ"
[02:38:26.422]      </control>
[02:38:26.422]      <block atomic="false" info="">
[02:38:26.422]        ReadDP(0x0);
[02:38:26.424]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:38:26.424]      </block>
[02:38:26.424]      // end if-block "protType == 2"
[02:38:26.424]    </control>
[02:38:26.425]  </sequence>
[02:38:26.425]  
[02:38:26.427]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:38:26.427]  
[02:38:26.427]  <debugvars>
[02:38:26.427]    // Pre-defined
[02:38:26.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:26.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:26.428]    __dp=0x00000000
[02:38:26.428]    __ap=0x00000000
[02:38:26.428]    __traceout=0x00000000      (Trace Disabled)
[02:38:26.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:26.428]    __FlashAddr=0x00000000
[02:38:26.428]    __FlashLen=0x00000000
[02:38:26.428]    __FlashArg=0x00000000
[02:38:26.428]    __FlashOp=0x00000000
[02:38:26.428]    __Result=0x00000000
[02:38:26.429]  </debugvars>
[02:38:26.429]  
[02:38:26.429]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:38:26.429]    <block atomic="false" info="">
[02:38:26.429]      __var SW_DP_ABORT       = 0x0;
[02:38:26.429]        // -> [SW_DP_ABORT <= 0x00000000]
[02:38:26.429]      __var DP_CTRL_STAT      = 0x4;
[02:38:26.429]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:38:26.429]      __var DP_SELECT         = 0x8;
[02:38:26.429]        // -> [DP_SELECT <= 0x00000008]
[02:38:26.430]      __var powered_down      = 0;
[02:38:26.430]        // -> [powered_down <= 0x00000000]
[02:38:26.430]      WriteDP(DP_SELECT, 0x00000000);
[02:38:26.431]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:38:26.431]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:38:26.433]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:38:26.433]        // -> [powered_down <= 0x00000001]
[02:38:26.434]    </block>
[02:38:26.434]    <control if="powered_down" while="" timeout="0" info="">
[02:38:26.434]      // if-block "powered_down"
[02:38:26.434]        // =>  TRUE
[02:38:26.434]      <block atomic="false" info="">
[02:38:26.434]        Message(0, "Debug/System power-up request sent");
[02:38:26.434]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:38:26.437]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:38:26.437]      </block>
[02:38:26.437]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:38:26.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:38:26.439]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:38:26.439]        // while-condition  =>  FALSE
[02:38:26.439]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:38:26.439]      </control>
[02:38:26.439]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:38:26.439]        // if-block "(__protocol & 0xFFFF) == 1"
[02:38:26.439]          // =>  FALSE
[02:38:26.439]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:38:26.439]      </control>
[02:38:26.440]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:38:26.440]        // if-block "(__protocol & 0xFFFF) == 2"
[02:38:26.440]          // =>  TRUE
[02:38:26.440]        <block atomic="false" info="">
[02:38:26.440]          Message(0, "executing SWD power up");
[02:38:26.441]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:38:26.442]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:38:26.443]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:38:26.444]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:38:26.445]        </block>
[02:38:26.445]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:38:26.445]      </control>
[02:38:26.445]      // end if-block "powered_down"
[02:38:26.445]    </control>
[02:38:26.445]    <block atomic="false" info="">
[02:38:26.446]      __var DEBUG_PORT_VAL    = 0;
[02:38:26.446]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:38:26.446]      __var ACCESS_POINT_VAL  = 0;
[02:38:26.446]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:38:26.446]      __ap = 1; 
[02:38:26.446]        // -> [__ap <= 0x00000001]
[02:38:26.446]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:38:26.453]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:38:26.453]      __ap = 4;
[02:38:26.453]        // -> [__ap <= 0x00000004]
[02:38:26.453]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:38:26.457]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:38:26.457]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:38:26.457]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:38:26.458]    </block>
[02:38:26.458]    <block atomic="false" info="">
[02:38:26.458]      __var nReset = 0x80;
[02:38:26.458]        // -> [nReset <= 0x00000080]
[02:38:26.458]      __var canReadPins = 0;
[02:38:26.458]        // -> [canReadPins <= 0x00000000]
[02:38:26.458]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:38:26.461]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:38:26.461]        // -> [canReadPins <= 0x00000001]
[02:38:26.461]    </block>
[02:38:26.461]    <control if="" while="1" timeout="200" info="">
[02:38:26.461]      // while "1"  (timeout="200")
[02:38:26.461]      // while-condition  =>  TRUE
[02:38:26.461]      // while "1"  (timeout="200")
[02:38:26.461]      // while-condition  =>  TRUE
[02:38:26.461]      // while "1"  (timeout="200")
[02:38:26.461]      // while-condition  =>  TRUE
[02:38:26.461]      // while "1"  (timeout="200")
[02:38:26.462]      // while-condition  =>  TRUE
[02:38:26.462]      // while "1"  (timeout="200")
[02:38:26.462]      // while-condition  =>  TRUE
[02:38:26.462]      // while "1"  (timeout="200")
[02:38:26.462]      // while-condition  =>  TRUE
[02:38:26.462]      // while "1"  (timeout="200")
[02:38:26.462]      // while-condition  =>  TRUE
[02:38:26.462]      // while "1"  (timeout="200")
[02:38:26.462]      // while-condition  =>  TRUE
[02:38:26.462]      // while "1"  (timeout="200")
[02:38:26.463]      // while-condition  =>  TRUE
[02:38:26.463]      // while "1"  (timeout="200")
[02:38:26.463]      // while-condition  =>  TRUE
[02:38:26.463]      // while "1"  (timeout="200")
[02:38:26.463]      // while-condition  =>  TRUE
[02:38:26.463]      // while "1"  (timeout="200")
[02:38:26.463]      // while-condition  =>  TRUE
[02:38:26.463]      // while "1"  (timeout="200")
[02:38:26.464]      // while-condition  =>  TRUE
[02:38:26.464]      // while "1"  (timeout="200")
[02:38:26.464]      // while-condition  =>  TRUE
[02:38:26.464]      // while "1"  (timeout="200")
[02:38:26.464]      // while-condition  =>  TRUE
[02:38:26.464]      // while "1"  (timeout="200")
[02:38:26.464]      // while-condition  =>  TRUE
[02:38:26.464]      // while "1"  (timeout="200")
[02:38:26.464]      // while-condition  =>  TRUE
[02:38:26.465]      // while "1"  (timeout="200")
[02:38:26.465]      // while-condition  =>  TRUE
[02:38:26.465]      // while "1"  (timeout="200")
[02:38:26.465]      // while-condition  =>  TRUE
[02:38:26.465]      // while "1"  (timeout="200")
[02:38:26.465]      // while-condition  =>  TRUE
[02:38:26.466]      // while "1"  (timeout="200")
[02:38:26.466]      // while-condition  =>  TRUE
[02:38:26.466]      // while "1"  (timeout="200")
[02:38:26.466]      // while-condition  =>  TRUE
[02:38:26.466]      // while "1"  (timeout="200")
[02:38:26.466]      // while-condition  =>  TRUE
[02:38:26.466]      // while "1"  (timeout="200")
[02:38:26.466]      // while-condition  =>  TRUE
[02:38:26.466]      // while "1"  (timeout="200")
[02:38:26.466]      // while-condition  =>  TRUE
[02:38:26.467]      // while "1"  (timeout="200")
[02:38:26.467]      // while-condition  =>  TRUE
[02:38:26.467]      // while "1"  (timeout="200")
[02:38:26.467]      // while-condition  =>  TRUE
[02:38:26.467]      // while "1"  (timeout="200")
[02:38:26.467]      // while-condition  =>  TRUE
[02:38:26.467]      // while "1"  (timeout="200")
[02:38:26.467]      // while-condition  =>  TRUE
[02:38:26.468]      // while "1"  (timeout="200")
[02:38:26.468]      // while-condition  =>  TRUE
[02:38:26.468]      // while "1"  (timeout="200")
[02:38:26.468]      // while-condition  =>  TRUE
[02:38:26.468]      // while "1"  (timeout="200")
[02:38:26.468]      // while-condition  =>  TRUE
[02:38:26.468]      // while "1"  (timeout="200")
[02:38:26.468]      // while-condition  =>  TRUE
[02:38:26.468]      // while "1"  (timeout="200")
[02:38:26.468]      // while-condition  =>  TRUE
[02:38:26.469]      // while "1"  (timeout="200")
[02:38:26.469]      // while-condition  =>  TRUE
[02:38:26.469]      // while "1"  (timeout="200")
[02:38:26.469]      // while-condition  =>  TRUE
[02:38:26.469]      // while "1"  (timeout="200")
[02:38:26.469]      // while-condition  =>  TRUE
[02:38:26.469]      // while "1"  (timeout="200")
[02:38:26.469]      // while-condition  =>  TRUE
[02:38:26.470]      // while "1"  (timeout="200")
[02:38:26.470]      // while  =>  TIMEOUT
[02:38:26.470]      // end while "1"
[02:38:26.470]    </control>
[02:38:26.470]    <control if="canReadPins" while="" timeout="0" info="">
[02:38:26.470]      // if-block "canReadPins"
[02:38:26.470]        // =>  TRUE
[02:38:26.470]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:38:26.471]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:38:26.472]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:38:26.472]        // while-condition  =>  FALSE
[02:38:26.472]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:38:26.472]      </control>
[02:38:26.472]      // end if-block "canReadPins"
[02:38:26.472]    </control>
[02:38:26.472]    <control if="!canReadPins" while="" timeout="0" info="">
[02:38:26.472]      // if-block "!canReadPins"
[02:38:26.473]        // =>  FALSE
[02:38:26.474]      // skip if-block "!canReadPins"
[02:38:26.474]    </control>
[02:38:26.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:38:26.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:38:26.474]        // =>  TRUE
[02:38:26.474]      <block atomic="false" info="">
[02:38:26.474]        WriteAP(0x00, 0x190008);
[02:38:26.475]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:38:26.475]        WriteAP(0xF0, 0x01);
[02:38:26.482]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:38:26.482]      </block>
[02:38:26.483]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:38:26.483]    </control>
[02:38:26.483]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:38:26.483]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:38:26.483]        // =>  FALSE
[02:38:26.483]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:38:26.483]    </control>
[02:38:26.483]    <block atomic="false" info="">
[02:38:26.483]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:38:26.487]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:38:26.487]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:38:26.487]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:38:26.488]      __ap = 0; //lets make sure we reset the access point selection
[02:38:26.488]        // -> [__ap <= 0x00000000]
[02:38:26.488]    </block>
[02:38:26.488]  </sequence>
[02:38:26.488]  
[02:38:26.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:38:26.522]  
[02:38:26.522]  <debugvars>
[02:38:26.522]    // Pre-defined
[02:38:26.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:38:26.522]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:38:26.522]    __dp=0x00000000
[02:38:26.522]    __ap=0x00000000
[02:38:26.522]    __traceout=0x00000000      (Trace Disabled)
[02:38:26.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:38:26.522]    __FlashAddr=0x00000000
[02:38:26.522]    __FlashLen=0x00000000
[02:38:26.524]    __FlashArg=0x00000000
[02:38:26.524]    __FlashOp=0x00000000
[02:38:26.524]    __Result=0x00000000
[02:38:26.524]  </debugvars>
[02:38:26.524]  
[02:38:26.524]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:38:26.524]    <block atomic="false" info="">
[02:38:26.524]      __var deviceID = 0;
[02:38:26.524]        // -> [deviceID <= 0x00000000]
[02:38:26.524]      __var version = 0;
[02:38:26.525]        // -> [version <= 0x00000000]
[02:38:26.525]      __var partNum = 0;
[02:38:26.525]        // -> [partNum <= 0x00000000]
[02:38:26.525]      __var manuf = 0;
[02:38:26.525]        // -> [manuf <= 0x00000000]
[02:38:26.525]      __var isMSPM0G1X0X_G3X0X = 0;
[02:38:26.525]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:38:26.526]      __var isProduction = 0;
[02:38:26.526]        // -> [isProduction <= 0x00000000]
[02:38:26.526]      __var continueId = 0;
[02:38:26.526]        // -> [continueId <= 0x00000000]
[02:38:26.526]      deviceID =   Read32(0x41C40004);
[02:38:26.532]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:38:26.532]        // -> [deviceID <= 0x2BB8802F]
[02:38:26.532]      version = deviceID >> 28;
[02:38:26.532]        // -> [version <= 0x00000002]
[02:38:26.532]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:38:26.532]        // -> [partNum <= 0x0000BB88]
[02:38:26.532]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:38:26.532]        // -> [manuf <= 0x00000017]
[02:38:26.532]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:38:26.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:38:26.532]      isProduction = (version > 0);
[02:38:26.532]        // -> [isProduction <= 0x00000001]
[02:38:26.532]    </block>
[02:38:26.532]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:38:26.532]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:38:26.532]        // =>  FALSE
[02:38:26.533]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:38:26.533]    </control>
[02:38:26.533]    <control if="continueId == 4" while="" timeout="0" info="">
[02:38:26.533]      // if-block "continueId == 4"
[02:38:26.533]        // =>  FALSE
[02:38:26.533]      // skip if-block "continueId == 4"
[02:38:26.533]    </control>
[02:38:26.533]    <control if="!isProduction" while="" timeout="0" info="">
[02:38:26.534]      // if-block "!isProduction"
[02:38:26.534]        // =>  FALSE
[02:38:26.534]      // skip if-block "!isProduction"
[02:38:26.534]    </control>
[02:38:26.534]  </sequence>
[02:38:26.534]  
